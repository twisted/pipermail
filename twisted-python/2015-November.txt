From glyph at twistedmatrix.com  Sun Nov  1 00:16:32 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 31 Oct 2015 23:16:32 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
Message-ID: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>

There are a few places within Conch which currently export PyCrypto objects as part of a public interface in Twisted.

These include:
twisted.conch.ssh.keys.Key.keyObject
twisted.conch.ssh.keys.objectType
I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to eliminate the dependency on PyCrypto.  Right now, in that branch, those objects are Cryptography key objects instead of PyCrypto key objects.

It is possible to preserve compatibility with keyObject, and we could deprecate and then remove objectType, with conditional dependencies on PyCrypto.  But before I go through the effort there, I'm wondering if any users of conch actually care.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151031/b2e19e70/attachment.html>

From adi at roiban.ro  Sun Nov  1 01:27:23 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 1 Nov 2015 10:27:23 +0200
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <CAFycZ9fJAQ347bOOoUOrdurQSNefArubEV_sKbng1H0WVoMXJA@mail.gmail.com>

On 1 November 2015 at 08:16, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> There are a few places within Conch which currently export PyCrypto objects
> as part of a public interface in Twisted.
>
> These include:
>
> twisted.conch.ssh.keys.Key.keyObject
> twisted.conch.ssh.keys.objectType
>
> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to
> eliminate the dependency on PyCrypto.  Right now, in that branch, those
> objects are Cryptography key objects instead of PyCrypto key objects.
>
> It is possible to preserve compatibility with keyObject, and we could
> deprecate and then remove objectType, with conditional dependencies on
> PyCrypto.  But before I go through the effort there, I'm wondering if any
> users of conch actually care.

I care about conch and PyCrypto, but I prefer to update my own code now.
... rather than work on Twisted to support the compatibility and later
still work on my own code to make it work once compatibility is
removed.

I care about PyCrypto in the sense that I would like to see it gone.

In the same time, I am commited to Twisted deprecation policy and I am
happy to work on having a lean PyCrypto deprecation path.

------------

I see that objectType document that it accepts an
Crypto.PublicKey.pubkey.pubkey.... the latest patch ask for
cryptography.hazmat.primitives.interfaces

I would say that we can deprecate it now without changing the current
implementation and without replacing it with something.

Disclaimer: I have no idea why someone would need that function.

-----------

I think that twisted.conch.ssh.keys.Key.keyObject should also be
deprecated without being replace with something else... as such things
should stay private.


I can work at implementing a compatibility getter / setter for
keyObject while deprecating it in the same time.

-------------

I am happy to work or review any code which tries to remove PyCrypto
dependency and work on deprecating current PyCrytpo dependency.

--------

Many thanks for working on this!

-- 
Adi Roiban


From warner at lothar.com  Sun Nov  1 11:16:06 2015
From: warner at lothar.com (Brian Warner)
Date: Sun, 1 Nov 2015 10:16:06 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
 PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <563656E6.3050609@lothar.com>

On 10/31/15 11:16 PM, Glyph Lefkowitz wrote:

> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 -
> to eliminate the dependency on PyCrypto. Right now, in that branch,
> those objects are Cryptography key objects instead of PyCrypto key
> objects.
> 
> It is /possible/ to preserve compatibility with keyObject, and we
> could deprecate and then remove objectType, with conditional
> dependencies on PyCrypto. But before I go through the effort there,
> I'm wondering if any users of conch actually care.

Tahoe-LAFS uses Conch for two features: an SFTP frontend, and a
"manhole" repl-inside-the-app debugging interface. Neither uses the keys
objects.

Tahoe *does* indicate a dependency on PyCrypto because conch uses it,
and at the time we found it was more reliable to depend upon the
transitive closure of our subdependencies. We'll need to fix that (as we
bring our packaging up to modern standards).

Our SFTP frontend currently uses "from Crypto import Util" as a test to
see whether twisted.conch.ssh.filetransfer is going to work, so the
failure happens early and we can provide a better "your configuration
isn't going to work" error message. I'm guessing we imported pycrypto
rather than t.c.ssh directly to work around some old importer bug (I
vaguely remember something about half-complete imports causing confusion
in some old version of python). The code in question is ancient and
we'll need to update that when Twisted stops using PyCrypto.

But in general, yeah, we'd love to see PyCrypto go away. We currently
depend on pycryptopp (for AES/RSA/Ed25519), PyCrypto (via conch for SFTP
and manhole), and 'cryptography' (via pyOpenSSL via Foolscap for server
connections). Reducing the dependency graph by one node would be great.

cheers,
 -Brian


From zooko at leastauthority.com  Sun Nov  1 15:07:55 2015
From: zooko at leastauthority.com (Zooko Wilcox-OHearn)
Date: Sun, 1 Nov 2015 22:07:55 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <563656E6.3050609@lothar.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
Message-ID: <CAM_a8JwBJJLkammU9ThTfHtGdV1WGYQaBN3tkzAmWyVGReUXzQ@mail.gmail.com>

Yay for removing the dependency on PyCrypto! This would allow these
Twisted tickets to be closed:

* https://twistedmatrix.com/trac/ticket/4633# allow applications to
"bring their own crypto" to avoid the dependency of conch on PyCrypto

* https://twistedmatrix.com/trac/ticket/5577# Using manhole_tap ends
up requiring pycryto, even though only using telnet manhole

* https://twistedmatrix.com/trac/ticket/5805#
twisted.test.test_strcred fails on Python without pycrypto

And this Tahoe-LAFS tickets:

* https://tahoe-lafs.org/trac/tahoe-lafs/ticket/2094# rebuild (if
necessary) PyCrypto eggs to use libgmp >= 5, to mitigate RSA timing
attack

Possibly also this Tahoe-LAFS ticket:

* https://tahoe-lafs.org/trac/tahoe-lafs/ticket/774# pycrypto package
is required for manhole

And it allows us to remove this warning label about potential timing
attacks against the SFTP connection:

https://tahoe-lafs.org/trac/tahoe-lafs/browser/trunk/docs/frontends/FTP-and-SFTP.rst#configuring-sftp-access

Regards,

Zooko


From rgacote at appropriatesolutions.com  Sun Nov  1 17:38:59 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Sun, 1 Nov 2015 19:38:59 -0500
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <CAG5tnzqX13UD8_OTNLZ0NPB81qWSiN5NXmnVkvGAWdrLaw+f4w@mail.gmail.com>

On Sun, Nov 1, 2015 at 1:16 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> here are a few places within Conch which currently export PyCrypto objects
> as part of a public interface in Twisted.
>
> These include:
>
>    - twisted.conch.ssh.keys.Key.keyObject
>    - twisted.conch.ssh.keys.objectType
>
> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to
> eliminate the dependency on PyCrypto.  Right now, in that branch, those
> objects are Cryptography key objects instead of PyCrypto key objects.
>
> It is *possible* to preserve compatibility with keyObject, and we could
> deprecate and then remove objectType, with conditional dependencies on
> PyCrypto.  But before I go through the effort there, I'm wondering if any
> users of conch actually care.
>

We have a custom SFTP server based on conch.
In reviewing the code, it looks like I don?t care about the change (aside
from appreciating one less dependency).
In reviewing our code, the only key references are as follows:

    from twisted.conch.ssh.factory import SSHFactory
    public_key = getRSAKey('id_rsa.pub')
    private_key = getRSAKey(?id_rsa')factory = SSHFactory()
    factory.publicKeys = {'ssh-rsa': public_key}
    factory.privateKeys = {'ssh-rsa': private_key}
?Ray



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151101/5bd37211/attachment.html>

From glyph at twistedmatrix.com  Sun Nov  1 18:19:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 1 Nov 2015 17:19:19 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <563656E6.3050609@lothar.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
Message-ID: <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>


> On Nov 1, 2015, at 10:16, Brian Warner <warner at lothar.com> wrote:
> 
> On 10/31/15 11:16 PM, Glyph Lefkowitz wrote:
> 
>> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 -
>> to eliminate the dependency on PyCrypto. Right now, in that branch,
>> those objects are Cryptography key objects instead of PyCrypto key
>> objects.
>> 
>> It is /possible/ to preserve compatibility with keyObject, and we
>> could deprecate and then remove objectType, with conditional
>> dependencies on PyCrypto. But before I go through the effort there,
>> I'm wondering if any users of conch actually care.
> 
> Tahoe-LAFS uses Conch for two features: an SFTP frontend, and a
> "manhole" repl-inside-the-app debugging interface. Neither uses the keys
> objects.

Thanks for checking on that.

> Tahoe *does* indicate a dependency on PyCrypto because conch uses it,
> and at the time we found it was more reliable to depend upon the
> transitive closure of our subdependencies. We'll need to fix that (as we
> bring our packaging up to modern standards).

I am definitely feeling the pain with you on that one :).

> Our SFTP frontend currently uses "from Crypto import Util" as a test to
> see whether twisted.conch.ssh.filetransfer is going to work, so the
> failure happens early and we can provide a better "your configuration
> isn't going to work" error message. I'm guessing we imported pycrypto
> rather than t.c.ssh directly to work around some old importer bug (I
> vaguely remember something about half-complete imports causing confusion
> in some old version of python). The code in question is ancient and
> we'll need to update that when Twisted stops using PyCrypto.

That interpreter bug was something Twisted had workarounds for too, and I am fairly certain it was fixed in python *2.5*, so it's been QUITE a while since it was a real concern :).  If you can, I'd recommend fixing that conditional import now rather than waiting for a Twisted release that has switched backends.

> But in general, yeah, we'd love to see PyCrypto go away. We currently
> depend on pycryptopp (for AES/RSA/Ed25519), PyCrypto (via conch for SFTP
> and manhole), and 'cryptography' (via pyOpenSSL via Foolscap for server
> connections). Reducing the dependency graph by one node would be great.

Excellent.

It's worth noting that Cryptography now provides good support for AES and RSA (pretty sure this was not true when I was last discussing Cryptography in the context of Tahoe), and has plans for Ed25519 - https://github.com/pyca/cryptography/issues/856 - so you may be able to reduce this even further in the future :).

-glyph

From glyph at twistedmatrix.com  Sun Nov  1 20:09:29 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 1 Nov 2015 19:09:29 -0800
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <56347C60.5080108@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
 <56347C60.5080108@googlemail.com>
Message-ID: <EF666424-DDB7-426A-AD27-F553C002C613@twistedmatrix.com>


> On Oct 31, 2015, at 01:31, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi,
> So I went on the net on the off chance that the info I was looking for was easy to obtain, and I found out about trial.
> 
> I cloned the git and did:
> python bin/trial twisted
> 
> I got the following:

> Is that a trial error or a Twisted test failing?
> 
> Sorry if this is a stupid question, but (terrible, I know) I've never used tests before.
> 
> Another quick google told me that Trial was ported to Python3, so I'm not sure... If it's a test failing, it's not really telling me where the failure is.

Not _all_ of Twisted has been ported to Python 3, so if you run the full test suite (that's what "trial twisted" does) some of it will fail.

If you want to run the parts that are expected to pass, run `python admin/run-python3-tests?.  If those fail then we have a problem :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151101/867f63a5/attachment.html>

From hawkowl at atleastfornow.net  Sun Nov  1 22:40:26 2015
From: hawkowl at atleastfornow.net (Hawkie)
Date: Mon, 02 Nov 2015 13:40:26 +0800
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <EF666424-DDB7-426A-AD27-F553C002C613@twistedmatrix.com>
Message-ID: <01607b25-d2be-46df-b6bc-56d68fbe68e6@email.android.com>

This is on Windows - I've linked the relevant ticket earlier (#8025 iirc?) which will bring Windows up to par.

-Amber

On 2 Nov 2015 11:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
>> On Oct 31, 2015, at 01:31, Chris Norman <chris.norman2 at googlemail.com> wrote:
>>
> Hi,
> So I went on the net on the off chance that the info I was looking for was easy to obtain, and I found out about trial.
>
> I cloned the git and did:
> python bin/trial twisted
>
> I got the following:
>
>> Is that a trial error or a Twisted test failing?
>>
>> Sorry if this is a stupid question, but (terrible, I know) I've never used tests before.
>>
>> Another quick google told me that Trial was ported to Python3, so I'm not sure... If it's a test failing, it's not really telling me where the failure is.
>
>
> Not _all_ of Twisted has been ported to Python 3, so if you run the full test suite (that's what "trial twisted" does) some of it will fail.
>
> If you want to run the parts that are expected to pass, run `python admin/run-python3-tests?. ?If those?fail then we have a problem :).
>
> -glyph
>

From zookog at gmail.com  Mon Nov  2 09:19:17 2015
From: zookog at gmail.com (Zooko Wilcox-O'Hearn)
Date: Mon, 2 Nov 2015 16:19:17 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
 <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>
Message-ID: <CANdZDc4v-y-7LxtLTwbri443_Y3Rt-ObJNyqpD+VMiqMr27N+g@mail.gmail.com>

On Mon, Nov 2, 2015 at 1:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> It's worth noting that Cryptography now provides good support for AES and RSA (pretty sure this was not true when I was last discussing Cryptography in the context of Tahoe), and has plans for Ed25519 - https://github.com/pyca/cryptography/issues/856 - so you may be able to reduce this even further in the future :).

FWIW I would be uncomfortable relying on https://cryptography.io for
Tahoe-LAFS's purposes. I expect to continue to rely on
https://pypi.python.org/pypi/pycryptopp/ for that for the forseeable
future.

Regards,

Zooko


From kobib at mellanox.com  Tue Nov  3 09:16:21 2015
From: kobib at mellanox.com (Kobi Bar)
Date: Tue, 3 Nov 2015 16:16:21 +0000
Subject: [Twisted-Python] Building Twisted 13.2.0 packages for RH 7.0
Message-ID: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>

Hi,

I need to build twisted 13.2.0 packages for RH 7.0.
I downloaded the source from https://pypi.python.org/packages/source/T/Twisted/Twisted-13.2.0.tar.bz2#md5=83fe6c0c911cc1602dbffb036be0ba79.
Currently, I'm able to build only one package "python-twisted-13.2.0-1.x86_64.rpm" (by running the command "python setup.py bdist_rpm") which contains all the sub-projects.
How can I build separate package for each twisted sub-project (e.g. conch, core, mail, web, etc...)?
I would like to have the following twisted packages at the end:
python-twisted-13.2.0-1. x86_64.rpm
python-twisted-conch-13.2.0-1.x86_64.rpm
python-twisted-core-13.2.0-1.x86_64.rpm
python-twisted-lore-13.2.0-1.x86_64.rpm
python-twisted-mail-13.2.0-1.x86_64.rpm
python-twisted-names-13.2.0-1.x86_64.rpm
python-twisted-news-13.2.0-1.x86_64.rpm
python-twisted-runner-13.2.0-1.x86_64.rpm
python-twisted-web-13.2.0-1.x86_64.rpm
python-twisted-words-13.2.0-1.x86_64.rpm

The main reason is that some packages depends on twisted sub-projects, and therefore, their installation fail (e.g. python-txzmq requires python-twisted-core).

Regards,
-----------------------------------------------------------------------------------------------------------------------------
Kobi Bar
Staff SW Engineer, Cloud Solutions
Mellanox Technologies
13 Zarchin street
Raanana, Israel

+972-74-7129166(o)
+972-50-3135001(c)
+972-74-7129111(f)
www.mellanox.com<http://www.mellanox.com/>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151103/b43a79fd/attachment.html>

From glyph at twistedmatrix.com  Tue Nov  3 16:00:13 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 3 Nov 2015 15:00:13 -0800
Subject: [Twisted-Python] Building Twisted 13.2.0 packages for RH 7.0
In-Reply-To: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>
References: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>
Message-ID: <0C471321-31F6-45AB-8E2E-237FE49B18B2@twistedmatrix.com>


> On Nov 3, 2015, at 8:16 AM, Kobi Bar <kobib at mellanox.com> wrote:
> 
> I need to build twisted 13.2.0 packages for RH 7.0.

Why do you need to do this?  Twisted 13.2 is 2 years old at this point, and is missing important features (especially client TLS verification, added in 14.0).  Unless you are upgrading an application that uses older versions of Twisted, you should use the latest version, 15.4 as of this writing.

> How can I build separate package for each twisted sub-project (e.g. conch, core, mail, web, etc?)?

In Twisted 15.3, we stopped shipping sub-projects, so in preparation for that you should build your packages to depend on Twisted as a whole.

One way to do this more easily is to not build packages, but rather to deploy your application into a virtualenv; since subpackages were never really part of dependency trees on PyPI, only in operating system vendor packages, this should be less of a problem there.

I don't actually know how to build RPMs, so I am not holding out on you in terms of how to do it :-).  But if you're not Red Hat yourself, it seems like this is a less and less popular way of integrating applications, and for good reason.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151103/ea365857/attachment.html>

From snailcoder at 163.com  Tue Nov  3 20:15:16 2015
From: snailcoder at 163.com (Wang Yan)
Date: Wed, 4 Nov 2015 11:15:16 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <562CC786.9080004@arskom.com.tr>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
Message-ID: <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>

I'm planning to design some REST APIs with Twisted in Python. For example, I want to use the HTTP method "GET" to fetch a single user's information:

GET http://myhost:8000/api/v1.0/users/[user_id]

I know I should inherit the twisted.web.resource.Resource and implement "getChild" by myself. 
The question is, should I implement a class for each segment of the URI? If so, I have to implement class API, class V1, class Users and Class User. In other words, if there're 10 segments in the URI, do I have to implement 10 classes to represent those resources?






At 2015-10-25 20:13:58, "Burak Arslan" <burak.arslan at arskom.com.tr> wrote:
Hey!


On 10/25/15 13:04, Wang Yan wrote:

Hi,


I'm confused about how to design REST APIs with Twisted, especially when my app have to interact with MySQL. 


Is there any basic design patterns for this kind of situation?

I do Spyne, and I think it's fa-bu-lous for building any web API on top of twisted.

It's a bit different from what you to with stock Twisted though. More specifically, there's no NOT_DONE_YET. The client hangs as long as you keep returning `Deferred`s. Once you return a non-deferred (and hopefully something that's compatible with your designated return type) that object is serialized using the `out_protocol` you pass to your `Application` and the resulting byte stream is written to the outgoing stream of your transport of choice. In case of a HTTP-based api, it's passed to the `transport.write()` function of a `twisted.web.Resource` instance, along with the outgoing headers that you set.

As for the MySQL part, I use SQLAlchemy exclusively from inside a function called by deferToThread. Spyne integrates with SQLAlchemy as well, so you can return directly what SQLA returns, be it objects or rows.

Here's a simple example: https://github.com/arskom/spyne/blob/master/examples/twisted/resource.py

There's a boilerplate generator here: http://spyne.io/

I hope you find it useful. Any questions, people at spyne.io is also at your service.

Best,
Burak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151104/ccc9151b/attachment.html>

From mashiat.sarker at gmail.com  Tue Nov  3 21:09:29 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 3 Nov 2015 23:09:29 -0500
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
Message-ID: <563984F9.3000406@gmail.com>

On 11/3/15 10:15 PM, Wang Yan wrote:
>
> I'm planning to design some REST APIs with Twisted in Python. For 
> example, I want to use the HTTP method "GET" to fetch a single user's 
> information:
>
> |GET http://myhost:8000/api/v1.0/users/[user_id] |
> I know I should inherit the twisted.web.resource.Resource and 
> implement "getChild" by myself.
> The question is, should I implement a class for each segment of the 
> URI? If so, I have to implement class API, class V1, class Users and 
> Class User. In other words, if there're 10 segments in the URI, do I 
> have to implement 10 classes to represent those resources?

Twisted is too low-level for such use in my opinion. We use Klein 
(https://github.com/twisted/klein) which offers nice abstraction above 
Twisted.
I know this does not answer your question. Just wanted to make sure that 
you are aware of possible options.

-Shakkhar

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151103/968e5f7f/attachment.html>

From s.gongoragarcia at gmail.com  Wed Nov  4 10:00:17 2015
From: s.gongoragarcia at gmail.com (=?UTF-8?Q?Samuel_G=C3=B3ngora_Garc=C3=ADa?=)
Date: Wed, 4 Nov 2015 18:00:17 +0100
Subject: [Twisted-Python] How to call a Twisted reactor from a file
	different from his module?
Message-ID: <CAJK=ep-tcDzbnS+SahRwaLDjBVk3+nM707ESgFwY5+iH6uRDnQ@mail.gmail.com>

I have a question that could well belong to Twisted or could be directly
related to Python.

My problem, as the other is related to the disconnection process in
Twisted. As I read on this , if I want to I have to perform the following
steps:

1-The server must stop listening.
2-The client connection must disconnect.
3-The server connection must disconnect.

According to what I read on the previous page to make the first step would
have to run the stopListening method.

In the example mentioned in the web all actions are performed in the same
script. Making it easy to access the different variables and methods.

For me I have a server and a client are in different files and different
locations.

I have a function that creates a server, and assigns a protocol and want,
from the client protocol in another file, make an AMP call to a method for
stop the connector.

The call AMP calls the SendMsg command.





































*class TESTServer(protocol.Protocol):    factory = None    sUsername = ""
  credProto = None    bGSuser = None    slot = None"""Here was
uninteresting code."""            #   upwards=self.bGSuser, forwarded=True,
tx_timestamp=iTimestamp,\            #    message=sMsg)
log.msg("self.connector")        log.msg(self.connector)        return
{'bResult': True}    SendMsg.responder(vSendMsg)    def
_testfunction(self):        logger = logging.getLogger('server')
log.startLogging(sys.stdout)        pf = CredAMPServerFactory()
sslContext = ssl.DefaultOpenSSLContextFactory('key/server.pem',\
 'key/public.pem',)        self.connector = reactor.listenSSL(1234, pf,
contextFactory = sslContext,)        log.msg('Server running...')
reactor.run()if __name__ == '__main__':    TESTServer()._testfunction()*
The class CredAMPServerFactory assign the corresponding protocol.










*class CredAMPServerFactory(ServerFactory):    """    Server factory useful
for creating L{CredReceiver} and L{SATNETServer} instances.    This factory
takes care of associating a L{Portal} with the L{CredReceiver}    instances
it creates. If the login is succesfully achieved, a L{SATNETServer}
instance is also created.    """    protocol = CredReceiver*

In the "CredReceiver" class I have a call that assigns the protocol to the
TestServer class. I do this to make calls using the AMP method "Responder".

*        self.protocol = SATNETServer*

My problem is that when I make the call the program responds with an error
indicating that the connector doesn't belong to CredReceiver attribute
object.



*  File "/home/sgongar/Dev/protocol/server_amp.py", line 248, in vSendMsg
  log.msg(self.connector)exceptions.AttributeError: 'CredReceiver' object
has no attribute 'connector'*

How could I do this? Does anyone know of a similar example of that may take
note?

Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151104/81eec059/attachment-0001.html>

From adi at roiban.ro  Wed Nov  4 15:05:21 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 5 Nov 2015 00:05:21 +0200
Subject: [Twisted-Python] Specification / RFC of the
	twisted.conch.ssh.keys.Key.privateBlob implementation
Message-ID: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>

Hi,

Does anyone know what specifications / RFC is used for implementing
twisted.conch.ssh.keys.Key.privateBlob ?

https://github.com/twisted/twisted/blob/trunk/twisted/conch/ssh/keys.py#L577

I could not find the over-the-wire format for private keys... as I
supposed that private keys should not be put on the wire, in the first
place.

I did find a SSH agent draft
https://tools.ietf.org/html/draft-ietf-secsh-agent-02#section-1.4.1
but the format is different than the one from the docstring.

In twisted privateBlob is only used to support twisted.conch.ssh.agent

Is anyone using this method ?

Thanks!

-- 
Adi Roiban


From adi at roiban.ro  Wed Nov  4 15:11:50 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 5 Nov 2015 00:11:50 +0200
Subject: [Twisted-Python] Specification / RFC of the
	twisted.conch.ssh.keys.Key.privateBlob implementation
In-Reply-To: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>
References: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>
Message-ID: <CAFycZ9cs+3Ya0MSOJ7otNoKD7q3g1i26c7ZWs3H5AUMwgwj3Vw@mail.gmail.com>

On 5 November 2015 at 00:05, Adi Roiban <adi at roiban.ro> wrote:
> Hi,
>
> Does anyone know what specifications / RFC is used for implementing
> twisted.conch.ssh.keys.Key.privateBlob ?
>
> https://github.com/twisted/twisted/blob/trunk/twisted/conch/ssh/keys.py#L577
>
> I could not find the over-the-wire format for private keys... as I
> supposed that private keys should not be put on the wire, in the first
> place.
>
> I did find a SSH agent draft
> https://tools.ietf.org/html/draft-ietf-secsh-agent-02#section-1.4.1
> but the format is different than the one from the docstring.

I guess that this is OpenSSH format as it matches the implementation

https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.agent



-- 
Adi Roiban


From snailcoder at 163.com  Thu Nov  5 02:28:10 2015
From: snailcoder at 163.com (Wang Yan)
Date: Thu, 5 Nov 2015 17:28:10 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <563984F9.3000406@gmail.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
Message-ID: <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>

Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
   
    from flask import Flask
    from flask.ext.restful import Api, Resource

    api = Flask(__name__)
    api = Api(app)

    class UserAPI(Resource):
        def get(self, user_id):
            pass

        def post(self, user_id):
            pass

    api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')

Is there any similar usage in Klein?







? 2015-11-04 12:09:29?"Mashiat Sarker Shakkhar" <mashiat.sarker at gmail.com> ???

On 11/3/15 10:15 PM, Wang Yan wrote:


I'm planning to design some REST APIs with Twisted in Python. For example, I want to use the HTTP method "GET" to fetch a single user's information:

GET http://myhost:8000/api/v1.0/users/[user_id]

I know I should inherit the twisted.web.resource.Resource and implement "getChild" by myself. 
The question is, should I implement a class for each segment of the URI? If so, I have to implement class API, class V1, class Users and Class User. In other words, if there're 10 segments in the URI, do I have to implement 10 classes to represent those resources?

Twisted is too low-level for such use in my opinion. We use Klein (https://github.com/twisted/klein) which offers nice abstraction above Twisted.
I know this does not answer your question. Just wanted to make sure that you are aware of possible options.

-Shakkhar

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151105/86202fdf/attachment.html>

From glyph at twistedmatrix.com  Thu Nov  5 15:02:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 5 Nov 2015 14:02:53 -0800
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
Message-ID: <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>


> On Nov 5, 2015, at 1:28 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
>     
>     from flask import Flask
>     from flask.ext.restful import Api, Resource
> 
>     api = Flask(__name__)
>     api = Api(app)
> 
>     class UserAPI(Resource):
>         def get(self, user_id):
>             pass
> 
>         def post(self, user_id):
>             pass
> 
>     api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')
> 
> Is there any similar usage in Klein? 

Yes; in fact this extension for Flask is similar to how twisted.web works internally.  I think you're looking for something like this:

from klein import run, route

from twisted.web.resource import Resource

class User(Resource, object):
    def __init__(self, user_id):
        super(User, self).__init__()
        self.user_id = user_id
    def render_GET(self, request):
        pass
    def render_POST(self, request):
        pass

@route("/users/<int:user_id>")
def user(request, user_id):
    return User(user_id)

run("localhost", 8080)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151105/884fc812/attachment.html>

From hawkowl at atleastfornow.net  Sat Nov  7 06:49:10 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 7 Nov 2015 14:49:10 +0100
Subject: [Twisted-Python] The End of Windows XP Support in Twisted 15.5
Message-ID: <4710057A-06DE-4590-9DD3-49C2F4236615@atleastfornow.net>

Hi everyone,

We've just removed the Windows XP builder from our buildbot. Many thanks for Tom Prince for keeping it online for so long, but right now, we think it's time to retire targeting XP.

Our only current supported Windows platform is Windows 7 x64, with Python 2.7.10, with Python 3.4 and Python 3.5 support coming soon.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151107/3dd41f7b/attachment.pgp>

From adi at roiban.ro  Sun Nov  8 15:52:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 9 Nov 2015 00:52:25 +0200
Subject: [Twisted-Python] pyserial on Python3
Message-ID: <CAFycZ9c6uAtvNNvrT_Jf9DsRRfPifYxP2ryOTYh+jPeAOchNSQ@mail.gmail.com>

Hi,

We have this ticket which ports twisted.internet.serialport on Python
3 - https://twistedmatrix.com/trac/ticket/8099

I saw that the Python 3 builders don't have pyserial installed.

Was this on purpose or just forgetting to also install
.[all_non_platform] on the python 3 builders?

Thanks!
-- 
Adi Roiban


From cory at lukasa.co.uk  Mon Nov  9 02:02:16 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 9 Nov 2015 09:02:16 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
Message-ID: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>

All,

With the work on #7860 nearly done, Twisted should be in a good place to have a HTTP/2 implementation. There?s currently a Trac ticket (#7460) for adding HTTP/2 support to twisted.web, which is obviously a good idea. I?m happy to take on that work.

What I want to get a picture for is how much of the Twisted support should live in Twisted itself. Currently I?m planning to base the implementation on Hyper-h2[0]. This is because it seems totally needless to write a new HTTP/2 state machine when a perfectly good one already exists (full disclosure: I?m the maintainer of Hyper-h2).

However, we?ll still need a HTTP/2 Protocol, and the twisted.web integration. The twisted.web integration will definitely need to be done in Twisted, but Adi has pointed out to me that it may be better for the HTTP/2 Protocol itself to live outside of core Twisted (probably as a sub-project of Hyper, with a working title of txh2). This would give us a lot more flexibility and speed to iterate.

I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?

Cory

[0]: http://python-hyper.org/h2/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151109/c5113658/attachment.pgp>

From kebin70 at gmail.com  Mon Nov  9 15:29:45 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Mon, 9 Nov 2015 14:29:45 -0800
Subject: [Twisted-Python] Dumb Logger API question
Message-ID: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>

http://twistedmatrix.com/documents/current/core/howto/logger.html

I'm looking at the new-ish logger api and wonder how to log to console as a
first step to transitioning.

Any pointers?  Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151109/ffe5f265/attachment.html>

From tobias.oberstein at tavendo.de  Tue Nov 10 15:54:23 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 10 Nov 2015 23:54:23 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
Message-ID: <5642759F.5000603@tavendo.de>

Hi,

maybe it's of interest how far it's possible to drive Twisted Web on 
modern multi-core CPUs.

Here are 2 data points from measuring:

* 627990 HTTP requests/s at 360 us avg latency
* 12.6 GB/s HTTP reply traffic

This is using 40 Xeon cores and serves HTTP over loopback TCP to 8 
threads of wrk. The Twisted Web resource served was

https://github.com/crossbario/crossbarexamples/blob/master/benchmark/web/myresource.py

Details, figures and more results are here:

https://github.com/crossbario/crossbarexamples/tree/master/benchmark/web

Cheers,
/Tobias


From ldanielburr at me.com  Tue Nov 10 16:34:38 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 10 Nov 2015 17:34:38 -0600
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <5642759F.5000603@tavendo.de>
References: <5642759F.5000603@tavendo.de>
Message-ID: <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>

Hi Tobias,

> On Nov 10, 2015, at 4:54 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> Hi,
> 
> maybe it's of interest how far it's possible to drive Twisted Web on modern multi-core CPUs.
> 
> Here are 2 data points from measuring:
> 
> * 627990 HTTP requests/s at 360 us avg latency
> * 12.6 GB/s HTTP reply traffic
> 
> This is using 40 Xeon cores and serves HTTP over loopback TCP to 8 threads of wrk. The Twisted Web resource served was
> 
> https://github.com/crossbario/crossbarexamples/blob/master/benchmark/web/myresource.py
> 
> Details, figures and more results are here:
> 
> https://github.com/crossbario/crossbarexamples/tree/master/benchmark/web
> 

Those are some nice numbers, to be sure!  Twisted really benefits from running in a pypy vm.  I have read that pypy still doesn?t optimize old-style classes as efficiently as new-style classes; I wonder if there would be any meaningful change in the metrics if resource.Resource was a new-style class instead of an old-style class.

(Note that mixing in object, e.g., class Foo(resource.Resource, object), to produce a new-style class apparently makes pypy unhappy.  See http://pypy.org/performance.html for details.)

Am I correct in stating that SO_REUSEPORT only produces the desired balancing of requests between twisted processes on Linux?

Thanks,

L. Daniel Burr

> Cheers,
> /Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Tue Nov 10 19:05:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 10 Nov 2015 18:05:19 -0800
Subject: [Twisted-Python] Dumb Logger API question
In-Reply-To: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
References: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
Message-ID: <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>


> On Nov 9, 2015, at 2:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> http://twistedmatrix.com/documents/current/core/howto/logger.html <http://twistedmatrix.com/documents/current/core/howto/logger.html>
> 
> I'm looking at the new-ish logger api and wonder how to log to console as a first step to transitioning.
> 
> Any pointers?  Thanks.

Do you mean "emit structured log text to stdout"?  In that case, that is covered in the document you link to; these two sections:

http://twistedmatrix.com/documents/current/core/howto/logger.html#avoid-mutable-event-keys
http://twistedmatrix.com/documents/current/core/howto/logger.html#starting-the-global-log-publisher

create a jsonFileLogObserver and start logging to it:

import sys
from twisted.logger import jsonFileLogObserver, globalLogBeginner, Logger
globalLogBeginner.beginLoggingTo([jsonFileLogObserver(sys.stdout)])
log = Logger()
log.info("Information.")

If you want unstructured log output for human reading (not a good choice for an automated system, but perhaps useful for debugging), you can instead go with textFileLogObserver, in almost exactly the same way:

import sys
from twisted.logger import textFileLogObserver, globalLogBeginner, Logger
globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])
log = Logger()
log.info("Information.")

Is this what you were looking for?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151110/9ad25322/attachment.html>

From kebin70 at gmail.com  Tue Nov 10 22:09:22 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Tue, 10 Nov 2015 21:09:22 -0800
Subject: [Twisted-Python] Dumb Logger API question
In-Reply-To: <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>
References: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
 <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>
Message-ID: <CAA-sNEbeSGHv7ieFOZdVt-LVzdaN02ibkEqp863+n_L65gV0jQ@mail.gmail.com>

yes, I stared at that section for a bit.  Not to get off topic, but the
readability of the api docs from back when is slightly better in my
opinion.  So the topic being I'm an idiot - thanks for both
examples...that's a perfect example.

I got confused by "from myobservers import PrintingObserver" cause I'm
wondering if myobservers is a core package.

On Tue, Nov 10, 2015 at 6:05 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 9, 2015, at 2:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html
>
> I'm looking at the new-ish logger api and wonder how to log to console as
> a first step to transitioning.
>
> Any pointers?  Thanks.
>
>
> Do you mean "emit structured log text to stdout"?  In that case, that is
> covered in the document you link to; these two sections:
>
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html#avoid-mutable-event-keys
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html#starting-the-global-log-publisher
>
> create a jsonFileLogObserver and start logging to it:
>
> import sys
> from twisted.logger import jsonFileLogObserver, globalLogBeginner, Logger
> globalLogBeginner.beginLoggingTo([jsonFileLogObserver(sys.stdout)])
> log = Logger()
> log.info("Information.")
>
>
> If you want unstructured log output for human reading (not a good choice
> for an automated system, but perhaps useful for debugging), you can instead
> go with textFileLogObserver, in almost exactly the same way:
>
> import sys
> from twisted.logger import textFileLogObserver, globalLogBeginner, Logger
> globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])
> log = Logger()
> log.info("Information.")
>
>
> Is this what you were looking for?
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151110/4ba63694/attachment.html>

From tobias.oberstein at tavendo.de  Wed Nov 11 06:55:07 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 11 Nov 2015 14:55:07 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
Message-ID: <564348BB.1070903@tavendo.de>

> Those are some nice numbers, to be sure!  Twisted really benefits from running in a pypy vm.  I have read that pypy still doesn?t optimize old-style classes as efficiently as new-style classes; I wonder if there would be any meaningful change in the metrics if resource.Resource was a new-style class instead of an old-style class.

Yep, using new style classes is indeed recommended for performance on 
PyPy. We are using new style classes throughout Autobahn and 
Crossbar.io, but I haven't measured effects.

> Am I correct in stating that SO_REUSEPORT only produces the desired balancing of requests between twisted processes on Linux?

You need Linux kernel 3.9+. DragonFly BSD also claims support, but I 
haven't tried. We should also be able to make Windows work, after some 
more things have landed for the Twisted IOCP reactor.

Cheers,
/Tobias

>
> Thanks,
>
> L. Daniel Burr
>
>> Cheers,
>> /Tobias
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From adi at roiban.ro  Wed Nov 11 15:10:32 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 12 Nov 2015 00:10:32 +0200
Subject: [Twisted-Python] Conch SSH client dropping support for non/pre RFC
	4419 clients
Message-ID: <CAFycZ9eq41Mb1vv71FbYhyhatHU_5SWEqEysEa=JDfr8RZp7Sw@mail.gmail.com>

Hi,

I just want to let you know about a future change in the SSH client
implementation.

Full details https://twistedmatrix.com/trac/ticket/8100

Basically in order to work with OpenSSH version 6.9 and newer we will
break support for very old (2004-2006) SSH servers which do not
support RFC 4419

In case you care about Twisted SSH client interacting with very of SSH
servers, please take a look and send your feedback over the Trac issue

Otherwise, feel free to ignore and enjoy the rest of the day /night :)

-- 
Adi Roiban


From adi at roiban.ro  Wed Nov 11 15:40:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 12 Nov 2015 00:40:25 +0200
Subject: [Twisted-Python] Migration to Git / GitHub
Message-ID: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>

Hi,

So I am bringing this to the list for a greater audience and to reach
all borders and timezones :)

I think that most people agree that Twisted should get rid of SVN and
move to Git.


General rules by Glyph as they were sent to me :)

Development can't stop, the website can't go down, and we can't lose
any data. If you have a plan that migrates absolutely everything to
github, including all of our issues to github issues, and all of our
review queue stuff to github PRs, that is fine.

You cannot, however, just push everything to github and delete the
ticket database and all the outstanding branches and just say "okay
everybody file github issues now". There has to be clear communication
about what a developer who shows up on any given day to work on a
Twisted ticket should do.

Current requirements from Glyph:

- be able to accept PRs on github.com
- host code primarily on github
- make sure all the same committers still have access (at least active ones)
- make sure the website doesn't go down
- break as little functionality as possible (kenaan, highscores, etc)
- communicate clearly to contributors what they have to do in order to
work on Twisted in every step of the process

------

Also from Glyph

there are lots of "nice to have" things like it would be nice to have
people authenticate to twistedmatrix.com via github so we can get rid
of our terrible auth database  and so they have one set of credentials
for working

It would be nice if we could automatically sync any relevant
information between PRs and issues

-----------

I would prefer to do baby steps and as a start just have the main repo
in git hosted by github.com.

Using GitHub it will force us (for the better or for the worse) to
rethink the infrastructure using web hooks... and for "modern" hosting
platforms.

Once we have webhooks we should be able to migrate to any other
provider... so it should be for the better

Also, we need to migrate to GitHub as this was already agreed (one
year ago) ... and if we re-start the conversation regarding the
hosting platform, we are back on point 0 and still on SVN.

We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages

-------------

So... if you have anything to comment regarding the git / github.com
migration please send your feedback.

Later we will announce the plan , break it into small task and start
working on them.

Cheers

-- 
Adi Roiban


From clayton.daley at gmail.com  Wed Nov 11 15:47:57 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 11 Nov 2015 16:47:57 -0600
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>

+1

Maybe this is old news, but I stumbled upon Subgit when poking around for
another open source project.  It says you can commit to both for as long as
you like and... it's free to use for open source:

http://www.subgit.com/pricing.html

Clayton Daley

On Wed, Nov 11, 2015 at 4:40 PM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> So I am bringing this to the list for a greater audience and to reach
> all borders and timezones :)
>
> I think that most people agree that Twisted should get rid of SVN and
> move to Git.
>
>
> General rules by Glyph as they were sent to me :)
>
> Development can't stop, the website can't go down, and we can't lose
> any data. If you have a plan that migrates absolutely everything to
> github, including all of our issues to github issues, and all of our
> review queue stuff to github PRs, that is fine.
>
> You cannot, however, just push everything to github and delete the
> ticket database and all the outstanding branches and just say "okay
> everybody file github issues now". There has to be clear communication
> about what a developer who shows up on any given day to work on a
> Twisted ticket should do.
>
> Current requirements from Glyph:
>
> - be able to accept PRs on github.com
> - host code primarily on github
> - make sure all the same committers still have access (at least active
> ones)
> - make sure the website doesn't go down
> - break as little functionality as possible (kenaan, highscores, etc)
> - communicate clearly to contributors what they have to do in order to
> work on Twisted in every step of the process
>
> ------
>
> Also from Glyph
>
> there are lots of "nice to have" things like it would be nice to have
> people authenticate to twistedmatrix.com via github so we can get rid
> of our terrible auth database  and so they have one set of credentials
> for working
>
> It would be nice if we could automatically sync any relevant
> information between PRs and issues
>
> -----------
>
> I would prefer to do baby steps and as a start just have the main repo
> in git hosted by github.com.
>
> Using GitHub it will force us (for the better or for the worse) to
> rethink the infrastructure using web hooks... and for "modern" hosting
> platforms.
>
> Once we have webhooks we should be able to migrate to any other
> provider... so it should be for the better
>
> Also, we need to migrate to GitHub as this was already agreed (one
> year ago) ... and if we re-start the conversation regarding the
> hosting platform, we are back on point 0 and still on SVN.
>
> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
> -------------
>
> So... if you have anything to comment regarding the git / github.com
> migration please send your feedback.
>
> Later we will announce the plan , break it into small task and start
> working on them.
>
> Cheers
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151111/b912da9a/attachment.html>

From glyph at twistedmatrix.com  Wed Nov 11 18:09:42 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 17:09:42 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
Message-ID: <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>


> On Nov 11, 2015, at 2:47 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> +1
> 
> Maybe this is old news, but I stumbled upon Subgit when poking around for another open source project.  It says you can commit to both for as long as you like and... it's free to use for open source:
> 
> http://www.subgit.com/pricing.html <http://www.subgit.com/pricing.html>
>  

Thanks for the reference, but we would prefer to just eliminate our SVN repository ;).  For one thing it makes committing much slower to do all this mirroring during commit.

If there are people who actually like using SVN, when github is our upstream, they actually have SVN client support (although there's no SVN mirror on the back end): https://github.com/blog/626-announcing-svn-support <https://github.com/blog/626-announcing-svn-support>

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151111/74abb468/attachment.html>

From clayton.daley at gmail.com  Wed Nov 11 19:10:47 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 11 Nov 2015 20:10:47 -0600
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
 <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
Message-ID: <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>

I'm not an SVN user (only Git) so I certainly don't care.  I proposed it in
the other group to help facilitate a transitional period.  That would give
users time to wrap up any work in SVN and transition to Git at their own
pace... rather than on a specific drop dead date.  Maybe that's not a
problem with SVN -- I wouldn't know.

Clayton Daley

On Wed, Nov 11, 2015 at 7:09 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 11, 2015, at 2:47 PM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> +1
>
> Maybe this is old news, but I stumbled upon Subgit when poking around for
> another open source project.  It says you can commit to both for as long as
> you like and... it's free to use for open source:
>
> http://www.subgit.com/pricing.html
>
>
>
> Thanks for the reference, but we would prefer to just eliminate our SVN
> repository ;).  For one thing it makes committing much slower to do all
> this mirroring during commit.
>
> If there are people who actually *like* using SVN, when github is our
> upstream, they actually have SVN client support (although there's no SVN
> mirror on the back end):
> https://github.com/blog/626-announcing-svn-support
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151111/60de423b/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Nov 11 19:17:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 18:17:38 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
 <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
 <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>
Message-ID: <1ABC06F3-A02F-4293-9EA6-C522009FDD5D@twistedmatrix.com>



> On Nov 11, 2015, at 6:10 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I'm not an SVN user (only Git) so I certainly don't care.  I proposed it in the other group to help facilitate a transitional period.  That would give users time to wrap up any work in SVN and transition to Git at their own pace... rather than on a specific drop dead date.  Maybe that's not a problem with SVN -- I wouldn't know.

Aah, I see.  I guess maybe it's not clear: we're already in the transitional period with other technology, git-svn, and have an up-to-the-minute git mirror on both https://code.twistedmatrix.com/ <https://code.twistedmatrix.com/> and https://github.com/twisted/twisted <https://github.com/twisted/twisted>.  So this wouldn't really add much.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151111/4a204754/attachment.html>

From dynamicgl at gmail.com  Wed Nov 11 21:36:52 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Thu, 12 Nov 2015 12:36:52 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <564348BB.1070903@tavendo.de>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
Message-ID: <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>

On Wed, Nov 11, 2015 at 9:55 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> Those are some nice numbers, to be sure!  Twisted really benefits from
>> running in a pypy vm.  I have read that pypy still doesn?t optimize
>> old-style classes as efficiently as new-style classes; I wonder if there
>> would be any meaningful change in the metrics if resource.Resource was a
>> new-style class instead of an old-style class.
>>
>
> Yep, using new style classes is indeed recommended for performance on
> PyPy. We are using new style classes throughout Autobahn and Crossbar.io,
> but I haven't measured effects.
>
> Am I correct in stating that SO_REUSEPORT only produces the desired
>> balancing of requests between twisted processes on Linux?
>>
>
> You need Linux kernel 3.9+. DragonFly BSD also claims support, but I
> haven't tried. We should also be able to make Windows work, after some more
> things have landed for the Twisted IOCP reactor.
>
> Cheers,
> /Tobias
>
>
>
>> Thanks,
>>
>> L. Daniel Burr
>>
>> Cheers,
>>> /Tobias
>>>
>>>

 Hi Tobias

    Have you tried to test crossbar on windows? I heard that stdio performs
very bad on windows. I noticed crossbar use pipe to transfer data between
process.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151112/6e8cacc0/attachment.html>

From glyph at twistedmatrix.com  Wed Nov 11 23:04:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 22:04:53 -0800
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
Message-ID: <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>


> On Nov 9, 2015, at 1:02 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> All,
> 
> With the work on #7860 nearly done,

_Actually_ done, now.

> Twisted should be in a good place to have a HTTP/2 implementation. There?s currently a Trac ticket (#7460) for adding HTTP/2 support to twisted.web, which is obviously a good idea. I?m happy to take on that work.

<3 <3 <3

> What I want to get a picture for is how much of the Twisted support should live in Twisted itself. Currently I?m planning to base the implementation on Hyper-h2[0]. This is because it seems totally needless to write a new HTTP/2 state machine when a perfectly good one already exists (full disclosure: I?m the maintainer of Hyper-h2).

Did somebody say STATE MACHINE??? https://github.com/glyph/automat <https://github.com/glyph/automat> (Seriously though maybe look at it, it might make some of the innards of h2 nicer, or, maybe you will have some ideas about how broken it is and could tell me them.)

Yes, we should definitely depend on h2 as a library and not do our own thing.  Frankly, Hyper-h2 is almost SURREAL in how well-factored and decoupled the implementation is from I/O.  If libraries in the Python ecosystem looked like this generally, Twisted would be a much better platform than it is.  (Frankly, most of Twisted's _own_ protocol implementations should aspire to such cleanliness.)

> However, we?ll still need a HTTP/2 Protocol, and the twisted.web integration. The twisted.web integration will definitely need to be done in Twisted, but Adi has pointed out to me that it may be better for the HTTP/2 Protocol itself to live outside of core Twisted (probably as a sub-project of Hyper, with a working title of txh2). This would give us a lot more flexibility and speed to iterate.

Creating this dependency loop (twisted->txh2->(twisted->txh2->..., h2)) seems potentially problematic, and maybe more trouble than it's worth in terms of factoring things out.  An IProtocol implementation is literally three methods - makeConnection, dataReceived, connectionLost - so if we put this together nicely there should not be too much code on the Twisted side of things.  Or at least, so I imagine; just the glue to hook it up to (sigh) IResource, et. al.

One potential way to keep the dependency graph from being cyclical is to build the interface in terms of Tubes (see <https://github.com/twisted/tubes <https://github.com/twisted/tubes>> and <https://twistedmatrix.com/trac/ticket/288 <https://twistedmatrix.com/trac/ticket/288>>) and move the Twisted-y parts of Tubes (like undefer.py) into Twisted proper.

Another would be to actually extract Deferred for real, and it seems the time is ripe for such an adventure.

> I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?

Can you maybe expand a little bit on what pieces you think need to exist, in terms of what the Protocol would actually do?  Are you thinking about things like integration with Cred?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151111/e8b8ff08/attachment.html>

From cory at lukasa.co.uk  Thu Nov 12 03:46:03 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 12 Nov 2015 10:46:03 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
Message-ID: <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>


> On 12 Nov 2015, at 06:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Creating this dependency loop (twisted->txh2->(twisted->txh2->..., h2)) seems potentially problematic, and maybe more trouble than it's worth in terms of factoring things out.  An IProtocol implementation is literally three methods - makeConnection, dataReceived, connectionLost - so if we put this together nicely there should not be too much code on the Twisted side of things.  Or at least, so I imagine; just the glue to hook it up to (sigh) IResource, et. al.

I think if we took this approach txh2 would be an optional dependency for Twisted, not a hard dependency. That avoids the loop, at the cost of meaning that a default naive Twisted install will have no H2 support.

>> I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?
> 
> Can you maybe expand a little bit on what pieces you think need to exist, in terms of what the Protocol would actually do?  Are you thinking about things like integration with Cred?

Sure.

What concerns me as an outsider to Twisted is where exactly there are bits of Twisted that ?know? about HTTP, which bits need updating, and how to do it. If we restrain ourselves to twisted.web, this gets a bit easier, but twisted.web is still a substantial chunk of code.

We *might* be able to get away with simply having classes that implement the interfaces of twisted.web.http.HTTPClient, twisted.web.http.HTTPChannel, and twisted.web._newclient.HTTPParser. These interfaces are currently implicit, but I?d probably aim to make them explicit (or as explicit as possible) for the purposes of this work so that we could in principle do a similar extension in future.

However, this may not work: in particular, some of the other classes in twisted.web may know altogether too much about HTTP/1.X: in particular, if they have the nerve to write directly to a transport we?ve got a real problem with this approach, as HTTP/2 does not allow naked writes on its sockets (all data is framed).

The other bit of work is that we need to update twisted.web factories to make sure that they build the appropriate protocol and can switch them as needed. Probably this means we just need a layer of indirection, but I?ve not yet worked out how this is going to work.

The question becomes, given how much twisted.web will need to change to accept this H2 protocol, whether there is any advantage in having it out of tree. There?s also a question about Twisted policy: how much stuff should actually be directly in Twisted?

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151112/083f7b3c/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151112/083f7b3c/attachment-0001.pgp>

From snailcoder at 163.com  Thu Nov 12 08:33:13 2015
From: snailcoder at 163.com (Wang Yan)
Date: Thu, 12 Nov 2015 23:33:13 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
 <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
Message-ID: <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>

Absolutely that's what I'm looking for! Thanks a lot!


However, I'm wondering if Twisted and Klein support filtering results. For example, the User table in MySQL contains id, name and age fields. How can I get all users whose name are "Alan" and age > 16? It seems I need a filter, but I'm not sure how to implement such a filter or resource with Twisted and Klein.






? 2015-11-06 06:02:53?"Glyph Lefkowitz" <glyph at twistedmatrix.com> ???


On Nov 5, 2015, at 1:28 AM, Wang Yan <snailcoder at 163.com> wrote:


Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
   
    from flask import Flask
    from flask.ext.restful import Api, Resource

    api = Flask(__name__)
    api = Api(app)

    class UserAPI(Resource):
        def get(self, user_id):
            pass

        def post(self, user_id):
            pass

    api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')

Is there any similar usage in Klein?



Yes; in fact this extension for Flask is similar to how twisted.web works internally.  I think you're looking for something like this:


from klein import run, route


from twisted.web.resource import Resource


class User(Resource, object):
    def __init__(self, user_id):
        super(User, self).__init__()
        self.user_id = user_id
    def render_GET(self, request):
        pass
    def render_POST(self, request):
        pass


@route("/users/<int:user_id>")
def user(request, user_id):
    return User(user_id)


run("localhost", 8080)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151112/fb99a7ea/attachment.html>

From glyph at twistedmatrix.com  Thu Nov 12 19:53:40 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 12 Nov 2015 18:53:40 -0800
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
 <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
 <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>
Message-ID: <1DBF1F32-2372-4F2E-AB7A-17B39DD01B69@twistedmatrix.com>


> On Nov 12, 2015, at 7:33 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Absolutely that's what I'm looking for! Thanks a lot!

Glad I could help!

> However, I'm wondering if Twisted and Klein support filtering results. For example, the User table in MySQL contains id, name and age fields. How can I get all users whose name are "Alan" and age > 16? It seems I need a filter, but I'm not sure how to implement such a filter or resource with Twisted and Klein.

Klein is pretty purely a web-facing framework; it just helps you built the HTTP stuff that answers queries.  It doesn't help you talk to a database at all; you have to figure out your own way to do that.  This is historically a weak area for Twisted, sadly; you might find https://pypi.python.org/pypi/twextpy/ <https://pypi.python.org/pypi/twextpy/> useful as this brings the state of the art forward somewhat.

https://twistedmatrix.com/trac/ticket/7917 <https://twistedmatrix.com/trac/ticket/7917> is a ticket to bring that stuff into Twisted itself; if you are interested in Twisted/Database interaction, perhaps you could help split up the code there into smaller branches that can be merged.

Thanks!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151112/0afe913a/attachment.html>

From cory at lukasa.co.uk  Fri Nov 13 05:36:26 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 13 Nov 2015 12:36:26 +0000
Subject: [Twisted-Python] Streaming HTTP
Message-ID: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>

Folks,

# Problem Statement

Thanks for your feedback on my HTTP/2 questions. I?ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I?m aiming to have something that works in at least some cases by the end of the day.

As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ?streaming? request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?

This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).

Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.

Issue #6928 has glyph suggesting that we come to the mailing list to discuss this, but the last time it was raised no responses were received[2]. I believe that with HTTP/2 on the horizon, this issue is more acute than it was before, and needs solving if Twisted is going to continue to remain relevant for the web. It should also allow people to build more performant web applications, as they should be able to handle how the data queues up in their apps.

This does not immediately block my HTTP/2 work, so we can take some time and get this right.

# Proposed Solution

To help us move forward, I?m providing a proposal for how I?d solve this problem. This is not necessarily going to be the final approach, but is instead a straw-man we can use to form the basis of a discussion about what the correct fix should be.

My proposal is to deprecate the current Request/Resource model. It currently functions and should continue to function, but as of this point we should consider it a bad way to do things, and we should push people to move to a fully asynchronous model.

We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users. If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0), request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We?d also update requestReceived to ensure that it?s called when all the *headers* are received, rather than waiting for the body.

A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that?s a header users actually send, and if they don?t we chunk the data.

This logic would make it much easier to work with HTTP/2 *and* with WebSockets, requiring substantially less special-case code to handle the WebSocket upgrade (when the headers are complete, we can spot the upgrade easily).

What do people think of this approach?

Cory


[0]: https://twistedmatrix.com/trac/ticket/6928
[1]: https://twistedmatrix.com/trac/ticket/288
[2]: https://twistedmatrix.com/pipermail/twisted-python/2014-February/028069.html
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151113/f794d614/attachment.pgp>

From zookog at gmail.com  Fri Nov 13 09:09:13 2015
From: zookog at gmail.com (Zooko Wilcox-O'Hearn)
Date: Fri, 13 Nov 2015 16:09:13 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <CANdZDc42WUTwuLB1w-oxwnp6P74FZSLfkKsrExwgUw57J9DMqA@mail.gmail.com>

> What do people think of this approach?

It sounds fine to me.

I think this issue in Twisted is currently the blocker (or at least
*one of* the blockers) for Tahoe-LAFS ticket #113, #320, and #1032. It
is also a blocker for the much more ambitious Tahoe-LAFS tickets #1288
and #1851.

Regards,

Zooko

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/113# command-line: do
things in an incremental fashion and accept stdin as input
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/320# add streaming
(on-line) upload to HTTP interface
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1032# Display active
HTTP upload operations on the status page

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1288# support streaming
uploads in uploader
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1851# new immutable file
upload protocol: streaming, fewer round-trips, quota-respecting


From mithrandi at mithrandi.net  Fri Nov 13 17:45:58 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 14 Nov 2015 00:45:58 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
Message-ID: <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>

On Thu, 12 Nov 2015 at 12:46 Cory Benfield <cory at lukasa.co.uk> wrote:

> However, this may not work: in particular, some of the other classes in
> twisted.web may know altogether too much about HTTP/1.X: in particular, if
> they have the nerve to write directly to a transport we?ve got a real
> problem with this approach, as HTTP/2 does not allow naked writes on its
> sockets (all data is framed).
>

I'd like to point out a few things on this topic:

1) The Twisted project has already experimentally demonstrated the
imprudence of an approach that massively breaks backwards compatibility
with old APIs (even if it does this in concordance with the compatibility
policy, by adding a bunch of new things): see the defunct twisted.web2
project.

Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
all you have to do is port all of your code and all of your libraries over
to these new APIs!", the response isn't going to be "great, I'll get right
on that!". It'll be "oh well, I guess I'll just throw an nginx reverse
proxy in front of my app to get HTTP/2 working" or "oh well, never mind
then".

A successful approach to introducing HTTP/2 into twisted.web needs to allow
for hooking up existing resources to an HTTP/2 (or actually, presumably
multiprotocol) server.

2) Having said that, it's not necessary for the HTTP/2 server to be
completely compatible with the current HTTP/1.x server in twisted.web. For
some things, this is just flat out impossible (I believe there are things
that HTTP/1.x allows, but HTTP/2 doesn't allow), and for other things it
just doesn't make sense (stealing the transport and writing stuff to it
yourself). However, we only need to support the common set of things that
people use in order to be usefully compatible; if you just have some
resources that aren't doing anything particularly crazy (like hijacking the
transport and writing directly to it, rather than via the request object),
you should be able to hook them up and have them work.

For anything that we *can't* support, it's okay for the HTTP/2 server to
just raise an exception or whatever; for anything that we can reasonably
support, but don't actually want to, it's okay to emit a deprecation
warning, and later an exception.

3) Having said *that*, there is widespread agreement that the existing APIs
(IResource, IRequest, etc.) have numerous deficiencies that should be
addressed. For example, the current interfaces don't allow for streaming
request handling, which obstructs implementing 100-continue support (among
other things).

We *do* need newer interfaces which hopefully improve on the new ones; I
don't really feel like I'm in a position to sketch out what these
interfaces should look like, but they should definitely take into account
the constraints of the HTTP/2 protocol, as well as the needs of application
code.

PS: I've used the pronoun "we" multiple times in this email for the sake of
rhetorical convenience, but please don't let this dissuade anyone from
voicing disagreement with any of the claims I've made should they appear
incorrect.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151114/5e0e3b12/attachment.html>

From twisted-python at 2xlp.com  Fri Nov 13 19:07:42 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 13 Nov 2015 21:07:42 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>

Two notes:

1. Have you considered bitbucket?  I personally prefer github, but I know some python projects like it because of mercurial support.

2. There are a lot of projects for transitioning trac tickets to github/bitbucket via their api.  You can't transition some fields (reports, comments, etc) but they generally do a good job of migrating all the info.

From glyph at twistedmatrix.com  Fri Nov 13 19:29:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Nov 2015 18:29:53 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
Message-ID: <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>


> On Nov 13, 2015, at 6:07 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> Two notes:
> 
> 1. Have you considered bitbucket?  I personally prefer github, but I know some python projects like it because of mercurial support.

We wrote up a proposal for the fellowship at the beginning of this year, <https://twistedmatrix.com/trac/wiki/Fellowship2015>, which contained the fateful phrase, "GitHub switch (50%) The maintainer will develop a plan for migration of development to GitHub, and once it has been approved implement the plan.".

We then asked people for money based on this document.  So GitHub is more or less a done deal :-).

> 2. There are a lot of projects for transitioning trac tickets to github/bitbucket via their api.  You can't transition some fields (reports, comments, etc) but they generally do a good job of migrating all the info.

Please suggest specific projects with specific limitations so they can be discussed.  While I don't doubt you're right, we can all vaguely gesture in the direction of Google to little effect :-).

-glyph



From rodrigc at crodrigues.org  Sat Nov 14 02:39:05 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 14 Nov 2015 01:39:05 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
Message-ID: <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>

On Fri, Nov 13, 2015 at 6:29 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> We then asked people for money based on this document.  So GitHub is more
> or less a done deal :-).
>
>
If the plan is GitHub and the project is fine with that, then cool.
If there is time, I would recommend that the project take a quick look
at gitlab.  I recently started using gitlab to contribute to this
project: https://gitlab.com/m2crypto/m2crypto

Everything I could do with GitHub (fork/pull request), I could do with
GitLab.
I found the UI slightly better than GitHub.
Also with GitLab, I found that Continuous Integration seems to be integrated
better than GitHub, such as for this merge request:

https://gitlab.com/rodrigc/m2crypto/commit/31140cf41b38676e4e96330678d75817d9857b97/ci

So the hosted version of GitLab is pretty cool.
I have also seen the free version of GitLab set up locally at a startup
in Silicon Valley, and the out of the box functionality for free is amazing,
and comparable to gitlab.com and GitHub.


I have experience with migrating a ticket database and wiki from
Trac -> Redmine for https://bugs.freenas.org, while the repository was on
GitHub, and migrating
the commit triggers so that commits on GitHub updated the ticket database
in Redmine.

There is no rocket science, but there are a lot of interconnected pieces,
which makes debugging interesting.  I can give advice to anyone who is
working on this.

In addition to doing SVN -> Git, is the Twisted project interested
in doing Trac -> GitHub for the tickets *and* wiki?

I have begun to realize that an integrated Git + Ticket + Wiki system
gives a big boost in productivity to a project in the long run.

It is possible to migrate in stages, i.e.
(1)  SVN -> Git
(2)  Trac tickets -> GitHub tickets
(3)  Trac wiki -> GitHub wiki

However, gluing all these pieces together can be a lot of work,
and it might be better just to do a "big bang" and migrate everything over
in one shot.

It all depends on what the project wants to do.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151114/762c05f6/attachment.html>

From mithrandi at mithrandi.net  Sat Nov 14 20:29:38 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 15 Nov 2015 03:29:38 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <CAMcKhMR37+Poe-=y4oXcUB8U8WSpacJDAQ_+WnkgVtGTfFa66Q@mail.gmail.com>

On Sat, 14 Nov 2015 at 17:45 Cory Benfield <cory at lukasa.co.uk> wrote:

> A similar approach should be taken with sending data: we should assume
> that users want to chunk it if they do not provide a content-length. An
> extreme position to take (and I do) is that this should be sufficiently
> easy that most users actually *accidentally* end up chunking their data:
> that is, we do not provide special helpers to set content-length, instead
> just checking whether that?s a header users actually send, and if they
> don?t we chunk the data.
>

As far as I know, this is exactly what is done in the existing HTTP/1.x
implementation: if a Content-Length header field is not set before data is
written to the request object (as it is called), chunked transfer encoding
is automatically used for the response. This behaviour is required by
HTTP/1.1.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151115/732521d0/attachment.html>

From jml at mumak.net  Sun Nov 15 02:10:49 2015
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 15 Nov 2015 09:10:49 +0000
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <CAHZ8tnaJ2B8KLfkfuTwjGWO7c1CVvaSzv2=UQCEEPfofzvQCmg@mail.gmail.com>

On Wed, 11 Nov 2015 at 22:41 Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> So I am bringing this to the list for a greater audience and to reach
> all borders and timezones :)
>

Thanks!


> General rules by Glyph as they were sent to me :)
>
> Development can't stop, the website can't go down, and we can't lose
> any data. If you have a plan that migrates absolutely everything to
> github, including all of our issues to github issues, and all of our
> review queue stuff to github PRs, that is fine.
>
>
Glyph, would it be OK to have, say, a half-hour period where people
couldn't file tickets?

You cannot, however, just push everything to github and delete the
> ticket database and all the outstanding branches and just say "okay
> everybody file github issues now". There has to be clear communication
> about what a developer who shows up on any given day to work on a
> Twisted ticket should do.
>
> Current requirements from Glyph:
>
> - be able to accept PRs on github.com
> - host code primarily on github
> - make sure all the same committers still have access (at least active
> ones)
> - make sure the website doesn't go down
> - break as little functionality as possible (kenaan, highscores, etc)
>

I'd suggest making a list of such things.


> - communicate clearly to contributors what they have to do in order to

work on Twisted in every step of the process
>
>
This means email to this list, and updates to documentation both in the
code base and on the wiki.


> ------
>
> Also from Glyph
>
> there are lots of "nice to have" things like it would be nice to have
> people authenticate to twistedmatrix.com via github so we can get rid
> of our terrible auth database  and so they have one set of credentials
> for working
>
> It would be nice if we could automatically sync any relevant
> information between PRs and issues
>
> -----------
>
>
All of the above constitutes requirements and constraints rather than a
plan per se. I've found it useful to have such things written down
somewhere more solid (normally, a Google doc) so that when I think I'm done
I have something to check against.

Questions below are about the plan. I'm asking questions


> I would prefer to do baby steps and as a start just have the main repo
> in git hosted by github.com.
>
>
Fully agree w/ baby steps.

Could you provide some more details about what this means? Oh, I just
reread further down and see you'll be sending a more detailed plan through
later. Carry on.


> Using GitHub it will force us (for the better or for the worse) to
> rethink the infrastructure using web hooks... and for "modern" hosting
> platforms.
>

This sounds as if you're saying that some functionality will be broken
initially. I'm personally OK with that, but it would be good to get some
sense of which functionality.


> Once we have webhooks we should be able to migrate to any other
> provider... so it should be for the better
>
>
Quite right.


> Also, we need to migrate to GitHub as this was already agreed (one
> year ago) ... and if we re-start the conversation regarding the
> hosting platform, we are back on point 0 and still on SVN.
>
>
Amen.


> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
>
Ah, OK. This makes the comments about Github Auth make a lot more sense.


> -------------
>
> So... if you have anything to comment regarding the git / github.com
> migration please send your feedback.
>
>
Later we will announce the plan , break it into small task and start
> working on them.
>
>
Oh right. I look forward to this. May I suggest that one component of the
plan be a timeline of the migration, where at each stage we show both the
things done by the migrator and the experience of Twisted developers during
that time?


> Cheers
> Adi Roiban
>
>
Thanks Adi. Great to see this happening.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151115/cfb681b8/attachment.html>

From tobias.oberstein at tavendo.de  Sun Nov 15 03:06:20 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 15 Nov 2015 11:06:20 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com> <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
Message-ID: <5648591C.4040200@tavendo.de>

>   Hi Tobias
>      Have you tried to test crossbar on windows? I heard that stdio

Yes, I have tried that;) Crossbar.io supports Windows!

> performs very bad on windows. I noticed crossbar use pipe to transfer
> data between process.

Only for control/management: that is traffic between the node controller 
process and the worker processes. Performance is irrelevant on that.

What's required for high-performance on Windows is the Twisted IOCP 
reactor. For Python 2 that works quite well. For Python 3 some bits are 
missing in Twisted (Hawkie is working on that). For shared sockets 
(which Crossbar.io uses for multi-core scaling), more work on the IOCP 
reactor would be needed.

Cheers,
/Tobias


> Regards
> gelin yan
>



From tobias.oberstein at tavendo.de  Sun Nov 15 03:18:14 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 15 Nov 2015 11:18:14 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <56485BE6.4070507@tavendo.de>

> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed.
 > Request objects (and, logically, any other object that handles 
requests/responses, such as Resource) should be extended to have a 
chunkReceived method
 > that can be overridden by users.

How does flow-control work with the Go API? How does user code 
processing chunks received unleash backpressure onto the sender?

Cheers,
/Tobias


From dynamicgl at gmail.com  Sun Nov 15 05:25:27 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 15 Nov 2015 20:25:27 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <5648591C.4040200@tavendo.de>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
Message-ID: <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>

2015?11?15? ??6:09?"Tobias Oberstein" <tobias.oberstein at tavendo.de>???
>>
> What's required for high-performance on Windows is the Twisted IOCP
reactor. For Python 2 that works quite well. For Python 3 some bits are
missing in Twisted (Hawkie is working on that). For shared sockets (which
Crossbar.io uses for multi-core scaling), more work on the IOCP reactor
would be needed.

Hi tobias

    Are you sure IOCP is able to share sockets between process? It would be
great if you can share some info about this. I only use iocp with thread
pools. Due to GIL, well, use thread pools on python doesn't make any sense
for that.

regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151115/6cc3e8a3/attachment.html>

From dynamicgl at gmail.com  Sun Nov 15 08:03:57 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 15 Nov 2015 23:03:57 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
 <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
Message-ID: <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>

On Sun, Nov 15, 2015 at 8:25 PM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
> 2015?11?15? ??6:09?"Tobias Oberstein" <tobias.oberstein at tavendo.de>???
> >>
> > What's required for high-performance on Windows is the Twisted IOCP
> reactor. For Python 2 that works quite well. For Python 3 some bits are
> missing in Twisted (Hawkie is working on that). For shared sockets (which
> Crossbar.io uses for multi-core scaling), more work on the IOCP reactor
> would be needed.
>
> Hi tobias
>
>     Are you sure IOCP is able to share sockets between process? It would
> be great if you can share some info about this. I only use iocp with thread
> pools. Due to GIL, well, use thread pools on python doesn't make any sense
> for that.
>
> regards
>
> gelin yan
>

Hi
     Finally I found this link
https://msdn.microsoft.com/en-us/library/windows/desktop/ms740478(v=vs.85).aspx

    This feature is only available on windows 8.1 or later. It would be
great if twisted can support this feature.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151115/7b062129/attachment-0001.html>

From ngoonee.talk at gmail.com  Sun Nov 15 08:19:49 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Sun, 15 Nov 2015 23:19:49 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
Message-ID: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>

Based on my reading/searching, multiple reactors in the same process
(even in multiple threads) is pretty much a no-go because
twisted.internet.reactor is a global singleton.

I'm also unable to find any information about connecting to self (for
example, to send messages from one reactor to itself).

The situation I find myself in is that of message-passing between a
data-access component of a process (separate thread) and a GUI
component. In this case, something like blinker works fine. However I
want to replace blinker with twisted message-passing, because I want
the data-access component to be accessible by different GUI
components, either on the same machine or from a different machine. Or
from the same process (default behaviour).

If I'm able to somehow either run multiple reactors or
connect-to-self, then I only need to maintain one API (a twisted API)
for this communication, which would be identical between the
one-process, multi-process, and multi-machine case.

As an aside - I want to avoid restricting myself to a multi-process
implementation as that would mean I can't write for iOs (no
multi-processing allowed).


From itamar at itamarst.org  Sun Nov 15 10:54:41 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 15 Nov 2015 12:54:41 -0500
Subject: [Twisted-Python] Multiple reactors, connecting to self,
 or other solution?
In-Reply-To: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
Message-ID: <5648C6E1.3090000@itamarst.org>

On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
> Based on my reading/searching, multiple reactors in the same process
> (even in multiple threads) is pretty much a no-go because
> twisted.internet.reactor is a global singleton.
>
> I'm also unable to find any information about connecting to self (for
> example, to send messages from one reactor to itself).
>
>

You can just have a single reactor. E.g. if you do a listenTCP (e.g. on 
port 8080) on the reactor you can in the same process do a connectTCP to 
localhost in the same process on the same reactor; just connect to 
'127.0.0.1' or 'localhost' on port 8080.


From itamar at itamarst.org  Sun Nov 15 10:56:05 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 15 Nov 2015 12:56:05 -0500
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
Message-ID: <5648C735.7060603@itamarst.org>

On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>
> 1) The Twisted project has already experimentally demonstrated the 
> imprudence of an approach that massively breaks backwards 
> compatibility with old APIs (even if it does this in concordance with 
> the compatibility policy, by adding a bunch of new things): see the 
> defunct twisted.web2 project.
>
> Realistically, if you say "hey people, twisted.web now has HTTP/2 
> support, all you have to do is port all of your code and all of your 
> libraries over to these new APIs!", the response isn't going to be 
> "great, I'll get right on that!". It'll be "oh well, I guess I'll just 
> throw an nginx reverse proxy in front of my app to get HTTP/2 working" 
> or "oh well, never mind then".
The counterpoint is that maybe if we'd deprecated twisted.web and told 
people they should port within a year to twisted.web2 everyone would've 
done it and we wouldn't be having this conversation :)



From ngoonee.talk at gmail.com  Sun Nov 15 19:05:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 16 Nov 2015 10:05:38 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <5648C6E1.3090000@itamarst.org>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
Message-ID: <CAGQ70evJcB+bXX0RuPV0jowU9JkFcTqR2+z4M4spBDqacTJ2VQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 1:54 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>
>> I'm also unable to find any information about connecting to self (for
>> example, to send messages from one reactor to itself).
>>
>>
>
> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port
> 8080) on the reactor you can in the same process do a connectTCP to
> localhost in the same process on the same reactor; just connect to
> '127.0.0.1' or 'localhost' on port 8080.

Thanks, I was quite sceptical about this but based on your advise I
tried it out and merging ampclient and ampserver does seem to have the
desired effect. Expanding on that, I guess I'll have two factories and
two protocols, one for each 'end', with listenTCP right at the start
and connectTCP run later on when my GUI is ready. Theoretically,
limiting communication to twisted only would mean the client would be
able to access a localhost server and a server on another machine in
exactly the same way.

Do I have to concern myself with race conditions though? Not very sure
how to write tests for those (or if it's even a problem given this is
single-process and single-thread). Basically, will there ever be a
case where my client sends a Command (I'm using amp.Command) and the
server doesn't get it because my overall process is blocked? I assume
there's some sort of timeout which controls that?


From ngoonee.talk at gmail.com  Sun Nov 15 19:07:17 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 16 Nov 2015 10:07:17 +0800
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <5648C735.7060603@itamarst.org>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
 <5648C735.7060603@itamarst.org>
Message-ID: <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 1:56 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>>
>>
>> 1) The Twisted project has already experimentally demonstrated the
>> imprudence of an approach that massively breaks backwards compatibility with
>> old APIs (even if it does this in concordance with the compatibility policy,
>> by adding a bunch of new things): see the defunct twisted.web2 project.
>>
>> Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
>> all you have to do is port all of your code and all of your libraries over
>> to these new APIs!", the response isn't going to be "great, I'll get right
>> on that!". It'll be "oh well, I guess I'll just throw an nginx reverse proxy
>> in front of my app to get HTTP/2 working" or "oh well, never mind then".
>
> The counterpoint is that maybe if we'd deprecated twisted.web and told
> people they should port within a year to twisted.web2 everyone would've done
> it and we wouldn't be having this conversation :)

s/twisted.web{,2}/python{2,3}


From waterbug at pangalactic.us  Sun Nov 15 19:43:43 2015
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Sun, 15 Nov 2015 21:43:43 -0500
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
 <5648C735.7060603@itamarst.org>
 <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>
Message-ID: <564942DF.5040606@pangalactic.us>

On 11/15/2015 09:07 PM, Oon-Ee Ng wrote:
> On Mon, Nov 16, 2015 at 1:56 AM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>>>
>>>
>>> 1) The Twisted project has already experimentally demonstrated the
>>> imprudence of an approach that massively breaks backwards compatibility with
>>> old APIs (even if it does this in concordance with the compatibility policy,
>>> by adding a bunch of new things): see the defunct twisted.web2 project.
>>>
>>> Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
>>> all you have to do is port all of your code and all of your libraries over
>>> to these new APIs!", the response isn't going to be "great, I'll get right
>>> on that!". It'll be "oh well, I guess I'll just throw an nginx reverse proxy
>>> in front of my app to get HTTP/2 working" or "oh well, never mind then".
>>
>> The counterpoint is that maybe if we'd deprecated twisted.web and told
>> people they should port within a year to twisted.web2 everyone would've done
>> it and we wouldn't be having this conversation :)
>
> s/twisted.web{,2}/python{2,3}

Not the same, and it would not have worked for many,
many reasons ... Guido knew better than to try that --
there would have been torches and pitchforks!  ;)

Steve


From msc at contact.de  Mon Nov 16 09:03:33 2015
From: msc at contact.de (Michael Schlenker)
Date: Mon, 16 Nov 2015 17:03:33 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <5649FE55.3030909@contact.de>

Hi,

sounds like a good idea.

One topic: What should happen if the sender sends malformed data (e.g.
content-length: 100 and sending 200 bytes body). I would usually want to
know if the sender is broken instead of getting a responseComplete()
that claims everything is fine.

We simply subclassed twisted.web.server.Request and injected the needed
parts so we could get the data we wanted in an incremental way and set
some socket options (SO_RCVBUF) for multi-gigabyte file uploads.

So we took 'gotLength()' as a signal that headers are fully received and
also took 'write()', 'processingFailed()' to handle cleanup.

Basically we replace the self.content stream object with our own version
that does not buffer everything in memory.

We tried to do the 100-Continue stuff too, but it simply didn't work
with the Python stdlib httplib code (it just ignores those more or
less). So we either just terminate the connection forcefully (reset) or
read the full request and send it to /dev/null.

Michael

-- 
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321


From ldanielburr at me.com  Mon Nov 16 09:25:38 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Mon, 16 Nov 2015 10:25:38 -0600
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <A84ADCF6-7BC2-4996-BBE5-ED345BEFFF0D@me.com>

Hi Cory,

> On Nov 13, 2015, at 6:36 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Folks,
> 
> # Problem Statement
> 
> Thanks for your feedback on my HTTP/2 questions. I?ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I?m aiming to have something that works in at least some cases by the end of the day.
> 
> As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ?streaming? request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?
> 
> This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).
> 
> Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.
> 

I think it is worth noting that some of these issues were solved by twisted.web2, to the point that there were even adapters created that handled some of the differences between the existing web resource model and the new model in web2.

Of course, web2 did not succeed in replacing web, due in part to concerns over the introduction of a new flow-control mechanism (IStream and company).  Today though, we have https://github.com/twisted/tubes, which is being developed outside of twisted proper, but could perhaps be leveraged to overcome some of the previous concerns about introducing a mechanism different from IProducer/IConsumer.

I mention this because I think there is work within the web2 codebase that might prove useful in solving some of the issues being discussed here, in a way that would benefit twisted, and its users.


Thanks for reading,

L. Daniel Burr


From tobias.oberstein at tavendo.de  Mon Nov 16 13:11:42 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 16 Nov 2015 21:11:42 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com> <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
 <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
 <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>
Message-ID: <564A387E.7000200@tavendo.de>

>          Are you sure IOCP is able to share sockets between process? It
>     would be great if you can share some info about this. I only use

No, I am not sure. But this SO reply seems to suggest

http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t/14388707#14388707

But: there are actually 2 things required (which Linux does):

a) able to share sockets (without communicating a socket descriptor over 
some channel)
b) have the kernel load-balance incoming connections over all processes 
listening

E.g. FreeBSD does only a) currently, not b)

> https://msdn.microsoft.com/en-us/library/windows/desktop/ms740478(v=vs.85).aspx
>
>      This feature is only available on windows 8.1 or later. It would be
> great if twisted can support this feature.

Interesting! But that's not what Linux does, as it requires to 
communicate  WSAPROTOCOL_INFO over to other processes.

AND: it's not clear from the MS docs if the Win kernel will actually 
load-balance incoming connections.

Cheers,
/Tobias


From pawelmhm at gmail.com  Mon Nov 16 13:43:05 2015
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Mon, 16 Nov 2015 21:43:05 +0100
Subject: [Twisted-Python] Twisted Trac filters my messages as Spam when
	trying to update ticket #8102
Message-ID: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>

Hello,

I submitted some patches yesterday, got review from Adi and today I tried
to respond. However I'm not able to respond because all my submissions are
marked as spam and blocked by SpamBayes with super high probability. I
wonder how many other users experience that problem?

Can you please fix SpamBayes? I dont think there is anything in my messages
that warrants calling it spam.

Since I'm not able to update ticket in any way I'm going to post my message
here. It's about ticket https://twistedmatrix.com/trac/ticket/8102 my
response is following:


Thanks for review adiroiban!

> I assume that people will try to keep US-ASCII for their method names, so
we might want to reject even valind latin1 methods.

I agree with that part. All standard HTTP method names are ascii, so I dont
see much reason to support non-ascii HTTP methods. They were not supported
before this patch (they caused failures), if we fix that and allow latin1
we will allow characters that are outside ascii in method names, e.g. users
will be able to have non-standard latin1 method name: 'GET?'. In my opinion
it's better to only allow ascii and nothing else.

> For non US-ASCII or non latin1 encoding, I think that we should reject
the request much earlier. That is when we first parse the request line, and
not when we try to process the request

Yes I agree, so patch should go somewhere to
twisted.web.http.HTTPChannel.linereceived when we first get method (line
1709) right? Also is it ok we raise 501? With current patch we raise 501
Not Suppoted but maybe 400 Bad Request would be better here?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151116/21a0276f/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 16 17:44:01 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 16 Nov 2015 16:44:01 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <5649FE55.3030909@contact.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <5649FE55.3030909@contact.de>
Message-ID: <057493B1-38E1-4FA7-8BF4-761F6F0DAEA4@twistedmatrix.com>


> On Nov 16, 2015, at 8:03 AM, Michael Schlenker <msc at contact.de> wrote:
> 
> One topic: What should happen if the sender sends malformed data (e.g.
> content-length: 100 and sending 200 bytes body). I would usually want to
> know if the sender is broken instead of getting a responseComplete()
> that claims everything is fine.

This should definitely be an error.  While this isn't totally irrelevant to the design of the new server API - the implementation should surely take this kind of error-checking into account, and the old one didn't so well - it's a bit of a distraction since it's not an essential difference.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151116/df6be765/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 16 17:46:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 16 Nov 2015 16:46:12 -0800
Subject: [Twisted-Python] Twisted Trac filters my messages as Spam when
	trying to update ticket #8102
In-Reply-To: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>
References: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>
Message-ID: <C348F1B2-CE54-4925-8E31-72319E1A288E@twistedmatrix.com>


> On Nov 16, 2015, at 12:43 PM, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> I submitted some patches yesterday, got review from Adi and today I tried to respond. However I'm not able to respond because all my submissions are marked as spam and blocked by SpamBayes with super high probability. I wonder how many other users experience that problem?
> 
> Can you please fix SpamBayes? I dont think there is anything in my messages that warrants calling it spam.

I have told the filter that your messages were not spam; apologies, but despite this occasional mishap, it's the best solution we've found so far.  Now that it's had some data from you to look at it shouldn't be a problem for you in the future.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151116/7da73236/attachment.html>

From cory at lukasa.co.uk  Tue Nov 17 03:49:04 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 17 Nov 2015 10:49:04 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <56485BE6.4070507@tavendo.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
Message-ID: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>


> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?

One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ?chunk handling? function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we?re sufficiently careful about it.

Generally speaking in Twisted we could achieve this too, by careful use of Deferreds.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151117/57c19f18/attachment.pgp>

From tom at t0mb.net  Tue Nov 17 09:56:40 2015
From: tom at t0mb.net (Tom Boland)
Date: Tue, 17 Nov 2015 16:56:40 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
Message-ID: <564B5C48.1000204@t0mb.net>

Greetings all.

This may be a very basic question.  I'm hoping to implement a postfix
policy check client in twisted.  It's a simple protocol.  You send
newline separated key value pairs like:

recipient=email at ddr.ess
sender=another at ddr.ess
size=1024
helo_name=mail.server
etc..

you terminate the request with an additional newline.  The response
comes back like

action=OK

You can send mutliple requests in the same connection.  What I'm
envisaging is a module that can be used to provide a deferred
request/response pairing to my calling application.  The module class
will manage the single connection to the postfix policy daemon (I'm
actually going to have persistent connections to a few daemons), and
reconnect when necessary etc.  Any requests will return a deferred that
I can add callbacks to.  How would you design this with twisted?  I can
easily envisage a way of using a clientfactory to instantiate separate
connections for each request/response, but actually being able to simply
send a request and receive the single response for that request is
something I'm struggling to do within a LineReceiver instance (for
instance).  Would the twisted.protocols.amp module help given that I
can't change the server-side protocol?

Any advice much appreciated!

Thanks.  Tom.


From adi at roiban.ro  Tue Nov 17 09:57:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 17 Nov 2015 18:57:25 +0200
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
Message-ID: <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>

On 14 November 2015 at 11:39, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> On Fri, Nov 13, 2015 at 6:29 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>>
>>
>> We then asked people for money based on this document.  So GitHub is more
>> or less a done deal :-).
>>
>
> If the plan is GitHub and the project is fine with that, then cool.
> If there is time, I would recommend that the project take a quick look
> at gitlab.  I recently started using gitlab to contribute to this
> project: https://gitlab.com/m2crypto/m2crypto
>
> Everything I could do with GitHub (fork/pull request), I could do with
> GitLab.
> I found the UI slightly better than GitHub.
> Also with GitLab, I found that Continuous Integration seems to be integrated
> better than GitHub, such as for this merge request:
>
> https://gitlab.com/rodrigc/m2crypto/commit/31140cf41b38676e4e96330678d75817d9857b97/ci

For now, the funds were raised to migrate to GitHub, so we can not use
them to do other things.

> I have experience with migrating a ticket database and wiki from
> Trac -> Redmine for https://bugs.freenas.org, while the repository was on
> GitHub, and migrating
> the commit triggers so that commits on GitHub updated the ticket database
> in Redmine.

We will stay on Trac for issues... at least for now.

I have no idea how we can migrate to any issue tracker without losing
data if we don't have full access to the database.

All cloud based API don't allow us to impersonate users, so we will
lose the author information.

This is one reason why I started this conversation.

If you know how we can migrate to GitHub issues or GitLab or any other
bug track system without losing data please let us know.

> In addition to doing SVN -> Git, is the Twisted project interested
> in doing Trac -> GitHub for the tickets *and* wiki?

[snip]
We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages

> It is possible to migrate in stages, i.e.
> (1)  SVN -> Git
> (2)  Trac tickets -> GitHub tickets
> (3)  Trac wiki -> GitHub wiki
>
> However, gluing all these pieces together can be a lot of work,
> and it might be better just to do a "big bang" and migrate everything over
> in one shot.

The requirement is to not disrupt the dev process and to not lose data/metadata.

GitHub issues are pretty basic and we have little control over
them.... so at least in the first phase we will not try to migrate to
GitHub issues.

We will just move to cloud based Git hosting as main repo ... and see
how we can migrate form a system based on shell-scripts hooks to
web-hooks.

I see it as a good thing, as it will leave the door open for GitLab or
other platforms.

-- 
Adi Roiban


From donald at stufft.io  Tue Nov 17 10:52:48 2015
From: donald at stufft.io (Donald Stufft)
Date: Tue, 17 Nov 2015 12:52:48 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
 <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
Message-ID: <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>


> On Nov 17, 2015, at 11:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> All cloud based API don't allow us to impersonate users, so we will
> lose the author information.
> 
> This is one reason why I started this conversation.
> 
> If you know how we can migrate to GitHub issues or GitLab or any other
> bug track system without losing data please let us know.

I don?t disagree with the decision to not move to GitHub issues, however
if you wanted to you could do what Golang did to minimize the data loss.
They emailed prior participants to their bug tracker to ask them to grant
their migration app an OAuth grant to post messages in their name. Anyone
who did got the correct user account associated with their messages, and
anyone who didn?t got the catch all golang migration bot.

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151117/69fc5e39/attachment.pgp>

From glyph at twistedmatrix.com  Tue Nov 17 15:08:54 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 17 Nov 2015 14:08:54 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
Message-ID: <75B2FAEA-1E48-426A-9E6B-A071FFA61D37@twistedmatrix.com>


> On Nov 17, 2015, at 2:49 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Generally speaking in Twisted we could achieve this too, by careful use of Deferreds.

I have a bigger reply coming; however, I should note that this is basically what web2 did with its IStream interface.  While this has a big advantage over the status quo (i.e. "not solving the problem") the _way_ it solved the problem ended up being both (A) error prone, and (B) slow.  It's the sort of slowness that PyPy doesn't even help mitigate, because all the callbacks are heap-allocated, and... to be honest I don't even fully understand it, but I have experimentally verified that it's still pretty slow :-).

This is more or less the reason that Tubes exists, although more on how we might proceed either with or without tube in another message...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151117/565bcda4/attachment.html>

From tobias.oberstein at tavendo.de  Tue Nov 17 16:17:18 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 18 Nov 2015 00:17:18 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
Message-ID: <564BB57E.6030601@tavendo.de>

Am 17.11.2015 um 11:49 schrieb Cory Benfield:
>
>> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
>>
>> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?
>
> One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ?chunk handling? function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we?re sufficiently careful about it.

Thing is, HTTP2 multiplexes multiple streams over 1 TCP, and each stream 
should be flow-controlled individually - and hence can't rely on TCP 
backpressure for that.

/Tobias


From rodrigc at crodrigues.org  Tue Nov 17 16:48:09 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 17 Nov 2015 15:48:09 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
Message-ID: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>

On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:

>
> For now, the funds were raised to migrate to GitHub, so we can not use
> them to do other things.
>
> We will stay on Trac for issues... at least for now.
>
> I have no idea how we can migrate to any issue tracker without losing
> data if we don't have full access to the database.
>

It is possible to migrate to another issue tracker and not lose
data.  I've done Trac -> Redmine, and it works, but there was an existing
migration
script I could use.
For migrating to a cloud based bug tracker, you would need to take every
user
in the existing Trac database, and see if there would be a way to map
the existing users to the cloud database, such as GitHub.  It's a lot of
work, but possible.
However, for the scope of this project, if staying with Trac for issues is
what is required, that is fine.


> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
>
OK.

So based on what you have listed, I would say that most of the work will be
working with Git post commit hooks.

I would say the plan should be something like this.

A.1  https://github.com/twisted/twisted will be the "repository of truth"
       for Twisted.
           -> Twisted releases will be done from GitHub
           -> the Twisted developers who are now "core committers" for SVN,
must be
               given access to be "core committers" to
https://github.com/twisted/twisted

A.2  On the Trac server, a local git mirror of the GitHub must be set up.
       Every bug tracker I've seen that integrates with git needs a local
mirror of the repo
        in order to parse the git history in order to update the bug
database.
        This mirror should be read-only, and the only thing updating this
repo should be the Trac GitHub plugin.

A.3  On the Trac server, this plugin must be installed:
https://github.com/trac-hacks/trac-github

A.4  On the GitHub server, a post-commit web hook must be configured.  The
workflow will be this:

           [core committer does push to https://github.com/twisted/twisted]

             -> [post commit GitHub hook will be called to poke the Trac
GitHub plugin]
             -> [Trac GitHub plugin will update the local git repo on the
Trac server]
             -> [Trac GitHub will parse the git history for new commits and
update tickets]

I would recommend that steps (1) - (4) be made to work in a staging
environment, with a separate
GitHub repo, and a separate copy of the Trac database.  That way, you can
test things out without derailing
Twisted developers.  When you are confident that this workflow works, then
the transition plan will be something
like the following.

B.1   Send an e-mail to the mailing list and pick one day for the
maintenance window.
        This will warn folks when they should take a holiday from Twisted
work. :)

B.2   When maintenance is about to begin, send a [HEADSUP] mail saying that
repo will be unavailable.

B.3  Create Subversion pre-commit hook to disable all commits to
         Subversion:

http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only

B.4  Set up steps A.1 - A.4

B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to
https://github.com/twisted/twisted, and
         make sure that Trac works.

B.6  Once the Twisted core team are satisified that everything works, send
an e-mail to the mailing list
        that the maintenance window is over, and GitHub is now where the
action is!

B.7  Update all wiki documentation to change all references to getting code
from Subversion,
         to getting code from GitHub.

B.8  Update all systems which used Subversion to use GitHub.  For example,
buildbots.

--
Craig


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151117/a5b717dc/attachment.html>

From ex.vitorino at gmail.com  Tue Nov 17 19:14:22 2015
From: ex.vitorino at gmail.com (Ex Vito)
Date: Wed, 18 Nov 2015 02:14:22 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564B5C48.1000204@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
Message-ID: <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>

Tom,

I guess LineReceiver can help you with that, it's a matter of using a
different delimiter. Here is a rough sketch of something you can start
exploring:

from __future__ import print_function

from twisted.internet import reactor, protocol, endpoints, defer
from twisted.protocols import basic


class PostfixProtocol(basic.LineReceiver):

    # Assuming Postfix sends '\r\n' line breaks (does it?)
    delimiter = '\r\n\r\n'

    def lineReceived(self, multi_line):
        input_dict = {
            k: v for k, v in (
                line.split('=') for line in multi_line.split('\r\n')
            )
        }
        self.gotPostfixRequest(input_dict)

    def gotPostfixRequest(self, request_dict):
        # Silly deferred-based implementation.
        d = defer.Deferred()
        d.addCallback(self.sendPostfixAction)
        # Simulate a deferred being fired with success.
        reactor.callLater(1, d.callback, 'OK')

    def sendPostfixAction(self, response):
        # NOTE: Sends self.delimiter after the payload.
        #       Use self.tranport.write if you don't want it.
        self.sendLine('action={}'.format(response))


if __name__ == '__main__':

    ep = endpoints.serverFromString(reactor, 'tcp:10000')
    f = protocol.Factory()
    f.protocol = PostfixProtocol
    ep.listen(f)
    reactor.run()

Key ideas:
- PostfixProtocol overrides LineReceiver's delimiter (setting it to
'\r\n\r\n')
- lineReceived parses the muti_line and calls gotPostfixRequest.
- gotPostfixRequest should decide (or delegate, you choice) what kind of
response to send back.
- sendPostfixAction sends a response back to Postfix.

Notes:
- The multi_line parsing code is short(ish) but not very robust. It may
fail in bad ways with invalid input.
- The gotPostfixRequest implementation is written for the sake of a
deferred-based example.

Does this help you in any way?
Cheers,
--
exvito


On Tue, Nov 17, 2015 at 4:56 PM, Tom Boland <tom at t0mb.net> wrote:
> Greetings all.
>
> This may be a very basic question.  I'm hoping to implement a postfix
> policy check client in twisted.  It's a simple protocol.  You send
> newline separated key value pairs like:
>
> recipient=email at ddr.ess
> sender=another at ddr.ess
> size=1024
> helo_name=mail.server
> etc..
>
> you terminate the request with an additional newline.  The response
> comes back like
>
> action=OK
>
> You can send mutliple requests in the same connection.  What I'm
> envisaging is a module that can be used to provide a deferred
> request/response pairing to my calling application.  The module class
> will manage the single connection to the postfix policy daemon (I'm
> actually going to have persistent connections to a few daemons), and
> reconnect when necessary etc.  Any requests will return a deferred that
> I can add callbacks to.  How would you design this with twisted?  I can
> easily envisage a way of using a clientfactory to instantiate separate
> connections for each request/response, but actually being able to simply
> send a request and receive the single response for that request is
> something I'm struggling to do within a LineReceiver instance (for
> instance).  Would the twisted.protocols.amp module help given that I
> can't change the server-side protocol?
>
> Any advice much appreciated!
>
> Thanks.  Tom.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
--
  exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/66efa429/attachment-0001.html>

From glyph at twistedmatrix.com  Tue Nov 17 22:55:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 17 Nov 2015 21:55:16 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <564BB57E.6030601@tavendo.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
Message-ID: <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>


> On Nov 17, 2015, at 3:17 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> Am 17.11.2015 um 11:49 schrieb Cory Benfield:
>> 
>>> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
>>> 
>>> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?
>> 
>> One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ?chunk handling? function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we?re sufficiently careful about it.
> 
> Thing is, HTTP2 multiplexes multiple streams over 1 TCP, and each stream should be flow-controlled individually - and hence can't rely on TCP backpressure for that.

Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though?

-g



From glyph at twistedmatrix.com  Wed Nov 18 01:55:42 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 00:55:42 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <5648C6E1.3090000@itamarst.org>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
Message-ID: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>


> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>> Based on my reading/searching, multiple reactors in the same process
>> (even in multiple threads) is pretty much a no-go because
>> twisted.internet.reactor is a global singleton.
>> 
>> I'm also unable to find any information about connecting to self (for
>> example, to send messages from one reactor to itself).
>> 
>> 
> 
> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.

But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)

-glyph



From pantelis at blackcow-technology.co.uk  Wed Nov 18 02:21:03 2015
From: pantelis at blackcow-technology.co.uk (Pantelis Theodosiou)
Date: Wed, 18 Nov 2015 09:21:03 +0000
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
Message-ID: <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>

On Wed, Nov 18, 2015 at 8:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
> >
> > On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
> >> Based on my reading/searching, multiple reactors in the same process
> >> (even in multiple threads) is pretty much a no-go because
> >> twisted.internet.reactor is a global singleton.
> >>
> >> I'm also unable to find any information about connecting to self (for
> >> example, to send messages from one reactor to itself).
> >>
> >>
> >
> > You can just have a single reactor. E.g. if you do a listenTCP (e.g. on
> port 8080) on the reactor you can in the same process do a connectTCP to
> localhost in the same process on the same reactor; just connect to
> '127.0.0.1' or 'localhost' on port 8080.
>
> But of course you'd use <
> https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>,
> not 'listenTCP' and 'connectTCP' directly, right? :)


> -glyph
>
>
Glyph, the linked page:
https://twistedmatrix.com/documents/15.4.0/core/howto/servers.html has
endpoints example but the "Putting it All Together" still uses:

reactor.listenTCP(8123, ChatFactory())


Wouldn't it be better if that was replaced, too? Or maybe both versions be
visible on the same webpage? (one with listenTCP and one with endpoints)?

Pantelis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/452d1689/attachment.html>

From tom at t0mb.net  Wed Nov 18 02:28:57 2015
From: tom at t0mb.net (Tom Boland)
Date: Wed, 18 Nov 2015 09:28:57 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
Message-ID: <564C44D9.3050001@t0mb.net>

Hi Exvito,

Thanks very much for this. I think I might just give a bit of context
about using this.

I have an SMTP proxy using Nginx.  It uses queries an HTTP service to
establish whether mail should be forwarded, and where to (on to
postfix/dovecot/exchange backends).  It uses Twisted for the HTTP
authorisation service, and I've been using a similar model for years for
POP and IMAP in production, and for the last year on an outbound SMTP
relay.  The Twisted http service handles password authentication as well
lookups that point connections on to the correct backend servers.  All
of our custom business logic is in the python (database lookups and the
like).  Twisted has performed brilliantly as the HTTP service for years.

I'm now writing an inbound SMTP proxy service, and initially, it just
does DNSBL checks, which will actually stop around 12 million emails a
day from reaching postfix and tying up smtpd processes!  I fire off a
number of DNSBL checks in a deferred chain, and just come back to it
once the chain has completed.  The postfix policy check was going to be
added to this chain of events and initially I was going to use it to
query the dovecot quota daemon running on the appropriate backend for a
given mailbox, therefore I'd have a few tens of connections open, one to
each of the policy daemons on the dovecot backend servers.  This is just
to avoid queuing and trying to deliver mail to a mailbox that's over-quota.

I think what you've provided me with is useful for me, but I think it's
backwards for my purposes, as I need to be connecting to the policy
daemon rather than being the policy daemon!

I wanted to do this with deferred calls in case one of the policy
daemons becomes unreachable and blocks my application.  Do you think I
should do something differently in that regard?  My SQL lookups are done
synchronously.  If the database server goes away, I've got bigger
problems anyway!

Many thanks for your help.  I'll work a bit on this this morning and
come back!

Thanks again.  Tom.



On 18/11/15 02:14, Ex Vito wrote:
> Tom,
>
> I guess LineReceiver can help you with that, it's a matter of using a
> different delimiter. Here is a rough sketch of something you can start
> exploring:
>
> from __future__ import print_function
>
> from twisted.internet import reactor, protocol, endpoints, defer
> from twisted.protocols import basic
>
>
> class PostfixProtocol(basic.LineReceiver):
>
>     # Assuming Postfix sends '\r\n' line breaks (does it?)
>     delimiter = '\r\n\r\n'
>
>     def lineReceived(self, multi_line):
>         input_dict = {
>             k: v for k, v in (
>                 line.split('=') for line in multi_line.split('\r\n')
>             )
>         }
>         self.gotPostfixRequest(input_dict)
>
>     def gotPostfixRequest(self, request_dict):
>         # Silly deferred-based implementation.
>         d = defer.Deferred()
>         d.addCallback(self.sendPostfixAction)
>         # Simulate a deferred being fired with success.
>         reactor.callLater(1, d.callback, 'OK')
>
>     def sendPostfixAction(self, response):
>         # NOTE: Sends self.delimiter after the payload.
>         #       Use self.tranport.write if you don't want it.
>         self.sendLine('action={}'.format(response))
>
>
> if __name__ == '__main__':
>
>     ep = endpoints.serverFromString(reactor, 'tcp:10000')
>     f = protocol.Factory()
>     f.protocol = PostfixProtocol
>     ep.listen(f)
>     reactor.run()
>
> Key ideas:
> - PostfixProtocol overrides LineReceiver's delimiter (setting it to
> '\r\n\r\n')
> - lineReceived parses the muti_line and calls gotPostfixRequest.
> - gotPostfixRequest should decide (or delegate, you choice) what kind
> of response to send back.
> - sendPostfixAction sends a response back to Postfix.
>
> Notes:
> - The multi_line parsing code is short(ish) but not very robust. It
> may fail in bad ways with invalid input.
> - The gotPostfixRequest implementation is written for the sake of a
> deferred-based example.
>
> Does this help you in any way?
> Cheers,
> --
> exvito
>
>
> On Tue, Nov 17, 2015 at 4:56 PM, Tom Boland <tom at t0mb.net
> <mailto:tom at t0mb.net>> wrote:
> > Greetings all.
> >
> > This may be a very basic question.  I'm hoping to implement a postfix
> > policy check client in twisted.  It's a simple protocol.  You send
> > newline separated key value pairs like:
> >
> > recipient=email at ddr.ess
> > sender=another at ddr.ess
> > size=1024
> > helo_name=mail.server
> > etc..
> >
> > you terminate the request with an additional newline.  The response
> > comes back like
> >
> > action=OK
> >
> > You can send mutliple requests in the same connection.  What I'm
> > envisaging is a module that can be used to provide a deferred
> > request/response pairing to my calling application.  The module class
> > will manage the single connection to the postfix policy daemon (I'm
> > actually going to have persistent connections to a few daemons), and
> > reconnect when necessary etc.  Any requests will return a deferred that
> > I can add callbacks to.  How would you design this with twisted?  I can
> > easily envisage a way of using a clientfactory to instantiate separate
> > connections for each request/response, but actually being able to simply
> > send a request and receive the single response for that request is
> > something I'm struggling to do within a LineReceiver instance (for
> > instance).  Would the twisted.protocols.amp module help given that I
> > can't change the server-side protocol?
> >
> > Any advice much appreciated!
> >
> > Thanks.  Tom.
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> <mailto:Twisted-Python at twistedmatrix.com>
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> -- 
> --
>   exvito
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/9211d411/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Nov 18 02:43:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 01:43:21 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>
Message-ID: <B857822A-CD9E-436B-B642-7915349AAB78@twistedmatrix.com>


> On Nov 18, 2015, at 1:21 AM, Pantelis Theodosiou <pantelis at blackcow-technology.co.uk> wrote:
> 
> Wouldn't it be better if that was replaced, too? Or maybe both versions be visible on the same webpage? (one with listenTCP and one with endpoints)?

Absolutely!  In this high-level explanation of how to write a server, really only the endpoints example should be shown.  Would you mind filing a ticket (and perhaps also sending a patch? :))

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/be9296cd/attachment.html>

From cory at lukasa.co.uk  Wed Nov 18 03:28:44 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 18 Nov 2015 10:28:44 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
Message-ID: <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>


> On 18 Nov 2015, at 05:55, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though?

Not in such a binary form, no. The connection as a whole and each stream maintain independent flow control windows. This allows for pressure to be exerted on the sender to slow down, by allowing the flow control window to drop to zero. This means that there is some Twisted-level buffering, because we do have to get that data out of the socket and to queue at the application, but the amount of data to buffer is strictly bounded. Thus, if our application moves slowly, the remote side should be passively notified to slow down by the lack of window updates: we should only send those window updates once the application has actually taken some data from us.

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/19b3bbef/attachment.pgp>

From hawkowl at atleastfornow.net  Wed Nov 18 03:58:19 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 18 Nov 2015 18:58:19 +0800
Subject: [Twisted-Python] Twisted 15.5 Prerelease 1 Announcement
Message-ID: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>

Hello everyone!

Hot off the presses comes Twisted 15.5.0pre1, the prerelease of Twisted 15.5, which has been described by some as "totally radical" and "off the wall".

In this release:

- Python 3.5 support on POSIX was added, and Python 2.6 support was dropped.
- More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
- twistd is ported to Python 3, and its first plugin, web, is ported.
- twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
- NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
- Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
- Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
- 55+ closed tickets overall.

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/15.5.0pre1/) to get the prerelease tarballs and the full NEWS file.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Thanks! <3

Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/ae074c01/attachment.pgp>

From glyph at twistedmatrix.com  Wed Nov 18 04:29:54 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 03:29:54 -0800
Subject: [Twisted-Python] Twisted 15.5 Prerelease 1 Announcement
In-Reply-To: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>
References: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>
Message-ID: <013929B7-E821-4ED6-BA6C-115D17FCDABE@twistedmatrix.com>


> On Nov 18, 2015, at 2:58 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone!
> 
> Hot off the presses comes Twisted 15.5.0pre1, the prerelease of Twisted 15.5, which has been described by some as "totally radical" and "off the wall".
> 
> In this release:
> 
> - Python 3.5 support on POSIX was added, and Python 2.6 support was dropped.
> - More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
> - twistd is ported to Python 3, and its first plugin, web, is ported.
> - twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
> - NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
> - Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
> - Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
> - 55+ closed tickets overall.
> 
> As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/15.5.0pre1/) to get the prerelease tarballs and the full NEWS file.
> 
> Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> Thanks! <3
> 
> Amber Brown
> Twisted Release Manager

Fantastic job yet again - 2015 has seen some very exciting milestones and a record number of releases.  Thanks, Amber, for making that happen!

-glyph




From glyph at twistedmatrix.com  Wed Nov 18 05:18:13 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 04:18:13 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>


> On Nov 13, 2015, at 4:36 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Folks,
> 
> # Problem Statement
> 
> Thanks for your feedback on my HTTP/2 questions. I?ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I?m aiming to have something that works in at least some cases by the end of the day.

Hooray!

> As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ?streaming? request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?

This is exactly what <https://twistedmatrix.com/trac/ticket/288> is about (as you note).

> This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).
> 
> Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.
> 
> Issue #6928 has glyph suggesting that we come to the mailing list to discuss this, but the last time it was raised no responses were received[2]. I believe that with HTTP/2 on the horizon, this issue is more acute than it was before, and needs solving if Twisted is going to continue to remain relevant for the web. It should also allow people to build more performant web applications, as they should be able to handle how the data queues up in their apps.
> 
> This does not immediately block my HTTP/2 work, so we can take some time and get this right.

I'm very glad to hear you say this, because:

(A) we should absolutely make progress on this ticket now that there is some impetus to do so, but,
(B) we should absolutely NOT let this new API block any purely protocol-level HTTP2 work that needs to proceed (I say "protocol level" as a contrast to "feature level" because we could totally implement a thing that speaks HTTP 2 against the current API, although it might be awkward to expose the advantageous parts of the protocol as API features until we do some cleanup)

> # Proposed Solution
> 
> To help us move forward, I?m providing a proposal for how I?d solve this problem. This is not necessarily going to be the final approach, but is instead a straw-man we can use to form the basis of a discussion about what the correct fix should be.
> 
> My proposal is to deprecate the current Request/Resource model. It currently functions and should continue to function, but as of this point we should consider it a bad way to do things, and we should push people to move to a fully asynchronous model.

We have considered it a bad way to do things for a long time.  There have been several attempts to rewrite it (Nevow's request model, web2) but none of them have really been the comprehensive re-design we need.

> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users.

No.

Let me elaborate :-).

First of all, this is already the case (sort of).

twisted.web.server.Request inherits from twisted.web.http.Request; as you can see in http.Request, there is already a method called handleContentChunk, which is called by HTTPChannel. By overriding this method, you can already handle request data streaming in from off the wire.  This is one of the reasons that #288 is so interminable: using Twisted's public API, today, you can totally write an HTTP-based application that happily streams data from the wire.  The only problem is that this API does not propagate up to Resource objects, because Resource objects can expect the (still, as of this writing, undocumented) "content" attribute to have been filled out in getChild.  Mostly, they don't, actually!  But it's impossible to tell if they might in the general case.

You can (and many applications have) just broken the technical compatibility contract with Resource, and written a subclass of twisted.web.server.Site that has a custom requestFactory method that returns a 'streamed' resource.

So, if we're already doing this, why "no"?

Superclasses with overridable methods are a terrible mechanism for exposing extensibility.  These are used extensively throughout Twisted, the older the API the more inheritance it uses.  Newer code, you may notice, is generally written much more in a pattern of delegation to formal interfaces.  So we have tried to learn our lesson here.

> If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0),

For what it's worth, I hope that all of these will be exposed as the same event to applications, since the fact that these differ on the wire is entirely an implementation detail?

> request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We?d also update requestReceived to ensure that it?s called when all the *headers* are received, rather than waiting for the body.

Again, this is very similar to what already happens, at the layer of the HTTP protocol.  The question is, how do you indicate that you're delegating to a Resource object which may expect the .content attribute to already be populated during .getChild?

> A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that?s a header users actually send, and if they don?t we chunk the data.

request.write() already basically does this, I think?  Here, at least, we have lots of opportunity to make the implementation do smarter things (better error checking regarding content-length, for example) without changing the interface at all.

> This logic would make it much easier to work with HTTP/2 *and* with WebSockets, requiring substantially less special-case code to handle the WebSocket upgrade (when the headers are complete, we can spot the upgrade easily).
> 
> What do people think of this approach?

So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.

I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).

Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.

This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.

This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.

Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.

Then the question is: what to do with IResource?

Right now the flow of processing a request is, roughly:

-> wait for full request to arrive
  -> have HTTPChannel fill out IRequest object
-> look at request.site.resource for the root
 *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
  -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
*-> call resource.render(request)
-> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open, 

Instead, I think a good flow would be:

-> receive method/headers from request
-> recurse down from request.site.resource, calling something like nevow's or web2's locateChild, but not modifying 'request' at each stage; instead, pass a "cursor" object - perhaps indeed just a twisted.python.url.URL - indicating where we are in the resource traversal hierarchy.  the reason the request.prepath and request.postpath attributes exist is mainly for Resource objects to be able to orient themselves within a resource tree and generate links.

also, it probably bears some explanation; the signature of the current "get the next resource" call is resource.getChildWithDefault(onePathSegment, request) -> resource. This is somewhat limiting as it requires you to consume only an individual path segment at a time, which can be highly awkward for implementing sites that have a URL structure that is, for example, /YYYY/MM/DD/HH/MM/index.html.  

Instead, locateChild took the entire remaining path, and returned a 2-tuple of a resource, and the _still_ remaining path.  So for the above, you could do:

def locateChild(self, request, path):
    y, m, d = path[:3]
    return ymdresource(y, m, d), path[3:]

that 2-tuple instructs the traversal machinery, "keep going".  One alternative that we toyed with for this was to make consuming the path destructive, since that made it a lot easier to tell what resource you were "looking at":

def locateChild(self, request, path):
    y, m, d = path.consume(3)
    return ymdresource(y, m, d)

Either of these approaches also let you implement 'isLeaf' attribute without special support from the framework; you simply return leaf(), () or path.consume(path.length)

-> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.

The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.

This is long and increasingly rambly, so I should probably stop now, send it, and get your feedback.  Does the strategy I'm proposing make sense?  I'm sure I'm leaving a ton out so feel free to ask for clarification.  Hopefully I didn't leave too many incomplete sentences in the middle.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/b361c1b5/attachment-0001.html>

From glyph at twistedmatrix.com  Wed Nov 18 05:30:05 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 04:30:05 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
 <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
Message-ID: <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>


> On Nov 18, 2015, at 2:28 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 18 Nov 2015, at 05:55, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though?
> 
> Not in such a binary form, no. The connection as a whole and each stream maintain independent flow control windows. This allows for pressure to be exerted on the sender to slow down, by allowing the flow control window to drop to zero. This means that there is some Twisted-level buffering, because we do have to get that data out of the socket and to queue at the application, but the amount of data to buffer is strictly bounded. Thus, if our application moves slowly, the remote side should be passively notified to slow down by the lack of window updates: we should only send those window updates once the application has actually taken some data from us.

So the receiver sends explicit "unchoke" messages to increase the window, and the "choke" message is implicit?

-glyph

From cory at lukasa.co.uk  Wed Nov 18 07:33:26 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 18 Nov 2015 14:33:26 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
 <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
 <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>
Message-ID: <A0E79B84-EFA8-4D16-BB50-B669E024FBFA@lukasa.co.uk>


> On 18 Nov 2015, at 12:30, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> So the receiver sends explicit "unchoke" messages to increase the window, and the "choke" message is implicit?

Modulo some irrelevant distinctions, yes.

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/b4679880/attachment.pgp>

From twisted-python at 2xlp.com  Wed Nov 18 12:19:52 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 18 Nov 2015 14:19:52 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
 <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
 <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>
Message-ID: <D473120A-254D-4DD8-9C01-EFA0E991466C@2xlp.com>


On Nov 17, 2015, at 12:52 PM, Donald Stufft wrote:

> I don?t disagree with the decision to not move to GitHub issues, however
> if you wanted to you could do what Golang did to minimize the data loss.
> They emailed prior participants to their bug tracker to ask them to grant
> their migration app an OAuth grant to post messages in their name. Anyone
> who did got the correct user account associated with their messages, and
> anyone who didn?t got the catch all golang migration bot.

That's a great partial solution.

On top of that I would suggest the following:

	Put the trac into read-only mode.
	Use the API to generate a "github wiki page" for each "trac user".
	When importing, create a "template" for migrated issues that cross-references to the original ticket and the wiki.  Something like this:
		** Migrated Issue **
		Original Trac Ticket (read-only): {{trac url}}
		AutoGenerated Author Wiki: {{github wiki url}}

		Original Body:
		{{body contents}}

		Original Comments (if any):

		{{format comments and link to the github wiki url}}

GitHub's wiki doesn't have normal API access.  It's actually just a 'secret' git  [https://help.github.com/articles/adding-and-editing-wiki-pages-locally/]

So you won't necessarily "lose" author information -- you'll just have the author info represented in another manner.

If any authors become known, you can just edit the wiki to reference their github account from that page (or possibly update the issue in the api, not sure).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151118/bd900913/attachment.html>

From ex.vitorino at gmail.com  Thu Nov 19 00:53:16 2015
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 19 Nov 2015 07:53:16 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564C44D9.3050001@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
Message-ID: <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>

On Wed, Nov 18, 2015 at 9:28 AM, Tom Boland <tom at t0mb.net> wrote:

> I think what you've provided me with is useful for me, but I think it's
> backwards for my purposes, as I need to be connecting to the policy daemon
> rather than being the policy daemon!
>
> I wanted to do this with deferred calls in case one of the policy daemons
> becomes unreachable and blocks my application.  Do you think I should do
> something differently in that regard?  My SQL lookups are done
> synchronously.  If the database server goes away, I've got bigger problems
> anyway!
>

So maybe something like this is more likely to be useful:

#!/usr/bin/env python

from __future__ import print_function

from twisted.internet import reactor, protocol, endpoints, defer
from twisted.protocols import basic


class PostfixProtocol(basic.LineReceiver):

    # Assuming Postfix uses '\r\n' line breaks (does it?)
    delimiter = '\r\n'

    def __init__(self):
        self.action = None
        self.action_deferred = None

    def lineReceived(self, line):
        if '=' in line:
            self.action = line.split('=')[1]
        elif line == '':
            self.action_deferred.callback(self.action)
            self.action_deferred = None
        else:
            # oops, bad input
            pass

    def sendPostfixRequest(self, request_dict):
        if not self.action_deferred is None:
            raise Exception('transaction pending')
        for k, v in request_dict.items():
            self.sendLine('{}={}'.format(k,v))
        # Empty line signals we're done
        self.sendLine('')
        self.action_deferred = defer.Deferred()
        return self.action_deferred

@defer.inlineCallbacks
def checkPostfixPolicy(request_dict):
    ep = endpoints.clientFromString(reactor, 'tcp:host=127.0.0.1:
port=10000')
    p = yield endpoints.connectProtocol(ep, PostfixProtocol())
    action = yield p.sendPostfixRequest(request_dict)
    print('got: {}'.format(action))
    reactor.stop()


if __name__ == '__main__':

    request_dict = {
        'recipient': 'email at ddr.ess',
        'sender': 'email at ddr.ess',
    }
    reactor.callWhenRunning(checkPostfixPolicy, request_dict)
    reactor.run()

Highlights:
- This is not the same protocol as before, in particular it uses a
different delimiter.
- It assumes the response is also terminated with an empty line (does it?).
- It more than one outstanding response: a different exception should be
used.
- The input processing is very rudimentary and failure-prone.
- checkPostfixPolicy could, of course, return instead of printing. :)

Cheers,
--
  exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151119/81f55211/attachment.html>

From cory at lukasa.co.uk  Thu Nov 19 04:50:52 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 19 Nov 2015 11:50:52 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
Message-ID: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>


> On 18 Nov 2015, at 12:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 

Sorry about the delay in responding to this, but I wanted to make sure I knew at least a bit about what I was talking about before I responded!

>> What do people think of this approach?
> 
> So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.
> 
> I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).

So, I think in general this is interesting. One of the big difficulties I?m having right now is that I?m trying to combine this ?streaming HTTP? work with the implementation of HTTP/2, which means that I need to keep the HTTP/2 work in mind whenever I talk about this *and* update the HTTP/2 design in response to decisions we make here. This means I?ve got quite a lot of balls in the air right now, and I am confident I?ll drop quite a few. One thing I?m deliberately not doing here is considering Tubes, in part because I?m extremely concerned about backward compatibility, and want the HTTP/2 work to function in the same environment.

Unfortunately, this means this conversation is blending into the HTTP/2 one, so I?m going to hijack this thread and bring in some concrete discussion of what I?m working on with the HTTP/2 stuff.

I was having a conversation about the HTTP/2 architecture on #twisted-dev yesterday, which has led towards my current working approach for HTTP/2, which will be to have two underlying objects. We?ll have H2Connection, which implements IProtocol, and H2Stream, which implements ITransport. These two objects will be *extremely* tightly coupled: H2Stream cannot meaningfully run over an arbitrary transport mechanism, and knows a great deal about how H2Connections work.

The reason we need to take this approach is because IConsumer doesn?t allow for us to have correlators, so even if we only had H2Connection it wouldn?t be able to identify a given producer with the stream it holds. By extension, IConsumer cannot consume multiple producers at once. For this reason, we need an interface between H2Connection and H2Stream that is similar to ITransport and IConsumer, but more featureful. Basically, H2Stream is a thin shim between a producer and H2Connection that adds a stream ID to a few function calls.

> Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.
> 
> This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.
> 
> This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.

Just let me clarify how this is expected to work. Somewhere we have a t.w.s.Site, which builds some kind of HTTP protocol (currently HTTPChannel, in future some object that can transparently swap between HTTPChannel and H2Connection) when connections are received.

These two protocols each build an IGoodRequest, which is very similar to IRequest but has a deliverBody method. The consumer of this (whether IResource or some other thing). These objects, if they want to consume a stream, register a protocol via deliverBody. At this point, H2Connection (via H2Stream) provides itself as the transport to that protocol, and calls deliverBody when chunks of data are received.

When the object receiving the request is ready to send a response, it calls?something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

Is my understand of that correct? If so, I think this design can work: essentially, H2Stream becomes the weird intermediary layer that appears as both a transport and a protocol to the request/response layer. Underneath the covers it mostly delegates to H2Connection, which implements a slightly weirdo version of IConsumer (and in fact IProducer) that can only be consumed by H2Stream.

> Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.
> 
> Then the question is: what to do with IResource?
> 
> Right now the flow of processing a request is, roughly:
> 
> -> wait for full request to arrive
>   -> have HTTPChannel fill out IRequest object
> -> look at request.site.resource for the root
>  *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
>   -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
> *-> call resource.render(request)
> -> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open,
> 
> Instead, I think a good flow would be:

[snip long discussion of how to write locateChild]

Agreed that these proposed approaches would work well. I have no concrete feedback on them, they seem good to me.

> -> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.
> 
> The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.

This seems super-gross but vaguely do-able, and we?ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.

All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I?m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we?ll see how it goes.

Cory


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151119/dcc2f0f5/attachment-0001.pgp>

From tom at t0mb.net  Thu Nov 19 09:19:16 2015
From: tom at t0mb.net (Tom Boland)
Date: Thu, 19 Nov 2015 16:19:16 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
 <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
Message-ID: <564DF684.1060100@t0mb.net>

Thanks again for this.  It's really useful.  It turns out that the
delimiter is a plain old \n.  Who knows how consistent this will be
between different policy daemons, I don't know!

I've modified it to manage a DeferredQueue which hopefully means I can
just keep throwing requests at it without every being bounced away.  A
stripped down example (with even less error checking!) of what I've
managed to work your example in to is here:

class PostfixPolicyClient(LineReceiver):

    delimiter = '\n'

    def __init__(self):
        self.resultQueue = DeferredQueue()


    def lineReceived(self, line):
        if '=' in line:
            self.resultQueue.put(True if line.split('=')[1] == 'OK' else
False)


    def sendPostfixPolicyClientRequest(self, request_dict):
        for k, v in request_dict.items():
            self.sendLine('{}={}'.format(k, v))
        self.sendLine('')
        return self.resultQueue.get()



Now, this isn't a working example, it's just the minimum that will
demonstrate my idea.  I just wonder if what I've done with the
DeferredQueue is sane.  If I return the .get() entry from the
DeferredQueue when doing the request, and then do a put() in
lineReceived, am I guaranteeing that I will get my results in the
correct order?

Thanks again for all your help!

Many thanks.  Tom.


On 19/11/15 07:53, exvito here wrote:
>
> On Wed, Nov 18, 2015 at 9:28 AM, Tom Boland <tom at t0mb.net
> <mailto:tom at t0mb.net>> wrote:
>
>     I think what you've provided me with is useful for me, but I think
>     it's backwards for my purposes, as I need to be connecting to the
>     policy daemon rather than being the policy daemon!
>
>     I wanted to do this with deferred calls in case one of the policy
>     daemons becomes unreachable and blocks my application.  Do you
>     think I should do something differently in that regard?  My SQL
>     lookups are done synchronously.  If the database server goes away,
>     I've got bigger problems anyway!
>
>
> So maybe something like this is more likely to be useful:
>
> #!/usr/bin/env python
>
> from __future__ import print_function
>
> from twisted.internet import reactor, protocol, endpoints, defer
> from twisted.protocols import basic
>
>
> class PostfixProtocol(basic.LineReceiver):
>
>     # Assuming Postfix uses '\r\n' line breaks (does it?)
>     delimiter = '\r\n'
>
>     def __init__(self):
>         self.action = None
>         self.action_deferred = None
>
>     def lineReceived(self, line):
>         if '=' in line:
>             self.action = line.split('=')[1]
>         elif line == '':
>             self.action_deferred.callback(self.action)
>             self.action_deferred = None
>         else:
>             # oops, bad input
>             pass
>
>     def sendPostfixRequest(self, request_dict):
>         if not self.action_deferred is None:
>             raise Exception('transaction pending')
>         for k, v in request_dict.items():
>             self.sendLine('{}={}'.format(k,v))
>         # Empty line signals we're done
>         self.sendLine('')
>         self.action_deferred = defer.Deferred()
>         return self.action_deferred
>
> @defer.inlineCallbacks
> def checkPostfixPolicy(request_dict):
>     ep = endpoints.clientFromString(reactor,
> 'tcp:host=127.0.0.1:port=10000')
>     p = yield endpoints.connectProtocol(ep, PostfixProtocol())
>     action = yield p.sendPostfixRequest(request_dict)
>     print('got: {}'.format(action))
>     reactor.stop()
>
>
> if __name__ == '__main__':
>
>     request_dict = {
>         'recipient': 'email at ddr.ess',
>         'sender': 'email at ddr.ess',
>     }
>     reactor.callWhenRunning(checkPostfixPolicy, request_dict)
>     reactor.run()
>
> Highlights:
> - This is not the same protocol as before, in particular it uses a
> different delimiter.
> - It assumes the response is also terminated with an empty line (does
> it?).
> - It more than one outstanding response: a different exception should
> be used.
> - The input processing is very rudimentary and failure-prone.
> - checkPostfixPolicy could, of course, return instead of printing. :)
>
> Cheers,
> --
>   exvito
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151119/8f8b4d9c/attachment.html>

From ex.vitorino at gmail.com  Thu Nov 19 17:10:26 2015
From: ex.vitorino at gmail.com (exvito here)
Date: Fri, 20 Nov 2015 00:10:26 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564DF684.1060100@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
 <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
 <564DF684.1060100@t0mb.net>
Message-ID: <CADtv4OCMF3m58iVRe9btQY=hcHkxQ4yR6cDPsG+QoPCejVrVhw@mail.gmail.com>

On Thu, Nov 19, 2015 at 4:19 PM, Tom Boland <tom at t0mb.net> wrote:

> Thanks again for this.  It's really useful.  It turns out that the
> delimiter is a plain old \n.  Who knows how consistent this will be between
> different policy daemons, I don't know!
>

I would check the Postfix docs for that.


> Now, this isn't a working example, it's just the minimum that will
> demonstrate my idea.  I just wonder if what I've done with the
> DeferredQueue is sane.  If I return the .get() entry from the DeferredQueue
> when doing the request, and then do a put() in lineReceived, am I
> guaranteeing that I will get my results in the correct order?
>

The DeferredQueue is a nice approach: it ensures the get() results come out
in the same order as the put() calls.

The key question is whether or not the server handles multiple outstanding
requests within the same connection. Given your informal protocol
description, if the server supports it, it seems the responses must come
back in the same order as the requests were sent, otherwise there is
apparently no way to relate them; that being the case, what's the advantage
of pushing more than one request at a time if one slow request/response
"transaction" will delay a subsequent fast request/response "transaction"?

A variation of this, assuming the server only handles one outstanding
request at a time per connection, could be a protocol implementation that
would queue requests ensuring only one was sent at a time: this might
provide a cleaner client side API.

PS: My references to "Postfix docs" might need to be replaced by "your
policy server docs" which, hopefully, will match Postfix's... (you would
know that) :)

Cheers,
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/3ee25ae2/attachment.html>

From glyph at twistedmatrix.com  Thu Nov 19 22:06:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 19 Nov 2015 21:06:30 -0800
Subject: [Twisted-Python] incompatible change - need revert before release
Message-ID: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>

Tom Prince discovered a regression on https://twistedmatrix.com/trac/ticket/7016#comment:14 <https://twistedmatrix.com/trac/ticket/7016#comment:14> - I think that this was introduced after 15.4, so it needs to be rolled back (or fixed, if someone can get to it before the revert) in 15.5.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151119/6d5c5c70/attachment.html>

From ngoonee.talk at gmail.com  Thu Nov 19 22:19:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 20 Nov 2015 13:19:38 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
Message-ID: <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>

On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>
>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>> Based on my reading/searching, multiple reactors in the same process
>>> (even in multiple threads) is pretty much a no-go because
>>> twisted.internet.reactor is a global singleton.
>>>
>>> I'm also unable to find any information about connecting to self (for
>>> example, to send messages from one reactor to itself).
>>>
>>>
>>
>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>
> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>
> -glyph


But, but... I LIKE listen/connectTCP.... fits better with how I think.


From glyph at twistedmatrix.com  Thu Nov 19 22:22:35 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 19 Nov 2015 21:22:35 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
Message-ID: <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>

> On Nov 19, 2015, at 9:19 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> 
>>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>> 
>>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>>> Based on my reading/searching, multiple reactors in the same process
>>>> (even in multiple threads) is pretty much a no-go because
>>>> twisted.internet.reactor is a global singleton.
>>>> 
>>>> I'm also unable to find any information about connecting to self (for
>>>> example, to send messages from one reactor to itself).
>>>> 
>>>> 
>>> 
>>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>> 
>> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>> 
>> -glyph
> 
> 
> But, but... I LIKE listen/connectTCP.... fits better with how I think.

If you use connectTCP/listenTCP, you miss out on important functionality.  For example, listenTCP can't do encryption, which means it's unsuitable for use on the modern internet, unless your protocol calls startTLS right away.

Also you don't get stuff like https://txtorcon.readthedocs.org for free.

So, connectTCP/listenTCP are low-level APIs that should really only be used for *implementing* an endpoint, not used directly by applications.  If this does not fit with how you think then you need to change how you think :).

-glyph



From adi at roiban.ro  Fri Nov 20 01:08:27 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 10:08:27 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
Message-ID: <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>

It was released before 15.4

Twisted Web 15.2.0 (2015-05-18)
===============================

Features
--------
 - twisted.web.server.Site accepts requestFactory as constructor
   argument. (#7016)

----------

Not sure if rollback is the right thing to do... but I have no idea how to
proceed as any change will back the compatibility.

I guess that we should just create a normal bug ticket and fix this issue


Regards,
Adi


On 20 November 2015 at 07:06, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Tom Prince discovered a regression on
> https://twistedmatrix.com/trac/ticket/7016#comment:14 - I think that this
> was introduced after 15.4, so it needs to be rolled back (or fixed, if
> someone can get to it before the revert) in 15.5.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/4290c41e/attachment.html>

From ngoonee.talk at gmail.com  Fri Nov 20 01:32:32 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 20 Nov 2015 16:32:32 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
 <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>
Message-ID: <CAGQ70euyO6SY+dryPrZw6R5gyToiZmvtCOm8=qEju9ARm6hprw@mail.gmail.com>

On Fri, Nov 20, 2015 at 1:22 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>> On Nov 19, 2015, at 9:19 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>>
>>>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>>>
>>>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>>>> Based on my reading/searching, multiple reactors in the same process
>>>>> (even in multiple threads) is pretty much a no-go because
>>>>> twisted.internet.reactor is a global singleton.
>>>>>
>>>>> I'm also unable to find any information about connecting to self (for
>>>>> example, to send messages from one reactor to itself).
>>>>>
>>>>>
>>>>
>>>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>>>
>>> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>>>
>>> -glyph
>>
>>
>> But, but... I LIKE listen/connectTCP.... fits better with how I think.
>
> If you use connectTCP/listenTCP, you miss out on important functionality.  For example, listenTCP can't do encryption, which means it's unsuitable for use on the modern internet, unless your protocol calls startTLS right away.
>
> Also you don't get stuff like https://txtorcon.readthedocs.org for free.
>
> So, connectTCP/listenTCP are low-level APIs that should really only be used for *implementing* an endpoint, not used directly by applications.  If this does not fit with how you think then you need to change how you think :).
>
> -glyph

I know better than to argue this point. My app as it currently stands
will only ever be used on local networks (doubt the way I'm designing
it would handle high latencies well), and I'm really using twisted as
a more convenient/performant socket with AMP on top.

That being said, using endpoints is easy enough (it seems), and I'm
going to give it a go once I'm done crafting all these messages (based
on the earlier response in this thread I'm totally cutting blinker out
of the app and replacing all my signals).


From glyph at twistedmatrix.com  Fri Nov 20 01:32:39 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 00:32:39 -0800
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
Message-ID: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>

> On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> It was released before 15.4
> 
> Twisted Web 15.2.0 (2015-05-18)
> ===============================
> 
> Features
> --------
>  - twisted.web.server.Site accepts requestFactory as constructor
>    argument. (#7016)
> 
> ----------
> 
> Not sure if rollback is the right thing to do... but I have no idea how to proceed as any change will back the compatibility.
> 
> I guess that we should just create a normal bug ticket and fix this issue

Thanks for finding the changelog entry; sorry for the false alarm.

If it's been in a release, then there's probably nothing to do.  It's a shame that this went out, but once a breakage like this has happened we have to live with it because otherwise, as you say, we'd be breaking compatibility for the people that already upgraded.  For those that need to support both versions, keyword arguments are the way to go.

-glyph



From johnaherne at rocs.co.uk  Fri Nov 20 01:52:51 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 08:52:51 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certificates
Message-ID: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>

I am posting here because my update on the wiki got rejected as spam.

If I can get that fixed I will repost it to the wiki.

Anyway here is what I wanted to post.

Regards

John Aherne


Some additional information regarding wincertstore.

My reading of the runes relating to automatic and dynamic updates is as
follows:

In an organisation with a sysadmin, dynamic updates will be turned off and
an internal mechanism will be in place to update clients.

Dynamic updates represents too much of a security risk.

There is also an option from Microsoft on a daily basis to automatically
update the certificate store

So sysadmins can either arrange to have the daily update occur or have it
downloaded to a central system under their control where they distribute
the update plus any other certificates they need to add for company use.


In smaller organisations no doubt the automatic update will be left in
place.

It would seem that the dynamic update is part of windows os and the
application is not involved in the process. The verification either
succeeds or fails.

As an example see this link that contains this info:--

http://dreamlayers.blogspot.co.uk/2009/12/windows-7-cant-always-automatically.html

<<Today Secunia PSI refused to run with the message: "an error occurred
while verifying the security certificate". Then I found that IE refused
o show https://secunia.com because the certificate was "not issued by a
trusted certificate authority".

Firefox did not have a problem with that webpage.

For some reason, IE did not recognize the "Thawte Server CA" certificate.
IE also refused to recognize StartSSL.

This was really weird, because as far as I know, Windows 7 is supposed to
automatically update root certificates.

Microsoft even explains how the process works in Vista. My first thought
was that my firewall was blocking the update, but that was not it.

Event log showed event 4100 from CAPI2, which is "Successful auto update
retrieval of third-party root certificate".

The problem was event 4110: "Failed to add certificate to Third-Party Root
Certification Authorities store with error:

A certificate chain could not be built to a trusted root authority."

I manually downloaded and installed the latest root certificate update from
Windows Update.

After that, everything works. I'm just left wondering why I had to deal
with this in the first place.


A later comment says:

I think this may be because Cryptographic Services (CryptSvc) was unable to
access the Internet because of the firewall.

Its description says that it includes the "Automatic Root Certificate
Update Service, which retrieves root certificates from Windows Update".

There are CAPI2 events relating to downloading and unpacking a root
certificates .CAB file, and those do not appear in my event log.>>

So windows cryptographic services does the dynamic check for certificate
verification.

However, you can always download the latest certificate store and update it
yourself.

This strikes me as similar to using the firefox download as happens on many
linux systems and how the requests library works.

I did a simple test to see if the dynamic update works on my win7 system.

I used certmgr.msc to delete the GoDaddy root certificate.

I then opened a browser to the godaddy site to see what would happen.

In some side bar I saw a link that said the cert was failing but the main
site site connected without problems.

When I checked the certificate store there was still no godaddy root
certificate. So what was happening?

I then downloaded the update and updated my store. I ended up with about
200 entries. More than before but since I did not make a note I can't
really be sure if I got more than when I started.

I just need to run some more tests to see how this dynamic update is
supposed to work.

Manually updating the certificate store


The link to manually update the certifcate store is below:

To Manually install the certificates

1. Download
http://download.windowsupdate.com/msdownload/update/v3/static/trustedr/en/rootsupd.exe

2. Extract the files using the command rootsupd.exe /c /t:C:\temp\extroot

3. from c:\temp\extroot run the following 4 commands (from an elevated
prompt)

updroots.exe authroots.sst

updroots.exe updroots.sst

updroots.exe -l roots.sst

updroots.exe -d delroots.sst?


Here is an extract from microsoft technet explaining how the automatic
update works.

https://technet.microsoft.com/en-us/library/cc749331(WS.10).aspx

<<The Update Root Certificates feature in Windows Vista is designed to
automatically check the list
of trusted authorities on the Windows Update Web site when this check is
needed by a user's application.
Specifically, if the application is presented with a certificate issued by
a certification authority in
a PKI that is not directly trusted, the Update Root Certificates feature
(if it is not turned off)
will contact the Windows Update Web site to see if Microsoft has added the
certificate of the root CA
to its list of trusted root certificates. If the CA has been added to the
Microsoft list of trusted authorities,
its certificate will automatically be added to the set of trusted root
certificates on the user's computer.
The Update Root Certificates feature can be turned off in Windows Vista by
using Group Policy.

For more information, see "Procedures for Viewing or Changing Group Policy
Settings that Affect
Certificates in Windows Vista," later in this section.>>

Below is a link to a mozilla forum where the sysadmins have been
complaining over the past 7 years that firefox will not support
wincertstore so it can be integrated into their control systems.

As a result they drop firefox and only support chrome and IE.

https://bugzilla.mozilla.org/show_bug.cgi?id=432802

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/6527db13/attachment.html>

From glyph at twistedmatrix.com  Fri Nov 20 02:37:05 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 01:37:05 -0800
Subject: [Twisted-Python] Updating wincertstore for SSL certificates
In-Reply-To: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>
References: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>
Message-ID: <20EF393D-CBAE-4997-871C-175DD430E949@twistedmatrix.com>


> On Nov 20, 2015, at 12:52 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I am posting here because my update on the wiki got rejected as spam.
> 
> If I can get that fixed I will repost it to the wiki.
> 
> Anyway here is what I wanted to post.

I told the spam filter that your post was indeed not spam.  You should be able to re-post...

-glyph



From adi at roiban.ro  Fri Nov 20 02:42:36 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 11:42:36 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
Message-ID: <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>

On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > It was released before 15.4
> >
> > Twisted Web 15.2.0 (2015-05-18)
> > ===============================
> >
> > Features
> > --------
> >  - twisted.web.server.Site accepts requestFactory as constructor
> >    argument. (#7016)
> >
> > ----------
> >
> > Not sure if rollback is the right thing to do... but I have no idea how
> to proceed as any change will back the compatibility.
> >
> > I guess that we should just create a normal bug ticket and fix this issue
>
> Thanks for finding the changelog entry; sorry for the false alarm.
>
> If it's been in a release, then there's probably nothing to do.  It's a
> shame that this went out, but once a breakage like this has happened we
> have to live with it because otherwise, as you say, we'd be breaking
> compatibility for the people that already upgraded.  For those that need to
> support both versions, keyword arguments are the way to go.


Well, in public interfaces we could just stop mixing *args and **kwargs
with other arguments.

It is more work for maintainers, but as a library user I find it much
easier to see the exact args in the docs, rather than seeing  *args  /
**kwargs and then navigating the inheritance path to find out all supported
arguments.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/e6c2fab3/attachment.html>

From johnaherne at rocs.co.uk  Fri Nov 20 02:48:18 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 09:48:18 +0000
Subject: [Twisted-Python] Updateing wincertstore for SSL certifcicates
Message-ID: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>

Sorry this was meant to go to ticket #6371 not the wiki

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/68ada80c/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Nov 20 03:25:14 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 02:25:14 -0800
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
 <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
Message-ID: <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>


> On Nov 20, 2015, at 1:42 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> >
> > It was released before 15.4
> >
> > Twisted Web 15.2.0 (2015-05-18)
> > ===============================
> >
> > Features
> > --------
> >  - twisted.web.server.Site accepts requestFactory as constructor
> >    argument. (#7016)
> >
> > ----------
> >
> > Not sure if rollback is the right thing to do... but I have no idea how to proceed as any change will back the compatibility.
> >
> > I guess that we should just create a normal bug ticket and fix this issue
> 
> Thanks for finding the changelog entry; sorry for the false alarm.
> 
> If it's been in a release, then there's probably nothing to do.  It's a shame that this went out, but once a breakage like this has happened we have to live with it because otherwise, as you say, we'd be breaking compatibility for the people that already upgraded.  For those that need to support both versions, keyword arguments are the way to go.
> 
> Well, in public interfaces we could just stop mixing *args and **kwargs with other arguments. 
> 
> It is more work for maintainers, but as a library user I find it much easier to see the exact args in the docs, rather than seeing  *args  / **kwargs and then navigating the inheritance path to find out all supported arguments.

I'm not quite sure what you're referring to in this case; but generally, I agree.  If you pass a parameter, you should document it with @param even if your arg list says *args / **kwargs.  This is how I tried to document, for example, optionsForClientTLS.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/859953b9/attachment.html>

From glyph at twistedmatrix.com  Fri Nov 20 03:25:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 02:25:30 -0800
Subject: [Twisted-Python] Updateing wincertstore for SSL certifcicates
In-Reply-To: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>
References: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>
Message-ID: <E06CF683-5E04-4172-84ED-7FA44125BEFB@twistedmatrix.com>


> On Nov 20, 2015, at 1:48 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Sorry this was meant to go to ticket #6371 not the wiki

In any case, the spam filter should be OK with it :).

-glyph



From adi at roiban.ro  Fri Nov 20 03:47:12 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 12:47:12 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
 <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
 <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>
Message-ID: <CAFycZ9egUiBr+VA6OAaLJQ=1Z0vAoMohNh55MrO89o+D35SbVQ@mail.gmail.com>

On 20 November 2015 at 12:25, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 20, 2015, at 1:42 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
> On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
>> >
>> > It was released before 15.4
>> >
>> > Twisted Web 15.2.0 (2015-05-18)
>> > ===============================
>> >
>> > Features
>> > --------
>> >  - twisted.web.server.Site accepts requestFactory as constructor
>> >    argument. (#7016)
>> >
>> > ----------
>> >
>> > Not sure if rollback is the right thing to do... but I have no idea how
>> to proceed as any change will back the compatibility.
>> >
>> > I guess that we should just create a normal bug ticket and fix this
>> issue
>>
>> Thanks for finding the changelog entry; sorry for the false alarm.
>>
>> If it's been in a release, then there's probably nothing to do.  It's a
>> shame that this went out, but once a breakage like this has happened we
>> have to live with it because otherwise, as you say, we'd be breaking
>> compatibility for the people that already upgraded.  For those that need to
>> support both versions, keyword arguments are the way to go.
>
>
> Well, in public interfaces we could just stop mixing *args and **kwargs
> with other arguments.
>
> It is more work for maintainers, but as a library user I find it much
> easier to see the exact args in the docs, rather than seeing  *args  /
> **kwargs and then navigating the inheritance path to find out all supported
> arguments.
>
>
> I'm not quite sure what you're referring to in this case; but generally, I
> agree.  If you pass a parameter, you should document it with @param even if
> your arg list says *args / **kwargs.  This is how I tried to document, for
> example, optionsForClientTLS.
>

Instead of

def __init__(self, resource, requestFactory=None, *args, **kwargs):
    http.HTTPFactory.__init__(self, *args, **kwargs)

you can have

def __init__(self, resource, logFile=None, requestFactory=None):
    http.HTTPFactory.__init__(self, logFile=logFile)


Duplicating documentation is ugly... maybe we can "improve" pydoctor to
support something like this. Like @see but instead of creating a link, the
code is duplicated... but maybe a link is enough


def __init__(self, resource, logFile=None, requestFactory=None):
    """"
    Some description.

    @include http.HTTPFactory.__init__.logFile
    """"
    http.HTTPFactory.__init__(self, logFile=logFile)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/6a077c7f/attachment.html>

From johnaherne at rocs.co.uk  Fri Nov 20 04:12:03 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 11:12:03 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
Message-ID: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>

Submission rejected as potential spam

   - SpamBayes determined spam probability of 99.60%

Looks like the spam filter does not like me.

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/b9ff67b4/attachment.html>

From glyph at twistedmatrix.com  Fri Nov 20 06:06:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 05:06:21 -0800
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
In-Reply-To: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
References: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
Message-ID: <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>

> On Nov 20, 2015, at 3:12 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Submission rejected as potential spam
> SpamBayes determined spam probability of 99.60%
> Looks like the spam filter does not like me.

This time I re-trained repeatedly until the 'test' filter gave me a 0% probability result.  Try now?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/7b8e781d/attachment-0001.html>

From johnaherne at rocs.co.uk  Fri Nov 20 06:49:26 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 13:49:26 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
In-Reply-To: <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>
References: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
 <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>
Message-ID: <CAKmUHjaO09ggF3gsDEn1zfx-O2A9AobnA13-6Q3v5LFfj1TmFA@mail.gmail.com>

Thanks

That worked

John

On Fri, Nov 20, 2015 at 1:06 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> On Nov 20, 2015, at 3:12 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
>
> Submission rejected as potential spam
>
>    - SpamBayes determined spam probability of 99.60%
>
> Looks like the spam filter does not like me.
>
>
> This time I re-trained repeatedly until the 'test' filter gave me a 0%
> probability result.  Try now?
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151120/1745b6f9/attachment.html>

From pawelmhm at gmail.com  Sat Nov 21 02:51:48 2015
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sat, 21 Nov 2015 10:51:48 +0100
Subject: [Twisted-Python] spambayes
Message-ID: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>

I get following message:

> Submission rejected as potential spam
> SpamBayes determined spam probability of 74.83

SpamBayes seems to hate new users...

This is after trying to submit following bug report:

Executive summary page(
http://twistedmatrix.com/documents/current/core/howto/vision.html) is
probably first thing user will read when she visits Twisted page. At the
moment this page is not providing important information about Twisted.

What is missing and what should be present in introduction to Twisted:

* explanation of difference between non-blocking and blocking IO
* what is reactor, why is it important (mention of reactor design pattern)
* introduction to core concepts of Twisted: protocol, factory,  defferred
etc

It should be simple and easy to understand explanation that could give
total noob overview of framework.

I also think some paragraphs are misleading and not very informative, for
example:

> While Python by itself is a very powerful language, there are many
facilities it lacks which other languages have spent great attention to
adding.

It sounds very vague and  it is probably not true now isn't it? Python3 has
its own async libraries in standard library so this sentence is misleading.

> It began as a game, it is being used commercially in games, and it will
be, I hope, an interactive and entertaining experience for the end-user.

this could also appear misleading for newbie. New user will probably visit
docs to learn more about networking, information about usage of twisted in
games may not be relevant for most use cases. It should not be first thing
user reads when she visits introduction.

> As a platform, Twisted should be focused on integration. Ideally, all
functionality will be accessible through all protocols.

At this point user knows nothing about protocols and knows little about
functionality of Twisted so this sentence will probably not mean much for
newbie.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151121/157557f4/attachment.html>

From adi at roiban.ro  Sun Nov 22 05:04:17 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 Nov 2015 14:04:17 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
Message-ID: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>

The @deprecated decorator (at leas on py2.7) does not work when paired
@property

For deprecated instance variables, our deprecation policy recommend
converting them into properties and emitted the  warning from there.
It would be nice if we could use the standard @deprecated decorator here.

The problem is that when property are used the fget/fset are received by
the @deprecated wrapper as functions and not as methods

Is there a way to get the class in which a property is defined... or there
is no way to use the @deprecated decorator with the @property .. and we
should create a dedicated deprecatedMember method which is called as a
normal method.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151122/7a83ec7f/attachment.html>

From adi at roiban.ro  Sun Nov 22 14:31:00 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 Nov 2015 23:31:00 +0200
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
Message-ID: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>

Hi,

Right now  twisted/runner/inetdtap.py has the following errors reported by
pyflakes:

$ pyflakes twisted/runner/inetdtap.py
twisted/runner/inetdtap.py:58: undefined name 'rpcVersions'
twisted/runner/inetdtap.py:59: undefined name 'name'
twisted/runner/inetdtap.py:62: undefined name 'p'
twisted/runner/inetdtap.py:152: undefined name 'proto'

>From what I can see from reading the code, RPCServer.startService is broken.

makeService is also broken for rpc/* services .

There are no tests for all this code.

Link for the code :
https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py

----------

I am working on getting the Twisted code clean of pyflakes errors/warnings
so that contributors could run pyflakes check on their own branch, without
relying on buildbot.

I would like to clean the inetdtap.py module of pylakes warning but since
it is broken and has no tests, I have no idea what this code is expected to
do and how end users are expecting to use it.

Does someone volunteer to fix it?

Otherwise, has anyone any objections against deprecating
twisted/runner/inetdtap.py?
Since it is broken, can we just remove it?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151122/abae90ac/attachment.html>

From ngoonee.talk at gmail.com  Sun Nov 22 15:51:57 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 23 Nov 2015 06:51:57 +0800
Subject: [Twisted-Python] AMP message length limit
Message-ID: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>

I've just (to my surprise) hit this. As I understand from searching
around, AMP messages are limited to ~64k due to the length prefix
being 16-bit. A change in my internal data being sent (using dicts
rather than lists) kicked one of my messages to way over that limit.

There's a bit of discussion here -
http://twistedmatrix.com/pipermail/twisted-python/2014-November/028947.html

Is there an internal twisted solution planned, or should I go ahead
and roll my own paging code? If the latter (as I strongly suspect),
could I get some comments on this idea:-

Original amp.Command had a single argument (amp.ListOf(amp.String())
and no response

Modified amp.Command, 4 arguments and 1 response
ID (sequentially generated by producer) - amp.Integer()
CurPage - amp.Integer()
TotalPage - amp.Integer()
ActualData - amp.ListOf(amp.String())
Response - RecievedPage - amp.Integer()

Questions:-
1. ID is so the client can be sure not to concatenate different lists
2. Do I need a response at all?
3. Should I attempt to plug as many list items as possible into each
page (requires length checking of json-encoded strings and repeated
encoding/checks) or just choose a suitable limit of list items (my
current max length is about 200 characters and average is 71) of maybe
300 list items per message? My current list is about 1k items in all,
and it's only going to get bigger.
4. I was intrigued by the mention of 'Tubes' in the link above. Found
it here - https://tubes.readthedocs.org/en/latest/tube.html - should I
be using that instead? I'm writing a homegrown app which will only
really need (at this point) to communicate with itself and copies of
itself, and settled with AMP as being a simple way of achieving that.

Thanks for the time.


From glyph at twistedmatrix.com  Sun Nov 22 17:25:07 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:25:07 -0500
Subject: [Twisted-Python] spambayes
In-Reply-To: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>
References: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>
Message-ID: <B11FA35F-DEB9-48EB-B325-DE28DCB93E34@twistedmatrix.com>


> On Nov 21, 2015, at 04:51, Pawe? Miech <pawelmhm at gmail.com> wrote:
> 
> I get following message:
> 
> > Submission rejected as potential spam
> > SpamBayes determined spam probability of 74.83
> 
> SpamBayes seems to hate new users...

Sorry Pawe?; we had to discard the training base recently because it was overtrained, so it is still unfortunately adjusting to new input.  I have marked your submission as ham in the filter so it should complain less in the future.  Would you mind resubmitting?

If that is too annoying, I can file the bug for you.

-glyph



From glyph at twistedmatrix.com  Sun Nov 22 17:32:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:32:38 -0500
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
In-Reply-To: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
Message-ID: <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>


> On Nov 22, 2015, at 07:04, Adi Roiban <adi at roiban.ro> wrote:
> 
> The @deprecated decorator (at leas on py2.7) does not work when paired @property
> 
> For deprecated instance variables, our deprecation policy recommend converting them into properties and emitted the  warning from there.
> It would be nice if we could use the standard @deprecated decorator here.
> 
> The problem is that when property are used the fget/fset are received by the @deprecated wrapper as functions and not as methods
> 
> Is there a way to get the class in which a property is defined... or there is no way to use the @deprecated decorator with the @property .. and we should create a dedicated deprecatedMember method which is called as a normal method. 

If you care about inheritance, the implementation is a little bit tricky, because you have to manually walk the class hierarchy looking for the attribute.  But conceptually it's pretty simple: just look at the type of 'oself' in the __get__ method of the returned descriptor.

Right now, @deprecated is hard-coded to assume a function, but it could be repurposed to work with specific other descriptor types reasonably easily.  Arbitrary descriptors might be hard, because it's not clear when to emit the message, but specific types like @property should be pretty straightforward with an instance check.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151122/312f34e2/attachment.html>

From glyph at twistedmatrix.com  Sun Nov 22 17:54:43 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:54:43 -0500
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
Message-ID: <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>


> On Nov 22, 2015, at 17:51, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> I've just (to my surprise) hit this. As I understand from searching
> around, AMP messages are limited to ~64k due to the length prefix
> being 16-bit. A change in my internal data being sent (using dicts
> rather than lists) kicked one of my messages to way over that limit.

I'm sorry that this was an unpleasant surprise.  I wish that we had a better way of getting this across up-front :-).  However, it seems like the length limit is doing its job in terms of constraining your protocol design to not have individual messages "hog" the wire...

> There's a bit of discussion here -
> http://twistedmatrix.com/pipermail/twisted-python/2014-November/028947.html
> 
> Is there an internal twisted solution planned, or should I go ahead
> and roll my own paging code? If the latter (as I strongly suspect),
> could I get some comments on this idea:-

Definitely the latter if you have a short time frame.  How big are your messages?  If your limit is still fairly small (5M, let's say) but much bigger than 64k there are other options you can use.

> Original amp.Command had a single argument (amp.ListOf(amp.String())
> and no response

> Modified amp.Command, 4 arguments and 1 response
> ID (sequentially generated by producer) - amp.Integer()
> CurPage - amp.Integer()
> TotalPage - amp.Integer()
> ActualData - amp.ListOf(amp.String())
> Response - RecievedPage - amp.Integer()

Implementing a paging API like this is exactly what the length limit is designed to encourage you to do - it is much more flexible, since you can request a subset of pages, and continue receiving things other than pages while the data is being streamed to you.

> Questions:-
> 1. ID is so the client can be sure not to concatenate different lists

This... is correct, but doesn't sound like a question.  Is it meant to be?

> 2. Do I need a response at all?

No.  You can tell AMP not to bother generating the protocol-level response by setting the requiresAnswer flag on your Command to False: <https://twistedmatrix.com/documents/15.4.0/api/twisted.protocols.amp.Command.html#requiresAnswer>

> 3. Should I attempt to plug as many list items as possible into each
> page (requires length checking of json-encoded strings and repeated
> encoding/checks) or just choose a suitable limit of list items (my
> current max length is about 200 characters and average is 71) of maybe
> 300 list items per message? My current list is about 1k items in all,
> and it's only going to get bigger.

Why are you encoding as _both_ JSON and AMP?

I'd say you should do the length-checking, because you still might end up with list items that are larger than expected if they're variable size.

> 4. I was intrigued by the mention of 'Tubes' in the link above. Found
> it here - https://tubes.readthedocs.org/en/latest/tube.html - should I
> be using that instead? I'm writing a homegrown app which will only
> really need (at this point) to communicate with itself and copies of
> itself, and settled with AMP as being a simple way of achieving that.

I would love it if you would help me test out and develop Tubes.  If it is a small homegrown app it might be a good use-case.  There are pros and cons: Tubes has higher test coverage and cleaner code since it was developed much more recently; but, it still has very limited functionality, badly broken areas, and no compatibility guarantees, because it's still somewhat experimental.

However, Tubes is a way of implementing protocols, whereas AMP is an implementation of a request/response protocol.  If you use Tubes, you'll need to do an implementation of AMP (or something like it) in order to issue requests and give responses.  If I were you, especially since you've already figured out paging, I would probably just stick with AMP and Twisted as-is.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151122/4e1f2ce9/attachment-0001.html>

From glyph at twistedmatrix.com  Sun Nov 22 18:13:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 20:13:57 -0500
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
Message-ID: <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>


> On Nov 22, 2015, at 16:31, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Right now  twisted/runner/inetdtap.py has the following errors reported by pyflakes:
> 
> $ pyflakes twisted/runner/inetdtap.py
> twisted/runner/inetdtap.py:58: undefined name 'rpcVersions'
> twisted/runner/inetdtap.py:59: undefined name 'name'
> twisted/runner/inetdtap.py:62: undefined name 'p'
> twisted/runner/inetdtap.py:152: undefined name 'proto'
> 
> From what I can see from reading the code, RPCServer.startService is broken.
> 
> makeService is also broken for rpc/* services .
> 
> There are no tests for all this code.
> 
> Link for the code : 
> https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py <https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py>
> 
> ----------
> 
> I am working on getting the Twisted code clean of pyflakes errors/warnings so that contributors could run pyflakes check on their own branch, without relying on buildbot.

Thank you.  This would be absolutely great.

> I would like to clean the inetdtap.py module of pylakes warning but since it is broken and has no tests, I have no idea what this code is expected to do and how end users are expecting to use it. 

The purpose of inetdtap is to provide an 'inetd'-like server, to allow Twisted to invoke other programs to handle incoming sockets.  This is a useful thing as a "networking swiss army knife" tool, like netcat.  In fact, it does work, after a fashion; I wrote a file like this:

8123       stream  tcp  wait glyph  /bin/cat -

and then ran this:

put a blank line into 'rpc.conf', and then ran:

twistd -n inetd -f sampleinetd.conf -r rpc.conf 

and port 8123 properly became an echo server.

Now, in order to do this, you need a /etc/services file (this is hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky, and probably the one that your OS comes with is still broken anyway.  But this code can work if properly configured, and those parts can be fixed.

I haven't run this recently, but partially only because I basically forgot it existed :).  Thanks for the reminder.

> Does someone volunteer to fix it?

I'll gladly fix the parts that implement the possibly-useful functionality, although you don't need to touch those in order to fix the pyflakes warnings :).  The parts that are totally broken, RPCServicesConf, RPCServer, and the code that instantiates it, are useful only to NFS server implementors, and don't work at all no matter your configuration.  So I would delete the whole implementation just so someone will get a clear notification in case they were importing one of these names but not actually using them, deprecate the module attributes, and remove them in the next available removal cycle.  So basically just leave an empty Service subclass there just as a courtesy (since that is slightly more polite, and only a tiny bit harder than just deleting it).

> Otherwise, has anyone any objections against deprecating twisted/runner/inetdtap.py?
> Since it is broken, can we just remove it?

I hope my suggestion makes sense and is useful.  However if you'd really like to do the compat-breaking dance I won't object; I seriously doubt anyone is touching the RPC code.  I'd prefer you don't delete the whole module though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151122/0bd6ca26/attachment.html>

From adi at roiban.ro  Mon Nov 23 02:29:10 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 11:29:10 +0200
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
 <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
Message-ID: <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>

On 23 November 2015 at 03:13, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

[snip]


> Thank you.  This would be absolutely great.
>

https://twistedmatrix.com/trac/ticket/8107 is waiting for review... and
should make this happen :)


> I would like to clean the inetdtap.py module of pylakes warning but since
> it is broken and has no tests, I have no idea what this code is expected to
> do and how end users are expecting to use it.
>
>
> The purpose of inetdtap is to provide an 'inetd'-like server, to allow
> Twisted to invoke other programs to handle incoming sockets.  This is a
> useful thing as a "networking swiss army knife" tool, like netcat.  In
> fact, it does work, after a fashion; I wrote a file like this:
>
> 8123       stream  tcp  wait glyph  /bin/cat -
>
> and then ran this:
>
> put a blank line into 'rpc.conf', and then ran:
>
> twistd -n inetd -f sampleinetd.conf -r rpc.conf
>
>
> and port 8123 properly became an echo server.
>
> Now, in order to do this, you need a /etc/services file (this is
> hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky,
> and probably the one that your OS comes with is still broken anyway.  But
> this code *can* work if properly configured, and those parts can be fixed.
>
> I haven't run this recently, but partially only because I basically forgot
> it existed :).  Thanks for the reminder.
>

Is this info already present in the project?

If not I will try to put this info somewhere in the project

[snip]


> I hope my suggestion makes sense and is useful.  However if you'd really
> like to do the compat-breaking dance I won't object; I seriously doubt
> anyone is touching the RPC code.  I'd prefer you don't delete the whole
> module though.
>
>
Done https://twistedmatrix.com/trac/ticket/8123

I will go with the deprecation part.

Thanks for the feedback.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151123/6dd22e64/attachment.html>

From adi at roiban.ro  Mon Nov 23 05:30:53 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 14:30:53 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
 property methods
In-Reply-To: <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
Message-ID: <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>

On 23 November 2015 at 02:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 22, 2015, at 07:04, Adi Roiban <adi at roiban.ro> wrote:
>
> The @deprecated decorator (at leas on py2.7) does not work when paired
> @property
>
> For deprecated instance variables, our deprecation policy recommend
> converting them into properties and emitted the  warning from there.
> It would be nice if we could use the standard @deprecated decorator here.
>
> The problem is that when property are used the fget/fset are received by
> the @deprecated wrapper as functions and not as methods
>
> Is there a way to get the class in which a property is defined... or there
> is no way to use the @deprecated decorator with the @property .. and we
> should create a dedicated deprecatedMember method which is called as a
> normal method.
>
>
> If you care about inheritance, the implementation is a little bit tricky,
> because you have to manually walk the class hierarchy looking for the
> attribute.  But conceptually it's pretty simple: just look at the type of
> 'oself' in the __get__ method of the returned descriptor.
>
> Right now, @deprecated is hard-coded to assume a function, but it could be
> repurposed to work with specific other descriptor types reasonably easily.
> *Arbitrary* descriptors might be hard, because it's not clear when to
> emit the message, but specific types like @property should be pretty
> straightforward with an instance check.
>
> I think that we can go with a dedicated instance check for properties...
this is about the @deprecated decorator and using it together with the
deprecation policy for instance members.

I have created a dedicated ticket https://twistedmatrix.com/trac/ticket/8124


I still don't know how to fix it... I tried following property.__get__ and
property.getter and property.fget

>From what I understand of how Python works, at the time when the decorator
is called, the class is not yet created  / does not yet exists.

This will not work

class SomeClass(object):

    @deprecated(
        Version("Twisted", 16, 0, 0), 'the deferred returned by start()')
    @property
    def deferred(self):
        """
        DEPRECATED. Deferred fired when loop stops or fails.
        """
        return self._deferred

And I should use something like this

class SomeClass(object):

    @property
    def deferred(self):
        """
        DEPRECATED. Deferred fired when loop stops or fails.
        """
        deprecated(
            Version("Twisted", 16, 0, 0), 'the deferred returned by
start()')
        return self._deferred

---------


Will push the tests and will ask for help in the review queue.

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151123/0d637250/attachment-0001.html>

From adi at roiban.ro  Mon Nov 23 05:38:40 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 14:38:40 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
 property methods
In-Reply-To: <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
 <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
Message-ID: <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>

>
>
>
> Will push the tests and will ask for help in the review queue.
>
> Thanks!
>
>
Another option is to fix @deprecated to call getDeprecationWarningString
when the method is called not when it is created.

Regards
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151123/98d26046/attachment.html>

From cory at lukasa.co.uk  Mon Nov 23 07:32:28 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 23 Nov 2015 14:32:28 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <7F30544F-6B47-4F91-8B51-EA4F18C1D3B5@lukasa.co.uk>


> On 19 Nov 2015, at 11:50, Cory Benfield <cory at lukasa.co.uk> wrote:
> This seems super-gross but vaguely do-able, and we?ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.
> 
> All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I?m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we?ll see how it goes.
> 
> Cory
> 
> 


For those interested in how this is progressing, there?s a draft patch available showing some of the proposed direction of this work, at #7460. I?d like as much review as possible, so please weigh in: https://twistedmatrix.com/trac/ticket/7460

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151123/ca9e7745/attachment.pgp>

From ngoonee.talk at gmail.com  Mon Nov 23 18:16:59 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 09:16:59 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
Message-ID: <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>

On Mon, Nov 23, 2015 at 8:54 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> I'm sorry that this was an unpleasant surprise.  I wish that we had a better
> way of getting this across up-front :-).  However, it seems like the length
> limit is doing its job in terms of constraining your protocol design to not
> have individual messages "hog" the wire...

Yes, that it did.

> Definitely the latter if you have a short time frame.  How big are your
> messages?  If your limit is still fairly small (5M, let's say) but much
> bigger than 64k there are other options you can use.

I don't foresee it getting over an MB or so (as the data is being read
from disk, so unlikely that network I/O will be the biggest bottleneck
in this case).

>> Questions:-
>> 1. ID is so the client can be sure not to concatenate different lists
>
> This... is correct, but doesn't sound like a question.  Is it meant to be?

Sorry, the real question is whether an ID is at all required. I'm not
using threads, and the concurrent AMP messages will be sent from a
single server process in a loop. Each client is guaranteed to have
only one server. In this situation, do I even need an ID?

> No.  You can tell AMP not to bother generating the protocol-level response
> by setting the requiresAnswer flag on your Command to False:
> <https://twistedmatrix.com/documents/15.4.0/api/twisted.protocols.amp.Command.html#requiresAnswer>

Thanks, right now I just have plenty of return {} everywhere. Does
requiresAnswer=False mean less bandwidth usage (no need to transmit an
empty dict)?

>> 3. Should I attempt to plug as many list items as possible into each
>> page (requires length checking of json-encoded strings and repeated
>> encoding/checks) or just choose a suitable limit of list items (my
>> current max length is about 200 characters and average is 71) of maybe
>> 300 list items per message? My current list is about 1k items in all,
>> and it's only going to get bigger.
>
>
> Why are you encoding as _both_ JSON and AMP?
>
> I'd say you should do the length-checking, because you still might end up
> with list items that are larger than expected if they're variable size.

I'm sending classes over the wire by json-encoding their __dict__.
Although now that you mentioned it, I started doing that because I
believed AMP to be constrained to ASCII strings (before I found
amp.Unicode()) and my classes will almost always have unicode data.
Looks like I can skip a step then, will test that out.

I'm trying not to do length-checking simply because I'm lazy (and
because I'm abstracting out all the twisted parts into an SPClient and
SPServer which handle this data conversion transparently to the
working code). In particular the 'best' ways I can think to do
length-checking is to either:-
1. Binary search for an 'optimal' size just under a limit (50k for
sake of argument)
2. Single check which splits the length by half (300>150>75 etc.)
Both would clutter up the transmission code more than I would like at
this point, and could probably be added in future on transmission side
without any change in recipient side code. So it's on the backburner.

> I would love it if you would help me test out and develop Tubes.  If it is a
> small homegrown app it might be a good use-case.  There are pros and cons:
> Tubes has higher test coverage and cleaner code since it was developed much
> more recently; but, it still has very limited functionality, badly broken
> areas, and no compatibility guarantees, because it's still somewhat
> experimental.
>
> However, Tubes is a way of implementing protocols, whereas AMP is an
> implementation of a request/response protocol.  If you use Tubes, you'll
> need to do an implementation of AMP (or something like it) in order to issue
> requests and give responses.  If I were you, especially since you've already
> figured out paging, I would probably just stick with AMP and Twisted as-is.

That's polite =). I'll keep it in mind. If there's a quick link
somewhere on 'badly broken area's I'd be interested, because without
knowing that it's hard to justify spending time there when I already
have something working with AMP. I especially like the idea of
streaming, but that'd require writing my code to accept data piecemeal
on the other end, and I can foresee that getting very messy very fast.


From ngoonee.talk at gmail.com  Mon Nov 23 19:58:03 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 10:58:03 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
Message-ID: <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>

On Tue, Nov 24, 2015 at 9:16 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> Thanks, right now I just have plenty of return {} everywhere. Does
> requiresAnswer=False mean less bandwidth usage (no need to transmit an
> empty dict)?

Having read the documentation a bit, it appears requiresAnswer=False
is a hint and I'd still have to return the correct response (in this
case an empty dict)

http://twistedmatrix.com/trac/ticket/1985 and in particular the
following comment by yourself:-

Responders for Commands defined not to require a response should
return a valid response nonetheless, because requiresAnswer is an
optimization hint that the client can specify, on any request whose
response it will not process, to optimize network traffic.

Looks like I'll update my clients to specify it then. Was thinking it
should be specified when defining message classes.


From ngoonee.talk at gmail.com  Mon Nov 23 20:03:41 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 11:03:41 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
Message-ID: <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>

On Tue, Nov 24, 2015 at 10:58 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> On Tue, Nov 24, 2015 at 9:16 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> Thanks, right now I just have plenty of return {} everywhere. Does
>> requiresAnswer=False mean less bandwidth usage (no need to transmit an
>> empty dict)?
>
> Having read the documentation a bit, it appears requiresAnswer=False
> is a hint and I'd still have to return the correct response (in this
> case an empty dict)
>
> http://twistedmatrix.com/trac/ticket/1985 and in particular the
> following comment by yourself:-
>
> Responders for Commands defined not to require a response should
> return a valid response nonetheless, because requiresAnswer is an
> optimization hint that the client can specify, on any request whose
> response it will not process, to optimize network traffic.
>
> Looks like I'll update my clients to specify it then. Was thinking it
> should be specified when defining message classes.

And it looks like I do have to specify it in defining message classes.

And furthermore that when I do that, callRemote no longer returns a
deferred (which makes sense, really) and instead gets a None. One more
check before I add my default errBacks then. Optimised network traffic
sounds positive, at the least (I assume this means one less
transmission since it effectively makes the AMP one-way for the
messages which have this set to False).


From glyph at twistedmatrix.com  Mon Nov 23 22:27:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Nov 2015 00:27:30 -0500
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
In-Reply-To: <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
 <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
 <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>
Message-ID: <B923CC92-5C9D-4508-9862-81DAE201BB32@twistedmatrix.com>


> On Nov 23, 2015, at 07:38, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> Will push the tests and will ask for help in the review queue.
> 
> Thanks!
> 
> 
> Another option is to fix @deprecated to call getDeprecationWarningString when the method is called not when it is created. 

I think you mean the other way around? property() objects are not necessarily called.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151124/43c0af2f/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 23 22:42:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Nov 2015 00:42:25 -0500
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
 <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
 <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>
Message-ID: <FBA29BF1-E63F-444E-92D7-1CE9841A6FA3@twistedmatrix.com>


> On Nov 23, 2015, at 04:29, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> On 23 November 2015 at 03:13, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> [snip]
> 
> 
> Thank you.  This would be absolutely great.
> 
> https://twistedmatrix.com/trac/ticket/8107 <https://twistedmatrix.com/trac/ticket/8107> is waiting for review... and should make this happen :)

Cool.  No promises on the review but I have it in good authority the queue is quite short lately :).

>  
>> I would like to clean the inetdtap.py module of pylakes warning but since it is broken and has no tests, I have no idea what this code is expected to do and how end users are expecting to use it. 
> 
> The purpose of inetdtap is to provide an 'inetd'-like server, to allow Twisted to invoke other programs to handle incoming sockets.  This is a useful thing as a "networking swiss army knife" tool, like netcat.  In fact, it does work, after a fashion; I wrote a file like this:
> 
> 8123       stream  tcp  wait glyph  /bin/cat -
> 
> and then ran this:
> 
> put a blank line into 'rpc.conf', and then ran:
> 
> twistd -n inetd -f sampleinetd.conf -r rpc.conf 
> 
> and port 8123 properly became an echo server.
> 
> Now, in order to do this, you need a /etc/services file (this is hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky, and probably the one that your OS comes with is still broken anyway.  But this code can work if properly configured, and those parts can be fixed.
> 
> I haven't run this recently, but partially only because I basically forgot it existed :).  Thanks for the reminder.
> 
> Is this info already present in the project? 
> 
> If not I will try to put this info somewhere in the project 

It's in `twistd --help?; I'm not sure where else it belongs.

> [snip]
>  
> I hope my suggestion makes sense and is useful.  However if you'd really like to do the compat-breaking dance I won't object; I seriously doubt anyone is touching the RPC code.  I'd prefer you don't delete the whole module though.
> 
> 
> Done https://twistedmatrix.com/trac/ticket/8123 <https://twistedmatrix.com/trac/ticket/8123>
> 
> I will go with the deprecation part.
> 
> Thanks for the feedback.
> 
> -- 
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151124/e82189f2/attachment-0001.html>

From ngoonee.talk at gmail.com  Wed Nov 25 02:54:51 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 25 Nov 2015 17:54:51 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
Message-ID: <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>

On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> And furthermore that when I do that, callRemote no longer returns a
> deferred (which makes sense, really) and instead gets a None. One more
> check before I add my default errBacks then. Optimised network traffic
> sounds positive, at the least (I assume this means one less
> transmission since it effectively makes the AMP one-way for the
> messages which have this set to False).

Just realized, requiresAnswer=False means I can't add errBacks, which
means there's no way to handle a receiver-side error. Is this correct?


From hawkowl at atleastfornow.net  Wed Nov 25 03:55:31 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 25 Nov 2015 18:55:31 +0800
Subject: [Twisted-Python] Twisted 15.5.0 Prerelease 2 Announcement
Message-ID: <96466E47-0BA9-48B8-B472-F08000D1F040@atleastfornow.net>

Hi everyone,

Twisted 15.5.0pre2 is now available for download. This includes a bugfix for a regression in 15.5 which prevents Twisted Web's client from doing requests to raw IPv6 addresses.

You can find the new release and the NEWS file at https://twistedmatrix.com/Releases/pre/15.5.0pre2/. Please test it! If no more issues are found, 15.5 will release sometime at the end of this week.

Regards,
Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151125/4c299ae3/attachment.pgp>

From pzverr at gmail.com  Thu Nov 26 06:29:05 2015
From: pzverr at gmail.com (Pavel Zverev)
Date: Thu, 26 Nov 2015 16:29:05 +0300
Subject: [Twisted-Python] Question for obtaining mac-address
Message-ID: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>

Have nice day, developers!

I am a beginner python developer, and recently I came across the Twisted
framework, I was interested in whether I get the MAC-address of the client
connected to the network, similar twisted.web.http.Request.getClientIP.

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151126/34efab4f/attachment.html>

From cory at lukasa.co.uk  Thu Nov 26 09:04:20 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 26 Nov 2015 16:04:20 +0000
Subject: [Twisted-Python] Question for obtaining mac-address
In-Reply-To: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>
References: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>
Message-ID: <36858CE3-3270-48E4-846E-EEB11E7C6F6D@lukasa.co.uk>


> On 26 Nov 2015, at 13:29, Pavel Zverev <pzverr at gmail.com> wrote:
> 
> Have nice day, developers!
> 
> I am a beginner python developer, and recently I came across the Twisted framework, I was interested in whether I get the MAC-address of the client connected to the network, similar twisted.web.http.Request.getClientIP.

If you?re trying to get the MAC address of the client from an IP connection, then this is basically not possible. Once the packet has been handled as an IP packet, the MAC address is simply not used anymore. This is primarily because IP packets can cross layer 3 boundaries, so the MAC address from which a given IP packet arrived is potentially entirely unrelated to the MAC address of the source machine.

Generally speaking, I do not believe the socket layer provides any mechanism for obtaining the MAC address for the remote peer on a socket of type AF_INET: it?s just not relevant information.

Assuming you?re restricting yourself to the case where the client is on the same layer 2 broadcast domain as the server (again, hardly a guaranteed state of affairs), then the easiest way to obtain the MAC address is actually to grab it out of your machine?s ARP cache. If you execute `arp -a` (either in a shell or a Python subprocess), you will get access to the ARP cache on your machine which you can use to locate the MAC address for a given IP. This of course is IPv4 specific (ARP does not exist for IPv6): for IPv6 you?d want to use `ip -6 neigh show` (`ip neigh show` also works for ARP but provides quite a lot of info).

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151126/69f66750/attachment.pgp>

From p.mayers at imperial.ac.uk  Fri Nov 27 05:10:37 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 12:10:37 +0000
Subject: [Twisted-Python] doc breakage
Message-ID: <5658483D.5060505@imperial.ac.uk>

Does this look right?

https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html

Looks like docs for logPrefix has stomped on docs for all the other 
interface methods?


From pzverr at gmail.com  Fri Nov 27 05:23:16 2015
From: pzverr at gmail.com (Pavel Zverev)
Date: Fri, 27 Nov 2015 15:23:16 +0300
Subject: [Twisted-Python] doc breakage
In-Reply-To: <5658483D.5060505@imperial.ac.uk>
References: <5658483D.5060505@imperial.ac.uk>
Message-ID: <CAGoNTpFr5AiR4XPM8ieVA4WR4=2MDS2zawj6v6LGsMd3DBSyNQ@mail.gmail.com>

Thanks.

I see doc only for this
https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IAddress.html
interface .

Sorry, i don`t understand, What is this prefix ?

2015-11-27 15:10 GMT+03:00 Phil Mayers <p.mayers at imperial.ac.uk>:

> Does this look right?
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>
> Looks like docs for logPrefix has stomped on docs for all the other
> interface methods?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
?????? ?????

+7 926-116-0819

zpavel.ru
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151127/6f50083f/attachment.html>

From jon at multani.info  Fri Nov 27 07:05:35 2015
From: jon at multani.info (Jonathan Ballet)
Date: Fri, 27 Nov 2015 15:05:35 +0100
Subject: [Twisted-Python] Writing a low-level network debugging tool
Message-ID: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>

Hi all,

I'm trying to toubleshoot network connectivity issues we have in one of 
our office and I would like to monitor some metrics which seems to be 
relevant for us, especially when trying to open TCP connections towards 
external endpoints.

In particular, I'm looking for a way to get the following information 
(let's say I want to monitor the connectivity towards the swisscom.com, 
port 80 using TCP):

* how long does it take to resolv the domain name to (at least) one of 
its IP address
   - against a specified name server or using the system configured 
servers
   - how many tries did it require
     * if there were several tries, the timing of each ones

* how long does it take to get the first bytes of the endpoint
   - how long does it take to complete the TCP connection handshake
   - the status of the packets exchanged (how many retries, how many 
packets lost, etc.)

It's not exactly the same, but the curl option --write-out allows to get 
this kind of values (especially time_namelookup, time_connect, 
time_pretransfer, time_starttransfer and time_total) but I would like to 
have more flexibility and more in-depth informations (like the state of 
the packets exchanged, etc.)

How far can I do this kind of things with Twisted? I know I can somewhat 
easily get the timings of the name resolution, the TCP connection 
handshake also and the time to first byte(s), but what about the 
packets? I haven't look at the code of Twisted Names yet, but if it's 
doing the DNS request by itself, I may be able to plug-in somewhere and 
have my request counter and the timers associated, but I'm not sure if 
the underlying details of the TCP protocol are exposed to the upper 
layer such as Twisted?

Thanks for the help!

  Jonathan


From p.mayers at imperial.ac.uk  Fri Nov 27 07:39:22 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 14:39:22 +0000
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
Message-ID: <56586B1A.6090200@imperial.ac.uk>

On 27/11/15 14:05, Jonathan Ballet wrote:

> * how long does it take to resolv the domain name to (at least) one of
> its IP address
>    - against a specified name server or using the system configured servers

That is relatively straightforward.

>    - how many tries did it require
>      * if there were several tries, the timing of each ones

Typically, application-layer code doesn't retry a DNS lookup; rather the 
c or other runtime will handle this, for example getaddrinfo() in glibc, 
according to settings read from /etc/resolv.conf or compiled-in defaults.

So it depends on whether you want to emulate "typical" application code, 
a specific application stack that may or may not do it's own resolution 
(e.g. modern browsers) or something else.

>
> * how long does it take to get the first bytes of the endpoint
>    - how long does it take to complete the TCP connection handshake
>    - the status of the packets exchanged (how many retries, how many
> packets lost, etc.)

Some of this is available in platform-specific APIs e.g. SIOCGSTAMP and 
TCP_INFO socket options available on Linux.

In general, any timings you make based on return of control from kernel 
will include error relating to system/scheduling issues. If you're 
concerned about getting raw, on-the-wire timings, this is extremely 
difficult without being in-kernel, and even then various issues - TCP 
offload for example - can end up hiding data from you.

> How far can I do this kind of things with Twisted? I know I can somewhat
> easily get the timings of the name resolution, the TCP connection
> handshake also and the time to first byte(s), but what about the
> packets? I haven't look at the code of Twisted Names yet, but if it's
> doing the DNS request by itself, I may be able to plug-in somewhere and
> have my request counter and the timers associated, but I'm not sure if
> the underlying details of the TCP protocol are exposed to the upper
> layer such as Twisted?

Only via platform-specific options.

To do this kind of thing "reliably", you'd need to reimplement TCP in 
user-space.

But the info above may be a helpful start.


From p.mayers at imperial.ac.uk  Fri Nov 27 07:42:30 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 14:42:30 +0000
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <56586B1A.6090200@imperial.ac.uk>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
 <56586B1A.6090200@imperial.ac.uk>
Message-ID: <56586BD6.9090006@imperial.ac.uk>

On 27/11/15 14:39, Phil Mayers wrote:

> But the info above may be a helpful start.
>

You may also want to look at TCP_CC_INFO. See the kernel source:

https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/net/ipv4/tcp.c?id=refs/tags/v4.4-rc2

...for an idea of what else is available. Be aware some of these are 
relatively new.


From hawkowl at atleastfornow.net  Fri Nov 27 23:39:55 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 28 Nov 2015 14:39:55 +0800
Subject: [Twisted-Python] doc breakage
In-Reply-To: <5658483D.5060505@imperial.ac.uk>
References: <5658483D.5060505@imperial.ac.uk>
Message-ID: <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>


> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> Does this look right?
> 
> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
> 
> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151128/59e5b026/attachment.pgp>

From glyph at twistedmatrix.com  Sat Nov 28 00:04:35 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 28 Nov 2015 02:04:35 -0500
Subject: [Twisted-Python] doc breakage
In-Reply-To: <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
References: <5658483D.5060505@imperial.ac.uk>
 <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
Message-ID: <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>


> On Nov 28, 2015, at 1:39 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>> 
>> Does this look right?
>> 
>> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>> 
>> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!

Do you happen to have a link to the bug?
> 


From hawkowl at atleastfornow.net  Sat Nov 28 00:08:37 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 28 Nov 2015 15:08:37 +0800
Subject: [Twisted-Python] doc breakage
In-Reply-To: <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>
References: <5658483D.5060505@imperial.ac.uk>
 <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
 <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>
Message-ID: <E9F4436E-D345-4B14-9E19-A9B17D530A0C@atleastfornow.net>


> On 28 Nov 2015, at 15:04, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Nov 28, 2015, at 1:39 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> 
>>> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>> 
>>> Does this look right?
>>> 
>>> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>>> 
>>> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!
> 
> Do you happen to have a link to the bug?

Yep!

https://github.com/twisted/pydoctor/issues/10

The multiple inheritance is messing things up...

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151128/4fbb7987/attachment.pgp>

From glyph at twistedmatrix.com  Sat Nov 28 07:41:43 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Nov 2015 09:41:43 -0500
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
 <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
Message-ID: <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>


> On Nov 25, 2015, at 04:54, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>> And furthermore that when I do that, callRemote no longer returns a
>> deferred (which makes sense, really) and instead gets a None. One more
>> check before I add my default errBacks then. Optimised network traffic
>> sounds positive, at the least (I assume this means one less
>> transmission since it effectively makes the AMP one-way for the
>> messages which have this set to False).
> 
> Just realized, requiresAnswer=False means I can't add errBacks, which
> means there's no way to handle a receiver-side error. Is this correct?

That is correct.  But you shouldn't want to handle errors there :-).  Don't think of a requiresAnswer=False command as an optimization; instead, think of it as a piece of information being relayed.

For example; consider an HTTP stream.  The client sends a request.  If the server has an error, it sends an error code.  Then, the server sends the entity-body, one chunk at a time.

The client has to process each of those chunks one after another.  If the server sends a chunk and the client encounters an error, there's nothing for the server to do; the client has no way to communicate it and it can just disconnect.  You would use requiresAnswer=False (as you are already doing in your case) to send a chunk of data like those entity-body chunks, which ought not to be a message that... requires an answer.  It's just a way of encoding some data on the connection.

Make sense?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151128/5139c6cb/attachment.html>

From ngoonee.talk at gmail.com  Sat Nov 28 13:03:09 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Sun, 29 Nov 2015 04:03:09 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
 <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
 <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>
Message-ID: <CAGQ70ev3Hug1SDt9xkKps7qPPZ0dm56maKy=Qda7Eh-ze2P5kw@mail.gmail.com>

On Sat, Nov 28, 2015 at 10:41 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Nov 25, 2015, at 04:54, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> And furthermore that when I do that, callRemote no longer returns a
> deferred (which makes sense, really) and instead gets a None. One more
> check before I add my default errBacks then. Optimised network traffic
> sounds positive, at the least (I assume this means one less
> transmission since it effectively makes the AMP one-way for the
> messages which have this set to False).
>
>
> Just realized, requiresAnswer=False means I can't add errBacks, which
> means there's no way to handle a receiver-side error. Is this correct?
>
>
> That is correct.  But you shouldn't want to handle errors there :-).  Don't
> think of a requiresAnswer=False command as an optimization; instead, think
> of it as a piece of information being relayed.
>
> For example; consider an HTTP stream.  The client sends a request.  If the
> server has an error, it sends an error code.  Then, the server sends the
> entity-body, one chunk at a time.
>
> The client has to process each of those chunks one after another.  If the
> server sends a chunk and the client encounters an error, there's nothing for
> the server to do; the client has no way to communicate it and it can just
> disconnect.  You would use requiresAnswer=False (as you are already doing in
> your case) to send a chunk of data like those entity-body chunks, which
> ought not to be a message that... requires an answer.  It's just a way of
> encoding some data on the connection.
>
> Make sense?

Yeah, especially in the context of a HTTP stream. In other words
requiresAnswer=False is just a way of labelling a messages as
'fire-and-forget'.

I'll have to think a bit more about which of my messages actually need
answers then. For some, I do need an indication of success (or
failure), if only so I can try re-sending. Those won't get the flag
then.


From hawkowl at atleastfornow.net  Sat Nov 28 21:48:27 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 29 Nov 2015 12:48:27 +0800
Subject: [Twisted-Python] Twisted 15.5 Release Announcement
Message-ID: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.5!

The sixth (!!) release in 2015 has quite a few goodies in it -- incrementalism is the name of the game here, and everything is just a little better than it was before. Some of the highlights of this release are:

- Python 3.5 support on POSIX was added, and Python 2.6 support was dropped. We also only support x64 Python on Windows 7 now.
- More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
- twistd is ported to Python 3, and its first plugin, web, is ported.
- twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
- NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
- Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
- Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
- 55+ closed tickets overall.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-15.5.0/NEWS>.

Also worth noting is the two Twisted Software Foundation fellows -- Adi Roiban and myself -- who have been able to dedicate time to reviewing tickets and generally pushing things along in the process. We're funded by the Twisted Software Foundation, which is, in turn, funded by donators and sponsors -- potentially like you! If you would like to know how you can assist in the continued funding of the Fellowship program, see our website: https://twistedmatrix.com/trac/wiki/TwistedSoftwareFoundation#BenefitsofSponsorship

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,

Amber "Hawkie" Brown
Twisted Release Manager, Twisted Fellow
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151129/c3a05382/attachment.pgp>

From glyph at twistedmatrix.com  Sun Nov 29 00:26:50 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Nov 2015 23:26:50 -0800
Subject: [Twisted-Python] [Twisted-web] Twisted 15.5 Release Announcement
In-Reply-To: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>
References: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>
Message-ID: <13563A1B-E027-40DA-BEC8-24B7DE2FB052@twistedmatrix.com>


> On Nov 28, 2015, at 8:48 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.5!

Thanks again, Amber, for shepherding yet another significant release through the process.

> - twistd is ported to Python 3, and its first plugin, web, is ported.

This is a very, very big deal for users who care about py3, and I hope to see the pace of the remaining codebase porting accelerate even more, now that the core infrastructure allowing people to actually run their applications top-to-bottom on py3 is available.

-glyph



From adi at roiban.ro  Sun Nov 29 04:17:57 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 29 Nov 2015 13:17:57 +0200
Subject: [Twisted-Python] Implementing server ESMTP extensions in Twisted
Message-ID: <CAFycZ9d1O6e+kKqg2xd6LLG2mf2n2hZKOD=oOrfoxvQ=ypz9ig@mail.gmail.com>

So,

We have patch for review which works towards allowing the current
STMP/ESTMP server implementation to be sublcassed in order to implement
ESMTP extensions.

Here is the ticket
https://twistedmatrix.com/trac/ticket/8128

If you care about SMTP/ESMTP please send your feedback, here or on the
ticket.

I am not an SMTP/ESMTP expert and I need help in reviewing this ticket.

-------

My main questions regarding ESTMP extensions are :

1. Do we really want to implement them using sublcassing or using
composition/interfaces/components ... or something else?

------

2. From https://en.wikipedia.org/wiki/Extended_SMTP#Extensions

Each service extension is defined in an approved format in subsequent RFCs
and registered with the IANA.

Are there ESTMP servers in the wild which provide extensions which are not
defined by RFCs?

Do we want to encourage multiple implementation for the same extensions or
encourage people to collaborate toward a single implementation which is
hosted by Twisted?

--------

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151129/5f1e11a4/attachment.html>

From commercials24 at yahoo.de  Sun Nov 29 06:43:52 2015
From: commercials24 at yahoo.de (peter)
Date: Sun, 29 Nov 2015 14:43:52 +0100
Subject: [Twisted-Python] twisted.web response.py questions
Message-ID: <565B0118.5060408@yahoo.de>

hi,


looking over:
https://twistedmatrix.com/documents/14.0.2/_downloads/response.py


im not really sure why one would use the line:

self.remaining  =  1024  *  10


this suggest to me that one knew what kind of page size was 
expected...but what if you dont?
wouldnt it make more sense to use someting like this:

def dataReceived(self, bytes):
         self.page_content = self.page_content + bytes


this would sum up all the data until connectionLost is called.
and in connectionLost():

def  connectionLost(self,  reason):
         print  'Finished receiving body:',  reason.getErrorMessage()
         self.finished.callback(self.page_content)


and then print it?




also i dont get why one would use

  return  finished


in cbRequest. where is this finished returned to?
its called via:

d.addCallback(cbRequest)

isnt the result from cbRequest thrown away?
i would expect the line to read:
new_deferred = d.addCallback(cbRequest)



thx for your answers







From adi at roiban.ro  Sun Nov 29 09:20:36 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 29 Nov 2015 18:20:36 +0200
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>

Hi Craig,

Sorry for the delay and many thanks for your plan.

I have also sent your plan to the Unofficial Twisted Software Foundation.

>From what I can see we are stuck in bureaucratic process.

The plan needs to be approved by Unofficial Twisted Software Foundation and
the Unofficial Twisted Software Foundation want to have a single plan
submitted for approval.

We now have 3 plans : Amber's, Craig's and mine..... and we see which plan
to be sent to the Unofficial Twisted Software Foundation.

Also the Unofficial Twisted Software Foundation will only consider plans
for GitHub.com.

No GitLab/Bitbucket/Jira/Redmime....etc

We can try to keep tickets/wiki/website on Trac and only move the main repo
+ PR + hooks to GitHub.

This should allow us to get rid of SVN and build the infrastructure on web
hooks. Later we can consider migration to other tools... or extending the
GitHub.com usage to Issues / Wiki / GitHub Pages...etc

Until now we failed to coordinate toward creating a single plan and besides
Glyph's comments on IRC, I have not received any feedback from the Unofficial
Twisted Software Foundation for any of the plans.

Can we plan an IRC/Google Hangouts meeting to discuss the plan?

It would be great if someone from the Unofficial Twisted Software
Foundation could also join.

If you would like to see Twisted on Git and GitHub please consider joining
the meeting.

I have created this Doodle poll to help us schedule the date and time for
the meeting - http://doodle.com/poll/4ys8m8qakav9u9f9

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151129/9cc44406/attachment-0001.html>

From hawkowl at atleastfornow.net  Mon Nov 30 07:49:41 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 30 Nov 2015 22:49:41 +0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>

Hi Craig,

Thanks for this, sharing your past experience is invaluable :)

I've gone through and thought about it a bit, and rewritten it into https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.rst -- it is basically your plan, with some added notes about Twisted Infra specific parts. I've skimmed over the specific details, since I feel that going too in-depth in such a plan will just be wasted effort as unknown issues arise, but with enough structure that we have a clear set of overarching goals for each step.

The migration will have a handful of policy changes that we will have to resolve -- such as ensuring that all merges have a topfile -- which aren't possible under a GitHub based system. I think these issues will just involve a lot of scrutiny and double checking during the transitional period until we are confident that we are enforcing our existing quality and process standards.

If anyone has any suggestions, or any more invaluable experience to share, please do :)

- Amber


> On 18 Nov 2015, at 07:48, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> For now, the funds were raised to migrate to GitHub, so we can not use
> them to do other things.
> 
> We will stay on Trac for issues... at least for now.
> 
> I have no idea how we can migrate to any issue tracker without losing
> data if we don't have full access to the database.
> 
> It is possible to migrate to another issue tracker and not lose
> data.  I've done Trac -> Redmine, and it works, but there was an existing migration
> script I could use.
> For migrating to a cloud based bug tracker, you would need to take every user
> in the existing Trac database, and see if there would be a way to map
> the existing users to the cloud database, such as GitHub.  It's a lot of work, but possible.
> However, for the scope of this project, if staying with Trac for issues is what is required, that is fine.
> 
> 
> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
> 
> 
> OK.
> 
> So based on what you have listed, I would say that most of the work will be
> working with Git post commit hooks.
> 
> I would say the plan should be something like this.
> 
> A.1  https://github.com/twisted/twisted will be the "repository of truth"
>        for Twisted.
>            -> Twisted releases will be done from GitHub
>            -> the Twisted developers who are now "core committers" for SVN, must be
>                given access to be "core committers" to https://github.com/twisted/twisted
> 
> A.2  On the Trac server, a local git mirror of the GitHub must be set up.
>        Every bug tracker I've seen that integrates with git needs a local mirror of the repo
>         in order to parse the git history in order to update the bug database.
>         This mirror should be read-only, and the only thing updating this repo should be the Trac GitHub plugin.
> 
> A.3  On the Trac server, this plugin must be installed: https://github.com/trac-hacks/trac-github
> 
> A.4  On the GitHub server, a post-commit web hook must be configured.  The workflow will be this:
> 
>            [core committer does push to https://github.com/twisted/twisted]
>              -> [post commit GitHub hook will be called to poke the Trac GitHub plugin]
>              -> [Trac GitHub plugin will update the local git repo on the Trac server]
>              -> [Trac GitHub will parse the git history for new commits and update tickets]
> 
> I would recommend that steps (1) - (4) be made to work in a staging environment, with a separate
> GitHub repo, and a separate copy of the Trac database.  That way, you can test things out without derailing
> Twisted developers.  When you are confident that this workflow works, then the transition plan will be something
> like the following.
> 
> B.1   Send an e-mail to the mailing list and pick one day for the maintenance window.
>         This will warn folks when they should take a holiday from Twisted work. :)
> 
> B.2   When maintenance is about to begin, send a [HEADSUP] mail saying that repo will be unavailable.
> 
> B.3  Create Subversion pre-commit hook to disable all commits to
>          Subversion:
>               http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only
> 
> B.4  Set up steps A.1 - A.4
> 
> B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to https://github.com/twisted/twisted, and
>          make sure that Trac works.
> 
> B.6  Once the Twisted core team are satisified that everything works, send an e-mail to the mailing list
>         that the maintenance window is over, and GitHub is now where the action is!
> 
> B.7  Update all wiki documentation to change all references to getting code from Subversion,
>          to getting code from GitHub.
> 
> B.8  Update all systems which used Subversion to use GitHub.  For example, buildbots.
> 
> --
> Craig
> 
> 
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151130/98a88eae/attachment.pgp>

From adi at roiban.ro  Mon Nov 30 08:37:56 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 30 Nov 2015 17:37:56 +0200
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
Message-ID: <CAFycZ9fLo8qsxM10VzqTefo-ruhV_OiZ8F_F2PKrX0TdQ1AWYw@mail.gmail.com>

On 30 November 2015 at 16:49, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi Craig,
>
> Thanks for this, sharing your past experience is invaluable :)
>
> I've gone through and thought about it a bit, and rewritten it into
> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.rst
> -- it is basically your plan, with some added notes about Twisted Infra
> specific parts. I've skimmed over the specific details, since I feel that
> going too in-depth in such a plan will just be wasted effort as unknown
> issues arise, but with enough structure that we have a clear set of
> overarching goals for each step.
>

[snit]

+1 for "master" as the main branch.

+1 for GitHub logins but I have no idea how we could migrate existing
accounts.

This is more like a Git migration plan with main repo on GitHub, but I
think that this should be the first step...and focus on this, before
looking at PR and GitHub issues.

I don't see any note about the code browser and how to migrate narrative
and apidocs source code links.

The Internet is full of links like
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/web/http.py#L475

I think that tracext.github.GitHubBrowser only redirects changeset ... and
from the docs only new changesets

I was hoping that as part of the git migration, we can implement a custom
Twisted web resource which will handle all the redirections to GitHub code
browser

Since Twisted trunk merges are not busy, I don't think that we need to
worry to much about breaking the dev process... I am more worried about
failing to gather the merges required to create the waiting/testing queue.

--
Adi



>
>
> > On 18 Nov 2015, at 07:48, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> >
> > On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > For now, the funds were raised to migrate to GitHub, so we can not use
> > them to do other things.
> >
> > We will stay on Trac for issues... at least for now.
> >
> > I have no idea how we can migrate to any issue tracker without losing
> > data if we don't have full access to the database.
> >
> > It is possible to migrate to another issue tracker and not lose
> > data.  I've done Trac -> Redmine, and it works, but there was an
> existing migration
> > script I could use.
> > For migrating to a cloud based bug tracker, you would need to take every
> user
> > in the existing Trac database, and see if there would be a way to map
> > the existing users to the cloud database, such as GitHub.  It's a lot of
> work, but possible.
> > However, for the scope of this project, if staying with Trac for issues
> is what is required, that is fine.
> >
> >
> > We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
> >
> >
> > OK.
> >
> > So based on what you have listed, I would say that most of the work will
> be
> > working with Git post commit hooks.
> >
> > I would say the plan should be something like this.
> >
> > A.1  https://github.com/twisted/twisted will be the "repository of
> truth"
> >        for Twisted.
> >            -> Twisted releases will be done from GitHub
> >            -> the Twisted developers who are now "core committers" for
> SVN, must be
> >                given access to be "core committers" to
> https://github.com/twisted/twisted
> >
> > A.2  On the Trac server, a local git mirror of the GitHub must be set up.
> >        Every bug tracker I've seen that integrates with git needs a
> local mirror of the repo
> >         in order to parse the git history in order to update the bug
> database.
> >         This mirror should be read-only, and the only thing updating
> this repo should be the Trac GitHub plugin.
> >
> > A.3  On the Trac server, this plugin must be installed:
> https://github.com/trac-hacks/trac-github
> >
> > A.4  On the GitHub server, a post-commit web hook must be configured.
> The workflow will be this:
> >
> >            [core committer does push to
> https://github.com/twisted/twisted]
> >              -> [post commit GitHub hook will be called to poke the Trac
> GitHub plugin]
> >              -> [Trac GitHub plugin will update the local git repo on
> the Trac server]
> >              -> [Trac GitHub will parse the git history for new commits
> and update tickets]
> >
> > I would recommend that steps (1) - (4) be made to work in a staging
> environment, with a separate
> > GitHub repo, and a separate copy of the Trac database.  That way, you
> can test things out without derailing
> > Twisted developers.  When you are confident that this workflow works,
> then the transition plan will be something
> > like the following.
> >
> > B.1   Send an e-mail to the mailing list and pick one day for the
> maintenance window.
> >         This will warn folks when they should take a holiday from
> Twisted work. :)
> >
> > B.2   When maintenance is about to begin, send a [HEADSUP] mail saying
> that repo will be unavailable.
> >
> > B.3  Create Subversion pre-commit hook to disable all commits to
> >          Subversion:
> >
> http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only
> >
> > B.4  Set up steps A.1 - A.4
> >
> > B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to
> https://github.com/twisted/twisted, and
> >          make sure that Trac works.
> >
> > B.6  Once the Twisted core team are satisified that everything works,
> send an e-mail to the mailing list
> >         that the maintenance window is over, and GitHub is now where the
> action is!
> >
> > B.7  Update all wiki documentation to change all references to getting
> code from Subversion,
> >          to getting code from GitHub.
> >
> > B.8  Update all systems which used Subversion to use GitHub.  For
> example, buildbots.
> >
> > --
> > Craig
> >
> >
> > --
> > Craig
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151130/758885f3/attachment.html>

From glyph at twistedmatrix.com  Mon Nov 30 11:41:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Nov 2015 10:41:30 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>
Message-ID: <D3BCD0EB-DFC2-41B5-A640-1806002300B0@twistedmatrix.com>

> On Nov 29, 2015, at 08:20, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi Craig,
> 
> Sorry for the delay and many thanks for your plan.
> 
> I have also sent your plan to the Unofficial Twisted Software Foundation.

Just for everyone's information, the real name for the relevant group here is the "Twisted Project Leadership Committee for the Software Freedom Conservancy".  The reason that the relevant mailing list is titled "unofficial twisted software foundation" is that we started off investigating if we could start our own foundation, and later, when we opted to have the Software Freedom Conservancy as our fiscal sponsor instead, the name "twisted software foundation" became "unofficial" because there is no such legal entity.

> From what I can see we are stuck in bureaucratic process.

We are stuck at the point before the bureaucratic process :).  The bureaucratic process is that the PLC votes to approve the plan.

> The plan needs to be approved ... and [the PLC] want to have a single plan submitted for approval.

The reason the plan needs to be approved is that the plans for the fellowship are documented here - https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan <https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan> - and that says "The maintainer will develop a plan for migration of development to GitHub, and once it has been approved implement the plan".

> We now have 3 plans : Amber's, Craig's and mine..... and we see which plan to be sent to [the PLC].
> 
> Also [the PLC] will only consider plans for GitHub.com. 

This is also because it's written in https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan <https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan>, so it was decided before the fellowship began.  However, lots of the steps to move to GitHub.com <http://github.com/> are also necessary prerequisites to use any of those sites - getting rid of subversion and reducing the amount of infrastructure we are operating.  Moving from Github somewhere else ought to be radically simpler than the process we've been undertaking to move to Github.

> We can try to keep tickets/wiki/website on Trac and only move the main repo + PR + hooks to GitHub.

This sounds good to me.

> This should allow us to get rid of SVN and build the infrastructure on web hooks. Later we can consider migration to other tools... or extending the GitHub.com usage to Issues / Wiki / GitHub Pages...etc
> 
> Until now we failed to coordinate toward creating a single plan and besides Glyph's comments on IRC, I have not received any feedback from [the PLC] for any of the plans.

The PLC is unlikely to be involved.  Personally, I'm severely overcommitted; most of the other PLC members have a very low level of involvement with the project.  Not going to point fingers specifically, but some hardly answer their email :-).

While I would prefer it if the PLC were a bit more involved, it should not be much of an issue in this case (assuming that I can herd the cats in the right direction when it's time for a vote).  The PLC's job in this case is only to provide oversight, just to verify that the plan is a proper investment of the SLC's financial resources.  In the same way that reviewers should not participate too closely in the authorship of patches they review, it should be fine if the PLC is not involved in the planning process.  (If we had the personal resources to do so, we probably wouldn't have needed to put it into the fellowship plan!)  The PLC won't decide between a set of different plans; it will just give final approval to the proposed one.

> Can we plan an IRC/Google Hangouts meeting to discuss the plan?

I've not had good luck with Hangouts, personally, but scheduling time on IRC sounds like a good idea.

> If you would like to see Twisted on Git and GitHub please consider joining the meeting.
> 
> I have created this Doodle poll to help us schedule the date and time for the meeting - http://doodle.com/poll/4ys8m8qakav9u9f9 <http://doodle.com/poll/4ys8m8qakav9u9f9>
Ultimately, it is Amber and Adi who need to coordinate on this.  But I would strongly encourage anyone with an interest in this migration to participate in the planning process; clearly we need some help nailing down the specifics :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151130/ebc612fc/attachment-0001.html>

From naveen.michaudagrawal at gmail.com  Mon Nov 30 17:17:43 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Mon, 30 Nov 2015 19:17:43 -0500
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel is
	ready for traffic?
Message-ID: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>

Hi,

I've managed to implement ssh tunneling using this answer on SO -
http://stackoverflow.com/a/23549091/5605324, and the tunnel can be used
from another app. However I would like to use it from within the twisted
application, but I'm not sure what to wire up so that I can get a callback
when the SSHConnectForwardingChannel is ready for traffic. It looks like I
can attach a callback to channel's _channelOpenDeferred, but that seems a
bit hacky. Any suggestions?

Thanks
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151130/2e72554c/attachment.html>

From glyph at twistedmatrix.com  Sun Nov  1 00:16:32 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 31 Oct 2015 23:16:32 -0700
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
Message-ID: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>

There are a few places within Conch which currently export PyCrypto objects as part of a public interface in Twisted.

These include:
twisted.conch.ssh.keys.Key.keyObject
twisted.conch.ssh.keys.objectType
I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to eliminate the dependency on PyCrypto.  Right now, in that branch, those objects are Cryptography key objects instead of PyCrypto key objects.

It is possible to preserve compatibility with keyObject, and we could deprecate and then remove objectType, with conditional dependencies on PyCrypto.  But before I go through the effort there, I'm wondering if any users of conch actually care.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151031/b2e19e70/attachment-0002.html>

From adi at roiban.ro  Sun Nov  1 01:27:23 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 1 Nov 2015 10:27:23 +0200
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <CAFycZ9fJAQ347bOOoUOrdurQSNefArubEV_sKbng1H0WVoMXJA@mail.gmail.com>

On 1 November 2015 at 08:16, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> There are a few places within Conch which currently export PyCrypto objects
> as part of a public interface in Twisted.
>
> These include:
>
> twisted.conch.ssh.keys.Key.keyObject
> twisted.conch.ssh.keys.objectType
>
> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to
> eliminate the dependency on PyCrypto.  Right now, in that branch, those
> objects are Cryptography key objects instead of PyCrypto key objects.
>
> It is possible to preserve compatibility with keyObject, and we could
> deprecate and then remove objectType, with conditional dependencies on
> PyCrypto.  But before I go through the effort there, I'm wondering if any
> users of conch actually care.

I care about conch and PyCrypto, but I prefer to update my own code now.
... rather than work on Twisted to support the compatibility and later
still work on my own code to make it work once compatibility is
removed.

I care about PyCrypto in the sense that I would like to see it gone.

In the same time, I am commited to Twisted deprecation policy and I am
happy to work on having a lean PyCrypto deprecation path.

------------

I see that objectType document that it accepts an
Crypto.PublicKey.pubkey.pubkey.... the latest patch ask for
cryptography.hazmat.primitives.interfaces

I would say that we can deprecate it now without changing the current
implementation and without replacing it with something.

Disclaimer: I have no idea why someone would need that function.

-----------

I think that twisted.conch.ssh.keys.Key.keyObject should also be
deprecated without being replace with something else... as such things
should stay private.


I can work at implementing a compatibility getter / setter for
keyObject while deprecating it in the same time.

-------------

I am happy to work or review any code which tries to remove PyCrypto
dependency and work on deprecating current PyCrytpo dependency.

--------

Many thanks for working on this!

-- 
Adi Roiban



From warner at lothar.com  Sun Nov  1 11:16:06 2015
From: warner at lothar.com (Brian Warner)
Date: Sun, 1 Nov 2015 10:16:06 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
 PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <563656E6.3050609@lothar.com>

On 10/31/15 11:16 PM, Glyph Lefkowitz wrote:

> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 -
> to eliminate the dependency on PyCrypto. Right now, in that branch,
> those objects are Cryptography key objects instead of PyCrypto key
> objects.
> 
> It is /possible/ to preserve compatibility with keyObject, and we
> could deprecate and then remove objectType, with conditional
> dependencies on PyCrypto. But before I go through the effort there,
> I'm wondering if any users of conch actually care.

Tahoe-LAFS uses Conch for two features: an SFTP frontend, and a
"manhole" repl-inside-the-app debugging interface. Neither uses the keys
objects.

Tahoe *does* indicate a dependency on PyCrypto because conch uses it,
and at the time we found it was more reliable to depend upon the
transitive closure of our subdependencies. We'll need to fix that (as we
bring our packaging up to modern standards).

Our SFTP frontend currently uses "from Crypto import Util" as a test to
see whether twisted.conch.ssh.filetransfer is going to work, so the
failure happens early and we can provide a better "your configuration
isn't going to work" error message. I'm guessing we imported pycrypto
rather than t.c.ssh directly to work around some old importer bug (I
vaguely remember something about half-complete imports causing confusion
in some old version of python). The code in question is ancient and
we'll need to update that when Twisted stops using PyCrypto.

But in general, yeah, we'd love to see PyCrypto go away. We currently
depend on pycryptopp (for AES/RSA/Ed25519), PyCrypto (via conch for SFTP
and manhole), and 'cryptography' (via pyOpenSSL via Foolscap for server
connections). Reducing the dependency graph by one node would be great.

cheers,
 -Brian



From zooko at leastauthority.com  Sun Nov  1 15:07:55 2015
From: zooko at leastauthority.com (Zooko Wilcox-OHearn)
Date: Sun, 1 Nov 2015 22:07:55 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <563656E6.3050609@lothar.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
Message-ID: <CAM_a8JwBJJLkammU9ThTfHtGdV1WGYQaBN3tkzAmWyVGReUXzQ@mail.gmail.com>

Yay for removing the dependency on PyCrypto! This would allow these
Twisted tickets to be closed:

* https://twistedmatrix.com/trac/ticket/4633# allow applications to
"bring their own crypto" to avoid the dependency of conch on PyCrypto

* https://twistedmatrix.com/trac/ticket/5577# Using manhole_tap ends
up requiring pycryto, even though only using telnet manhole

* https://twistedmatrix.com/trac/ticket/5805#
twisted.test.test_strcred fails on Python without pycrypto

And this Tahoe-LAFS tickets:

* https://tahoe-lafs.org/trac/tahoe-lafs/ticket/2094# rebuild (if
necessary) PyCrypto eggs to use libgmp >= 5, to mitigate RSA timing
attack

Possibly also this Tahoe-LAFS ticket:

* https://tahoe-lafs.org/trac/tahoe-lafs/ticket/774# pycrypto package
is required for manhole

And it allows us to remove this warning label about potential timing
attacks against the SFTP connection:

https://tahoe-lafs.org/trac/tahoe-lafs/browser/trunk/docs/frontends/FTP-and-SFTP.rst#configuring-sftp-access

Regards,

Zooko



From rgacote at appropriatesolutions.com  Sun Nov  1 17:38:59 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Sun, 1 Nov 2015 19:38:59 -0500
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
Message-ID: <CAG5tnzqX13UD8_OTNLZ0NPB81qWSiN5NXmnVkvGAWdrLaw+f4w@mail.gmail.com>

On Sun, Nov 1, 2015 at 1:16 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> here are a few places within Conch which currently export PyCrypto objects
> as part of a public interface in Twisted.
>
> These include:
>
>    - twisted.conch.ssh.keys.Key.keyObject
>    - twisted.conch.ssh.keys.objectType
>
> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 - to
> eliminate the dependency on PyCrypto.  Right now, in that branch, those
> objects are Cryptography key objects instead of PyCrypto key objects.
>
> It is *possible* to preserve compatibility with keyObject, and we could
> deprecate and then remove objectType, with conditional dependencies on
> PyCrypto.  But before I go through the effort there, I'm wondering if any
> users of conch actually care.
>

We have a custom SFTP server based on conch.
In reviewing the code, it looks like I don’t care about the change (aside
from appreciating one less dependency).
In reviewing our code, the only key references are as follows:

    from twisted.conch.ssh.factory import SSHFactory
    public_key = getRSAKey('id_rsa.pub')
    private_key = getRSAKey(‘id_rsa')factory = SSHFactory()
    factory.publicKeys = {'ssh-rsa': public_key}
    factory.privateKeys = {'ssh-rsa': private_key}
—Ray



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151101/5bd37211/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Nov  1 18:19:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 1 Nov 2015 17:19:19 -0800
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <563656E6.3050609@lothar.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
Message-ID: <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>


> On Nov 1, 2015, at 10:16, Brian Warner <warner at lothar.com> wrote:
> 
> On 10/31/15 11:16 PM, Glyph Lefkowitz wrote:
> 
>> I'm working on a ticket - https://twistedmatrix.com/trac/ticket/7413 -
>> to eliminate the dependency on PyCrypto. Right now, in that branch,
>> those objects are Cryptography key objects instead of PyCrypto key
>> objects.
>> 
>> It is /possible/ to preserve compatibility with keyObject, and we
>> could deprecate and then remove objectType, with conditional
>> dependencies on PyCrypto. But before I go through the effort there,
>> I'm wondering if any users of conch actually care.
> 
> Tahoe-LAFS uses Conch for two features: an SFTP frontend, and a
> "manhole" repl-inside-the-app debugging interface. Neither uses the keys
> objects.

Thanks for checking on that.

> Tahoe *does* indicate a dependency on PyCrypto because conch uses it,
> and at the time we found it was more reliable to depend upon the
> transitive closure of our subdependencies. We'll need to fix that (as we
> bring our packaging up to modern standards).

I am definitely feeling the pain with you on that one :).

> Our SFTP frontend currently uses "from Crypto import Util" as a test to
> see whether twisted.conch.ssh.filetransfer is going to work, so the
> failure happens early and we can provide a better "your configuration
> isn't going to work" error message. I'm guessing we imported pycrypto
> rather than t.c.ssh directly to work around some old importer bug (I
> vaguely remember something about half-complete imports causing confusion
> in some old version of python). The code in question is ancient and
> we'll need to update that when Twisted stops using PyCrypto.

That interpreter bug was something Twisted had workarounds for too, and I am fairly certain it was fixed in python *2.5*, so it's been QUITE a while since it was a real concern :).  If you can, I'd recommend fixing that conditional import now rather than waiting for a Twisted release that has switched backends.

> But in general, yeah, we'd love to see PyCrypto go away. We currently
> depend on pycryptopp (for AES/RSA/Ed25519), PyCrypto (via conch for SFTP
> and manhole), and 'cryptography' (via pyOpenSSL via Foolscap for server
> connections). Reducing the dependency graph by one node would be great.

Excellent.

It's worth noting that Cryptography now provides good support for AES and RSA (pretty sure this was not true when I was last discussing Cryptography in the context of Tahoe), and has plans for Ed25519 - https://github.com/pyca/cryptography/issues/856 - so you may be able to reduce this even further in the future :).

-glyph


From glyph at twistedmatrix.com  Sun Nov  1 20:09:29 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 1 Nov 2015 19:09:29 -0800
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <56347C60.5080108@googlemail.com>
References: <563462A2.7000309@googlemail.com>
 <344F2B0F-7787-451F-9075-52283232F70A@atleastfornow.net>
 <56346486.8040700@googlemail.com>
 <95F488D7-8C1C-462E-938A-9952C053B7D1@twistedmatrix.com>
 <56347C60.5080108@googlemail.com>
Message-ID: <EF666424-DDB7-426A-AD27-F553C002C613@twistedmatrix.com>


> On Oct 31, 2015, at 01:31, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi,
> So I went on the net on the off chance that the info I was looking for was easy to obtain, and I found out about trial.
> 
> I cloned the git and did:
> python bin/trial twisted
> 
> I got the following:

> Is that a trial error or a Twisted test failing?
> 
> Sorry if this is a stupid question, but (terrible, I know) I've never used tests before.
> 
> Another quick google told me that Trial was ported to Python3, so I'm not sure... If it's a test failing, it's not really telling me where the failure is.

Not _all_ of Twisted has been ported to Python 3, so if you run the full test suite (that's what "trial twisted" does) some of it will fail.

If you want to run the parts that are expected to pass, run `python admin/run-python3-tests´.  If those fail then we have a problem :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151101/867f63a5/attachment-0002.html>

From hawkowl at atleastfornow.net  Sun Nov  1 22:40:26 2015
From: hawkowl at atleastfornow.net (Hawkie)
Date: Mon, 02 Nov 2015 13:40:26 +0800
Subject: [Twisted-Python] Running Trial [wav]: Re:  Possible bug
In-Reply-To: <EF666424-DDB7-426A-AD27-F553C002C613@twistedmatrix.com>
Message-ID: <01607b25-d2be-46df-b6bc-56d68fbe68e6@email.android.com>

This is on Windows - I've linked the relevant ticket earlier (#8025 iirc?) which will bring Windows up to par.

-Amber

On 2 Nov 2015 11:09, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
>> On Oct 31, 2015, at 01:31, Chris Norman <chris.norman2 at googlemail.com> wrote:
>>
> Hi,
> So I went on the net on the off chance that the info I was looking for was easy to obtain, and I found out about trial.
>
> I cloned the git and did:
> python bin/trial twisted
>
> I got the following:
>
>> Is that a trial error or a Twisted test failing?
>>
>> Sorry if this is a stupid question, but (terrible, I know) I've never used tests before.
>>
>> Another quick google told me that Trial was ported to Python3, so I'm not sure... If it's a test failing, it's not really telling me where the failure is.
>
>
> Not _all_ of Twisted has been ported to Python 3, so if you run the full test suite (that's what "trial twisted" does) some of it will fail.
>
> If you want to run the parts that are expected to pass, run `python admin/run-python3-tests´.  If those fail then we have a problem :).
>
> -glyph
>

From zookog at gmail.com  Mon Nov  2 09:19:17 2015
From: zookog at gmail.com (Zooko Wilcox-O'Hearn)
Date: Mon, 2 Nov 2015 16:19:17 +0000
Subject: [Twisted-Python] INCOMPATIBLE CHANGE: removing dependency on
	PyCrypto
In-Reply-To: <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>
References: <1F8A0584-4791-4A33-9612-CF9467AEDF74@twistedmatrix.com>
 <563656E6.3050609@lothar.com>
 <A43AFECD-CB96-4ADE-8F21-7292C9A947D3@twistedmatrix.com>
Message-ID: <CANdZDc4v-y-7LxtLTwbri443_Y3Rt-ObJNyqpD+VMiqMr27N+g@mail.gmail.com>

On Mon, Nov 2, 2015 at 1:19 AM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> It's worth noting that Cryptography now provides good support for AES and RSA (pretty sure this was not true when I was last discussing Cryptography in the context of Tahoe), and has plans for Ed25519 - https://github.com/pyca/cryptography/issues/856 - so you may be able to reduce this even further in the future :).

FWIW I would be uncomfortable relying on https://cryptography.io for
Tahoe-LAFS's purposes. I expect to continue to rely on
https://pypi.python.org/pypi/pycryptopp/ for that for the forseeable
future.

Regards,

Zooko



From kobib at mellanox.com  Tue Nov  3 09:16:21 2015
From: kobib at mellanox.com (Kobi Bar)
Date: Tue, 3 Nov 2015 16:16:21 +0000
Subject: [Twisted-Python] Building Twisted 13.2.0 packages for RH 7.0
Message-ID: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>

Hi,

I need to build twisted 13.2.0 packages for RH 7.0.
I downloaded the source from https://pypi.python.org/packages/source/T/Twisted/Twisted-13.2.0.tar.bz2#md5=83fe6c0c911cc1602dbffb036be0ba79.
Currently, I'm able to build only one package "python-twisted-13.2.0-1.x86_64.rpm" (by running the command "python setup.py bdist_rpm") which contains all the sub-projects.
How can I build separate package for each twisted sub-project (e.g. conch, core, mail, web, etc...)?
I would like to have the following twisted packages at the end:
python-twisted-13.2.0-1. x86_64.rpm
python-twisted-conch-13.2.0-1.x86_64.rpm
python-twisted-core-13.2.0-1.x86_64.rpm
python-twisted-lore-13.2.0-1.x86_64.rpm
python-twisted-mail-13.2.0-1.x86_64.rpm
python-twisted-names-13.2.0-1.x86_64.rpm
python-twisted-news-13.2.0-1.x86_64.rpm
python-twisted-runner-13.2.0-1.x86_64.rpm
python-twisted-web-13.2.0-1.x86_64.rpm
python-twisted-words-13.2.0-1.x86_64.rpm

The main reason is that some packages depends on twisted sub-projects, and therefore, their installation fail (e.g. python-txzmq requires python-twisted-core).

Regards,
-----------------------------------------------------------------------------------------------------------------------------
Kobi Bar
Staff SW Engineer, Cloud Solutions
Mellanox Technologies
13 Zarchin street
Raanana, Israel

+972-74-7129166(o)
+972-50-3135001(c)
+972-74-7129111(f)
www.mellanox.com<http://www.mellanox.com/>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151103/b43a79fd/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Nov  3 16:00:13 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 3 Nov 2015 15:00:13 -0800
Subject: [Twisted-Python] Building Twisted 13.2.0 packages for RH 7.0
In-Reply-To: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>
References: <DB5PR05MB1174C4A9F3155788E61FB1B8C82B0@DB5PR05MB1174.eurprd05.prod.outlook.com>
Message-ID: <0C471321-31F6-45AB-8E2E-237FE49B18B2@twistedmatrix.com>


> On Nov 3, 2015, at 8:16 AM, Kobi Bar <kobib at mellanox.com> wrote:
> 
> I need to build twisted 13.2.0 packages for RH 7.0.

Why do you need to do this?  Twisted 13.2 is 2 years old at this point, and is missing important features (especially client TLS verification, added in 14.0).  Unless you are upgrading an application that uses older versions of Twisted, you should use the latest version, 15.4 as of this writing.

> How can I build separate package for each twisted sub-project (e.g. conch, core, mail, web, etc…)?

In Twisted 15.3, we stopped shipping sub-projects, so in preparation for that you should build your packages to depend on Twisted as a whole.

One way to do this more easily is to not build packages, but rather to deploy your application into a virtualenv; since subpackages were never really part of dependency trees on PyPI, only in operating system vendor packages, this should be less of a problem there.

I don't actually know how to build RPMs, so I am not holding out on you in terms of how to do it :-).  But if you're not Red Hat yourself, it seems like this is a less and less popular way of integrating applications, and for good reason.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151103/ea365857/attachment-0002.html>

From snailcoder at 163.com  Tue Nov  3 20:15:16 2015
From: snailcoder at 163.com (Wang Yan)
Date: Wed, 4 Nov 2015 11:15:16 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <562CC786.9080004@arskom.com.tr>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
Message-ID: <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>

I'm planning to design some REST APIs with Twisted in Python. For example, I want to use the HTTP method "GET" to fetch a single user's information:

GET http://myhost:8000/api/v1.0/users/[user_id]

I know I should inherit the twisted.web.resource.Resource and implement "getChild" by myself. 
The question is, should I implement a class for each segment of the URI? If so, I have to implement class API, class V1, class Users and Class User. In other words, if there're 10 segments in the URI, do I have to implement 10 classes to represent those resources?






At 2015-10-25 20:13:58, "Burak Arslan" <burak.arslan at arskom.com.tr> wrote:
Hey!


On 10/25/15 13:04, Wang Yan wrote:

Hi,


I'm confused about how to design REST APIs with Twisted, especially when my app have to interact with MySQL. 


Is there any basic design patterns for this kind of situation?

I do Spyne, and I think it's fa-bu-lous for building any web API on top of twisted.

It's a bit different from what you to with stock Twisted though. More specifically, there's no NOT_DONE_YET. The client hangs as long as you keep returning `Deferred`s. Once you return a non-deferred (and hopefully something that's compatible with your designated return type) that object is serialized using the `out_protocol` you pass to your `Application` and the resulting byte stream is written to the outgoing stream of your transport of choice. In case of a HTTP-based api, it's passed to the `transport.write()` function of a `twisted.web.Resource` instance, along with the outgoing headers that you set.

As for the MySQL part, I use SQLAlchemy exclusively from inside a function called by deferToThread. Spyne integrates with SQLAlchemy as well, so you can return directly what SQLA returns, be it objects or rows.

Here's a simple example: https://github.com/arskom/spyne/blob/master/examples/twisted/resource.py

There's a boilerplate generator here: http://spyne.io/

I hope you find it useful. Any questions, people at spyne.io is also at your service.

Best,
Burak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151104/ccc9151b/attachment-0002.html>

From mashiat.sarker at gmail.com  Tue Nov  3 21:09:29 2015
From: mashiat.sarker at gmail.com (Mashiat Sarker Shakkhar)
Date: Tue, 3 Nov 2015 23:09:29 -0500
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
Message-ID: <563984F9.3000406@gmail.com>

On 11/3/15 10:15 PM, Wang Yan wrote:
>
> I'm planning to design some REST APIs with Twisted in Python. For 
> example, I want to use the HTTP method "GET" to fetch a single user's 
> information:
>
> |GET http://myhost:8000/api/v1.0/users/[user_id] |
> I know I should inherit the twisted.web.resource.Resource and 
> implement "getChild" by myself.
> The question is, should I implement a class for each segment of the 
> URI? If so, I have to implement class API, class V1, class Users and 
> Class User. In other words, if there're 10 segments in the URI, do I 
> have to implement 10 classes to represent those resources?

Twisted is too low-level for such use in my opinion. We use Klein 
(https://github.com/twisted/klein) which offers nice abstraction above 
Twisted.
I know this does not answer your question. Just wanted to make sure that 
you are aware of possible options.

-Shakkhar

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151103/968e5f7f/attachment-0002.html>

From s.gongoragarcia at gmail.com  Wed Nov  4 10:00:17 2015
From: s.gongoragarcia at gmail.com (=?UTF-8?Q?Samuel_G=C3=B3ngora_Garc=C3=ADa?=)
Date: Wed, 4 Nov 2015 18:00:17 +0100
Subject: [Twisted-Python] How to call a Twisted reactor from a file
	different from his module?
Message-ID: <CAJK=ep-tcDzbnS+SahRwaLDjBVk3+nM707ESgFwY5+iH6uRDnQ@mail.gmail.com>

I have a question that could well belong to Twisted or could be directly
related to Python.

My problem, as the other is related to the disconnection process in
Twisted. As I read on this , if I want to I have to perform the following
steps:

1-The server must stop listening.
2-The client connection must disconnect.
3-The server connection must disconnect.

According to what I read on the previous page to make the first step would
have to run the stopListening method.

In the example mentioned in the web all actions are performed in the same
script. Making it easy to access the different variables and methods.

For me I have a server and a client are in different files and different
locations.

I have a function that creates a server, and assigns a protocol and want,
from the client protocol in another file, make an AMP call to a method for
stop the connector.

The call AMP calls the SendMsg command.





































*class TESTServer(protocol.Protocol):    factory = None    sUsername = ""
  credProto = None    bGSuser = None    slot = None"""Here was
uninteresting code."""            #   upwards=self.bGSuser, forwarded=True,
tx_timestamp=iTimestamp,\            #    message=sMsg)
log.msg("self.connector")        log.msg(self.connector)        return
{'bResult': True}    SendMsg.responder(vSendMsg)    def
_testfunction(self):        logger = logging.getLogger('server')
log.startLogging(sys.stdout)        pf = CredAMPServerFactory()
sslContext = ssl.DefaultOpenSSLContextFactory('key/server.pem',\
 'key/public.pem',)        self.connector = reactor.listenSSL(1234, pf,
contextFactory = sslContext,)        log.msg('Server running...')
reactor.run()if __name__ == '__main__':    TESTServer()._testfunction()*
The class CredAMPServerFactory assign the corresponding protocol.










*class CredAMPServerFactory(ServerFactory):    """    Server factory useful
for creating L{CredReceiver} and L{SATNETServer} instances.    This factory
takes care of associating a L{Portal} with the L{CredReceiver}    instances
it creates. If the login is succesfully achieved, a L{SATNETServer}
instance is also created.    """    protocol = CredReceiver*

In the "CredReceiver" class I have a call that assigns the protocol to the
TestServer class. I do this to make calls using the AMP method "Responder".

*        self.protocol = SATNETServer*

My problem is that when I make the call the program responds with an error
indicating that the connector doesn't belong to CredReceiver attribute
object.



*  File "/home/sgongar/Dev/protocol/server_amp.py", line 248, in vSendMsg
  log.msg(self.connector)exceptions.AttributeError: 'CredReceiver' object
has no attribute 'connector'*

How could I do this? Does anyone know of a similar example of that may take
note?

Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151104/81eec059/attachment-0002.html>

From adi at roiban.ro  Wed Nov  4 15:05:21 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 5 Nov 2015 00:05:21 +0200
Subject: [Twisted-Python] Specification / RFC of the
	twisted.conch.ssh.keys.Key.privateBlob implementation
Message-ID: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>

Hi,

Does anyone know what specifications / RFC is used for implementing
twisted.conch.ssh.keys.Key.privateBlob ?

https://github.com/twisted/twisted/blob/trunk/twisted/conch/ssh/keys.py#L577

I could not find the over-the-wire format for private keys... as I
supposed that private keys should not be put on the wire, in the first
place.

I did find a SSH agent draft
https://tools.ietf.org/html/draft-ietf-secsh-agent-02#section-1.4.1
but the format is different than the one from the docstring.

In twisted privateBlob is only used to support twisted.conch.ssh.agent

Is anyone using this method ?

Thanks!

-- 
Adi Roiban



From adi at roiban.ro  Wed Nov  4 15:11:50 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 5 Nov 2015 00:11:50 +0200
Subject: [Twisted-Python] Specification / RFC of the
	twisted.conch.ssh.keys.Key.privateBlob implementation
In-Reply-To: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>
References: <CAFycZ9cEQws58hzixj7UFrJ6zE2LXEpqmpcL7kpD9EQXWL1Cmw@mail.gmail.com>
Message-ID: <CAFycZ9cs+3Ya0MSOJ7otNoKD7q3g1i26c7ZWs3H5AUMwgwj3Vw@mail.gmail.com>

On 5 November 2015 at 00:05, Adi Roiban <adi at roiban.ro> wrote:
> Hi,
>
> Does anyone know what specifications / RFC is used for implementing
> twisted.conch.ssh.keys.Key.privateBlob ?
>
> https://github.com/twisted/twisted/blob/trunk/twisted/conch/ssh/keys.py#L577
>
> I could not find the over-the-wire format for private keys... as I
> supposed that private keys should not be put on the wire, in the first
> place.
>
> I did find a SSH agent draft
> https://tools.ietf.org/html/draft-ietf-secsh-agent-02#section-1.4.1
> but the format is different than the one from the docstring.

I guess that this is OpenSSH format as it matches the implementation

https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.agent



-- 
Adi Roiban



From snailcoder at 163.com  Thu Nov  5 02:28:10 2015
From: snailcoder at 163.com (Wang Yan)
Date: Thu, 5 Nov 2015 17:28:10 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <563984F9.3000406@gmail.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
Message-ID: <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>

Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
   
    from flask import Flask
    from flask.ext.restful import Api, Resource

    api = Flask(__name__)
    api = Api(app)

    class UserAPI(Resource):
        def get(self, user_id):
            pass

        def post(self, user_id):
            pass

    api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')

Is there any similar usage in Klein?







在 2015-11-04 12:09:29，"Mashiat Sarker Shakkhar" <mashiat.sarker at gmail.com> 写道：

On 11/3/15 10:15 PM, Wang Yan wrote:


I'm planning to design some REST APIs with Twisted in Python. For example, I want to use the HTTP method "GET" to fetch a single user's information:

GET http://myhost:8000/api/v1.0/users/[user_id]

I know I should inherit the twisted.web.resource.Resource and implement "getChild" by myself. 
The question is, should I implement a class for each segment of the URI? If so, I have to implement class API, class V1, class Users and Class User. In other words, if there're 10 segments in the URI, do I have to implement 10 classes to represent those resources?

Twisted is too low-level for such use in my opinion. We use Klein (https://github.com/twisted/klein) which offers nice abstraction above Twisted.
I know this does not answer your question. Just wanted to make sure that you are aware of possible options.

-Shakkhar

[...]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151105/86202fdf/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Nov  5 15:02:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 5 Nov 2015 14:02:53 -0800
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
Message-ID: <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>


> On Nov 5, 2015, at 1:28 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
>     
>     from flask import Flask
>     from flask.ext.restful import Api, Resource
> 
>     api = Flask(__name__)
>     api = Api(app)
> 
>     class UserAPI(Resource):
>         def get(self, user_id):
>             pass
> 
>         def post(self, user_id):
>             pass
> 
>     api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')
> 
> Is there any similar usage in Klein? 

Yes; in fact this extension for Flask is similar to how twisted.web works internally.  I think you're looking for something like this:

from klein import run, route

from twisted.web.resource import Resource

class User(Resource, object):
    def __init__(self, user_id):
        super(User, self).__init__()
        self.user_id = user_id
    def render_GET(self, request):
        pass
    def render_POST(self, request):
        pass

@route("/users/<int:user_id>")
def user(request, user_id):
    return User(user_id)

run("localhost", 8080)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151105/884fc812/attachment-0002.html>

From hawkowl at atleastfornow.net  Sat Nov  7 06:49:10 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 7 Nov 2015 14:49:10 +0100
Subject: [Twisted-Python] The End of Windows XP Support in Twisted 15.5
Message-ID: <4710057A-06DE-4590-9DD3-49C2F4236615@atleastfornow.net>

Hi everyone,

We've just removed the Windows XP builder from our buildbot. Many thanks for Tom Prince for keeping it online for so long, but right now, we think it's time to retire targeting XP.

Our only current supported Windows platform is Windows 7 x64, with Python 2.7.10, with Python 3.4 and Python 3.5 support coming soon.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151107/3dd41f7b/attachment.sig>

From adi at roiban.ro  Sun Nov  8 15:52:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 9 Nov 2015 00:52:25 +0200
Subject: [Twisted-Python] pyserial on Python3
Message-ID: <CAFycZ9c6uAtvNNvrT_Jf9DsRRfPifYxP2ryOTYh+jPeAOchNSQ@mail.gmail.com>

Hi,

We have this ticket which ports twisted.internet.serialport on Python
3 - https://twistedmatrix.com/trac/ticket/8099

I saw that the Python 3 builders don't have pyserial installed.

Was this on purpose or just forgetting to also install
.[all_non_platform] on the python 3 builders?

Thanks!
-- 
Adi Roiban



From cory at lukasa.co.uk  Mon Nov  9 02:02:16 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 9 Nov 2015 09:02:16 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
Message-ID: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>

All,

With the work on #7860 nearly done, Twisted should be in a good place to have a HTTP/2 implementation. There’s currently a Trac ticket (#7460) for adding HTTP/2 support to twisted.web, which is obviously a good idea. I’m happy to take on that work.

What I want to get a picture for is how much of the Twisted support should live in Twisted itself. Currently I’m planning to base the implementation on Hyper-h2[0]. This is because it seems totally needless to write a new HTTP/2 state machine when a perfectly good one already exists (full disclosure: I’m the maintainer of Hyper-h2).

However, we’ll still need a HTTP/2 Protocol, and the twisted.web integration. The twisted.web integration will definitely need to be done in Twisted, but Adi has pointed out to me that it may be better for the HTTP/2 Protocol itself to live outside of core Twisted (probably as a sub-project of Hyper, with a working title of txh2). This would give us a lot more flexibility and speed to iterate.

I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?

Cory

[0]: http://python-hyper.org/h2/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151109/c5113658/attachment.sig>

From kebin70 at gmail.com  Mon Nov  9 15:29:45 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Mon, 9 Nov 2015 14:29:45 -0800
Subject: [Twisted-Python] Dumb Logger API question
Message-ID: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>

http://twistedmatrix.com/documents/current/core/howto/logger.html

I'm looking at the new-ish logger api and wonder how to log to console as a
first step to transitioning.

Any pointers?  Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151109/ffe5f265/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Nov 10 15:54:23 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 10 Nov 2015 23:54:23 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
Message-ID: <5642759F.5000603@tavendo.de>

Hi,

maybe it's of interest how far it's possible to drive Twisted Web on 
modern multi-core CPUs.

Here are 2 data points from measuring:

* 627990 HTTP requests/s at 360 us avg latency
* 12.6 GB/s HTTP reply traffic

This is using 40 Xeon cores and serves HTTP over loopback TCP to 8 
threads of wrk. The Twisted Web resource served was

https://github.com/crossbario/crossbarexamples/blob/master/benchmark/web/myresource.py

Details, figures and more results are here:

https://github.com/crossbario/crossbarexamples/tree/master/benchmark/web

Cheers,
/Tobias



From ldanielburr at me.com  Tue Nov 10 16:34:38 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Tue, 10 Nov 2015 17:34:38 -0600
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <5642759F.5000603@tavendo.de>
References: <5642759F.5000603@tavendo.de>
Message-ID: <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>

Hi Tobias,

> On Nov 10, 2015, at 4:54 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> Hi,
> 
> maybe it's of interest how far it's possible to drive Twisted Web on modern multi-core CPUs.
> 
> Here are 2 data points from measuring:
> 
> * 627990 HTTP requests/s at 360 us avg latency
> * 12.6 GB/s HTTP reply traffic
> 
> This is using 40 Xeon cores and serves HTTP over loopback TCP to 8 threads of wrk. The Twisted Web resource served was
> 
> https://github.com/crossbario/crossbarexamples/blob/master/benchmark/web/myresource.py
> 
> Details, figures and more results are here:
> 
> https://github.com/crossbario/crossbarexamples/tree/master/benchmark/web
> 

Those are some nice numbers, to be sure!  Twisted really benefits from running in a pypy vm.  I have read that pypy still doesn’t optimize old-style classes as efficiently as new-style classes; I wonder if there would be any meaningful change in the metrics if resource.Resource was a new-style class instead of an old-style class.

(Note that mixing in object, e.g., class Foo(resource.Resource, object), to produce a new-style class apparently makes pypy unhappy.  See http://pypy.org/performance.html for details.)

Am I correct in stating that SO_REUSEPORT only produces the desired balancing of requests between twisted processes on Linux?

Thanks,

L. Daniel Burr

> Cheers,
> /Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Tue Nov 10 19:05:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 10 Nov 2015 18:05:19 -0800
Subject: [Twisted-Python] Dumb Logger API question
In-Reply-To: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
References: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
Message-ID: <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>


> On Nov 9, 2015, at 2:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> http://twistedmatrix.com/documents/current/core/howto/logger.html <http://twistedmatrix.com/documents/current/core/howto/logger.html>
> 
> I'm looking at the new-ish logger api and wonder how to log to console as a first step to transitioning.
> 
> Any pointers?  Thanks.

Do you mean "emit structured log text to stdout"?  In that case, that is covered in the document you link to; these two sections:

http://twistedmatrix.com/documents/current/core/howto/logger.html#avoid-mutable-event-keys
http://twistedmatrix.com/documents/current/core/howto/logger.html#starting-the-global-log-publisher

create a jsonFileLogObserver and start logging to it:

import sys
from twisted.logger import jsonFileLogObserver, globalLogBeginner, Logger
globalLogBeginner.beginLoggingTo([jsonFileLogObserver(sys.stdout)])
log = Logger()
log.info("Information.")

If you want unstructured log output for human reading (not a good choice for an automated system, but perhaps useful for debugging), you can instead go with textFileLogObserver, in almost exactly the same way:

import sys
from twisted.logger import textFileLogObserver, globalLogBeginner, Logger
globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])
log = Logger()
log.info("Information.")

Is this what you were looking for?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151110/9ad25322/attachment-0002.html>

From kebin70 at gmail.com  Tue Nov 10 22:09:22 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Tue, 10 Nov 2015 21:09:22 -0800
Subject: [Twisted-Python] Dumb Logger API question
In-Reply-To: <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>
References: <CAA-sNEYRM-prs==nModzmAF9uZgtvf1tSfi5RQZOL=-+p6JoHg@mail.gmail.com>
 <EBA4349A-9614-40C1-8A97-85F2E1F13D09@twistedmatrix.com>
Message-ID: <CAA-sNEbeSGHv7ieFOZdVt-LVzdaN02ibkEqp863+n_L65gV0jQ@mail.gmail.com>

yes, I stared at that section for a bit.  Not to get off topic, but the
readability of the api docs from back when is slightly better in my
opinion.  So the topic being I'm an idiot - thanks for both
examples...that's a perfect example.

I got confused by "from myobservers import PrintingObserver" cause I'm
wondering if myobservers is a core package.

On Tue, Nov 10, 2015 at 6:05 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 9, 2015, at 2:29 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html
>
> I'm looking at the new-ish logger api and wonder how to log to console as
> a first step to transitioning.
>
> Any pointers?  Thanks.
>
>
> Do you mean "emit structured log text to stdout"?  In that case, that is
> covered in the document you link to; these two sections:
>
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html#avoid-mutable-event-keys
>
> http://twistedmatrix.com/documents/current/core/howto/logger.html#starting-the-global-log-publisher
>
> create a jsonFileLogObserver and start logging to it:
>
> import sys
> from twisted.logger import jsonFileLogObserver, globalLogBeginner, Logger
> globalLogBeginner.beginLoggingTo([jsonFileLogObserver(sys.stdout)])
> log = Logger()
> log.info("Information.")
>
>
> If you want unstructured log output for human reading (not a good choice
> for an automated system, but perhaps useful for debugging), you can instead
> go with textFileLogObserver, in almost exactly the same way:
>
> import sys
> from twisted.logger import textFileLogObserver, globalLogBeginner, Logger
> globalLogBeginner.beginLoggingTo([textFileLogObserver(sys.stdout)])
> log = Logger()
> log.info("Information.")
>
>
> Is this what you were looking for?
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151110/4ba63694/attachment-0002.html>

From tobias.oberstein at tavendo.de  Wed Nov 11 06:55:07 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 11 Nov 2015 14:55:07 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
Message-ID: <564348BB.1070903@tavendo.de>

> Those are some nice numbers, to be sure!  Twisted really benefits from running in a pypy vm.  I have read that pypy still doesn’t optimize old-style classes as efficiently as new-style classes; I wonder if there would be any meaningful change in the metrics if resource.Resource was a new-style class instead of an old-style class.

Yep, using new style classes is indeed recommended for performance on 
PyPy. We are using new style classes throughout Autobahn and 
Crossbar.io, but I haven't measured effects.

> Am I correct in stating that SO_REUSEPORT only produces the desired balancing of requests between twisted processes on Linux?

You need Linux kernel 3.9+. DragonFly BSD also claims support, but I 
haven't tried. We should also be able to make Windows work, after some 
more things have landed for the Twisted IOCP reactor.

Cheers,
/Tobias

>
> Thanks,
>
> L. Daniel Burr
>
>> Cheers,
>> /Tobias
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From adi at roiban.ro  Wed Nov 11 15:10:32 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 12 Nov 2015 00:10:32 +0200
Subject: [Twisted-Python] Conch SSH client dropping support for non/pre RFC
	4419 clients
Message-ID: <CAFycZ9eq41Mb1vv71FbYhyhatHU_5SWEqEysEa=JDfr8RZp7Sw@mail.gmail.com>

Hi,

I just want to let you know about a future change in the SSH client
implementation.

Full details https://twistedmatrix.com/trac/ticket/8100

Basically in order to work with OpenSSH version 6.9 and newer we will
break support for very old (2004-2006) SSH servers which do not
support RFC 4419

In case you care about Twisted SSH client interacting with very of SSH
servers, please take a look and send your feedback over the Trac issue

Otherwise, feel free to ignore and enjoy the rest of the day /night :)

-- 
Adi Roiban



From adi at roiban.ro  Wed Nov 11 15:40:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 12 Nov 2015 00:40:25 +0200
Subject: [Twisted-Python] Migration to Git / GitHub
Message-ID: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>

Hi,

So I am bringing this to the list for a greater audience and to reach
all borders and timezones :)

I think that most people agree that Twisted should get rid of SVN and
move to Git.


General rules by Glyph as they were sent to me :)

Development can't stop, the website can't go down, and we can't lose
any data. If you have a plan that migrates absolutely everything to
github, including all of our issues to github issues, and all of our
review queue stuff to github PRs, that is fine.

You cannot, however, just push everything to github and delete the
ticket database and all the outstanding branches and just say "okay
everybody file github issues now". There has to be clear communication
about what a developer who shows up on any given day to work on a
Twisted ticket should do.

Current requirements from Glyph:

- be able to accept PRs on github.com
- host code primarily on github
- make sure all the same committers still have access (at least active ones)
- make sure the website doesn't go down
- break as little functionality as possible (kenaan, highscores, etc)
- communicate clearly to contributors what they have to do in order to
work on Twisted in every step of the process

------

Also from Glyph

there are lots of "nice to have" things like it would be nice to have
people authenticate to twistedmatrix.com via github so we can get rid
of our terrible auth database  and so they have one set of credentials
for working

It would be nice if we could automatically sync any relevant
information between PRs and issues

-----------

I would prefer to do baby steps and as a start just have the main repo
in git hosted by github.com.

Using GitHub it will force us (for the better or for the worse) to
rethink the infrastructure using web hooks... and for "modern" hosting
platforms.

Once we have webhooks we should be able to migrate to any other
provider... so it should be for the better

Also, we need to migrate to GitHub as this was already agreed (one
year ago) ... and if we re-start the conversation regarding the
hosting platform, we are back on point 0 and still on SVN.

We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages

-------------

So... if you have anything to comment regarding the git / github.com
migration please send your feedback.

Later we will announce the plan , break it into small task and start
working on them.

Cheers

-- 
Adi Roiban



From clayton.daley at gmail.com  Wed Nov 11 15:47:57 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 11 Nov 2015 16:47:57 -0600
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>

+1

Maybe this is old news, but I stumbled upon Subgit when poking around for
another open source project.  It says you can commit to both for as long as
you like and... it's free to use for open source:

http://www.subgit.com/pricing.html

Clayton Daley

On Wed, Nov 11, 2015 at 4:40 PM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> So I am bringing this to the list for a greater audience and to reach
> all borders and timezones :)
>
> I think that most people agree that Twisted should get rid of SVN and
> move to Git.
>
>
> General rules by Glyph as they were sent to me :)
>
> Development can't stop, the website can't go down, and we can't lose
> any data. If you have a plan that migrates absolutely everything to
> github, including all of our issues to github issues, and all of our
> review queue stuff to github PRs, that is fine.
>
> You cannot, however, just push everything to github and delete the
> ticket database and all the outstanding branches and just say "okay
> everybody file github issues now". There has to be clear communication
> about what a developer who shows up on any given day to work on a
> Twisted ticket should do.
>
> Current requirements from Glyph:
>
> - be able to accept PRs on github.com
> - host code primarily on github
> - make sure all the same committers still have access (at least active
> ones)
> - make sure the website doesn't go down
> - break as little functionality as possible (kenaan, highscores, etc)
> - communicate clearly to contributors what they have to do in order to
> work on Twisted in every step of the process
>
> ------
>
> Also from Glyph
>
> there are lots of "nice to have" things like it would be nice to have
> people authenticate to twistedmatrix.com via github so we can get rid
> of our terrible auth database  and so they have one set of credentials
> for working
>
> It would be nice if we could automatically sync any relevant
> information between PRs and issues
>
> -----------
>
> I would prefer to do baby steps and as a start just have the main repo
> in git hosted by github.com.
>
> Using GitHub it will force us (for the better or for the worse) to
> rethink the infrastructure using web hooks... and for "modern" hosting
> platforms.
>
> Once we have webhooks we should be able to migrate to any other
> provider... so it should be for the better
>
> Also, we need to migrate to GitHub as this was already agreed (one
> year ago) ... and if we re-start the conversation regarding the
> hosting platform, we are back on point 0 and still on SVN.
>
> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
> -------------
>
> So... if you have anything to comment regarding the git / github.com
> migration please send your feedback.
>
> Later we will announce the plan , break it into small task and start
> working on them.
>
> Cheers
>
> --
> Adi Roiban
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151111/b912da9a/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Nov 11 18:09:42 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 17:09:42 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
Message-ID: <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>


> On Nov 11, 2015, at 2:47 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> +1
> 
> Maybe this is old news, but I stumbled upon Subgit when poking around for another open source project.  It says you can commit to both for as long as you like and... it's free to use for open source:
> 
> http://www.subgit.com/pricing.html <http://www.subgit.com/pricing.html>
>  

Thanks for the reference, but we would prefer to just eliminate our SVN repository ;).  For one thing it makes committing much slower to do all this mirroring during commit.

If there are people who actually like using SVN, when github is our upstream, they actually have SVN client support (although there's no SVN mirror on the back end): https://github.com/blog/626-announcing-svn-support <https://github.com/blog/626-announcing-svn-support>

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151111/74abb468/attachment-0002.html>

From clayton.daley at gmail.com  Wed Nov 11 19:10:47 2015
From: clayton.daley at gmail.com (Clayton Daley)
Date: Wed, 11 Nov 2015 20:10:47 -0600
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
 <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
Message-ID: <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>

I'm not an SVN user (only Git) so I certainly don't care.  I proposed it in
the other group to help facilitate a transitional period.  That would give
users time to wrap up any work in SVN and transition to Git at their own
pace... rather than on a specific drop dead date.  Maybe that's not a
problem with SVN -- I wouldn't know.

Clayton Daley

On Wed, Nov 11, 2015 at 7:09 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 11, 2015, at 2:47 PM, Clayton Daley <clayton.daley at gmail.com>
> wrote:
>
> +1
>
> Maybe this is old news, but I stumbled upon Subgit when poking around for
> another open source project.  It says you can commit to both for as long as
> you like and... it's free to use for open source:
>
> http://www.subgit.com/pricing.html
>
>
>
> Thanks for the reference, but we would prefer to just eliminate our SVN
> repository ;).  For one thing it makes committing much slower to do all
> this mirroring during commit.
>
> If there are people who actually *like* using SVN, when github is our
> upstream, they actually have SVN client support (although there's no SVN
> mirror on the back end):
> https://github.com/blog/626-announcing-svn-support
>
> -glyph
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151111/60de423b/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Nov 11 19:17:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 18:17:38 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <CACKEAnWX5+rW6uczHHRqt=C2U=W=G-6T0Z0pyGbZJZstut-FmQ@mail.gmail.com>
 <15A32AC5-DFCB-4759-B0BA-0CBCC2741A70@twistedmatrix.com>
 <CACKEAnXwB3+cAOVCdaPLgTE5qufDHUpny8qMciaUzBPvzsOJfA@mail.gmail.com>
Message-ID: <1ABC06F3-A02F-4293-9EA6-C522009FDD5D@twistedmatrix.com>



> On Nov 11, 2015, at 6:10 PM, Clayton Daley <clayton.daley at gmail.com> wrote:
> 
> I'm not an SVN user (only Git) so I certainly don't care.  I proposed it in the other group to help facilitate a transitional period.  That would give users time to wrap up any work in SVN and transition to Git at their own pace... rather than on a specific drop dead date.  Maybe that's not a problem with SVN -- I wouldn't know.

Aah, I see.  I guess maybe it's not clear: we're already in the transitional period with other technology, git-svn, and have an up-to-the-minute git mirror on both https://code.twistedmatrix.com/ <https://code.twistedmatrix.com/> and https://github.com/twisted/twisted <https://github.com/twisted/twisted>.  So this wouldn't really add much.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151111/4a204754/attachment-0002.html>

From dynamicgl at gmail.com  Wed Nov 11 21:36:52 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Thu, 12 Nov 2015 12:36:52 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <564348BB.1070903@tavendo.de>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
Message-ID: <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>

On Wed, Nov 11, 2015 at 9:55 PM, Tobias Oberstein <
tobias.oberstein at tavendo.de> wrote:

> Those are some nice numbers, to be sure!  Twisted really benefits from
>> running in a pypy vm.  I have read that pypy still doesn’t optimize
>> old-style classes as efficiently as new-style classes; I wonder if there
>> would be any meaningful change in the metrics if resource.Resource was a
>> new-style class instead of an old-style class.
>>
>
> Yep, using new style classes is indeed recommended for performance on
> PyPy. We are using new style classes throughout Autobahn and Crossbar.io,
> but I haven't measured effects.
>
> Am I correct in stating that SO_REUSEPORT only produces the desired
>> balancing of requests between twisted processes on Linux?
>>
>
> You need Linux kernel 3.9+. DragonFly BSD also claims support, but I
> haven't tried. We should also be able to make Windows work, after some more
> things have landed for the Twisted IOCP reactor.
>
> Cheers,
> /Tobias
>
>
>
>> Thanks,
>>
>> L. Daniel Burr
>>
>> Cheers,
>>> /Tobias
>>>
>>>

 Hi Tobias

    Have you tried to test crossbar on windows? I heard that stdio performs
very bad on windows. I noticed crossbar use pipe to transfer data between
process.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151112/6e8cacc0/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Nov 11 23:04:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 11 Nov 2015 22:04:53 -0800
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
Message-ID: <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>


> On Nov 9, 2015, at 1:02 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> All,
> 
> With the work on #7860 nearly done,

_Actually_ done, now.

> Twisted should be in a good place to have a HTTP/2 implementation. There’s currently a Trac ticket (#7460) for adding HTTP/2 support to twisted.web, which is obviously a good idea. I’m happy to take on that work.

<3 <3 <3

> What I want to get a picture for is how much of the Twisted support should live in Twisted itself. Currently I’m planning to base the implementation on Hyper-h2[0]. This is because it seems totally needless to write a new HTTP/2 state machine when a perfectly good one already exists (full disclosure: I’m the maintainer of Hyper-h2).

Did somebody say STATE MACHINE??? https://github.com/glyph/automat <https://github.com/glyph/automat> (Seriously though maybe look at it, it might make some of the innards of h2 nicer, or, maybe you will have some ideas about how broken it is and could tell me them.)

Yes, we should definitely depend on h2 as a library and not do our own thing.  Frankly, Hyper-h2 is almost SURREAL in how well-factored and decoupled the implementation is from I/O.  If libraries in the Python ecosystem looked like this generally, Twisted would be a much better platform than it is.  (Frankly, most of Twisted's _own_ protocol implementations should aspire to such cleanliness.)

> However, we’ll still need a HTTP/2 Protocol, and the twisted.web integration. The twisted.web integration will definitely need to be done in Twisted, but Adi has pointed out to me that it may be better for the HTTP/2 Protocol itself to live outside of core Twisted (probably as a sub-project of Hyper, with a working title of txh2). This would give us a lot more flexibility and speed to iterate.

Creating this dependency loop (twisted->txh2->(twisted->txh2->..., h2)) seems potentially problematic, and maybe more trouble than it's worth in terms of factoring things out.  An IProtocol implementation is literally three methods - makeConnection, dataReceived, connectionLost - so if we put this together nicely there should not be too much code on the Twisted side of things.  Or at least, so I imagine; just the glue to hook it up to (sigh) IResource, et. al.

One potential way to keep the dependency graph from being cyclical is to build the interface in terms of Tubes (see <https://github.com/twisted/tubes <https://github.com/twisted/tubes>> and <https://twistedmatrix.com/trac/ticket/288 <https://twistedmatrix.com/trac/ticket/288>>) and move the Twisted-y parts of Tubes (like undefer.py) into Twisted proper.

Another would be to actually extract Deferred for real, and it seems the time is ripe for such an adventure.

> I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?

Can you maybe expand a little bit on what pieces you think need to exist, in terms of what the Protocol would actually do?  Are you thinking about things like integration with Cred?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151111/e8b8ff08/attachment-0002.html>

From cory at lukasa.co.uk  Thu Nov 12 03:46:03 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 12 Nov 2015 10:46:03 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
Message-ID: <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>


> On 12 Nov 2015, at 06:04, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> Creating this dependency loop (twisted->txh2->(twisted->txh2->..., h2)) seems potentially problematic, and maybe more trouble than it's worth in terms of factoring things out.  An IProtocol implementation is literally three methods - makeConnection, dataReceived, connectionLost - so if we put this together nicely there should not be too much code on the Twisted side of things.  Or at least, so I imagine; just the glue to hook it up to (sigh) IResource, et. al.

I think if we took this approach txh2 would be an optional dependency for Twisted, not a hard dependency. That avoids the loop, at the cost of meaning that a default naive Twisted install will have no H2 support.

>> I want to get a sense of what the team believes is the best approach. Can I have your opinions? How much of this should be in Twisted itself?
> 
> Can you maybe expand a little bit on what pieces you think need to exist, in terms of what the Protocol would actually do?  Are you thinking about things like integration with Cred?

Sure.

What concerns me as an outsider to Twisted is where exactly there are bits of Twisted that “know” about HTTP, which bits need updating, and how to do it. If we restrain ourselves to twisted.web, this gets a bit easier, but twisted.web is still a substantial chunk of code.

We *might* be able to get away with simply having classes that implement the interfaces of twisted.web.http.HTTPClient, twisted.web.http.HTTPChannel, and twisted.web._newclient.HTTPParser. These interfaces are currently implicit, but I’d probably aim to make them explicit (or as explicit as possible) for the purposes of this work so that we could in principle do a similar extension in future.

However, this may not work: in particular, some of the other classes in twisted.web may know altogether too much about HTTP/1.X: in particular, if they have the nerve to write directly to a transport we’ve got a real problem with this approach, as HTTP/2 does not allow naked writes on its sockets (all data is framed).

The other bit of work is that we need to update twisted.web factories to make sure that they build the appropriate protocol and can switch them as needed. Probably this means we just need a layer of indirection, but I’ve not yet worked out how this is going to work.

The question becomes, given how much twisted.web will need to change to accept this H2 protocol, whether there is any advantage in having it out of tree. There’s also a question about Twisted policy: how much stuff should actually be directly in Twisted?

Cory

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151112/083f7b3c/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151112/083f7b3c/attachment.sig>

From snailcoder at 163.com  Thu Nov 12 08:33:13 2015
From: snailcoder at 163.com (Wang Yan)
Date: Thu, 12 Nov 2015 23:33:13 +0800 (CST)
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
 <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
Message-ID: <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>

Absolutely that's what I'm looking for! Thanks a lot!


However, I'm wondering if Twisted and Klein support filtering results. For example, the User table in MySQL contains id, name and age fields. How can I get all users whose name are "Alan" and age > 16? It seems I need a filter, but I'm not sure how to implement such a filter or resource with Twisted and Klein.






在 2015-11-06 06:02:53，"Glyph Lefkowitz" <glyph at twistedmatrix.com> 写道：


On Nov 5, 2015, at 1:28 AM, Wang Yan <snailcoder at 163.com> wrote:


Thank you to remind me of Klein. I'm very new to Twisted and Klein. What I've known is that Klein is a little like Flask, with which I can implement a UserAPI as follows:
   
    from flask import Flask
    from flask.ext.restful import Api, Resource

    api = Flask(__name__)
    api = Api(app)

    class UserAPI(Resource):
        def get(self, user_id):
            pass

        def post(self, user_id):
            pass

    api.add_resource(UserAPI, '/users/<int:id>', endpoint='user')

Is there any similar usage in Klein?



Yes; in fact this extension for Flask is similar to how twisted.web works internally.  I think you're looking for something like this:


from klein import run, route


from twisted.web.resource import Resource


class User(Resource, object):
    def __init__(self, user_id):
        super(User, self).__init__()
        self.user_id = user_id
    def render_GET(self, request):
        pass
    def render_POST(self, request):
        pass


@route("/users/<int:user_id>")
def user(request, user_id):
    return User(user_id)


run("localhost", 8080)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151112/fb99a7ea/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Nov 12 19:53:40 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 12 Nov 2015 18:53:40 -0800
Subject: [Twisted-Python] How to design REST API with Twisted?
In-Reply-To: <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>
References: <675af318.a4b6.1509eac2325.Coremail.snailcoder@163.com>
 <562CC786.9080004@arskom.com.tr>
 <6315ed9.8288.150d07dcc43.Coremail.snailcoder@163.com>
 <563984F9.3000406@gmail.com>
 <38416470.18574.150d6f98f19.Coremail.snailcoder@163.com>
 <17C926E8-2ECD-402A-8E95-D324F07D0F0A@twistedmatrix.com>
 <1375c213.173cb.150fc544a17.Coremail.snailcoder@163.com>
Message-ID: <1DBF1F32-2372-4F2E-AB7A-17B39DD01B69@twistedmatrix.com>


> On Nov 12, 2015, at 7:33 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> Absolutely that's what I'm looking for! Thanks a lot!

Glad I could help!

> However, I'm wondering if Twisted and Klein support filtering results. For example, the User table in MySQL contains id, name and age fields. How can I get all users whose name are "Alan" and age > 16? It seems I need a filter, but I'm not sure how to implement such a filter or resource with Twisted and Klein.

Klein is pretty purely a web-facing framework; it just helps you built the HTTP stuff that answers queries.  It doesn't help you talk to a database at all; you have to figure out your own way to do that.  This is historically a weak area for Twisted, sadly; you might find https://pypi.python.org/pypi/twextpy/ <https://pypi.python.org/pypi/twextpy/> useful as this brings the state of the art forward somewhat.

https://twistedmatrix.com/trac/ticket/7917 <https://twistedmatrix.com/trac/ticket/7917> is a ticket to bring that stuff into Twisted itself; if you are interested in Twisted/Database interaction, perhaps you could help split up the code there into smaller branches that can be merged.

Thanks!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151112/0afe913a/attachment-0002.html>

From cory at lukasa.co.uk  Fri Nov 13 05:36:26 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 13 Nov 2015 12:36:26 +0000
Subject: [Twisted-Python] Streaming HTTP
Message-ID: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>

Folks,

# Problem Statement

Thanks for your feedback on my HTTP/2 questions. I’ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I’m aiming to have something that works in at least some cases by the end of the day.

As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ‘streaming’ request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?

This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).

Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.

Issue #6928 has glyph suggesting that we come to the mailing list to discuss this, but the last time it was raised no responses were received[2]. I believe that with HTTP/2 on the horizon, this issue is more acute than it was before, and needs solving if Twisted is going to continue to remain relevant for the web. It should also allow people to build more performant web applications, as they should be able to handle how the data queues up in their apps.

This does not immediately block my HTTP/2 work, so we can take some time and get this right.

# Proposed Solution

To help us move forward, I’m providing a proposal for how I’d solve this problem. This is not necessarily going to be the final approach, but is instead a straw-man we can use to form the basis of a discussion about what the correct fix should be.

My proposal is to deprecate the current Request/Resource model. It currently functions and should continue to function, but as of this point we should consider it a bad way to do things, and we should push people to move to a fully asynchronous model.

We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users. If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0), request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We’d also update requestReceived to ensure that it’s called when all the *headers* are received, rather than waiting for the body.

A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that’s a header users actually send, and if they don’t we chunk the data.

This logic would make it much easier to work with HTTP/2 *and* with WebSockets, requiring substantially less special-case code to handle the WebSocket upgrade (when the headers are complete, we can spot the upgrade easily).

What do people think of this approach?

Cory


[0]: https://twistedmatrix.com/trac/ticket/6928
[1]: https://twistedmatrix.com/trac/ticket/288
[2]: https://twistedmatrix.com/pipermail/twisted-python/2014-February/028069.html
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151113/f794d614/attachment.sig>

From zookog at gmail.com  Fri Nov 13 09:09:13 2015
From: zookog at gmail.com (Zooko Wilcox-O'Hearn)
Date: Fri, 13 Nov 2015 16:09:13 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <CANdZDc42WUTwuLB1w-oxwnp6P74FZSLfkKsrExwgUw57J9DMqA@mail.gmail.com>

> What do people think of this approach?

It sounds fine to me.

I think this issue in Twisted is currently the blocker (or at least
*one of* the blockers) for Tahoe-LAFS ticket #113, #320, and #1032. It
is also a blocker for the much more ambitious Tahoe-LAFS tickets #1288
and #1851.

Regards,

Zooko

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/113# command-line: do
things in an incremental fashion and accept stdin as input
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/320# add streaming
(on-line) upload to HTTP interface
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1032# Display active
HTTP upload operations on the status page

https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1288# support streaming
uploads in uploader
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/1851# new immutable file
upload protocol: streaming, fewer round-trips, quota-respecting



From mithrandi at mithrandi.net  Fri Nov 13 17:45:58 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 14 Nov 2015 00:45:58 +0000
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
Message-ID: <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>

On Thu, 12 Nov 2015 at 12:46 Cory Benfield <cory at lukasa.co.uk> wrote:

> However, this may not work: in particular, some of the other classes in
> twisted.web may know altogether too much about HTTP/1.X: in particular, if
> they have the nerve to write directly to a transport we’ve got a real
> problem with this approach, as HTTP/2 does not allow naked writes on its
> sockets (all data is framed).
>

I'd like to point out a few things on this topic:

1) The Twisted project has already experimentally demonstrated the
imprudence of an approach that massively breaks backwards compatibility
with old APIs (even if it does this in concordance with the compatibility
policy, by adding a bunch of new things): see the defunct twisted.web2
project.

Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
all you have to do is port all of your code and all of your libraries over
to these new APIs!", the response isn't going to be "great, I'll get right
on that!". It'll be "oh well, I guess I'll just throw an nginx reverse
proxy in front of my app to get HTTP/2 working" or "oh well, never mind
then".

A successful approach to introducing HTTP/2 into twisted.web needs to allow
for hooking up existing resources to an HTTP/2 (or actually, presumably
multiprotocol) server.

2) Having said that, it's not necessary for the HTTP/2 server to be
completely compatible with the current HTTP/1.x server in twisted.web. For
some things, this is just flat out impossible (I believe there are things
that HTTP/1.x allows, but HTTP/2 doesn't allow), and for other things it
just doesn't make sense (stealing the transport and writing stuff to it
yourself). However, we only need to support the common set of things that
people use in order to be usefully compatible; if you just have some
resources that aren't doing anything particularly crazy (like hijacking the
transport and writing directly to it, rather than via the request object),
you should be able to hook them up and have them work.

For anything that we *can't* support, it's okay for the HTTP/2 server to
just raise an exception or whatever; for anything that we can reasonably
support, but don't actually want to, it's okay to emit a deprecation
warning, and later an exception.

3) Having said *that*, there is widespread agreement that the existing APIs
(IResource, IRequest, etc.) have numerous deficiencies that should be
addressed. For example, the current interfaces don't allow for streaming
request handling, which obstructs implementing 100-continue support (among
other things).

We *do* need newer interfaces which hopefully improve on the new ones; I
don't really feel like I'm in a position to sketch out what these
interfaces should look like, but they should definitely take into account
the constraints of the HTTP/2 protocol, as well as the needs of application
code.

PS: I've used the pronoun "we" multiple times in this email for the sake of
rhetorical convenience, but please don't let this dissuade anyone from
voicing disagreement with any of the claims I've made should they appear
incorrect.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151114/5e0e3b12/attachment-0002.html>

From twisted-python at 2xlp.com  Fri Nov 13 19:07:42 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Fri, 13 Nov 2015 21:07:42 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>

Two notes:

1. Have you considered bitbucket?  I personally prefer github, but I know some python projects like it because of mercurial support.

2. There are a lot of projects for transitioning trac tickets to github/bitbucket via their api.  You can't transition some fields (reports, comments, etc) but they generally do a good job of migrating all the info.


From glyph at twistedmatrix.com  Fri Nov 13 19:29:53 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 13 Nov 2015 18:29:53 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
Message-ID: <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>


> On Nov 13, 2015, at 6:07 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> 
> Two notes:
> 
> 1. Have you considered bitbucket?  I personally prefer github, but I know some python projects like it because of mercurial support.

We wrote up a proposal for the fellowship at the beginning of this year, <https://twistedmatrix.com/trac/wiki/Fellowship2015>, which contained the fateful phrase, "GitHub switch (50%) The maintainer will develop a plan for migration of development to GitHub, and once it has been approved implement the plan.".

We then asked people for money based on this document.  So GitHub is more or less a done deal :-).

> 2. There are a lot of projects for transitioning trac tickets to github/bitbucket via their api.  You can't transition some fields (reports, comments, etc) but they generally do a good job of migrating all the info.

Please suggest specific projects with specific limitations so they can be discussed.  While I don't doubt you're right, we can all vaguely gesture in the direction of Google to little effect :-).

-glyph




From rodrigc at crodrigues.org  Sat Nov 14 02:39:05 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 14 Nov 2015 01:39:05 -0800
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
Message-ID: <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>

On Fri, Nov 13, 2015 at 6:29 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
>
> We then asked people for money based on this document.  So GitHub is more
> or less a done deal :-).
>
>
If the plan is GitHub and the project is fine with that, then cool.
If there is time, I would recommend that the project take a quick look
at gitlab.  I recently started using gitlab to contribute to this
project: https://gitlab.com/m2crypto/m2crypto

Everything I could do with GitHub (fork/pull request), I could do with
GitLab.
I found the UI slightly better than GitHub.
Also with GitLab, I found that Continuous Integration seems to be integrated
better than GitHub, such as for this merge request:

https://gitlab.com/rodrigc/m2crypto/commit/31140cf41b38676e4e96330678d75817d9857b97/ci

So the hosted version of GitLab is pretty cool.
I have also seen the free version of GitLab set up locally at a startup
in Silicon Valley, and the out of the box functionality for free is amazing,
and comparable to gitlab.com and GitHub.


I have experience with migrating a ticket database and wiki from
Trac -> Redmine for https://bugs.freenas.org, while the repository was on
GitHub, and migrating
the commit triggers so that commits on GitHub updated the ticket database
in Redmine.

There is no rocket science, but there are a lot of interconnected pieces,
which makes debugging interesting.  I can give advice to anyone who is
working on this.

In addition to doing SVN -> Git, is the Twisted project interested
in doing Trac -> GitHub for the tickets *and* wiki?

I have begun to realize that an integrated Git + Ticket + Wiki system
gives a big boost in productivity to a project in the long run.

It is possible to migrate in stages, i.e.
(1)  SVN -> Git
(2)  Trac tickets -> GitHub tickets
(3)  Trac wiki -> GitHub wiki

However, gluing all these pieces together can be a lot of work,
and it might be better just to do a "big bang" and migrate everything over
in one shot.

It all depends on what the project wants to do.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151114/762c05f6/attachment-0002.html>

From mithrandi at mithrandi.net  Sat Nov 14 20:29:38 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sun, 15 Nov 2015 03:29:38 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <CAMcKhMR37+Poe-=y4oXcUB8U8WSpacJDAQ_+WnkgVtGTfFa66Q@mail.gmail.com>

On Sat, 14 Nov 2015 at 17:45 Cory Benfield <cory at lukasa.co.uk> wrote:

> A similar approach should be taken with sending data: we should assume
> that users want to chunk it if they do not provide a content-length. An
> extreme position to take (and I do) is that this should be sufficiently
> easy that most users actually *accidentally* end up chunking their data:
> that is, we do not provide special helpers to set content-length, instead
> just checking whether that’s a header users actually send, and if they
> don’t we chunk the data.
>

As far as I know, this is exactly what is done in the existing HTTP/1.x
implementation: if a Content-Length header field is not set before data is
written to the request object (as it is called), chunked transfer encoding
is automatically used for the response. This behaviour is required by
HTTP/1.1.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151115/732521d0/attachment-0002.html>

From jml at mumak.net  Sun Nov 15 02:10:49 2015
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 15 Nov 2015 09:10:49 +0000
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
Message-ID: <CAHZ8tnaJ2B8KLfkfuTwjGWO7c1CVvaSzv2=UQCEEPfofzvQCmg@mail.gmail.com>

On Wed, 11 Nov 2015 at 22:41 Adi Roiban <adi at roiban.ro> wrote:

> Hi,
>
> So I am bringing this to the list for a greater audience and to reach
> all borders and timezones :)
>

Thanks!


> General rules by Glyph as they were sent to me :)
>
> Development can't stop, the website can't go down, and we can't lose
> any data. If you have a plan that migrates absolutely everything to
> github, including all of our issues to github issues, and all of our
> review queue stuff to github PRs, that is fine.
>
>
Glyph, would it be OK to have, say, a half-hour period where people
couldn't file tickets?

You cannot, however, just push everything to github and delete the
> ticket database and all the outstanding branches and just say "okay
> everybody file github issues now". There has to be clear communication
> about what a developer who shows up on any given day to work on a
> Twisted ticket should do.
>
> Current requirements from Glyph:
>
> - be able to accept PRs on github.com
> - host code primarily on github
> - make sure all the same committers still have access (at least active
> ones)
> - make sure the website doesn't go down
> - break as little functionality as possible (kenaan, highscores, etc)
>

I'd suggest making a list of such things.


> - communicate clearly to contributors what they have to do in order to

work on Twisted in every step of the process
>
>
This means email to this list, and updates to documentation both in the
code base and on the wiki.


> ------
>
> Also from Glyph
>
> there are lots of "nice to have" things like it would be nice to have
> people authenticate to twistedmatrix.com via github so we can get rid
> of our terrible auth database  and so they have one set of credentials
> for working
>
> It would be nice if we could automatically sync any relevant
> information between PRs and issues
>
> -----------
>
>
All of the above constitutes requirements and constraints rather than a
plan per se. I've found it useful to have such things written down
somewhere more solid (normally, a Google doc) so that when I think I'm done
I have something to check against.

Questions below are about the plan. I'm asking questions


> I would prefer to do baby steps and as a start just have the main repo
> in git hosted by github.com.
>
>
Fully agree w/ baby steps.

Could you provide some more details about what this means? Oh, I just
reread further down and see you'll be sending a more detailed plan through
later. Carry on.


> Using GitHub it will force us (for the better or for the worse) to
> rethink the infrastructure using web hooks... and for "modern" hosting
> platforms.
>

This sounds as if you're saying that some functionality will be broken
initially. I'm personally OK with that, but it would be good to get some
sense of which functionality.


> Once we have webhooks we should be able to migrate to any other
> provider... so it should be for the better
>
>
Quite right.


> Also, we need to migrate to GitHub as this was already agreed (one
> year ago) ... and if we re-start the conversation regarding the
> hosting platform, we are back on point 0 and still on SVN.
>
>
Amen.


> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
>
Ah, OK. This makes the comments about Github Auth make a lot more sense.


> -------------
>
> So... if you have anything to comment regarding the git / github.com
> migration please send your feedback.
>
>
Later we will announce the plan , break it into small task and start
> working on them.
>
>
Oh right. I look forward to this. May I suggest that one component of the
plan be a timeline of the migration, where at each stage we show both the
things done by the migrator and the experience of Twisted developers during
that time?


> Cheers
> Adi Roiban
>
>
Thanks Adi. Great to see this happening.

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151115/cfb681b8/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sun Nov 15 03:06:20 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 15 Nov 2015 11:06:20 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com> <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
Message-ID: <5648591C.4040200@tavendo.de>

>   Hi Tobias
>      Have you tried to test crossbar on windows? I heard that stdio

Yes, I have tried that;) Crossbar.io supports Windows!

> performs very bad on windows. I noticed crossbar use pipe to transfer
> data between process.

Only for control/management: that is traffic between the node controller 
process and the worker processes. Performance is irrelevant on that.

What's required for high-performance on Windows is the Twisted IOCP 
reactor. For Python 2 that works quite well. For Python 3 some bits are 
missing in Twisted (Hawkie is working on that). For shared sockets 
(which Crossbar.io uses for multi-core scaling), more work on the IOCP 
reactor would be needed.

Cheers,
/Tobias


> Regards
> gelin yan
>




From tobias.oberstein at tavendo.de  Sun Nov 15 03:18:14 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 15 Nov 2015 11:18:14 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <56485BE6.4070507@tavendo.de>

> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed.
 > Request objects (and, logically, any other object that handles 
requests/responses, such as Resource) should be extended to have a 
chunkReceived method
 > that can be overridden by users.

How does flow-control work with the Go API? How does user code 
processing chunks received unleash backpressure onto the sender?

Cheers,
/Tobias



From dynamicgl at gmail.com  Sun Nov 15 05:25:27 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 15 Nov 2015 20:25:27 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <5648591C.4040200@tavendo.de>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
Message-ID: <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>

2015年11月15日 下午6:09，"Tobias Oberstein" <tobias.oberstein at tavendo.de>写道：
>>
> What's required for high-performance on Windows is the Twisted IOCP
reactor. For Python 2 that works quite well. For Python 3 some bits are
missing in Twisted (Hawkie is working on that). For shared sockets (which
Crossbar.io uses for multi-core scaling), more work on the IOCP reactor
would be needed.

Hi tobias

    Are you sure IOCP is able to share sockets between process? It would be
great if you can share some info about this. I only use iocp with thread
pools. Due to GIL, well, use thread pools on python doesn't make any sense
for that.

regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151115/6cc3e8a3/attachment-0002.html>

From dynamicgl at gmail.com  Sun Nov 15 08:03:57 2015
From: dynamicgl at gmail.com (Gelin Yan)
Date: Sun, 15 Nov 2015 23:03:57 +0800
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com>
 <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
 <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
Message-ID: <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>

On Sun, Nov 15, 2015 at 8:25 PM, Gelin Yan <dynamicgl at gmail.com> wrote:

>
> 2015年11月15日 下午6:09，"Tobias Oberstein" <tobias.oberstein at tavendo.de>写道：
> >>
> > What's required for high-performance on Windows is the Twisted IOCP
> reactor. For Python 2 that works quite well. For Python 3 some bits are
> missing in Twisted (Hawkie is working on that). For shared sockets (which
> Crossbar.io uses for multi-core scaling), more work on the IOCP reactor
> would be needed.
>
> Hi tobias
>
>     Are you sure IOCP is able to share sockets between process? It would
> be great if you can share some info about this. I only use iocp with thread
> pools. Due to GIL, well, use thread pools on python doesn't make any sense
> for that.
>
> regards
>
> gelin yan
>

Hi
     Finally I found this link
https://msdn.microsoft.com/en-us/library/windows/desktop/ms740478(v=vs.85).aspx

    This feature is only available on windows 8.1 or later. It would be
great if twisted can support this feature.

Regards

gelin yan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151115/7b062129/attachment-0002.html>

From ngoonee.talk at gmail.com  Sun Nov 15 08:19:49 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Sun, 15 Nov 2015 23:19:49 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
Message-ID: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>

Based on my reading/searching, multiple reactors in the same process
(even in multiple threads) is pretty much a no-go because
twisted.internet.reactor is a global singleton.

I'm also unable to find any information about connecting to self (for
example, to send messages from one reactor to itself).

The situation I find myself in is that of message-passing between a
data-access component of a process (separate thread) and a GUI
component. In this case, something like blinker works fine. However I
want to replace blinker with twisted message-passing, because I want
the data-access component to be accessible by different GUI
components, either on the same machine or from a different machine. Or
from the same process (default behaviour).

If I'm able to somehow either run multiple reactors or
connect-to-self, then I only need to maintain one API (a twisted API)
for this communication, which would be identical between the
one-process, multi-process, and multi-machine case.

As an aside - I want to avoid restricting myself to a multi-process
implementation as that would mean I can't write for iOs (no
multi-processing allowed).



From itamar at itamarst.org  Sun Nov 15 10:54:41 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 15 Nov 2015 12:54:41 -0500
Subject: [Twisted-Python] Multiple reactors, connecting to self,
 or other solution?
In-Reply-To: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
Message-ID: <5648C6E1.3090000@itamarst.org>

On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
> Based on my reading/searching, multiple reactors in the same process
> (even in multiple threads) is pretty much a no-go because
> twisted.internet.reactor is a global singleton.
>
> I'm also unable to find any information about connecting to self (for
> example, to send messages from one reactor to itself).
>
>

You can just have a single reactor. E.g. if you do a listenTCP (e.g. on 
port 8080) on the reactor you can in the same process do a connectTCP to 
localhost in the same process on the same reactor; just connect to 
'127.0.0.1' or 'localhost' on port 8080.



From itamar at itamarst.org  Sun Nov 15 10:56:05 2015
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 15 Nov 2015 12:56:05 -0500
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
Message-ID: <5648C735.7060603@itamarst.org>

On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>
> 1) The Twisted project has already experimentally demonstrated the 
> imprudence of an approach that massively breaks backwards 
> compatibility with old APIs (even if it does this in concordance with 
> the compatibility policy, by adding a bunch of new things): see the 
> defunct twisted.web2 project.
>
> Realistically, if you say "hey people, twisted.web now has HTTP/2 
> support, all you have to do is port all of your code and all of your 
> libraries over to these new APIs!", the response isn't going to be 
> "great, I'll get right on that!". It'll be "oh well, I guess I'll just 
> throw an nginx reverse proxy in front of my app to get HTTP/2 working" 
> or "oh well, never mind then".
The counterpoint is that maybe if we'd deprecated twisted.web and told 
people they should port within a year to twisted.web2 everyone would've 
done it and we wouldn't be having this conversation :)




From ngoonee.talk at gmail.com  Sun Nov 15 19:05:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 16 Nov 2015 10:05:38 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <5648C6E1.3090000@itamarst.org>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
Message-ID: <CAGQ70evJcB+bXX0RuPV0jowU9JkFcTqR2+z4M4spBDqacTJ2VQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 1:54 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>
>> I'm also unable to find any information about connecting to self (for
>> example, to send messages from one reactor to itself).
>>
>>
>
> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port
> 8080) on the reactor you can in the same process do a connectTCP to
> localhost in the same process on the same reactor; just connect to
> '127.0.0.1' or 'localhost' on port 8080.

Thanks, I was quite sceptical about this but based on your advise I
tried it out and merging ampclient and ampserver does seem to have the
desired effect. Expanding on that, I guess I'll have two factories and
two protocols, one for each 'end', with listenTCP right at the start
and connectTCP run later on when my GUI is ready. Theoretically,
limiting communication to twisted only would mean the client would be
able to access a localhost server and a server on another machine in
exactly the same way.

Do I have to concern myself with race conditions though? Not very sure
how to write tests for those (or if it's even a problem given this is
single-process and single-thread). Basically, will there ever be a
case where my client sends a Command (I'm using amp.Command) and the
server doesn't get it because my overall process is blocked? I assume
there's some sort of timeout which controls that?



From ngoonee.talk at gmail.com  Sun Nov 15 19:07:17 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 16 Nov 2015 10:07:17 +0800
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <5648C735.7060603@itamarst.org>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
 <5648C735.7060603@itamarst.org>
Message-ID: <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>

On Mon, Nov 16, 2015 at 1:56 AM, Itamar Turner-Trauring
<itamar at itamarst.org> wrote:
> On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>>
>>
>> 1) The Twisted project has already experimentally demonstrated the
>> imprudence of an approach that massively breaks backwards compatibility with
>> old APIs (even if it does this in concordance with the compatibility policy,
>> by adding a bunch of new things): see the defunct twisted.web2 project.
>>
>> Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
>> all you have to do is port all of your code and all of your libraries over
>> to these new APIs!", the response isn't going to be "great, I'll get right
>> on that!". It'll be "oh well, I guess I'll just throw an nginx reverse proxy
>> in front of my app to get HTTP/2 working" or "oh well, never mind then".
>
> The counterpoint is that maybe if we'd deprecated twisted.web and told
> people they should port within a year to twisted.web2 everyone would've done
> it and we wouldn't be having this conversation :)

s/twisted.web{,2}/python{2,3}



From waterbug at pangalactic.us  Sun Nov 15 19:43:43 2015
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Sun, 15 Nov 2015 21:43:43 -0500
Subject: [Twisted-Python] HTTP/2 and Twisted
In-Reply-To: <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>
References: <824C65D5-E227-4801-BA70-5EC5347BDA17@lukasa.co.uk>
 <1CFA3296-EFC1-443C-B7EF-E322CE88C744@twistedmatrix.com>
 <19BE991E-99A4-4A16-9037-BC0245EB0569@lukasa.co.uk>
 <CAMcKhMTae3o+LV2pjSFUtJHpE1HGcGYDT=CrjfqatiDv97SvBw@mail.gmail.com>
 <5648C735.7060603@itamarst.org>
 <CAGQ70euBTebg9yek9NLX7rWEN_DNisQTFM5c7AYW0MhrEqZdyQ@mail.gmail.com>
Message-ID: <564942DF.5040606@pangalactic.us>

On 11/15/2015 09:07 PM, Oon-Ee Ng wrote:
> On Mon, Nov 16, 2015 at 1:56 AM, Itamar Turner-Trauring
> <itamar at itamarst.org> wrote:
>> On 11/13/2015 07:45 PM, Tristan Seligmann wrote:
>>>
>>>
>>> 1) The Twisted project has already experimentally demonstrated the
>>> imprudence of an approach that massively breaks backwards compatibility with
>>> old APIs (even if it does this in concordance with the compatibility policy,
>>> by adding a bunch of new things): see the defunct twisted.web2 project.
>>>
>>> Realistically, if you say "hey people, twisted.web now has HTTP/2 support,
>>> all you have to do is port all of your code and all of your libraries over
>>> to these new APIs!", the response isn't going to be "great, I'll get right
>>> on that!". It'll be "oh well, I guess I'll just throw an nginx reverse proxy
>>> in front of my app to get HTTP/2 working" or "oh well, never mind then".
>>
>> The counterpoint is that maybe if we'd deprecated twisted.web and told
>> people they should port within a year to twisted.web2 everyone would've done
>> it and we wouldn't be having this conversation :)
>
> s/twisted.web{,2}/python{2,3}

Not the same, and it would not have worked for many,
many reasons ... Guido knew better than to try that --
there would have been torches and pitchforks!  ;)

Steve



From msc at contact.de  Mon Nov 16 09:03:33 2015
From: msc at contact.de (Michael Schlenker)
Date: Mon, 16 Nov 2015 17:03:33 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <5649FE55.3030909@contact.de>

Hi,

sounds like a good idea.

One topic: What should happen if the sender sends malformed data (e.g.
content-length: 100 and sending 200 bytes body). I would usually want to
know if the sender is broken instead of getting a responseComplete()
that claims everything is fine.

We simply subclassed twisted.web.server.Request and injected the needed
parts so we could get the data we wanted in an incremental way and set
some socket options (SO_RCVBUF) for multi-gigabyte file uploads.

So we took 'gotLength()' as a signal that headers are fully received and
also took 'write()', 'processingFailed()' to handle cleanup.

Basically we replace the self.content stream object with our own version
that does not buffer everything in memory.

We tried to do the 100-Continue stuff too, but it simply didn't work
with the Python stdlib httplib code (it just ignores those more or
less). So we either just terminate the connection forcefully (reset) or
read the full request and send it to /dev/null.

Michael

-- 
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321



From ldanielburr at me.com  Mon Nov 16 09:25:38 2015
From: ldanielburr at me.com (Louis D. Burr)
Date: Mon, 16 Nov 2015 10:25:38 -0600
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <A84ADCF6-7BC2-4996-BBE5-ED345BEFFF0D@me.com>

Hi Cory,

> On Nov 13, 2015, at 6:36 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Folks,
> 
> # Problem Statement
> 
> Thanks for your feedback on my HTTP/2 questions. I’ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I’m aiming to have something that works in at least some cases by the end of the day.
> 
> As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ‘streaming’ request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?
> 
> This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).
> 
> Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.
> 

I think it is worth noting that some of these issues were solved by twisted.web2, to the point that there were even adapters created that handled some of the differences between the existing web resource model and the new model in web2.

Of course, web2 did not succeed in replacing web, due in part to concerns over the introduction of a new flow-control mechanism (IStream and company).  Today though, we have https://github.com/twisted/tubes, which is being developed outside of twisted proper, but could perhaps be leveraged to overcome some of the previous concerns about introducing a mechanism different from IProducer/IConsumer.

I mention this because I think there is work within the web2 codebase that might prove useful in solving some of the issues being discussed here, in a way that would benefit twisted, and its users.


Thanks for reading,

L. Daniel Burr



From tobias.oberstein at tavendo.de  Mon Nov 16 13:11:42 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 16 Nov 2015 21:11:42 +0100
Subject: [Twisted-Python] Twisted Web at 630k reqs/sec
In-Reply-To: <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>
References: <5642759F.5000603@tavendo.de>
 <22447A73-8ED3-4FD1-9DD2-4030349935A1@me.com> <564348BB.1070903@tavendo.de>
 <CABkOF6RK3yS3YxW_WBy76pqeSU1gbbCVjAgq1aKbVm7fX1+u+w@mail.gmail.com>
 <5648591C.4040200@tavendo.de>
 <CABkOF6SAT=AwyJ-t_e-+D1JL15zBjJa2-vRE_EJ20ywnRL78Vw@mail.gmail.com>
 <CABkOF6TQ6v3idBUpHsMzgQRCdF=kpW4aUsp5UaKJ88qk2uTNOg@mail.gmail.com>
Message-ID: <564A387E.7000200@tavendo.de>

>          Are you sure IOCP is able to share sockets between process? It
>     would be great if you can share some info about this. I only use

No, I am not sure. But this SO reply seems to suggest

http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t/14388707#14388707

But: there are actually 2 things required (which Linux does):

a) able to share sockets (without communicating a socket descriptor over 
some channel)
b) have the kernel load-balance incoming connections over all processes 
listening

E.g. FreeBSD does only a) currently, not b)

> https://msdn.microsoft.com/en-us/library/windows/desktop/ms740478(v=vs.85).aspx
>
>      This feature is only available on windows 8.1 or later. It would be
> great if twisted can support this feature.

Interesting! But that's not what Linux does, as it requires to 
communicate  WSAPROTOCOL_INFO over to other processes.

AND: it's not clear from the MS docs if the Win kernel will actually 
load-balance incoming connections.

Cheers,
/Tobias



From pawelmhm at gmail.com  Mon Nov 16 13:43:05 2015
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Mon, 16 Nov 2015 21:43:05 +0100
Subject: [Twisted-Python] Twisted Trac filters my messages as Spam when
	trying to update ticket #8102
Message-ID: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>

Hello,

I submitted some patches yesterday, got review from Adi and today I tried
to respond. However I'm not able to respond because all my submissions are
marked as spam and blocked by SpamBayes with super high probability. I
wonder how many other users experience that problem?

Can you please fix SpamBayes? I dont think there is anything in my messages
that warrants calling it spam.

Since I'm not able to update ticket in any way I'm going to post my message
here. It's about ticket https://twistedmatrix.com/trac/ticket/8102 my
response is following:


Thanks for review adiroiban!

> I assume that people will try to keep US-ASCII for their method names, so
we might want to reject even valind latin1 methods.

I agree with that part. All standard HTTP method names are ascii, so I dont
see much reason to support non-ascii HTTP methods. They were not supported
before this patch (they caused failures), if we fix that and allow latin1
we will allow characters that are outside ascii in method names, e.g. users
will be able to have non-standard latin1 method name: 'GET£'. In my opinion
it's better to only allow ascii and nothing else.

> For non US-ASCII or non latin1 encoding, I think that we should reject
the request much earlier. That is when we first parse the request line, and
not when we try to process the request

Yes I agree, so patch should go somewhere to
twisted.web.http.HTTPChannel.linereceived when we first get method (line
1709) right? Also is it ok we raise 501? With current patch we raise 501
Not Suppoted but maybe 400 Bad Request would be better here?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151116/21a0276f/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 16 17:44:01 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 16 Nov 2015 16:44:01 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <5649FE55.3030909@contact.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <5649FE55.3030909@contact.de>
Message-ID: <057493B1-38E1-4FA7-8BF4-761F6F0DAEA4@twistedmatrix.com>


> On Nov 16, 2015, at 8:03 AM, Michael Schlenker <msc at contact.de> wrote:
> 
> One topic: What should happen if the sender sends malformed data (e.g.
> content-length: 100 and sending 200 bytes body). I would usually want to
> know if the sender is broken instead of getting a responseComplete()
> that claims everything is fine.

This should definitely be an error.  While this isn't totally irrelevant to the design of the new server API - the implementation should surely take this kind of error-checking into account, and the old one didn't so well - it's a bit of a distraction since it's not an essential difference.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151116/df6be765/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 16 17:46:12 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 16 Nov 2015 16:46:12 -0800
Subject: [Twisted-Python] Twisted Trac filters my messages as Spam when
	trying to update ticket #8102
In-Reply-To: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>
References: <CAO38UCmuk+rygPEB0eqiF1nZe9zHpq1TOPSb_R9cDYve=6YFLg@mail.gmail.com>
Message-ID: <C348F1B2-CE54-4925-8E31-72319E1A288E@twistedmatrix.com>


> On Nov 16, 2015, at 12:43 PM, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> I submitted some patches yesterday, got review from Adi and today I tried to respond. However I'm not able to respond because all my submissions are marked as spam and blocked by SpamBayes with super high probability. I wonder how many other users experience that problem?
> 
> Can you please fix SpamBayes? I dont think there is anything in my messages that warrants calling it spam.

I have told the filter that your messages were not spam; apologies, but despite this occasional mishap, it's the best solution we've found so far.  Now that it's had some data from you to look at it shouldn't be a problem for you in the future.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151116/7da73236/attachment-0002.html>

From cory at lukasa.co.uk  Tue Nov 17 03:49:04 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Tue, 17 Nov 2015 10:49:04 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <56485BE6.4070507@tavendo.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
Message-ID: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>


> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?

One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ‘chunk handling’ function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we’re sufficiently careful about it.

Generally speaking in Twisted we could achieve this too, by careful use of Deferreds.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151117/57c19f18/attachment.sig>

From tom at t0mb.net  Tue Nov 17 09:56:40 2015
From: tom at t0mb.net (Tom Boland)
Date: Tue, 17 Nov 2015 16:56:40 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
Message-ID: <564B5C48.1000204@t0mb.net>

Greetings all.

This may be a very basic question.  I'm hoping to implement a postfix
policy check client in twisted.  It's a simple protocol.  You send
newline separated key value pairs like:

recipient=email at ddr.ess
sender=another at ddr.ess
size=1024
helo_name=mail.server
etc..

you terminate the request with an additional newline.  The response
comes back like

action=OK

You can send mutliple requests in the same connection.  What I'm
envisaging is a module that can be used to provide a deferred
request/response pairing to my calling application.  The module class
will manage the single connection to the postfix policy daemon (I'm
actually going to have persistent connections to a few daemons), and
reconnect when necessary etc.  Any requests will return a deferred that
I can add callbacks to.  How would you design this with twisted?  I can
easily envisage a way of using a clientfactory to instantiate separate
connections for each request/response, but actually being able to simply
send a request and receive the single response for that request is
something I'm struggling to do within a LineReceiver instance (for
instance).  Would the twisted.protocols.amp module help given that I
can't change the server-side protocol?

Any advice much appreciated!

Thanks.  Tom.



From adi at roiban.ro  Tue Nov 17 09:57:25 2015
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 17 Nov 2015 18:57:25 +0200
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
Message-ID: <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>

On 14 November 2015 at 11:39, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> On Fri, Nov 13, 2015 at 6:29 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>>
>>
>>
>> We then asked people for money based on this document.  So GitHub is more
>> or less a done deal :-).
>>
>
> If the plan is GitHub and the project is fine with that, then cool.
> If there is time, I would recommend that the project take a quick look
> at gitlab.  I recently started using gitlab to contribute to this
> project: https://gitlab.com/m2crypto/m2crypto
>
> Everything I could do with GitHub (fork/pull request), I could do with
> GitLab.
> I found the UI slightly better than GitHub.
> Also with GitLab, I found that Continuous Integration seems to be integrated
> better than GitHub, such as for this merge request:
>
> https://gitlab.com/rodrigc/m2crypto/commit/31140cf41b38676e4e96330678d75817d9857b97/ci

For now, the funds were raised to migrate to GitHub, so we can not use
them to do other things.

> I have experience with migrating a ticket database and wiki from
> Trac -> Redmine for https://bugs.freenas.org, while the repository was on
> GitHub, and migrating
> the commit triggers so that commits on GitHub updated the ticket database
> in Redmine.

We will stay on Trac for issues... at least for now.

I have no idea how we can migrate to any issue tracker without losing
data if we don't have full access to the database.

All cloud based API don't allow us to impersonate users, so we will
lose the author information.

This is one reason why I started this conversation.

If you know how we can migrate to GitHub issues or GitLab or any other
bug track system without losing data please let us know.

> In addition to doing SVN -> Git, is the Twisted project interested
> in doing Trac -> GitHub for the tickets *and* wiki?

[snip]
We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages

> It is possible to migrate in stages, i.e.
> (1)  SVN -> Git
> (2)  Trac tickets -> GitHub tickets
> (3)  Trac wiki -> GitHub wiki
>
> However, gluing all these pieces together can be a lot of work,
> and it might be better just to do a "big bang" and migrate everything over
> in one shot.

The requirement is to not disrupt the dev process and to not lose data/metadata.

GitHub issues are pretty basic and we have little control over
them.... so at least in the first phase we will not try to migrate to
GitHub issues.

We will just move to cloud based Git hosting as main repo ... and see
how we can migrate form a system based on shell-scripts hooks to
web-hooks.

I see it as a good thing, as it will leave the door open for GitLab or
other platforms.

-- 
Adi Roiban



From donald at stufft.io  Tue Nov 17 10:52:48 2015
From: donald at stufft.io (Donald Stufft)
Date: Tue, 17 Nov 2015 12:52:48 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
 <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
Message-ID: <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>


> On Nov 17, 2015, at 11:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> All cloud based API don't allow us to impersonate users, so we will
> lose the author information.
> 
> This is one reason why I started this conversation.
> 
> If you know how we can migrate to GitHub issues or GitLab or any other
> bug track system without losing data please let us know.

I don’t disagree with the decision to not move to GitHub issues, however
if you wanted to you could do what Golang did to minimize the data loss.
They emailed prior participants to their bug tracker to ask them to grant
their migration app an OAuth grant to post messages in their name. Anyone
who did got the correct user account associated with their messages, and
anyone who didn’t got the catch all golang migration bot.

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151117/69fc5e39/attachment.sig>

From glyph at twistedmatrix.com  Tue Nov 17 15:08:54 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 17 Nov 2015 14:08:54 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
Message-ID: <75B2FAEA-1E48-426A-9E6B-A071FFA61D37@twistedmatrix.com>


> On Nov 17, 2015, at 2:49 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Generally speaking in Twisted we could achieve this too, by careful use of Deferreds.

I have a bigger reply coming; however, I should note that this is basically what web2 did with its IStream interface.  While this has a big advantage over the status quo (i.e. "not solving the problem") the _way_ it solved the problem ended up being both (A) error prone, and (B) slow.  It's the sort of slowness that PyPy doesn't even help mitigate, because all the callbacks are heap-allocated, and... to be honest I don't even fully understand it, but I have experimentally verified that it's still pretty slow :-).

This is more or less the reason that Tubes exists, although more on how we might proceed either with or without tube in another message...

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151117/565bcda4/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Nov 17 16:17:18 2015
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 18 Nov 2015 00:17:18 +0100
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
Message-ID: <564BB57E.6030601@tavendo.de>

Am 17.11.2015 um 11:49 schrieb Cory Benfield:
>
>> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
>>
>> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?
>
> One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ‘chunk handling’ function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we’re sufficiently careful about it.

Thing is, HTTP2 multiplexes multiple streams over 1 TCP, and each stream 
should be flow-controlled individually - and hence can't rely on TCP 
backpressure for that.

/Tobias



From rodrigc at crodrigues.org  Tue Nov 17 16:48:09 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Tue, 17 Nov 2015 15:48:09 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
Message-ID: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>

On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:

>
> For now, the funds were raised to migrate to GitHub, so we can not use
> them to do other things.
>
> We will stay on Trac for issues... at least for now.
>
> I have no idea how we can migrate to any issue tracker without losing
> data if we don't have full access to the database.
>

It is possible to migrate to another issue tracker and not lose
data.  I've done Trac -> Redmine, and it works, but there was an existing
migration
script I could use.
For migrating to a cloud based bug tracker, you would need to take every
user
in the existing Trac database, and see if there would be a way to map
the existing users to the cloud database, such as GitHub.  It's a lot of
work, but possible.
However, for the scope of this project, if staying with Trac for issues is
what is required, that is fine.


> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
>
>
OK.

So based on what you have listed, I would say that most of the work will be
working with Git post commit hooks.

I would say the plan should be something like this.

A.1  https://github.com/twisted/twisted will be the "repository of truth"
       for Twisted.
           -> Twisted releases will be done from GitHub
           -> the Twisted developers who are now "core committers" for SVN,
must be
               given access to be "core committers" to
https://github.com/twisted/twisted

A.2  On the Trac server, a local git mirror of the GitHub must be set up.
       Every bug tracker I've seen that integrates with git needs a local
mirror of the repo
        in order to parse the git history in order to update the bug
database.
        This mirror should be read-only, and the only thing updating this
repo should be the Trac GitHub plugin.

A.3  On the Trac server, this plugin must be installed:
https://github.com/trac-hacks/trac-github

A.4  On the GitHub server, a post-commit web hook must be configured.  The
workflow will be this:

           [core committer does push to https://github.com/twisted/twisted]

             -> [post commit GitHub hook will be called to poke the Trac
GitHub plugin]
             -> [Trac GitHub plugin will update the local git repo on the
Trac server]
             -> [Trac GitHub will parse the git history for new commits and
update tickets]

I would recommend that steps (1) - (4) be made to work in a staging
environment, with a separate
GitHub repo, and a separate copy of the Trac database.  That way, you can
test things out without derailing
Twisted developers.  When you are confident that this workflow works, then
the transition plan will be something
like the following.

B.1   Send an e-mail to the mailing list and pick one day for the
maintenance window.
        This will warn folks when they should take a holiday from Twisted
work. :)

B.2   When maintenance is about to begin, send a [HEADSUP] mail saying that
repo will be unavailable.

B.3  Create Subversion pre-commit hook to disable all commits to
         Subversion:

http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only

B.4  Set up steps A.1 - A.4

B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to
https://github.com/twisted/twisted, and
         make sure that Trac works.

B.6  Once the Twisted core team are satisified that everything works, send
an e-mail to the mailing list
        that the maintenance window is over, and GitHub is now where the
action is!

B.7  Update all wiki documentation to change all references to getting code
from Subversion,
         to getting code from GitHub.

B.8  Update all systems which used Subversion to use GitHub.  For example,
buildbots.

--
Craig


--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151117/a5b717dc/attachment-0002.html>

From ex.vitorino at gmail.com  Tue Nov 17 19:14:22 2015
From: ex.vitorino at gmail.com (Ex Vito)
Date: Wed, 18 Nov 2015 02:14:22 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564B5C48.1000204@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
Message-ID: <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>

Tom,

I guess LineReceiver can help you with that, it's a matter of using a
different delimiter. Here is a rough sketch of something you can start
exploring:

from __future__ import print_function

from twisted.internet import reactor, protocol, endpoints, defer
from twisted.protocols import basic


class PostfixProtocol(basic.LineReceiver):

    # Assuming Postfix sends '\r\n' line breaks (does it?)
    delimiter = '\r\n\r\n'

    def lineReceived(self, multi_line):
        input_dict = {
            k: v for k, v in (
                line.split('=') for line in multi_line.split('\r\n')
            )
        }
        self.gotPostfixRequest(input_dict)

    def gotPostfixRequest(self, request_dict):
        # Silly deferred-based implementation.
        d = defer.Deferred()
        d.addCallback(self.sendPostfixAction)
        # Simulate a deferred being fired with success.
        reactor.callLater(1, d.callback, 'OK')

    def sendPostfixAction(self, response):
        # NOTE: Sends self.delimiter after the payload.
        #       Use self.tranport.write if you don't want it.
        self.sendLine('action={}'.format(response))


if __name__ == '__main__':

    ep = endpoints.serverFromString(reactor, 'tcp:10000')
    f = protocol.Factory()
    f.protocol = PostfixProtocol
    ep.listen(f)
    reactor.run()

Key ideas:
- PostfixProtocol overrides LineReceiver's delimiter (setting it to
'\r\n\r\n')
- lineReceived parses the muti_line and calls gotPostfixRequest.
- gotPostfixRequest should decide (or delegate, you choice) what kind of
response to send back.
- sendPostfixAction sends a response back to Postfix.

Notes:
- The multi_line parsing code is short(ish) but not very robust. It may
fail in bad ways with invalid input.
- The gotPostfixRequest implementation is written for the sake of a
deferred-based example.

Does this help you in any way?
Cheers,
--
exvito


On Tue, Nov 17, 2015 at 4:56 PM, Tom Boland <tom at t0mb.net> wrote:
> Greetings all.
>
> This may be a very basic question.  I'm hoping to implement a postfix
> policy check client in twisted.  It's a simple protocol.  You send
> newline separated key value pairs like:
>
> recipient=email at ddr.ess
> sender=another at ddr.ess
> size=1024
> helo_name=mail.server
> etc..
>
> you terminate the request with an additional newline.  The response
> comes back like
>
> action=OK
>
> You can send mutliple requests in the same connection.  What I'm
> envisaging is a module that can be used to provide a deferred
> request/response pairing to my calling application.  The module class
> will manage the single connection to the postfix policy daemon (I'm
> actually going to have persistent connections to a few daemons), and
> reconnect when necessary etc.  Any requests will return a deferred that
> I can add callbacks to.  How would you design this with twisted?  I can
> easily envisage a way of using a clientfactory to instantiate separate
> connections for each request/response, but actually being able to simply
> send a request and receive the single response for that request is
> something I'm struggling to do within a LineReceiver instance (for
> instance).  Would the twisted.protocols.amp module help given that I
> can't change the server-side protocol?
>
> Any advice much appreciated!
>
> Thanks.  Tom.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
--
  exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/66efa429/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Nov 17 22:55:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 17 Nov 2015 21:55:16 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <564BB57E.6030601@tavendo.de>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
Message-ID: <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>


> On Nov 17, 2015, at 3:17 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
> 
> Am 17.11.2015 um 11:49 schrieb Cory Benfield:
>> 
>>> On 15 Nov 2015, at 10:18, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
>>> 
>>> How does flow-control work with the Go API? How does user code processing chunks received unleash backpressure onto the sender?
>> 
>> One caveat: I am not an expert in what Go is doing here, more a casual user. However, my understanding is that Go code blocks will not handle chunks in parallel, or provide a new chunk until the previous one has been processed (essentially, the ‘chunk handling’ function is processed synchronously, once for each chunk), which means that it does not read more data from the socket. This exerts TCP level back pressure, and can be adjusted to exert HTTP/2 back-pressure if we’re sufficiently careful about it.
> 
> Thing is, HTTP2 multiplexes multiple streams over 1 TCP, and each stream should be flow-controlled individually - and hence can't rely on TCP backpressure for that.

Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though…

-g




From glyph at twistedmatrix.com  Wed Nov 18 01:55:42 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 00:55:42 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <5648C6E1.3090000@itamarst.org>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
Message-ID: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>


> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> 
> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>> Based on my reading/searching, multiple reactors in the same process
>> (even in multiple threads) is pretty much a no-go because
>> twisted.internet.reactor is a global singleton.
>> 
>> I'm also unable to find any information about connecting to self (for
>> example, to send messages from one reactor to itself).
>> 
>> 
> 
> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.

But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)

-glyph




From pantelis at blackcow-technology.co.uk  Wed Nov 18 02:21:03 2015
From: pantelis at blackcow-technology.co.uk (Pantelis Theodosiou)
Date: Wed, 18 Nov 2015 09:21:03 +0000
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
Message-ID: <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>

On Wed, Nov 18, 2015 at 8:55 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
> >
> > On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
> >> Based on my reading/searching, multiple reactors in the same process
> >> (even in multiple threads) is pretty much a no-go because
> >> twisted.internet.reactor is a global singleton.
> >>
> >> I'm also unable to find any information about connecting to self (for
> >> example, to send messages from one reactor to itself).
> >>
> >>
> >
> > You can just have a single reactor. E.g. if you do a listenTCP (e.g. on
> port 8080) on the reactor you can in the same process do a connectTCP to
> localhost in the same process on the same reactor; just connect to
> '127.0.0.1' or 'localhost' on port 8080.
>
> But of course you'd use <
> https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>,
> not 'listenTCP' and 'connectTCP' directly, right? :)


> -glyph
>
>
Glyph, the linked page:
https://twistedmatrix.com/documents/15.4.0/core/howto/servers.html has
endpoints example but the "Putting it All Together" still uses:

reactor.listenTCP(8123, ChatFactory())


Wouldn't it be better if that was replaced, too? Or maybe both versions be
visible on the same webpage? (one with listenTCP and one with endpoints)?

Pantelis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/452d1689/attachment-0002.html>

From tom at t0mb.net  Wed Nov 18 02:28:57 2015
From: tom at t0mb.net (Tom Boland)
Date: Wed, 18 Nov 2015 09:28:57 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
Message-ID: <564C44D9.3050001@t0mb.net>

Hi Exvito,

Thanks very much for this. I think I might just give a bit of context
about using this.

I have an SMTP proxy using Nginx.  It uses queries an HTTP service to
establish whether mail should be forwarded, and where to (on to
postfix/dovecot/exchange backends).  It uses Twisted for the HTTP
authorisation service, and I've been using a similar model for years for
POP and IMAP in production, and for the last year on an outbound SMTP
relay.  The Twisted http service handles password authentication as well
lookups that point connections on to the correct backend servers.  All
of our custom business logic is in the python (database lookups and the
like).  Twisted has performed brilliantly as the HTTP service for years.

I'm now writing an inbound SMTP proxy service, and initially, it just
does DNSBL checks, which will actually stop around 12 million emails a
day from reaching postfix and tying up smtpd processes!  I fire off a
number of DNSBL checks in a deferred chain, and just come back to it
once the chain has completed.  The postfix policy check was going to be
added to this chain of events and initially I was going to use it to
query the dovecot quota daemon running on the appropriate backend for a
given mailbox, therefore I'd have a few tens of connections open, one to
each of the policy daemons on the dovecot backend servers.  This is just
to avoid queuing and trying to deliver mail to a mailbox that's over-quota.

I think what you've provided me with is useful for me, but I think it's
backwards for my purposes, as I need to be connecting to the policy
daemon rather than being the policy daemon!

I wanted to do this with deferred calls in case one of the policy
daemons becomes unreachable and blocks my application.  Do you think I
should do something differently in that regard?  My SQL lookups are done
synchronously.  If the database server goes away, I've got bigger
problems anyway!

Many thanks for your help.  I'll work a bit on this this morning and
come back!

Thanks again.  Tom.



On 18/11/15 02:14, Ex Vito wrote:
> Tom,
>
> I guess LineReceiver can help you with that, it's a matter of using a
> different delimiter. Here is a rough sketch of something you can start
> exploring:
>
> from __future__ import print_function
>
> from twisted.internet import reactor, protocol, endpoints, defer
> from twisted.protocols import basic
>
>
> class PostfixProtocol(basic.LineReceiver):
>
>     # Assuming Postfix sends '\r\n' line breaks (does it?)
>     delimiter = '\r\n\r\n'
>
>     def lineReceived(self, multi_line):
>         input_dict = {
>             k: v for k, v in (
>                 line.split('=') for line in multi_line.split('\r\n')
>             )
>         }
>         self.gotPostfixRequest(input_dict)
>
>     def gotPostfixRequest(self, request_dict):
>         # Silly deferred-based implementation.
>         d = defer.Deferred()
>         d.addCallback(self.sendPostfixAction)
>         # Simulate a deferred being fired with success.
>         reactor.callLater(1, d.callback, 'OK')
>
>     def sendPostfixAction(self, response):
>         # NOTE: Sends self.delimiter after the payload.
>         #       Use self.tranport.write if you don't want it.
>         self.sendLine('action={}'.format(response))
>
>
> if __name__ == '__main__':
>
>     ep = endpoints.serverFromString(reactor, 'tcp:10000')
>     f = protocol.Factory()
>     f.protocol = PostfixProtocol
>     ep.listen(f)
>     reactor.run()
>
> Key ideas:
> - PostfixProtocol overrides LineReceiver's delimiter (setting it to
> '\r\n\r\n')
> - lineReceived parses the muti_line and calls gotPostfixRequest.
> - gotPostfixRequest should decide (or delegate, you choice) what kind
> of response to send back.
> - sendPostfixAction sends a response back to Postfix.
>
> Notes:
> - The multi_line parsing code is short(ish) but not very robust. It
> may fail in bad ways with invalid input.
> - The gotPostfixRequest implementation is written for the sake of a
> deferred-based example.
>
> Does this help you in any way?
> Cheers,
> --
> exvito
>
>
> On Tue, Nov 17, 2015 at 4:56 PM, Tom Boland <tom at t0mb.net
> <mailto:tom at t0mb.net>> wrote:
> > Greetings all.
> >
> > This may be a very basic question.  I'm hoping to implement a postfix
> > policy check client in twisted.  It's a simple protocol.  You send
> > newline separated key value pairs like:
> >
> > recipient=email at ddr.ess
> > sender=another at ddr.ess
> > size=1024
> > helo_name=mail.server
> > etc..
> >
> > you terminate the request with an additional newline.  The response
> > comes back like
> >
> > action=OK
> >
> > You can send mutliple requests in the same connection.  What I'm
> > envisaging is a module that can be used to provide a deferred
> > request/response pairing to my calling application.  The module class
> > will manage the single connection to the postfix policy daemon (I'm
> > actually going to have persistent connections to a few daemons), and
> > reconnect when necessary etc.  Any requests will return a deferred that
> > I can add callbacks to.  How would you design this with twisted?  I can
> > easily envisage a way of using a clientfactory to instantiate separate
> > connections for each request/response, but actually being able to simply
> > send a request and receive the single response for that request is
> > something I'm struggling to do within a LineReceiver instance (for
> > instance).  Would the twisted.protocols.amp module help given that I
> > can't change the server-side protocol?
> >
> > Any advice much appreciated!
> >
> > Thanks.  Tom.
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> <mailto:Twisted-Python at twistedmatrix.com>
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> -- 
> --
>   exvito
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/9211d411/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Nov 18 02:43:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 01:43:21 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAE3TBxzLF-7cXnrO4E+d7b8i1WEd6pQfRN18P1ywLqX+RCjMxw@mail.gmail.com>
Message-ID: <B857822A-CD9E-436B-B642-7915349AAB78@twistedmatrix.com>


> On Nov 18, 2015, at 1:21 AM, Pantelis Theodosiou <pantelis at blackcow-technology.co.uk> wrote:
> 
> Wouldn't it be better if that was replaced, too? Or maybe both versions be visible on the same webpage? (one with listenTCP and one with endpoints)?

Absolutely!  In this high-level explanation of how to write a server, really only the endpoints example should be shown.  Would you mind filing a ticket (and perhaps also sending a patch? :))

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/be9296cd/attachment-0002.html>

From cory at lukasa.co.uk  Wed Nov 18 03:28:44 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 18 Nov 2015 10:28:44 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
Message-ID: <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>


> On 18 Nov 2015, at 05:55, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though…

Not in such a binary form, no. The connection as a whole and each stream maintain independent flow control windows. This allows for pressure to be exerted on the sender to slow down, by allowing the flow control window to drop to zero. This means that there is some Twisted-level buffering, because we do have to get that data out of the socket and to queue at the application, but the amount of data to buffer is strictly bounded. Thus, if our application moves slowly, the remote side should be passively notified to slow down by the lack of window updates: we should only send those window updates once the application has actually taken some data from us.

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151118/19b3bbef/attachment.sig>

From hawkowl at atleastfornow.net  Wed Nov 18 03:58:19 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 18 Nov 2015 18:58:19 +0800
Subject: [Twisted-Python] Twisted 15.5 Prerelease 1 Announcement
Message-ID: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>

Hello everyone!

Hot off the presses comes Twisted 15.5.0pre1, the prerelease of Twisted 15.5, which has been described by some as "totally radical" and "off the wall".

In this release:

- Python 3.5 support on POSIX was added, and Python 2.6 support was dropped.
- More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
- twistd is ported to Python 3, and its first plugin, web, is ported.
- twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
- NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
- Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
- Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
- 55+ closed tickets overall.

As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/15.5.0pre1/) to get the prerelease tarballs and the full NEWS file.

Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)

Thanks! <3

Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151118/ae074c01/attachment.sig>

From glyph at twistedmatrix.com  Wed Nov 18 04:29:54 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 03:29:54 -0800
Subject: [Twisted-Python] Twisted 15.5 Prerelease 1 Announcement
In-Reply-To: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>
References: <0A3BDE9D-275F-4679-A607-C1DF35C62B89@atleastfornow.net>
Message-ID: <013929B7-E821-4ED6-BA6C-115D17FCDABE@twistedmatrix.com>


> On Nov 18, 2015, at 2:58 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hello everyone!
> 
> Hot off the presses comes Twisted 15.5.0pre1, the prerelease of Twisted 15.5, which has been described by some as "totally radical" and "off the wall".
> 
> In this release:
> 
> - Python 3.5 support on POSIX was added, and Python 2.6 support was dropped.
> - More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
> - twistd is ported to Python 3, and its first plugin, web, is ported.
> - twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
> - NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
> - Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
> - Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
> - 55+ closed tickets overall.
> 
> As usual, it's available for download -- go here (https://twistedmatrix.com/Releases/pre/15.5.0pre1/) to get the prerelease tarballs and the full NEWS file.
> 
> Please let me know if you have any issues, as well as if you don't! If everything works well, that's a good thing for me to know :)
> 
> Thanks! <3
> 
> Amber Brown
> Twisted Release Manager

Fantastic job yet again - 2015 has seen some very exciting milestones and a record number of releases.  Thanks, Amber, for making that happen!

-glyph





From glyph at twistedmatrix.com  Wed Nov 18 05:18:13 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 04:18:13 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>


> On Nov 13, 2015, at 4:36 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> Folks,
> 
> # Problem Statement
> 
> Thanks for your feedback on my HTTP/2 questions. I’ve started work implementing a spike of a HTTP/2 protocol for twisted.web. I’m aiming to have something that works in at least some cases by the end of the day.

Hooray!

> As part of my dive into twisted.web, I noticed something that surprised me: it seems to have no support for ‘streaming’ request bodies. By this I mean that the Request.requestReceived() method is not actually called until the complete request body has been received. This is a somewhat unexpected limitation for Twisted: why should I have to wait until the entire body has been uploaded to start doing things with it?

This is exactly what <https://twistedmatrix.com/trac/ticket/288> is about (as you note).

> This problem is thrown into sharp relief with HTTP/2, which essentially always chunks the body, even if a content-length is provided. This means that it is now very easy to receive data in delimited chunks, which an implementation may want to have semantic meaning. However, the request is unable to access this data in this way. It also makes it impossible to use a HTTP/2 request/response pair as a long-running communication channel, as we cannot safely call requestReceived until the response is terminated (which also terminates the HTTP/2 stream).
> 
> Adi pointed me at a related issue, #6928[0], which itself points at what appears to be an issue tracking exactly this request. That issue is issue #288[1], which is 12 years old(!). This has clearly been a pain point for quite some time.
> 
> Issue #6928 has glyph suggesting that we come to the mailing list to discuss this, but the last time it was raised no responses were received[2]. I believe that with HTTP/2 on the horizon, this issue is more acute than it was before, and needs solving if Twisted is going to continue to remain relevant for the web. It should also allow people to build more performant web applications, as they should be able to handle how the data queues up in their apps.
> 
> This does not immediately block my HTTP/2 work, so we can take some time and get this right.

I'm very glad to hear you say this, because:

(A) we should absolutely make progress on this ticket now that there is some impetus to do so, but,
(B) we should absolutely NOT let this new API block any purely protocol-level HTTP2 work that needs to proceed (I say "protocol level" as a contrast to "feature level" because we could totally implement a thing that speaks HTTP 2 against the current API, although it might be awkward to expose the advantageous parts of the protocol as API features until we do some cleanup)

> # Proposed Solution
> 
> To help us move forward, I’m providing a proposal for how I’d solve this problem. This is not necessarily going to be the final approach, but is instead a straw-man we can use to form the basis of a discussion about what the correct fix should be.
> 
> My proposal is to deprecate the current Request/Resource model. It currently functions and should continue to function, but as of this point we should consider it a bad way to do things, and we should push people to move to a fully asynchronous model.

We have considered it a bad way to do things for a long time.  There have been several attempts to rewrite it (Nevow's request model, web2) but none of them have really been the comprehensive re-design we need.

> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users.

No.

Let me elaborate :-).

First of all, this is already the case (sort of).

twisted.web.server.Request inherits from twisted.web.http.Request; as you can see in http.Request, there is already a method called handleContentChunk, which is called by HTTPChannel. By overriding this method, you can already handle request data streaming in from off the wire.  This is one of the reasons that #288 is so interminable: using Twisted's public API, today, you can totally write an HTTP-based application that happily streams data from the wire.  The only problem is that this API does not propagate up to Resource objects, because Resource objects can expect the (still, as of this writing, undocumented) "content" attribute to have been filled out in getChild.  Mostly, they don't, actually!  But it's impossible to tell if they might in the general case.

You can (and many applications have) just broken the technical compatibility contract with Resource, and written a subclass of twisted.web.server.Site that has a custom requestFactory method that returns a 'streamed' resource.

So, if we're already doing this, why "no"?

Superclasses with overridable methods are a terrible mechanism for exposing extensibility.  These are used extensively throughout Twisted, the older the API the more inheritance it uses.  Newer code, you may notice, is generally written much more in a pattern of delegation to formal interfaces.  So we have tried to learn our lesson here.

> If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0),

For what it's worth, I hope that all of these will be exposed as the same event to applications, since the fact that these differ on the wire is entirely an implementation detail?

> request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We’d also update requestReceived to ensure that it’s called when all the *headers* are received, rather than waiting for the body.

Again, this is very similar to what already happens, at the layer of the HTTP protocol.  The question is, how do you indicate that you're delegating to a Resource object which may expect the .content attribute to already be populated during .getChild?

> A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that’s a header users actually send, and if they don’t we chunk the data.

request.write() already basically does this, I think?  Here, at least, we have lots of opportunity to make the implementation do smarter things (better error checking regarding content-length, for example) without changing the interface at all.

> This logic would make it much easier to work with HTTP/2 *and* with WebSockets, requiring substantially less special-case code to handle the WebSocket upgrade (when the headers are complete, we can spot the upgrade easily).
> 
> What do people think of this approach?

So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.

I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).

Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.

This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.

This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.

Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.

Then the question is: what to do with IResource?

Right now the flow of processing a request is, roughly:

-> wait for full request to arrive
  -> have HTTPChannel fill out IRequest object
-> look at request.site.resource for the root
 *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
  -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
*-> call resource.render(request)
-> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open, 

Instead, I think a good flow would be:

-> receive method/headers from request
-> recurse down from request.site.resource, calling something like nevow's or web2's locateChild, but not modifying 'request' at each stage; instead, pass a "cursor" object - perhaps indeed just a twisted.python.url.URL - indicating where we are in the resource traversal hierarchy.  the reason the request.prepath and request.postpath attributes exist is mainly for Resource objects to be able to orient themselves within a resource tree and generate links.

also, it probably bears some explanation; the signature of the current "get the next resource" call is resource.getChildWithDefault(onePathSegment, request) -> resource. This is somewhat limiting as it requires you to consume only an individual path segment at a time, which can be highly awkward for implementing sites that have a URL structure that is, for example, /YYYY/MM/DD/HH/MM/index.html.  

Instead, locateChild took the entire remaining path, and returned a 2-tuple of a resource, and the _still_ remaining path.  So for the above, you could do:

def locateChild(self, request, path):
    y, m, d = path[:3]
    return ymdresource(y, m, d), path[3:]

that 2-tuple instructs the traversal machinery, "keep going".  One alternative that we toyed with for this was to make consuming the path destructive, since that made it a lot easier to tell what resource you were "looking at":

def locateChild(self, request, path):
    y, m, d = path.consume(3)
    return ymdresource(y, m, d)

Either of these approaches also let you implement 'isLeaf' attribute without special support from the framework; you simply return leaf(), () or path.consume(path.length)

-> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.

The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.

This is long and increasingly rambly, so I should probably stop now, send it, and get your feedback.  Does the strategy I'm proposing make sense?  I'm sure I'm leaving a ton out so feel free to ask for clarification.  Hopefully I didn't leave too many incomplete sentences in the middle.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/b361c1b5/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Nov 18 05:30:05 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 18 Nov 2015 04:30:05 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
 <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
Message-ID: <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>


> On Nov 18, 2015, at 2:28 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 18 Nov 2015, at 05:55, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> Does HTTP2 have choke/unchoke notifications on individual streams?  Ultimately this does resolve to TCP backpressure, though…
> 
> Not in such a binary form, no. The connection as a whole and each stream maintain independent flow control windows. This allows for pressure to be exerted on the sender to slow down, by allowing the flow control window to drop to zero. This means that there is some Twisted-level buffering, because we do have to get that data out of the socket and to queue at the application, but the amount of data to buffer is strictly bounded. Thus, if our application moves slowly, the remote side should be passively notified to slow down by the lack of window updates: we should only send those window updates once the application has actually taken some data from us.

So the receiver sends explicit "unchoke" messages to increase the window, and the "choke" message is implicit?

-glyph


From cory at lukasa.co.uk  Wed Nov 18 07:33:26 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 18 Nov 2015 14:33:26 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <56485BE6.4070507@tavendo.de>
 <B35C245E-3836-4DCE-94AA-59CCE6662257@lukasa.co.uk>
 <564BB57E.6030601@tavendo.de>
 <C8881FCD-9DBD-41C1-BC3E-51F9C1E30EAE@twistedmatrix.com>
 <C78011C2-E42E-42D5-A035-DBCCB3CBC4B2@lukasa.co.uk>
 <A2778655-CB8A-4C22-B7E5-C61E49DCE9F1@twistedmatrix.com>
Message-ID: <A0E79B84-EFA8-4D16-BB50-B669E024FBFA@lukasa.co.uk>


> On 18 Nov 2015, at 12:30, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> So the receiver sends explicit "unchoke" messages to increase the window, and the "choke" message is implicit?

Modulo some irrelevant distinctions, yes.

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151118/b4679880/attachment.sig>

From twisted-python at 2xlp.com  Wed Nov 18 12:19:52 2015
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 18 Nov 2015 14:19:52 -0500
Subject: [Twisted-Python] Migration to Git / GitHub
In-Reply-To: <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>
References: <CAFycZ9egeODD93k5ogQcxAj-GmJXrUULA-jooXFs+7jf9AXuWQ@mail.gmail.com>
 <0FB0FCE6-335A-4C76-8672-B1B3FDA9A91B@2xlp.com>
 <F102D25B-31EE-491B-8CF9-758742E4CA27@twistedmatrix.com>
 <CAG=rPVfpJsjgFsJoP0Nwt2CFp5fdXUe=9RajjXOorLx+eJsQ=g@mail.gmail.com>
 <CAFycZ9dT=JOb8qZAw4nyB6no=OPorhW4D1V8EnK-sAcDLfQsJA@mail.gmail.com>
 <FC079B4D-BA6A-4606-9430-766FB032E5DB@stufft.io>
Message-ID: <D473120A-254D-4DD8-9C01-EFA0E991466C@2xlp.com>


On Nov 17, 2015, at 12:52 PM, Donald Stufft wrote:

> I don’t disagree with the decision to not move to GitHub issues, however
> if you wanted to you could do what Golang did to minimize the data loss.
> They emailed prior participants to their bug tracker to ask them to grant
> their migration app an OAuth grant to post messages in their name. Anyone
> who did got the correct user account associated with their messages, and
> anyone who didn’t got the catch all golang migration bot.

That's a great partial solution.

On top of that I would suggest the following:

	Put the trac into read-only mode.
	Use the API to generate a "github wiki page" for each "trac user".
	When importing, create a "template" for migrated issues that cross-references to the original ticket and the wiki.  Something like this:
		** Migrated Issue **
		Original Trac Ticket (read-only): {{trac url}}
		AutoGenerated Author Wiki: {{github wiki url}}

		Original Body:
		{{body contents}}

		Original Comments (if any):

		{{format comments and link to the github wiki url}}

GitHub's wiki doesn't have normal API access.  It's actually just a 'secret' git  [https://help.github.com/articles/adding-and-editing-wiki-pages-locally/]

So you won't necessarily "lose" author information -- you'll just have the author info represented in another manner.

If any authors become known, you can just edit the wiki to reference their github account from that page (or possibly update the issue in the api, not sure).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151118/bd900913/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Nov 19 00:53:16 2015
From: ex.vitorino at gmail.com (exvito here)
Date: Thu, 19 Nov 2015 07:53:16 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564C44D9.3050001@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
Message-ID: <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>

On Wed, Nov 18, 2015 at 9:28 AM, Tom Boland <tom at t0mb.net> wrote:

> I think what you've provided me with is useful for me, but I think it's
> backwards for my purposes, as I need to be connecting to the policy daemon
> rather than being the policy daemon!
>
> I wanted to do this with deferred calls in case one of the policy daemons
> becomes unreachable and blocks my application.  Do you think I should do
> something differently in that regard?  My SQL lookups are done
> synchronously.  If the database server goes away, I've got bigger problems
> anyway!
>

So maybe something like this is more likely to be useful:

#!/usr/bin/env python

from __future__ import print_function

from twisted.internet import reactor, protocol, endpoints, defer
from twisted.protocols import basic


class PostfixProtocol(basic.LineReceiver):

    # Assuming Postfix uses '\r\n' line breaks (does it?)
    delimiter = '\r\n'

    def __init__(self):
        self.action = None
        self.action_deferred = None

    def lineReceived(self, line):
        if '=' in line:
            self.action = line.split('=')[1]
        elif line == '':
            self.action_deferred.callback(self.action)
            self.action_deferred = None
        else:
            # oops, bad input
            pass

    def sendPostfixRequest(self, request_dict):
        if not self.action_deferred is None:
            raise Exception('transaction pending')
        for k, v in request_dict.items():
            self.sendLine('{}={}'.format(k,v))
        # Empty line signals we're done
        self.sendLine('')
        self.action_deferred = defer.Deferred()
        return self.action_deferred

@defer.inlineCallbacks
def checkPostfixPolicy(request_dict):
    ep = endpoints.clientFromString(reactor, 'tcp:host=127.0.0.1:
port=10000')
    p = yield endpoints.connectProtocol(ep, PostfixProtocol())
    action = yield p.sendPostfixRequest(request_dict)
    print('got: {}'.format(action))
    reactor.stop()


if __name__ == '__main__':

    request_dict = {
        'recipient': 'email at ddr.ess',
        'sender': 'email at ddr.ess',
    }
    reactor.callWhenRunning(checkPostfixPolicy, request_dict)
    reactor.run()

Highlights:
- This is not the same protocol as before, in particular it uses a
different delimiter.
- It assumes the response is also terminated with an empty line (does it?).
- It more than one outstanding response: a different exception should be
used.
- The input processing is very rudimentary and failure-prone.
- checkPostfixPolicy could, of course, return instead of printing. :)

Cheers,
--
  exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151119/81f55211/attachment-0002.html>

From cory at lukasa.co.uk  Thu Nov 19 04:50:52 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 19 Nov 2015 11:50:52 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
Message-ID: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>


> On 18 Nov 2015, at 12:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 

Sorry about the delay in responding to this, but I wanted to make sure I knew at least a bit about what I was talking about before I responded!

>> What do people think of this approach?
> 
> So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.
> 
> I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).

So, I think in general this is interesting. One of the big difficulties I’m having right now is that I’m trying to combine this “streaming HTTP” work with the implementation of HTTP/2, which means that I need to keep the HTTP/2 work in mind whenever I talk about this *and* update the HTTP/2 design in response to decisions we make here. This means I’ve got quite a lot of balls in the air right now, and I am confident I’ll drop quite a few. One thing I’m deliberately not doing here is considering Tubes, in part because I’m extremely concerned about backward compatibility, and want the HTTP/2 work to function in the same environment.

Unfortunately, this means this conversation is blending into the HTTP/2 one, so I’m going to hijack this thread and bring in some concrete discussion of what I’m working on with the HTTP/2 stuff.

I was having a conversation about the HTTP/2 architecture on #twisted-dev yesterday, which has led towards my current working approach for HTTP/2, which will be to have two underlying objects. We’ll have H2Connection, which implements IProtocol, and H2Stream, which implements ITransport. These two objects will be *extremely* tightly coupled: H2Stream cannot meaningfully run over an arbitrary transport mechanism, and knows a great deal about how H2Connections work.

The reason we need to take this approach is because IConsumer doesn’t allow for us to have correlators, so even if we only had H2Connection it wouldn’t be able to identify a given producer with the stream it holds. By extension, IConsumer cannot consume multiple producers at once. For this reason, we need an interface between H2Connection and H2Stream that is similar to ITransport and IConsumer, but more featureful. Basically, H2Stream is a thin shim between a producer and H2Connection that adds a stream ID to a few function calls.

> Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.
> 
> This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.
> 
> This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.

Just let me clarify how this is expected to work. Somewhere we have a t.w.s.Site, which builds some kind of HTTP protocol (currently HTTPChannel, in future some object that can transparently swap between HTTPChannel and H2Connection) when connections are received.

These two protocols each build an IGoodRequest, which is very similar to IRequest but has a deliverBody method. The consumer of this (whether IResource or some other thing). These objects, if they want to consume a stream, register a protocol via deliverBody. At this point, H2Connection (via H2Stream) provides itself as the transport to that protocol, and calls deliverBody when chunks of data are received.

When the object receiving the request is ready to send a response, it calls…something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

Is my understand of that correct? If so, I think this design can work: essentially, H2Stream becomes the weird intermediary layer that appears as both a transport and a protocol to the request/response layer. Underneath the covers it mostly delegates to H2Connection, which implements a slightly weirdo version of IConsumer (and in fact IProducer) that can only be consumed by H2Stream.

> Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.
> 
> Then the question is: what to do with IResource?
> 
> Right now the flow of processing a request is, roughly:
> 
> -> wait for full request to arrive
>   -> have HTTPChannel fill out IRequest object
> -> look at request.site.resource for the root
>  *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
>   -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
> *-> call resource.render(request)
> -> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open,
> 
> Instead, I think a good flow would be:

[snip long discussion of how to write locateChild]

Agreed that these proposed approaches would work well. I have no concrete feedback on them, they seem good to me.

> -> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.
> 
> The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.

This seems super-gross but vaguely do-able, and we’ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.

All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I’m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we’ll see how it goes.

Cory


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151119/dcc2f0f5/attachment.sig>

From tom at t0mb.net  Thu Nov 19 09:19:16 2015
From: tom at t0mb.net (Tom Boland)
Date: Thu, 19 Nov 2015 16:19:16 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
 <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
Message-ID: <564DF684.1060100@t0mb.net>

Thanks again for this.  It's really useful.  It turns out that the
delimiter is a plain old \n.  Who knows how consistent this will be
between different policy daemons, I don't know!

I've modified it to manage a DeferredQueue which hopefully means I can
just keep throwing requests at it without every being bounced away.  A
stripped down example (with even less error checking!) of what I've
managed to work your example in to is here:

class PostfixPolicyClient(LineReceiver):

    delimiter = '\n'

    def __init__(self):
        self.resultQueue = DeferredQueue()


    def lineReceived(self, line):
        if '=' in line:
            self.resultQueue.put(True if line.split('=')[1] == 'OK' else
False)


    def sendPostfixPolicyClientRequest(self, request_dict):
        for k, v in request_dict.items():
            self.sendLine('{}={}'.format(k, v))
        self.sendLine('')
        return self.resultQueue.get()



Now, this isn't a working example, it's just the minimum that will
demonstrate my idea.  I just wonder if what I've done with the
DeferredQueue is sane.  If I return the .get() entry from the
DeferredQueue when doing the request, and then do a put() in
lineReceived, am I guaranteeing that I will get my results in the
correct order?

Thanks again for all your help!

Many thanks.  Tom.


On 19/11/15 07:53, exvito here wrote:
>
> On Wed, Nov 18, 2015 at 9:28 AM, Tom Boland <tom at t0mb.net
> <mailto:tom at t0mb.net>> wrote:
>
>     I think what you've provided me with is useful for me, but I think
>     it's backwards for my purposes, as I need to be connecting to the
>     policy daemon rather than being the policy daemon!
>
>     I wanted to do this with deferred calls in case one of the policy
>     daemons becomes unreachable and blocks my application.  Do you
>     think I should do something differently in that regard?  My SQL
>     lookups are done synchronously.  If the database server goes away,
>     I've got bigger problems anyway!
>
>
> So maybe something like this is more likely to be useful:
>
> #!/usr/bin/env python
>
> from __future__ import print_function
>
> from twisted.internet import reactor, protocol, endpoints, defer
> from twisted.protocols import basic
>
>
> class PostfixProtocol(basic.LineReceiver):
>
>     # Assuming Postfix uses '\r\n' line breaks (does it?)
>     delimiter = '\r\n'
>
>     def __init__(self):
>         self.action = None
>         self.action_deferred = None
>
>     def lineReceived(self, line):
>         if '=' in line:
>             self.action = line.split('=')[1]
>         elif line == '':
>             self.action_deferred.callback(self.action)
>             self.action_deferred = None
>         else:
>             # oops, bad input
>             pass
>
>     def sendPostfixRequest(self, request_dict):
>         if not self.action_deferred is None:
>             raise Exception('transaction pending')
>         for k, v in request_dict.items():
>             self.sendLine('{}={}'.format(k,v))
>         # Empty line signals we're done
>         self.sendLine('')
>         self.action_deferred = defer.Deferred()
>         return self.action_deferred
>
> @defer.inlineCallbacks
> def checkPostfixPolicy(request_dict):
>     ep = endpoints.clientFromString(reactor,
> 'tcp:host=127.0.0.1:port=10000')
>     p = yield endpoints.connectProtocol(ep, PostfixProtocol())
>     action = yield p.sendPostfixRequest(request_dict)
>     print('got: {}'.format(action))
>     reactor.stop()
>
>
> if __name__ == '__main__':
>
>     request_dict = {
>         'recipient': 'email at ddr.ess',
>         'sender': 'email at ddr.ess',
>     }
>     reactor.callWhenRunning(checkPostfixPolicy, request_dict)
>     reactor.run()
>
> Highlights:
> - This is not the same protocol as before, in particular it uses a
> different delimiter.
> - It assumes the response is also terminated with an empty line (does
> it?).
> - It more than one outstanding response: a different exception should
> be used.
> - The input processing is very rudimentary and failure-prone.
> - checkPostfixPolicy could, of course, return instead of printing. :)
>
> Cheers,
> --
>   exvito
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151119/8f8b4d9c/attachment-0002.html>

From ex.vitorino at gmail.com  Thu Nov 19 17:10:26 2015
From: ex.vitorino at gmail.com (exvito here)
Date: Fri, 20 Nov 2015 00:10:26 +0000
Subject: [Twisted-Python] Implementing Postfix Inet Policy Check Client
In-Reply-To: <564DF684.1060100@t0mb.net>
References: <564B5C48.1000204@t0mb.net>
 <CADtv4OCfy9wUUeodAiUQd9vSw=Lz7ZsPG89MiAh3HVhapLJD4w@mail.gmail.com>
 <564C44D9.3050001@t0mb.net>
 <CADtv4OD_mQ6jwU8xu4A8qOpZdE1to-cexjzY==Ogf+jKd66p4A@mail.gmail.com>
 <564DF684.1060100@t0mb.net>
Message-ID: <CADtv4OCMF3m58iVRe9btQY=hcHkxQ4yR6cDPsG+QoPCejVrVhw@mail.gmail.com>

On Thu, Nov 19, 2015 at 4:19 PM, Tom Boland <tom at t0mb.net> wrote:

> Thanks again for this.  It's really useful.  It turns out that the
> delimiter is a plain old \n.  Who knows how consistent this will be between
> different policy daemons, I don't know!
>

I would check the Postfix docs for that.


> Now, this isn't a working example, it's just the minimum that will
> demonstrate my idea.  I just wonder if what I've done with the
> DeferredQueue is sane.  If I return the .get() entry from the DeferredQueue
> when doing the request, and then do a put() in lineReceived, am I
> guaranteeing that I will get my results in the correct order?
>

The DeferredQueue is a nice approach: it ensures the get() results come out
in the same order as the put() calls.

The key question is whether or not the server handles multiple outstanding
requests within the same connection. Given your informal protocol
description, if the server supports it, it seems the responses must come
back in the same order as the requests were sent, otherwise there is
apparently no way to relate them; that being the case, what's the advantage
of pushing more than one request at a time if one slow request/response
"transaction" will delay a subsequent fast request/response "transaction"?

A variation of this, assuming the server only handles one outstanding
request at a time per connection, could be a protocol implementation that
would queue requests ensuring only one was sent at a time: this might
provide a cleaner client side API.

PS: My references to "Postfix docs" might need to be replaced by "your
policy server docs" which, hopefully, will match Postfix's... (you would
know that) :)

Cheers,
--
exvito
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/3ee25ae2/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Nov 19 22:06:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 19 Nov 2015 21:06:30 -0800
Subject: [Twisted-Python] incompatible change - need revert before release
Message-ID: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>

Tom Prince discovered a regression on https://twistedmatrix.com/trac/ticket/7016#comment:14 <https://twistedmatrix.com/trac/ticket/7016#comment:14> - I think that this was introduced after 15.4, so it needs to be rolled back (or fixed, if someone can get to it before the revert) in 15.5.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151119/6d5c5c70/attachment-0002.html>

From ngoonee.talk at gmail.com  Thu Nov 19 22:19:38 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 20 Nov 2015 13:19:38 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
Message-ID: <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>

On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>
>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>> Based on my reading/searching, multiple reactors in the same process
>>> (even in multiple threads) is pretty much a no-go because
>>> twisted.internet.reactor is a global singleton.
>>>
>>> I'm also unable to find any information about connecting to self (for
>>> example, to send messages from one reactor to itself).
>>>
>>>
>>
>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>
> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>
> -glyph


But, but... I LIKE listen/connectTCP.... fits better with how I think.



From glyph at twistedmatrix.com  Thu Nov 19 22:22:35 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 19 Nov 2015 21:22:35 -0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
Message-ID: <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>

> On Nov 19, 2015, at 9:19 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> 
>>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>> 
>>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>>> Based on my reading/searching, multiple reactors in the same process
>>>> (even in multiple threads) is pretty much a no-go because
>>>> twisted.internet.reactor is a global singleton.
>>>> 
>>>> I'm also unable to find any information about connecting to self (for
>>>> example, to send messages from one reactor to itself).
>>>> 
>>>> 
>>> 
>>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>> 
>> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>> 
>> -glyph
> 
> 
> But, but... I LIKE listen/connectTCP.... fits better with how I think.

If you use connectTCP/listenTCP, you miss out on important functionality.  For example, listenTCP can't do encryption, which means it's unsuitable for use on the modern internet, unless your protocol calls startTLS right away.

Also you don't get stuff like https://txtorcon.readthedocs.org for free.

So, connectTCP/listenTCP are low-level APIs that should really only be used for *implementing* an endpoint, not used directly by applications.  If this does not fit with how you think then you need to change how you think :).

-glyph




From adi at roiban.ro  Fri Nov 20 01:08:27 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 10:08:27 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
Message-ID: <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>

It was released before 15.4

Twisted Web 15.2.0 (2015-05-18)
===============================

Features
--------
 - twisted.web.server.Site accepts requestFactory as constructor
   argument. (#7016)

----------

Not sure if rollback is the right thing to do... but I have no idea how to
proceed as any change will back the compatibility.

I guess that we should just create a normal bug ticket and fix this issue


Regards,
Adi


On 20 November 2015 at 07:06, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> Tom Prince discovered a regression on
> https://twistedmatrix.com/trac/ticket/7016#comment:14 - I think that this
> was introduced after 15.4, so it needs to be rolled back (or fixed, if
> someone can get to it before the revert) in 15.5.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/4290c41e/attachment-0002.html>

From ngoonee.talk at gmail.com  Fri Nov 20 01:32:32 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Fri, 20 Nov 2015 16:32:32 +0800
Subject: [Twisted-Python] Multiple reactors, connecting to self,
	or other solution?
In-Reply-To: <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>
References: <CAGQ70esG9L1zai=9HN7Tqu2diSniWkORHD2aUPiy2eHz2_jP-Q@mail.gmail.com>
 <5648C6E1.3090000@itamarst.org>
 <31903F9D-7E21-4E92-87BC-DC2DAACE2EEA@twistedmatrix.com>
 <CAGQ70evJ5XGMw62Q6CyrrRS7CDZUR3TSoeoPq6tqUNx9+FF5Vw@mail.gmail.com>
 <CCD9462B-672F-4D8A-8F5C-E7C35A43B9D6@twistedmatrix.com>
Message-ID: <CAGQ70euyO6SY+dryPrZw6R5gyToiZmvtCOm8=qEju9ARm6hprw@mail.gmail.com>

On Fri, Nov 20, 2015 at 1:22 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>> On Nov 19, 2015, at 9:19 PM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> On Wed, Nov 18, 2015 at 4:55 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>>
>>>> On Nov 15, 2015, at 9:54 AM, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
>>>>
>>>> On 11/15/2015 10:19 AM, Oon-Ee Ng wrote:
>>>>> Based on my reading/searching, multiple reactors in the same process
>>>>> (even in multiple threads) is pretty much a no-go because
>>>>> twisted.internet.reactor is a global singleton.
>>>>>
>>>>> I'm also unable to find any information about connecting to self (for
>>>>> example, to send messages from one reactor to itself).
>>>>>
>>>>>
>>>>
>>>> You can just have a single reactor. E.g. if you do a listenTCP (e.g. on port 8080) on the reactor you can in the same process do a connectTCP to localhost in the same process on the same reactor; just connect to '127.0.0.1' or 'localhost' on port 8080.
>>>
>>> But of course you'd use <https://twistedmatrix.com/documents/15.4.0/core/howto/endpoints.html>, not 'listenTCP' and 'connectTCP' directly, right? :)
>>>
>>> -glyph
>>
>>
>> But, but... I LIKE listen/connectTCP.... fits better with how I think.
>
> If you use connectTCP/listenTCP, you miss out on important functionality.  For example, listenTCP can't do encryption, which means it's unsuitable for use on the modern internet, unless your protocol calls startTLS right away.
>
> Also you don't get stuff like https://txtorcon.readthedocs.org for free.
>
> So, connectTCP/listenTCP are low-level APIs that should really only be used for *implementing* an endpoint, not used directly by applications.  If this does not fit with how you think then you need to change how you think :).
>
> -glyph

I know better than to argue this point. My app as it currently stands
will only ever be used on local networks (doubt the way I'm designing
it would handle high latencies well), and I'm really using twisted as
a more convenient/performant socket with AMP on top.

That being said, using endpoints is easy enough (it seems), and I'm
going to give it a go once I'm done crafting all these messages (based
on the earlier response in this thread I'm totally cutting blinker out
of the app and replacing all my signals).



From glyph at twistedmatrix.com  Fri Nov 20 01:32:39 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 00:32:39 -0800
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
Message-ID: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>

> On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> It was released before 15.4
> 
> Twisted Web 15.2.0 (2015-05-18)
> ===============================
> 
> Features
> --------
>  - twisted.web.server.Site accepts requestFactory as constructor
>    argument. (#7016)
> 
> ----------
> 
> Not sure if rollback is the right thing to do... but I have no idea how to proceed as any change will back the compatibility.
> 
> I guess that we should just create a normal bug ticket and fix this issue

Thanks for finding the changelog entry; sorry for the false alarm.

If it's been in a release, then there's probably nothing to do.  It's a shame that this went out, but once a breakage like this has happened we have to live with it because otherwise, as you say, we'd be breaking compatibility for the people that already upgraded.  For those that need to support both versions, keyword arguments are the way to go.

-glyph




From johnaherne at rocs.co.uk  Fri Nov 20 01:52:51 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 08:52:51 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certificates
Message-ID: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>

I am posting here because my update on the wiki got rejected as spam.

If I can get that fixed I will repost it to the wiki.

Anyway here is what I wanted to post.

Regards

John Aherne


Some additional information regarding wincertstore.

My reading of the runes relating to automatic and dynamic updates is as
follows:

In an organisation with a sysadmin, dynamic updates will be turned off and
an internal mechanism will be in place to update clients.

Dynamic updates represents too much of a security risk.

There is also an option from Microsoft on a daily basis to automatically
update the certificate store

So sysadmins can either arrange to have the daily update occur or have it
downloaded to a central system under their control where they distribute
the update plus any other certificates they need to add for company use.


In smaller organisations no doubt the automatic update will be left in
place.

It would seem that the dynamic update is part of windows os and the
application is not involved in the process. The verification either
succeeds or fails.

As an example see this link that contains this info:--

http://dreamlayers.blogspot.co.uk/2009/12/windows-7-cant-always-automatically.html

<<Today Secunia PSI refused to run with the message: "an error occurred
while verifying the security certificate". Then I found that IE refused
o show https://secunia.com because the certificate was "not issued by a
trusted certificate authority".

Firefox did not have a problem with that webpage.

For some reason, IE did not recognize the "Thawte Server CA" certificate.
IE also refused to recognize StartSSL.

This was really weird, because as far as I know, Windows 7 is supposed to
automatically update root certificates.

Microsoft even explains how the process works in Vista. My first thought
was that my firewall was blocking the update, but that was not it.

Event log showed event 4100 from CAPI2, which is "Successful auto update
retrieval of third-party root certificate".

The problem was event 4110: "Failed to add certificate to Third-Party Root
Certification Authorities store with error:

A certificate chain could not be built to a trusted root authority."

I manually downloaded and installed the latest root certificate update from
Windows Update.

After that, everything works. I'm just left wondering why I had to deal
with this in the first place.


A later comment says:

I think this may be because Cryptographic Services (CryptSvc) was unable to
access the Internet because of the firewall.

Its description says that it includes the "Automatic Root Certificate
Update Service, which retrieves root certificates from Windows Update".

There are CAPI2 events relating to downloading and unpacking a root
certificates .CAB file, and those do not appear in my event log.>>

So windows cryptographic services does the dynamic check for certificate
verification.

However, you can always download the latest certificate store and update it
yourself.

This strikes me as similar to using the firefox download as happens on many
linux systems and how the requests library works.

I did a simple test to see if the dynamic update works on my win7 system.

I used certmgr.msc to delete the GoDaddy root certificate.

I then opened a browser to the godaddy site to see what would happen.

In some side bar I saw a link that said the cert was failing but the main
site site connected without problems.

When I checked the certificate store there was still no godaddy root
certificate. So what was happening?

I then downloaded the update and updated my store. I ended up with about
200 entries. More than before but since I did not make a note I can't
really be sure if I got more than when I started.

I just need to run some more tests to see how this dynamic update is
supposed to work.

Manually updating the certificate store


The link to manually update the certifcate store is below:

To Manually install the certificates

1. Download
http://download.windowsupdate.com/msdownload/update/v3/static/trustedr/en/rootsupd.exe

2. Extract the files using the command rootsupd.exe /c /t:C:\temp\extroot

3. from c:\temp\extroot run the following 4 commands (from an elevated
prompt)

updroots.exe authroots.sst

updroots.exe updroots.sst

updroots.exe -l roots.sst

updroots.exe -d delroots.sst﻿


Here is an extract from microsoft technet explaining how the automatic
update works.

https://technet.microsoft.com/en-us/library/cc749331(WS.10).aspx

<<The Update Root Certificates feature in Windows Vista is designed to
automatically check the list
of trusted authorities on the Windows Update Web site when this check is
needed by a user's application.
Specifically, if the application is presented with a certificate issued by
a certification authority in
a PKI that is not directly trusted, the Update Root Certificates feature
(if it is not turned off)
will contact the Windows Update Web site to see if Microsoft has added the
certificate of the root CA
to its list of trusted root certificates. If the CA has been added to the
Microsoft list of trusted authorities,
its certificate will automatically be added to the set of trusted root
certificates on the user's computer.
The Update Root Certificates feature can be turned off in Windows Vista by
using Group Policy.

For more information, see "Procedures for Viewing or Changing Group Policy
Settings that Affect
Certificates in Windows Vista," later in this section.>>

Below is a link to a mozilla forum where the sysadmins have been
complaining over the past 7 years that firefox will not support
wincertstore so it can be integrated into their control systems.

As a result they drop firefox and only support chrome and IE.

https://bugzilla.mozilla.org/show_bug.cgi?id=432802

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/6527db13/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Nov 20 02:37:05 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 01:37:05 -0800
Subject: [Twisted-Python] Updating wincertstore for SSL certificates
In-Reply-To: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>
References: <CAKmUHjZMUYZU1Ph_cEcO-v0hFZ-e=3ta5FTfLTCtao_zfwo_PA@mail.gmail.com>
Message-ID: <20EF393D-CBAE-4997-871C-175DD430E949@twistedmatrix.com>


> On Nov 20, 2015, at 12:52 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> I am posting here because my update on the wiki got rejected as spam.
> 
> If I can get that fixed I will repost it to the wiki.
> 
> Anyway here is what I wanted to post.

I told the spam filter that your post was indeed not spam.  You should be able to re-post...

-glyph




From adi at roiban.ro  Fri Nov 20 02:42:36 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 11:42:36 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
Message-ID: <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>

On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > It was released before 15.4
> >
> > Twisted Web 15.2.0 (2015-05-18)
> > ===============================
> >
> > Features
> > --------
> >  - twisted.web.server.Site accepts requestFactory as constructor
> >    argument. (#7016)
> >
> > ----------
> >
> > Not sure if rollback is the right thing to do... but I have no idea how
> to proceed as any change will back the compatibility.
> >
> > I guess that we should just create a normal bug ticket and fix this issue
>
> Thanks for finding the changelog entry; sorry for the false alarm.
>
> If it's been in a release, then there's probably nothing to do.  It's a
> shame that this went out, but once a breakage like this has happened we
> have to live with it because otherwise, as you say, we'd be breaking
> compatibility for the people that already upgraded.  For those that need to
> support both versions, keyword arguments are the way to go.


Well, in public interfaces we could just stop mixing *args and **kwargs
with other arguments.

It is more work for maintainers, but as a library user I find it much
easier to see the exact args in the docs, rather than seeing  *args  /
**kwargs and then navigating the inheritance path to find out all supported
arguments.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/e6c2fab3/attachment-0002.html>

From johnaherne at rocs.co.uk  Fri Nov 20 02:48:18 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 09:48:18 +0000
Subject: [Twisted-Python] Updateing wincertstore for SSL certifcicates
Message-ID: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>

Sorry this was meant to go to ticket #6371 not the wiki

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/68ada80c/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Nov 20 03:25:14 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 02:25:14 -0800
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
 <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
Message-ID: <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>


> On Nov 20, 2015, at 1:42 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> >
> > It was released before 15.4
> >
> > Twisted Web 15.2.0 (2015-05-18)
> > ===============================
> >
> > Features
> > --------
> >  - twisted.web.server.Site accepts requestFactory as constructor
> >    argument. (#7016)
> >
> > ----------
> >
> > Not sure if rollback is the right thing to do... but I have no idea how to proceed as any change will back the compatibility.
> >
> > I guess that we should just create a normal bug ticket and fix this issue
> 
> Thanks for finding the changelog entry; sorry for the false alarm.
> 
> If it's been in a release, then there's probably nothing to do.  It's a shame that this went out, but once a breakage like this has happened we have to live with it because otherwise, as you say, we'd be breaking compatibility for the people that already upgraded.  For those that need to support both versions, keyword arguments are the way to go.
> 
> Well, in public interfaces we could just stop mixing *args and **kwargs with other arguments. 
> 
> It is more work for maintainers, but as a library user I find it much easier to see the exact args in the docs, rather than seeing  *args  / **kwargs and then navigating the inheritance path to find out all supported arguments.

I'm not quite sure what you're referring to in this case; but generally, I agree.  If you pass a parameter, you should document it with @param even if your arg list says *args / **kwargs.  This is how I tried to document, for example, optionsForClientTLS.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/859953b9/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Nov 20 03:25:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 02:25:30 -0800
Subject: [Twisted-Python] Updateing wincertstore for SSL certifcicates
In-Reply-To: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>
References: <CAKmUHjbRs_uB+k4FKUF3jNkvzkb0GK5U1xQGp4szfU+kiJQ+fQ@mail.gmail.com>
Message-ID: <E06CF683-5E04-4172-84ED-7FA44125BEFB@twistedmatrix.com>


> On Nov 20, 2015, at 1:48 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Sorry this was meant to go to ticket #6371 not the wiki

In any case, the spam filter should be OK with it :).

-glyph




From adi at roiban.ro  Fri Nov 20 03:47:12 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 20 Nov 2015 12:47:12 +0200
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
 <CAFycZ9ewVat5SkGs=pCVfR2DNq_ftOf_rYt9LgWz3RHOJsUuwQ@mail.gmail.com>
 <202ED418-B042-45B8-9617-1FD7B238DB7E@twistedmatrix.com>
Message-ID: <CAFycZ9egUiBr+VA6OAaLJQ=1Z0vAoMohNh55MrO89o+D35SbVQ@mail.gmail.com>

On 20 November 2015 at 12:25, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 20, 2015, at 1:42 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>
> On 20 November 2015 at 10:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
> wrote:
>
>> > On Nov 20, 2015, at 12:08 AM, Adi Roiban <adi at roiban.ro> wrote:
>> >
>> > It was released before 15.4
>> >
>> > Twisted Web 15.2.0 (2015-05-18)
>> > ===============================
>> >
>> > Features
>> > --------
>> >  - twisted.web.server.Site accepts requestFactory as constructor
>> >    argument. (#7016)
>> >
>> > ----------
>> >
>> > Not sure if rollback is the right thing to do... but I have no idea how
>> to proceed as any change will back the compatibility.
>> >
>> > I guess that we should just create a normal bug ticket and fix this
>> issue
>>
>> Thanks for finding the changelog entry; sorry for the false alarm.
>>
>> If it's been in a release, then there's probably nothing to do.  It's a
>> shame that this went out, but once a breakage like this has happened we
>> have to live with it because otherwise, as you say, we'd be breaking
>> compatibility for the people that already upgraded.  For those that need to
>> support both versions, keyword arguments are the way to go.
>
>
> Well, in public interfaces we could just stop mixing *args and **kwargs
> with other arguments.
>
> It is more work for maintainers, but as a library user I find it much
> easier to see the exact args in the docs, rather than seeing  *args  /
> **kwargs and then navigating the inheritance path to find out all supported
> arguments.
>
>
> I'm not quite sure what you're referring to in this case; but generally, I
> agree.  If you pass a parameter, you should document it with @param even if
> your arg list says *args / **kwargs.  This is how I tried to document, for
> example, optionsForClientTLS.
>

Instead of

def __init__(self, resource, requestFactory=None, *args, **kwargs):
    http.HTTPFactory.__init__(self, *args, **kwargs)

you can have

def __init__(self, resource, logFile=None, requestFactory=None):
    http.HTTPFactory.__init__(self, logFile=logFile)


Duplicating documentation is ugly... maybe we can "improve" pydoctor to
support something like this. Like @see but instead of creating a link, the
code is duplicated... but maybe a link is enough


def __init__(self, resource, logFile=None, requestFactory=None):
    """"
    Some description.

    @include http.HTTPFactory.__init__.logFile
    """"
    http.HTTPFactory.__init__(self, logFile=logFile)

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/6a077c7f/attachment-0002.html>

From johnaherne at rocs.co.uk  Fri Nov 20 04:12:03 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 11:12:03 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
Message-ID: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>

Submission rejected as potential spam

   - SpamBayes determined spam probability of 99.60%

Looks like the spam filter does not like me.

-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/b9ff67b4/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Nov 20 06:06:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 20 Nov 2015 05:06:21 -0800
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
In-Reply-To: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
References: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
Message-ID: <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>

> On Nov 20, 2015, at 3:12 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
> 
> Submission rejected as potential spam
> SpamBayes determined spam probability of 99.60%
> Looks like the spam filter does not like me.

This time I re-trained repeatedly until the 'test' filter gave me a 0% probability result.  Try now?

-g

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/7b8e781d/attachment-0002.html>

From johnaherne at rocs.co.uk  Fri Nov 20 06:49:26 2015
From: johnaherne at rocs.co.uk (John Aherne)
Date: Fri, 20 Nov 2015 13:49:26 +0000
Subject: [Twisted-Python] Updating wincertstore for SSL certifcicates
In-Reply-To: <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>
References: <CAKmUHjbK_2r2W3JGr3d3CVyEBO1Qz9svro_tU+juhuVdwwYYoA@mail.gmail.com>
 <2643367F-65ED-4965-AE8B-9677FB1147EB@twistedmatrix.com>
Message-ID: <CAKmUHjaO09ggF3gsDEn1zfx-O2A9AobnA13-6Q3v5LFfj1TmFA@mail.gmail.com>

Thanks

That worked

John

On Fri, Nov 20, 2015 at 1:06 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> On Nov 20, 2015, at 3:12 AM, John Aherne <johnaherne at rocs.co.uk> wrote:
>
> Submission rejected as potential spam
>
>    - SpamBayes determined spam probability of 99.60%
>
> Looks like the spam filter does not like me.
>
>
> This time I re-trained repeatedly until the 'test' filter gave me a 0%
> probability result.  Try now?
>
> -g
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
*John Aherne*




*www.rocs.co.uk <http://www.rocs.co.uk>*
020 7223 7567
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151120/1745b6f9/attachment-0002.html>

From pawelmhm at gmail.com  Sat Nov 21 02:51:48 2015
From: pawelmhm at gmail.com (=?UTF-8?B?UGF3ZcWCIE1pZWNo?=)
Date: Sat, 21 Nov 2015 10:51:48 +0100
Subject: [Twisted-Python] spambayes
Message-ID: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>

I get following message:

> Submission rejected as potential spam
> SpamBayes determined spam probability of 74.83

SpamBayes seems to hate new users...

This is after trying to submit following bug report:

Executive summary page(
http://twistedmatrix.com/documents/current/core/howto/vision.html) is
probably first thing user will read when she visits Twisted page. At the
moment this page is not providing important information about Twisted.

What is missing and what should be present in introduction to Twisted:

* explanation of difference between non-blocking and blocking IO
* what is reactor, why is it important (mention of reactor design pattern)
* introduction to core concepts of Twisted: protocol, factory,  defferred
etc

It should be simple and easy to understand explanation that could give
total noob overview of framework.

I also think some paragraphs are misleading and not very informative, for
example:

> While Python by itself is a very powerful language, there are many
facilities it lacks which other languages have spent great attention to
adding.

It sounds very vague and  it is probably not true now isn't it? Python3 has
its own async libraries in standard library so this sentence is misleading.

> It began as a game, it is being used commercially in games, and it will
be, I hope, an interactive and entertaining experience for the end-user.

this could also appear misleading for newbie. New user will probably visit
docs to learn more about networking, information about usage of twisted in
games may not be relevant for most use cases. It should not be first thing
user reads when she visits introduction.

> As a platform, Twisted should be focused on integration. Ideally, all
functionality will be accessible through all protocols.

At this point user knows nothing about protocols and knows little about
functionality of Twisted so this sentence will probably not mean much for
newbie.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151121/157557f4/attachment-0002.html>

From adi at roiban.ro  Sun Nov 22 05:04:17 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 Nov 2015 14:04:17 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
Message-ID: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>

The @deprecated decorator (at leas on py2.7) does not work when paired
@property

For deprecated instance variables, our deprecation policy recommend
converting them into properties and emitted the  warning from there.
It would be nice if we could use the standard @deprecated decorator here.

The problem is that when property are used the fget/fset are received by
the @deprecated wrapper as functions and not as methods

Is there a way to get the class in which a property is defined... or there
is no way to use the @deprecated decorator with the @property .. and we
should create a dedicated deprecatedMember method which is called as a
normal method.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151122/7a83ec7f/attachment-0002.html>

From adi at roiban.ro  Sun Nov 22 14:31:00 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 22 Nov 2015 23:31:00 +0200
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
Message-ID: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>

Hi,

Right now  twisted/runner/inetdtap.py has the following errors reported by
pyflakes:

$ pyflakes twisted/runner/inetdtap.py
twisted/runner/inetdtap.py:58: undefined name 'rpcVersions'
twisted/runner/inetdtap.py:59: undefined name 'name'
twisted/runner/inetdtap.py:62: undefined name 'p'
twisted/runner/inetdtap.py:152: undefined name 'proto'

>From what I can see from reading the code, RPCServer.startService is broken.

makeService is also broken for rpc/* services .

There are no tests for all this code.

Link for the code :
https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py

----------

I am working on getting the Twisted code clean of pyflakes errors/warnings
so that contributors could run pyflakes check on their own branch, without
relying on buildbot.

I would like to clean the inetdtap.py module of pylakes warning but since
it is broken and has no tests, I have no idea what this code is expected to
do and how end users are expecting to use it.

Does someone volunteer to fix it?

Otherwise, has anyone any objections against deprecating
twisted/runner/inetdtap.py?
Since it is broken, can we just remove it?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151122/abae90ac/attachment-0002.html>

From ngoonee.talk at gmail.com  Sun Nov 22 15:51:57 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Mon, 23 Nov 2015 06:51:57 +0800
Subject: [Twisted-Python] AMP message length limit
Message-ID: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>

I've just (to my surprise) hit this. As I understand from searching
around, AMP messages are limited to ~64k due to the length prefix
being 16-bit. A change in my internal data being sent (using dicts
rather than lists) kicked one of my messages to way over that limit.

There's a bit of discussion here -
http://twistedmatrix.com/pipermail/twisted-python/2014-November/028947.html

Is there an internal twisted solution planned, or should I go ahead
and roll my own paging code? If the latter (as I strongly suspect),
could I get some comments on this idea:-

Original amp.Command had a single argument (amp.ListOf(amp.String())
and no response

Modified amp.Command, 4 arguments and 1 response
ID (sequentially generated by producer) - amp.Integer()
CurPage - amp.Integer()
TotalPage - amp.Integer()
ActualData - amp.ListOf(amp.String())
Response - RecievedPage - amp.Integer()

Questions:-
1. ID is so the client can be sure not to concatenate different lists
2. Do I need a response at all?
3. Should I attempt to plug as many list items as possible into each
page (requires length checking of json-encoded strings and repeated
encoding/checks) or just choose a suitable limit of list items (my
current max length is about 200 characters and average is 71) of maybe
300 list items per message? My current list is about 1k items in all,
and it's only going to get bigger.
4. I was intrigued by the mention of 'Tubes' in the link above. Found
it here - https://tubes.readthedocs.org/en/latest/tube.html - should I
be using that instead? I'm writing a homegrown app which will only
really need (at this point) to communicate with itself and copies of
itself, and settled with AMP as being a simple way of achieving that.

Thanks for the time.



From glyph at twistedmatrix.com  Sun Nov 22 17:25:07 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:25:07 -0500
Subject: [Twisted-Python] spambayes
In-Reply-To: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>
References: <CAO38UCmh=jE-cwEeR8gb7fan=nSuD3QhtJSfomLX49gfq5CEhw@mail.gmail.com>
Message-ID: <B11FA35F-DEB9-48EB-B325-DE28DCB93E34@twistedmatrix.com>


> On Nov 21, 2015, at 04:51, Paweł Miech <pawelmhm at gmail.com> wrote:
> 
> I get following message:
> 
> > Submission rejected as potential spam
> > SpamBayes determined spam probability of 74.83
> 
> SpamBayes seems to hate new users...

Sorry Paweł; we had to discard the training base recently because it was overtrained, so it is still unfortunately adjusting to new input.  I have marked your submission as ham in the filter so it should complain less in the future.  Would you mind resubmitting?

If that is too annoying, I can file the bug for you.

-glyph




From glyph at twistedmatrix.com  Sun Nov 22 17:32:38 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:32:38 -0500
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
In-Reply-To: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
Message-ID: <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>


> On Nov 22, 2015, at 07:04, Adi Roiban <adi at roiban.ro> wrote:
> 
> The @deprecated decorator (at leas on py2.7) does not work when paired @property
> 
> For deprecated instance variables, our deprecation policy recommend converting them into properties and emitted the  warning from there.
> It would be nice if we could use the standard @deprecated decorator here.
> 
> The problem is that when property are used the fget/fset are received by the @deprecated wrapper as functions and not as methods
> 
> Is there a way to get the class in which a property is defined... or there is no way to use the @deprecated decorator with the @property .. and we should create a dedicated deprecatedMember method which is called as a normal method. 

If you care about inheritance, the implementation is a little bit tricky, because you have to manually walk the class hierarchy looking for the attribute.  But conceptually it's pretty simple: just look at the type of 'oself' in the __get__ method of the returned descriptor.

Right now, @deprecated is hard-coded to assume a function, but it could be repurposed to work with specific other descriptor types reasonably easily.  Arbitrary descriptors might be hard, because it's not clear when to emit the message, but specific types like @property should be pretty straightforward with an instance check.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151122/312f34e2/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Nov 22 17:54:43 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 19:54:43 -0500
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
Message-ID: <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>


> On Nov 22, 2015, at 17:51, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> I've just (to my surprise) hit this. As I understand from searching
> around, AMP messages are limited to ~64k due to the length prefix
> being 16-bit. A change in my internal data being sent (using dicts
> rather than lists) kicked one of my messages to way over that limit.

I'm sorry that this was an unpleasant surprise.  I wish that we had a better way of getting this across up-front :-).  However, it seems like the length limit is doing its job in terms of constraining your protocol design to not have individual messages "hog" the wire...

> There's a bit of discussion here -
> http://twistedmatrix.com/pipermail/twisted-python/2014-November/028947.html
> 
> Is there an internal twisted solution planned, or should I go ahead
> and roll my own paging code? If the latter (as I strongly suspect),
> could I get some comments on this idea:-

Definitely the latter if you have a short time frame.  How big are your messages?  If your limit is still fairly small (5M, let's say) but much bigger than 64k there are other options you can use.

> Original amp.Command had a single argument (amp.ListOf(amp.String())
> and no response

> Modified amp.Command, 4 arguments and 1 response
> ID (sequentially generated by producer) - amp.Integer()
> CurPage - amp.Integer()
> TotalPage - amp.Integer()
> ActualData - amp.ListOf(amp.String())
> Response - RecievedPage - amp.Integer()

Implementing a paging API like this is exactly what the length limit is designed to encourage you to do - it is much more flexible, since you can request a subset of pages, and continue receiving things other than pages while the data is being streamed to you.

> Questions:-
> 1. ID is so the client can be sure not to concatenate different lists

This... is correct, but doesn't sound like a question.  Is it meant to be?

> 2. Do I need a response at all?

No.  You can tell AMP not to bother generating the protocol-level response by setting the requiresAnswer flag on your Command to False: <https://twistedmatrix.com/documents/15.4.0/api/twisted.protocols.amp.Command.html#requiresAnswer>

> 3. Should I attempt to plug as many list items as possible into each
> page (requires length checking of json-encoded strings and repeated
> encoding/checks) or just choose a suitable limit of list items (my
> current max length is about 200 characters and average is 71) of maybe
> 300 list items per message? My current list is about 1k items in all,
> and it's only going to get bigger.

Why are you encoding as _both_ JSON and AMP?

I'd say you should do the length-checking, because you still might end up with list items that are larger than expected if they're variable size.

> 4. I was intrigued by the mention of 'Tubes' in the link above. Found
> it here - https://tubes.readthedocs.org/en/latest/tube.html - should I
> be using that instead? I'm writing a homegrown app which will only
> really need (at this point) to communicate with itself and copies of
> itself, and settled with AMP as being a simple way of achieving that.

I would love it if you would help me test out and develop Tubes.  If it is a small homegrown app it might be a good use-case.  There are pros and cons: Tubes has higher test coverage and cleaner code since it was developed much more recently; but, it still has very limited functionality, badly broken areas, and no compatibility guarantees, because it's still somewhat experimental.

However, Tubes is a way of implementing protocols, whereas AMP is an implementation of a request/response protocol.  If you use Tubes, you'll need to do an implementation of AMP (or something like it) in order to issue requests and give responses.  If I were you, especially since you've already figured out paging, I would probably just stick with AMP and Twisted as-is.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151122/4e1f2ce9/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Nov 22 18:13:57 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 22 Nov 2015 20:13:57 -0500
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
Message-ID: <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>


> On Nov 22, 2015, at 16:31, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> Right now  twisted/runner/inetdtap.py has the following errors reported by pyflakes:
> 
> $ pyflakes twisted/runner/inetdtap.py
> twisted/runner/inetdtap.py:58: undefined name 'rpcVersions'
> twisted/runner/inetdtap.py:59: undefined name 'name'
> twisted/runner/inetdtap.py:62: undefined name 'p'
> twisted/runner/inetdtap.py:152: undefined name 'proto'
> 
> From what I can see from reading the code, RPCServer.startService is broken.
> 
> makeService is also broken for rpc/* services .
> 
> There are no tests for all this code.
> 
> Link for the code : 
> https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py <https://github.com/twisted/twisted/blob/trunk/twisted/runner/inetdtap.py>
> 
> ----------
> 
> I am working on getting the Twisted code clean of pyflakes errors/warnings so that contributors could run pyflakes check on their own branch, without relying on buildbot.

Thank you.  This would be absolutely great.

> I would like to clean the inetdtap.py module of pylakes warning but since it is broken and has no tests, I have no idea what this code is expected to do and how end users are expecting to use it. 

The purpose of inetdtap is to provide an 'inetd'-like server, to allow Twisted to invoke other programs to handle incoming sockets.  This is a useful thing as a "networking swiss army knife" tool, like netcat.  In fact, it does work, after a fashion; I wrote a file like this:

8123       stream  tcp  wait glyph  /bin/cat -

and then ran this:

put a blank line into 'rpc.conf', and then ran:

twistd -n inetd -f sampleinetd.conf -r rpc.conf 

and port 8123 properly became an echo server.

Now, in order to do this, you need a /etc/services file (this is hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky, and probably the one that your OS comes with is still broken anyway.  But this code can work if properly configured, and those parts can be fixed.

I haven't run this recently, but partially only because I basically forgot it existed :).  Thanks for the reminder.

> Does someone volunteer to fix it?

I'll gladly fix the parts that implement the possibly-useful functionality, although you don't need to touch those in order to fix the pyflakes warnings :).  The parts that are totally broken, RPCServicesConf, RPCServer, and the code that instantiates it, are useful only to NFS server implementors, and don't work at all no matter your configuration.  So I would delete the whole implementation just so someone will get a clear notification in case they were importing one of these names but not actually using them, deprecate the module attributes, and remove them in the next available removal cycle.  So basically just leave an empty Service subclass there just as a courtesy (since that is slightly more polite, and only a tiny bit harder than just deleting it).

> Otherwise, has anyone any objections against deprecating twisted/runner/inetdtap.py?
> Since it is broken, can we just remove it?

I hope my suggestion makes sense and is useful.  However if you'd really like to do the compat-breaking dance I won't object; I seriously doubt anyone is touching the RPC code.  I'd prefer you don't delete the whole module though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151122/0bd6ca26/attachment-0002.html>

From adi at roiban.ro  Mon Nov 23 02:29:10 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 11:29:10 +0200
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
 <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
Message-ID: <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>

On 23 November 2015 at 03:13, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

[snip]


> Thank you.  This would be absolutely great.
>

https://twistedmatrix.com/trac/ticket/8107 is waiting for review... and
should make this happen :)


> I would like to clean the inetdtap.py module of pylakes warning but since
> it is broken and has no tests, I have no idea what this code is expected to
> do and how end users are expecting to use it.
>
>
> The purpose of inetdtap is to provide an 'inetd'-like server, to allow
> Twisted to invoke other programs to handle incoming sockets.  This is a
> useful thing as a "networking swiss army knife" tool, like netcat.  In
> fact, it does work, after a fashion; I wrote a file like this:
>
> 8123       stream  tcp  wait glyph  /bin/cat -
>
> and then ran this:
>
> put a blank line into 'rpc.conf', and then ran:
>
> twistd -n inetd -f sampleinetd.conf -r rpc.conf
>
>
> and port 8123 properly became an echo server.
>
> Now, in order to do this, you need a /etc/services file (this is
> hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky,
> and probably the one that your OS comes with is still broken anyway.  But
> this code *can* work if properly configured, and those parts can be fixed.
>
> I haven't run this recently, but partially only because I basically forgot
> it existed :).  Thanks for the reminder.
>

Is this info already present in the project?

If not I will try to put this info somewhere in the project

[snip]


> I hope my suggestion makes sense and is useful.  However if you'd really
> like to do the compat-breaking dance I won't object; I seriously doubt
> anyone is touching the RPC code.  I'd prefer you don't delete the whole
> module though.
>
>
Done https://twistedmatrix.com/trac/ticket/8123

I will go with the deprecation part.

Thanks for the feedback.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151123/6dd22e64/attachment-0002.html>

From adi at roiban.ro  Mon Nov 23 05:30:53 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 14:30:53 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
 property methods
In-Reply-To: <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
Message-ID: <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>

On 23 November 2015 at 02:32, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 22, 2015, at 07:04, Adi Roiban <adi at roiban.ro> wrote:
>
> The @deprecated decorator (at leas on py2.7) does not work when paired
> @property
>
> For deprecated instance variables, our deprecation policy recommend
> converting them into properties and emitted the  warning from there.
> It would be nice if we could use the standard @deprecated decorator here.
>
> The problem is that when property are used the fget/fset are received by
> the @deprecated wrapper as functions and not as methods
>
> Is there a way to get the class in which a property is defined... or there
> is no way to use the @deprecated decorator with the @property .. and we
> should create a dedicated deprecatedMember method which is called as a
> normal method.
>
>
> If you care about inheritance, the implementation is a little bit tricky,
> because you have to manually walk the class hierarchy looking for the
> attribute.  But conceptually it's pretty simple: just look at the type of
> 'oself' in the __get__ method of the returned descriptor.
>
> Right now, @deprecated is hard-coded to assume a function, but it could be
> repurposed to work with specific other descriptor types reasonably easily.
> *Arbitrary* descriptors might be hard, because it's not clear when to
> emit the message, but specific types like @property should be pretty
> straightforward with an instance check.
>
> I think that we can go with a dedicated instance check for properties...
this is about the @deprecated decorator and using it together with the
deprecation policy for instance members.

I have created a dedicated ticket https://twistedmatrix.com/trac/ticket/8124


I still don't know how to fix it... I tried following property.__get__ and
property.getter and property.fget

>From what I understand of how Python works, at the time when the decorator
is called, the class is not yet created  / does not yet exists.

This will not work

class SomeClass(object):

    @deprecated(
        Version("Twisted", 16, 0, 0), 'the deferred returned by start()')
    @property
    def deferred(self):
        """
        DEPRECATED. Deferred fired when loop stops or fails.
        """
        return self._deferred

And I should use something like this

class SomeClass(object):

    @property
    def deferred(self):
        """
        DEPRECATED. Deferred fired when loop stops or fails.
        """
        deprecated(
            Version("Twisted", 16, 0, 0), 'the deferred returned by
start()')
        return self._deferred

---------


Will push the tests and will ask for help in the review queue.

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151123/0d637250/attachment-0002.html>

From adi at roiban.ro  Mon Nov 23 05:38:40 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 23 Nov 2015 14:38:40 +0200
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
 property methods
In-Reply-To: <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
 <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
Message-ID: <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>

>
>
>
> Will push the tests and will ask for help in the review queue.
>
> Thanks!
>
>
Another option is to fix @deprecated to call getDeprecationWarningString
when the method is called not when it is created.

Regards
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151123/98d26046/attachment-0002.html>

From cory at lukasa.co.uk  Mon Nov 23 07:32:28 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 23 Nov 2015 14:32:28 +0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <7F30544F-6B47-4F91-8B51-EA4F18C1D3B5@lukasa.co.uk>


> On 19 Nov 2015, at 11:50, Cory Benfield <cory at lukasa.co.uk> wrote:
> This seems super-gross but vaguely do-able, and we’ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.
> 
> All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I’m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we’ll see how it goes.
> 
> Cory
> 
> 


For those interested in how this is progressing, there’s a draft patch available showing some of the proposed direction of this work, at #7460. I’d like as much review as possible, so please weigh in: https://twistedmatrix.com/trac/ticket/7460

Cory
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151123/ca9e7745/attachment.sig>

From ngoonee.talk at gmail.com  Mon Nov 23 18:16:59 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 09:16:59 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
Message-ID: <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>

On Mon, Nov 23, 2015 at 8:54 AM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> I'm sorry that this was an unpleasant surprise.  I wish that we had a better
> way of getting this across up-front :-).  However, it seems like the length
> limit is doing its job in terms of constraining your protocol design to not
> have individual messages "hog" the wire...

Yes, that it did.

> Definitely the latter if you have a short time frame.  How big are your
> messages?  If your limit is still fairly small (5M, let's say) but much
> bigger than 64k there are other options you can use.

I don't foresee it getting over an MB or so (as the data is being read
from disk, so unlikely that network I/O will be the biggest bottleneck
in this case).

>> Questions:-
>> 1. ID is so the client can be sure not to concatenate different lists
>
> This... is correct, but doesn't sound like a question.  Is it meant to be?

Sorry, the real question is whether an ID is at all required. I'm not
using threads, and the concurrent AMP messages will be sent from a
single server process in a loop. Each client is guaranteed to have
only one server. In this situation, do I even need an ID?

> No.  You can tell AMP not to bother generating the protocol-level response
> by setting the requiresAnswer flag on your Command to False:
> <https://twistedmatrix.com/documents/15.4.0/api/twisted.protocols.amp.Command.html#requiresAnswer>

Thanks, right now I just have plenty of return {} everywhere. Does
requiresAnswer=False mean less bandwidth usage (no need to transmit an
empty dict)?

>> 3. Should I attempt to plug as many list items as possible into each
>> page (requires length checking of json-encoded strings and repeated
>> encoding/checks) or just choose a suitable limit of list items (my
>> current max length is about 200 characters and average is 71) of maybe
>> 300 list items per message? My current list is about 1k items in all,
>> and it's only going to get bigger.
>
>
> Why are you encoding as _both_ JSON and AMP?
>
> I'd say you should do the length-checking, because you still might end up
> with list items that are larger than expected if they're variable size.

I'm sending classes over the wire by json-encoding their __dict__.
Although now that you mentioned it, I started doing that because I
believed AMP to be constrained to ASCII strings (before I found
amp.Unicode()) and my classes will almost always have unicode data.
Looks like I can skip a step then, will test that out.

I'm trying not to do length-checking simply because I'm lazy (and
because I'm abstracting out all the twisted parts into an SPClient and
SPServer which handle this data conversion transparently to the
working code). In particular the 'best' ways I can think to do
length-checking is to either:-
1. Binary search for an 'optimal' size just under a limit (50k for
sake of argument)
2. Single check which splits the length by half (300>150>75 etc.)
Both would clutter up the transmission code more than I would like at
this point, and could probably be added in future on transmission side
without any change in recipient side code. So it's on the backburner.

> I would love it if you would help me test out and develop Tubes.  If it is a
> small homegrown app it might be a good use-case.  There are pros and cons:
> Tubes has higher test coverage and cleaner code since it was developed much
> more recently; but, it still has very limited functionality, badly broken
> areas, and no compatibility guarantees, because it's still somewhat
> experimental.
>
> However, Tubes is a way of implementing protocols, whereas AMP is an
> implementation of a request/response protocol.  If you use Tubes, you'll
> need to do an implementation of AMP (or something like it) in order to issue
> requests and give responses.  If I were you, especially since you've already
> figured out paging, I would probably just stick with AMP and Twisted as-is.

That's polite =). I'll keep it in mind. If there's a quick link
somewhere on 'badly broken area's I'd be interested, because without
knowing that it's hard to justify spending time there when I already
have something working with AMP. I especially like the idea of
streaming, but that'd require writing my code to accept data piecemeal
on the other end, and I can foresee that getting very messy very fast.



From ngoonee.talk at gmail.com  Mon Nov 23 19:58:03 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 10:58:03 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
Message-ID: <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>

On Tue, Nov 24, 2015 at 9:16 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> Thanks, right now I just have plenty of return {} everywhere. Does
> requiresAnswer=False mean less bandwidth usage (no need to transmit an
> empty dict)?

Having read the documentation a bit, it appears requiresAnswer=False
is a hint and I'd still have to return the correct response (in this
case an empty dict)

http://twistedmatrix.com/trac/ticket/1985 and in particular the
following comment by yourself:-

Responders for Commands defined not to require a response should
return a valid response nonetheless, because requiresAnswer is an
optimization hint that the client can specify, on any request whose
response it will not process, to optimize network traffic.

Looks like I'll update my clients to specify it then. Was thinking it
should be specified when defining message classes.



From ngoonee.talk at gmail.com  Mon Nov 23 20:03:41 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Tue, 24 Nov 2015 11:03:41 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
Message-ID: <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>

On Tue, Nov 24, 2015 at 10:58 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> On Tue, Nov 24, 2015 at 9:16 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>>
>> Thanks, right now I just have plenty of return {} everywhere. Does
>> requiresAnswer=False mean less bandwidth usage (no need to transmit an
>> empty dict)?
>
> Having read the documentation a bit, it appears requiresAnswer=False
> is a hint and I'd still have to return the correct response (in this
> case an empty dict)
>
> http://twistedmatrix.com/trac/ticket/1985 and in particular the
> following comment by yourself:-
>
> Responders for Commands defined not to require a response should
> return a valid response nonetheless, because requiresAnswer is an
> optimization hint that the client can specify, on any request whose
> response it will not process, to optimize network traffic.
>
> Looks like I'll update my clients to specify it then. Was thinking it
> should be specified when defining message classes.

And it looks like I do have to specify it in defining message classes.

And furthermore that when I do that, callRemote no longer returns a
deferred (which makes sense, really) and instead gets a None. One more
check before I add my default errBacks then. Optimised network traffic
sounds positive, at the least (I assume this means one less
transmission since it effectively makes the AMP one-way for the
messages which have this set to False).



From glyph at twistedmatrix.com  Mon Nov 23 22:27:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Nov 2015 00:27:30 -0500
Subject: [Twisted-Python] How to get the class of the wrapped fget/fset
	property methods
In-Reply-To: <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>
References: <CAFycZ9eTRO5Ao0wAnybedhAdrcbZuXYd-0h4D9G7-0Hz4Uo0gg@mail.gmail.com>
 <6D0C62E4-7955-4295-95CD-96A863AE58A4@twistedmatrix.com>
 <CAFycZ9dD7sop-j8kiw6_jO=28U5CvQkH772a+d-TbgKAo-dTXA@mail.gmail.com>
 <CAFycZ9fqq=ye79DdcfP5bRx7HugiBsPw7=Jt9S60Y9Yb9ffESQ@mail.gmail.com>
Message-ID: <B923CC92-5C9D-4508-9862-81DAE201BB32@twistedmatrix.com>


> On Nov 23, 2015, at 07:38, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> Will push the tests and will ask for help in the review queue.
> 
> Thanks!
> 
> 
> Another option is to fix @deprecated to call getDeprecationWarningString when the method is called not when it is created. 

I think you mean the other way around? property() objects are not necessarily called.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151124/43c0af2f/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 23 22:42:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 24 Nov 2015 00:42:25 -0500
Subject: [Twisted-Python] twisted/runner/inetdtap.py pyflakes warnings
	cleanup
In-Reply-To: <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>
References: <CAFycZ9fnx2yn9kNN+G-gVUeCYrEtWq3_p7O2VhxGuR_6gw1iKA@mail.gmail.com>
 <24A3BC21-9202-4CCE-9AEB-C1D98E11257B@twistedmatrix.com>
 <CAFycZ9fhiqPmQG4Lir8rK-2Q1XZiUuogcyHv1WFHQvoCY+npgw@mail.gmail.com>
Message-ID: <FBA29BF1-E63F-444E-92D7-1CE9841A6FA3@twistedmatrix.com>


> On Nov 23, 2015, at 04:29, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> On 23 November 2015 at 03:13, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> [snip]
> 
> 
> Thank you.  This would be absolutely great.
> 
> https://twistedmatrix.com/trac/ticket/8107 <https://twistedmatrix.com/trac/ticket/8107> is waiting for review... and should make this happen :)

Cool.  No promises on the review but I have it in good authority the queue is quite short lately :).

>  
>> I would like to clean the inetdtap.py module of pylakes warning but since it is broken and has no tests, I have no idea what this code is expected to do and how end users are expecting to use it. 
> 
> The purpose of inetdtap is to provide an 'inetd'-like server, to allow Twisted to invoke other programs to handle incoming sockets.  This is a useful thing as a "networking swiss army knife" tool, like netcat.  In fact, it does work, after a fashion; I wrote a file like this:
> 
> 8123       stream  tcp  wait glyph  /bin/cat -
> 
> and then ran this:
> 
> put a blank line into 'rpc.conf', and then ran:
> 
> twistd -n inetd -f sampleinetd.conf -r rpc.conf 
> 
> and port 8123 properly became an echo server.
> 
> Now, in order to do this, you need a /etc/services file (this is hard-coded) that can be parsed by ServicesConf, which is _extremely_ picky, and probably the one that your OS comes with is still broken anyway.  But this code can work if properly configured, and those parts can be fixed.
> 
> I haven't run this recently, but partially only because I basically forgot it existed :).  Thanks for the reminder.
> 
> Is this info already present in the project? 
> 
> If not I will try to put this info somewhere in the project 

It's in `twistd --help´; I'm not sure where else it belongs.

> [snip]
>  
> I hope my suggestion makes sense and is useful.  However if you'd really like to do the compat-breaking dance I won't object; I seriously doubt anyone is touching the RPC code.  I'd prefer you don't delete the whole module though.
> 
> 
> Done https://twistedmatrix.com/trac/ticket/8123 <https://twistedmatrix.com/trac/ticket/8123>
> 
> I will go with the deprecation part.
> 
> Thanks for the feedback.
> 
> -- 
> Adi Roiban
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151124/e82189f2/attachment-0002.html>

From ngoonee.talk at gmail.com  Wed Nov 25 02:54:51 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Wed, 25 Nov 2015 17:54:51 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
Message-ID: <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>

On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> And furthermore that when I do that, callRemote no longer returns a
> deferred (which makes sense, really) and instead gets a None. One more
> check before I add my default errBacks then. Optimised network traffic
> sounds positive, at the least (I assume this means one less
> transmission since it effectively makes the AMP one-way for the
> messages which have this set to False).

Just realized, requiresAnswer=False means I can't add errBacks, which
means there's no way to handle a receiver-side error. Is this correct?



From hawkowl at atleastfornow.net  Wed Nov 25 03:55:31 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 25 Nov 2015 18:55:31 +0800
Subject: [Twisted-Python] Twisted 15.5.0 Prerelease 2 Announcement
Message-ID: <96466E47-0BA9-48B8-B472-F08000D1F040@atleastfornow.net>

Hi everyone,

Twisted 15.5.0pre2 is now available for download. This includes a bugfix for a regression in 15.5 which prevents Twisted Web's client from doing requests to raw IPv6 addresses.

You can find the new release and the NEWS file at https://twistedmatrix.com/Releases/pre/15.5.0pre2/. Please test it! If no more issues are found, 15.5 will release sometime at the end of this week.

Regards,
Amber Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151125/4c299ae3/attachment.sig>

From pzverr at gmail.com  Thu Nov 26 06:29:05 2015
From: pzverr at gmail.com (Pavel Zverev)
Date: Thu, 26 Nov 2015 16:29:05 +0300
Subject: [Twisted-Python] Question for obtaining mac-address
Message-ID: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>

Have nice day, developers!

I am a beginner python developer, and recently I came across the Twisted
framework, I was interested in whether I get the MAC-address of the client
connected to the network, similar twisted.web.http.Request.getClientIP.

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151126/34efab4f/attachment-0002.html>

From cory at lukasa.co.uk  Thu Nov 26 09:04:20 2015
From: cory at lukasa.co.uk (Cory Benfield)
Date: Thu, 26 Nov 2015 16:04:20 +0000
Subject: [Twisted-Python] Question for obtaining mac-address
In-Reply-To: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>
References: <CAGoNTpHEm=WrU35t7M+Va277O1Znt11-ktQ76gL29ARvJjuKWQ@mail.gmail.com>
Message-ID: <36858CE3-3270-48E4-846E-EEB11E7C6F6D@lukasa.co.uk>


> On 26 Nov 2015, at 13:29, Pavel Zverev <pzverr at gmail.com> wrote:
> 
> Have nice day, developers!
> 
> I am a beginner python developer, and recently I came across the Twisted framework, I was interested in whether I get the MAC-address of the client connected to the network, similar twisted.web.http.Request.getClientIP.

If you’re trying to get the MAC address of the client from an IP connection, then this is basically not possible. Once the packet has been handled as an IP packet, the MAC address is simply not used anymore. This is primarily because IP packets can cross layer 3 boundaries, so the MAC address from which a given IP packet arrived is potentially entirely unrelated to the MAC address of the source machine.

Generally speaking, I do not believe the socket layer provides any mechanism for obtaining the MAC address for the remote peer on a socket of type AF_INET: it’s just not relevant information.

Assuming you’re restricting yourself to the case where the client is on the same layer 2 broadcast domain as the server (again, hardly a guaranteed state of affairs), then the easiest way to obtain the MAC address is actually to grab it out of your machine’s ARP cache. If you execute `arp -a` (either in a shell or a Python subprocess), you will get access to the ARP cache on your machine which you can use to locate the MAC address for a given IP. This of course is IPv4 specific (ARP does not exist for IPv6): for IPv6 you’d want to use `ip -6 neigh show` (`ip neigh show` also works for ARP but provides quite a lot of info).

Cory

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151126/69f66750/attachment.sig>

From p.mayers at imperial.ac.uk  Fri Nov 27 05:10:37 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 12:10:37 +0000
Subject: [Twisted-Python] doc breakage
Message-ID: <5658483D.5060505@imperial.ac.uk>

Does this look right?

https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html

Looks like docs for logPrefix has stomped on docs for all the other 
interface methods?



From pzverr at gmail.com  Fri Nov 27 05:23:16 2015
From: pzverr at gmail.com (Pavel Zverev)
Date: Fri, 27 Nov 2015 15:23:16 +0300
Subject: [Twisted-Python] doc breakage
In-Reply-To: <5658483D.5060505@imperial.ac.uk>
References: <5658483D.5060505@imperial.ac.uk>
Message-ID: <CAGoNTpFr5AiR4XPM8ieVA4WR4=2MDS2zawj6v6LGsMd3DBSyNQ@mail.gmail.com>

Thanks.

I see doc only for this
https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IAddress.html
interface .

Sorry, i don`t understand, What is this prefix ?

2015-11-27 15:10 GMT+03:00 Phil Mayers <p.mayers at imperial.ac.uk>:

> Does this look right?
>
>
> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>
> Looks like docs for logPrefix has stomped on docs for all the other
> interface methods?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Зверев Павел

+7 926-116-0819

zpavel.ru
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151127/6f50083f/attachment-0002.html>

From jon at multani.info  Fri Nov 27 07:05:35 2015
From: jon at multani.info (Jonathan Ballet)
Date: Fri, 27 Nov 2015 15:05:35 +0100
Subject: [Twisted-Python] Writing a low-level network debugging tool
Message-ID: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>

Hi all,

I'm trying to toubleshoot network connectivity issues we have in one of 
our office and I would like to monitor some metrics which seems to be 
relevant for us, especially when trying to open TCP connections towards 
external endpoints.

In particular, I'm looking for a way to get the following information 
(let's say I want to monitor the connectivity towards the swisscom.com, 
port 80 using TCP):

* how long does it take to resolv the domain name to (at least) one of 
its IP address
   - against a specified name server or using the system configured 
servers
   - how many tries did it require
     * if there were several tries, the timing of each ones

* how long does it take to get the first bytes of the endpoint
   - how long does it take to complete the TCP connection handshake
   - the status of the packets exchanged (how many retries, how many 
packets lost, etc.)

It's not exactly the same, but the curl option --write-out allows to get 
this kind of values (especially time_namelookup, time_connect, 
time_pretransfer, time_starttransfer and time_total) but I would like to 
have more flexibility and more in-depth informations (like the state of 
the packets exchanged, etc.)

How far can I do this kind of things with Twisted? I know I can somewhat 
easily get the timings of the name resolution, the TCP connection 
handshake also and the time to first byte(s), but what about the 
packets? I haven't look at the code of Twisted Names yet, but if it's 
doing the DNS request by itself, I may be able to plug-in somewhere and 
have my request counter and the timers associated, but I'm not sure if 
the underlying details of the TCP protocol are exposed to the upper 
layer such as Twisted?

Thanks for the help!

  Jonathan



From p.mayers at imperial.ac.uk  Fri Nov 27 07:39:22 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 14:39:22 +0000
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
Message-ID: <56586B1A.6090200@imperial.ac.uk>

On 27/11/15 14:05, Jonathan Ballet wrote:

> * how long does it take to resolv the domain name to (at least) one of
> its IP address
>    - against a specified name server or using the system configured servers

That is relatively straightforward.

>    - how many tries did it require
>      * if there were several tries, the timing of each ones

Typically, application-layer code doesn't retry a DNS lookup; rather the 
c or other runtime will handle this, for example getaddrinfo() in glibc, 
according to settings read from /etc/resolv.conf or compiled-in defaults.

So it depends on whether you want to emulate "typical" application code, 
a specific application stack that may or may not do it's own resolution 
(e.g. modern browsers) or something else.

>
> * how long does it take to get the first bytes of the endpoint
>    - how long does it take to complete the TCP connection handshake
>    - the status of the packets exchanged (how many retries, how many
> packets lost, etc.)

Some of this is available in platform-specific APIs e.g. SIOCGSTAMP and 
TCP_INFO socket options available on Linux.

In general, any timings you make based on return of control from kernel 
will include error relating to system/scheduling issues. If you're 
concerned about getting raw, on-the-wire timings, this is extremely 
difficult without being in-kernel, and even then various issues - TCP 
offload for example - can end up hiding data from you.

> How far can I do this kind of things with Twisted? I know I can somewhat
> easily get the timings of the name resolution, the TCP connection
> handshake also and the time to first byte(s), but what about the
> packets? I haven't look at the code of Twisted Names yet, but if it's
> doing the DNS request by itself, I may be able to plug-in somewhere and
> have my request counter and the timers associated, but I'm not sure if
> the underlying details of the TCP protocol are exposed to the upper
> layer such as Twisted?

Only via platform-specific options.

To do this kind of thing "reliably", you'd need to reimplement TCP in 
user-space.

But the info above may be a helpful start.



From p.mayers at imperial.ac.uk  Fri Nov 27 07:42:30 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Nov 2015 14:42:30 +0000
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <56586B1A.6090200@imperial.ac.uk>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
 <56586B1A.6090200@imperial.ac.uk>
Message-ID: <56586BD6.9090006@imperial.ac.uk>

On 27/11/15 14:39, Phil Mayers wrote:

> But the info above may be a helpful start.
>

You may also want to look at TCP_CC_INFO. See the kernel source:

https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/net/ipv4/tcp.c?id=refs/tags/v4.4-rc2

...for an idea of what else is available. Be aware some of these are 
relatively new.



From hawkowl at atleastfornow.net  Fri Nov 27 23:39:55 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 28 Nov 2015 14:39:55 +0800
Subject: [Twisted-Python] doc breakage
In-Reply-To: <5658483D.5060505@imperial.ac.uk>
References: <5658483D.5060505@imperial.ac.uk>
Message-ID: <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>


> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> Does this look right?
> 
> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
> 
> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151128/59e5b026/attachment.sig>

From glyph at twistedmatrix.com  Sat Nov 28 00:04:35 2015
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 28 Nov 2015 02:04:35 -0500
Subject: [Twisted-Python] doc breakage
In-Reply-To: <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
References: <5658483D.5060505@imperial.ac.uk>
 <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
Message-ID: <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>


> On Nov 28, 2015, at 1:39 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> 
>> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>> 
>> Does this look right?
>> 
>> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>> 
>> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!

Do you happen to have a link to the bug?
> 



From hawkowl at atleastfornow.net  Sat Nov 28 00:08:37 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sat, 28 Nov 2015 15:08:37 +0800
Subject: [Twisted-Python] doc breakage
In-Reply-To: <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>
References: <5658483D.5060505@imperial.ac.uk>
 <8BDE9233-4A91-43AC-805C-95BE57996E18@atleastfornow.net>
 <14BB0324-5848-4DCA-91E2-C324A0093ED8@twistedmatrix.com>
Message-ID: <E9F4436E-D345-4B14-9E19-A9B17D530A0C@atleastfornow.net>


> On 28 Nov 2015, at 15:04, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Nov 28, 2015, at 1:39 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
>> 
>> 
>>> On 27 Nov 2015, at 20:10, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>> 
>>> Does this look right?
>>> 
>>> https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReadWriteDescriptor.html
>>> 
>>> Looks like docs for logPrefix has stomped on docs for all the other interface methods?
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> Yeah, this is a bug in PyDoctor we haven't got to the bottom of... sorry!
> 
> Do you happen to have a link to the bug?

Yep!

https://github.com/twisted/pydoctor/issues/10

The multiple inheritance is messing things up...

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151128/4fbb7987/attachment.sig>

From glyph at twistedmatrix.com  Sat Nov 28 07:41:43 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Nov 2015 09:41:43 -0500
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
 <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
Message-ID: <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>


> On Nov 25, 2015, at 04:54, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
> 
> On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>> And furthermore that when I do that, callRemote no longer returns a
>> deferred (which makes sense, really) and instead gets a None. One more
>> check before I add my default errBacks then. Optimised network traffic
>> sounds positive, at the least (I assume this means one less
>> transmission since it effectively makes the AMP one-way for the
>> messages which have this set to False).
> 
> Just realized, requiresAnswer=False means I can't add errBacks, which
> means there's no way to handle a receiver-side error. Is this correct?

That is correct.  But you shouldn't want to handle errors there :-).  Don't think of a requiresAnswer=False command as an optimization; instead, think of it as a piece of information being relayed.

For example; consider an HTTP stream.  The client sends a request.  If the server has an error, it sends an error code.  Then, the server sends the entity-body, one chunk at a time.

The client has to process each of those chunks one after another.  If the server sends a chunk and the client encounters an error, there's nothing for the server to do; the client has no way to communicate it and it can just disconnect.  You would use requiresAnswer=False (as you are already doing in your case) to send a chunk of data like those entity-body chunks, which ought not to be a message that... requires an answer.  It's just a way of encoding some data on the connection.

Make sense?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151128/5139c6cb/attachment-0002.html>

From ngoonee.talk at gmail.com  Sat Nov 28 13:03:09 2015
From: ngoonee.talk at gmail.com (Oon-Ee Ng)
Date: Sun, 29 Nov 2015 04:03:09 +0800
Subject: [Twisted-Python] AMP message length limit
In-Reply-To: <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>
References: <CAGQ70eu3wZHC7dJ-VMfMrv7VtyQng+kYUzKq9Ge2kS-amZWLfA@mail.gmail.com>
 <0B52EA8D-F587-47E6-933C-595073493486@twistedmatrix.com>
 <CAGQ70eu_5+ot5i_xbx5fqXXSUzWovNpC3HAp-Jp8pHByv5RiNw@mail.gmail.com>
 <CAGQ70etLtpL-EKZxdRVhMD38Oa+SeJZstY4fo4mE5B1kOmupcg@mail.gmail.com>
 <CAGQ70evE6MBYw4ngKyWbGU+Zte4Ka39Laub6HUYJqUFkjmG9=w@mail.gmail.com>
 <CAGQ70evpqGcY-ebrWy7H8Ac1cfTjhAiktYO5byCP355fOMtcWQ@mail.gmail.com>
 <C321475A-E8B3-4368-9F3B-4D827392D864@twistedmatrix.com>
Message-ID: <CAGQ70ev3Hug1SDt9xkKps7qPPZ0dm56maKy=Qda7Eh-ze2P5kw@mail.gmail.com>

On Sat, Nov 28, 2015 at 10:41 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
> On Nov 25, 2015, at 04:54, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> On Tue, Nov 24, 2015 at 11:03 AM, Oon-Ee Ng <ngoonee.talk at gmail.com> wrote:
>
> And furthermore that when I do that, callRemote no longer returns a
> deferred (which makes sense, really) and instead gets a None. One more
> check before I add my default errBacks then. Optimised network traffic
> sounds positive, at the least (I assume this means one less
> transmission since it effectively makes the AMP one-way for the
> messages which have this set to False).
>
>
> Just realized, requiresAnswer=False means I can't add errBacks, which
> means there's no way to handle a receiver-side error. Is this correct?
>
>
> That is correct.  But you shouldn't want to handle errors there :-).  Don't
> think of a requiresAnswer=False command as an optimization; instead, think
> of it as a piece of information being relayed.
>
> For example; consider an HTTP stream.  The client sends a request.  If the
> server has an error, it sends an error code.  Then, the server sends the
> entity-body, one chunk at a time.
>
> The client has to process each of those chunks one after another.  If the
> server sends a chunk and the client encounters an error, there's nothing for
> the server to do; the client has no way to communicate it and it can just
> disconnect.  You would use requiresAnswer=False (as you are already doing in
> your case) to send a chunk of data like those entity-body chunks, which
> ought not to be a message that... requires an answer.  It's just a way of
> encoding some data on the connection.
>
> Make sense?

Yeah, especially in the context of a HTTP stream. In other words
requiresAnswer=False is just a way of labelling a messages as
'fire-and-forget'.

I'll have to think a bit more about which of my messages actually need
answers then. For some, I do need an indication of success (or
failure), if only so I can try re-sending. Those won't get the flag
then.



From hawkowl at atleastfornow.net  Sat Nov 28 21:48:27 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Sun, 29 Nov 2015 12:48:27 +0800
Subject: [Twisted-Python] Twisted 15.5 Release Announcement
Message-ID: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>

On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.5!

The sixth (!!) release in 2015 has quite a few goodies in it -- incrementalism is the name of the game here, and everything is just a little better than it was before. Some of the highlights of this release are:

- Python 3.5 support on POSIX was added, and Python 2.6 support was dropped. We also only support x64 Python on Windows 7 now.
- More than nine additional modules have been ported to Python 3, ranging from Twisted Web's Agent and downloadPage, twisted.python.logfile, and many others, as well as...
- twistd is ported to Python 3, and its first plugin, web, is ported.
- twisted.python.url, a new URL/IRI abstraction, has been introduced to answer the question "just what IS a URL" in Twisted, once and for all.
- NPN and ALPN support has been added to Twisted's TLS implementation, paving the way for HTTP/2.
- Conch now supports the DH group14-sha1 and group-exchange-sha256 key exchange algorithms, as well as hmac-sha2-256 and hmac-sha2-512 MAC algorithms. Conch also works nicer with newer OpenSSH implementations.
- Twisted's IRC support now has a sendCommand() method, which enables the use of sending messages with tags.
- 55+ closed tickets overall.

For more information, check the NEWS file (link provided below).

You can find the downloads at <https://pypi.python.org/pypi/Twisted> (or alternatively <http://twistedmatrix.com/trac/wiki/Downloads>) .
The NEWS file is also available at <https://github.com/twisted/twisted/blob/twisted-15.5.0/NEWS>.

Also worth noting is the two Twisted Software Foundation fellows -- Adi Roiban and myself -- who have been able to dedicate time to reviewing tickets and generally pushing things along in the process. We're funded by the Twisted Software Foundation, which is, in turn, funded by donators and sponsors -- potentially like you! If you would like to know how you can assist in the continued funding of the Fellowship program, see our website: https://twistedmatrix.com/trac/wiki/TwistedSoftwareFoundation#BenefitsofSponsorship

Many thanks to everyone who had a part in this release - the supporters of the Twisted Software Foundation, the developers who contributed code as well as documentation, and all the people building great things with Twisted!

Twisted Regards,

Amber "Hawkie" Brown
Twisted Release Manager, Twisted Fellow
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151129/c3a05382/attachment.sig>

From glyph at twistedmatrix.com  Sun Nov 29 00:26:50 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 28 Nov 2015 23:26:50 -0800
Subject: [Twisted-Python] [Twisted-web] Twisted 15.5 Release Announcement
In-Reply-To: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>
References: <D88C9303-5249-4BA2-A91D-0F3604DC576E@atleastfornow.net>
Message-ID: <13563A1B-E027-40DA-BEC8-24B7DE2FB052@twistedmatrix.com>


> On Nov 28, 2015, at 8:48 PM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> On behalf of Twisted Matrix Laboratories, I am honoured to announce the release of Twisted 15.5!

Thanks again, Amber, for shepherding yet another significant release through the process.

> - twistd is ported to Python 3, and its first plugin, web, is ported.

This is a very, very big deal for users who care about py3, and I hope to see the pace of the remaining codebase porting accelerate even more, now that the core infrastructure allowing people to actually run their applications top-to-bottom on py3 is available.

-glyph




From adi at roiban.ro  Sun Nov 29 04:17:57 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 29 Nov 2015 13:17:57 +0200
Subject: [Twisted-Python] Implementing server ESMTP extensions in Twisted
Message-ID: <CAFycZ9d1O6e+kKqg2xd6LLG2mf2n2hZKOD=oOrfoxvQ=ypz9ig@mail.gmail.com>

So,

We have patch for review which works towards allowing the current
STMP/ESTMP server implementation to be sublcassed in order to implement
ESMTP extensions.

Here is the ticket
https://twistedmatrix.com/trac/ticket/8128

If you care about SMTP/ESMTP please send your feedback, here or on the
ticket.

I am not an SMTP/ESMTP expert and I need help in reviewing this ticket.

-------

My main questions regarding ESTMP extensions are :

1. Do we really want to implement them using sublcassing or using
composition/interfaces/components ... or something else?

------

2. From https://en.wikipedia.org/wiki/Extended_SMTP#Extensions

Each service extension is defined in an approved format in subsequent RFCs
and registered with the IANA.

Are there ESTMP servers in the wild which provide extensions which are not
defined by RFCs?

Do we want to encourage multiple implementation for the same extensions or
encourage people to collaborate toward a single implementation which is
hosted by Twisted?

--------

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151129/5f1e11a4/attachment-0002.html>

From commercials24 at yahoo.de  Sun Nov 29 06:43:52 2015
From: commercials24 at yahoo.de (peter)
Date: Sun, 29 Nov 2015 14:43:52 +0100
Subject: [Twisted-Python] twisted.web response.py questions
Message-ID: <565B0118.5060408@yahoo.de>

hi,


looking over:
https://twistedmatrix.com/documents/14.0.2/_downloads/response.py


im not really sure why one would use the line:

self.remaining  =  1024  *  10


this suggest to me that one knew what kind of page size was 
expected...but what if you dont?
wouldnt it make more sense to use someting like this:

def dataReceived(self, bytes):
         self.page_content = self.page_content + bytes


this would sum up all the data until connectionLost is called.
and in connectionLost():

def  connectionLost(self,  reason):
         print  'Finished receiving body:',  reason.getErrorMessage()
         self.finished.callback(self.page_content)


and then print it?




also i dont get why one would use

  return  finished


in cbRequest. where is this finished returned to?
its called via:

d.addCallback(cbRequest)

isnt the result from cbRequest thrown away?
i would expect the line to read:
new_deferred = d.addCallback(cbRequest)



thx for your answers








From adi at roiban.ro  Sun Nov 29 09:20:36 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 29 Nov 2015 18:20:36 +0200
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>

Hi Craig,

Sorry for the delay and many thanks for your plan.

I have also sent your plan to the Unofficial Twisted Software Foundation.

>From what I can see we are stuck in bureaucratic process.

The plan needs to be approved by Unofficial Twisted Software Foundation and
the Unofficial Twisted Software Foundation want to have a single plan
submitted for approval.

We now have 3 plans : Amber's, Craig's and mine..... and we see which plan
to be sent to the Unofficial Twisted Software Foundation.

Also the Unofficial Twisted Software Foundation will only consider plans
for GitHub.com.

No GitLab/Bitbucket/Jira/Redmime....etc

We can try to keep tickets/wiki/website on Trac and only move the main repo
+ PR + hooks to GitHub.

This should allow us to get rid of SVN and build the infrastructure on web
hooks. Later we can consider migration to other tools... or extending the
GitHub.com usage to Issues / Wiki / GitHub Pages...etc

Until now we failed to coordinate toward creating a single plan and besides
Glyph's comments on IRC, I have not received any feedback from the Unofficial
Twisted Software Foundation for any of the plans.

Can we plan an IRC/Google Hangouts meeting to discuss the plan?

It would be great if someone from the Unofficial Twisted Software
Foundation could also join.

If you would like to see Twisted on Git and GitHub please consider joining
the meeting.

I have created this Doodle poll to help us schedule the date and time for
the meeting - http://doodle.com/poll/4ys8m8qakav9u9f9

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151129/9cc44406/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Nov 30 07:49:41 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 30 Nov 2015 22:49:41 +0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>

Hi Craig,

Thanks for this, sharing your past experience is invaluable :)

I've gone through and thought about it a bit, and rewritten it into https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.rst -- it is basically your plan, with some added notes about Twisted Infra specific parts. I've skimmed over the specific details, since I feel that going too in-depth in such a plan will just be wasted effort as unknown issues arise, but with enough structure that we have a clear set of overarching goals for each step.

The migration will have a handful of policy changes that we will have to resolve -- such as ensuring that all merges have a topfile -- which aren't possible under a GitHub based system. I think these issues will just involve a lot of scrutiny and double checking during the transitional period until we are confident that we are enforcing our existing quality and process standards.

If anyone has any suggestions, or any more invaluable experience to share, please do :)

- Amber


> On 18 Nov 2015, at 07:48, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> For now, the funds were raised to migrate to GitHub, so we can not use
> them to do other things.
> 
> We will stay on Trac for issues... at least for now.
> 
> I have no idea how we can migrate to any issue tracker without losing
> data if we don't have full access to the database.
> 
> It is possible to migrate to another issue tracker and not lose
> data.  I've done Trac -> Redmine, and it works, but there was an existing migration
> script I could use.
> For migrating to a cloud based bug tracker, you would need to take every user
> in the existing Trac database, and see if there would be a way to map
> the existing users to the cloud database, such as GitHub.  It's a lot of work, but possible.
> However, for the scope of this project, if staying with Trac for issues is what is required, that is fine.
> 
> 
> We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
> 
> 
> OK.
> 
> So based on what you have listed, I would say that most of the work will be
> working with Git post commit hooks.
> 
> I would say the plan should be something like this.
> 
> A.1  https://github.com/twisted/twisted will be the "repository of truth"
>        for Twisted.
>            -> Twisted releases will be done from GitHub
>            -> the Twisted developers who are now "core committers" for SVN, must be
>                given access to be "core committers" to https://github.com/twisted/twisted
> 
> A.2  On the Trac server, a local git mirror of the GitHub must be set up.
>        Every bug tracker I've seen that integrates with git needs a local mirror of the repo
>         in order to parse the git history in order to update the bug database.
>         This mirror should be read-only, and the only thing updating this repo should be the Trac GitHub plugin.
> 
> A.3  On the Trac server, this plugin must be installed: https://github.com/trac-hacks/trac-github
> 
> A.4  On the GitHub server, a post-commit web hook must be configured.  The workflow will be this:
> 
>            [core committer does push to https://github.com/twisted/twisted]
>              -> [post commit GitHub hook will be called to poke the Trac GitHub plugin]
>              -> [Trac GitHub plugin will update the local git repo on the Trac server]
>              -> [Trac GitHub will parse the git history for new commits and update tickets]
> 
> I would recommend that steps (1) - (4) be made to work in a staging environment, with a separate
> GitHub repo, and a separate copy of the Trac database.  That way, you can test things out without derailing
> Twisted developers.  When you are confident that this workflow works, then the transition plan will be something
> like the following.
> 
> B.1   Send an e-mail to the mailing list and pick one day for the maintenance window.
>         This will warn folks when they should take a holiday from Twisted work. :)
> 
> B.2   When maintenance is about to begin, send a [HEADSUP] mail saying that repo will be unavailable.
> 
> B.3  Create Subversion pre-commit hook to disable all commits to
>          Subversion:
>               http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only
> 
> B.4  Set up steps A.1 - A.4
> 
> B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to https://github.com/twisted/twisted, and
>          make sure that Trac works.
> 
> B.6  Once the Twisted core team are satisified that everything works, send an e-mail to the mailing list
>         that the maintenance window is over, and GitHub is now where the action is!
> 
> B.7  Update all wiki documentation to change all references to getting code from Subversion,
>          to getting code from GitHub.
> 
> B.8  Update all systems which used Subversion to use GitHub.  For example, buildbots.
> 
> --
> Craig
> 
> 
> --
> Craig
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151130/98a88eae/attachment.sig>

From adi at roiban.ro  Mon Nov 30 08:37:56 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 30 Nov 2015 17:37:56 +0200
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
Message-ID: <CAFycZ9fLo8qsxM10VzqTefo-ruhV_OiZ8F_F2PKrX0TdQ1AWYw@mail.gmail.com>

On 30 November 2015 at 16:49, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

> Hi Craig,
>
> Thanks for this, sharing your past experience is invaluable :)
>
> I've gone through and thought about it a bit, and rewritten it into
> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.rst
> -- it is basically your plan, with some added notes about Twisted Infra
> specific parts. I've skimmed over the specific details, since I feel that
> going too in-depth in such a plan will just be wasted effort as unknown
> issues arise, but with enough structure that we have a clear set of
> overarching goals for each step.
>

[snit]

+1 for "master" as the main branch.

+1 for GitHub logins but I have no idea how we could migrate existing
accounts.

This is more like a Git migration plan with main repo on GitHub, but I
think that this should be the first step...and focus on this, before
looking at PR and GitHub issues.

I don't see any note about the code browser and how to migrate narrative
and apidocs source code links.

The Internet is full of links like
http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/web/http.py#L475

I think that tracext.github.GitHubBrowser only redirects changeset ... and
from the docs only new changesets

I was hoping that as part of the git migration, we can implement a custom
Twisted web resource which will handle all the redirections to GitHub code
browser

Since Twisted trunk merges are not busy, I don't think that we need to
worry to much about breaking the dev process... I am more worried about
failing to gather the merges required to create the waiting/testing queue.

--
Adi



>
>
> > On 18 Nov 2015, at 07:48, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
> >
> > On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > For now, the funds were raised to migrate to GitHub, so we can not use
> > them to do other things.
> >
> > We will stay on Trac for issues... at least for now.
> >
> > I have no idea how we can migrate to any issue tracker without losing
> > data if we don't have full access to the database.
> >
> > It is possible to migrate to another issue tracker and not lose
> > data.  I've done Trac -> Redmine, and it works, but there was an
> existing migration
> > script I could use.
> > For migrating to a cloud based bug tracker, you would need to take every
> user
> > in the existing Trac database, and see if there would be a way to map
> > the existing users to the cloud database, such as GitHub.  It's a lot of
> work, but possible.
> > However, for the scope of this project, if staying with Trac for issues
> is what is required, that is fine.
> >
> >
> > We don't plan to migrate to GitHub Issues / GitHub Wiki / GitHub Pages
> >
> >
> > OK.
> >
> > So based on what you have listed, I would say that most of the work will
> be
> > working with Git post commit hooks.
> >
> > I would say the plan should be something like this.
> >
> > A.1  https://github.com/twisted/twisted will be the "repository of
> truth"
> >        for Twisted.
> >            -> Twisted releases will be done from GitHub
> >            -> the Twisted developers who are now "core committers" for
> SVN, must be
> >                given access to be "core committers" to
> https://github.com/twisted/twisted
> >
> > A.2  On the Trac server, a local git mirror of the GitHub must be set up.
> >        Every bug tracker I've seen that integrates with git needs a
> local mirror of the repo
> >         in order to parse the git history in order to update the bug
> database.
> >         This mirror should be read-only, and the only thing updating
> this repo should be the Trac GitHub plugin.
> >
> > A.3  On the Trac server, this plugin must be installed:
> https://github.com/trac-hacks/trac-github
> >
> > A.4  On the GitHub server, a post-commit web hook must be configured.
> The workflow will be this:
> >
> >            [core committer does push to
> https://github.com/twisted/twisted]
> >              -> [post commit GitHub hook will be called to poke the Trac
> GitHub plugin]
> >              -> [Trac GitHub plugin will update the local git repo on
> the Trac server]
> >              -> [Trac GitHub will parse the git history for new commits
> and update tickets]
> >
> > I would recommend that steps (1) - (4) be made to work in a staging
> environment, with a separate
> > GitHub repo, and a separate copy of the Trac database.  That way, you
> can test things out without derailing
> > Twisted developers.  When you are confident that this workflow works,
> then the transition plan will be something
> > like the following.
> >
> > B.1   Send an e-mail to the mailing list and pick one day for the
> maintenance window.
> >         This will warn folks when they should take a holiday from
> Twisted work. :)
> >
> > B.2   When maintenance is about to begin, send a [HEADSUP] mail saying
> that repo will be unavailable.
> >
> > B.3  Create Subversion pre-commit hook to disable all commits to
> >          Subversion:
> >
> http://stackoverflow.com/questions/2411122/how-to-freeze-entire-svn-repository-to-make-it-read-only
> >
> > B.4  Set up steps A.1 - A.4
> >
> > B.5  Verify that B.4 works.  Have someone (Glyph?) do a commit to
> https://github.com/twisted/twisted, and
> >          make sure that Trac works.
> >
> > B.6  Once the Twisted core team are satisified that everything works,
> send an e-mail to the mailing list
> >         that the maintenance window is over, and GitHub is now where the
> action is!
> >
> > B.7  Update all wiki documentation to change all references to getting
> code from Subversion,
> >          to getting code from GitHub.
> >
> > B.8  Update all systems which used Subversion to use GitHub.  For
> example, buildbots.
> >
> > --
> > Craig
> >
> >
> > --
> > Craig
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151130/758885f3/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Nov 30 11:41:30 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 30 Nov 2015 10:41:30 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAFycZ9dFjUAVi1AWoAcj=sihXMiCi8nJEB8hnvzG2wh9Zd5rYA@mail.gmail.com>
Message-ID: <D3BCD0EB-DFC2-41B5-A640-1806002300B0@twistedmatrix.com>

> On Nov 29, 2015, at 08:20, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi Craig,
> 
> Sorry for the delay and many thanks for your plan.
> 
> I have also sent your plan to the Unofficial Twisted Software Foundation.

Just for everyone's information, the real name for the relevant group here is the "Twisted Project Leadership Committee for the Software Freedom Conservancy".  The reason that the relevant mailing list is titled "unofficial twisted software foundation" is that we started off investigating if we could start our own foundation, and later, when we opted to have the Software Freedom Conservancy as our fiscal sponsor instead, the name "twisted software foundation" became "unofficial" because there is no such legal entity.

> From what I can see we are stuck in bureaucratic process.

We are stuck at the point before the bureaucratic process :).  The bureaucratic process is that the PLC votes to approve the plan.

> The plan needs to be approved ... and [the PLC] want to have a single plan submitted for approval.

The reason the plan needs to be approved is that the plans for the fellowship are documented here - https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan <https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan> - and that says "The maintainer will develop a plan for migration of development to GitHub, and once it has been approved implement the plan".

> We now have 3 plans : Amber's, Craig's and mine..... and we see which plan to be sent to [the PLC].
> 
> Also [the PLC] will only consider plans for GitHub.com. 

This is also because it's written in https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan <https://twistedmatrix.com/trac/wiki/Fellowship2015#WorkPlan>, so it was decided before the fellowship began.  However, lots of the steps to move to GitHub.com <http://github.com/> are also necessary prerequisites to use any of those sites - getting rid of subversion and reducing the amount of infrastructure we are operating.  Moving from Github somewhere else ought to be radically simpler than the process we've been undertaking to move to Github.

> We can try to keep tickets/wiki/website on Trac and only move the main repo + PR + hooks to GitHub.

This sounds good to me.

> This should allow us to get rid of SVN and build the infrastructure on web hooks. Later we can consider migration to other tools... or extending the GitHub.com usage to Issues / Wiki / GitHub Pages...etc
> 
> Until now we failed to coordinate toward creating a single plan and besides Glyph's comments on IRC, I have not received any feedback from [the PLC] for any of the plans.

The PLC is unlikely to be involved.  Personally, I'm severely overcommitted; most of the other PLC members have a very low level of involvement with the project.  Not going to point fingers specifically, but some hardly answer their email :-).

While I would prefer it if the PLC were a bit more involved, it should not be much of an issue in this case (assuming that I can herd the cats in the right direction when it's time for a vote).  The PLC's job in this case is only to provide oversight, just to verify that the plan is a proper investment of the SLC's financial resources.  In the same way that reviewers should not participate too closely in the authorship of patches they review, it should be fine if the PLC is not involved in the planning process.  (If we had the personal resources to do so, we probably wouldn't have needed to put it into the fellowship plan!)  The PLC won't decide between a set of different plans; it will just give final approval to the proposed one.

> Can we plan an IRC/Google Hangouts meeting to discuss the plan?

I've not had good luck with Hangouts, personally, but scheduling time on IRC sounds like a good idea.

> If you would like to see Twisted on Git and GitHub please consider joining the meeting.
> 
> I have created this Doodle poll to help us schedule the date and time for the meeting - http://doodle.com/poll/4ys8m8qakav9u9f9 <http://doodle.com/poll/4ys8m8qakav9u9f9>
Ultimately, it is Amber and Adi who need to coordinate on this.  But I would strongly encourage anyone with an interest in this migration to participate in the planning process; clearly we need some help nailing down the specifics :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151130/ebc612fc/attachment-0002.html>

From naveen.michaudagrawal at gmail.com  Mon Nov 30 17:17:43 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Mon, 30 Nov 2015 19:17:43 -0500
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel is
	ready for traffic?
Message-ID: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>

Hi,

I've managed to implement ssh tunneling using this answer on SO -
http://stackoverflow.com/a/23549091/5605324, and the tunnel can be used
from another app. However I would like to use it from within the twisted
application, but I'm not sure what to wire up so that I can get a callback
when the SSHConnectForwardingChannel is ready for traffic. It looks like I
can attach a callback to channel's _channelOpenDeferred, but that seems a
bit hacky. Any suggestions?

Thanks
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151130/2e72554c/attachment-0002.html>

