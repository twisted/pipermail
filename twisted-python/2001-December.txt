From acapnotic at twistedmatrix.com  Sat Dec  1 00:23:28 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Fri, 30 Nov 2001 21:23:28 -0800
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
References: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
Message-ID: <20011130212328.A21469@troglodyte.menefee>

On Fri, Nov 30, 2001 at 03:38:24PM -0500, Michael Dartt wrote:
> From what I've seen/experienced, the "document-as-you-go" 
> approach works much better for open-source projects.  

How about using the wiki?
http://twistedmatrix.com/users/jh.twistd/python/moin.cgi/

 - Kevin

(do you know shira rosenhaft at hampshire, class of 2002?)

-- 
The moon is full, 100.0% illuminated, 14.8 days old.




From mad96 at hampshire.edu  Sat Dec  1 02:51:59 2001
From: mad96 at hampshire.edu (Michael Dartt)
Date: Sat, 01 Dec 2001 02:51:59 -0500 (EST)
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <20011130212328.A21469@troglodyte.menefee>
References: <1007152704.3c07ee4015fa4@webmail.hampshire.edu> <20011130212328.A21469@troglodyte.menefee>
Message-ID: <1007193119.3c088c1f2983c@webmail.hampshire.edu>

Hm.  My only concern is that it looks like it's used more for proclamations/statements than Q&A.  (Brings us back to the Official Documentation issue, only not quite as bad.)  And it looks like the structure of a Wiki doesn't really make it smooth to do that.  What category/entry would you put it under?  Would you have a separate FAQ category?

But hey, if I'm wrong, so much the better.  :)

I may have met Shira, but the name doesn't ring a bell.  I left Camp Hamp in Feb. 2000--without Glyph there, it just didn't seem worth it.  ;-)  

Quoting Kevin Turner <acapnotic at twistedmatrix.com>:

> On Fri, Nov 30, 2001 at 03:38:24PM -0500, Michael Dartt wrote:
> > From what I've seen/experienced, the "document-as-you-go" 
> > approach works much better for open-source projects.  
> 
> How about using the wiki?
> http://twistedmatrix.com/users/jh.twistd/python/moin.cgi/
> 
>  - Kevin
> 
> (do you know shira rosenhaft at hampshire, class of 2002?)
> 
> -- 
> The moon is full, 100.0% illuminated, 14.8 days old.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From j.her at t-online.de  Sat Dec  1 04:55:55 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Sat, 01 Dec 2001 10:55:55 +0100
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <1007193119.3c088c1f2983c@webmail.hampshire.edu>
Message-ID: <16A6sm-1Mbq0OC@fwd01.sul.t-online.com>

On Sat, 01 Dec 2001 02:51:59 -0500 (EST), Michael Dartt wrote:

>Hm.  My only concern is that it looks like it's used more for proclamations/statements than Q&A.  

A wiki is used in the way users use it. :>

See http://www.python.org/cgi-bin/moinmoin/FrequentlyAskedQuestions

Ciao, J?rgen






From jason at crash.org  Sun Dec  2 18:02:22 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Sun, 2 Dec 2001 17:02:22 -0600
Subject: [Twisted-Python] WebWidgets and Struts
Message-ID: <EIEFLCFECLLBKGPNJJIMKECIHLAA.jason@crash.org>

As an example for WebWidgets, has anyone looked at the Struts framework
of the Jakarta project?  The general idea is that Struts tries to capture
the common patterns of web application development and to provide a
framework for rapid development using a common codebase.

Apparently a number of folks are developing projects using this framework
and a certain amount of code sharing is emerging.  Reading through the
website, it looks a lot like WebWare...

>From the Struts page:

"The goal of this project is to provide an open source framework useful in
building web applications with Java Servlet and JavaServer Pages (JSP)
technology. Struts encourages application architectures based on the
Model-View-Controller (MVC) design paradigm, colloquially known as Model 2
in discussions on various servlet and JSP related mailing lists.

Struts includes the following primary areas of functionality:

- A controller servlet that dispatches requests to appropriate Action
  classes provided by the application developer.
- JSP custom tag libraries, and associated support in the controller
  servlet, that assists developers in creating interactive form-based
  applications.
- Utility classes to support XML parsing, automatic population of
  JavaBeans properties based on the Java reflection APIs, and
  internationalization of prompts and messages."

Main page:
http://jakarta.apache.org/struts/index.html

Introduction:  (Read this one)
http://jakarta.apache.org/struts/userGuide/introduction.html


Jason
______________________________________________________________________
Jason Asbahr
jason at asbahr.com








From twisted at itamarst.org  Mon Dec  3 08:12:22 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 15:12:22 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
Message-ID: <3C0B7A36.9030502@itamarst.org>

Attached is an IRC server that acts more or less like a regular IRC server - 
anyone can login with no prior account.

Issues:
1. It takes 3 seconds until connectionLost is called, so you can't 
immediately relogin.
2. The automatic user creation is horribly verbose, hard to understand, and 
hacky (getPerspectiveNamed, specifically.)
3. You get contacted by "*login*" every time you login.
4. You still need a password, though in this setup it knows its own password 
so the user doesn't deal with (and for my use this is good since I need a 
password protected IRC server.)

===============================================
from twisted.protocols import protocol
from twisted.words import service, ircservice
from twisted.internet import passport

class SimpleService(service.Service):
     """A simple IRC service that creates users on the fly."""

     def removePerspective(self, name):
         if self.participants.has_key(name):
             del self.participants[name]
             self.application.authorizer.removeIdentity(name)

     def createParticipant(self, name):
         if not self.participants.has_key(name):
             log.msg("Created New Participant: %s" % name)

     def getPerspectiveNamed(self, name):
         if self.participants.has_key(name):
             raise service.WordsError, "user exists"
         else:
             p = service.Participant(name)
             p.setService(self)
             ident = passport.Identity(name, self.application)
             ident.setPassword("ugly hack")
             self.application.authorizer.addIdentity(ident)
             p.setIdentity(ident)
             ident.addKeyForPerspective(p)
             self.participants[name] = p
             return p


class IRCChatter(ircservice.IRCChatter):

     passwd = "ugly hack" # remove this to force user to send password

     def connectionLost(self):
         ircservice.IRCChatter.connectionLost(self)
         print self.nickname
         self.service.removePerspective(self.nickname)


class IRCGateway(protocol.Factory):

     def __init__(self, service):
         self.service = service

     def buildProtocol(self, connection):
         """Build an IRC protocol to talk to my chat service.
         """
         i = IRCChatter()
         i.service = self.service
         return i


def main():
     """Run an IRC server"""
     from twisted.internet import main
     app = main.Application("irc")
     svc = SimpleService("twisted.words", app)
     irc = IRCGateway(svc)
     app.listenTCP(6667, irc)
     app.run(0)


if __name__ == '__main__':
     main()





From carmstro at twistedmatrix.com  Mon Dec  3 12:16:32 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 12:16:32 -0500
Subject: [Twisted-Python] Standalone IRC server, or
	Passport/Words/Something sucks
In-Reply-To: <3C0B7A36.9030502@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org>
Message-ID: <1007399793.4746.0.camel@Fookidla.org>

On Mon, 2001-12-03 at 08:12, Itamar Shtull-Trauring wrote:
> Attached is an IRC server that acts more or less like a regular IRC server - 
> anyone can login with no prior account.

Hmm.. Is this IRC-specific? If it is, I think it'd be nice to have this
integrated with words itself, so it could be an option to the
administrator (which could be configured through coil! woot!).

--
 <glyph> HELP ME SMALL CHILD I HAVE ATTEMPTED TO CREATE A WEB SERVER BUT
 I HAVE BECOME LOST
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/






From acapnotic at twistedmatrix.com  Mon Dec  3 13:47:48 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Mon, 3 Dec 2001 10:47:48 -0800
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0B7A36.9030502@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org>
Message-ID: <20011203104748.A2622@troglodyte.menefee>

On Mon, Dec 03, 2001 at 03:12:22PM +0200, Itamar Shtull-Trauring wrote:
> Issues:
> 2. The automatic user creation is horribly verbose, hard to understand, and 
> hacky (getPerspectiveNamed, specifically.)


{{{ # In response to Itamar's code:

from twisted.words import service, ircservice

class SimpleService(service.Service):

# If this is a standalone service, why does it inherit from
# words.service?  You override all its methods save the dictionary
# accessor 'getGroup' anyhow.

    def createParticipant(self, name):
        if not self.participants.has_key(name):
            log.msg("Created New Participant: %s" % name)

# Huh? createParticipant creates a log entry, but *not* a Participant?

     def getPerspectiveNamed(self, name):
         if self.participants.has_key(name):
             raise service.WordsError, "user exists"

# Woah.  getPerspectiveNamed is *supposed* to return existing
# perspectives.  This error might be appropriate in createParticipant,
# but not here.

         else:
             p = service.Participant(name)
             p.setService(self)

# Don't bitch about this method being "horribly verbose" when you
# explicitly duplicate code that's defined in your subclass.  The above
# is done in passport.Service.createPerspective, which you deliberately
# clobbered.

             ident = passport.Identity(name, self.application)
             ident.setPassword("ugly hack")
	     
# If you want to do this, please factor the strict authorization
# requirements out of words.ircservice.IRCChatter.irc_NICK (or factor
# words.ircservice.IRCChatter out of words.*) instead of doing an 
# "ugly hack".
	     
	     self.application.authorizer.addIdentity(ident)
	     p.setIdentity(ident) 
	     ident.addKeyForPerspective(p)

# If you're using 'anonymous' logins with transient user identites,
# why are you using Identities at all?  None of this is necessary if
# you're not planning on making use of a passport.DefaultAuthorizer
# anyway.  See for example words.tendril._newParticipant, no identities
# are created and bound either here or in words.service methods.

             self.participants[name] = p
             return p
 
}}}

Overall, yes, words.ircservice is absolutely horrible for use as a
"normal" IRC server.  But then, it's not intended to be one, that's why
it's in the twisted.words package.  It's also true that it's a fairly
shoddy Words interface as well, but aren't they all?  ;)

 - AcapNotIRC

-- 
The moon is waning gibbous, 92.1% illuminated, 17.4 days old.




From twisted at itamarst.org  Mon Dec  3 15:22:47 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 22:22:47 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee>
Message-ID: <3C0BDF17.8050506@itamarst.org>

<Lot's of "itamar is an idiot" comments deleted>

Granted, my code sucked. But I wanted an IRC server ASAP and that's the 
fastest way to get one if you don't understand all this 
identity/passport stuff! I challenge you to make an IRC server where 
users are created on the fly like in normal ircds. Until you do, my code 
will be what I use, since it *works*, and I don't have time to do it right.

In other words, "save me from the suckiness!"





From j.her at t-online.de  Mon Dec  3 15:31:51 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 03 Dec 2001 21:31:51 +0100
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0BDF17.8050506@itamarst.org>
Message-ID: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>

On Mon, 03 Dec 2001 22:22:47 +0200, Itamar Shtull-Trauring wrote:

>Granted, my code sucked. But I wanted an IRC server ASAP and that's the 
>fastest way to get one if you don't understand all this 
>identity/passport stuff! I challenge you to make an IRC server where 
>users are created on the fly like in normal ircds. Until you do, my code 
>will be what I use, since it *works*, and I don't have time to do it right.
>
>In other words, "save me from the suckiness!"

I see a pattern here, you create sucky code and then abuse the digust
of other developers to get the code you want. ;-?

Ciao, J?rgen






From glyph at twistedmatrix.com  Mon Dec  3 15:44:46 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 03 Dec 2001 14:44:46 -0600
Subject: [Twisted-Python] Standalone IRC server, or
	Passport/Words/Something sucks
In-Reply-To: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
References: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
Message-ID: <1007412287.19437.12.camel@zelda>

On Mon, 2001-12-03 at 14:31, Juergen Hermann wrote:

> I see a pattern here, you create sucky code and then abuse the digust
> of other developers to get the code you want. ;-?

What can I say; he learned from the best.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From jasbahr at crash.org  Mon Dec  3 13:05:05 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Mon, 3 Dec 2001 12:05:05 -0600
Subject: [Twisted-Python] Collaboration Server: IBM's uServ
Message-ID: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>

>From the decentralized list, research that looks useful for Twisted-to-
Twisted (t2t) data publishing.  :-)

"uServ is a project at IBM which exploits P2P techniques to provide a
reasonable alternative to paid web hosting services for a wide class of
users.

While you can't (yet) use it unless you have IBM intranet access, we've
made a research report available describing our  internal deployment and
the technical details of the system."

http://www.almaden.ibm.com/cs/people/bayardo/userv/


______________________________________________________________________
Jason Asbahr
jason at asbahr.com

 





From twisted at itamarst.org  Mon Dec  3 16:04:20 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 23:04:20 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
Message-ID: <3C0BE8D4.9060201@itamarst.org>

>
>
>
>I see a pattern here, you create sucky code and then abuse the digust
>of other developers to get the code you want. ;-?
>
But of course - this is Open Source, aka Other People's Work. The cool 
part is that all our selfish needs combine into a common cause.






From carmstro at twistedmatrix.com  Mon Dec  3 17:02:54 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 17:02:54 -0500
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
References: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
Message-ID: <1007416976.5205.0.camel@Fookidla.org>

I set up a page on Jurgen's MoinMoin -
http://purl.org/wiki/python/TwistedFaq. Right now it's just the same
questions as the other faqs that are available. If this thing works out
I'll shwack the official faq.epy on twistedmatrix.com and just link to
the wiki page.

On Fri, 2001-11-30 at 15:38, Michael Dartt wrote:
> I'd like to suggest the addition of a FAQ-o-matic 
> (http://faqomatic.sourceforge.net/fom-serve/cache/427.html)to the Twisted 
> site.  I think it would make it much easier to get and to post info, as you 
> wouldn't have to wait for someone to write The Definitive Documentation(tm) for 
> a given subject.  From what I've seen/experienced, the "document-as-you-go" 
> approach works much better for open-source projects.  
> 
> I'm willing to do the work of getting the F-o-m set up.  (Perhaps I should 
> stick in in my personal space?)  
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From carmstro at twistedmatrix.com  Mon Dec  3 17:06:51 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 17:06:51 -0500
Subject: [Twisted-Python] Collaboration Server: IBM's uServ
In-Reply-To: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>
References: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>
Message-ID: <1007417212.5207.2.camel@Fookidla.org>

On Mon, 2001-12-03 at 13:05, Jason L. Asbahr wrote:
> 
> >From the decentralized list, research that looks useful for Twisted-to-
> Twisted (t2t) data publishing.  :-)

dash and I were talking about this the other day, and we both seem to be
interested in it. As dash pointed out, we've already got the technology
for doing the "proxy server" deal (where a node machine is only
accessible through a third party from the main server), and Twisted
itself gets us about half way to completely implementing something like
this. Glyph didn't seem so excited about, though...

-- 
<dash> glyph: maybe that'd stop, if we stopped denying that the PSU is
real and
is actually coordina~~4%~~..~*'#n`+>~~.]
<-- dash has quit
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From acapnotic at twistedmatrix.com  Tue Dec  4 00:10:30 2001
From: acapnotic at twistedmatrix.com (acapnotic at twistedmatrix.com)
Date: Mon, 3 Dec 2001 21:10:30 -0800
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0BDF17.8050506@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee> <3C0BDF17.8050506@itamarst.org>
Message-ID: <20011203211030.D4046@troglodyte.menefee>

On Mon, Dec 03, 2001 at 10:22:47PM +0200, Itamar Shtull-Trauring wrote:
> <Lot's of "itamar is an idiot" comments deleted>

Well, yeah, there was a bit much of that.  I think if you had introduced
the subject as just "here's my rough draft" instead of "Passport sucks",
my tone would have been correspondingly more subdued.

 - Kevin

-- 
The moon is waning gibbous, 89.3% illuminated, 17.9 days old.




From twisted at itamarst.org  Tue Dec  4 04:27:01 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Dec 2001 11:27:01 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee> <3C0BDF17.8050506@itamarst.org> <20011203211030.D4046@troglodyte.menefee>
Message-ID: <3C0C96E5.8050300@itamarst.org>

acapnotic at twistedmatrix.com wrote:


>><Lot's of "itamar is an idiot" comments deleted>
>>
> 
> Well, yeah, there was a bit much of that.  I think if you had introduced
> the subject as just "here's my rough draft" instead of "Passport sucks",
> my tone would have been correspondingly more subdued.


Mmm, yeah, that's true. But mine is still the only working implementation, 
nyah nyah :)





From glyph at twistedmatrix.com  Wed Dec  5 00:21:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 04 Dec 2001 23:21:33 -0600
Subject: [Twisted-Python] python's "import" is giving me a headache.
Message-ID: <1007529694.29915.1.camel@zelda>

So, there's a particular corner of the coding standard for Twisted
currently which is the root of a few annoying problems and has been the
cause of one or two bugs.  It's the module import requirement.

Originally it seemed like a pretty good idea for the following reasons;
if one is using packages, it is easiest to figure out where the code is
coming from if you name the module explicitly.  Documentation generators
document modules individually, and so that's how people would learn to
import modules.  Accessing the module indirectly, and not the class,
allows for reloading to work naturally and different modules to have
similarly named classes when appropriate.

In pracitce, it doesn't work out quite so well.  It did not occur to me
at the time how hard it would be to distinctly name all modules within
classes, or how often a local variable name would clash with a
straightforwardly chosen package name.

I am considering a change to the coding standard (and the attendant
massive refactoring) to a standard where modules "promote" public
classes and functions to the module level.  For example, in
twisted/words/service.py:

# promote public interface
from twisted import python
import twisted.words
twisted.python.publicInterface(twisted.words,
    Service,
    WordsClientInterface,
    Participant,
    ...)
# end

The end user would probably then have to do this in order to use that
module:

import twisted.words.service
from twisted import words
words.Service(...)

Pros:

* fewer names to worry about clashing with
* nested modules less inconvenient
* only public portions of interface present at package level

Cons:

* it doesn't work that way now and it would require work to change
* you still have to know which module to import
* it requires manual declaration of public interface

The number of conflicts both between modules and convenient variable
names is increasing with time, and I think that something has to be done
about it, but I don't know if this is an appropriate solution.  At any
rate, such a change will likely affect most Twisted developers, so I'd
like to hear feedback before I do anything.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From carmstro at twistedmatrix.com  Wed Dec  5 00:52:10 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 00:52:10 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <1007529694.29915.1.camel@zelda>
References: <1007529694.29915.1.camel@zelda>
Message-ID: <1007531531.14315.2.camel@Fookidla.org>

On Wed, 2001-12-05 at 00:21, Glyph Lefkowitz wrote:
[snip...]
> I am considering a change to the coding standard (and the attendant
> massive refactoring) to a standard where modules "promote" public
> classes and functions to the module level.  For example, in
> twisted/words/service.py:

[snip...]
> Pros:
> 
> * fewer names to worry about clashing with
> * nested modules less inconvenient
> * only public portions of interface present at package level

A few things I don't think glyph stressed well enough:
  * gets rid of having to deal with modules which have the same name,
    but in different packages ("service", anyone?)
  * twisted.reality.reality.Reality. 'nuff said. :)

While I'm not *certain* that this is the best way to go (although it
seems like it might work out, and I haven't thought of any big
disadvantages), I do full-heartedly agree that _something_ needs to be
done. I've done a couple of refactorings in my day, and I've fixed
countless local-variable/module-name conflicts.</war_story>

-- 
<radix> skreech: hey guess what!
<skreech> what
<radix> skreech: exciting night tonight
<skreech> radix: women?
<radix> skreech: twisted release! =D
<skreech> radix: YES!!!!!!!!!!
<radix> hee hee
<radix> I know you live for these moments, skreech
<skreech> VROOOM
<skreech> Lemme get my Twisted-Release-socks
<skreech> and noisemakers
(Yes, I am hopefully going to release Twisted 0.12.3 tonight)
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From twisted at itamarst.org  Wed Dec  5 04:31:46 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 05 Dec 2001 11:31:46 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <1007529694.29915.1.camel@zelda>
Message-ID: <3C0DE982.4000506@itamarst.org>

Glyph Lefkowitz wrote:

>
>The number of conflicts both between modules and convenient variable
>names is increasing with time, and I think that something has to be done
>about it, but I don't know if this is an appropriate solution.  At any
>rate, such a change will likely affect most Twisted developers, so I'd
>like to hear feedback before I do anything.
>

This seems a rather drastic solution, and ugly to boot (3 lines of code 
every time I want to import something?). And won't this making reloading 
modules much more problematic?

There might be other ways to solve it - for example, module names can 
BeCapitalized, which solves the vairable/module clashing issue (then 
it's harder to differentiate between module and classes, but there are 
certainly much fewer classes then there are variables).

What methods do other large frameworks do to solve the issue?






From twisted at itamarst.org  Wed Dec  5 04:52:47 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 05 Dec 2001 11:52:47 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <1007529694.29915.1.camel@zelda>
Message-ID: <3C0DEE6F.7040408@itamarst.org>

Glyph Lefkowitz wrote:

>
>The end user would probably then have to do this in order to use that
>module:
>
>import twisted.words.service
>from twisted import words
>words.Service(...)
>

A bit more thought - this is a bad idea. It's certianly not a Very Bad 
Idea, but I really hope we comw up with something better. Consider - 
currently we have a a large number of namespaces, divided by the 
different things they do, and we can do stuff like having a schedule() 
method in twisted.internet.task. But with this suggestion we end up 
having only 7 or so namespaces, each of which has tens of methods, all 
of which do tons of different unrelated things (so there's 
twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
what's one got to do with the other? And how are they related to 
twisted.internet.schedule? why do I have to start reading through all 
these modules to figure out where they came from?)

At some point this will get too overwhelming (it may be too overwhelming 
now) and then we'll end up using subpackages, at which point we're back 
to where we started :)

The whole *point* of modules is to have just that - differenet 
namespaces that are to some degree self contained and can be understood 
more or less on their own, while this proposal is a push away from that 
(not a very large one, but still.)





From carmstro at twistedmatrix.com  Wed Dec  5 06:23:44 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 06:23:44 -0500
Subject: [Twisted-Python] 0.12.3 is out
Message-ID: <1007551427.14314.4.camel@Fookidla.org>

You heard it here first, folks. Grab Twisted 0.12.3 at
http://twistedmatrix.com/downloads/ - here are the changes:

  This is mainly a maintenance release; there are a bunch of bugfixes,
  but some really cool new things.

  A Configuration System. This is going to be the Next Big Thing in
  Twisted - right now, it's not used anywhere visibly, but the idea is a
  unified interface for Twisted that will replace things like 'mktap'.
  We have a basic dependancy system down, and a simple Web UI.

  A few bugfixes for TK InstanceMessenger.

  Docs for Delayeds: Itamar wrote up a small HTML document on how to use
  Delayeds. Look in the 'doc/' subdirectory.

  Other general bugfixes.

-- 
QOTR:
<Intention> Twisted did raise me from the dead after two weeks. It is a 
miracle of software engineering.
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From bwinton at tor.dhs.org  Wed Dec  5 09:52:46 2001
From: bwinton at tor.dhs.org (Blake Winton)
Date: Wed, 5 Dec 2001 09:52:46 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <3C0DEE6F.7040408@itamarst.org>
Message-ID: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>

> >import twisted.words.service
> >from twisted import words
> >words.Service(...)
> A bit more thought - this is a bad idea.
> twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
> what's one got to do with the other? And how are they related to 
> twisted.internet.schedule? why do I have to start reading through all 
> these modules to figure out where they came from?)

What about "import twisted.words.service as WordsService"?

Then packages can name the modules whatever they want to avoid conflicts.

Later,
Blake.





From jason at crash.org  Wed Dec  5 11:29:51 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Wed, 5 Dec 2001 10:29:51 -0600
Subject: [Twisted-Python] P2P Thoughts
Message-ID: <EIEFLCFECLLBKGPNJJIMCEFCHLAA.jason@crash.org>

Some folks on the decentralized list have praised a p2p app called
'Magi', which sounds like it has features similar to those in Twisted,
or to those features which Twisted might soon acquire.

Magi Express and uServ apparently have some overlap.  Check out the
Magi link and read the brochure.  There is a screen shot there that
looks roughly as complex as the Watson interface.  Not so hard to
put together.

"Installing Magi Express turns your PC into a personal web server, providing
the ability to share, store, retrieve and edit-in-place documents and other
files to and from any other Magi-installed device.

Magi Express is perfect for setting up your own personal intranet, shared
workspace, or virtual private network. You will have the ability to e-mail,
fax or print any file within your private network. You even have the ability
to do so using a WAP-enabled phone when away from your Internet-connected
PC."

http://www.endeavors.com/express.html

I suggested to Glyph that Twisted could someday replace Jigsaw as W3C's
collaboration server.  Now I'm thinking that Twisted could be the GNU
collaboration server, as Mailman is the GNU mailing list manager.  Or
at least achieve that level of ubiquity in the open source world.  :-)

______________________________________________________________________
Jason Asbahr
jason at asbahr.com







From carmstro at twistedmatrix.com  Wed Dec  5 15:30:51 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 15:30:51 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>
References: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>
Message-ID: <1007584253.484.0.camel@Fookidla.org>

On Wed, 2001-12-05 at 09:52, Blake Winton wrote:
> > >import twisted.words.service
> > >from twisted import words
> > >words.Service(...)
> > A bit more thought - this is a bad idea.
> > twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
> > what's one got to do with the other? And how are they related to 
> > twisted.internet.schedule? why do I have to start reading through all 
> > these modules to figure out where they came from?)
> 
> What about "import twisted.words.service as WordsService"?
> 
> Then packages can name the modules whatever they want to avoid conflicts.

Well, this is a Python 2.0 (1.6?) and above feature, only. The
equivalent in older versions of Python is
| from twisted.words import service
| WordsService = service
| del service
It's still 3 lines long, just like the other few proposals that have
been going around.

Itamar definitely has a point with changing naming conventions of the
module names to something like StudlyCaps. It would probably fix at
least 95% of the cases where naming conflicts happen.

Now, say that we do something like change naming conventions -- is there
_any hope_ that old .tap files will be able to upgrade to the new names
of modules? Moshe has hinted that hooks for modulenames and whatnot is
possible with pickle, but I'm doubtful. What I'm thinking so far is that
the new module names will have to do the backwards-compatibility trick
of 
| import twisted.my_package.MyModule
| import twisted.my_package
| twisted.my_package.module_name = twisted.my_package.MyModule

But I'm not so sure this would work out. Obviously, code that does 'from
my_package import my_module' will not work. But, as long as we're
interested in pickle-compatibility and not code-compatibility, I don't
_think_ this is a problem. Or maybe it is..?

Another possible solution is to put an __init__.py in the package that
imports all the new ModuleNames and assigns them to module_names. This
is rather yucky, of course, because you can't selectively import modules
(well, you can, but you can't prevent all modules in a package from
being imported).

Whew. a lot to think about here. I still think it's worth whatever it
takes, though, because Twisted ain't gettin' any smaller.

-- 
<radix> I was drinking tea before this job
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From sean at ninjaneering.com  Wed Dec  5 16:06:13 2001
From: sean at ninjaneering.com (Sean Riley)
Date: Wed, 5 Dec 2001 15:06:13 -0600
Subject: [Twisted-Python] OSI 7 layer network model
Message-ID: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>

I was wondering... how would you categorize the various pieces of Twisted in
the OSI 7 Layer Network Model?

The layers are:

1. Physical - hardware
2. Data Link - ethernet
3. Network - IP
4. Transport - protocols(TCP/IP, UDP)
5. Session
6. Presentation
7. Application

I'm not sure how "session" fits in with Twisted. Maybe Perspectives play the
role of sessions?

Presentation is defined as "where application data is packed/unpacked" -
which seems to include both banana and jelly?

I'd like to be able to draw a diagram showing where python fits into this
model and where the opportunities for optimization are found. By explicitly
showing that the implentations of these layers are actually in C or provided
by the OS, the perception that "python is slow" could be mitigated somewhat.

I think that keeping the "session" layer in python can be justified with the
added security of no buffer overflows, and the requirement for integration
with the python application layer. There also are few tight loops in this
layer.

The "Presentation" layer seems to be the most computationally expensive
software layer as it includes encryptions, packing and compression. It is
here that the pure python implentation is a little scary for most people -
and so it is here where the most education and explicit categorization of
components by implementation would be most useful.

----
"If it's not running programs or fusing atoms, it's just bending space."
Sean Riley
sean at ninjaneering.com






From j.her at t-online.de  Wed Dec  5 16:38:54 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 05 Dec 2001 22:38:54 +0100
Subject: [Twisted-Python] python's "import" is giving me a headache.
Message-ID: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>

On 05 Dec 2001 15:30:51 -0500, Chris Armstrong wrote:

>(well, you can, but you can't prevent all modules in a package from
>being imported).

Yes, you can, like...


__init__:

from tw.import import _delayedImport
oldname = _delayedImport('newname')


or even


sys.modules[__name__] = _delayedImporter(__name__,  
lookup_dict_with_old_names)


Nothing in this is pretty in any way.

Ciao, J?rgen






From carmstro at twistedmatrix.com  Wed Dec  5 18:48:25 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 18:48:25 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>
Message-ID: <1007596107.482.4.camel@Fookidla.org>

On Wed, 2001-12-05 at 16:38, Juergen Hermann wrote:
> On 05 Dec 2001 15:30:51 -0500, Chris Armstrong wrote:
> 
> >(well, you can, but you can't prevent all modules in a package from
> >being imported).
> 
> Yes, you can, like...
[snip...]

> Nothing in this is pretty in any way.

Well, I'm not opposed to evil, ugly hacks as long as they're only
temporary. The only thing I'm worried about is pickle compatibility,
source compatibility can be easily fixed.

Everybody else: thoughts?

-- 
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From twisted at itamarst.org  Thu Dec  6 04:48:22 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Dec 2001 11:48:22 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com> <1007596107.482.4.camel@Fookidla.org>
Message-ID: <3C0F3EE6.80407@itamarst.org>

Chris Armstrong wrote:


> Well, I'm not opposed to evil, ugly hacks as long as they're only
> temporary. The only thing I'm worried about is pickle compatibility,
> source compatibility can be easily fixed.
> 
> Everybody else: thoughts?

Write a utility to convert pickles?





From twisted at itamarst.org  Thu Dec  6 05:03:31 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Dec 2001 12:03:31 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com> <1007596107.482.4.camel@Fookidla.org>
Message-ID: <3C0F4273.7060400@itamarst.org>

Chris Armstrong wrote:


> Well, I'm not opposed to evil, ugly hacks as long as they're only
> temporary. The only thing I'm worried about is pickle compatibility,
> source compatibility can be easily fixed.
> 


Actually, I think there's some way ZODB can deal with classes changing 
modules. I'll do some checking...







From andrew-twisted at puzzling.org  Sun Dec  9 21:46:17 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Dec 2001 13:46:17 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
Message-ID: <20011210134617.A541@frobozz.local>

This is just a quick mail to let people know what I had to do to make
a Twisted server work as a WinNT service.

First, it should be noted that I'm not using twistd or tap files, partly
because this server has no state that needs persisting, and also because
I'm not sure how to use them ;)

Basically, the service is really really simple:

---
import win32serviceutil, win32service
import MyServer
from twisted.python.log import startLogging
import twisted.internet.main

class MyTwistedService(win32serviceutil.ServiceFramework):
    def SvcDoRun():
        # Can't use stdout for logging -- .flush will barf
        startLogging(open('c:/mylogfile.log','a'))
        MyServer.main()

    def SvcStop():
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        twisted.internet.main.shutDown()

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(MyTwistedService)

---

And that does it.  The trickiest bit is that you need to set the log
file to something other than stdout, otherwise it dies due to a Bad File
Descriptor error doing logfile.flush().  Other than that, it is
basically boilerplate code (if you're familiar with Win32 services
written in Python).

I wonder if there is a more integrated way to do this, though?

-Andrew.




From andrew-twisted at puzzling.org  Sun Dec  9 21:52:42 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Dec 2001 13:52:42 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
References: <20011210134617.A541@frobozz.local>
Message-ID: <20011210135242.A591@frobozz.local>

On Mon, Dec 10, 2001 at 01:46:17PM +1100, Andrew Bennetts wrote:
> class MyTwistedService(win32serviceutil.ServiceFramework):

[snip]

I forgot one detail... this class should have:

---
    _svc_name_ = "MyServer"
    _svc_display_name = "My Twisted Server"
---

-Andrew.




From itamar at zoteca.com  Mon Dec 10 16:10:31 2001
From: itamar at zoteca.com (Itamar Shtull-Trauring)
Date: Mon, 10 Dec 2001 23:10:31 +0200 (IST)
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
Message-ID: <Pine.LNX.4.21.0112102309460.22186-100000@female.israel.maxnm.com>

unless someone else does, I will add this to twistd when I return from
Paris.






From jason at crash.org  Mon Dec 10 18:25:28 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Mon, 10 Dec 2001 17:25:28 -0600
Subject: [Twisted-Python] FW: [Python-Dev] ExtensionClass plans (was Re: [ZODB-Dev] Another ExtensionClass incompatibility: __pow__())
Message-ID: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>

This might be of interest...

Jason

-----Original Message-----
From: python-dev-admin at python.org [mailto:python-dev-admin at python.org]On
Behalf Of Jim Fulton
Sent: Saturday, December 01, 2001 11:23 AM
To: Greg Ward
Cc: zodb-dev at zope.org; Python-dev at python.org
Subject: [Python-Dev] ExtensionClass plans (was Re: [ZODB-Dev] Another
ExtensionClass incompatibility: __pow__())


Greg Ward wrote:
>
> Sigh.  In addition to ignoring __r{add,sub,mul,div}__() methods,
> ExtensionClass also calls __pow__() differently.

(snip)

> So what is the future of ExtensionClass, anyways?

I intend that Python 2.2 (or maybe 2.3) will make it irrelevent.

> Are the little
> incompatibility bugs between classic Python classes and ExtensionClass
> ever going to be fixed?

Probably not by us. Patches are gratefully accepted.

We are going to keep supporting it for a while at it's
current level to support projects other than ZODB
that require it.

> Or has ExtensionClass been abandoned in favour
> of a future ZODB based on new-style Python 2.2 classes?

This is my plan. :)

> If so, when
> will this future ZODB become reality?

I'm glad you asked. As part of our Zope 3 prototyping, we've
begun moving toward a next generation of ZODB.  We currently
have an experimental ZODB that:

- Doesn't require ExtensionClass

- Does depend on new-style Python classes

- Separates the Persistence and Transaction frameworks

- Uses weak references in the cache

- Uses a pure-python Persistent implementation (hence no BTrees).
  We will be creaing a C Persistent base class.

All the fun is currently happening on the Zope-3x-branch branch
of the Zope3 checkout. You can see the relevent ZODB pieces at:

http://cvs.zope.org/Zope3/lib/python/Persistence/?only_with_tag=Zope-3x-bran
ch

http://cvs.zope.org/Zope3/lib/python/Transaction/?only_with_tag=Zope-3x-bran
ch

http://cvs.zope.org/Zope3/lib/python/ZODB/?only_with_tag=Zope-3x-branch

Of course all of this is highly speculative at this point.

Stay tuned. ;)

Jim

--
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (888) 344-4332            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org

_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev





From jason at crash.org  Mon Dec 10 18:46:07 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Mon, 10 Dec 2001 17:46:07 -0600
Subject: [Twisted-Python] FW: [Python-Dev] FYI: MIT's dynamic language design panel now online
Message-ID: <EIEFLCFECLLBKGPNJJIMCEKLHLAA.jason@crash.org>

Another item of interest to the Twisted community (particularly Glyph
and Dash).

Jason 

(Yes I'm cleaning out my mailboxes...and sending the BEST TO YOU! ;-)


-----Original Message-----
From: python-dev-admin at python.org [mailto:python-dev-admin at python.org]On
Behalf Of Fredrik Lundh
Sent: Tuesday, May 15, 2001 1:21 PM
To: python-dev at python.org
Subject: [Python-Dev] FYI: MIT's dynamic language design panel now
online


in case anyone has two hours to spare, and the right software,
MIT's dynamic languages group has posted a quicktime video of
their recent panel on language design.

http://www.ai.mit.edu/projects/dynlangs/wizards-panels.html

(what 1/2 should result in, why it's good to have both CPython
and JPython, why whitespace is significant, why language design
is perhaps more related to architecture than math, and lots of
other goodies from Guy Steele and others)

Cheers /F


_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev





From glyph at twistedmatrix.com  Mon Dec 10 20:07:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 10 Dec 2001 19:07:33 -0600
Subject: [Twisted-Python] FW: [Python-Dev] ExtensionClass plans
In-Reply-To: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>
References: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>
Message-ID: <1008032853.1011.11.camel@zelda>

On Mon, 2001-12-10 at 17:25, Jason L. Asbahr wrote:
 
> This might be of interest...

Indeed it is.  In fact, the whole Zope3X development effort is of
particular interest to me, because Zope is giving up on their previous
architecture entirely and moving to one which is much more like Twisted
-- where the use of more "normal" python code is achieved through using
delegation rather than inheritance, new Python features rather than
extension modules, and explicit mechanisms rather than implicit
acquisition to communicate data between components.  But they're not
using Twisted to do it (yet -_^).

Unfortunately Twisted is still a fairly new player on the Python scene;
I would love to approach the Zope developers with Twisted as the server
framework for the next iteration of Zope, but there is still some
duplication of process between the two efforts and I don't know to
propose reconciling it.  In particular, I have some ideas about
implementing a configuration system using just Python (some of which are
in CVS now), but these are still in their first iteration; the Zope3X
effort has a different approach using XML, also in its first iteration.

Do any fans of Twisted who are current on the Zope3X development branch
have any ideas about potential integration?  Do you think it's worth
pursuing, and at what level of abstraction?

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Tue Dec 11 23:49:20 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 22:49:20 -0600
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
References: <20011210134617.A541@frobozz.local>
Message-ID: <1008132560.3358.9.camel@zelda>

On Sun, 2001-12-09 at 20:46, Andrew Bennetts wrote:
> This is just a quick mail to let people know what I had to do to make
> a Twisted server work as a WinNT service.

Thanks a lot, Andrew!

> First, it should be noted that I'm not using twistd or tap files, partly
> because this server has no state that needs persisting, and also because
> I'm not sure how to use them ;)

[snip service]

> And that does it.  The trickiest bit is that you need to set the log
> file to something other than stdout, otherwise it dies due to a Bad File
> Descriptor error doing logfile.flush().  Other than that, it is
> basically boilerplate code (if you're familiar with Win32 services
> written in Python).
> 
> I wonder if there is a more integrated way to do this, though?

Well, the "integrated" way to do it would probably to be something
similar to moshe's 'tap2deb' -- a Twisted service would probably be a
.tap or .tac file which got loaded, similar to the way twistd does, and
used the 'startLogging' call to open a log file and start writing to
it.  A good default would be the doc/examples/coil.tac currently in CVS
(and in the coopweb.org "breakfast builds").

Does win32 have a standardized logging mechanism?  Twisted can log to
any file-like object, so if we could put log messages wherever winnt
expects to find them that would be good ;-)  (I vaguely recall something
called the "Event Log"?)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Wed Dec 12 00:15:07 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 23:15:07 -0600
Subject: [Twisted-Python] OSI 7 layer network model
In-Reply-To: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>
References: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>
Message-ID: <1008134107.3358.11.camel@zelda>

On Wed, 2001-12-05 at 15:06, Sean Riley wrote:
> I was wondering... how would you categorize the various pieces of Twisted in
> the OSI 7 Layer Network Model?
> 
> The layers are:
> 
> 1. Physical - hardware
> 2. Data Link - ethernet
> 3. Network - IP
> 4. Transport - protocols(TCP/IP, UDP)

When we start marketing twisted.internet hardware that you can use to
speak TCP/TIP, I'll let you know :-)

> 5. Session

It depends on the appplication.  Normally, this is managed by TCP itself
and is represented by a twisted.protocols.protocol.Transport instance. 
In broken, "stateless" protocols like HTTP, we have explicit session
management (twisted.web.server.Session); for many applications it's
unnecessary.  I guess in some cases this level doesn't exist?  When
you're using twisted.spread, the session is the Broker; Perspectives are
just one of the things that can be attached to the Broker.  Similarly to
web sessions.

> 6. Presentation

This apparently involves quite a few different things.  As you noted,
it's a computationally expensive place, this is where some optimizations
have already started to happen.  banana and jelly are at this level;
banana has been optimized into C.  (Yes, itamar, one of these days I
will integrate Elliot's changes)  Jelly is another candidate.

> 7. Application

"User Code", I guess :)

> I'm not sure how "session" fits in with Twisted. Maybe Perspectives play the
> role of sessions?
> 
> Presentation is defined as "where application data is packed/unpacked" -
> which seems to include both banana and jelly?
> 
> I'd like to be able to draw a diagram showing where python fits into this
> model and where the opportunities for optimization are found. By explicitly
> showing that the implentations of these layers are actually in C or provided
> by the OS, the perception that "python is slow" could be mitigated somewhat.

Well, at least 4.5 layers out of 7 are provided by hardware or C code
:-)  (Python itself is in C, after all; doesn't that make it fast?)

> I think that keeping the "session" layer in python can be justified with the
> added security of no buffer overflows, and the requirement for integration
> with the python application layer. There also are few tight loops in this
> layer.

After reading a bunch of OSI documents on this layer listing, I'm not
sure what *code* this layer actually refers to.  Session management and
flow control on the TCP level are done by the kernel; and a lot of
buffer overflows happen in the Presentation layer as well.

> The "Presentation" layer seems to be the most computationally expensive
> software layer as it includes encryptions, packing and compression. It is
> here that the pure python implentation is a little scary for most people -
> and so it is here where the most education and explicit categorization of
> components by implementation would be most useful.

More heavily optimized stuff at this layer would always be good, but I
would prefer to sacrifice as little safety as possible; there's always
the potential to mishandle data; especially if you count encryption in
this layer -- data which makes it through the encryption layer just fine
might still require processing that makes it dangerous to do in C.

That said, Twisted uses a C SSL implementation currently, and I
certainly have no plans to rewrite that in python.  I think that SSL is
probably good enough for the encryption layer, and it's well-tested.
Most of the problems I've had with it are build-related, although Moshe
may want to roll his own OpenSSL bindings to help resolve some of that.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Wed Dec 12 00:31:01 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 23:31:01 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
Message-ID: <1008135061.3360.13.camel@zelda>

So, occasionally I've heard from people using Twisted.  I haven't made
an index of them yet, or even the domains it's being used in.  If you
subscribe to this list, please send in something detailing your usage of
Twisted, what you like about it, what you don't like about it, and if
you like, feel free to tack on something outrageous for the ad copy :-).

If you don't want to be quoted or your project is not ready for public
consumption, email me personally.

Especially, I'd like to know about what modules you're using for your
application and what your experience has been with them.

(Even if you've mentioned your app before, please post about it again. 
If you're not using the latest, let me know which version you deployed
at.)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From mattcampbell at pobox.com  Wed Dec 12 01:37:15 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Wed, 12 Dec 2001 00:37:15 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>; from glyph@twistedmatrix.com on Tue, Dec 11, 2001 at 11:31:01PM -0600
References: <1008135061.3360.13.camel@zelda>
Message-ID: <20011212003715.A73498@mattcamp.dyn.dhs.org>

I'm using Twisted in a custom server which I've written for ACB
Radio Interactive (http://interactive.acbradio.org/), or ACBRI for
short.  ACBRI is a non-commercial "Internet radio station" run by
blind and visually-impaired people (myself included), playing music
in a variety of styles.  We use the Shoutcast MP3-streaming system
(www.shoutcast.com), in which the broadcaster sends the encoded
audio to the server (over a TCP connection), and the server sends
that audio to all currently connected clients.

We wanted to provide a high-quality audio stream for users with
broadband Internet connections, while not preventing modem users
from listening.  One way to solve this problem is for the broadcaster
to simultaneously send two separate streams to the server (or
potentially two different servers), one encoded at a high bit rate
and one at a low bit rate.  But not everyone can do that, due to
lack of adequate CPU time or bandwidth or the limited functionality
of the Windows applications most of the broadcasters use.

So my idea was that the broadcaster should send only one stream to
the server, which should re-encode that stream (using an external
MP3 encoder like LAME) into a low-bandwidth stream for modem users
and make that one available on a different port.  Our server also
needed to be able to relay one or both of the streams to another
Shoutcast server in case we didn't have enough bandwidth on our
own machine to serve many listeners.  I knew of no server that did
these two things, so I decided to write my own.

I had written a Shoutcast-compatible server in Python a few months
earlier, but it used threads to handle multiple connections (using
the classes in the SocketServer module).  After reading Sam Rushing's
description of Medusa and his tutorial on the asyncore and asynchat
modules, I knew that I should drop multithreading in favor of a
single-threaded asynchronous approach.  So I figured I'd rewrite
my server sometime but never got around to it, and one thing that
hindered me was the lack of built-in support for delayed callbacks
in asyncore (for timeouts which are necessary in some cases).

It seemed that it would be too difficult to implement the new
requirements in my original multi-threaded server (which was probably
poorly designed in other ways as well), so I decided to throw it
out and start over.  At that point I took a look at Twisted and
chose to use it.  I think the two main features that made me decide
to use Twisted instead of asyncore+asynchat were built-in support
for delayed callbacks and the Process class (since I needed to
start the MP3 encoder and communicate with it through pipes).
Initializing a server and handling a new incoming connection are
also easier under the twisted.internet framework, and I thought
the telnet server was cool.

This leads me to what I don't like about Twisted.  After taking a
closer look at Medusa, I found that Medusa's "monitor" is better
if you don't use a GUI (and therefore can't use Twisted Manhole).
I guess I ought to write a command-line Manhole client using the
twisted.internet.stdio module.  I'd also strongly recommend moving
the higher-level components into separate packages.  For example.
I have no use for Twisted Reality or Words and don't currently use
Twisted Spread, though Twisted Web may come in handy in the future
(I currently only use the low-level twisted.protocols.http module).

I started working on this server in August.  ACBRI has now been
using it for a little over two months.  It is not released to the
public, at least not yet; if it's released, it will be under the
GPL.

Sorry if this is too long; feel free to condense and paraphrase
what I've said as much as you like.  I hope you found it interesting.
-- 
Matt Campbell
E-mail and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/




From mattcampbell at pobox.com  Wed Dec 12 01:45:35 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Wed, 12 Dec 2001 00:45:35 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <20011212003715.A73498@mattcamp.dyn.dhs.org>; from mattcampbell@pobox.com on Wed, Dec 12, 2001 at 12:37:15AM -0600
References: <1008135061.3360.13.camel@zelda> <20011212003715.A73498@mattcamp.dyn.dhs.org>
Message-ID: <20011212004535.B73498@mattcamp.dyn.dhs.org>

Oh, I forgot to mention, the server I wrote is running under Twisted
0.11.0 and is working very well under that version (though as I
mentioned before, I don't use any of the higher-level components
like Web, Spread, or Words).
-- 
Matt Campbell
E-mail and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/




From andrew-twisted at puzzling.org  Wed Dec 12 02:54:30 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 12 Dec 2001 18:54:30 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <1008132560.3358.9.camel@zelda>
References: <20011210134617.A541@frobozz.local> <1008132560.3358.9.camel@zelda>
Message-ID: <20011212185430.B969@frobozz.local>

On Tue, Dec 11, 2001 at 10:49:20PM -0600, Glyph Lefkowitz wrote:
> On Sun, 2001-12-09 at 20:46, Andrew Bennetts wrote:
> > I wonder if there is a more integrated way to do this, though?
> 
> Well, the "integrated" way to do it would probably to be something
> similar to moshe's 'tap2deb' -- a Twisted service would probably be a
> .tap or .tac file which got loaded, similar to the way twistd does, and
> used the 'startLogging' call to open a log file and start writing to
> it.  A good default would be the doc/examples/coil.tac currently in CVS
> (and in the coopweb.org "breakfast builds").

Hmm.  I'm not sure how this would work... Python supports WinNT services
by providing a special executable "PythonService.exe", which runs the
script on your behalf, and passes things like "Stop" messages to your
SvcStop method.  The HandleCommandLine bit at the end of that script I
gave is a conveniece thing to wrap up installation and removal of
services -- typical usage of a script is:

    myservice.py install        # installs the service

    myservice.py start          # starts the service, this can also be
                                # done via the control panel

    myservice.py remove         # removes the service from the system

Services are just processes that can be automatically started on boot,
and can be stopped and started.  My point here is that whatever twisted
does, it will need to do it inside of a class with SvcDoRun, etc, that
needs to be registered as a service.

Apologies if I've just told you what you already know...

> Does win32 have a standardized logging mechanism?  Twisted can log to
> any file-like object, so if we could put log messages wherever winnt
> expects to find them that would be good ;-)  (I vaguely recall something
> called the "Event Log"?)

It does, but it's more for logging "events" than individual messages,
i.e. each line of the current log file should *not* be an entry in the
NT event log, unless you're okay with spamming the log ;)

Typically, programs will only report unusual events in the Event Log,
e.g. "could not replicate filesystem", "the service 'blah' could not be
started", etc.  There is a notion of severity, though.  Basically, I'm
not sure that the NT Event Log is going to properly fit the way Twisted
logs, especially seeing as services failing already gets logged
automatically, and PythonService.exe sees to it that the traceback is
included.

I'm not sure of any better standard places though.  I believe IIS
typically logs to %SYSTEMROOT%\Logs\W3SVC\yyyymmdd.log (SYSTEMROOT is an
environment variable that typically is set to C:\WINNT). Perhaps a
similar scheme would be appropriate for Twisted?

If you are interested in the Event Log route, just Google for "python
event log", or read the relevant chapter of the _Programming Python on
Win32_ book.

-Andrew.




From j.her at t-online.de  Wed Dec 12 14:31:30 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 12 Dec 2001 20:31:30 +0100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011212185430.B969@frobozz.local>
Message-ID: <16EF6Y-2FIN28C@fwd05.sul.t-online.com>

On Wed, 12 Dec 2001 18:54:30 +1100, Andrew Bennetts wrote:

>I'm not sure of any better standard places though.  I believe IIS
>typically logs to %SYSTEMROOT%\Logs\W3SVC\yyyymmdd.log (SYSTEMROOT is an
>environment variable that typically is set to C:\WINNT). Perhaps a
>similar scheme would be appropriate for Twisted?

If it comes to debug logging, the best way is to use
OutputDebugString().

Ciao, J?rgen






From sean at ninjaneering.com  Thu Dec 13 02:30:43 2001
From: sean at ninjaneering.com (Sean Riley)
Date: Thu, 13 Dec 2001 01:30:43 -0600
Subject: [Twisted-Python] new stuff in twisted
Message-ID: <HOEEKPCOKELHCNIJNMAGKEPHCDAA.sean@ninjaneering.com>

Hi all,

i've been working with glyph on some new stuff lately in the twisted world.
here is a brief description of some of it:

twisted.enterprise

the addition of the "Augmentation" class to the adbapi give a convenient
place to put database interface code.

dbpassport adds database authentication of users. there are a standard set
of tables for identities and perspectives, hooks for dynamic creation of
perspectives from the database, and a web interface to manager it all.
plans exist to add service specific database tables and user data.

this piece feels pretty solid to me and is the infrastructure used for the
two below pieces.

twisted.metrics

this is a system for monitoring distributed servers running twisted
applications. it has a central database of metrics data and a real-time data
cache in the metrics manager server. there is a web interface to the manager
which allows real-time viewing of the status of the servers in the network.

it is intended for real-time load balancing between servers and storing
metrics history information for data-mining. it accepts both operating
system statistics (through an OsMetrics Collector) and application specific
statistics which are both correlated into the same database schema.

this system is still in development, but is already functional. now that the
db support is solid, it should progress quickly.

twisted.forum

a web based message board / posting system with a database backend. this is
currently in an alpha stage. it needs work to hook up the user
authentication piece, but it already has functioning forums, messages and
threads.


all of these systems use web widgets extensively. i have to say that web
widgets are easy to use and provide a huge amount of functionality.

----
"If it's not running programs or fusing atoms, it's just bending space."
Sean Riley
sean at ninjaneering.com


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20011213/5af1b2f7/attachment.htm 

From andrew-twisted at puzzling.org  Thu Dec 13 08:52:50 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 14 Dec 2001 00:52:50 +1100
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>
References: <1008135061.3360.13.camel@zelda>
Message-ID: <20011214005250.B728@frobozz.local>

Ok, so here's a quick summary of what I use Twisted for...

I'm a developer for a company that processes stock data and publishes it
via the web and our own proprietary protocol.  While the bulk of our
systems are written in C++, I occasionally manage to do some things in
Python which the C++ developers think would be too tedious (but are
actually pretty simple in Python).

My C++-coding colleagues were concerned that a moderately important
server I proposed to write in Python wouldn't be fast enough, and that
I'd end out using something dodgy like one thread per socket which would
kill performance.  Our systems all run on Win 2000, and many of the C++
servers make use of relatively obscure features like IO completion ports
to improve performance.

So I used Twisted.  It is just beautifully simple to write an
asynchronous, single-threaded server with Twisted.  I've got a Python
implementation of our internal protocol that inherits from
twisted.protocols.protocol.ServerProtocol, and by writing a class which
inherits from my class and overrides a single method, "queryRecevied",
you can write a server for our systems.  At least one of the C++
developers is now talking about writing his next server in Python.

As for the speed, I'm getting nearly 200 requests/sec for this
particular application, which is without doing any sort of optimisation,
and involves processing by other servers due to the design of our
company's systems, and involves processing XML in my server.  This
compares nicely with our C++ servers :)

I haven't yet looked at half the things that Twisted can do (in
particular, I'm interested in seeing if twisted.enterprise supports MS
SQL Server 7 via the ADODB COM objects, or is easily adapted to it)....
but I'm looking forward to finding out.  Twisted makes writing a
scalable server disgustingly easy.

I regret that I cannot mention specific products -- this is all
closed-source stuff used internally.  

I'm using Twisted 0.12.3, but am looking forward to the next version
which will presumably fix the bug where startFactory gets called twice
<wink>

The only real problems I've had with Twisted so far are:
  * Having to admit that I need to delete those 50 lines of code because
    Twisted makes me realise I can do it in 15
  * Trying to figure out how to make Twisted do everything for me, when
    it turns out that I really just needed something incredibly simple.
    (I got so used to thinking Twisted's framework could do it all, I
    started to muck about with Deferreds, until I realised that I just
    wanted keep a list of functions to run as soon as another function
    finished, which is something you can do with vanilla Python
    perfectly well :)
  * Having a semi-legitimate reason to IRC from work, so I can ask the
    friendly people on #python questions about Twisted :)

Oh yes, and I'd like to mention that I like how if Protocol.dataReceived
for some reason throws an exception, Twisted keeps on working (after
logging the exception), rather than killing the whole server.  I realise
it's a simple thing, but I'm glad it's been done.

I'm also interested in run-time configuration/status info -- am I right
in believing there is a simple way to create a web interface for
inspecting a Twisted application?  (Our systems typically export a COM
interface which is then manipulated by VB apps, but exporting COM
interfaces from NT services in Python is a bit messy). 

Hmm.  That wasn't as quick as I intended, but I hope you find it to be
of some use.

Keep on Twistin'...

-Andrew.




From tv at twistedmatrix.com  Fri Dec 14 14:39:29 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 14 Dec 2001 21:39:29 +0200
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>
References: <1008135061.3360.13.camel@zelda>
Message-ID: <87k7vppp5a.fsf@ki.yok.utu.fi>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> So, occasionally I've heard from people using Twisted.  I haven't made

	All the old beards know my software already, but here goes
	anyway:

        http://mc-foo.sourceforge.net/

MC Foo is an advanced, adaptive and learning mp3 jukebox server.

    * continuous music playing
    * learns what music you like and dislike
    * no static playlists; uses a playqueue you can view and alter
    * can be controlled from any hosts and even with infrared remote
      controllers
    * allows multiple user/preference profiles, according to whose
      listening and his or her mood

	The project started as part of our studies. That led to the C
	implementation -- choice of language was dictated by the
	lecturer.

	Since the course, I got bored of debugging C, and decided I
	need to learn Python. Five hours later, I had reimplemented
	the core parts of MC Foo in Python. I still had to debug the
	line-based network interface. Five hours later, I had ported
	it to use XML-RPC. That wasn't really satisfactory. I started
	spending time on #python on irc.openprojects.net, and saw this
	group of hackers putting together an asynchronic input/output
	framework (and more) in Python. Five hours later, MC Foo was
	ported to use twisted.spread.pb. There exists a Tkinter client
        GUI that allows you to visually manipulate the playqueue. I
        use the command line interface heavily.

        MC Foo uses existing Ogg/MP3 libraries as backend, and will
        never touch file contents or decompression ourselves (it does
        write to /dev/sound/dsp itself, but it's all opaque data to
        it). Where Python-accessible free libraries are not available,
        a suitable players will be used in batch mode. (That is
        mpg321, for now. Anyone know of a free Python MP3 library?)


        STATUS
        ------

        It plays music whenever I'm home.

       	Everything but the CVS is horribly obsolete. Grab the CVS snapshot,
        look around. Grab me on #python to help you get started -- I can
        successfully build .debs out of a CVS snapshot, create .taps with
        that, and run the .taps, but your mileage may still vary.

        I will add one or two features, kill some bugs and then finally
        release the first real Python version of MC Foo.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From glyph at twistedmatrix.com  Mon Dec 17 05:09:25 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 17 Dec 2001 04:09:25 -0600
Subject: [Twisted-Python] Test, Please Ignore
Message-ID: <1008583766.786.3.camel@zelda>

This is a test to make sure that Mailman is still working after
Zaibach's upgrade to Debian Unstable.  Hey, why are you reading this?  I
said it was a test.  Ignore it!

Oh well, too late.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Mon Dec 17 12:14:56 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Dec 2001 19:14:56 +0200
Subject: [Twisted-Python] Basic cookie support
Message-ID: <3C1E2810.2010407@itamarst.org>

Unless someone has a problem with it, this goes in tommorow. I'm willing to 
add a comment "don't use cookies, use sessions instead" ;)


RCS file: /cvs/Twisted/twisted/web/server.py,v
retrieving revision 1.31
diff -c -r1.31 server.py
*** twisted/web/server.py	15 Dec 2001 03:24:10 -0000	1.31
--- twisted/web/server.py	17 Dec 2001 17:13:54 -0000
***************
*** 170,176 ****
           self.args = {}
           self.stack = []
           self.headers = {}
!
           self.method, self.uri = command, path
           self.clientproto = version
           self.content = content
--- 170,177 ----
           self.args = {}
           self.stack = []
           self.headers = {}
!         self.cookies = []
!
           self.method, self.uri = command, path
           self.clientproto = version
           self.content = content
***************
*** 337,342 ****
--- 338,345 ----
                   self.sendStatus(self.code, message)
                   for name, value in self.headers.items():
                       self.sendHeader(name, value)
+                 for cookie in self.cookies:
+                     self.sendHeader("Set-Cookie", cookie)
                   self.endHeaders()

               # if this is a "HEAD" request, we shouldn't return any data
***************
*** 360,365 ****
--- 363,391 ----
           """
           self.finish()

+     def addCookie(self, k, v, expires=None, domain=None, path=None, 
max_age=None, comment=None, secure=None):
+         """Set an outgoing HTTP cookie.
+         """
+         cookie = '%s="%s"' % (k, v)
+         if not (expires is None):
+             cookie = cookie +"; Expires=%s" % expires
+         if not (domain is None):
+             cookie = cookie +"; Domain=%s" % domain
+         if not (path is None):
+             cookie = cookie +"; Path=%s" % path
+         if not (max_age is None):
+             cookie = cookie +"; Max-Age=%s" % max_age
+         if not (comment is None):
+             cookie = cookie +"; Comment=%s" % comment
+         if not (secure is None) and secure:
+             cookie = cookie +"; Secure"
+         self.cookies.append(cookie)
+
+     def view_addCookie(self, k, v, **kwargs):
+         """Remote version of addCookie; same interface.
+         """
+         apply(self.addCookie, (k, v), kwargs)
+
       def setHeader(self, k, v):
           """Set an outgoing HTTP header.
           """
***************
*** 418,425 ****
               # if it still hasn't been set, fix it up.
               if not self.session:
                   self.session = self.site.makeSession()
!                 self.setHeader('Set-Cookie',
!                                '%s=%s' % (cookiename, self.session.uid))
           self.session.touch()
           return self.session

--- 444,450 ----
               # if it still hasn't been set, fix it up.
               if not self.session:
                   self.session = self.site.makeSession()
!                 self.addCookie(cookiename, self.session.uid)
           self.session.touch()
           return self.session




From mad96 at hampshire.edu  Thu Dec 20 18:26:06 2001
From: mad96 at hampshire.edu (Michael Dartt)
Date: Thu, 20 Dec 2001 18:26:06 -0500 (EST)
Subject: [Twisted-Python] What's so cool about Twisted?
Message-ID: <1008890766.3c22738e5a57d@webmail.hampshire.edu>

(Yes, Glyph, I know it leads to increased sexual potency.)

The really short version of this email: What features/tools/etc. does Twisted 
offer, how do they differ from conventional APIs/programs, and what do they 
do?  (E.g. Sessions vs. cookies, Widgets, Passport....)  What would 
its "feature list" look like?

The longer version:

The recent message about CGI/Sessions got me wondering how Twisted differs from 
other 'net frameworks, and how I can capitalize on its advantages.  For 
example, I'm planning on running a blog on top of Twisted (all I need is a 
computer to code on...:P).  On a standard web server, I'd probably set most of 
it up as CGIs, at least initially, and use cookies for dealing with "members" 
and such.  But Twisted's got these things called Sessions and Passports, and 
I've seen a lot of bits thrown about in regard to Widgets.  And there's 
probably a lot of stuff I haven't heard about.

I know there's the "Why Twisted?" section, but it's *extremely* high-level, 
basically saying "It's written in Python, has a bunch of different protocols 
that can interface, and is well-supported," which is like someone handing you a 
tool box and telling you, "There are some really useful tools in here.  They're 
like ones you may have heard about, but better."  "So...why are they better?  
What do they do?  Why would I want this tool set over a different one?"

I realize at least part of this comes from my ignorance regarding network 
programming; I'm basically a neophyte when it comes to that.  Otherwise, I 
could probably dive into the code and figure out what does what, and how it's 
different or better than the way things are normally done.  As it is, I 
wouldn't know where to start.  Once I know what the parts are and what they do, 
I should be able to use my m4D Py7h0n sKi11Z (;-}) to figure out the "how".

Thanks in advance,

Mike



From glyph at twistedmatrix.com  Sun Dec 23 03:06:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 23 Dec 2001 02:06:33 -0600
Subject: [Twisted-Python] What's so cool about Twisted?
In-Reply-To: <1008890766.3c22738e5a57d@webmail.hampshire.edu>
References: <1008890766.3c22738e5a57d@webmail.hampshire.edu>
Message-ID: <1009094796.17755.12.camel@zelda>

On Thu, 2001-12-20 at 17:26, Michael Dartt wrote: 
> (Yes, Glyph, I know it leads to increased sexual potency.)
> 
> The really short version of this email: What features/tools/etc. does Twisted 
> offer, how do they differ from conventional APIs/programs, and what do they 
> do?  (E.g. Sessions vs. cookies, Widgets, Passport....)  What would 
> its "feature list" look like?

I really wish I could point you at a complete feature list; right now,
though, a lot of things are in flux.  This is a complaint that I've
heard before though, so if you manage to get a good idea of what Twisted
is from reading a combination of code, list archives, and documentation
snippets that we've written, a concise write-up of that would be really
valuable.

> The longer version:
> 
> The recent message about CGI/Sessions got me wondering how Twisted differs from 
> other 'net frameworks, and how I can capitalize on its advantages.  For 
> example, I'm planning on running a blog on top of Twisted (all I need is a 
> computer to code on...:P).  On a standard web server, I'd probably set most of 
> it up as CGIs, at least initially, and use cookies for dealing with "members" 
> and such.  But Twisted's got these things called Sessions and Passports, and 
> I've seen a lot of bits thrown about in regard to Widgets.  And there's 
> probably a lot of stuff I haven't heard about.

For this specific case, I can answer you:

You will need to know about twisted.web.widgets and twisted.enterprise
(probably the version we're working on right now, still unreleased). 
There are copious comments in Widgets, and Enterprise has a fairly small
API, documentation is forthcoming.

As far as sessions go; they're just an automatically managed cookie with
some arbitrarily-associated state.  The API is simply that a Request
object has a method getSession, which will return a Session instance;
set or get any attributes you like on that object; it has no relevant
methods.

These session objects expire every half an hour of inactivity or so.

Finally, twisted.forum (still unreleased, I believe; I've got to get
moving on the next release!) will probably provide you with a good bit
of straightforward example code for how to do these sort of things.

> I know there's the "Why Twisted?" section, but it's *extremely* high-level, 
> basically saying "It's written in Python, has a bunch of different protocols 
> that can interface, and is well-supported," which is like someone handing you a 
> tool box and telling you, "There are some really useful tools in here.  They're 
> like ones you may have heard about, but better."  "So...why are they better?  
> What do they do?  Why would I want this tool set over a different one?"

A lot of the really cool functionality in Twisted is still being
developed.  The main interesting thing about Twisted is that it's a
platform for developing integrated functionality, not in any one bit of
functionality that exists at this time.  This is a feature which is hard
to describe, especially to non-technical people
*cough*management*cough*.

This makes it better than the average web platform because on the
average web platform, it would not be possible to integrate a chat
program with your webserver and have it access the same data. 
Decoupling your data into a relational database can help, but you still
end up with process synchronization and communication problems; not to
mention the fact that ALL data that you want to have accessible through
the chat interface must be represented in the database.

With Twisted, lots of people are working on lots of parts of the
networking infrastructure at once.  It's ideal for games, but it's also
ideal for web applications. Given the factoring of the code, there is a
lot of common code at each level, so as we reimplement, optimize,
refactor, and enhance various pieces of the codebase to support, let's
say, a multiplayer game, the webserver and IRC server get better too.

> I realize at least part of this comes from my ignorance regarding network 
> programming; I'm basically a neophyte when it comes to that.  Otherwise, I 
> could probably dive into the code and figure out what does what, and how it's 
> different or better than the way things are normally done.  As it is, I 
> wouldn't know where to start.  Once I know what the parts are and what they do, 
> I should be able to use my m4D Py7h0n sKi11Z (;-}) to figure out the "how".

Learning network programming is a task in itself, and learning Twisted
could probably help you through it.  Some of the confusing stuff is in
the style of programming that Twisted encourages, which is to say
event-based rather than threaded.  Some of the confusing stuff is in the
various bits of Twisted that use Python's internals to make things
happen "behind the scenes".  In general, however, sample programs with
Twisted are short and to the point, and you can focus on the particular
problems of your application domain (See doc/examples in the Twisted
distribution.)

In the absence of documentation, ask questions either on this list or in
the #python channel on irc.openprojects.net; there will often be
developers there who can help you.  Usually this mailing list is helpful
too, I *ahem* ENCOURAGE other developers to help newbies and write
documentation ;).  I will try to turn salient mailing list posts into
HTML documentation in a timely manner, but I make no promimses.

Happy hacking,

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Mon Dec 24 07:53:37 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Dec 2001 14:53:37 +0200
Subject: [Twisted-Python] Why Zoteca Uses Twisted
Message-ID: <3C272551.5080200@itamarst.org>

1 Twisted

1.1 Open Source Advantage

Zoteca believes that Open Source software provides a considerable
business advantage. Many parts of any software platform
are generic, and not restricted to the task at hand. Using
Open Source software for these components allows us to concentrate
R&D resources on our core competencies and proprietary advantages,
while still using an underlying technology that is unparalleled
in terms of cost, flexibility, scalability and robustness.

1.1.1 Open Source Saves Money

The costs for development for Open Source components is spread
out over a number of organizations and multiple developers.
As a result, for every person-year of investment on our
part, we receive tens of person-years of development in
return, at no additional cost.

1.1.2 Open Source is Flexible

Open Source development allows us to cooperate with organizations
and individuals from other industries, bringing ideas and
knowledge from many different fields of competency to bear
upon our common infrastructure needs. This development process
takes advantage of orthogonal synergy between different
industries' software requirements. Hence the resultant software
is far more generic and flexible than had it been developed
for one specific use. Of course, total access to the underlying
source code also allows customized changes for particular
applications.

1.1.3 Open Source is Scalable and Robust

Developers on open source projects are not engaged in an
intellectual exercise nor are they removed from the application
space of the software under development. They are developing
the software for their own use for real needs. They are
not only developers, but users and testers as well. Hence
the resultant software is far more field-ready and scalable
to real-world applications than proprietary alternatives.
The multiple environments the components are used in, also
ensures that they are robust and relatively bug free. Being
cross-platform is the icing on the cake.

1.2 Twisted Network Server

A prime example of this Open Source approach is the Twisted
network server. Twisted is written in Python, a cross-platform,
high-level object-oriented programming language. Twisted
includes a web server, a telnet server, a multiplayer RPG
engine, a generic client and server for remote object access,
and APIs for creating new protocols and services. Twisted
is being developed and used by individuals and organizations
from across the world, for uses ranging from massive multiplayer
games to streaming audio servers.

Some of Twisted's advanced features include:

* Abstraction layers for protocols and transports, allowing
   design of servers that transparently support multiple
   transports (e.g. TCP and SSL).

* Pluggable event loops, supporting integration with GUI
   toolkits and platform-specific event loops (e.g. wxPython,
   Java or Unix/Win32 specific APIs).

* Multiple protocol support inside a process, allowing cross-protocol
   applications, integrated web control panels, etc..

* A metrics system supporting centralized collection of protocol
   and process statistics.

* Perspective Broker, a powerful, asynchronous and efficient
   remote object protocol, which can also be used from Java.

* Integrated event-based and threaded programming, using
   the Async/Half-Async design pattern.

The use of Twisted and Python has had many benefits for Zoteca
when developing our software:

* Low cost of development, since basic infrastructure needed
   by any network server is built in to the platform.

* Cross-platform and platform specific support (Twisted,
   and thus Zoteca's servers, can run and take advantage
   of the Unix, Windows and Java platforms).

* Flexibility and speed of development, allowing easy customization
   of the software.

* Wide scale testing of low-level infrastructure in a variety
   of situations.

* The ability to customize and enhance Twisted to support
   additional functionality.

1.3 About Zoteca

Zoteca has developed a new, patented, proprietary technology
which provides reliable, available, private and secure ("RAPS")
data sharing in networked environments. Zoteca's mission
is to create a family of product toolkits, which integrate
into customized versions of data sharing applications. These
Zoteca-based products provide RAPS services to end-users
--- both businesses and consumers.

In current networks it is nearly impossible to achieve reliability
and accessibility simultaneously --- hence the constant
shuffling of data between centralized servers and the organizational
edge. Similarly the more private and secure networks are,
the less efficient data sharing becomes. Zoteca creates
spaces where individuals and groups share data in a total
RAPS environment, simultaneously efficient (R & A) and safe
(P & S).

The core of our innovation involves decoupling computing
entities (data, files, etc.) from specific physical computers
or locations, thereby eliminating single point of failure.
By using distributed protocols, redundant and immutable
data stores, sophisticated authentication schemes and encryption
techniques, we address the problem at the infrastructure
level, allowing us to offer guaranteed levels of service
in terms of the four RAPS dimensions.

For more information about Zoteca and our products, please
visit http://www.zoteca.com.





From twisted at itamarst.org  Mon Dec 24 09:56:14 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Dec 2001 16:56:14 +0200
Subject: [Twisted-Python] First go at connectTCP and connectSSL
Message-ID: <3C27420E.7020801@itamarst.org>

if I don't get complaints about this, it gets checked in and I move on to 
shutting down connectors, and so on.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: connect.patch
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20011224/5213a662/attachment.txt 

From tv at twistedmatrix.com  Wed Dec 26 09:02:11 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 26 Dec 2001 16:02:11 +0200
Subject: [Twisted-Python] Object prevalence (advogato article)
Message-ID: <87ellim658.fsf@ki.yok.utu.fi>

http://advogato.org/article/398.html

	Short summary:

        -keep all state in RAM, no traditional database.
        -write snapshots of state to file every n hours.
        -write a journal of all commands coming in to journal.
        -in case of crash, restore state+rerun journal.

        This is pretty close to what Python and Twisted .taps can do. 
        Let's have a goal of being able to do it all, easily.

	I think I'll add .tap rewriting every n seconds to MC Foo now :)

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From twisted at itamarst.org  Wed Dec 26 11:13:34 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 18:13:34 +0200
Subject: [Twisted-Python] Metrics and all that jazz
Message-ID: <3C29F72E.40507@itamarst.org>

I've been looking at metrics - currently the model is multiple machines,
connecting to a central metrics server that stores metrics in postgres. I'm
going to need something like that, so that's good, but it should also scale
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show
up in the web interface - maybe try recreating your test environment from
scratch and see what step are missing from Twisted? I keep getting these errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on
the local server too (for smaller setups and for easier testing.) See the
Round Robin Archives section of
http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/manual/index.html for
details on what it is - it's a more reasonable way of storing data than a
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics,
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty
graphs and stuff.





From sean at twistedmatrix.com  Wed Dec 26 14:34:06 2001
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 26 Dec 2001 13:34:06 -0600
Subject: [Twisted-Python] Metrics and all that jazz
In-Reply-To: <3C29F72E.40507@itamarst.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGKECDCEAA.sean@twistedmatrix.com>

yes, i must write some docs.

did you run the populate.sql script? each metrics variable must exist in the
metrics_variables table.

rddtool looks interesting. i will take a look in more detail.

all good feedback! thanks.

Unfortunately I currently don't have a production system that this is
running on - it is for a system that isn't built yet. It turned out that
implementing it took about the same time as writing the technical
specification document for it in the required format, so I did them both
simultaneously.

Could you elaborate on "An additional way of keeping track of open
connections and their metrics"?

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Itamar
Shtull-Trauring
Sent: Wednesday, December 26, 2001 10:14 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Metrics and all that jazz


I've been looking at metrics - currently the model is multiple machines,
connecting to a central metrics server that stores metrics in postgres. I'm
going to need something like that, so that's good, but it should also scale
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show
up in the web interface - maybe try recreating your test environment from
scratch and see what step are missing from Twisted? I keep getting these
errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on
the local server too (for smaller setups and for easier testing.) See the
Round Robin Archives section of
http://people.ee.ethz.ch/~oetiker/webtools/rrdtrool/manual/index.html for
details on what it is - it's a more reasonable way of storing data than a
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics,
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty
graphs and stuff.



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From twisted at itamarst.org  Wed Dec 26 15:31:46 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 22:31:46 +0200
Subject: [Twisted-Python] Metrics and all that jazz
References: <HOEEKPCOKELHCNIJNMAGKECDCEAA.sean@twistedmatrix.com>
Message-ID: <3C2A33B2.8050602@itamarst.org>

Sean Riley wrote:


> did you run the populate.sql script? each metrics variable must exist in the
> metrics_variables table.


There is no populate.sql for metrics last I checked.


> Could you elaborate on "An additional way of keeping track of open
> connections and their metrics"?

Consider a SMTP server. It has clients connect and send emails through 
it. I would like to be able (through a web interface) to see which 
clients are currently connected to it, and how many messages they each 
have sent through (e.g. user from foo.example.com port 67349 has just 
sent 10000 messages, perhaps he's a spammer.) Or to be able to see who 
is logged in from where to a PB server and how many method calls each 
perspective has sent, etc..




From twisted at itamarst.org  Thu Dec 27 04:44:35 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Dec 2001 11:44:35 +0200
Subject: [Twisted-Python] How to test metrics
Message-ID: <3C2AED83.3060203@itamarst.org>

0. make sure postgres and pypgsql are installed (apt-get install python-pgsql).

1. run "createdb twisted"

2. using psql, create the tables listed in the schemas in 
twisted/enterprise/dbpassport.py and twisted/metrics/metricsdb.py

3. $ cat twisted/enterprise/populate.sql | psql twisted
    $ cat twisted/metrics/populate.sql | psql twisted

4. $ twisted -n -y doc/examples/metrics.tac

5. $ PYTHONPATH=. python twisted/metrics/test-client.py

6. Point your browser at http://locahost:8485/


Perhaps there should be a doc/examples/metrics/ and the populate.sql and 
test-client.py, test-os.py and metrics.tac should be there?




From twisted at itamarst.org  Wed Dec 26 09:40:37 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 16:40:37 +0200
Subject: [Twisted-Python] Metrics and all that jazz
Message-ID: <3C29E165.1060404@itamarst.org>

I've been looking at metrics - currently the model is multiple machines, 
connecting to a central metrics server that stores metrics in postgres. I'm 
going to need something like that, so that's good, but it should also scale 
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show 
up in the web interface - maybe try recreating your test environment from 
scratch and see what step are missing from Twisted? I keep getting these errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on 
the local server too (for smaller setups and for easier testing.) See the 
Round Robin Archives section of 
http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/manual/index.html for 
details on what it is - it's a more reasonable way of storing data than a 
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics, 
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty 
graphs and stuff.




From ivo at amaze.nl  Sun Dec 30 18:44:31 2001
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Mon, 31 Dec 2001 00:44:31 +0100
Subject: [Twisted-Python] newbie question: error handling
Message-ID: <20011231004431.H6904@amaze.nl>

Hi All,

I'm currently migrating my irc client to twisted, and things look
promising.

However, I can't figure out the following things:

My protocol is derived from protocols.basic.LineReceiver
(which in turn derives from protocol.Protocol.protocol).

How can I determine what specific error condition caused connectionLost()
or connectionFailed()? I.e. connection refused, unknown hostname,
no route to host, etc (the standard errno stuff). 

Also, how can I determine if Linereceived.sendLine() (or 
Protocol.Transport.write()) failed? It doesn't seem to return an
error value or raise Exceptions, and depending on the invocation
of connectionLost makes things perhaps too asynchronous..

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From tv at twistedmatrix.com  Sun Dec 30 16:13:03 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 30 Dec 2001 23:13:03 +0200
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
Message-ID: <87u1u8if8g.fsf@ki.yok.utu.fi>

Here's a sketch of how I imagine an LDAP backend to passport will
work:

LDAP is a logically simple (implementation horrible:) TCP protocol
with messages passing in both directions. User authentication is one
possible message type, and the server replies with either success or
an error message.

For just searching and browsing, you can bind anonymously. Most
servers allow read-only access by default.

But for any kind of modification, we need to bind.

So far, this seems pretty much like with databases. However, here's
the big catch: the normal way to use databases is to have one userid
and password per application, and perhaps store actual userids and
passwords within a table in the database. The normal way to use LDAP
is to bind _as the user who is doing the operation_.

Here is a list of requirements I can think, that need to be fulfilled
in order for me to be able to use passport. Some of these may be very
trivial, or taken for granted by now -- I'm just making sure they are
seen.


Requirement #1: Passport needs to be async.

In order to be able to use LDAP as the backend for passport-like user
verification, the backend needs to be able to talk to a possibly slow
server.


Requirement #2: Passport must be able to store data in the
Perspective during authentication.

However, if the application wants to use LDAP for more than just user
authentication, things get a bit worse. We could just store the
password we saw the user enter, and later bind to the LDAP server as
this user. However, I dislike storing plain-text passwords in virtual
memory.


Requirement #3: Passport must be able to ask users to reauthenticate.

A better way is to remember that we already did bind (authenticate) to
the LDAP server as that user. Just reserve that connection for that
user alone. As long as the connection is alive, we can keep on talking
to the LDAP server.

Now, programs can be restarted, TCP connections can die, and servers
can utilize idle timeouts, maximum time limits, or limit maximum
number of operations per connection. The TCP connection can die any
moment. As we didn't store the user password, we need to ask it again
when we see the connection has closed and the user tries an operation
that requires talking to the LDAP server. This requires "invalidating"
the users previous authentication.


-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From glyph at twistedmatrix.com  Mon Dec 31 10:08:52 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 09:08:52 -0600
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <20011231004431.H6904@amaze.nl>
References: <20011231004431.H6904@amaze.nl>
Message-ID: <1009811332.571.5.camel@zelda>

On Sun, 2001-12-30 at 17:44, Ivo van der Wijk wrote:
> Hi All,
> 
> I'm currently migrating my irc client to twisted, and things look
> promising.
> 
> However, I can't figure out the following things:
> 
> My protocol is derived from protocols.basic.LineReceiver
> (which in turn derives from protocol.Protocol.protocol).
> 
> How can I determine what specific error condition caused connectionLost()
> or connectionFailed()? I.e. connection refused, unknown hostname,
> no route to host, etc (the standard errno stuff). 

Currently you can't.  This is the first request I'm aware of to be made
aware of the actual errno that caused the connection to fail; the
distinction between connectionFailed and connectionLost seemed to be the
big one.

The place you'd have to fix would be
twisted.internet.tcp.Connection.(doRead|writeSomeData).  Similarly in
twisted.internet.udp.  Patches accepted :-).

> Also, how can I determine if Linereceived.sendLine() (or 
> Protocol.Transport.write()) failed? It doesn't seem to return an
> error value or raise Exceptions, and depending on the invocation
> of connectionLost makes things perhaps too asynchronous..

If you need this level of guarantee, you need a protocol which will send
acks for messages as they've been received.  There is no such thing as
"too asynchronous" -- there is "synchronous", "asynchronous", and
"sometimes stuck doing something with one client while the rest of the
server hangs..." :-).

This is the same question as previously, really; if a write "fails",
then the connection has been lost.  Knowing that a connection failed
during a write and getting an errno would give you all the same
information.

Keep in mind that a write "succeeding" might just mean that the memory
was succesfully copied into a buffer for your OS kernel to send; the
other side of the connection may never have received it.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Mon Dec 31 10:19:48 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 09:19:48 -0600
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
In-Reply-To: <87u1u8if8g.fsf@ki.yok.utu.fi>
References: <87u1u8if8g.fsf@ki.yok.utu.fi>
Message-ID: <1009811989.1908.7.camel@zelda>

On Sun, 2001-12-30 at 15:13, Tommi Virtanen wrote:
> 
> Here's a sketch of how I imagine an LDAP backend to passport will
> work:
> 
> LDAP is a logically simple (implementation horrible:) TCP protocol
> with messages passing in both directions. User authentication is one
> possible message type, and the server replies with either success or
> an error message.
> 
> For just searching and browsing, you can bind anonymously. Most
> servers allow read-only access by default.
> 
> But for any kind of modification, we need to bind.
> 
> So far, this seems pretty much like with databases. However, here's
> the big catch: the normal way to use databases is to have one userid
> and password per application, and perhaps store actual userids and
> passwords within a table in the database. The normal way to use LDAP
> is to bind _as the user who is doing the operation_.
> 
> Here is a list of requirements I can think, that need to be fulfilled
> in order for me to be able to use passport. Some of these may be very
> trivial, or taken for granted by now -- I'm just making sure they are
> seen.
> 
> 
> Requirement #1: Passport needs to be async.
> 
> In order to be able to use LDAP as the backend for passport-like user
> verification, the backend needs to be able to talk to a possibly slow
> server.

There are other, perhaps obvious, reasons why this needs to be so. 
Identities are already async and I'm working on making Perspectives
async right now.  I'll check in something by tomorrow at the latest.

> Requirement #2: Passport must be able to store data in the
> Perspective during authentication.

> However, if the application wants to use LDAP for more than just user
> authentication, things get a bit worse. We could just store the
> password we saw the user enter, and later bind to the LDAP server as
> this user. However, I dislike storing plain-text passwords in virtual
> memory.

I'm not sure what you're talking about here -- it sounds like you're
using "authentication" to mean two different things.  First, what is
*the* Perspective?  An Identity (presumably Identities are stored in
LDAP) has multiple Perspectives.

> Requirement #3: Passport must be able to ask users to reauthenticate.
> 
> A better way is to remember that we already did bind (authenticate) to
> the LDAP server as that user. Just reserve that connection for that
> user alone. As long as the connection is alive, we can keep on talking
> to the LDAP server.
> 
> Now, programs can be restarted, TCP connections can die, and servers
> can utilize idle timeouts, maximum time limits, or limit maximum
> number of operations per connection. The TCP connection can die any
> moment. As we didn't store the user password, we need to ask it again
> when we see the connection has closed and the user tries an operation
> that requires talking to the LDAP server. This requires "invalidating"
> the users previous authentication.

OK.  So it sounds like you want any interaction with a perspective or
identity to be able to potentially raise an exception that says "you
need to offer credentials for this Identity again".  Frameworks (e.g.
web.guard, pb.AuthRoot) will need to handle this sensibly.

It's a reasonable requirement, but it may be domain-specific to your
LDAP interaction stuff.  I know that I have at least one system where
authentication is persistent within a server once it's been accomplished
(interaction with the authentication database stops after the user's
been verified).

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From tv at twistedmatrix.com  Mon Dec 31 11:28:52 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 31 Dec 2001 18:28:52 +0200
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
In-Reply-To: <1009811989.1908.7.camel@zelda>
References: <87u1u8if8g.fsf@ki.yok.utu.fi> <1009811989.1908.7.camel@zelda>
Message-ID: <87k7v3icaj.fsf@ki.yok.utu.fi>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> > Requirement #2: Passport must be able to store data in the
> > Perspective during authentication.
> 
> > However, if the application wants to use LDAP for more than just user
> > authentication, things get a bit worse. We could just store the
> > password we saw the user enter, and later bind to the LDAP server as
> > this user. However, I dislike storing plain-text passwords in virtual
> > memory.
> 
> I'm not sure what you're talking about here -- it sounds like you're
> using "authentication" to mean two different things.  First, what is
> *the* Perspective?  An Identity (presumably Identities are stored in
> LDAP) has multiple Perspectives.

	I'm probably all confused by Perspectives and Identities. 
	s/Perspective/Identity/. And naturally the fd shouldn't be
	persistent -- just to make sure.

	Yes, I want LDAP to be more than authentication. Consider an
	application that has users stored in the LDAP tree, in one
	subtree. It also has some user-editable data stored in (same
	or different) subtree. LDAP server ACLs allow some of the
	users access to some of the fields, etc. If you want to make a
	web frontend, you need to use LDAP as an authentication
	backend, and you need to use that authentication (to the LDAP
	server) in order to perform actions on the LDAP server.

	Think of it this way: an authentication server gives you a
	key, and when you later perform actions toward external
	services as the authenticated user, you need to provide the
	key. In this case, the key is a TCP connection. I believe
        Kerberos follows this model, with a "real" key.

> > Requirement #3: Passport must be able to ask users to
> > reauthenticate.
> > 
> > A better way is to remember that we already did bind (authenticate) to
> > the LDAP server as that user. Just reserve that connection for that
> > user alone. As long as the connection is alive, we can keep on talking
> > to the LDAP server.
> > 
> > Now, programs can be restarted, TCP connections can die, and servers
> > can utilize idle timeouts, maximum time limits, or limit maximum
> > number of operations per connection. The TCP connection can die any
> > moment. As we didn't store the user password, we need to ask it again
> > when we see the connection has closed and the user tries an operation
> > that requires talking to the LDAP server. This requires "invalidating"
> > the users previous authentication.
> 
> OK.  So it sounds like you want any interaction with a perspective or
> identity to be able to potentially raise an exception that says "you
> need to offer credentials for this Identity again".  Frameworks (e.g.
> web.guard, pb.AuthRoot) will need to handle this sensibly.

	Well, it is possible to handle with voiding the authentication
	data. For example, with web.guard, this could mean that

        1. web.guard sees authentication is still valid, lets a request
           continue

        2. actual request causes actions that discover the LDAP connection
           has closed, give back error

        3. user sees error, clicks "submit" again, or refreshes.

        4. web.guard sees an unauthenticated user, asks for authentication

        5. user authenticates

        6. web.guard lets the resource pass by (A separate ugliness is that
           web.guard complains if it has to authenticate anything with
           forms, and destroys submitted data)

> It's a reasonable requirement, but it may be domain-specific to your
> LDAP interaction stuff.  I know that I have at least one system where
> authentication is persistent within a server once it's been accomplished
> (interaction with the authentication database stops after the user's
> been verified).

	Yes, and one time would be enough even for an LDAP server that
	is used as authentication only. The point where it isn't
	enough is achieved by creating a proxy in Twisted, where the
	proxy isn't the final service that authenticates users, but
	just acts as a smart protocol converter. Then the proxy is at
        the mercy of the final service.

	And that's what I've been doing. LDAP <-> web.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From ivo at amaze.nl  Mon Dec 31 13:27:22 2001
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Mon, 31 Dec 2001 19:27:22 +0100
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <1009811332.571.5.camel@zelda>; from Glyph Lefkowitz on Mon, Dec 31, 2001 at 09:08:52AM -0600
References: <20011231004431.H6904@amaze.nl> <1009811332.571.5.camel@zelda>
Message-ID: <20011231192722.J6904@amaze.nl>

On Mon, Dec 31, 2001 at 09:08:52AM -0600, Glyph Lefkowitz wrote:
> On Sun, 2001-12-30 at 17:44, Ivo van der Wijk wrote:
> > Hi All,
> > 
> > I'm currently migrating my irc client to twisted, and things look
> > promising.
> > 
> > However, I can't figure out the following things:
> > 
> > My protocol is derived from protocols.basic.LineReceiver
> > (which in turn derives from protocol.Protocol.protocol).
> > 
> > How can I determine what specific error condition caused connectionLost()
> > or connectionFailed()? I.e. connection refused, unknown hostname,
> > no route to host, etc (the standard errno stuff). 
> 
> Currently you can't.  This is the first request I'm aware of to be made
> aware of the actual errno that caused the connection to fail; the
> distinction between connectionFailed and connectionLost seemed to be the
> big one.
> 
> The place you'd have to fix would be
> twisted.internet.tcp.Connection.(doRead|writeSomeData).  Similarly in
> twisted.internet.udp.  Patches accepted :-).
> 

Okay. How about an error parameter to connectionLost|Failed
that would contain the actual error? Unfortunately, this would break
existing code, so you would end up with names like connectionFailedWithError.
Alternatively, the protocol can query the transport for the (last) error code.
Is the python error mechanism platform independent enough, or should there be 
an abstraction of the errno/errstr mechanism?

> > Also, how can I determine if Linereceived.sendLine() (or 
> > Protocol.Transport.write()) failed? It doesn't seem to return an
> > error value or raise Exceptions, and depending on the invocation
> > of connectionLost makes things perhaps too asynchronous..
> 
> If you need this level of guarantee, you need a protocol which will send
> acks for messages as they've been received.  There is no such thing as
> "too asynchronous" -- there is "synchronous", "asynchronous", and
> "sometimes stuck doing something with one client while the rest of the
> server hangs..." :-).
> 

Well, you could return an error if the connection is obviously closed
already (and perhaps return the error received when the connection was
close asynchronously) - i.e. when it's clear that the async. write will
fail. The rest can be handled right away.

Also, I don't know if twisted will always attempt to send/flush data right
away and catch EWOULDBLOCK, or if flushing will only be triggered by
select() on write fd's. In the former case, if writing won't block (which
may be quite often the case?), you catch errors immediately as well..

> This is the same question as previously, really; if a write "fails",
> then the connection has been lost.  Knowing that a connection failed
> during a write and getting an errno would give you all the same
> information.
> 
> Keep in mind that a write "succeeding" might just mean that the memory
> was succesfully copied into a buffer for your OS kernel to send; the
> other side of the connection may never have received it.

I basically meant succeeding as with socket.recv/send().

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From glyph at twistedmatrix.com  Mon Dec 31 20:14:38 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 19:14:38 -0600
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <20011231192722.J6904@amaze.nl>
References: <20011231004431.H6904@amaze.nl> <1009811332.571.5.camel@zelda> 
	<20011231192722.J6904@amaze.nl>
Message-ID: <1009847678.7931.9.camel@zelda>

On Mon, 2001-12-31 at 12:27, Ivo van der Wijk wrote:
> > > How can I determine what specific error condition caused connectionLost()
> > > or connectionFailed()? I.e. connection refused, unknown hostname,
> > > no route to host, etc (the standard errno stuff). 
> > 
> > Currently you can't. [snip]
> 
> Okay. How about an error parameter to connectionLost|Failed
> that would contain the actual error? [snip]

This was the way Twisted originally worked; we wrote a TON of code and
this parameter was never used :-).  Feel free to add it, though; your
connectionFailedWithError approach sounded like a good one.

> > > Also, how can I determine if Linereceived.sendLine() (or 
> > > Protocol.Transport.write()) failed? It doesn't seem to return an
> > > error value or raise Exceptions, and depending on the invocation
> > > of connectionLost makes things perhaps too asynchronous..
> > 
> > If you need this level of guarantee, you need a protocol which will send
> > acks for messages as they've been received.  There is no such thing as
> > "too asynchronous" -- there is "synchronous", "asynchronous", and
> > "sometimes stuck doing something with one client while the rest of the
> > server hangs..." :-).
> 
> Well, you could return an error if the connection is obviously closed
> already (and perhaps return the error received when the connection was
> close asynchronously) - i.e. when it's clear that the async. write will
> fail. The rest can be handled right away. [snip]

I *could*, but why would I?  This means that your errors have to be
handled in two places instead of one, and it will only *sometimes*
actually be handled by one of those two places, depending on the OS
buffer sizes and the direction of prevailing winds.

There are lots of places where a connection can be dropped, and there
are lots of reasons for it.  Unifying them into a single "connection has
been lost" failure path is in general a good thing; I could understand
wanting more information about that failure (your previous request) but
wanting the failure case to be exposed to your code through numerous
paths -- all of which must be handled and the distinction between which
is VERY difficult to test -- seems like a naive regression to a
lower-level API.

> > Keep in mind that a write "succeeding" might just mean that the memory
> > was succesfully copied into a buffer for your OS kernel to send; the
> > other side of the connection may never have received it.
> 
> I basically meant succeeding as with socket.recv/send().

Why is this useful information to have at the application layer?

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From mad96 at hampshire.edu  Sat Dec  1 00:51:59 2001
From: mad96 at hampshire.edu (Michael Dartt)
Date: Sat, 01 Dec 2001 02:51:59 -0500 (EST)
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <20011130212328.A21469@troglodyte.menefee>
References: <1007152704.3c07ee4015fa4@webmail.hampshire.edu> <20011130212328.A21469@troglodyte.menefee>
Message-ID: <1007193119.3c088c1f2983c@webmail.hampshire.edu>

Hm.  My only concern is that it looks like it's used more for proclamations/statements than Q&A.  (Brings us back to the Official Documentation issue, only not quite as bad.)  And it looks like the structure of a Wiki doesn't really make it smooth to do that.  What category/entry would you put it under?  Would you have a separate FAQ category?

But hey, if I'm wrong, so much the better.  :)

I may have met Shira, but the name doesn't ring a bell.  I left Camp Hamp in Feb. 2000--without Glyph there, it just didn't seem worth it.  ;-)  

Quoting Kevin Turner <acapnotic at twistedmatrix.com>:

> On Fri, Nov 30, 2001 at 03:38:24PM -0500, Michael Dartt wrote:
> > From what I've seen/experienced, the "document-as-you-go" 
> > approach works much better for open-source projects.  
> 
> How about using the wiki?
> http://twistedmatrix.com/users/jh.twistd/python/moin.cgi/
> 
>  - Kevin
> 
> (do you know shira rosenhaft at hampshire, class of 2002?)
> 
> -- 
> The moon is full, 100.0% illuminated, 14.8 days old.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From j.her at t-online.de  Sat Dec  1 02:55:55 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Sat, 01 Dec 2001 10:55:55 +0100
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <1007193119.3c088c1f2983c@webmail.hampshire.edu>
Message-ID: <16A6sm-1Mbq0OC@fwd01.sul.t-online.com>

On Sat, 01 Dec 2001 02:51:59 -0500 (EST), Michael Dartt wrote:

>Hm.  My only concern is that it looks like it's used more for proclamations/statements than Q&A.  

A wiki is used in the way users use it. :>

See http://www.python.org/cgi-bin/moinmoin/FrequentlyAskedQuestions

Ciao, Jürgen






From jason at crash.org  Sun Dec  2 16:02:22 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Sun, 2 Dec 2001 17:02:22 -0600
Subject: [Twisted-Python] WebWidgets and Struts
Message-ID: <EIEFLCFECLLBKGPNJJIMKECIHLAA.jason@crash.org>

As an example for WebWidgets, has anyone looked at the Struts framework
of the Jakarta project?  The general idea is that Struts tries to capture
the common patterns of web application development and to provide a
framework for rapid development using a common codebase.

Apparently a number of folks are developing projects using this framework
and a certain amount of code sharing is emerging.  Reading through the
website, it looks a lot like WebWare...

>From the Struts page:

"The goal of this project is to provide an open source framework useful in
building web applications with Java Servlet and JavaServer Pages (JSP)
technology. Struts encourages application architectures based on the
Model-View-Controller (MVC) design paradigm, colloquially known as Model 2
in discussions on various servlet and JSP related mailing lists.

Struts includes the following primary areas of functionality:

- A controller servlet that dispatches requests to appropriate Action
  classes provided by the application developer.
- JSP custom tag libraries, and associated support in the controller
  servlet, that assists developers in creating interactive form-based
  applications.
- Utility classes to support XML parsing, automatic population of
  JavaBeans properties based on the Java reflection APIs, and
  internationalization of prompts and messages."

Main page:
http://jakarta.apache.org/struts/index.html

Introduction:  (Read this one)
http://jakarta.apache.org/struts/userGuide/introduction.html


Jason
______________________________________________________________________
Jason Asbahr
jason at asbahr.com








From twisted at itamarst.org  Mon Dec  3 06:12:22 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 15:12:22 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
Message-ID: <3C0B7A36.9030502@itamarst.org>

Attached is an IRC server that acts more or less like a regular IRC server - 
anyone can login with no prior account.

Issues:
1. It takes 3 seconds until connectionLost is called, so you can't 
immediately relogin.
2. The automatic user creation is horribly verbose, hard to understand, and 
hacky (getPerspectiveNamed, specifically.)
3. You get contacted by "*login*" every time you login.
4. You still need a password, though in this setup it knows its own password 
so the user doesn't deal with (and for my use this is good since I need a 
password protected IRC server.)

===============================================
from twisted.protocols import protocol
from twisted.words import service, ircservice
from twisted.internet import passport

class SimpleService(service.Service):
     """A simple IRC service that creates users on the fly."""

     def removePerspective(self, name):
         if self.participants.has_key(name):
             del self.participants[name]
             self.application.authorizer.removeIdentity(name)

     def createParticipant(self, name):
         if not self.participants.has_key(name):
             log.msg("Created New Participant: %s" % name)

     def getPerspectiveNamed(self, name):
         if self.participants.has_key(name):
             raise service.WordsError, "user exists"
         else:
             p = service.Participant(name)
             p.setService(self)
             ident = passport.Identity(name, self.application)
             ident.setPassword("ugly hack")
             self.application.authorizer.addIdentity(ident)
             p.setIdentity(ident)
             ident.addKeyForPerspective(p)
             self.participants[name] = p
             return p


class IRCChatter(ircservice.IRCChatter):

     passwd = "ugly hack" # remove this to force user to send password

     def connectionLost(self):
         ircservice.IRCChatter.connectionLost(self)
         print self.nickname
         self.service.removePerspective(self.nickname)


class IRCGateway(protocol.Factory):

     def __init__(self, service):
         self.service = service

     def buildProtocol(self, connection):
         """Build an IRC protocol to talk to my chat service.
         """
         i = IRCChatter()
         i.service = self.service
         return i


def main():
     """Run an IRC server"""
     from twisted.internet import main
     app = main.Application("irc")
     svc = SimpleService("twisted.words", app)
     irc = IRCGateway(svc)
     app.listenTCP(6667, irc)
     app.run(0)


if __name__ == '__main__':
     main()





From carmstro at twistedmatrix.com  Mon Dec  3 10:16:32 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 12:16:32 -0500
Subject: [Twisted-Python] Standalone IRC server, or
	Passport/Words/Something sucks
In-Reply-To: <3C0B7A36.9030502@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org>
Message-ID: <1007399793.4746.0.camel@Fookidla.org>

On Mon, 2001-12-03 at 08:12, Itamar Shtull-Trauring wrote:
> Attached is an IRC server that acts more or less like a regular IRC server - 
> anyone can login with no prior account.

Hmm.. Is this IRC-specific? If it is, I think it'd be nice to have this
integrated with words itself, so it could be an option to the
administrator (which could be configured through coil! woot!).

--
 <glyph> HELP ME SMALL CHILD I HAVE ATTEMPTED TO CREATE A WEB SERVER BUT
 I HAVE BECOME LOST
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/






From acapnotic at twistedmatrix.com  Mon Dec  3 11:47:48 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Mon, 3 Dec 2001 10:47:48 -0800
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0B7A36.9030502@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org>
Message-ID: <20011203104748.A2622@troglodyte.menefee>

On Mon, Dec 03, 2001 at 03:12:22PM +0200, Itamar Shtull-Trauring wrote:
> Issues:
> 2. The automatic user creation is horribly verbose, hard to understand, and 
> hacky (getPerspectiveNamed, specifically.)


{{{ # In response to Itamar's code:

from twisted.words import service, ircservice

class SimpleService(service.Service):

# If this is a standalone service, why does it inherit from
# words.service?  You override all its methods save the dictionary
# accessor 'getGroup' anyhow.

    def createParticipant(self, name):
        if not self.participants.has_key(name):
            log.msg("Created New Participant: %s" % name)

# Huh? createParticipant creates a log entry, but *not* a Participant?

     def getPerspectiveNamed(self, name):
         if self.participants.has_key(name):
             raise service.WordsError, "user exists"

# Woah.  getPerspectiveNamed is *supposed* to return existing
# perspectives.  This error might be appropriate in createParticipant,
# but not here.

         else:
             p = service.Participant(name)
             p.setService(self)

# Don't bitch about this method being "horribly verbose" when you
# explicitly duplicate code that's defined in your subclass.  The above
# is done in passport.Service.createPerspective, which you deliberately
# clobbered.

             ident = passport.Identity(name, self.application)
             ident.setPassword("ugly hack")
	     
# If you want to do this, please factor the strict authorization
# requirements out of words.ircservice.IRCChatter.irc_NICK (or factor
# words.ircservice.IRCChatter out of words.*) instead of doing an 
# "ugly hack".
	     
	     self.application.authorizer.addIdentity(ident)
	     p.setIdentity(ident) 
	     ident.addKeyForPerspective(p)

# If you're using 'anonymous' logins with transient user identites,
# why are you using Identities at all?  None of this is necessary if
# you're not planning on making use of a passport.DefaultAuthorizer
# anyway.  See for example words.tendril._newParticipant, no identities
# are created and bound either here or in words.service methods.

             self.participants[name] = p
             return p
 
}}}

Overall, yes, words.ircservice is absolutely horrible for use as a
"normal" IRC server.  But then, it's not intended to be one, that's why
it's in the twisted.words package.  It's also true that it's a fairly
shoddy Words interface as well, but aren't they all?  ;)

 - AcapNotIRC

-- 
The moon is waning gibbous, 92.1% illuminated, 17.4 days old.




From twisted at itamarst.org  Mon Dec  3 13:22:47 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 22:22:47 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee>
Message-ID: <3C0BDF17.8050506@itamarst.org>

<Lot's of "itamar is an idiot" comments deleted>

Granted, my code sucked. But I wanted an IRC server ASAP and that's the 
fastest way to get one if you don't understand all this 
identity/passport stuff! I challenge you to make an IRC server where 
users are created on the fly like in normal ircds. Until you do, my code 
will be what I use, since it *works*, and I don't have time to do it right.

In other words, "save me from the suckiness!"





From j.her at t-online.de  Mon Dec  3 13:31:51 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Mon, 03 Dec 2001 21:31:51 +0100
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0BDF17.8050506@itamarst.org>
Message-ID: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>

On Mon, 03 Dec 2001 22:22:47 +0200, Itamar Shtull-Trauring wrote:

>Granted, my code sucked. But I wanted an IRC server ASAP and that's the 
>fastest way to get one if you don't understand all this 
>identity/passport stuff! I challenge you to make an IRC server where 
>users are created on the fly like in normal ircds. Until you do, my code 
>will be what I use, since it *works*, and I don't have time to do it right.
>
>In other words, "save me from the suckiness!"

I see a pattern here, you create sucky code and then abuse the digust
of other developers to get the code you want. ;-?

Ciao, Jürgen






From glyph at twistedmatrix.com  Mon Dec  3 13:44:46 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 03 Dec 2001 14:44:46 -0600
Subject: [Twisted-Python] Standalone IRC server, or
	Passport/Words/Something sucks
In-Reply-To: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
References: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
Message-ID: <1007412287.19437.12.camel@zelda>

On Mon, 2001-12-03 at 14:31, Juergen Hermann wrote:

> I see a pattern here, you create sucky code and then abuse the digust
> of other developers to get the code you want. ;-?

What can I say; he learned from the best.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From jasbahr at crash.org  Mon Dec  3 11:05:05 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Mon, 3 Dec 2001 12:05:05 -0600
Subject: [Twisted-Python] Collaboration Server: IBM's uServ
Message-ID: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>

>From the decentralized list, research that looks useful for Twisted-to-
Twisted (t2t) data publishing.  :-)

"uServ is a project at IBM which exploits P2P techniques to provide a
reasonable alternative to paid web hosting services for a wide class of
users.

While you can't (yet) use it unless you have IBM intranet access, we've
made a research report available describing our  internal deployment and
the technical details of the system."

http://www.almaden.ibm.com/cs/people/bayardo/userv/


______________________________________________________________________
Jason Asbahr
jason at asbahr.com

 





From twisted at itamarst.org  Mon Dec  3 14:04:20 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 03 Dec 2001 23:04:20 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <16AzkT-0e0tF2C@fwd06.sul.t-online.com>
Message-ID: <3C0BE8D4.9060201@itamarst.org>

>
>
>
>I see a pattern here, you create sucky code and then abuse the digust
>of other developers to get the code you want. ;-?
>
But of course - this is Open Source, aka Other People's Work. The cool 
part is that all our selfish needs combine into a common cause.






From carmstro at twistedmatrix.com  Mon Dec  3 15:02:54 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 17:02:54 -0500
Subject: [Twisted-Python] FAQ-o-matic
In-Reply-To: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
References: <1007152704.3c07ee4015fa4@webmail.hampshire.edu>
Message-ID: <1007416976.5205.0.camel@Fookidla.org>

I set up a page on Jurgen's MoinMoin -
http://purl.org/wiki/python/TwistedFaq. Right now it's just the same
questions as the other faqs that are available. If this thing works out
I'll shwack the official faq.epy on twistedmatrix.com and just link to
the wiki page.

On Fri, 2001-11-30 at 15:38, Michael Dartt wrote:
> I'd like to suggest the addition of a FAQ-o-matic 
> (http://faqomatic.sourceforge.net/fom-serve/cache/427.html)to the Twisted 
> site.  I think it would make it much easier to get and to post info, as you 
> wouldn't have to wait for someone to write The Definitive Documentation(tm) for 
> a given subject.  From what I've seen/experienced, the "document-as-you-go" 
> approach works much better for open-source projects.  
> 
> I'm willing to do the work of getting the F-o-m set up.  (Perhaps I should 
> stick in in my personal space?)  
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From carmstro at twistedmatrix.com  Mon Dec  3 15:06:51 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 03 Dec 2001 17:06:51 -0500
Subject: [Twisted-Python] Collaboration Server: IBM's uServ
In-Reply-To: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>
References: <EIEFLCFECLLBKGPNJJIMGECPHLAA.jasbahr@crash.org>
Message-ID: <1007417212.5207.2.camel@Fookidla.org>

On Mon, 2001-12-03 at 13:05, Jason L. Asbahr wrote:
> 
> >From the decentralized list, research that looks useful for Twisted-to-
> Twisted (t2t) data publishing.  :-)

dash and I were talking about this the other day, and we both seem to be
interested in it. As dash pointed out, we've already got the technology
for doing the "proxy server" deal (where a node machine is only
accessible through a third party from the main server), and Twisted
itself gets us about half way to completely implementing something like
this. Glyph didn't seem so excited about, though...

-- 
<dash> glyph: maybe that'd stop, if we stopped denying that the PSU is
real and
is actually coordina~~4%~~..~*'#n`+>~~.]
<-- dash has quit
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From acapnotic at twistedmatrix.com  Mon Dec  3 22:10:30 2001
From: acapnotic at twistedmatrix.com (acapnotic at twistedmatrix.com)
Date: Mon, 3 Dec 2001 21:10:30 -0800
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
In-Reply-To: <3C0BDF17.8050506@itamarst.org>
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee> <3C0BDF17.8050506@itamarst.org>
Message-ID: <20011203211030.D4046@troglodyte.menefee>

On Mon, Dec 03, 2001 at 10:22:47PM +0200, Itamar Shtull-Trauring wrote:
> <Lot's of "itamar is an idiot" comments deleted>

Well, yeah, there was a bit much of that.  I think if you had introduced
the subject as just "here's my rough draft" instead of "Passport sucks",
my tone would have been correspondingly more subdued.

 - Kevin

-- 
The moon is waning gibbous, 89.3% illuminated, 17.9 days old.




From twisted at itamarst.org  Tue Dec  4 02:27:01 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 04 Dec 2001 11:27:01 +0200
Subject: [Twisted-Python] Standalone IRC server, or Passport/Words/Something sucks
References: <3C0B7A36.9030502@itamarst.org> <20011203104748.A2622@troglodyte.menefee> <3C0BDF17.8050506@itamarst.org> <20011203211030.D4046@troglodyte.menefee>
Message-ID: <3C0C96E5.8050300@itamarst.org>

acapnotic at twistedmatrix.com wrote:


>><Lot's of "itamar is an idiot" comments deleted>
>>
> 
> Well, yeah, there was a bit much of that.  I think if you had introduced
> the subject as just "here's my rough draft" instead of "Passport sucks",
> my tone would have been correspondingly more subdued.


Mmm, yeah, that's true. But mine is still the only working implementation, 
nyah nyah :)





From glyph at twistedmatrix.com  Tue Dec  4 22:21:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 04 Dec 2001 23:21:33 -0600
Subject: [Twisted-Python] python's "import" is giving me a headache.
Message-ID: <1007529694.29915.1.camel@zelda>

So, there's a particular corner of the coding standard for Twisted
currently which is the root of a few annoying problems and has been the
cause of one or two bugs.  It's the module import requirement.

Originally it seemed like a pretty good idea for the following reasons;
if one is using packages, it is easiest to figure out where the code is
coming from if you name the module explicitly.  Documentation generators
document modules individually, and so that's how people would learn to
import modules.  Accessing the module indirectly, and not the class,
allows for reloading to work naturally and different modules to have
similarly named classes when appropriate.

In pracitce, it doesn't work out quite so well.  It did not occur to me
at the time how hard it would be to distinctly name all modules within
classes, or how often a local variable name would clash with a
straightforwardly chosen package name.

I am considering a change to the coding standard (and the attendant
massive refactoring) to a standard where modules "promote" public
classes and functions to the module level.  For example, in
twisted/words/service.py:

# promote public interface
from twisted import python
import twisted.words
twisted.python.publicInterface(twisted.words,
    Service,
    WordsClientInterface,
    Participant,
    ...)
# end

The end user would probably then have to do this in order to use that
module:

import twisted.words.service
from twisted import words
words.Service(...)

Pros:

* fewer names to worry about clashing with
* nested modules less inconvenient
* only public portions of interface present at package level

Cons:

* it doesn't work that way now and it would require work to change
* you still have to know which module to import
* it requires manual declaration of public interface

The number of conflicts both between modules and convenient variable
names is increasing with time, and I think that something has to be done
about it, but I don't know if this is an appropriate solution.  At any
rate, such a change will likely affect most Twisted developers, so I'd
like to hear feedback before I do anything.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From carmstro at twistedmatrix.com  Tue Dec  4 22:52:10 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 00:52:10 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <1007529694.29915.1.camel@zelda>
References: <1007529694.29915.1.camel@zelda>
Message-ID: <1007531531.14315.2.camel@Fookidla.org>

On Wed, 2001-12-05 at 00:21, Glyph Lefkowitz wrote:
[snip...]
> I am considering a change to the coding standard (and the attendant
> massive refactoring) to a standard where modules "promote" public
> classes and functions to the module level.  For example, in
> twisted/words/service.py:

[snip...]
> Pros:
> 
> * fewer names to worry about clashing with
> * nested modules less inconvenient
> * only public portions of interface present at package level

A few things I don't think glyph stressed well enough:
  * gets rid of having to deal with modules which have the same name,
    but in different packages ("service", anyone?)
  * twisted.reality.reality.Reality. 'nuff said. :)

While I'm not *certain* that this is the best way to go (although it
seems like it might work out, and I haven't thought of any big
disadvantages), I do full-heartedly agree that _something_ needs to be
done. I've done a couple of refactorings in my day, and I've fixed
countless local-variable/module-name conflicts.</war_story>

-- 
<radix> skreech: hey guess what!
<skreech> what
<radix> skreech: exciting night tonight
<skreech> radix: women?
<radix> skreech: twisted release! =D
<skreech> radix: YES!!!!!!!!!!
<radix> hee hee
<radix> I know you live for these moments, skreech
<skreech> VROOOM
<skreech> Lemme get my Twisted-Release-socks
<skreech> and noisemakers
(Yes, I am hopefully going to release Twisted 0.12.3 tonight)
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From twisted at itamarst.org  Wed Dec  5 02:31:46 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 05 Dec 2001 11:31:46 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <1007529694.29915.1.camel@zelda>
Message-ID: <3C0DE982.4000506@itamarst.org>

Glyph Lefkowitz wrote:

>
>The number of conflicts both between modules and convenient variable
>names is increasing with time, and I think that something has to be done
>about it, but I don't know if this is an appropriate solution.  At any
>rate, such a change will likely affect most Twisted developers, so I'd
>like to hear feedback before I do anything.
>

This seems a rather drastic solution, and ugly to boot (3 lines of code 
every time I want to import something?). And won't this making reloading 
modules much more problematic?

There might be other ways to solve it - for example, module names can 
BeCapitalized, which solves the vairable/module clashing issue (then 
it's harder to differentiate between module and classes, but there are 
certainly much fewer classes then there are variables).

What methods do other large frameworks do to solve the issue?






From twisted at itamarst.org  Wed Dec  5 02:52:47 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 05 Dec 2001 11:52:47 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <1007529694.29915.1.camel@zelda>
Message-ID: <3C0DEE6F.7040408@itamarst.org>

Glyph Lefkowitz wrote:

>
>The end user would probably then have to do this in order to use that
>module:
>
>import twisted.words.service
>from twisted import words
>words.Service(...)
>

A bit more thought - this is a bad idea. It's certianly not a Very Bad 
Idea, but I really hope we comw up with something better. Consider - 
currently we have a a large number of namespaces, divided by the 
different things they do, and we can do stuff like having a schedule() 
method in twisted.internet.task. But with this suggestion we end up 
having only 7 or so namespaces, each of which has tens of methods, all 
of which do tons of different unrelated things (so there's 
twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
what's one got to do with the other? And how are they related to 
twisted.internet.schedule? why do I have to start reading through all 
these modules to figure out where they came from?)

At some point this will get too overwhelming (it may be too overwhelming 
now) and then we'll end up using subpackages, at which point we're back 
to where we started :)

The whole *point* of modules is to have just that - differenet 
namespaces that are to some degree self contained and can be understood 
more or less on their own, while this proposal is a push away from that 
(not a very large one, but still.)





From carmstro at twistedmatrix.com  Wed Dec  5 04:23:44 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 06:23:44 -0500
Subject: [Twisted-Python] 0.12.3 is out
Message-ID: <1007551427.14314.4.camel@Fookidla.org>

You heard it here first, folks. Grab Twisted 0.12.3 at
http://twistedmatrix.com/downloads/ - here are the changes:

  This is mainly a maintenance release; there are a bunch of bugfixes,
  but some really cool new things.

  A Configuration System. This is going to be the Next Big Thing in
  Twisted - right now, it's not used anywhere visibly, but the idea is a
  unified interface for Twisted that will replace things like 'mktap'.
  We have a basic dependancy system down, and a simple Web UI.

  A few bugfixes for TK InstanceMessenger.

  Docs for Delayeds: Itamar wrote up a small HTML document on how to use
  Delayeds. Look in the 'doc/' subdirectory.

  Other general bugfixes.

-- 
QOTR:
<Intention> Twisted did raise me from the dead after two weeks. It is a 
miracle of software engineering.
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From bwinton at tor.dhs.org  Wed Dec  5 07:52:46 2001
From: bwinton at tor.dhs.org (Blake Winton)
Date: Wed, 5 Dec 2001 09:52:46 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <3C0DEE6F.7040408@itamarst.org>
Message-ID: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>

> >import twisted.words.service
> >from twisted import words
> >words.Service(...)
> A bit more thought - this is a bad idea.
> twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
> what's one got to do with the other? And how are they related to 
> twisted.internet.schedule? why do I have to start reading through all 
> these modules to figure out where they came from?)

What about "import twisted.words.service as WordsService"?

Then packages can name the modules whatever they want to avoid conflicts.

Later,
Blake.





From jason at crash.org  Wed Dec  5 09:29:51 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Wed, 5 Dec 2001 10:29:51 -0600
Subject: [Twisted-Python] P2P Thoughts
Message-ID: <EIEFLCFECLLBKGPNJJIMCEFCHLAA.jason@crash.org>

Some folks on the decentralized list have praised a p2p app called
'Magi', which sounds like it has features similar to those in Twisted,
or to those features which Twisted might soon acquire.

Magi Express and uServ apparently have some overlap.  Check out the
Magi link and read the brochure.  There is a screen shot there that
looks roughly as complex as the Watson interface.  Not so hard to
put together.

"Installing Magi Express turns your PC into a personal web server, providing
the ability to share, store, retrieve and edit-in-place documents and other
files to and from any other Magi-installed device.

Magi Express is perfect for setting up your own personal intranet, shared
workspace, or virtual private network. You will have the ability to e-mail,
fax or print any file within your private network. You even have the ability
to do so using a WAP-enabled phone when away from your Internet-connected
PC."

http://www.endeavors.com/express.html

I suggested to Glyph that Twisted could someday replace Jigsaw as W3C's
collaboration server.  Now I'm thinking that Twisted could be the GNU
collaboration server, as Mailman is the GNU mailing list manager.  Or
at least achieve that level of ubiquity in the open source world.  :-)

______________________________________________________________________
Jason Asbahr
jason at asbahr.com







From carmstro at twistedmatrix.com  Wed Dec  5 13:30:51 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 15:30:51 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>
References: <EHEPLGFHKAPDEDKIBONMAENLCBAA.bwinton@tor.dhs.org>
Message-ID: <1007584253.484.0.camel@Fookidla.org>

On Wed, 2001-12-05 at 09:52, Blake Winton wrote:
> > >import twisted.words.service
> > >from twisted import words
> > >words.Service(...)
> > A bit more thought - this is a bad idea.
> > twisted.internet.addDelayed, but also twisted.internet.StupidProxy - 
> > what's one got to do with the other? And how are they related to 
> > twisted.internet.schedule? why do I have to start reading through all 
> > these modules to figure out where they came from?)
> 
> What about "import twisted.words.service as WordsService"?
> 
> Then packages can name the modules whatever they want to avoid conflicts.

Well, this is a Python 2.0 (1.6?) and above feature, only. The
equivalent in older versions of Python is
| from twisted.words import service
| WordsService = service
| del service
It's still 3 lines long, just like the other few proposals that have
been going around.

Itamar definitely has a point with changing naming conventions of the
module names to something like StudlyCaps. It would probably fix at
least 95% of the cases where naming conflicts happen.

Now, say that we do something like change naming conventions -- is there
_any hope_ that old .tap files will be able to upgrade to the new names
of modules? Moshe has hinted that hooks for modulenames and whatnot is
possible with pickle, but I'm doubtful. What I'm thinking so far is that
the new module names will have to do the backwards-compatibility trick
of 
| import twisted.my_package.MyModule
| import twisted.my_package
| twisted.my_package.module_name = twisted.my_package.MyModule

But I'm not so sure this would work out. Obviously, code that does 'from
my_package import my_module' will not work. But, as long as we're
interested in pickle-compatibility and not code-compatibility, I don't
_think_ this is a problem. Or maybe it is..?

Another possible solution is to put an __init__.py in the package that
imports all the new ModuleNames and assigns them to module_names. This
is rather yucky, of course, because you can't selectively import modules
(well, you can, but you can't prevent all modules in a package from
being imported).

Whew. a lot to think about here. I still think it's worth whatever it
takes, though, because Twisted ain't gettin' any smaller.

-- 
<radix> I was drinking tea before this job
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From sean at ninjaneering.com  Wed Dec  5 14:06:13 2001
From: sean at ninjaneering.com (Sean Riley)
Date: Wed, 5 Dec 2001 15:06:13 -0600
Subject: [Twisted-Python] OSI 7 layer network model
Message-ID: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>

I was wondering... how would you categorize the various pieces of Twisted in
the OSI 7 Layer Network Model?

The layers are:

1. Physical - hardware
2. Data Link - ethernet
3. Network - IP
4. Transport - protocols(TCP/IP, UDP)
5. Session
6. Presentation
7. Application

I'm not sure how "session" fits in with Twisted. Maybe Perspectives play the
role of sessions?

Presentation is defined as "where application data is packed/unpacked" -
which seems to include both banana and jelly?

I'd like to be able to draw a diagram showing where python fits into this
model and where the opportunities for optimization are found. By explicitly
showing that the implentations of these layers are actually in C or provided
by the OS, the perception that "python is slow" could be mitigated somewhat.

I think that keeping the "session" layer in python can be justified with the
added security of no buffer overflows, and the requirement for integration
with the python application layer. There also are few tight loops in this
layer.

The "Presentation" layer seems to be the most computationally expensive
software layer as it includes encryptions, packing and compression. It is
here that the pure python implentation is a little scary for most people -
and so it is here where the most education and explicit categorization of
components by implementation would be most useful.

----
"If it's not running programs or fusing atoms, it's just bending space."
Sean Riley
sean at ninjaneering.com






From j.her at t-online.de  Wed Dec  5 14:38:54 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 05 Dec 2001 22:38:54 +0100
Subject: [Twisted-Python] python's "import" is giving me a headache.
Message-ID: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>

On 05 Dec 2001 15:30:51 -0500, Chris Armstrong wrote:

>(well, you can, but you can't prevent all modules in a package from
>being imported).

Yes, you can, like...


__init__:

from tw.import import _delayedImport
oldname = _delayedImport('newname')


or even


sys.modules[__name__] = _delayedImporter(__name__,  
lookup_dict_with_old_names)


Nothing in this is pretty in any way.

Ciao, Jürgen






From carmstro at twistedmatrix.com  Wed Dec  5 16:48:25 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: 05 Dec 2001 18:48:25 -0500
Subject: [Twisted-Python] python's "import" is giving me a headache.
In-Reply-To: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com>
Message-ID: <1007596107.482.4.camel@Fookidla.org>

On Wed, 2001-12-05 at 16:38, Juergen Hermann wrote:
> On 05 Dec 2001 15:30:51 -0500, Chris Armstrong wrote:
> 
> >(well, you can, but you can't prevent all modules in a package from
> >being imported).
> 
> Yes, you can, like...
[snip...]

> Nothing in this is pretty in any way.

Well, I'm not opposed to evil, ugly hacks as long as they're only
temporary. The only thing I'm worried about is pickle compatibility,
source compatibility can be easily fixed.

Everybody else: thoughts?

-- 
--
                              Chris Armstrong
                      <<< radix at twistedmatrix.com >>>
              http://twistedmatrix.com/users/carmstro.twistd/





From twisted at itamarst.org  Thu Dec  6 02:48:22 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Dec 2001 11:48:22 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com> <1007596107.482.4.camel@Fookidla.org>
Message-ID: <3C0F3EE6.80407@itamarst.org>

Chris Armstrong wrote:


> Well, I'm not opposed to evil, ugly hacks as long as they're only
> temporary. The only thing I'm worried about is pickle compatibility,
> source compatibility can be easily fixed.
> 
> Everybody else: thoughts?

Write a utility to convert pickles?





From twisted at itamarst.org  Thu Dec  6 03:03:31 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 06 Dec 2001 12:03:31 +0200
Subject: [Twisted-Python] python's "import" is giving me a headache.
References: <16BjkY-1rQPoWC@fwd07.sul.t-online.com> <1007596107.482.4.camel@Fookidla.org>
Message-ID: <3C0F4273.7060400@itamarst.org>

Chris Armstrong wrote:


> Well, I'm not opposed to evil, ugly hacks as long as they're only
> temporary. The only thing I'm worried about is pickle compatibility,
> source compatibility can be easily fixed.
> 


Actually, I think there's some way ZODB can deal with classes changing 
modules. I'll do some checking...







From andrew-twisted at puzzling.org  Sun Dec  9 19:46:17 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Dec 2001 13:46:17 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
Message-ID: <20011210134617.A541@frobozz.local>

This is just a quick mail to let people know what I had to do to make
a Twisted server work as a WinNT service.

First, it should be noted that I'm not using twistd or tap files, partly
because this server has no state that needs persisting, and also because
I'm not sure how to use them ;)

Basically, the service is really really simple:

---
import win32serviceutil, win32service
import MyServer
from twisted.python.log import startLogging
import twisted.internet.main

class MyTwistedService(win32serviceutil.ServiceFramework):
    def SvcDoRun():
        # Can't use stdout for logging -- .flush will barf
        startLogging(open('c:/mylogfile.log','a'))
        MyServer.main()

    def SvcStop():
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        twisted.internet.main.shutDown()

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(MyTwistedService)

---

And that does it.  The trickiest bit is that you need to set the log
file to something other than stdout, otherwise it dies due to a Bad File
Descriptor error doing logfile.flush().  Other than that, it is
basically boilerplate code (if you're familiar with Win32 services
written in Python).

I wonder if there is a more integrated way to do this, though?

-Andrew.




From andrew-twisted at puzzling.org  Sun Dec  9 19:52:42 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 10 Dec 2001 13:52:42 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
References: <20011210134617.A541@frobozz.local>
Message-ID: <20011210135242.A591@frobozz.local>

On Mon, Dec 10, 2001 at 01:46:17PM +1100, Andrew Bennetts wrote:
> class MyTwistedService(win32serviceutil.ServiceFramework):

[snip]

I forgot one detail... this class should have:

---
    _svc_name_ = "MyServer"
    _svc_display_name = "My Twisted Server"
---

-Andrew.




From itamar at zoteca.com  Mon Dec 10 14:10:31 2001
From: itamar at zoteca.com (Itamar Shtull-Trauring)
Date: Mon, 10 Dec 2001 23:10:31 +0200 (IST)
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
Message-ID: <Pine.LNX.4.21.0112102309460.22186-100000@female.israel.maxnm.com>

unless someone else does, I will add this to twistd when I return from
Paris.






From jason at crash.org  Mon Dec 10 16:25:28 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Mon, 10 Dec 2001 17:25:28 -0600
Subject: [Twisted-Python] FW: [Python-Dev] ExtensionClass plans (was Re: [ZODB-Dev] Another ExtensionClass incompatibility: __pow__())
Message-ID: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>

This might be of interest...

Jason

-----Original Message-----
From: python-dev-admin at python.org [mailto:python-dev-admin at python.org]On
Behalf Of Jim Fulton
Sent: Saturday, December 01, 2001 11:23 AM
To: Greg Ward
Cc: zodb-dev at zope.org; Python-dev at python.org
Subject: [Python-Dev] ExtensionClass plans (was Re: [ZODB-Dev] Another
ExtensionClass incompatibility: __pow__())


Greg Ward wrote:
>
> Sigh.  In addition to ignoring __r{add,sub,mul,div}__() methods,
> ExtensionClass also calls __pow__() differently.

(snip)

> So what is the future of ExtensionClass, anyways?

I intend that Python 2.2 (or maybe 2.3) will make it irrelevent.

> Are the little
> incompatibility bugs between classic Python classes and ExtensionClass
> ever going to be fixed?

Probably not by us. Patches are gratefully accepted.

We are going to keep supporting it for a while at it's
current level to support projects other than ZODB
that require it.

> Or has ExtensionClass been abandoned in favour
> of a future ZODB based on new-style Python 2.2 classes?

This is my plan. :)

> If so, when
> will this future ZODB become reality?

I'm glad you asked. As part of our Zope 3 prototyping, we've
begun moving toward a next generation of ZODB.  We currently
have an experimental ZODB that:

- Doesn't require ExtensionClass

- Does depend on new-style Python classes

- Separates the Persistence and Transaction frameworks

- Uses weak references in the cache

- Uses a pure-python Persistent implementation (hence no BTrees).
  We will be creaing a C Persistent base class.

All the fun is currently happening on the Zope-3x-branch branch
of the Zope3 checkout. You can see the relevent ZODB pieces at:

http://cvs.zope.org/Zope3/lib/python/Persistence/?only_with_tag=Zope-3x-bran
ch

http://cvs.zope.org/Zope3/lib/python/Transaction/?only_with_tag=Zope-3x-bran
ch

http://cvs.zope.org/Zope3/lib/python/ZODB/?only_with_tag=Zope-3x-branch

Of course all of this is highly speculative at this point.

Stay tuned. ;)

Jim

--
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (888) 344-4332            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org

_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev





From jason at crash.org  Mon Dec 10 16:46:07 2001
From: jason at crash.org (Jason L. Asbahr)
Date: Mon, 10 Dec 2001 17:46:07 -0600
Subject: [Twisted-Python] FW: [Python-Dev] FYI: MIT's dynamic language design panel now online
Message-ID: <EIEFLCFECLLBKGPNJJIMCEKLHLAA.jason@crash.org>

Another item of interest to the Twisted community (particularly Glyph
and Dash).

Jason 

(Yes I'm cleaning out my mailboxes...and sending the BEST TO YOU! ;-)


-----Original Message-----
From: python-dev-admin at python.org [mailto:python-dev-admin at python.org]On
Behalf Of Fredrik Lundh
Sent: Tuesday, May 15, 2001 1:21 PM
To: python-dev at python.org
Subject: [Python-Dev] FYI: MIT's dynamic language design panel now
online


in case anyone has two hours to spare, and the right software,
MIT's dynamic languages group has posted a quicktime video of
their recent panel on language design.

http://www.ai.mit.edu/projects/dynlangs/wizards-panels.html

(what 1/2 should result in, why it's good to have both CPython
and JPython, why whitespace is significant, why language design
is perhaps more related to architecture than math, and lots of
other goodies from Guy Steele and others)

Cheers /F


_______________________________________________
Python-Dev mailing list
Python-Dev at python.org
http://mail.python.org/mailman/listinfo/python-dev





From glyph at twistedmatrix.com  Mon Dec 10 18:07:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 10 Dec 2001 19:07:33 -0600
Subject: [Twisted-Python] FW: [Python-Dev] ExtensionClass plans
In-Reply-To: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>
References: <EIEFLCFECLLBKGPNJJIMGEKKHLAA.jason@crash.org>
Message-ID: <1008032853.1011.11.camel@zelda>

On Mon, 2001-12-10 at 17:25, Jason L. Asbahr wrote:
 
> This might be of interest...

Indeed it is.  In fact, the whole Zope3X development effort is of
particular interest to me, because Zope is giving up on their previous
architecture entirely and moving to one which is much more like Twisted
-- where the use of more "normal" python code is achieved through using
delegation rather than inheritance, new Python features rather than
extension modules, and explicit mechanisms rather than implicit
acquisition to communicate data between components.  But they're not
using Twisted to do it (yet -_^).

Unfortunately Twisted is still a fairly new player on the Python scene;
I would love to approach the Zope developers with Twisted as the server
framework for the next iteration of Zope, but there is still some
duplication of process between the two efforts and I don't know to
propose reconciling it.  In particular, I have some ideas about
implementing a configuration system using just Python (some of which are
in CVS now), but these are still in their first iteration; the Zope3X
effort has a different approach using XML, also in its first iteration.

Do any fans of Twisted who are current on the Zope3X development branch
have any ideas about potential integration?  Do you think it's worth
pursuing, and at what level of abstraction?

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Tue Dec 11 21:49:20 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 22:49:20 -0600
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011210134617.A541@frobozz.local>
References: <20011210134617.A541@frobozz.local>
Message-ID: <1008132560.3358.9.camel@zelda>

On Sun, 2001-12-09 at 20:46, Andrew Bennetts wrote:
> This is just a quick mail to let people know what I had to do to make
> a Twisted server work as a WinNT service.

Thanks a lot, Andrew!

> First, it should be noted that I'm not using twistd or tap files, partly
> because this server has no state that needs persisting, and also because
> I'm not sure how to use them ;)

[snip service]

> And that does it.  The trickiest bit is that you need to set the log
> file to something other than stdout, otherwise it dies due to a Bad File
> Descriptor error doing logfile.flush().  Other than that, it is
> basically boilerplate code (if you're familiar with Win32 services
> written in Python).
> 
> I wonder if there is a more integrated way to do this, though?

Well, the "integrated" way to do it would probably to be something
similar to moshe's 'tap2deb' -- a Twisted service would probably be a
.tap or .tac file which got loaded, similar to the way twistd does, and
used the 'startLogging' call to open a log file and start writing to
it.  A good default would be the doc/examples/coil.tac currently in CVS
(and in the coopweb.org "breakfast builds").

Does win32 have a standardized logging mechanism?  Twisted can log to
any file-like object, so if we could put log messages wherever winnt
expects to find them that would be good ;-)  (I vaguely recall something
called the "Event Log"?)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Tue Dec 11 22:15:07 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 23:15:07 -0600
Subject: [Twisted-Python] OSI 7 layer network model
In-Reply-To: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>
References: <HOEEKPCOKELHCNIJNMAGEENICDAA.sean@ninjaneering.com>
Message-ID: <1008134107.3358.11.camel@zelda>

On Wed, 2001-12-05 at 15:06, Sean Riley wrote:
> I was wondering... how would you categorize the various pieces of Twisted in
> the OSI 7 Layer Network Model?
> 
> The layers are:
> 
> 1. Physical - hardware
> 2. Data Link - ethernet
> 3. Network - IP
> 4. Transport - protocols(TCP/IP, UDP)

When we start marketing twisted.internet hardware that you can use to
speak TCP/TIP, I'll let you know :-)

> 5. Session

It depends on the appplication.  Normally, this is managed by TCP itself
and is represented by a twisted.protocols.protocol.Transport instance. 
In broken, "stateless" protocols like HTTP, we have explicit session
management (twisted.web.server.Session); for many applications it's
unnecessary.  I guess in some cases this level doesn't exist?  When
you're using twisted.spread, the session is the Broker; Perspectives are
just one of the things that can be attached to the Broker.  Similarly to
web sessions.

> 6. Presentation

This apparently involves quite a few different things.  As you noted,
it's a computationally expensive place, this is where some optimizations
have already started to happen.  banana and jelly are at this level;
banana has been optimized into C.  (Yes, itamar, one of these days I
will integrate Elliot's changes)  Jelly is another candidate.

> 7. Application

"User Code", I guess :)

> I'm not sure how "session" fits in with Twisted. Maybe Perspectives play the
> role of sessions?
> 
> Presentation is defined as "where application data is packed/unpacked" -
> which seems to include both banana and jelly?
> 
> I'd like to be able to draw a diagram showing where python fits into this
> model and where the opportunities for optimization are found. By explicitly
> showing that the implentations of these layers are actually in C or provided
> by the OS, the perception that "python is slow" could be mitigated somewhat.

Well, at least 4.5 layers out of 7 are provided by hardware or C code
:-)  (Python itself is in C, after all; doesn't that make it fast?)

> I think that keeping the "session" layer in python can be justified with the
> added security of no buffer overflows, and the requirement for integration
> with the python application layer. There also are few tight loops in this
> layer.

After reading a bunch of OSI documents on this layer listing, I'm not
sure what *code* this layer actually refers to.  Session management and
flow control on the TCP level are done by the kernel; and a lot of
buffer overflows happen in the Presentation layer as well.

> The "Presentation" layer seems to be the most computationally expensive
> software layer as it includes encryptions, packing and compression. It is
> here that the pure python implentation is a little scary for most people -
> and so it is here where the most education and explicit categorization of
> components by implementation would be most useful.

More heavily optimized stuff at this layer would always be good, but I
would prefer to sacrifice as little safety as possible; there's always
the potential to mishandle data; especially if you count encryption in
this layer -- data which makes it through the encryption layer just fine
might still require processing that makes it dangerous to do in C.

That said, Twisted uses a C SSL implementation currently, and I
certainly have no plans to rewrite that in python.  I think that SSL is
probably good enough for the encryption layer, and it's well-tested.
Most of the problems I've had with it are build-related, although Moshe
may want to roll his own OpenSSL bindings to help resolve some of that.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From glyph at twistedmatrix.com  Tue Dec 11 22:31:01 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 11 Dec 2001 23:31:01 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
Message-ID: <1008135061.3360.13.camel@zelda>

So, occasionally I've heard from people using Twisted.  I haven't made
an index of them yet, or even the domains it's being used in.  If you
subscribe to this list, please send in something detailing your usage of
Twisted, what you like about it, what you don't like about it, and if
you like, feel free to tack on something outrageous for the ad copy :-).

If you don't want to be quoted or your project is not ready for public
consumption, email me personally.

Especially, I'd like to know about what modules you're using for your
application and what your experience has been with them.

(Even if you've mentioned your app before, please post about it again. 
If you're not using the latest, let me know which version you deployed
at.)

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/





From mattcampbell at pobox.com  Tue Dec 11 23:37:15 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Wed, 12 Dec 2001 00:37:15 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>; from glyph@twistedmatrix.com on Tue, Dec 11, 2001 at 11:31:01PM -0600
References: <1008135061.3360.13.camel@zelda>
Message-ID: <20011212003715.A73498@mattcamp.dyn.dhs.org>

I'm using Twisted in a custom server which I've written for ACB
Radio Interactive (http://interactive.acbradio.org/), or ACBRI for
short.  ACBRI is a non-commercial "Internet radio station" run by
blind and visually-impaired people (myself included), playing music
in a variety of styles.  We use the Shoutcast MP3-streaming system
(www.shoutcast.com), in which the broadcaster sends the encoded
audio to the server (over a TCP connection), and the server sends
that audio to all currently connected clients.

We wanted to provide a high-quality audio stream for users with
broadband Internet connections, while not preventing modem users
from listening.  One way to solve this problem is for the broadcaster
to simultaneously send two separate streams to the server (or
potentially two different servers), one encoded at a high bit rate
and one at a low bit rate.  But not everyone can do that, due to
lack of adequate CPU time or bandwidth or the limited functionality
of the Windows applications most of the broadcasters use.

So my idea was that the broadcaster should send only one stream to
the server, which should re-encode that stream (using an external
MP3 encoder like LAME) into a low-bandwidth stream for modem users
and make that one available on a different port.  Our server also
needed to be able to relay one or both of the streams to another
Shoutcast server in case we didn't have enough bandwidth on our
own machine to serve many listeners.  I knew of no server that did
these two things, so I decided to write my own.

I had written a Shoutcast-compatible server in Python a few months
earlier, but it used threads to handle multiple connections (using
the classes in the SocketServer module).  After reading Sam Rushing's
description of Medusa and his tutorial on the asyncore and asynchat
modules, I knew that I should drop multithreading in favor of a
single-threaded asynchronous approach.  So I figured I'd rewrite
my server sometime but never got around to it, and one thing that
hindered me was the lack of built-in support for delayed callbacks
in asyncore (for timeouts which are necessary in some cases).

It seemed that it would be too difficult to implement the new
requirements in my original multi-threaded server (which was probably
poorly designed in other ways as well), so I decided to throw it
out and start over.  At that point I took a look at Twisted and
chose to use it.  I think the two main features that made me decide
to use Twisted instead of asyncore+asynchat were built-in support
for delayed callbacks and the Process class (since I needed to
start the MP3 encoder and communicate with it through pipes).
Initializing a server and handling a new incoming connection are
also easier under the twisted.internet framework, and I thought
the telnet server was cool.

This leads me to what I don't like about Twisted.  After taking a
closer look at Medusa, I found that Medusa's "monitor" is better
if you don't use a GUI (and therefore can't use Twisted Manhole).
I guess I ought to write a command-line Manhole client using the
twisted.internet.stdio module.  I'd also strongly recommend moving
the higher-level components into separate packages.  For example.
I have no use for Twisted Reality or Words and don't currently use
Twisted Spread, though Twisted Web may come in handy in the future
(I currently only use the low-level twisted.protocols.http module).

I started working on this server in August.  ACBRI has now been
using it for a little over two months.  It is not released to the
public, at least not yet; if it's released, it will be under the
GPL.

Sorry if this is too long; feel free to condense and paraphrase
what I've said as much as you like.  I hope you found it interesting.
-- 
Matt Campbell
E-mail and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/




From mattcampbell at pobox.com  Tue Dec 11 23:45:35 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Wed, 12 Dec 2001 00:45:35 -0600
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <20011212003715.A73498@mattcamp.dyn.dhs.org>; from mattcampbell@pobox.com on Wed, Dec 12, 2001 at 12:37:15AM -0600
References: <1008135061.3360.13.camel@zelda> <20011212003715.A73498@mattcamp.dyn.dhs.org>
Message-ID: <20011212004535.B73498@mattcamp.dyn.dhs.org>

Oh, I forgot to mention, the server I wrote is running under Twisted
0.11.0 and is working very well under that version (though as I
mentioned before, I don't use any of the higher-level components
like Web, Spread, or Words).
-- 
Matt Campbell
E-mail and MSN Messenger:  mattcampbell at pobox.com
Web site:  http://www.pobox.com/~mattcampbell/




From andrew-twisted at puzzling.org  Wed Dec 12 00:54:30 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 12 Dec 2001 18:54:30 +1100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <1008132560.3358.9.camel@zelda>
References: <20011210134617.A541@frobozz.local> <1008132560.3358.9.camel@zelda>
Message-ID: <20011212185430.B969@frobozz.local>

On Tue, Dec 11, 2001 at 10:49:20PM -0600, Glyph Lefkowitz wrote:
> On Sun, 2001-12-09 at 20:46, Andrew Bennetts wrote:
> > I wonder if there is a more integrated way to do this, though?
> 
> Well, the "integrated" way to do it would probably to be something
> similar to moshe's 'tap2deb' -- a Twisted service would probably be a
> .tap or .tac file which got loaded, similar to the way twistd does, and
> used the 'startLogging' call to open a log file and start writing to
> it.  A good default would be the doc/examples/coil.tac currently in CVS
> (and in the coopweb.org "breakfast builds").

Hmm.  I'm not sure how this would work... Python supports WinNT services
by providing a special executable "PythonService.exe", which runs the
script on your behalf, and passes things like "Stop" messages to your
SvcStop method.  The HandleCommandLine bit at the end of that script I
gave is a conveniece thing to wrap up installation and removal of
services -- typical usage of a script is:

    myservice.py install        # installs the service

    myservice.py start          # starts the service, this can also be
                                # done via the control panel

    myservice.py remove         # removes the service from the system

Services are just processes that can be automatically started on boot,
and can be stopped and started.  My point here is that whatever twisted
does, it will need to do it inside of a class with SvcDoRun, etc, that
needs to be registered as a service.

Apologies if I've just told you what you already know...

> Does win32 have a standardized logging mechanism?  Twisted can log to
> any file-like object, so if we could put log messages wherever winnt
> expects to find them that would be good ;-)  (I vaguely recall something
> called the "Event Log"?)

It does, but it's more for logging "events" than individual messages,
i.e. each line of the current log file should *not* be an entry in the
NT event log, unless you're okay with spamming the log ;)

Typically, programs will only report unusual events in the Event Log,
e.g. "could not replicate filesystem", "the service 'blah' could not be
started", etc.  There is a notion of severity, though.  Basically, I'm
not sure that the NT Event Log is going to properly fit the way Twisted
logs, especially seeing as services failing already gets logged
automatically, and PythonService.exe sees to it that the traceback is
included.

I'm not sure of any better standard places though.  I believe IIS
typically logs to %SYSTEMROOT%\Logs\W3SVC\yyyymmdd.log (SYSTEMROOT is an
environment variable that typically is set to C:\WINNT). Perhaps a
similar scheme would be appropriate for Twisted?

If you are interested in the Event Log route, just Google for "python
event log", or read the relevant chapter of the _Programming Python on
Win32_ book.

-Andrew.




From j.her at t-online.de  Wed Dec 12 12:31:30 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 12 Dec 2001 20:31:30 +0100
Subject: [Twisted-Python] Running a twisted server as a WinNT service
In-Reply-To: <20011212185430.B969@frobozz.local>
Message-ID: <16EF6Y-2FIN28C@fwd05.sul.t-online.com>

On Wed, 12 Dec 2001 18:54:30 +1100, Andrew Bennetts wrote:

>I'm not sure of any better standard places though.  I believe IIS
>typically logs to %SYSTEMROOT%\Logs\W3SVC\yyyymmdd.log (SYSTEMROOT is an
>environment variable that typically is set to C:\WINNT). Perhaps a
>similar scheme would be appropriate for Twisted?

If it comes to debug logging, the best way is to use
OutputDebugString().

Ciao, Jürgen






From sean at ninjaneering.com  Thu Dec 13 00:30:43 2001
From: sean at ninjaneering.com (Sean Riley)
Date: Thu, 13 Dec 2001 01:30:43 -0600
Subject: [Twisted-Python] new stuff in twisted
Message-ID: <HOEEKPCOKELHCNIJNMAGKEPHCDAA.sean@ninjaneering.com>

Hi all,

i've been working with glyph on some new stuff lately in the twisted world.
here is a brief description of some of it:

twisted.enterprise

the addition of the "Augmentation" class to the adbapi give a convenient
place to put database interface code.

dbpassport adds database authentication of users. there are a standard set
of tables for identities and perspectives, hooks for dynamic creation of
perspectives from the database, and a web interface to manager it all.
plans exist to add service specific database tables and user data.

this piece feels pretty solid to me and is the infrastructure used for the
two below pieces.

twisted.metrics

this is a system for monitoring distributed servers running twisted
applications. it has a central database of metrics data and a real-time data
cache in the metrics manager server. there is a web interface to the manager
which allows real-time viewing of the status of the servers in the network.

it is intended for real-time load balancing between servers and storing
metrics history information for data-mining. it accepts both operating
system statistics (through an OsMetrics Collector) and application specific
statistics which are both correlated into the same database schema.

this system is still in development, but is already functional. now that the
db support is solid, it should progress quickly.

twisted.forum

a web based message board / posting system with a database backend. this is
currently in an alpha stage. it needs work to hook up the user
authentication piece, but it already has functioning forums, messages and
threads.


all of these systems use web widgets extensively. i have to say that web
widgets are easy to use and provide a huge amount of functionality.

----
"If it's not running programs or fusing atoms, it's just bending space."
Sean Riley
sean at ninjaneering.com


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20011213/5af1b2f7/attachment.html>

From andrew-twisted at puzzling.org  Thu Dec 13 06:52:50 2001
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 14 Dec 2001 00:52:50 +1100
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>
References: <1008135061.3360.13.camel@zelda>
Message-ID: <20011214005250.B728@frobozz.local>

Ok, so here's a quick summary of what I use Twisted for...

I'm a developer for a company that processes stock data and publishes it
via the web and our own proprietary protocol.  While the bulk of our
systems are written in C++, I occasionally manage to do some things in
Python which the C++ developers think would be too tedious (but are
actually pretty simple in Python).

My C++-coding colleagues were concerned that a moderately important
server I proposed to write in Python wouldn't be fast enough, and that
I'd end out using something dodgy like one thread per socket which would
kill performance.  Our systems all run on Win 2000, and many of the C++
servers make use of relatively obscure features like IO completion ports
to improve performance.

So I used Twisted.  It is just beautifully simple to write an
asynchronous, single-threaded server with Twisted.  I've got a Python
implementation of our internal protocol that inherits from
twisted.protocols.protocol.ServerProtocol, and by writing a class which
inherits from my class and overrides a single method, "queryRecevied",
you can write a server for our systems.  At least one of the C++
developers is now talking about writing his next server in Python.

As for the speed, I'm getting nearly 200 requests/sec for this
particular application, which is without doing any sort of optimisation,
and involves processing by other servers due to the design of our
company's systems, and involves processing XML in my server.  This
compares nicely with our C++ servers :)

I haven't yet looked at half the things that Twisted can do (in
particular, I'm interested in seeing if twisted.enterprise supports MS
SQL Server 7 via the ADODB COM objects, or is easily adapted to it)....
but I'm looking forward to finding out.  Twisted makes writing a
scalable server disgustingly easy.

I regret that I cannot mention specific products -- this is all
closed-source stuff used internally.  

I'm using Twisted 0.12.3, but am looking forward to the next version
which will presumably fix the bug where startFactory gets called twice
<wink>

The only real problems I've had with Twisted so far are:
  * Having to admit that I need to delete those 50 lines of code because
    Twisted makes me realise I can do it in 15
  * Trying to figure out how to make Twisted do everything for me, when
    it turns out that I really just needed something incredibly simple.
    (I got so used to thinking Twisted's framework could do it all, I
    started to muck about with Deferreds, until I realised that I just
    wanted keep a list of functions to run as soon as another function
    finished, which is something you can do with vanilla Python
    perfectly well :)
  * Having a semi-legitimate reason to IRC from work, so I can ask the
    friendly people on #python questions about Twisted :)

Oh yes, and I'd like to mention that I like how if Protocol.dataReceived
for some reason throws an exception, Twisted keeps on working (after
logging the exception), rather than killing the whole server.  I realise
it's a simple thing, but I'm glad it's been done.

I'm also interested in run-time configuration/status info -- am I right
in believing there is a simple way to create a web interface for
inspecting a Twisted application?  (Our systems typically export a COM
interface which is then manipulated by VB apps, but exporting COM
interfaces from NT services in Python is a bit messy). 

Hmm.  That wasn't as quick as I intended, but I hope you find it to be
of some use.

Keep on Twistin'...

-Andrew.




From tv at twistedmatrix.com  Fri Dec 14 12:39:29 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 14 Dec 2001 21:39:29 +0200
Subject: [Twisted-Python] What's everyone using Twisted for?
In-Reply-To: <1008135061.3360.13.camel@zelda>
References: <1008135061.3360.13.camel@zelda>
Message-ID: <87k7vppp5a.fsf@ki.yok.utu.fi>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> So, occasionally I've heard from people using Twisted.  I haven't made

	All the old beards know my software already, but here goes
	anyway:

        http://mc-foo.sourceforge.net/

MC Foo is an advanced, adaptive and learning mp3 jukebox server.

    * continuous music playing
    * learns what music you like and dislike
    * no static playlists; uses a playqueue you can view and alter
    * can be controlled from any hosts and even with infrared remote
      controllers
    * allows multiple user/preference profiles, according to whose
      listening and his or her mood

	The project started as part of our studies. That led to the C
	implementation -- choice of language was dictated by the
	lecturer.

	Since the course, I got bored of debugging C, and decided I
	need to learn Python. Five hours later, I had reimplemented
	the core parts of MC Foo in Python. I still had to debug the
	line-based network interface. Five hours later, I had ported
	it to use XML-RPC. That wasn't really satisfactory. I started
	spending time on #python on irc.openprojects.net, and saw this
	group of hackers putting together an asynchronic input/output
	framework (and more) in Python. Five hours later, MC Foo was
	ported to use twisted.spread.pb. There exists a Tkinter client
        GUI that allows you to visually manipulate the playqueue. I
        use the command line interface heavily.

        MC Foo uses existing Ogg/MP3 libraries as backend, and will
        never touch file contents or decompression ourselves (it does
        write to /dev/sound/dsp itself, but it's all opaque data to
        it). Where Python-accessible free libraries are not available,
        a suitable players will be used in batch mode. (That is
        mpg321, for now. Anyone know of a free Python MP3 library?)


        STATUS
        ------

        It plays music whenever I'm home.

       	Everything but the CVS is horribly obsolete. Grab the CVS snapshot,
        look around. Grab me on #python to help you get started -- I can
        successfully build .debs out of a CVS snapshot, create .taps with
        that, and run the .taps, but your mileage may still vary.

        I will add one or two features, kill some bugs and then finally
        release the first real Python version of MC Foo.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From glyph at twistedmatrix.com  Mon Dec 17 03:09:25 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 17 Dec 2001 04:09:25 -0600
Subject: [Twisted-Python] Test, Please Ignore
Message-ID: <1008583766.786.3.camel@zelda>

This is a test to make sure that Mailman is still working after
Zaibach's upgrade to Debian Unstable.  Hey, why are you reading this?  I
said it was a test.  Ignore it!

Oh well, too late.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Mon Dec 17 10:14:56 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 17 Dec 2001 19:14:56 +0200
Subject: [Twisted-Python] Basic cookie support
Message-ID: <3C1E2810.2010407@itamarst.org>

Unless someone has a problem with it, this goes in tommorow. I'm willing to 
add a comment "don't use cookies, use sessions instead" ;)


RCS file: /cvs/Twisted/twisted/web/server.py,v
retrieving revision 1.31
diff -c -r1.31 server.py
*** twisted/web/server.py	15 Dec 2001 03:24:10 -0000	1.31
--- twisted/web/server.py	17 Dec 2001 17:13:54 -0000
***************
*** 170,176 ****
           self.args = {}
           self.stack = []
           self.headers = {}
!
           self.method, self.uri = command, path
           self.clientproto = version
           self.content = content
--- 170,177 ----
           self.args = {}
           self.stack = []
           self.headers = {}
!         self.cookies = []
!
           self.method, self.uri = command, path
           self.clientproto = version
           self.content = content
***************
*** 337,342 ****
--- 338,345 ----
                   self.sendStatus(self.code, message)
                   for name, value in self.headers.items():
                       self.sendHeader(name, value)
+                 for cookie in self.cookies:
+                     self.sendHeader("Set-Cookie", cookie)
                   self.endHeaders()

               # if this is a "HEAD" request, we shouldn't return any data
***************
*** 360,365 ****
--- 363,391 ----
           """
           self.finish()

+     def addCookie(self, k, v, expires=None, domain=None, path=None, 
max_age=None, comment=None, secure=None):
+         """Set an outgoing HTTP cookie.
+         """
+         cookie = '%s="%s"' % (k, v)
+         if not (expires is None):
+             cookie = cookie +"; Expires=%s" % expires
+         if not (domain is None):
+             cookie = cookie +"; Domain=%s" % domain
+         if not (path is None):
+             cookie = cookie +"; Path=%s" % path
+         if not (max_age is None):
+             cookie = cookie +"; Max-Age=%s" % max_age
+         if not (comment is None):
+             cookie = cookie +"; Comment=%s" % comment
+         if not (secure is None) and secure:
+             cookie = cookie +"; Secure"
+         self.cookies.append(cookie)
+
+     def view_addCookie(self, k, v, **kwargs):
+         """Remote version of addCookie; same interface.
+         """
+         apply(self.addCookie, (k, v), kwargs)
+
       def setHeader(self, k, v):
           """Set an outgoing HTTP header.
           """
***************
*** 418,425 ****
               # if it still hasn't been set, fix it up.
               if not self.session:
                   self.session = self.site.makeSession()
!                 self.setHeader('Set-Cookie',
!                                '%s=%s' % (cookiename, self.session.uid))
           self.session.touch()
           return self.session

--- 444,450 ----
               # if it still hasn't been set, fix it up.
               if not self.session:
                   self.session = self.site.makeSession()
!                 self.addCookie(cookiename, self.session.uid)
           self.session.touch()
           return self.session




From mad96 at hampshire.edu  Thu Dec 20 16:26:06 2001
From: mad96 at hampshire.edu (Michael Dartt)
Date: Thu, 20 Dec 2001 18:26:06 -0500 (EST)
Subject: [Twisted-Python] What's so cool about Twisted?
Message-ID: <1008890766.3c22738e5a57d@webmail.hampshire.edu>

(Yes, Glyph, I know it leads to increased sexual potency.)

The really short version of this email: What features/tools/etc. does Twisted 
offer, how do they differ from conventional APIs/programs, and what do they 
do?  (E.g. Sessions vs. cookies, Widgets, Passport....)  What would 
its "feature list" look like?

The longer version:

The recent message about CGI/Sessions got me wondering how Twisted differs from 
other 'net frameworks, and how I can capitalize on its advantages.  For 
example, I'm planning on running a blog on top of Twisted (all I need is a 
computer to code on...:P).  On a standard web server, I'd probably set most of 
it up as CGIs, at least initially, and use cookies for dealing with "members" 
and such.  But Twisted's got these things called Sessions and Passports, and 
I've seen a lot of bits thrown about in regard to Widgets.  And there's 
probably a lot of stuff I haven't heard about.

I know there's the "Why Twisted?" section, but it's *extremely* high-level, 
basically saying "It's written in Python, has a bunch of different protocols 
that can interface, and is well-supported," which is like someone handing you a 
tool box and telling you, "There are some really useful tools in here.  They're 
like ones you may have heard about, but better."  "So...why are they better?  
What do they do?  Why would I want this tool set over a different one?"

I realize at least part of this comes from my ignorance regarding network 
programming; I'm basically a neophyte when it comes to that.  Otherwise, I 
could probably dive into the code and figure out what does what, and how it's 
different or better than the way things are normally done.  As it is, I 
wouldn't know where to start.  Once I know what the parts are and what they do, 
I should be able to use my m4D Py7h0n sKi11Z (;-}) to figure out the "how".

Thanks in advance,

Mike



From glyph at twistedmatrix.com  Sun Dec 23 01:06:33 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 23 Dec 2001 02:06:33 -0600
Subject: [Twisted-Python] What's so cool about Twisted?
In-Reply-To: <1008890766.3c22738e5a57d@webmail.hampshire.edu>
References: <1008890766.3c22738e5a57d@webmail.hampshire.edu>
Message-ID: <1009094796.17755.12.camel@zelda>

On Thu, 2001-12-20 at 17:26, Michael Dartt wrote: 
> (Yes, Glyph, I know it leads to increased sexual potency.)
> 
> The really short version of this email: What features/tools/etc. does Twisted 
> offer, how do they differ from conventional APIs/programs, and what do they 
> do?  (E.g. Sessions vs. cookies, Widgets, Passport....)  What would 
> its "feature list" look like?

I really wish I could point you at a complete feature list; right now,
though, a lot of things are in flux.  This is a complaint that I've
heard before though, so if you manage to get a good idea of what Twisted
is from reading a combination of code, list archives, and documentation
snippets that we've written, a concise write-up of that would be really
valuable.

> The longer version:
> 
> The recent message about CGI/Sessions got me wondering how Twisted differs from 
> other 'net frameworks, and how I can capitalize on its advantages.  For 
> example, I'm planning on running a blog on top of Twisted (all I need is a 
> computer to code on...:P).  On a standard web server, I'd probably set most of 
> it up as CGIs, at least initially, and use cookies for dealing with "members" 
> and such.  But Twisted's got these things called Sessions and Passports, and 
> I've seen a lot of bits thrown about in regard to Widgets.  And there's 
> probably a lot of stuff I haven't heard about.

For this specific case, I can answer you:

You will need to know about twisted.web.widgets and twisted.enterprise
(probably the version we're working on right now, still unreleased). 
There are copious comments in Widgets, and Enterprise has a fairly small
API, documentation is forthcoming.

As far as sessions go; they're just an automatically managed cookie with
some arbitrarily-associated state.  The API is simply that a Request
object has a method getSession, which will return a Session instance;
set or get any attributes you like on that object; it has no relevant
methods.

These session objects expire every half an hour of inactivity or so.

Finally, twisted.forum (still unreleased, I believe; I've got to get
moving on the next release!) will probably provide you with a good bit
of straightforward example code for how to do these sort of things.

> I know there's the "Why Twisted?" section, but it's *extremely* high-level, 
> basically saying "It's written in Python, has a bunch of different protocols 
> that can interface, and is well-supported," which is like someone handing you a 
> tool box and telling you, "There are some really useful tools in here.  They're 
> like ones you may have heard about, but better."  "So...why are they better?  
> What do they do?  Why would I want this tool set over a different one?"

A lot of the really cool functionality in Twisted is still being
developed.  The main interesting thing about Twisted is that it's a
platform for developing integrated functionality, not in any one bit of
functionality that exists at this time.  This is a feature which is hard
to describe, especially to non-technical people
*cough*management*cough*.

This makes it better than the average web platform because on the
average web platform, it would not be possible to integrate a chat
program with your webserver and have it access the same data. 
Decoupling your data into a relational database can help, but you still
end up with process synchronization and communication problems; not to
mention the fact that ALL data that you want to have accessible through
the chat interface must be represented in the database.

With Twisted, lots of people are working on lots of parts of the
networking infrastructure at once.  It's ideal for games, but it's also
ideal for web applications. Given the factoring of the code, there is a
lot of common code at each level, so as we reimplement, optimize,
refactor, and enhance various pieces of the codebase to support, let's
say, a multiplayer game, the webserver and IRC server get better too.

> I realize at least part of this comes from my ignorance regarding network 
> programming; I'm basically a neophyte when it comes to that.  Otherwise, I 
> could probably dive into the code and figure out what does what, and how it's 
> different or better than the way things are normally done.  As it is, I 
> wouldn't know where to start.  Once I know what the parts are and what they do, 
> I should be able to use my m4D Py7h0n sKi11Z (;-}) to figure out the "how".

Learning network programming is a task in itself, and learning Twisted
could probably help you through it.  Some of the confusing stuff is in
the style of programming that Twisted encourages, which is to say
event-based rather than threaded.  Some of the confusing stuff is in the
various bits of Twisted that use Python's internals to make things
happen "behind the scenes".  In general, however, sample programs with
Twisted are short and to the point, and you can focus on the particular
problems of your application domain (See doc/examples in the Twisted
distribution.)

In the absence of documentation, ask questions either on this list or in
the #python channel on irc.openprojects.net; there will often be
developers there who can help you.  Usually this mailing list is helpful
too, I *ahem* ENCOURAGE other developers to help newbies and write
documentation ;).  I will try to turn salient mailing list posts into
HTML documentation in a timely manner, but I make no promimses.

Happy hacking,

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From twisted at itamarst.org  Mon Dec 24 05:53:37 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Dec 2001 14:53:37 +0200
Subject: [Twisted-Python] Why Zoteca Uses Twisted
Message-ID: <3C272551.5080200@itamarst.org>

1 Twisted

1.1 Open Source Advantage

Zoteca believes that Open Source software provides a considerable
business advantage. Many parts of any software platform
are generic, and not restricted to the task at hand. Using
Open Source software for these components allows us to concentrate
R&D resources on our core competencies and proprietary advantages,
while still using an underlying technology that is unparalleled
in terms of cost, flexibility, scalability and robustness.

1.1.1 Open Source Saves Money

The costs for development for Open Source components is spread
out over a number of organizations and multiple developers.
As a result, for every person-year of investment on our
part, we receive tens of person-years of development in
return, at no additional cost.

1.1.2 Open Source is Flexible

Open Source development allows us to cooperate with organizations
and individuals from other industries, bringing ideas and
knowledge from many different fields of competency to bear
upon our common infrastructure needs. This development process
takes advantage of orthogonal synergy between different
industries' software requirements. Hence the resultant software
is far more generic and flexible than had it been developed
for one specific use. Of course, total access to the underlying
source code also allows customized changes for particular
applications.

1.1.3 Open Source is Scalable and Robust

Developers on open source projects are not engaged in an
intellectual exercise nor are they removed from the application
space of the software under development. They are developing
the software for their own use for real needs. They are
not only developers, but users and testers as well. Hence
the resultant software is far more field-ready and scalable
to real-world applications than proprietary alternatives.
The multiple environments the components are used in, also
ensures that they are robust and relatively bug free. Being
cross-platform is the icing on the cake.

1.2 Twisted Network Server

A prime example of this Open Source approach is the Twisted
network server. Twisted is written in Python, a cross-platform,
high-level object-oriented programming language. Twisted
includes a web server, a telnet server, a multiplayer RPG
engine, a generic client and server for remote object access,
and APIs for creating new protocols and services. Twisted
is being developed and used by individuals and organizations
from across the world, for uses ranging from massive multiplayer
games to streaming audio servers.

Some of Twisted's advanced features include:

* Abstraction layers for protocols and transports, allowing
   design of servers that transparently support multiple
   transports (e.g. TCP and SSL).

* Pluggable event loops, supporting integration with GUI
   toolkits and platform-specific event loops (e.g. wxPython,
   Java or Unix/Win32 specific APIs).

* Multiple protocol support inside a process, allowing cross-protocol
   applications, integrated web control panels, etc..

* A metrics system supporting centralized collection of protocol
   and process statistics.

* Perspective Broker, a powerful, asynchronous and efficient
   remote object protocol, which can also be used from Java.

* Integrated event-based and threaded programming, using
   the Async/Half-Async design pattern.

The use of Twisted and Python has had many benefits for Zoteca
when developing our software:

* Low cost of development, since basic infrastructure needed
   by any network server is built in to the platform.

* Cross-platform and platform specific support (Twisted,
   and thus Zoteca's servers, can run and take advantage
   of the Unix, Windows and Java platforms).

* Flexibility and speed of development, allowing easy customization
   of the software.

* Wide scale testing of low-level infrastructure in a variety
   of situations.

* The ability to customize and enhance Twisted to support
   additional functionality.

1.3 About Zoteca

Zoteca has developed a new, patented, proprietary technology
which provides reliable, available, private and secure ("RAPS")
data sharing in networked environments. Zoteca's mission
is to create a family of product toolkits, which integrate
into customized versions of data sharing applications. These
Zoteca-based products provide RAPS services to end-users
--- both businesses and consumers.

In current networks it is nearly impossible to achieve reliability
and accessibility simultaneously --- hence the constant
shuffling of data between centralized servers and the organizational
edge. Similarly the more private and secure networks are,
the less efficient data sharing becomes. Zoteca creates
spaces where individuals and groups share data in a total
RAPS environment, simultaneously efficient (R & A) and safe
(P & S).

The core of our innovation involves decoupling computing
entities (data, files, etc.) from specific physical computers
or locations, thereby eliminating single point of failure.
By using distributed protocols, redundant and immutable
data stores, sophisticated authentication schemes and encryption
techniques, we address the problem at the infrastructure
level, allowing us to offer guaranteed levels of service
in terms of the four RAPS dimensions.

For more information about Zoteca and our products, please
visit http://www.zoteca.com.





From twisted at itamarst.org  Mon Dec 24 07:56:14 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 24 Dec 2001 16:56:14 +0200
Subject: [Twisted-Python] First go at connectTCP and connectSSL
Message-ID: <3C27420E.7020801@itamarst.org>

if I don't get complaints about this, it gets checked in and I move on to 
shutting down connectors, and so on.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: connect.patch
URL: </pipermail/twisted-python/attachments/20011224/5213a662/attachment.ksh>

From tv at twistedmatrix.com  Wed Dec 26 07:02:11 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 26 Dec 2001 16:02:11 +0200
Subject: [Twisted-Python] Object prevalence (advogato article)
Message-ID: <87ellim658.fsf@ki.yok.utu.fi>

http://advogato.org/article/398.html

	Short summary:

        -keep all state in RAM, no traditional database.
        -write snapshots of state to file every n hours.
        -write a journal of all commands coming in to journal.
        -in case of crash, restore state+rerun journal.

        This is pretty close to what Python and Twisted .taps can do. 
        Let's have a goal of being able to do it all, easily.

	I think I'll add .tap rewriting every n seconds to MC Foo now :)

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From twisted at itamarst.org  Wed Dec 26 09:13:34 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 18:13:34 +0200
Subject: [Twisted-Python] Metrics and all that jazz
Message-ID: <3C29F72E.40507@itamarst.org>

I've been looking at metrics - currently the model is multiple machines,
connecting to a central metrics server that stores metrics in postgres. I'm
going to need something like that, so that's good, but it should also scale
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show
up in the web interface - maybe try recreating your test environment from
scratch and see what step are missing from Twisted? I keep getting these errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on
the local server too (for smaller setups and for easier testing.) See the
Round Robin Archives section of
http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/manual/index.html for
details on what it is - it's a more reasonable way of storing data than a
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics,
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty
graphs and stuff.





From sean at twistedmatrix.com  Wed Dec 26 12:34:06 2001
From: sean at twistedmatrix.com (Sean Riley)
Date: Wed, 26 Dec 2001 13:34:06 -0600
Subject: [Twisted-Python] Metrics and all that jazz
In-Reply-To: <3C29F72E.40507@itamarst.org>
Message-ID: <HOEEKPCOKELHCNIJNMAGKECDCEAA.sean@twistedmatrix.com>

yes, i must write some docs.

did you run the populate.sql script? each metrics variable must exist in the
metrics_variables table.

rddtool looks interesting. i will take a look in more detail.

all good feedback! thanks.

Unfortunately I currently don't have a production system that this is
running on - it is for a system that isn't built yet. It turned out that
implementing it took about the same time as writing the technical
specification document for it in the required format, so I did them both
simultaneously.

Could you elaborate on "An additional way of keeping track of open
connections and their metrics"?

-----Original Message-----
From: twisted-python-admin at twistedmatrix.com
[mailto:twisted-python-admin at twistedmatrix.com]On Behalf Of Itamar
Shtull-Trauring
Sent: Wednesday, December 26, 2001 10:14 AM
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] Metrics and all that jazz


I've been looking at metrics - currently the model is multiple machines,
connecting to a central metrics server that stores metrics in postgres. I'm
going to need something like that, so that's good, but it should also scale
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show
up in the web interface - maybe try recreating your test environment from
scratch and see what step are missing from Twisted? I keep getting these
errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on
the local server too (for smaller setups and for easier testing.) See the
Round Robin Archives section of
http://people.ee.ethz.ch/~oetiker/webtools/rrdtrool/manual/index.html for
details on what it is - it's a more reasonable way of storing data than a
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics,
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty
graphs and stuff.



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From twisted at itamarst.org  Wed Dec 26 13:31:46 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 22:31:46 +0200
Subject: [Twisted-Python] Metrics and all that jazz
References: <HOEEKPCOKELHCNIJNMAGKECDCEAA.sean@twistedmatrix.com>
Message-ID: <3C2A33B2.8050602@itamarst.org>

Sean Riley wrote:


> did you run the populate.sql script? each metrics variable must exist in the
> metrics_variables table.


There is no populate.sql for metrics last I checked.


> Could you elaborate on "An additional way of keeping track of open
> connections and their metrics"?

Consider a SMTP server. It has clients connect and send emails through 
it. I would like to be able (through a web interface) to see which 
clients are currently connected to it, and how many messages they each 
have sent through (e.g. user from foo.example.com port 67349 has just 
sent 10000 messages, perhaps he's a spammer.) Or to be able to see who 
is logged in from where to a PB server and how many method calls each 
perspective has sent, etc..




From twisted at itamarst.org  Thu Dec 27 02:44:35 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 27 Dec 2001 11:44:35 +0200
Subject: [Twisted-Python] How to test metrics
Message-ID: <3C2AED83.3060203@itamarst.org>

0. make sure postgres and pypgsql are installed (apt-get install python-pgsql).

1. run "createdb twisted"

2. using psql, create the tables listed in the schemas in 
twisted/enterprise/dbpassport.py and twisted/metrics/metricsdb.py

3. $ cat twisted/enterprise/populate.sql | psql twisted
    $ cat twisted/metrics/populate.sql | psql twisted

4. $ twisted -n -y doc/examples/metrics.tac

5. $ PYTHONPATH=. python twisted/metrics/test-client.py

6. Point your browser at http://locahost:8485/


Perhaps there should be a doc/examples/metrics/ and the populate.sql and 
test-client.py, test-os.py and metrics.tac should be there?




From twisted at itamarst.org  Wed Dec 26 07:40:37 2001
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 26 Dec 2001 16:40:37 +0200
Subject: [Twisted-Python] Metrics and all that jazz
Message-ID: <3C29E165.1060404@itamarst.org>

I've been looking at metrics - currently the model is multiple machines, 
connecting to a central metrics server that stores metrics in postgres. I'm 
going to need something like that, so that's good, but it should also scale 
downwards.

Oh, and Sean, I couldn't actually get values added by test-client.py to show 
up in the web interface - maybe try recreating your test environment from 
scratch and see what step are missing from Twisted? I keep getting these errors:

26/12/2001 16:16 [Broker,0,127.0.0.1] ERROR: unknown variable  counter3


So, what metrics needs:

1. Ability to store metrics in memory or in a round-robin database, and on 
the local server too (for smaller setups and for easier testing.) See the 
Round Robin Archives section of 
http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/manual/index.html for 
details on what it is - it's a more reasonable way of storing data than a 
RDBMS for this sort of thing in a lot of cases.

2. OS statistics for Unix - does resource.rusage() give the necessary info?

3. Docs, explanations, examples of protocol specific statistics (e.g. Web).

4. An additional way of keeping track of open connections and their metrics, 
which should combine with the current metrics system.

5. Exporting stats to Windows NT Performance Monitor so it can do pretty 
graphs and stuff.




From ivo at amaze.nl  Sun Dec 30 16:44:31 2001
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Mon, 31 Dec 2001 00:44:31 +0100
Subject: [Twisted-Python] newbie question: error handling
Message-ID: <20011231004431.H6904@amaze.nl>

Hi All,

I'm currently migrating my irc client to twisted, and things look
promising.

However, I can't figure out the following things:

My protocol is derived from protocols.basic.LineReceiver
(which in turn derives from protocol.Protocol.protocol).

How can I determine what specific error condition caused connectionLost()
or connectionFailed()? I.e. connection refused, unknown hostname,
no route to host, etc (the standard errno stuff). 

Also, how can I determine if Linereceived.sendLine() (or 
Protocol.Transport.write()) failed? It doesn't seem to return an
error value or raise Exceptions, and depending on the invocation
of connectionLost makes things perhaps too asynchronous..

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From tv at twistedmatrix.com  Sun Dec 30 14:13:03 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 30 Dec 2001 23:13:03 +0200
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
Message-ID: <87u1u8if8g.fsf@ki.yok.utu.fi>

Here's a sketch of how I imagine an LDAP backend to passport will
work:

LDAP is a logically simple (implementation horrible:) TCP protocol
with messages passing in both directions. User authentication is one
possible message type, and the server replies with either success or
an error message.

For just searching and browsing, you can bind anonymously. Most
servers allow read-only access by default.

But for any kind of modification, we need to bind.

So far, this seems pretty much like with databases. However, here's
the big catch: the normal way to use databases is to have one userid
and password per application, and perhaps store actual userids and
passwords within a table in the database. The normal way to use LDAP
is to bind _as the user who is doing the operation_.

Here is a list of requirements I can think, that need to be fulfilled
in order for me to be able to use passport. Some of these may be very
trivial, or taken for granted by now -- I'm just making sure they are
seen.


Requirement #1: Passport needs to be async.

In order to be able to use LDAP as the backend for passport-like user
verification, the backend needs to be able to talk to a possibly slow
server.


Requirement #2: Passport must be able to store data in the
Perspective during authentication.

However, if the application wants to use LDAP for more than just user
authentication, things get a bit worse. We could just store the
password we saw the user enter, and later bind to the LDAP server as
this user. However, I dislike storing plain-text passwords in virtual
memory.


Requirement #3: Passport must be able to ask users to reauthenticate.

A better way is to remember that we already did bind (authenticate) to
the LDAP server as that user. Just reserve that connection for that
user alone. As long as the connection is alive, we can keep on talking
to the LDAP server.

Now, programs can be restarted, TCP connections can die, and servers
can utilize idle timeouts, maximum time limits, or limit maximum
number of operations per connection. The TCP connection can die any
moment. As we didn't store the user password, we need to ask it again
when we see the connection has closed and the user tries an operation
that requires talking to the LDAP server. This requires "invalidating"
the users previous authentication.


-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From glyph at twistedmatrix.com  Mon Dec 31 08:08:52 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 09:08:52 -0600
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <20011231004431.H6904@amaze.nl>
References: <20011231004431.H6904@amaze.nl>
Message-ID: <1009811332.571.5.camel@zelda>

On Sun, 2001-12-30 at 17:44, Ivo van der Wijk wrote:
> Hi All,
> 
> I'm currently migrating my irc client to twisted, and things look
> promising.
> 
> However, I can't figure out the following things:
> 
> My protocol is derived from protocols.basic.LineReceiver
> (which in turn derives from protocol.Protocol.protocol).
> 
> How can I determine what specific error condition caused connectionLost()
> or connectionFailed()? I.e. connection refused, unknown hostname,
> no route to host, etc (the standard errno stuff). 

Currently you can't.  This is the first request I'm aware of to be made
aware of the actual errno that caused the connection to fail; the
distinction between connectionFailed and connectionLost seemed to be the
big one.

The place you'd have to fix would be
twisted.internet.tcp.Connection.(doRead|writeSomeData).  Similarly in
twisted.internet.udp.  Patches accepted :-).

> Also, how can I determine if Linereceived.sendLine() (or 
> Protocol.Transport.write()) failed? It doesn't seem to return an
> error value or raise Exceptions, and depending on the invocation
> of connectionLost makes things perhaps too asynchronous..

If you need this level of guarantee, you need a protocol which will send
acks for messages as they've been received.  There is no such thing as
"too asynchronous" -- there is "synchronous", "asynchronous", and
"sometimes stuck doing something with one client while the rest of the
server hangs..." :-).

This is the same question as previously, really; if a write "fails",
then the connection has been lost.  Knowing that a connection failed
during a write and getting an errno would give you all the same
information.

Keep in mind that a write "succeeding" might just mean that the memory
was succesfully copied into a buffer for your OS kernel to send; the
other side of the connection may never have received it.

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Mon Dec 31 08:19:48 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 09:19:48 -0600
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
In-Reply-To: <87u1u8if8g.fsf@ki.yok.utu.fi>
References: <87u1u8if8g.fsf@ki.yok.utu.fi>
Message-ID: <1009811989.1908.7.camel@zelda>

On Sun, 2001-12-30 at 15:13, Tommi Virtanen wrote:
> 
> Here's a sketch of how I imagine an LDAP backend to passport will
> work:
> 
> LDAP is a logically simple (implementation horrible:) TCP protocol
> with messages passing in both directions. User authentication is one
> possible message type, and the server replies with either success or
> an error message.
> 
> For just searching and browsing, you can bind anonymously. Most
> servers allow read-only access by default.
> 
> But for any kind of modification, we need to bind.
> 
> So far, this seems pretty much like with databases. However, here's
> the big catch: the normal way to use databases is to have one userid
> and password per application, and perhaps store actual userids and
> passwords within a table in the database. The normal way to use LDAP
> is to bind _as the user who is doing the operation_.
> 
> Here is a list of requirements I can think, that need to be fulfilled
> in order for me to be able to use passport. Some of these may be very
> trivial, or taken for granted by now -- I'm just making sure they are
> seen.
> 
> 
> Requirement #1: Passport needs to be async.
> 
> In order to be able to use LDAP as the backend for passport-like user
> verification, the backend needs to be able to talk to a possibly slow
> server.

There are other, perhaps obvious, reasons why this needs to be so. 
Identities are already async and I'm working on making Perspectives
async right now.  I'll check in something by tomorrow at the latest.

> Requirement #2: Passport must be able to store data in the
> Perspective during authentication.

> However, if the application wants to use LDAP for more than just user
> authentication, things get a bit worse. We could just store the
> password we saw the user enter, and later bind to the LDAP server as
> this user. However, I dislike storing plain-text passwords in virtual
> memory.

I'm not sure what you're talking about here -- it sounds like you're
using "authentication" to mean two different things.  First, what is
*the* Perspective?  An Identity (presumably Identities are stored in
LDAP) has multiple Perspectives.

> Requirement #3: Passport must be able to ask users to reauthenticate.
> 
> A better way is to remember that we already did bind (authenticate) to
> the LDAP server as that user. Just reserve that connection for that
> user alone. As long as the connection is alive, we can keep on talking
> to the LDAP server.
> 
> Now, programs can be restarted, TCP connections can die, and servers
> can utilize idle timeouts, maximum time limits, or limit maximum
> number of operations per connection. The TCP connection can die any
> moment. As we didn't store the user password, we need to ask it again
> when we see the connection has closed and the user tries an operation
> that requires talking to the LDAP server. This requires "invalidating"
> the users previous authentication.

OK.  So it sounds like you want any interaction with a perspective or
identity to be able to potentially raise an exception that says "you
need to offer credentials for this Identity again".  Frameworks (e.g.
web.guard, pb.AuthRoot) will need to handle this sensibly.

It's a reasonable requirement, but it may be domain-specific to your
LDAP interaction stuff.  I know that I have at least one system where
authentication is persistent within a server once it's been accomplished
(interaction with the authentication database stops after the user's
been verified).

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From tv at twistedmatrix.com  Mon Dec 31 09:28:52 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 31 Dec 2001 18:28:52 +0200
Subject: [Twisted-Python] Passport, my ideas about an LDAP backend
In-Reply-To: <1009811989.1908.7.camel@zelda>
References: <87u1u8if8g.fsf@ki.yok.utu.fi> <1009811989.1908.7.camel@zelda>
Message-ID: <87k7v3icaj.fsf@ki.yok.utu.fi>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> > Requirement #2: Passport must be able to store data in the
> > Perspective during authentication.
> 
> > However, if the application wants to use LDAP for more than just user
> > authentication, things get a bit worse. We could just store the
> > password we saw the user enter, and later bind to the LDAP server as
> > this user. However, I dislike storing plain-text passwords in virtual
> > memory.
> 
> I'm not sure what you're talking about here -- it sounds like you're
> using "authentication" to mean two different things.  First, what is
> *the* Perspective?  An Identity (presumably Identities are stored in
> LDAP) has multiple Perspectives.

	I'm probably all confused by Perspectives and Identities. 
	s/Perspective/Identity/. And naturally the fd shouldn't be
	persistent -- just to make sure.

	Yes, I want LDAP to be more than authentication. Consider an
	application that has users stored in the LDAP tree, in one
	subtree. It also has some user-editable data stored in (same
	or different) subtree. LDAP server ACLs allow some of the
	users access to some of the fields, etc. If you want to make a
	web frontend, you need to use LDAP as an authentication
	backend, and you need to use that authentication (to the LDAP
	server) in order to perform actions on the LDAP server.

	Think of it this way: an authentication server gives you a
	key, and when you later perform actions toward external
	services as the authenticated user, you need to provide the
	key. In this case, the key is a TCP connection. I believe
        Kerberos follows this model, with a "real" key.

> > Requirement #3: Passport must be able to ask users to
> > reauthenticate.
> > 
> > A better way is to remember that we already did bind (authenticate) to
> > the LDAP server as that user. Just reserve that connection for that
> > user alone. As long as the connection is alive, we can keep on talking
> > to the LDAP server.
> > 
> > Now, programs can be restarted, TCP connections can die, and servers
> > can utilize idle timeouts, maximum time limits, or limit maximum
> > number of operations per connection. The TCP connection can die any
> > moment. As we didn't store the user password, we need to ask it again
> > when we see the connection has closed and the user tries an operation
> > that requires talking to the LDAP server. This requires "invalidating"
> > the users previous authentication.
> 
> OK.  So it sounds like you want any interaction with a perspective or
> identity to be able to potentially raise an exception that says "you
> need to offer credentials for this Identity again".  Frameworks (e.g.
> web.guard, pb.AuthRoot) will need to handle this sensibly.

	Well, it is possible to handle with voiding the authentication
	data. For example, with web.guard, this could mean that

        1. web.guard sees authentication is still valid, lets a request
           continue

        2. actual request causes actions that discover the LDAP connection
           has closed, give back error

        3. user sees error, clicks "submit" again, or refreshes.

        4. web.guard sees an unauthenticated user, asks for authentication

        5. user authenticates

        6. web.guard lets the resource pass by (A separate ugliness is that
           web.guard complains if it has to authenticate anything with
           forms, and destroys submitted data)

> It's a reasonable requirement, but it may be domain-specific to your
> LDAP interaction stuff.  I know that I have at least one system where
> authentication is persistent within a server once it's been accomplished
> (interaction with the authentication database stops after the user's
> been verified).

	Yes, and one time would be enough even for an LDAP server that
	is used as authentication only. The point where it isn't
	enough is achieved by creating a proxy in Twisted, where the
	proxy isn't the final service that authenticates users, but
	just acts as a smart protocol converter. Then the proxy is at
        the mercy of the final service.

	And that's what I've been doing. LDAP <-> web.

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}



From ivo at amaze.nl  Mon Dec 31 11:27:22 2001
From: ivo at amaze.nl (Ivo van der Wijk)
Date: Mon, 31 Dec 2001 19:27:22 +0100
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <1009811332.571.5.camel@zelda>; from Glyph Lefkowitz on Mon, Dec 31, 2001 at 09:08:52AM -0600
References: <20011231004431.H6904@amaze.nl> <1009811332.571.5.camel@zelda>
Message-ID: <20011231192722.J6904@amaze.nl>

On Mon, Dec 31, 2001 at 09:08:52AM -0600, Glyph Lefkowitz wrote:
> On Sun, 2001-12-30 at 17:44, Ivo van der Wijk wrote:
> > Hi All,
> > 
> > I'm currently migrating my irc client to twisted, and things look
> > promising.
> > 
> > However, I can't figure out the following things:
> > 
> > My protocol is derived from protocols.basic.LineReceiver
> > (which in turn derives from protocol.Protocol.protocol).
> > 
> > How can I determine what specific error condition caused connectionLost()
> > or connectionFailed()? I.e. connection refused, unknown hostname,
> > no route to host, etc (the standard errno stuff). 
> 
> Currently you can't.  This is the first request I'm aware of to be made
> aware of the actual errno that caused the connection to fail; the
> distinction between connectionFailed and connectionLost seemed to be the
> big one.
> 
> The place you'd have to fix would be
> twisted.internet.tcp.Connection.(doRead|writeSomeData).  Similarly in
> twisted.internet.udp.  Patches accepted :-).
> 

Okay. How about an error parameter to connectionLost|Failed
that would contain the actual error? Unfortunately, this would break
existing code, so you would end up with names like connectionFailedWithError.
Alternatively, the protocol can query the transport for the (last) error code.
Is the python error mechanism platform independent enough, or should there be 
an abstraction of the errno/errstr mechanism?

> > Also, how can I determine if Linereceived.sendLine() (or 
> > Protocol.Transport.write()) failed? It doesn't seem to return an
> > error value or raise Exceptions, and depending on the invocation
> > of connectionLost makes things perhaps too asynchronous..
> 
> If you need this level of guarantee, you need a protocol which will send
> acks for messages as they've been received.  There is no such thing as
> "too asynchronous" -- there is "synchronous", "asynchronous", and
> "sometimes stuck doing something with one client while the rest of the
> server hangs..." :-).
> 

Well, you could return an error if the connection is obviously closed
already (and perhaps return the error received when the connection was
close asynchronously) - i.e. when it's clear that the async. write will
fail. The rest can be handled right away.

Also, I don't know if twisted will always attempt to send/flush data right
away and catch EWOULDBLOCK, or if flushing will only be triggered by
select() on write fd's. In the former case, if writing won't block (which
may be quite often the case?), you catch errors immediately as well..

> This is the same question as previously, really; if a write "fails",
> then the connection has been lost.  Knowing that a connection failed
> during a write and getting an errno would give you all the same
> information.
> 
> Keep in mind that a write "succeeding" might just mean that the memory
> was succesfully copied into a buffer for your OS kernel to send; the
> other side of the connection may never have received it.

I basically meant succeeding as with socket.recv/send().

Cheers,

	Ivo

-- 
Drs. I.R. van der Wijk                              -=-
Brouwersgracht 132                      Amaze Internet Services V.O.F.
1013 HA Amsterdam, NL                               -=-
Tel: +31-20-4688336                       Linux/Web/Zope/SQL/MMBase
Fax: +31-20-4688337                           Network Solutions
Web:     http://www.amaze.nl/                    Consultancy
Email:   ivo at amaze.nl                               -=-



From glyph at twistedmatrix.com  Mon Dec 31 18:14:38 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: 31 Dec 2001 19:14:38 -0600
Subject: [Twisted-Python] newbie question: error handling
In-Reply-To: <20011231192722.J6904@amaze.nl>
References: <20011231004431.H6904@amaze.nl> <1009811332.571.5.camel@zelda> 
	<20011231192722.J6904@amaze.nl>
Message-ID: <1009847678.7931.9.camel@zelda>

On Mon, 2001-12-31 at 12:27, Ivo van der Wijk wrote:
> > > How can I determine what specific error condition caused connectionLost()
> > > or connectionFailed()? I.e. connection refused, unknown hostname,
> > > no route to host, etc (the standard errno stuff). 
> > 
> > Currently you can't. [snip]
> 
> Okay. How about an error parameter to connectionLost|Failed
> that would contain the actual error? [snip]

This was the way Twisted originally worked; we wrote a TON of code and
this parameter was never used :-).  Feel free to add it, though; your
connectionFailedWithError approach sounded like a good one.

> > > Also, how can I determine if Linereceived.sendLine() (or 
> > > Protocol.Transport.write()) failed? It doesn't seem to return an
> > > error value or raise Exceptions, and depending on the invocation
> > > of connectionLost makes things perhaps too asynchronous..
> > 
> > If you need this level of guarantee, you need a protocol which will send
> > acks for messages as they've been received.  There is no such thing as
> > "too asynchronous" -- there is "synchronous", "asynchronous", and
> > "sometimes stuck doing something with one client while the rest of the
> > server hangs..." :-).
> 
> Well, you could return an error if the connection is obviously closed
> already (and perhaps return the error received when the connection was
> close asynchronously) - i.e. when it's clear that the async. write will
> fail. The rest can be handled right away. [snip]

I *could*, but why would I?  This means that your errors have to be
handled in two places instead of one, and it will only *sometimes*
actually be handled by one of those two places, depending on the OS
buffer sizes and the direction of prevailing winds.

There are lots of places where a connection can be dropped, and there
are lots of reasons for it.  Unifying them into a single "connection has
been lost" failure path is in general a good thing; I could understand
wanting more information about that failure (your previous request) but
wanting the failure case to be exposed to your code through numerous
paths -- all of which must be handled and the distinction between which
is VERY difficult to test -- seems like a naive regression to a
lower-level API.

> > Keep in mind that a write "succeeding" might just mean that the memory
> > was succesfully copied into a buffer for your OS kernel to send; the
> > other side of the connection may never have received it.
> 
> I basically meant succeeding as with socket.recv/send().

Why is this useful information to have at the application layer?

-- 
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




