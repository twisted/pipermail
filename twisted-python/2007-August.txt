From the_fade_away at yahoo.de  Thu Aug  2 08:00:07 2007
From: the_fade_away at yahoo.de (The Fade Away)
Date: Thu, 02 Aug 2007 14:00:07 +0200
Subject: [Twisted-Python] delay when sending data over SSH
Message-ID: <46B1C747.4000204@yahoo.de>

Hi Everybody,

When I use

channel.SSHChannel.self.conn.sendRequest

from my client application it takes between 10-20 seconds until the 
server (which runs on the same machine) gets it!

Does anybody has an idea, what's the problem?

When I open a new channel, channel.SSHChannel.channelOpen responds 
directly. I do the sendRequest after I opened the channel.

Thanks alot
Tobias



From garyjefferson123 at gmail.com  Fri Aug  3 04:04:41 2007
From: garyjefferson123 at gmail.com (gary jefferson)
Date: Fri, 3 Aug 2007 02:04:41 -0600
Subject: [Twisted-Python] lambdas and DeferredList
Message-ID: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>

I don't quite understand the behavior of lambdas in the following code:

from twisted.internet import reactor, defer

def someDeferred(val):
    d = defer.Deferred()
    reactor.callLater(1, d.callback, val)
    return d

def done(result):
    print "all done"
    reactor.stop()

def twothing(i):
    print "twothing: %s" % i
    return i

def onething(result, i, callableThing):
    print "onething: %s, result %s" % (i, result)
    callableThing()

def dlistspawn():
    dlist = []
    values = [(1, 'one'), (2, 'two'), (3, 'three')]
    for i, v in values:
        deferred = someDeferred(i)
        deferred.addCallback(onething, i, lambda: twothing(v))
        dlist.append(deferred)
    dl = defer.DeferredList(dlist)
    dl.addCallback(done)
    return dl

if __name__ == "__main__":
    dlistspawn()
    reactor.run()


Which produces:
onething: 1, result 1
twothing: three
onething: 2, result 2
twothing: three
onething: 3, result 3
twothing: three
all done


Why does the call to twothing() (via a lambda and callableThing)
always bind to 'three'?  How do I change the code to get it to bind
successively to 'one', 'two', and 'three'?

Thanks,
Gary



From thostrup at gmail.com  Fri Aug  3 04:38:54 2007
From: thostrup at gmail.com (Henrik Thostrup Jensen)
Date: Fri, 3 Aug 2007 10:38:54 +0200
Subject: [Twisted-Python] lambdas and DeferredList
In-Reply-To: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
References: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
Message-ID: <f33a4da20708030138s1f0ec82cha6ad79d4fe3b5edb@mail.gmail.com>

On 8/3/07, gary jefferson <garyjefferson123 at gmail.com> wrote:
>
> I don't quite understand the behavior of lambdas in the following code:

[snip]

>
> def dlistspawn():
>     dlist = []
>     values = [(1, 'one'), (2, 'two'), (3, 'three')]
>     for i, v in values:
>         deferred = someDeferred(i)
>         deferred.addCallback(onething, i, lambda: twothing(v))
>         dlist.append(deferred)
>     dl = defer.DeferredList(dlist)
>     dl.addCallback(done)
>     return dl
>
> if __name__ == "__main__":
>     dlistspawn()
>     reactor.run()
>
>
> Which produces:
> onething: 1, result 1
> twothing: three
> onething: 2, result 2
> twothing: three
> onething: 3, result 3
> twothing: three
> all done
>
>
> Why does the call to twothing() (via a lambda and callableThing)
> always bind to 'three'?  How do I change the code to get it to bind
> successively to 'one', 'two', and 'three'?


The variable v gets bound when the lambda is invoked, not when constructed.


-- 
   - Henrik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070803/2090d2fa/attachment.htm 

From andrew-twisted at puzzling.org  Fri Aug  3 05:06:25 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 3 Aug 2007 19:06:25 +1000
Subject: [Twisted-Python] lambdas and DeferredList
In-Reply-To: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
References: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
Message-ID: <20070803090625.GZ25389@steerpike.home.puzzling.org>

gary jefferson wrote:
> I don't quite understand the behavior of lambdas in the following code:
> 
[...]
>     values = [(1, 'one'), (2, 'two'), (3, 'three')]
>     for i, v in values:
>         deferred = someDeferred(i)
>         deferred.addCallback(onething, i, lambda: twothing(v))
>         dlist.append(deferred)
>     dl = defer.DeferredList(dlist)
>     dl.addCallback(done)
[...]
> 
> Which produces:
> onething: 1, result 1
> twothing: three
> onething: 2, result 2
> twothing: three
> onething: 3, result 3
> twothing: three
> all done
> 
> 
> Why does the call to twothing() (via a lambda and callableThing)
> always bind to 'three'?  How do I change the code to get it to bind
> successively to 'one', 'two', and 'three'?

You don't need Twisted to see this:

    >>> values = ['one', 'two', 'three']
    >>> functions = []
    >>> for value in values:
    ...     functions.append(lambda: value)
    ... 
    >>> for func in functions: print func()
    ... 
    three
    three
    three

The simplest fix is use "lambda foo=foo: ...", to bind the value of the variable
as it was at the time the lambda statement is executed to a local variable in
that function.  i.e.:

    >>> values = ['one', 'two', 'three']
    >>> functions = []
    >>> for value in values:
    ...     functions.append(lambda v=value: v)
    ... 
    >>> for func in functions: print func()
    ... 
    one
    two
    three

Refer to the Python documentation about scoping for more details.

-Andrew.




From exarkun at twistedmatrix.com  Sun Aug  5 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 05 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1186286703.7.1550471318@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-29 through 2007-08-05
Bugs opened: 20    Bugs closed: 8  Total open bugs: 1009 (+12)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +6  |Highest:  +4          |Core:  +11             
|Enhancement:  +9  |High:     +1          |Lore:   +0             
|Task:         +0  |Normal:   +5          |Trial:  +1             
                   |Low:      +4          |Words:  +3             
                   |Lowest:   +1                                  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2770] Allow JIDs to be used as key in dicts (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2770

[#2771] exceptionFromStreamError fails to parse errors correctly (opened by ralphm)
    defect          words      http://twistedmatrix.com/trac/ticket/2771

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2773] t.w.p.j.xmlstream.toResponse fails on stanzas without id attribute (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2773

[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#2768] pre tags not mangled (opened by tehminkeh) (CLOSED, invalid)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2768

[#2769] Update plugins howto to cover new API for <package>/plugins/__init__.py added in #2339 (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2769

                    ===== Normal =====
[#2759] change z3p at twistedmatrix.com to paulswartz at gmail dot com (opened by z3p)
    defect          core       http://twistedmatrix.com/trac/ticket/2759

[#2760] inexplicable dependency of twisted.python.zippath on twisted.python.zipstream (opened by exarkun) (CLOSED, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2760

[#2762] String exceptions will be removed in python 2.6 (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2762

[#2763] md5 and sha module will be deprecated in python 2.6 (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2763

[#2765] trial --spew doesn't work in Python 2.5 (opened by radix)
    defect          trial      http://twistedmatrix.com/trac/ticket/2765

[#2774] It should be possible to receive notification of process ending (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2774

                    ===== Low =====
[#2761] the set builtin should be used instead of the Sets module when available (opened by therve)
    task            core       http://twistedmatrix.com/trac/ticket/2761

[#2764] Replace deprecation warning in _ThreePhaseEvent.removeTrigger_BEFORE with an exception (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2764

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2766

[#2767] test_ident uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2767

                    ===== Lowest =====
[#2758] reactor installation functions should have a way to indicate human-level reactor installation errors. (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2758



Closed Bugs
______________________
                    ===== Highest =====
[#2741] twisted/words/test/test_domish.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/2741

[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun, closed by therve, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

[#2509] removing event triggers while in an event trigger callback does bad things (opened by jack, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2509

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix, closed by itamarst, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix, closed by itamarst, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun, closed by therve, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#2768] pre tags not mangled (opened by tehminkeh, closed by glyph, invalid)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2768

                    ===== Normal =====
[#2760] inexplicable dependency of twisted.python.zippath on twisted.python.zipstream (opened by exarkun, closed by exarkun, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2760



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2774] It should be possible to receive notification of process ending (since 2007-08-03 15:57:09).

Mean open ticket age: 495 days, 12:26:29.373509.
Median: 386 days, 18:26:28.529109.
Standard deviation: 394 days, 15:20:53.635105.
Interquartile range: 481 days, 9:27:27.

Mean time between ticket creation and ticket resolution: 119 days, 12:09:57.467013.
Median: 14 days, 3:38:33.
Standard deviation is 223 days, 1:25:31.691220.
The interquartile range is 125 days, 12:18:50.

Mean time spent in review: 60 days, 6:20:31.517370.
Median: 4 days, 0:03:10.
Standard deviation: 130 days, 20:43:06.195085.
Interquartile range: 25 days, 23:18:28.

Mean number of times a ticket is reviewed: 1.83790523691.
Median: 1
Standard deviation: 1.39688274293.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    20 unique ticket reporters
    10 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    90 unique ticket reporters
    14 unique ticket reviewers
    18 unique ticket resolvers
In the last 48 weeks,
    160 unique ticket reporters
    20 unique ticket reviewers
    27 unique ticket resolvers




From luciano at ramalho.org  Sun Aug  5 15:39:00 2007
From: luciano at ramalho.org (Luciano Ramalho)
Date: Sun, 5 Aug 2007 16:39:00 -0300
Subject: [Twisted-Python] Design pattern for multi-stage web searches
Message-ID: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>

Hello,

I am a Google Summer of Code student working with the Zope 3/Grok
community this year.

I wonder if there is an established design pattern or examples that
use Twisted to fetch data via HTTP when the process can take a
variable number of requests to be completed.

For instance, if you search for book records online, some sites allow
you to do an ISBN search which gives back the full book details, while
others will present an intermediate results page from which links to
the book details page can be obtained (many sites use a internal id
for their products, including books). Still others can return an
intermediate page containing a link to a different edition (!= ISBN),
when the given ISBN refers to an out-of-print edition.

So for each different metadata source I'd like to provide a chain of
callbacks to be processed. Anyone knows of references that may help
me? I browsed the GoF patterns but none of them fits this use case.

BTW, the resulting code will be open source under the ZPL and hosted
at http://svn.zope.org.

Thanks for a great piece of software!

Regards,

Luciano

PS. I've already implemented, using Twisted, a prototype of the
collector for Amazon.com and it's affiliates in Europe and Japan. But
I am Brazilian and I know their catalog is not very complete outside
of the markets where they operate. To be really international, a book
metadata collector must be pluggable to allow localized searches
depending on the ISBN prefix.



From andrew at ellerton.net  Sun Aug  5 16:08:01 2007
From: andrew at ellerton.net (Andrew E)
Date: Sun, 05 Aug 2007 16:08:01 -0400
Subject: [Twisted-Python] Where to start: log reader/analysis
Message-ID: <46B62E21.9040000@ellerton.net>

Dear Twisted Experts (... meant in a nice way :) )

I'm not sure where to start.

I need to write a small server that:

 - reads lines in a log file as they are appended
 - reads input from a socket as it becomes available
 - does an analysis of both (like, what time was input received in the
log, and the output received via the socket)
 - outputs a summary report

Socket I/O is easy - but I'm not sure how to include file reading ...
its bound to be easy.

Any tips?

Thanks :)

Andrew



From yoann.aubineau at wengo.com  Mon Aug  6 04:57:19 2007
From: yoann.aubineau at wengo.com (Yoann Aubineau)
Date: Mon, 6 Aug 2007 10:57:19 +0200
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <46B62E21.9040000@ellerton.net>
References: <46B62E21.9040000@ellerton.net>
Message-ID: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>

Hi Andrew,

I wrote a class that follows a file (eg. log file) and provides an iterator
to walk through it. Don't know if it may be of any use for you (or others).

class FileFollower(object):
    """Iterate through a file while it is updated.

    >>> file = FileFollower("/tmp/testfile")
    >>> file.interval = 5
    >>> for line in file:
    ...     print line
    """

    interval = 1

    def __init__(self, filename, interval=None):
        self.filename = filename
        self.interval = interval or self.interval
        self.stat = None
        self.offset = 0
        self.lines = []
        self.running = True

    #
    # File following

    def follow(self):
        while self.running:
            if self.hasChanged():
                data = self.readChange()
                if data:
                    self.dataReceived(data)
                    break
            time.sleep(self.interval)

    def hasChanged(self):
        stat = os.stat(self.filename)
        if stat != self.stat:
            self.stat = stat
            return True
        return False

    def readChange(self):
        file = open(self.filename)
        file.seek(self.offset)
        data = file.read()
        self.offset = file.tell()
        file.close()
        return data

    #
    # Data buffering

    def dataReceived(self, data):
        lines = data.split(os.linesep)
        lines = lines[:-1]
        for line in lines:
            self.lineReceived(line)

    def lineReceived(self, line):
        self.lines.append(line)

    #
    # Iterator implementation

    def __iter__(self):
        return self

    def next(self):
        if not self.lines:
            self.follow()
        line = self.lines.pop(0)
        return line


2007/8/5, Andrew E <andrew at ellerton.net>:
>
> Dear Twisted Experts (... meant in a nice way :) )
>
> I'm not sure where to start.
>
> I need to write a small server that:
>
> - reads lines in a log file as they are appended
> - reads input from a socket as it becomes available
> - does an analysis of both (like, what time was input received in the
> log, and the output received via the socket)
> - outputs a summary report
>
> Socket I/O is easy - but I'm not sure how to include file reading ...
> its bound to be easy.
>
> Any tips?
>
> Thanks :)
>
> Andrew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070806/05616755/attachment.htm 

From D.Kirby at tideway.com  Mon Aug  6 07:11:29 2007
From: D.Kirby at tideway.com (Dave Kirby)
Date: Mon, 6 Aug 2007 12:11:29 +0100
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
Message-ID: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>

Firstly a belated thanks to everyone who replied to my previous question
- I had to put my project on hold for a while, but now I am back with
more questions.

 

My objective is to use twisted to do automated logging in to multiple
ssh servers to carry out various tasks.  Currently this is done by
spawning a separate ssh executable for each session and controlling it
through pexpect, and I would like to replace this with a twisted/conch
system.

 

So far I can create conch "exec" sessions to run a single command/script
and return the result, but I would like to be able to create shell
sessions and do more interactive work.  Does anyone have any examples of
doing this?

 

The biggest issue I have at the moment is how to do Test Driven
Development with conch.  I would like to be able to mock out the server
that the ssh client talks to, so that I can keep the unit tests
self-contained and keep tight control of both sides of the interaction,
e.g. for testing failure scenarios.  I can think of three ways of doing
this:

 

1) write a separate ssh server with conch that provides the desired
behaviour, and have that spawned as a separate process by the unit
tests.

 

2) as above, but run the ssh server in the same process as the tests, so
they are both firing from the same reactor event loop.  IMHO this is
better than (1) since it is more self-contained.

 

3) stub out the low-level classes of the client so that they are not
really talking to a server at all, but simulating the correct behaviour.

 

The problem with both 1 and 2 is that they require writing test code
that is as complex as the code I am testing.  The problem with 3 is that
it assumes that I know what the correct low-level behaviour is so that I
can mock it out.  At the moment I do not grok twisted in sufficient
detail to do that.

 

How have other people tackled this?  Are there any other options that I
am missing, or code I can reuse, or other suggestions or advice?

 

TIA

--
Dave Kirby
Senior Software Engineer
T: +44 20 7368 7330 | F: +44 20 7352 4922
E: d.kirby at tideway.com | W: www.tideway.com

 

This email and any attachment may contain confidential, privileged information for the sole use of the intended recipient. If you are not the intended recipient, do not disclose, reproduce, disseminate or otherwise use this communication. If you received this communication in error, please immediately notify the sender via email and delete the communication from your system. Company information : Tideway Systems Ltd, Registered Office: Anchor House, 15-19 Britten Street, London, SW3 3TY. Registered in England & Wales Reg. Reg. No: 4598072  VAT No: 805 5153 50 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070806/921045cc/attachment.htm 

From exarkun at divmod.com  Mon Aug  6 07:44:31 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 07:44:31 -0400
Subject: [Twisted-Python] Design pattern for multi-stage web searches
In-Reply-To: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>
Message-ID: <20070806114431.4947.640802435.divmod.quotient.19450@ohm>

On Sun, 5 Aug 2007 16:39:00 -0300, Luciano Ramalho <luciano at ramalho.org> wrote:
>Hello,
>
>I am a Google Summer of Code student working with the Zope 3/Grok
>community this year.
>
>I wonder if there is an established design pattern or examples that
>use Twisted to fetch data via HTTP when the process can take a
>variable number of requests to be completed.

This is usually done by "chaining" Deferreds together.  When a callback
or errback function on Deferred A returns Deferred B, B is chained to a:

    B.chainDeferred(A)

or

    B.addCallbacks(A.callback, A.errback)

So if you fetch a page and it turns out not to be the one you ultimately
want, a callback on that Deferred can initiate another fetch and return
the Deferred for that operation.  This is transparent to the caller of
the original function: their callbacks are only called once all of the
earlier callbacks have returned a None-Deferred value and all returned
Deferreds have fired.

I doubt I've explained this particularly well, so you might want to take
a look at http://twistedmatrix.com/projects/core/documentation/howto/defer.html to
really get an understanding.

Jean-Paul



From exarkun at divmod.com  Mon Aug  6 07:49:53 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 07:49:53 -0400
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>
Message-ID: <20070806114953.4947.487566896.divmod.quotient.19454@ohm>

On Mon, 6 Aug 2007 10:57:19 +0200, Yoann Aubineau <yoann.aubineau at wengo.com> wrote:
>Hi Andrew,
>
>I wrote a class that follows a file (eg. log file) and provides an iterator
>to walk through it. Don't know if it may be of any use for you (or others).

Hi Yoann, thanks for sharing.

>
>class FileFollower(object):
>    """Iterate through a file while it is updated.
>
>    >>> file = FileFollower("/tmp/testfile")
>    >>> file.interval = 5
>    >>> for line in file:
>    ...     print line
>    """
>
>    interval = 1
>
>    def __init__(self, filename, interval=None):
>        self.filename = filename
>        self.interval = interval or self.interval
>        self.stat = None
>        self.offset = 0
>        self.lines = []
>        self.running = True
>
>    #
>    # File following
>
>    def follow(self):
>        while self.running:
>            if self.hasChanged():
>                data = self.readChange()
>                if data:
>                    self.dataReceived(data)
>                    break
>            time.sleep(self.interval)
>
>    def hasChanged(self):
>        stat = os.stat(self.filename)
>        if stat != self.stat:
>            self.stat = stat
>            return True
>        return False
>
>    def readChange(self):
>        file = open(self.filename)
>        file.seek(self.offset)
>        data = file.read()
>        self.offset = file.tell()
>        file.close()
>        return data
>
>    #
>    # Data buffering
>
>    def dataReceived(self, data):
>        lines = data.split(os.linesep)
>        lines = lines[:-1]
>        for line in lines:
>            self.lineReceived(line)
>
>    def lineReceived(self, line):
>        self.lines.append(line)
>
>    #
>    # Iterator implementation
>
>    def __iter__(self):
>        return self
>
>    def next(self):
>        if not self.lines:
>            self.follow()
>        line = self.lines.pop(0)
>        return line
>

In order to make this class more usable within a Twisted application, I'd
make a few suggestions:

Separate the transport from the protocol.  All of the methods in the area
commented "file following" are basically transport methods: they know how
to get the underlying bytes (by polling and eventually reading).  The
protocol implementation is basically the dataReceived and lineReceived
methods.  With separation between the transport and the protocol, you
don't even need to implement these, since you can just use LineReceiver
from twisted.protocols.basic.

Do the polling in a cooperative way.  Using an infinite for loop and a
time.sleep call has the consequence of tying up an entire thread.  This
means nothing else can happen unless you run the follow method of this
class in a new, dedicated thread.  If you use the reactor to schedule
the checks instead, then this can be used alongside other Twisted code
without having to deal with threading.  twisted.internet.task.LoopingCall
might be of particular interest.

Jean-Paul



From exarkun at divmod.com  Mon Aug  6 08:03:34 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 08:03:34 -0400
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
In-Reply-To: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
Message-ID: <20070806120334.4947.1638958206.divmod.quotient.19459@ohm>

On Mon, 6 Aug 2007 12:11:29 +0100, Dave Kirby <d.kirby at tideway.com> wrote:
>Firstly a belated thanks to everyone who replied to my previous question
>- I had to put my project on hold for a while, but now I am back with
>more questions.
>
>My objective is to use twisted to do automated logging in to multiple
>ssh servers to carry out various tasks.  Currently this is done by
>spawning a separate ssh executable for each session and controlling it
>through pexpect, and I would like to replace this with a twisted/conch
>system.
>
>So far I can create conch "exec" sessions to run a single command/script
>and return the result, but I would like to be able to create shell
>sessions and do more interactive work.  Does anyone have any examples of
>doing this?
>
>The biggest issue I have at the moment is how to do Test Driven
>Development with conch.  I would like to be able to mock out the server
>that the ssh client talks to, so that I can keep the unit tests
>self-contained and keep tight control of both sides of the interaction,
>e.g. for testing failure scenarios.  I can think of three ways of doing
>this:
>
>1) write a separate ssh server with conch that provides the desired
>behaviour, and have that spawned as a separate process by the unit
>tests.
>
>2) as above, but run the ssh server in the same process as the tests, so
>they are both firing from the same reactor event loop.  IMHO this is
>better than (1) since it is more self-contained.
>
>3) stub out the low-level classes of the client so that they are not
>really talking to a server at all, but simulating the correct behaviour.
>
>The problem with both 1 and 2 is that they require writing test code
>that is as complex as the code I am testing.  The problem with 3 is that
>it assumes that I know what the correct low-level behaviour is so that I
>can mock it out.  At the moment I do not grok twisted in sufficient
>detail to do that.

I suspect a lot of the code that you write will be for handling the output
from and generating input to send to processes run via ssh.  You should be
able to use #3 to test this kind of code, since the API for interacting
with conch from a protocol implementation is quite confined and well-defined.

I don't have much to suggest for avoiding #2 (but you probably don't want #1
in any case), but if you at least isolate the majority of your application
logic from most of conch, then you can test it without having any kind of
SSH server or mock around.  The code that's left over that does have to
interact with conch can be tested by itself, perhaps by setting up real
SSH connections, which may not be ideal, but you should at least be able to
do it, get it over with, and not worry about it anymore afterwards.  Most
of the rest of the code you write will be testable in isolation.

Hope this helps,

Jean-Paul



From luciano at ramalho.org  Mon Aug  6 08:16:59 2007
From: luciano at ramalho.org (Luciano Ramalho)
Date: Mon, 6 Aug 2007 09:16:59 -0300
Subject: [Twisted-Python] Design pattern for multi-stage web searches
In-Reply-To: <20070806114431.4947.640802435.divmod.quotient.19450@ohm>
References: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>
	<20070806114431.4947.640802435.divmod.quotient.19450@ohm>
Message-ID: <4331ad810708060516r6381dbd6pc262dad5ba35989@mail.gmail.com>

Thank you very much for the reply, Jean-Paul. I'll study it and
probably make changes to my code. It seems the chaining mechanism you
explain can improve the generality of my code and at the same time
simplify the implementation.

If anyone starting with Twisted wants to see an example of using
several deferreds, the code I wrote is here:

http://svn.zope.org/Sandbox/luciano/kirbi/kirbifetch/src/kirbifetch/

The file which uses the deferreds is fetch.py.

Not that the code above is a work-in-progress, tests are not automated
yet, and the style of chaining Jean-Paul suggested is not yet
implemented: currenlty each callback explicitly initiates another
deferred, without chaining.

Anyway, I hope my code is useful as an example.

Regards,

Luciano



On 8/6/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Sun, 5 Aug 2007 16:39:00 -0300, Luciano Ramalho <luciano at ramalho.org> wrote:
> >Hello,
> >
> >I am a Google Summer of Code student working with the Zope 3/Grok
> >community this year.
> >
> >I wonder if there is an established design pattern or examples that
> >use Twisted to fetch data via HTTP when the process can take a
> >variable number of requests to be completed.
>
> This is usually done by "chaining" Deferreds together.  When a callback
> or errback function on Deferred A returns Deferred B, B is chained to a:
>
>     B.chainDeferred(A)
>
> or
>
>     B.addCallbacks(A.callback, A.errback)
>
> So if you fetch a page and it turns out not to be the one you ultimately
> want, a callback on that Deferred can initiate another fetch and return
> the Deferred for that operation.  This is transparent to the caller of
> the original function: their callbacks are only called once all of the
> earlier callbacks have returned a None-Deferred value and all returned
> Deferreds have fired.
>
> I doubt I've explained this particularly well, so you might want to take
> a look at http://twistedmatrix.com/projects/core/documentation/howto/defer.html to
> really get an understanding.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From miles.chris at gmail.com  Mon Aug  6 08:17:44 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 6 Aug 2007 13:17:44 +0100
Subject: [Twisted-Python] Running twisted.trial unittests using nose
Message-ID: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>

I'm testing one of my modules that returns a Twisted deferred, using  
twisted.trial.unittest.TestCase.  The test case methods return a  
deferred, after first adding a callback to a function that actually  
performs the assertion.  All fairly standard for Twisted unit testing.

If I use "trial" to kick off the tests they all pass fine (or fail as  
expected, if I force them to).

If I run the same tests using "nosetests" they also pass (or fail  
correctly - which confirms the callbacks are being called properly).

I'm simply curious as to whether it is safe for me to rely on a test  
runner other than "trial" to run the tests?  I assume any magic  
(knowledge of deferreds) is within the  
twisted.trial.unittest.TestCase class and the "trial" command is  
simply another tool to discover and pretty print the results.  From  
what I've seen, both "nosetests" and "trial" will produce the same  
report (although "trial" looks nicer :-).  Or perhaps this wouldn't  
be the case if I needed to interact with the reactor?

Cheers,
Chris Miles




From yoann.aubineau at wengo.com  Mon Aug  6 08:32:17 2007
From: yoann.aubineau at wengo.com (Yoann Aubineau)
Date: Mon, 6 Aug 2007 14:32:17 +0200
Subject: FileFollower Was: [Twisted-Python] Where to start: log reader/analysis
Message-ID: <8b93c05a0708060532p10882f35u8f97c23f184d2595@mail.gmail.com>

2007/8/6, Jean-Paul Calderone <exarkun at divmod.com>:
> In order to make this class more usable within a Twisted application, I'd
> make a few suggestions:

Oh, thanks for this reply JP. I always love to get insightful
feedbacks from "masters" :)

This class was initially not intended to run in a twisted-aware
environment, hence the use of time.sleep and no basic.LineReceiver.

If you think it may be of any use amongs others Twisted protocols, I'm
definitly willing to work on it : apply the changes you suggested, add
unit tests, docs etc.

Let me know.
Yoann



From glyph at divmod.com  Mon Aug  6 09:20:45 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 06 Aug 2007 13:20:45 -0000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
Message-ID: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>

On 12:17 pm, miles.chris at gmail.com wrote:
>I'm simply curious as to whether it is safe for me to rely on a test 
>runner other than "trial" to run the tests?  I assume any magic 
>(knowledge of deferreds) is within the  twisted.trial.unittest.TestCase 
>class and the "trial" command is  simply another tool to discover and 
>pretty print the results.  From  what I've seen, both "nosetests" and 
>"trial" will produce the same  report (although "trial" looks nicer 
>:-).  Or perhaps this wouldn't  be the case if I needed to interact 
>with the reactor?

There is an implicit, undocumented goal that tests written for trial 
should remain usable with other test runners.  Recently, I filed a 
ticket because not even *I* know which test runners or how this is 
supposed to work.  You can follow the discussion / resolution here:

    http://twistedmatrix.com/trac/ticket/2739

Personally I'd never use nose because, as you say, trial looks nicer :), 
so I can only guess what's going wrong.

The potential problem (currently) with using Twisted's TestCase class 
together with other runners is that the tests do something that no other 
Twisted application does, and which is not _really_ supported by the 
framework: re-start the reactor repeatedly.

Eventually, 'trial' itself will not do this, and will behave as a 
"normal" Twisted application.  'trial' will, as stated by the ticket I 
just linked to, still support other test runners by having a 'run' 
method that starts and shuts down the reactor, but it won't be used 
internally.  The main reason to do this is that there are various tools 
which would be nice to use Twisted functionality in-process with the 
tests for reporting results.  Doing that will probably remain a trial- 
exclusive feature, because other test runners will necessarily need to 
completely shut down the reactor at the end of each test.



From miles.chris at gmail.com  Mon Aug  6 10:10:53 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 6 Aug 2007 15:10:53 +0100
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
Message-ID: <33FA8DD7-64B2-4533-9459-9D0214E154C6@gmail.com>


On 6 Aug 2007, at 14:20, glyph at divmod.com wrote:

> On 12:17 pm, miles.chris at gmail.com wrote:
>> I'm simply curious as to whether it is safe for me to rely on a  
>> test runner other than "trial" to run the tests?  I assume any  
>> magic (knowledge of deferreds) is within the   
>> twisted.trial.unittest.TestCase class and the "trial" command is   
>> simply another tool to discover and pretty print the results.   
>> From  what I've seen, both "nosetests" and "trial" will produce  
>> the same  report (although "trial" looks nicer :-).  Or perhaps  
>> this wouldn't  be the case if I needed to interact with the reactor?
>
> There is an implicit, undocumented goal that tests written for  
> trial should remain usable with other test runners.  Recently, I  
> filed a ticket because not even *I* know which test runners or how  
> this is supposed to work.  You can follow the discussion /  
> resolution here:
>
>    http://twistedmatrix.com/trac/ticket/2739
>
> Personally I'd never use nose because, as you say, trial looks  
> nicer :), so I can only guess what's going wrong.
>
> The potential problem (currently) with using Twisted's TestCase  
> class together with other runners is that the tests do something  
> that no other Twisted application does, and which is not _really_  
> supported by the framework: re-start the reactor repeatedly.

Thanks glyph, this was the answer I was expecting.  Not an issue for  
me, it is just nice to know what is "supposed" to work and what isn't  
guaranteed to.

I have documented my project as requiring "trial" (the command) to  
run the tests, with a note that even though the tests pass when using  
"nosetests" (or another test runner) that may not be always reliable.

Cheers,
Chris Miles




From andrew-twisted at puzzling.org  Mon Aug  6 10:17:18 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 Aug 2007 00:17:18 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
Message-ID: <20070806141718.GL22324@steerpike.home.puzzling.org>

glyph at divmod.com wrote:
[...]
> Twisted application does, and which is not _really_ supported by the 
> framework: re-start the reactor repeatedly.
> 
> Eventually, 'trial' itself will not do this, and will behave as a 
> "normal" Twisted application.  'trial' will, as stated by the ticket I 
> just linked to, still support other test runners by having a 'run' 
> method that starts and shuts down the reactor, but it won't be used 
> internally.  The main reason to do this is that there are various tools 
> which would be nice to use Twisted functionality in-process with the 
> tests for reporting results.  Doing that will probably remain a trial- 
> exclusive feature, because other test runners will necessarily need to 
> completely shut down the reactor at the end of each test.

I've expressed this opinion before, but FWIW:

I don't think this is the right approach.  The right approach is to fix Twisted
to support multiple simultaneous reactors, so that your Twisted test runner that
wants to do stuff with a reactor is isolated from the tests, and vice versa.
The tests should then use a fresh reactor for each test.  It's simple and robust.

The reactor can't be comprehensively unittested until multiple
reactors/restartable reactors are supported anyway, so it should be done.  This
would also make it possible to consider testing multiple different reactor
implementations in a single test run.

I see only a continuation of the problems that have been plaguing Trial for
*years* with your approach.

-Andrew.




From jml at mumak.net  Mon Aug  6 19:35:56 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 7 Aug 2007 09:35:56 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
Message-ID: <d06a5cd30708061635o58d48692v62a2145575c0bb26@mail.gmail.com>

On 8/6/07, Chris Miles <miles.chris at gmail.com> wrote:
> I'm simply curious as to whether it is safe for me to rely on a test
> runner other than "trial" to run the tests?  I assume any magic
> (knowledge of deferreds) is within the
> twisted.trial.unittest.TestCase class and the "trial" command is
> simply another tool to discover and pretty print the results.  From
> what I've seen, both "nosetests" and "trial" will produce the same
> report (although "trial" looks nicer :-).  Or perhaps this wouldn't
> be the case if I needed to interact with the reactor?
>

So, what Glyph says modulo what Andrew says is right and good and true.

One known issue is that tests that descend from
twisted.trial.unittest.TestCase assume that they are being run inside
a twisted.trial.runner.TrialSuite. This suite does post-run cleanup of
thread pools, IIRC.

jml



From daedalus at eigenmagic.com  Mon Aug  6 22:12:11 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 07 Aug 2007 12:12:11 +1000
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
In-Reply-To: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
References: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
Message-ID: <1186452731.7508.18.camel@localhost>

On Mon, 2007-08-06 at 12:11 +0100, Dave Kirby wrote:
> Firstly a belated thanks to everyone who replied to my previous
> question ? I had to put my project on hold for a while, but now I am
> back with more questions.
> 
>  
> 
> My objective is to use twisted to do automated logging in to multiple
> ssh servers to carry out various tasks.  Currently this is done by
> spawning a separate ssh executable for each session and controlling it
> through pexpect, and I would like to replace this with a twisted/conch
> system.

Hi Dave,

The framework I created to do something very similar to this is
available for free at http://modipy.seafelt.com. ModiPY is written using
twisted and currently does pretty much what you've described, spawning a
program in a sub-process to do work. This 'spawn and do work' component
could be replaced by a conch SSH client instead. In fact, this would be
desirable for some things.

> So far I can create conch ?exec? sessions to run a single
> command/script and return the result, but I would like to be able to
> create shell sessions and do more interactive work.  Does anyone have
> any examples of doing this?

I'm guessing you want examples of how to use conch to do interactive
work, so ModiPY probably isn't useful here, but you might be able to use
some of the ideas in the ConnectingProvisioner and ExpectProtocol. It
connects to a remote device and runs a series of commands, handling
their output.

-- 
Justin Warren <daedalus at eigenmagic.com>



From glyph at divmod.com  Mon Aug  6 23:15:20 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 07 Aug 2007 03:15:20 -0000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806141718.GL22324@steerpike.home.puzzling.org>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
Message-ID: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>

On 6 Aug, 02:17 pm, andrew-twisted at puzzling.org wrote:
>glyph at divmod.com wrote:
>[...]
>>Twisted application does, and which is not _really_ supported by the
>>framework: re-start the reactor repeatedly.
>>
>>Eventually, 'trial' itself will not do this, and will behave as a
>>"normal" Twisted application.

Let's start with a point of agreement:
>The reactor can't be comprehensively unittested until multiple
>reactors/restartable reactors are supported anyway, so it should be 
>done.  This
>would also make it possible to consider testing multiple different 
>reactor
>implementations in a single test run.

This is absolutely true.  The limiting factors on the code being used 
this way are simply (A) a lack of reasonable tests, and (B) some 
misguided micro-optimizations in the reactor which no longer help 
anyway.  There is nothing in anyone's preferred design for Trial, mine 
included, that would preclude such a thing.

Multiple reactors should, indeed must, eventually be supported.  It 
would be nice if someone who really wanted it would implement it though, 
instead of just talking about it ;).
>I don't think this is the right approach.  The right approach is to fix 
>Twisted
>to support multiple simultaneous reactors, so that your Twisted test 
>runner that
>wants to do stuff with a reactor is isolated from the tests, and vice 
>versa.
>The tests should then use a fresh reactor for each test.  It's simple 
>and robust.

Your suggested implementation reinforces the antipattern of "tests are 
special and need 'waitFor' or 'blockOn' because they can't be written 
otherwise".  Then, of course, newbies ask why the tests can have this 
but their protocol implementation (which really needs it, seriously, 
it's not like *any* other application using Twisted) can't.  Aside from 
the fact that it might actually work / be tested, it is the same (as far 
as I'm concerned) as much of the brokenness that Trial has dealt with 
for quite some time.

Much code within and without Twisted uses, and will continue for the 
forseeable future to use, "from twisted.internet import reactor" to 
access the reactor.  One might hope that this usage would eventually be 
replaced by something better, but it's not clear if this (or an 
equivalent spelling) could ever be *completely* eliminated.  I quite 
like Jim Fulton's suggestion for adding an ITransport.reactor attribute 
and using that in most places where the global import is currently used. 
However, even if we had a comprehensive somehow non-global way to get at 
a reactor available today, there would still be a *very* lengthy 
transition period to a new API.  The question will remain what to do 
about that code.

My main objection here, though, is that I'd really like to be able to 
add nifty Twisted-using features to Trial, and it's basically impossible 
right now, due in large part to the fact that the reactor keeps starting 
and stopping.  Creating a new reactor for each test is going to create 
confusing semantics for code written using established idioms, because 
either the framework is going to go to a lot of trouble to fool 
everything into using trial's idea of the reactor the tests should be 
using (which begs the question: how do you test trial itself, if it has 
a reference to the "real" reactor?), or it's going to require special 
hacks to get at the "real" reactor which still won't behave in an event- 
driven way if a test (shock, horror) actually does want to do some real 
I/O itself.  Although I am *personally* focusing on how to write better 
and more isolated unit tests using trial, I know of a small number of 
people using it as an integration testing tool that does tons of I/O to 
external systems and I think that is an interesting use-case and should 
be better supported, not worse.

Perhaps the 'trial' tool itself is a misguided design though, and 
'disttrial' will simply replace it in short order.  If this is the case, 
then the tests are running in a subprocess anyway, and there's no reason 
to run any code in-process with the tests, except for things to gather 
metrics.  In that case, the 'disttrial' tool itself is a real Twisted 
program, and the subprocess fakes just enough to get by:

http://twistedmatrix.com/trac/browser/branches/disttrial-1784/twisted/trial/dist/slavetrial.py#L60

That *particular* hack makes me cringe, but I think the overall 
architecture may satisfy us both better in the end.



From andrew-twisted at puzzling.org  Tue Aug  7 01:01:46 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 Aug 2007 15:01:46 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
	<20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
Message-ID: <20070807050146.GA2796@steerpike.home.puzzling.org>

I get the feeling you misunderstand what I'm saying we should do.

glyph at divmod.com wrote:
> On 6 Aug, 02:17 pm, andrew-twisted at puzzling.org wrote:
[...]
> >I don't think this is the right approach.  The right approach is to fix 
> >Twisted
> >to support multiple simultaneous reactors, so that your Twisted test 
> >runner that
> >wants to do stuff with a reactor is isolated from the tests, and vice 
> >versa.
> >The tests should then use a fresh reactor for each test.  It's simple 
> >and robust.
> 
> Your suggested implementation reinforces the antipattern of "tests are 
> special and need 'waitFor' or 'blockOn' because they can't be written 
> otherwise".  Then, of course, newbies ask why the tests can have this 

Not at all.  I never said that tests should be using techniques like
'waitFor'/'blockOn'.

I think the current API that test methods return Deferreds is just fine.  I am
not proposing that people writing tests should be starting and stopping reactors
(unless of course they are unit testing the starting and stopping of
reactors...).  I am proposing that TwistedTestCase.run should be doing this
internally.

> but their protocol implementation (which really needs it, seriously, 
> it's not like *any* other application using Twisted) can't.  Aside from 
> the fact that it might actually work / be tested, it is the same (as far 
> as I'm concerned) as much of the brokenness that Trial has dealt with 
> for quite some time.

I definitely am not suggesting that tests should be significantly different to
any other code.

(Incidentally, there are times when multiple reactors would be useful outside of
Trial.)

> Much code within and without Twisted uses, and will continue for the 
> forseeable future to use, "from twisted.internet import reactor" to 
> access the reactor.  One might hope that this usage would eventually be 
> replaced by something better, but it's not clear if this (or an 
> equivalent spelling) could ever be *completely* eliminated.  I quite 
> like Jim Fulton's suggestion for adding an ITransport.reactor attribute 
> and using that in most places where the global import is currently used. 
> However, even if we had a comprehensive somehow non-global way to get at 
> a reactor available today, there would still be a *very* lengthy 
> transition period to a new API.  The question will remain what to do 
> about that code.

Sure.  We will be living with the concept of a default global reactor for a long
time.

That doesn't mean it can't be made restartable.

> My main objection here, though, is that I'd really like to be able to 
> add nifty Twisted-using features to Trial, and it's basically impossible 
> right now, due in large part to the fact that the reactor keeps starting 
> and stopping.  Creating a new reactor for each test is going to create 
> confusing semantics for code written using established idioms, because 
> either the framework is going to go to a lot of trouble to fool 
> everything into using trial's idea of the reactor the tests should be 
> using (which begs the question: how do you test trial itself, if it has 
> a reference to the "real" reactor?), or it's going to require special 
> hacks to get at the "real" reactor which still won't behave in an event- 
> driven way if a test (shock, horror) actually does want to do some real 
> I/O itself.  Although I am *personally* focusing on how to write better 
> and more isolated unit tests using trial, I know of a small number of 
> people using it as an integration testing tool that does tons of I/O to 
> external systems and I think that is an interesting use-case and should 
> be better supported, not worse.

I don't understand this.

Having a separate reactor for Trial and for the system-under-test (SUT) makes
Trial *more* testable.

Your point about ?confusing semantics for code written using established idioms?
is just the inevitable result of supporting a default global reactor.  That's
not Trial's fault, it's Twisted's.  The way for Trial to cope with it gracefully
is to add support for multiple simultaneous reactors to Twisted, and then make
Trial use the non-global one for its own use, and let the tests keep using the
global one, so that legacy code will be unaffected.

I do not see how doing large amounts of I/O in test methods will be made any
worse by this design.

> Perhaps the 'trial' tool itself is a misguided design though, and 
> 'disttrial' will simply replace it in short order.  If this is the case, 
> then the tests are running in a subprocess anyway, and there's no reason 
> to run any code in-process with the tests, except for things to gather 
> metrics.  In that case, the 'disttrial' tool itself is a real Twisted 
> program, and the subprocess fakes just enough to get by:
> 
> http://twistedmatrix.com/trac/browser/branches/disttrial-1784/twisted/trial/dist/slavetrial.py#L60
> 
> That *particular* hack makes me cringe, but I think the overall 
> architecture may satisfy us both better in the end.

Right, it's a hack that gives us multiple reactors by putting Trial and the SUT
in separate processes, so that Trial and the SUT are using different reactors.
I'm saying that if we supported multiple reactors in the same process we could
and should use that feature to do the same thing: give Trial and the SUT
different reactors.

(Whether or not you share the same reactor instance between multiple tests is a
separate issue.  I think experience has taught us that doing that is fragile,
which is why I also advocate for a new reactor instance for each test, but
that's really an orthogonal issue.)

-Andrew.




From twisted at dwalliance.com  Tue Aug  7 08:37:35 2007
From: twisted at dwalliance.com (twisted at dwalliance.com)
Date: Tue, 7 Aug 2007 05:37:35 -0700
Subject: [Twisted-Python] custom work needed
Message-ID: <97847317eab0984a54e19d5d2a52f49d@store.dwalliance.com>

Hi,

We just posted this on guru.com but thought maybe one of you would be interested in helping us with this project.
*****************
We need a special smtp server created using twisted-python for ubuntu linux(feisty fawn server)that will accept an email then send that email to multiple anti-spam servers. Each email needs to be tagged with an ID and when relayed needs to appear as if it was received from the original sender(ip spoofing). This SMTP server could be visualized as an ethernet bridge that puts an ID on each received email then tees the connection and sends that email to multiple servers simultaneously. The connections to the anti-spam servers need to be monitored for how long it takes to accept the email, reject the email, or the connection errors out. All this data needs to be inserted in real time to a mysql database.

We expect that the smtp server will not act exactly like an ethernet bridge(pass through) since the sending will have significant overhead as compared to the receiving and that queuing will be a natural way for the system to manage a heavy workload.

It is very important to us that the anti-spam servers see our computer as the previous sending server since many anti-spam systems rely on black-listed IP's.

The receiving of emails will be from the internet the anti-spam servers will have limited access to the internet.

The software should be able to send 10 messages or more per second. Receiving email should not be an issue since only simple queuing is required.

This is an experimental project and well written and commented code is a requirement since we expect many updates to happen over a short amount of time.
*************

Our guess is the stock twisted smtp server with twisted pair and some other foo like mysql db connection will be all that is needed.  Hopefully no more than a few days work.

We have a budget of $500 to $1000 if you are interested you should only reply to this email address and not the list.

Thanks in advance!

Jimmy Brake





From warner at lothar.com  Tue Aug  7 21:48:44 2007
From: warner at lothar.com (Brian Warner)
Date: Tue, 07 Aug 2007 18:48:44 -0700 (PDT)
Subject: [Twisted-Python] Foolscap-0.1.5 released
Message-ID: <20070807.184844.52191902.warner@lothar.com>

I'm pleased to announce the release of Foolscap-0.1.5, the latest version of
the next-generation Perspective Broker library. My intention with this
library is to make many of the communication and cooperation features of the
E language available to Python programmers, and to simplify secure
communication between twisted-based python progams.

(there have been several intermediate releases since foolscap-0.1.1 in April,
which I neglected to announce. oops.)

Foolscap has moved out of the Twisted sandbox and into its very own Mercurial
repository. It also has its own Trac instance. For downloads, bugs, and all
things Foolscapish (with the exception of a mailing list, for which we're
still using twisted-python), please visit:

  http://foolscap.lothar.com/

The release can be downloaded directly from
http://foolscap.lothar.com/releases/foolscap-0.1.5.tar.gz , or installed by
typing 'easy_install foolscap' on a setuptools-enabled system.

A large number of bugs and features have been addressed since 0.1.1, please
see the NEWS file (attached) for full details. Many of them relate to the
handling of third-party references ("Gifts"), connection keepalives, and
Constaints. In addition, a number of usability improvements have been made
based upon experience gained by deploying Foolscap in a controlled
environment[1][2]. I am grateful to my employer, Allmydata.com, for providing
me with the time and environment to use and develop Foolscap for a real-world
application.

Please download and hack away. File bugs and patches in the foolscap Trac,
and discuss anything which doesn't fit into a ticket here on twisted-python.

share and enjoy!
 -Brian


[1]: http://allmydata.org/trac/tahoe/wiki (all tahoe connections use Foolscap)
[2]: http://www.allmydata.com/wordpress/?p=24 (the 1.8 release uses 
     Foolscap-0.1.4 internally)


* Release 0.1.5 (07 Aug 2007)

** Compatibility

This release is fully compatible with 0.1.4 and 0.1.3 .

** CopiedFailure improvements

When a remote method call fails, the calling side gets back a CopiedFailure
instance. These instances now behave slightly more like the (local) Failure
objects that they are intended to mirror, in that .type now behaves much like
the original class. This should allow trial tests which result in a
CopiedFailure to be logged without exploding. In addition, chained failures
(where A calls B, and B calls C, and C fails, so C's Failure is eventually
returned back to A) should work correctly now.

** Gift improvements

Gifts inside return values should properly stall the delivery of the response
until the gift is resolved. Gifts in all sorts of containers should work
properly now. Gifts which cannot be resolved successfully (either because the
hosting Tub cannot be reached, or because the name cannot be found) will now
cause a proper error rather than hanging forever. Unresolvable gifts in
method arguments will cause the message to not be delivered and an error to
be returned to the caller. Unresolvable gifts in method return values will
cause the caller to receive an error.

** IRemoteReference() adapter

The IRemoteReference() interface now has an adapter from Referenceable which
creates a wrapper that enables the use of callRemote() and other
IRemoteReference methods on a local object.

The situation where this might be useful is when you have a central
introducer and a bunch of clients, and the clients are introducing themselves
to each other (to create a fully-connected mesh), and the introductions are
using live references (i.e. Gifts), then when a specific client learns about
itself from the introducer, that client will receive a local object instead
of a RemoteReference. Each client will wind up with n-1 RemoteReferences and
a single local object.

This adapter allows the client to treat all these introductions as equal. A
client that wishes to send a message to everyone it's been introduced to
(including itself) can use:

  for i in introductions:
    IRemoteReference(i).callRemote("hello", args)

In the future, if we implement coercing Guards (instead of
compliance-asserting Constraints), then IRemoteReference will be useful as a
guard on methods that want to insure that they can do callRemote (and
notifyOnDisconnect, etc) on their argument.

** Tub.registerNameLookupHandler

This method allows a one-argument name-lookup callable to be attached to the
Tub. This augments the table maintained by Tub.registerReference, allowing
Referenceables to be created on the fly, or persisted/retrieved on disk
instead of requiring all of them to be generated and registered at startup.


* Release 0.1.4 (14 May 2007)

** Compatibility

This release is fully compatible with 0.1.3 .

** getReference/connectTo can be called before Tub.startService()

The Tub.startService changes that were suggested in the 0.1.3 release notes
have been implemented. Calling getReference() or connectTo() before the Tub
has been started is now allowed, however no action will take place until the
Tub is running. Don't forget to start the Tub, or you'll be left wondering
why your Deferred or callback is never fired. (A log message is emitted when
these calls are made before the Tub is started, in the hopes of helping
developers find this mistake faster).

** constraint improvements

The RIFoo -style constraint now accepts gifts (third-party references). This
also means that using RIFoo on the outbound side will accept either a
Referenceable that implements the given RemoteInterface or a RemoteReference
that points to a Referenceable that implements the given RemoteInterface.
There is a situation (sending a RemoteReference back to its owner) that will
pass the outbound constraint but be rejected by the inbound constraint on the
other end. It remains to be seen how this will be fixed.

** foolscap now deserializes into python2.4-native 'set' and 'frozenset' types

Since Foolscap is dependent upon python2.4 or newer anyways, it now
unconditionally creates built-in 'set' and 'frozenset' instances when
deserializing 'set'/'immutable-set' banana sequences. The pre-python2.4
'sets' module has non-built-in set classes named sets.Set and
sets.ImmutableSet, and these are serialized just like the built-in forms.

Unfortunately this means that Set and ImmutableSet will not survive a
round-trip: they'll be turned into set and frozenset, respectively. Worse
yet, 'set' and 'sets.Set' are not entirely compatible. This may cause a
problem for older applications that were written to be compatible with both
python-2.3 and python-2.4 (by using sets.Set/sets.ImmutableSet), for which
the compatibility code is still in place (i.e. they are not using
set/frozenset). These applications may experience problems when set objects
that traverse the wire via Foolscap are brought into close proximity with set
objects that remained local. This is unfortunate, but it's the cleanest way
to support modern applications that use the native types exclusively.

** bug fixes

Gifts inside containers (lists, tuples, dicts, sets) were broken: the target
method was frequently invoked before the gift had properly resolved into a
RemoteReference. Constraints involving gifts inside containers were broken
too. The constraints may be too loose right now, but I don't think they
should cause false negatives.

The unused SturdyRef.asLiveRef method was removed, since it didn't work
anyways.

** terminology shift: FURL

The preferred name for the sort of URL that you get back from
registerReference (and hand to getReference or connectTo) has changed from
"PB URL" to "FURL" (short for Foolscap URL). They still start with 'pb:',
however. Documentation is slowly being changed to use this term.


* Release 0.1.3 (02 May 2007)

** Incompatibility Warning

The 'keepalive' feature described below adds a new pair of banana tokens,
PING and PONG, which introduces a compatibility break between 0.1.2 and 0.1.3
. Older versions would throw an error upon receipt of a PING token, so the
version-negotiation mechanism is used to prevent banana-v2 (0.1.2) peers from
connecting to banana-v3 (0.1.3+) peers. Our negotiation mechanism would make
it possible to detect the older (v2) peer and refrain from using PINGs, but
that has not been done for this release.

** Tubs must be running before use

Tubs are twisted.application.service.Service instances, and as such have a
clear distinction between "running" and "not running" states. Tubs are
started by calling startService(), or by attaching them to a running service,
or by starting the service that they are already attached to. The design rule
in operation here is that Tubs are not allowed to perform network IO until
they are running.

This rule was not enforced completely in 0.1.2, and calls to
getReference()/connectTo() that occurred before the Tub was started would
proceed normally (initiating a TCP connection, etc). Starting with 0.1.3,
this rule *is* enforced. For now, that means that you must start the Tub
before calling either of these methods, or you'll get an exception. In a
future release, that may be changed to allow these early calls, and queue or
otherwise defer the network IO until the Tub is eventually started. (the
biggest issue is how to warn users who forget to start the Tub, since in the
face of such a bug the getReference will simply never complete).

** Keepalives

Tubs now keep track of how long a connection has been idle, and will send a
few bytes (a PING of the other end) if no other traffic has been seen for
roughly 4 to 8 minutes. This serves two purposes. The first is to convince an
intervening NAT box that the connection is still in use, to prevent it from
discarding the connection's table entry, since that would block any further
traffic. The second is to accelerate the detection of such blocked
connections, specifically to reduce the size of a window of buggy behavior in
Foolscap's duplicate-connection detection/suppression code.

This problem arises when client A (behind a low-end NAT box) connects to
server B, perhaps using connectTo(). The first connection works fine, and is
used for a while. Then, for whatever reason, A and B are silent for a long
time (perhaps as short as 20 minutes, depending upon the NAT box). During
this silence, A's NAT box thinks the connection is no longer in use and drops
the address-translation table entry. Now suppose that A suddenly decides to
talk to B. If the NAT box creates a new entry (with a new outbound port
number), the packets that arrive on B will be rejected, since they do not
match any existing TCP connections. A sees these rejected packets, breaks the
TCP connection, and the Reconnector initiates a new connection. Meanwhile, B
has no idea that anything has gone wrong. When the second connection reaches
B, it thinks this is a duplicate connection from A, and that it already has a
perfectly functional (albeit quiet) connection for that TubID, so it rejects
the connection during the negotiation phase. A sees this rejection and
schedules a new attempt, which ends in the same result. This has the
potential to prevent hosts behind NAT boxes from ever reconnecting to the
other end, at least until the the program at the far end is restarted, or it
happens to try to send some traffic of its own.

The same problem can occur if a laptop is abruptly shut down, or unplugged
from the network, then moved to a different network. Similar problems have
been seen with virtual machine instances that were suspended and moved to a
different network.

The longer-term fix for this is a deep change to the way duplicate
connections (and cross-connect race conditions) are handled. The keepalives,
however, mean that both sides are continually checking to see that the
connection is still usable, enabling TCP to break the connection once the
keepalives go unacknowledged for a certain amount of time. The default
keepalive timer is 4 minutes, and due to the way it is implemented this means
that no more than 8 minutes will pass without some traffic being sent. TCP
tends to time out connections after perhaps 15 minutes of unacknowledged
traffic, which means that the window of unconnectability is probably reduced
from infinity down to about 25 minutes.

The keepalive-sending timer defaults to 4 minutes, and can be changed by
calling tub.setOption("keepaliveTimeout", seconds).

In addition, an explicit disconnect timer can be enabled, which tells
Foolscap to drop the connection unless traffic has been seen within some
minimum span of time. This timer can be set by calling
tub.setOption("disconnectTimeout", seconds). Obviously it should be set to a
higher value than the keepaliveTimeout. This will close connections faster
than TCP will. Both TCP disconnects and the ones triggered by this
disconnectTimeout run the risk of false negatives, of course, in the face of
unreliable networks.

** New constraints

When a tuple appears in a method constraint specification, it now maps to an
actual TupleOf constraint. Previously they mapped to a ChoiceOf constraint.
In practice, TupleOf appears to be much more useful, and thus better
deserving of the shortcut.

For example, a method defined as follows:

  def get_employee(idnumber=int):
      return (str, int, int)  # (name, room_number, age)

can only return a three-element tuple, in which the first element is a string
(specifically it conforms to a default StringConstraint), and the second two
elements are ints (which conform to a default IntegerConstraint, which means
it fits in a 32-bit signed twos-complement value).

To specify a constraint that can accept alternatives, use ChoiceOf:

  def get_record(key=str):
      """Return the record (a string) if it is present, or None if
          it is not present."""
      return ChoiceOf(str, None)

UnicodeConstraint has been added, with minLength=, maxLength=, and regexp=
arguments.

The previous StringConstraint has been renamed to ByteStringConstraint (for
accuracy), and it is defined to *only* accept string objects (not unicode
objects). 'StringConstraint' itself remains equivalent to
ByteStringConstraint for now, but in the future it may be redefined to be a
constraint that accepts both bytestrings and unicode objects. To accomplish
the bytestring-or-unicode constraint now, you might try
schema.AnyStringConstraint, but it has not been fully tested, and might not
work at all.

** Bugfixes

Errors during negotiation were sometimes delivered in the wrong format,
resulting in a "token prefix is limited to 64 bytes" error message. Several
error messages (including that one) have been improved to give developers a
better chance of determining where the actual problem lies.

RemoteReference.notifyOnDisconnect was buggy when called on a reference that
was already broken: it failed to fire the callback. Now it fires the callback
soon (using an eventual-send). This should remove a race condition from
connectTo+notifyOnDisconnect sequences and allow them to operate reliably.
notifyOnDisconnect() is now tolerant of attempts to remove something twice,
which should make it easier to use safely.

Remote methods which raise string exceptions should no longer cause Foolscap
to explode. These sorts of exceptions are deprecated, of course, and you
shouldn't use them, but at least they won't break Foolscap.

The Reconnector class (accessed by tub.connectTo) was not correctly
reconnecting in certain cases (which appeared to be particularly common on
windows). This should be fixed now.

CopyableSlicer did not work inside containers when streaming was enabled.
Thanks to iacovou-AT-gmail.com for spotting this one.

** Bugs not fixed

Some bugs were identified and characterized but *not* fixed in this release

*** RemoteInterfaces aren't defaulting to fully-qualified classnames

When defining a RemoteInterface, you can specify its name with
__remote_name__, or you can allow it to use the default name. Unfortunately,
the default name is only the *local* name of the class, not the
fully-qualified name, which means that if you have an RIFoo in two different
.py files, they will wind up with the same name (which will cause an error on
import, since all RemoteInterfaces known to a Foolscap-using program must
have unique names).

It turns out that it is rather difficult to determine the fully-qualified
name of the RemoteInterface class early enough to be helpful. The workaround
is to always add a __remote_name__ to your RemoteInterface classes. The
recommendation is to use a globally-unique string, like a URI that includes
your organization's DNS name.

*** Constraints aren't constraining inbound tokens well enough

Constraints (and the RemoteInterfaces they live inside) serve three purposes.
The primary one is as documentation, describing how remotely-accessible
objects behave. The second purpose is to enforce that documentation, by
inspecting arguments (and return values) before invoking the method, as a
form of precondition checking. The third is to mitigate denial-of-service
attacks, in which an attacker sends so much data (or carefully crafted data)
that the receiving program runs out of memory or stack space.

It looks like several constraints are not correctly paying attention to the
tokens as they arrive over the wire, such that the third purpose is not being
achieved. Hopefully this will be fixed in a later release. Application code
can be unaware of this change, since the constraints are still being applied
to inbound arguments before they are passed to the method. Continue to use
RemoteInterfaces as usual, just be aware that you are not yet protected
against certain DoS attacks.

** Use os.urandom instead of falling back to pycrypto

Once upon a time, when Foolscap was compatible with python2.3 (which lacks
os.urandom), we would try to use PyCrypto's random-number-generation routines
when creating unguessable object identifiers (aka "SwissNumbers"). Now that
we require python2.4 or later, this fallback has been removed, eliminating
the last reference to pycrypto within the Foolscap source tree.


* Release 0.1.2 (04 Apr 2007)

** Bugfixes

Yesterday's release had a bug in the new SetConstraint which rendered it
completely unusable. This has been fixed, along with some new tests.

** More debian packaging

Some control scripts were added to make it easier to create debian packages
for the Ubuntu 'edgy' and 'feisty' distributions.



From nayuhz at gmail.com  Tue Aug  7 23:58:25 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Wed, 8 Aug 2007 11:58:25 +0800
Subject: [Twisted-Python] thread in reactor problem
Message-ID: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>

Hi all, I run a reactor in my thread, so I will get many connection by
twisted, and I run another thread for write back data to any connection.
But I've found the data is in buffer, not sent back immediately.  I traced
the twisted, found it blocked in class SelectReactor.doSelect():

while 1:
    try:
        r, w, ignored = _select(reads.keys(),
        writes.keys(),
        [], timeout)
        break
    ... ...
    #do sth

when the reactor is bloce by _select(), then my another thread modified the
*writes* dictionary, but _select could not know if writes.keys() is changed,
so when the thread want to write something, reactor won't do response. so,
the problem is above.

Is there any idea for this?
thanks~

-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/8c296909/attachment.htm 

From radix at twistedmatrix.com  Wed Aug  8 00:22:10 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 8 Aug 2007 00:22:10 -0400
Subject: [Twisted-Python] thread in reactor problem
In-Reply-To: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
References: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
Message-ID: <60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>

On 8/7/07, Yan Zhu <nayuhz at gmail.com> wrote:
> Hi all, I run a reactor in my thread, so I will get many connection by
> twisted, and I run another thread for write back data to any connection.

You don't need to have multiple threads to communicate with multiple
connections!

> But I've found the data is in buffer, not sent back
> immediately.

This is because you're calling Twisted functions from non-reactor
threads. Twisted doesn't support this. The *only* threadsafe function
to call is reactor.callFromThread. You pass it a function to run in
the reactor thread.

If all you need is concurrent asynchronous I/O, you don't need
threads. Twisted is an *asynchronous* networking framework. You can do
all of your communication efficiently in one thread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nayuhz at gmail.com  Wed Aug  8 02:38:29 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Wed, 8 Aug 2007 14:38:29 +0800
Subject: [Twisted-Python] thread in reactor problem
In-Reply-To: <60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>
References: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
	<60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>
Message-ID: <8ae5ea120708072338y4819cd5ar16ad0504d8288034@mail.gmail.com>

Thanks you. I've resolved it! ;)


On 8/8/07, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>
> On 8/7/07, Yan Zhu <nayuhz at gmail.com> wrote:
> > Hi all, I run a reactor in my thread, so I will get many connection by
> > twisted, and I run another thread for write back data to any connection.
>
> You don't need to have multiple threads to communicate with multiple
> connections!
>
> > But I've found the data is in buffer, not sent back
> > immediately.
>
> This is because you're calling Twisted functions from non-reactor
> threads. Twisted doesn't support this. The *only* threadsafe function
> to call is reactor.callFromThread. You pass it a function to run in
> the reactor thread.
>
> If all you need is concurrent asynchronous I/O, you don't need
> threads. Twisted is an *asynchronous* networking framework. You can do
> all of your communication efficiently in one thread.
>
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/9c782d9e/attachment.htm 

From ladaan at iptel.org  Wed Aug  8 03:56:16 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 09:56:16 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
Message-ID: <46B97720.4090901@iptel.org>

Hi,
I'm writing an application which will be periodically testing servers.
I will have a global list of these servers(domain names) and need to do
few tasks.
1) DNS checks - I will use asynchronous twisted-names for it
- in case there is a difference comparing to the list it should update 
the list(then also in DB)
2) ICMP pings - should be also possible to do it asynchronously
3) Blocking function which will be pinging with SIP requests
- here I will use function deferToThread to make it non-blocking.

Questions:
1) How do I lock each thread when writing to a global list in twisted?
2) How will I put together all three results mentioned above in the 
global list
- is it by using function callLater ?
3) Could you help me with a rough skeleton of this application, please?

Thank you,
Lada







From exarkun at divmod.com  Wed Aug  8 06:31:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 06:31:36 -0400
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B97720.4090901@iptel.org>
Message-ID: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>

On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> wrote:
>Hi,
>I'm writing an application which will be periodically testing servers.
>I will have a global list of these servers(domain names) and need to do
>few tasks.
>1) DNS checks - I will use asynchronous twisted-names for it
>- in case there is a difference comparing to the list it should update the 
>list(then also in DB)
>2) ICMP pings - should be also possible to do it asynchronously
>3) Blocking function which will be pinging with SIP requests
>- here I will use function deferToThread to make it non-blocking.
>
>Questions:
>1) How do I lock each thread when writing to a global list in twisted?

Don't.  Don't share state between different threads.  If you need to mutate
state as a result of code which has run in a thread, do it in the reactor
thread based on the result of the Deferred returned by deferToThread.

Also, why do you need threads to send SIP messages?

>2) How will I put together all three results mentioned above in the global 
>list
>- is it by using function callLater ?

Don't use globals.  You can just put your state variables on an instance of
a class.  There's nothing unique to Twisted about this.  I'm not sure how
callLater would be involved.  callLater is for scheduling functions to run
based on timing events.

Jean-Paul



From ladaan at iptel.org  Wed Aug  8 07:11:09 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 13:11:09 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
Message-ID: <46B9A4CD.3030409@iptel.org>

Jean-Paul Calderone wrote:
> On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> 
> wrote:
>> Hi,
>> I'm writing an application which will be periodically testing servers.
>> I will have a global list of these servers(domain names) and need to do
>> few tasks.
>> 1) DNS checks - I will use asynchronous twisted-names for it
>> - in case there is a difference comparing to the list it should 
>> update the list(then also in DB)
>> 2) ICMP pings - should be also possible to do it asynchronously
>> 3) Blocking function which will be pinging with SIP requests
>> - here I will use function deferToThread to make it non-blocking.
>>
>> Questions:
>> 1) How do I lock each thread when writing to a global list in twisted?
>
> Don't.  Don't share state between different threads.  If you need to 
> mutate
> state as a result of code which has run in a thread, do it in the reactor
> thread based on the result of the Deferred returned by deferToThread.
>
I'm aiming to use results of the Deffered returned by deferToThread.
Can you give me an example of combining two Deferred results?
This will be done through callbacks but what if the blocking application 
gives me result in 5 sec
and e.g. DNS check in 1 sec.

> Also, why do you need threads to send SIP messages?
I use third party application where I'm just handling parameters to the 
application.
I know it's possible to do it somehow easily via twisted but I don't 
have time to explore it now.
I'm also quite new to python and also to twisted so that's why I don't 
want to get involved in something more
complex for now.

>
>> 2) How will I put together all three results mentioned above in the 
>> global list
>> - is it by using function callLater ?
>
> Don't use globals.  You can just put your state variables on an 
> instance of
> a class.  There's nothing unique to Twisted about this.  I'm not sure how
> callLater would be involved.  callLater is for scheduling functions to 
> run
> based on timing events.
>
Can you give me a little example?

Lada



From exarkun at divmod.com  Wed Aug  8 08:04:57 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 08:04:57 -0400
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9A4CD.3030409@iptel.org>
Message-ID: <20070808120457.4947.1236737990.divmod.quotient.20171@ohm>

On Wed, 08 Aug 2007 13:11:09 +0200, Ladislav Andel <ladaan at iptel.org> wrote:
>Jean-Paul Calderone wrote:
>>On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> 
>>wrote:
>>>Hi,
>>>I'm writing an application which will be periodically testing servers.
>>>I will have a global list of these servers(domain names) and need to do
>>>few tasks.
>>>1) DNS checks - I will use asynchronous twisted-names for it
>>>- in case there is a difference comparing to the list it should update the 
>>>list(then also in DB)
>>>2) ICMP pings - should be also possible to do it asynchronously
>>>3) Blocking function which will be pinging with SIP requests
>>>- here I will use function deferToThread to make it non-blocking.
>>>
>>>Questions:
>>>1) How do I lock each thread when writing to a global list in twisted?
>>
>>Don't.  Don't share state between different threads.  If you need to mutate
>>state as a result of code which has run in a thread, do it in the reactor
>>thread based on the result of the Deferred returned by deferToThread.
>I'm aiming to use results of the Deffered returned by deferToThread.
>Can you give me an example of combining two Deferred results?
>This will be done through callbacks but what if the blocking application 
>gives me result in 5 sec
>and e.g. DNS check in 1 sec.

twisted.internet.defer.gatherResults takes a list of Deferreds and returns
a Deferred which fires with a list of results.  If you want to wait for both
results, you can use this.  If you only want the first result, whichever
that may be, then you just need to write a little class that acknowledges
the first Deferred's callback and disregards callbacks from any subsequent
Deferreds.

>>Also, why do you need threads to send SIP messages?
>I use third party application where I'm just handling parameters to the 
>application.
>I know it's possible to do it somehow easily via twisted but I don't have 
>time to explore it now.
>I'm also quite new to python and also to twisted so that's why I don't want 
>to get involved in something more
>complex for now.

Alright.

>>
>>>2) How will I put together all three results mentioned above in the global 
>>>list
>>>- is it by using function callLater ?
>>
>>Don't use globals.  You can just put your state variables on an instance of
>>a class.  There's nothing unique to Twisted about this.  I'm not sure how
>>callLater would be involved.  callLater is for scheduling functions to run
>>based on timing events.
>Can you give me a little example?

I'm not really sure what you have in mind, but maybe an approach along these
lines would be useful:

class PingTracker:
    def __init__(self):
        self.dns = None
        self.sip = None
        self.ping = None

    def check(self, host):
        checks = []
        checks.append(checkDNS().addCallback(self.setDNSResult))
        checks.append(checkSIP().addCallback(self.setSIPResult))
        checks.append(checkPing().addCallback(self.setPingResult))
        return gatherResults(checks)

    def setDNSResult(self, result):
        self.dns = result

    ...

Jean-Paul



From andrew.roden at gmail.com  Wed Aug  8 08:25:59 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 13:25:59 +0100
Subject: [Twisted-Python] struggling with twisted telnet
Message-ID: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>

Hi

I'm pretty new to python which probably isn't helping, but I'm kind of stuck
with twisted telnet. I'm trying to build a couple of 'emulators' for some
simple router/switches just so that you can log on and run some 'standard'
commands and get a 'standard' output for use elsewhere. I've managed to get
an SSH version working with the massively helpful section in the O'Reilly
book but I cannot get the telnet version working. the script 'runs' with no
errors, but it doesn't stay running and bind to port 23 giving me my telnet
server. I enclose a zip with the ssh and the telnet versions, if anyone can
give me any pointers it would be massively appreciated (I haven't even
attempted to add in the 'login' which is in the SSH version... so any help
on that would be great too :) )

Thanks

Andrew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/0364e679/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stuff.zip
Type: application/zip
Size: 2836 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/0364e679/attachment.zip 

From marian.schubert at gmail.com  Wed Aug  8 08:27:05 2007
From: marian.schubert at gmail.com (Marian Schubert)
Date: Wed, 8 Aug 2007 14:27:05 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9A4CD.3030409@iptel.org>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
	<46B9A4CD.3030409@iptel.org>
Message-ID: <a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>

On 8/8/07, Ladislav Andel <ladaan at iptel.org> wrote:
> > Don't.  Don't share state between different threads.  If you need to
> > mutate
> > state as a result of code which has run in a thread, do it in the reactor
> > thread based on the result of the Deferred returned by deferToThread.
> >
> I'm aiming to use results of the Deffered returned by deferToThread.
> Can you give me an example of combining two Deferred results?
> This will be done through callbacks but what if the blocking application
> gives me result in 5 sec
> and e.g. DNS check in 1 sec.

check gatherResults from twisted.internet.defer. basicaly it's:
d3 = defer.gatherResults(d1, d2)
where d1 is call to blocking app using deferToThread and d2 is DNS check

and d3 gets called back with results of d1 and d2 (if they both succeeded)

cu,
MS



From exarkun at divmod.com  Wed Aug  8 08:32:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 08:32:32 -0400
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>
Message-ID: <20070808123232.4947.1654324248.divmod.quotient.20179@ohm>

On Wed, 8 Aug 2007 13:25:59 +0100, Andrew Roden <andrew.roden at gmail.com> wrote:
>Hi
>
>I'm pretty new to python which probably isn't helping, but I'm kind of stuck
>with twisted telnet. I'm trying to build a couple of 'emulators' for some
>simple router/switches just so that you can log on and run some 'standard'
>commands and get a 'standard' output for use elsewhere. I've managed to get
>an SSH version working with the massively helpful section in the O'Reilly
>book but I cannot get the telnet version working. the script 'runs' with no
>errors, but it doesn't stay running and bind to port 23 giving me my telnet
>server. I enclose a zip with the ssh and the telnet versions, if anyone can
>give me any pointers it would be massively appreciated (I haven't even
>attempted to add in the 'login' which is in the SSH version... so any help
>on that would be great too :) )

Are you using twistd to run it?

    $ twistd -noy telnet_server.py
    Removing stale pidfile twistd.pid
    2007-08-08 08:31:05-0400 [-] Log opened.
    2007-08-08 08:31:05-0400 [-] twistd 2.5.0+r20987 (/usr/bin/python 2.4.3) starting up
    2007-08-08 08:31:05-0400 [-] reactor class: <class 'twisted.internet.selectreactor.SelectReactor'>
    2007-08-08 08:31:05-0400 [-] twisted.internet.protocol.ServerFactory starting on 23
    2007-08-08 08:31:05-0400 [-] Starting factory <twisted.internet.protocol.ServerFactory instance at 0xb77f5fac>
    ...

After I connect to the port, it reports several tracebacks and drops the
connection.

Jean-Paul




From andrew.roden at gmail.com  Wed Aug  8 09:27:36 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 14:27:36 +0100
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <20070808123232.4947.1654324248.divmod.quotient.20179@ohm>
References: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>
	<20070808123232.4947.1654324248.divmod.quotient.20179@ohm>
Message-ID: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>

The answer is no I wasn't running it with twistd as I didn't need to with
the ssh one... having now run it with twistd I can see the exceptions it
throws but I have absolutely no clue how to go about rectifying them :(
>From what I can make out the main issue is with no terminal size being set
which from the demo_insults.tac looks like it's set in my class that deals
with connections associating it with insults.TerminalProtocol (eg. class
DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
connections in recvline as I don't want it to react on a per character basis
but rather a per line basis...

*confused of england*

Andrew


On 8/8/07, Jean-Paul Calderone < exarkun at divmod.com> wrote:
>
> On Wed, 8 Aug 2007 13:25:59 +0100, Andrew Roden < andrew.roden at gmail.com>
> wrote:
> >Hi
> >
> >I'm pretty new to python which probably isn't helping, but I'm kind of
> stuck
> >with twisted telnet. I'm trying to build a couple of 'emulators' for some
>
> >simple router/switches just so that you can log on and run some
> 'standard'
> >commands and get a 'standard' output for use elsewhere. I've managed to
> get
> >an SSH version working with the massively helpful section in the O'Reilly
>
> >book but I cannot get the telnet version working. the script 'runs' with
> no
> >errors, but it doesn't stay running and bind to port 23 giving me my
> telnet
> >server. I enclose a zip with the ssh and the telnet versions, if anyone
> can
> >give me any pointers it would be massively appreciated (I haven't even
> >attempted to add in the 'login' which is in the SSH version... so any
> help
> >on that would be great too :) )
>
> Are you using twistd to run it?
>
>     $ twistd -noy telnet_server.py
>     Removing stale pidfile twistd.pid
>     2007-08-08 08:31:05-0400 [-] Log opened.
>     2007-08-08 08:31:05-0400 [-] twistd 2.5.0+r20987 (/usr/bin/python
> 2.4.3) starting up
>     2007-08-08 08:31:05-0400 [-] reactor class: <class '
> twisted.internet.selectreactor.SelectReactor'>
>     2007-08-08 08:31:05-0400 [-] twisted.internet.protocol.ServerFactorystarting on 23
>     2007-08-08 08:31:05-0400 [-] Starting factory <
> twisted.internet.protocol.ServerFactory instance at 0xb77f5fac>
>     ...
>
> After I connect to the port, it reports several tracebacks and drops the
> connection.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/88eef26e/attachment.htm 

From exarkun at divmod.com  Wed Aug  8 09:49:41 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 09:49:41 -0400
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>
Message-ID: <20070808134941.4947.1966598319.divmod.quotient.20197@ohm>

On Wed, 8 Aug 2007 14:27:36 +0100, Andrew Roden <andrew.roden at gmail.com> wrote:
>The answer is no I wasn't running it with twistd as I didn't need to with
>the ssh one... having now run it with twistd I can see the exceptions it
>throws but I have absolutely no clue how to go about rectifying them :(
>>From what I can make out the main issue is with no terminal size being set
>which from the demo_insults.tac looks like it's set in my class that deals
>with connections associating it with insults.TerminalProtocol (eg. class
>DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
>connections in recvline as I don't want it to react on a per character basis
>but rather a per line basis...
>
>*confused of england*
>
>Andrew
>

The first traceback I see is this one:

2007-08-08 09:46:39-0400 [twisted.internet.protocol.ServerFactory] Unhandled Error
        Traceback (most recent call last):
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py", line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 813, in doRead
            protocol.makeConnection(transport)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 732, in connectionMade
            self.protocol.makeConnection(self)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 795, in connectionMade
            self.protocol.makeConnection(self)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/insults/insults.py", line 416, in connectionMade
            self.terminalProtocol = self.protocolFactory(*self.protocolArgs, **self.protocolKwArgs)
        exceptions.TypeError: __init__() takes exactly 2 arguments (1 given)

Python is really helpful here, omitting the class name which has the bad
__init__, but I guess you can track that down with a little effort (and
there are probably only a small number of candidates).

The next one I see is this:

2007-08-08 09:46:39-0400 [TelnetTransport,0,127.0.0.1] Unhandled Error
        Traceback (most recent call last):
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 51, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
        --- <exception caught here> ---
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py", line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 362, in doRead
            return self.protocol.dataReceived(data)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 483, in dataReceived
            self.negotiate(commands)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 526, in negotiate
            cmdFunc(bytes)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 833, in telnet_NAWS
            self.protocol.terminalProtocol.terminalSize(width, height)
        exceptions.AttributeError: 'NoneType' object has no attribute 'terminalSize'

This may just be a consequence of the first one, so I'd try resolving the
first one before looking more at this.

Jean-Paul



From rodrigo at 1bit.com.br  Wed Aug  8 10:06:24 2007
From: rodrigo at 1bit.com.br (Rodrigo Strauss)
Date: Wed, 8 Aug 2007 11:06:24 -0300
Subject: [Twisted-Python] stop receiving from socket until processing finish
Message-ID: <a684d0100708080706j2eeb13a1kebfb97b96d6ae499@mail.gmail.com>

Hi!

Consider the following scenario (each component is a twisted app):

producer --> processor --> destination

I need to stop receiving producer data until I'm able to process it
and send to destination. Using sync sockets, the producer send() with
block if processor isn't recv'ing as fast as it can send. How can I do
this using twisted? Something like telling reactor to stop receiving
from a specific socket until I enable it back. When I send something
to destination, the reactor will come back to scene and recv data from
producer.

A simple solution is to make processor ask for data to process every
time, but when processor is fast enough it will hurt the performance
to much.

Rodrigo



From exarkun at divmod.com  Wed Aug  8 10:25:14 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 10:25:14 -0400
Subject: [Twisted-Python] stop receiving from socket until processing
	finish
In-Reply-To: <a684d0100708080706j2eeb13a1kebfb97b96d6ae499@mail.gmail.com>
Message-ID: <20070808142514.4947.1201879559.divmod.quotient.20204@ohm>

On Wed, 8 Aug 2007 11:06:24 -0300, Rodrigo Strauss <rodrigo at 1bit.com.br> wrote:
>Hi!
>
>Consider the following scenario (each component is a twisted app):
>
>producer --> processor --> destination
>
>I need to stop receiving producer data until I'm able to process it
>and send to destination. Using sync sockets, the producer send() with
>block if processor isn't recv'ing as fast as it can send. How can I do
>this using twisted? Something like telling reactor to stop receiving
>from a specific socket until I enable it back. When I send something
>to destination, the reactor will come back to scene and recv data from
>producer.

A protocol can ask its transport to stop giving it data by calling
pauseProducing.  When it is ready for more data, there's resumeProducing.

Pausing is implemented in the transport by not reading from the socket.

Jean-Paul



From andrew.roden at gmail.com  Wed Aug  8 10:54:56 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 15:54:56 +0100
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <20070808134941.4947.1966598319.divmod.quotient.20197@ohm>
References: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>
	<20070808134941.4947.1966598319.divmod.quotient.20197@ohm>
Message-ID: <e2d6c2200708080754v68ba4c70u1375ee25e2e141a1@mail.gmail.com>

ok... thanks for the help so far :)

I've managed to get it 'working' by hashing out the __init__ under the
Telnet Protocol class

class TelnetProtocol(recvline.HistoricRecvLine):
#    def __init__(self, user):
#        self.user = user

That will now allow me to connect to the 'server' but it behaves in a
different way to the SSH server in that if I type in one of my commands...
to see the output and return to the prompt, I have to hit enter twice which
then shows me 2 prompts :(

oh for a nice simple example like the one for SSH in the O'Reilly book :(

Andrew

On 8/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Wed, 8 Aug 2007 14:27:36 +0100, Andrew Roden <andrew.roden at gmail.com>
> wrote:
> >The answer is no I wasn't running it with twistd as I didn't need to with
> >the ssh one... having now run it with twistd I can see the exceptions it
> >throws but I have absolutely no clue how to go about rectifying them :(
> >>From what I can make out the main issue is with no terminal size being
> set
> >which from the demo_insults.tac looks like it's set in my class that
> deals
> >with connections associating it with insults.TerminalProtocol (eg. class
> >DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
> >connections in recvline as I don't want it to react on a per character
> basis
> >but rather a per line basis...
> >
> >*confused of england*
> >
> >Andrew
> >
>
> The first traceback I see is this one:
>
> 2007-08-08 09:46:39-0400 [twisted.internet.protocol.ServerFactory]
> Unhandled Error
>         Traceback (most recent call last):
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in
> callWithContext
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59,
> in callWithContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37,
> in callWithContext
>             return func(*args,**kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>             why = getattr(selectable, method)()
>         --- <exception caught here> ---
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 813, in
> doRead
>             protocol.makeConnection(transport)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 732, in
> connectionMade
>             self.protocol.makeConnection(self)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 795, in
> connectionMade
>             self.protocol.makeConnection(self)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/insults/insults.py",
> line 416, in connectionMade
>             self.terminalProtocol = self.protocolFactory (*
> self.protocolArgs, **self.protocolKwArgs)
>         exceptions.TypeError: __init__() takes exactly 2 arguments (1
> given)
>
> Python is really helpful here, omitting the class name which has the bad
> __init__, but I guess you can track that down with a little effort (and
> there are probably only a small number of candidates).
>
> The next one I see is this:
>
> 2007-08-08 09:46:39-0400 [TelnetTransport,0,127.0.0.1] Unhandled Error
>         Traceback (most recent call last):
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 51, in
> callWithLogger
>             return callWithContext({"system": lp}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in
> callWithContext
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59,
> in callWithContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37,
> in callWithContext
>             return func(*args,**kw)
>         --- <exception caught here> ---
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>             why = getattr(selectable, method)()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 362, in
> doRead
>             return self.protocol.dataReceived(data)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 483, in
> dataReceived
>             self.negotiate(commands)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 526, in
> negotiate
>             cmdFunc(bytes)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 833, in
> telnet_NAWS
>             self.protocol.terminalProtocol.terminalSize(width, height)
>         exceptions.AttributeError: 'NoneType' object has no attribute
> 'terminalSize'
>
> This may just be a consequence of the first one, so I'd try resolving the
> first one before looking more at this.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070808/497bc46a/attachment.htm 

From ladaan at iptel.org  Wed Aug  8 11:58:16 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 17:58:16 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>	<46B9A4CD.3030409@iptel.org>
	<a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
Message-ID: <46B9E818.40909@iptel.org>

Thank you for your help.
Well, I'm trying to get into the problem step by step so please receive 
my apologies about not so professional approach
to the problem.

I have following code below with a few problems.

1) I need to call getServerResponse of SIP servers for given list 
domains periodically.
    I have tried to use callLater method but probably at wrong places.
This way it runs only once. In the future it should be at least every 5 
minutes.

2)
In my code is something wrong.
I get the Server response but also following error.

Traceback (most recent call last):
 File 
"/home/data/iptel_summer_2007/sipcraft1/src/sipcraft/multideferred.py", 
line 46, in ?
   reactor.run()
 File "/usr/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 220, in run
   self.mainLoop()
 File "/usr/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 228, in mainLoop
   self.runUntilCurrent()
--- <exception caught here> ---
 File "/usr/lib/python2.4/site-packages/twisted/internet/base.py", line 
533, in runUntilCurrent
   f(*a, **kw)
 File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 
239, in callback
   self._startRunCallbacks(result)
 File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 
290, in _startRunCallbacks
   raise AlreadyCalledError
twisted.internet.defer.AlreadyCalledError:




----------------------------- code ---------------------------------


from twisted.internet import reactor, defer, threads

from siptest import siptest_f
from twisted.internet.threads import deferToThread


test_opts = 
{'username':'test','transport':'udp','localport':'5085','password':'test'}
domain = ['sip.1und1.de', 'sip.babble.net']

class Getter:
     def gotResults(self, domain, test_opts):
             if len(domain) != 0:
           self.d.callback(siptest_f(domain, test_opts))
       else:
           self.d.errback(ValueError("You used an odd number!"))

   def _print(self, r, domain):
             return domain, r
       def getServerResponse(self, domain, test_opts):
                     self.d = threads.deferToThread(self.gotResults, 
domain, test_opts)
       self.d.addCallback(self._print, domain)
       return self.d

def printData(d):
   print d

def printError(failure):
   import sys
   sys.stderr.write(str(failure))

def test():
   for dom in domain:
       g = Getter()
       d = g.getServerResponse(dom, test_opts)
       d.addCallback(printData)
       d.addErrback(printError)

if __name__ == '__main__':
   test()
   reactor.run()
 




From p.mayers at imperial.ac.uk  Wed Aug  8 17:21:33 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 08 Aug 2007 22:21:33 +0100
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9E818.40909@iptel.org>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
	<46B9A4CD.3030409@iptel.org>
	<a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
	<46B9E818.40909@iptel.org>
Message-ID: <1186608093.7592.2.camel@localhost.localdomain>


> class Getter:
>      def gotResults(self, domain, test_opts):
>        if len(domain) != 0:
>            self.d.callback(siptest_f(domain, test_opts))
>        else:
>            self.d.errback(ValueError("You used an odd number!"))


gotResults is inside a thread, and you're touching the deferred. Don't.
Just do this:

class MyWeirdTester:
  def gotResults(...):
    if domain:
      return siptest_f(domain, test_opts)
    raise ValueError("you used an odd number")

  def getServerResponse(...):
    d = deferToThread(self.gotResults, ...)
    d.addCallback(self._print, ...)
    return d






From jml at mumak.net  Wed Aug  8 23:26:27 2007
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 9 Aug 2007 13:26:27 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
	<20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
Message-ID: <d06a5cd30708082026k1a4928e8y8ef629afe3be2c50@mail.gmail.com>

On 8/7/07, glyph at divmod.com <glyph at divmod.com> wrote:
> Multiple reactors should, indeed must, eventually be supported.  It
> would be nice if someone who really wanted it would implement it though,
> instead of just talking about it ;).

Speaking as someone who really wants it, talks about it and is yet to
implement it, I agree.

It would be nice.

jml



From schettino72 at gmail.com  Thu Aug  9 05:09:20 2007
From: schettino72 at gmail.com (Eduardo Schettino)
Date: Thu, 9 Aug 2007 14:39:20 +0530
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
Message-ID: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>

Hi,

 Is there an asynchronous wrapper for local file system operation
(i.e. write a file to disk)?
 I was looking for something like what twisted.enterprise.adbapi do to
database access.
 And I guess using deferToThread is not the right approach for I/O operations.

Regards,
  Eduardo



From thostrup at gmail.com  Thu Aug  9 05:58:07 2007
From: thostrup at gmail.com (Henrik Thostrup Jensen)
Date: Thu, 9 Aug 2007 11:58:07 +0200
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
In-Reply-To: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
Message-ID: <f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>

Hi

On 8/9/07, Eduardo Schettino <schettino72 at gmail.com> wrote:

>
> Is there an asynchronous wrapper for local file system operation
> (i.e. write a file to disk)?


I don't think there is anything that works out of the box. I think there is
a python wrapper for posix aio somewhere, but AFAIK it is not integrated
into twisted in any way.

And I guess using deferToThread is not the right approach for I/O
> operations.
>

Usually writes take _very_ little time. The data is only copied to kernel
space and control is returned. The data is then written to disk later.
Reading will probably be a bit more problematic, but it will still take
little time compared to (common) network IO.

I suggest starting with just doing writes and reads directly and if it
becomes a problem, then start to solve it. You can create a small file
wrapper which returns a defer (just use return defer.succeed() and then
change the implementation if it becomes necessary.

-- 
   - Henrik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070809/59224403/attachment.htm 

From ladaan at iptel.org  Thu Aug  9 08:42:50 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Thu, 09 Aug 2007 14:42:50 +0200
Subject: [Twisted-Python] returning value after addCallback
Message-ID: <46BB0BCA.8050000@iptel.org>

Hi,
you could tell me that I should stop programming since I don't know 
properly OOP but
I quite need to sort out this problem.
Here is another piece of code I have problem with.
Please be patient with me.

Where is mistake in my code. It is not returning any reasonable result.

Thank you for help.
Lada

-------------------------------------- code 
-------------------------------------------------

from twisted.internet import reactor, defer, threads

from siptest import siptest_f


test_opts = 
{'username':'test','transport':'udp','localport':'5085','password':'test'}
domain = ['sip.1und1.de', 'sip.babble.net']

        
class PingTracker:
   def __init__(self):
       self.dns = None
       self.sip = None
       self.ping = None
    
   def gotSipServerResults(self, domain, test_opts):
            
       if domain:
           return siptest_f(domain, test_opts)
       raise ValueError("Error occured")
     
   def checkSIP(self, domain, test_opts):
           
       return threads.deferToThread(self.gotSipServerResults, domain, 
test_opts)

   def check(self, host, test_opts):
       checks = []
       #checks.append(checkDNS().addCallback(self.setDNSResult))
       checks.append(self.checkSIP(host, 
test_opts).addCallback(self.setSIPResult))
       #checks.append(checkPing().addCallback(self.setPingResult))
       return defer.gatherResults(checks)

   def setDNSResult(self, result):
       self.dns = result

   def setSIPResult(self, result):
       self.sip = result
   
   def setPingResult(self, result):       
       self.ping = result
   
   def SipCallback(self):
       print self.sip

test = PingTracker()
d = test.check(domain[0], test_opts)

print d  # this returns Deferred...

test.SipCallback()   # this returns None


reactor.run()



From p.mayers at imperial.ac.uk  Thu Aug  9 11:11:45 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 09 Aug 2007 16:11:45 +0100
Subject: [Twisted-Python] returning value after addCallback
In-Reply-To: <46BB0BCA.8050000@iptel.org>
References: <46BB0BCA.8050000@iptel.org>
Message-ID: <1186672305.30144.9.camel@doorstop.net.ic.ac.uk>


> 
> test = PingTracker()
> d = test.check(domain[0], test_opts)
> 
> print d  # this returns Deferred...
> 
> test.SipCallback()   # this returns None

Yes, because no Twisted code has run yet

> 
> 
> reactor.run()

...because you haven't started the reactor.

I don't think you properly understand how Twisted works. Your code is
executed in response to events (packets being received, timers expiring,
reactor startup/shutdown events). The reactor runs the event loop.






From schettino72 at gmail.com  Fri Aug 10 00:24:06 2007
From: schettino72 at gmail.com (Eduardo Schettino)
Date: Fri, 10 Aug 2007 09:54:06 +0530
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
In-Reply-To: <f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
	<f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
Message-ID: <e24a65c90708092124l6e55b53ag28e14f1c049c13df@mail.gmail.com>

Hi Henrik,

  Thanks for the information. It was really helpful. I was thinking
that my IO operations would be an issue. I will take your suggestion
and do IO directly by now.

Regards,
  Eduardo

On 8/9/07, Henrik Thostrup Jensen <thostrup at gmail.com> wrote:
> Hi
>
> On 8/9/07, Eduardo Schettino <schettino72 at gmail.com> wrote:
>
> >
> > Is there an asynchronous wrapper for local file system operation
> > (i.e. write a file to disk)?
>
> I don't think there is anything that works out of the box. I think there is
> a python wrapper for posix aio somewhere, but AFAIK it is not integrated
> into twisted in any way.
> > And I guess using deferToThread is not the right approach for I/O
> operations.
> >
>
> Usually writes take _very_ little time. The data is only copied to kernel
> space and control is returned. The data is then written to disk later.
> Reading will probably be a bit more problematic, but it will still take
> little time compared to (common) network IO.
>
> I suggest starting with just doing writes and reads directly and if it
> becomes a problem, then start to solve it. You can create a small file
> wrapper which returns a defer (just use return defer.succeed() and then
> change the implementation if it becomes necessary.
>
> --
>    - Henrik
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From Marcin.Kasperski at softax.com.pl  Fri Aug 10 05:42:24 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Fri, 10 Aug 2007 11:42:24 +0200
Subject: [Twisted-Python] Re: non-blocking interface for local file system
	operations
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
	<f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
	<e24a65c90708092124l6e55b53ag28e14f1c049c13df@mail.gmail.com>
Message-ID: <87bqdfk9of.fsf@cauchy.softax.local>

>   Thanks for the information. It was really helpful. I was thinking
> that my IO operations would be an issue. I will take your suggestion
> and do IO directly by now.

One thing to consider if it really turns out to be a problem
is to replace plain files with database.

Comparing performance of file access with performance of database
access is large and non-trivial topic, but there are usage schemes
where databases win. And there are asynchronous drivers, like
pgasync, available.





From andy at thecablelounge.com  Fri Aug 10 13:22:26 2007
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 10 Aug 2007 10:22:26 -0700
Subject: [Twisted-Python] Job offer for Python Lead, LA or the Bay Area
Message-ID: <46BC9ED2.60509@thecablelounge.com>

DigiSynd is an experienced team of Los Angeles-based digital pioneers 
with a unique vision: to create, produce, syndicate, and market online 
entertainment.

DigiSynd uses time-honored storytelling techniques and valuable lessons 
from traditional media, but applies them in a medium of online 
communities, virtual experiences, interactivity and user-generated content.

They're based in LA, Burbank - across the street from the Warner Bros Lot.

Digisynd are seeking a seasoned python engineer. Ideally you:

     * live and breath python
     * have exceptional SQL skills
     * have experience with capturing, and reporting off large datasets 
in real time
     * have extensive experience with web services - both creating and 
utilizing

You should be based in LA, or in the bay area.  This is a great 
opportunity to put together and lead a team of developers, while working 
in a very interesting space.

If interested, send your resume through to jobs14 at digisynd.com

I'm trekking out to the SuperHappyDevHouse at Los Gatos tomorrow.  If 
you know anyone who is going that might be interested, just tell them to 
grab me.

cheers!
Andy.



From jml at mumak.net  Sat Aug 11 22:27:15 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 12 Aug 2007 12:27:15 +1000
Subject: [Twisted-Python] Specifications
Message-ID: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>

Hello all,

I've seen a couple of specifications on the Twisted wiki referred to
in Twisted tickets. This is great. I'm all for specs, particularly
when they are there simply to help clarify ideas and provoke
discussion.

However, if we are going to have more than one spec, it'd be nice to
have a list of them somewhere. It would also be very helpful if specs
had some sort of status.

Launchpad provides something like this at
https://blueprints.launchpad.net/twisted.

jml



From exarkun at twistedmatrix.com  Sun Aug 12 00:05:04 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 12 Aug 2007 04:05:04 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1186891504.68.1690773430@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-05 through 2007-08-12
Bugs opened: 10    Bugs closed: 9  Total open bugs: 1010 (+1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -4          |Conch:  +1             
|Enhancement:  -1  |High:     -1          |Core:   +2             
|Task:         +1  |Normal:   +7          |Lore:   +1             
                                          |Mail:   -1             
                                          |Names:  +0             
                                          |Trial:  +0             
                                          |Vfs:    +2             
                                          |Words:  -3             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2775] Crunchy Output (opened by tehminkeh)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2775

[#2783] twisted.internet.task.Clock does not implement IReactorTime (opened by dreid)
    defect          core       http://twistedmatrix.com/trac/ticket/2783

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm) (CLOSED, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

                    ===== Normal =====
[#2776] Define a uniform way to make objects immutable. (opened by ralphm)
    task            core       http://twistedmatrix.com/trac/ticket/2776

[#2777] Fix SRVConnector to deal with bad nameservers. (opened by ralphm)
    enhancement     names      http://twistedmatrix.com/trac/ticket/2777

[#2778] TestCase instances re-used for test method runs when trial is invoked with --until-failure (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2778

[#2779] os.setsid throws exception in PTYProcess on AIX (opened by chrispritchard)
    defect          core       http://twistedmatrix.com/trac/ticket/2779

[#2780] Remove vfs.pathutils (opened by cablehead)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2780

[#2781] Just use producers and consumers for the vfs ftp adapter (opened by cablehead)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2781

[#2782] Channel is not notified, if Connection fails between openChannel and ssh_CHANNEL_OPEN_CONFIRM (opened by cebewee)
    defect          conch      http://twistedmatrix.com/trac/ticket/2782



Closed Bugs
______________________
                    ===== Highest =====
[#2771] exceptionFromStreamError fails to parse errors correctly (opened by ralphm, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2771

[#2290] nameservers resolved in wrong order (opened by ilia, closed by exarkun, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/2290

[#1917] Typo in twisted.mail.mail.DomainWithDefaultDict (opened by therve, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1917

[#2773] t.w.p.j.xmlstream.toResponse fails on stanzas without id attribute (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2773

[#2770] Allow JIDs to be used as key in dicts (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2770

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#1630] trial test hangs if using the twisted enterprise connection pool (opened by harshaw, closed by exarkun, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1630



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2783] twisted.internet.task.Clock does not implement IReactorTime (since 2007-08-11 18:14:57).

Mean open ticket age: 500 days, 21:14:39.812723.
Median: 391 days, 8:26:03.380050.
Standard deviation: 395 days, 15:09:23.171000.
Interquartile range: 483 days, 5:01:00.

Mean time between ticket creation and ticket resolution: 119 days, 14:46:10.149769.
Median: 14 days, 3:27:47.
Standard deviation is 222 days, 21:59:34.405886.
The interquartile range is 125 days, 12:43:31.

Mean time spent in review: 60 days, 17:22:38.145920.
Median: 4 days, 0:03:10.
Standard deviation: 132 days, 8:20:06.481949.
Interquartile range: 28 days, 13:23:16.

Mean number of times a ticket is reviewed: 1.85922330097.
Median: 1
Standard deviation: 1.4260364579.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    21 unique ticket reporters
    10 unique ticket reviewers
    5 unique ticket resolvers
In the last 24 weeks,
    86 unique ticket reporters
    14 unique ticket reviewers
    17 unique ticket resolvers
In the last 48 weeks,
    158 unique ticket reporters
    21 unique ticket reviewers
    26 unique ticket resolvers




From ladaan at iptel.org  Sun Aug 12 05:01:42 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Sun, 12 Aug 2007 11:01:42 +0200
Subject: [Twisted-Python] returning value after addCallback
In-Reply-To: <1186672305.30144.9.camel@doorstop.net.ic.ac.uk>
References: <46BB0BCA.8050000@iptel.org>
	<1186672305.30144.9.camel@doorstop.net.ic.ac.uk>
Message-ID: <46BECC76.8040507@iptel.org>

Phil Mayers wrote:
>> test = PingTracker()
>> d = test.check(domain[0], test_opts)
>>
>> print d  # this returns Deferred...
>>
>> test.SipCallback()   # this returns None
>>     
>
> Yes, because no Twisted code has run yet
>
>   
>> reactor.run()
>>     
>
> ...because you haven't started the reactor.
>
>   
So how should I run reactor then ?
Yes, I have difficulties to get on the right "twisted track".
I've seen many examples but probably didn't grasp the way how it works.

Lada
> I don't think you properly understand how Twisted works. Your code is
> executed in response to events (packets being received, timers expiring,
> reactor startup/shutdown events). The reactor runs the event loop.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   




From glyph at divmod.com  Sun Aug 12 11:09:38 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 12 Aug 2007 15:09:38 -0000
Subject: [Twisted-Python] Specifications
In-Reply-To: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>
References: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>
Message-ID: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>

On 02:27 am, jml at mumak.net wrote:
>I've seen a couple of specifications on the Twisted wiki referred to
>in Twisted tickets. This is great. I'm all for specs, particularly
>when they are there simply to help clarify ideas and provoke
>discussion.

>However, if we are going to have more than one spec, it'd be nice to
>have a list of them somewhere. It would also be very helpful if specs
>had some sort of status.

>Launchpad provides something like this at
>https://blueprints.launchpad.net/twisted.

Frankly, I don't understand the point of specifications as such.  In my 
worldview, the specification is simply a ticket's description.  The only 
reason we'd need a separate "specifications" tracker as opposed to 
"tickets" is that trac's support for attachments and statuses is 
somewhat weak.  The only reason to use wiki pages rather than ticket 
descriptions is because ticket descriptions are unversioned.  On the 
other hand, I have found that the lack of discussion on wiki pages is an 
equally problematic feature.

Twisted's existing list of tasks (trac tickets) is already completely 
unmanageable due to the disparity between the number of people filing 
tickets and the number of people triaging them.  I would definitely 
prefer it if we did not start using another list of tasks (launchpad 
"blueprints", launchpad tickets) until we have some way to manage what 
we already have.



From exarkun at divmod.com  Sun Aug 12 12:34:30 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 12 Aug 2007 12:34:30 -0400
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>
Message-ID: <20070812163430.4947.942840888.divmod.quotient.21425@ohm>

On Sun, 12 Aug 2007 15:09:38 -0000, glyph at divmod.com wrote:
>On 02:27 am, jml at mumak.net wrote:
>>I've seen a couple of specifications on the Twisted wiki referred to
>>in Twisted tickets. This is great. I'm all for specs, particularly
>>when they are there simply to help clarify ideas and provoke
>>discussion.
>
>>However, if we are going to have more than one spec, it'd be nice to
>>have a list of them somewhere. It would also be very helpful if specs
>>had some sort of status.
>
>>Launchpad provides something like this at
>>https://blueprints.launchpad.net/twisted.
>
>Frankly, I don't understand the point of specifications as such.  In my 
>worldview, the specification is simply a ticket's description.  The only 
>reason we'd need a separate "specifications" tracker as opposed to "tickets" 
>is that trac's support for attachments and statuses is somewhat weak.  The 
>only reason to use wiki pages rather than ticket descriptions is because 
>ticket descriptions are unversioned.  On the other hand, I have found that 
>the lack of discussion on wiki pages is an equally problematic feature.

Personally, I don't want discussion features for the things for which I have
been using specification wiki pages.  I can have discussions with people in
meatspace or on IRC.  I want the *outcome* of a discussion on the page.

>
>Twisted's existing list of tasks (trac tickets) is already completely 
>unmanageable due to the disparity between the number of people filing 
>tickets and the number of people triaging them.  I would definitely prefer 
>it if we did not start using another list of tasks (launchpad "blueprints", 
>launchpad tickets) until we have some way to manage what we already have.

Chris and I have been using wiki pages for this primarily as a shared work
space to hash out ideas.  None of the topics we've approached has actually
been implemented yet, so I'm not really sure what the next phase of this
looks like.  However, I would expect that once there is some agreement about
a particular specification, whatever necessary tickets will be created and
they will live out the normal ticket life cycle.  Whether the specification
wiki pages live on past the implementation task isn't something I've thought
a lot about.  Of the top of my head, I don't see any reason for them to, but
I also can't think of too many compelling reasons to delete them, either.

To respond to one of jml's points, though, here is a list of the
specifications which currently exist:

  http://twistedmatrix.com/trac/wiki/TitleIndex

Just search for "Specification" ;)

In response to the 

Jean-Paul



From glyph at divmod.com  Sun Aug 12 16:48:07 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 12 Aug 2007 20:48:07 -0000
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812163430.4947.942840888.divmod.quotient.21425@ohm>
References: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>
	<20070812163430.4947.942840888.divmod.quotient.21425@ohm>
Message-ID: <20070812204807.21185.1648981205.divmod.xquotient.731@joule.divmod.com>

On 04:34 pm, exarkun at divmod.com wrote:
>On Sun, 12 Aug 2007 15:09:38 -0000, glyph at divmod.com wrote:
>>On 02:27 am, jml at mumak.net wrote:

>Personally, I don't want discussion features for the things for which I 
>have
>been using specification wiki pages.  I can have discussions with 
>people in
>meatspace or on IRC.  I want the *outcome* of a discussion on the page.

I can see the value of that.  What I'm referring to is the synergy 
between, for example, the wikipedia "talk" page and the main entry page. 
There's value in discussion, and there's value in viewing only the 
outcome so as not to be confused by the discussion.  Trac has a nod to 
this in that tickets have both a description and a comments section; the 
problem with this being the aforementioned lack of versioning on the 
comments section.

In other words the fact that we even need to have this discussion is 
entirely a problem with the tools in question, not a problem with the 
idea of specifications.  Specifications are *great*.  I wish we had 
specifications for everything.  Tickets (at least for small things) 
should ideally always contain or refer to a full specification of what 
is being done and why.
>Chris and I have been using wiki pages for this primarily as a shared 
>work
>space to hash out ideas.  None of the topics we've approached has 
>actually
>been implemented yet, so I'm not really sure what the next phase of 
>this
>looks like.  However, I would expect that once there is some agreement 
>about
>a particular specification, whatever necessary tickets will be created 
>and
>they will live out the normal ticket life cycle.  Whether the 
>specification
>wiki pages live on past the implementation task isn't something I've 
>thought
>a lot about.  Of the top of my head, I don't see any reason for them 
>to, but
>I also can't think of too many compelling reasons to delete them, 
>either.

I don't have any problem with this, either.  Any kind of web-space is 
appropriate for this kind of forming-ideas planning, and the Twisted 
wiki particularly so, for Twisted features.

Once the specification is relatively fixed (and maybe the process of 
fixing a specification so that is "officially" agreed upon needs some 
discussion) then just having a link in the ticket's description to the 
wikiword of its specification would also be pretty good.

The thing I'm concerned about is that once we start having reports of 
open specifications, statuses for them, owners, assignees, and so on, 
it's going to be a parallel tracker with separate priorities and 
workflow.  I don't even object to *that* in principle, it might make 
sense on a project with more resources (more "management overhead" in 
particular).  I just can't see us coping with it now.

Sorry if this all seems overly wordy, I just want to make sure it's 
clear how narrow the scope of my objection is :).  I don't want to 
discourage anyone from planning, specifying, writing down things about 
Twisted in any format they so choose - but I am concerned about that 
process creating more work.
>To respond to one of jml's points, though, here is a list of the
>specifications which currently exist:
>
>  http://twistedmatrix.com/trac/wiki/TitleIndex
>
>Just search for "Specification" ;)

And in closing, I don't object to this informal mechanism either :).



From exarkun at divmod.com  Sun Aug 12 17:49:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 12 Aug 2007 17:49:27 -0400
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812204807.21185.1648981205.divmod.xquotient.731@joule.divmod.com>
Message-ID: <20070812214927.4947.1581930272.divmod.quotient.21473@ohm>

On Sun, 12 Aug 2007 20:48:07 -0000, glyph at divmod.com wrote:
> [snip]
>
>The thing I'm concerned about is that once we start having reports of open 
>specifications, statuses for them, owners, assignees, and so on, it's going 
>to be a parallel tracker with separate priorities and workflow.  I don't 
>even object to *that* in principle, it might make sense on a project with 
>more resources (more "management overhead" in particular).  I just can't see 
>us coping with it now.

Okay.  I don't want any reports or statuses or anything for specifications,
so I think we're in agreement.

Jean-Paul



From natester at gmail.com  Mon Aug 13 17:50:04 2007
From: natester at gmail.com (Nathaniel Haggard)
Date: Mon, 13 Aug 2007 15:50:04 -0600
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <20070806114953.4947.487566896.divmod.quotient.19454@ohm>
References: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>
	<20070806114953.4947.487566896.divmod.quotient.19454@ohm>
Message-ID: <4adac7a30708131450g7879608fh49d26074d323512e@mail.gmail.com>

Like this?

from twisted.internet import task,reactor,abstract
from twisted.protocols import basic
import os

class FileFollowerTransport(object):
    """Iterate through a file while it is updated.

    """

    interval = 1

    def __init__(self, filename, interval=None):
        self.filename = filename
        self.interval = interval or self.interval
        self.stat = None
        self.offset = 0
        self.lines = []
        self.lc = task.LoopingCall(self.follow)

    #
    # File following

    def run(self):
        self.lc.start(self.interval)

    def follow(self):
        if self.hasChanged():
            data = self.readChange()
            if data:
                self.protocol.dataReceived(data)

    def hasChanged(self):
        stat = os.stat(self.filename)
        if stat != self.stat:
            self.stat = stat
            return True
        return False

    def readChange(self):
        file = open(self.filename)
        file.seek(self.offset)
        data = file.read()
        self.offset = file.tell()
        file.close()
        return data

class stuby(basic.LineReceiver):

    def dataReceived(self, data):
        print data


if __name__ == '__main__':
    l = stuby()
    f = FileFollowerTransport('test')
    f.protocol = l
    f.run()
    l.makeConnection(f)
    reactor.run()



On 8/6/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Mon, 6 Aug 2007 10:57:19 +0200, Yoann Aubineau <
> yoann.aubineau at wengo.com> wrote:
> >Hi Andrew,
> >
> >I wrote a class that follows a file (eg. log file) and provides an
> iterator
> >to walk through it. Don't know if it may be of any use for you (or
> others).
>
> Hi Yoann, thanks for sharing.
>
> >
> >class FileFollower(object):
> >    """Iterate through a file while it is updated.
> >
> >    >>> file = FileFollower("/tmp/testfile")
> >    >>> file.interval = 5
> >    >>> for line in file:
> >    ...     print line
> >    """
> >
> >    interval = 1
> >
> >    def __init__(self, filename, interval=None):
> >        self.filename = filename
> >        self.interval = interval or self.interval
> >        self.stat = None
> >        self.offset = 0
> >        self.lines = []
> >        self.running = True
> >
> >    #
> >    # File following
> >
> >    def follow(self):
> >        while self.running:
> >            if self.hasChanged():
> >                data = self.readChange()
> >                if data:
> >                    self.dataReceived(data)
> >                    break
> >            time.sleep(self.interval)
> >
> >    def hasChanged(self):
> >        stat = os.stat(self.filename)
> >        if stat != self.stat:
> >            self.stat = stat
> >            return True
> >        return False
> >
> >    def readChange(self):
> >        file = open(self.filename)
> >        file.seek(self.offset)
> >        data = file.read()
> >        self.offset = file.tell()
> >        file.close()
> >        return data
> >
> >    #
> >    # Data buffering
> >
> >    def dataReceived(self, data):
> >        lines = data.split(os.linesep)
> >        lines = lines[:-1]
> >        for line in lines:
> >            self.lineReceived(line)
> >
> >    def lineReceived(self, line):
> >        self.lines.append(line)
> >
> >    #
> >    # Iterator implementation
> >
> >    def __iter__(self):
> >        return self
> >
> >    def next(self):
> >        if not self.lines:
> >            self.follow()
> >        line = self.lines.pop(0)
> >        return line
> >
>
> In order to make this class more usable within a Twisted application, I'd
> make a few suggestions:
>
> Separate the transport from the protocol.  All of the methods in the area
> commented "file following" are basically transport methods: they know how
> to get the underlying bytes (by polling and eventually reading).  The
> protocol implementation is basically the dataReceived and lineReceived
> methods.  With separation between the transport and the protocol, you
> don't even need to implement these, since you can just use LineReceiver
> from twisted.protocols.basic.
>
> Do the polling in a cooperative way.  Using an infinite for loop and a
> time.sleep call has the consequence of tying up an entire thread.  This
> means nothing else can happen unless you run the follow method of this
> class in a new, dedicated thread.  If you use the reactor to schedule
> the checks instead, then this can be used alongside other Twisted code
> without having to deal with threading.  twisted.internet.task.LoopingCall
> might be of particular interest.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070813/6c74965c/attachment.htm 

From andreww at datanet.ab.ca  Wed Aug 15 06:13:16 2007
From: andreww at datanet.ab.ca (Andrew Warkentin)
Date: Wed, 15 Aug 2007 04:13:16 -0600
Subject: [Twisted-Python] Best way to write a modularized proxy?
Message-ID: <46C2D1BC.8070807@datanet.ab.ca>

I am writing a modular multi-protocol proxy (initially for HTTP, and 
later HTTPS and possibly FTP as well) using Twisted. It will consist of 
a small core that handles initialization and loading of modules, a 
module for each protocol (which will consist of a part that accepts 
connections and a part that connects to the remote server), and several 
"filter" modules (which will be inserted in a "stack" between the two 
halves of the protocol module) for things like caching and filtering. 
Would there be a better way to structure it?

Would the best way to handle the modules be to write a ServerFactory 
subclass that wraps the stack of modules? I understand the basic 
concepts behind Twisted, but am not totally familiar with the API, so I 
am not exactly sure what is the best way to do things.



From ldanielburr at mac.com  Wed Aug 15 06:55:30 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Wed, 15 Aug 2007 05:55:30 -0500
Subject: [Twisted-Python] Best way to write a modularized proxy?
In-Reply-To: <46C2D1BC.8070807@datanet.ab.ca>
References: <46C2D1BC.8070807@datanet.ab.ca>
Message-ID: <op.tw3kmsg73oj628@l-daniel-burrs-computer.local>

Hi Andrew,

On Wed, 15 Aug 2007 05:13:16 -0500, Andrew Warkentin  
<andreww at datanet.ab.ca> wrote:

> I am writing a modular multi-protocol proxy (initially for HTTP, and  
> later HTTPS and possibly FTP as well) using Twisted. It will consist of  
> a small core that handles initialization and loading of modules, a  
> module for each protocol (which will consist of a part that accepts  
> connections and a part that connects to the remote server), and several  
> "filter" modules (which will be inserted in a "stack" between the two  
> halves of the protocol module) for things like caching and filtering.  
> Would there be a better way to structure it?
>

Replace the word "module" with IService, and I think your design seems
reasonable.

> Would the best way to handle the modules be to write a ServerFactory  
> subclass that wraps the stack of modules? I understand the basic  
> concepts behind Twisted, but am not totally familiar with the API, so I  
> am not exactly sure what is the best way to do things.
>

I'd write an IService implementation for each type of proxy I wanted
to deploy, hang them all off of a MultiService, and go from there.

Hope this helps,

L. Daniel Burr



From daniel at keystonewood.com  Wed Aug 15 09:26:26 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 15 Aug 2007 09:26:26 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<m2wswl3ykx.fsf@valheru.db3l.homeip.net>
	<6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>
Message-ID: <983850FE-D680-4B3A-A70B-2F1F6FDE68B4@keystonewood.com>

David, Nicola and Phil,

Thanks very much for your feedback to my questions on this discussion  
thread. I have devised a working solution. Failed remote method calls  
due to dropped connections now seems to be a thing of the past (knock  
on wood...). I have attached a file that contains my "RecallClient"  
and "RecallServer" implementations as well as a very short example to  
show how they can be used (the usage examples are untested). Note  
that this implementation is tailored to my specific needs, and  
therefore is definitely not a general solution. Here are some notable  
limitations (there may be more):

1. The client is tightly coupled to the pb.Root object.
2. "Posting" server methods cannot return data structures that  
contain deferreds (e.g. a list of deferreds). I'm not sure if that's  
even supported by PB anyway? I haven't tried it so I don't know.

However, maybe it will be useful to someone else? I'd be happy to  
hear your feedback if you decide to take a look at it.

~ Daniel

-------------- next part --------------
A non-text attachment was scrubbed...
Name: recallclientserver.py
Type: text/x-python-script
Size: 5019 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070815/3cd8384b/attachment.bin 
-------------- next part --------------


From ladaan at iptel.org  Wed Aug 15 12:50:23 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 15 Aug 2007 18:50:23 +0200
Subject: [Twisted-Python] threads monitoring
Message-ID: <46C32ECF.40902@iptel.org>

Hello,
How can I monitor the number of created threads when I use just function 
deferToThreds in my code?

Could you give me an example, please?

If I do following:   ThreadPool.dumpStats()

I get

TypeError: unbound method dumpStats() must be called with ThreadPool 
instance as first argument (got nothing instead)

Here I understand I have to make an instance of ThreadPool, but if I 
just use deferToThreads from threads module
I'm not sure how to accomplish it.

Thanks,
Ladislav



From andreas at kostyrka.org  Wed Aug 15 13:10:12 2007
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Wed, 15 Aug 2007 19:10:12 +0200
Subject: AW: [Twisted-Python] threads monitoring
Message-ID: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>

Well, I'm not at the keyboard, but you'll probably need to take a look at the source code which threadpool instance is used by deferToThread.

Andreas

-- Urspr?ngl. Mitteil. --
Betreff:	[Twisted-Python] threads monitoring
Von:	Ladislav Andel <ladaan at iptel.org>
Datum:		15.08.2007 16:53

Hello,
How can I monitor the number of created threads when I use just function 
deferToThreds in my code?

Could you give me an example, please?

If I do following:   ThreadPool.dumpStats()

I get

TypeError: unbound method dumpStats() must be called with ThreadPool 
instance as first argument (got nothing instead)

Here I understand I have to make an instance of ThreadPool, but if I 
just use deferToThreads from threads module
I'm not sure how to accomplish it.

Thanks,
Ladislav

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ladaan at iptel.org  Wed Aug 15 13:31:45 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 15 Aug 2007 19:31:45 +0200
Subject: AW: [Twisted-Python] threads monitoring
In-Reply-To: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>
References: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>
Message-ID: <46C33881.10106@iptel.org>

As I could see  there are 2 approaches.
1) deferToThread which calls callInThread method and reactor takes care 
of threads
2) or I can create an instance of ThreadPool and manage threads manually 
where I have to care of dispatching request
if I'm not mistaken.

So here it is but is there any answer to my original question?

Lada

Andreas Kostyrka wrote:
> Well, I'm not at the keyboard, but you'll probably need to take a look at the source code which threadpool instance is used by deferToThread.
>
> Andreas
>
> -- Urspr?ngl. Mitteil. --
> Betreff:	[Twisted-Python] threads monitoring
> Von:	Ladislav Andel <ladaan at iptel.org>
> Datum:		15.08.2007 16:53
>
> Hello,
> How can I monitor the number of created threads when I use just function 
> deferToThreds in my code?
>
> Could you give me an example, please?
>
> If I do following:   ThreadPool.dumpStats()
>
> I get
>
> TypeError: unbound method dumpStats() must be called with ThreadPool 
> instance as first argument (got nothing instead)
>
> Here I understand I have to make an instance of ThreadPool, but if I 
> just use deferToThreads from threads module
> I'm not sure how to accomplish it.
>
> Thanks,
> Ladislav
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   




From phil at bubblehouse.org  Wed Aug 15 13:50:33 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 15 Aug 2007 13:50:33 -0400
Subject: [Twisted-Python] threads monitoring
In-Reply-To: <46C32ECF.40902@iptel.org>
References: <46C32ECF.40902@iptel.org>
Message-ID: <07233834-FC56-4472-A8A4-4495EFBB9096@bubblehouse.org>

On Aug 15, 2007, at 12:50 PM, Ladislav Andel wrote:

> Hello,
> How can I monitor the number of created threads when I use just  
> function deferToThreds in my code?
>
> Could you give me an example, please?
>
> If I do following:   ThreadPool.dumpStats()
>
> I get
>
> TypeError: unbound method dumpStats() must be called with  
> ThreadPool instance as first argument (got nothing instead)
>
> Here I understand I have to make an instance of ThreadPool, but if  
> I just use deferToThreads from threads module
> I'm not sure how to accomplish it.

If you're using the reactor in the usual fashion, you can grab its  
'threadpool' attribute.

         from twisted.internet import reactor
         if(reactor.threadpool):
             reactor.threadpool.dumpStats()

This attribute will be None util you've called one of the thread- 
related reactor methods.

-phil



From nayuhz at gmail.com  Wed Aug 15 22:32:28 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Thu, 16 Aug 2007 10:32:28 +0800
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
Message-ID: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>

hi all,
I read a text about twisted vs thread, who can tell mewhy Twsited is
efficiently in one thread?
especially, if clients require long-running processing above and beyond
socket calls, or in the multi-processor system?
look at this: http://kaishaku.org/twisted-vs-threads/

-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070816/58006162/attachment.htm 

From Andy at NewWorldElectric.com  Wed Aug 15 23:05:04 2007
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Wed, 15 Aug 2007 23:05:04 -0400
Subject: [Twisted-Python] Cookies in Client?
Message-ID: <37d49ed40708152005r5175fd6fj5eb4023913471711@mail.gmail.com>

I'm trying to use twisted to drive a website with forms-based
authentication.  The target site is a php-based, so I need to grab and
return a PHPSESSIONID cookie to preserve the session.  Is there some twisted
support for that which I can hook into?

-Andy Fundinger

-- 
Blog:  http://channel3b.wordpress.com
Second Life Name:  Ciemaar Flintoff

#Python 3001:
from future import time.travel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070815/0ada34c1/attachment.htm 

From radix at twistedmatrix.com  Wed Aug 15 23:31:08 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 15 Aug 2007 23:31:08 -0400
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
In-Reply-To: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
References: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
Message-ID: <60ed19d40708152031p51ee1f74scd9bbc5c03a7a97d@mail.gmail.com>

On 8/15/07, Yan Zhu <nayuhz at gmail.com> wrote:
>
> hi all,
> I read a text about twisted vs thread, who can tell mewhy Twsited is
> efficiently in one thread?
> especially, if clients require long-running processing above and beyond
> socket calls, or in the multi-processor system?
> look at this: http://kaishaku.org/twisted-vs-threads/



I recommend twisted.internet.threads.deferToThread.

Hope this helps,

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070815/018bdb29/attachment.htm 

From hellojianwu at gmail.com  Thu Aug 16 00:58:32 2007
From: hellojianwu at gmail.com (jian wu)
Date: Wed, 15 Aug 2007 21:58:32 -0700
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
In-Reply-To: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
References: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
Message-ID: <d81c17cd0708152158i3e7acabbk7e5e3450ce8d608e@mail.gmail.com>

Hi,

I think that your question can be answered in three parts:

1. who can tell me why Twsited is efficiently in one thread?

Assuming your "one thread" is actually referring to the Twisted reactor
thread handling IO event, you can take a look at a good
Java One 2007 Tech Session "Tricks and Tips With NIO Using
the Grizzly Framework" at:
http://developers.sun.com/learning/javaoneonline/j1sessn.jsp?sessn=TS-2992&yr=2007&track=5

"Tip #6: To Thread or not to Thread" started from Slide 61 actually tells
you which threading model has the best performance based on the
the benchmark did by Sun People.

Since both Java NIO and Python Twisted actually utilize the same
Socket Select/Poll mechanism for Non-blocking Network IO, hopefully
this presentation will answer your "one thread" question.

2. What is a fair benchmark for Non-blocking Networking Framework?

Any Non-blocking Networking Framework is at least trying to resolve
the Scalability Problem occurred when a server has high volume concurrent
network connections from hundreds and thousands of clients.

Usually, a good Non-blocking Networking Benchmark should measure
how a server will perform when the number of opened connections is
increasing from 100 to 1000 to ...

If you really want to find a good benchmark to measure the Non-blocking
Network Framework, you can take a look at a good blog entry "Apache Mina
and Twisted Matrix benchmarks" at:
  http://blog.bluendo.com/ff/mina-and-twisted-matrix-benchmarks

( Note: Apache Mina is a Java NIO Application Framework )

3. What about in multi-processor system?

Since Twisted does support reactor thread pool, this actually is
more general question: how python threading module will utilize/
benefit from the multi-core processor system?

And, you should be able to find plenty discussion at Python Mailing
list, such as "Dual Core outlook" at:
http://mail.python.org/pipermail/python-list/2006-February/366002.html

My three cents:-).

Jian

On 8/15/07, Yan Zhu <nayuhz at gmail.com> wrote:
> hi all,
> I read a text about twisted vs thread, who can tell mewhy Twsited is
> efficiently in one thread?
> especially, if clients require long-running processing above and beyond
> socket calls, or in the multi-processor system?
> look at this: http://kaishaku.org/twisted-vs-threads/
>
> --
> eSX
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From andreww at datanet.ab.ca  Thu Aug 16 08:45:58 2007
From: andreww at datanet.ab.ca (Andrew Warkentin)
Date: Thu, 16 Aug 2007 06:45:58 -0600
Subject: [Twisted-Python] Best way to write a modularized proxy?
In-Reply-To: <op.tw3kmsg73oj628@l-daniel-burrs-computer.local>
References: <46C2D1BC.8070807@datanet.ab.ca>
	<op.tw3kmsg73oj628@l-daniel-burrs-computer.local>
Message-ID: <46C44706.10202@datanet.ab.ca>

L. Daniel Burr wrote:

>> Would the best way to handle the modules be to write a ServerFactory  
>> subclass that wraps the stack of modules? I understand the basic  
>> concepts behind Twisted, but am not totally familiar with the API, so 
>> I  am not exactly sure what is the best way to do things.
>>
>
> I'd write an IService implementation for each type of proxy I wanted
> to deploy, hang them all off of a MultiService, and go from there.
>
What would be the best way to tie together the filter objects within the 
service? I would like the filter modules to have a common interface and 
have common code for handling the stack of filters.




From ladaan at iptel.org  Thu Aug 16 08:52:49 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Thu, 16 Aug 2007 14:52:49 +0200
Subject: [Twisted-Python] again deferToThreads
Message-ID: <46C448A1.1050103@iptel.org>

Hello,
I have a two functions which I run in one thread called via deferToThread.
There is function called siptest_f and function pingNode test.
siptest_f returns a dictionary and pingNode returns the average time out 
of 3 received packets.
Below is code I use. I run it through reactor event loop which is not 
shown here.
My problem is that the function on its own returns correct results but 
if use it within following code
I get always different results and mostly wrong.
There should probably be some way of locking but I'm not sure how to do 
it correctly.
If you have any other suggestions, there are welcomed.

Lada

------------------------------------------------------------------------

def serverTest(dns_res, index):
    """ Function for SIP testing """
   
    from twisted.internet import threads
    from siptest import siptest_f
    from icmp_ping2 import pingNode
#    import thread
   
   
    print "here will be siptest for ", dns_res
    #stdoutmutex = thread.allocate_lock()

    def test(dns_res, test_opts):
        if dns_res:
            icmpres =  pingNode(alive=0, timeout=1.0, ipv6=0, number=3, 
node=dns_res, flood=0, size=56)
            sipres = siptest_f(dns_res, test_opts)
       
           # stdoutmutex.acquire()  
            sipres['ICMP'] = icmpres
           # stdoutmutex.release()
           
            return sipres
        raise ValueError("Error occured")   
   
    def sipResult(d):

        print d
        #return d

    def printError(failure):
        print failure

    sd = threads.deferToThread(test, dns_res, test_opts)

    sd.addCallback(sipResult)
    sd.addErrback(printError)




From matusis at yahoo.com  Fri Aug 17 19:21:41 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 17 Aug 2007 16:21:41 -0700
Subject: [Twisted-Python] scheduling timers with long intervals
Message-ID: <010901c7e125$5eb77770$1c266650$@com>

I have a server that is running for weeks without restart, under significant
load.

We are considering adding a function to it that requires setting long timers
like

 

twisted.internet.reactor.callLater(604800, func)

 

i.e. scheduling events one week ahead. There will be up to 500 timers active
at any given time.

 

I do not know how the scheduler works. Will having these timers with very
long intervals significantly tax the performance, since the reactor will
have to check on their status with every churn of the reactor loop?

 

Thanks

 

Alec

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070817/780328c5/attachment.htm 

From matusis at yahoo.com  Fri Aug 17 19:25:19 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 17 Aug 2007 16:25:19 -0700 (PDT)
Subject: [Twisted-Python] scheduling timers with long interval
Message-ID: <728708.73203.qm@web81111.mail.mud.yahoo.com>

I have a server that is running for weeks without restart, under significant load.
I am considering adding a function to it that requires setting long timers like
 
twisted.internet.reactor.callLater(604800, func)
 
i.e. scheduling events one week ahead. There will be up to 500 timers active at any given time.
 
I do not know how the scheduler works. Will having these timers with very long intervals significantly tax the performance, since the reactor will have to check on their status with every churn of the reactor loop?
 
Thanks
 
Alec



From exarkun at divmod.com  Fri Aug 17 22:54:12 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 17 Aug 2007 22:54:12 -0400
Subject: [Twisted-Python] scheduling timers with long interval
In-Reply-To: <728708.73203.qm@web81111.mail.mud.yahoo.com>
Message-ID: <20070818025412.4947.1670130380.divmod.quotient.22874@ohm>

On Fri, 17 Aug 2007 16:25:19 -0700 (PDT), Alec Matusis <matusis at yahoo.com> wrote:
>I have a server that is running for weeks without restart, under significant load.
>I am considering adding a function to it that requires setting long timers like
>
>twisted.internet.reactor.callLater(604800, func)
>
>i.e. scheduling events one week ahead. There will be up to 500 timers active at any given time.
>
>I do not know how the scheduler works. Will having these timers with very long intervals significantly tax the performance, since the reactor will have to check on their status with every churn of the reactor loop?

There is a minor memory cost associated with each task.  Beyond that, there
is a roughly log(N) insertion cost for new DelayedCalls, where N is the
number of existing outstanding calls.  The scheduling itself is basically
constant time.  None of the reactors should even notice if you have just
500 outstanding DelayedCalls.

Jean-Paul



From jj.peeters at gmail.com  Sat Aug 18 17:29:28 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Sat, 18 Aug 2007 23:29:28 +0200
Subject: [Twisted-Python] Questions about the Perspective Broker login
	mechanism
Message-ID: <1187472568.6969.8.camel@troll>

Hi readers,

I'm looking for the person who implements the actual version of the
login mechanism in the Perspective Broker. 
More precisely, I wonder what are the reasons to have chosen a
challenge/response strategy to do login.

I use the Perspective Broker in a project and before modifying anything,
I want to be sure of what I do.

Thank you for your attention,
Julien.




From db3l.net at gmail.com  Sat Aug 18 19:18:36 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 18 Aug 2007 19:18:36 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
Message-ID: <m21we0bfeb.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> I'm looking for the person who implements the actual version of the
> login mechanism in the Perspective Broker. 
> More precisely, I wonder what are the reasons to have chosen a
> challenge/response strategy to do login.

I'm only a user of Twisted and not a core developer, but I suspect for
all the same reasons you'd choose such a system in general (which
aren't PB, nor Twisted, specific).  Avoiding the transmission of raw
authentication information in favor of generated information such as
challenge/response data helps prevent a slew of possible attacks
(injection, playback, man-in-the-middle, etc...) when such information
is available on the wire.

Note however that if you're implying that PB authentication must be
challenge/response, that's not entirely accurate.  While it's true the
default Portal and ClientFactory implementations make use of a
challenge/response approach, you could just as easily change that to
be whatever you would like including simple clear text transmission of
authentication information in one step.  And that exchange is distinct
from the credential checker itself so can be replaced without changing
anything else.

Why you'd bother (when challenge/response is implemented for free) is
another question, but it's certainly possible.  I suppose if you're
using an SSL link for the PB connection with appropriate certificates
you could consider the challenge/response an extra round trip, but
it's got to be pretty insignificant compared to the overall session.

-- David




From exarkun at twistedmatrix.com  Sun Aug 19 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1187496303.39.1151132164@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-12 through 2007-08-19
Bugs opened: 9    Bugs closed: 5  Total open bugs: 1014 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -2          |Conch:  +1             
|Enhancement:  +1  |Normal:   +7          |Core:   +2             
                   |Lowest:   +1          |Trial:  +3             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2679] twisted.conch.ssh.keys has poor tests. (opened by z3p)
    defect          conch      http://twistedmatrix.com/trac/ticket/2679

                    ===== Normal =====
[#2784] trial reporter plugins can't get real failures unless they subclass trial's reporter class (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2784

[#2785] twisted.trial.itrial.IReporter is missing addSkip (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2785

[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786

[#2787] IReactorProcess.spawnProcess doesn't document all exceptions which the implementation can raise (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2787

[#2788] StringTransport does not support .host/.port (opened by Lacrymology)
    defect          core       http://twistedmatrix.com/trac/ticket/2788

[#2790] UDP Transport write() raises socket.error EWOULDBLOCK (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2790

[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786

                    ===== Lowest =====
[#2789] Windows Process Pipes are polled with 100% cpu (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2789



Closed Bugs
______________________
                    ===== Highest =====
[#2749] Add a utility method to trial to check the type of an object (opened by therve, closed by therve, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2749

[#2341] Merge twisted.internet.process.PTYProcess and Process (opened by itamarst, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2341

[#2769] Update plugins howto to cover new API for <package>/plugins/__init__.py added in #2339 (opened by itamarst, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2769

[#2679] twisted.conch.ssh.keys has poor tests. (opened by z3p, closed by z3p, )
    defect          conch      http://twistedmatrix.com/trac/ticket/2679

                    ===== Normal =====
[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml, closed by jml, )
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2790] UDP Transport write() raises socket.error EWOULDBLOCK (since 2007-08-18 17:39:59).

Mean open ticket age: 505 days, 15:14:17.121751.
Median: 397 days, 19:31:32.214454.
Standard deviation: 396 days, 9:06:38.504059.
Interquartile range: 490 days, 3:14:30.

Mean time between ticket creation and ticket resolution: 119 days, 13:28:12.330649.
Median: 14 days, 3:38:33.
Standard deviation is 222 days, 18:22:19.136294.
The interquartile range is 125 days, 7:40:09.

Mean time spent in review: 61 days, 21:07:27.431849.
Median: 4 days, 0:03:10.
Standard deviation: 134 days, 13:25:27.447625.
Interquartile range: 29 days, 21:36:30.259426.

Mean number of times a ticket is reviewed: 1.88461538462.
Median: 1
Standard deviation: 1.46797671007.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    20 unique ticket reporters
    10 unique ticket reviewers
    5 unique ticket resolvers
In the last 24 weeks,
    83 unique ticket reporters
    14 unique ticket reviewers
    17 unique ticket resolvers
In the last 48 weeks,
    156 unique ticket reporters
    21 unique ticket reviewers
    26 unique ticket resolvers




From jj.peeters at gmail.com  Sun Aug 19 07:50:12 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Sun, 19 Aug 2007 13:50:12 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m21we0bfeb.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
Message-ID: <1187524212.5437.11.camel@troll>

> Why you'd bother (when challenge/response is implemented for free) is
> another question, but it's certainly possible.  I suppose if you're
> using an SSL link for the PB connection with appropriate certificates
> you could consider the challenge/response an extra round trip, but
> it's got to be pretty insignificant compared to the overall session.
> 
> -- David

I don't especially use/want a SSL link. But I would like to use
different hash methods than md5 based ones. For instance, I'll possibly
need SHA or MD5CRYPT (I don't know if it's compatible with md5) hash
methods. Or why not any other one...

Then, I would like to use different credentials and to the other side,
different login method to be compatible with credentials I use.
The actual implementation force to use md5 hash method. It's what I'm
looking for to change if I find a good way to do what I habe in mind.

Julien.




From db3l.net at gmail.com  Sun Aug 19 16:37:01 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 16:37:01 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
Message-ID: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

>> Why you'd bother (when challenge/response is implemented for free) is
>> another question, but it's certainly possible.  I suppose if you're
>> using an SSL link for the PB connection with appropriate certificates
>> you could consider the challenge/response an extra round trip, but
>> it's got to be pretty insignificant compared to the overall session.
>> 
>> -- David
>
> I don't especially use/want a SSL link. But I would like to use
> different hash methods than md5 based ones. For instance, I'll possibly
> need SHA or MD5CRYPT (I don't know if it's compatible with md5) hash
> methods. Or why not any other one...

Of course you're certainly allowed to prefer something else, although
you might want to consider if the effort is worth it.  MD5CRYPT is
just an MD5 version of the classic Unix crypt() approach, including
salt, so isn't compatible with a direct MD5 hash.  But the PB approach
already has the random challenge as a salt, so MD5CRYPT shouldn't be
any more robust than the current approach - probably slightly less so
since it doesn't have the double hash of the password.  But it would
be compatible with Unix systems using MD5CRYPT for their passwd
entries if you were trying to compare directly to local entries.

If you're avoiding MD5 simply because it's been shown to no longer be
cryptographically secure (collisions can be generated for a given
hash), it's still worth considering what impact that really has on
this mechanism's use of MD5.  

While I'm not a cryptology expert (and I suspect analyzing such
vulnerabilities is often distinctly non-intuitive), with respect to
passwords, I believe the biggest exposure with MD5 is those systems
that store a direct MD5 hash of a password that an intruder can obtain
and then attempt attacks on by trying to produce alternate passwords
that will hash to the same value (and in some approaches, backtrack to
the true original password).  I'm not sure that sort of attack would
practically be launched against PB.  In particular, salts help defend
against that sort of attack.

For a PB session, the most common attack would be an attacker
attempting to impersonating a client, in which case all they'll have
access to is the random challenge.  Without seeing an actual response,
they've no hash to try to duplicate, and I'm not sure that the MD5
vulnerability comes into play at all.

If you're concerned about attackers with physical access to your
network and/or packet flow, things get messier.  If the attacker is
using a man-in-the-middle attack, I'm not sure they'd even bother with
attacking the password - just let the challenge and response flow
through, and then observe the traffic, or hijack the session once
established without ever figuring out the password.

If they didn't want control of the session, but just wanted the
password for other purposes, they could sniff traffic, and obtain the
challenge and response (and obviously have access to the source code
available to see how they're combined), but would have to deal with
the response having a hash of a hash for the password component.  I
know it makes use of the MD5 vulnerability more difficult, but may not
prevent its use entirely.

To be honest though, if I were really concerned with the latter two
cases - traffic interception/sniffing - I'd go right for link level
security (SSL with certificate verification on both ends), since even
with any other hash why give an attacker access to any of the hash
information if not necessary.  And no authentication system will
protect against a man-in-the-middle attack hijacking a session once
established.

> Then, I would like to use different credentials and to the other side,
> different login method to be compatible with credentials I use.
> The actual implementation force to use md5 hash method. It's what I'm
> looking for to change if I find a good way to do what I habe in mind.

I'm not sure you need to change the login method signature, since it's
just passing an arbitrary credentials object which can be as complex
as you want.  But sure, you can make up your own checker interface to
match your particular credential information.  Similar to how PB
implements the IUsernameMD5Password checker to incorporate the MD5
operation.

So, feel free to have at it.  There are probably a few ways you could
take control, but I were doing it, I'd probably take my Portal
subclass and make it directly implement IPBRoot (thus avoiding the
registered adapter _PortalRoot).  Then use the existing classes
(_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
them, and build your own process from the IPBRoot rootObject() call.
You'd be in complete control and can do anything you'd like.

If you haven't already, you might just start out with using the
existing implementation since it'll be easy enough to replace out
later and you might find that there are other aspects of the system
that deserve attention before delving too deeply into the very initial
authentication.

-- David




From exarkun at divmod.com  Sun Aug 19 16:48:46 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 19 Aug 2007 16:48:46 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
Message-ID: <20070819204846.4947.2059418822.divmod.quotient.23350@ohm>

On Sun, 19 Aug 2007 16:37:01 -0400, David Bolen <db3l.net at gmail.com> wrote:
> [snip]
>
>So, feel free to have at it.  There are probably a few ways you could
>take control, but I were doing it, I'd probably take my Portal
>subclass and make it directly implement IPBRoot (thus avoiding the
>registered adapter _PortalRoot).  Then use the existing classes
>(_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
>them, and build your own process from the IPBRoot rootObject() call.
>You'd be in complete control and can do anything you'd like.

I generally agree with the comments you've made here, except for this
paragraph.  Don't subclass Portal (ever, preferably ;).  Just make an
entirely new class which implements IPBRoot.  If appropriate (as it
likely will be), let that class wrap a Portal instance.  eg,

    portal = Portal(...)
    ...
    factory = PBServerFactory(YourRoot(portal))

Jean-Paul



From db3l.net at gmail.com  Sun Aug 19 17:08:22 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 17:08:22 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
Message-ID: <m2sl6f9qrd.fsf@valheru.db3l.homeip.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Sun, 19 Aug 2007 16:37:01 -0400, David Bolen <db3l.net at gmail.com> wrote:
>> [snip]
>>
>>So, feel free to have at it.  There are probably a few ways you could
>>take control, but I were doing it, I'd probably take my Portal
>>subclass and make it directly implement IPBRoot (thus avoiding the
>>registered adapter _PortalRoot).
>>(...)
>
> I generally agree with the comments you've made here, except for this
> paragraph.  Don't subclass Portal (ever, preferably ;).  (...)

Hmm, not that I've actually ever needed to yet myself, but is there
something specifically about Portal that prefers composition to
subclassing, or is it just a general design preference?

-- David




From db3l.net at gmail.com  Sun Aug 19 17:16:32 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 17:16:32 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
Message-ID: <m2odh39qdr.fsf@valheru.db3l.homeip.net>

David Bolen <db3l.net at gmail.com> writes:

> Hmm, not that I've actually ever needed to yet myself, but is there
> something specifically about Portal that prefers composition to
> subclassing, or is it just a general design preference?

Just to respond to my own post - finally noticed the comment in the
Portal class about not being designed for subclassing, so certainly
based on the expressed intent that's enough of a reason not too.
Although I'm probably still curious as to why.

-- David




From glyph at divmod.com  Sun Aug 19 19:08:39 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 19 Aug 2007 23:08:39 -0000
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
In-Reply-To: <m2odh39qdr.fsf@valheru.db3l.homeip.net>
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
	<m2odh39qdr.fsf@valheru.db3l.homeip.net>
Message-ID: <20070819230839.21185.936043834.divmod.xquotient.1230@joule.divmod.com>

On 09:16 pm, db3l.net at gmail.com wrote:
>David Bolen <db3l.net at gmail.com> writes:
>>Hmm, not that I've actually ever needed to yet myself, but is there
>>something specifically about Portal that prefers composition to
>>subclassing, or is it just a general design preference?
>
>Just to respond to my own post - finally noticed the comment in the
>Portal class about not being designed for subclassing, so certainly
>based on the expressed intent that's enough of a reason not too.
>Although I'm probably still curious as to why.

The portal is simply a utility class for composing an IRealm provider 
with some ICredentialsChecker providers.  The behavior in Portal itself 
is designed to be static, and decidable (in an ideal situation) by the 
administrator.

In other words, realms and credentials checkers should be arbitrarily 
"remixable"; you should not implement one to depend on the other.

If you start messing with the behavior of Portal, just about the only 
thing you *can* do is introduce an unnecessary dependency that makes 
either your checker or your realm unusable by someone else in their own 
application.



From db3l.net at gmail.com  Sun Aug 19 19:30:12 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 19:30:12 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
	<m2odh39qdr.fsf@valheru.db3l.homeip.net>
	<20070819230839.21185.936043834.divmod.xquotient.1230@joule.divmod.com>
Message-ID: <m2k5rr9k6z.fsf@valheru.db3l.homeip.net>

glyph at divmod.com writes:

(...)
> In other words, realms and credentials checkers should be arbitrarily
> "remixable"; you should not implement one to depend on the other.
>
> If you start messing with the behavior of Portal, just about the only
> thing you *can* do is introduce an unnecessary dependency that makes
> either your checker or your realm unusable by someone else in their
> own application.

Fair enough ... and in the end, my original suggested use of a
subclass wasn't really intended to augment the Portal interface
behavior, but rather produce a single object satisfying both the
Portal and IPBRoot interfaces.  Given the application (and that those
interfaces aren't really related aspects of anything), that desire
seems to fit more cleanly with composition than inheritance anyway.

-- David




From jj.peeters at gmail.com  Mon Aug 20 11:38:02 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Mon, 20 Aug 2007 17:38:02 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
Message-ID: <1187624282.5241.26.camel@troll>

On Sun, 2007-08-19 at 16:37 -0400, David Bolen wrote:
> I'm not sure you need to change the login method signature, since it's
> just passing an arbitrary credentials object which can be as complex
> as you want.  But sure, you can make up your own checker interface to
> match your particular credential information.  Similar to how PB
> implements the IUsernameMD5Password checker to incorporate the MD5
> operation.
> 
> So, feel free to have at it.  There are probably a few ways you could
> take control, but I were doing it, I'd probably take my Portal
> subclass and make it directly implement IPBRoot (thus avoiding the
> registered adapter _PortalRoot).  Then use the existing classes
> (_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
> them, and build your own process from the IPBRoot rootObject() call.
> You'd be in complete control and can do anything you'd like.
> 
> If you haven't already, you might just start out with using the
> existing implementation since it'll be easy enough to replace out
> later and you might find that there are other aspects of the system
> that deserve attention before delving too deeply into the very initial
> authentication.
> 
> -- David

For the moment, except I make a mistake, only credentials which
implements IUsernamePassword are supported by the PBClientFactory.login
method. Then if, for instance, passwords are stored with a SHA hash
method, I can't use it as it is. 

Another case in which the implementation present for the moment does not
permit another credentials to be use: for instance, if the credentials
are based, on an other strategy than the username/password one, I think
it couldn't work too.

May be I misunderstood some important points. And at least a part of
what I've talk just before is possible.

What I would be able to do is to arbitrary choice any credentials, and
at the other side, that any checker which is able to check this
credentials is possible to use (I think it's already O.K. for the
checker part).

I thought at a solution, but I don't really know if it is a good one
(both from a design and security point of view). And in the case I made
a mistake in my comprehension, it would be useless.

May be it's possible to put a kind of "credential remote reference" at
the server side which serve as a proxy for the real credential. 
Form a security point of view it's all right because remote reference
does not transmit data but juste provide remote method calls.
And then, instead of give the _PortalAuthChallenger to the portal as the
credentials, that proxy would be given. The proxy have to implement the
same ICredentials interface to be compatible with the checker. And it
have also to implement a "zero-knowledge password proof" mechanism
(response/challenge) to communicate with the real credentials to
preserve security. 

This solution is based on the existing one. And may be would be more
flexible? Why not a starting point for an effective solution?

Julien.




From db3l.net at gmail.com  Mon Aug 20 12:47:30 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 20 Aug 2007 12:47:30 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
Message-ID: <m2fy2e9mql.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> For the moment, except I make a mistake, only credentials which
> implements IUsernamePassword are supported by the PBClientFactory.login
> method. Then if, for instance, passwords are stored with a SHA hash
> method, I can't use it as it is. 

Ah, I see - sorry I missed that.  Yup, so I agree you may want to
override that portion of PBClientFactory (and perhaps the matching
remote_login in PBServerFactory) in your own mechanism as well.

It's possible the existing signature might still work even with a
hashed password, since the password field from the supplied
credentials are passed unchanged to the challenge response generation
function, with nothing other than the client/server shared
challenge/response implementation caring that it is clear text, but
that does sort of "bend" the interface for IUsernamePassword so it's
probably clearer to implement your own.

> (...)
> May be it's possible to put a kind of "credential remote reference" at
> the server side which serve as a proxy for the real credential. 
> Form a security point of view it's all right because remote reference
> does not transmit data but juste provide remote method calls.

Not sure this is a big win, since at some point in time you need to
transfer over the actual credentials used for authentication anyway.
So it's really a tradeoff between an established remote object method
interface (to retrieve the credentials) or the type of credential
object transmitted in general when sent as copyable data.  Toss up,
but you're free to try either approach.

> And then, instead of give the _PortalAuthChallenger to the portal as the
> credentials, that proxy would be given. The proxy have to implement the
> same ICredentials interface to be compatible with the checker. And it
> have also to implement a "zero-knowledge password proof" mechanism
> (response/challenge) to communicate with the real credentials to
> preserve security. 
>
> This solution is based on the existing one. And may be would be more
> flexible? Why not a starting point for an effective solution?

Why not indeed?  If I were you and I had convinced myself the
authentication approach was worth replacing in my application (per my
last response) at this point I'd just go ahead and do some
implementation to see how it goes.  You can certainly achieve
everything you're talking about by just overriding some of the
existing default behavior.

-- David




From jj.peeters at gmail.com  Mon Aug 20 13:24:10 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Mon, 20 Aug 2007 19:24:10 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2fy2e9mql.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
Message-ID: <1187630650.5239.10.camel@troll>

On Mon, 2007-08-20 at 12:47 -0400, David Bolen wrote:
> Julien Peeters <jj.peeters at gmail.com> writes:
> 
> > For the moment, except I make a mistake, only credentials which
> > implements IUsernamePassword are supported by the PBClientFactory.login
> > method. Then if, for instance, passwords are stored with a SHA hash
> > method, I can't use it as it is. 
> 
> Ah, I see - sorry I missed that.  Yup, so I agree you may want to
> override that portion of PBClientFactory (and perhaps the matching
> remote_login in PBServerFactory) in your own mechanism as well.
> 
> It's possible the existing signature might still work even with a
> hashed password, since the password field from the supplied
> credentials are passed unchanged to the challenge response generation
> function, with nothing other than the client/server shared
> challenge/response implementation caring that it is clear text, but
> that does sort of "bend" the interface for IUsernamePassword so it's
> probably clearer to implement your own.

Yes, It's what I noticed. When you use a username/password strategy it's
all right. With a precision that the password have to be hashed with the
same method with which the stored password at the ckercker side is
hashed. 

In the case of other type of credentials, it's not so trivial.

> > (...)
> > May be it's possible to put a kind of "credential remote reference" at
> > the server side which serve as a proxy for the real credential. 
> > Form a security point of view it's all right because remote reference
> > does not transmit data but juste provide remote method calls.
> 
> Not sure this is a big win, since at some point in time you need to
> transfer over the actual credentials used for authentication anyway.
> So it's really a tradeoff between an established remote object method
> interface (to retrieve the credentials) or the type of credential
> object transmitted in general when sent as copyable data.  Toss up,
> but you're free to try either approach.

And so. I noticed that the solution I proposed does not correctly work
because the "proxy" have to implements the interface the checker match
for. And it's impossible to do cleanly.

> > And then, instead of give the _PortalAuthChallenger to the portal as the
> > credentials, that proxy would be given. The proxy have to implement the
> > same ICredentials interface to be compatible with the checker. And it
> > have also to implement a "zero-knowledge password proof" mechanism
> > (response/challenge) to communicate with the real credentials to
> > preserve security. 
> >
> > This solution is based on the existing one. And may be would be more
> > flexible? Why not a starting point for an effective solution?
> 
> Why not indeed?  If I were you and I had convinced myself the
> authentication approach was worth replacing in my application (per my
> last response) at this point I'd just go ahead and do some
> implementation to see how it goes.  You can certainly achieve
> everything you're talking about by just overriding some of the
> existing default behavior.

In theory all is possible. But it's an other challenge that to find a
good and clean way to do it :-).

I interested in all propositions if someone have any ideas.

Julien.




From db3l.net at gmail.com  Mon Aug 20 15:02:10 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 20 Aug 2007 15:02:10 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
	<1187630650.5239.10.camel@troll>
Message-ID: <m2bqd29gi5.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> In theory all is possible. But it's an other challenge that to find a
> good and clean way to do it :-).
>
> I interested in all propositions if someone have any ideas.

Maybe I missed it, but it sounded like "it" was just using an
alternate hashing algorithm, for which an approach towards doing that
is what I think we've covered, no?

Perhaps it might be clearer if you restated your needs and/or goal for
an alternate method of authentication - that might prompt more helpful
responses.

-- David




From Paul_S_Johnson at mnb.uscourts.gov  Mon Aug 20 15:49:18 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 20 Aug 2007 14:49:18 -0500
Subject: [Twisted-Python] Persistent SSH Class for Twisted needed
In-Reply-To: <20070808120457.4947.1236737990.divmod.quotient.20171@ohm>
Message-ID: <OF53FE536A.E7974D96-ON8625733D.006C659F-8625733D.006D513D@uscmail.uscourts.gov>

I've posted this a month or two ago, but thought I'd try again in case 
someone missed it.

Does anyone have a Persistent SSH Class for Twisted that they'd be willing 
to share? I need it for a GUI application that we really like to build. 
I've looked at plenty of examples of connect/execute/disconnect scripts, 
but converting those to a persistent connection is a bit too daunting for 
my programming abilities. Any help is much appreciated.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070820/5c0d9c2e/attachment.htm 

From laurie at holoweb.net  Tue Aug 21 05:09:41 2007
From: laurie at holoweb.net (Laurie Harper)
Date: Tue, 21 Aug 2007 05:09:41 -0400
Subject: [Twisted-Python] invoking Deferred synchronously
Message-ID: <faea4i$ns5$1@sea.gmane.org>

I'm sure this is trivial enough, but it has me scratching my head... I 
need to call a method that returns a Deferred, then block until the 
deferred completes (or errback's) and return the final result of the 
deferred call.

Specifically, something like:

     r = None, is_ok = None
     def ok(p): r, is_ok = p, True
     def fail(e): r, is_ok = e, False

     cf = pb.PBClientFactory()
     reactor.connectTCP(host, port, cf)
     d = cf.login(creds, client=self).addCallbacks(ok, fail)

     # BLOCK: wait until d has called 'ok' of 'fail'

     if is_ok:
         return r
     else:
         raise r

If it helps, I'm trying to create a web application (using Nevow) that 
connects to another Twister service through the Persistence Broker. I'm 
trying to implement authentication, and so need a way to wait for the PB 
connection to succeed/fail so I can send the appropriate response to the 
HTTP request.

Any pointers would be very much appreciated! :-)

L.




From jj.peeters at gmail.com  Tue Aug 21 06:28:31 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Tue, 21 Aug 2007 12:28:31 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2bqd29gi5.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
	<1187630650.5239.10.camel@troll>
	<m2bqd29gi5.fsf@valheru.db3l.homeip.net>
Message-ID: <1187692111.5743.13.camel@troll>

On Mon, 2007-08-20 at 15:02 -0400, David Bolen wrote:
> Julien Peeters <jj.peeters at gmail.com> writes:
> 
> > In theory all is possible. But it's an other challenge that to find a
> > good and clean way to do it :-).
> >
> > I interested in all propositions if someone have any ideas.
> 
> Maybe I missed it, but it sounded like "it" was just using an
> alternate hashing algorithm, for which an approach towards doing that
> is what I think we've covered, no?

I'm sorry, I done an English mistake may be (I'm not a native english
speaker). When I talked about another "challenge", I talked about the
support of any credentials (different from username/password).

I agree that the use of different hashing algorithm is trivial.
However, that's important to notice that the credentials at the client
side have to hash the password given by the user, if this last one is
given as clear text.

> Perhaps it might be clearer if you restated your needs and/or goal for
> an alternate method of authentication - that might prompt more helpful
> responses.

In the end, my main interest is to be able to use any credentials I
want. By for the moment, use any hashing algorithm is already
positive ;-) .

Julien.





From p.mayers at imperial.ac.uk  Tue Aug 21 06:33:55 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 21 Aug 2007 11:33:55 +0100
Subject: [Twisted-Python] invoking Deferred synchronously
In-Reply-To: <faea4i$ns5$1@sea.gmane.org>
References: <faea4i$ns5$1@sea.gmane.org>
Message-ID: <1187692435.25224.10.camel@doorstop.net.ic.ac.uk>

On Tue, 2007-08-21 at 05:09 -0400, Laurie Harper wrote:
> I'm sure this is trivial enough, but it has me scratching my head... I 
> need to call a method that returns a Deferred, then block until the 
> deferred completes (or errback's) and return the final result of the 
> deferred call.

You don't want to do that.

> 
> Specifically, something like:
> 
>      r = None, is_ok = None
>      def ok(p): r, is_ok = p, True
>      def fail(e): r, is_ok = e, False
> 
>      cf = pb.PBClientFactory()
>      reactor.connectTCP(host, port, cf)
>      d = cf.login(creds, client=self).addCallbacks(ok, fail)
> 
>      # BLOCK: wait until d has called 'ok' of 'fail'
> 
>      if is_ok:
>          return r
>      else:
>          raise r
> 
> If it helps, I'm trying to create a web application (using Nevow) that 
> connects to another Twister service through the Persistence Broker. I'm 
> trying to implement authentication, and so need a way to wait for the PB 
> connection to succeed/fail so I can send the appropriate response to the 
> HTTP request.

You certainly don't need to do that in a Nevow app. Just do this (I'm
assuming this is in a data or render method):

cf = pb.PBClientFactory()
reactor.connectTCP(host, port, cf)
return cf.login(creds, client=self)

Nevow will see you've returned a deferred and wait for it. Much of
Twisted will do the same. You NEVER want to "wait" for a deferred.




From luca at unipex.it  Tue Aug 21 07:02:34 2007
From: luca at unipex.it (Luca Politti)
Date: Tue, 21 Aug 2007 13:02:34 +0200
Subject: [Twisted-Python] protocol and transport question
Message-ID: <46CAC64A.6020600@unipex.it>

Hi all,
I have a problem with a simple client/server communication: I have a
server that send the data through "transport" (my class inherit from
twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
(that now, for test propose are on the same machine) some time I receive
two messages concatenated from the server like it send on the same time.
Other times, I receive it correctly (in different moments).
I tried to debug this situations with print some messages, and I see
that twisted sometimes wait "a time" before send data through the
channel:

on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
try:
     # Limit length of buffer to try to send, because some OSes are too
....

on my code:
print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
self.transport.write(str(msg))

and I see (then it's wrong):
BBBBBBBBBBBBBBBBBBB '230 XXXXXXXXX\n' 1187693294.84
BBBBBBBBBBBBBBBBBBB '235 XXXXXXXXX 144\n' 1187693295.28
CCCCCCCCCCCCCCCCC '230 XXXXXXXXX \n235 XXXXXXXXX 144\n' 1187693295.28

and when it's right:
BBBBBBBBBBBBBBBBBBB '230 XXXXXXXXX \n' 1187693282.89
CCCCCCCCCCCCCCCCC '230 XXXXXXXXX \n' 1187693283.06
BBBBBBBBBBBBBBBBBBB '235 XXXXXXXXX 143\n' 1187693283.28
CCCCCCCCCCCCCCCCC '235 XXXXXXXXX 143\n' 1187693283.28


How solve it? Is there a method for say to twisted (transport) to not
wait to send the data? (flush the buffer?)

Thanks a lot!

Luca



From laurie at holoweb.net  Tue Aug 21 07:16:46 2007
From: laurie at holoweb.net (Laurie Harper)
Date: Tue, 21 Aug 2007 07:16:46 -0400
Subject: [Twisted-Python] Re: invoking Deferred synchronously
In-Reply-To: <1187692435.25224.10.camel@doorstop.net.ic.ac.uk>
References: <faea4i$ns5$1@sea.gmane.org>
	<1187692435.25224.10.camel@doorstop.net.ic.ac.uk>
Message-ID: <faehip$h7n$1@sea.gmane.org>

Phil Mayers wrote:
> On Tue, 2007-08-21 at 05:09 -0400, Laurie Harper wrote:
>> I'm sure this is trivial enough, but it has me scratching my head... I 
>> need to call a method that returns a Deferred, then block until the 
>> deferred completes (or errback's) and return the final result of the 
>> deferred call.
> 
> You don't want to do that.

Perhaps once I get more used to Twisted's programming model, I'll stop 
tending to ;-)

>> Specifically, something like:
>>
>>      r = None, is_ok = None
>>      def ok(p): r, is_ok = p, True
>>      def fail(e): r, is_ok = e, False
>>
>>      cf = pb.PBClientFactory()
>>      reactor.connectTCP(host, port, cf)
>>      d = cf.login(creds, client=self).addCallbacks(ok, fail)
>>
>>      # BLOCK: wait until d has called 'ok' of 'fail'
>>
>>      if is_ok:
>>          return r
>>      else:
>>          raise r
>>
>> If it helps, I'm trying to create a web application (using Nevow) that 
>> connects to another Twister service through the Persistence Broker. I'm 
>> trying to implement authentication, and so need a way to wait for the PB 
>> connection to succeed/fail so I can send the appropriate response to the 
>> HTTP request.
> 
> You certainly don't need to do that in a Nevow app. Just do this (I'm
> assuming this is in a data or render method):
> 
> cf = pb.PBClientFactory()
> reactor.connectTCP(host, port, cf)
> return cf.login(creds, client=self)
> 
> Nevow will see you've returned a deferred and wait for it. Much of
> Twisted will do the same. You NEVER want to "wait" for a deferred.

Wow, nice; it never occurred to me to try that :-) That isn't quite what 
I'd need, since I want to retrieve the IPresence returned from login() 
and store it in the web server (so it can be used to service subsequent 
HTTP requests). However, from the experimentation I did earlier with 
inlineCallbacks and the like I think I know how to wrap a deferred up 
and do what I need.

Thanks for the pointer, I'll give it a try.

L.




From exarkun at divmod.com  Tue Aug 21 08:02:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 21 Aug 2007 08:02:27 -0400
Subject: [Twisted-Python] protocol and transport question
In-Reply-To: <46CAC64A.6020600@unipex.it>
Message-ID: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>

On Tue, 21 Aug 2007 13:02:34 +0200, Luca Politti <luca at unipex.it> wrote:
>Hi all,
>I have a problem with a simple client/server communication: I have a
>server that send the data through "transport" (my class inherit from
>twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
>(that now, for test propose are on the same machine) some time I receive
>two messages concatenated from the server like it send on the same time.
>Other times, I receive it correctly (in different moments).

For message-oriented protocols (what you seem to be implementing), it
is necessary to have some "framing" mechanism - a way to tell where a
message ends and the next begins.  You can't rely on time to tell
messages apart over TCP, since TCP makes few guarantees about when it
will do things.

>I tried to debug this situations with print some messages, and I see
>that twisted sometimes wait "a time" before send data through the
>channel:

Bytes written to a TCP transport will be sent (almost) as soon as they
can be.  They are not (in the current implementation) sent before the
transport.write() call returns, but they will be sent the next time the
reactor regains execution control.  Unless your application is blocking
the reactor from running (ie, performing some long running task), this
means the reactor will try to send your data at most a few milliseconds
after your write call.  It is not necessarily the case that the send will
succeed at that time, though.  In such a case, the reactor will buffer
the data and try to send it again later.

>
>on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
>print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
>try:
>     # Limit length of buffer to try to send, because some OSes are too
>....
>
>on my code:
>print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
>self.transport.write(str(msg))

writeSomeData and transport.write don't necessarily have a one-to-one
correspondence to each other, so this debug output might be a bit
misleading.

> [snip]
>
>How solve it? Is there a method for say to twisted (transport) to not
>wait to send the data? (flush the buffer?)

Since there's no buffering except when absolutely necessary, there's no
way to flush.

So there are three things to watch out for:

  * You must use a framing mechanism in order to differentiate your
    messages.  This might be as simple as having them all be the same
    length, or it might mean including a length prefix (see the
    NetstringReceiver or Int{8,16,32}StringReceiver protocols in
    twisted.protocols.base for examples of this), or it might be
    something more complex.

  * Don't block the reactor.  If you want to wait a while, use the
    callLater method of the reactor, not time.sleep.  If you have
    to call a function that will block for a long time before it
    returns, find an asynchronous version instead, or use the reactor's
    threadpool.

  * Don't call reactor methods from any thread except the one which
    is running the reactor.  This will have unpredictable results and
    generally be broken.

Jean-Paul



From bernat at luffy.cx  Tue Aug 21 09:48:44 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Tue, 21 Aug 2007 15:48:44 +0200
Subject: [Twisted-Python] Adapter for a class, not for an instance
Message-ID: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>


Hi !

Currently, adapters can transform an instance into another
instance. I would like to use adapters to transform a class into
an instance. Does something like that already exists ?

Thanks.





From maarten at treewalker.org  Tue Aug 21 18:06:25 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 22 Aug 2007 00:06:25 +0200
Subject: [Twisted-Python] Checking whether a server started successfully
Message-ID: <200708220006.31573.maarten@treewalker.org>

Hi,

I am starting a server process using "twistd -oy" (don't save state; 
application is described by Python source). If all is well, the server is 
started in the background. However, if all is not well, I'd like to detect 
that startup failed.

The particular scenario that I'm using is testing a server using a test 
framework that does HTTP requests. Before the tests are run, the server is 
started and it tries to bind to a fixed port. If there is still an old 
instance of the server running, the bind will fail and any requests made will 
be handled by the old instance instead. That will lead to invalid test 
results.

I worked around it currently by waiting for 3 seconds (probably sufficient 
time to try the binding) and then checking if the process of which the ID 
stored in "twisted.pid" is still running. However, there is no guarantee that 
3 seconds is always enough time for the server to have bound the port. So I'm 
wondering if there is a reliable and elegant way of solving this.

One approach would be to check which process has bound a particular port. I'm 
running this server on Linux and the "netstat" command line tool has access 
to the right information, but not in an easily parseable format. I guess the 
same info can be found in /proc somehow, but are those files guaranteed to 
stay compatible with newer kernels?

Another approach would be to check in advance if something is listening on 
that particular port, but between the time this check is done and the time 
the server tries to bind, some other process might have grabbed the port.

In any case, the port already being bound is just one of the reasons why the 
startup might fail; I'd prefer to have a way to detect startup failures for 
other reasons as well.

One question is when exactly "startup" is finished. For my purpose, the moment 
the reactor is running would be the moment I consider startup to be 
successful. Maybe I can write a file somewhere to explicitly signal that, but 
that's a bit messy (where to put it? is the server process allowed to write 
there? who cleans up the file?).

Maybe it would be useful to have twistd (optionally) wait until the reactor is 
running before returning. I don't want the test script to rely on a patched 
version of Twisted, so this would only be an option if it would make sense to 
integrate such a feature into Twisted itself.

Have you encountered this problem as well? And if so, how did you deal with 
it?

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070822/729c330f/attachment.pgp 

From glyph at divmod.com  Tue Aug 21 18:31:07 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 21 Aug 2007 22:31:07 -0000
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
Message-ID: <20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>

On 01:48 pm, bernat at luffy.cx wrote:
>Currently, adapters can transform an instance into another
>instance. I would like to use adapters to transform a class into
>an instance. Does something like that already exists ?

More correctly, adapters can transform an object into another object, 
based on what interfaces the original object provides.  So you can use 
it with class objects, if you want, just as much as you can use it with 
instance objects.

However, you probably want to ask this on the Zope Interface mailing 
list, not Twisted.  Also, I strongly suspect that whatever problem 
you're trying to solve with this would be better solved some other way, 
but that's just a hunch :).



From bernat at luffy.cx  Wed Aug 22 02:10:57 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Wed, 22 Aug 2007 08:10:57 +0200
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
	(glyph@divmod.com's message of "Tue, 21 Aug 2007 22:31:07 -0000")
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
	<20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
Message-ID: <m3lkc42j66.fsf@neo.luffy.cx>

OoO  En  cette nuit  nuageuse  du mercredi  22  ao?t  2007, vers  00:31,
glyph at divmod.com disait:

>> Currently, adapters can transform an instance into another
>> instance. I would like to use adapters to transform a class into
>> an instance. Does something like that already exists ?

> More correctly, adapters can transform an object into another object,
> based on what interfaces the original object provides.  So you can use
> it with class objects, if you want, just as much as you can use it
> with instance objects.

Here is what I do.

from zope.interface import Interface, implements
from twisted.python.components import registerAdapter, Adapter

class DummyAdapter(Adapter):
 pass

class IDummy1(Interface):
 pass

class IDummy2(Interface):
 pass

class Dummy1(object):
 implements(IDummy1)

registerAdapter(DummyAdapter, IDummy1, IDummy2)

IDummy2(Dummy1()) # Works
IDummy2(Dummy1) # Don't works

If I use registerAdapter(DummyAdapter, type, IDummy2), this works, but I
lose a lot  of functionality (I may want to  adapt other interfaces than
IDummy1).

> However, you probably want to ask this on the Zope Interface mailing
> list, not Twisted.  Also, I strongly suspect that whatever problem
> you're trying to solve with this would be better solved some other
> way, but that's just a hunch :).

I have some object which is the  model for some data. I want to adapt it
to display  it in HTML for example.  In this case, I  adapt the instance
because everything is  OK. Now, I want to create an  HTML form linked to
this object properties. I cannot use an instance because the object does
not exist yet.
-- 
I WILL NOT BURP IN CLASS
I WILL NOT BURP IN CLASS
I WILL NOT BURP IN CLASS
-+- Bart Simpson on chalkboard in episode 7G04



From andrew-twisted at puzzling.org  Wed Aug 22 02:28:11 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 22 Aug 2007 16:28:11 +1000
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <m3lkc42j66.fsf@neo.luffy.cx>
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
	<20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
	<m3lkc42j66.fsf@neo.luffy.cx>
Message-ID: <20070822062811.GF24805@steerpike.home.puzzling.org>

This is really a Zope question, not Twisted question.  You'll probably get
better answers by asking on a Zope mailing list.  Anyway...

Vincent Bernat wrote:
[...]
> 
> Here is what I do.
> 
> from zope.interface import Interface, implements
> from twisted.python.components import registerAdapter, Adapter
> 
> class DummyAdapter(Adapter):
>  pass
> 
> class IDummy1(Interface):
>  pass
> 
> class IDummy2(Interface):
>  pass
> 
> class Dummy1(object):
>  implements(IDummy1)
> 
> registerAdapter(DummyAdapter, IDummy1, IDummy2)
> 
> IDummy2(Dummy1()) # Works
> IDummy2(Dummy1) # Don't works
> 
> If I use registerAdapter(DummyAdapter, type, IDummy2), this works, but I
> lose a lot  of functionality (I may want to  adapt other interfaces than
> IDummy1).

Read the zope.interface documentation, particularly the distinction between
providing an interface and implmenting an interface.  If you want
IDummy2(Dummy1) to work, you need to declare Dummy1 as:

class Dummy1(object):
    classProvides(IDummy1)

However you almost certainly do not want that class to also implement(IDummy1).
It would be very unusual for a type and its instances to both provide the same
interface.

-Andrew.




From christian.simms at gmail.com  Wed Aug 22 10:41:19 2007
From: christian.simms at gmail.com (Christian Simms)
Date: Wed, 22 Aug 2007 10:41:19 -0400
Subject: [Twisted-Python] Checking whether a server started successfully
In-Reply-To: <200708220006.31573.maarten@treewalker.org>
References: <200708220006.31573.maarten@treewalker.org>
Message-ID: <cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>

On 8/21/07, Maarten ter Huurne <maarten at treewalker.org> wrote:
>
> Hi,
>
> I am starting a server process using "twistd -oy" (don't save state;
> application is described by Python source). If all is well, the server is
> started in the background. However, if all is not well, I'd like to detect
> that startup failed.
>
> The particular scenario that I'm using is testing a server using a test
> framework that does HTTP requests. Before the tests are run, the server is
> started and it tries to bind to a fixed port. If there is still an old
> instance of the server running, the bind will fail and any requests made
> will
> be handled by the old instance instead. That will lead to invalid test
> results.
>
> I worked around it currently by waiting for 3 seconds (probably sufficient
> time to try the binding) and then checking if the process of which the ID
> stored in "twisted.pid" is still running. However, there is no guarantee
> that
> 3 seconds is always enough time for the server to have bound the port. So
> I'm
> wondering if there is a reliable and elegant way of solving this.
>
> One approach would be to check which process has bound a particular port.
> I'm
> running this server on Linux and the "netstat" command line tool has
> access
> to the right information, but not in an easily parseable format. I guess
> the
> same info can be found in /proc somehow, but are those files guaranteed to
> stay compatible with newer kernels?
>
> Another approach would be to check in advance if something is listening on
> that particular port, but between the time this check is done and the time
> the server tries to bind, some other process might have grabbed the port.
>
> In any case, the port already being bound is just one of the reasons why
> the
> startup might fail; I'd prefer to have a way to detect startup failures
> for
> other reasons as well.
>
> One question is when exactly "startup" is finished. For my purpose, the
> moment
> the reactor is running would be the moment I consider startup to be
> successful. Maybe I can write a file somewhere to explicitly signal that,
> but
> that's a bit messy (where to put it? is the server process allowed to
> write
> there? who cleans up the file?).
>
> Maybe it would be useful to have twistd (optionally) wait until the
> reactor is
> running before returning. I don't want the test script to rely on a
> patched
> version of Twisted, so this would only be an option if it would make sense
> to
> integrate such a feature into Twisted itself.
>
> Have you encountered this problem as well? And if so, how did you deal
> with
> it?
>
> Bye,
>                 Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



Yes, I've encountered this problem before.  And yes, I initially did the
same thing as you, by waiting a hardcoded time.  But eventually I got tired
of this race condition, and that it doesn't detect when the server failed to
start.  What I'm doing right now for my non-unit functional testing is
running a bash script which:

- make sure twistd isn't running using ps:  ps aux | grep twistd | grep -v
grep
- start up the app in non-daemon mode, send its output to the console and to
a file:
     twistd -noy my-app.tac | tee server.log &
- poll the server.log by grep'ing for a string I print from my app when the
app is completely started
- launch the tests against the running server (I think I'm using mechanize
right now for web client library)

This works for me in my development environment, on Linux.

Cheers,
Christian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070822/5b70fff9/attachment.htm 

From jcd at sdf.lonestar.org  Wed Aug 22 11:18:40 2007
From: jcd at sdf.lonestar.org (J. Cliff Dyer)
Date: Wed, 22 Aug 2007 11:18:40 -0400
Subject: [Twisted-Python] Checking whether a server started successfully
In-Reply-To: <cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>
References: <200708220006.31573.maarten@treewalker.org>
	<cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>
Message-ID: <46CC53D0.2070204@sdf.lonestar.org>

Christian Simms wrote:
>
> - make sure twistd isn't running using ps:  ps aux | grep twistd | 
> grep -v grep
You can save yourself a pipe by doing

$ ps aux|grep [t]wistd

That way it won't find twistd on the grep line.  the [brackets] get in 
the way, but don't semantically change what you're looking for.

Cheers,
Cliff




From ladaan at iptel.org  Wed Aug 22 14:14:17 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 22 Aug 2007 20:14:17 +0200
Subject: [Twisted-Python] LoopingCall and object instances
Message-ID: <46CC7CF9.4010103@iptel.org>

Hello,
I have got following code:

hosts = ['google.com','yahoo.com']

for host in hosts:
        c = PingContext(num, host)
        ctx.append(c)
        l = task.LoopingCall(c.ping)
        l.start(30.0, False)

I create a few object instances and pinging those hosts every 30 secs.
I will have another loop through LoopingCall, where I will be checking 
dynamically changing list and comparing with already been checking hosts.
If there is a host missing in the list I will delete the object instance 
which is not in the list.
How can I remove it that it will not be anymore called by LoopingCall?
Or how can I add a new object instance to the LoopingCall in case there 
is new host in the list?

Hopefully, it's understandable.

Thank you,
Lada








From ladaan at iptel.org  Wed Aug 22 16:59:28 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 22 Aug 2007 22:59:28 +0200
Subject: [Twisted-Python] LoopingCall and object instances
In-Reply-To: <46CC7CF9.4010103@iptel.org>
References: <46CC7CF9.4010103@iptel.org>
Message-ID: <46CCA3B0.6050006@iptel.org>

I found the answer myself here at 
http://twistedmatrix.com/pipermail/twisted-python/2005-September/011490.html

I followed the code and implemented to my class start and stop methods 
which solved my problem
with taking out object instances from loop testing.

Lada

Ladislav Andel wrote:
> Hello,
> I have got following code:
>
> hosts = ['google.com','yahoo.com']
>
> for host in hosts:
>        c = PingContext(num, host)
>        ctx.append(c)
>        l = task.LoopingCall(c.ping)
>        l.start(30.0, False)
>
> I create a few object instances and pinging those hosts every 30 secs.
> I will have another loop through LoopingCall, where I will be checking 
> dynamically changing list and comparing with already been checking hosts.
> If there is a host missing in the list I will delete the object 
> instance which is not in the list.
> How can I remove it that it will not be anymore called by LoopingCall?
> Or how can I add a new object instance to the LoopingCall in case 
> there is new host in the list?
>
> Hopefully, it's understandable.
>
> Thank you,
> Lada
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From luca at unipex.it  Thu Aug 23 09:11:18 2007
From: luca at unipex.it (Luca Politti)
Date: Thu, 23 Aug 2007 15:11:18 +0200
Subject: [Twisted-Python] protocol and transport question
In-Reply-To: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>
References: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>
Message-ID: <46CD8776.7010005@unipex.it>

Jean-Paul Calderone ha scritto:
> On Tue, 21 Aug 2007 13:02:34 +0200, Luca Politti <luca at unipex.it> wrote:
>> Hi all,
>> I have a problem with a simple client/server communication: I have a
>> server that send the data through "transport" (my class inherit from
>> twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
>> (that now, for test propose are on the same machine) some time I receive
>> two messages concatenated from the server like it send on the same time.
>> Other times, I receive it correctly (in different moments).
> 
> For message-oriented protocols (what you seem to be implementing), it
> is necessary to have some "framing" mechanism - a way to tell where a
> message ends and the next begins.  You can't rely on time to tell
> messages apart over TCP, since TCP makes few guarantees about when it
> will do things.
> 
>> I tried to debug this situations with print some messages, and I see
>> that twisted sometimes wait "a time" before send data through the
>> channel:
> 
> Bytes written to a TCP transport will be sent (almost) as soon as they
> can be.  They are not (in the current implementation) sent before the
> transport.write() call returns, but they will be sent the next time the
> reactor regains execution control.  Unless your application is blocking
> the reactor from running (ie, performing some long running task), this
> means the reactor will try to send your data at most a few milliseconds
> after your write call.  It is not necessarily the case that the send will
> succeed at that time, though.  In such a case, the reactor will buffer
> the data and try to send it again later.
> 
>>
>> on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
>> print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
>> try:
>>     # Limit length of buffer to try to send, because some OSes are too
>> ....
>>
>> on my code:
>> print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
>> self.transport.write(str(msg))
> 
> writeSomeData and transport.write don't necessarily have a one-to-one
> correspondence to each other, so this debug output might be a bit
> misleading.
> 
>> [snip]
>>
>> How solve it? Is there a method for say to twisted (transport) to not
>> wait to send the data? (flush the buffer?)
> 
> Since there's no buffering except when absolutely necessary, there's no
> way to flush.
> 
> So there are three things to watch out for:
> 
>  * You must use a framing mechanism in order to differentiate your
>    messages.  This might be as simple as having them all be the same
>    length, or it might mean including a length prefix (see the
>    NetstringReceiver or Int{8,16,32}StringReceiver protocols in
>    twisted.protocols.base for examples of this), or it might be
>    something more complex.
> 
>  * Don't block the reactor.  If you want to wait a while, use the
>    callLater method of the reactor, not time.sleep.  If you have
>    to call a function that will block for a long time before it
>    returns, find an asynchronous version instead, or use the reactor's
>    threadpool.
> 
>  * Don't call reactor methods from any thread except the one which
>    is running the reactor.  This will have unpredictable results and
>    generally be broken.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Ok, Jean-Paul, thanks a lot. We haven't thought to this. We thought that 
every time we called transport.write, it sent the msg...
But we have solved the problem using your first suggest: the framing 
mechanism :). So now, just before send the msg, I append the length of 
the msg at the beginning of this. On the other side, when I receive the 
msg I cut the msg until the length of the msg. The rest is putted in a 
buffer and processed after.
The most important thing is that IT WORKS!!!! :))))

So we thank you very a lot...

Best reguards..

Luca

-- 
Unipex srl

email: luca at unipex.it
Tel:   0432 - 931511
Fax:   0432 - 931378



From miles.chris at gmail.com  Thu Aug 23 13:48:24 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Thu, 23 Aug 2007 18:48:24 +0100
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
Message-ID: <9F23B6F1-D5BB-4E8C-9D5B-6720664C60A4@gmail.com>

I have a Twisted app that is often waiting for child processes (calls  
to external commands).

I'd like to make the app gracefully shutdown by default.  As in, when  
the app is killed I want to make sure that any currently running  
child processes can complete and the results of their work can be  
processed before the daemon dies.

What would be the best way to achieve this?

Can I override the SIGTERM signal handler so that it waits for other  
events to complete before allowing the app to die?

Cheers
Chris Miles




From exarkun at divmod.com  Thu Aug 23 13:52:44 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 23 Aug 2007 13:52:44 -0400
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
In-Reply-To: <9F23B6F1-D5BB-4E8C-9D5B-6720664C60A4@gmail.com>
Message-ID: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>

On Thu, 23 Aug 2007 18:48:24 +0100, Chris Miles <miles.chris at gmail.com> wrote:
>I have a Twisted app that is often waiting for child processes (calls  to 
>external commands).
>
>I'd like to make the app gracefully shutdown by default.  As in, when  the 
>app is killed I want to make sure that any currently running  child 
>processes can complete and the results of their work can be  processed 
>before the daemon dies.
>
>What would be the best way to achieve this?
>
>Can I override the SIGTERM signal handler so that it waits for other  events 
>to complete before allowing the app to die?

twistd will wait for any Deferred returned by an IService.stopService method
in the application hierarchy before stopping the reactor and exiting.

Jean-Paul



From ghazel at gmail.com  Thu Aug 23 15:12:57 2007
From: ghazel at gmail.com (ghazel at gmail.com)
Date: Thu, 23 Aug 2007 12:12:57 -0700
Subject: [Twisted-Python] Digisynd job posting
Message-ID: <151643b20708231212s58efb587pd66ab12eb6018a1@mail.gmail.com>

Sorry for what might look like spam, but this job posting for a
Twisted developer came through a friend of mine. If anyone has an
interest in this just respond to me and I'll forward your info along.

I'm quoting here:
"""
these guys are
the founding team of revr and are building the first true web
syndication platform for video. they have deals with warner and mtv so
far and basically take their videos and generate tons of views for them
using some proprietary technology.

they are looking to make a senior hire with the following credentials.
if you know of anyone in the la or san fran area, i would greatly
appreciate an intro. thanks

__________________________________


Digisynd is seeking a well-seasoned python developer/manager to help run

our software development efforts. Ideally you have:

- a passion for Django or/and Twisted
- a passion for hot frameworks, such as Ruby-On-Rails
- exceptional SQL skills
- experience with capturing and reporting off `massive` datasets in
real time
- extensive experience with web services - both creating and utilizing
- a preference for MySQL and Ubuntu
- strong bash scripting
- experience with distributed version control

We prefer candidates to be based out of either the Bay area or Los
Angeles. We are a small, energetic team, with a heap of interesting
problems to solve in a very entertaining space.
"""

-Greg



From teratorn at gmail.com  Thu Aug 23 16:55:02 2007
From: teratorn at gmail.com (Eric Mangold)
Date: Thu, 23 Aug 2007 15:55:02 -0500
Subject: [Twisted-Python] Windows maintainership
Message-ID: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>

I just wanted to let everyone know that I won't be able to maintain
Twisted on Windows anymore.

The last several months has seen virtually zero effort on my part
towards resolving any of the outstanding Windows issues, and the
future doesn't look any different. I will be sure to remove myself
from the various trac tickets.

I will still be around to maintain anything that I've written, and
hack on the odd bits of code that affect me.

Timothy Fitz is still listed as a maintainer, however.

Timothy, could you let us know where you stand?

Everyone feel free to go off on tangents here... e.g. do we really
need a Windows Maintainer position? Are people getting along just fine
as-is? Is there any infrastructure that would help our Windows support
efforts?

I'm not going to second-guess where we should go from here (if
anywhere), but instead I'll let this discussion develop organically...

-teratorn



From TimothyFitz at gmail.com  Thu Aug 23 17:24:59 2007
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 23 Aug 2007 14:24:59 -0700
Subject: [Twisted-Python] Re: Windows maintainership
In-Reply-To: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
References: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
Message-ID: <972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>

On 8/23/07, Eric Mangold <teratorn at gmail.com> wrote:
> Timothy Fitz is still listed as a maintainer, however.
>
> Timothy, could you let us know where you stand?

I'm still interested in helping, though I personally don't see a need
for a title/position of  "windows maintainer". Are there specific
things you were doing that you feel need picked up by someone else?

Timothy



From teratorn at gmail.com  Thu Aug 23 17:37:37 2007
From: teratorn at gmail.com (Eric Mangold)
Date: Thu, 23 Aug 2007 16:37:37 -0500
Subject: [Twisted-Python] Re: Windows maintainership
In-Reply-To: <972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>
References: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
	<972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>
Message-ID: <481d6b880708231437y121f77cj9431c47c2f118bbd@mail.gmail.com>

On 8/23/07, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 8/23/07, Eric Mangold <teratorn at gmail.com> wrote:
> > Timothy Fitz is still listed as a maintainer, however.
> >
> > Timothy, could you let us know where you stand?
>
> I'm still interested in helping, though I personally don't see a need
> for a title/position of  "windows maintainer". Are there specific
> things you were doing that you feel need picked up by someone else?

Well I'll just describe some things I was doing...

I was operating xpdev.twistedmatrix.com, which a few people had access
to, and on which a couple bugs were hacked on and fixed.

I never did finish setting it up just the way I wanted (remote,
concurrent access to Windows desktops is so friggin hard), and so I
never gave all the comitters an account on it. That's what I wanted to
do, however.

The person who had volunteered his colo machine to host this vmware
image is unfortunately unable to continue doing so. So this machine is
offline right now (thought I do have the vmware image if anyone wants
to pick up where I left off)

Also, at one point I was actively monitoring and pushing along all the
outstanding Windows tickets. I was also tackling various tickets
myself.

At various time people brought there windows question to me and I
tried to provide whatever expertise I could.



From stefan.lange at ubs.com  Fri Aug 24 07:08:48 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Fri, 24 Aug 2007 13:08:48 +0200
Subject: [Twisted-Python] SSH agent
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>

Hi all,

is there example code how to use an SSH agent with Twisted Conch?
How stable is this functionality, would you recommend to use it or would you rather opt for other approaches for having Python scripts use an SSH agent?

Regards,
stefan





From m-lists at the-moon.net  Sat Aug 25 07:53:18 2007
From: m-lists at the-moon.net (Richard Wall)
Date: Sat, 25 Aug 2007 12:53:18 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
Message-ID: <46D0182E.7060106@the-moon.net>

I'm giving a talk "An introduction to Twisted" at PyconUK and am trying to come 
up with some simple examples.

One of these, is the attached PortCheck module, that is supposed to attempt 
connection to a range of ports and report whether they're open, closed, filtered 
(timeout).

It works okay when run against localhost, or another machine on my local 
network, but I've noticed that when I run it against an internet host, the 
reactor takes ages to shutdown after scanning all the ports. I wondered if there 
was anything obviously wrong with the code.

Run it as follows from bash: python portcheck.py www.google.co.uk {1..1000}

Thanks in advance for any suggestions.

-RichardW.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: portcheck.py
Type: text/x-python
Size: 2375 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070825/4f3599aa/attachment.py 

From exarkun at twistedmatrix.com  Sun Aug 26 00:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 26 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1188101103.65.962688131@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-19 through 2007-08-26
Bugs opened: 14    Bugs closed: 8  Total open bugs: 1020 (+6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -4          |Core:     +3           
|Enhancement:  +0  |Normal:  +10          |Names:    -1           
|Task:         +1                         |Pb:       -2           
                                          |Trial:    +4           
                                          |Website:  +1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2791] [Patch] Bad boundary check when parsing a Socks4a packet (opened by adam.lofts)
    defect          core       http://twistedmatrix.com/trac/ticket/2791

[#2792] twisted.trial.test_runner.DryRunMixin is shaky (opened by therve)
    defect          trial      http://twistedmatrix.com/trac/ticket/2792

[#2793] trial's force-garbage-collection flag doesn't affect testSuite/test_suite generated tests (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2793

[#2794] CapturingReporter has no addError method (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2794

[#2795] trial should not print tracebacks for expected failures (opened by spiv)
    defect          trial      http://twistedmatrix.com/trac/ticket/2795

[#2796] trial should not print tracebacks for expected failures (opened by spiv) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2796

[#2797] Can't use "?" in a bug description (opened by spiv)
    defect          website    http://twistedmatrix.com/trac/ticket/2797

[#2798] Can't use non-ascii characters in a bug description (opened by spiv) (CLOSED, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/2798

[#2799] Feature Request:RTP RTCP support (opened by godson)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2799

[#2800] Provide t.n.srvconnect with full tests and do a general clean up. (opened by ralphm)
    task            names      http://twistedmatrix.com/trac/ticket/2800

[#2801] Link to howto's from API reference docs. (opened by mellis)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2801

[#2802] Datagram transports should be able to report datagram losses (opened by Peaker)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2802

[#2803] findFailure fails to find the correct failure in a more complicated case (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2803

[#2804] LoopingCall does not handle start() correctly from within its called function (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2804



Closed Bugs
______________________
                    ===== Highest =====
[#2312] Twisted Perspective Broker anonymous login support (opened by carlosedp, closed by exarkun, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/2312

[#2639] Allow access to the traceback associated with an error thrown into an inlineCallback (opened by Peaker, closed by Peaker, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2639

[#2275] Twisted test suite requires too much memory (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2275

[#2777] Fix SRVConnector to deal with bad nameservers. (opened by ralphm, closed by ralphm, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/2777

                    ===== Normal =====
[#439 ] pb can't use IAnonymous credentials (opened by timothy, closed by exarkun, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/439

[#2798] Can't use non-ascii characters in a bug description (opened by spiv, closed by exarkun, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/2798

[#2796] trial should not print tracebacks for expected failures (opened by spiv, closed by mithrandi, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2796

[#1908] SRVConnector keeps reconnecting on non-SRV responses (opened by ralphm, closed by ralphm, fixed)
    enhancement     names      http://twistedmatrix.com/trac/ticket/1908



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2804] LoopingCall does not handle start() correctly from within its called function (since 2007-08-25 22:12:07).

Mean open ticket age: 507 days, 7:29:42.671725.
Median: 401 days, 1:25:15.464863.
Standard deviation: 397 days, 11:32:23.076229.
Interquartile range: 494 days, 18:56:16.

Mean time between ticket creation and ticket resolution: 120 days, 8:51:46.565540.
Median: 14 days, 6:55:00.
Standard deviation is 224 days, 8:53:29.079086.
The interquartile range is 125 days, 12:43:31.

Mean time spent in review: 62 days, 16:08:09.768854.
Median: 4 days, 1:03:50.
Standard deviation: 136 days, 12:56:48.940480.
Interquartile range: 29 days, 2:22:33.

Mean number of times a ticket is reviewed: 1.90167865707.
Median: 1
Standard deviation: 1.51013270252.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    18 unique ticket reporters
    10 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    80 unique ticket reporters
    14 unique ticket reviewers
    16 unique ticket resolvers
In the last 48 weeks,
    157 unique ticket reporters
    20 unique ticket reviewers
    26 unique ticket resolvers




From lists at dirk-loss.de  Sun Aug 26 14:26:44 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Sun, 26 Aug 2007 20:26:44 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
Message-ID: <46D1C5E4.3080207@dirk-loss.de>

Hi,

following Eli Criffields nice example [1] I implemented a small SSL
server with Twisted. My server should not only verify the client
certificate, but also check the Common Name (CN) against a whitelist.
All this should happen before any user data is exchanged.

Verifying the client certificate worked nicely, but I couldn't access
its contents: transport.getPeerCertificate() always returned 'None'.
Apparently Eli had the same problem [2].

After some testing with PyOpenSSL now I think I have found a solution:

Before we can get the client certificate, we have to make sure that the
SSL handshake has taken place. (If it hasn't, there simply is no client
certificate to deal with yet.) This can be done by calling the
do_handshake() method of the underlying socket. The SSL handshake takes
some time so we will have to try several times.

Here's an (incomplete) example showing the interesting part:
- - cut ---
import OpenSSL

class MyProtocol(Protocol):

     def connectionMade(self):

         # Make sure that SSL handshake has taken place
         while True:
             try:
                 self.transport.socket.do_handshake()
                 break
             except OpenSSL.SSL.WantReadError:
                 pass

         clientCert = self.transport.getPeerCertificate()
         if clientCert is None:
             log.msg("No client cert available.")
         else:
             subject = clientCert.get_subject()
             log.msg("Subject: %s" % subject)
             log.msg("Common Name: %s" % subject.CN)
- - cut ---

If you see a nicer way to wait for the SSL handshake please let me
know. Using time.sleep() didn't work for me.

Side note:
Getting the certificate in a dataReceived() instead of connectionMade()
works without manually doing the handshake. I think this is because the
underlying PyOpenSSL recv() method handles the handshake for us. But at
least for my purpose it makes more sense to verify the client cert
right upon connection, before any user data is exchanged.

Regards,
Dirk

[1] http://archives.free.net.ph/message/20070511.203607.36001e38.en.html
[2] http://archives.free.net.ph/message/20070607.211438.9354342f.en.html



From exarkun at divmod.com  Sun Aug 26 15:05:40 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 26 Aug 2007 15:05:40 -0400
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <46D1C5E4.3080207@dirk-loss.de>
Message-ID: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>

On Sun, 26 Aug 2007 20:26:44 +0200, Dirk Loss <lists at dirk-loss.de> wrote:
>Hi,
>
>following Eli Criffields nice example [1] I implemented a small SSL
>server with Twisted. My server should not only verify the client
>certificate, but also check the Common Name (CN) against a whitelist.
>All this should happen before any user data is exchanged.
>
>Verifying the client certificate worked nicely, but I couldn't access
>its contents: transport.getPeerCertificate() always returned 'None'.
>Apparently Eli had the same problem [2].
>
>After some testing with PyOpenSSL now I think I have found a solution:
>
>Before we can get the client certificate, we have to make sure that the
>SSL handshake has taken place. (If it hasn't, there simply is no client
>certificate to deal with yet.) This can be done by calling the
>do_handshake() method of the underlying socket. The SSL handshake takes
>some time so we will have to try several times.

This is basically a bug in Twisted's SSL support.  I forget if there's a
way to fix it using PyOpenSSL or if it's a limitation of the bindings.

>
>Here's an (incomplete) example showing the interesting part:
>- - cut ---
>import OpenSSL
>
>class MyProtocol(Protocol):
>
>     def connectionMade(self):
>
>         # Make sure that SSL handshake has taken place
>         while True:
>             try:
>                 self.transport.socket.do_handshake()
>                 break
>             except OpenSSL.SSL.WantReadError:
>                 pass
>
>         clientCert = self.transport.getPeerCertificate()
>         if clientCert is None:
>             log.msg("No client cert available.")
>         else:
>             subject = clientCert.get_subject()
>             log.msg("Subject: %s" % subject)
>             log.msg("Common Name: %s" % subject.CN)
>- - cut ---
>
>If you see a nicer way to wait for the SSL handshake please let me
>know. Using time.sleep() didn't work for me.

This solution has at least two related problems:

  * it will block the reactor until the handshake for that client completes,
    which means no other I/O will occur and none other application code will
    be able to run.  This might be fine for your application, but in general
    it's not a very good thing.

  * if a malicious client connects, they can just never complete the
    handshake and your server will hang in that loop indefinitely.

>
>Side note:
>Getting the certificate in a dataReceived() instead of connectionMade()
>works without manually doing the handshake. I think this is because the
>underlying PyOpenSSL recv() method handles the handshake for us. But at
>least for my purpose it makes more sense to verify the client cert
>right upon connection, before any user data is exchanged.

The ideal solution would be to fix the bug in Twisted's SSL support so that
connectionMade is called at the right time.  Another possible solution might
be to do your verification using the SSL context object.  CertificateOptions
might give you some ideas about how to do this:

http://twistedmatrix.com/documents/current/api/twisted.internet.ssl.CertificateOptions.html

Jean-Paul



From paulswartz at gmail.com  Sun Aug 26 16:17:14 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 26 Aug 2007 16:17:14 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>
References: <AcfmPyAke2tQ0jlyQESpjUKvlJctdA==>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>

On 8/24/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi all,
>
> is there example code how to use an SSH agent with Twisted Conch?
> How stable is this functionality, would you recommend to use it or would you rather > opt for other approaches for having Python scripts use an SSH agent?

There is some code in twisted.conch.ssh.agent to interact with a key
agent.  It doesn't implement all of the features an agent supports,
just enough to test and get identities.  What are you trying to use an
agent for?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From lists at dirk-loss.de  Sun Aug 26 16:23:49 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Sun, 26 Aug 2007 22:23:49 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
Message-ID: <46D1E155.1040508@dirk-loss.de>

Jean-Paul Calderone wrote:
> This solution has at least two related problems:
>  * it will block the reactor until the handshake for that client completes,

Yes, it's ugly. Not being able to run other application code is no 
problem in my case, so I thought I could live with that. But the possibe 
DoS attack you mentioned should be avoided, of course.

> The ideal solution would be to fix the bug in Twisted's SSL support so that
> connectionMade is called at the right time.  

This would be nice. Maybe I should take a deeper look at Twisted's SSL code.

> Another possible solution might be to do your verification using the SSL context object.  

Could you elaborate on this? I think I am already using the SSL context 
object to do the verification:

theCert = ssl.PrivateCertificate.loadPEM(open(myKey).read())
theCA = ssl.Certificate.loadPEM(open(trustedCA).read())
ctx = theCert.options(theCA)
ctx.verify = True
ctx.verifyDepth = 9
ctx.requireCertificate = True
ctx.verifyOnce = False
application = service.Application("MySSLServer")
MyService = internet.SSLServer(listenport, MyAppFactory(), ctx)
MyService.setServiceParent(application)

(Above code obviously will not run. Just to show the basic steps I take.)

Regards
Dirk



From exarkun at divmod.com  Sun Aug 26 17:21:30 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 26 Aug 2007 17:21:30 -0400
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <46D1E155.1040508@dirk-loss.de>
Message-ID: <20070826212130.8162.1349943820.divmod.quotient.1689@ohm>

On Sun, 26 Aug 2007 22:23:49 +0200, Dirk Loss <lists at dirk-loss.de> wrote:
>Jean-Paul Calderone wrote:
>>This solution has at least two related problems:
>>  * it will block the reactor until the handshake for that client completes,
>
>Yes, it's ugly. Not being able to run other application code is no problem 
>in my case, so I thought I could live with that. But the possibe DoS attack 
>you mentioned should be avoided, of course.
>>The ideal solution would be to fix the bug in Twisted's SSL support so that
>>connectionMade is called at the right time.
>
>This would be nice. Maybe I should take a deeper look at Twisted's SSL code.
>>Another possible solution might be to do your verification using the SSL 
>>context object.
>
>Could you elaborate on this? I think I am already using the SSL context 
>object to do the verification:
>
>theCert = ssl.PrivateCertificate.loadPEM(open(myKey).read())
>theCA = ssl.Certificate.loadPEM(open(trustedCA).read())
>ctx = theCert.options(theCA)
>ctx.verify = True
>ctx.verifyDepth = 9
>ctx.requireCertificate = True
>ctx.verifyOnce = False
>application = service.Application("MySSLServer")
>MyService = internet.SSLServer(listenport, MyAppFactory(), ctx)
>MyService.setServiceParent(application)
>
>(Above code obviously will not run. Just to show the basic steps I take.)

CertificateOptions doesn't directly support a custom verification callback,
which I think is what you want, but it does use that feature in order to log
SSL errors.  If you take a look at the implementation, you'll see a nested
function named _trackVerificationProblems.  If this could be customized by
application code, then it could do things like check hostnames.  I forget why
this isn't exposed to applications.  I think someone suggested that it wasn't
actually what you wanted to do, but I don't remember any more details than
that.

Jean-Paul



From stefan.lange at ubs.com  Mon Aug 27 04:08:20 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Mon, 27 Aug 2007 10:08:20 +0200
Subject: [Twisted-Python] SSH agent
In-Reply-To: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>

Hi Paul,

I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

Regards,
stefan 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Paul
Swartz
Sent: 26 August 2007 22:17
To: Twisted general discussion
Subject: Re: [Twisted-Python] SSH agent


On 8/24/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi all,
>
> is there example code how to use an SSH agent with Twisted Conch?
> How stable is this functionality, would you recommend to use it or would you rather > opt for other approaches for having Python scripts use an SSH agent?

There is some code in twisted.conch.ssh.agent to interact with a key
agent.  It doesn't implement all of the features an agent supports,
just enough to test and get identities.  What are you trying to use an
agent for?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From paulswartz at gmail.com  Mon Aug 27 08:41:20 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Mon, 27 Aug 2007 08:41:20 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>
References: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>

On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi Paul,
>
> I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
> The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
> Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

If that's all you want, you don't need an agent at all.  Just decrypt
the key (see t.c.ssh.keys.getPrivateKeyObject) and then implement
something like doc/conch/examples/sshsimpleclient.py using that
decrypted key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From stefan.lange at ubs.com  Mon Aug 27 12:00:09 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Mon, 27 Aug 2007 18:00:09 +0200
Subject: [Twisted-Python] SSH agent
In-Reply-To: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>

Thanks, you are certainly right. 
I was first concerned about security implications when directly reading in the private key instead of accessing an SSH agent but on second thought there seems no difference security wise.
Got the slightly modified example working, following your advice.

Another question:
Is there already functionality in Twisted for using Kerberos for SSH authentication?

Regards,
stefan

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Paul
Swartz
Sent: 27 August 2007 14:41
To: Twisted general discussion
Subject: Re: [Twisted-Python] SSH agent


On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi Paul,
>
> I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
> The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
> Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

If that's all you want, you don't need an agent at all.  Just decrypt
the key (see t.c.ssh.keys.getPrivateKeyObject) and then implement
something like doc/conch/examples/sshsimpleclient.py using that
decrypted key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From lacrymology at gmail.com  Mon Aug 27 12:49:52 2007
From: lacrymology at gmail.com (Tomas Neme)
Date: Mon, 27 Aug 2007 13:49:52 -0300
Subject: [Twisted-Python] Chat server
Message-ID: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>

I'm making an MMO game with several "levels" that will be distributed
over different servers and need a centralized chat server. The general
idea was to make an IRC (exarkun recommended Jabber but this is just a
detail) server with channels like #all #<guild> #<room>, etcetera, and
make the game client logon into it and let it handle all the chat
data.

I've been reading t.words's tap and service but I'm not getting the
general idea of what a chat service (with probably an offline
messaging service) should look like, and what does all of the stuff
underneath words do, and wether I need it or not if I'm not going to
be multi-protocol'ed

Does anyone have a few pointers on what should I read before getting
myself into it? words' documentation is not exactly throughout, so I'm
kind of lost here

Tom?s (Lacrymology)

-- 
|_|0|_|
|_|_|0|
|0|0|0|



From paulswartz at gmail.com  Mon Aug 27 13:35:23 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Mon, 27 Aug 2007 13:35:23 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>
References: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708271035l40b27e14h8bbbcc5579978e55@mail.gmail.com>

On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Thanks, you are certainly right.
> I was first concerned about security implications when directly reading in the private key instead of accessing an SSH agent but on second thought there seems no difference security wise.
> Got the slightly modified example working, following your advice.
>
> Another question:
> Is there already functionality in Twisted for using Kerberos for SSH authentication?

There is not, but patches are certainly welcome :)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From db3l.net at gmail.com  Mon Aug 27 15:00:19 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 27 Aug 2007 15:00:19 -0400
Subject: [Twisted-Python] Re: SSL: Getting the client certificate
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
	<46D1E155.1040508@dirk-loss.de>
Message-ID: <m27ingajlo.fsf@valheru.db3l.homeip.net>

Dirk Loss <lists at dirk-loss.de> writes:

> Jean-Paul Calderone wrote:
(...)
>> Another possible solution might be to do your verification using the
>> SSL context object.  
>
> Could you elaborate on this? I think I am already using the SSL
> context object to do the verification:

Not sure if it helps, but here's some old code of mine where I
experimented with the echo SSL examples to add symmetric certificate
checking.  Just checked and it seems ok with Python 2.5.1 and Twisted
2.5.0 (pyOpenSSL 0.6).

It uses direct SSL context objects rather than the Twisted
wrapper versions.  To be honest, at the time it was because I was
still feeling my way around the SSL support and found using the direct
context easier, but I believe you do have full access to the
certificate in the context's _verify method.

Returning 0/False from _verify rather than just propagating ok can
reject the handshake.  (Note that _verify can be called multiple times
during the sequence as well as in cases where ok is already 0 I
believe).

There are a bunch of debugging prints still in the code where I was seeing
what sort of stuff was available to the context factory/verification.

-- David


echoserv_ssl.py:
---------------

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from OpenSSL import SSL, crypto

class ServerContextFactory:
    
    def _verify(self, connection, x509, errnum, errdepth, ok):
        print '_verify (ok=%d):' % ok
        print '  subject:', x509.get_subject()
        print '  issuer:', x509.get_issuer()
        print '  errnum %s, errdepth %d' % (errnum, errdepth)
        return False # ok

    def getContext(self):
        """Create an SSL context.
        
        This is a sample implementation that loads a certificate from a file 
        called 'server.pem'."""
        ctx = SSL.Context(SSL.SSLv23_METHOD)
        ctx.use_certificate_file('server.pem')
        ctx.use_privatekey_file('server.pem')
        print 'Context additions'
        ctx.load_client_ca('ca/all-cas.cert')
        ctx.load_verify_locations('ca/ca.cert')
        ctx.set_verify(SSL.VERIFY_PEER|SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
                       self._verify)
        print 'verify depth:', ctx.get_verify_depth()
        ctx.set_verify_depth(10)
        print 'verify depth:', ctx.get_verify_depth()
        return ctx

import echoserv

class MyProtocol(echoserv.Echo):

    def connectionMade(self):
        print 'connectionMade', self.transport.getPeerCertificate()
        return echoserv.Echo.connectionMade(self)

    def dataReceived(self, data):
        print 'dataReceived', self.transport.getPeerCertificate()
        return echoserv.Echo.dataReceived(self, data)


if __name__ == '__main__':
    import echoserv, sys
    from twisted.internet.protocol import Factory
    from twisted.internet import ssl, reactor
    from twisted.python import log
    log.startLogging(sys.stdout)
    factory = Factory()
    factory.protocol = MyProtocol
    reactor.listenSSL(9000, factory, ServerContextFactory())
    reactor.run()


echoclient_ssl.py:
-----------------

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from OpenSSL import SSL
import sys

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor

import inspect


class ClientContextFactory(ssl.ClientContextFactory):

    def _verify(self, connection, x509, errnum, errdepth, ok):
        print '_verify (ok=%d):' % ok
        print '  subject:', x509.get_subject()
        print '  issuer:', x509.get_issuer()
        print '  errnum %s, errdepth %d' % (errnum, errdepth)
        return ok

    def getContext(self):
        ctx = ssl.ClientContextFactory.getContext(self)
        ctx.use_certificate_file('client.pem')
        ctx.use_privatekey_file('client.pem')

        ctx.load_verify_locations('ca/ca.cert')
        ctx.set_verify(SSL.VERIFY_PEER|SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
                       self._verify)

        return ctx

class EchoClient(LineReceiver):
    end="Bye-bye!"

    def connectionMade(self):
        self.sendLine("Hello, world!")
        self.sendLine("What a fine day it is.")
        self.sendLine(self.end)

    def connectionLost(self, reason):
        print 'connection lost (protocol)'

    def lineReceived(self, line):
        x509 = self.transport.getPeerCertificate()
        methods = [x for x in dir(x509)
                   if callable(getattr(x509,x)) and
                   not (x.startswith('set_') or
                        x.startswith('add_') or
                        x.startswith('gmtime_') or
                        x in ('sign','digest'))]
        for m in methods:
            print m, getattr(x509,m)()
        print "receive:", line
        if line==self.end:
            self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

def main():
    if len(sys.argv) > 1:
        host = sys.argv[1]
    else:
        host = 'localhost'

    factory = EchoClientFactory()
    reactor.connectSSL(host, 9000, factory, ClientContextFactory())
    reactor.run()

if __name__ == '__main__':
    main()




From pasci.bach at gmail.com  Mon Aug 27 15:01:30 2007
From: pasci.bach at gmail.com (Pascal Bach)
Date: Mon, 27 Aug 2007 21:01:30 +0200
Subject: [Twisted-Python] SMS Protocol UCP /EMI
Message-ID: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>

Hello
I'm currently searching for an UCP / EMI protocol implementation. I'm
currently experimenting with twisted.
Before I go further with my implementation work I would like to ask, if
there are others interested in an UCP / EMI protocol implementation or in a
generic SMS Protocol  implementation in particular. Maybe somebody has
already done some work on that?

Thank you
 Best Regards
 Pascal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070827/059b21b9/attachment.htm 

From miles.chris at gmail.com  Mon Aug 27 17:33:30 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 27 Aug 2007 22:33:30 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
In-Reply-To: <46D0182E.7060106@the-moon.net>
References: <46D0182E.7060106@the-moon.net>
Message-ID: <0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>

Hi Richard,

I tried your code and it works fine for me.  The script always exits  
right away after scanning all ports.  I tried various hosts and  
various port ranges.

I'm running Python 2.4.4, Twisted 2.5.0, on OS X.

btw: I would warn against port scanning public sites such as google;  
you don't want to trip an IDS and cop the wrath of a network admin.

Hope this helps.

Cya at PyConUK.

Cheers,
Chris

On 25 Aug 2007, at 12:53, Richard Wall wrote:

> I'm giving a talk "An introduction to Twisted" at PyconUK and am  
> trying to come up with some simple examples.
>
> One of these, is the attached PortCheck module, that is supposed to  
> attempt connection to a range of ports and report whether they're  
> open, closed, filtered (timeout).
>
> It works okay when run against localhost, or another machine on my  
> local network, but I've noticed that when I run it against an  
> internet host, the reactor takes ages to shutdown after scanning  
> all the ports. I wondered if there was anything obviously wrong  
> with the code.
>
> Run it as follows from bash: python portcheck.py www.google.co.uk  
> {1..1000}
>
> Thanks in advance for any suggestions.
>
> -RichardW.
> """
> A module to demonstrate some of the simplest twisted client code  
> possible
> @author: Richard Wall <richard (at) the-moon.net>
> """
> import sys
>
> from twisted.internet import reactor
> from twisted.internet.defer import DeferredList
> from twisted.internet.task import Cooperator
> from twisted.internet.protocol import ClientCreator, Protocol
> from twisted.internet.error import ConnectionRefusedError,  
> TimeoutError
>
> STATUS_OPEN = "open"
> STATUS_CLOSED = "closed"
> STATUS_TIMEOUT = "timeout"
>
> MAX_SIMULTANEOUS_CONNECTIONS = 100
>
> def getPortStatus(host, port, timeout=1):
>     """
>     Return a deferred that is called back with one of: open,  
> closed, timeout
>     @param host: The hostname or IP with which to attempt a connection
>     @param port: The port to connect
>     @param timeout: Number of seconds to wait for connection before  
> giving up
>     @return: A deferred which will call back with one of
>              STATUS_{OPEN,CLOSED,TIMEOUT}
>     """
>
>     cli = ClientCreator(reactor, Protocol)
>
>     d = cli.connectTCP(host, port, timeout=timeout)
>
>     def cb(proto):
>         proto.transport.loseConnection()
>         return STATUS_OPEN
>
>     def eb(err):
>         expectedErrors = {
>             ConnectionRefusedError: STATUS_CLOSED,
>             TimeoutError: STATUS_TIMEOUT
>         }
>
>         e = err.trap(*expectedErrors.keys())
>         if e:
>             return expectedErrors[e]
>
>     d.addCallbacks(cb, eb)
>
>     return d
>
> def main(argv):
>     """
>     Command line access to the getPortStatus function. Pass me a  
> hostname and
>     one or more ports and I will report their status.
>     """
>     host = argv[1]
>     ports = map(int, argv[2:])
>
>     def cb(status, host, port):
>          sys.stdout.write("%s:%d %s\n"%(host,port,status))
>
>     def eb(err):
>         sys.stderr.write("%s\n" % err.value)
>
>     def portStatusGenerator(host, ports):
>         for p in ports:
>             d = getPortStatus(host, p)
>             d.addCallbacks(cb, eb, (host, p))
>             yield d
>
>     # Limit parallelism otherwise we run out of file descriptors
>     # See http://jcalderone.livejournal.com/24285.html
>     work = portStatusGenerator(host, ports)
>     coop = Cooperator()
>     d = DeferredList(
>             [coop.coiterate(work) for i in xrange 
> (MAX_SIMULTANEOUS_CONNECTIONS)])
>
>     d.addCallback(lambda ign: reactor.stop())
>     reactor.run()
>
> if __name__ == "__main__":
>     sys.exit(main(sys.argv))
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070827/b4838d1e/attachment.htm 

From therve at free.fr  Tue Aug 28 03:32:22 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Tue, 28 Aug 2007 09:32:22 +0200
Subject: [Twisted-Python] SMS Protocol UCP /EMI
In-Reply-To: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>
References: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>
Message-ID: <20070828093222.k736iwn00sgcsggw@wasabox.wasabout.net>

Quoting Pascal Bach <pasci.bach at gmail.com>:

> Hello
> I'm currently searching for an UCP / EMI protocol implementation. I'm
> currently experimenting with twisted.
> Before I go further with my implementation work I would like to ask, if
> there are others interested in an UCP / EMI protocol implementation or in a
> generic SMS Protocol  implementation in particular. Maybe somebody has
> already done some work on that?

Hello,

I used the library here: http://mjoc.sig.lt/projects/smpplib/ to  
implement a SMPP client with Twisted. It's not particularly awesome,  
but it works well enough for my needs. I could probably put it  
somewhere if you're interested.

-- 
Thomas




From miles.chris at gmail.com  Tue Aug 28 08:12:51 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Tue, 28 Aug 2007 13:12:51 +0100
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
In-Reply-To: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>
References: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>
Message-ID: <10795807-5004-499B-8C33-D4B9C3B1C6C4@gmail.com>


On 23 Aug 2007, at 18:52, Jean-Paul Calderone wrote:

> On Thu, 23 Aug 2007 18:48:24 +0100, Chris Miles  
> <miles.chris at gmail.com> wrote:
>> I have a Twisted app that is often waiting for child processes  
>> (calls  to external commands).
>>
>> I'd like to make the app gracefully shutdown by default.  As in,  
>> when  the app is killed I want to make sure that any currently  
>> running  child processes can complete and the results of their  
>> work can be  processed before the daemon dies.
>>
>> What would be the best way to achieve this?
>>
>> Can I override the SIGTERM signal handler so that it waits for  
>> other  events to complete before allowing the app to die?
>
> twistd will wait for any Deferred returned by an  
> IService.stopService method
> in the application hierarchy before stopping the reactor and exiting.

Thanks, that seems to be what I wanted.  Which also led me to re- 
writing my service to be a proper IService rather than just piggy  
backing calls onto TimerService.

Cheers
Chris Miles




From m-lists at the-moon.net  Tue Aug 28 17:45:42 2007
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 28 Aug 2007 22:45:42 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
In-Reply-To: <0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>
References: <46D0182E.7060106@the-moon.net>
	<0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>
Message-ID: <46D49786.8090801@the-moon.net>

Chris Miles wrote:
> I tried your code and it works fine for me.  The script always exits 
> right away after scanning all ports.  I tried various hosts and various 
> port ranges.
> I'm running Python 2.4.4, Twisted 2.5.0, on OS X.

Chris,

Thanks for trying it out. I'm working on Ubuntu Gutsy, Python2.5, Twisted trunk, 
Kernel 2.6.22. I just tried on a server running Ubuntu Dapper, Python2.4, kernel 
2.6.15 and that shuts down straight away, as you found. Oh well.

> btw: I would warn against port scanning public sites such as google; you 
> don't want to trip an IDS and cop the wrath of a network admin.

I was using someone elses ADSL at the time :)

> Hope this helps.
> Cya at PyConUK.

Yep, look forward to it. Assuming I finish the slides in time. ;)

-RichardW.




From lee.a.connell at gmail.com  Tue Aug 28 20:48:50 2007
From: lee.a.connell at gmail.com (Lee Connell)
Date: Tue, 28 Aug 2007 20:48:50 -0400
Subject: [Twisted-Python] Chat server
In-Reply-To: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>
References: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>
Message-ID: <1188348530.16429.2.camel@phucku>

You could just build a tcp server and write your own protocol to handle
commands between the client and the server.  I have example of basic way
of handling this using XML as the wrapper around the packets if
interested.

On Mon, 2007-08-27 at 13:49 -0300, Tomas Neme wrote:
> I'm making an MMO game with several "levels" that will be distributed
> over different servers and need a centralized chat server. The general
> idea was to make an IRC (exarkun recommended Jabber but this is just a
> detail) server with channels like #all #<guild> #<room>, etcetera, and
> make the game client logon into it and let it handle all the chat
> data.
> 
> I've been reading t.words's tap and service but I'm not getting the
> general idea of what a chat service (with probably an offline
> messaging service) should look like, and what does all of the stuff
> underneath words do, and wether I need it or not if I'm not going to
> be multi-protocol'ed
> 
> Does anyone have a few pointers on what should I read before getting
> myself into it? words' documentation is not exactly throughout, so I'm
> kind of lost here
> 
> Tom?s (Lacrymology)
> 




From matusis at yahoo.com  Wed Aug 29 04:05:32 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Wed, 29 Aug 2007 01:05:32 -0700
Subject: [Twisted-Python] matching ip ranges
Message-ID: <006501c7ea13$5ffb9570$1ff2c050$@com>

We need to match IP ranges of connections, were ranges are specified in the
"/" notation (e.g. 10.10.2.0/24)

What is the best way to do this without consuming too much CPU resources
when the connection rate is very high? 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070829/9a1489d7/attachment.htm 

From maarten at treewalker.org  Wed Aug 29 04:32:10 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 29 Aug 2007 10:32:10 +0200
Subject: [Twisted-Python] matching ip ranges
In-Reply-To: <006501c7ea13$5ffb9570$1ff2c050$@com>
References: <006501c7ea13$5ffb9570$1ff2c050$@com>
Message-ID: <200708291032.17757.maarten@treewalker.org>

On Wednesday 29 August 2007, Alec Matusis wrote:
> We need to match IP ranges of connections, were ranges are specified in the
> "/" notation (e.g. 10.10.2.0/24)
>
> What is the best way to do this without consuming too much CPU resources
> when the connection rate is very high?

Convert the IP address to an integer and check using an AND mask:

if ip & mask == base:
  # in range

where "ip" is the IP address of the incoming connection as an integer, "mask" 
is the netmask as an integer (/24 => 0xFFFFFF00) and "base" is the lowest IP 
address in the range ("base & mask == base" must hold).

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20070829/cac96dfd/attachment.pgp 

From general at eepatents.com  Wed Aug 29 11:55:34 2007
From: general at eepatents.com (Ed Suominen)
Date: Wed, 29 Aug 2007 11:55:34 -0400
Subject: [Twisted-Python] matching ip ranges
In-Reply-To: <006501c7ea13$5ffb9570$1ff2c050$@com>
References: <006501c7ea13$5ffb9570$1ff2c050$@com>
Message-ID: <46D596F6.3090204@eepatents.com>

Alec Matusis wrote:
> We need to match IP ranges of connections, were ranges are specified in
> the ?/? notation (e.g. 10.10.2.0/24)
> 
> What is the best way to do this without consuming too much CPU resources
> when the connection rate is very high?

Take a look at the AddressRestrictorMixin in twisted_goodies.misc:

http://foss.eepatents.com/trac/Twisted-Goodies/browser/projects/Twisted-Goodies/trunk/twisted_goodies/misc/__init__.py

Best regards, Ed



From imgrey at gmail.com  Thu Aug 30 04:09:27 2007
From: imgrey at gmail.com (Vitaliyi)
Date: Thu, 30 Aug 2007 11:09:27 +0300
Subject: [Twisted-Python] AsynQueue
Message-ID: <3aac340708300109k65fa5b56q684ada791edf8885@mail.gmail.com>

Good Day

Does someone have an idea how to use AQ remotely with PB ?
I was unable to find any documentation and stuck in trying to make it
work as expected.


Thanks



From abierbaum at gmail.com  Thu Aug 30 11:57:39 2007
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 30 Aug 2007 09:57:39 -0600
Subject: [Twisted-Python] deferToThread crashing on Windows, stable on Linux
Message-ID: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>

I have run into an interesting little bug and before I try to hunt it
down further I wanted to check and see if anyone else has seen
anything similar.

I have a fairly complex twisted 2.5 application that uses
deferToThread to spawn off worker threads that need to call some
blocking non-twisted code (query webserver, query database, etc).  The
application uses these workers quite a bit but there are normally
never more then 2 or 3 outstanding requests running.

The application runs rock-solid on Linux, but it crashes in less then
a minute on Windows.

Has anyone else seen anything like this?  Are there any known issues
of deferToThread being less stable on Windows then Linux or are their
any differences between how twisted works on the platforms that I
should be looking into?

-Allen



From lists at dirk-loss.de  Thu Aug 30 12:08:01 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Thu, 30 Aug 2007 18:08:01 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <m27ingajlo.fsf@valheru.db3l.homeip.net>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>	<46D1E155.1040508@dirk-loss.de>
	<m27ingajlo.fsf@valheru.db3l.homeip.net>
Message-ID: <46D6EB61.80100@dirk-loss.de>

David Bolen wrote:
> Not sure if it helps, but here's some old code of mine where I
> experimented with the echo SSL examples to add symmetric certificate
> checking.

Thank you very much for your code. It's useful to see that the peer cert 
could be interpreted in the _verify callback. And your method to 
retrieve all X.509 attributes is quite clever. :)

But I could not get your SSL server and client to work. At least not 
completely: After printing the server's certificates (server.pem and 
ca.pem), the client quits with the following error:

_verify (ok=1):
...
errnum 0, errdepth 0
connection lost (protocol)
connection lost: [('SSL routines', 'SSL3_READ_BYTES', 'sslv3 alert 
certificate unknown'), ('SSL routines', 'SSL3_READ_BYTES', 'ssl 
handshake failure')]

Maybe there's some problem with my certificates. I had successfully 
tested them with OpenSSL, though:

openssl s_server -accept 9000 -Verify 9 -cert server.pem -CAfile ca.pem
openssl s_client -connect localhost:9000 -verify 9 -cert client.pem 
-CAfile ca.pem

(In your code I replaced the "ca/ca.cert" and "ca/all-cas.cert" 
filenames with "ca.pem".)

I get the same error if I use your server and OpenSSL as a client.

If you have any idea, I'll be happy to hear from you again.

For now I will just use use the second method I mentioned in my original 
post: getting the peer certificate in dataReceived() instead of 
connectionMade(). This at least avoids the ugly do_handshake() polling 
loop I had been using. But there's still some DoS risk because a 
malicious client could just wait forever before sending any data (and 
thus before authentication.)

Regards
Dirk



From arkanes at gmail.com  Thu Aug 30 12:39:42 2007
From: arkanes at gmail.com (Chris Mellon)
Date: Thu, 30 Aug 2007 11:39:42 -0500
Subject: [Twisted-Python] deferToThread crashing on Windows,
	stable on Linux
In-Reply-To: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
References: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
Message-ID: <4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>

On 8/30/07, Allen Bierbaum <abierbaum at gmail.com> wrote:
> I have run into an interesting little bug and before I try to hunt it
> down further I wanted to check and see if anyone else has seen
> anything similar.
>
> I have a fairly complex twisted 2.5 application that uses
> deferToThread to spawn off worker threads that need to call some
> blocking non-twisted code (query webserver, query database, etc).  The
> application uses these workers quite a bit but there are normally
> never more then 2 or 3 outstanding requests running.
>
> The application runs rock-solid on Linux, but it crashes in less then
> a minute on Windows.
>
> Has anyone else seen anything like this?  Are there any known issues
> of deferToThread being less stable on Windows then Linux or are their
> any differences between how twisted works on the platforms that I
> should be looking into?
>
> -Allen

I use deferToThread heavily for the same thing on Windows and haven't
seen any crashes. I would double and triple check the threadsafety of
the APIs you are calling.



From abierbaum at gmail.com  Thu Aug 30 13:10:23 2007
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 30 Aug 2007 11:10:23 -0600
Subject: [Twisted-Python] deferToThread crashing on Windows,
	stable on Linux
In-Reply-To: <4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>
References: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
	<4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>
Message-ID: <bea9869d0708301010s30b13ea4q977b5fb8b4334cb@mail.gmail.com>

Ok.  I will start searching the code.

This may be more of a python question, but my crash ends up being:

Unhandled exception at 0x1e0ab834 in python.exe: 0xC0000005: Access
violation reading location 0x00005526.

I can go into visual studio and see the C/C++ call stack, but this
doesn't let me see the python callstack.  Is there a good way to get a
the python callstack (for multiple threads) when bug triggers on the
C/C++ side of the fence?

-Allen

On 8/30/07, Chris Mellon <arkanes at gmail.com> wrote:
> On 8/30/07, Allen Bierbaum <abierbaum at gmail.com> wrote:
> > I have run into an interesting little bug and before I try to hunt it
> > down further I wanted to check and see if anyone else has seen
> > anything similar.
> >
> > I have a fairly complex twisted 2.5 application that uses
> > deferToThread to spawn off worker threads that need to call some
> > blocking non-twisted code (query webserver, query database, etc).  The
> > application uses these workers quite a bit but there are normally
> > never more then 2 or 3 outstanding requests running.
> >
> > The application runs rock-solid on Linux, but it crashes in less then
> > a minute on Windows.
> >
> > Has anyone else seen anything like this?  Are there any known issues
> > of deferToThread being less stable on Windows then Linux or are their
> > any differences between how twisted works on the platforms that I
> > should be looking into?
> >
> > -Allen
>
> I use deferToThread heavily for the same thing on Windows and haven't
> seen any crashes. I would double and triple check the threadsafety of
> the APIs you are calling.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From db3l.net at gmail.com  Thu Aug 30 15:47:57 2007
From: db3l.net at gmail.com (David Bolen)
Date: Thu, 30 Aug 2007 15:47:57 -0400
Subject: [Twisted-Python] Re: SSL: Getting the client certificate
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
	<46D1E155.1040508@dirk-loss.de>
	<m27ingajlo.fsf@valheru.db3l.homeip.net>
	<46D6EB61.80100@dirk-loss.de>
Message-ID: <m2wsvcerde.fsf@valheru.db3l.homeip.net>

Dirk Loss <lists at dirk-loss.de> writes:

> But I could not get your SSL server and client to work. At least not
> completely: After printing the server's certificates (server.pem and
> ca.pem), the client quits with the following error:

Did you fix the stray "False" I left in the server _verify routine?  I
just noticed that it was still there from when I tested (before
writing the response), so instead of returning the value of "ok" it's
explicitly failing in all cases.

Sorry about that.

-- David




From lists at dirk-loss.de  Thu Aug 30 16:07:01 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Thu, 30 Aug 2007 22:07:01 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <m2wsvcerde.fsf@valheru.db3l.homeip.net>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>	<46D1E155.1040508@dirk-loss.de>	<m27ingajlo.fsf@valheru.db3l.homeip.net>	<46D6EB61.80100@dirk-loss.de>
	<m2wsvcerde.fsf@valheru.db3l.homeip.net>
Message-ID: <46D72365.9070403@dirk-loss.de>

David Bolen wrote:
> Did you fix the stray "False" I left in the server _verify routine?

Oh. I just overlooked that. Now everything works fine. :)

Thanks again.

Dirk




From beau at subobscur.us  Fri Aug 31 19:36:47 2007
From: beau at subobscur.us (Beau Hargis)
Date: Fri, 31 Aug 2007 16:36:47 -0700 (PDT)
Subject: [Twisted-Python] Possible to delay connectTCP?
Message-ID: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>

I have an application which connects to a machine which has 50-60 ports open on it to receive data (each for a different region). It acts like a switch. Problem is that when I make all those connection requests at the same time the server falls over trying to handle all the connections requests from my application. I cannot control or change the behaviour of the server I am connecting to, however, I am also unable to find a way to easily to add a delay between connection requests in twisted (without blocking the reactor), so that only 2 or 3 start up at a time.

Is there an elegant and clean way to do such a thing? Twisted has worked beautifully for everything else, but I can't replace this one server for a while until I can duplicate the rest of its functionality, so I am dependant on it providing the data.






From radix at twistedmatrix.com  Fri Aug 31 19:56:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 31 Aug 2007 19:56:02 -0400
Subject: [Twisted-Python] Possible to delay connectTCP?
In-Reply-To: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>
References: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>
Message-ID: <60ed19d40708311656u33457149s8eb9f3d4d5a61cf7@mail.gmail.com>

On 8/31/07, Beau Hargis <beau at subobscur.us> wrote:
>
> I have an application which connects to a machine which has 50-60 ports
> open on it to receive data (each for a different region). It acts like a
> switch. Problem is that when I make all those connection requests at the
> same time the server falls over trying to handle all the connections
> requests from my application. I cannot control or change the behaviour of
> the server I am connecting to, however, I am also unable to find a way to
> easily to add a delay between connection requests in twisted (without
> blocking the reactor), so that only 2 or 3 start up at a time.
>
> Is there an elegant and clean way to do such a thing? Twisted has worked
> beautifully for everything else, but I can't replace this one server for a
> while until I can duplicate the rest of its functionality, so I am dependant
> on it providing the data.


The way to delay (that is, schedule) function calls until a later point in
time is reactor.callLater(seconds, callable, *args, **kwargs).

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20070831/2e53799d/attachment.htm 

From the_fade_away at yahoo.de  Thu Aug  2 06:00:07 2007
From: the_fade_away at yahoo.de (The Fade Away)
Date: Thu, 02 Aug 2007 14:00:07 +0200
Subject: [Twisted-Python] delay when sending data over SSH
Message-ID: <46B1C747.4000204@yahoo.de>

Hi Everybody,

When I use

channel.SSHChannel.self.conn.sendRequest

from my client application it takes between 10-20 seconds until the 
server (which runs on the same machine) gets it!

Does anybody has an idea, what's the problem?

When I open a new channel, channel.SSHChannel.channelOpen responds 
directly. I do the sendRequest after I opened the channel.

Thanks alot
Tobias



From garyjefferson123 at gmail.com  Fri Aug  3 02:04:41 2007
From: garyjefferson123 at gmail.com (gary jefferson)
Date: Fri, 3 Aug 2007 02:04:41 -0600
Subject: [Twisted-Python] lambdas and DeferredList
Message-ID: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>

I don't quite understand the behavior of lambdas in the following code:

from twisted.internet import reactor, defer

def someDeferred(val):
    d = defer.Deferred()
    reactor.callLater(1, d.callback, val)
    return d

def done(result):
    print "all done"
    reactor.stop()

def twothing(i):
    print "twothing: %s" % i
    return i

def onething(result, i, callableThing):
    print "onething: %s, result %s" % (i, result)
    callableThing()

def dlistspawn():
    dlist = []
    values = [(1, 'one'), (2, 'two'), (3, 'three')]
    for i, v in values:
        deferred = someDeferred(i)
        deferred.addCallback(onething, i, lambda: twothing(v))
        dlist.append(deferred)
    dl = defer.DeferredList(dlist)
    dl.addCallback(done)
    return dl

if __name__ == "__main__":
    dlistspawn()
    reactor.run()


Which produces:
onething: 1, result 1
twothing: three
onething: 2, result 2
twothing: three
onething: 3, result 3
twothing: three
all done


Why does the call to twothing() (via a lambda and callableThing)
always bind to 'three'?  How do I change the code to get it to bind
successively to 'one', 'two', and 'three'?

Thanks,
Gary



From thostrup at gmail.com  Fri Aug  3 02:38:54 2007
From: thostrup at gmail.com (Henrik Thostrup Jensen)
Date: Fri, 3 Aug 2007 10:38:54 +0200
Subject: [Twisted-Python] lambdas and DeferredList
In-Reply-To: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
References: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
Message-ID: <f33a4da20708030138s1f0ec82cha6ad79d4fe3b5edb@mail.gmail.com>

On 8/3/07, gary jefferson <garyjefferson123 at gmail.com> wrote:
>
> I don't quite understand the behavior of lambdas in the following code:

[snip]

>
> def dlistspawn():
>     dlist = []
>     values = [(1, 'one'), (2, 'two'), (3, 'three')]
>     for i, v in values:
>         deferred = someDeferred(i)
>         deferred.addCallback(onething, i, lambda: twothing(v))
>         dlist.append(deferred)
>     dl = defer.DeferredList(dlist)
>     dl.addCallback(done)
>     return dl
>
> if __name__ == "__main__":
>     dlistspawn()
>     reactor.run()
>
>
> Which produces:
> onething: 1, result 1
> twothing: three
> onething: 2, result 2
> twothing: three
> onething: 3, result 3
> twothing: three
> all done
>
>
> Why does the call to twothing() (via a lambda and callableThing)
> always bind to 'three'?  How do I change the code to get it to bind
> successively to 'one', 'two', and 'three'?


The variable v gets bound when the lambda is invoked, not when constructed.


-- 
   - Henrik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070803/2090d2fa/attachment.html>

From andrew-twisted at puzzling.org  Fri Aug  3 03:06:25 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 3 Aug 2007 19:06:25 +1000
Subject: [Twisted-Python] lambdas and DeferredList
In-Reply-To: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
References: <62ad745a0708030104k10f6580bj9a3b5dbfffaf4e30@mail.gmail.com>
Message-ID: <20070803090625.GZ25389@steerpike.home.puzzling.org>

gary jefferson wrote:
> I don't quite understand the behavior of lambdas in the following code:
> 
[...]
>     values = [(1, 'one'), (2, 'two'), (3, 'three')]
>     for i, v in values:
>         deferred = someDeferred(i)
>         deferred.addCallback(onething, i, lambda: twothing(v))
>         dlist.append(deferred)
>     dl = defer.DeferredList(dlist)
>     dl.addCallback(done)
[...]
> 
> Which produces:
> onething: 1, result 1
> twothing: three
> onething: 2, result 2
> twothing: three
> onething: 3, result 3
> twothing: three
> all done
> 
> 
> Why does the call to twothing() (via a lambda and callableThing)
> always bind to 'three'?  How do I change the code to get it to bind
> successively to 'one', 'two', and 'three'?

You don't need Twisted to see this:

    >>> values = ['one', 'two', 'three']
    >>> functions = []
    >>> for value in values:
    ...     functions.append(lambda: value)
    ... 
    >>> for func in functions: print func()
    ... 
    three
    three
    three

The simplest fix is use "lambda foo=foo: ...", to bind the value of the variable
as it was at the time the lambda statement is executed to a local variable in
that function.  i.e.:

    >>> values = ['one', 'two', 'three']
    >>> functions = []
    >>> for value in values:
    ...     functions.append(lambda v=value: v)
    ... 
    >>> for func in functions: print func()
    ... 
    one
    two
    three

Refer to the Python documentation about scoping for more details.

-Andrew.




From exarkun at twistedmatrix.com  Sat Aug  4 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 05 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1186286703.7.1550471318@twistedmatrix.com

Bug summary
______________________
Summary for 2007-07-29 through 2007-08-05
Bugs opened: 20    Bugs closed: 8  Total open bugs: 1009 (+12)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +6  |Highest:  +4          |Core:  +11             
|Enhancement:  +9  |High:     +1          |Lore:   +0             
|Task:         +0  |Normal:   +5          |Trial:  +1             
                   |Low:      +4          |Words:  +3             
                   |Lowest:   +1                                  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2770] Allow JIDs to be used as key in dicts (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2770

[#2771] exceptionFromStreamError fails to parse errors correctly (opened by ralphm)
    defect          words      http://twistedmatrix.com/trac/ticket/2771

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2773] t.w.p.j.xmlstream.toResponse fails on stanzas without id attribute (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2773

[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#2768] pre tags not mangled (opened by tehminkeh) (CLOSED, invalid)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2768

[#2769] Update plugins howto to cover new API for <package>/plugins/__init__.py added in #2339 (opened by itamarst)
    defect          core       http://twistedmatrix.com/trac/ticket/2769

                    ===== Normal =====
[#2759] change z3p at twistedmatrix.com to paulswartz at gmail dot com (opened by z3p)
    defect          core       http://twistedmatrix.com/trac/ticket/2759

[#2760] inexplicable dependency of twisted.python.zippath on twisted.python.zipstream (opened by exarkun) (CLOSED, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2760

[#2762] String exceptions will be removed in python 2.6 (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2762

[#2763] md5 and sha module will be deprecated in python 2.6 (opened by therve)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2763

[#2765] trial --spew doesn't work in Python 2.5 (opened by radix)
    defect          trial      http://twistedmatrix.com/trac/ticket/2765

[#2774] It should be possible to receive notification of process ending (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2774

                    ===== Low =====
[#2761] the set builtin should be used instead of the Sets module when available (opened by therve)
    task            core       http://twistedmatrix.com/trac/ticket/2761

[#2764] Replace deprecation warning in _ThreePhaseEvent.removeTrigger_BEFORE with an exception (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2764

[#2766] test_sslverify uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2766

[#2767] test_ident uses deprecated function log.flushErrors (opened by therve)
    defect          core       http://twistedmatrix.com/trac/ticket/2767

                    ===== Lowest =====
[#2758] reactor installation functions should have a way to indicate human-level reactor installation errors. (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2758



Closed Bugs
______________________
                    ===== Highest =====
[#2741] twisted/words/test/test_domish.py should use setUp and tearDown instead of setUpClass and tearDownClass (opened by exarkun, closed by exarkun, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/2741

[#2457] failed reactor selection is reported poorly by trial and twistd (opened by exarkun, closed by therve, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2457

[#2509] removing event triggers while in an event trigger callback does bad things (opened by jack, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2509

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix, closed by itamarst, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2339] twisted/plugins/__init__.py incorrectly considers other installations of Twisted (opened by radix, closed by itamarst, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2339

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun, closed by therve, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#2768] pre tags not mangled (opened by tehminkeh, closed by glyph, invalid)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2768

                    ===== Normal =====
[#2760] inexplicable dependency of twisted.python.zippath on twisted.python.zipstream (opened by exarkun, closed by exarkun, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2760



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2774] It should be possible to receive notification of process ending (since 2007-08-03 15:57:09).

Mean open ticket age: 495 days, 12:26:29.373509.
Median: 386 days, 18:26:28.529109.
Standard deviation: 394 days, 15:20:53.635105.
Interquartile range: 481 days, 9:27:27.

Mean time between ticket creation and ticket resolution: 119 days, 12:09:57.467013.
Median: 14 days, 3:38:33.
Standard deviation is 223 days, 1:25:31.691220.
The interquartile range is 125 days, 12:18:50.

Mean time spent in review: 60 days, 6:20:31.517370.
Median: 4 days, 0:03:10.
Standard deviation: 130 days, 20:43:06.195085.
Interquartile range: 25 days, 23:18:28.

Mean number of times a ticket is reviewed: 1.83790523691.
Median: 1
Standard deviation: 1.39688274293.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    20 unique ticket reporters
    10 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    90 unique ticket reporters
    14 unique ticket reviewers
    18 unique ticket resolvers
In the last 48 weeks,
    160 unique ticket reporters
    20 unique ticket reviewers
    27 unique ticket resolvers




From luciano at ramalho.org  Sun Aug  5 13:39:00 2007
From: luciano at ramalho.org (Luciano Ramalho)
Date: Sun, 5 Aug 2007 16:39:00 -0300
Subject: [Twisted-Python] Design pattern for multi-stage web searches
Message-ID: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>

Hello,

I am a Google Summer of Code student working with the Zope 3/Grok
community this year.

I wonder if there is an established design pattern or examples that
use Twisted to fetch data via HTTP when the process can take a
variable number of requests to be completed.

For instance, if you search for book records online, some sites allow
you to do an ISBN search which gives back the full book details, while
others will present an intermediate results page from which links to
the book details page can be obtained (many sites use a internal id
for their products, including books). Still others can return an
intermediate page containing a link to a different edition (!= ISBN),
when the given ISBN refers to an out-of-print edition.

So for each different metadata source I'd like to provide a chain of
callbacks to be processed. Anyone knows of references that may help
me? I browsed the GoF patterns but none of them fits this use case.

BTW, the resulting code will be open source under the ZPL and hosted
at http://svn.zope.org.

Thanks for a great piece of software!

Regards,

Luciano

PS. I've already implemented, using Twisted, a prototype of the
collector for Amazon.com and it's affiliates in Europe and Japan. But
I am Brazilian and I know their catalog is not very complete outside
of the markets where they operate. To be really international, a book
metadata collector must be pluggable to allow localized searches
depending on the ISBN prefix.



From andrew at ellerton.net  Sun Aug  5 14:08:01 2007
From: andrew at ellerton.net (Andrew E)
Date: Sun, 05 Aug 2007 16:08:01 -0400
Subject: [Twisted-Python] Where to start: log reader/analysis
Message-ID: <46B62E21.9040000@ellerton.net>

Dear Twisted Experts (... meant in a nice way :) )

I'm not sure where to start.

I need to write a small server that:

 - reads lines in a log file as they are appended
 - reads input from a socket as it becomes available
 - does an analysis of both (like, what time was input received in the
log, and the output received via the socket)
 - outputs a summary report

Socket I/O is easy - but I'm not sure how to include file reading ...
its bound to be easy.

Any tips?

Thanks :)

Andrew



From yoann.aubineau at wengo.com  Mon Aug  6 02:57:19 2007
From: yoann.aubineau at wengo.com (Yoann Aubineau)
Date: Mon, 6 Aug 2007 10:57:19 +0200
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <46B62E21.9040000@ellerton.net>
References: <46B62E21.9040000@ellerton.net>
Message-ID: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>

Hi Andrew,

I wrote a class that follows a file (eg. log file) and provides an iterator
to walk through it. Don't know if it may be of any use for you (or others).

class FileFollower(object):
    """Iterate through a file while it is updated.

    >>> file = FileFollower("/tmp/testfile")
    >>> file.interval = 5
    >>> for line in file:
    ...     print line
    """

    interval = 1

    def __init__(self, filename, interval=None):
        self.filename = filename
        self.interval = interval or self.interval
        self.stat = None
        self.offset = 0
        self.lines = []
        self.running = True

    #
    # File following

    def follow(self):
        while self.running:
            if self.hasChanged():
                data = self.readChange()
                if data:
                    self.dataReceived(data)
                    break
            time.sleep(self.interval)

    def hasChanged(self):
        stat = os.stat(self.filename)
        if stat != self.stat:
            self.stat = stat
            return True
        return False

    def readChange(self):
        file = open(self.filename)
        file.seek(self.offset)
        data = file.read()
        self.offset = file.tell()
        file.close()
        return data

    #
    # Data buffering

    def dataReceived(self, data):
        lines = data.split(os.linesep)
        lines = lines[:-1]
        for line in lines:
            self.lineReceived(line)

    def lineReceived(self, line):
        self.lines.append(line)

    #
    # Iterator implementation

    def __iter__(self):
        return self

    def next(self):
        if not self.lines:
            self.follow()
        line = self.lines.pop(0)
        return line


2007/8/5, Andrew E <andrew at ellerton.net>:
>
> Dear Twisted Experts (... meant in a nice way :) )
>
> I'm not sure where to start.
>
> I need to write a small server that:
>
> - reads lines in a log file as they are appended
> - reads input from a socket as it becomes available
> - does an analysis of both (like, what time was input received in the
> log, and the output received via the socket)
> - outputs a summary report
>
> Socket I/O is easy - but I'm not sure how to include file reading ...
> its bound to be easy.
>
> Any tips?
>
> Thanks :)
>
> Andrew
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070806/05616755/attachment.html>

From D.Kirby at tideway.com  Mon Aug  6 05:11:29 2007
From: D.Kirby at tideway.com (Dave Kirby)
Date: Mon, 6 Aug 2007 12:11:29 +0100
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
Message-ID: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>

Firstly a belated thanks to everyone who replied to my previous question
- I had to put my project on hold for a while, but now I am back with
more questions.

 

My objective is to use twisted to do automated logging in to multiple
ssh servers to carry out various tasks.  Currently this is done by
spawning a separate ssh executable for each session and controlling it
through pexpect, and I would like to replace this with a twisted/conch
system.

 

So far I can create conch "exec" sessions to run a single command/script
and return the result, but I would like to be able to create shell
sessions and do more interactive work.  Does anyone have any examples of
doing this?

 

The biggest issue I have at the moment is how to do Test Driven
Development with conch.  I would like to be able to mock out the server
that the ssh client talks to, so that I can keep the unit tests
self-contained and keep tight control of both sides of the interaction,
e.g. for testing failure scenarios.  I can think of three ways of doing
this:

 

1) write a separate ssh server with conch that provides the desired
behaviour, and have that spawned as a separate process by the unit
tests.

 

2) as above, but run the ssh server in the same process as the tests, so
they are both firing from the same reactor event loop.  IMHO this is
better than (1) since it is more self-contained.

 

3) stub out the low-level classes of the client so that they are not
really talking to a server at all, but simulating the correct behaviour.

 

The problem with both 1 and 2 is that they require writing test code
that is as complex as the code I am testing.  The problem with 3 is that
it assumes that I know what the correct low-level behaviour is so that I
can mock it out.  At the moment I do not grok twisted in sufficient
detail to do that.

 

How have other people tackled this?  Are there any other options that I
am missing, or code I can reuse, or other suggestions or advice?

 

TIA

--
Dave Kirby
Senior Software Engineer
T: +44 20 7368 7330 | F: +44 20 7352 4922
E: d.kirby at tideway.com | W: www.tideway.com

 

This email and any attachment may contain confidential, privileged information for the sole use of the intended recipient. If you are not the intended recipient, do not disclose, reproduce, disseminate or otherwise use this communication. If you received this communication in error, please immediately notify the sender via email and delete the communication from your system. Company information : Tideway Systems Ltd, Registered Office: Anchor House, 15-19 Britten Street, London, SW3 3TY. Registered in England & Wales Reg. Reg. No: 4598072  VAT No: 805 5153 50 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070806/921045cc/attachment.html>

From exarkun at divmod.com  Mon Aug  6 05:44:31 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 07:44:31 -0400
Subject: [Twisted-Python] Design pattern for multi-stage web searches
In-Reply-To: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>
Message-ID: <20070806114431.4947.640802435.divmod.quotient.19450@ohm>

On Sun, 5 Aug 2007 16:39:00 -0300, Luciano Ramalho <luciano at ramalho.org> wrote:
>Hello,
>
>I am a Google Summer of Code student working with the Zope 3/Grok
>community this year.
>
>I wonder if there is an established design pattern or examples that
>use Twisted to fetch data via HTTP when the process can take a
>variable number of requests to be completed.

This is usually done by "chaining" Deferreds together.  When a callback
or errback function on Deferred A returns Deferred B, B is chained to a:

    B.chainDeferred(A)

or

    B.addCallbacks(A.callback, A.errback)

So if you fetch a page and it turns out not to be the one you ultimately
want, a callback on that Deferred can initiate another fetch and return
the Deferred for that operation.  This is transparent to the caller of
the original function: their callbacks are only called once all of the
earlier callbacks have returned a None-Deferred value and all returned
Deferreds have fired.

I doubt I've explained this particularly well, so you might want to take
a look at http://twistedmatrix.com/projects/core/documentation/howto/defer.html to
really get an understanding.

Jean-Paul



From exarkun at divmod.com  Mon Aug  6 05:49:53 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 07:49:53 -0400
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>
Message-ID: <20070806114953.4947.487566896.divmod.quotient.19454@ohm>

On Mon, 6 Aug 2007 10:57:19 +0200, Yoann Aubineau <yoann.aubineau at wengo.com> wrote:
>Hi Andrew,
>
>I wrote a class that follows a file (eg. log file) and provides an iterator
>to walk through it. Don't know if it may be of any use for you (or others).

Hi Yoann, thanks for sharing.

>
>class FileFollower(object):
>    """Iterate through a file while it is updated.
>
>    >>> file = FileFollower("/tmp/testfile")
>    >>> file.interval = 5
>    >>> for line in file:
>    ...     print line
>    """
>
>    interval = 1
>
>    def __init__(self, filename, interval=None):
>        self.filename = filename
>        self.interval = interval or self.interval
>        self.stat = None
>        self.offset = 0
>        self.lines = []
>        self.running = True
>
>    #
>    # File following
>
>    def follow(self):
>        while self.running:
>            if self.hasChanged():
>                data = self.readChange()
>                if data:
>                    self.dataReceived(data)
>                    break
>            time.sleep(self.interval)
>
>    def hasChanged(self):
>        stat = os.stat(self.filename)
>        if stat != self.stat:
>            self.stat = stat
>            return True
>        return False
>
>    def readChange(self):
>        file = open(self.filename)
>        file.seek(self.offset)
>        data = file.read()
>        self.offset = file.tell()
>        file.close()
>        return data
>
>    #
>    # Data buffering
>
>    def dataReceived(self, data):
>        lines = data.split(os.linesep)
>        lines = lines[:-1]
>        for line in lines:
>            self.lineReceived(line)
>
>    def lineReceived(self, line):
>        self.lines.append(line)
>
>    #
>    # Iterator implementation
>
>    def __iter__(self):
>        return self
>
>    def next(self):
>        if not self.lines:
>            self.follow()
>        line = self.lines.pop(0)
>        return line
>

In order to make this class more usable within a Twisted application, I'd
make a few suggestions:

Separate the transport from the protocol.  All of the methods in the area
commented "file following" are basically transport methods: they know how
to get the underlying bytes (by polling and eventually reading).  The
protocol implementation is basically the dataReceived and lineReceived
methods.  With separation between the transport and the protocol, you
don't even need to implement these, since you can just use LineReceiver
from twisted.protocols.basic.

Do the polling in a cooperative way.  Using an infinite for loop and a
time.sleep call has the consequence of tying up an entire thread.  This
means nothing else can happen unless you run the follow method of this
class in a new, dedicated thread.  If you use the reactor to schedule
the checks instead, then this can be used alongside other Twisted code
without having to deal with threading.  twisted.internet.task.LoopingCall
might be of particular interest.

Jean-Paul



From exarkun at divmod.com  Mon Aug  6 06:03:34 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 6 Aug 2007 08:03:34 -0400
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
In-Reply-To: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
Message-ID: <20070806120334.4947.1638958206.divmod.quotient.19459@ohm>

On Mon, 6 Aug 2007 12:11:29 +0100, Dave Kirby <d.kirby at tideway.com> wrote:
>Firstly a belated thanks to everyone who replied to my previous question
>- I had to put my project on hold for a while, but now I am back with
>more questions.
>
>My objective is to use twisted to do automated logging in to multiple
>ssh servers to carry out various tasks.  Currently this is done by
>spawning a separate ssh executable for each session and controlling it
>through pexpect, and I would like to replace this with a twisted/conch
>system.
>
>So far I can create conch "exec" sessions to run a single command/script
>and return the result, but I would like to be able to create shell
>sessions and do more interactive work.  Does anyone have any examples of
>doing this?
>
>The biggest issue I have at the moment is how to do Test Driven
>Development with conch.  I would like to be able to mock out the server
>that the ssh client talks to, so that I can keep the unit tests
>self-contained and keep tight control of both sides of the interaction,
>e.g. for testing failure scenarios.  I can think of three ways of doing
>this:
>
>1) write a separate ssh server with conch that provides the desired
>behaviour, and have that spawned as a separate process by the unit
>tests.
>
>2) as above, but run the ssh server in the same process as the tests, so
>they are both firing from the same reactor event loop.  IMHO this is
>better than (1) since it is more self-contained.
>
>3) stub out the low-level classes of the client so that they are not
>really talking to a server at all, but simulating the correct behaviour.
>
>The problem with both 1 and 2 is that they require writing test code
>that is as complex as the code I am testing.  The problem with 3 is that
>it assumes that I know what the correct low-level behaviour is so that I
>can mock it out.  At the moment I do not grok twisted in sufficient
>detail to do that.

I suspect a lot of the code that you write will be for handling the output
from and generating input to send to processes run via ssh.  You should be
able to use #3 to test this kind of code, since the API for interacting
with conch from a protocol implementation is quite confined and well-defined.

I don't have much to suggest for avoiding #2 (but you probably don't want #1
in any case), but if you at least isolate the majority of your application
logic from most of conch, then you can test it without having any kind of
SSH server or mock around.  The code that's left over that does have to
interact with conch can be tested by itself, perhaps by setting up real
SSH connections, which may not be ideal, but you should at least be able to
do it, get it over with, and not worry about it anymore afterwards.  Most
of the rest of the code you write will be testable in isolation.

Hope this helps,

Jean-Paul



From luciano at ramalho.org  Mon Aug  6 06:16:59 2007
From: luciano at ramalho.org (Luciano Ramalho)
Date: Mon, 6 Aug 2007 09:16:59 -0300
Subject: [Twisted-Python] Design pattern for multi-stage web searches
In-Reply-To: <20070806114431.4947.640802435.divmod.quotient.19450@ohm>
References: <4331ad810708051239j3638fcb9v20166fc90286e95d@mail.gmail.com>
	<20070806114431.4947.640802435.divmod.quotient.19450@ohm>
Message-ID: <4331ad810708060516r6381dbd6pc262dad5ba35989@mail.gmail.com>

Thank you very much for the reply, Jean-Paul. I'll study it and
probably make changes to my code. It seems the chaining mechanism you
explain can improve the generality of my code and at the same time
simplify the implementation.

If anyone starting with Twisted wants to see an example of using
several deferreds, the code I wrote is here:

http://svn.zope.org/Sandbox/luciano/kirbi/kirbifetch/src/kirbifetch/

The file which uses the deferreds is fetch.py.

Not that the code above is a work-in-progress, tests are not automated
yet, and the style of chaining Jean-Paul suggested is not yet
implemented: currenlty each callback explicitly initiates another
deferred, without chaining.

Anyway, I hope my code is useful as an example.

Regards,

Luciano



On 8/6/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Sun, 5 Aug 2007 16:39:00 -0300, Luciano Ramalho <luciano at ramalho.org> wrote:
> >Hello,
> >
> >I am a Google Summer of Code student working with the Zope 3/Grok
> >community this year.
> >
> >I wonder if there is an established design pattern or examples that
> >use Twisted to fetch data via HTTP when the process can take a
> >variable number of requests to be completed.
>
> This is usually done by "chaining" Deferreds together.  When a callback
> or errback function on Deferred A returns Deferred B, B is chained to a:
>
>     B.chainDeferred(A)
>
> or
>
>     B.addCallbacks(A.callback, A.errback)
>
> So if you fetch a page and it turns out not to be the one you ultimately
> want, a callback on that Deferred can initiate another fetch and return
> the Deferred for that operation.  This is transparent to the caller of
> the original function: their callbacks are only called once all of the
> earlier callbacks have returned a None-Deferred value and all returned
> Deferreds have fired.
>
> I doubt I've explained this particularly well, so you might want to take
> a look at http://twistedmatrix.com/projects/core/documentation/howto/defer.html to
> really get an understanding.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From miles.chris at gmail.com  Mon Aug  6 06:17:44 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 6 Aug 2007 13:17:44 +0100
Subject: [Twisted-Python] Running twisted.trial unittests using nose
Message-ID: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>

I'm testing one of my modules that returns a Twisted deferred, using  
twisted.trial.unittest.TestCase.  The test case methods return a  
deferred, after first adding a callback to a function that actually  
performs the assertion.  All fairly standard for Twisted unit testing.

If I use "trial" to kick off the tests they all pass fine (or fail as  
expected, if I force them to).

If I run the same tests using "nosetests" they also pass (or fail  
correctly - which confirms the callbacks are being called properly).

I'm simply curious as to whether it is safe for me to rely on a test  
runner other than "trial" to run the tests?  I assume any magic  
(knowledge of deferreds) is within the  
twisted.trial.unittest.TestCase class and the "trial" command is  
simply another tool to discover and pretty print the results.  From  
what I've seen, both "nosetests" and "trial" will produce the same  
report (although "trial" looks nicer :-).  Or perhaps this wouldn't  
be the case if I needed to interact with the reactor?

Cheers,
Chris Miles




From yoann.aubineau at wengo.com  Mon Aug  6 06:32:17 2007
From: yoann.aubineau at wengo.com (Yoann Aubineau)
Date: Mon, 6 Aug 2007 14:32:17 +0200
Subject: FileFollower Was: [Twisted-Python] Where to start: log reader/analysis
Message-ID: <8b93c05a0708060532p10882f35u8f97c23f184d2595@mail.gmail.com>

2007/8/6, Jean-Paul Calderone <exarkun at divmod.com>:
> In order to make this class more usable within a Twisted application, I'd
> make a few suggestions:

Oh, thanks for this reply JP. I always love to get insightful
feedbacks from "masters" :)

This class was initially not intended to run in a twisted-aware
environment, hence the use of time.sleep and no basic.LineReceiver.

If you think it may be of any use amongs others Twisted protocols, I'm
definitly willing to work on it : apply the changes you suggested, add
unit tests, docs etc.

Let me know.
Yoann



From glyph at divmod.com  Mon Aug  6 07:20:45 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 06 Aug 2007 13:20:45 -0000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
Message-ID: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>

On 12:17 pm, miles.chris at gmail.com wrote:
>I'm simply curious as to whether it is safe for me to rely on a test 
>runner other than "trial" to run the tests?  I assume any magic 
>(knowledge of deferreds) is within the  twisted.trial.unittest.TestCase 
>class and the "trial" command is  simply another tool to discover and 
>pretty print the results.  From  what I've seen, both "nosetests" and 
>"trial" will produce the same  report (although "trial" looks nicer 
>:-).  Or perhaps this wouldn't  be the case if I needed to interact 
>with the reactor?

There is an implicit, undocumented goal that tests written for trial 
should remain usable with other test runners.  Recently, I filed a 
ticket because not even *I* know which test runners or how this is 
supposed to work.  You can follow the discussion / resolution here:

    http://twistedmatrix.com/trac/ticket/2739

Personally I'd never use nose because, as you say, trial looks nicer :), 
so I can only guess what's going wrong.

The potential problem (currently) with using Twisted's TestCase class 
together with other runners is that the tests do something that no other 
Twisted application does, and which is not _really_ supported by the 
framework: re-start the reactor repeatedly.

Eventually, 'trial' itself will not do this, and will behave as a 
"normal" Twisted application.  'trial' will, as stated by the ticket I 
just linked to, still support other test runners by having a 'run' 
method that starts and shuts down the reactor, but it won't be used 
internally.  The main reason to do this is that there are various tools 
which would be nice to use Twisted functionality in-process with the 
tests for reporting results.  Doing that will probably remain a trial- 
exclusive feature, because other test runners will necessarily need to 
completely shut down the reactor at the end of each test.



From miles.chris at gmail.com  Mon Aug  6 08:10:53 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 6 Aug 2007 15:10:53 +0100
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
Message-ID: <33FA8DD7-64B2-4533-9459-9D0214E154C6@gmail.com>


On 6 Aug 2007, at 14:20, glyph at divmod.com wrote:

> On 12:17 pm, miles.chris at gmail.com wrote:
>> I'm simply curious as to whether it is safe for me to rely on a  
>> test runner other than "trial" to run the tests?  I assume any  
>> magic (knowledge of deferreds) is within the   
>> twisted.trial.unittest.TestCase class and the "trial" command is   
>> simply another tool to discover and pretty print the results.   
>> From  what I've seen, both "nosetests" and "trial" will produce  
>> the same  report (although "trial" looks nicer :-).  Or perhaps  
>> this wouldn't  be the case if I needed to interact with the reactor?
>
> There is an implicit, undocumented goal that tests written for  
> trial should remain usable with other test runners.  Recently, I  
> filed a ticket because not even *I* know which test runners or how  
> this is supposed to work.  You can follow the discussion /  
> resolution here:
>
>    http://twistedmatrix.com/trac/ticket/2739
>
> Personally I'd never use nose because, as you say, trial looks  
> nicer :), so I can only guess what's going wrong.
>
> The potential problem (currently) with using Twisted's TestCase  
> class together with other runners is that the tests do something  
> that no other Twisted application does, and which is not _really_  
> supported by the framework: re-start the reactor repeatedly.

Thanks glyph, this was the answer I was expecting.  Not an issue for  
me, it is just nice to know what is "supposed" to work and what isn't  
guaranteed to.

I have documented my project as requiring "trial" (the command) to  
run the tests, with a note that even though the tests pass when using  
"nosetests" (or another test runner) that may not be always reliable.

Cheers,
Chris Miles




From andrew-twisted at puzzling.org  Mon Aug  6 08:17:18 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 Aug 2007 00:17:18 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
Message-ID: <20070806141718.GL22324@steerpike.home.puzzling.org>

glyph at divmod.com wrote:
[...]
> Twisted application does, and which is not _really_ supported by the 
> framework: re-start the reactor repeatedly.
> 
> Eventually, 'trial' itself will not do this, and will behave as a 
> "normal" Twisted application.  'trial' will, as stated by the ticket I 
> just linked to, still support other test runners by having a 'run' 
> method that starts and shuts down the reactor, but it won't be used 
> internally.  The main reason to do this is that there are various tools 
> which would be nice to use Twisted functionality in-process with the 
> tests for reporting results.  Doing that will probably remain a trial- 
> exclusive feature, because other test runners will necessarily need to 
> completely shut down the reactor at the end of each test.

I've expressed this opinion before, but FWIW:

I don't think this is the right approach.  The right approach is to fix Twisted
to support multiple simultaneous reactors, so that your Twisted test runner that
wants to do stuff with a reactor is isolated from the tests, and vice versa.
The tests should then use a fresh reactor for each test.  It's simple and robust.

The reactor can't be comprehensively unittested until multiple
reactors/restartable reactors are supported anyway, so it should be done.  This
would also make it possible to consider testing multiple different reactor
implementations in a single test run.

I see only a continuation of the problems that have been plaguing Trial for
*years* with your approach.

-Andrew.




From jml at mumak.net  Mon Aug  6 17:35:56 2007
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 7 Aug 2007 09:35:56 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
Message-ID: <d06a5cd30708061635o58d48692v62a2145575c0bb26@mail.gmail.com>

On 8/6/07, Chris Miles <miles.chris at gmail.com> wrote:
> I'm simply curious as to whether it is safe for me to rely on a test
> runner other than "trial" to run the tests?  I assume any magic
> (knowledge of deferreds) is within the
> twisted.trial.unittest.TestCase class and the "trial" command is
> simply another tool to discover and pretty print the results.  From
> what I've seen, both "nosetests" and "trial" will produce the same
> report (although "trial" looks nicer :-).  Or perhaps this wouldn't
> be the case if I needed to interact with the reactor?
>

So, what Glyph says modulo what Andrew says is right and good and true.

One known issue is that tests that descend from
twisted.trial.unittest.TestCase assume that they are being run inside
a twisted.trial.runner.TrialSuite. This suite does post-run cleanup of
thread pools, IIRC.

jml



From daedalus at eigenmagic.com  Mon Aug  6 20:12:11 2007
From: daedalus at eigenmagic.com (Justin Warren)
Date: Tue, 07 Aug 2007 12:12:11 +1000
Subject: [Twisted-Python] TDDing an ssh client - mocking the server
In-Reply-To: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
References: <B81183566FF73947875C3A207CD60AA6063EAF63@LONEX01.tideway.com>
Message-ID: <1186452731.7508.18.camel@localhost>

On Mon, 2007-08-06 at 12:11 +0100, Dave Kirby wrote:
> Firstly a belated thanks to everyone who replied to my previous
> question – I had to put my project on hold for a while, but now I am
> back with more questions.
> 
>  
> 
> My objective is to use twisted to do automated logging in to multiple
> ssh servers to carry out various tasks.  Currently this is done by
> spawning a separate ssh executable for each session and controlling it
> through pexpect, and I would like to replace this with a twisted/conch
> system.

Hi Dave,

The framework I created to do something very similar to this is
available for free at http://modipy.seafelt.com. ModiPY is written using
twisted and currently does pretty much what you've described, spawning a
program in a sub-process to do work. This 'spawn and do work' component
could be replaced by a conch SSH client instead. In fact, this would be
desirable for some things.

> So far I can create conch “exec” sessions to run a single
> command/script and return the result, but I would like to be able to
> create shell sessions and do more interactive work.  Does anyone have
> any examples of doing this?

I'm guessing you want examples of how to use conch to do interactive
work, so ModiPY probably isn't useful here, but you might be able to use
some of the ideas in the ConnectingProvisioner and ExpectProtocol. It
connects to a remote device and runs a series of commands, handling
their output.

-- 
Justin Warren <daedalus at eigenmagic.com>



From glyph at divmod.com  Mon Aug  6 21:15:20 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 07 Aug 2007 03:15:20 -0000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070806141718.GL22324@steerpike.home.puzzling.org>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
Message-ID: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>

On 6 Aug, 02:17 pm, andrew-twisted at puzzling.org wrote:
>glyph at divmod.com wrote:
>[...]
>>Twisted application does, and which is not _really_ supported by the
>>framework: re-start the reactor repeatedly.
>>
>>Eventually, 'trial' itself will not do this, and will behave as a
>>"normal" Twisted application.

Let's start with a point of agreement:
>The reactor can't be comprehensively unittested until multiple
>reactors/restartable reactors are supported anyway, so it should be 
>done.  This
>would also make it possible to consider testing multiple different 
>reactor
>implementations in a single test run.

This is absolutely true.  The limiting factors on the code being used 
this way are simply (A) a lack of reasonable tests, and (B) some 
misguided micro-optimizations in the reactor which no longer help 
anyway.  There is nothing in anyone's preferred design for Trial, mine 
included, that would preclude such a thing.

Multiple reactors should, indeed must, eventually be supported.  It 
would be nice if someone who really wanted it would implement it though, 
instead of just talking about it ;).
>I don't think this is the right approach.  The right approach is to fix 
>Twisted
>to support multiple simultaneous reactors, so that your Twisted test 
>runner that
>wants to do stuff with a reactor is isolated from the tests, and vice 
>versa.
>The tests should then use a fresh reactor for each test.  It's simple 
>and robust.

Your suggested implementation reinforces the antipattern of "tests are 
special and need 'waitFor' or 'blockOn' because they can't be written 
otherwise".  Then, of course, newbies ask why the tests can have this 
but their protocol implementation (which really needs it, seriously, 
it's not like *any* other application using Twisted) can't.  Aside from 
the fact that it might actually work / be tested, it is the same (as far 
as I'm concerned) as much of the brokenness that Trial has dealt with 
for quite some time.

Much code within and without Twisted uses, and will continue for the 
forseeable future to use, "from twisted.internet import reactor" to 
access the reactor.  One might hope that this usage would eventually be 
replaced by something better, but it's not clear if this (or an 
equivalent spelling) could ever be *completely* eliminated.  I quite 
like Jim Fulton's suggestion for adding an ITransport.reactor attribute 
and using that in most places where the global import is currently used. 
However, even if we had a comprehensive somehow non-global way to get at 
a reactor available today, there would still be a *very* lengthy 
transition period to a new API.  The question will remain what to do 
about that code.

My main objection here, though, is that I'd really like to be able to 
add nifty Twisted-using features to Trial, and it's basically impossible 
right now, due in large part to the fact that the reactor keeps starting 
and stopping.  Creating a new reactor for each test is going to create 
confusing semantics for code written using established idioms, because 
either the framework is going to go to a lot of trouble to fool 
everything into using trial's idea of the reactor the tests should be 
using (which begs the question: how do you test trial itself, if it has 
a reference to the "real" reactor?), or it's going to require special 
hacks to get at the "real" reactor which still won't behave in an event- 
driven way if a test (shock, horror) actually does want to do some real 
I/O itself.  Although I am *personally* focusing on how to write better 
and more isolated unit tests using trial, I know of a small number of 
people using it as an integration testing tool that does tons of I/O to 
external systems and I think that is an interesting use-case and should 
be better supported, not worse.

Perhaps the 'trial' tool itself is a misguided design though, and 
'disttrial' will simply replace it in short order.  If this is the case, 
then the tests are running in a subprocess anyway, and there's no reason 
to run any code in-process with the tests, except for things to gather 
metrics.  In that case, the 'disttrial' tool itself is a real Twisted 
program, and the subprocess fakes just enough to get by:

http://twistedmatrix.com/trac/browser/branches/disttrial-1784/twisted/trial/dist/slavetrial.py#L60

That *particular* hack makes me cringe, but I think the overall 
architecture may satisfy us both better in the end.



From andrew-twisted at puzzling.org  Mon Aug  6 23:01:46 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 7 Aug 2007 15:01:46 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
	<20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
Message-ID: <20070807050146.GA2796@steerpike.home.puzzling.org>

I get the feeling you misunderstand what I'm saying we should do.

glyph at divmod.com wrote:
> On 6 Aug, 02:17 pm, andrew-twisted at puzzling.org wrote:
[...]
> >I don't think this is the right approach.  The right approach is to fix 
> >Twisted
> >to support multiple simultaneous reactors, so that your Twisted test 
> >runner that
> >wants to do stuff with a reactor is isolated from the tests, and vice 
> >versa.
> >The tests should then use a fresh reactor for each test.  It's simple 
> >and robust.
> 
> Your suggested implementation reinforces the antipattern of "tests are 
> special and need 'waitFor' or 'blockOn' because they can't be written 
> otherwise".  Then, of course, newbies ask why the tests can have this 

Not at all.  I never said that tests should be using techniques like
'waitFor'/'blockOn'.

I think the current API that test methods return Deferreds is just fine.  I am
not proposing that people writing tests should be starting and stopping reactors
(unless of course they are unit testing the starting and stopping of
reactors...).  I am proposing that TwistedTestCase.run should be doing this
internally.

> but their protocol implementation (which really needs it, seriously, 
> it's not like *any* other application using Twisted) can't.  Aside from 
> the fact that it might actually work / be tested, it is the same (as far 
> as I'm concerned) as much of the brokenness that Trial has dealt with 
> for quite some time.

I definitely am not suggesting that tests should be significantly different to
any other code.

(Incidentally, there are times when multiple reactors would be useful outside of
Trial.)

> Much code within and without Twisted uses, and will continue for the 
> forseeable future to use, "from twisted.internet import reactor" to 
> access the reactor.  One might hope that this usage would eventually be 
> replaced by something better, but it's not clear if this (or an 
> equivalent spelling) could ever be *completely* eliminated.  I quite 
> like Jim Fulton's suggestion for adding an ITransport.reactor attribute 
> and using that in most places where the global import is currently used. 
> However, even if we had a comprehensive somehow non-global way to get at 
> a reactor available today, there would still be a *very* lengthy 
> transition period to a new API.  The question will remain what to do 
> about that code.

Sure.  We will be living with the concept of a default global reactor for a long
time.

That doesn't mean it can't be made restartable.

> My main objection here, though, is that I'd really like to be able to 
> add nifty Twisted-using features to Trial, and it's basically impossible 
> right now, due in large part to the fact that the reactor keeps starting 
> and stopping.  Creating a new reactor for each test is going to create 
> confusing semantics for code written using established idioms, because 
> either the framework is going to go to a lot of trouble to fool 
> everything into using trial's idea of the reactor the tests should be 
> using (which begs the question: how do you test trial itself, if it has 
> a reference to the "real" reactor?), or it's going to require special 
> hacks to get at the "real" reactor which still won't behave in an event- 
> driven way if a test (shock, horror) actually does want to do some real 
> I/O itself.  Although I am *personally* focusing on how to write better 
> and more isolated unit tests using trial, I know of a small number of 
> people using it as an integration testing tool that does tons of I/O to 
> external systems and I think that is an interesting use-case and should 
> be better supported, not worse.

I don't understand this.

Having a separate reactor for Trial and for the system-under-test (SUT) makes
Trial *more* testable.

Your point about “confusing semantics for code written using established idioms”
is just the inevitable result of supporting a default global reactor.  That's
not Trial's fault, it's Twisted's.  The way for Trial to cope with it gracefully
is to add support for multiple simultaneous reactors to Twisted, and then make
Trial use the non-global one for its own use, and let the tests keep using the
global one, so that legacy code will be unaffected.

I do not see how doing large amounts of I/O in test methods will be made any
worse by this design.

> Perhaps the 'trial' tool itself is a misguided design though, and 
> 'disttrial' will simply replace it in short order.  If this is the case, 
> then the tests are running in a subprocess anyway, and there's no reason 
> to run any code in-process with the tests, except for things to gather 
> metrics.  In that case, the 'disttrial' tool itself is a real Twisted 
> program, and the subprocess fakes just enough to get by:
> 
> http://twistedmatrix.com/trac/browser/branches/disttrial-1784/twisted/trial/dist/slavetrial.py#L60
> 
> That *particular* hack makes me cringe, but I think the overall 
> architecture may satisfy us both better in the end.

Right, it's a hack that gives us multiple reactors by putting Trial and the SUT
in separate processes, so that Trial and the SUT are using different reactors.
I'm saying that if we supported multiple reactors in the same process we could
and should use that feature to do the same thing: give Trial and the SUT
different reactors.

(Whether or not you share the same reactor instance between multiple tests is a
separate issue.  I think experience has taught us that doing that is fragile,
which is why I also advocate for a new reactor instance for each test, but
that's really an orthogonal issue.)

-Andrew.




From twisted at dwalliance.com  Tue Aug  7 06:37:35 2007
From: twisted at dwalliance.com (twisted at dwalliance.com)
Date: Tue, 7 Aug 2007 05:37:35 -0700
Subject: [Twisted-Python] custom work needed
Message-ID: <97847317eab0984a54e19d5d2a52f49d@store.dwalliance.com>

Hi,

We just posted this on guru.com but thought maybe one of you would be interested in helping us with this project.
*****************
We need a special smtp server created using twisted-python for ubuntu linux(feisty fawn server)that will accept an email then send that email to multiple anti-spam servers. Each email needs to be tagged with an ID and when relayed needs to appear as if it was received from the original sender(ip spoofing). This SMTP server could be visualized as an ethernet bridge that puts an ID on each received email then tees the connection and sends that email to multiple servers simultaneously. The connections to the anti-spam servers need to be monitored for how long it takes to accept the email, reject the email, or the connection errors out. All this data needs to be inserted in real time to a mysql database.

We expect that the smtp server will not act exactly like an ethernet bridge(pass through) since the sending will have significant overhead as compared to the receiving and that queuing will be a natural way for the system to manage a heavy workload.

It is very important to us that the anti-spam servers see our computer as the previous sending server since many anti-spam systems rely on black-listed IP's.

The receiving of emails will be from the internet the anti-spam servers will have limited access to the internet.

The software should be able to send 10 messages or more per second. Receiving email should not be an issue since only simple queuing is required.

This is an experimental project and well written and commented code is a requirement since we expect many updates to happen over a short amount of time.
*************

Our guess is the stock twisted smtp server with twisted pair and some other foo like mysql db connection will be all that is needed.  Hopefully no more than a few days work.

We have a budget of $500 to $1000 if you are interested you should only reply to this email address and not the list.

Thanks in advance!

Jimmy Brake





From warner at lothar.com  Tue Aug  7 19:48:44 2007
From: warner at lothar.com (Brian Warner)
Date: Tue, 07 Aug 2007 18:48:44 -0700 (PDT)
Subject: [Twisted-Python] Foolscap-0.1.5 released
Message-ID: <20070807.184844.52191902.warner@lothar.com>

I'm pleased to announce the release of Foolscap-0.1.5, the latest version of
the next-generation Perspective Broker library. My intention with this
library is to make many of the communication and cooperation features of the
E language available to Python programmers, and to simplify secure
communication between twisted-based python progams.

(there have been several intermediate releases since foolscap-0.1.1 in April,
which I neglected to announce. oops.)

Foolscap has moved out of the Twisted sandbox and into its very own Mercurial
repository. It also has its own Trac instance. For downloads, bugs, and all
things Foolscapish (with the exception of a mailing list, for which we're
still using twisted-python), please visit:

  http://foolscap.lothar.com/

The release can be downloaded directly from
http://foolscap.lothar.com/releases/foolscap-0.1.5.tar.gz , or installed by
typing 'easy_install foolscap' on a setuptools-enabled system.

A large number of bugs and features have been addressed since 0.1.1, please
see the NEWS file (attached) for full details. Many of them relate to the
handling of third-party references ("Gifts"), connection keepalives, and
Constaints. In addition, a number of usability improvements have been made
based upon experience gained by deploying Foolscap in a controlled
environment[1][2]. I am grateful to my employer, Allmydata.com, for providing
me with the time and environment to use and develop Foolscap for a real-world
application.

Please download and hack away. File bugs and patches in the foolscap Trac,
and discuss anything which doesn't fit into a ticket here on twisted-python.

share and enjoy!
 -Brian


[1]: http://allmydata.org/trac/tahoe/wiki (all tahoe connections use Foolscap)
[2]: http://www.allmydata.com/wordpress/?p=24 (the 1.8 release uses 
     Foolscap-0.1.4 internally)


* Release 0.1.5 (07 Aug 2007)

** Compatibility

This release is fully compatible with 0.1.4 and 0.1.3 .

** CopiedFailure improvements

When a remote method call fails, the calling side gets back a CopiedFailure
instance. These instances now behave slightly more like the (local) Failure
objects that they are intended to mirror, in that .type now behaves much like
the original class. This should allow trial tests which result in a
CopiedFailure to be logged without exploding. In addition, chained failures
(where A calls B, and B calls C, and C fails, so C's Failure is eventually
returned back to A) should work correctly now.

** Gift improvements

Gifts inside return values should properly stall the delivery of the response
until the gift is resolved. Gifts in all sorts of containers should work
properly now. Gifts which cannot be resolved successfully (either because the
hosting Tub cannot be reached, or because the name cannot be found) will now
cause a proper error rather than hanging forever. Unresolvable gifts in
method arguments will cause the message to not be delivered and an error to
be returned to the caller. Unresolvable gifts in method return values will
cause the caller to receive an error.

** IRemoteReference() adapter

The IRemoteReference() interface now has an adapter from Referenceable which
creates a wrapper that enables the use of callRemote() and other
IRemoteReference methods on a local object.

The situation where this might be useful is when you have a central
introducer and a bunch of clients, and the clients are introducing themselves
to each other (to create a fully-connected mesh), and the introductions are
using live references (i.e. Gifts), then when a specific client learns about
itself from the introducer, that client will receive a local object instead
of a RemoteReference. Each client will wind up with n-1 RemoteReferences and
a single local object.

This adapter allows the client to treat all these introductions as equal. A
client that wishes to send a message to everyone it's been introduced to
(including itself) can use:

  for i in introductions:
    IRemoteReference(i).callRemote("hello", args)

In the future, if we implement coercing Guards (instead of
compliance-asserting Constraints), then IRemoteReference will be useful as a
guard on methods that want to insure that they can do callRemote (and
notifyOnDisconnect, etc) on their argument.

** Tub.registerNameLookupHandler

This method allows a one-argument name-lookup callable to be attached to the
Tub. This augments the table maintained by Tub.registerReference, allowing
Referenceables to be created on the fly, or persisted/retrieved on disk
instead of requiring all of them to be generated and registered at startup.


* Release 0.1.4 (14 May 2007)

** Compatibility

This release is fully compatible with 0.1.3 .

** getReference/connectTo can be called before Tub.startService()

The Tub.startService changes that were suggested in the 0.1.3 release notes
have been implemented. Calling getReference() or connectTo() before the Tub
has been started is now allowed, however no action will take place until the
Tub is running. Don't forget to start the Tub, or you'll be left wondering
why your Deferred or callback is never fired. (A log message is emitted when
these calls are made before the Tub is started, in the hopes of helping
developers find this mistake faster).

** constraint improvements

The RIFoo -style constraint now accepts gifts (third-party references). This
also means that using RIFoo on the outbound side will accept either a
Referenceable that implements the given RemoteInterface or a RemoteReference
that points to a Referenceable that implements the given RemoteInterface.
There is a situation (sending a RemoteReference back to its owner) that will
pass the outbound constraint but be rejected by the inbound constraint on the
other end. It remains to be seen how this will be fixed.

** foolscap now deserializes into python2.4-native 'set' and 'frozenset' types

Since Foolscap is dependent upon python2.4 or newer anyways, it now
unconditionally creates built-in 'set' and 'frozenset' instances when
deserializing 'set'/'immutable-set' banana sequences. The pre-python2.4
'sets' module has non-built-in set classes named sets.Set and
sets.ImmutableSet, and these are serialized just like the built-in forms.

Unfortunately this means that Set and ImmutableSet will not survive a
round-trip: they'll be turned into set and frozenset, respectively. Worse
yet, 'set' and 'sets.Set' are not entirely compatible. This may cause a
problem for older applications that were written to be compatible with both
python-2.3 and python-2.4 (by using sets.Set/sets.ImmutableSet), for which
the compatibility code is still in place (i.e. they are not using
set/frozenset). These applications may experience problems when set objects
that traverse the wire via Foolscap are brought into close proximity with set
objects that remained local. This is unfortunate, but it's the cleanest way
to support modern applications that use the native types exclusively.

** bug fixes

Gifts inside containers (lists, tuples, dicts, sets) were broken: the target
method was frequently invoked before the gift had properly resolved into a
RemoteReference. Constraints involving gifts inside containers were broken
too. The constraints may be too loose right now, but I don't think they
should cause false negatives.

The unused SturdyRef.asLiveRef method was removed, since it didn't work
anyways.

** terminology shift: FURL

The preferred name for the sort of URL that you get back from
registerReference (and hand to getReference or connectTo) has changed from
"PB URL" to "FURL" (short for Foolscap URL). They still start with 'pb:',
however. Documentation is slowly being changed to use this term.


* Release 0.1.3 (02 May 2007)

** Incompatibility Warning

The 'keepalive' feature described below adds a new pair of banana tokens,
PING and PONG, which introduces a compatibility break between 0.1.2 and 0.1.3
. Older versions would throw an error upon receipt of a PING token, so the
version-negotiation mechanism is used to prevent banana-v2 (0.1.2) peers from
connecting to banana-v3 (0.1.3+) peers. Our negotiation mechanism would make
it possible to detect the older (v2) peer and refrain from using PINGs, but
that has not been done for this release.

** Tubs must be running before use

Tubs are twisted.application.service.Service instances, and as such have a
clear distinction between "running" and "not running" states. Tubs are
started by calling startService(), or by attaching them to a running service,
or by starting the service that they are already attached to. The design rule
in operation here is that Tubs are not allowed to perform network IO until
they are running.

This rule was not enforced completely in 0.1.2, and calls to
getReference()/connectTo() that occurred before the Tub was started would
proceed normally (initiating a TCP connection, etc). Starting with 0.1.3,
this rule *is* enforced. For now, that means that you must start the Tub
before calling either of these methods, or you'll get an exception. In a
future release, that may be changed to allow these early calls, and queue or
otherwise defer the network IO until the Tub is eventually started. (the
biggest issue is how to warn users who forget to start the Tub, since in the
face of such a bug the getReference will simply never complete).

** Keepalives

Tubs now keep track of how long a connection has been idle, and will send a
few bytes (a PING of the other end) if no other traffic has been seen for
roughly 4 to 8 minutes. This serves two purposes. The first is to convince an
intervening NAT box that the connection is still in use, to prevent it from
discarding the connection's table entry, since that would block any further
traffic. The second is to accelerate the detection of such blocked
connections, specifically to reduce the size of a window of buggy behavior in
Foolscap's duplicate-connection detection/suppression code.

This problem arises when client A (behind a low-end NAT box) connects to
server B, perhaps using connectTo(). The first connection works fine, and is
used for a while. Then, for whatever reason, A and B are silent for a long
time (perhaps as short as 20 minutes, depending upon the NAT box). During
this silence, A's NAT box thinks the connection is no longer in use and drops
the address-translation table entry. Now suppose that A suddenly decides to
talk to B. If the NAT box creates a new entry (with a new outbound port
number), the packets that arrive on B will be rejected, since they do not
match any existing TCP connections. A sees these rejected packets, breaks the
TCP connection, and the Reconnector initiates a new connection. Meanwhile, B
has no idea that anything has gone wrong. When the second connection reaches
B, it thinks this is a duplicate connection from A, and that it already has a
perfectly functional (albeit quiet) connection for that TubID, so it rejects
the connection during the negotiation phase. A sees this rejection and
schedules a new attempt, which ends in the same result. This has the
potential to prevent hosts behind NAT boxes from ever reconnecting to the
other end, at least until the the program at the far end is restarted, or it
happens to try to send some traffic of its own.

The same problem can occur if a laptop is abruptly shut down, or unplugged
from the network, then moved to a different network. Similar problems have
been seen with virtual machine instances that were suspended and moved to a
different network.

The longer-term fix for this is a deep change to the way duplicate
connections (and cross-connect race conditions) are handled. The keepalives,
however, mean that both sides are continually checking to see that the
connection is still usable, enabling TCP to break the connection once the
keepalives go unacknowledged for a certain amount of time. The default
keepalive timer is 4 minutes, and due to the way it is implemented this means
that no more than 8 minutes will pass without some traffic being sent. TCP
tends to time out connections after perhaps 15 minutes of unacknowledged
traffic, which means that the window of unconnectability is probably reduced
from infinity down to about 25 minutes.

The keepalive-sending timer defaults to 4 minutes, and can be changed by
calling tub.setOption("keepaliveTimeout", seconds).

In addition, an explicit disconnect timer can be enabled, which tells
Foolscap to drop the connection unless traffic has been seen within some
minimum span of time. This timer can be set by calling
tub.setOption("disconnectTimeout", seconds). Obviously it should be set to a
higher value than the keepaliveTimeout. This will close connections faster
than TCP will. Both TCP disconnects and the ones triggered by this
disconnectTimeout run the risk of false negatives, of course, in the face of
unreliable networks.

** New constraints

When a tuple appears in a method constraint specification, it now maps to an
actual TupleOf constraint. Previously they mapped to a ChoiceOf constraint.
In practice, TupleOf appears to be much more useful, and thus better
deserving of the shortcut.

For example, a method defined as follows:

  def get_employee(idnumber=int):
      return (str, int, int)  # (name, room_number, age)

can only return a three-element tuple, in which the first element is a string
(specifically it conforms to a default StringConstraint), and the second two
elements are ints (which conform to a default IntegerConstraint, which means
it fits in a 32-bit signed twos-complement value).

To specify a constraint that can accept alternatives, use ChoiceOf:

  def get_record(key=str):
      """Return the record (a string) if it is present, or None if
          it is not present."""
      return ChoiceOf(str, None)

UnicodeConstraint has been added, with minLength=, maxLength=, and regexp=
arguments.

The previous StringConstraint has been renamed to ByteStringConstraint (for
accuracy), and it is defined to *only* accept string objects (not unicode
objects). 'StringConstraint' itself remains equivalent to
ByteStringConstraint for now, but in the future it may be redefined to be a
constraint that accepts both bytestrings and unicode objects. To accomplish
the bytestring-or-unicode constraint now, you might try
schema.AnyStringConstraint, but it has not been fully tested, and might not
work at all.

** Bugfixes

Errors during negotiation were sometimes delivered in the wrong format,
resulting in a "token prefix is limited to 64 bytes" error message. Several
error messages (including that one) have been improved to give developers a
better chance of determining where the actual problem lies.

RemoteReference.notifyOnDisconnect was buggy when called on a reference that
was already broken: it failed to fire the callback. Now it fires the callback
soon (using an eventual-send). This should remove a race condition from
connectTo+notifyOnDisconnect sequences and allow them to operate reliably.
notifyOnDisconnect() is now tolerant of attempts to remove something twice,
which should make it easier to use safely.

Remote methods which raise string exceptions should no longer cause Foolscap
to explode. These sorts of exceptions are deprecated, of course, and you
shouldn't use them, but at least they won't break Foolscap.

The Reconnector class (accessed by tub.connectTo) was not correctly
reconnecting in certain cases (which appeared to be particularly common on
windows). This should be fixed now.

CopyableSlicer did not work inside containers when streaming was enabled.
Thanks to iacovou-AT-gmail.com for spotting this one.

** Bugs not fixed

Some bugs were identified and characterized but *not* fixed in this release

*** RemoteInterfaces aren't defaulting to fully-qualified classnames

When defining a RemoteInterface, you can specify its name with
__remote_name__, or you can allow it to use the default name. Unfortunately,
the default name is only the *local* name of the class, not the
fully-qualified name, which means that if you have an RIFoo in two different
.py files, they will wind up with the same name (which will cause an error on
import, since all RemoteInterfaces known to a Foolscap-using program must
have unique names).

It turns out that it is rather difficult to determine the fully-qualified
name of the RemoteInterface class early enough to be helpful. The workaround
is to always add a __remote_name__ to your RemoteInterface classes. The
recommendation is to use a globally-unique string, like a URI that includes
your organization's DNS name.

*** Constraints aren't constraining inbound tokens well enough

Constraints (and the RemoteInterfaces they live inside) serve three purposes.
The primary one is as documentation, describing how remotely-accessible
objects behave. The second purpose is to enforce that documentation, by
inspecting arguments (and return values) before invoking the method, as a
form of precondition checking. The third is to mitigate denial-of-service
attacks, in which an attacker sends so much data (or carefully crafted data)
that the receiving program runs out of memory or stack space.

It looks like several constraints are not correctly paying attention to the
tokens as they arrive over the wire, such that the third purpose is not being
achieved. Hopefully this will be fixed in a later release. Application code
can be unaware of this change, since the constraints are still being applied
to inbound arguments before they are passed to the method. Continue to use
RemoteInterfaces as usual, just be aware that you are not yet protected
against certain DoS attacks.

** Use os.urandom instead of falling back to pycrypto

Once upon a time, when Foolscap was compatible with python2.3 (which lacks
os.urandom), we would try to use PyCrypto's random-number-generation routines
when creating unguessable object identifiers (aka "SwissNumbers"). Now that
we require python2.4 or later, this fallback has been removed, eliminating
the last reference to pycrypto within the Foolscap source tree.


* Release 0.1.2 (04 Apr 2007)

** Bugfixes

Yesterday's release had a bug in the new SetConstraint which rendered it
completely unusable. This has been fixed, along with some new tests.

** More debian packaging

Some control scripts were added to make it easier to create debian packages
for the Ubuntu 'edgy' and 'feisty' distributions.



From nayuhz at gmail.com  Tue Aug  7 21:58:25 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Wed, 8 Aug 2007 11:58:25 +0800
Subject: [Twisted-Python] thread in reactor problem
Message-ID: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>

Hi all, I run a reactor in my thread, so I will get many connection by
twisted, and I run another thread for write back data to any connection.
But I've found the data is in buffer, not sent back immediately.  I traced
the twisted, found it blocked in class SelectReactor.doSelect():

while 1:
    try:
        r, w, ignored = _select(reads.keys(),
        writes.keys(),
        [], timeout)
        break
    ... ...
    #do sth

when the reactor is bloce by _select(), then my another thread modified the
*writes* dictionary, but _select could not know if writes.keys() is changed,
so when the thread want to write something, reactor won't do response. so,
the problem is above.

Is there any idea for this?
thanks~

-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070808/8c296909/attachment.html>

From radix at twistedmatrix.com  Tue Aug  7 22:22:10 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 8 Aug 2007 00:22:10 -0400
Subject: [Twisted-Python] thread in reactor problem
In-Reply-To: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
References: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
Message-ID: <60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>

On 8/7/07, Yan Zhu <nayuhz at gmail.com> wrote:
> Hi all, I run a reactor in my thread, so I will get many connection by
> twisted, and I run another thread for write back data to any connection.

You don't need to have multiple threads to communicate with multiple
connections!

> But I've found the data is in buffer, not sent back
> immediately.

This is because you're calling Twisted functions from non-reactor
threads. Twisted doesn't support this. The *only* threadsafe function
to call is reactor.callFromThread. You pass it a function to run in
the reactor thread.

If all you need is concurrent asynchronous I/O, you don't need
threads. Twisted is an *asynchronous* networking framework. You can do
all of your communication efficiently in one thread.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nayuhz at gmail.com  Wed Aug  8 00:38:29 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Wed, 8 Aug 2007 14:38:29 +0800
Subject: [Twisted-Python] thread in reactor problem
In-Reply-To: <60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>
References: <8ae5ea120708072058t71bbceb0pdb64aa6df92897ff@mail.gmail.com>
	<60ed19d40708072122j31a9d18n6d7d8f5d02dd4d98@mail.gmail.com>
Message-ID: <8ae5ea120708072338y4819cd5ar16ad0504d8288034@mail.gmail.com>

Thanks you. I've resolved it! ;)


On 8/8/07, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>
> On 8/7/07, Yan Zhu <nayuhz at gmail.com> wrote:
> > Hi all, I run a reactor in my thread, so I will get many connection by
> > twisted, and I run another thread for write back data to any connection.
>
> You don't need to have multiple threads to communicate with multiple
> connections!
>
> > But I've found the data is in buffer, not sent back
> > immediately.
>
> This is because you're calling Twisted functions from non-reactor
> threads. Twisted doesn't support this. The *only* threadsafe function
> to call is reactor.callFromThread. You pass it a function to run in
> the reactor thread.
>
> If all you need is concurrent asynchronous I/O, you don't need
> threads. Twisted is an *asynchronous* networking framework. You can do
> all of your communication efficiently in one thread.
>
> --
> Christopher Armstrong
> International Man of Twistery
> http://radix.twistedmatrix.com/
> http://twistedmatrix.com/
> http://canonical.com/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070808/9c782d9e/attachment.html>

From ladaan at iptel.org  Wed Aug  8 01:56:16 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 09:56:16 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
Message-ID: <46B97720.4090901@iptel.org>

Hi,
I'm writing an application which will be periodically testing servers.
I will have a global list of these servers(domain names) and need to do
few tasks.
1) DNS checks - I will use asynchronous twisted-names for it
- in case there is a difference comparing to the list it should update 
the list(then also in DB)
2) ICMP pings - should be also possible to do it asynchronously
3) Blocking function which will be pinging with SIP requests
- here I will use function deferToThread to make it non-blocking.

Questions:
1) How do I lock each thread when writing to a global list in twisted?
2) How will I put together all three results mentioned above in the 
global list
- is it by using function callLater ?
3) Could you help me with a rough skeleton of this application, please?

Thank you,
Lada







From exarkun at divmod.com  Wed Aug  8 04:31:36 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 06:31:36 -0400
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B97720.4090901@iptel.org>
Message-ID: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>

On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> wrote:
>Hi,
>I'm writing an application which will be periodically testing servers.
>I will have a global list of these servers(domain names) and need to do
>few tasks.
>1) DNS checks - I will use asynchronous twisted-names for it
>- in case there is a difference comparing to the list it should update the 
>list(then also in DB)
>2) ICMP pings - should be also possible to do it asynchronously
>3) Blocking function which will be pinging with SIP requests
>- here I will use function deferToThread to make it non-blocking.
>
>Questions:
>1) How do I lock each thread when writing to a global list in twisted?

Don't.  Don't share state between different threads.  If you need to mutate
state as a result of code which has run in a thread, do it in the reactor
thread based on the result of the Deferred returned by deferToThread.

Also, why do you need threads to send SIP messages?

>2) How will I put together all three results mentioned above in the global 
>list
>- is it by using function callLater ?

Don't use globals.  You can just put your state variables on an instance of
a class.  There's nothing unique to Twisted about this.  I'm not sure how
callLater would be involved.  callLater is for scheduling functions to run
based on timing events.

Jean-Paul



From ladaan at iptel.org  Wed Aug  8 05:11:09 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 13:11:09 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
Message-ID: <46B9A4CD.3030409@iptel.org>

Jean-Paul Calderone wrote:
> On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> 
> wrote:
>> Hi,
>> I'm writing an application which will be periodically testing servers.
>> I will have a global list of these servers(domain names) and need to do
>> few tasks.
>> 1) DNS checks - I will use asynchronous twisted-names for it
>> - in case there is a difference comparing to the list it should 
>> update the list(then also in DB)
>> 2) ICMP pings - should be also possible to do it asynchronously
>> 3) Blocking function which will be pinging with SIP requests
>> - here I will use function deferToThread to make it non-blocking.
>>
>> Questions:
>> 1) How do I lock each thread when writing to a global list in twisted?
>
> Don't.  Don't share state between different threads.  If you need to 
> mutate
> state as a result of code which has run in a thread, do it in the reactor
> thread based on the result of the Deferred returned by deferToThread.
>
I'm aiming to use results of the Deffered returned by deferToThread.
Can you give me an example of combining two Deferred results?
This will be done through callbacks but what if the blocking application 
gives me result in 5 sec
and e.g. DNS check in 1 sec.

> Also, why do you need threads to send SIP messages?
I use third party application where I'm just handling parameters to the 
application.
I know it's possible to do it somehow easily via twisted but I don't 
have time to explore it now.
I'm also quite new to python and also to twisted so that's why I don't 
want to get involved in something more
complex for now.

>
>> 2) How will I put together all three results mentioned above in the 
>> global list
>> - is it by using function callLater ?
>
> Don't use globals.  You can just put your state variables on an 
> instance of
> a class.  There's nothing unique to Twisted about this.  I'm not sure how
> callLater would be involved.  callLater is for scheduling functions to 
> run
> based on timing events.
>
Can you give me a little example?

Lada



From exarkun at divmod.com  Wed Aug  8 06:04:57 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 08:04:57 -0400
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9A4CD.3030409@iptel.org>
Message-ID: <20070808120457.4947.1236737990.divmod.quotient.20171@ohm>

On Wed, 08 Aug 2007 13:11:09 +0200, Ladislav Andel <ladaan at iptel.org> wrote:
>Jean-Paul Calderone wrote:
>>On Wed, 08 Aug 2007 09:56:16 +0200, Ladislav Andel <ladaan at iptel.org> 
>>wrote:
>>>Hi,
>>>I'm writing an application which will be periodically testing servers.
>>>I will have a global list of these servers(domain names) and need to do
>>>few tasks.
>>>1) DNS checks - I will use asynchronous twisted-names for it
>>>- in case there is a difference comparing to the list it should update the 
>>>list(then also in DB)
>>>2) ICMP pings - should be also possible to do it asynchronously
>>>3) Blocking function which will be pinging with SIP requests
>>>- here I will use function deferToThread to make it non-blocking.
>>>
>>>Questions:
>>>1) How do I lock each thread when writing to a global list in twisted?
>>
>>Don't.  Don't share state between different threads.  If you need to mutate
>>state as a result of code which has run in a thread, do it in the reactor
>>thread based on the result of the Deferred returned by deferToThread.
>I'm aiming to use results of the Deffered returned by deferToThread.
>Can you give me an example of combining two Deferred results?
>This will be done through callbacks but what if the blocking application 
>gives me result in 5 sec
>and e.g. DNS check in 1 sec.

twisted.internet.defer.gatherResults takes a list of Deferreds and returns
a Deferred which fires with a list of results.  If you want to wait for both
results, you can use this.  If you only want the first result, whichever
that may be, then you just need to write a little class that acknowledges
the first Deferred's callback and disregards callbacks from any subsequent
Deferreds.

>>Also, why do you need threads to send SIP messages?
>I use third party application where I'm just handling parameters to the 
>application.
>I know it's possible to do it somehow easily via twisted but I don't have 
>time to explore it now.
>I'm also quite new to python and also to twisted so that's why I don't want 
>to get involved in something more
>complex for now.

Alright.

>>
>>>2) How will I put together all three results mentioned above in the global 
>>>list
>>>- is it by using function callLater ?
>>
>>Don't use globals.  You can just put your state variables on an instance of
>>a class.  There's nothing unique to Twisted about this.  I'm not sure how
>>callLater would be involved.  callLater is for scheduling functions to run
>>based on timing events.
>Can you give me a little example?

I'm not really sure what you have in mind, but maybe an approach along these
lines would be useful:

class PingTracker:
    def __init__(self):
        self.dns = None
        self.sip = None
        self.ping = None

    def check(self, host):
        checks = []
        checks.append(checkDNS().addCallback(self.setDNSResult))
        checks.append(checkSIP().addCallback(self.setSIPResult))
        checks.append(checkPing().addCallback(self.setPingResult))
        return gatherResults(checks)

    def setDNSResult(self, result):
        self.dns = result

    ...

Jean-Paul



From andrew.roden at gmail.com  Wed Aug  8 06:25:59 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 13:25:59 +0100
Subject: [Twisted-Python] struggling with twisted telnet
Message-ID: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>

Hi

I'm pretty new to python which probably isn't helping, but I'm kind of stuck
with twisted telnet. I'm trying to build a couple of 'emulators' for some
simple router/switches just so that you can log on and run some 'standard'
commands and get a 'standard' output for use elsewhere. I've managed to get
an SSH version working with the massively helpful section in the O'Reilly
book but I cannot get the telnet version working. the script 'runs' with no
errors, but it doesn't stay running and bind to port 23 giving me my telnet
server. I enclose a zip with the ssh and the telnet versions, if anyone can
give me any pointers it would be massively appreciated (I haven't even
attempted to add in the 'login' which is in the SSH version... so any help
on that would be great too :) )

Thanks

Andrew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070808/0364e679/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stuff.zip
Type: application/zip
Size: 2836 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070808/0364e679/attachment-0002.zip>

From marian.schubert at gmail.com  Wed Aug  8 06:27:05 2007
From: marian.schubert at gmail.com (Marian Schubert)
Date: Wed, 8 Aug 2007 14:27:05 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9A4CD.3030409@iptel.org>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
	<46B9A4CD.3030409@iptel.org>
Message-ID: <a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>

On 8/8/07, Ladislav Andel <ladaan at iptel.org> wrote:
> > Don't.  Don't share state between different threads.  If you need to
> > mutate
> > state as a result of code which has run in a thread, do it in the reactor
> > thread based on the result of the Deferred returned by deferToThread.
> >
> I'm aiming to use results of the Deffered returned by deferToThread.
> Can you give me an example of combining two Deferred results?
> This will be done through callbacks but what if the blocking application
> gives me result in 5 sec
> and e.g. DNS check in 1 sec.

check gatherResults from twisted.internet.defer. basicaly it's:
d3 = defer.gatherResults(d1, d2)
where d1 is call to blocking app using deferToThread and d2 is DNS check

and d3 gets called back with results of d1 and d2 (if they both succeeded)

cu,
MS



From exarkun at divmod.com  Wed Aug  8 06:32:32 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 08:32:32 -0400
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>
Message-ID: <20070808123232.4947.1654324248.divmod.quotient.20179@ohm>

On Wed, 8 Aug 2007 13:25:59 +0100, Andrew Roden <andrew.roden at gmail.com> wrote:
>Hi
>
>I'm pretty new to python which probably isn't helping, but I'm kind of stuck
>with twisted telnet. I'm trying to build a couple of 'emulators' for some
>simple router/switches just so that you can log on and run some 'standard'
>commands and get a 'standard' output for use elsewhere. I've managed to get
>an SSH version working with the massively helpful section in the O'Reilly
>book but I cannot get the telnet version working. the script 'runs' with no
>errors, but it doesn't stay running and bind to port 23 giving me my telnet
>server. I enclose a zip with the ssh and the telnet versions, if anyone can
>give me any pointers it would be massively appreciated (I haven't even
>attempted to add in the 'login' which is in the SSH version... so any help
>on that would be great too :) )

Are you using twistd to run it?

    $ twistd -noy telnet_server.py
    Removing stale pidfile twistd.pid
    2007-08-08 08:31:05-0400 [-] Log opened.
    2007-08-08 08:31:05-0400 [-] twistd 2.5.0+r20987 (/usr/bin/python 2.4.3) starting up
    2007-08-08 08:31:05-0400 [-] reactor class: <class 'twisted.internet.selectreactor.SelectReactor'>
    2007-08-08 08:31:05-0400 [-] twisted.internet.protocol.ServerFactory starting on 23
    2007-08-08 08:31:05-0400 [-] Starting factory <twisted.internet.protocol.ServerFactory instance at 0xb77f5fac>
    ...

After I connect to the port, it reports several tracebacks and drops the
connection.

Jean-Paul




From andrew.roden at gmail.com  Wed Aug  8 07:27:36 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 14:27:36 +0100
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <20070808123232.4947.1654324248.divmod.quotient.20179@ohm>
References: <e2d6c2200708080525h172c19a0vbd3ab44a218abcfc@mail.gmail.com>
	<20070808123232.4947.1654324248.divmod.quotient.20179@ohm>
Message-ID: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>

The answer is no I wasn't running it with twistd as I didn't need to with
the ssh one... having now run it with twistd I can see the exceptions it
throws but I have absolutely no clue how to go about rectifying them :(
>From what I can make out the main issue is with no terminal size being set
which from the demo_insults.tac looks like it's set in my class that deals
with connections associating it with insults.TerminalProtocol (eg. class
DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
connections in recvline as I don't want it to react on a per character basis
but rather a per line basis...

*confused of england*

Andrew


On 8/8/07, Jean-Paul Calderone < exarkun at divmod.com> wrote:
>
> On Wed, 8 Aug 2007 13:25:59 +0100, Andrew Roden < andrew.roden at gmail.com>
> wrote:
> >Hi
> >
> >I'm pretty new to python which probably isn't helping, but I'm kind of
> stuck
> >with twisted telnet. I'm trying to build a couple of 'emulators' for some
>
> >simple router/switches just so that you can log on and run some
> 'standard'
> >commands and get a 'standard' output for use elsewhere. I've managed to
> get
> >an SSH version working with the massively helpful section in the O'Reilly
>
> >book but I cannot get the telnet version working. the script 'runs' with
> no
> >errors, but it doesn't stay running and bind to port 23 giving me my
> telnet
> >server. I enclose a zip with the ssh and the telnet versions, if anyone
> can
> >give me any pointers it would be massively appreciated (I haven't even
> >attempted to add in the 'login' which is in the SSH version... so any
> help
> >on that would be great too :) )
>
> Are you using twistd to run it?
>
>     $ twistd -noy telnet_server.py
>     Removing stale pidfile twistd.pid
>     2007-08-08 08:31:05-0400 [-] Log opened.
>     2007-08-08 08:31:05-0400 [-] twistd 2.5.0+r20987 (/usr/bin/python
> 2.4.3) starting up
>     2007-08-08 08:31:05-0400 [-] reactor class: <class '
> twisted.internet.selectreactor.SelectReactor'>
>     2007-08-08 08:31:05-0400 [-] twisted.internet.protocol.ServerFactorystarting on 23
>     2007-08-08 08:31:05-0400 [-] Starting factory <
> twisted.internet.protocol.ServerFactory instance at 0xb77f5fac>
>     ...
>
> After I connect to the port, it reports several tracebacks and drops the
> connection.
>
> Jean-Paul
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070808/88eef26e/attachment.html>

From exarkun at divmod.com  Wed Aug  8 07:49:41 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 09:49:41 -0400
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>
Message-ID: <20070808134941.4947.1966598319.divmod.quotient.20197@ohm>

On Wed, 8 Aug 2007 14:27:36 +0100, Andrew Roden <andrew.roden at gmail.com> wrote:
>The answer is no I wasn't running it with twistd as I didn't need to with
>the ssh one... having now run it with twistd I can see the exceptions it
>throws but I have absolutely no clue how to go about rectifying them :(
>>From what I can make out the main issue is with no terminal size being set
>which from the demo_insults.tac looks like it's set in my class that deals
>with connections associating it with insults.TerminalProtocol (eg. class
>DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
>connections in recvline as I don't want it to react on a per character basis
>but rather a per line basis...
>
>*confused of england*
>
>Andrew
>

The first traceback I see is this one:

2007-08-08 09:46:39-0400 [twisted.internet.protocol.ServerFactory] Unhandled Error
        Traceback (most recent call last):
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py", line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 813, in doRead
            protocol.makeConnection(transport)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 732, in connectionMade
            self.protocol.makeConnection(self)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 795, in connectionMade
            self.protocol.makeConnection(self)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line 333, in makeConnection
            self.connectionMade()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/insults/insults.py", line 416, in connectionMade
            self.terminalProtocol = self.protocolFactory(*self.protocolArgs, **self.protocolKwArgs)
        exceptions.TypeError: __init__() takes exactly 2 arguments (1 given)

Python is really helpful here, omitting the class name which has the bad
__init__, but I guess you can track that down with a little effort (and
there are probably only a small number of candidates).

The next one I see is this:

2007-08-08 09:46:39-0400 [TelnetTransport,0,127.0.0.1] Unhandled Error
        Traceback (most recent call last):
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 51, in callWithLogger
            return callWithContext({"system": lp}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59, in callWithContext
            return self.currentContext().callWithContext(ctx, func, *args, **kw)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37, in callWithContext
            return func(*args,**kw)
        --- <exception caught here> ---
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py", line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
          File "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 362, in doRead
            return self.protocol.dataReceived(data)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 483, in dataReceived
            self.negotiate(commands)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 526, in negotiate
            cmdFunc(bytes)
          File "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 833, in telnet_NAWS
            self.protocol.terminalProtocol.terminalSize(width, height)
        exceptions.AttributeError: 'NoneType' object has no attribute 'terminalSize'

This may just be a consequence of the first one, so I'd try resolving the
first one before looking more at this.

Jean-Paul



From rodrigo at 1bit.com.br  Wed Aug  8 08:06:24 2007
From: rodrigo at 1bit.com.br (Rodrigo Strauss)
Date: Wed, 8 Aug 2007 11:06:24 -0300
Subject: [Twisted-Python] stop receiving from socket until processing finish
Message-ID: <a684d0100708080706j2eeb13a1kebfb97b96d6ae499@mail.gmail.com>

Hi!

Consider the following scenario (each component is a twisted app):

producer --> processor --> destination

I need to stop receiving producer data until I'm able to process it
and send to destination. Using sync sockets, the producer send() with
block if processor isn't recv'ing as fast as it can send. How can I do
this using twisted? Something like telling reactor to stop receiving
from a specific socket until I enable it back. When I send something
to destination, the reactor will come back to scene and recv data from
producer.

A simple solution is to make processor ask for data to process every
time, but when processor is fast enough it will hurt the performance
to much.

Rodrigo



From exarkun at divmod.com  Wed Aug  8 08:25:14 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 8 Aug 2007 10:25:14 -0400
Subject: [Twisted-Python] stop receiving from socket until processing
	finish
In-Reply-To: <a684d0100708080706j2eeb13a1kebfb97b96d6ae499@mail.gmail.com>
Message-ID: <20070808142514.4947.1201879559.divmod.quotient.20204@ohm>

On Wed, 8 Aug 2007 11:06:24 -0300, Rodrigo Strauss <rodrigo at 1bit.com.br> wrote:
>Hi!
>
>Consider the following scenario (each component is a twisted app):
>
>producer --> processor --> destination
>
>I need to stop receiving producer data until I'm able to process it
>and send to destination. Using sync sockets, the producer send() with
>block if processor isn't recv'ing as fast as it can send. How can I do
>this using twisted? Something like telling reactor to stop receiving
>from a specific socket until I enable it back. When I send something
>to destination, the reactor will come back to scene and recv data from
>producer.

A protocol can ask its transport to stop giving it data by calling
pauseProducing.  When it is ready for more data, there's resumeProducing.

Pausing is implemented in the transport by not reading from the socket.

Jean-Paul



From andrew.roden at gmail.com  Wed Aug  8 08:54:56 2007
From: andrew.roden at gmail.com (Andrew Roden)
Date: Wed, 8 Aug 2007 15:54:56 +0100
Subject: [Twisted-Python] struggling with twisted telnet
In-Reply-To: <20070808134941.4947.1966598319.divmod.quotient.20197@ohm>
References: <e2d6c2200708080627t3f227a16y3146be7241b5aa39@mail.gmail.com>
	<20070808134941.4947.1966598319.divmod.quotient.20197@ohm>
Message-ID: <e2d6c2200708080754v68ba4c70u1375ee25e2e141a1@mail.gmail.com>

ok... thanks for the help so far :)

I've managed to get it 'working' by hashing out the __init__ under the
Telnet Protocol class

class TelnetProtocol(recvline.HistoricRecvLine):
#    def __init__(self, user):
#        self.user = user

That will now allow me to connect to the 'server' but it behaves in a
different way to the SSH server in that if I type in one of my commands...
to see the output and return to the prompt, I have to hit enter twice which
then shows me 2 prompts :(

oh for a nice simple example like the one for SSH in the O'Reilly book :(

Andrew

On 8/8/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Wed, 8 Aug 2007 14:27:36 +0100, Andrew Roden <andrew.roden at gmail.com>
> wrote:
> >The answer is no I wasn't running it with twistd as I didn't need to with
> >the ssh one... having now run it with twistd I can see the exceptions it
> >throws but I have absolutely no clue how to go about rectifying them :(
> >>From what I can make out the main issue is with no terminal size being
> set
> >which from the demo_insults.tac looks like it's set in my class that
> deals
> >with connections associating it with insults.TerminalProtocol (eg. class
> >DemoProtocol(insults.TerminalProtocol): ) however, I am dealing with my
> >connections in recvline as I don't want it to react on a per character
> basis
> >but rather a per line basis...
> >
> >*confused of england*
> >
> >Andrew
> >
>
> The first traceback I see is this one:
>
> 2007-08-08 09:46:39-0400 [twisted.internet.protocol.ServerFactory]
> Unhandled Error
>         Traceback (most recent call last):
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in
> callWithContext
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59,
> in callWithContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37,
> in callWithContext
>             return func(*args,**kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>             why = getattr(selectable, method)()
>         --- <exception caught here> ---
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 813, in
> doRead
>             protocol.makeConnection(transport)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 732, in
> connectionMade
>             self.protocol.makeConnection(self)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 795, in
> connectionMade
>             self.protocol.makeConnection(self)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/protocol.py", line
> 333, in makeConnection
>             self.connectionMade()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/insults/insults.py",
> line 416, in connectionMade
>             self.terminalProtocol = self.protocolFactory (*
> self.protocolArgs, **self.protocolKwArgs)
>         exceptions.TypeError: __init__() takes exactly 2 arguments (1
> given)
>
> Python is really helpful here, omitting the class name which has the bad
> __init__, but I guess you can track that down with a little effort (and
> there are probably only a small number of candidates).
>
> The next one I see is this:
>
> 2007-08-08 09:46:39-0400 [TelnetTransport,0,127.0.0.1] Unhandled Error
>         Traceback (most recent call last):
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 51, in
> callWithLogger
>             return callWithContext({"system": lp}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/log.py", line 36, in
> callWithContext
>             return context.call({ILogContext: newCtx}, func, *args, **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 59,
> in callWithContext
>             return self.currentContext().callWithContext(ctx, func, *args,
> **kw)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/python/context.py", line 37,
> in callWithContext
>             return func(*args,**kw)
>         --- <exception caught here> ---
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/selectreactor.py",
> line 139, in _doReadOrWrite
>             why = getattr(selectable, method)()
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/internet/tcp.py", line 362, in
> doRead
>             return self.protocol.dataReceived(data)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 483, in
> dataReceived
>             self.negotiate(commands)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 526, in
> negotiate
>             cmdFunc(bytes)
>           File
> "/home/exarkun/Projects/Twisted/trunk/twisted/conch/telnet.py", line 833, in
> telnet_NAWS
>             self.protocol.terminalProtocol.terminalSize(width, height)
>         exceptions.AttributeError: 'NoneType' object has no attribute
> 'terminalSize'
>
> This may just be a consequence of the first one, so I'd try resolving the
> first one before looking more at this.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070808/497bc46a/attachment.html>

From ladaan at iptel.org  Wed Aug  8 09:58:16 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 08 Aug 2007 17:58:16 +0200
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>	<46B9A4CD.3030409@iptel.org>
	<a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
Message-ID: <46B9E818.40909@iptel.org>

Thank you for your help.
Well, I'm trying to get into the problem step by step so please receive 
my apologies about not so professional approach
to the problem.

I have following code below with a few problems.

1) I need to call getServerResponse of SIP servers for given list 
domains periodically.
    I have tried to use callLater method but probably at wrong places.
This way it runs only once. In the future it should be at least every 5 
minutes.

2)
In my code is something wrong.
I get the Server response but also following error.

Traceback (most recent call last):
 File 
"/home/data/iptel_summer_2007/sipcraft1/src/sipcraft/multideferred.py", 
line 46, in ?
   reactor.run()
 File "/usr/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 220, in run
   self.mainLoop()
 File "/usr/lib/python2.4/site-packages/twisted/internet/posixbase.py", 
line 228, in mainLoop
   self.runUntilCurrent()
--- <exception caught here> ---
 File "/usr/lib/python2.4/site-packages/twisted/internet/base.py", line 
533, in runUntilCurrent
   f(*a, **kw)
 File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 
239, in callback
   self._startRunCallbacks(result)
 File "/usr/lib/python2.4/site-packages/twisted/internet/defer.py", line 
290, in _startRunCallbacks
   raise AlreadyCalledError
twisted.internet.defer.AlreadyCalledError:




----------------------------- code ---------------------------------


from twisted.internet import reactor, defer, threads

from siptest import siptest_f
from twisted.internet.threads import deferToThread


test_opts = 
{'username':'test','transport':'udp','localport':'5085','password':'test'}
domain = ['sip.1und1.de', 'sip.babble.net']

class Getter:
     def gotResults(self, domain, test_opts):
             if len(domain) != 0:
           self.d.callback(siptest_f(domain, test_opts))
       else:
           self.d.errback(ValueError("You used an odd number!"))

   def _print(self, r, domain):
             return domain, r
       def getServerResponse(self, domain, test_opts):
                     self.d = threads.deferToThread(self.gotResults, 
domain, test_opts)
       self.d.addCallback(self._print, domain)
       return self.d

def printData(d):
   print d

def printError(failure):
   import sys
   sys.stderr.write(str(failure))

def test():
   for dom in domain:
       g = Getter()
       d = g.getServerResponse(dom, test_opts)
       d.addCallback(printData)
       d.addErrback(printError)

if __name__ == '__main__':
   test()
   reactor.run()
 




From p.mayers at imperial.ac.uk  Wed Aug  8 15:21:33 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 08 Aug 2007 22:21:33 +0100
Subject: [Twisted-Python] locking threads when deferToThread is used
In-Reply-To: <46B9E818.40909@iptel.org>
References: <20070808103136.4947.2032819735.divmod.quotient.20151@ohm>
	<46B9A4CD.3030409@iptel.org>
	<a0839b890708080527u3d785b5bp74fbe80c38acc1b5@mail.gmail.com>
	<46B9E818.40909@iptel.org>
Message-ID: <1186608093.7592.2.camel@localhost.localdomain>


> class Getter:
>      def gotResults(self, domain, test_opts):
>        if len(domain) != 0:
>            self.d.callback(siptest_f(domain, test_opts))
>        else:
>            self.d.errback(ValueError("You used an odd number!"))


gotResults is inside a thread, and you're touching the deferred. Don't.
Just do this:

class MyWeirdTester:
  def gotResults(...):
    if domain:
      return siptest_f(domain, test_opts)
    raise ValueError("you used an odd number")

  def getServerResponse(...):
    d = deferToThread(self.gotResults, ...)
    d.addCallback(self._print, ...)
    return d






From jml at mumak.net  Wed Aug  8 21:26:27 2007
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 9 Aug 2007 13:26:27 +1000
Subject: [Twisted-Python] Running twisted.trial unittests using nose
In-Reply-To: <20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
References: <22BCE002-01F3-4C9A-BBAF-D35D80335B93@gmail.com>
	<20070806132045.21185.1297226033.divmod.xquotient.195@joule.divmod.com>
	<20070806141718.GL22324@steerpike.home.puzzling.org>
	<20070807031520.21185.1803443590.divmod.xquotient.348@joule.divmod.com>
Message-ID: <d06a5cd30708082026k1a4928e8y8ef629afe3be2c50@mail.gmail.com>

On 8/7/07, glyph at divmod.com <glyph at divmod.com> wrote:
> Multiple reactors should, indeed must, eventually be supported.  It
> would be nice if someone who really wanted it would implement it though,
> instead of just talking about it ;).

Speaking as someone who really wants it, talks about it and is yet to
implement it, I agree.

It would be nice.

jml



From schettino72 at gmail.com  Thu Aug  9 03:09:20 2007
From: schettino72 at gmail.com (Eduardo Schettino)
Date: Thu, 9 Aug 2007 14:39:20 +0530
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
Message-ID: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>

Hi,

 Is there an asynchronous wrapper for local file system operation
(i.e. write a file to disk)?
 I was looking for something like what twisted.enterprise.adbapi do to
database access.
 And I guess using deferToThread is not the right approach for I/O operations.

Regards,
  Eduardo



From thostrup at gmail.com  Thu Aug  9 03:58:07 2007
From: thostrup at gmail.com (Henrik Thostrup Jensen)
Date: Thu, 9 Aug 2007 11:58:07 +0200
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
In-Reply-To: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
Message-ID: <f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>

Hi

On 8/9/07, Eduardo Schettino <schettino72 at gmail.com> wrote:

>
> Is there an asynchronous wrapper for local file system operation
> (i.e. write a file to disk)?


I don't think there is anything that works out of the box. I think there is
a python wrapper for posix aio somewhere, but AFAIK it is not integrated
into twisted in any way.

And I guess using deferToThread is not the right approach for I/O
> operations.
>

Usually writes take _very_ little time. The data is only copied to kernel
space and control is returned. The data is then written to disk later.
Reading will probably be a bit more problematic, but it will still take
little time compared to (common) network IO.

I suggest starting with just doing writes and reads directly and if it
becomes a problem, then start to solve it. You can create a small file
wrapper which returns a defer (just use return defer.succeed() and then
change the implementation if it becomes necessary.

-- 
   - Henrik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070809/59224403/attachment.html>

From ladaan at iptel.org  Thu Aug  9 06:42:50 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Thu, 09 Aug 2007 14:42:50 +0200
Subject: [Twisted-Python] returning value after addCallback
Message-ID: <46BB0BCA.8050000@iptel.org>

Hi,
you could tell me that I should stop programming since I don't know 
properly OOP but
I quite need to sort out this problem.
Here is another piece of code I have problem with.
Please be patient with me.

Where is mistake in my code. It is not returning any reasonable result.

Thank you for help.
Lada

-------------------------------------- code 
-------------------------------------------------

from twisted.internet import reactor, defer, threads

from siptest import siptest_f


test_opts = 
{'username':'test','transport':'udp','localport':'5085','password':'test'}
domain = ['sip.1und1.de', 'sip.babble.net']

        
class PingTracker:
   def __init__(self):
       self.dns = None
       self.sip = None
       self.ping = None
    
   def gotSipServerResults(self, domain, test_opts):
            
       if domain:
           return siptest_f(domain, test_opts)
       raise ValueError("Error occured")
     
   def checkSIP(self, domain, test_opts):
           
       return threads.deferToThread(self.gotSipServerResults, domain, 
test_opts)

   def check(self, host, test_opts):
       checks = []
       #checks.append(checkDNS().addCallback(self.setDNSResult))
       checks.append(self.checkSIP(host, 
test_opts).addCallback(self.setSIPResult))
       #checks.append(checkPing().addCallback(self.setPingResult))
       return defer.gatherResults(checks)

   def setDNSResult(self, result):
       self.dns = result

   def setSIPResult(self, result):
       self.sip = result
   
   def setPingResult(self, result):       
       self.ping = result
   
   def SipCallback(self):
       print self.sip

test = PingTracker()
d = test.check(domain[0], test_opts)

print d  # this returns Deferred...

test.SipCallback()   # this returns None


reactor.run()



From p.mayers at imperial.ac.uk  Thu Aug  9 09:11:45 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 09 Aug 2007 16:11:45 +0100
Subject: [Twisted-Python] returning value after addCallback
In-Reply-To: <46BB0BCA.8050000@iptel.org>
References: <46BB0BCA.8050000@iptel.org>
Message-ID: <1186672305.30144.9.camel@doorstop.net.ic.ac.uk>


> 
> test = PingTracker()
> d = test.check(domain[0], test_opts)
> 
> print d  # this returns Deferred...
> 
> test.SipCallback()   # this returns None

Yes, because no Twisted code has run yet

> 
> 
> reactor.run()

...because you haven't started the reactor.

I don't think you properly understand how Twisted works. Your code is
executed in response to events (packets being received, timers expiring,
reactor startup/shutdown events). The reactor runs the event loop.






From schettino72 at gmail.com  Thu Aug  9 22:24:06 2007
From: schettino72 at gmail.com (Eduardo Schettino)
Date: Fri, 10 Aug 2007 09:54:06 +0530
Subject: [Twisted-Python] non-blocking interface for local file system
	operations
In-Reply-To: <f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
	<f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
Message-ID: <e24a65c90708092124l6e55b53ag28e14f1c049c13df@mail.gmail.com>

Hi Henrik,

  Thanks for the information. It was really helpful. I was thinking
that my IO operations would be an issue. I will take your suggestion
and do IO directly by now.

Regards,
  Eduardo

On 8/9/07, Henrik Thostrup Jensen <thostrup at gmail.com> wrote:
> Hi
>
> On 8/9/07, Eduardo Schettino <schettino72 at gmail.com> wrote:
>
> >
> > Is there an asynchronous wrapper for local file system operation
> > (i.e. write a file to disk)?
>
> I don't think there is anything that works out of the box. I think there is
> a python wrapper for posix aio somewhere, but AFAIK it is not integrated
> into twisted in any way.
> > And I guess using deferToThread is not the right approach for I/O
> operations.
> >
>
> Usually writes take _very_ little time. The data is only copied to kernel
> space and control is returned. The data is then written to disk later.
> Reading will probably be a bit more problematic, but it will still take
> little time compared to (common) network IO.
>
> I suggest starting with just doing writes and reads directly and if it
> becomes a problem, then start to solve it. You can create a small file
> wrapper which returns a defer (just use return defer.succeed() and then
> change the implementation if it becomes necessary.
>
> --
>    - Henrik
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From Marcin.Kasperski at softax.com.pl  Fri Aug 10 03:42:24 2007
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Fri, 10 Aug 2007 11:42:24 +0200
Subject: [Twisted-Python] Re: non-blocking interface for local file system
	operations
References: <e24a65c90708090209g756fc929wcc8a240e945256a5@mail.gmail.com>
	<f33a4da20708090258k1ba7a9ayadefa96498cd3ac5@mail.gmail.com>
	<e24a65c90708092124l6e55b53ag28e14f1c049c13df@mail.gmail.com>
Message-ID: <87bqdfk9of.fsf@cauchy.softax.local>

>   Thanks for the information. It was really helpful. I was thinking
> that my IO operations would be an issue. I will take your suggestion
> and do IO directly by now.

One thing to consider if it really turns out to be a problem
is to replace plain files with database.

Comparing performance of file access with performance of database
access is large and non-trivial topic, but there are usage schemes
where databases win. And there are asynchronous drivers, like
pgasync, available.





From andy at thecablelounge.com  Fri Aug 10 11:22:26 2007
From: andy at thecablelounge.com (Andy Gayton)
Date: Fri, 10 Aug 2007 10:22:26 -0700
Subject: [Twisted-Python] Job offer for Python Lead, LA or the Bay Area
Message-ID: <46BC9ED2.60509@thecablelounge.com>

DigiSynd is an experienced team of Los Angeles-based digital pioneers 
with a unique vision: to create, produce, syndicate, and market online 
entertainment.

DigiSynd uses time-honored storytelling techniques and valuable lessons 
from traditional media, but applies them in a medium of online 
communities, virtual experiences, interactivity and user-generated content.

They're based in LA, Burbank - across the street from the Warner Bros Lot.

Digisynd are seeking a seasoned python engineer. Ideally you:

     * live and breath python
     * have exceptional SQL skills
     * have experience with capturing, and reporting off large datasets 
in real time
     * have extensive experience with web services - both creating and 
utilizing

You should be based in LA, or in the bay area.  This is a great 
opportunity to put together and lead a team of developers, while working 
in a very interesting space.

If interested, send your resume through to jobs14 at digisynd.com

I'm trekking out to the SuperHappyDevHouse at Los Gatos tomorrow.  If 
you know anyone who is going that might be interested, just tell them to 
grab me.

cheers!
Andy.



From jml at mumak.net  Sat Aug 11 20:27:15 2007
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 12 Aug 2007 12:27:15 +1000
Subject: [Twisted-Python] Specifications
Message-ID: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>

Hello all,

I've seen a couple of specifications on the Twisted wiki referred to
in Twisted tickets. This is great. I'm all for specs, particularly
when they are there simply to help clarify ideas and provoke
discussion.

However, if we are going to have more than one spec, it'd be nice to
have a list of them somewhere. It would also be very helpful if specs
had some sort of status.

Launchpad provides something like this at
https://blueprints.launchpad.net/twisted.

jml



From exarkun at twistedmatrix.com  Sat Aug 11 22:05:04 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 12 Aug 2007 04:05:04 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1186891504.68.1690773430@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-05 through 2007-08-12
Bugs opened: 10    Bugs closed: 9  Total open bugs: 1010 (+1)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +2  |Highest:  -4          |Conch:  +1             
|Enhancement:  -1  |High:     -1          |Core:   +2             
|Task:         +1  |Normal:   +7          |Lore:   +1             
                                          |Mail:   -1             
                                          |Names:  +0             
                                          |Trial:  +0             
                                          |Vfs:    +2             
                                          |Words:  -3             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2775] Crunchy Output (opened by tehminkeh)
    enhancement     lore       http://twistedmatrix.com/trac/ticket/2775

[#2783] twisted.internet.task.Clock does not implement IReactorTime (opened by dreid)
    defect          core       http://twistedmatrix.com/trac/ticket/2783

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm) (CLOSED, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

                    ===== Normal =====
[#2776] Define a uniform way to make objects immutable. (opened by ralphm)
    task            core       http://twistedmatrix.com/trac/ticket/2776

[#2777] Fix SRVConnector to deal with bad nameservers. (opened by ralphm)
    enhancement     names      http://twistedmatrix.com/trac/ticket/2777

[#2778] TestCase instances re-used for test method runs when trial is invoked with --until-failure (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2778

[#2779] os.setsid throws exception in PTYProcess on AIX (opened by chrispritchard)
    defect          core       http://twistedmatrix.com/trac/ticket/2779

[#2780] Remove vfs.pathutils (opened by cablehead)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2780

[#2781] Just use producers and consumers for the vfs ftp adapter (opened by cablehead)
    defect          vfs        http://twistedmatrix.com/trac/ticket/2781

[#2782] Channel is not notified, if Connection fails between openChannel and ssh_CHANNEL_OPEN_CONFIRM (opened by cebewee)
    defect          conch      http://twistedmatrix.com/trac/ticket/2782



Closed Bugs
______________________
                    ===== Highest =====
[#2771] exceptionFromStreamError fails to parse errors correctly (opened by ralphm, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2771

[#2290] nameservers resolved in wrong order (opened by ilia, closed by exarkun, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/2290

[#1917] Typo in twisted.mail.mail.DomainWithDefaultDict (opened by therve, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1917

[#2773] t.w.p.j.xmlstream.toResponse fails on stanzas without id attribute (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2773

[#2770] Allow JIDs to be used as key in dicts (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2770

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2772] Move XML stream header processing to respective authenticators (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2772

[#2757] give TrafficLoggingFactory a public API to reset its counter (opened by exarkun, closed by therve, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2757

                    ===== High =====
[#1630] trial test hangs if using the twisted enterprise connection pool (opened by harshaw, closed by exarkun, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1630



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2783] twisted.internet.task.Clock does not implement IReactorTime (since 2007-08-11 18:14:57).

Mean open ticket age: 500 days, 21:14:39.812723.
Median: 391 days, 8:26:03.380050.
Standard deviation: 395 days, 15:09:23.171000.
Interquartile range: 483 days, 5:01:00.

Mean time between ticket creation and ticket resolution: 119 days, 14:46:10.149769.
Median: 14 days, 3:27:47.
Standard deviation is 222 days, 21:59:34.405886.
The interquartile range is 125 days, 12:43:31.

Mean time spent in review: 60 days, 17:22:38.145920.
Median: 4 days, 0:03:10.
Standard deviation: 132 days, 8:20:06.481949.
Interquartile range: 28 days, 13:23:16.

Mean number of times a ticket is reviewed: 1.85922330097.
Median: 1
Standard deviation: 1.4260364579.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    21 unique ticket reporters
    10 unique ticket reviewers
    5 unique ticket resolvers
In the last 24 weeks,
    86 unique ticket reporters
    14 unique ticket reviewers
    17 unique ticket resolvers
In the last 48 weeks,
    158 unique ticket reporters
    21 unique ticket reviewers
    26 unique ticket resolvers




From ladaan at iptel.org  Sun Aug 12 03:01:42 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Sun, 12 Aug 2007 11:01:42 +0200
Subject: [Twisted-Python] returning value after addCallback
In-Reply-To: <1186672305.30144.9.camel@doorstop.net.ic.ac.uk>
References: <46BB0BCA.8050000@iptel.org>
	<1186672305.30144.9.camel@doorstop.net.ic.ac.uk>
Message-ID: <46BECC76.8040507@iptel.org>

Phil Mayers wrote:
>> test = PingTracker()
>> d = test.check(domain[0], test_opts)
>>
>> print d  # this returns Deferred...
>>
>> test.SipCallback()   # this returns None
>>     
>
> Yes, because no Twisted code has run yet
>
>   
>> reactor.run()
>>     
>
> ...because you haven't started the reactor.
>
>   
So how should I run reactor then ?
Yes, I have difficulties to get on the right "twisted track".
I've seen many examples but probably didn't grasp the way how it works.

Lada
> I don't think you properly understand how Twisted works. Your code is
> executed in response to events (packets being received, timers expiring,
> reactor startup/shutdown events). The reactor runs the event loop.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   




From glyph at divmod.com  Sun Aug 12 09:09:38 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 12 Aug 2007 15:09:38 -0000
Subject: [Twisted-Python] Specifications
In-Reply-To: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>
References: <d06a5cd30708111927n6c2426b2p12e116a3de203680@mail.gmail.com>
Message-ID: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>

On 02:27 am, jml at mumak.net wrote:
>I've seen a couple of specifications on the Twisted wiki referred to
>in Twisted tickets. This is great. I'm all for specs, particularly
>when they are there simply to help clarify ideas and provoke
>discussion.

>However, if we are going to have more than one spec, it'd be nice to
>have a list of them somewhere. It would also be very helpful if specs
>had some sort of status.

>Launchpad provides something like this at
>https://blueprints.launchpad.net/twisted.

Frankly, I don't understand the point of specifications as such.  In my 
worldview, the specification is simply a ticket's description.  The only 
reason we'd need a separate "specifications" tracker as opposed to 
"tickets" is that trac's support for attachments and statuses is 
somewhat weak.  The only reason to use wiki pages rather than ticket 
descriptions is because ticket descriptions are unversioned.  On the 
other hand, I have found that the lack of discussion on wiki pages is an 
equally problematic feature.

Twisted's existing list of tasks (trac tickets) is already completely 
unmanageable due to the disparity between the number of people filing 
tickets and the number of people triaging them.  I would definitely 
prefer it if we did not start using another list of tasks (launchpad 
"blueprints", launchpad tickets) until we have some way to manage what 
we already have.



From exarkun at divmod.com  Sun Aug 12 10:34:30 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 12 Aug 2007 12:34:30 -0400
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>
Message-ID: <20070812163430.4947.942840888.divmod.quotient.21425@ohm>

On Sun, 12 Aug 2007 15:09:38 -0000, glyph at divmod.com wrote:
>On 02:27 am, jml at mumak.net wrote:
>>I've seen a couple of specifications on the Twisted wiki referred to
>>in Twisted tickets. This is great. I'm all for specs, particularly
>>when they are there simply to help clarify ideas and provoke
>>discussion.
>
>>However, if we are going to have more than one spec, it'd be nice to
>>have a list of them somewhere. It would also be very helpful if specs
>>had some sort of status.
>
>>Launchpad provides something like this at
>>https://blueprints.launchpad.net/twisted.
>
>Frankly, I don't understand the point of specifications as such.  In my 
>worldview, the specification is simply a ticket's description.  The only 
>reason we'd need a separate "specifications" tracker as opposed to "tickets" 
>is that trac's support for attachments and statuses is somewhat weak.  The 
>only reason to use wiki pages rather than ticket descriptions is because 
>ticket descriptions are unversioned.  On the other hand, I have found that 
>the lack of discussion on wiki pages is an equally problematic feature.

Personally, I don't want discussion features for the things for which I have
been using specification wiki pages.  I can have discussions with people in
meatspace or on IRC.  I want the *outcome* of a discussion on the page.

>
>Twisted's existing list of tasks (trac tickets) is already completely 
>unmanageable due to the disparity between the number of people filing 
>tickets and the number of people triaging them.  I would definitely prefer 
>it if we did not start using another list of tasks (launchpad "blueprints", 
>launchpad tickets) until we have some way to manage what we already have.

Chris and I have been using wiki pages for this primarily as a shared work
space to hash out ideas.  None of the topics we've approached has actually
been implemented yet, so I'm not really sure what the next phase of this
looks like.  However, I would expect that once there is some agreement about
a particular specification, whatever necessary tickets will be created and
they will live out the normal ticket life cycle.  Whether the specification
wiki pages live on past the implementation task isn't something I've thought
a lot about.  Of the top of my head, I don't see any reason for them to, but
I also can't think of too many compelling reasons to delete them, either.

To respond to one of jml's points, though, here is a list of the
specifications which currently exist:

  http://twistedmatrix.com/trac/wiki/TitleIndex

Just search for "Specification" ;)

In response to the 

Jean-Paul



From glyph at divmod.com  Sun Aug 12 14:48:07 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 12 Aug 2007 20:48:07 -0000
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812163430.4947.942840888.divmod.quotient.21425@ohm>
References: <20070812150938.21185.1841640885.divmod.xquotient.541@joule.divmod.com>
	<20070812163430.4947.942840888.divmod.quotient.21425@ohm>
Message-ID: <20070812204807.21185.1648981205.divmod.xquotient.731@joule.divmod.com>

On 04:34 pm, exarkun at divmod.com wrote:
>On Sun, 12 Aug 2007 15:09:38 -0000, glyph at divmod.com wrote:
>>On 02:27 am, jml at mumak.net wrote:

>Personally, I don't want discussion features for the things for which I 
>have
>been using specification wiki pages.  I can have discussions with 
>people in
>meatspace or on IRC.  I want the *outcome* of a discussion on the page.

I can see the value of that.  What I'm referring to is the synergy 
between, for example, the wikipedia "talk" page and the main entry page. 
There's value in discussion, and there's value in viewing only the 
outcome so as not to be confused by the discussion.  Trac has a nod to 
this in that tickets have both a description and a comments section; the 
problem with this being the aforementioned lack of versioning on the 
comments section.

In other words the fact that we even need to have this discussion is 
entirely a problem with the tools in question, not a problem with the 
idea of specifications.  Specifications are *great*.  I wish we had 
specifications for everything.  Tickets (at least for small things) 
should ideally always contain or refer to a full specification of what 
is being done and why.
>Chris and I have been using wiki pages for this primarily as a shared 
>work
>space to hash out ideas.  None of the topics we've approached has 
>actually
>been implemented yet, so I'm not really sure what the next phase of 
>this
>looks like.  However, I would expect that once there is some agreement 
>about
>a particular specification, whatever necessary tickets will be created 
>and
>they will live out the normal ticket life cycle.  Whether the 
>specification
>wiki pages live on past the implementation task isn't something I've 
>thought
>a lot about.  Of the top of my head, I don't see any reason for them 
>to, but
>I also can't think of too many compelling reasons to delete them, 
>either.

I don't have any problem with this, either.  Any kind of web-space is 
appropriate for this kind of forming-ideas planning, and the Twisted 
wiki particularly so, for Twisted features.

Once the specification is relatively fixed (and maybe the process of 
fixing a specification so that is "officially" agreed upon needs some 
discussion) then just having a link in the ticket's description to the 
wikiword of its specification would also be pretty good.

The thing I'm concerned about is that once we start having reports of 
open specifications, statuses for them, owners, assignees, and so on, 
it's going to be a parallel tracker with separate priorities and 
workflow.  I don't even object to *that* in principle, it might make 
sense on a project with more resources (more "management overhead" in 
particular).  I just can't see us coping with it now.

Sorry if this all seems overly wordy, I just want to make sure it's 
clear how narrow the scope of my objection is :).  I don't want to 
discourage anyone from planning, specifying, writing down things about 
Twisted in any format they so choose - but I am concerned about that 
process creating more work.
>To respond to one of jml's points, though, here is a list of the
>specifications which currently exist:
>
>  http://twistedmatrix.com/trac/wiki/TitleIndex
>
>Just search for "Specification" ;)

And in closing, I don't object to this informal mechanism either :).



From exarkun at divmod.com  Sun Aug 12 15:49:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 12 Aug 2007 17:49:27 -0400
Subject: [Twisted-Python] Specifications
In-Reply-To: <20070812204807.21185.1648981205.divmod.xquotient.731@joule.divmod.com>
Message-ID: <20070812214927.4947.1581930272.divmod.quotient.21473@ohm>

On Sun, 12 Aug 2007 20:48:07 -0000, glyph at divmod.com wrote:
> [snip]
>
>The thing I'm concerned about is that once we start having reports of open 
>specifications, statuses for them, owners, assignees, and so on, it's going 
>to be a parallel tracker with separate priorities and workflow.  I don't 
>even object to *that* in principle, it might make sense on a project with 
>more resources (more "management overhead" in particular).  I just can't see 
>us coping with it now.

Okay.  I don't want any reports or statuses or anything for specifications,
so I think we're in agreement.

Jean-Paul



From natester at gmail.com  Mon Aug 13 15:50:04 2007
From: natester at gmail.com (Nathaniel Haggard)
Date: Mon, 13 Aug 2007 15:50:04 -0600
Subject: [Twisted-Python] Where to start: log reader/analysis
In-Reply-To: <20070806114953.4947.487566896.divmod.quotient.19454@ohm>
References: <8b93c05a0708060157j2ffa75c1u170aecaea5a36f6c@mail.gmail.com>
	<20070806114953.4947.487566896.divmod.quotient.19454@ohm>
Message-ID: <4adac7a30708131450g7879608fh49d26074d323512e@mail.gmail.com>

Like this?

from twisted.internet import task,reactor,abstract
from twisted.protocols import basic
import os

class FileFollowerTransport(object):
    """Iterate through a file while it is updated.

    """

    interval = 1

    def __init__(self, filename, interval=None):
        self.filename = filename
        self.interval = interval or self.interval
        self.stat = None
        self.offset = 0
        self.lines = []
        self.lc = task.LoopingCall(self.follow)

    #
    # File following

    def run(self):
        self.lc.start(self.interval)

    def follow(self):
        if self.hasChanged():
            data = self.readChange()
            if data:
                self.protocol.dataReceived(data)

    def hasChanged(self):
        stat = os.stat(self.filename)
        if stat != self.stat:
            self.stat = stat
            return True
        return False

    def readChange(self):
        file = open(self.filename)
        file.seek(self.offset)
        data = file.read()
        self.offset = file.tell()
        file.close()
        return data

class stuby(basic.LineReceiver):

    def dataReceived(self, data):
        print data


if __name__ == '__main__':
    l = stuby()
    f = FileFollowerTransport('test')
    f.protocol = l
    f.run()
    l.makeConnection(f)
    reactor.run()



On 8/6/07, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>
> On Mon, 6 Aug 2007 10:57:19 +0200, Yoann Aubineau <
> yoann.aubineau at wengo.com> wrote:
> >Hi Andrew,
> >
> >I wrote a class that follows a file (eg. log file) and provides an
> iterator
> >to walk through it. Don't know if it may be of any use for you (or
> others).
>
> Hi Yoann, thanks for sharing.
>
> >
> >class FileFollower(object):
> >    """Iterate through a file while it is updated.
> >
> >    >>> file = FileFollower("/tmp/testfile")
> >    >>> file.interval = 5
> >    >>> for line in file:
> >    ...     print line
> >    """
> >
> >    interval = 1
> >
> >    def __init__(self, filename, interval=None):
> >        self.filename = filename
> >        self.interval = interval or self.interval
> >        self.stat = None
> >        self.offset = 0
> >        self.lines = []
> >        self.running = True
> >
> >    #
> >    # File following
> >
> >    def follow(self):
> >        while self.running:
> >            if self.hasChanged():
> >                data = self.readChange()
> >                if data:
> >                    self.dataReceived(data)
> >                    break
> >            time.sleep(self.interval)
> >
> >    def hasChanged(self):
> >        stat = os.stat(self.filename)
> >        if stat != self.stat:
> >            self.stat = stat
> >            return True
> >        return False
> >
> >    def readChange(self):
> >        file = open(self.filename)
> >        file.seek(self.offset)
> >        data = file.read()
> >        self.offset = file.tell()
> >        file.close()
> >        return data
> >
> >    #
> >    # Data buffering
> >
> >    def dataReceived(self, data):
> >        lines = data.split(os.linesep)
> >        lines = lines[:-1]
> >        for line in lines:
> >            self.lineReceived(line)
> >
> >    def lineReceived(self, line):
> >        self.lines.append(line)
> >
> >    #
> >    # Iterator implementation
> >
> >    def __iter__(self):
> >        return self
> >
> >    def next(self):
> >        if not self.lines:
> >            self.follow()
> >        line = self.lines.pop(0)
> >        return line
> >
>
> In order to make this class more usable within a Twisted application, I'd
> make a few suggestions:
>
> Separate the transport from the protocol.  All of the methods in the area
> commented "file following" are basically transport methods: they know how
> to get the underlying bytes (by polling and eventually reading).  The
> protocol implementation is basically the dataReceived and lineReceived
> methods.  With separation between the transport and the protocol, you
> don't even need to implement these, since you can just use LineReceiver
> from twisted.protocols.basic.
>
> Do the polling in a cooperative way.  Using an infinite for loop and a
> time.sleep call has the consequence of tying up an entire thread.  This
> means nothing else can happen unless you run the follow method of this
> class in a new, dedicated thread.  If you use the reactor to schedule
> the checks instead, then this can be used alongside other Twisted code
> without having to deal with threading.  twisted.internet.task.LoopingCall
> might be of particular interest.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070813/6c74965c/attachment.html>

From andreww at datanet.ab.ca  Wed Aug 15 04:13:16 2007
From: andreww at datanet.ab.ca (Andrew Warkentin)
Date: Wed, 15 Aug 2007 04:13:16 -0600
Subject: [Twisted-Python] Best way to write a modularized proxy?
Message-ID: <46C2D1BC.8070807@datanet.ab.ca>

I am writing a modular multi-protocol proxy (initially for HTTP, and 
later HTTPS and possibly FTP as well) using Twisted. It will consist of 
a small core that handles initialization and loading of modules, a 
module for each protocol (which will consist of a part that accepts 
connections and a part that connects to the remote server), and several 
"filter" modules (which will be inserted in a "stack" between the two 
halves of the protocol module) for things like caching and filtering. 
Would there be a better way to structure it?

Would the best way to handle the modules be to write a ServerFactory 
subclass that wraps the stack of modules? I understand the basic 
concepts behind Twisted, but am not totally familiar with the API, so I 
am not exactly sure what is the best way to do things.



From ldanielburr at mac.com  Wed Aug 15 04:55:30 2007
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Wed, 15 Aug 2007 05:55:30 -0500
Subject: [Twisted-Python] Best way to write a modularized proxy?
In-Reply-To: <46C2D1BC.8070807@datanet.ab.ca>
References: <46C2D1BC.8070807@datanet.ab.ca>
Message-ID: <op.tw3kmsg73oj628@l-daniel-burrs-computer.local>

Hi Andrew,

On Wed, 15 Aug 2007 05:13:16 -0500, Andrew Warkentin  
<andreww at datanet.ab.ca> wrote:

> I am writing a modular multi-protocol proxy (initially for HTTP, and  
> later HTTPS and possibly FTP as well) using Twisted. It will consist of  
> a small core that handles initialization and loading of modules, a  
> module for each protocol (which will consist of a part that accepts  
> connections and a part that connects to the remote server), and several  
> "filter" modules (which will be inserted in a "stack" between the two  
> halves of the protocol module) for things like caching and filtering.  
> Would there be a better way to structure it?
>

Replace the word "module" with IService, and I think your design seems
reasonable.

> Would the best way to handle the modules be to write a ServerFactory  
> subclass that wraps the stack of modules? I understand the basic  
> concepts behind Twisted, but am not totally familiar with the API, so I  
> am not exactly sure what is the best way to do things.
>

I'd write an IService implementation for each type of proxy I wanted
to deploy, hang them all off of a MultiService, and go from there.

Hope this helps,

L. Daniel Burr



From daniel at keystonewood.com  Wed Aug 15 07:26:26 2007
From: daniel at keystonewood.com (Daniel Miller)
Date: Wed, 15 Aug 2007 09:26:26 -0400
Subject: [Twisted-Python] Handling PBConnectionLost errors
In-Reply-To: <6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>
References: <99A576C3-FE5E-4AE3-A48F-1720C9ECA16B@keystonewood.com>
	<E6C8DE88-2B46-42D4-A705-E7D621DD7653@keystonewood.com>
	<m2wswl3ykx.fsf@valheru.db3l.homeip.net>
	<6DA04B2A-6D21-44CC-BD8A-07432CAABB99@keystonewood.com>
Message-ID: <983850FE-D680-4B3A-A70B-2F1F6FDE68B4@keystonewood.com>

David, Nicola and Phil,

Thanks very much for your feedback to my questions on this discussion  
thread. I have devised a working solution. Failed remote method calls  
due to dropped connections now seems to be a thing of the past (knock  
on wood...). I have attached a file that contains my "RecallClient"  
and "RecallServer" implementations as well as a very short example to  
show how they can be used (the usage examples are untested). Note  
that this implementation is tailored to my specific needs, and  
therefore is definitely not a general solution. Here are some notable  
limitations (there may be more):

1. The client is tightly coupled to the pb.Root object.
2. "Posting" server methods cannot return data structures that  
contain deferreds (e.g. a list of deferreds). I'm not sure if that's  
even supported by PB anyway? I haven't tried it so I don't know.

However, maybe it will be useful to someone else? I'd be happy to  
hear your feedback if you decide to take a look at it.

~ Daniel

-------------- next part --------------
A non-text attachment was scrubbed...
Name: recallclientserver.py
Type: text/x-python-script
Size: 5019 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070815/3cd8384b/attachment-0002.bin>
-------------- next part --------------


From ladaan at iptel.org  Wed Aug 15 10:50:23 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 15 Aug 2007 18:50:23 +0200
Subject: [Twisted-Python] threads monitoring
Message-ID: <46C32ECF.40902@iptel.org>

Hello,
How can I monitor the number of created threads when I use just function 
deferToThreds in my code?

Could you give me an example, please?

If I do following:   ThreadPool.dumpStats()

I get

TypeError: unbound method dumpStats() must be called with ThreadPool 
instance as first argument (got nothing instead)

Here I understand I have to make an instance of ThreadPool, but if I 
just use deferToThreads from threads module
I'm not sure how to accomplish it.

Thanks,
Ladislav



From andreas at kostyrka.org  Wed Aug 15 11:10:12 2007
From: andreas at kostyrka.org (Andreas Kostyrka)
Date: Wed, 15 Aug 2007 19:10:12 +0200
Subject: AW: [Twisted-Python] threads monitoring
Message-ID: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>

Well, I'm not at the keyboard, but you'll probably need to take a look at the source code which threadpool instance is used by deferToThread.

Andreas

-- Ursprüngl. Mitteil. --
Betreff:	[Twisted-Python] threads monitoring
Von:	Ladislav Andel <ladaan at iptel.org>
Datum:		15.08.2007 16:53

Hello,
How can I monitor the number of created threads when I use just function 
deferToThreds in my code?

Could you give me an example, please?

If I do following:   ThreadPool.dumpStats()

I get

TypeError: unbound method dumpStats() must be called with ThreadPool 
instance as first argument (got nothing instead)

Here I understand I have to make an instance of ThreadPool, but if I 
just use deferToThreads from threads module
I'm not sure how to accomplish it.

Thanks,
Ladislav

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From ladaan at iptel.org  Wed Aug 15 11:31:45 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 15 Aug 2007 19:31:45 +0200
Subject: AW: [Twisted-Python] threads monitoring
In-Reply-To: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>
References: <KPJWJqk30vdH.x2C4kjnF@heaven.kostyrka.org>
Message-ID: <46C33881.10106@iptel.org>

As I could see  there are 2 approaches.
1) deferToThread which calls callInThread method and reactor takes care 
of threads
2) or I can create an instance of ThreadPool and manage threads manually 
where I have to care of dispatching request
if I'm not mistaken.

So here it is but is there any answer to my original question?

Lada

Andreas Kostyrka wrote:
> Well, I'm not at the keyboard, but you'll probably need to take a look at the source code which threadpool instance is used by deferToThread.
>
> Andreas
>
> -- Ursprüngl. Mitteil. --
> Betreff:	[Twisted-Python] threads monitoring
> Von:	Ladislav Andel <ladaan at iptel.org>
> Datum:		15.08.2007 16:53
>
> Hello,
> How can I monitor the number of created threads when I use just function 
> deferToThreds in my code?
>
> Could you give me an example, please?
>
> If I do following:   ThreadPool.dumpStats()
>
> I get
>
> TypeError: unbound method dumpStats() must be called with ThreadPool 
> instance as first argument (got nothing instead)
>
> Here I understand I have to make an instance of ThreadPool, but if I 
> just use deferToThreads from threads module
> I'm not sure how to accomplish it.
>
> Thanks,
> Ladislav
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>   




From phil at bubblehouse.org  Wed Aug 15 11:50:33 2007
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 15 Aug 2007 13:50:33 -0400
Subject: [Twisted-Python] threads monitoring
In-Reply-To: <46C32ECF.40902@iptel.org>
References: <46C32ECF.40902@iptel.org>
Message-ID: <07233834-FC56-4472-A8A4-4495EFBB9096@bubblehouse.org>

On Aug 15, 2007, at 12:50 PM, Ladislav Andel wrote:

> Hello,
> How can I monitor the number of created threads when I use just  
> function deferToThreds in my code?
>
> Could you give me an example, please?
>
> If I do following:   ThreadPool.dumpStats()
>
> I get
>
> TypeError: unbound method dumpStats() must be called with  
> ThreadPool instance as first argument (got nothing instead)
>
> Here I understand I have to make an instance of ThreadPool, but if  
> I just use deferToThreads from threads module
> I'm not sure how to accomplish it.

If you're using the reactor in the usual fashion, you can grab its  
'threadpool' attribute.

         from twisted.internet import reactor
         if(reactor.threadpool):
             reactor.threadpool.dumpStats()

This attribute will be None util you've called one of the thread- 
related reactor methods.

-phil



From nayuhz at gmail.com  Wed Aug 15 20:32:28 2007
From: nayuhz at gmail.com (Yan Zhu)
Date: Thu, 16 Aug 2007 10:32:28 +0800
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
Message-ID: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>

hi all,
I read a text about twisted vs thread, who can tell mewhy Twsited is
efficiently in one thread?
especially, if clients require long-running processing above and beyond
socket calls, or in the multi-processor system?
look at this: http://kaishaku.org/twisted-vs-threads/

-- 
eSX
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070816/58006162/attachment.html>

From Andy at NewWorldElectric.com  Wed Aug 15 21:05:04 2007
From: Andy at NewWorldElectric.com (Andy Fundinger)
Date: Wed, 15 Aug 2007 23:05:04 -0400
Subject: [Twisted-Python] Cookies in Client?
Message-ID: <37d49ed40708152005r5175fd6fj5eb4023913471711@mail.gmail.com>

I'm trying to use twisted to drive a website with forms-based
authentication.  The target site is a php-based, so I need to grab and
return a PHPSESSIONID cookie to preserve the session.  Is there some twisted
support for that which I can hook into?

-Andy Fundinger

-- 
Blog:  http://channel3b.wordpress.com
Second Life Name:  Ciemaar Flintoff

#Python 3001:
from future import time.travel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070815/0ada34c1/attachment.html>

From radix at twistedmatrix.com  Wed Aug 15 21:31:08 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 15 Aug 2007 23:31:08 -0400
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
In-Reply-To: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
References: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
Message-ID: <60ed19d40708152031p51ee1f74scd9bbc5c03a7a97d@mail.gmail.com>

On 8/15/07, Yan Zhu <nayuhz at gmail.com> wrote:
>
> hi all,
> I read a text about twisted vs thread, who can tell mewhy Twsited is
> efficiently in one thread?
> especially, if clients require long-running processing above and beyond
> socket calls, or in the multi-processor system?
> look at this: http://kaishaku.org/twisted-vs-threads/



I recommend twisted.internet.threads.deferToThread.

Hope this helps,

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070815/018bdb29/attachment.html>

From hellojianwu at gmail.com  Wed Aug 15 22:58:32 2007
From: hellojianwu at gmail.com (jian wu)
Date: Wed, 15 Aug 2007 21:58:32 -0700
Subject: [Twisted-Python] why is Twsited efficiently in one thread? what
	about in multi-processor system?
In-Reply-To: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
References: <8ae5ea120708151932p38ee8a53tdb6683d2d216601b@mail.gmail.com>
Message-ID: <d81c17cd0708152158i3e7acabbk7e5e3450ce8d608e@mail.gmail.com>

Hi,

I think that your question can be answered in three parts:

1. who can tell me why Twsited is efficiently in one thread?

Assuming your "one thread" is actually referring to the Twisted reactor
thread handling IO event, you can take a look at a good
Java One 2007 Tech Session "Tricks and Tips With NIO Using
the Grizzly Framework" at:
http://developers.sun.com/learning/javaoneonline/j1sessn.jsp?sessn=TS-2992&yr=2007&track=5

"Tip #6: To Thread or not to Thread" started from Slide 61 actually tells
you which threading model has the best performance based on the
the benchmark did by Sun People.

Since both Java NIO and Python Twisted actually utilize the same
Socket Select/Poll mechanism for Non-blocking Network IO, hopefully
this presentation will answer your "one thread" question.

2. What is a fair benchmark for Non-blocking Networking Framework?

Any Non-blocking Networking Framework is at least trying to resolve
the Scalability Problem occurred when a server has high volume concurrent
network connections from hundreds and thousands of clients.

Usually, a good Non-blocking Networking Benchmark should measure
how a server will perform when the number of opened connections is
increasing from 100 to 1000 to ...

If you really want to find a good benchmark to measure the Non-blocking
Network Framework, you can take a look at a good blog entry "Apache Mina
and Twisted Matrix benchmarks" at:
  http://blog.bluendo.com/ff/mina-and-twisted-matrix-benchmarks

( Note: Apache Mina is a Java NIO Application Framework )

3. What about in multi-processor system?

Since Twisted does support reactor thread pool, this actually is
more general question: how python threading module will utilize/
benefit from the multi-core processor system?

And, you should be able to find plenty discussion at Python Mailing
list, such as "Dual Core outlook" at:
http://mail.python.org/pipermail/python-list/2006-February/366002.html

My three cents:-).

Jian

On 8/15/07, Yan Zhu <nayuhz at gmail.com> wrote:
> hi all,
> I read a text about twisted vs thread, who can tell mewhy Twsited is
> efficiently in one thread?
> especially, if clients require long-running processing above and beyond
> socket calls, or in the multi-processor system?
> look at this: http://kaishaku.org/twisted-vs-threads/
>
> --
> eSX
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>



From andreww at datanet.ab.ca  Thu Aug 16 06:45:58 2007
From: andreww at datanet.ab.ca (Andrew Warkentin)
Date: Thu, 16 Aug 2007 06:45:58 -0600
Subject: [Twisted-Python] Best way to write a modularized proxy?
In-Reply-To: <op.tw3kmsg73oj628@l-daniel-burrs-computer.local>
References: <46C2D1BC.8070807@datanet.ab.ca>
	<op.tw3kmsg73oj628@l-daniel-burrs-computer.local>
Message-ID: <46C44706.10202@datanet.ab.ca>

L. Daniel Burr wrote:

>> Would the best way to handle the modules be to write a ServerFactory  
>> subclass that wraps the stack of modules? I understand the basic  
>> concepts behind Twisted, but am not totally familiar with the API, so 
>> I  am not exactly sure what is the best way to do things.
>>
>
> I'd write an IService implementation for each type of proxy I wanted
> to deploy, hang them all off of a MultiService, and go from there.
>
What would be the best way to tie together the filter objects within the 
service? I would like the filter modules to have a common interface and 
have common code for handling the stack of filters.




From ladaan at iptel.org  Thu Aug 16 06:52:49 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Thu, 16 Aug 2007 14:52:49 +0200
Subject: [Twisted-Python] again deferToThreads
Message-ID: <46C448A1.1050103@iptel.org>

Hello,
I have a two functions which I run in one thread called via deferToThread.
There is function called siptest_f and function pingNode test.
siptest_f returns a dictionary and pingNode returns the average time out 
of 3 received packets.
Below is code I use. I run it through reactor event loop which is not 
shown here.
My problem is that the function on its own returns correct results but 
if use it within following code
I get always different results and mostly wrong.
There should probably be some way of locking but I'm not sure how to do 
it correctly.
If you have any other suggestions, there are welcomed.

Lada

------------------------------------------------------------------------

def serverTest(dns_res, index):
    """ Function for SIP testing """
   
    from twisted.internet import threads
    from siptest import siptest_f
    from icmp_ping2 import pingNode
#    import thread
   
   
    print "here will be siptest for ", dns_res
    #stdoutmutex = thread.allocate_lock()

    def test(dns_res, test_opts):
        if dns_res:
            icmpres =  pingNode(alive=0, timeout=1.0, ipv6=0, number=3, 
node=dns_res, flood=0, size=56)
            sipres = siptest_f(dns_res, test_opts)
       
           # stdoutmutex.acquire()  
            sipres['ICMP'] = icmpres
           # stdoutmutex.release()
           
            return sipres
        raise ValueError("Error occured")   
   
    def sipResult(d):

        print d
        #return d

    def printError(failure):
        print failure

    sd = threads.deferToThread(test, dns_res, test_opts)

    sd.addCallback(sipResult)
    sd.addErrback(printError)




From matusis at yahoo.com  Fri Aug 17 17:21:41 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 17 Aug 2007 16:21:41 -0700
Subject: [Twisted-Python] scheduling timers with long intervals
Message-ID: <010901c7e125$5eb77770$1c266650$@com>

I have a server that is running for weeks without restart, under significant
load.

We are considering adding a function to it that requires setting long timers
like

 

twisted.internet.reactor.callLater(604800, func)

 

i.e. scheduling events one week ahead. There will be up to 500 timers active
at any given time.

 

I do not know how the scheduler works. Will having these timers with very
long intervals significantly tax the performance, since the reactor will
have to check on their status with every churn of the reactor loop?

 

Thanks

 

Alec

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070817/780328c5/attachment.html>

From matusis at yahoo.com  Fri Aug 17 17:25:19 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Fri, 17 Aug 2007 16:25:19 -0700 (PDT)
Subject: [Twisted-Python] scheduling timers with long interval
Message-ID: <728708.73203.qm@web81111.mail.mud.yahoo.com>

I have a server that is running for weeks without restart, under significant load.
I am considering adding a function to it that requires setting long timers like
 
twisted.internet.reactor.callLater(604800, func)
 
i.e. scheduling events one week ahead. There will be up to 500 timers active at any given time.
 
I do not know how the scheduler works. Will having these timers with very long intervals significantly tax the performance, since the reactor will have to check on their status with every churn of the reactor loop?
 
Thanks
 
Alec



From exarkun at divmod.com  Fri Aug 17 20:54:12 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 17 Aug 2007 22:54:12 -0400
Subject: [Twisted-Python] scheduling timers with long interval
In-Reply-To: <728708.73203.qm@web81111.mail.mud.yahoo.com>
Message-ID: <20070818025412.4947.1670130380.divmod.quotient.22874@ohm>

On Fri, 17 Aug 2007 16:25:19 -0700 (PDT), Alec Matusis <matusis at yahoo.com> wrote:
>I have a server that is running for weeks without restart, under significant load.
>I am considering adding a function to it that requires setting long timers like
>
>twisted.internet.reactor.callLater(604800, func)
>
>i.e. scheduling events one week ahead. There will be up to 500 timers active at any given time.
>
>I do not know how the scheduler works. Will having these timers with very long intervals significantly tax the performance, since the reactor will have to check on their status with every churn of the reactor loop?

There is a minor memory cost associated with each task.  Beyond that, there
is a roughly log(N) insertion cost for new DelayedCalls, where N is the
number of existing outstanding calls.  The scheduling itself is basically
constant time.  None of the reactors should even notice if you have just
500 outstanding DelayedCalls.

Jean-Paul



From jj.peeters at gmail.com  Sat Aug 18 15:29:28 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Sat, 18 Aug 2007 23:29:28 +0200
Subject: [Twisted-Python] Questions about the Perspective Broker login
	mechanism
Message-ID: <1187472568.6969.8.camel@troll>

Hi readers,

I'm looking for the person who implements the actual version of the
login mechanism in the Perspective Broker. 
More precisely, I wonder what are the reasons to have chosen a
challenge/response strategy to do login.

I use the Perspective Broker in a project and before modifying anything,
I want to be sure of what I do.

Thank you for your attention,
Julien.




From db3l.net at gmail.com  Sat Aug 18 17:18:36 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sat, 18 Aug 2007 19:18:36 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
Message-ID: <m21we0bfeb.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> I'm looking for the person who implements the actual version of the
> login mechanism in the Perspective Broker. 
> More precisely, I wonder what are the reasons to have chosen a
> challenge/response strategy to do login.

I'm only a user of Twisted and not a core developer, but I suspect for
all the same reasons you'd choose such a system in general (which
aren't PB, nor Twisted, specific).  Avoiding the transmission of raw
authentication information in favor of generated information such as
challenge/response data helps prevent a slew of possible attacks
(injection, playback, man-in-the-middle, etc...) when such information
is available on the wire.

Note however that if you're implying that PB authentication must be
challenge/response, that's not entirely accurate.  While it's true the
default Portal and ClientFactory implementations make use of a
challenge/response approach, you could just as easily change that to
be whatever you would like including simple clear text transmission of
authentication information in one step.  And that exchange is distinct
from the credential checker itself so can be replaced without changing
anything else.

Why you'd bother (when challenge/response is implemented for free) is
another question, but it's certainly possible.  I suppose if you're
using an SSL link for the PB connection with appropriate certificates
you could consider the challenge/response an extra round trip, but
it's got to be pretty insignificant compared to the overall session.

-- David




From exarkun at twistedmatrix.com  Sat Aug 18 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 19 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1187496303.39.1151132164@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-12 through 2007-08-19
Bugs opened: 9    Bugs closed: 5  Total open bugs: 1014 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -2          |Conch:  +1             
|Enhancement:  +1  |Normal:   +7          |Core:   +2             
                   |Lowest:   +1          |Trial:  +3             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2679] twisted.conch.ssh.keys has poor tests. (opened by z3p)
    defect          conch      http://twistedmatrix.com/trac/ticket/2679

                    ===== Normal =====
[#2784] trial reporter plugins can't get real failures unless they subclass trial's reporter class (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2784

[#2785] twisted.trial.itrial.IReporter is missing addSkip (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2785

[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786

[#2787] IReactorProcess.spawnProcess doesn't document all exceptions which the implementation can raise (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2787

[#2788] StringTransport does not support .host/.port (opened by Lacrymology)
    defect          core       http://twistedmatrix.com/trac/ticket/2788

[#2790] UDP Transport write() raises socket.error EWOULDBLOCK (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2790

[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786

                    ===== Lowest =====
[#2789] Windows Process Pipes are polled with 100% cpu (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2789



Closed Bugs
______________________
                    ===== Highest =====
[#2749] Add a utility method to trial to check the type of an object (opened by therve, closed by therve, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2749

[#2341] Merge twisted.internet.process.PTYProcess and Process (opened by itamarst, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2341

[#2769] Update plugins howto to cover new API for <package>/plugins/__init__.py added in #2339 (opened by itamarst, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2769

[#2679] twisted.conch.ssh.keys has poor tests. (opened by z3p, closed by z3p, )
    defect          conch      http://twistedmatrix.com/trac/ticket/2679

                    ===== Normal =====
[#2786] Trial's --until-failure feature is fragile and under-tested (opened by jml, closed by jml, )
    enhancement     trial      http://twistedmatrix.com/trac/ticket/2786



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2790] UDP Transport write() raises socket.error EWOULDBLOCK (since 2007-08-18 17:39:59).

Mean open ticket age: 505 days, 15:14:17.121751.
Median: 397 days, 19:31:32.214454.
Standard deviation: 396 days, 9:06:38.504059.
Interquartile range: 490 days, 3:14:30.

Mean time between ticket creation and ticket resolution: 119 days, 13:28:12.330649.
Median: 14 days, 3:38:33.
Standard deviation is 222 days, 18:22:19.136294.
The interquartile range is 125 days, 7:40:09.

Mean time spent in review: 61 days, 21:07:27.431849.
Median: 4 days, 0:03:10.
Standard deviation: 134 days, 13:25:27.447625.
Interquartile range: 29 days, 21:36:30.259426.

Mean number of times a ticket is reviewed: 1.88461538462.
Median: 1
Standard deviation: 1.46797671007.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    20 unique ticket reporters
    10 unique ticket reviewers
    5 unique ticket resolvers
In the last 24 weeks,
    83 unique ticket reporters
    14 unique ticket reviewers
    17 unique ticket resolvers
In the last 48 weeks,
    156 unique ticket reporters
    21 unique ticket reviewers
    26 unique ticket resolvers




From jj.peeters at gmail.com  Sun Aug 19 05:50:12 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Sun, 19 Aug 2007 13:50:12 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m21we0bfeb.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
Message-ID: <1187524212.5437.11.camel@troll>

> Why you'd bother (when challenge/response is implemented for free) is
> another question, but it's certainly possible.  I suppose if you're
> using an SSL link for the PB connection with appropriate certificates
> you could consider the challenge/response an extra round trip, but
> it's got to be pretty insignificant compared to the overall session.
> 
> -- David

I don't especially use/want a SSL link. But I would like to use
different hash methods than md5 based ones. For instance, I'll possibly
need SHA or MD5CRYPT (I don't know if it's compatible with md5) hash
methods. Or why not any other one...

Then, I would like to use different credentials and to the other side,
different login method to be compatible with credentials I use.
The actual implementation force to use md5 hash method. It's what I'm
looking for to change if I find a good way to do what I habe in mind.

Julien.




From db3l.net at gmail.com  Sun Aug 19 14:37:01 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 16:37:01 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
Message-ID: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

>> Why you'd bother (when challenge/response is implemented for free) is
>> another question, but it's certainly possible.  I suppose if you're
>> using an SSL link for the PB connection with appropriate certificates
>> you could consider the challenge/response an extra round trip, but
>> it's got to be pretty insignificant compared to the overall session.
>> 
>> -- David
>
> I don't especially use/want a SSL link. But I would like to use
> different hash methods than md5 based ones. For instance, I'll possibly
> need SHA or MD5CRYPT (I don't know if it's compatible with md5) hash
> methods. Or why not any other one...

Of course you're certainly allowed to prefer something else, although
you might want to consider if the effort is worth it.  MD5CRYPT is
just an MD5 version of the classic Unix crypt() approach, including
salt, so isn't compatible with a direct MD5 hash.  But the PB approach
already has the random challenge as a salt, so MD5CRYPT shouldn't be
any more robust than the current approach - probably slightly less so
since it doesn't have the double hash of the password.  But it would
be compatible with Unix systems using MD5CRYPT for their passwd
entries if you were trying to compare directly to local entries.

If you're avoiding MD5 simply because it's been shown to no longer be
cryptographically secure (collisions can be generated for a given
hash), it's still worth considering what impact that really has on
this mechanism's use of MD5.  

While I'm not a cryptology expert (and I suspect analyzing such
vulnerabilities is often distinctly non-intuitive), with respect to
passwords, I believe the biggest exposure with MD5 is those systems
that store a direct MD5 hash of a password that an intruder can obtain
and then attempt attacks on by trying to produce alternate passwords
that will hash to the same value (and in some approaches, backtrack to
the true original password).  I'm not sure that sort of attack would
practically be launched against PB.  In particular, salts help defend
against that sort of attack.

For a PB session, the most common attack would be an attacker
attempting to impersonating a client, in which case all they'll have
access to is the random challenge.  Without seeing an actual response,
they've no hash to try to duplicate, and I'm not sure that the MD5
vulnerability comes into play at all.

If you're concerned about attackers with physical access to your
network and/or packet flow, things get messier.  If the attacker is
using a man-in-the-middle attack, I'm not sure they'd even bother with
attacking the password - just let the challenge and response flow
through, and then observe the traffic, or hijack the session once
established without ever figuring out the password.

If they didn't want control of the session, but just wanted the
password for other purposes, they could sniff traffic, and obtain the
challenge and response (and obviously have access to the source code
available to see how they're combined), but would have to deal with
the response having a hash of a hash for the password component.  I
know it makes use of the MD5 vulnerability more difficult, but may not
prevent its use entirely.

To be honest though, if I were really concerned with the latter two
cases - traffic interception/sniffing - I'd go right for link level
security (SSL with certificate verification on both ends), since even
with any other hash why give an attacker access to any of the hash
information if not necessary.  And no authentication system will
protect against a man-in-the-middle attack hijacking a session once
established.

> Then, I would like to use different credentials and to the other side,
> different login method to be compatible with credentials I use.
> The actual implementation force to use md5 hash method. It's what I'm
> looking for to change if I find a good way to do what I habe in mind.

I'm not sure you need to change the login method signature, since it's
just passing an arbitrary credentials object which can be as complex
as you want.  But sure, you can make up your own checker interface to
match your particular credential information.  Similar to how PB
implements the IUsernameMD5Password checker to incorporate the MD5
operation.

So, feel free to have at it.  There are probably a few ways you could
take control, but I were doing it, I'd probably take my Portal
subclass and make it directly implement IPBRoot (thus avoiding the
registered adapter _PortalRoot).  Then use the existing classes
(_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
them, and build your own process from the IPBRoot rootObject() call.
You'd be in complete control and can do anything you'd like.

If you haven't already, you might just start out with using the
existing implementation since it'll be easy enough to replace out
later and you might find that there are other aspects of the system
that deserve attention before delving too deeply into the very initial
authentication.

-- David




From exarkun at divmod.com  Sun Aug 19 14:48:46 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 19 Aug 2007 16:48:46 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
Message-ID: <20070819204846.4947.2059418822.divmod.quotient.23350@ohm>

On Sun, 19 Aug 2007 16:37:01 -0400, David Bolen <db3l.net at gmail.com> wrote:
> [snip]
>
>So, feel free to have at it.  There are probably a few ways you could
>take control, but I were doing it, I'd probably take my Portal
>subclass and make it directly implement IPBRoot (thus avoiding the
>registered adapter _PortalRoot).  Then use the existing classes
>(_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
>them, and build your own process from the IPBRoot rootObject() call.
>You'd be in complete control and can do anything you'd like.

I generally agree with the comments you've made here, except for this
paragraph.  Don't subclass Portal (ever, preferably ;).  Just make an
entirely new class which implements IPBRoot.  If appropriate (as it
likely will be), let that class wrap a Portal instance.  eg,

    portal = Portal(...)
    ...
    factory = PBServerFactory(YourRoot(portal))

Jean-Paul



From db3l.net at gmail.com  Sun Aug 19 15:08:22 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 17:08:22 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
Message-ID: <m2sl6f9qrd.fsf@valheru.db3l.homeip.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Sun, 19 Aug 2007 16:37:01 -0400, David Bolen <db3l.net at gmail.com> wrote:
>> [snip]
>>
>>So, feel free to have at it.  There are probably a few ways you could
>>take control, but I were doing it, I'd probably take my Portal
>>subclass and make it directly implement IPBRoot (thus avoiding the
>>registered adapter _PortalRoot).
>>(...)
>
> I generally agree with the comments you've made here, except for this
> paragraph.  Don't subclass Portal (ever, preferably ;).  (...)

Hmm, not that I've actually ever needed to yet myself, but is there
something specifically about Portal that prefers composition to
subclassing, or is it just a general design preference?

-- David




From db3l.net at gmail.com  Sun Aug 19 15:16:32 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 17:16:32 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
Message-ID: <m2odh39qdr.fsf@valheru.db3l.homeip.net>

David Bolen <db3l.net at gmail.com> writes:

> Hmm, not that I've actually ever needed to yet myself, but is there
> something specifically about Portal that prefers composition to
> subclassing, or is it just a general design preference?

Just to respond to my own post - finally noticed the comment in the
Portal class about not being designed for subclassing, so certainly
based on the expressed intent that's enough of a reason not too.
Although I'm probably still curious as to why.

-- David




From glyph at divmod.com  Sun Aug 19 17:08:39 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 19 Aug 2007 23:08:39 -0000
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
In-Reply-To: <m2odh39qdr.fsf@valheru.db3l.homeip.net>
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
	<m2odh39qdr.fsf@valheru.db3l.homeip.net>
Message-ID: <20070819230839.21185.936043834.divmod.xquotient.1230@joule.divmod.com>

On 09:16 pm, db3l.net at gmail.com wrote:
>David Bolen <db3l.net at gmail.com> writes:
>>Hmm, not that I've actually ever needed to yet myself, but is there
>>something specifically about Portal that prefers composition to
>>subclassing, or is it just a general design preference?
>
>Just to respond to my own post - finally noticed the comment in the
>Portal class about not being designed for subclassing, so certainly
>based on the expressed intent that's enough of a reason not too.
>Although I'm probably still curious as to why.

The portal is simply a utility class for composing an IRealm provider 
with some ICredentialsChecker providers.  The behavior in Portal itself 
is designed to be static, and decidable (in an ideal situation) by the 
administrator.

In other words, realms and credentials checkers should be arbitrarily 
"remixable"; you should not implement one to depend on the other.

If you start messing with the behavior of Portal, just about the only 
thing you *can* do is introduce an unnecessary dependency that makes 
either your checker or your realm unusable by someone else in their own 
application.



From db3l.net at gmail.com  Sun Aug 19 17:30:12 2007
From: db3l.net at gmail.com (David Bolen)
Date: Sun, 19 Aug 2007 19:30:12 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<20070819204846.4947.2059418822.divmod.quotient.23350@ohm>
	<m2sl6f9qrd.fsf@valheru.db3l.homeip.net>
	<m2odh39qdr.fsf@valheru.db3l.homeip.net>
	<20070819230839.21185.936043834.divmod.xquotient.1230@joule.divmod.com>
Message-ID: <m2k5rr9k6z.fsf@valheru.db3l.homeip.net>

glyph at divmod.com writes:

(...)
> In other words, realms and credentials checkers should be arbitrarily
> "remixable"; you should not implement one to depend on the other.
>
> If you start messing with the behavior of Portal, just about the only
> thing you *can* do is introduce an unnecessary dependency that makes
> either your checker or your realm unusable by someone else in their
> own application.

Fair enough ... and in the end, my original suggested use of a
subclass wasn't really intended to augment the Portal interface
behavior, but rather produce a single object satisfying both the
Portal and IPBRoot interfaces.  Given the application (and that those
interfaces aren't really related aspects of anything), that desire
seems to fit more cleanly with composition than inheritance anyway.

-- David




From jj.peeters at gmail.com  Mon Aug 20 09:38:02 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Mon, 20 Aug 2007 17:38:02 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
Message-ID: <1187624282.5241.26.camel@troll>

On Sun, 2007-08-19 at 16:37 -0400, David Bolen wrote:
> I'm not sure you need to change the login method signature, since it's
> just passing an arbitrary credentials object which can be as complex
> as you want.  But sure, you can make up your own checker interface to
> match your particular credential information.  Similar to how PB
> implements the IUsernameMD5Password checker to incorporate the MD5
> operation.
> 
> So, feel free to have at it.  There are probably a few ways you could
> take control, but I were doing it, I'd probably take my Portal
> subclass and make it directly implement IPBRoot (thus avoiding the
> registered adapter _PortalRoot).  Then use the existing classes
> (_PortalWrapper, _PortalAuthChallenger) as a model and/or subclass
> them, and build your own process from the IPBRoot rootObject() call.
> You'd be in complete control and can do anything you'd like.
> 
> If you haven't already, you might just start out with using the
> existing implementation since it'll be easy enough to replace out
> later and you might find that there are other aspects of the system
> that deserve attention before delving too deeply into the very initial
> authentication.
> 
> -- David

For the moment, except I make a mistake, only credentials which
implements IUsernamePassword are supported by the PBClientFactory.login
method. Then if, for instance, passwords are stored with a SHA hash
method, I can't use it as it is. 

Another case in which the implementation present for the moment does not
permit another credentials to be use: for instance, if the credentials
are based, on an other strategy than the username/password one, I think
it couldn't work too.

May be I misunderstood some important points. And at least a part of
what I've talk just before is possible.

What I would be able to do is to arbitrary choice any credentials, and
at the other side, that any checker which is able to check this
credentials is possible to use (I think it's already O.K. for the
checker part).

I thought at a solution, but I don't really know if it is a good one
(both from a design and security point of view). And in the case I made
a mistake in my comprehension, it would be useless.

May be it's possible to put a kind of "credential remote reference" at
the server side which serve as a proxy for the real credential. 
Form a security point of view it's all right because remote reference
does not transmit data but juste provide remote method calls.
And then, instead of give the _PortalAuthChallenger to the portal as the
credentials, that proxy would be given. The proxy have to implement the
same ICredentials interface to be compatible with the checker. And it
have also to implement a "zero-knowledge password proof" mechanism
(response/challenge) to communicate with the real credentials to
preserve security. 

This solution is based on the existing one. And may be would be more
flexible? Why not a starting point for an effective solution?

Julien.




From db3l.net at gmail.com  Mon Aug 20 10:47:30 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 20 Aug 2007 12:47:30 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
Message-ID: <m2fy2e9mql.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> For the moment, except I make a mistake, only credentials which
> implements IUsernamePassword are supported by the PBClientFactory.login
> method. Then if, for instance, passwords are stored with a SHA hash
> method, I can't use it as it is. 

Ah, I see - sorry I missed that.  Yup, so I agree you may want to
override that portion of PBClientFactory (and perhaps the matching
remote_login in PBServerFactory) in your own mechanism as well.

It's possible the existing signature might still work even with a
hashed password, since the password field from the supplied
credentials are passed unchanged to the challenge response generation
function, with nothing other than the client/server shared
challenge/response implementation caring that it is clear text, but
that does sort of "bend" the interface for IUsernamePassword so it's
probably clearer to implement your own.

> (...)
> May be it's possible to put a kind of "credential remote reference" at
> the server side which serve as a proxy for the real credential. 
> Form a security point of view it's all right because remote reference
> does not transmit data but juste provide remote method calls.

Not sure this is a big win, since at some point in time you need to
transfer over the actual credentials used for authentication anyway.
So it's really a tradeoff between an established remote object method
interface (to retrieve the credentials) or the type of credential
object transmitted in general when sent as copyable data.  Toss up,
but you're free to try either approach.

> And then, instead of give the _PortalAuthChallenger to the portal as the
> credentials, that proxy would be given. The proxy have to implement the
> same ICredentials interface to be compatible with the checker. And it
> have also to implement a "zero-knowledge password proof" mechanism
> (response/challenge) to communicate with the real credentials to
> preserve security. 
>
> This solution is based on the existing one. And may be would be more
> flexible? Why not a starting point for an effective solution?

Why not indeed?  If I were you and I had convinced myself the
authentication approach was worth replacing in my application (per my
last response) at this point I'd just go ahead and do some
implementation to see how it goes.  You can certainly achieve
everything you're talking about by just overriding some of the
existing default behavior.

-- David




From jj.peeters at gmail.com  Mon Aug 20 11:24:10 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Mon, 20 Aug 2007 19:24:10 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2fy2e9mql.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
Message-ID: <1187630650.5239.10.camel@troll>

On Mon, 2007-08-20 at 12:47 -0400, David Bolen wrote:
> Julien Peeters <jj.peeters at gmail.com> writes:
> 
> > For the moment, except I make a mistake, only credentials which
> > implements IUsernamePassword are supported by the PBClientFactory.login
> > method. Then if, for instance, passwords are stored with a SHA hash
> > method, I can't use it as it is. 
> 
> Ah, I see - sorry I missed that.  Yup, so I agree you may want to
> override that portion of PBClientFactory (and perhaps the matching
> remote_login in PBServerFactory) in your own mechanism as well.
> 
> It's possible the existing signature might still work even with a
> hashed password, since the password field from the supplied
> credentials are passed unchanged to the challenge response generation
> function, with nothing other than the client/server shared
> challenge/response implementation caring that it is clear text, but
> that does sort of "bend" the interface for IUsernamePassword so it's
> probably clearer to implement your own.

Yes, It's what I noticed. When you use a username/password strategy it's
all right. With a precision that the password have to be hashed with the
same method with which the stored password at the ckercker side is
hashed. 

In the case of other type of credentials, it's not so trivial.

> > (...)
> > May be it's possible to put a kind of "credential remote reference" at
> > the server side which serve as a proxy for the real credential. 
> > Form a security point of view it's all right because remote reference
> > does not transmit data but juste provide remote method calls.
> 
> Not sure this is a big win, since at some point in time you need to
> transfer over the actual credentials used for authentication anyway.
> So it's really a tradeoff between an established remote object method
> interface (to retrieve the credentials) or the type of credential
> object transmitted in general when sent as copyable data.  Toss up,
> but you're free to try either approach.

And so. I noticed that the solution I proposed does not correctly work
because the "proxy" have to implements the interface the checker match
for. And it's impossible to do cleanly.

> > And then, instead of give the _PortalAuthChallenger to the portal as the
> > credentials, that proxy would be given. The proxy have to implement the
> > same ICredentials interface to be compatible with the checker. And it
> > have also to implement a "zero-knowledge password proof" mechanism
> > (response/challenge) to communicate with the real credentials to
> > preserve security. 
> >
> > This solution is based on the existing one. And may be would be more
> > flexible? Why not a starting point for an effective solution?
> 
> Why not indeed?  If I were you and I had convinced myself the
> authentication approach was worth replacing in my application (per my
> last response) at this point I'd just go ahead and do some
> implementation to see how it goes.  You can certainly achieve
> everything you're talking about by just overriding some of the
> existing default behavior.

In theory all is possible. But it's an other challenge that to find a
good and clean way to do it :-).

I interested in all propositions if someone have any ideas.

Julien.




From db3l.net at gmail.com  Mon Aug 20 13:02:10 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 20 Aug 2007 15:02:10 -0400
Subject: [Twisted-Python] Re: Questions about the Perspective Broker login
	mechanism
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
	<1187630650.5239.10.camel@troll>
Message-ID: <m2bqd29gi5.fsf@valheru.db3l.homeip.net>

Julien Peeters <jj.peeters at gmail.com> writes:

> In theory all is possible. But it's an other challenge that to find a
> good and clean way to do it :-).
>
> I interested in all propositions if someone have any ideas.

Maybe I missed it, but it sounded like "it" was just using an
alternate hashing algorithm, for which an approach towards doing that
is what I think we've covered, no?

Perhaps it might be clearer if you restated your needs and/or goal for
an alternate method of authentication - that might prompt more helpful
responses.

-- David




From Paul_S_Johnson at mnb.uscourts.gov  Mon Aug 20 13:49:18 2007
From: Paul_S_Johnson at mnb.uscourts.gov (Paul_S_Johnson at mnb.uscourts.gov)
Date: Mon, 20 Aug 2007 14:49:18 -0500
Subject: [Twisted-Python] Persistent SSH Class for Twisted needed
In-Reply-To: <20070808120457.4947.1236737990.divmod.quotient.20171@ohm>
Message-ID: <OF53FE536A.E7974D96-ON8625733D.006C659F-8625733D.006D513D@uscmail.uscourts.gov>

I've posted this a month or two ago, but thought I'd try again in case 
someone missed it.

Does anyone have a Persistent SSH Class for Twisted that they'd be willing 
to share? I need it for a GUI application that we really like to build. 
I've looked at plenty of examples of connect/execute/disconnect scripts, 
but converting those to a persistent connection is a bit too daunting for 
my programming abilities. Any help is much appreciated.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070820/5c0d9c2e/attachment.html>

From laurie at holoweb.net  Tue Aug 21 03:09:41 2007
From: laurie at holoweb.net (Laurie Harper)
Date: Tue, 21 Aug 2007 05:09:41 -0400
Subject: [Twisted-Python] invoking Deferred synchronously
Message-ID: <faea4i$ns5$1@sea.gmane.org>

I'm sure this is trivial enough, but it has me scratching my head... I 
need to call a method that returns a Deferred, then block until the 
deferred completes (or errback's) and return the final result of the 
deferred call.

Specifically, something like:

     r = None, is_ok = None
     def ok(p): r, is_ok = p, True
     def fail(e): r, is_ok = e, False

     cf = pb.PBClientFactory()
     reactor.connectTCP(host, port, cf)
     d = cf.login(creds, client=self).addCallbacks(ok, fail)

     # BLOCK: wait until d has called 'ok' of 'fail'

     if is_ok:
         return r
     else:
         raise r

If it helps, I'm trying to create a web application (using Nevow) that 
connects to another Twister service through the Persistence Broker. I'm 
trying to implement authentication, and so need a way to wait for the PB 
connection to succeed/fail so I can send the appropriate response to the 
HTTP request.

Any pointers would be very much appreciated! :-)

L.




From jj.peeters at gmail.com  Tue Aug 21 04:28:31 2007
From: jj.peeters at gmail.com (Julien Peeters)
Date: Tue, 21 Aug 2007 12:28:31 +0200
Subject: [Twisted-Python] Re: Questions about the Perspective Broker
	login mechanism
In-Reply-To: <m2bqd29gi5.fsf@valheru.db3l.homeip.net>
References: <1187472568.6969.8.camel@troll>
	<m21we0bfeb.fsf@valheru.db3l.homeip.net>
	<1187524212.5437.11.camel@troll>
	<m2wsvr9s7m.fsf@valheru.db3l.homeip.net>
	<1187624282.5241.26.camel@troll>
	<m2fy2e9mql.fsf@valheru.db3l.homeip.net>
	<1187630650.5239.10.camel@troll>
	<m2bqd29gi5.fsf@valheru.db3l.homeip.net>
Message-ID: <1187692111.5743.13.camel@troll>

On Mon, 2007-08-20 at 15:02 -0400, David Bolen wrote:
> Julien Peeters <jj.peeters at gmail.com> writes:
> 
> > In theory all is possible. But it's an other challenge that to find a
> > good and clean way to do it :-).
> >
> > I interested in all propositions if someone have any ideas.
> 
> Maybe I missed it, but it sounded like "it" was just using an
> alternate hashing algorithm, for which an approach towards doing that
> is what I think we've covered, no?

I'm sorry, I done an English mistake may be (I'm not a native english
speaker). When I talked about another "challenge", I talked about the
support of any credentials (different from username/password).

I agree that the use of different hashing algorithm is trivial.
However, that's important to notice that the credentials at the client
side have to hash the password given by the user, if this last one is
given as clear text.

> Perhaps it might be clearer if you restated your needs and/or goal for
> an alternate method of authentication - that might prompt more helpful
> responses.

In the end, my main interest is to be able to use any credentials I
want. By for the moment, use any hashing algorithm is already
positive ;-) .

Julien.





From p.mayers at imperial.ac.uk  Tue Aug 21 04:33:55 2007
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 21 Aug 2007 11:33:55 +0100
Subject: [Twisted-Python] invoking Deferred synchronously
In-Reply-To: <faea4i$ns5$1@sea.gmane.org>
References: <faea4i$ns5$1@sea.gmane.org>
Message-ID: <1187692435.25224.10.camel@doorstop.net.ic.ac.uk>

On Tue, 2007-08-21 at 05:09 -0400, Laurie Harper wrote:
> I'm sure this is trivial enough, but it has me scratching my head... I 
> need to call a method that returns a Deferred, then block until the 
> deferred completes (or errback's) and return the final result of the 
> deferred call.

You don't want to do that.

> 
> Specifically, something like:
> 
>      r = None, is_ok = None
>      def ok(p): r, is_ok = p, True
>      def fail(e): r, is_ok = e, False
> 
>      cf = pb.PBClientFactory()
>      reactor.connectTCP(host, port, cf)
>      d = cf.login(creds, client=self).addCallbacks(ok, fail)
> 
>      # BLOCK: wait until d has called 'ok' of 'fail'
> 
>      if is_ok:
>          return r
>      else:
>          raise r
> 
> If it helps, I'm trying to create a web application (using Nevow) that 
> connects to another Twister service through the Persistence Broker. I'm 
> trying to implement authentication, and so need a way to wait for the PB 
> connection to succeed/fail so I can send the appropriate response to the 
> HTTP request.

You certainly don't need to do that in a Nevow app. Just do this (I'm
assuming this is in a data or render method):

cf = pb.PBClientFactory()
reactor.connectTCP(host, port, cf)
return cf.login(creds, client=self)

Nevow will see you've returned a deferred and wait for it. Much of
Twisted will do the same. You NEVER want to "wait" for a deferred.




From luca at unipex.it  Tue Aug 21 05:02:34 2007
From: luca at unipex.it (Luca Politti)
Date: Tue, 21 Aug 2007 13:02:34 +0200
Subject: [Twisted-Python] protocol and transport question
Message-ID: <46CAC64A.6020600@unipex.it>

Hi all,
I have a problem with a simple client/server communication: I have a
server that send the data through "transport" (my class inherit from
twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
(that now, for test propose are on the same machine) some time I receive
two messages concatenated from the server like it send on the same time.
Other times, I receive it correctly (in different moments).
I tried to debug this situations with print some messages, and I see
that twisted sometimes wait "a time" before send data through the
channel:

on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
try:
     # Limit length of buffer to try to send, because some OSes are too
....

on my code:
print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
self.transport.write(str(msg))

and I see (then it's wrong):
BBBBBBBBBBBBBBBBBBB '230 XXXXXXXXX\n' 1187693294.84
BBBBBBBBBBBBBBBBBBB '235 XXXXXXXXX 144\n' 1187693295.28
CCCCCCCCCCCCCCCCC '230 XXXXXXXXX \n235 XXXXXXXXX 144\n' 1187693295.28

and when it's right:
BBBBBBBBBBBBBBBBBBB '230 XXXXXXXXX \n' 1187693282.89
CCCCCCCCCCCCCCCCC '230 XXXXXXXXX \n' 1187693283.06
BBBBBBBBBBBBBBBBBBB '235 XXXXXXXXX 143\n' 1187693283.28
CCCCCCCCCCCCCCCCC '235 XXXXXXXXX 143\n' 1187693283.28


How solve it? Is there a method for say to twisted (transport) to not
wait to send the data? (flush the buffer?)

Thanks a lot!

Luca



From laurie at holoweb.net  Tue Aug 21 05:16:46 2007
From: laurie at holoweb.net (Laurie Harper)
Date: Tue, 21 Aug 2007 07:16:46 -0400
Subject: [Twisted-Python] Re: invoking Deferred synchronously
In-Reply-To: <1187692435.25224.10.camel@doorstop.net.ic.ac.uk>
References: <faea4i$ns5$1@sea.gmane.org>
	<1187692435.25224.10.camel@doorstop.net.ic.ac.uk>
Message-ID: <faehip$h7n$1@sea.gmane.org>

Phil Mayers wrote:
> On Tue, 2007-08-21 at 05:09 -0400, Laurie Harper wrote:
>> I'm sure this is trivial enough, but it has me scratching my head... I 
>> need to call a method that returns a Deferred, then block until the 
>> deferred completes (or errback's) and return the final result of the 
>> deferred call.
> 
> You don't want to do that.

Perhaps once I get more used to Twisted's programming model, I'll stop 
tending to ;-)

>> Specifically, something like:
>>
>>      r = None, is_ok = None
>>      def ok(p): r, is_ok = p, True
>>      def fail(e): r, is_ok = e, False
>>
>>      cf = pb.PBClientFactory()
>>      reactor.connectTCP(host, port, cf)
>>      d = cf.login(creds, client=self).addCallbacks(ok, fail)
>>
>>      # BLOCK: wait until d has called 'ok' of 'fail'
>>
>>      if is_ok:
>>          return r
>>      else:
>>          raise r
>>
>> If it helps, I'm trying to create a web application (using Nevow) that 
>> connects to another Twister service through the Persistence Broker. I'm 
>> trying to implement authentication, and so need a way to wait for the PB 
>> connection to succeed/fail so I can send the appropriate response to the 
>> HTTP request.
> 
> You certainly don't need to do that in a Nevow app. Just do this (I'm
> assuming this is in a data or render method):
> 
> cf = pb.PBClientFactory()
> reactor.connectTCP(host, port, cf)
> return cf.login(creds, client=self)
> 
> Nevow will see you've returned a deferred and wait for it. Much of
> Twisted will do the same. You NEVER want to "wait" for a deferred.

Wow, nice; it never occurred to me to try that :-) That isn't quite what 
I'd need, since I want to retrieve the IPresence returned from login() 
and store it in the web server (so it can be used to service subsequent 
HTTP requests). However, from the experimentation I did earlier with 
inlineCallbacks and the like I think I know how to wrap a deferred up 
and do what I need.

Thanks for the pointer, I'll give it a try.

L.




From exarkun at divmod.com  Tue Aug 21 06:02:27 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 21 Aug 2007 08:02:27 -0400
Subject: [Twisted-Python] protocol and transport question
In-Reply-To: <46CAC64A.6020600@unipex.it>
Message-ID: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>

On Tue, 21 Aug 2007 13:02:34 +0200, Luca Politti <luca at unipex.it> wrote:
>Hi all,
>I have a problem with a simple client/server communication: I have a
>server that send the data through "transport" (my class inherit from
>twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
>(that now, for test propose are on the same machine) some time I receive
>two messages concatenated from the server like it send on the same time.
>Other times, I receive it correctly (in different moments).

For message-oriented protocols (what you seem to be implementing), it
is necessary to have some "framing" mechanism - a way to tell where a
message ends and the next begins.  You can't rely on time to tell
messages apart over TCP, since TCP makes few guarantees about when it
will do things.

>I tried to debug this situations with print some messages, and I see
>that twisted sometimes wait "a time" before send data through the
>channel:

Bytes written to a TCP transport will be sent (almost) as soon as they
can be.  They are not (in the current implementation) sent before the
transport.write() call returns, but they will be sent the next time the
reactor regains execution control.  Unless your application is blocking
the reactor from running (ie, performing some long running task), this
means the reactor will try to send your data at most a few milliseconds
after your write call.  It is not necessarily the case that the send will
succeed at that time, though.  In such a case, the reactor will buffer
the data and try to send it again later.

>
>on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
>print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
>try:
>     # Limit length of buffer to try to send, because some OSes are too
>....
>
>on my code:
>print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
>self.transport.write(str(msg))

writeSomeData and transport.write don't necessarily have a one-to-one
correspondence to each other, so this debug output might be a bit
misleading.

> [snip]
>
>How solve it? Is there a method for say to twisted (transport) to not
>wait to send the data? (flush the buffer?)

Since there's no buffering except when absolutely necessary, there's no
way to flush.

So there are three things to watch out for:

  * You must use a framing mechanism in order to differentiate your
    messages.  This might be as simple as having them all be the same
    length, or it might mean including a length prefix (see the
    NetstringReceiver or Int{8,16,32}StringReceiver protocols in
    twisted.protocols.base for examples of this), or it might be
    something more complex.

  * Don't block the reactor.  If you want to wait a while, use the
    callLater method of the reactor, not time.sleep.  If you have
    to call a function that will block for a long time before it
    returns, find an asynchronous version instead, or use the reactor's
    threadpool.

  * Don't call reactor methods from any thread except the one which
    is running the reactor.  This will have unpredictable results and
    generally be broken.

Jean-Paul



From bernat at luffy.cx  Tue Aug 21 07:48:44 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Tue, 21 Aug 2007 15:48:44 +0200
Subject: [Twisted-Python] Adapter for a class, not for an instance
Message-ID: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>


Hi !

Currently, adapters can transform an instance into another
instance. I would like to use adapters to transform a class into
an instance. Does something like that already exists ?

Thanks.





From maarten at treewalker.org  Tue Aug 21 16:06:25 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 22 Aug 2007 00:06:25 +0200
Subject: [Twisted-Python] Checking whether a server started successfully
Message-ID: <200708220006.31573.maarten@treewalker.org>

Hi,

I am starting a server process using "twistd -oy" (don't save state; 
application is described by Python source). If all is well, the server is 
started in the background. However, if all is not well, I'd like to detect 
that startup failed.

The particular scenario that I'm using is testing a server using a test 
framework that does HTTP requests. Before the tests are run, the server is 
started and it tries to bind to a fixed port. If there is still an old 
instance of the server running, the bind will fail and any requests made will 
be handled by the old instance instead. That will lead to invalid test 
results.

I worked around it currently by waiting for 3 seconds (probably sufficient 
time to try the binding) and then checking if the process of which the ID 
stored in "twisted.pid" is still running. However, there is no guarantee that 
3 seconds is always enough time for the server to have bound the port. So I'm 
wondering if there is a reliable and elegant way of solving this.

One approach would be to check which process has bound a particular port. I'm 
running this server on Linux and the "netstat" command line tool has access 
to the right information, but not in an easily parseable format. I guess the 
same info can be found in /proc somehow, but are those files guaranteed to 
stay compatible with newer kernels?

Another approach would be to check in advance if something is listening on 
that particular port, but between the time this check is done and the time 
the server tries to bind, some other process might have grabbed the port.

In any case, the port already being bound is just one of the reasons why the 
startup might fail; I'd prefer to have a way to detect startup failures for 
other reasons as well.

One question is when exactly "startup" is finished. For my purpose, the moment 
the reactor is running would be the moment I consider startup to be 
successful. Maybe I can write a file somewhere to explicitly signal that, but 
that's a bit messy (where to put it? is the server process allowed to write 
there? who cleans up the file?).

Maybe it would be useful to have twistd (optionally) wait until the reactor is 
running before returning. I don't want the test script to rely on a patched 
version of Twisted, so this would only be an option if it would make sense to 
integrate such a feature into Twisted itself.

Have you encountered this problem as well? And if so, how did you deal with 
it?

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20070822/729c330f/attachment.sig>

From glyph at divmod.com  Tue Aug 21 16:31:07 2007
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 21 Aug 2007 22:31:07 -0000
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
Message-ID: <20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>

On 01:48 pm, bernat at luffy.cx wrote:
>Currently, adapters can transform an instance into another
>instance. I would like to use adapters to transform a class into
>an instance. Does something like that already exists ?

More correctly, adapters can transform an object into another object, 
based on what interfaces the original object provides.  So you can use 
it with class objects, if you want, just as much as you can use it with 
instance objects.

However, you probably want to ask this on the Zope Interface mailing 
list, not Twisted.  Also, I strongly suspect that whatever problem 
you're trying to solve with this would be better solved some other way, 
but that's just a hunch :).



From bernat at luffy.cx  Wed Aug 22 00:10:57 2007
From: bernat at luffy.cx (Vincent Bernat)
Date: Wed, 22 Aug 2007 08:10:57 +0200
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
	(glyph@divmod.com's message of "Tue, 21 Aug 2007 22:31:07 -0000")
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
	<20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
Message-ID: <m3lkc42j66.fsf@neo.luffy.cx>

OoO  En  cette nuit  nuageuse  du mercredi  22  août  2007, vers  00:31,
glyph at divmod.com disait:

>> Currently, adapters can transform an instance into another
>> instance. I would like to use adapters to transform a class into
>> an instance. Does something like that already exists ?

> More correctly, adapters can transform an object into another object,
> based on what interfaces the original object provides.  So you can use
> it with class objects, if you want, just as much as you can use it
> with instance objects.

Here is what I do.

from zope.interface import Interface, implements
from twisted.python.components import registerAdapter, Adapter

class DummyAdapter(Adapter):
 pass

class IDummy1(Interface):
 pass

class IDummy2(Interface):
 pass

class Dummy1(object):
 implements(IDummy1)

registerAdapter(DummyAdapter, IDummy1, IDummy2)

IDummy2(Dummy1()) # Works
IDummy2(Dummy1) # Don't works

If I use registerAdapter(DummyAdapter, type, IDummy2), this works, but I
lose a lot  of functionality (I may want to  adapt other interfaces than
IDummy1).

> However, you probably want to ask this on the Zope Interface mailing
> list, not Twisted.  Also, I strongly suspect that whatever problem
> you're trying to solve with this would be better solved some other
> way, but that's just a hunch :).

I have some object which is the  model for some data. I want to adapt it
to display  it in HTML for example.  In this case, I  adapt the instance
because everything is  OK. Now, I want to create an  HTML form linked to
this object properties. I cannot use an instance because the object does
not exist yet.
-- 
I WILL NOT BURP IN CLASS
I WILL NOT BURP IN CLASS
I WILL NOT BURP IN CLASS
-+- Bart Simpson on chalkboard in episode 7G04



From andrew-twisted at puzzling.org  Wed Aug 22 00:28:11 2007
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 22 Aug 2007 16:28:11 +1000
Subject: [Twisted-Python] Adapter for a class, not for an instance
In-Reply-To: <m3lkc42j66.fsf@neo.luffy.cx>
References: <05f53c94314010353260f37fbd2e0156@imap.luffy.cx>
	<20070821223107.21185.1333710517.divmod.xquotient.1463@joule.divmod.com>
	<m3lkc42j66.fsf@neo.luffy.cx>
Message-ID: <20070822062811.GF24805@steerpike.home.puzzling.org>

This is really a Zope question, not Twisted question.  You'll probably get
better answers by asking on a Zope mailing list.  Anyway...

Vincent Bernat wrote:
[...]
> 
> Here is what I do.
> 
> from zope.interface import Interface, implements
> from twisted.python.components import registerAdapter, Adapter
> 
> class DummyAdapter(Adapter):
>  pass
> 
> class IDummy1(Interface):
>  pass
> 
> class IDummy2(Interface):
>  pass
> 
> class Dummy1(object):
>  implements(IDummy1)
> 
> registerAdapter(DummyAdapter, IDummy1, IDummy2)
> 
> IDummy2(Dummy1()) # Works
> IDummy2(Dummy1) # Don't works
> 
> If I use registerAdapter(DummyAdapter, type, IDummy2), this works, but I
> lose a lot  of functionality (I may want to  adapt other interfaces than
> IDummy1).

Read the zope.interface documentation, particularly the distinction between
providing an interface and implmenting an interface.  If you want
IDummy2(Dummy1) to work, you need to declare Dummy1 as:

class Dummy1(object):
    classProvides(IDummy1)

However you almost certainly do not want that class to also implement(IDummy1).
It would be very unusual for a type and its instances to both provide the same
interface.

-Andrew.




From christian.simms at gmail.com  Wed Aug 22 08:41:19 2007
From: christian.simms at gmail.com (Christian Simms)
Date: Wed, 22 Aug 2007 10:41:19 -0400
Subject: [Twisted-Python] Checking whether a server started successfully
In-Reply-To: <200708220006.31573.maarten@treewalker.org>
References: <200708220006.31573.maarten@treewalker.org>
Message-ID: <cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>

On 8/21/07, Maarten ter Huurne <maarten at treewalker.org> wrote:
>
> Hi,
>
> I am starting a server process using "twistd -oy" (don't save state;
> application is described by Python source). If all is well, the server is
> started in the background. However, if all is not well, I'd like to detect
> that startup failed.
>
> The particular scenario that I'm using is testing a server using a test
> framework that does HTTP requests. Before the tests are run, the server is
> started and it tries to bind to a fixed port. If there is still an old
> instance of the server running, the bind will fail and any requests made
> will
> be handled by the old instance instead. That will lead to invalid test
> results.
>
> I worked around it currently by waiting for 3 seconds (probably sufficient
> time to try the binding) and then checking if the process of which the ID
> stored in "twisted.pid" is still running. However, there is no guarantee
> that
> 3 seconds is always enough time for the server to have bound the port. So
> I'm
> wondering if there is a reliable and elegant way of solving this.
>
> One approach would be to check which process has bound a particular port.
> I'm
> running this server on Linux and the "netstat" command line tool has
> access
> to the right information, but not in an easily parseable format. I guess
> the
> same info can be found in /proc somehow, but are those files guaranteed to
> stay compatible with newer kernels?
>
> Another approach would be to check in advance if something is listening on
> that particular port, but between the time this check is done and the time
> the server tries to bind, some other process might have grabbed the port.
>
> In any case, the port already being bound is just one of the reasons why
> the
> startup might fail; I'd prefer to have a way to detect startup failures
> for
> other reasons as well.
>
> One question is when exactly "startup" is finished. For my purpose, the
> moment
> the reactor is running would be the moment I consider startup to be
> successful. Maybe I can write a file somewhere to explicitly signal that,
> but
> that's a bit messy (where to put it? is the server process allowed to
> write
> there? who cleans up the file?).
>
> Maybe it would be useful to have twistd (optionally) wait until the
> reactor is
> running before returning. I don't want the test script to rely on a
> patched
> version of Twisted, so this would only be an option if it would make sense
> to
> integrate such a feature into Twisted itself.
>
> Have you encountered this problem as well? And if so, how did you deal
> with
> it?
>
> Bye,
>                 Maarten
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



Yes, I've encountered this problem before.  And yes, I initially did the
same thing as you, by waiting a hardcoded time.  But eventually I got tired
of this race condition, and that it doesn't detect when the server failed to
start.  What I'm doing right now for my non-unit functional testing is
running a bash script which:

- make sure twistd isn't running using ps:  ps aux | grep twistd | grep -v
grep
- start up the app in non-daemon mode, send its output to the console and to
a file:
     twistd -noy my-app.tac | tee server.log &
- poll the server.log by grep'ing for a string I print from my app when the
app is completely started
- launch the tests against the running server (I think I'm using mechanize
right now for web client library)

This works for me in my development environment, on Linux.

Cheers,
Christian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070822/5b70fff9/attachment.html>

From jcd at sdf.lonestar.org  Wed Aug 22 09:18:40 2007
From: jcd at sdf.lonestar.org (J. Cliff Dyer)
Date: Wed, 22 Aug 2007 11:18:40 -0400
Subject: [Twisted-Python] Checking whether a server started successfully
In-Reply-To: <cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>
References: <200708220006.31573.maarten@treewalker.org>
	<cd8fa6f90708220741y1808be54qc05581d30632e84f@mail.gmail.com>
Message-ID: <46CC53D0.2070204@sdf.lonestar.org>

Christian Simms wrote:
>
> - make sure twistd isn't running using ps:  ps aux | grep twistd | 
> grep -v grep
You can save yourself a pipe by doing

$ ps aux|grep [t]wistd

That way it won't find twistd on the grep line.  the [brackets] get in 
the way, but don't semantically change what you're looking for.

Cheers,
Cliff




From ladaan at iptel.org  Wed Aug 22 12:14:17 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 22 Aug 2007 20:14:17 +0200
Subject: [Twisted-Python] LoopingCall and object instances
Message-ID: <46CC7CF9.4010103@iptel.org>

Hello,
I have got following code:

hosts = ['google.com','yahoo.com']

for host in hosts:
        c = PingContext(num, host)
        ctx.append(c)
        l = task.LoopingCall(c.ping)
        l.start(30.0, False)

I create a few object instances and pinging those hosts every 30 secs.
I will have another loop through LoopingCall, where I will be checking 
dynamically changing list and comparing with already been checking hosts.
If there is a host missing in the list I will delete the object instance 
which is not in the list.
How can I remove it that it will not be anymore called by LoopingCall?
Or how can I add a new object instance to the LoopingCall in case there 
is new host in the list?

Hopefully, it's understandable.

Thank you,
Lada








From ladaan at iptel.org  Wed Aug 22 14:59:28 2007
From: ladaan at iptel.org (Ladislav Andel)
Date: Wed, 22 Aug 2007 22:59:28 +0200
Subject: [Twisted-Python] LoopingCall and object instances
In-Reply-To: <46CC7CF9.4010103@iptel.org>
References: <46CC7CF9.4010103@iptel.org>
Message-ID: <46CCA3B0.6050006@iptel.org>

I found the answer myself here at 
http://twistedmatrix.com/pipermail/twisted-python/2005-September/011490.html

I followed the code and implemented to my class start and stop methods 
which solved my problem
with taking out object instances from loop testing.

Lada

Ladislav Andel wrote:
> Hello,
> I have got following code:
>
> hosts = ['google.com','yahoo.com']
>
> for host in hosts:
>        c = PingContext(num, host)
>        ctx.append(c)
>        l = task.LoopingCall(c.ping)
>        l.start(30.0, False)
>
> I create a few object instances and pinging those hosts every 30 secs.
> I will have another loop through LoopingCall, where I will be checking 
> dynamically changing list and comparing with already been checking hosts.
> If there is a host missing in the list I will delete the object 
> instance which is not in the list.
> How can I remove it that it will not be anymore called by LoopingCall?
> Or how can I add a new object instance to the LoopingCall in case 
> there is new host in the list?
>
> Hopefully, it's understandable.
>
> Thank you,
> Lada
>
>
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From luca at unipex.it  Thu Aug 23 07:11:18 2007
From: luca at unipex.it (Luca Politti)
Date: Thu, 23 Aug 2007 15:11:18 +0200
Subject: [Twisted-Python] protocol and transport question
In-Reply-To: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>
References: <20070821120227.8162.2012957444.divmod.quotient.411@ohm>
Message-ID: <46CD8776.7010005@unipex.it>

Jean-Paul Calderone ha scritto:
> On Tue, 21 Aug 2007 13:02:34 +0200, Luca Politti <luca at unipex.it> wrote:
>> Hi all,
>> I have a problem with a simple client/server communication: I have a
>> server that send the data through "transport" (my class inherit from
>> twisted.internet.protocol.Protocol), every 0.4 seconds. On the client
>> (that now, for test propose are on the same machine) some time I receive
>> two messages concatenated from the server like it send on the same time.
>> Other times, I receive it correctly (in different moments).
> 
> For message-oriented protocols (what you seem to be implementing), it
> is necessary to have some "framing" mechanism - a way to tell where a
> message ends and the next begins.  You can't rely on time to tell
> messages apart over TCP, since TCP makes few guarantees about when it
> will do things.
> 
>> I tried to debug this situations with print some messages, and I see
>> that twisted sometimes wait "a time" before send data through the
>> channel:
> 
> Bytes written to a TCP transport will be sent (almost) as soon as they
> can be.  They are not (in the current implementation) sent before the
> transport.write() call returns, but they will be sent the next time the
> reactor regains execution control.  Unless your application is blocking
> the reactor from running (ie, performing some long running task), this
> means the reactor will try to send your data at most a few milliseconds
> after your write call.  It is not necessarily the case that the send will
> succeed at that time, though.  In such a case, the reactor will buffer
> the data and try to send it again later.
> 
>>
>> on the server, on twisted.internet.tcp.Connection on writeSomeData I add:
>> print "CCCCCCCCCCCCCCCCC", repr(data), time.time()
>> try:
>>     # Limit length of buffer to try to send, because some OSes are too
>> ....
>>
>> on my code:
>> print "BBBBBBBBBBBBBBBBBBB", repr(msg), time.time()
>> self.transport.write(str(msg))
> 
> writeSomeData and transport.write don't necessarily have a one-to-one
> correspondence to each other, so this debug output might be a bit
> misleading.
> 
>> [snip]
>>
>> How solve it? Is there a method for say to twisted (transport) to not
>> wait to send the data? (flush the buffer?)
> 
> Since there's no buffering except when absolutely necessary, there's no
> way to flush.
> 
> So there are three things to watch out for:
> 
>  * You must use a framing mechanism in order to differentiate your
>    messages.  This might be as simple as having them all be the same
>    length, or it might mean including a length prefix (see the
>    NetstringReceiver or Int{8,16,32}StringReceiver protocols in
>    twisted.protocols.base for examples of this), or it might be
>    something more complex.
> 
>  * Don't block the reactor.  If you want to wait a while, use the
>    callLater method of the reactor, not time.sleep.  If you have
>    to call a function that will block for a long time before it
>    returns, find an asynchronous version instead, or use the reactor's
>    threadpool.
> 
>  * Don't call reactor methods from any thread except the one which
>    is running the reactor.  This will have unpredictable results and
>    generally be broken.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Ok, Jean-Paul, thanks a lot. We haven't thought to this. We thought that 
every time we called transport.write, it sent the msg...
But we have solved the problem using your first suggest: the framing 
mechanism :). So now, just before send the msg, I append the length of 
the msg at the beginning of this. On the other side, when I receive the 
msg I cut the msg until the length of the msg. The rest is putted in a 
buffer and processed after.
The most important thing is that IT WORKS!!!! :))))

So we thank you very a lot...

Best reguards..

Luca

-- 
Unipex srl

email: luca at unipex.it
Tel:   0432 - 931511
Fax:   0432 - 931378



From miles.chris at gmail.com  Thu Aug 23 11:48:24 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Thu, 23 Aug 2007 18:48:24 +0100
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
Message-ID: <9F23B6F1-D5BB-4E8C-9D5B-6720664C60A4@gmail.com>

I have a Twisted app that is often waiting for child processes (calls  
to external commands).

I'd like to make the app gracefully shutdown by default.  As in, when  
the app is killed I want to make sure that any currently running  
child processes can complete and the results of their work can be  
processed before the daemon dies.

What would be the best way to achieve this?

Can I override the SIGTERM signal handler so that it waits for other  
events to complete before allowing the app to die?

Cheers
Chris Miles




From exarkun at divmod.com  Thu Aug 23 11:52:44 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 23 Aug 2007 13:52:44 -0400
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
In-Reply-To: <9F23B6F1-D5BB-4E8C-9D5B-6720664C60A4@gmail.com>
Message-ID: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>

On Thu, 23 Aug 2007 18:48:24 +0100, Chris Miles <miles.chris at gmail.com> wrote:
>I have a Twisted app that is often waiting for child processes (calls  to 
>external commands).
>
>I'd like to make the app gracefully shutdown by default.  As in, when  the 
>app is killed I want to make sure that any currently running  child 
>processes can complete and the results of their work can be  processed 
>before the daemon dies.
>
>What would be the best way to achieve this?
>
>Can I override the SIGTERM signal handler so that it waits for other  events 
>to complete before allowing the app to die?

twistd will wait for any Deferred returned by an IService.stopService method
in the application hierarchy before stopping the reactor and exiting.

Jean-Paul



From ghazel at gmail.com  Thu Aug 23 13:12:57 2007
From: ghazel at gmail.com (ghazel at gmail.com)
Date: Thu, 23 Aug 2007 12:12:57 -0700
Subject: [Twisted-Python] Digisynd job posting
Message-ID: <151643b20708231212s58efb587pd66ab12eb6018a1@mail.gmail.com>

Sorry for what might look like spam, but this job posting for a
Twisted developer came through a friend of mine. If anyone has an
interest in this just respond to me and I'll forward your info along.

I'm quoting here:
"""
these guys are
the founding team of revr and are building the first true web
syndication platform for video. they have deals with warner and mtv so
far and basically take their videos and generate tons of views for them
using some proprietary technology.

they are looking to make a senior hire with the following credentials.
if you know of anyone in the la or san fran area, i would greatly
appreciate an intro. thanks

__________________________________


Digisynd is seeking a well-seasoned python developer/manager to help run

our software development efforts. Ideally you have:

- a passion for Django or/and Twisted
- a passion for hot frameworks, such as Ruby-On-Rails
- exceptional SQL skills
- experience with capturing and reporting off `massive` datasets in
real time
- extensive experience with web services - both creating and utilizing
- a preference for MySQL and Ubuntu
- strong bash scripting
- experience with distributed version control

We prefer candidates to be based out of either the Bay area or Los
Angeles. We are a small, energetic team, with a heap of interesting
problems to solve in a very entertaining space.
"""

-Greg



From teratorn at gmail.com  Thu Aug 23 14:55:02 2007
From: teratorn at gmail.com (Eric Mangold)
Date: Thu, 23 Aug 2007 15:55:02 -0500
Subject: [Twisted-Python] Windows maintainership
Message-ID: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>

I just wanted to let everyone know that I won't be able to maintain
Twisted on Windows anymore.

The last several months has seen virtually zero effort on my part
towards resolving any of the outstanding Windows issues, and the
future doesn't look any different. I will be sure to remove myself
from the various trac tickets.

I will still be around to maintain anything that I've written, and
hack on the odd bits of code that affect me.

Timothy Fitz is still listed as a maintainer, however.

Timothy, could you let us know where you stand?

Everyone feel free to go off on tangents here... e.g. do we really
need a Windows Maintainer position? Are people getting along just fine
as-is? Is there any infrastructure that would help our Windows support
efforts?

I'm not going to second-guess where we should go from here (if
anywhere), but instead I'll let this discussion develop organically...

-teratorn



From TimothyFitz at gmail.com  Thu Aug 23 15:24:59 2007
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Thu, 23 Aug 2007 14:24:59 -0700
Subject: [Twisted-Python] Re: Windows maintainership
In-Reply-To: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
References: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
Message-ID: <972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>

On 8/23/07, Eric Mangold <teratorn at gmail.com> wrote:
> Timothy Fitz is still listed as a maintainer, however.
>
> Timothy, could you let us know where you stand?

I'm still interested in helping, though I personally don't see a need
for a title/position of  "windows maintainer". Are there specific
things you were doing that you feel need picked up by someone else?

Timothy



From teratorn at gmail.com  Thu Aug 23 15:37:37 2007
From: teratorn at gmail.com (Eric Mangold)
Date: Thu, 23 Aug 2007 16:37:37 -0500
Subject: [Twisted-Python] Re: Windows maintainership
In-Reply-To: <972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>
References: <481d6b880708231355t3c6686e1xcf28f7fd3edda234@mail.gmail.com>
	<972ec5bd0708231424i3e2b81b6lafa217db9061eaf9@mail.gmail.com>
Message-ID: <481d6b880708231437y121f77cj9431c47c2f118bbd@mail.gmail.com>

On 8/23/07, Timothy Fitz <TimothyFitz at gmail.com> wrote:
> On 8/23/07, Eric Mangold <teratorn at gmail.com> wrote:
> > Timothy Fitz is still listed as a maintainer, however.
> >
> > Timothy, could you let us know where you stand?
>
> I'm still interested in helping, though I personally don't see a need
> for a title/position of  "windows maintainer". Are there specific
> things you were doing that you feel need picked up by someone else?

Well I'll just describe some things I was doing...

I was operating xpdev.twistedmatrix.com, which a few people had access
to, and on which a couple bugs were hacked on and fixed.

I never did finish setting it up just the way I wanted (remote,
concurrent access to Windows desktops is so friggin hard), and so I
never gave all the comitters an account on it. That's what I wanted to
do, however.

The person who had volunteered his colo machine to host this vmware
image is unfortunately unable to continue doing so. So this machine is
offline right now (thought I do have the vmware image if anyone wants
to pick up where I left off)

Also, at one point I was actively monitoring and pushing along all the
outstanding Windows tickets. I was also tackling various tickets
myself.

At various time people brought there windows question to me and I
tried to provide whatever expertise I could.



From stefan.lange at ubs.com  Fri Aug 24 05:08:48 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Fri, 24 Aug 2007 13:08:48 +0200
Subject: [Twisted-Python] SSH agent
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>

Hi all,

is there example code how to use an SSH agent with Twisted Conch?
How stable is this functionality, would you recommend to use it or would you rather opt for other approaches for having Python scripts use an SSH agent?

Regards,
stefan





From m-lists at the-moon.net  Sat Aug 25 05:53:18 2007
From: m-lists at the-moon.net (Richard Wall)
Date: Sat, 25 Aug 2007 12:53:18 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
Message-ID: <46D0182E.7060106@the-moon.net>

I'm giving a talk "An introduction to Twisted" at PyconUK and am trying to come 
up with some simple examples.

One of these, is the attached PortCheck module, that is supposed to attempt 
connection to a range of ports and report whether they're open, closed, filtered 
(timeout).

It works okay when run against localhost, or another machine on my local 
network, but I've noticed that when I run it against an internet host, the 
reactor takes ages to shutdown after scanning all the ports. I wondered if there 
was anything obviously wrong with the code.

Run it as follows from bash: python portcheck.py www.google.co.uk {1..1000}

Thanks in advance for any suggestions.

-RichardW.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: portcheck.py
Type: text/x-python
Size: 2375 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20070825/4f3599aa/attachment-0002.py>

From exarkun at twistedmatrix.com  Sat Aug 25 22:05:03 2007
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 26 Aug 2007 04:05:03 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1188101103.65.962688131@twistedmatrix.com

Bug summary
______________________
Summary for 2007-08-19 through 2007-08-26
Bugs opened: 14    Bugs closed: 8  Total open bugs: 1020 (+6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -4          |Core:     +3           
|Enhancement:  +0  |Normal:  +10          |Names:    -1           
|Task:         +1                         |Pb:       -2           
                                          |Trial:    +4           
                                          |Website:  +1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Normal =====
[#2791] [Patch] Bad boundary check when parsing a Socks4a packet (opened by adam.lofts)
    defect          core       http://twistedmatrix.com/trac/ticket/2791

[#2792] twisted.trial.test_runner.DryRunMixin is shaky (opened by therve)
    defect          trial      http://twistedmatrix.com/trac/ticket/2792

[#2793] trial's force-garbage-collection flag doesn't affect testSuite/test_suite generated tests (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2793

[#2794] CapturingReporter has no addError method (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2794

[#2795] trial should not print tracebacks for expected failures (opened by spiv)
    defect          trial      http://twistedmatrix.com/trac/ticket/2795

[#2796] trial should not print tracebacks for expected failures (opened by spiv) (CLOSED, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2796

[#2797] Can't use "“" in a bug description (opened by spiv)
    defect          website    http://twistedmatrix.com/trac/ticket/2797

[#2798] Can't use non-ascii characters in a bug description (opened by spiv) (CLOSED, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/2798

[#2799] Feature Request:RTP RTCP support (opened by godson)
    enhancement     words      http://twistedmatrix.com/trac/ticket/2799

[#2800] Provide t.n.srvconnect with full tests and do a general clean up. (opened by ralphm)
    task            names      http://twistedmatrix.com/trac/ticket/2800

[#2801] Link to howto's from API reference docs. (opened by mellis)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2801

[#2802] Datagram transports should be able to report datagram losses (opened by Peaker)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2802

[#2803] findFailure fails to find the correct failure in a more complicated case (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2803

[#2804] LoopingCall does not handle start() correctly from within its called function (opened by Peaker)
    defect          core       http://twistedmatrix.com/trac/ticket/2804



Closed Bugs
______________________
                    ===== Highest =====
[#2312] Twisted Perspective Broker anonymous login support (opened by carlosedp, closed by exarkun, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/2312

[#2639] Allow access to the traceback associated with an error thrown into an inlineCallback (opened by Peaker, closed by Peaker, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2639

[#2275] Twisted test suite requires too much memory (opened by exarkun, closed by therve, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/2275

[#2777] Fix SRVConnector to deal with bad nameservers. (opened by ralphm, closed by ralphm, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/2777

                    ===== Normal =====
[#439 ] pb can't use IAnonymous credentials (opened by timothy, closed by exarkun, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/439

[#2798] Can't use non-ascii characters in a bug description (opened by spiv, closed by exarkun, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/2798

[#2796] trial should not print tracebacks for expected failures (opened by spiv, closed by mithrandi, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/2796

[#1908] SRVConnector keeps reconnecting on non-SRV responses (opened by ralphm, closed by ralphm, fixed)
    enhancement     names      http://twistedmatrix.com/trac/ticket/1908



Ticket Lifetime Stats
______________________
Oldest open ticket - [#38] Should be a way to create documentation aliases (since 2003-07-12 16:08:03).
Newest open ticket - [#2804] LoopingCall does not handle start() correctly from within its called function (since 2007-08-25 22:12:07).

Mean open ticket age: 507 days, 7:29:42.671725.
Median: 401 days, 1:25:15.464863.
Standard deviation: 397 days, 11:32:23.076229.
Interquartile range: 494 days, 18:56:16.

Mean time between ticket creation and ticket resolution: 120 days, 8:51:46.565540.
Median: 14 days, 6:55:00.
Standard deviation is 224 days, 8:53:29.079086.
The interquartile range is 125 days, 12:43:31.

Mean time spent in review: 62 days, 16:08:09.768854.
Median: 4 days, 1:03:50.
Standard deviation: 136 days, 12:56:48.940480.
Interquartile range: 29 days, 2:22:33.

Mean number of times a ticket is reviewed: 1.90167865707.
Median: 1
Standard deviation: 1.51013270252.
Interquartile range: 1.


Contributor Stats
______________________
In the last 4 weeks,
    18 unique ticket reporters
    10 unique ticket reviewers
    6 unique ticket resolvers
In the last 24 weeks,
    80 unique ticket reporters
    14 unique ticket reviewers
    16 unique ticket resolvers
In the last 48 weeks,
    157 unique ticket reporters
    20 unique ticket reviewers
    26 unique ticket resolvers




From lists at dirk-loss.de  Sun Aug 26 12:26:44 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Sun, 26 Aug 2007 20:26:44 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
Message-ID: <46D1C5E4.3080207@dirk-loss.de>

Hi,

following Eli Criffields nice example [1] I implemented a small SSL
server with Twisted. My server should not only verify the client
certificate, but also check the Common Name (CN) against a whitelist.
All this should happen before any user data is exchanged.

Verifying the client certificate worked nicely, but I couldn't access
its contents: transport.getPeerCertificate() always returned 'None'.
Apparently Eli had the same problem [2].

After some testing with PyOpenSSL now I think I have found a solution:

Before we can get the client certificate, we have to make sure that the
SSL handshake has taken place. (If it hasn't, there simply is no client
certificate to deal with yet.) This can be done by calling the
do_handshake() method of the underlying socket. The SSL handshake takes
some time so we will have to try several times.

Here's an (incomplete) example showing the interesting part:
- - cut ---
import OpenSSL

class MyProtocol(Protocol):

     def connectionMade(self):

         # Make sure that SSL handshake has taken place
         while True:
             try:
                 self.transport.socket.do_handshake()
                 break
             except OpenSSL.SSL.WantReadError:
                 pass

         clientCert = self.transport.getPeerCertificate()
         if clientCert is None:
             log.msg("No client cert available.")
         else:
             subject = clientCert.get_subject()
             log.msg("Subject: %s" % subject)
             log.msg("Common Name: %s" % subject.CN)
- - cut ---

If you see a nicer way to wait for the SSL handshake please let me
know. Using time.sleep() didn't work for me.

Side note:
Getting the certificate in a dataReceived() instead of connectionMade()
works without manually doing the handshake. I think this is because the
underlying PyOpenSSL recv() method handles the handshake for us. But at
least for my purpose it makes more sense to verify the client cert
right upon connection, before any user data is exchanged.

Regards,
Dirk

[1] http://archives.free.net.ph/message/20070511.203607.36001e38.en.html
[2] http://archives.free.net.ph/message/20070607.211438.9354342f.en.html



From exarkun at divmod.com  Sun Aug 26 13:05:40 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 26 Aug 2007 15:05:40 -0400
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <46D1C5E4.3080207@dirk-loss.de>
Message-ID: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>

On Sun, 26 Aug 2007 20:26:44 +0200, Dirk Loss <lists at dirk-loss.de> wrote:
>Hi,
>
>following Eli Criffields nice example [1] I implemented a small SSL
>server with Twisted. My server should not only verify the client
>certificate, but also check the Common Name (CN) against a whitelist.
>All this should happen before any user data is exchanged.
>
>Verifying the client certificate worked nicely, but I couldn't access
>its contents: transport.getPeerCertificate() always returned 'None'.
>Apparently Eli had the same problem [2].
>
>After some testing with PyOpenSSL now I think I have found a solution:
>
>Before we can get the client certificate, we have to make sure that the
>SSL handshake has taken place. (If it hasn't, there simply is no client
>certificate to deal with yet.) This can be done by calling the
>do_handshake() method of the underlying socket. The SSL handshake takes
>some time so we will have to try several times.

This is basically a bug in Twisted's SSL support.  I forget if there's a
way to fix it using PyOpenSSL or if it's a limitation of the bindings.

>
>Here's an (incomplete) example showing the interesting part:
>- - cut ---
>import OpenSSL
>
>class MyProtocol(Protocol):
>
>     def connectionMade(self):
>
>         # Make sure that SSL handshake has taken place
>         while True:
>             try:
>                 self.transport.socket.do_handshake()
>                 break
>             except OpenSSL.SSL.WantReadError:
>                 pass
>
>         clientCert = self.transport.getPeerCertificate()
>         if clientCert is None:
>             log.msg("No client cert available.")
>         else:
>             subject = clientCert.get_subject()
>             log.msg("Subject: %s" % subject)
>             log.msg("Common Name: %s" % subject.CN)
>- - cut ---
>
>If you see a nicer way to wait for the SSL handshake please let me
>know. Using time.sleep() didn't work for me.

This solution has at least two related problems:

  * it will block the reactor until the handshake for that client completes,
    which means no other I/O will occur and none other application code will
    be able to run.  This might be fine for your application, but in general
    it's not a very good thing.

  * if a malicious client connects, they can just never complete the
    handshake and your server will hang in that loop indefinitely.

>
>Side note:
>Getting the certificate in a dataReceived() instead of connectionMade()
>works without manually doing the handshake. I think this is because the
>underlying PyOpenSSL recv() method handles the handshake for us. But at
>least for my purpose it makes more sense to verify the client cert
>right upon connection, before any user data is exchanged.

The ideal solution would be to fix the bug in Twisted's SSL support so that
connectionMade is called at the right time.  Another possible solution might
be to do your verification using the SSL context object.  CertificateOptions
might give you some ideas about how to do this:

http://twistedmatrix.com/documents/current/api/twisted.internet.ssl.CertificateOptions.html

Jean-Paul



From paulswartz at gmail.com  Sun Aug 26 14:17:14 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Sun, 26 Aug 2007 16:17:14 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>
References: <AcfmPyAke2tQ0jlyQESpjUKvlJctdA==>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD6A@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>

On 8/24/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi all,
>
> is there example code how to use an SSH agent with Twisted Conch?
> How stable is this functionality, would you recommend to use it or would you rather > opt for other approaches for having Python scripts use an SSH agent?

There is some code in twisted.conch.ssh.agent to interact with a key
agent.  It doesn't implement all of the features an agent supports,
just enough to test and get identities.  What are you trying to use an
agent for?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From lists at dirk-loss.de  Sun Aug 26 14:23:49 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Sun, 26 Aug 2007 22:23:49 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
Message-ID: <46D1E155.1040508@dirk-loss.de>

Jean-Paul Calderone wrote:
> This solution has at least two related problems:
>  * it will block the reactor until the handshake for that client completes,

Yes, it's ugly. Not being able to run other application code is no 
problem in my case, so I thought I could live with that. But the possibe 
DoS attack you mentioned should be avoided, of course.

> The ideal solution would be to fix the bug in Twisted's SSL support so that
> connectionMade is called at the right time.  

This would be nice. Maybe I should take a deeper look at Twisted's SSL code.

> Another possible solution might be to do your verification using the SSL context object.  

Could you elaborate on this? I think I am already using the SSL context 
object to do the verification:

theCert = ssl.PrivateCertificate.loadPEM(open(myKey).read())
theCA = ssl.Certificate.loadPEM(open(trustedCA).read())
ctx = theCert.options(theCA)
ctx.verify = True
ctx.verifyDepth = 9
ctx.requireCertificate = True
ctx.verifyOnce = False
application = service.Application("MySSLServer")
MyService = internet.SSLServer(listenport, MyAppFactory(), ctx)
MyService.setServiceParent(application)

(Above code obviously will not run. Just to show the basic steps I take.)

Regards
Dirk



From exarkun at divmod.com  Sun Aug 26 15:21:30 2007
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 26 Aug 2007 17:21:30 -0400
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <46D1E155.1040508@dirk-loss.de>
Message-ID: <20070826212130.8162.1349943820.divmod.quotient.1689@ohm>

On Sun, 26 Aug 2007 22:23:49 +0200, Dirk Loss <lists at dirk-loss.de> wrote:
>Jean-Paul Calderone wrote:
>>This solution has at least two related problems:
>>  * it will block the reactor until the handshake for that client completes,
>
>Yes, it's ugly. Not being able to run other application code is no problem 
>in my case, so I thought I could live with that. But the possibe DoS attack 
>you mentioned should be avoided, of course.
>>The ideal solution would be to fix the bug in Twisted's SSL support so that
>>connectionMade is called at the right time.
>
>This would be nice. Maybe I should take a deeper look at Twisted's SSL code.
>>Another possible solution might be to do your verification using the SSL 
>>context object.
>
>Could you elaborate on this? I think I am already using the SSL context 
>object to do the verification:
>
>theCert = ssl.PrivateCertificate.loadPEM(open(myKey).read())
>theCA = ssl.Certificate.loadPEM(open(trustedCA).read())
>ctx = theCert.options(theCA)
>ctx.verify = True
>ctx.verifyDepth = 9
>ctx.requireCertificate = True
>ctx.verifyOnce = False
>application = service.Application("MySSLServer")
>MyService = internet.SSLServer(listenport, MyAppFactory(), ctx)
>MyService.setServiceParent(application)
>
>(Above code obviously will not run. Just to show the basic steps I take.)

CertificateOptions doesn't directly support a custom verification callback,
which I think is what you want, but it does use that feature in order to log
SSL errors.  If you take a look at the implementation, you'll see a nested
function named _trackVerificationProblems.  If this could be customized by
application code, then it could do things like check hostnames.  I forget why
this isn't exposed to applications.  I think someone suggested that it wasn't
actually what you wanted to do, but I don't remember any more details than
that.

Jean-Paul



From stefan.lange at ubs.com  Mon Aug 27 02:08:20 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Mon, 27 Aug 2007 10:08:20 +0200
Subject: [Twisted-Python] SSH agent
In-Reply-To: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>

Hi Paul,

I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

Regards,
stefan 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Paul
Swartz
Sent: 26 August 2007 22:17
To: Twisted general discussion
Subject: Re: [Twisted-Python] SSH agent


On 8/24/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi all,
>
> is there example code how to use an SSH agent with Twisted Conch?
> How stable is this functionality, would you recommend to use it or would you rather > opt for other approaches for having Python scripts use an SSH agent?

There is some code in twisted.conch.ssh.agent to interact with a key
agent.  It doesn't implement all of the features an agent supports,
just enough to test and get identities.  What are you trying to use an
agent for?

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From paulswartz at gmail.com  Mon Aug 27 06:41:20 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Mon, 27 Aug 2007 08:41:20 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>
References: <324cfb540708261317n4acf8830i9d28a2bca032aab0@mail.gmail.com>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD72@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>

On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi Paul,
>
> I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
> The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
> Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

If that's all you want, you don't need an agent at all.  Just decrypt
the key (see t.c.ssh.keys.getPrivateKeyObject) and then implement
something like doc/conch/examples/sshsimpleclient.py using that
decrypted key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From stefan.lange at ubs.com  Mon Aug 27 10:00:09 2007
From: stefan.lange at ubs.com (stefan.lange at ubs.com)
Date: Mon, 27 Aug 2007 18:00:09 +0200
Subject: [Twisted-Python] SSH agent
In-Reply-To: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>
Message-ID: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>

Thanks, you are certainly right. 
I was first concerned about security implications when directly reading in the private key instead of accessing an SSH agent but on second thought there seems no difference security wise.
Got the slightly modified example working, following your advice.

Another question:
Is there already functionality in Twisted for using Kerberos for SSH authentication?

Regards,
stefan

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com]On Behalf Of Paul
Swartz
Sent: 27 August 2007 14:41
To: Twisted general discussion
Subject: Re: [Twisted-Python] SSH agent


On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Hi Paul,
>
> I want to use a scripted approach for executing different sorts of tasks on a couple of machines, initiated from 1 central machine.
> The administrative user should get prompted for the SSH passphrase only once (at start of the script), from then on the script should run unattended, without requiring further interactive input.
> Would you estimate the subset of SSH agent functionality implemented in Conch is sufficient for this? Which features are missing?

If that's all you want, you don't need an agent at all.  Just decrypt
the key (see t.c.ssh.keys.getPrivateKeyObject) and then implement
something like doc/conch/examples/sshsimpleclient.py using that
decrypted key.

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From lacrymology at gmail.com  Mon Aug 27 10:49:52 2007
From: lacrymology at gmail.com (Tomas Neme)
Date: Mon, 27 Aug 2007 13:49:52 -0300
Subject: [Twisted-Python] Chat server
Message-ID: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>

I'm making an MMO game with several "levels" that will be distributed
over different servers and need a centralized chat server. The general
idea was to make an IRC (exarkun recommended Jabber but this is just a
detail) server with channels like #all #<guild> #<room>, etcetera, and
make the game client logon into it and let it handle all the chat
data.

I've been reading t.words's tap and service but I'm not getting the
general idea of what a chat service (with probably an offline
messaging service) should look like, and what does all of the stuff
underneath words do, and wether I need it or not if I'm not going to
be multi-protocol'ed

Does anyone have a few pointers on what should I read before getting
myself into it? words' documentation is not exactly throughout, so I'm
kind of lost here

Tomás (Lacrymology)

-- 
|_|0|_|
|_|_|0|
|0|0|0|



From paulswartz at gmail.com  Mon Aug 27 11:35:23 2007
From: paulswartz at gmail.com (Paul Swartz)
Date: Mon, 27 Aug 2007 13:35:23 -0400
Subject: [Twisted-Python] SSH agent
In-Reply-To: <56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>
References: <324cfb540708270541qb7a3ffdkba4d35949a249127@mail.gmail.com>
	<56C8D6B84C1C1444960BBA3015CD3EEB0230FD79@S01B10DE.exchange.ubs.ch>
Message-ID: <324cfb540708271035l40b27e14h8bbbcc5579978e55@mail.gmail.com>

On 8/27/07, stefan.lange at ubs.com <stefan.lange at ubs.com> wrote:
> Thanks, you are certainly right.
> I was first concerned about security implications when directly reading in the private key instead of accessing an SSH agent but on second thought there seems no difference security wise.
> Got the slightly modified example working, following your advice.
>
> Another question:
> Is there already functionality in Twisted for using Kerberos for SSH authentication?

There is not, but patches are certainly welcome :)

-p
-- 
Paul Swartz
paulswartz at gmail dot com
http://z3p.livejournal.com/
AIM: z3penguin



From db3l.net at gmail.com  Mon Aug 27 13:00:19 2007
From: db3l.net at gmail.com (David Bolen)
Date: Mon, 27 Aug 2007 15:00:19 -0400
Subject: [Twisted-Python] Re: SSL: Getting the client certificate
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
	<46D1E155.1040508@dirk-loss.de>
Message-ID: <m27ingajlo.fsf@valheru.db3l.homeip.net>

Dirk Loss <lists at dirk-loss.de> writes:

> Jean-Paul Calderone wrote:
(...)
>> Another possible solution might be to do your verification using the
>> SSL context object.  
>
> Could you elaborate on this? I think I am already using the SSL
> context object to do the verification:

Not sure if it helps, but here's some old code of mine where I
experimented with the echo SSL examples to add symmetric certificate
checking.  Just checked and it seems ok with Python 2.5.1 and Twisted
2.5.0 (pyOpenSSL 0.6).

It uses direct SSL context objects rather than the Twisted
wrapper versions.  To be honest, at the time it was because I was
still feeling my way around the SSL support and found using the direct
context easier, but I believe you do have full access to the
certificate in the context's _verify method.

Returning 0/False from _verify rather than just propagating ok can
reject the handshake.  (Note that _verify can be called multiple times
during the sequence as well as in cases where ok is already 0 I
believe).

There are a bunch of debugging prints still in the code where I was seeing
what sort of stuff was available to the context factory/verification.

-- David


echoserv_ssl.py:
---------------

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from OpenSSL import SSL, crypto

class ServerContextFactory:
    
    def _verify(self, connection, x509, errnum, errdepth, ok):
        print '_verify (ok=%d):' % ok
        print '  subject:', x509.get_subject()
        print '  issuer:', x509.get_issuer()
        print '  errnum %s, errdepth %d' % (errnum, errdepth)
        return False # ok

    def getContext(self):
        """Create an SSL context.
        
        This is a sample implementation that loads a certificate from a file 
        called 'server.pem'."""
        ctx = SSL.Context(SSL.SSLv23_METHOD)
        ctx.use_certificate_file('server.pem')
        ctx.use_privatekey_file('server.pem')
        print 'Context additions'
        ctx.load_client_ca('ca/all-cas.cert')
        ctx.load_verify_locations('ca/ca.cert')
        ctx.set_verify(SSL.VERIFY_PEER|SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
                       self._verify)
        print 'verify depth:', ctx.get_verify_depth()
        ctx.set_verify_depth(10)
        print 'verify depth:', ctx.get_verify_depth()
        return ctx

import echoserv

class MyProtocol(echoserv.Echo):

    def connectionMade(self):
        print 'connectionMade', self.transport.getPeerCertificate()
        return echoserv.Echo.connectionMade(self)

    def dataReceived(self, data):
        print 'dataReceived', self.transport.getPeerCertificate()
        return echoserv.Echo.dataReceived(self, data)


if __name__ == '__main__':
    import echoserv, sys
    from twisted.internet.protocol import Factory
    from twisted.internet import ssl, reactor
    from twisted.python import log
    log.startLogging(sys.stdout)
    factory = Factory()
    factory.protocol = MyProtocol
    reactor.listenSSL(9000, factory, ServerContextFactory())
    reactor.run()


echoclient_ssl.py:
-----------------

# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from OpenSSL import SSL
import sys

from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.internet import ssl, reactor

import inspect


class ClientContextFactory(ssl.ClientContextFactory):

    def _verify(self, connection, x509, errnum, errdepth, ok):
        print '_verify (ok=%d):' % ok
        print '  subject:', x509.get_subject()
        print '  issuer:', x509.get_issuer()
        print '  errnum %s, errdepth %d' % (errnum, errdepth)
        return ok

    def getContext(self):
        ctx = ssl.ClientContextFactory.getContext(self)
        ctx.use_certificate_file('client.pem')
        ctx.use_privatekey_file('client.pem')

        ctx.load_verify_locations('ca/ca.cert')
        ctx.set_verify(SSL.VERIFY_PEER|SSL.VERIFY_FAIL_IF_NO_PEER_CERT,
                       self._verify)

        return ctx

class EchoClient(LineReceiver):
    end="Bye-bye!"

    def connectionMade(self):
        self.sendLine("Hello, world!")
        self.sendLine("What a fine day it is.")
        self.sendLine(self.end)

    def connectionLost(self, reason):
        print 'connection lost (protocol)'

    def lineReceived(self, line):
        x509 = self.transport.getPeerCertificate()
        methods = [x for x in dir(x509)
                   if callable(getattr(x509,x)) and
                   not (x.startswith('set_') or
                        x.startswith('add_') or
                        x.startswith('gmtime_') or
                        x in ('sign','digest'))]
        for m in methods:
            print m, getattr(x509,m)()
        print "receive:", line
        if line==self.end:
            self.transport.loseConnection()

class EchoClientFactory(ClientFactory):
    protocol = EchoClient

    def clientConnectionFailed(self, connector, reason):
        print 'connection failed:', reason.getErrorMessage()
        reactor.stop()

    def clientConnectionLost(self, connector, reason):
        print 'connection lost:', reason.getErrorMessage()
        reactor.stop()

def main():
    if len(sys.argv) > 1:
        host = sys.argv[1]
    else:
        host = 'localhost'

    factory = EchoClientFactory()
    reactor.connectSSL(host, 9000, factory, ClientContextFactory())
    reactor.run()

if __name__ == '__main__':
    main()




From pasci.bach at gmail.com  Mon Aug 27 13:01:30 2007
From: pasci.bach at gmail.com (Pascal Bach)
Date: Mon, 27 Aug 2007 21:01:30 +0200
Subject: [Twisted-Python] SMS Protocol UCP /EMI
Message-ID: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>

Hello
I'm currently searching for an UCP / EMI protocol implementation. I'm
currently experimenting with twisted.
Before I go further with my implementation work I would like to ask, if
there are others interested in an UCP / EMI protocol implementation or in a
generic SMS Protocol  implementation in particular. Maybe somebody has
already done some work on that?

Thank you
 Best Regards
 Pascal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070827/059b21b9/attachment.html>

From miles.chris at gmail.com  Mon Aug 27 15:33:30 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Mon, 27 Aug 2007 22:33:30 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
In-Reply-To: <46D0182E.7060106@the-moon.net>
References: <46D0182E.7060106@the-moon.net>
Message-ID: <0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>

Hi Richard,

I tried your code and it works fine for me.  The script always exits  
right away after scanning all ports.  I tried various hosts and  
various port ranges.

I'm running Python 2.4.4, Twisted 2.5.0, on OS X.

btw: I would warn against port scanning public sites such as google;  
you don't want to trip an IDS and cop the wrath of a network admin.

Hope this helps.

Cya at PyConUK.

Cheers,
Chris

On 25 Aug 2007, at 12:53, Richard Wall wrote:

> I'm giving a talk "An introduction to Twisted" at PyconUK and am  
> trying to come up with some simple examples.
>
> One of these, is the attached PortCheck module, that is supposed to  
> attempt connection to a range of ports and report whether they're  
> open, closed, filtered (timeout).
>
> It works okay when run against localhost, or another machine on my  
> local network, but I've noticed that when I run it against an  
> internet host, the reactor takes ages to shutdown after scanning  
> all the ports. I wondered if there was anything obviously wrong  
> with the code.
>
> Run it as follows from bash: python portcheck.py www.google.co.uk  
> {1..1000}
>
> Thanks in advance for any suggestions.
>
> -RichardW.
> """
> A module to demonstrate some of the simplest twisted client code  
> possible
> @author: Richard Wall <richard (at) the-moon.net>
> """
> import sys
>
> from twisted.internet import reactor
> from twisted.internet.defer import DeferredList
> from twisted.internet.task import Cooperator
> from twisted.internet.protocol import ClientCreator, Protocol
> from twisted.internet.error import ConnectionRefusedError,  
> TimeoutError
>
> STATUS_OPEN = "open"
> STATUS_CLOSED = "closed"
> STATUS_TIMEOUT = "timeout"
>
> MAX_SIMULTANEOUS_CONNECTIONS = 100
>
> def getPortStatus(host, port, timeout=1):
>     """
>     Return a deferred that is called back with one of: open,  
> closed, timeout
>     @param host: The hostname or IP with which to attempt a connection
>     @param port: The port to connect
>     @param timeout: Number of seconds to wait for connection before  
> giving up
>     @return: A deferred which will call back with one of
>              STATUS_{OPEN,CLOSED,TIMEOUT}
>     """
>
>     cli = ClientCreator(reactor, Protocol)
>
>     d = cli.connectTCP(host, port, timeout=timeout)
>
>     def cb(proto):
>         proto.transport.loseConnection()
>         return STATUS_OPEN
>
>     def eb(err):
>         expectedErrors = {
>             ConnectionRefusedError: STATUS_CLOSED,
>             TimeoutError: STATUS_TIMEOUT
>         }
>
>         e = err.trap(*expectedErrors.keys())
>         if e:
>             return expectedErrors[e]
>
>     d.addCallbacks(cb, eb)
>
>     return d
>
> def main(argv):
>     """
>     Command line access to the getPortStatus function. Pass me a  
> hostname and
>     one or more ports and I will report their status.
>     """
>     host = argv[1]
>     ports = map(int, argv[2:])
>
>     def cb(status, host, port):
>          sys.stdout.write("%s:%d %s\n"%(host,port,status))
>
>     def eb(err):
>         sys.stderr.write("%s\n" % err.value)
>
>     def portStatusGenerator(host, ports):
>         for p in ports:
>             d = getPortStatus(host, p)
>             d.addCallbacks(cb, eb, (host, p))
>             yield d
>
>     # Limit parallelism otherwise we run out of file descriptors
>     # See http://jcalderone.livejournal.com/24285.html
>     work = portStatusGenerator(host, ports)
>     coop = Cooperator()
>     d = DeferredList(
>             [coop.coiterate(work) for i in xrange 
> (MAX_SIMULTANEOUS_CONNECTIONS)])
>
>     d.addCallback(lambda ign: reactor.stop())
>     reactor.run()
>
> if __name__ == "__main__":
>     sys.exit(main(sys.argv))
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070827/b4838d1e/attachment.html>

From therve at free.fr  Tue Aug 28 01:32:22 2007
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Tue, 28 Aug 2007 09:32:22 +0200
Subject: [Twisted-Python] SMS Protocol UCP /EMI
In-Reply-To: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>
References: <74363ffb0708271201s5b8f4aa3mc02833edca1df7a@mail.gmail.com>
Message-ID: <20070828093222.k736iwn00sgcsggw@wasabox.wasabout.net>

Quoting Pascal Bach <pasci.bach at gmail.com>:

> Hello
> I'm currently searching for an UCP / EMI protocol implementation. I'm
> currently experimenting with twisted.
> Before I go further with my implementation work I would like to ask, if
> there are others interested in an UCP / EMI protocol implementation or in a
> generic SMS Protocol  implementation in particular. Maybe somebody has
> already done some work on that?

Hello,

I used the library here: http://mjoc.sig.lt/projects/smpplib/ to  
implement a SMPP client with Twisted. It's not particularly awesome,  
but it works well enough for my needs. I could probably put it  
somewhere if you're interested.

-- 
Thomas




From miles.chris at gmail.com  Tue Aug 28 06:12:51 2007
From: miles.chris at gmail.com (Chris Miles)
Date: Tue, 28 Aug 2007 13:12:51 +0100
Subject: [Twisted-Python] Graceful shutdown of Twisted daemon
In-Reply-To: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>
References: <20070823175244.8162.1375843361.divmod.quotient.1148@ohm>
Message-ID: <10795807-5004-499B-8C33-D4B9C3B1C6C4@gmail.com>


On 23 Aug 2007, at 18:52, Jean-Paul Calderone wrote:

> On Thu, 23 Aug 2007 18:48:24 +0100, Chris Miles  
> <miles.chris at gmail.com> wrote:
>> I have a Twisted app that is often waiting for child processes  
>> (calls  to external commands).
>>
>> I'd like to make the app gracefully shutdown by default.  As in,  
>> when  the app is killed I want to make sure that any currently  
>> running  child processes can complete and the results of their  
>> work can be  processed before the daemon dies.
>>
>> What would be the best way to achieve this?
>>
>> Can I override the SIGTERM signal handler so that it waits for  
>> other  events to complete before allowing the app to die?
>
> twistd will wait for any Deferred returned by an  
> IService.stopService method
> in the application hierarchy before stopping the reactor and exiting.

Thanks, that seems to be what I wanted.  Which also led me to re- 
writing my service to be a proper IService rather than just piggy  
backing calls onto TimerService.

Cheers
Chris Miles




From m-lists at the-moon.net  Tue Aug 28 15:45:42 2007
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 28 Aug 2007 22:45:42 +0100
Subject: [Twisted-Python] Reactor takes a long time to shutdown
In-Reply-To: <0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>
References: <46D0182E.7060106@the-moon.net>
	<0D776523-0267-45F9-89AF-3506C84EA771@gmail.com>
Message-ID: <46D49786.8090801@the-moon.net>

Chris Miles wrote:
> I tried your code and it works fine for me.  The script always exits 
> right away after scanning all ports.  I tried various hosts and various 
> port ranges.
> I'm running Python 2.4.4, Twisted 2.5.0, on OS X.

Chris,

Thanks for trying it out. I'm working on Ubuntu Gutsy, Python2.5, Twisted trunk, 
Kernel 2.6.22. I just tried on a server running Ubuntu Dapper, Python2.4, kernel 
2.6.15 and that shuts down straight away, as you found. Oh well.

> btw: I would warn against port scanning public sites such as google; you 
> don't want to trip an IDS and cop the wrath of a network admin.

I was using someone elses ADSL at the time :)

> Hope this helps.
> Cya at PyConUK.

Yep, look forward to it. Assuming I finish the slides in time. ;)

-RichardW.




From lee.a.connell at gmail.com  Tue Aug 28 18:48:50 2007
From: lee.a.connell at gmail.com (Lee Connell)
Date: Tue, 28 Aug 2007 20:48:50 -0400
Subject: [Twisted-Python] Chat server
In-Reply-To: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>
References: <2e6659dd0708270949k7559005fp881ceca598028f76@mail.gmail.com>
Message-ID: <1188348530.16429.2.camel@phucku>

You could just build a tcp server and write your own protocol to handle
commands between the client and the server.  I have example of basic way
of handling this using XML as the wrapper around the packets if
interested.

On Mon, 2007-08-27 at 13:49 -0300, Tomas Neme wrote:
> I'm making an MMO game with several "levels" that will be distributed
> over different servers and need a centralized chat server. The general
> idea was to make an IRC (exarkun recommended Jabber but this is just a
> detail) server with channels like #all #<guild> #<room>, etcetera, and
> make the game client logon into it and let it handle all the chat
> data.
> 
> I've been reading t.words's tap and service but I'm not getting the
> general idea of what a chat service (with probably an offline
> messaging service) should look like, and what does all of the stuff
> underneath words do, and wether I need it or not if I'm not going to
> be multi-protocol'ed
> 
> Does anyone have a few pointers on what should I read before getting
> myself into it? words' documentation is not exactly throughout, so I'm
> kind of lost here
> 
> Tomás (Lacrymology)
> 




From matusis at yahoo.com  Wed Aug 29 02:05:32 2007
From: matusis at yahoo.com (Alec Matusis)
Date: Wed, 29 Aug 2007 01:05:32 -0700
Subject: [Twisted-Python] matching ip ranges
Message-ID: <006501c7ea13$5ffb9570$1ff2c050$@com>

We need to match IP ranges of connections, were ranges are specified in the
"/" notation (e.g. 10.10.2.0/24)

What is the best way to do this without consuming too much CPU resources
when the connection rate is very high? 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070829/9a1489d7/attachment.html>

From maarten at treewalker.org  Wed Aug 29 02:32:10 2007
From: maarten at treewalker.org (Maarten ter Huurne)
Date: Wed, 29 Aug 2007 10:32:10 +0200
Subject: [Twisted-Python] matching ip ranges
In-Reply-To: <006501c7ea13$5ffb9570$1ff2c050$@com>
References: <006501c7ea13$5ffb9570$1ff2c050$@com>
Message-ID: <200708291032.17757.maarten@treewalker.org>

On Wednesday 29 August 2007, Alec Matusis wrote:
> We need to match IP ranges of connections, were ranges are specified in the
> "/" notation (e.g. 10.10.2.0/24)
>
> What is the best way to do this without consuming too much CPU resources
> when the connection rate is very high?

Convert the IP address to an integer and check using an AND mask:

if ip & mask == base:
  # in range

where "ip" is the IP address of the incoming connection as an integer, "mask" 
is the netmask as an integer (/24 => 0xFFFFFF00) and "base" is the lowest IP 
address in the range ("base & mask == base" must hold).

Bye,
		Maarten
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part.
URL: </pipermail/twisted-python/attachments/20070829/cac96dfd/attachment.sig>

From general at eepatents.com  Wed Aug 29 09:55:34 2007
From: general at eepatents.com (Ed Suominen)
Date: Wed, 29 Aug 2007 11:55:34 -0400
Subject: [Twisted-Python] matching ip ranges
In-Reply-To: <006501c7ea13$5ffb9570$1ff2c050$@com>
References: <006501c7ea13$5ffb9570$1ff2c050$@com>
Message-ID: <46D596F6.3090204@eepatents.com>

Alec Matusis wrote:
> We need to match IP ranges of connections, were ranges are specified in
> the “/” notation (e.g. 10.10.2.0/24)
> 
> What is the best way to do this without consuming too much CPU resources
> when the connection rate is very high?

Take a look at the AddressRestrictorMixin in twisted_goodies.misc:

http://foss.eepatents.com/trac/Twisted-Goodies/browser/projects/Twisted-Goodies/trunk/twisted_goodies/misc/__init__.py

Best regards, Ed



From imgrey at gmail.com  Thu Aug 30 02:09:27 2007
From: imgrey at gmail.com (Vitaliyi)
Date: Thu, 30 Aug 2007 11:09:27 +0300
Subject: [Twisted-Python] AsynQueue
Message-ID: <3aac340708300109k65fa5b56q684ada791edf8885@mail.gmail.com>

Good Day

Does someone have an idea how to use AQ remotely with PB ?
I was unable to find any documentation and stuck in trying to make it
work as expected.


Thanks



From abierbaum at gmail.com  Thu Aug 30 09:57:39 2007
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 30 Aug 2007 09:57:39 -0600
Subject: [Twisted-Python] deferToThread crashing on Windows, stable on Linux
Message-ID: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>

I have run into an interesting little bug and before I try to hunt it
down further I wanted to check and see if anyone else has seen
anything similar.

I have a fairly complex twisted 2.5 application that uses
deferToThread to spawn off worker threads that need to call some
blocking non-twisted code (query webserver, query database, etc).  The
application uses these workers quite a bit but there are normally
never more then 2 or 3 outstanding requests running.

The application runs rock-solid on Linux, but it crashes in less then
a minute on Windows.

Has anyone else seen anything like this?  Are there any known issues
of deferToThread being less stable on Windows then Linux or are their
any differences between how twisted works on the platforms that I
should be looking into?

-Allen



From lists at dirk-loss.de  Thu Aug 30 10:08:01 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Thu, 30 Aug 2007 18:08:01 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <m27ingajlo.fsf@valheru.db3l.homeip.net>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>	<46D1E155.1040508@dirk-loss.de>
	<m27ingajlo.fsf@valheru.db3l.homeip.net>
Message-ID: <46D6EB61.80100@dirk-loss.de>

David Bolen wrote:
> Not sure if it helps, but here's some old code of mine where I
> experimented with the echo SSL examples to add symmetric certificate
> checking.

Thank you very much for your code. It's useful to see that the peer cert 
could be interpreted in the _verify callback. And your method to 
retrieve all X.509 attributes is quite clever. :)

But I could not get your SSL server and client to work. At least not 
completely: After printing the server's certificates (server.pem and 
ca.pem), the client quits with the following error:

_verify (ok=1):
...
errnum 0, errdepth 0
connection lost (protocol)
connection lost: [('SSL routines', 'SSL3_READ_BYTES', 'sslv3 alert 
certificate unknown'), ('SSL routines', 'SSL3_READ_BYTES', 'ssl 
handshake failure')]

Maybe there's some problem with my certificates. I had successfully 
tested them with OpenSSL, though:

openssl s_server -accept 9000 -Verify 9 -cert server.pem -CAfile ca.pem
openssl s_client -connect localhost:9000 -verify 9 -cert client.pem 
-CAfile ca.pem

(In your code I replaced the "ca/ca.cert" and "ca/all-cas.cert" 
filenames with "ca.pem".)

I get the same error if I use your server and OpenSSL as a client.

If you have any idea, I'll be happy to hear from you again.

For now I will just use use the second method I mentioned in my original 
post: getting the peer certificate in dataReceived() instead of 
connectionMade(). This at least avoids the ugly do_handshake() polling 
loop I had been using. But there's still some DoS risk because a 
malicious client could just wait forever before sending any data (and 
thus before authentication.)

Regards
Dirk



From arkanes at gmail.com  Thu Aug 30 10:39:42 2007
From: arkanes at gmail.com (Chris Mellon)
Date: Thu, 30 Aug 2007 11:39:42 -0500
Subject: [Twisted-Python] deferToThread crashing on Windows,
	stable on Linux
In-Reply-To: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
References: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
Message-ID: <4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>

On 8/30/07, Allen Bierbaum <abierbaum at gmail.com> wrote:
> I have run into an interesting little bug and before I try to hunt it
> down further I wanted to check and see if anyone else has seen
> anything similar.
>
> I have a fairly complex twisted 2.5 application that uses
> deferToThread to spawn off worker threads that need to call some
> blocking non-twisted code (query webserver, query database, etc).  The
> application uses these workers quite a bit but there are normally
> never more then 2 or 3 outstanding requests running.
>
> The application runs rock-solid on Linux, but it crashes in less then
> a minute on Windows.
>
> Has anyone else seen anything like this?  Are there any known issues
> of deferToThread being less stable on Windows then Linux or are their
> any differences between how twisted works on the platforms that I
> should be looking into?
>
> -Allen

I use deferToThread heavily for the same thing on Windows and haven't
seen any crashes. I would double and triple check the threadsafety of
the APIs you are calling.



From abierbaum at gmail.com  Thu Aug 30 11:10:23 2007
From: abierbaum at gmail.com (Allen Bierbaum)
Date: Thu, 30 Aug 2007 11:10:23 -0600
Subject: [Twisted-Python] deferToThread crashing on Windows,
	stable on Linux
In-Reply-To: <4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>
References: <bea9869d0708300857j5bce811fk49abe3386a3079a6@mail.gmail.com>
	<4866bea60708300939p67dc0fb0xdb0cf73b99f593e7@mail.gmail.com>
Message-ID: <bea9869d0708301010s30b13ea4q977b5fb8b4334cb@mail.gmail.com>

Ok.  I will start searching the code.

This may be more of a python question, but my crash ends up being:

Unhandled exception at 0x1e0ab834 in python.exe: 0xC0000005: Access
violation reading location 0x00005526.

I can go into visual studio and see the C/C++ call stack, but this
doesn't let me see the python callstack.  Is there a good way to get a
the python callstack (for multiple threads) when bug triggers on the
C/C++ side of the fence?

-Allen

On 8/30/07, Chris Mellon <arkanes at gmail.com> wrote:
> On 8/30/07, Allen Bierbaum <abierbaum at gmail.com> wrote:
> > I have run into an interesting little bug and before I try to hunt it
> > down further I wanted to check and see if anyone else has seen
> > anything similar.
> >
> > I have a fairly complex twisted 2.5 application that uses
> > deferToThread to spawn off worker threads that need to call some
> > blocking non-twisted code (query webserver, query database, etc).  The
> > application uses these workers quite a bit but there are normally
> > never more then 2 or 3 outstanding requests running.
> >
> > The application runs rock-solid on Linux, but it crashes in less then
> > a minute on Windows.
> >
> > Has anyone else seen anything like this?  Are there any known issues
> > of deferToThread being less stable on Windows then Linux or are their
> > any differences between how twisted works on the platforms that I
> > should be looking into?
> >
> > -Allen
>
> I use deferToThread heavily for the same thing on Windows and haven't
> seen any crashes. I would double and triple check the threadsafety of
> the APIs you are calling.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From db3l.net at gmail.com  Thu Aug 30 13:47:57 2007
From: db3l.net at gmail.com (David Bolen)
Date: Thu, 30 Aug 2007 15:47:57 -0400
Subject: [Twisted-Python] Re: SSL: Getting the client certificate
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>
	<46D1E155.1040508@dirk-loss.de>
	<m27ingajlo.fsf@valheru.db3l.homeip.net>
	<46D6EB61.80100@dirk-loss.de>
Message-ID: <m2wsvcerde.fsf@valheru.db3l.homeip.net>

Dirk Loss <lists at dirk-loss.de> writes:

> But I could not get your SSL server and client to work. At least not
> completely: After printing the server's certificates (server.pem and
> ca.pem), the client quits with the following error:

Did you fix the stray "False" I left in the server _verify routine?  I
just noticed that it was still there from when I tested (before
writing the response), so instead of returning the value of "ok" it's
explicitly failing in all cases.

Sorry about that.

-- David




From lists at dirk-loss.de  Thu Aug 30 14:07:01 2007
From: lists at dirk-loss.de (Dirk Loss)
Date: Thu, 30 Aug 2007 22:07:01 +0200
Subject: [Twisted-Python] SSL: Getting the client certificate
In-Reply-To: <m2wsvcerde.fsf@valheru.db3l.homeip.net>
References: <20070826190540.8162.1393804082.divmod.quotient.1675@ohm>	<46D1E155.1040508@dirk-loss.de>	<m27ingajlo.fsf@valheru.db3l.homeip.net>	<46D6EB61.80100@dirk-loss.de>
	<m2wsvcerde.fsf@valheru.db3l.homeip.net>
Message-ID: <46D72365.9070403@dirk-loss.de>

David Bolen wrote:
> Did you fix the stray "False" I left in the server _verify routine?

Oh. I just overlooked that. Now everything works fine. :)

Thanks again.

Dirk




From beau at subobscur.us  Fri Aug 31 17:36:47 2007
From: beau at subobscur.us (Beau Hargis)
Date: Fri, 31 Aug 2007 16:36:47 -0700 (PDT)
Subject: [Twisted-Python] Possible to delay connectTCP?
Message-ID: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>

I have an application which connects to a machine which has 50-60 ports open on it to receive data (each for a different region). It acts like a switch. Problem is that when I make all those connection requests at the same time the server falls over trying to handle all the connections requests from my application. I cannot control or change the behaviour of the server I am connecting to, however, I am also unable to find a way to easily to add a delay between connection requests in twisted (without blocking the reactor), so that only 2 or 3 start up at a time.

Is there an elegant and clean way to do such a thing? Twisted has worked beautifully for everything else, but I can't replace this one server for a while until I can duplicate the rest of its functionality, so I am dependant on it providing the data.






From radix at twistedmatrix.com  Fri Aug 31 17:56:02 2007
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 31 Aug 2007 19:56:02 -0400
Subject: [Twisted-Python] Possible to delay connectTCP?
In-Reply-To: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>
References: <451999.7147.qm@web704.biz.mail.mud.yahoo.com>
Message-ID: <60ed19d40708311656u33457149s8eb9f3d4d5a61cf7@mail.gmail.com>

On 8/31/07, Beau Hargis <beau at subobscur.us> wrote:
>
> I have an application which connects to a machine which has 50-60 ports
> open on it to receive data (each for a different region). It acts like a
> switch. Problem is that when I make all those connection requests at the
> same time the server falls over trying to handle all the connections
> requests from my application. I cannot control or change the behaviour of
> the server I am connecting to, however, I am also unable to find a way to
> easily to add a delay between connection requests in twisted (without
> blocking the reactor), so that only 2 or 3 start up at a time.
>
> Is there an elegant and clean way to do such a thing? Twisted has worked
> beautifully for everything else, but I can't replace this one server for a
> while until I can duplicate the rest of its functionality, so I am dependant
> on it providing the data.


The way to delay (that is, schedule) function calls until a later point in
time is reactor.callLater(seconds, callable, *args, **kwargs).

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20070831/2e53799d/attachment.html>

