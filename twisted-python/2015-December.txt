From mithrandi at mithrandi.net  Tue Dec  1 00:35:15 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 01 Dec 2015 07:35:15 +0000
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
Message-ID: <CAMcKhMTUe_UvFHhZmQfabnOV_1d_aqXiKrY+mEo+tWJ_dqKTHA@mail.gmail.com>

On Mon, 30 Nov 2015 at 16:50 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> The migration will have a handful of policy changes that we will have to
> resolve -- such as ensuring that all merges have a topfile -- which aren't
> possible under a GitHub based system.


You could make master/trunk/whatever a protected branch, and have a
required status check for this, but that would require some external CI
thing that actually performs the status check.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/192c4fde/attachment.html>

From hawkowl at atleastfornow.net  Tue Dec  1 01:07:08 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 1 Dec 2015 16:07:08 +0800
Subject: [Twisted-Python] Supported Platform Changes: Fedora 23 (3.4) &
	Ubuntu 15.10 (2.7, 3.5) Added, Fedora 21 (2.7, 3.4) Removed
Message-ID: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>

Hi everyone,

Three new platforms have been added as supported platforms for Twisted:

- Fedora 23, Python 3.4 (2.7 has test failures, will become supported soon)
- Ubuntu 15.10, Python 2.7
- Ubuntu 15.10, Python 3.5

Additionally, Fedora 21 has gone End Of Life and its builders have been removed.

Regards,

Amber Brown
Twisted Infrastructure Owl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/bc4ea044/attachment.pgp>

From glyph at twistedmatrix.com  Tue Dec  1 01:30:00 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Dec 2015 00:30:00 -0800
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel
	is ready for traffic?
In-Reply-To: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
References: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
Message-ID: <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>


> On Nov 30, 2015, at 4:17 PM, Naveen Michaud-Agrawal <naveen.michaudagrawal at gmail.com> wrote:
> 
> Hi,
> 
> I've managed to implement ssh tunneling using this answer on SO - http://stackoverflow.com/a/23549091/5605324 <http://stackoverflow.com/a/23549091/5605324>, and the tunnel can be used from another app. However I would like to use it from within the twisted application, but I'm not sure what to wire up so that I can get a callback when the SSHConnectForwardingChannel is ready for traffic. It looks like I can attach a callback to channel's _channelOpenDeferred, but that seems a bit hacky. Any suggestions?

Don't use listenTCP. Use endpoints: https://twistedmatrix.com/documents/15.5.0/core/howto/endpoints.html 

Once you have adopted endpoints, it (hopefully) becomes clear that one way to do what you want is to create your own in-process IStreamServerEndpoint implementation, and pass 'factory' in that answer to its 'listen' method, you can deliver data for it to relay to the remote port by calling its '.dataReceived' method, and implement your own '.write' method on your transport in order to deliver data to your application.  There's nothing magical about these methods, after all, they're just Python functions - and forwarding.SSHListenForwardingFactory just expects to talk to a transport, it shouldn't matter what kind it is.  (It might need to implement other interfaces, like ITCPTransport; not everything in Twisted is scrupulously careful about declaring what exact interface it needs, and there are often bugs in edge-cases like this.  But those are also just a few more methods you can implement, if necessary.)

Does this make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/6a578f67/attachment.html>

From jml at mumak.net  Tue Dec  1 03:40:38 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 01 Dec 2015 10:40:38 +0000
Subject: [Twisted-Python] Supported Platform Changes: Fedora 23 (3.4) &
 Ubuntu 15.10 (2.7, 3.5) Added, Fedora 21 (2.7, 3.4) Removed
In-Reply-To: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>
References: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>
Message-ID: <CAHZ8tnZM5J0ZdL=Zzh6vi9PDBe0oU5rBvcCjodR7QURrGdM9Bw@mail.gmail.com>

Thank you Amber!

On Tue, 1 Dec 2015 at 08:07 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Three new platforms have been added as supported platforms for Twisted:
>
> - Fedora 23, Python 3.4 (2.7 has test failures, will become supported soon)
> - Ubuntu 15.10, Python 2.7
> - Ubuntu 15.10, Python 3.5
>
> Additionally, Fedora 21 has gone End Of Life and its builders have been
> removed.
>
> Regards,
>
> Amber Brown
> Twisted Infrastructure Owl
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/7afcc846/attachment.html>

From naveen.michaudagrawal at gmail.com  Tue Dec  1 09:30:20 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Tue, 1 Dec 2015 11:30:20 -0500
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel
 is ready for traffic?
In-Reply-To: <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>
References: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
 <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>
Message-ID: <CANmJQmm2HSA00tKKcoZhYR941Hn+iGPPBrb-faTMGpkwyfmxqQ@mail.gmail.com>

Yes it does. It looks like endpoints will also help in implementing the
next piece which is to support connections over SSL (instead of SSH
tunnelling). I haven't really used twisted since 8.0 - looks like I have a
lot of catching up to do! Thanks for the quick response.

Regards,
Naveen

On Tue, Dec 1, 2015 at 3:30 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 30, 2015, at 4:17 PM, Naveen Michaud-Agrawal <
> naveen.michaudagrawal at gmail.com> wrote:
>
> Hi,
>
> I've managed to implement ssh tunneling using this answer on SO -
> http://stackoverflow.com/a/23549091/5605324, and the tunnel can be used
> from another app. However I would like to use it from within the twisted
> application, but I'm not sure what to wire up so that I can get a callback
> when the SSHConnectForwardingChannel is ready for traffic. It looks like I
> can attach a callback to channel's _channelOpenDeferred, but that seems a
> bit hacky. Any suggestions?
>
>
> Don't use listenTCP. Use endpoints:
> https://twistedmatrix.com/documents/15.5.0/core/howto/endpoints.html
>
> Once you have adopted endpoints, it (hopefully) becomes clear that one way
> to do what you want is to create your own in-process IStreamServerEndpoint
> implementation, and pass 'factory' in that answer to its 'listen' method,
> you can deliver data for it to relay to the remote port by calling its
> '.dataReceived' method, and implement your own '.write' method on your
> transport in order to deliver data to your application.  There's nothing
> magical about these methods, after all, they're just Python functions - and
> forwarding.SSHListenForwardingFactory just expects to talk to a transport,
> it shouldn't matter what kind it is.  (It might need to implement other
> interfaces, like ITCPTransport; not everything in Twisted is scrupulously
> careful about declaring what exact interface it needs, and there are often
> bugs in edge-cases like this.  But those are also just a few more methods
> you can implement, if necessary.)
>
> Does this make sense?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
-----------------------------------
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/12ecb3d9/attachment-0001.html>

From jml at mumak.net  Tue Dec  1 11:36:06 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 01 Dec 2015 18:36:06 +0000
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>

On Tue, 17 Nov 2015 at 23:48 Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>> For now, the funds were raised to migrate to GitHub, so we can not use
>> them to do other things.
>>
>> We will stay on Trac for issues... at least for now.
>>
>> I have no idea how we can migrate to any issue tracker without losing
>> data if we don't have full access to the database.
>>
>
>
> [snip]


> B.7  Update all wiki documentation to change all references to getting
> code from Subversion,
>          to getting code from GitHub.
>
>
Probably would be a good idea to have a list of such changes *before* the
migration.


> B.8  Update all systems which used Subversion to use GitHub.  For example,
> buildbots.
>
>
Couldn't we do this before the migration anyway?  At least partly?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/d4544e1d/attachment.html>

From glyph at twistedmatrix.com  Tue Dec  1 18:01:34 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Dec 2015 17:01:34 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
Message-ID: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>


> On Dec 1, 2015, at 10:36 AM, Jonathan Lange <jml at mumak.net> wrote:
> 
> B.7  Update all wiki documentation to change all references to getting code from Subversion,
>          to getting code from GitHub.
> 
> 
> Probably would be a good idea to have a list of such changes *before* the migration. 

Yes. Everything should be written up and reviewed beforehand, and 

> B.8  Update all systems which used Subversion to use GitHub.  For example, buildbots.
> 
> 
> Couldn't we do this before the migration anyway?  At least partly?

Well, I mean... this is "the migration" itself.  So this should happen earlier in the process, particularly earlier than we start committing directly to git?  Much of this work is already done: the buildbots are already getting the source from git, not SVN.

One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151201/bcf968f0/attachment.html>

From glyph at twistedmatrix.com  Wed Dec  2 15:39:08 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Dec 2015 14:39:08 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <A528F31A-5FDA-4C3C-B5A7-3324616F9AFE@twistedmatrix.com>


> On Nov 19, 2015, at 3:50 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 18 Nov 2015, at 12:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
> 
> Sorry about the delay in responding to this, but I wanted to make sure I knew at least a bit about what I was talking about before I responded!

Clearly this is a challenging topic that requires lots of thought on the part of each interlocutor, and may require long rounds of consideration before each reply.  No need to apologize.

>>> What do people think of this approach?
>> 
>> So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.
>> 
>> I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).
> 
> So, I think in general this is interesting. One of the big difficulties I?m having right now is that I?m trying to combine this ?streaming HTTP? work with the implementation of HTTP/2, which means that I need to keep the HTTP/2 work in mind whenever I talk about this *and* update the HTTP/2 design in response to decisions we make here. This means I?ve got quite a lot of balls in the air right now, and I am confident I?ll drop quite a few. One thing I?m deliberately not doing here is considering Tubes, in part because I?m extremely concerned about backward compatibility, and want the HTTP/2 work to function in the same environment.
> 
> Unfortunately, this means this conversation is blending into the HTTP/2 one, so I?m going to hijack this thread and bring in some concrete discussion of what I?m working on with the HTTP/2 stuff.

Hijack away.  I think we should be primarily concerned with getting HTTP/2 integrated for the moment.  The reason this raises so many concerns related to the streaming stuff is that the internal implementation of HTTP/2 ought to be more amenable to pulling apart to fit into an actually good interface to the HTTP protocol.

I think that twisted._threads points in a promising direction for this sort of work: let's make the old, crappy HTTP APIs work as-is, but with a new, private implementation that is better-factored but not fully documented.  We have the old interface as a proof-of-concept, so the new stuff needs to at least be good enough to be an internal implementation detail for that; we don't have to commit to a new public API to land it, and hopefully with some minor edits we can just make it public as the "good" interface (and then backport HTTP/1.1 over it, since we will probably be dealing with legacy HTTP/1.1 clients and servers until we're all dead).

> I was having a conversation about the HTTP/2 architecture on #twisted-dev yesterday, which has led towards my current working approach for HTTP/2, which will be to have two underlying objects. We?ll have H2Connection, which implements IProtocol, and H2Stream, which implements ITransport. These two objects will be *extremely* tightly coupled: H2Stream cannot meaningfully run over an arbitrary transport mechanism, and knows a great deal about how H2Connections work.

This seems good, except for the "extreme" tight coupling.  IProtocol and ITransport aren't that tightly coupled.  Why do H2Stream and H2Connection need to be?

> The reason we need to take this approach is because IConsumer doesn?t allow for us to have correlators, so even if we only had H2Connection it wouldn?t be able to identify a given producer with the stream it holds. By extension, IConsumer cannot consume multiple producers at once. For this reason, we need an interface between H2Connection and H2Stream that is similar to ITransport and IConsumer, but more featureful. Basically, H2Stream is a thin shim between a producer and H2Connection that adds a stream ID to a few function calls.

This is basically a good pattern.  It exposes a hard-to-screw-up interface to the next layer up, because you can't forget to include a (mandatory) stream ID.  I've implemented several multiplexing things that work more or less like this.

>> Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.
>> 
>> This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.
>> 
>> This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.
> 
> Just let me clarify how this is expected to work. Somewhere we have a t.w.s.Site, which builds some kind of HTTP protocol (currently HTTPChannel, in future some object that can transparently swap between HTTPChannel and H2Connection) when connections are received.

Another option could also be having a t.w.s.NewSite (with that name hopefully obviously being a straw man) so that Site can simply be deprecated in favor of the new thing.  Making Site itself be able to accommodate the new stuff would be nice but is definitely not mandatory.

> These two protocols each build an IGoodRequest, which is very similar to IRequest but has a deliverBody method. The consumer of this (whether IResource or some other thing). These objects, if they want to consume a stream, register a protocol via deliverBody. At this point, H2Connection (via H2Stream) provides itself as the transport to that protocol, and calls deliverBody when chunks of data are received.

This sounds great.  One thing to maybe watch out for: what if nobody calls deliverBody?  This can sometimes be a little annoying in client code, to debug why a channel is never closed.  Having a nice error in this case would be a cherry on top.

> When the object receiving the request is ready to send a response, it calls?something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

A minor bit of critique here: the Single Responsibility Principle <https://en.wikipedia.org/wiki/Single_responsibility_principle> dictates that we ought not to have H2Stream literally implement both IProtocol and ITransport; rather, we should have an _H2StreamProtocol and an _H2StreamTransport, since the thing talking to the IProtocol implementation really ought to be wholly distinct from the thing talking to the ITransport implementation, and this kind of duality makes it very easy for users - especially programmers new to Twisted - to get confused.  As Nathaniel Manista and Augie Fackler put it in The Talk <https://www.youtube.com/watch?v=3MNVP9-hglc>, we want to express ourselves "structurally", if you only want application code to talk to the transport implementation and it's an error to talk to the protocol implementation, pass only the transport implementation.

> Is my understand of that correct? If so, I think this design can work: essentially, H2Stream becomes the weird intermediary layer that appears as both a transport and a protocol to the request/response layer. Underneath the covers it mostly delegates to H2Connection, which implements a slightly weirdo version of IConsumer (and in fact IProducer) that can only be consumed by H2Stream.

I don't quite get why it needs to be slightly weirdo (hopefully IPushProducer is sufficient?) but yes, this all sounds right to me.

> 
>> Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.
>> 
>> Then the question is: what to do with IResource?
>> 
>> Right now the flow of processing a request is, roughly:
>> 
>> -> wait for full request to arrive
>>  -> have HTTPChannel fill out IRequest object
>> -> look at request.site.resource for the root
>> *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
>>  -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
>> *-> call resource.render(request)
>> -> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open,
>> 
>> Instead, I think a good flow would be:
> 
> [snip long discussion of how to write locateChild]
> 
> Agreed that these proposed approaches would work well. I have no concrete feedback on them, they seem good to me.
> 
>> -> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.
>> 
>> The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.
> 
> This seems super-gross but vaguely do-able, and we?ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.

"super-gross but vaguely do-able" is what we're shooting for in the compatibility layer :).

> All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I?m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we?ll see how it goes.

It might be useful to think about a parent interface, IHTTPChannel with all the least-common-denominator stuff on it, and sub-interfaces IHTTP1_1Channel and IHTTP2_0Channel which each derive from that and provide additional version-specific stuff.  I don't have enough protocol-specific knowledge to hand in short-term memory to comment on what that functionality might be though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151202/8cbc1551/attachment-0001.html>

From meejah at meejah.ca  Wed Dec  2 22:09:57 2015
From: meejah at meejah.ca (meejah)
Date: Thu, 03 Dec 2015 09:09:57 +0400
Subject: [Twisted-Python] txtorcon 0.14.2
Message-ID: <86bna815ju.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

With Twisted 15.5.0, a deprecated endpoint interface class is still
being used. This release backports the fix for that to the 0.14.x
branch.

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.14.2
   https://github.com/meejah/txtorcon/releases/tag/v0.14.2

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2.tar.gz.asc
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2-py2-none-any.whl
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2-py2-none-any.whl.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
fbc95c41e924b0e10156c46227eac2b4acf42a3b8d01f0ea3022897a10dc059a  txtorcon-0.14.2-py2-none-any.whl
f99819b1a71b8dea9e80317ec83c990b4ff608c98bc78a9fc1dc9991d349d13f  txtorcon-0.14.2.tar.gz
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJWX3WRAAoJEMJgKAMSgGmnOasH/i3NuaGRXu/wgdSHwDldPCpt
FCVFXN9RT8nTV8EN72V1iwqW0ir38YG8rM9TVNbImZlPFbMLaV0zJsb+rNId5xgb
uNBnlzrzdJOtlgofg4aKHBHjvDioV4xrZiypzOOc5u2Hyd8xuOPkI3fEVx+QfaKA
Cjbys6lCM2HZpeWkHlPKM3xnN9BoJ7IZodbv54fEehR5MgljkgwCoQJOdDy8tf9L
FQmpDXb7ptNXqbHNUltg8zkyIt345u6XcvZWX8wCxVu4PHCucdUW0VWzq33dNCuA
jbGvsesrJsr6+2a6wMq0FXJByaU1ymkwdp0OV55ASdNg5KBcfh4Sf4gMNiYGQw8=
=bBHR
-----END PGP SIGNATURE-----


From jon at multani.info  Thu Dec  3 02:02:51 2015
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 03 Dec 2015 10:02:51 +0100
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <56586B1A.6090200@imperial.ac.uk>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
 <56586B1A.6090200@imperial.ac.uk>
Message-ID: <5659D862.8060307@multani.info>

On 11/27/2015 03:39 PM, Phil Mayers wrote:
> On 27/11/15 14:05, Jonathan Ballet wrote:
>>    - how many tries did it require
>>      * if there were several tries, the timing of each ones
> 
> Typically, application-layer code doesn't retry a DNS lookup; rather 
> the
> c or other runtime will handle this, for example getaddrinfo() in 
> glibc,
> according to settings read from /etc/resolv.conf or compiled-in 
> defaults.
> 
> So it depends on whether you want to emulate "typical" application 
> code,
> a specific application stack that may or may not do it's own resolution
> (e.g. modern browsers) or something else.

That's a fair point, and I would like, as best as it can, to be as close 
as possible as a "typical" application; the goal really would be to 
measure the network conditions the applications are facing.

Although I understand I won't be able to get the retries number if the 
underlying code is using getaddrinfo() or something like this, I was 
thinking that twisted.names was maybe offering a "hand-made" resolver, 
which was producing the UDP packets itself and offered a way to plug 
some code there to measure these retries; I haven't checked yet.

But in any case, I guess it's going a little bit against my previous 
point which was to try to measure things "as used by a 'typical' 
application" (which isn't going to use twisted.names custom resolver.)

(Actually, I was surprised to discover that, although it can be 
configured from the command-line, `dig` doesn't report the number of 
tries/retries it makes, you can only deduce it by looking at the overall 
command execution time.)

>> * how long does it take to get the first bytes of the endpoint
>>    - how long does it take to complete the TCP connection handshake
>>    - the status of the packets exchanged (how many retries, how many
>> packets lost, etc.)
> 
> Some of this is available in platform-specific APIs e.g. SIOCGSTAMP and
> TCP_INFO socket options available on Linux.
> 
> In general, any timings you make based on return of control from kernel
> will include error relating to system/scheduling issues. If you're
> concerned about getting raw, on-the-wire timings, this is extremely
> difficult without being in-kernel, and even then various issues - TCP
> offload for example - can end up hiding data from you.

I will have a look at these options, as I will be running my tests under 
Linux anyway.
It's probably out of scope of Twisted anyway, but I could also retrieve 
the packets sent on the wire by listening on the related network 
interface set in promiscuous mode and correlate packets together. It's 
... "slightly" more work though...

>> How far can I do this kind of things with Twisted? I know I can 
>> somewhat
>> easily get the timings of the name resolution, the TCP connection
>> handshake also and the time to first byte(s), but what about the
>> packets? I haven't look at the code of Twisted Names yet, but if it's
>> doing the DNS request by itself, I may be able to plug-in somewhere 
>> and
>> have my request counter and the timers associated, but I'm not sure if
>> the underlying details of the TCP protocol are exposed to the upper
>> layer such as Twisted?
> 
> Only via platform-specific options.
> 
> To do this kind of thing "reliably", you'd need to reimplement TCP in
> user-space.
> 
> But the info above may be a helpful start.

Thanks for your answer Phil, I'll see what I can come up with!

  Jonathan


From naveen.michaudagrawal at gmail.com  Thu Dec  3 12:41:02 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Thu, 3 Dec 2015 14:41:02 -0500
Subject: [Twisted-Python] yielding from within deferToThread
Message-ID: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>

I'm trying to use sqlalchemy from a twisted application (by running all
blocking queries using deferToThread). Is it possible to yield from within
the function running in deferToThread? For example:


def threadRunQuery(engine, query):
    conn = engine.connect()
    res = conn.execute(query)

    while True:
        results = res.fetchmany(1000)
        if not results:
            break
        yield results


@defer.inlineCallbacks
def stream_results():
    engine = sqlalchemy.create_engine(...)
    query = "select * from table"
    result_iter = yield threads.deferToThread(threadRunQuery, engine, query)
    for results in result_iter:
        print results


It seems that the thread returns a generator, and so everything within
threadRunQuery is actually running on the main reactor thread. Is there
anyway to stream back results from a deferToThread?

Regards
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151203/59cffe83/attachment.html>

From naveen.michaudagrawal at gmail.com  Thu Dec  3 12:54:12 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Thu, 3 Dec 2015 14:54:12 -0500
Subject: [Twisted-Python] yielding from within deferToThread
In-Reply-To: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>
References: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>
Message-ID: <CANmJQm=FLPwa+5okpraLS=t-Ct3=7=KVp6SECNt+PGO81NWThg@mail.gmail.com>

To answer my own question, it looks like i can just pass sqlalchemy's
ResultProxy into deferToThread to make a blocking call to fetch the next
set of results:

@defer.inlineCallbacks
def stream_results():
    engine = sqlalchemy.create_engine(...)
    query = "select * from table"
    proxy = yield threads.deferToThread(engine.execute, query)
    while True:
        results = yield threads.deferToThread(proxy.fetchmany, 1000)
        if not results:
            break
        print results



On Thu, Dec 3, 2015 at 2:41 PM, Naveen Michaud-Agrawal <
naveen.michaudagrawal at gmail.com> wrote:

> I'm trying to use sqlalchemy from a twisted application (by running all
> blocking queries using deferToThread). Is it possible to yield from within
> the function running in deferToThread? For example:
>
>
> def threadRunQuery(engine, query):
>     conn = engine.connect()
>     res = conn.execute(query)
>
>     while True:
>         results = res.fetchmany(1000)
>         if not results:
>             break
>         yield results
>
>
> @defer.inlineCallbacks
> def stream_results():
>     engine = sqlalchemy.create_engine(...)
>     query = "select * from table"
>     result_iter = yield threads.deferToThread(threadRunQuery, engine,
> query)
>     for results in result_iter:
>         print results
>
>
> It seems that the thread returns a generator, and so everything within
> threadRunQuery is actually running on the main reactor thread. Is there
> anyway to stream back results from a deferToThread?
>
> Regards
> Naveen Michaud-Agrawal
>



-- 
-----------------------------------
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151203/c2e04a5e/attachment.html>

From rodrigc at crodrigues.org  Thu Dec  3 16:53:07 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 3 Dec 2015 15:53:07 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
Message-ID: <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>

On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> One thing that I'd love to see is a checklist that is kept up-to-date
> regarding which parts of this have already happened.
>
>
I worked with Amber and Adi and we have the checklist:
https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151203/a187e175/attachment.html>

From glyph at twistedmatrix.com  Thu Dec  3 20:07:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2015 19:07:49 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
Message-ID: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>


> On Dec 3, 2015, at 3:53 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.
> 
> 
> I worked with Amber and Adi and we have the checklist:
> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md <https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md>

Thank you very much for your participation in this.

The important thing about a "checklist" though, is checking things off - how will that be kept up to date in sync with what has actually happened?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151203/d91ac606/attachment.html>

From hawkowl at atleastfornow.net  Thu Dec  3 20:10:44 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 4 Dec 2015 11:10:44 +0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
 <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
Message-ID: <EF3EF915-E689-47C6-8F0D-1F3E0894AD9E@atleastfornow.net>


> On 4 Dec 2015, at 11:07, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 3, 2015, at 3:53 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> 
>> 
>> 
>> On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.
>> 
>> 
>> I worked with Amber and Adi and we have the checklist:
>> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md
> 
> Thank you very much for your participation in this.
> 
> The important thing about a "checklist" though, is checking things off - how will that be kept up to date in sync with what has actually happened?
> 
> -glyph

When it's accepted, we can make it a GItHub issue, and then we can, well, click on the checkbox. :)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/5a590bba/attachment.pgp>

From meejah at meejah.ca  Thu Dec  3 22:14:53 2015
From: meejah at meejah.ca (meejah)
Date: Fri, 04 Dec 2015 09:14:53 +0400
Subject: [Twisted-Python] ssl APIs
Message-ID: <86h9jyztf6.fsf@atlantis.meejah.ca>


I've been fooling around with the Twisted SSL APIs.

I'd like to add a "loadPEM" and documentation to ssl.KeyPair; shall I
open a ticket and start this, or is there a reason it doesn't have a
loadPEM() like some of the other classes (or any docstrings)? It is
exported as a public class in "ssl".

Also I'm wondering why CertificateOptions takes actual OpenSSL objects
for args, instead of the Twisted equivalents; this leads to code
accessing ".original" all the time if you use Twisted APIs to load
Certificate (and friends) which seems .. odd. Perhaps either a
Certificate *or* the correct underlying OpenSSL object could be
accepted?

There also doesn't seem to be a way around importing
OpenSSLCertificateAuthorities from _sslverify (i.e. "private" class) if
you want to give optionsForClientTLS() more than a single certificate as
trustRoot. The only way I can see is to construct one of those from a
list of OpenSSL certificate instances and pass that as trustRoot=

Thanks for any hints,

-- 
meejah


From glyph at twistedmatrix.com  Fri Dec  4 02:34:22 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 01:34:22 -0800
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <86h9jyztf6.fsf@atlantis.meejah.ca>
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
Message-ID: <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>


> On Dec 3, 2015, at 9:14 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> I've been fooling around with the Twisted SSL APIs.
> 
> I'd like to add a "loadPEM" and documentation to ssl.KeyPair; shall I
> open a ticket and start this, or is there a reason it doesn't have a
> loadPEM() like some of the other classes (or any docstrings)? It is
> exported as a public class in "ssl".

Please go ahead and do it.

> Also I'm wondering why CertificateOptions takes actual OpenSSL objects
> for args, instead of the Twisted equivalents; this leads to code
> accessing ".original" all the time if you use Twisted APIs to load
> Certificate (and friends) which seems .. odd. Perhaps either a
> Certificate *or* the correct underlying OpenSSL object could be
> accepted?

Wow!  I am so glad someone else finally noticed this! :-)

Basically: yes, this is odd.  It is a result of a miscommunication (or rather, lack of communication) between the designers and the maintainers of that system.

A long time ago, I designed a "just enough" API for TLS (for Vertex, even, not really for Twisted), which is what got adopted into Twisted and eventually became _sslverify.py.  However, this was very much incomplete; it wasn't really designed for the 99% use-case (running an HTTPS server).

OpenSSLCertificateOptions was just a private implementation detail; it was the object returned by PrivateCertificate.options().  (Hence its somewhat odd name: 'options', which has now become the convention; see optionsForClientTLS).  However, the signature of .options() was tough to extend, since it just takes "*authorities".  Given Vertex's use-case that sort of made sense but it really doesn't belong in the general-purpose library of twisted.internet.ssl.

Anyway, I digress: the point is that these classes were lying around, basically undocumented, when Hynek Schlawack showed up and began his otherwise excellent feature additions to Twisted's TLS stack, among .  When asked "what is the 'good' ContextFactory class", the answer he got was unanimously 'OpenSSLCertificateOptions'.  So he did what seemed reasonable: start adding features to that class, and then make it public.  I took my eye off the ball for a release or two and by the time I checked back, "CertificateOptions" was the recommended public interface, warts and all :).

I want to be clear that despite the fact that there are problems with the factoring here, if you're writing TLS server code with Twisted today you should absolutely be using CertificateOptions; its interface is crummy but its implementation is very solid; again, Hynek did some really excellent work.  As the interface changes, the implementation should stay largely the same.

If you want to fix this, rather than continue to mangle this architectural monstrosity, I think we should develop something symmetrical to the new, mostly pretty good optionsForClientTLS - https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.ssl.html#optionsForClientTLS <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.ssl.html#optionsForClientTLS> - which operates entirely in terms of high-level wrapper objects defined in twisted.internet.ssl.  Make an 'optionsForServerTLS', which can have a simpler interface, because it will just accept relevant configuration parameters for server TLS, and under the covers still use CertificateOptions.  Initially we can provide the 'extraCertificateOptions' escape-hatch as we have with 'optionsForClientTLS', but once we've got a nice way to deal with esoterica like selecting TLS protocol versions and selecting cipher suites in those APIs, we can deprecate and remove the escape-hatch and be left with a clean function. 

So, are you up for contributing an 'optionsForServerTLS'?

> There also doesn't seem to be a way around importing
> OpenSSLCertificateAuthorities from _sslverify (i.e. "private" class) if
> you want to give optionsForClientTLS() more than a single certificate as
> trustRoot. The only way I can see is to construct one of those from a
> list of OpenSSL certificate instances and pass that as trustRoot=


Yes, that is in fact an oversight.  No need to write a ticket up yourself; you can just fix this one:

https://twistedmatrix.com/trac/ticket/7671 <https://twistedmatrix.com/trac/ticket/7671>

Thanks a ton for your interest, it would be great to get more people interested in TLS to maintain this stuff!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/885634be/attachment.html>

From hawkowl at atleastfornow.net  Fri Dec  4 05:07:34 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 4 Dec 2015 20:07:34 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support from
	adbapi
Message-ID: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>

So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.

This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)

You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/12acf7bf/attachment.pgp>

From adi at roiban.ro  Fri Dec  4 05:51:01 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 4 Dec 2015 14:51:01 +0200
Subject: [Twisted-Python] Attaching the release number to a closed/merged
	ticket
Message-ID: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>

Hi,

I would like to ask you if you think that is a good idea to have the
version of Twisted in which the changes associated with a ticket.

The use case would be: Someone search the net for something related to
Twisted (a bug or some feature) and the land to a Trac ticket. Just by
looking at the Trac ticket that person should see if the ticket is still in
work, is invalid or changes were made in release YY.NN

-------

My proposal for implementing this is:

Each release will have a new milestone with the same name called
'next-release'.

Once the changes for a ticket were merged the ticket is assigned to the
'next-release' milestone.

When release is done, the next-release is renamed to the release name and
all previous tickets will be auto-updated.

A new milestone called 'next-release' is created.

Invalid or duplicate tickets should not have the 'next-relesese' milestone.

-----------

Amber commented that using milestones for such a thing is not a good idea
and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
keep milestones like Python-3 unchanged.

I don't like tags as when a ticket is landed we don't know if next release
will be16.0 or 15.6.

We can use a 'next-release' tag and when a release is done, check all
tickets and update their tag.

--------

Please send your suggestions and comments.

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/593b48fa/attachment.html>

From commercials24 at yahoo.de  Fri Dec  4 05:42:55 2015
From: commercials24 at yahoo.de (peter)
Date: Fri, 4 Dec 2015 13:42:55 +0100
Subject: [Twisted-Python]  twisted.web response.py questions
Message-ID: <56618A4F.2090207@yahoo.de>

hi,


looking over:
https://twistedmatrix.com/documents/14.0.2/_downloads/response.py


im not really sure why one would use the line:

self.remaining  =  1024  *  10


this suggest to me that one knew what kind of page size was 
expected...but what if you dont?
wouldnt it make more sense to use someting like this:

def dataReceived(self, bytes):
         self.page_content = self.page_content + bytes


this would sum up all the data until connectionLost is called.
and in connectionLost():

def  connectionLost(self,  reason):
         print  'Finished receiving body:',  reason.getErrorMessage()
         self.finished.callback(self.page_content)


and then print it?




also i dont get why one would use

  return  finished


in cbRequest. where is this finished returned to?
its called via:

d.addCallback(cbRequest)

isnt the result from cbRequest thrown away?
i would expect the line to read:
new_deferred = d.addCallback(cbRequest)



thx for your answers






_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From jasonjwwilliams at gmail.com  Fri Dec  4 11:00:14 2015
From: jasonjwwilliams at gmail.com (Jason Williams)
Date: Fri, 4 Dec 2015 10:00:14 -0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support
	from adbapi
In-Reply-To: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
References: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
Message-ID: <184B525E-81D1-46A5-ADBC-D7BFDBD9B3B6@gmail.com>

We don't use Gadfly but I really appreciate you mentioning the changes like this on the ML. :)

Sent via iPhone

> On Dec 4, 2015, at 04:07, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.
> 
> This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)
> 
> You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From rodrigc at crodrigues.org  Fri Dec  4 12:11:19 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 4 Dec 2015 11:11:19 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
 <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
Message-ID: <CAG=rPVcZydENHPFq==AfX=01t=HaVGb_iFKB2Ch4SPv-Zwzj2A@mail.gmail.com>

On Thu, Dec 3, 2015 at 7:07 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> The important thing about a "checklist" though, is checking things off -
> how will that be kept up to date in sync with what has actually happened?
>
>
The checklist is written using the GitHub flavored markdown syntax for
checklists:

https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments

so when the tasks are completed, this checklist will be updated by changing:

   [ ] task item foobar

to

  [X]  task item foobar

and committing the updated checklist to GitHub.

Adi and Amber are on board with this, so it should be fine.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/69ca9729/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  4 12:57:40 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 11:57:40 -0800
Subject: [Twisted-Python] OSCAR stopped working and we didn't notice
Message-ID: <805598AE-B564-4EE2-B0A1-3727D26834E0@twistedmatrix.com>

According to this stack overflow question:

http://stackoverflow.com/questions/34095372/python-twisted-words-protocols-oscar-default-implementation-no-longer-connects-t <http://stackoverflow.com/questions/34095372/python-twisted-words-protocols-oscar-default-implementation-no-longer-connects-t>

our OSCAR protocol implementation no longer works with the live AIM service.

I suspect we just need to bump some version numbers (we claim to be a version of Windows AIM from 2001 or so, I think) but it might be interesting to figure out some kind of integration testing strategy for these proprietary protocols so that we actually find out before users start posting stuff to random other websites.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151204/02e1b2b6/attachment.html>

From glyph at twistedmatrix.com  Fri Dec  4 17:17:10 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 16:17:10 -0800
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
Message-ID: <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>


> On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to ask you if you think that is a good idea to have the version of Twisted in which the changes associated with a ticket.
> 
> The use case would be: Someone search the net for something related to Twisted (a bug or some feature) and the land to a Trac ticket. Just by looking at the Trac ticket that person should see if the ticket is still in work, is invalid or changes were made in release YY.NN 
>  
> -------
> 
> My proposal for implementing this is:
> 
> Each release will have a new milestone with the same name called 'next-release'. 
> 
> Once the changes for a ticket were merged the ticket is assigned to the 'next-release' milestone.
> 
> When release is done, the next-release is renamed to the release name and all previous tickets will be auto-updated.
> 
> A new milestone called 'next-release' is created.
> 
> Invalid or duplicate tickets should not have the 'next-relesese' milestone.
> 
> -----------
> 
> Amber commented that using milestones for such a thing is not a good idea and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and keep milestones like Python-3 unchanged.
> 
> I don't like tags as when a ticket is landed we don't know if next release will be16.0 or 15.6.
> 
> We can use a 'next-release' tag and when a release is done, check all tickets and update their tag.
> 
> --------
> 
> Please send your suggestions and comments.

By "tags" do you mean "keywords"?  If so, couldn't we just use the 'landed-in-next' keyword and then have a little script that replaced it with 'landed-in-15.6' at the time of the release?

-glyph



From glyph at twistedmatrix.com  Fri Dec  4 18:29:24 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 17:29:24 -0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support
	from adbapi
In-Reply-To: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
References: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
Message-ID: <40243BCF-50F5-430F-B89B-0112AE4F6EEF@twistedmatrix.com>


> On Dec 4, 2015, at 4:07 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.
> 
> This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)
> 
> You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.
> 
> - Amber

I think the all-caps policy-compliant "INCOMPATIBLE CHANGE" was maybe a little overkill, given it's not actually incompatible under the policy definition, but thanks for announcing nonetheless :).

The purpose of testing with gadfly was just to have a database that didn't require an external process set up; I don't think anyone seriously used Gadfly ever.  So the modern equivalent would be sqlite3 - do we test against that?  (I seem to recall that we do...)

-glyph



From hawkowl at atleastfornow.net  Fri Dec  4 18:48:06 2015
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 05 Dec 2015 09:48:06 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly
	support	from adbapi
In-Reply-To: <40243BCF-50F5-430F-B89B-0112AE4F6EEF@twistedmatrix.com>
Message-ID: <bd90d8ac-1bdc-489f-aa4b-3c0f931e19ea@email.android.com>

We don't! Those tests never run, because "import sqlite" doesn't work on 2.7. Today's plan is to put up a patch to test stdlib sqlite3 and pysqlite2 :)

On 5 Dec 2015 09:29, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> > On Dec 4, 2015, at 4:07 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote: 
> > 
> > So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import. 
> > 
> > This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :) 
> > 
> > You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational. 
> > 
> > - Amber 
>
> I think the all-caps policy-compliant "INCOMPATIBLE CHANGE" was maybe a little overkill, given it's not actually incompatible under the policy definition, but thanks for announcing nonetheless :). 
>
> The purpose of testing with gadfly was just to have a database that didn't require an external process set up; I don't think anyone seriously used Gadfly ever.? So the modern equivalent would be sqlite3 - do we test against that?? (I seem to recall that we do...) 
>
> -glyph 
>
>
> _______________________________________________ 
> Twisted-Python mailing list 
> Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 

From snailcoder at 163.com  Sat Dec  5 21:30:26 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 6 Dec 2015 12:30:26 +0800 (CST)
Subject: [Twisted-Python] How to design /login and /logout resources with
 twisted.web.server.Session
Message-ID: <3952ac35.452c.151758e1b02.Coremail.snailcoder@163.com>

I'm trying to implement login/logout function for my app. Both /login and /logout are designed to be resource to provide RESTful web service. I guess those functions must interact with sessions and cookies, so I've read some documents such as https://twistedmatrix.com/documents/current/web/howto/web-in-60/session-store.html  and
https://twistedmatrix.com/documents/current/web/howto/web-in-60/session-endings.html


However, I still can't get how to use twisted.web.server.Session in my code. Is there any demo about this? Any help is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151206/1fa92365/attachment.html>

From adi at roiban.ro  Sun Dec  6 09:04:03 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 6 Dec 2015 18:04:03 +0200
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
Message-ID: <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>

On 5 December 2015 at 02:17, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > Hi,
> >
> > Please send your suggestions and comments.
>
> By "tags" do you mean "keywords"?  If so, couldn't we just use the
> 'landed-in-next' keyword and then have a little script that replaced it
> with 'landed-in-15.6' at the time of the release?
>
> -glyph
>
>
Sorry... I was talking about 'keywords'. As long as the info is there, in
some form of another, I am fine with any implementation.

At this stage I just wanted to see if other people find this useful and
make sense to put some effort in implementing this... and I was trying to
make some notes regarding the effort required to implement this.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151206/5848e067/attachment.html>

From glyph at twistedmatrix.com  Sun Dec  6 23:52:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 6 Dec 2015 22:52:23 -0800
Subject: [Twisted-Python] twisted.web response.py questions
In-Reply-To: <56618A4F.2090207@yahoo.de>
References: <56618A4F.2090207@yahoo.de>
Message-ID: <91133F64-BB36-4F28-8C21-47EA9DB4A076@twistedmatrix.com>


> On Dec 4, 2015, at 4:42 AM, peter <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> looking over:
> https://twistedmatrix.com/documents/14.0.2/_downloads/response.py
> 
> 
> im not really sure why one would use the line:
> 
> self.remaining  =  1024  *  10
> 
> 
> this suggest to me that one knew what kind of page size was expected...but what if you dont?

Then you'd have to read this expected size out of the content-length header or similar.  This file is just an example.

> wouldnt it make more sense to use someting like this:
> 
> def dataReceived(self, bytes):
>        self.page_content = self.page_content + bytes
> 
> 
> this would sum up all the data until connectionLost is called.
> and in connectionLost():
> 
> def  connectionLost(self,  reason):
>        print  'Finished receiving body:',  reason.getErrorMessage()
>        self.finished.callback(self.page_content)
> 
> 
> and then print it?

This might be a better example to start with, yes.  Please feel free to submit a doc patch doing just that.

> also i dont get why one would use
> 
> return  finished
> 
> 
> in cbRequest. where is this finished returned to?

It's a Deferred, which means that the next callback in the chain waits for it to fire.  This is there so that cbShutdown doesn't fire (and shutdown the reactor) until the response is fully received.

> its called via:
> 
> d.addCallback(cbRequest)
> 
> isnt the result from cbRequest thrown away?
> i would expect the line to read:
> new_deferred = d.addCallback(cbRequest)

It's not a new Deferred, it's the same Deferred; addCallback mutates the Deferred and then returns it.

> thx for your answers

Thanks for using Twisted :).

Hope this helps!

-glyph



From glyph at twistedmatrix.com  Mon Dec  7 00:12:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 6 Dec 2015 23:12:19 -0800
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
 <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
Message-ID: <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>


> On Dec 6, 2015, at 8:04 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 5 December 2015 at 02:17, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> > On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> >
> > Hi,
> >
> > Please send your suggestions and comments.
> 
> By "tags" do you mean "keywords"?  If so, couldn't we just use the 'landed-in-next' keyword and then have a little script that replaced it with 'landed-in-15.6' at the time of the release?
> 
> -glyph
> 
> 
> Sorry... I was talking about 'keywords'. As long as the info is there, in some form of another, I am fine with any implementation.
> 
> At this stage I just wanted to see if other people find this useful and make sense to put some effort in implementing this... and I was trying to make some notes regarding the effort required to implement this.
>  
> Thanks!

This would be super useful to me.  I frequently answer stack overflow questions where I want to say what release of Twisted a particular bug was fixed in, and it's unfortunately hard to discover.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151206/46c7acca/attachment.html>

From tom.prince at ualberta.net  Mon Dec  7 02:39:08 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:39:08 -0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <87fv02ov9b.fsf@hermes.hocat.ca>

> When the object receiving the request is ready to send a response, it calls?something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

Probably the reponse is provided via a deferred returned from the
function that received the request. Following the design of
twisted.web.client.Request, the request would take something like an
IBodyProducer that the stream would have write to it (Probably
indirectly: see
twisted.web._newclient.Request._writeToChuncked/_writeToContentLength).

  Tom


From tom.prince at ualberta.net  Mon Dec  7 02:39:09 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:39:09 -0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <87pozcpizn.fsf@hermes.hocat.ca>

After having written the following comments, I realized that my thoughts
are only about the high-level interface of Site/Resource. I think those
are the interfaces most users care about, so what it makes most sense to
think deeply about having a painless transiftion for. I suspect that if
people are using lower-level interfaces, they are probably willing to
make more invasive changes in order to be able to take advantage of
HTTP/2; in particular, since they likely have resaon to use HTTP/2
specific features.


> My proposal is to deprecate the current Request/Resource model. It
> currently functions and should continue to function, but as of this
> point we should consider it a bad way to do things, and we should push
> people to move to a fully asynchronous model.

It is probably possible to implement something like you suggest, without
having to change the model too much. As I understand it, the big
impediment to properly handling streaming requests is `.content` (and
some related convenience things like `.args`), and the fact that both
`.getChild` and `.render` are called after `.content` is populated. It
is probably possible to address those issues without changing the shape
of those interfaces (even if we change the names). I know #288 had at
least two suggestions on how to do that. One was to have a marker
interface, to indicate that a given Resource wants new behavior, where
`.content` isn't populated, and the other was to have new methods that
have new behavior, which default to slurping up everything and calling
the old functions.

On the other hand, there might be other stuff that wants cleaning up,
that having a break would be better at addressing; replacing
`NOT_DONE_YET` with deferreds comes to mind.


> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users. If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0), request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We?d also update requestReceived to ensure that it?s called when all the *headers* are received, rather than waiting for the body.

I haven't thought about this deeply, but my first thought, is that it
would be reasonable to mirror how the client handles streaming
responses. `Agent.request` returns `Response` as soon as the headers
have been received. To get the body of the response, you call
`Response.deliverBody` which takes an `IProtocol` that will receive the
body. There is also a helper `readBody` that wraps that and returns a
deferred that fires with body, once it has been received (and treq also
has ``collect`` that wraps that and calls a function with the bits of
the data).

> A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that?s a header users actually send, and if they don?t we chunk the data.

Regarding sending data, this is already what we do (at least as long as
the client is speaking HTTP/1.1).

  Tom


From tom.prince at ualberta.net  Mon Dec  7 02:44:09 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:44:09 -0000
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
Message-ID: <87d1v5p3d2.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> Tom Prince discovered a regression on https://twistedmatrix.com/trac/ticket/7016#comment:14 <https://twistedmatrix.com/trac/ticket/7016#comment:14> - I think that this was introduced after 15.4, so it needs to be rolled back (or fixed, if someone can get to it before the revert) in 15.5.

Sadly, this has already been released (in 15.2), and changing it back
would also be an incompatible change. And, to set the record straight,
the issue was reported by sveinse on #twisted.

  Tom


From tom.prince at ualberta.net  Sat Dec  5 10:31:31 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 05 Dec 2015 10:31:31 -0700
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged	ticket
In-Reply-To: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
Message-ID: <871tb0pzt8.fsf@hermes.hocat.ca>

> Amber commented that using milestones for such a thing is not a good idea
> and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
> keep milestones like Python-3 unchanged.

I think rather than having a tag, it would make more sense to have a
custom field (http://trac.edgewall.org/wiki/TracTicketsCustomFields).
I do think using `next` as the version before a release makes sense. One
thing to note with that, is that tickets that land between branching and
a release shouldn't have the fix version updated.

  Tom


From tom.prince at ualberta.net  Tue Dec  1 23:09:05 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 01 Dec 2015 23:09:05 -0700
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
Message-ID: <874mg1peke.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>> Probably would be a good idea to have a list of such changes *before* the migration. 
>
> Yes. Everything should be written up and reviewed beforehand, and 

There has been a lot of words written talking about coming up with a
plan for the migration, but I have yet to see a concrete plan. I think
this (a list of all the things that depend on SVN) followed by plans to
address each of the, is probably a sensible first step. I suspect that
none of this will be contreviersial, but it seems that the disucssion
keeps dancing around things needing to be done, but nobody has taken the
time to actually come up with a list.

  Tom


From tom.prince at ualberta.net  Mon Dec  7 02:45:14 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:45:14 -0000
Subject: [Twisted-Python] incompatible change - need revert
	before	release
In-Reply-To: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
Message-ID: <87a8q8po2w.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> If it's been in a release, then there's probably nothing to do.  It's
> a shame that this went out, but once a breakage like this has happened
> we have to live with it because otherwise, as you say, we'd be
> breaking compatibility for the people that already upgraded.  For
> those that need to support both versions, keyword arguments are the
> way to go.


There are perhaps a couple of things we can do. The types of the
arguments should usually (always?) be different, so we could at least
warn if we suspect the wrong thing was passed, if not either error out
or do the right thing, so code won't silently or inexcplicably fail
later. We could also deprecate passing an argument as a positional
argument, so eventually upgrading will always get an error, rather than
incorrect behavior.

  Tom


From tom.prince at ualberta.net  Mon Dec  7 02:47:46 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 02:47:46 -0700
Subject: [Twisted-Python] Attaching the release number to
	a	closed/merged ticket
In-Reply-To: <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
 <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
 <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>
Message-ID: <87y4d6oail.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> I frequently answer stack overflow questions where I want to say what release of Twisted a particular bug was fixed in, and it's unfortunately hard to discover.

The attached script should get most of the versions for tickets. There
are a handful of tickets that get mis-categorized, though. This could
probably be used to back-fill fix versions, too.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: find-version.py
Type: text/x-python
Size: 1242 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151207/656833fe/attachment-0001.py>

From adi at roiban.ro  Mon Dec  7 02:54:35 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 7 Dec 2015 11:54:35 +0200
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <871tb0pzt8.fsf@hermes.hocat.ca>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <871tb0pzt8.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9cwPD_W43dh9xikJ5dgchDzhE7-V80gLzsSOTJZOhzw4w@mail.gmail.com>

On 5 December 2015 at 19:31, Tom Prince <tom.prince at ualberta.net> wrote:

> > Amber commented that using milestones for such a thing is not a good idea
> > and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
> > keep milestones like Python-3 unchanged.
>
> I think rather than having a tag, it would make more sense to have a
> custom field (http://trac.edgewall.org/wiki/TracTicketsCustomFields).
> I do think using `next` as the version before a release makes sense. One
> thing to note with that, is that tickets that land between branching and
> a release shouldn't have the fix version updated.
>
>
Thanks for the feedback.
Yes, we can have a tpcustom field.

Since Amber is the release manager I think that she should have the final
word.

Once we know that this is useful and there is a plan, I volunteer to
implement it.

For me, having the released version info in the Trac ticket is easier than
searching the NEWS file.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151207/35e402c8/attachment.html>

From hawkowl at atleastfornow.net  Mon Dec  7 06:06:41 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 7 Dec 2015 21:06:41 +0800
Subject: [Twisted-Python] Twisted 15.4 was the last release to support
	Python 2.6; or: a HawkOwl Can't Words Situation
Message-ID: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>

Hi everyone!

It's been brought to my attention that I misworded something in the release notes and it slipped through the cracks. In the NEWS I said:

> This is the last Twisted release where Python 2.6 is supported, on any platform.

However, I meant that this is the first Twisted release to drop 2.6 support wholesale, preventing import on this platform. Twisted 15.4 will still operate, so if you have Python 2.6 deployment requirements, bracket the maximum to 15.4 on that platform by using an if statement in your setup.py, and `Twisted >=*minreq*,<=15.4; python_version < '2.7'` under requires_dist in your setup.cfg, where minreq is the minimum required Twisted.

Sorry for the inconvenience!

- Amber "HawkOwl" Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151207/63a3179c/attachment.pgp>

From sardok at gmail.com  Wed Dec  9 05:17:51 2015
From: sardok at gmail.com (Sinan Nalkaya)
Date: Wed, 9 Dec 2015 14:17:51 +0200
Subject: [Twisted-Python] having 'from_' factory method with a deferred in
	it.
Message-ID: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>

Hi Everyone,

I am developing a tiny library where you can use your gpio pins (over
sysfs) in twisted way. You may find more about, on
https://github.com/sardok/txgpio.

I am facing with a race condition issue, where certain files are needed to
be created in filesystem, by kernel, in order have the class to finish its
initialization. Which means in twisted jargon, a deferred needs to be
resolved in __init__ (or another method - see below) method in order to
have complete object.

After reading this blog post
http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html by
Jean-Paul, i believe having 'from_' factory method which waits for those
certain files to be created before creating the actual class object is the
better way.

However, i couldn't find a way to wait for a deferred in order to use the
from_ function in the following form (which is the common form for using
from_ factory methods);

obj = sysfs.GPIO.from_unexported_node(*a, **kw)

More or less, i am looking for some thing equivalent of
'asyncio.get_event_loop()'
and 'yield from loop.run_in_executor()' as mentioned in the blog post.

Thanks,
Sinan.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151209/f39bdd5e/attachment.html>

From snailcoder at 163.com  Sun Dec 13 08:50:50 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 13 Dec 2015 23:50:50 +0800 (CST)
Subject: [Twisted-Python] What are the relationships between
 twisted.cred.portal.IRealm, Portal and avatar
Message-ID: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>

I'm trying to use Twisted's HTTP basic authentication to control access to some protected resources.


According to some articles, it is necessary to use three important concepts: Realm, Portal and avatar. Now I'm wondering if the Realm and avatar is one to one correspondence.


Let's look at an example(http://www.red-bean.com/doc/python-twisted-web/examples/webguard.py):


import sys

from zope.interface import implements

from twisted.python import log
from twisted.internet import reactor
from twisted.web import server, resource, guard
from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse


class GuardedResource(resource.Resource):
    """
    A resource which is protected by guard and requires authentication in order
    to access.
    """
    def getChild(self, path, request):
        return self


    def render(self, request):
        return "Authorized!"



class SimpleRealm(object):
    """
    A realm which gives out L{GuardedResource} instances for authenticated
    users.
    """
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if resource.IResource in interfaces:
            return resource.IResource, GuardedResource(), lambda: None
        raise NotImplementedError()



def main():
    log.startLogging(sys.stdout)
    checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')]
    wrapper = guard.HTTPAuthSessionWrapper(
        Portal(SimpleRealm(), checkers),
        [guard.DigestCredentialFactory('md5', 'example.com')])
    reactor.listenTCP(8889, server.Site(
          resource = wrapper))
    reactor.run()

if __name__ == '__main__':
    main()


Of course I know the SimpleRealm is used to return the corresponding resource, e.g. GuardedResource in above example. However, I don't know what to do when there lots of resources to be guarded. For example, I have GuardedResource1, GuardedResource2 and GuardedResource3, maybe they need the same or different number of parameters when they are initialized; If so, is it necessary to implement SimpleRealm1, SimpleRealm2 and SimpleRealm3, respectively? 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151213/66fa0e79/attachment.html>

From jml at mumak.net  Mon Dec 14 05:16:17 2015
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 14 Dec 2015 12:16:17 +0000
Subject: [Twisted-Python] When's the next release?
Message-ID: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>

Hello!

I've just landed a fix to #4811, which ought to make it possible to use
trial with regular standard library unittests that have expected failures &
unexpected successes.

I'm very keen to start using that in my code base, and the easiest way for
me to do that is for there to be an official release of Twisted. When might
one expect the next release to take place?

Thanks,
jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151214/84865bcb/attachment.html>

From pisymbol at gmail.com  Mon Dec 14 07:52:57 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 09:52:57 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
Message-ID: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>

Hi:

I'd like to adopt Twisted for a current project I'm coding up. I'm on
CentOS 6.7 x86-64 using python v2.6 and the stock
python-twisted-8.2.0-3.1 package built for this release.

No matter what I do when trying to implement the Process protocol or
use utils.getProcessOutput() directly, I always see the following
warning message on the console:

/usr/lib64/python2.6/site-packages/twisted/internet/utils.py:25:
PotentialZombieWarning: spawnProcess called, but the SIGCHLD handler
is not installed. This probably means you have not yet called
reactor.run, or called reactor.run(installSignalHandler=0). You will
probably never see this process finish, and it may become a zombie
process.
  reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path)
...

Is there anyway to get rid of this message? I realize I'm using an
older release of twisted but I can't upgrade to the latest without
incurring the cost of installing an python v2.7 or greater.

My script is literally:

d = utils.getProcessOutput('/bin/ls')
d.addCallbacks(writeResponse, noResponse)
reactor.run()

etc.

What am I doing wrong?

-aps


From hawkowl at atleastfornow.net  Mon Dec 14 08:09:49 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 14 Dec 2015 23:09:49 +0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
Message-ID: <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>


> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
> 
> Hi:
> 
> I'd like to adopt Twisted for a current project I'm coding up. I'm on
> CentOS 6.7 x86-64 using python v2.6 and the stock
> python-twisted-8.2.0-3.1 package built for this release.

...

> Is there anyway to get rid of this message? I realize I'm using an
> older release of twisted but I can't upgrade to the latest without
> incurring the cost of installing an python v2.7 or greater.

Hi,

Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151214/42490181/attachment.pgp>

From hawkowl at atleastfornow.net  Mon Dec 14 08:13:19 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 14 Dec 2015 23:13:19 +0800
Subject: [Twisted-Python] When's the next release?
In-Reply-To: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
References: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
Message-ID: <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>

Hi!

Since a release went out just the other week, I'd say January at the earliest. Every 2-3 months is the schedule that seems to balance getting things out there with the burden of downstream & users having to handle updates.

- Amber

> On 14 Dec 2015, at 20:16, Jonathan Lange <jml at mumak.net> wrote:
> 
> Hello!
> 
> I've just landed a fix to #4811, which ought to make it possible to use trial with regular standard library unittests that have expected failures & unexpected successes.
> 
> I'm very keen to start using that in my code base, and the easiest way for me to do that is for there to be an official release of Twisted. When might one expect the next release to take place?
> 
> Thanks,
> jml
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151214/3499462e/attachment.pgp>

From pisymbol at gmail.com  Mon Dec 14 13:38:02 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 15:38:02 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
Message-ID: <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>

On Mon, Dec 14, 2015 at 10:09 AM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
>
>> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
>>
>> Hi:
>>
>> I'd like to adopt Twisted for a current project I'm coding up. I'm on
>> CentOS 6.7 x86-64 using python v2.6 and the stock
>> python-twisted-8.2.0-3.1 package built for this release.
>
> ...
>
>> Is there anyway to get rid of this message? I realize I'm using an
>> older release of twisted but I can't upgrade to the latest without
>> incurring the cost of installing an python v2.7 or greater.
>
> Hi,
>
> Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.

That maybe, but CentOS 6.7 is the latest 6.x release which ships with
8.2.x (somebody maintaining the RHEL 6.x series should update these
packages then).

I did a pip install and it said I needed Python 2.7 or higher. Let me
reevaluate if I can just update twisted.

Thanks!

-aps


From glyph at twistedmatrix.com  Mon Dec 14 14:51:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Dec 2015 13:51:23 -0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
Message-ID: <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>


> On Dec 14, 2015, at 12:38 PM, pisymbol . <pisymbol at gmail.com> wrote:
> 
> On Mon, Dec 14, 2015 at 10:09 AM, Amber "Hawkie" Brown
> <hawkowl at atleastfornow.net> wrote:
>> 
>>> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
>>> 
>>> Hi:
>>> 
>>> I'd like to adopt Twisted for a current project I'm coding up. I'm on
>>> CentOS 6.7 x86-64 using python v2.6 and the stock
>>> python-twisted-8.2.0-3.1 package built for this release.
>> 
>> ...
>> 
>>> Is there anyway to get rid of this message? I realize I'm using an
>>> older release of twisted but I can't upgrade to the latest without
>>> incurring the cost of installing an python v2.7 or greater.
>> 
>> Hi,
>> 
>> Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.
> 
> That maybe, but CentOS 6.7 is the latest 6.x release which ships with
> 8.2.x (somebody maintaining the RHEL 6.x series should update these
> packages then).
> 
> I did a pip install and it said I needed Python 2.7 or higher. Let me
> reevaluate if I can just update twisted.

Try `pip install twisted==15.4? if you still require Python2.6 support; `pip install twisted? will install the latest, which no longer works on 2.6.

But again: Python 2.6 is unsupported by the upstream Python developers.  You really should not be using it, since it won't receive security updates (of course, Red Hat and transitively CentOS claim to "support" these packages, but if upstream is refusing patches at this point, it's not clear where that support will come from).  This is why we changed our policy to proactively disable it: it's a security risk and we would like to put pressure on downstreams (such as yourself) to stop taking on this risk without realizing it.

If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux <https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux> and using that.  In addition to being security-supported, it will also make your python code run 10x faster :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151214/6e3cdfb0/attachment.html>

From pisymbol at gmail.com  Mon Dec 14 16:53:02 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 18:53:02 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
Message-ID: <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>

On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> I did a pip install and it said I needed Python 2.7 or higher. Let me
> reevaluate if I can just update twisted.
>
>
> Try `pip install twisted==15.4? if you still require Python2.6 support; `pip
> install twisted? will install the latest, which no longer works on 2.6.

Yeah, that's what I did. It's working now!

> But again: Python 2.6 is unsupported by the upstream Python developers.  You
> really should not be using it, since it won't receive security updates (of
> course, Red Hat and transitively CentOS claim to "support" these packages,
> but if upstream is refusing patches at this point, it's not clear where that
> support will come from).

As you can imagine, this boils down to politics.

> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
> and using that.  In addition to being security-supported, it will also make
> your python code run 10x faster :).

Interesting, I'll take a look.

-aps


From glyph at twistedmatrix.com  Mon Dec 14 17:43:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Dec 2015 16:43:16 -0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
Message-ID: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>


> On Dec 14, 2015, at 3:53 PM, pisymbol . <pisymbol at gmail.com> wrote:
> 
> On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> I did a pip install and it said I needed Python 2.7 or higher. Let me
>> reevaluate if I can just update twisted.
>> 
>> 
>> Try `pip install twisted==15.4? if you still require Python2.6 support; `pip
>> install twisted? will install the latest, which no longer works on 2.6.
> 
> Yeah, that's what I did. It's working now!

Great!  Glad to hear you were able to make a huge leap in Twisted versions with little trouble :-).

>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>> really should not be using it, since it won't receive security updates (of
>> course, Red Hat and transitively CentOS claim to "support" these packages,
>> but if upstream is refusing patches at this point, it's not clear where that
>> support will come from).
> 
> As you can imagine, this boils down to politics.

I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

>> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
>> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
>> and using that.  In addition to being security-supported, it will also make
>> your python code run 10x faster :).
> 
> Interesting, I'll take a look.

Hope that works out for you.  Good luck!

-glyph



From pisymbol at gmail.com  Mon Dec 14 18:54:43 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 20:54:43 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
Message-ID: <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>

On Mon, Dec 14, 2015 at 7:43 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Dec 14, 2015, at 3:53 PM, pisymbol . <pisymbol at gmail.com> wrote:
>>
>> On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> I did a pip install and it said I needed Python 2.7 or higher. Let me
>>> reevaluate if I can just update twisted.
>>>
>>>
>>> Try `pip install twisted==15.4? if you still require Python2.6 support; `pip
>>> install twisted? will install the latest, which no longer works on 2.6.
>>
>> Yeah, that's what I did. It's working now!
>
> Great!  Glad to hear you were able to make a huge leap in Twisted versions with little trouble :-).
>
>>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>>> really should not be using it, since it won't receive security updates (of
>>> course, Red Hat and transitively CentOS claim to "support" these packages,
>>> but if upstream is refusing patches at this point, it's not clear where that
>>> support will come from).
>>
>> As you can imagine, this boils down to politics.
>
> I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

I'm not disagreeing with you per se...but...

The fact is the Python community at large then needs to convince the
distro maintainers accordingly. Telling a customer to update their
entire platform for a newer version of Python isn't going to fly a lot
of times (and remember, someone of them have support agreements with
RH).

And running two versions of Python can get messy real fast.

Anyway, it is what it is.

>>> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
>>> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
>>> and using that.  In addition to being security-supported, it will also make
>>> your python code run 10x faster :).
>>
>> Interesting, I'll take a look.
>
> Hope that works out for you.  Good luck!

Thanks! So far, so good. I was now able to lift my prototype code and
integrate it with the rest.

I'll probably have more questions at some point, but at least 15.4 did
the trick!

-aps


From hawkowl at atleastfornow.net  Mon Dec 14 21:16:08 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 15 Dec 2015 12:16:08 +0800
Subject: [Twisted-Python] Python 2.7 on CentOS 6 (was:
	PotentialZombieWarning warning message?)
In-Reply-To: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
Message-ID: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>


> On 15 Dec 2015, at 08:43, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>>> really should not be using it, since it won't receive security updates (of
>>> course, Red Hat and transitively CentOS claim to "support" these packages,
>>> but if upstream is refusing patches at this point, it's not clear where that
>>> support will come from).
>> 
>> As you can imagine, this boils down to politics.
> 
> I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

There is a solution to this, and Nick Coghlan has mentioned it to me many times -- Software Collections for RHEL and CentOS. Software Collections is RH's answer to "new software" on "stable distributions" --  SCLs operate side-by-side with system packages, so it won't break anything. Since you're a CentOS 6.7 user, the standard SCL should work (it's 6.5+).

You can find the Python 2.7 SCL at https://www.softwarecollections.org/en/scls/rhscl/python27/, and CentOS publishes instructions on using them on https://wiki.centos.org/AdditionalResources/Repositories/SCL . This might solve your problem of being restrained to CentOS 6, but Python 2.6 being EOL'd everywhere but it.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151215/0e43d226/attachment-0001.pgp>

From JOHN at egh.com  Tue Dec 15 04:28:02 2015
From: JOHN at egh.com (John Santos)
Date: Tue, 15 Dec 2015 06:28:02 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6 (was:
	PotentialZombieWarning warning message?)
In-Reply-To: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
Message-ID: <1151215061903.15297G-100000@joonya.egh.com>


Sorry if the quoting is a little weird in this, I've long since deleted
Glyph's original response, so I'm replying to Amber's latest, but I just
noticed something in the quote (from Glyph, I think) that I want to correct
for the sake of posterity: 

> On 15 Dec 2015, at 08:43, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>
>> I understand that things like this often do, which is exactly why I want
to make it clear that we (speaking in terms of the broader Python
community now, not just Twisted) are trying to push people towards more
recent versions just because they're more fun or more aesthetically
===============^
pleasant, but because there are very real risks associated with being on
unsupported ancient versions of things.  It pains me not to be supporting
a configuration that some users want, but there is a line where
"conservative about change" becomes "negligent about maintenance" and
python 2.6 crossed it a little over two years ago :-). 

I'm sure you meant "[we] are trying to push people towards more recent
versions [NOT] just because they're more fun..."

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From p.mayers at imperial.ac.uk  Tue Dec 15 04:30:02 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 15 Dec 2015 11:30:02 +0000
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
Message-ID: <566FF9BA.1080107@imperial.ac.uk>

On 15/12/15 04:16, Amber "Hawkie" Brown wrote:

> There is a solution to this, and Nick Coghlan has mentioned it to me
> many times -- Software Collections for RHEL and CentOS. Software
> Collections is RH's answer to "new software" on "stable
> distributions" --  SCLs operate side-by-side with system packages, so
> it won't break anything. Since you're a CentOS 6.7 user, the standard
> SCL should work (it's 6.5+).

I really disliked the SCLs when I looked at it. The supported use-case 
seems to be a kind of hugely over-engineered set of wrapper/environment 
setup scripts:

scl enable python2.7 pip install blah

...ad infinitum.

Personally - and I guess for others as well - the SCLs will be 
off-putting. It's a shame there isn't a simpler solution, namely EPEL 
python2.7 - having a 2nd python in a different path is quite safe, we do 
it routinely.

It's hugely annoying that RHEL6 and derivatives missed out on Python 2.7 :o(



From jml at mumak.net  Tue Dec 15 04:33:43 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 15 Dec 2015 11:33:43 +0000
Subject: [Twisted-Python] When's the next release?
In-Reply-To: <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>
References: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
 <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>
Message-ID: <CAHZ8tnYPHVaL3jmDOFJFamKQ1hCCVzRDgL4=OxWH5neK+7Uy6g@mail.gmail.com>

Thanks Amber!

In which case, I'll take steps to workaround #4811 until next year.

I should add, I'm very grateful and excited that we got so many releases
out this year. It's a wonderful thing to see.

On Mon, 14 Dec 2015 at 15:13 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Hi!
>
> Since a release went out just the other week, I'd say January at the
> earliest. Every 2-3 months is the schedule that seems to balance getting
> things out there with the burden of downstream & users having to handle
> updates.
>
> - Amber
>
> > On 14 Dec 2015, at 20:16, Jonathan Lange <jml at mumak.net> wrote:
> >
> > Hello!
> >
> > I've just landed a fix to #4811, which ought to make it possible to use
> trial with regular standard library unittests that have expected failures &
> unexpected successes.
> >
> > I'm very keen to start using that in my code base, and the easiest way
> for me to do that is for there to be an official release of Twisted. When
> might one expect the next release to take place?
> >
> > Thanks,
> > jml
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151215/4c6b0062/attachment.html>

From rgacote at appropriatesolutions.com  Tue Dec 15 09:40:11 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 15 Dec 2015 11:40:11 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <566FF9BA.1080107@imperial.ac.uk>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
Message-ID: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>

We have a fair bit of Python 2.7 Twisted code deployed on RHEL and CentOS 5
and 6.
In each case, we build from source and do a make altinstall so we?re
running a Python separate from the system?s.
Just takes a few minutes to get everything installed and running.

On Tue, Dec 15, 2015 at 6:30 AM, Phil Mayers <p.mayers at imperial.ac.uk>
wrote:

> On 15/12/15 04:16, Amber "Hawkie" Brown wrote:
>
> There is a solution to this, and Nick Coghlan has mentioned it to me
>> many times -- Software Collections for RHEL and CentOS. Software
>> Collections is RH's answer to "new software" on "stable
>> distributions" --  SCLs operate side-by-side with system packages, so
>> it won't break anything. Since you're a CentOS 6.7 user, the standard
>> SCL should work (it's 6.5+).
>>
>
> I really disliked the SCLs when I looked at it. The supported use-case
> seems to be a kind of hugely over-engineered set of wrapper/environment
> setup scripts:
>
> scl enable python2.7 pip install blah
>
> ...ad infinitum.
>
> Personally - and I guess for others as well - the SCLs will be
> off-putting. It's a shame there isn't a simpler solution, namely EPEL
> python2.7 - having a 2nd python in a different path is quite safe, we do it
> routinely.
>
> It's hugely annoying that RHEL6 and derivatives missed out on Python 2.7
> :o(
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151215/ea2d808c/attachment.html>

From waterbug at pangalactic.us  Tue Dec 15 10:34:24 2015
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Tue, 15 Dec 2015 12:34:24 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
 <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
Message-ID: <56704F20.6060702@pangalactic.us>

Here (NASA/GSFC) we use conda-based virtual envs on CentOS 6, and
they work great -- I turned our sysadmins on to conda about a year
ago, and they *love* it (no more compiling python, woo! ;)
All recent versions of twisted are available as conda packages:
# conda search twisted
Fetching package metadata: ......
twisted    12.3.0    py27_0  defaults
            12.3.0    py26_0  defaults
            13.0.0    py27_0  defaults
            13.0.0    py26_0  defaults
            13.1.0    py27_0  defaults
            13.1.0    py26_0  defaults
            13.2.0    py27_0  defaults
            13.2.0    py26_0  defaults
            14.0.0    py27_0  defaults
            14.0.0    py26_0  defaults
            14.0.2    py27_0  defaults
            14.0.2    py26_0  defaults
            15.0.0    py27_0  defaults
            15.0.0    py26_0  defaults
            15.1.0    py27_0  defaults
            15.1.0    py26_0  defaults
            15.2.0    py34_0  defaults
            15.2.0    py27_0  defaults
            15.2.0    py26_0  defaults
            15.2.1    py34_0  defaults
         .  15.2.1    py27_0  defaults
            15.2.1    py26_0  defaults
            15.3.0    py34_0  defaults
            15.3.0    py27_0  defaults
            15.3.0    py26_0  defaults
            15.4.0    py35_0  defaults
            15.4.0    py34_0  defaults
            15.4.0    py27_0  defaults
            15.5.0    py35_0  defaults
            15.5.0    py34_0  defaults
         *  15.5.0    py27_0  defaults

Steve

On 12/15/2015 11:40 AM, Ray Cote wrote:
> We have a fair bit of Python 2.7 Twisted code deployed on RHEL and
> CentOS 5 and 6.
> In each case, we build from source and do a make altinstall so we?re
> running a Python separate from the system?s.
> Just takes a few minutes to get everything installed and running.
>
> On Tue, Dec 15, 2015 at 6:30 AM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>     On 15/12/15 04:16, Amber "Hawkie" Brown wrote:
>
>         There is a solution to this, and Nick Coghlan has mentioned it to me
>         many times -- Software Collections for RHEL and CentOS. Software
>         Collections is RH's answer to "new software" on "stable
>         distributions" --  SCLs operate side-by-side with system
>         packages, so
>         it won't break anything. Since you're a CentOS 6.7 user, the
>         standard
>         SCL should work (it's 6.5+).
>
>
>     I really disliked the SCLs when I looked at it. The supported
>     use-case seems to be a kind of hugely over-engineered set of
>     wrapper/environment setup scripts:
>
>     scl enable python2.7 pip install blah
>
>     ...ad infinitum.
>
>     Personally - and I guess for others as well - the SCLs will be
>     off-putting. It's a shame there isn't a simpler solution, namely
>     EPEL python2.7 - having a 2nd python in a different path is quite
>     safe, we do it routinely.
>
>     It's hugely annoying that RHEL6 and derivatives missed out on Python
>     2.7 :o(
>
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> --
> Raymond Cote, President
> voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
> ray.cote
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From tom.prince at ualberta.net  Tue Dec 15 19:36:27 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 15 Dec 2015 19:36:27 -0700
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>
Message-ID: <874mfjce6s.fsf@hermes.hocat.ca>

"pisymbol ." <pisymbol at gmail.com> writes:

> The fact is the Python community at large then needs to convince the
> distro maintainers accordingly. Telling a customer to update their
> entire platform for a newer version of Python isn't going to fly a lot
> of times (and remember, someone of them have support agreements with
> RH).

The community has. However Redhat has customers that want support for
old systems and are willing to pay for it. CentOS is essentially a
repackaged unsupported version of Redhat Enterprise Linux. If you want
support for packages against an old version of python, you can contact
Redhat (as per this[1] post by core python developer and Redhat
employee).

  Tom


[1] http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html


From glyph at twistedmatrix.com  Wed Dec 16 01:40:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Dec 2015 00:40:09 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <874mg1peke.fsf@hermes.hocat.ca>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <874mg1peke.fsf@hermes.hocat.ca>
Message-ID: <6347EA1C-D059-47E1-AA10-57F0289B90E7@twistedmatrix.com>


> On Dec 1, 2015, at 10:09 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>>> Probably would be a good idea to have a list of such changes *before* the migration. 
>> 
>> Yes. Everything should be written up and reviewed beforehand, and 
> 
> There has been a lot of words written talking about coming up with a
> plan for the migration, but I have yet to see a concrete plan. I think
> this (a list of all the things that depend on SVN) followed by plans to
> address each of the, is probably a sensible first step. I suspect that
> none of this will be contreviersial, but it seems that the disucssion
> keeps dancing around things needing to be done, but nobody has taken the
> time to actually come up with a list.


This checklist is actually what will become the official plan, because investigating the exact steps required to satisfy each step is part of the plan itself :).

-glyph

From p.mayers at imperial.ac.uk  Wed Dec 16 09:07:21 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 16 Dec 2015 16:07:21 +0000
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
 <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
Message-ID: <56718C39.1010002@imperial.ac.uk>

On 15/12/2015 16:40, Ray Cote wrote:
> We have a fair bit of Python 2.7 Twisted code deployed on RHEL and
> CentOS 5 and 6.
> In each case, we build from source and do a make altinstall so we?re
> running a Python separate from the system?s.

We build an RPM, but basically yes; put it in a different path and it's 
fine.

Minor hassle though it is, it's one more thing that I would prefer to 
not need. But reinstalling upwards of 60 RHEL6 production machines is 
vastly more hassle ;o)


From chris.norman2 at googlemail.com  Wed Dec 16 10:25:51 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Wed, 16 Dec 2015 17:25:51 +0000
Subject: [Twisted-Python] Waiting for transports to close
Message-ID: <56719E9F.8090301@googlemail.com>

Hi all,
I'm writing a MUD server, and I want a way for transports to be notified 
ofa shutdown before being disconnected, and the reactor being stopped.

I've tried:

for t in transports:
  t.write('Shutting down.\r\n')
  t.loseConnection()
reactor.stop()

This doesn't seem to notify the transports.

I also tried:
for t in transports:
  t.write('Shutting down.\r\n')
  t.loseConnection()
  while t.connected:
   pass
reactor.stop()

That just blocked and did nothing, presumably something do with my while 
loop.

Is there a stopWhenEmpty function on the somewhere? I did look over the 
methods, and I couldn't find anything promising.

I'm just using the standard from twisted.internet import reactor 
reactor, so no special cases here. In case it matters the transports I'm 
using are twisted.protocols.basic.LineReceiver, and everything else 
works with them.

Cheers in advance for the help.


From kebin70 at gmail.com  Wed Dec 16 17:11:36 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 16 Dec 2015 16:11:36 -0800
Subject: [Twisted-Python] asynchronous response
Message-ID: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>

Hey - I'm confused, so nothing new :) ...but I'm running at this example
and I'm scratching my head.

http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html

I would've thought 2 requests could be served simultaneously, but when I
fire off 2 requests the first received gets it's response after 5 seconds,
while the second response takes 10 seconds.

I think I understand what's happening, but I don't know why...and I would
love an example where the subsequent request doesn't have to wait for the
first request to finish.

Thanks,
Kevin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151216/fe78c34f/attachment.html>

From kebin70 at gmail.com  Thu Dec 17 00:58:00 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 16 Dec 2015 23:58:00 -0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
Message-ID: <CAA-sNEZPsDfkFzA=SMh5kMECp-ObH+wxcjHpfYDftcNZVe6-rQ@mail.gmail.com>

Just a follow-up with my own sanity check example.

http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html

My conclusion is that deferLater is a blocking method - am I wrong?


On Wed, Dec 16, 2015 at 4:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> Hey - I'm confused, so nothing new :) ...but I'm running at this example
> and I'm scratching my head.
>
>
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
>
> I would've thought 2 requests could be served simultaneously, but when I
> fire off 2 requests the first received gets it's response after 5 seconds,
> while the second response takes 10 seconds.
>
> I think I understand what's happening, but I don't know why...and I would
> love an example where the subsequent request doesn't have to wait for the
> first request to finish.
>
> Thanks,
> Kevin
>
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151216/37247988/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: multirequest_overkill.py
Type: text/x-python
Size: 2403 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151216/37247988/attachment.py>

From hawkowl at atleastfornow.net  Thu Dec 17 01:09:42 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 17 Dec 2015 16:09:42 +0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
Message-ID: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>


> On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> Hey - I'm confused, so nothing new :) ...but I'm running at this example and I'm scratching my head.
> 
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> 
> I would've thought 2 requests could be served simultaneously, but when I fire off 2 requests the first received gets it's response after 5 seconds, while the second response takes 10 seconds.
> 
> I think I understand what's happening, but I don't know why...and I would love an example where the subsequent request doesn't have to wait for the first request to finish.
> 
> Thanks,
> Kevin


I've ran into this before --  browsers sometimes rate-limit requests, and won't actually send the second request until the first is done, over the same connection, rather than making a second TCP connection -- try using cURL or wget, which has no such limitation, and see if it works any better.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/21907767/attachment.pgp>

From kebin70 at gmail.com  Thu Dec 17 01:38:55 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 17 Dec 2015 00:38:55 -0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
Message-ID: <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>

holy moly - you're right!  This fool will sleep so much better...a million
thanks.

On Thu, Dec 17, 2015 at 12:09 AM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

>
> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> >
> > Hey - I'm confused, so nothing new :) ...but I'm running at this example
> and I'm scratching my head.
> >
> >
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> >
> > I would've thought 2 requests could be served simultaneously, but when I
> fire off 2 requests the first received gets it's response after 5 seconds,
> while the second response takes 10 seconds.
> >
> > I think I understand what's happening, but I don't know why...and I
> would love an example where the subsequent request doesn't have to wait for
> the first request to finish.
> >
> > Thanks,
> > Kevin
>
>
> I've ran into this before --  browsers sometimes rate-limit requests, and
> won't actually send the second request until the first is done, over the
> same connection, rather than making a second TCP connection -- try using
> cURL or wget, which has no such limitation, and see if it works any better.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/552d82bb/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.py
Type: text/x-python
Size: 1135 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/552d82bb/attachment.py>

From terry at jon.es  Thu Dec 17 03:24:54 2015
From: terry at jon.es (Terry Jones)
Date: Thu, 17 Dec 2015 10:24:54 +0000
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
 <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>
Message-ID: <CACqnu4X696B3Jkyz24PAYCr4EZLdfoa86b_vWgYaXwh9g7mBXw@mail.gmail.com>

Hi Kevin

I found it extremely beneficial to read the Twisted sources, in particular
twisted.internet.defer. In your case, see
https://github.com/twisted/twisted/blob/trunk/twisted/internet/task.py#L821

One nice thing that happens when you read the source is that you see quite
a number of API methods (including deferLater, and also succeed, fail,
maybeDeferred, some of the Deferred class methods, DeferredList, and the
wonderful DeferredQueue) are actually just a few lines of code, doing
something quite simple with a deferred. I found that figuring out how they
all did what they did made my understanding of deferreds much better. I
really love deferreds :-) Here's a bit I wrote about them, using
DeferredQueue as the example
http://blogs.fluidinfo.com/terry/2010/07/23/asynchronous-data-structures-with-twisted-deferreds/

Hope that helps.

Terry


On Thu, Dec 17, 2015 at 8:38 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> holy moly - you're right!  This fool will sleep so much better...a million
> thanks.
>
> On Thu, Dec 17, 2015 at 12:09 AM, Amber "Hawkie" Brown <
> hawkowl at atleastfornow.net> wrote:
>
>>
>> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>> >
>> > Hey - I'm confused, so nothing new :) ...but I'm running at this
>> example and I'm scratching my head.
>> >
>> >
>> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
>> >
>> > I would've thought 2 requests could be served simultaneously, but when
>> I fire off 2 requests the first received gets it's response after 5
>> seconds, while the second response takes 10 seconds.
>> >
>> > I think I understand what's happening, but I don't know why...and I
>> would love an example where the subsequent request doesn't have to wait for
>> the first request to finish.
>> >
>> > Thanks,
>> > Kevin
>>
>>
>> I've ran into this before --  browsers sometimes rate-limit requests, and
>> won't actually send the second request until the first is done, over the
>> same connection, rather than making a second TCP connection -- try using
>> cURL or wget, which has no such limitation, and see if it works any better.
>>
>> - Amber
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/b8ca2e1e/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:37:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:37:25 -0800
Subject: [Twisted-Python] having 'from_' factory method with a deferred
	in it.
In-Reply-To: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>
References: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>
Message-ID: <51A31686-CAA4-4167-BD37-12C1809F00FB@twistedmatrix.com>


> On Dec 9, 2015, at 4:17 AM, Sinan Nalkaya <sardok at gmail.com> wrote:
> 
> Hi Everyone,
> 
> I am developing a tiny library where you can use your gpio pins (over sysfs) in twisted way. You may find more about, on https://github.com/sardok/txgpio <https://github.com/sardok/txgpio>.
> 
> I am facing with a race condition issue, where certain files are needed to be created in filesystem, by kernel, in order have the class to finish its initialization. Which means in twisted jargon, a deferred needs to be resolved in __init__ (or another method - see below) method in order to have complete object.
> 
> After reading this blog post http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html <http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html> by Jean-Paul, i believe having 'from_' factory method which waits for those certain files to be created before creating the actual class object is the better way.
> 
> However, i couldn't find a way to wait for a deferred in order to use the from_ function in the following form (which is the common form for using from_ factory methods);
> 
> obj = sysfs.GPIO.from_unexported_node(*a, **kw)
> 
> More or less, i am looking for some thing equivalent of 'asyncio.get_event_loop()' and 'yield from loop.run_in_executor()' as mentioned in the blog post.

The equivalent of 'asyncio.get_event_loop()' is simply 'from twisted.internet import reactor'.  However, relying upon this is an anti-pattern (I begged Guido not to add get_event_loop to asyncio, since we would love to remove 'twisted.internet.reactor' from Twisted, but oh well).  The "right" way to do this is simply to accept 'reactor' as a parameter to 'from_...'.

If you're using, for example, twisted.internet.task.react, you'll receive the 'reactor' as a parameter at the "top" of your program, you'll never have to import it from twisted.internet, and you can just pass it on through.  This style is much cleaner.

The equivalent to 'run_in_executor(None, ...)' is simply 'reactor.callInThread(...)'.

I'm glad you found the "right" way to initialize an object asynchronously :-).

Hope this helps,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/067649e9/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:45:45 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:45:45 -0800
Subject: [Twisted-Python] What are the relationships between
	twisted.cred.portal.IRealm, Portal and avatar
In-Reply-To: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>
References: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>
Message-ID: <BC424394-1F1E-4178-AF06-8A10462951C7@twistedmatrix.com>


> On Dec 13, 2015, at 7:50 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> I'm trying to use Twisted's HTTP basic authentication to control access to some protected resources.
> 
> According to some articles, it is necessary to use three important concepts: Realm, Portal and avatar. Now I'm wondering if the Realm and avatar is one to one correspondence.

The idea is that a Realm represents an application, and an Avatar represents a single user's data within that application.  This example is a bit oversimplified, since it doesn't provide any inputs to the user's data; most of the time, you'd want to retrieve a session or something based on the avatarID.

> Let's look at an example(http://www.red-bean.com/doc/python-twisted-web/examples/webguard.py):
> 
> import sys
> 
> from zope.interface import implements
> 
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.web import server, resource, guard
> from twisted.cred.portal import IRealm, Portal
> from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
> 
> 
> class GuardedResource(resource.Resource):
>     """
>     A resource which is protected by guard and requires authentication in order
>     to access.
>     """
>     def getChild(self, path, request):
>         return self
> 
> 
>     def render(self, request):
>         return "Authorized!"
> 
> 
> 
> class SimpleRealm(object):
>     """
>     A realm which gives out L{GuardedResource} instances for authenticated
>     users.
>     """
>     implements(IRealm)
> 
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         if resource.IResource in interfaces:
>             return resource.IResource, GuardedResource(), lambda: None
>         raise NotImplementedError()
> 
> 
> 
> def main():
>     log.startLogging(sys.stdout)
>     checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')]
>     wrapper = guard.HTTPAuthSessionWrapper(
>         Portal(SimpleRealm(), checkers),
>         [guard.DigestCredentialFactory('md5', 'example.com')])
>     reactor.listenTCP(8889, server.Site(
>           resource = wrapper))
>     reactor.run()
> 
> if __name__ == '__main__':
>     main()
> 
> Of course I know the SimpleRealm is used to return the corresponding resource, e.g. GuardedResource in above example. However, I don't know what to do when there lots of resources to be guarded. For example, I have GuardedResource1, GuardedResource2 and GuardedResource3, maybe they need the same or different number of parameters when they are initialized; If so, is it necessary to implement SimpleRealm1, SimpleRealm2 and SimpleRealm3, respectively?

Rather than thinking of a resource as always existing and just needing to have a lock on it or not, consider the more flexible model (the one that cred actually implements) where a single Avatar object (in this case: the top IResource returned from SimpleRealm) is the top level of "everything the user has access to".  In other words, 'GuardedResource' should have a 'getChild' method which makes the determination if the user they represent (really, at least the avatarId should be supplied to GuardedResource.__init__) has access to other resources, and return them if so, and appropriate errors if not.

Even the resources available to a not-logged-in user (see twisted.cred.credentials.Anonymous) is just another avatar, the one served up to unauthenticated people.

So, if you have https://myapp.example.com/a/b/secure/c/d <https://myapp.example.com/a/b/secure/c/d>, https://myapp.example.com/a/b/secure <https://myapp.example.com/a/b/secure> would be the guarded resource, and then SecureResource.getChild("c", ...) would return "c", which would in turn return "d" if the logged-in user has access to it.

Does this make sense?

Thanks for using Twisted,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/d41a495a/attachment.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:49:55 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:49:55 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <56719E9F.8090301@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
Message-ID: <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>


> On Dec 16, 2015, at 9:25 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi all,
> I'm writing a MUD server, and I want a way for transports to be notified ofa shutdown before being disconnected, and the reactor being stopped.
> 
> I've tried:
> 
> for t in transports:
> t.write('Shutting down.\r\n')
> t.loseConnection()
> reactor.stop()
> 
> This doesn't seem to notify the transports.
> 
> I also tried:
> for t in transports:
> t.write('Shutting down.\r\n')
> t.loseConnection()
> while t.connected:
>  pass
> reactor.stop()
> 
> That just blocked and did nothing, presumably something do with my while loop.
> 
> Is there a stopWhenEmpty function on the somewhere? I did look over the methods, and I couldn't find anything promising.
> 
> I'm just using the standard from twisted.internet import reactor reactor, so no special cases here. In case it matters the transports I'm using are twisted.protocols.basic.LineReceiver, and everything else works with them.
> 
> Cheers in advance for the help.

This is definitely doable, but before I explain it would help to know why you want to do this.

The reason I ask is: servers crash; hardware fails.  The falcon cannot hear the falconer; things fall apart; the centre cannot hold.

When those servers do crash (and they will), you don't get a clean notification of disconnects.  So if you're writing your application to rely very heavily on the ability to do a clean shutdown and get notifications of every disconnect at the time you expect reactor.stop() to be running, you are probably designing your system in a way that will be very fragile and prone to data loss.  I know, I have made this mistake more than once myself :).

So, before you continue: do you actually need to do this?  Could you just ignore the notification of the connection drop and exit gracefully, perhaps properly cleaning up whatever state is left over at next startup?  If you really need this, understanding why you need it would also help in determining which implementation technique to suggest (there are a few).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/89da4d80/attachment.html>

From chris.norman2 at googlemail.com  Thu Dec 17 05:56:03 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Thu, 17 Dec 2015 12:56:03 +0000
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
Message-ID: <5672B0E3.90306@googlemail.com>

Hi,
It's a MUD server, so players type in commands and receive textual 
responses.

One of the admin commands is the ability to shutdown the server (or 
CTRL-C might be pressed on the console). I'd like this action to notify 
all connected transports that the server is going down for shutdown, so 
they're not rudely disconnected, then once the notifications have all 
gone through, then the server is free to shutdown.

I hope all this makes sense.

Cheers,

On 12/17/2015 11:49 AM, Glyph Lefkowitz wrote:
>
>> On Dec 16, 2015, at 9:25 AM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi all,
>> I'm writing a MUD server, and I want a way for transports to be 
>> notified ofa shutdown before being disconnected, and the reactor 
>> being stopped.
>>
>> I've tried:
>>
>> for t in transports:
>> t.write('Shutting down.\r\n')
>> t.loseConnection()
>> reactor.stop()
>>
>> This doesn't seem to notify the transports.
>>
>> I also tried:
>> for t in transports:
>> t.write('Shutting down.\r\n')
>> t.loseConnection()
>> while t.connected:
>>  pass
>> reactor.stop()
>>
>> That just blocked and did nothing, presumably something do with my 
>> while loop.
>>
>> Is there a stopWhenEmpty function on the somewhere? I did look over 
>> the methods, and I couldn't find anything promising.
>>
>> I'm just using the standard from twisted.internet import reactor 
>> reactor, so no special cases here. In case it matters the transports 
>> I'm using are twisted.protocols.basic.LineReceiver, and everything 
>> else works with them.
>>
>> Cheers in advance for the help.
>
> This is definitely doable, but before I explain it would help to know 
> /why/ you want to do this.
>
> The reason I ask is: servers crash; hardware fails.  The falcon cannot 
> hear the falconer; things fall apart; the centre cannot hold.
>
> When those servers /do/ crash (and they will), you don't get a clean 
> notification of disconnects.  So if you're writing your application to 
> rely very heavily on the ability to do a clean shutdown and get 
> notifications of every disconnect at the time you expect 
> reactor.stop() to be running, you are probably designing your system 
> in a way that will be very fragile and prone to data loss.  I know, I 
> have made this mistake more than once myself :).
>
> So, before you continue: do you actually need to do this?  Could you 
> just ignore the notification of the connection drop and exit 
> gracefully, perhaps properly cleaning up whatever state is left over 
> at next startup?  If you really need this, understanding why you need 
> it would also help in determining which implementation technique to 
> suggest (there are a few).
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/b1f56d32/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Dec 17 06:03:44 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 05:03:44 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <5672B0E3.90306@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
Message-ID: <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>


> On Dec 17, 2015, at 4:56 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi,
> It's a MUD server, so players type in commands and receive textual responses.
> 
> One of the admin commands is the ability to shutdown the server (or CTRL-C might be pressed on the console). I'd like this action to notify all connected transports that the server is going down for shutdown, so they're not rudely disconnected, then once the notifications have all gone through, then the server is free to shutdown.

Gotcha.  So you don't need to necessarily wait for all the messages to be delivered if there are slow clients waiting around; you just want to send everyone a farewell message and if they haven't responded within a reasonable timeout, go ahead and shut down anyway.

If your MUD server is already a Service <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>> being launched by twistd, you just need to add a stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService>> method that returns a Deferred.  When CTRL-C is hit (or anything else causes reactor.stop to be called), it will call this stopService method, and won't exit until a Deferred fires.

In your case, a simple deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>> will probably do the trick.  You can also speed things up when there are no connected clients left by cancelling that Deferred to make it finish firing immediately.

Will that work for you?

> I hope all this makes sense.

P.S.: For future reference, on this list the preferred style of reply is interleaved https://en.wikipedia.org/wiki/Posting_style#Interleaved_style <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style> or bottom-posting: https://en.wikipedia.org/wiki/Posting_style#Bottom-posting <https://en.wikipedia.org/wiki/Posting_style#Bottom-posting>

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/2709b613/attachment.html>

From msc at contact.de  Thu Dec 17 07:59:24 2015
From: msc at contact.de (Michael Schlenker)
Date: Thu, 17 Dec 2015 15:59:24 +0100
Subject: [Twisted-Python] twisted.web.xmlrpc.Proxy using the new HTTP 1.1
	client?
Message-ID: <5672CDCC.9090203@contact.de>

Hi,

looking at the xmlrpc client code, it looks like it still does HTTP 1.0
only.

Did anyone try to hook it up to the new HTTPConnectionPool and
HTTP11ClientProtocol in twisted.web.client?

How hard should it be to do that, any pointers on how to do a conversion?

I'm mostly interested in the persistent connections feature of HTTP1.1
(due to TLS setup costs for new connections and burning through too many
client sockets when many calls are made).

Michael

-- 
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Stra?e 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321


From glyph at twistedmatrix.com  Thu Dec 17 13:30:41 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 12:30:41 -0800
Subject: [Twisted-Python] twisted.web.xmlrpc.Proxy using the new HTTP
	1.1 client?
In-Reply-To: <5672CDCC.9090203@contact.de>
References: <5672CDCC.9090203@contact.de>
Message-ID: <CDD1B204-DF4D-42BA-8129-84FB15F67A6A@twistedmatrix.com>


> On Dec 17, 2015, at 6:59 AM, Michael Schlenker <msc at contact.de> wrote:
> 
> Hi,
> 
> looking at the xmlrpc client code, it looks like it still does HTTP 1.0
> only.
> 
> Did anyone try to hook it up to the new HTTPConnectionPool and
> HTTP11ClientProtocol in twisted.web.client?
> 
> How hard should it be to do that, any pointers on how to do a conversion?
> 
> I'm mostly interested in the persistent connections feature of HTTP1.1
> (due to TLS setup costs for new connections and burning through too many
> client sockets when many calls are made).

I think the ticket you're looking for is https://twistedmatrix.com/trac/ticket/7012 <https://twistedmatrix.com/trac/ticket/7012>.  And it looks like nobody has done anything there, so you can be the first person to submit a patch! :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151217/5d2674b9/attachment.html>

From marco.giusti at posteo.de  Fri Dec 18 08:08:45 2015
From: marco.giusti at posteo.de (Marco Giusti)
Date: Fri, 18 Dec 2015 16:08:45 +0100
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
Message-ID: <20151218150845.GA1407@murdoc>

On Thu, Dec 17 2015, Amber "Hawkie" Brown wrote:
> 
> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> > 
> > Hey - I'm confused, so nothing new :) ...but I'm running at this
> > example and I'm scratching my head.
> > 
> > http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> > 
> > I would've thought 2 requests could be served simultaneously, but
> > when I fire off 2 requests the first received gets it's response
> > after 5 seconds, while the second response takes 10 seconds.
> > 
> > I think I understand what's happening, but I don't know why...and I
> > would love an example where the subsequent request doesn't have to
> > wait for the first request to finish.
> > 
> > Thanks,
> > Kevin
> 
> 
> I've ran into this before --  browsers sometimes rate-limit requests,
> and won't actually send the second request until the first is done,
> over the same connection, rather than making a second TCP connection
> -- try using cURL or wget, which has no such limitation, and see if it
> works any better.

I don't think this is a limitation per se. For what I remember the http
1.1 specification says that the browser should wait for the first
response before they continue to send the other requests. Those can be
then sent in pipeline. So no limitation but specification.

I hope I did not misunderstood your respose.
Marco


From meejah at meejah.ca  Fri Dec 18 17:13:15 2015
From: meejah at meejah.ca (meejah)
Date: Sat, 19 Dec 2015 04:13:15 +0400
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Fri, 4 Dec 2015 01:34:22 -0800")
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
 <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>
Message-ID: <86oadnwb1g.fsf@atlantis.meejah.ca>


Just to follow-up on this, I have submitted a patch for #7671 and filed
two tickets for the other two issues I brought up. These are:

  #8150: twisted.internet.ssl.KeyPair should provide loadPEM
  #8151: add twisted.internet.ssl.optionsForServerTLS

I will likely submit a patch for 8150 in the near term but haven't
started any direct work on 8151. I'm usually idling in OFTC and Freenode
if anyone has feedback or ideas or wants to help :)

Cheers,

-- 
meejah



From chris.norman2 at googlemail.com  Sat Dec 19 06:01:13 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 19 Dec 2015 13:01:13 +0000
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
 <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
Message-ID: <56755519.6070608@googlemail.com>

Hello,

On 17/12/2015 13:03, Glyph Lefkowitz wrote:
>
>> On Dec 17, 2015, at 4:56 AM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi,
>> It's a MUD server, so players type in commands and receive textual 
>> responses.
>>
>> One of the admin commands is the ability to shutdown the server (or 
>> CTRL-C might be pressed on the console). I'd like this action to 
>> notify all connected transports that the server is going down for 
>> shutdown, so they're not rudely disconnected, then once the 
>> notifications have all gone through, then the server is free to shutdown.
>
> Gotcha.  So you don't need to necessarily wait for all the messages to 
> be delivered if there are slow clients waiting around; you just want 
> to send everyone a farewell message and if they haven't responded 
> within a reasonable timeout, go ahead and shut down anyway.
>
> If your MUD server is already a Service 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html> 
> being launched by twistd, you just need to add a stopService 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService> 
> method that returns a Deferred.  When CTRL-C is hit (or anything else 
> causes reactor.stop to be called), it will call this stopService 
> method, and won't exit until a Deferred fires.
>
> In your case, a simple deferLater 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater> 
> will probably do the trick.  You can also speed things up when there 
> are no connected clients left by cancelling that Deferred to make it 
> finish firing immediately.
>
> Will that work for you?
>
>> I hope all this makes sense.

It's not a service no... Should it be? I wasn't planning to use twistd, 
mainly because I don't know how to, and running
python main.py
is working fine, accepting command line arguments - the works.

It could be converted though, if there is an advantage with services?

Also, I've read quite a lot about Deferreds. I thought initially they 
were for multithreading your application, but I realise that's wrong, so 
I don't understand what the point in them is?

This isn't to say there isn't one mind you, I think I'm just majorly 
missing the point.

>
> P.S.: For future reference, on this list the preferred style of reply 
> is interleaved https://en.wikipedia.org 
> <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style>

Sorry, I'll do that in the future.

> /wiki/Posting_style#Interleaved_style 
> <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style> or 
> bottom-posting: https://en.wikipedia.org/wiki/Posting_style#Bottom-posting
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151219/6484d914/attachment.html>

From adi at roiban.ro  Sun Dec 20 10:05:19 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 20 Dec 2015 19:05:19 +0200
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
Message-ID: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>

Hi,

What is the purpose of IOpenSSLTrustRoot ?

It it documented as a private interface, it has only private methods, but
then it is exposed in  twisted.internet.ssl.optionsForClientTLS

Why?

I am confused while trying to review
https://twistedmatrix.com/trac/ticket/7671

Please take a look at my review and add your wisdom :)

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151220/3ce71540/attachment.html>

From glyph at twistedmatrix.com  Mon Dec 21 16:25:55 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2015 15:25:55 -0800
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <86oadnwb1g.fsf@atlantis.meejah.ca>
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
 <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>
 <86oadnwb1g.fsf@atlantis.meejah.ca>
Message-ID: <0BB4D6BA-778D-4595-A582-4183B57EBA36@twistedmatrix.com>


> On Dec 18, 2015, at 4:13 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> Just to follow-up on this, I have submitted a patch for #7671 and filed
> two tickets for the other two issues I brought up. These are:
> 
>  #8150: twisted.internet.ssl.KeyPair should provide loadPEM
>  #8151: add twisted.internet.ssl.optionsForServerTLS
> 
> I will likely submit a patch for 8150 in the near term but haven't
> started any direct work on 8151. I'm usually idling in OFTC and Freenode
> if anyone has feedback or ideas or wants to help :)

Thanks for getting these filed, Meejah!

-g



From hawkowl at atleastfornow.net  Mon Dec 21 23:27:23 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 22 Dec 2015 14:27:23 +0800
Subject: [Twisted-Python] [BACKWARDS INCOMPATIBLE] Moving Twisted to PEP-3333
Message-ID: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>

Hi everyone!

We've been attempting to port twisted.web.wsgi to Python 3, as of recent. The existence of PEP-3333 makes this easier, but due to our backwards compatibility policy, implementing stricter checks to make sure t.w.wsgi-using applications are actually PEP-3333 may be a change which cannot be easily done.

The patch we have currently, which is based on work by jMyles (of Hendrix), tirelessly worked on allennap (of Canonical MAAS), and sheparded along by the wonderful Adi (our other Twisted Fellow), is in very good shape, bringing Twisted's WSGI support to be compliant with PEP-3333. PEP-3333 is much stricter on bytes/Unicode, and the patch introduces some further type checking that the original PEP-333 describes as a must, even though we did not check this before.

This branch cannot currently be merged because of backwards compatibility issues -- the spirit of our Compatibility Policy is that 'apps keep working', and sufficiently Unicode unclean WSGI applications may break due to it, even though PEP-333 is very explicit in saying that "HTTP does not directly support Unicode, and neither does this interface".

So, I am looking to get a compat exception for this -- WSGI is very explicit in its types, and any misbehaving applications are violating the specification grossly enough for there to possibly not need a compat exception -- but going through this way may catch the attention of anyone with a potentially misbehaving application and fix it before Twisted 16.0, when I expect this will be merged.

The ticket is https://twistedmatrix.com/trac/ticket/7993, and the branch you should test against is linked at the top. The compatibility policy will allow a week before we move to merge the ticket, although we may have some changes to the branch to make warnings turn into errors, if we are breaking backwards compat, so please ensure no exceptions *or warnings* are produced by your code.

Thanks,

- Amber
Twisted Fellow, RM, Python 3 Overlord
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151222/e631024e/attachment.pgp>

From hawkowl at atleastfornow.net  Tue Dec 22 07:29:12 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 22 Dec 2015 22:29:12 +0800
Subject: [Twisted-Python] [(maybe) BACKWARDS INCOMPATIBLE] Moving Twisted to
	PEP-3333
In-Reply-To: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>
References: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>
Message-ID: <47B3B6E4-BC91-4701-836F-2B8337649CA0@atleastfornow.net>


> On 22 Dec 2015, at 14:27, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone!
> 
> We've been attempting to port twisted.web.wsgi to Python 3, as of recent. The existence of PEP-3333 makes this easier, but due to our backwards compatibility policy, implementing stricter checks to make sure t.w.wsgi-using applications are actually PEP-3333 may be a change which cannot be easily done.
> 
> The patch we have currently, which is based on work by jMyles (of Hendrix), tirelessly worked on allennap (of Canonical MAAS), and sheparded along by the wonderful Adi (our other Twisted Fellow), is in very good shape, bringing Twisted's WSGI support to be compliant with PEP-3333. PEP-3333 is much stricter on bytes/Unicode, and the patch introduces some further type checking that the original PEP-333 describes as a must, even though we did not check this before.
> 
> This branch cannot currently be merged because of backwards compatibility issues -- the spirit of our Compatibility Policy is that 'apps keep working', and sufficiently Unicode unclean WSGI applications may break due to it, even though PEP-333 is very explicit in saying that "HTTP does not directly support Unicode, and neither does this interface".
> 
> So, I am looking to get a compat exception for this -- WSGI is very explicit in its types, and any misbehaving applications are violating the specification grossly enough for there to possibly not need a compat exception -- but going through this way may catch the attention of anyone with a potentially misbehaving application and fix it before Twisted 16.0, when I expect this will be merged.
> 
> The ticket is https://twistedmatrix.com/trac/ticket/7993, and the branch you should test against is linked at the top. The compatibility policy will allow a week before we move to merge the ticket, although we may have some changes to the branch to make warnings turn into errors, if we are breaking backwards compat, so please ensure no exceptions *or warnings* are produced by your code.
> 
> Thanks,
> 
> - Amber
> Twisted Fellow, RM, Python 3 Overlord
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Hi everyone!

So, with further looking with Tom Prince, it appears that my backwards compat fears in regards to Unicode were from my older remembering of the branch, allenap and Adi have made it so that it raises a warning on Python 2 if you're not Unicode/bytes clean, as well as introducing hard-checks on Python 3, where it is reasonable to do so.

So, this should mean that all your Python 2 WSGI apps should keep working, even if they're not Unicode clean, but I am still wanting to go through the exception process to give users of Twisted's WSGI support a chance to raise any problems that they may have with the PEP-3333-compatible code, as unlikely as they are to be.

I'd like to say thanks again to allenap and Adi's herculean efforts on this branch :)

- Amber

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151222/a4784479/attachment.pgp>

From glyph at twistedmatrix.com  Fri Dec 25 02:00:24 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 01:00:24 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <56755519.6070608@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
 <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
 <56755519.6070608@googlemail.com>
Message-ID: <D15A8C49-2104-432C-9C79-E0973B62FE59@twistedmatrix.com>


> On Dec 19, 2015, at 5:01 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hello,
> 
> On 17/12/2015 13:03, Glyph Lefkowitz wrote:
>> 
>>> On Dec 17, 2015, at 4:56 AM, Chris Norman < <mailto:chris.norman2 at googlemail.com>chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> wrote:
>>> 
>>> Hi,
>>> It's a MUD server, so players type in commands and receive textual responses.
>>> 
>>> One of the admin commands is the ability to shutdown the server (or CTRL-C might be pressed on the console). I'd like this action to notify all connected transports that the server is going down for shutdown, so they're not rudely disconnected, then once the notifications have all gone through, then the server is free to shutdown.
>> 
>> Gotcha.  So you don't need to necessarily wait for all the messages to be delivered if there are slow clients waiting around; you just want to send everyone a farewell message and if they haven't responded within a reasonable timeout, go ahead and shut down anyway.
>> 
>> If your MUD server is already a Service < <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>> being launched by twistd, you just need to add a stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService>> method that returns a Deferred.  When CTRL-C is hit (or anything else causes reactor.stop to be called), it will call this stopService method, and won't exit until a Deferred fires.
>> 
>> In your case, a simple deferLater < <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>> will probably do the trick.  You can also speed things up when there are no connected clients left by cancelling that Deferred to make it finish firing immediately.
>> 
>> Will that work for you?
>> 
>>> I hope all this makes sense.
> 
> It's not a service no... Should it be? I wasn't planning to use twistd, mainly because I don't know how to, and running
> python main.py
> is working fine, accepting command line arguments - the works.
> 
> It could be converted though, if there is an advantage with services?

Services are just the standard way to organize starting up and shutting down with Twisted.  And running under `twistd? takes care of some of the details of starting up and hosting your service, including initializing logging, managing the timing of setting the UID and GID, selecting the reactor and so on.  But if you're happy with your own service setup, it's not necessary.  The alternative is to use `addSystemEventTrigger?: https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.base.ReactorBase.html#addSystemEventTrigger <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.base.ReactorBase.html#addSystemEventTrigger>
> Also, I've read quite a lot about Deferreds. I thought initially they were for multithreading your application, but I realise that's wrong, so I don't understand what the point in them is?

You can't block (i.e. wait to return from your function until you have a result) in an async system, so Deferreds are a placeholder for a result that doesn't exist yet.  krondo.com's Twisted introduction covers this in some detail, if the official Twisted docs didn't help you: http://krondo.com/?page_id=1327

> This isn't to say there isn't one mind you, I think I'm just majorly missing the point.

If there weren't a point to having Deferreds then Twisted would be a very strange system indeed ;).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151225/8d2b5be0/attachment.html>

From glyph at twistedmatrix.com  Fri Dec 25 02:20:04 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 01:20:04 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
Message-ID: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>


> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> What is the purpose of IOpenSSLTrustRoot ?

The idea is that we have public functions, mainly `optionsForClientTLS?, which need to take a thing that represents a "trust root".  We want this to be something that can abstractly be described at a high level, but then in reality we need to do with gross implementation details of OpenSSL.  So this interface describes what you pass.

> It it documented as a private interface, it has only private methods, but then it is exposed in  twisted.internet.ssl.optionsForClientTLS
> 
> Why?

Yes, this is intentional.  It is a private interface, so you can't check if something provides it, you aren't allowed to know what attributes it has, and you can't implement it.  However, you can call a function that is documented to return a value that provides it (such as `twisted.internet.ssl.platformTrust?) and pass that value to a function documented to accept it (such as `twisted.internet.ssl.optionsForClientTLS`).

It's private because we weren't sure if we'd want to change it.  At the time it was implemented, the only two cases were OpenSSLDefaultPaths and Certificate.  In the case of Certificate, you know what certificate you're adding, but in the case of OpenSSLDefaultPaths, you just call a method on the context object to mutate it, and you can't extract information about which certificates are trusted past that.  The method we came up with, _addCACertsToContext, was a gross compromise which allowed for implementing this but could not be made abstract, because it reflects a bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL objects, which we are trying to do less of.  For one thing, we'd eventually like to support TLS via OpenSSL using an API provided by Cryptography; for another, we'd like to one day provide TLS from an API that might not be backed by OpenSSL at all.  So reducing the surface area of our public API that touches pyOpenSSL is important.

Hopefully this thoroughly explains the decision?

> I am confused while trying to review https://twistedmatrix.com/trac/ticket/7671 <https://twistedmatrix.com/trac/ticket/7671> 
> 
> Please take a look at my review and add your wisdom :)

This is quite a detailed review :-).

Merry christmas,

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151225/991030ad/attachment.html>

From adi at roiban.ro  Fri Dec 25 15:19:02 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 26 Dec 2015 00:19:02 +0200
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
Message-ID: <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>

Hi,

On 25 December 2015 at 11:20, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> What is the purpose of IOpenSSLTrustRoot ?
>
>
> The idea is that we have public functions, mainly `optionsForClientTLS?,
> which need to take a thing that represents a "trust root".  We want this to
> be something that can abstractly be described at a high level, but then in
> reality we need to do with gross implementation details of OpenSSL.  So
> this interface describes what you pass.
>

Reading the docstring of IOpenSSLTrustRoot it does not give any hints about
optionsForClientTLS

So instead of

    Trust settings for an OpenSSL context.

Maybe it should be something like:

   Marker only interface for private implementations of OpenSSL trust root
things.

It it documented as a private interface, it has only private methods, but
> then it is exposed in  twisted.internet.ssl.optionsForClientTLS
>
> Why?
>
>
> Yes, this is intentional.  It is a private interface, so you can't check
> if something provides it, you aren't allowed to know what attributes it
> has, and you can't implement it.  However, you *can* call a function that
> is documented to return a value that provides it (such as
> `twisted.internet.ssl.platformTrust?) and pass that value to a function
> documented to accept it (such as
> `twisted.internet.ssl.optionsForClientTLS`).
>
> It's private because we weren't sure if we'd want to change it.  At the
> time it was implemented, the only two cases were OpenSSLDefaultPaths and
> Certificate.  In the case of Certificate, you know what certificate you're
> adding, but in the case of OpenSSLDefaultPaths, you just call a method on
> the context object to mutate it, and you can't extract information about
> which certificates are trusted past that.  The method we came up
> with, _addCACertsToContext, was a gross compromise which allowed for
> implementing this but could not be made abstract, because it reflects a
> bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL
> objects, which we are trying to do less of.  For one thing, we'd eventually
> like to support TLS via OpenSSL using an API provided by Cryptography; for
> another, we'd like to one day provide TLS from an API that might not be
> backed by OpenSSL at all.  So reducing the surface area of our public API
> that touches pyOpenSSL is important.
>
> Hopefully this thoroughly explains the decision?
>

I understand now, but I find it hard to extract this information just from
the code... maybe I am a bad code reader, or maybe the  IOpenSSLTrustRoot
docstring should inform that it is a gross compromise so that other people
will understand that this is not really intentional ... and invited to find
something better :)

I am happy to see more backend neutral API but unless we have at least
another use case for non OpenSSL backed TLS I don't know if it worth
designing an API for that unknown API.

I am confused while trying to review
> https://twistedmatrix.com/trac/ticket/7671
>
> Please take a look at my review and add your wisdom :)
>
>
> This is quite a detailed review :-).
>
> Merry christmas,
>
>
Many thanks for your comment.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151226/51b36aac/attachment.html>

From meejah at meejah.ca  Fri Dec 25 15:35:00 2015
From: meejah at meejah.ca (meejah)
Date: Sat, 26 Dec 2015 02:35:00 +0400
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Fri, 25 Dec 2015 01:20:04 -0800")
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
Message-ID: <86d1tuupgr.fsf@atlantis.meejah.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

(Thanks for the review, Adi!)

> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:

>> It it documented as a private interface, it has only private methods,
>> but then it is exposed in twisted.internet.ssl.optionsForClientTLS
>> Why?

> Yes, this is intentional.  It is a private interface, so you can't
> check if something provides it, you aren't allowed to know what
> attributes it has, and you can't implement it.

So in the context of #7671 and testing, can the tests for multiTrust()
just check that they get an IOpenSSLTrustRoot implementation back or do
... something else? That is, currently I'm just confirming this via
asserting IOpenSSLTrustRoot.providedBy(theReturnValue) or so in the
tests. Of course, this means I'm importing the private interface into
the tests...

Thanks! and merry christmas,
meejah


From glyph at twistedmatrix.com  Fri Dec 25 19:27:58 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 18:27:58 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
 <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>
Message-ID: <8E552B9F-363C-4A5D-BCB8-EECDEC2A739C@twistedmatrix.com>


> On Dec 25, 2015, at 2:19 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> On 25 December 2015 at 11:20, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> Hi,
>> 
>> What is the purpose of IOpenSSLTrustRoot ?
> 
> The idea is that we have public functions, mainly `optionsForClientTLS?, which need to take a thing that represents a "trust root".  We want this to be something that can abstractly be described at a high level, but then in reality we need to do with gross implementation details of OpenSSL.  So this interface describes what you pass.
> 
> Reading the docstring of IOpenSSLTrustRoot it does not give any hints about optionsForClientTLS
> 
> So instead of
> 
>     Trust settings for an OpenSSL context.
> 
> Maybe it should be something like:
> 
>    Marker only interface for private implementations of OpenSSL trust root things.

This is incorrect, though.  The term "marker interface" means "interface with no attributes or methods, used to denote a complex property that Interface is insufficiently expressive to describe".

Oh and hey we didn't even invent the term: https://en.wikipedia.org/wiki/Marker_interface_pattern :)

>> It it documented as a private interface, it has only private methods, but then it is exposed in  twisted.internet.ssl.optionsForClientTLS
>> 
>> Why?
> 
> Yes, this is intentional.  It is a private interface, so you can't check if something provides it, you aren't allowed to know what attributes it has, and you can't implement it.  However, you can call a function that is documented to return a value that provides it (such as `twisted.internet.ssl.platformTrust?) and pass that value to a function documented to accept it (such as `twisted.internet.ssl.optionsForClientTLS`).
> 
> It's private because we weren't sure if we'd want to change it.  At the time it was implemented, the only two cases were OpenSSLDefaultPaths and Certificate.  In the case of Certificate, you know what certificate you're adding, but in the case of OpenSSLDefaultPaths, you just call a method on the context object to mutate it, and you can't extract information about which certificates are trusted past that.  The method we came up with, _addCACertsToContext, was a gross compromise which allowed for implementing this but could not be made abstract, because it reflects a bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL objects, which we are trying to do less of.  For one thing, we'd eventually like to support TLS via OpenSSL using an API provided by Cryptography; for another, we'd like to one day provide TLS from an API that might not be backed by OpenSSL at all.  So reducing the surface area of our public API that touches pyOpenSSL is important.
> 
> Hopefully this thoroughly explains the decision?
> 
> I understand now, but I find it hard to extract this information just from the code... maybe I am a bad code reader, or maybe the  IOpenSSLTrustRoot docstring should inform that it is a gross compromise so that other people will understand that this is not really intentional ... and invited to find something better :)

I think the documentation as it is does maintainers a slight disservice, as the assumption is that you've come to IOpenSSLTrustRoot after having read the docstring for optionsForClientTLS, or platformTrust, or OpenSSLCertificateOptions.  So it could definitely be re-written to take into account the fact that a maintainer might discover this interface first.  Honestly it seems to me that a "@see:" with links to the thing that take it as a parameter would get us 70% of the way there, just so that maintainers could use it as a jumping-off point.  Some of the explanation from these emails would also be useful, of course, to give some context.  It says "things outside of twisted shouldn't implement it" but it doesn't really explain why.

> I am happy to see more backend neutral API but unless we have at least another use case for non OpenSSL backed TLS I don't know if it worth designing an API for that unknown API.

We have definitely made some missteps with this API design (I should probably write a giant "mea culpa" blog post at some point pointing out what many of those errors were).  However, the point of things like IOpenSSLTrustRoot is not to prematurely introduce extra interfaces and functionality where they are not needed - we need such an interface even for a pure OpenSSL-only backend.  The point is to keep those things out of the public interface so that callers are not overly coupled to them.

One thing that's important to remember is that "private" is a social convention in Python, so if needs must, a Twisted application can always just go ahead and implement this interface. 

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151225/89c5af78/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Dec 25 19:32:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 18:32:21 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <86d1tuupgr.fsf@atlantis.meejah.ca>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
 <86d1tuupgr.fsf@atlantis.meejah.ca>
Message-ID: <0FB38EA5-52C0-4A4F-AC09-27EEF9C353ED@twistedmatrix.com>


> On Dec 25, 2015, at 2:35 PM, meejah <meejah at meejah.ca> wrote:
> 
> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> 
> (Thanks for the review, Adi!)
> 
>> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
>>> It it documented as a private interface, it has only private methods,
>>> but then it is exposed in twisted.internet.ssl.optionsForClientTLS
>>> Why?
> 
>> Yes, this is intentional.  It is a private interface, so you can't
>> check if something provides it, you aren't allowed to know what
>> attributes it has, and you can't implement it.
> 
> So in the context of #7671 and testing, can the tests for multiTrust()
> just check that they get an IOpenSSLTrustRoot implementation back or do
> ... something else? That is, currently I'm just confirming this via
> asserting IOpenSSLTrustRoot.providedBy(theReturnValue) or so in the
> tests. Of course, this means I'm importing the private interface into
> the tests...

Twisted's own tests may always feel free to import private implementation details if they're useful for testing.

However, ideally, the tests for multiTrust ought to pass along a fake OpenSSL context object and ensure the correct methods are called on it; you can do this without importing any private API, just public API from pyOpenSSL and public API from Twisted, but it does involve a bit more set-up.  There are, however, lots of examples of doing that setup, particularly in test_sslverify (which already has a FakeContext).  So if you can, please do it that way.

Thanks!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151225/badb3247/attachment.html>

From kebin70 at gmail.com  Sat Dec 26 17:08:05 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 26 Dec 2015 16:08:05 -0800
Subject: [Twisted-Python] on template processing
Message-ID: <CAA-sNEaLqB6+VVc6D=8P-3JWEK7ewVfcdXoLD6L2OYC7cCjfrg@mail.gmail.com>

1) Is template block processing done top to bottom sequentially?  I've
included example.py - it's interesting that by having a blocking call first
the second request is blocked, but having the blocking call after a
non-blocking call the second request is not.  I would've thought it would
behave as a deferred list, but looking at _flattenTree and guessing not.
Maybe related to wait_for_it example?

2) Is it possible for a Resource to act as an Element too?  I've included a
non-working elementresource.py.  I'm a total hack, but I would think that
if an instance had a loader attr it could be processable.

3) Is it possible to include xmlns:t="
http://twistedmatrix.com/ns/twisted.web.template/0.1" not in a tag itself?
Or perhaps have a tag like 'render-block' that could be transparent-like?

4) Is it possible to have xmlns:t="
http://twistedmatrix.com/ns/twisted.web.template/0.1" in multiple places in
a template?  I have some cases with inline scripts that bonk out with > or
< characters.  This is very much related to #3.

5) Is it possible for a render element to return something like "<~sometag
t:render>..." and process recursively?

6) Is there any examples of connection keep-alive long polling?

7) Examples of request based scoping would be great.  All the examples on
http://twistedmatrix.com/documents/13.0.0/web/howto/twisted-templates.html
have flatten(None... -  I've included request_scope.py

8) The wait_for_it example, is that meant as a chunked transfer example?
It would be cool to have an example I could open in a browser.  Trying to
wrap my head around this and subviews in the meantime.

Happy holidays.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151226/70b99511/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2089 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151226/70b99511/attachment.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: elementresource.py
Type: text/x-python
Size: 1015 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151226/70b99511/attachment-0001.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: request_scope.py
Type: text/x-python
Size: 2048 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151226/70b99511/attachment-0002.py>

From techtonik at gmail.com  Tue Dec 29 15:13:37 2015
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 30 Dec 2015 01:13:37 +0300
Subject: [Twisted-Python] Twisted 15.4 was the last release to support
 Python 2.6; or: a HawkOwl Can't Words Situation
In-Reply-To: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>
References: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>
Message-ID: <CAPkN8xJOmoG5g6P0LkvaO-DBK+H+AKwSB-QEOfJqFKAgmiVtTA@mail.gmail.com>

Is it possible to fix the documentation?
https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/NEWS?format=raw

On Mon, Dec 7, 2015 at 4:06 PM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
> Hi everyone!
>
> It's been brought to my attention that I misworded something in the release notes and it slipped through the cracks. In the NEWS I said:
>
>> This is the last Twisted release where Python 2.6 is supported, on any platform.
>
> However, I meant that this is the first Twisted release to drop 2.6 support wholesale, preventing import on this platform. Twisted 15.4 will still operate, so if you have Python 2.6 deployment requirements, bracket the maximum to 15.4 on that platform by using an if statement in your setup.py, and `Twisted >=*minreq*,<=15.4; python_version < '2.7'` under requires_dist in your setup.cfg, where minreq is the minimum required Twisted.
>
> Sorry for the inconvenience!
>
> - Amber "HawkOwl" Brown
> Twisted Release Manager
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.


From guglielmo.pasa at bluewin.ch  Wed Dec 30 06:47:40 2015
From: guglielmo.pasa at bluewin.ch (Guglielmo Pasa)
Date: Wed, 30 Dec 2015 14:47:40 +0100
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not install
Message-ID: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>

Hi,
I?m trying to get twisted installed on OS X 10.11 with virtualenv and python3.5. All dependencies are satisfied.
It seems to install correctly and it seems that OpenSSL is working pretty well with it.

But when I try to load

import Crypto
import twisted.conch.ssh.transport

I get

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named ?twisted.conch'

on inspection, in the folder site-packages/twisted there is no conch folder.


I tried to build twisted from source and conch doesn?t seem to build either

What can I do to solve this?





From adi at roiban.ro  Wed Dec 30 07:10:38 2015
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 30 Dec 2015 16:10:38 +0200
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not
	install
In-Reply-To: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
References: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
Message-ID: <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>

On 30 December 2015 at 15:47, Guglielmo Pasa <guglielmo.pasa at bluewin.ch>
wrote:

> Hi,
> I?m trying to get twisted installed on OS X 10.11 with virtualenv and
> python3.5. All dependencies are satisfied.
> It seems to install correctly and it seems that OpenSSL is working pretty
> well with it.
>
> But when I try to load
>
> import Crypto
> import twisted.conch.ssh.transport
>
> I get
>
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> ImportError: No module named ?twisted.conch'
>
> on inspection, in the folder site-packages/twisted there is no conch
> folder.
>
>
> I tried to build twisted from source and conch doesn?t seem to build either
>
> What can I do to solve this?
>

Use Python 2.7 :)

Conch.ssh was not ported to Python 3

Regards

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151230/73d6f32f/attachment.html>

From hawkowl at atleastfornow.net  Wed Dec 30 07:12:31 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 30 Dec 2015 22:12:31 +0800
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not
	install
In-Reply-To: <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>
References: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
 <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>
Message-ID: <1E61F37A-8C02-4B72-A4EA-C5D680BB3D42@atleastfornow.net>


> On 30 Dec 2015, at 22:10, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 30 December 2015 at 15:47, Guglielmo Pasa <guglielmo.pasa at bluewin.ch> wrote:
> Hi,
> I?m trying to get twisted installed on OS X 10.11 with virtualenv and python3.5. All dependencies are satisfied.
> It seems to install correctly and it seems that OpenSSL is working pretty well with it.
> 
> But when I try to load
> 
> import Crypto
> import twisted.conch.ssh.transport
> 
> I get
> 
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> ImportError: No module named ?twisted.conch'
> 
> on inspection, in the folder site-packages/twisted there is no conch folder.
> 
> 
> I tried to build twisted from source and conch doesn?t seem to build either
> 
> What can I do to solve this?
> 
> Use Python 2.7 :)
> 
> Conch.ssh was not ported to Python 3

Yet ;)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20151230/ce710321/attachment.pgp>

From mithrandi at mithrandi.net  Tue Dec  1 00:35:15 2015
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 01 Dec 2015 07:35:15 +0000
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <7BFE7DD4-1796-4EE3-BE4F-D4AC78774686@atleastfornow.net>
Message-ID: <CAMcKhMTUe_UvFHhZmQfabnOV_1d_aqXiKrY+mEo+tWJ_dqKTHA@mail.gmail.com>

On Mon, 30 Nov 2015 at 16:50 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> The migration will have a handful of policy changes that we will have to
> resolve -- such as ensuring that all merges have a topfile -- which aren't
> possible under a GitHub based system.


You could make master/trunk/whatever a protected branch, and have a
required status check for this, but that would require some external CI
thing that actually performs the status check.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/192c4fde/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Dec  1 01:07:08 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 1 Dec 2015 16:07:08 +0800
Subject: [Twisted-Python] Supported Platform Changes: Fedora 23 (3.4) &
	Ubuntu 15.10 (2.7, 3.5) Added, Fedora 21 (2.7, 3.4) Removed
Message-ID: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>

Hi everyone,

Three new platforms have been added as supported platforms for Twisted:

- Fedora 23, Python 3.4 (2.7 has test failures, will become supported soon)
- Ubuntu 15.10, Python 2.7
- Ubuntu 15.10, Python 3.5

Additionally, Fedora 21 has gone End Of Life and its builders have been removed.

Regards,

Amber Brown
Twisted Infrastructure Owl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151201/bc4ea044/attachment.sig>

From glyph at twistedmatrix.com  Tue Dec  1 01:30:00 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Dec 2015 00:30:00 -0800
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel
	is ready for traffic?
In-Reply-To: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
References: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
Message-ID: <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>


> On Nov 30, 2015, at 4:17 PM, Naveen Michaud-Agrawal <naveen.michaudagrawal at gmail.com> wrote:
> 
> Hi,
> 
> I've managed to implement ssh tunneling using this answer on SO - http://stackoverflow.com/a/23549091/5605324 <http://stackoverflow.com/a/23549091/5605324>, and the tunnel can be used from another app. However I would like to use it from within the twisted application, but I'm not sure what to wire up so that I can get a callback when the SSHConnectForwardingChannel is ready for traffic. It looks like I can attach a callback to channel's _channelOpenDeferred, but that seems a bit hacky. Any suggestions?

Don't use listenTCP. Use endpoints: https://twistedmatrix.com/documents/15.5.0/core/howto/endpoints.html 

Once you have adopted endpoints, it (hopefully) becomes clear that one way to do what you want is to create your own in-process IStreamServerEndpoint implementation, and pass 'factory' in that answer to its 'listen' method, you can deliver data for it to relay to the remote port by calling its '.dataReceived' method, and implement your own '.write' method on your transport in order to deliver data to your application.  There's nothing magical about these methods, after all, they're just Python functions - and forwarding.SSHListenForwardingFactory just expects to talk to a transport, it shouldn't matter what kind it is.  (It might need to implement other interfaces, like ITCPTransport; not everything in Twisted is scrupulously careful about declaring what exact interface it needs, and there are often bugs in edge-cases like this.  But those are also just a few more methods you can implement, if necessary.)

Does this make sense?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/6a578f67/attachment-0002.html>

From jml at mumak.net  Tue Dec  1 03:40:38 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 01 Dec 2015 10:40:38 +0000
Subject: [Twisted-Python] Supported Platform Changes: Fedora 23 (3.4) &
 Ubuntu 15.10 (2.7, 3.5) Added, Fedora 21 (2.7, 3.4) Removed
In-Reply-To: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>
References: <A826B44A-67D6-4F8F-A5CF-B9B6DCE701B2@atleastfornow.net>
Message-ID: <CAHZ8tnZM5J0ZdL=Zzh6vi9PDBe0oU5rBvcCjodR7QURrGdM9Bw@mail.gmail.com>

Thank you Amber!

On Tue, 1 Dec 2015 at 08:07 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Hi everyone,
>
> Three new platforms have been added as supported platforms for Twisted:
>
> - Fedora 23, Python 3.4 (2.7 has test failures, will become supported soon)
> - Ubuntu 15.10, Python 2.7
> - Ubuntu 15.10, Python 3.5
>
> Additionally, Fedora 21 has gone End Of Life and its builders have been
> removed.
>
> Regards,
>
> Amber Brown
> Twisted Infrastructure Owl
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/7afcc846/attachment-0002.html>

From naveen.michaudagrawal at gmail.com  Tue Dec  1 09:30:20 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Tue, 1 Dec 2015 11:30:20 -0500
Subject: [Twisted-Python] Notification when SSHConnectForwardingChannel
 is ready for traffic?
In-Reply-To: <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>
References: <CANmJQmm0=omLmXx9KRYVhSz9uu7_DoSE6M6cE+wUzH_yFdDciA@mail.gmail.com>
 <54F32FE5-75D2-45B3-AFC2-9530F44CFB38@twistedmatrix.com>
Message-ID: <CANmJQmm2HSA00tKKcoZhYR941Hn+iGPPBrb-faTMGpkwyfmxqQ@mail.gmail.com>

Yes it does. It looks like endpoints will also help in implementing the
next piece which is to support connections over SSL (instead of SSH
tunnelling). I haven't really used twisted since 8.0 - looks like I have a
lot of catching up to do! Thanks for the quick response.

Regards,
Naveen

On Tue, Dec 1, 2015 at 3:30 AM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Nov 30, 2015, at 4:17 PM, Naveen Michaud-Agrawal <
> naveen.michaudagrawal at gmail.com> wrote:
>
> Hi,
>
> I've managed to implement ssh tunneling using this answer on SO -
> http://stackoverflow.com/a/23549091/5605324, and the tunnel can be used
> from another app. However I would like to use it from within the twisted
> application, but I'm not sure what to wire up so that I can get a callback
> when the SSHConnectForwardingChannel is ready for traffic. It looks like I
> can attach a callback to channel's _channelOpenDeferred, but that seems a
> bit hacky. Any suggestions?
>
>
> Don't use listenTCP. Use endpoints:
> https://twistedmatrix.com/documents/15.5.0/core/howto/endpoints.html
>
> Once you have adopted endpoints, it (hopefully) becomes clear that one way
> to do what you want is to create your own in-process IStreamServerEndpoint
> implementation, and pass 'factory' in that answer to its 'listen' method,
> you can deliver data for it to relay to the remote port by calling its
> '.dataReceived' method, and implement your own '.write' method on your
> transport in order to deliver data to your application.  There's nothing
> magical about these methods, after all, they're just Python functions - and
> forwarding.SSHListenForwardingFactory just expects to talk to a transport,
> it shouldn't matter what kind it is.  (It might need to implement other
> interfaces, like ITCPTransport; not everything in Twisted is scrupulously
> careful about declaring what exact interface it needs, and there are often
> bugs in edge-cases like this.  But those are also just a few more methods
> you can implement, if necessary.)
>
> Does this make sense?
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
-----------------------------------
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/12ecb3d9/attachment-0002.html>

From jml at mumak.net  Tue Dec  1 11:36:06 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 01 Dec 2015 18:36:06 +0000
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
Message-ID: <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>

On Tue, 17 Nov 2015 at 23:48 Craig Rodrigues <rodrigc at crodrigues.org> wrote:

> On Tue, Nov 17, 2015 at 8:57 AM, Adi Roiban <adi at roiban.ro> wrote:
>
>>
>> For now, the funds were raised to migrate to GitHub, so we can not use
>> them to do other things.
>>
>> We will stay on Trac for issues... at least for now.
>>
>> I have no idea how we can migrate to any issue tracker without losing
>> data if we don't have full access to the database.
>>
>
>
> [snip]


> B.7  Update all wiki documentation to change all references to getting
> code from Subversion,
>          to getting code from GitHub.
>
>
Probably would be a good idea to have a list of such changes *before* the
migration.


> B.8  Update all systems which used Subversion to use GitHub.  For example,
> buildbots.
>
>
Couldn't we do this before the migration anyway?  At least partly?

jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/d4544e1d/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Dec  1 18:01:34 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Dec 2015 17:01:34 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
Message-ID: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>


> On Dec 1, 2015, at 10:36 AM, Jonathan Lange <jml at mumak.net> wrote:
> 
> B.7  Update all wiki documentation to change all references to getting code from Subversion,
>          to getting code from GitHub.
> 
> 
> Probably would be a good idea to have a list of such changes *before* the migration. 

Yes. Everything should be written up and reviewed beforehand, and 

> B.8  Update all systems which used Subversion to use GitHub.  For example, buildbots.
> 
> 
> Couldn't we do this before the migration anyway?  At least partly?

Well, I mean... this is "the migration" itself.  So this should happen earlier in the process, particularly earlier than we start committing directly to git?  Much of this work is already done: the buildbots are already getting the source from git, not SVN.

One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151201/bcf968f0/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Dec  2 15:39:08 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Dec 2015 14:39:08 -0800
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <A528F31A-5FDA-4C3C-B5A7-3324616F9AFE@twistedmatrix.com>


> On Nov 19, 2015, at 3:50 AM, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> 
>> On 18 Nov 2015, at 12:18, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
> 
> Sorry about the delay in responding to this, but I wanted to make sure I knew at least a bit about what I was talking about before I responded!

Clearly this is a challenging topic that requires lots of thought on the part of each interlocutor, and may require long rounds of consideration before each reply.  No need to apologize.

>>> What do people think of this approach?
>> 
>> So I think you're roughly on the right track but there are probably some Twisted-level gaps to fill in.
>> 
>> I've already gestured in the direction of Tubes (as have others) and it's something to think about.  But before we get to that, let's talk about a much more basic deficiency in the API: although there's an "IRequest", and an "IResource", there's no such thing as an "IResponse".  Instead, "IRequest" stands in for both the request and the response, because you write directly to a request (implicitly filling out its response as you do so).
> 
> So, I think in general this is interesting. One of the big difficulties I’m having right now is that I’m trying to combine this “streaming HTTP” work with the implementation of HTTP/2, which means that I need to keep the HTTP/2 work in mind whenever I talk about this *and* update the HTTP/2 design in response to decisions we make here. This means I’ve got quite a lot of balls in the air right now, and I am confident I’ll drop quite a few. One thing I’m deliberately not doing here is considering Tubes, in part because I’m extremely concerned about backward compatibility, and want the HTTP/2 work to function in the same environment.
> 
> Unfortunately, this means this conversation is blending into the HTTP/2 one, so I’m going to hijack this thread and bring in some concrete discussion of what I’m working on with the HTTP/2 stuff.

Hijack away.  I think we should be primarily concerned with getting HTTP/2 integrated for the moment.  The reason this raises so many concerns related to the streaming stuff is that the internal implementation of HTTP/2 ought to be more amenable to pulling apart to fit into an actually good interface to the HTTP protocol.

I think that twisted._threads points in a promising direction for this sort of work: let's make the old, crappy HTTP APIs work as-is, but with a new, private implementation that is better-factored but not fully documented.  We have the old interface as a proof-of-concept, so the new stuff needs to at least be good enough to be an internal implementation detail for that; we don't have to commit to a new public API to land it, and hopefully with some minor edits we can just make it public as the "good" interface (and then backport HTTP/1.1 over it, since we will probably be dealing with legacy HTTP/1.1 clients and servers until we're all dead).

> I was having a conversation about the HTTP/2 architecture on #twisted-dev yesterday, which has led towards my current working approach for HTTP/2, which will be to have two underlying objects. We’ll have H2Connection, which implements IProtocol, and H2Stream, which implements ITransport. These two objects will be *extremely* tightly coupled: H2Stream cannot meaningfully run over an arbitrary transport mechanism, and knows a great deal about how H2Connections work.

This seems good, except for the "extreme" tight coupling.  IProtocol and ITransport aren't that tightly coupled.  Why do H2Stream and H2Connection need to be?

> The reason we need to take this approach is because IConsumer doesn’t allow for us to have correlators, so even if we only had H2Connection it wouldn’t be able to identify a given producer with the stream it holds. By extension, IConsumer cannot consume multiple producers at once. For this reason, we need an interface between H2Connection and H2Stream that is similar to ITransport and IConsumer, but more featureful. Basically, H2Stream is a thin shim between a producer and H2Connection that adds a stream ID to a few function calls.

This is basically a good pattern.  It exposes a hard-to-screw-up interface to the next layer up, because you can't forget to include a (mandatory) stream ID.  I've implemented several multiplexing things that work more or less like this.

>> Luckily we have an existing interface that might point the way to a better solution, both for requests and responses: specifically, the client IResponse: https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IResponse.html.
>> 
>> This interface is actually pretty close to what we want for a server IResponse as well.  Perhaps even identical.  Its static data is all exposed as attributes which can be relatively simply inspected, and the way it delivers a streaming response is that it delivers its body to an IProtocol implementation (via .deliverBody(aProtocol)).  This is not quite as graceful as having a .bodyFount() method that returns an IFount from the tubes package; however, the tubes package is still not exactly mature software, so we may not want to block on depending on it.  Importantly though, this delivers all the events you need as a primitive for interfacing with such a high-level interface; it would definitely be better to add this sort of interface Real Soon Now, because then the tubes package could simply have a method, responseToFount (which it will need anyway to work with Agent) that calls deliverBody internally.
>> 
>> This works as a primitive because you have all the hooks you need for flow-control.  This protocol receives, to its 'makeConnection' method, an ITransport which can provide the IProducer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IProducer.html and IConsumer https://twistedmatrix.com/documents/15.4.0/api/twisted.internet.interfaces.IConsumer.html interfaces for flow-control.  It receives dataReceived to tell it a chunk has arrived and connectionLost to tell it the stream has terminated.
> 
> Just let me clarify how this is expected to work. Somewhere we have a t.w.s.Site, which builds some kind of HTTP protocol (currently HTTPChannel, in future some object that can transparently swap between HTTPChannel and H2Connection) when connections are received.

Another option could also be having a t.w.s.NewSite (with that name hopefully obviously being a straw man) so that Site can simply be deprecated in favor of the new thing.  Making Site itself be able to accommodate the new stuff would be nice but is definitely not mandatory.

> These two protocols each build an IGoodRequest, which is very similar to IRequest but has a deliverBody method. The consumer of this (whether IResource or some other thing). These objects, if they want to consume a stream, register a protocol via deliverBody. At this point, H2Connection (via H2Stream) provides itself as the transport to that protocol, and calls deliverBody when chunks of data are received.

This sounds great.  One thing to maybe watch out for: what if nobody calls deliverBody?  This can sometimes be a little annoying in client code, to debug why a channel is never closed.  Having a nice error in this case would be a cherry on top.

> When the object receiving the request is ready to send a response, it calls…something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

A minor bit of critique here: the Single Responsibility Principle <https://en.wikipedia.org/wiki/Single_responsibility_principle> dictates that we ought not to have H2Stream literally implement both IProtocol and ITransport; rather, we should have an _H2StreamProtocol and an _H2StreamTransport, since the thing talking to the IProtocol implementation really ought to be wholly distinct from the thing talking to the ITransport implementation, and this kind of duality makes it very easy for users - especially programmers new to Twisted - to get confused.  As Nathaniel Manista and Augie Fackler put it in The Talk <https://www.youtube.com/watch?v=3MNVP9-hglc>, we want to express ourselves "structurally", if you only want application code to talk to the transport implementation and it's an error to talk to the protocol implementation, pass only the transport implementation.

> Is my understand of that correct? If so, I think this design can work: essentially, H2Stream becomes the weird intermediary layer that appears as both a transport and a protocol to the request/response layer. Underneath the covers it mostly delegates to H2Connection, which implements a slightly weirdo version of IConsumer (and in fact IProducer) that can only be consumed by H2Stream.

I don't quite get why it needs to be slightly weirdo (hopefully IPushProducer is sufficient?) but yes, this all sounds right to me.

> 
>> Unfortunately the client IRequest https://twistedmatrix.com/documents/15.4.0/api/twisted.web.iweb.IClientRequest.html isn't quite as useful (although its relative minimalism should be an inspiration to anyone designing a next-generation IRequest more than the current IRequest's sprawling kitchen-sink aesthetic).  However, IResponse.deliverBody could be applied to IGoodRequest as well.  If we have a very similar-to-IResponse shaped IRequest object, say with 'method', 'uri' and 'headers', and then a 'deliverBody' that delivers the request body in much the same way, we could get a gracefully structured streaming request with works with a lot of existing code within Twisted.
>> 
>> Then the question is: what to do with IResource?
>> 
>> Right now the flow of processing a request is, roughly:
>> 
>> -> wait for full request to arrive
>>  -> have HTTPChannel fill out IRequest object
>> -> look at request.site.resource for the root
>> *-> call getChildWithDefault repeatedly, mutating "cursor" state on the IRequest as you move (specifically: "prepath" and "postpath" attributes)
>>  -> eventually reach the leaf Resource, or one with 'isLeaf' set on it, and delegate producing the response to that resource
>> *-> call resource.render(request)
>> -> examine the return value; if it's bytes, deliver them and close the connection; NOT_DONE_YET, just leave the connection open,
>> 
>> Instead, I think a good flow would be:
> 
> [snip long discussion of how to write locateChild]
> 
> Agreed that these proposed approaches would work well. I have no concrete feedback on them, they seem good to me.
> 
>> -> finally, call .responseForRequest(request) -> IResponse on the final Resource and deliver the IResponse to the network.
>> 
>> The way compatibility could be achieved here is to write a wrapper that would implement .responseForRequest to first collect the entire body, then synthesize a gross old-style-IRequest-like object out of the combination of that body and the other information about the resource, then call .getChildWithDefault on it a few times, then call the old-style .render_GET, et. al.  The IResponse returned from this compatibility .responseForRequest would wrap up calls like request.write and turn them into write() calls.
> 
> This seems super-gross but vaguely do-able, and we’ll need to write it in order to get the new H2Connection/H2Stream objects working with the old paradigm anyway.

"super-gross but vaguely do-able" is what we're shooting for in the compatibility layer :).

> All of this approach sounds reasonable modulo some careful thinking about how exactly we tie this in with the old paradigm. I’m particularly concerned about H2Channel, which I suspect many applications may know a great deal about. Changing its interface is likely to be slightly tricky, but we’ll see how it goes.

It might be useful to think about a parent interface, IHTTPChannel with all the least-common-denominator stuff on it, and sub-interfaces IHTTP1_1Channel and IHTTP2_0Channel which each derive from that and provide additional version-specific stuff.  I don't have enough protocol-specific knowledge to hand in short-term memory to comment on what that functionality might be though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151202/8cbc1551/attachment-0002.html>

From meejah at meejah.ca  Wed Dec  2 22:09:57 2015
From: meejah at meejah.ca (meejah)
Date: Thu, 03 Dec 2015 09:09:57 +0400
Subject: [Twisted-Python] txtorcon 0.14.2
Message-ID: <86bna815ju.fsf@atlantis.meejah.ca>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

With Twisted 15.5.0, a deprecated endpoint interface class is still
being used. This release backports the fix for that to the 0.14.x
branch.

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.14.2
   https://github.com/meejah/txtorcon/releases/tag/v0.14.2

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2.tar.gz.asc
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2-py2-none-any.whl
   http://timaq4ygg2iegci7.onion/txtorcon-0.14.2-py2-none-any.whl.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat <<EOF | sha256sum --check
fbc95c41e924b0e10156c46227eac2b4acf42a3b8d01f0ea3022897a10dc059a  txtorcon-0.14.2-py2-none-any.whl
f99819b1a71b8dea9e80317ec83c990b4ff608c98bc78a9fc1dc9991d349d13f  txtorcon-0.14.2.tar.gz
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEcBAEBAgAGBQJWX3WRAAoJEMJgKAMSgGmnOasH/i3NuaGRXu/wgdSHwDldPCpt
FCVFXN9RT8nTV8EN72V1iwqW0ir38YG8rM9TVNbImZlPFbMLaV0zJsb+rNId5xgb
uNBnlzrzdJOtlgofg4aKHBHjvDioV4xrZiypzOOc5u2Hyd8xuOPkI3fEVx+QfaKA
Cjbys6lCM2HZpeWkHlPKM3xnN9BoJ7IZodbv54fEehR5MgljkgwCoQJOdDy8tf9L
FQmpDXb7ptNXqbHNUltg8zkyIt345u6XcvZWX8wCxVu4PHCucdUW0VWzq33dNCuA
jbGvsesrJsr6+2a6wMq0FXJByaU1ymkwdp0OV55ASdNg5KBcfh4Sf4gMNiYGQw8=
=bBHR
-----END PGP SIGNATURE-----



From jon at multani.info  Thu Dec  3 02:02:51 2015
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 03 Dec 2015 10:02:51 +0100
Subject: [Twisted-Python] Writing a low-level network debugging tool
In-Reply-To: <56586B1A.6090200@imperial.ac.uk>
References: <37d17798f41d1e1d767720355d6e326a@webmail.webfaction.com>
 <56586B1A.6090200@imperial.ac.uk>
Message-ID: <5659D862.8060307@multani.info>

On 11/27/2015 03:39 PM, Phil Mayers wrote:
> On 27/11/15 14:05, Jonathan Ballet wrote:
>>    - how many tries did it require
>>      * if there were several tries, the timing of each ones
> 
> Typically, application-layer code doesn't retry a DNS lookup; rather 
> the
> c or other runtime will handle this, for example getaddrinfo() in 
> glibc,
> according to settings read from /etc/resolv.conf or compiled-in 
> defaults.
> 
> So it depends on whether you want to emulate "typical" application 
> code,
> a specific application stack that may or may not do it's own resolution
> (e.g. modern browsers) or something else.

That's a fair point, and I would like, as best as it can, to be as close 
as possible as a "typical" application; the goal really would be to 
measure the network conditions the applications are facing.

Although I understand I won't be able to get the retries number if the 
underlying code is using getaddrinfo() or something like this, I was 
thinking that twisted.names was maybe offering a "hand-made" resolver, 
which was producing the UDP packets itself and offered a way to plug 
some code there to measure these retries; I haven't checked yet.

But in any case, I guess it's going a little bit against my previous 
point which was to try to measure things "as used by a 'typical' 
application" (which isn't going to use twisted.names custom resolver.)

(Actually, I was surprised to discover that, although it can be 
configured from the command-line, `dig` doesn't report the number of 
tries/retries it makes, you can only deduce it by looking at the overall 
command execution time.)

>> * how long does it take to get the first bytes of the endpoint
>>    - how long does it take to complete the TCP connection handshake
>>    - the status of the packets exchanged (how many retries, how many
>> packets lost, etc.)
> 
> Some of this is available in platform-specific APIs e.g. SIOCGSTAMP and
> TCP_INFO socket options available on Linux.
> 
> In general, any timings you make based on return of control from kernel
> will include error relating to system/scheduling issues. If you're
> concerned about getting raw, on-the-wire timings, this is extremely
> difficult without being in-kernel, and even then various issues - TCP
> offload for example - can end up hiding data from you.

I will have a look at these options, as I will be running my tests under 
Linux anyway.
It's probably out of scope of Twisted anyway, but I could also retrieve 
the packets sent on the wire by listening on the related network 
interface set in promiscuous mode and correlate packets together. It's 
... "slightly" more work though...

>> How far can I do this kind of things with Twisted? I know I can 
>> somewhat
>> easily get the timings of the name resolution, the TCP connection
>> handshake also and the time to first byte(s), but what about the
>> packets? I haven't look at the code of Twisted Names yet, but if it's
>> doing the DNS request by itself, I may be able to plug-in somewhere 
>> and
>> have my request counter and the timers associated, but I'm not sure if
>> the underlying details of the TCP protocol are exposed to the upper
>> layer such as Twisted?
> 
> Only via platform-specific options.
> 
> To do this kind of thing "reliably", you'd need to reimplement TCP in
> user-space.
> 
> But the info above may be a helpful start.

Thanks for your answer Phil, I'll see what I can come up with!

  Jonathan



From naveen.michaudagrawal at gmail.com  Thu Dec  3 12:41:02 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Thu, 3 Dec 2015 14:41:02 -0500
Subject: [Twisted-Python] yielding from within deferToThread
Message-ID: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>

I'm trying to use sqlalchemy from a twisted application (by running all
blocking queries using deferToThread). Is it possible to yield from within
the function running in deferToThread? For example:


def threadRunQuery(engine, query):
    conn = engine.connect()
    res = conn.execute(query)

    while True:
        results = res.fetchmany(1000)
        if not results:
            break
        yield results


@defer.inlineCallbacks
def stream_results():
    engine = sqlalchemy.create_engine(...)
    query = "select * from table"
    result_iter = yield threads.deferToThread(threadRunQuery, engine, query)
    for results in result_iter:
        print results


It seems that the thread returns a generator, and so everything within
threadRunQuery is actually running on the main reactor thread. Is there
anyway to stream back results from a deferToThread?

Regards
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151203/59cffe83/attachment-0002.html>

From naveen.michaudagrawal at gmail.com  Thu Dec  3 12:54:12 2015
From: naveen.michaudagrawal at gmail.com (Naveen Michaud-Agrawal)
Date: Thu, 3 Dec 2015 14:54:12 -0500
Subject: [Twisted-Python] yielding from within deferToThread
In-Reply-To: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>
References: <CANmJQmnJQaSCR_VXTF=ktu00QyMxsVS_Gj9Kba3vwjExMFbpug@mail.gmail.com>
Message-ID: <CANmJQm=FLPwa+5okpraLS=t-Ct3=7=KVp6SECNt+PGO81NWThg@mail.gmail.com>

To answer my own question, it looks like i can just pass sqlalchemy's
ResultProxy into deferToThread to make a blocking call to fetch the next
set of results:

@defer.inlineCallbacks
def stream_results():
    engine = sqlalchemy.create_engine(...)
    query = "select * from table"
    proxy = yield threads.deferToThread(engine.execute, query)
    while True:
        results = yield threads.deferToThread(proxy.fetchmany, 1000)
        if not results:
            break
        print results



On Thu, Dec 3, 2015 at 2:41 PM, Naveen Michaud-Agrawal <
naveen.michaudagrawal at gmail.com> wrote:

> I'm trying to use sqlalchemy from a twisted application (by running all
> blocking queries using deferToThread). Is it possible to yield from within
> the function running in deferToThread? For example:
>
>
> def threadRunQuery(engine, query):
>     conn = engine.connect()
>     res = conn.execute(query)
>
>     while True:
>         results = res.fetchmany(1000)
>         if not results:
>             break
>         yield results
>
>
> @defer.inlineCallbacks
> def stream_results():
>     engine = sqlalchemy.create_engine(...)
>     query = "select * from table"
>     result_iter = yield threads.deferToThread(threadRunQuery, engine,
> query)
>     for results in result_iter:
>         print results
>
>
> It seems that the thread returns a generator, and so everything within
> threadRunQuery is actually running on the main reactor thread. Is there
> anyway to stream back results from a deferToThread?
>
> Regards
> Naveen Michaud-Agrawal
>



-- 
-----------------------------------
Naveen Michaud-Agrawal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151203/c2e04a5e/attachment-0002.html>

From rodrigc at crodrigues.org  Thu Dec  3 16:53:07 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Thu, 3 Dec 2015 15:53:07 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
Message-ID: <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>

On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> One thing that I'd love to see is a checklist that is kept up-to-date
> regarding which parts of this have already happened.
>
>
I worked with Amber and Adi and we have the checklist:
https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151203/a187e175/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec  3 20:07:49 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Dec 2015 19:07:49 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
Message-ID: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>


> On Dec 3, 2015, at 3:53 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
> 
> 
> 
> On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.
> 
> 
> I worked with Amber and Adi and we have the checklist:
> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md <https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md>

Thank you very much for your participation in this.

The important thing about a "checklist" though, is checking things off - how will that be kept up to date in sync with what has actually happened?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151203/d91ac606/attachment-0002.html>

From hawkowl at atleastfornow.net  Thu Dec  3 20:10:44 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 4 Dec 2015 11:10:44 +0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
 <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
Message-ID: <EF3EF915-E689-47C6-8F0D-1F3E0894AD9E@atleastfornow.net>


> On 4 Dec 2015, at 11:07, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Dec 3, 2015, at 3:53 PM, Craig Rodrigues <rodrigc at crodrigues.org> wrote:
>> 
>> 
>> 
>> On Tue, Dec 1, 2015 at 5:01 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> One thing that I'd love to see is a checklist that is kept up-to-date regarding which parts of this have already happened.
>> 
>> 
>> I worked with Amber and Adi and we have the checklist:
>> https://github.com/twisted-infra/braid/blob/git-migration-plan/gitmigration.md
> 
> Thank you very much for your participation in this.
> 
> The important thing about a "checklist" though, is checking things off - how will that be kept up to date in sync with what has actually happened?
> 
> -glyph

When it's accepted, we can make it a GItHub issue, and then we can, well, click on the checkbox. :)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151204/5a590bba/attachment.sig>

From meejah at meejah.ca  Thu Dec  3 22:14:53 2015
From: meejah at meejah.ca (meejah)
Date: Fri, 04 Dec 2015 09:14:53 +0400
Subject: [Twisted-Python] ssl APIs
Message-ID: <86h9jyztf6.fsf@atlantis.meejah.ca>


I've been fooling around with the Twisted SSL APIs.

I'd like to add a "loadPEM" and documentation to ssl.KeyPair; shall I
open a ticket and start this, or is there a reason it doesn't have a
loadPEM() like some of the other classes (or any docstrings)? It is
exported as a public class in "ssl".

Also I'm wondering why CertificateOptions takes actual OpenSSL objects
for args, instead of the Twisted equivalents; this leads to code
accessing ".original" all the time if you use Twisted APIs to load
Certificate (and friends) which seems .. odd. Perhaps either a
Certificate *or* the correct underlying OpenSSL object could be
accepted?

There also doesn't seem to be a way around importing
OpenSSLCertificateAuthorities from _sslverify (i.e. "private" class) if
you want to give optionsForClientTLS() more than a single certificate as
trustRoot. The only way I can see is to construct one of those from a
list of OpenSSL certificate instances and pass that as trustRoot=

Thanks for any hints,

-- 
meejah



From glyph at twistedmatrix.com  Fri Dec  4 02:34:22 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 01:34:22 -0800
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <86h9jyztf6.fsf@atlantis.meejah.ca>
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
Message-ID: <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>


> On Dec 3, 2015, at 9:14 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> I've been fooling around with the Twisted SSL APIs.
> 
> I'd like to add a "loadPEM" and documentation to ssl.KeyPair; shall I
> open a ticket and start this, or is there a reason it doesn't have a
> loadPEM() like some of the other classes (or any docstrings)? It is
> exported as a public class in "ssl".

Please go ahead and do it.

> Also I'm wondering why CertificateOptions takes actual OpenSSL objects
> for args, instead of the Twisted equivalents; this leads to code
> accessing ".original" all the time if you use Twisted APIs to load
> Certificate (and friends) which seems .. odd. Perhaps either a
> Certificate *or* the correct underlying OpenSSL object could be
> accepted?

Wow!  I am so glad someone else finally noticed this! :-)

Basically: yes, this is odd.  It is a result of a miscommunication (or rather, lack of communication) between the designers and the maintainers of that system.

A long time ago, I designed a "just enough" API for TLS (for Vertex, even, not really for Twisted), which is what got adopted into Twisted and eventually became _sslverify.py.  However, this was very much incomplete; it wasn't really designed for the 99% use-case (running an HTTPS server).

OpenSSLCertificateOptions was just a private implementation detail; it was the object returned by PrivateCertificate.options().  (Hence its somewhat odd name: 'options', which has now become the convention; see optionsForClientTLS).  However, the signature of .options() was tough to extend, since it just takes "*authorities".  Given Vertex's use-case that sort of made sense but it really doesn't belong in the general-purpose library of twisted.internet.ssl.

Anyway, I digress: the point is that these classes were lying around, basically undocumented, when Hynek Schlawack showed up and began his otherwise excellent feature additions to Twisted's TLS stack, among .  When asked "what is the 'good' ContextFactory class", the answer he got was unanimously 'OpenSSLCertificateOptions'.  So he did what seemed reasonable: start adding features to that class, and then make it public.  I took my eye off the ball for a release or two and by the time I checked back, "CertificateOptions" was the recommended public interface, warts and all :).

I want to be clear that despite the fact that there are problems with the factoring here, if you're writing TLS server code with Twisted today you should absolutely be using CertificateOptions; its interface is crummy but its implementation is very solid; again, Hynek did some really excellent work.  As the interface changes, the implementation should stay largely the same.

If you want to fix this, rather than continue to mangle this architectural monstrosity, I think we should develop something symmetrical to the new, mostly pretty good optionsForClientTLS - https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.ssl.html#optionsForClientTLS <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.ssl.html#optionsForClientTLS> - which operates entirely in terms of high-level wrapper objects defined in twisted.internet.ssl.  Make an 'optionsForServerTLS', which can have a simpler interface, because it will just accept relevant configuration parameters for server TLS, and under the covers still use CertificateOptions.  Initially we can provide the 'extraCertificateOptions' escape-hatch as we have with 'optionsForClientTLS', but once we've got a nice way to deal with esoterica like selecting TLS protocol versions and selecting cipher suites in those APIs, we can deprecate and remove the escape-hatch and be left with a clean function. 

So, are you up for contributing an 'optionsForServerTLS'?

> There also doesn't seem to be a way around importing
> OpenSSLCertificateAuthorities from _sslverify (i.e. "private" class) if
> you want to give optionsForClientTLS() more than a single certificate as
> trustRoot. The only way I can see is to construct one of those from a
> list of OpenSSL certificate instances and pass that as trustRoot=


Yes, that is in fact an oversight.  No need to write a ticket up yourself; you can just fix this one:

https://twistedmatrix.com/trac/ticket/7671 <https://twistedmatrix.com/trac/ticket/7671>

Thanks a ton for your interest, it would be great to get more people interested in TLS to maintain this stuff!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151204/885634be/attachment-0002.html>

From hawkowl at atleastfornow.net  Fri Dec  4 05:07:34 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Fri, 4 Dec 2015 20:07:34 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support from
	adbapi
Message-ID: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>

So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.

This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)

You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151204/12acf7bf/attachment.sig>

From adi at roiban.ro  Fri Dec  4 05:51:01 2015
From: adi at roiban.ro (Adi Roiban)
Date: Fri, 4 Dec 2015 14:51:01 +0200
Subject: [Twisted-Python] Attaching the release number to a closed/merged
	ticket
Message-ID: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>

Hi,

I would like to ask you if you think that is a good idea to have the
version of Twisted in which the changes associated with a ticket.

The use case would be: Someone search the net for something related to
Twisted (a bug or some feature) and the land to a Trac ticket. Just by
looking at the Trac ticket that person should see if the ticket is still in
work, is invalid or changes were made in release YY.NN

-------

My proposal for implementing this is:

Each release will have a new milestone with the same name called
'next-release'.

Once the changes for a ticket were merged the ticket is assigned to the
'next-release' milestone.

When release is done, the next-release is renamed to the release name and
all previous tickets will be auto-updated.

A new milestone called 'next-release' is created.

Invalid or duplicate tickets should not have the 'next-relesese' milestone.

-----------

Amber commented that using milestones for such a thing is not a good idea
and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
keep milestones like Python-3 unchanged.

I don't like tags as when a ticket is landed we don't know if next release
will be16.0 or 15.6.

We can use a 'next-release' tag and when a release is done, check all
tickets and update their tag.

--------

Please send your suggestions and comments.

Thanks!


-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151204/593b48fa/attachment-0002.html>

From commercials24 at yahoo.de  Fri Dec  4 05:42:55 2015
From: commercials24 at yahoo.de (peter)
Date: Fri, 4 Dec 2015 13:42:55 +0100
Subject: [Twisted-Python]  twisted.web response.py questions
Message-ID: <56618A4F.2090207@yahoo.de>

hi,


looking over:
https://twistedmatrix.com/documents/14.0.2/_downloads/response.py


im not really sure why one would use the line:

self.remaining  =  1024  *  10


this suggest to me that one knew what kind of page size was 
expected...but what if you dont?
wouldnt it make more sense to use someting like this:

def dataReceived(self, bytes):
         self.page_content = self.page_content + bytes


this would sum up all the data until connectionLost is called.
and in connectionLost():

def  connectionLost(self,  reason):
         print  'Finished receiving body:',  reason.getErrorMessage()
         self.finished.callback(self.page_content)


and then print it?




also i dont get why one would use

  return  finished


in cbRequest. where is this finished returned to?
its called via:

d.addCallback(cbRequest)

isnt the result from cbRequest thrown away?
i would expect the line to read:
new_deferred = d.addCallback(cbRequest)



thx for your answers






_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From jasonjwwilliams at gmail.com  Fri Dec  4 11:00:14 2015
From: jasonjwwilliams at gmail.com (Jason Williams)
Date: Fri, 4 Dec 2015 10:00:14 -0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support
	from adbapi
In-Reply-To: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
References: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
Message-ID: <184B525E-81D1-46A5-ADBC-D7BFDBD9B3B6@gmail.com>

We don't use Gadfly but I really appreciate you mentioning the changes like this on the ML. :)

Sent via iPhone

> On Dec 4, 2015, at 04:07, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.
> 
> This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)
> 
> You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.
> 
> - Amber
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From rodrigc at crodrigues.org  Fri Dec  4 12:11:19 2015
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Fri, 4 Dec 2015 11:11:19 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <CAG=rPVeBRwAGr6QZdiAe0v0GkqWxpMDziuLnm3qCpXk4CCmF8Q@mail.gmail.com>
 <EC9181A7-1951-4165-9E5C-FE9B7BE8F761@twistedmatrix.com>
Message-ID: <CAG=rPVcZydENHPFq==AfX=01t=HaVGb_iFKB2Ch4SPv-Zwzj2A@mail.gmail.com>

On Thu, Dec 3, 2015 at 7:07 PM, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

> The important thing about a "checklist" though, is checking things off -
> how will that be kept up to date in sync with what has actually happened?
>
>
The checklist is written using the GitHub flavored markdown syntax for
checklists:

https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments

so when the tasks are completed, this checklist will be updated by changing:

   [ ] task item foobar

to

  [X]  task item foobar

and committing the updated checklist to GitHub.

Adi and Amber are on board with this, so it should be fine.
--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151204/69ca9729/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  4 12:57:40 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 11:57:40 -0800
Subject: [Twisted-Python] OSCAR stopped working and we didn't notice
Message-ID: <805598AE-B564-4EE2-B0A1-3727D26834E0@twistedmatrix.com>

According to this stack overflow question:

http://stackoverflow.com/questions/34095372/python-twisted-words-protocols-oscar-default-implementation-no-longer-connects-t <http://stackoverflow.com/questions/34095372/python-twisted-words-protocols-oscar-default-implementation-no-longer-connects-t>

our OSCAR protocol implementation no longer works with the live AIM service.

I suspect we just need to bump some version numbers (we claim to be a version of Windows AIM from 2001 or so, I think) but it might be interesting to figure out some kind of integration testing strategy for these proprietary protocols so that we actually find out before users start posting stuff to random other websites.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151204/02e1b2b6/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec  4 17:17:10 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 16:17:10 -0800
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
Message-ID: <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>


> On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> I would like to ask you if you think that is a good idea to have the version of Twisted in which the changes associated with a ticket.
> 
> The use case would be: Someone search the net for something related to Twisted (a bug or some feature) and the land to a Trac ticket. Just by looking at the Trac ticket that person should see if the ticket is still in work, is invalid or changes were made in release YY.NN 
>  
> -------
> 
> My proposal for implementing this is:
> 
> Each release will have a new milestone with the same name called 'next-release'. 
> 
> Once the changes for a ticket were merged the ticket is assigned to the 'next-release' milestone.
> 
> When release is done, the next-release is renamed to the release name and all previous tickets will be auto-updated.
> 
> A new milestone called 'next-release' is created.
> 
> Invalid or duplicate tickets should not have the 'next-relesese' milestone.
> 
> -----------
> 
> Amber commented that using milestones for such a thing is not a good idea and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and keep milestones like Python-3 unchanged.
> 
> I don't like tags as when a ticket is landed we don't know if next release will be16.0 or 15.6.
> 
> We can use a 'next-release' tag and when a release is done, check all tickets and update their tag.
> 
> --------
> 
> Please send your suggestions and comments.

By "tags" do you mean "keywords"?  If so, couldn't we just use the 'landed-in-next' keyword and then have a little script that replaced it with 'landed-in-15.6' at the time of the release?

-glyph




From glyph at twistedmatrix.com  Fri Dec  4 18:29:24 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Dec 2015 17:29:24 -0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly support
	from adbapi
In-Reply-To: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
References: <471CD90D-325B-463B-B2B0-E9C7E8F16E19@atleastfornow.net>
Message-ID: <40243BCF-50F5-430F-B89B-0112AE4F6EEF@twistedmatrix.com>


> On Dec 4, 2015, at 4:07 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import.
> 
> This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :)
> 
> You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational.
> 
> - Amber

I think the all-caps policy-compliant "INCOMPATIBLE CHANGE" was maybe a little overkill, given it's not actually incompatible under the policy definition, but thanks for announcing nonetheless :).

The purpose of testing with gadfly was just to have a database that didn't require an external process set up; I don't think anyone seriously used Gadfly ever.  So the modern equivalent would be sqlite3 - do we test against that?  (I seem to recall that we do...)

-glyph




From hawkowl at atleastfornow.net  Fri Dec  4 18:48:06 2015
From: hawkowl at atleastfornow.net (Amber Brown)
Date: Sat, 05 Dec 2015 09:48:06 +0800
Subject: [Twisted-Python] [INCOMPATIBLE CHANGE] Removing Gadfly
	support	from adbapi
In-Reply-To: <40243BCF-50F5-430F-B89B-0112AE4F6EEF@twistedmatrix.com>
Message-ID: <bd90d8ac-1bdc-489f-aa4b-3c0f931e19ea@email.android.com>

We don't! Those tests never run, because "import sqlite" doesn't work on 2.7. Today's plan is to put up a patch to test stdlib sqlite3 and pysqlite2 :)

On 5 Dec 2015 09:29, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
>
> > On Dec 4, 2015, at 4:07 AM, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote: 
> > 
> > So, apparently, a long time ago, there was a database called Gadfly, and Twisted used to test adbapi against it. However, since then, we've moved on from Python versions that gadfly supports, so it outright doesn't work now -- not buggy, not weird -- just doesn't even import. 
> > 
> > This doesn't change any user facing code, but does change some tests, and even though it's covered under the compatibility policy, I thought I'd put it on the ML anyway. :) 
> > 
> > You can find the code at https://twistedmatrix.com/trac/ticket/8119. We do not require any signoffs to remove it, this email is purely informational. 
> > 
> > - Amber 
>
> I think the all-caps policy-compliant "INCOMPATIBLE CHANGE" was maybe a little overkill, given it's not actually incompatible under the policy definition, but thanks for announcing nonetheless :). 
>
> The purpose of testing with gadfly was just to have a database that didn't require an external process set up; I don't think anyone seriously used Gadfly ever.  So the modern equivalent would be sqlite3 - do we test against that?  (I seem to recall that we do...) 
>
> -glyph 
>
>
> _______________________________________________ 
> Twisted-Python mailing list 
> Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 

From snailcoder at 163.com  Sat Dec  5 21:30:26 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 6 Dec 2015 12:30:26 +0800 (CST)
Subject: [Twisted-Python] How to design /login and /logout resources with
 twisted.web.server.Session
Message-ID: <3952ac35.452c.151758e1b02.Coremail.snailcoder@163.com>

I'm trying to implement login/logout function for my app. Both /login and /logout are designed to be resource to provide RESTful web service. I guess those functions must interact with sessions and cookies, so I've read some documents such as https://twistedmatrix.com/documents/current/web/howto/web-in-60/session-store.html  and
https://twistedmatrix.com/documents/current/web/howto/web-in-60/session-endings.html


However, I still can't get how to use twisted.web.server.Session in my code. Is there any demo about this? Any help is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151206/1fa92365/attachment-0002.html>

From adi at roiban.ro  Sun Dec  6 09:04:03 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 6 Dec 2015 18:04:03 +0200
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
Message-ID: <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>

On 5 December 2015 at 02:17, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> > On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro> wrote:
> >
> > Hi,
> >
> > Please send your suggestions and comments.
>
> By "tags" do you mean "keywords"?  If so, couldn't we just use the
> 'landed-in-next' keyword and then have a little script that replaced it
> with 'landed-in-15.6' at the time of the release?
>
> -glyph
>
>
Sorry... I was talking about 'keywords'. As long as the info is there, in
some form of another, I am fine with any implementation.

At this stage I just wanted to see if other people find this useful and
make sense to put some effort in implementing this... and I was trying to
make some notes regarding the effort required to implement this.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151206/5848e067/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Dec  6 23:52:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 6 Dec 2015 22:52:23 -0800
Subject: [Twisted-Python] twisted.web response.py questions
In-Reply-To: <56618A4F.2090207@yahoo.de>
References: <56618A4F.2090207@yahoo.de>
Message-ID: <91133F64-BB36-4F28-8C21-47EA9DB4A076@twistedmatrix.com>


> On Dec 4, 2015, at 4:42 AM, peter <commercials24 at yahoo.de> wrote:
> 
> hi,
> 
> 
> looking over:
> https://twistedmatrix.com/documents/14.0.2/_downloads/response.py
> 
> 
> im not really sure why one would use the line:
> 
> self.remaining  =  1024  *  10
> 
> 
> this suggest to me that one knew what kind of page size was expected...but what if you dont?

Then you'd have to read this expected size out of the content-length header or similar.  This file is just an example.

> wouldnt it make more sense to use someting like this:
> 
> def dataReceived(self, bytes):
>        self.page_content = self.page_content + bytes
> 
> 
> this would sum up all the data until connectionLost is called.
> and in connectionLost():
> 
> def  connectionLost(self,  reason):
>        print  'Finished receiving body:',  reason.getErrorMessage()
>        self.finished.callback(self.page_content)
> 
> 
> and then print it?

This might be a better example to start with, yes.  Please feel free to submit a doc patch doing just that.

> also i dont get why one would use
> 
> return  finished
> 
> 
> in cbRequest. where is this finished returned to?

It's a Deferred, which means that the next callback in the chain waits for it to fire.  This is there so that cbShutdown doesn't fire (and shutdown the reactor) until the response is fully received.

> its called via:
> 
> d.addCallback(cbRequest)
> 
> isnt the result from cbRequest thrown away?
> i would expect the line to read:
> new_deferred = d.addCallback(cbRequest)

It's not a new Deferred, it's the same Deferred; addCallback mutates the Deferred and then returns it.

> thx for your answers

Thanks for using Twisted :).

Hope this helps!

-glyph




From glyph at twistedmatrix.com  Mon Dec  7 00:12:19 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 6 Dec 2015 23:12:19 -0800
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
 <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
Message-ID: <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>


> On Dec 6, 2015, at 8:04 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> 
> 
> On 5 December 2015 at 02:17, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
> > On Dec 4, 2015, at 4:51 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
> >
> > Hi,
> >
> > Please send your suggestions and comments.
> 
> By "tags" do you mean "keywords"?  If so, couldn't we just use the 'landed-in-next' keyword and then have a little script that replaced it with 'landed-in-15.6' at the time of the release?
> 
> -glyph
> 
> 
> Sorry... I was talking about 'keywords'. As long as the info is there, in some form of another, I am fine with any implementation.
> 
> At this stage I just wanted to see if other people find this useful and make sense to put some effort in implementing this... and I was trying to make some notes regarding the effort required to implement this.
>  
> Thanks!

This would be super useful to me.  I frequently answer stack overflow questions where I want to say what release of Twisted a particular bug was fixed in, and it's unfortunately hard to discover.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151206/46c7acca/attachment-0002.html>

From tom.prince at ualberta.net  Mon Dec  7 02:39:08 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:39:08 -0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
 <A2A03AEB-F3E5-48FD-9A44-4DCF9AE3D527@twistedmatrix.com>
 <00B73B66-BF6D-4E5D-93D1-8E7D128CC6FA@lukasa.co.uk>
Message-ID: <87fv02ov9b.fsf@hermes.hocat.ca>

> When the object receiving the request is ready to send a response, it calls…something (sendResponse?) and provides an object implementing a server IResponse. The code in the H2Stream/H2Connection sends the headers, then calls deliverBody on the IResponse, passing H2Connection (again via H2Stream) as the protocol that gets called. In this world, H2Stream actually would need to implement IProtocol as well as ITransport.

Probably the reponse is provided via a deferred returned from the
function that received the request. Following the design of
twisted.web.client.Request, the request would take something like an
IBodyProducer that the stream would have write to it (Probably
indirectly: see
twisted.web._newclient.Request._writeToChuncked/_writeToContentLength).

  Tom



From tom.prince at ualberta.net  Mon Dec  7 02:39:09 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:39:09 -0000
Subject: [Twisted-Python] Streaming HTTP
In-Reply-To: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
References: <242F6DB8-FACA-4F95-BC2C-BB94F0994AA1@lukasa.co.uk>
Message-ID: <87pozcpizn.fsf@hermes.hocat.ca>

After having written the following comments, I realized that my thoughts
are only about the high-level interface of Site/Resource. I think those
are the interfaces most users care about, so what it makes most sense to
think deeply about having a painless transiftion for. I suspect that if
people are using lower-level interfaces, they are probably willing to
make more invasive changes in order to be able to take advantage of
HTTP/2; in particular, since they likely have resaon to use HTTP/2
specific features.


> My proposal is to deprecate the current Request/Resource model. It
> currently functions and should continue to function, but as of this
> point we should consider it a bad way to do things, and we should push
> people to move to a fully asynchronous model.

It is probably possible to implement something like you suggest, without
having to change the model too much. As I understand it, the big
impediment to properly handling streaming requests is `.content` (and
some related convenience things like `.args`), and the fact that both
`.getChild` and `.render` are called after `.content` is populated. It
is probably possible to address those issues without changing the shape
of those interfaces (even if we change the names). I know #288 had at
least two suggestions on how to do that. One was to have a marker
interface, to indicate that a given Resource wants new behavior, where
`.content` isn't populated, and the other was to have new methods that
have new behavior, which default to slurping up everything and calling
the old functions.

On the other hand, there might be other stuff that wants cleaning up,
that having a break would be better at addressing; replacing
`NOT_DONE_YET` with deferreds comes to mind.


> We should then move to an API that is much more like the one used by Go: specifically, that by default all requests/responses are streamed. Request objects (and, logically, any other object that handles requests/responses, such as Resource) should be extended to have a chunkReceived method that can be overridden by users. If a user chooses not to override that method, the default implementation would continue to do what is done now (save to a buffer). Once the request/response is complete (marked by receipt of a zero-length chunk, or a frame with END_STREAM set, or when the remaining content-length is 0), request/responseComplete would be called. For users that did not override chunkReceived can now safely access the content buffer: other users can do whatever they see fit. We’d also update requestReceived to ensure that it’s called when all the *headers* are received, rather than waiting for the body.

I haven't thought about this deeply, but my first thought, is that it
would be reasonable to mirror how the client handles streaming
responses. `Agent.request` returns `Response` as soon as the headers
have been received. To get the body of the response, you call
`Response.deliverBody` which takes an `IProtocol` that will receive the
body. There is also a helper `readBody` that wraps that and returns a
deferred that fires with body, once it has been received (and treq also
has ``collect`` that wraps that and calls a function with the bits of
the data).

> A similar approach should be taken with sending data: we should assume that users want to chunk it if they do not provide a content-length. An extreme position to take (and I do) is that this should be sufficiently easy that most users actually *accidentally* end up chunking their data: that is, we do not provide special helpers to set content-length, instead just checking whether that’s a header users actually send, and if they don’t we chunk the data.

Regarding sending data, this is already what we do (at least as long as
the client is speaking HTTP/1.1).

  Tom



From tom.prince at ualberta.net  Mon Dec  7 02:44:09 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:44:09 -0000
Subject: [Twisted-Python] incompatible change - need revert before
	release
In-Reply-To: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
Message-ID: <87d1v5p3d2.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> Tom Prince discovered a regression on https://twistedmatrix.com/trac/ticket/7016#comment:14 <https://twistedmatrix.com/trac/ticket/7016#comment:14> - I think that this was introduced after 15.4, so it needs to be rolled back (or fixed, if someone can get to it before the revert) in 15.5.

Sadly, this has already been released (in 15.2), and changing it back
would also be an incompatible change. And, to set the record straight,
the issue was reported by sveinse on #twisted.

  Tom



From tom.prince at ualberta.net  Sat Dec  5 10:31:31 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 05 Dec 2015 10:31:31 -0700
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged	ticket
In-Reply-To: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
Message-ID: <871tb0pzt8.fsf@hermes.hocat.ca>

> Amber commented that using milestones for such a thing is not a good idea
> and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
> keep milestones like Python-3 unchanged.

I think rather than having a tag, it would make more sense to have a
custom field (http://trac.edgewall.org/wiki/TracTicketsCustomFields).
I do think using `next` as the version before a release makes sense. One
thing to note with that, is that tickets that land between branching and
a release shouldn't have the fix version updated.

  Tom



From tom.prince at ualberta.net  Tue Dec  1 23:09:05 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 01 Dec 2015 23:09:05 -0700
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
Message-ID: <874mg1peke.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>> Probably would be a good idea to have a list of such changes *before* the migration. 
>
> Yes. Everything should be written up and reviewed beforehand, and 

There has been a lot of words written talking about coming up with a
plan for the migration, but I have yet to see a concrete plan. I think
this (a list of all the things that depend on SVN) followed by plans to
address each of the, is probably a sensible first step. I suspect that
none of this will be contreviersial, but it seems that the disucssion
keeps dancing around things needing to be done, but nobody has taken the
time to actually come up with a list.

  Tom



From tom.prince at ualberta.net  Mon Dec  7 02:45:14 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 09:45:14 -0000
Subject: [Twisted-Python] incompatible change - need revert
	before	release
In-Reply-To: <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
References: <47B88D32-DAF0-46A4-9433-CF1945025FEB@twistedmatrix.com>
 <CAFycZ9dyZYrVp2nFfugUyCuCb36MqwoCCsnYyhpFeosSUHLAHw@mail.gmail.com>
 <0B8D0739-31AE-428C-9E27-455D2F40E7EA@twistedmatrix.com>
Message-ID: <87a8q8po2w.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> If it's been in a release, then there's probably nothing to do.  It's
> a shame that this went out, but once a breakage like this has happened
> we have to live with it because otherwise, as you say, we'd be
> breaking compatibility for the people that already upgraded.  For
> those that need to support both versions, keyword arguments are the
> way to go.


There are perhaps a couple of things we can do. The types of the
arguments should usually (always?) be different, so we could at least
warn if we suspect the wrong thing was passed, if not either error out
or do the right thing, so code won't silently or inexcplicably fail
later. We could also deprecate passing an argument as a positional
argument, so eventually upgrading will always get an error, rather than
incorrect behavior.

  Tom



From tom.prince at ualberta.net  Mon Dec  7 02:47:46 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 07 Dec 2015 02:47:46 -0700
Subject: [Twisted-Python] Attaching the release number to
	a	closed/merged ticket
In-Reply-To: <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <F7D93A2A-55AE-4BA1-8098-C435C2F3ECF3@twistedmatrix.com>
 <CAFycZ9fWf_8kKeXg=SpdYv_kmrWHirzP55RWk6L+XA7_cpt5gw@mail.gmail.com>
 <31C9C76F-8D82-4F07-BB1B-564D2A3437F5@twistedmatrix.com>
Message-ID: <87y4d6oail.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> I frequently answer stack overflow questions where I want to say what release of Twisted a particular bug was fixed in, and it's unfortunately hard to discover.

The attached script should get most of the versions for tickets. There
are a handful of tickets that get mis-categorized, though. This could
probably be used to back-fill fix versions, too.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: find-version.py
Type: text/x-python
Size: 1242 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151207/656833fe/attachment-0002.py>

From adi at roiban.ro  Mon Dec  7 02:54:35 2015
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 7 Dec 2015 11:54:35 +0200
Subject: [Twisted-Python] Attaching the release number to a
	closed/merged ticket
In-Reply-To: <871tb0pzt8.fsf@hermes.hocat.ca>
References: <CAFycZ9dLqeipOoDLms+K2KV+C7=JF1ayc_idBvfs24g6AVdjQw@mail.gmail.com>
 <871tb0pzt8.fsf@hermes.hocat.ca>
Message-ID: <CAFycZ9cwPD_W43dh9xikJ5dgchDzhE7-V80gLzsSOTJZOhzw4w@mail.gmail.com>

On 5 December 2015 at 19:31, Tom Prince <tom.prince at ualberta.net> wrote:

> > Amber commented that using milestones for such a thing is not a good idea
> > and that we should use tags like: landed-in-15.5, landed-for-15.5 ... and
> > keep milestones like Python-3 unchanged.
>
> I think rather than having a tag, it would make more sense to have a
> custom field (http://trac.edgewall.org/wiki/TracTicketsCustomFields).
> I do think using `next` as the version before a release makes sense. One
> thing to note with that, is that tickets that land between branching and
> a release shouldn't have the fix version updated.
>
>
Thanks for the feedback.
Yes, we can have a tpcustom field.

Since Amber is the release manager I think that she should have the final
word.

Once we know that this is useful and there is a plan, I volunteer to
implement it.

For me, having the released version info in the Trac ticket is easier than
searching the NEWS file.

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151207/35e402c8/attachment-0002.html>

From hawkowl at atleastfornow.net  Mon Dec  7 06:06:41 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 7 Dec 2015 21:06:41 +0800
Subject: [Twisted-Python] Twisted 15.4 was the last release to support
	Python 2.6; or: a HawkOwl Can't Words Situation
Message-ID: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>

Hi everyone!

It's been brought to my attention that I misworded something in the release notes and it slipped through the cracks. In the NEWS I said:

> This is the last Twisted release where Python 2.6 is supported, on any platform.

However, I meant that this is the first Twisted release to drop 2.6 support wholesale, preventing import on this platform. Twisted 15.4 will still operate, so if you have Python 2.6 deployment requirements, bracket the maximum to 15.4 on that platform by using an if statement in your setup.py, and `Twisted >=*minreq*,<=15.4; python_version < '2.7'` under requires_dist in your setup.cfg, where minreq is the minimum required Twisted.

Sorry for the inconvenience!

- Amber "HawkOwl" Brown
Twisted Release Manager
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151207/63a3179c/attachment.sig>

From sardok at gmail.com  Wed Dec  9 05:17:51 2015
From: sardok at gmail.com (Sinan Nalkaya)
Date: Wed, 9 Dec 2015 14:17:51 +0200
Subject: [Twisted-Python] having 'from_' factory method with a deferred in
	it.
Message-ID: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>

Hi Everyone,

I am developing a tiny library where you can use your gpio pins (over
sysfs) in twisted way. You may find more about, on
https://github.com/sardok/txgpio.

I am facing with a race condition issue, where certain files are needed to
be created in filesystem, by kernel, in order have the class to finish its
initialization. Which means in twisted jargon, a deferred needs to be
resolved in __init__ (or another method - see below) method in order to
have complete object.

After reading this blog post
http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html by
Jean-Paul, i believe having 'from_' factory method which waits for those
certain files to be created before creating the actual class object is the
better way.

However, i couldn't find a way to wait for a deferred in order to use the
from_ function in the following form (which is the common form for using
from_ factory methods);

obj = sysfs.GPIO.from_unexported_node(*a, **kw)

More or less, i am looking for some thing equivalent of
'asyncio.get_event_loop()'
and 'yield from loop.run_in_executor()' as mentioned in the blog post.

Thanks,
Sinan.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151209/f39bdd5e/attachment-0002.html>

From snailcoder at 163.com  Sun Dec 13 08:50:50 2015
From: snailcoder at 163.com (Wang Yan)
Date: Sun, 13 Dec 2015 23:50:50 +0800 (CST)
Subject: [Twisted-Python] What are the relationships between
 twisted.cred.portal.IRealm, Portal and avatar
Message-ID: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>

I'm trying to use Twisted's HTTP basic authentication to control access to some protected resources.


According to some articles, it is necessary to use three important concepts: Realm, Portal and avatar. Now I'm wondering if the Realm and avatar is one to one correspondence.


Let's look at an example(http://www.red-bean.com/doc/python-twisted-web/examples/webguard.py):


import sys

from zope.interface import implements

from twisted.python import log
from twisted.internet import reactor
from twisted.web import server, resource, guard
from twisted.cred.portal import IRealm, Portal
from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse


class GuardedResource(resource.Resource):
    """
    A resource which is protected by guard and requires authentication in order
    to access.
    """
    def getChild(self, path, request):
        return self


    def render(self, request):
        return "Authorized!"



class SimpleRealm(object):
    """
    A realm which gives out L{GuardedResource} instances for authenticated
    users.
    """
    implements(IRealm)

    def requestAvatar(self, avatarId, mind, *interfaces):
        if resource.IResource in interfaces:
            return resource.IResource, GuardedResource(), lambda: None
        raise NotImplementedError()



def main():
    log.startLogging(sys.stdout)
    checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')]
    wrapper = guard.HTTPAuthSessionWrapper(
        Portal(SimpleRealm(), checkers),
        [guard.DigestCredentialFactory('md5', 'example.com')])
    reactor.listenTCP(8889, server.Site(
          resource = wrapper))
    reactor.run()

if __name__ == '__main__':
    main()


Of course I know the SimpleRealm is used to return the corresponding resource, e.g. GuardedResource in above example. However, I don't know what to do when there lots of resources to be guarded. For example, I have GuardedResource1, GuardedResource2 and GuardedResource3, maybe they need the same or different number of parameters when they are initialized; If so, is it necessary to implement SimpleRealm1, SimpleRealm2 and SimpleRealm3, respectively? 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151213/66fa0e79/attachment-0002.html>

From jml at mumak.net  Mon Dec 14 05:16:17 2015
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 14 Dec 2015 12:16:17 +0000
Subject: [Twisted-Python] When's the next release?
Message-ID: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>

Hello!

I've just landed a fix to #4811, which ought to make it possible to use
trial with regular standard library unittests that have expected failures &
unexpected successes.

I'm very keen to start using that in my code base, and the easiest way for
me to do that is for there to be an official release of Twisted. When might
one expect the next release to take place?

Thanks,
jml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151214/84865bcb/attachment-0002.html>

From pisymbol at gmail.com  Mon Dec 14 07:52:57 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 09:52:57 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
Message-ID: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>

Hi:

I'd like to adopt Twisted for a current project I'm coding up. I'm on
CentOS 6.7 x86-64 using python v2.6 and the stock
python-twisted-8.2.0-3.1 package built for this release.

No matter what I do when trying to implement the Process protocol or
use utils.getProcessOutput() directly, I always see the following
warning message on the console:

/usr/lib64/python2.6/site-packages/twisted/internet/utils.py:25:
PotentialZombieWarning: spawnProcess called, but the SIGCHLD handler
is not installed. This probably means you have not yet called
reactor.run, or called reactor.run(installSignalHandler=0). You will
probably never see this process finish, and it may become a zombie
process.
  reactor.spawnProcess(p, executable, (executable,)+tuple(args), env, path)
...

Is there anyway to get rid of this message? I realize I'm using an
older release of twisted but I can't upgrade to the latest without
incurring the cost of installing an python v2.7 or greater.

My script is literally:

d = utils.getProcessOutput('/bin/ls')
d.addCallbacks(writeResponse, noResponse)
reactor.run()

etc.

What am I doing wrong?

-aps



From hawkowl at atleastfornow.net  Mon Dec 14 08:09:49 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 14 Dec 2015 23:09:49 +0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
Message-ID: <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>


> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
> 
> Hi:
> 
> I'd like to adopt Twisted for a current project I'm coding up. I'm on
> CentOS 6.7 x86-64 using python v2.6 and the stock
> python-twisted-8.2.0-3.1 package built for this release.

...

> Is there anyway to get rid of this message? I realize I'm using an
> older release of twisted but I can't upgrade to the latest without
> incurring the cost of installing an python v2.7 or greater.

Hi,

Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151214/42490181/attachment.sig>

From hawkowl at atleastfornow.net  Mon Dec 14 08:13:19 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Mon, 14 Dec 2015 23:13:19 +0800
Subject: [Twisted-Python] When's the next release?
In-Reply-To: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
References: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
Message-ID: <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>

Hi!

Since a release went out just the other week, I'd say January at the earliest. Every 2-3 months is the schedule that seems to balance getting things out there with the burden of downstream & users having to handle updates.

- Amber

> On 14 Dec 2015, at 20:16, Jonathan Lange <jml at mumak.net> wrote:
> 
> Hello!
> 
> I've just landed a fix to #4811, which ought to make it possible to use trial with regular standard library unittests that have expected failures & unexpected successes.
> 
> I'm very keen to start using that in my code base, and the easiest way for me to do that is for there to be an official release of Twisted. When might one expect the next release to take place?
> 
> Thanks,
> jml
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151214/3499462e/attachment.sig>

From pisymbol at gmail.com  Mon Dec 14 13:38:02 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 15:38:02 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
Message-ID: <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>

On Mon, Dec 14, 2015 at 10:09 AM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
>
>> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
>>
>> Hi:
>>
>> I'd like to adopt Twisted for a current project I'm coding up. I'm on
>> CentOS 6.7 x86-64 using python v2.6 and the stock
>> python-twisted-8.2.0-3.1 package built for this release.
>
> ...
>
>> Is there anyway to get rid of this message? I realize I'm using an
>> older release of twisted but I can't upgrade to the latest without
>> incurring the cost of installing an python v2.7 or greater.
>
> Hi,
>
> Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.

That maybe, but CentOS 6.7 is the latest 6.x release which ships with
8.2.x (somebody maintaining the RHEL 6.x series should update these
packages then).

I did a pip install and it said I needed Python 2.7 or higher. Let me
reevaluate if I can just update twisted.

Thanks!

-aps



From glyph at twistedmatrix.com  Mon Dec 14 14:51:23 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Dec 2015 13:51:23 -0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
Message-ID: <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>


> On Dec 14, 2015, at 12:38 PM, pisymbol . <pisymbol at gmail.com> wrote:
> 
> On Mon, Dec 14, 2015 at 10:09 AM, Amber "Hawkie" Brown
> <hawkowl at atleastfornow.net> wrote:
>> 
>>> On 14 Dec 2015, at 22:52, pisymbol . <pisymbol at gmail.com> wrote:
>>> 
>>> Hi:
>>> 
>>> I'd like to adopt Twisted for a current project I'm coding up. I'm on
>>> CentOS 6.7 x86-64 using python v2.6 and the stock
>>> python-twisted-8.2.0-3.1 package built for this release.
>> 
>> ...
>> 
>>> Is there anyway to get rid of this message? I realize I'm using an
>>> older release of twisted but I can't upgrade to the latest without
>>> incurring the cost of installing an python v2.7 or greater.
>> 
>> Hi,
>> 
>> Python 2.6 has been EOL for years and Twisted 8.2.0 is nearly seven years old. We can't really help with things that old (many, many issues have since been fixed, so remembering what's a bug that's been squashed and what's a platform bug is nearly impossible), but upgrading to Twisted 15.4 (the last release with Python 2.6 support, and only 4 or so months old) may help.
> 
> That maybe, but CentOS 6.7 is the latest 6.x release which ships with
> 8.2.x (somebody maintaining the RHEL 6.x series should update these
> packages then).
> 
> I did a pip install and it said I needed Python 2.7 or higher. Let me
> reevaluate if I can just update twisted.

Try `pip install twisted==15.4´ if you still require Python2.6 support; `pip install twisted´ will install the latest, which no longer works on 2.6.

But again: Python 2.6 is unsupported by the upstream Python developers.  You really should not be using it, since it won't receive security updates (of course, Red Hat and transitively CentOS claim to "support" these packages, but if upstream is refusing patches at this point, it's not clear where that support will come from).  This is why we changed our policy to proactively disable it: it's a security risk and we would like to put pressure on downstreams (such as yourself) to stop taking on this risk without realizing it.

If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux <https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux> and using that.  In addition to being security-supported, it will also make your python code run 10x faster :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151214/6e3cdfb0/attachment-0002.html>

From pisymbol at gmail.com  Mon Dec 14 16:53:02 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 18:53:02 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
Message-ID: <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>

On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> I did a pip install and it said I needed Python 2.7 or higher. Let me
> reevaluate if I can just update twisted.
>
>
> Try `pip install twisted==15.4´ if you still require Python2.6 support; `pip
> install twisted´ will install the latest, which no longer works on 2.6.

Yeah, that's what I did. It's working now!

> But again: Python 2.6 is unsupported by the upstream Python developers.  You
> really should not be using it, since it won't receive security updates (of
> course, Red Hat and transitively CentOS claim to "support" these packages,
> but if upstream is refusing patches at this point, it's not clear where that
> support will come from).

As you can imagine, this boils down to politics.

> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
> and using that.  In addition to being security-supported, it will also make
> your python code run 10x faster :).

Interesting, I'll take a look.

-aps



From glyph at twistedmatrix.com  Mon Dec 14 17:43:16 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Dec 2015 16:43:16 -0800
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
Message-ID: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>


> On Dec 14, 2015, at 3:53 PM, pisymbol . <pisymbol at gmail.com> wrote:
> 
> On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> I did a pip install and it said I needed Python 2.7 or higher. Let me
>> reevaluate if I can just update twisted.
>> 
>> 
>> Try `pip install twisted==15.4´ if you still require Python2.6 support; `pip
>> install twisted´ will install the latest, which no longer works on 2.6.
> 
> Yeah, that's what I did. It's working now!

Great!  Glad to hear you were able to make a huge leap in Twisted versions with little trouble :-).

>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>> really should not be using it, since it won't receive security updates (of
>> course, Red Hat and transitively CentOS claim to "support" these packages,
>> but if upstream is refusing patches at this point, it's not clear where that
>> support will come from).
> 
> As you can imagine, this boils down to politics.

I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

>> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
>> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
>> and using that.  In addition to being security-supported, it will also make
>> your python code run 10x faster :).
> 
> Interesting, I'll take a look.

Hope that works out for you.  Good luck!

-glyph




From pisymbol at gmail.com  Mon Dec 14 18:54:43 2015
From: pisymbol at gmail.com (pisymbol .)
Date: Mon, 14 Dec 2015 20:54:43 -0500
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
Message-ID: <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>

On Mon, Dec 14, 2015 at 7:43 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
>
>> On Dec 14, 2015, at 3:53 PM, pisymbol . <pisymbol at gmail.com> wrote:
>>
>> On Mon, Dec 14, 2015 at 4:51 PM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> I did a pip install and it said I needed Python 2.7 or higher. Let me
>>> reevaluate if I can just update twisted.
>>>
>>>
>>> Try `pip install twisted==15.4´ if you still require Python2.6 support; `pip
>>> install twisted´ will install the latest, which no longer works on 2.6.
>>
>> Yeah, that's what I did. It's working now!
>
> Great!  Glad to hear you were able to make a huge leap in Twisted versions with little trouble :-).
>
>>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>>> really should not be using it, since it won't receive security updates (of
>>> course, Red Hat and transitively CentOS claim to "support" these packages,
>>> but if upstream is refusing patches at this point, it's not clear where that
>>> support will come from).
>>
>> As you can imagine, this boils down to politics.
>
> I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

I'm not disagreeing with you per se...but...

The fact is the Python community at large then needs to convince the
distro maintainers accordingly. Telling a customer to update their
entire platform for a newer version of Python isn't going to fly a lot
of times (and remember, someone of them have support agreements with
RH).

And running two versions of Python can get messy real fast.

Anyway, it is what it is.

>>> If you must use CentOS 6, then I'd recommend installing PyPy 4.0 from
>>> https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux
>>> and using that.  In addition to being security-supported, it will also make
>>> your python code run 10x faster :).
>>
>> Interesting, I'll take a look.
>
> Hope that works out for you.  Good luck!

Thanks! So far, so good. I was now able to lift my prototype code and
integrate it with the rest.

I'll probably have more questions at some point, but at least 15.4 did
the trick!

-aps



From hawkowl at atleastfornow.net  Mon Dec 14 21:16:08 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 15 Dec 2015 12:16:08 +0800
Subject: [Twisted-Python] Python 2.7 on CentOS 6 (was:
	PotentialZombieWarning warning message?)
In-Reply-To: <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
Message-ID: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>


> On 15 Dec 2015, at 08:43, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> 
>>> But again: Python 2.6 is unsupported by the upstream Python developers.  You
>>> really should not be using it, since it won't receive security updates (of
>>> course, Red Hat and transitively CentOS claim to "support" these packages,
>>> but if upstream is refusing patches at this point, it's not clear where that
>>> support will come from).
>> 
>> As you can imagine, this boils down to politics.
> 
> I understand that things like this often do, which is exactly why I want to make it clear that we (speaking in terms of the broader Python community now, not just Twisted) are trying to push people towards more recent versions just because they're more fun or more aesthetically pleasant, but because there are very real risks associated with being on unsupported ancient versions of things.  It pains me not to be supporting a configuration that some users want, but there is a line where "conservative about change" becomes "negligent about maintenance" and python 2.6 crossed it a little over two years ago :-).

There is a solution to this, and Nick Coghlan has mentioned it to me many times -- Software Collections for RHEL and CentOS. Software Collections is RH's answer to "new software" on "stable distributions" --  SCLs operate side-by-side with system packages, so it won't break anything. Since you're a CentOS 6.7 user, the standard SCL should work (it's 6.5+).

You can find the Python 2.7 SCL at https://www.softwarecollections.org/en/scls/rhscl/python27/, and CentOS publishes instructions on using them on https://wiki.centos.org/AdditionalResources/Repositories/SCL . This might solve your problem of being restrained to CentOS 6, but Python 2.6 being EOL'd everywhere but it.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151215/0e43d226/attachment.sig>

From JOHN at egh.com  Tue Dec 15 04:28:02 2015
From: JOHN at egh.com (John Santos)
Date: Tue, 15 Dec 2015 06:28:02 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6 (was:
	PotentialZombieWarning warning message?)
In-Reply-To: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
Message-ID: <1151215061903.15297G-100000@joonya.egh.com>


Sorry if the quoting is a little weird in this, I've long since deleted
Glyph's original response, so I'm replying to Amber's latest, but I just
noticed something in the quote (from Glyph, I think) that I want to correct
for the sake of posterity: 

> On 15 Dec 2015, at 08:43, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>
>> I understand that things like this often do, which is exactly why I want
to make it clear that we (speaking in terms of the broader Python
community now, not just Twisted) are trying to push people towards more
recent versions just because they're more fun or more aesthetically
===============^
pleasant, but because there are very real risks associated with being on
unsupported ancient versions of things.  It pains me not to be supporting
a configuration that some users want, but there is a line where
"conservative about change" becomes "negligent about maintenance" and
python 2.6 crossed it a little over two years ago :-). 

I'm sure you meant "[we] are trying to push people towards more recent
versions [NOT] just because they're more fun..."

-- 
John Santos
Evans Griffiths & Hart, Inc.
781-861-0670 ext 539

From p.mayers at imperial.ac.uk  Tue Dec 15 04:30:02 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 15 Dec 2015 11:30:02 +0000
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
Message-ID: <566FF9BA.1080107@imperial.ac.uk>

On 15/12/15 04:16, Amber "Hawkie" Brown wrote:

> There is a solution to this, and Nick Coghlan has mentioned it to me
> many times -- Software Collections for RHEL and CentOS. Software
> Collections is RH's answer to "new software" on "stable
> distributions" --  SCLs operate side-by-side with system packages, so
> it won't break anything. Since you're a CentOS 6.7 user, the standard
> SCL should work (it's 6.5+).

I really disliked the SCLs when I looked at it. The supported use-case 
seems to be a kind of hugely over-engineered set of wrapper/environment 
setup scripts:

scl enable python2.7 pip install blah

...ad infinitum.

Personally - and I guess for others as well - the SCLs will be 
off-putting. It's a shame there isn't a simpler solution, namely EPEL 
python2.7 - having a 2nd python in a different path is quite safe, we do 
it routinely.

It's hugely annoying that RHEL6 and derivatives missed out on Python 2.7 :o(




From jml at mumak.net  Tue Dec 15 04:33:43 2015
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 15 Dec 2015 11:33:43 +0000
Subject: [Twisted-Python] When's the next release?
In-Reply-To: <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>
References: <CAHZ8tnYiPGB2PhEyVwN6WgVvuSGGMojXkYpkScrH37u1WoWm4g@mail.gmail.com>
 <82823CAF-EB23-469E-9A29-5042AA667390@atleastfornow.net>
Message-ID: <CAHZ8tnYPHVaL3jmDOFJFamKQ1hCCVzRDgL4=OxWH5neK+7Uy6g@mail.gmail.com>

Thanks Amber!

In which case, I'll take steps to workaround #4811 until next year.

I should add, I'm very grateful and excited that we got so many releases
out this year. It's a wonderful thing to see.

On Mon, 14 Dec 2015 at 15:13 Amber "Hawkie" Brown <hawkowl at atleastfornow.net>
wrote:

> Hi!
>
> Since a release went out just the other week, I'd say January at the
> earliest. Every 2-3 months is the schedule that seems to balance getting
> things out there with the burden of downstream & users having to handle
> updates.
>
> - Amber
>
> > On 14 Dec 2015, at 20:16, Jonathan Lange <jml at mumak.net> wrote:
> >
> > Hello!
> >
> > I've just landed a fix to #4811, which ought to make it possible to use
> trial with regular standard library unittests that have expected failures &
> unexpected successes.
> >
> > I'm very keen to start using that in my code base, and the easiest way
> for me to do that is for there to be an official release of Twisted. When
> might one expect the next release to take place?
> >
> > Thanks,
> > jml
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151215/4c6b0062/attachment-0002.html>

From rgacote at appropriatesolutions.com  Tue Dec 15 09:40:11 2015
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 15 Dec 2015 11:40:11 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <566FF9BA.1080107@imperial.ac.uk>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
Message-ID: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>

We have a fair bit of Python 2.7 Twisted code deployed on RHEL and CentOS 5
and 6.
In each case, we build from source and do a make altinstall so we’re
running a Python separate from the system’s.
Just takes a few minutes to get everything installed and running.

On Tue, Dec 15, 2015 at 6:30 AM, Phil Mayers <p.mayers at imperial.ac.uk>
wrote:

> On 15/12/15 04:16, Amber "Hawkie" Brown wrote:
>
> There is a solution to this, and Nick Coghlan has mentioned it to me
>> many times -- Software Collections for RHEL and CentOS. Software
>> Collections is RH's answer to "new software" on "stable
>> distributions" --  SCLs operate side-by-side with system packages, so
>> it won't break anything. Since you're a CentOS 6.7 user, the standard
>> SCL should work (it's 6.5+).
>>
>
> I really disliked the SCLs when I looked at it. The supported use-case
> seems to be a kind of hugely over-engineered set of wrapper/environment
> setup scripts:
>
> scl enable python2.7 pip install blah
>
> ...ad infinitum.
>
> Personally - and I guess for others as well - the SCLs will be
> off-putting. It's a shame there isn't a simpler solution, namely EPEL
> python2.7 - having a 2nd python in a different path is quite safe, we do it
> routinely.
>
> It's hugely annoying that RHEL6 and derivatives missed out on Python 2.7
> :o(
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Raymond Cote, President
voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
ray.cote
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151215/ea2d808c/attachment-0002.html>

From waterbug at pangalactic.us  Tue Dec 15 10:34:24 2015
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Tue, 15 Dec 2015 12:34:24 -0500
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
 <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
Message-ID: <56704F20.6060702@pangalactic.us>

Here (NASA/GSFC) we use conda-based virtual envs on CentOS 6, and
they work great -- I turned our sysadmins on to conda about a year
ago, and they *love* it (no more compiling python, woo! ;)
All recent versions of twisted are available as conda packages:
# conda search twisted
Fetching package metadata: ......
twisted    12.3.0    py27_0  defaults
            12.3.0    py26_0  defaults
            13.0.0    py27_0  defaults
            13.0.0    py26_0  defaults
            13.1.0    py27_0  defaults
            13.1.0    py26_0  defaults
            13.2.0    py27_0  defaults
            13.2.0    py26_0  defaults
            14.0.0    py27_0  defaults
            14.0.0    py26_0  defaults
            14.0.2    py27_0  defaults
            14.0.2    py26_0  defaults
            15.0.0    py27_0  defaults
            15.0.0    py26_0  defaults
            15.1.0    py27_0  defaults
            15.1.0    py26_0  defaults
            15.2.0    py34_0  defaults
            15.2.0    py27_0  defaults
            15.2.0    py26_0  defaults
            15.2.1    py34_0  defaults
         .  15.2.1    py27_0  defaults
            15.2.1    py26_0  defaults
            15.3.0    py34_0  defaults
            15.3.0    py27_0  defaults
            15.3.0    py26_0  defaults
            15.4.0    py35_0  defaults
            15.4.0    py34_0  defaults
            15.4.0    py27_0  defaults
            15.5.0    py35_0  defaults
            15.5.0    py34_0  defaults
         *  15.5.0    py27_0  defaults

Steve

On 12/15/2015 11:40 AM, Ray Cote wrote:
> We have a fair bit of Python 2.7 Twisted code deployed on RHEL and
> CentOS 5 and 6.
> In each case, we build from source and do a make altinstall so we’re
> running a Python separate from the system’s.
> Just takes a few minutes to get everything installed and running.
>
> On Tue, Dec 15, 2015 at 6:30 AM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>     On 15/12/15 04:16, Amber "Hawkie" Brown wrote:
>
>         There is a solution to this, and Nick Coghlan has mentioned it to me
>         many times -- Software Collections for RHEL and CentOS. Software
>         Collections is RH's answer to "new software" on "stable
>         distributions" --  SCLs operate side-by-side with system
>         packages, so
>         it won't break anything. Since you're a CentOS 6.7 user, the
>         standard
>         SCL should work (it's 6.5+).
>
>
>     I really disliked the SCLs when I looked at it. The supported
>     use-case seems to be a kind of hugely over-engineered set of
>     wrapper/environment setup scripts:
>
>     scl enable python2.7 pip install blah
>
>     ...ad infinitum.
>
>     Personally - and I guess for others as well - the SCLs will be
>     off-putting. It's a shame there isn't a simpler solution, namely
>     EPEL python2.7 - having a 2nd python in a different path is quite
>     safe, we do it routinely.
>
>     It's hugely annoying that RHEL6 and derivatives missed out on Python
>     2.7 :o(
>
>
>     _______________________________________________
>     Twisted-Python mailing list
>     Twisted-Python at twistedmatrix.com
>     <mailto:Twisted-Python at twistedmatrix.com>
>     http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
>
> --
> Raymond Cote, President
> voice: +1.603.924.6079 email: rgacote at AppropriateSolutions.com skype:
> ray.cote
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From tom.prince at ualberta.net  Tue Dec 15 19:36:27 2015
From: tom.prince at ualberta.net (Tom Prince)
Date: Tue, 15 Dec 2015 19:36:27 -0700
Subject: [Twisted-Python] PotentialZombieWarning warning message?
In-Reply-To: <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CAPpy_fGqXtAq-OTSfdazNee0w9P=i+AGNz0h5h0rkHn2LrTPtA@mail.gmail.com>
Message-ID: <874mfjce6s.fsf@hermes.hocat.ca>

"pisymbol ." <pisymbol at gmail.com> writes:

> The fact is the Python community at large then needs to convince the
> distro maintainers accordingly. Telling a customer to update their
> entire platform for a newer version of Python isn't going to fly a lot
> of times (and remember, someone of them have support agreements with
> RH).

The community has. However Redhat has customers that want support for
old systems and are willing to pay for it. CentOS is essentially a
repackaged unsupported version of Redhat Enterprise Linux. If you want
support for packages against an old version of python, you can contact
Redhat (as per this[1] post by core python developer and Redhat
employee).

  Tom


[1] http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html



From glyph at twistedmatrix.com  Wed Dec 16 01:40:09 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Dec 2015 00:40:09 -0800
Subject: [Twisted-Python] Suggested plan for GitHub migration
In-Reply-To: <874mg1peke.fsf@hermes.hocat.ca>
References: <CAG=rPVc78NPk-dRDzrVvKT_Tyr9_7bSdZAx4=c=B2tpYXMzXTQ@mail.gmail.com>
 <CAHZ8tnbyb345V_ouLT8joKfGEe+7sOZAhM-7Y7Jmcvyqks89hg@mail.gmail.com>
 <5374B535-4BD4-45B8-B162-5395BA3C87F5@twistedmatrix.com>
 <874mg1peke.fsf@hermes.hocat.ca>
Message-ID: <6347EA1C-D059-47E1-AA10-57F0289B90E7@twistedmatrix.com>


> On Dec 1, 2015, at 10:09 PM, Tom Prince <tom.prince at ualberta.net> wrote:
> 
> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
>>> Probably would be a good idea to have a list of such changes *before* the migration. 
>> 
>> Yes. Everything should be written up and reviewed beforehand, and 
> 
> There has been a lot of words written talking about coming up with a
> plan for the migration, but I have yet to see a concrete plan. I think
> this (a list of all the things that depend on SVN) followed by plans to
> address each of the, is probably a sensible first step. I suspect that
> none of this will be contreviersial, but it seems that the disucssion
> keeps dancing around things needing to be done, but nobody has taken the
> time to actually come up with a list.


This checklist is actually what will become the official plan, because investigating the exact steps required to satisfy each step is part of the plan itself :).

-glyph


From p.mayers at imperial.ac.uk  Wed Dec 16 09:07:21 2015
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 16 Dec 2015 16:07:21 +0000
Subject: [Twisted-Python] Python 2.7 on CentOS 6
In-Reply-To: <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
References: <CAPpy_fF3_pcYroL5uRy41DM3n1yCTo5TJqMgAsdO-N-E5PdBPg@mail.gmail.com>
 <65B49B8A-D694-4B82-94A3-02839F7D1C83@atleastfornow.net>
 <CAPpy_fEn0uPgEN13MjtCdXyJGoXM-FiUN6Pn+3j_nYBK0fyA+w@mail.gmail.com>
 <DCF82E21-7F56-47AF-A8E4-D88DB24023A2@twistedmatrix.com>
 <CAPpy_fH_VfwH1fau74e8R7bKuVReyw1AZ5qnKWfOqF0_ANWmKw@mail.gmail.com>
 <FD35F565-CB1B-4BDD-B47E-39DF0ACBD9FE@twistedmatrix.com>
 <CC08015A-8B20-408E-A639-24E3421E8FE2@atleastfornow.net>
 <566FF9BA.1080107@imperial.ac.uk>
 <CAG5tnzogiWs7rSoT_+8V+mPcTiXW3YJ0fDGH_ZACe8PZ04p8EA@mail.gmail.com>
Message-ID: <56718C39.1010002@imperial.ac.uk>

On 15/12/2015 16:40, Ray Cote wrote:
> We have a fair bit of Python 2.7 Twisted code deployed on RHEL and
> CentOS 5 and 6.
> In each case, we build from source and do a make altinstall so we’re
> running a Python separate from the system’s.

We build an RPM, but basically yes; put it in a different path and it's 
fine.

Minor hassle though it is, it's one more thing that I would prefer to 
not need. But reinstalling upwards of 60 RHEL6 production machines is 
vastly more hassle ;o)



From chris.norman2 at googlemail.com  Wed Dec 16 10:25:51 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Wed, 16 Dec 2015 17:25:51 +0000
Subject: [Twisted-Python] Waiting for transports to close
Message-ID: <56719E9F.8090301@googlemail.com>

Hi all,
I'm writing a MUD server, and I want a way for transports to be notified 
ofa shutdown before being disconnected, and the reactor being stopped.

I've tried:

for t in transports:
  t.write('Shutting down.\r\n')
  t.loseConnection()
reactor.stop()

This doesn't seem to notify the transports.

I also tried:
for t in transports:
  t.write('Shutting down.\r\n')
  t.loseConnection()
  while t.connected:
   pass
reactor.stop()

That just blocked and did nothing, presumably something do with my while 
loop.

Is there a stopWhenEmpty function on the somewhere? I did look over the 
methods, and I couldn't find anything promising.

I'm just using the standard from twisted.internet import reactor 
reactor, so no special cases here. In case it matters the transports I'm 
using are twisted.protocols.basic.LineReceiver, and everything else 
works with them.

Cheers in advance for the help.



From kebin70 at gmail.com  Wed Dec 16 17:11:36 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 16 Dec 2015 16:11:36 -0800
Subject: [Twisted-Python] asynchronous response
Message-ID: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>

Hey - I'm confused, so nothing new :) ...but I'm running at this example
and I'm scratching my head.

http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html

I would've thought 2 requests could be served simultaneously, but when I
fire off 2 requests the first received gets it's response after 5 seconds,
while the second response takes 10 seconds.

I think I understand what's happening, but I don't know why...and I would
love an example where the subsequent request doesn't have to wait for the
first request to finish.

Thanks,
Kevin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151216/fe78c34f/attachment-0002.html>

From kebin70 at gmail.com  Thu Dec 17 00:58:00 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 16 Dec 2015 23:58:00 -0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
Message-ID: <CAA-sNEZPsDfkFzA=SMh5kMECp-ObH+wxcjHpfYDftcNZVe6-rQ@mail.gmail.com>

Just a follow-up with my own sanity check example.

http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html

My conclusion is that deferLater is a blocking method - am I wrong?


On Wed, Dec 16, 2015 at 4:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> Hey - I'm confused, so nothing new :) ...but I'm running at this example
> and I'm scratching my head.
>
>
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
>
> I would've thought 2 requests could be served simultaneously, but when I
> fire off 2 requests the first received gets it's response after 5 seconds,
> while the second response takes 10 seconds.
>
> I think I understand what's happening, but I don't know why...and I would
> love an example where the subsequent request doesn't have to wait for the
> first request to finish.
>
> Thanks,
> Kevin
>
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151216/37247988/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: multirequest_overkill.py
Type: text/x-python
Size: 2403 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151216/37247988/attachment-0002.py>

From hawkowl at atleastfornow.net  Thu Dec 17 01:09:42 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Thu, 17 Dec 2015 16:09:42 +0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
Message-ID: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>


> On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> 
> Hey - I'm confused, so nothing new :) ...but I'm running at this example and I'm scratching my head.
> 
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> 
> I would've thought 2 requests could be served simultaneously, but when I fire off 2 requests the first received gets it's response after 5 seconds, while the second response takes 10 seconds.
> 
> I think I understand what's happening, but I don't know why...and I would love an example where the subsequent request doesn't have to wait for the first request to finish.
> 
> Thanks,
> Kevin


I've ran into this before --  browsers sometimes rate-limit requests, and won't actually send the second request until the first is done, over the same connection, rather than making a second TCP connection -- try using cURL or wget, which has no such limitation, and see if it works any better.

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151217/21907767/attachment.sig>

From kebin70 at gmail.com  Thu Dec 17 01:38:55 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Thu, 17 Dec 2015 00:38:55 -0800
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
Message-ID: <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>

holy moly - you're right!  This fool will sleep so much better...a million
thanks.

On Thu, Dec 17, 2015 at 12:09 AM, Amber "Hawkie" Brown <
hawkowl at atleastfornow.net> wrote:

>
> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> >
> > Hey - I'm confused, so nothing new :) ...but I'm running at this example
> and I'm scratching my head.
> >
> >
> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> >
> > I would've thought 2 requests could be served simultaneously, but when I
> fire off 2 requests the first received gets it's response after 5 seconds,
> while the second response takes 10 seconds.
> >
> > I think I understand what's happening, but I don't know why...and I
> would love an example where the subsequent request doesn't have to wait for
> the first request to finish.
> >
> > Thanks,
> > Kevin
>
>
> I've ran into this before --  browsers sometimes rate-limit requests, and
> won't actually send the second request until the first is done, over the
> same connection, rather than making a second TCP connection -- try using
> cURL or wget, which has no such limitation, and see if it works any better.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/552d82bb/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.py
Type: text/x-python
Size: 1135 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151217/552d82bb/attachment-0002.py>

From terry at jon.es  Thu Dec 17 03:24:54 2015
From: terry at jon.es (Terry Jones)
Date: Thu, 17 Dec 2015 10:24:54 +0000
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
 <CAA-sNEbJv6aVrQ9MEaC20Ufn7+ULmrF78V2Be1Nv58s5Y+JyuQ@mail.gmail.com>
Message-ID: <CACqnu4X696B3Jkyz24PAYCr4EZLdfoa86b_vWgYaXwh9g7mBXw@mail.gmail.com>

Hi Kevin

I found it extremely beneficial to read the Twisted sources, in particular
twisted.internet.defer. In your case, see
https://github.com/twisted/twisted/blob/trunk/twisted/internet/task.py#L821

One nice thing that happens when you read the source is that you see quite
a number of API methods (including deferLater, and also succeed, fail,
maybeDeferred, some of the Deferred class methods, DeferredList, and the
wonderful DeferredQueue) are actually just a few lines of code, doing
something quite simple with a deferred. I found that figuring out how they
all did what they did made my understanding of deferreds much better. I
really love deferreds :-) Here's a bit I wrote about them, using
DeferredQueue as the example
http://blogs.fluidinfo.com/terry/2010/07/23/asynchronous-data-structures-with-twisted-deferreds/

Hope that helps.

Terry


On Thu, Dec 17, 2015 at 8:38 AM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> holy moly - you're right!  This fool will sleep so much better...a million
> thanks.
>
> On Thu, Dec 17, 2015 at 12:09 AM, Amber "Hawkie" Brown <
> hawkowl at atleastfornow.net> wrote:
>
>>
>> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>> >
>> > Hey - I'm confused, so nothing new :) ...but I'm running at this
>> example and I'm scratching my head.
>> >
>> >
>> http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
>> >
>> > I would've thought 2 requests could be served simultaneously, but when
>> I fire off 2 requests the first received gets it's response after 5
>> seconds, while the second response takes 10 seconds.
>> >
>> > I think I understand what's happening, but I don't know why...and I
>> would love an example where the subsequent request doesn't have to wait for
>> the first request to finish.
>> >
>> > Thanks,
>> > Kevin
>>
>>
>> I've ran into this before --  browsers sometimes rate-limit requests, and
>> won't actually send the second request until the first is done, over the
>> same connection, rather than making a second TCP connection -- try using
>> cURL or wget, which has no such limitation, and see if it works any better.
>>
>> - Amber
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/b8ca2e1e/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:37:25 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:37:25 -0800
Subject: [Twisted-Python] having 'from_' factory method with a deferred
	in it.
In-Reply-To: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>
References: <CA+G--P4-Hw2r3osF0y8iy4e1CxMX92ZFU9QAO9hwSe=wq7yAOA@mail.gmail.com>
Message-ID: <51A31686-CAA4-4167-BD37-12C1809F00FB@twistedmatrix.com>


> On Dec 9, 2015, at 4:17 AM, Sinan Nalkaya <sardok at gmail.com> wrote:
> 
> Hi Everyone,
> 
> I am developing a tiny library where you can use your gpio pins (over sysfs) in twisted way. You may find more about, on https://github.com/sardok/txgpio <https://github.com/sardok/txgpio>.
> 
> I am facing with a race condition issue, where certain files are needed to be created in filesystem, by kernel, in order have the class to finish its initialization. Which means in twisted jargon, a deferred needs to be resolved in __init__ (or another method - see below) method in order to have complete object.
> 
> After reading this blog post http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html <http://as.ynchrono.us/2014/12/asynchronous-object-initialization.html> by Jean-Paul, i believe having 'from_' factory method which waits for those certain files to be created before creating the actual class object is the better way.
> 
> However, i couldn't find a way to wait for a deferred in order to use the from_ function in the following form (which is the common form for using from_ factory methods);
> 
> obj = sysfs.GPIO.from_unexported_node(*a, **kw)
> 
> More or less, i am looking for some thing equivalent of 'asyncio.get_event_loop()' and 'yield from loop.run_in_executor()' as mentioned in the blog post.

The equivalent of 'asyncio.get_event_loop()' is simply 'from twisted.internet import reactor'.  However, relying upon this is an anti-pattern (I begged Guido not to add get_event_loop to asyncio, since we would love to remove 'twisted.internet.reactor' from Twisted, but oh well).  The "right" way to do this is simply to accept 'reactor' as a parameter to 'from_...'.

If you're using, for example, twisted.internet.task.react, you'll receive the 'reactor' as a parameter at the "top" of your program, you'll never have to import it from twisted.internet, and you can just pass it on through.  This style is much cleaner.

The equivalent to 'run_in_executor(None, ...)' is simply 'reactor.callInThread(...)'.

I'm glad you found the "right" way to initialize an object asynchronously :-).

Hope this helps,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/067649e9/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:45:45 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:45:45 -0800
Subject: [Twisted-Python] What are the relationships between
	twisted.cred.portal.IRealm, Portal and avatar
In-Reply-To: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>
References: <53a7c409.c7e8.1519c098ce7.Coremail.snailcoder@163.com>
Message-ID: <BC424394-1F1E-4178-AF06-8A10462951C7@twistedmatrix.com>


> On Dec 13, 2015, at 7:50 AM, Wang Yan <snailcoder at 163.com> wrote:
> 
> I'm trying to use Twisted's HTTP basic authentication to control access to some protected resources.
> 
> According to some articles, it is necessary to use three important concepts: Realm, Portal and avatar. Now I'm wondering if the Realm and avatar is one to one correspondence.

The idea is that a Realm represents an application, and an Avatar represents a single user's data within that application.  This example is a bit oversimplified, since it doesn't provide any inputs to the user's data; most of the time, you'd want to retrieve a session or something based on the avatarID.

> Let's look at an example(http://www.red-bean.com/doc/python-twisted-web/examples/webguard.py):
> 
> import sys
> 
> from zope.interface import implements
> 
> from twisted.python import log
> from twisted.internet import reactor
> from twisted.web import server, resource, guard
> from twisted.cred.portal import IRealm, Portal
> from twisted.cred.checkers import InMemoryUsernamePasswordDatabaseDontUse
> 
> 
> class GuardedResource(resource.Resource):
>     """
>     A resource which is protected by guard and requires authentication in order
>     to access.
>     """
>     def getChild(self, path, request):
>         return self
> 
> 
>     def render(self, request):
>         return "Authorized!"
> 
> 
> 
> class SimpleRealm(object):
>     """
>     A realm which gives out L{GuardedResource} instances for authenticated
>     users.
>     """
>     implements(IRealm)
> 
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         if resource.IResource in interfaces:
>             return resource.IResource, GuardedResource(), lambda: None
>         raise NotImplementedError()
> 
> 
> 
> def main():
>     log.startLogging(sys.stdout)
>     checkers = [InMemoryUsernamePasswordDatabaseDontUse(joe='blow')]
>     wrapper = guard.HTTPAuthSessionWrapper(
>         Portal(SimpleRealm(), checkers),
>         [guard.DigestCredentialFactory('md5', 'example.com')])
>     reactor.listenTCP(8889, server.Site(
>           resource = wrapper))
>     reactor.run()
> 
> if __name__ == '__main__':
>     main()
> 
> Of course I know the SimpleRealm is used to return the corresponding resource, e.g. GuardedResource in above example. However, I don't know what to do when there lots of resources to be guarded. For example, I have GuardedResource1, GuardedResource2 and GuardedResource3, maybe they need the same or different number of parameters when they are initialized; If so, is it necessary to implement SimpleRealm1, SimpleRealm2 and SimpleRealm3, respectively?

Rather than thinking of a resource as always existing and just needing to have a lock on it or not, consider the more flexible model (the one that cred actually implements) where a single Avatar object (in this case: the top IResource returned from SimpleRealm) is the top level of "everything the user has access to".  In other words, 'GuardedResource' should have a 'getChild' method which makes the determination if the user they represent (really, at least the avatarId should be supplied to GuardedResource.__init__) has access to other resources, and return them if so, and appropriate errors if not.

Even the resources available to a not-logged-in user (see twisted.cred.credentials.Anonymous) is just another avatar, the one served up to unauthenticated people.

So, if you have https://myapp.example.com/a/b/secure/c/d <https://myapp.example.com/a/b/secure/c/d>, https://myapp.example.com/a/b/secure <https://myapp.example.com/a/b/secure> would be the guarded resource, and then SecureResource.getChild("c", ...) would return "c", which would in turn return "d" if the logged-in user has access to it.

Does this make sense?

Thanks for using Twisted,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/d41a495a/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 17 04:49:55 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 03:49:55 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <56719E9F.8090301@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
Message-ID: <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>


> On Dec 16, 2015, at 9:25 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi all,
> I'm writing a MUD server, and I want a way for transports to be notified ofa shutdown before being disconnected, and the reactor being stopped.
> 
> I've tried:
> 
> for t in transports:
> t.write('Shutting down.\r\n')
> t.loseConnection()
> reactor.stop()
> 
> This doesn't seem to notify the transports.
> 
> I also tried:
> for t in transports:
> t.write('Shutting down.\r\n')
> t.loseConnection()
> while t.connected:
>  pass
> reactor.stop()
> 
> That just blocked and did nothing, presumably something do with my while loop.
> 
> Is there a stopWhenEmpty function on the somewhere? I did look over the methods, and I couldn't find anything promising.
> 
> I'm just using the standard from twisted.internet import reactor reactor, so no special cases here. In case it matters the transports I'm using are twisted.protocols.basic.LineReceiver, and everything else works with them.
> 
> Cheers in advance for the help.

This is definitely doable, but before I explain it would help to know why you want to do this.

The reason I ask is: servers crash; hardware fails.  The falcon cannot hear the falconer; things fall apart; the centre cannot hold.

When those servers do crash (and they will), you don't get a clean notification of disconnects.  So if you're writing your application to rely very heavily on the ability to do a clean shutdown and get notifications of every disconnect at the time you expect reactor.stop() to be running, you are probably designing your system in a way that will be very fragile and prone to data loss.  I know, I have made this mistake more than once myself :).

So, before you continue: do you actually need to do this?  Could you just ignore the notification of the connection drop and exit gracefully, perhaps properly cleaning up whatever state is left over at next startup?  If you really need this, understanding why you need it would also help in determining which implementation technique to suggest (there are a few).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/89da4d80/attachment-0002.html>

From chris.norman2 at googlemail.com  Thu Dec 17 05:56:03 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Thu, 17 Dec 2015 12:56:03 +0000
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
Message-ID: <5672B0E3.90306@googlemail.com>

Hi,
It's a MUD server, so players type in commands and receive textual 
responses.

One of the admin commands is the ability to shutdown the server (or 
CTRL-C might be pressed on the console). I'd like this action to notify 
all connected transports that the server is going down for shutdown, so 
they're not rudely disconnected, then once the notifications have all 
gone through, then the server is free to shutdown.

I hope all this makes sense.

Cheers,

On 12/17/2015 11:49 AM, Glyph Lefkowitz wrote:
>
>> On Dec 16, 2015, at 9:25 AM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi all,
>> I'm writing a MUD server, and I want a way for transports to be 
>> notified ofa shutdown before being disconnected, and the reactor 
>> being stopped.
>>
>> I've tried:
>>
>> for t in transports:
>> t.write('Shutting down.\r\n')
>> t.loseConnection()
>> reactor.stop()
>>
>> This doesn't seem to notify the transports.
>>
>> I also tried:
>> for t in transports:
>> t.write('Shutting down.\r\n')
>> t.loseConnection()
>> while t.connected:
>>  pass
>> reactor.stop()
>>
>> That just blocked and did nothing, presumably something do with my 
>> while loop.
>>
>> Is there a stopWhenEmpty function on the somewhere? I did look over 
>> the methods, and I couldn't find anything promising.
>>
>> I'm just using the standard from twisted.internet import reactor 
>> reactor, so no special cases here. In case it matters the transports 
>> I'm using are twisted.protocols.basic.LineReceiver, and everything 
>> else works with them.
>>
>> Cheers in advance for the help.
>
> This is definitely doable, but before I explain it would help to know 
> /why/ you want to do this.
>
> The reason I ask is: servers crash; hardware fails.  The falcon cannot 
> hear the falconer; things fall apart; the centre cannot hold.
>
> When those servers /do/ crash (and they will), you don't get a clean 
> notification of disconnects.  So if you're writing your application to 
> rely very heavily on the ability to do a clean shutdown and get 
> notifications of every disconnect at the time you expect 
> reactor.stop() to be running, you are probably designing your system 
> in a way that will be very fragile and prone to data loss.  I know, I 
> have made this mistake more than once myself :).
>
> So, before you continue: do you actually need to do this?  Could you 
> just ignore the notification of the connection drop and exit 
> gracefully, perhaps properly cleaning up whatever state is left over 
> at next startup?  If you really need this, understanding why you need 
> it would also help in determining which implementation technique to 
> suggest (there are a few).
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/b1f56d32/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Dec 17 06:03:44 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 05:03:44 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <5672B0E3.90306@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
Message-ID: <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>


> On Dec 17, 2015, at 4:56 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hi,
> It's a MUD server, so players type in commands and receive textual responses.
> 
> One of the admin commands is the ability to shutdown the server (or CTRL-C might be pressed on the console). I'd like this action to notify all connected transports that the server is going down for shutdown, so they're not rudely disconnected, then once the notifications have all gone through, then the server is free to shutdown.

Gotcha.  So you don't need to necessarily wait for all the messages to be delivered if there are slow clients waiting around; you just want to send everyone a farewell message and if they haven't responded within a reasonable timeout, go ahead and shut down anyway.

If your MUD server is already a Service <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>> being launched by twistd, you just need to add a stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService>> method that returns a Deferred.  When CTRL-C is hit (or anything else causes reactor.stop to be called), it will call this stopService method, and won't exit until a Deferred fires.

In your case, a simple deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>> will probably do the trick.  You can also speed things up when there are no connected clients left by cancelling that Deferred to make it finish firing immediately.

Will that work for you?

> I hope all this makes sense.

P.S.: For future reference, on this list the preferred style of reply is interleaved https://en.wikipedia.org/wiki/Posting_style#Interleaved_style <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style> or bottom-posting: https://en.wikipedia.org/wiki/Posting_style#Bottom-posting <https://en.wikipedia.org/wiki/Posting_style#Bottom-posting>

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/2709b613/attachment-0002.html>

From msc at contact.de  Thu Dec 17 07:59:24 2015
From: msc at contact.de (Michael Schlenker)
Date: Thu, 17 Dec 2015 15:59:24 +0100
Subject: [Twisted-Python] twisted.web.xmlrpc.Proxy using the new HTTP 1.1
	client?
Message-ID: <5672CDCC.9090203@contact.de>

Hi,

looking at the xmlrpc client code, it looks like it still does HTTP 1.0
only.

Did anyone try to hook it up to the new HTTPConnectionPool and
HTTP11ClientProtocol in twisted.web.client?

How hard should it be to do that, any pointers on how to do a conversion?

I'm mostly interested in the persistent connections feature of HTTP1.1
(due to TLS setup costs for new connections and burning through too many
client sockets when many calls are made).

Michael

-- 
Michael Schlenker
Senior Software Engineer

CONTACT Software GmbH           Tel.:   +49 (421) 20153-80
Wiener Straße 1-3               Fax:    +49 (421) 20153-41
28359 Bremen
E-Mail: michael.schlenker at contact-software.com
http://www.contact-software.com/

Registered office: Bremen, Germany
Managing directors: Karl Heinz Zachries, Ralf Holtgrefe
Court of register: Amtsgericht Bremen HRB 1321



From glyph at twistedmatrix.com  Thu Dec 17 13:30:41 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Dec 2015 12:30:41 -0800
Subject: [Twisted-Python] twisted.web.xmlrpc.Proxy using the new HTTP
	1.1 client?
In-Reply-To: <5672CDCC.9090203@contact.de>
References: <5672CDCC.9090203@contact.de>
Message-ID: <CDD1B204-DF4D-42BA-8129-84FB15F67A6A@twistedmatrix.com>


> On Dec 17, 2015, at 6:59 AM, Michael Schlenker <msc at contact.de> wrote:
> 
> Hi,
> 
> looking at the xmlrpc client code, it looks like it still does HTTP 1.0
> only.
> 
> Did anyone try to hook it up to the new HTTPConnectionPool and
> HTTP11ClientProtocol in twisted.web.client?
> 
> How hard should it be to do that, any pointers on how to do a conversion?
> 
> I'm mostly interested in the persistent connections feature of HTTP1.1
> (due to TLS setup costs for new connections and burning through too many
> client sockets when many calls are made).

I think the ticket you're looking for is https://twistedmatrix.com/trac/ticket/7012 <https://twistedmatrix.com/trac/ticket/7012>.  And it looks like nobody has done anything there, so you can be the first person to submit a patch! :)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151217/5d2674b9/attachment-0002.html>

From marco.giusti at posteo.de  Fri Dec 18 08:08:45 2015
From: marco.giusti at posteo.de (Marco Giusti)
Date: Fri, 18 Dec 2015 16:08:45 +0100
Subject: [Twisted-Python] asynchronous response
In-Reply-To: <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
References: <CAA-sNEY0yfSM70-NuRg0k_Km5gGU++gxszh-Gx-qijrK16_Ehw@mail.gmail.com>
 <250C7AE0-67AB-40B3-8E85-181029F42184@atleastfornow.net>
Message-ID: <20151218150845.GA1407@murdoc>

On Thu, Dec 17 2015, Amber "Hawkie" Brown wrote:
> 
> > On 17 Dec 2015, at 08:11, Kevin Mcintyre <kebin70 at gmail.com> wrote:
> > 
> > Hey - I'm confused, so nothing new :) ...but I'm running at this
> > example and I'm scratching my head.
> > 
> > http://twistedmatrix.com/documents/current/web/howto/web-in-60/asynchronous-deferred.html
> > 
> > I would've thought 2 requests could be served simultaneously, but
> > when I fire off 2 requests the first received gets it's response
> > after 5 seconds, while the second response takes 10 seconds.
> > 
> > I think I understand what's happening, but I don't know why...and I
> > would love an example where the subsequent request doesn't have to
> > wait for the first request to finish.
> > 
> > Thanks,
> > Kevin
> 
> 
> I've ran into this before --  browsers sometimes rate-limit requests,
> and won't actually send the second request until the first is done,
> over the same connection, rather than making a second TCP connection
> -- try using cURL or wget, which has no such limitation, and see if it
> works any better.

I don't think this is a limitation per se. For what I remember the http
1.1 specification says that the browser should wait for the first
response before they continue to send the other requests. Those can be
then sent in pipeline. So no limitation but specification.

I hope I did not misunderstood your respose.
Marco



From meejah at meejah.ca  Fri Dec 18 17:13:15 2015
From: meejah at meejah.ca (meejah)
Date: Sat, 19 Dec 2015 04:13:15 +0400
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Fri, 4 Dec 2015 01:34:22 -0800")
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
 <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>
Message-ID: <86oadnwb1g.fsf@atlantis.meejah.ca>


Just to follow-up on this, I have submitted a patch for #7671 and filed
two tickets for the other two issues I brought up. These are:

  #8150: twisted.internet.ssl.KeyPair should provide loadPEM
  #8151: add twisted.internet.ssl.optionsForServerTLS

I will likely submit a patch for 8150 in the near term but haven't
started any direct work on 8151. I'm usually idling in OFTC and Freenode
if anyone has feedback or ideas or wants to help :)

Cheers,

-- 
meejah




From chris.norman2 at googlemail.com  Sat Dec 19 06:01:13 2015
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Sat, 19 Dec 2015 13:01:13 +0000
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
 <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
Message-ID: <56755519.6070608@googlemail.com>

Hello,

On 17/12/2015 13:03, Glyph Lefkowitz wrote:
>
>> On Dec 17, 2015, at 4:56 AM, Chris Norman 
>> <chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> 
>> wrote:
>>
>> Hi,
>> It's a MUD server, so players type in commands and receive textual 
>> responses.
>>
>> One of the admin commands is the ability to shutdown the server (or 
>> CTRL-C might be pressed on the console). I'd like this action to 
>> notify all connected transports that the server is going down for 
>> shutdown, so they're not rudely disconnected, then once the 
>> notifications have all gone through, then the server is free to shutdown.
>
> Gotcha.  So you don't need to necessarily wait for all the messages to 
> be delivered if there are slow clients waiting around; you just want 
> to send everyone a farewell message and if they haven't responded 
> within a reasonable timeout, go ahead and shut down anyway.
>
> If your MUD server is already a Service 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html> 
> being launched by twistd, you just need to add a stopService 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService> 
> method that returns a Deferred.  When CTRL-C is hit (or anything else 
> causes reactor.stop to be called), it will call this stopService 
> method, and won't exit until a Deferred fires.
>
> In your case, a simple deferLater 
> <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater> 
> will probably do the trick.  You can also speed things up when there 
> are no connected clients left by cancelling that Deferred to make it 
> finish firing immediately.
>
> Will that work for you?
>
>> I hope all this makes sense.

It's not a service no... Should it be? I wasn't planning to use twistd, 
mainly because I don't know how to, and running
python main.py
is working fine, accepting command line arguments - the works.

It could be converted though, if there is an advantage with services?

Also, I've read quite a lot about Deferreds. I thought initially they 
were for multithreading your application, but I realise that's wrong, so 
I don't understand what the point in them is?

This isn't to say there isn't one mind you, I think I'm just majorly 
missing the point.

>
> P.S.: For future reference, on this list the preferred style of reply 
> is interleaved https://en.wikipedia.org 
> <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style>

Sorry, I'll do that in the future.

> /wiki/Posting_style#Interleaved_style 
> <https://en.wikipedia.org/wiki/Posting_style#Interleaved_style> or 
> bottom-posting: https://en.wikipedia.org/wiki/Posting_style#Bottom-posting
>
> -glyph
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151219/6484d914/attachment-0002.html>

From adi at roiban.ro  Sun Dec 20 10:05:19 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 20 Dec 2015 19:05:19 +0200
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
Message-ID: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>

Hi,

What is the purpose of IOpenSSLTrustRoot ?

It it documented as a private interface, it has only private methods, but
then it is exposed in  twisted.internet.ssl.optionsForClientTLS

Why?

I am confused while trying to review
https://twistedmatrix.com/trac/ticket/7671

Please take a look at my review and add your wisdom :)

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151220/3ce71540/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Dec 21 16:25:55 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 21 Dec 2015 15:25:55 -0800
Subject: [Twisted-Python] ssl APIs
In-Reply-To: <86oadnwb1g.fsf@atlantis.meejah.ca>
References: <86h9jyztf6.fsf@atlantis.meejah.ca>
 <CCCE686F-F4D6-4E32-BA29-F2DA856F3949@twistedmatrix.com>
 <86oadnwb1g.fsf@atlantis.meejah.ca>
Message-ID: <0BB4D6BA-778D-4595-A582-4183B57EBA36@twistedmatrix.com>


> On Dec 18, 2015, at 4:13 PM, meejah <meejah at meejah.ca> wrote:
> 
> 
> Just to follow-up on this, I have submitted a patch for #7671 and filed
> two tickets for the other two issues I brought up. These are:
> 
>  #8150: twisted.internet.ssl.KeyPair should provide loadPEM
>  #8151: add twisted.internet.ssl.optionsForServerTLS
> 
> I will likely submit a patch for 8150 in the near term but haven't
> started any direct work on 8151. I'm usually idling in OFTC and Freenode
> if anyone has feedback or ideas or wants to help :)

Thanks for getting these filed, Meejah!

-g




From hawkowl at atleastfornow.net  Mon Dec 21 23:27:23 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 22 Dec 2015 14:27:23 +0800
Subject: [Twisted-Python] [BACKWARDS INCOMPATIBLE] Moving Twisted to PEP-3333
Message-ID: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>

Hi everyone!

We've been attempting to port twisted.web.wsgi to Python 3, as of recent. The existence of PEP-3333 makes this easier, but due to our backwards compatibility policy, implementing stricter checks to make sure t.w.wsgi-using applications are actually PEP-3333 may be a change which cannot be easily done.

The patch we have currently, which is based on work by jMyles (of Hendrix), tirelessly worked on allennap (of Canonical MAAS), and sheparded along by the wonderful Adi (our other Twisted Fellow), is in very good shape, bringing Twisted's WSGI support to be compliant with PEP-3333. PEP-3333 is much stricter on bytes/Unicode, and the patch introduces some further type checking that the original PEP-333 describes as a must, even though we did not check this before.

This branch cannot currently be merged because of backwards compatibility issues -- the spirit of our Compatibility Policy is that 'apps keep working', and sufficiently Unicode unclean WSGI applications may break due to it, even though PEP-333 is very explicit in saying that "HTTP does not directly support Unicode, and neither does this interface".

So, I am looking to get a compat exception for this -- WSGI is very explicit in its types, and any misbehaving applications are violating the specification grossly enough for there to possibly not need a compat exception -- but going through this way may catch the attention of anyone with a potentially misbehaving application and fix it before Twisted 16.0, when I expect this will be merged.

The ticket is https://twistedmatrix.com/trac/ticket/7993, and the branch you should test against is linked at the top. The compatibility policy will allow a week before we move to merge the ticket, although we may have some changes to the branch to make warnings turn into errors, if we are breaking backwards compat, so please ensure no exceptions *or warnings* are produced by your code.

Thanks,

- Amber
Twisted Fellow, RM, Python 3 Overlord
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151222/e631024e/attachment.sig>

From hawkowl at atleastfornow.net  Tue Dec 22 07:29:12 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Tue, 22 Dec 2015 22:29:12 +0800
Subject: [Twisted-Python] [(maybe) BACKWARDS INCOMPATIBLE] Moving Twisted to
	PEP-3333
In-Reply-To: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>
References: <39E4584B-03DD-4042-9393-E5445C9F6E70@atleastfornow.net>
Message-ID: <47B3B6E4-BC91-4701-836F-2B8337649CA0@atleastfornow.net>


> On 22 Dec 2015, at 14:27, Amber Hawkie Brown <hawkowl at atleastfornow.net> wrote:
> 
> Hi everyone!
> 
> We've been attempting to port twisted.web.wsgi to Python 3, as of recent. The existence of PEP-3333 makes this easier, but due to our backwards compatibility policy, implementing stricter checks to make sure t.w.wsgi-using applications are actually PEP-3333 may be a change which cannot be easily done.
> 
> The patch we have currently, which is based on work by jMyles (of Hendrix), tirelessly worked on allennap (of Canonical MAAS), and sheparded along by the wonderful Adi (our other Twisted Fellow), is in very good shape, bringing Twisted's WSGI support to be compliant with PEP-3333. PEP-3333 is much stricter on bytes/Unicode, and the patch introduces some further type checking that the original PEP-333 describes as a must, even though we did not check this before.
> 
> This branch cannot currently be merged because of backwards compatibility issues -- the spirit of our Compatibility Policy is that 'apps keep working', and sufficiently Unicode unclean WSGI applications may break due to it, even though PEP-333 is very explicit in saying that "HTTP does not directly support Unicode, and neither does this interface".
> 
> So, I am looking to get a compat exception for this -- WSGI is very explicit in its types, and any misbehaving applications are violating the specification grossly enough for there to possibly not need a compat exception -- but going through this way may catch the attention of anyone with a potentially misbehaving application and fix it before Twisted 16.0, when I expect this will be merged.
> 
> The ticket is https://twistedmatrix.com/trac/ticket/7993, and the branch you should test against is linked at the top. The compatibility policy will allow a week before we move to merge the ticket, although we may have some changes to the branch to make warnings turn into errors, if we are breaking backwards compat, so please ensure no exceptions *or warnings* are produced by your code.
> 
> Thanks,
> 
> - Amber
> Twisted Fellow, RM, Python 3 Overlord
> _______________________________________________
> Twisted-web mailing list
> Twisted-web at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Hi everyone!

So, with further looking with Tom Prince, it appears that my backwards compat fears in regards to Unicode were from my older remembering of the branch, allenap and Adi have made it so that it raises a warning on Python 2 if you're not Unicode/bytes clean, as well as introducing hard-checks on Python 3, where it is reasonable to do so.

So, this should mean that all your Python 2 WSGI apps should keep working, even if they're not Unicode clean, but I am still wanting to go through the exception process to give users of Twisted's WSGI support a chance to raise any problems that they may have with the PEP-3333-compatible code, as unlikely as they are to be.

I'd like to say thanks again to allenap and Adi's herculean efforts on this branch :)

- Amber

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151222/a4784479/attachment.sig>

From glyph at twistedmatrix.com  Fri Dec 25 02:00:24 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 01:00:24 -0800
Subject: [Twisted-Python] Waiting for transports to close
In-Reply-To: <56755519.6070608@googlemail.com>
References: <56719E9F.8090301@googlemail.com>
 <40B1D1CF-3B04-4351-8675-2E23854A87F9@twistedmatrix.com>
 <5672B0E3.90306@googlemail.com>
 <0494770D-A0C0-4171-A10F-446BC2966FCB@twistedmatrix.com>
 <56755519.6070608@googlemail.com>
Message-ID: <D15A8C49-2104-432C-9C79-E0973B62FE59@twistedmatrix.com>


> On Dec 19, 2015, at 5:01 AM, Chris Norman <chris.norman2 at googlemail.com> wrote:
> 
> Hello,
> 
> On 17/12/2015 13:03, Glyph Lefkowitz wrote:
>> 
>>> On Dec 17, 2015, at 4:56 AM, Chris Norman < <mailto:chris.norman2 at googlemail.com>chris.norman2 at googlemail.com <mailto:chris.norman2 at googlemail.com>> wrote:
>>> 
>>> Hi,
>>> It's a MUD server, so players type in commands and receive textual responses.
>>> 
>>> One of the admin commands is the ability to shutdown the server (or CTRL-C might be pressed on the console). I'd like this action to notify all connected transports that the server is going down for shutdown, so they're not rudely disconnected, then once the notifications have all gone through, then the server is free to shutdown.
>> 
>> Gotcha.  So you don't need to necessarily wait for all the messages to be delivered if there are slow clients waiting around; you just want to send everyone a farewell message and if they haven't responded within a reasonable timeout, go ahead and shut down anyway.
>> 
>> If your MUD server is already a Service < <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html>> being launched by twistd, you just need to add a stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService <https://twistedmatrix.com/documents/15.5.0/api/twisted.application.service.IService.html#stopService>> method that returns a Deferred.  When CTRL-C is hit (or anything else causes reactor.stop to be called), it will call this stopService method, and won't exit until a Deferred fires.
>> 
>> In your case, a simple deferLater < <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.task.html#deferLater>> will probably do the trick.  You can also speed things up when there are no connected clients left by cancelling that Deferred to make it finish firing immediately.
>> 
>> Will that work for you?
>> 
>>> I hope all this makes sense.
> 
> It's not a service no... Should it be? I wasn't planning to use twistd, mainly because I don't know how to, and running
> python main.py
> is working fine, accepting command line arguments - the works.
> 
> It could be converted though, if there is an advantage with services?

Services are just the standard way to organize starting up and shutting down with Twisted.  And running under `twistd´ takes care of some of the details of starting up and hosting your service, including initializing logging, managing the timing of setting the UID and GID, selecting the reactor and so on.  But if you're happy with your own service setup, it's not necessary.  The alternative is to use `addSystemEventTrigger´: https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.base.ReactorBase.html#addSystemEventTrigger <https://twistedmatrix.com/documents/15.5.0/api/twisted.internet.base.ReactorBase.html#addSystemEventTrigger>
> Also, I've read quite a lot about Deferreds. I thought initially they were for multithreading your application, but I realise that's wrong, so I don't understand what the point in them is?

You can't block (i.e. wait to return from your function until you have a result) in an async system, so Deferreds are a placeholder for a result that doesn't exist yet.  krondo.com's Twisted introduction covers this in some detail, if the official Twisted docs didn't help you: http://krondo.com/?page_id=1327

> This isn't to say there isn't one mind you, I think I'm just majorly missing the point.

If there weren't a point to having Deferreds then Twisted would be a very strange system indeed ;).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151225/8d2b5be0/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec 25 02:20:04 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 01:20:04 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
Message-ID: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>


> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> What is the purpose of IOpenSSLTrustRoot ?

The idea is that we have public functions, mainly `optionsForClientTLS´, which need to take a thing that represents a "trust root".  We want this to be something that can abstractly be described at a high level, but then in reality we need to do with gross implementation details of OpenSSL.  So this interface describes what you pass.

> It it documented as a private interface, it has only private methods, but then it is exposed in  twisted.internet.ssl.optionsForClientTLS
> 
> Why?

Yes, this is intentional.  It is a private interface, so you can't check if something provides it, you aren't allowed to know what attributes it has, and you can't implement it.  However, you can call a function that is documented to return a value that provides it (such as `twisted.internet.ssl.platformTrust´) and pass that value to a function documented to accept it (such as `twisted.internet.ssl.optionsForClientTLS`).

It's private because we weren't sure if we'd want to change it.  At the time it was implemented, the only two cases were OpenSSLDefaultPaths and Certificate.  In the case of Certificate, you know what certificate you're adding, but in the case of OpenSSLDefaultPaths, you just call a method on the context object to mutate it, and you can't extract information about which certificates are trusted past that.  The method we came up with, _addCACertsToContext, was a gross compromise which allowed for implementing this but could not be made abstract, because it reflects a bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL objects, which we are trying to do less of.  For one thing, we'd eventually like to support TLS via OpenSSL using an API provided by Cryptography; for another, we'd like to one day provide TLS from an API that might not be backed by OpenSSL at all.  So reducing the surface area of our public API that touches pyOpenSSL is important.

Hopefully this thoroughly explains the decision?

> I am confused while trying to review https://twistedmatrix.com/trac/ticket/7671 <https://twistedmatrix.com/trac/ticket/7671> 
> 
> Please take a look at my review and add your wisdom :)

This is quite a detailed review :-).

Merry christmas,

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151225/991030ad/attachment-0002.html>

From adi at roiban.ro  Fri Dec 25 15:19:02 2015
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 26 Dec 2015 00:19:02 +0200
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
Message-ID: <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>

Hi,

On 25 December 2015 at 11:20, Glyph Lefkowitz <glyph at twistedmatrix.com>
wrote:

>
> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
>
> Hi,
>
> What is the purpose of IOpenSSLTrustRoot ?
>
>
> The idea is that we have public functions, mainly `optionsForClientTLS´,
> which need to take a thing that represents a "trust root".  We want this to
> be something that can abstractly be described at a high level, but then in
> reality we need to do with gross implementation details of OpenSSL.  So
> this interface describes what you pass.
>

Reading the docstring of IOpenSSLTrustRoot it does not give any hints about
optionsForClientTLS

So instead of

    Trust settings for an OpenSSL context.

Maybe it should be something like:

   Marker only interface for private implementations of OpenSSL trust root
things.

It it documented as a private interface, it has only private methods, but
> then it is exposed in  twisted.internet.ssl.optionsForClientTLS
>
> Why?
>
>
> Yes, this is intentional.  It is a private interface, so you can't check
> if something provides it, you aren't allowed to know what attributes it
> has, and you can't implement it.  However, you *can* call a function that
> is documented to return a value that provides it (such as
> `twisted.internet.ssl.platformTrust´) and pass that value to a function
> documented to accept it (such as
> `twisted.internet.ssl.optionsForClientTLS`).
>
> It's private because we weren't sure if we'd want to change it.  At the
> time it was implemented, the only two cases were OpenSSLDefaultPaths and
> Certificate.  In the case of Certificate, you know what certificate you're
> adding, but in the case of OpenSSLDefaultPaths, you just call a method on
> the context object to mutate it, and you can't extract information about
> which certificates are trusted past that.  The method we came up
> with, _addCACertsToContext, was a gross compromise which allowed for
> implementing this but could not be made abstract, because it reflects a
> bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL
> objects, which we are trying to do less of.  For one thing, we'd eventually
> like to support TLS via OpenSSL using an API provided by Cryptography; for
> another, we'd like to one day provide TLS from an API that might not be
> backed by OpenSSL at all.  So reducing the surface area of our public API
> that touches pyOpenSSL is important.
>
> Hopefully this thoroughly explains the decision?
>

I understand now, but I find it hard to extract this information just from
the code... maybe I am a bad code reader, or maybe the  IOpenSSLTrustRoot
docstring should inform that it is a gross compromise so that other people
will understand that this is not really intentional ... and invited to find
something better :)

I am happy to see more backend neutral API but unless we have at least
another use case for non OpenSSL backed TLS I don't know if it worth
designing an API for that unknown API.

I am confused while trying to review
> https://twistedmatrix.com/trac/ticket/7671
>
> Please take a look at my review and add your wisdom :)
>
>
> This is quite a detailed review :-).
>
> Merry christmas,
>
>
Many thanks for your comment.

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151226/51b36aac/attachment-0002.html>

From meejah at meejah.ca  Fri Dec 25 15:35:00 2015
From: meejah at meejah.ca (meejah)
Date: Sat, 26 Dec 2015 02:35:00 +0400
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com> (Glyph
 Lefkowitz's message of "Fri, 25 Dec 2015 01:20:04 -0800")
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
Message-ID: <86d1tuupgr.fsf@atlantis.meejah.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

(Thanks for the review, Adi!)

> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:

>> It it documented as a private interface, it has only private methods,
>> but then it is exposed in twisted.internet.ssl.optionsForClientTLS
>> Why?

> Yes, this is intentional.  It is a private interface, so you can't
> check if something provides it, you aren't allowed to know what
> attributes it has, and you can't implement it.

So in the context of #7671 and testing, can the tests for multiTrust()
just check that they get an IOpenSSLTrustRoot implementation back or do
... something else? That is, currently I'm just confirming this via
asserting IOpenSSLTrustRoot.providedBy(theReturnValue) or so in the
tests. Of course, this means I'm importing the private interface into
the tests...

Thanks! and merry christmas,
meejah



From glyph at twistedmatrix.com  Fri Dec 25 19:27:58 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 18:27:58 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
 <CAFycZ9eDamAxd=qGFUF6ORt-XhnGJnbL1GtQfPBZ2fsUhbo5fg@mail.gmail.com>
Message-ID: <8E552B9F-363C-4A5D-BCB8-EECDEC2A739C@twistedmatrix.com>


> On Dec 25, 2015, at 2:19 PM, Adi Roiban <adi at roiban.ro> wrote:
> 
> Hi,
> 
> On 25 December 2015 at 11:20, Glyph Lefkowitz <glyph at twistedmatrix.com <mailto:glyph at twistedmatrix.com>> wrote:
> 
>> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro <mailto:adi at roiban.ro>> wrote:
>> 
>> Hi,
>> 
>> What is the purpose of IOpenSSLTrustRoot ?
> 
> The idea is that we have public functions, mainly `optionsForClientTLS´, which need to take a thing that represents a "trust root".  We want this to be something that can abstractly be described at a high level, but then in reality we need to do with gross implementation details of OpenSSL.  So this interface describes what you pass.
> 
> Reading the docstring of IOpenSSLTrustRoot it does not give any hints about optionsForClientTLS
> 
> So instead of
> 
>     Trust settings for an OpenSSL context.
> 
> Maybe it should be something like:
> 
>    Marker only interface for private implementations of OpenSSL trust root things.

This is incorrect, though.  The term "marker interface" means "interface with no attributes or methods, used to denote a complex property that Interface is insufficiently expressive to describe".

Oh and hey we didn't even invent the term: https://en.wikipedia.org/wiki/Marker_interface_pattern :)

>> It it documented as a private interface, it has only private methods, but then it is exposed in  twisted.internet.ssl.optionsForClientTLS
>> 
>> Why?
> 
> Yes, this is intentional.  It is a private interface, so you can't check if something provides it, you aren't allowed to know what attributes it has, and you can't implement it.  However, you can call a function that is documented to return a value that provides it (such as `twisted.internet.ssl.platformTrust´) and pass that value to a function documented to accept it (such as `twisted.internet.ssl.optionsForClientTLS`).
> 
> It's private because we weren't sure if we'd want to change it.  At the time it was implemented, the only two cases were OpenSSLDefaultPaths and Certificate.  In the case of Certificate, you know what certificate you're adding, but in the case of OpenSSLDefaultPaths, you just call a method on the context object to mutate it, and you can't extract information about which certificates are trusted past that.  The method we came up with, _addCACertsToContext, was a gross compromise which allowed for implementing this but could not be made abstract, because it reflects a bizarre flaw in the OpenSSL API, and it by necessity exposes pyOpenSSL objects, which we are trying to do less of.  For one thing, we'd eventually like to support TLS via OpenSSL using an API provided by Cryptography; for another, we'd like to one day provide TLS from an API that might not be backed by OpenSSL at all.  So reducing the surface area of our public API that touches pyOpenSSL is important.
> 
> Hopefully this thoroughly explains the decision?
> 
> I understand now, but I find it hard to extract this information just from the code... maybe I am a bad code reader, or maybe the  IOpenSSLTrustRoot docstring should inform that it is a gross compromise so that other people will understand that this is not really intentional ... and invited to find something better :)

I think the documentation as it is does maintainers a slight disservice, as the assumption is that you've come to IOpenSSLTrustRoot after having read the docstring for optionsForClientTLS, or platformTrust, or OpenSSLCertificateOptions.  So it could definitely be re-written to take into account the fact that a maintainer might discover this interface first.  Honestly it seems to me that a "@see:" with links to the thing that take it as a parameter would get us 70% of the way there, just so that maintainers could use it as a jumping-off point.  Some of the explanation from these emails would also be useful, of course, to give some context.  It says "things outside of twisted shouldn't implement it" but it doesn't really explain why.

> I am happy to see more backend neutral API but unless we have at least another use case for non OpenSSL backed TLS I don't know if it worth designing an API for that unknown API.

We have definitely made some missteps with this API design (I should probably write a giant "mea culpa" blog post at some point pointing out what many of those errors were).  However, the point of things like IOpenSSLTrustRoot is not to prematurely introduce extra interfaces and functionality where they are not needed - we need such an interface even for a pure OpenSSL-only backend.  The point is to keep those things out of the public interface so that callers are not overly coupled to them.

One thing that's important to remember is that "private" is a social convention in Python, so if needs must, a Twisted application can always just go ahead and implement this interface. 

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151225/89c5af78/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Dec 25 19:32:21 2015
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Dec 2015 18:32:21 -0800
Subject: [Twisted-Python] The role of
	twisted.internet._sslverify.IOpenSSLTrustRoot
In-Reply-To: <86d1tuupgr.fsf@atlantis.meejah.ca>
References: <CAFycZ9cMncTzje-R74GxcRCwTkHWHm=DHySdX7ihxs3R4pLc3g@mail.gmail.com>
 <755589F9-90E5-4FA9-AEC6-FB38D6F4D42D@twistedmatrix.com>
 <86d1tuupgr.fsf@atlantis.meejah.ca>
Message-ID: <0FB38EA5-52C0-4A4F-AC09-27EEF9C353ED@twistedmatrix.com>


> On Dec 25, 2015, at 2:35 PM, meejah <meejah at meejah.ca> wrote:
> 
> Glyph Lefkowitz <glyph at twistedmatrix.com> writes:
> 
> (Thanks for the review, Adi!)
> 
>> On Dec 20, 2015, at 9:05 AM, Adi Roiban <adi at roiban.ro> wrote:
> 
>>> It it documented as a private interface, it has only private methods,
>>> but then it is exposed in twisted.internet.ssl.optionsForClientTLS
>>> Why?
> 
>> Yes, this is intentional.  It is a private interface, so you can't
>> check if something provides it, you aren't allowed to know what
>> attributes it has, and you can't implement it.
> 
> So in the context of #7671 and testing, can the tests for multiTrust()
> just check that they get an IOpenSSLTrustRoot implementation back or do
> ... something else? That is, currently I'm just confirming this via
> asserting IOpenSSLTrustRoot.providedBy(theReturnValue) or so in the
> tests. Of course, this means I'm importing the private interface into
> the tests...

Twisted's own tests may always feel free to import private implementation details if they're useful for testing.

However, ideally, the tests for multiTrust ought to pass along a fake OpenSSL context object and ensure the correct methods are called on it; you can do this without importing any private API, just public API from pyOpenSSL and public API from Twisted, but it does involve a bit more set-up.  There are, however, lots of examples of doing that setup, particularly in test_sslverify (which already has a FakeContext).  So if you can, please do it that way.

Thanks!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151225/badb3247/attachment-0002.html>

From kebin70 at gmail.com  Sat Dec 26 17:08:05 2015
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 26 Dec 2015 16:08:05 -0800
Subject: [Twisted-Python] on template processing
Message-ID: <CAA-sNEaLqB6+VVc6D=8P-3JWEK7ewVfcdXoLD6L2OYC7cCjfrg@mail.gmail.com>

1) Is template block processing done top to bottom sequentially?  I've
included example.py - it's interesting that by having a blocking call first
the second request is blocked, but having the blocking call after a
non-blocking call the second request is not.  I would've thought it would
behave as a deferred list, but looking at _flattenTree and guessing not.
Maybe related to wait_for_it example?

2) Is it possible for a Resource to act as an Element too?  I've included a
non-working elementresource.py.  I'm a total hack, but I would think that
if an instance had a loader attr it could be processable.

3) Is it possible to include xmlns:t="
http://twistedmatrix.com/ns/twisted.web.template/0.1" not in a tag itself?
Or perhaps have a tag like 'render-block' that could be transparent-like?

4) Is it possible to have xmlns:t="
http://twistedmatrix.com/ns/twisted.web.template/0.1" in multiple places in
a template?  I have some cases with inline scripts that bonk out with > or
< characters.  This is very much related to #3.

5) Is it possible for a render element to return something like "<~sometag
t:render>..." and process recursively?

6) Is there any examples of connection keep-alive long polling?

7) Examples of request based scoping would be great.  All the examples on
http://twistedmatrix.com/documents/13.0.0/web/howto/twisted-templates.html
have flatten(None... -  I've included request_scope.py

8) The wait_for_it example, is that meant as a chunked transfer example?
It would be cool to have an example I could open in a browser.  Trying to
wrap my head around this and subviews in the meantime.

Happy holidays.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151226/70b99511/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.py
Type: text/x-python
Size: 2089 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151226/70b99511/attachment-0006.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: elementresource.py
Type: text/x-python
Size: 1015 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151226/70b99511/attachment-0007.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: request_scope.py
Type: text/x-python
Size: 2048 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20151226/70b99511/attachment-0008.py>

From techtonik at gmail.com  Tue Dec 29 15:13:37 2015
From: techtonik at gmail.com (anatoly techtonik)
Date: Wed, 30 Dec 2015 01:13:37 +0300
Subject: [Twisted-Python] Twisted 15.4 was the last release to support
 Python 2.6; or: a HawkOwl Can't Words Situation
In-Reply-To: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>
References: <A99237EA-2D90-41F8-8895-B436FA880456@atleastfornow.net>
Message-ID: <CAPkN8xJOmoG5g6P0LkvaO-DBK+H+AKwSB-QEOfJqFKAgmiVtTA@mail.gmail.com>

Is it possible to fix the documentation?
https://twistedmatrix.com/trac/browser/tags/releases/twisted-15.5.0/NEWS?format=raw

On Mon, Dec 7, 2015 at 4:06 PM, Amber "Hawkie" Brown
<hawkowl at atleastfornow.net> wrote:
> Hi everyone!
>
> It's been brought to my attention that I misworded something in the release notes and it slipped through the cracks. In the NEWS I said:
>
>> This is the last Twisted release where Python 2.6 is supported, on any platform.
>
> However, I meant that this is the first Twisted release to drop 2.6 support wholesale, preventing import on this platform. Twisted 15.4 will still operate, so if you have Python 2.6 deployment requirements, bracket the maximum to 15.4 on that platform by using an if statement in your setup.py, and `Twisted >=*minreq*,<=15.4; python_version < '2.7'` under requires_dist in your setup.cfg, where minreq is the minimum required Twisted.
>
> Sorry for the inconvenience!
>
> - Amber "HawkOwl" Brown
> Twisted Release Manager
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
anatoly t.



From guglielmo.pasa at bluewin.ch  Wed Dec 30 06:47:40 2015
From: guglielmo.pasa at bluewin.ch (Guglielmo Pasa)
Date: Wed, 30 Dec 2015 14:47:40 +0100
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not install
Message-ID: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>

Hi,
I’m trying to get twisted installed on OS X 10.11 with virtualenv and python3.5. All dependencies are satisfied.
It seems to install correctly and it seems that OpenSSL is working pretty well with it.

But when I try to load

import Crypto
import twisted.conch.ssh.transport

I get

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named ‘twisted.conch'

on inspection, in the folder site-packages/twisted there is no conch folder.


I tried to build twisted from source and conch doesn’t seem to build either

What can I do to solve this?






From adi at roiban.ro  Wed Dec 30 07:10:38 2015
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 30 Dec 2015 16:10:38 +0200
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not
	install
In-Reply-To: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
References: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
Message-ID: <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>

On 30 December 2015 at 15:47, Guglielmo Pasa <guglielmo.pasa at bluewin.ch>
wrote:

> Hi,
> I’m trying to get twisted installed on OS X 10.11 with virtualenv and
> python3.5. All dependencies are satisfied.
> It seems to install correctly and it seems that OpenSSL is working pretty
> well with it.
>
> But when I try to load
>
> import Crypto
> import twisted.conch.ssh.transport
>
> I get
>
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> ImportError: No module named ‘twisted.conch'
>
> on inspection, in the folder site-packages/twisted there is no conch
> folder.
>
>
> I tried to build twisted from source and conch doesn’t seem to build either
>
> What can I do to solve this?
>

Use Python 2.7 :)

Conch.ssh was not ported to Python 3

Regards

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20151230/73d6f32f/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Dec 30 07:12:31 2015
From: hawkowl at atleastfornow.net (Amber "Hawkie" Brown)
Date: Wed, 30 Dec 2015 22:12:31 +0800
Subject: [Twisted-Python] twisted-python on OS X 10.11 conch does not
	install
In-Reply-To: <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>
References: <18DC51CC-9D7F-4121-83C2-B65D5219CD92@bluewin.ch>
 <CAFycZ9f-eL0nM8SCDKar4Bg3D09eq_y-ShUF4vUKXaRHz3kT-g@mail.gmail.com>
Message-ID: <1E61F37A-8C02-4B72-A4EA-C5D680BB3D42@atleastfornow.net>


> On 30 Dec 2015, at 22:10, Adi Roiban <adi at roiban.ro> wrote:
> 
> On 30 December 2015 at 15:47, Guglielmo Pasa <guglielmo.pasa at bluewin.ch> wrote:
> Hi,
> I’m trying to get twisted installed on OS X 10.11 with virtualenv and python3.5. All dependencies are satisfied.
> It seems to install correctly and it seems that OpenSSL is working pretty well with it.
> 
> But when I try to load
> 
> import Crypto
> import twisted.conch.ssh.transport
> 
> I get
> 
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> ImportError: No module named ‘twisted.conch'
> 
> on inspection, in the folder site-packages/twisted there is no conch folder.
> 
> 
> I tried to build twisted from source and conch doesn’t seem to build either
> 
> What can I do to solve this?
> 
> Use Python 2.7 :)
> 
> Conch.ssh was not ported to Python 3

Yet ;)

- Amber
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20151230/ce710321/attachment.sig>

