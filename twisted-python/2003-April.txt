From jk at supplysolution.com  Tue Apr  1 12:21:37 2003
From: jk at supplysolution.com (Joshua Kifer)
Date: Tue, 1 Apr 2003 09:21:37 -0800
Subject: [Twisted-Python] PB+SSH
Message-ID: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>

Can anyone indicate an example or doc on combining these two pieces?

-----------------------------
Democracy is two wolves and a lamb voting on what to have for lunch. 
Liberty is a well-armed lamb contesting the vote.

-- Benjamin Franklin




From dalke at dalkescientific.com  Tue Apr  1 07:00:53 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Tue, 1 Apr 2003 07:00:53 -0500
Subject: [Twisted-Python] supressess warnings
Message-ID: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>

I'm just starting to learn how to use Twisted.  My first project
is to write a simple XML-RPC server.  I started with the demo,
and that worked fine.

I then added an import statement for the module I need.

from openeye.oechem import *

Now, this uses a shared library extension which was built
for Python 2.2, and I'm running a CVS version of Python 2.3,
so I usually get

/usr/local/lib/python2.3/site-packages/openeye/oechem.py:5:  
RuntimeWarning: Python C API version mismatch for module _oechem: This  
Python has API version 1012, module _oechem has version 1011.
   import _oechem

However, that didn't happen when I started my my simple
server.  I got no warning message.  I started to worry that my
file system wasn't properly saving files!  I played around with
the imports, and moved that import to be above the twisted
ones, and it started reporting the warning.

A bit of searching later and I found
   twisted/python/log.py
which redefines (!) warnings.showwarning to dump the data to a
logfile, which is initialized to a NullFile(), which does nothing.

So the twisted code is throwing some (potentially useful) diagnostics.

Doing a search I found the commit statement
http://twistedmatrix.com/pipermail/twisted-commits/2002-October/ 
003975.html
 > 2) implemented a custom warning handler; now warnings look sexy.
 >   (the hackish overriding of warnings.showwarning is the recommended  
way to
 >   do so, according to the library reference.)

I'll grant that's what the docs say.  However, why is the logfile for
showwarnings initialized to NullFile, and not to sys.stderr?

For that matter, I think it's better to delay replacement until  
startLogging
is called.

Hmm, and why is os.linesep used in the logging?  The log
file should have been opened in text mode, in which case "\n"
will get translated to the proper os-dependent form.


I started to change the code, so I could submit a patch.  I got the
code out of CVS and am reading the documentation at
   http://twistedmatrix.com/documents/howto/coding-standard
It says that the main test suite builder is in 'twisted.test.test_all'

That module doesn't exist (can't import it) nor is the appropriate
file present anywhere.  And the hyperlink from that page yields
   "No Such Resource
    File not found."

It then says
   Acceptance tests are all automated by the bin/accepttests
but that program is in admin/accepttests

I ran that for my Mac OS X machine, with 'open' as the
WEBBROWSER setting (where does the '-b' option go, since
open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
/bin/true
as my IRCCLIENT, since I wouldn't know what to do with one
even assuming I had one.

Anyway, after a while it gave this error

/------
|####
|#### Starting mail test.
|#### Output should be one email (postmaster at foo.bar)
|#### and one bounce (postmaster at no.such.domain).
|####
\------
Running Command: './admin/../bin/mktap mail --domain foo.bar=dump  
--user postmaster=postmaster  --pop 18110'
option --pop not a unique prefix
Usage: mktap mail [options]
Options:
   -p, --pop3=                 Port to start the POP3 server on (0 to  
disable).
                               [default: 8110]
   -S, --pop3s=                Port to start the POP3-over-SSL server on  
(0 to
                               disable). [default: 0]
   -s, --smtp=                 Port to start the SMTP server on (0 to  
disable).
                               [default: 8025]
   -r, --relay=                relay mail we do not know how to handle  
to this
                               IP, using the given path as a queue  
directory
   -c, --certificate=          Certificate file to use for SSL  
connections
   -d, --domain=               generate an SMTP/POP3 virtual domain  
which saves
                               to "path"
       --version
       --help                  Display this help and exit.
   -u, --user=                 add a user/password to the last specified  
domains
       --bounce-to-postmaster  undelivered mails are sent to the  
postmaster

This creates a mail.tap file that can be used by twistd.
Running Command: './admin/../bin/twistd -f mail.tap'

Failed to load application: [Errno 2] No such file or directory:  
'mail.tap'
Traceback (most recent call last):
   File "./admin/accepttests", line 271, in ?
     runAllTests()
   File "./admin/accepttests", line 247, in runAllTests
     runMailTest()
   File "./admin/accepttests", line 204, in runMailTest
     s = smtplib.SMTP('127.0.0.1', 18026)
   File "/usr/local/lib/python2.3/smtplib.py", line 240, in __init__
     (code, msg) = self.connect(host, port)
   File "/usr/local/lib/python2.3/smtplib.py", line 302, in connect
     raise socket.error, msg
socket.error: (61, 'Connection refused')

Hmmm.... Is 'admin/runtests' the correct script to run?  I ran that,
and got the following output

======================================================================== 
=======
FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 193, in testReadLimit
     self.assertEquals(tServer.readThisSecond, 0)
  FailTest: 20 != 0
======================================================================== 
=======
FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 152, in testWriteLimit
     self.assert_(abs(p.wrappedProtocol.paused - now - 1.0) < 0.1)
  FailTest
======================================================================== 
=======
FAILURE: testPackages (twisted.test.test_setup.CheckingPackagesTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_setup.py", line  
44, in testPackages
     self.failUnlessEqual(l, [])
  FailTest: ['twisted.bugs', 'twisted.coils', 'twisted.eco',  
'twisted.enterprise.userRequests', 'twisted.forum', 'twisted.inetd',  
'twisted.issues', 'twisted.issues.ui', 'twisted.issues.ui.templates',  
'twisted.lumberjack', 'twisted.metrics', 'twisted.pretzel',  
'twisted.protocols.ldap', 'twisted.reality', 'twisted.reality.ui',  
'twisted.secsh', 'twisted.test.interactive', 'twisted.web.blog',  
'twisted.words.ui', 'twisted.words.ui.gateways'] != []
======================================================================== 
=======
FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_tcp.py", line  
171, in testFailing
     self.assert_(time.time() - start < 0.1)
  FailTest
======================================================================== 
=======
ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_xml.py", line  
326, in testUnicodeTolerance
     ud = microdom.parseString(s.encode('UTF-16'))
    File "./twisted/web/microdom.py", line 644, in parseString
    File "./twisted/web/microdom.py", line 609, in parse
    File "./twisted/protocols/sux.py", line 155, in dataReceived
    File "./twisted/protocols/sux.py", line 176, in do_begin
    File "./twisted/protocols/sux.py", line 108, in _parseError
  ParseError: <xmlfile />:1:1: First char of document ['\xfe'] wasn't <
======================================================================== 
=======
SKIPPED: test_modules (twisted.test.test_doc.DocCoverage)
------------------------------------------------------------------------ 
-------
Remove this line when you feel like writing docstrings.
------------------------------------------------------------------------ 
-------
Ran 494 tests in 227.667s

FAILED (failures=4, errors=1, skips=1)

Could not import twisted.test.test_conch: No module named Crypto.Cipher





So I tried to rewrite the code given that it looks like the self-tests
run reasonably well, but then ran into complications with this bit of  
code

# Make sure we have some basic logging setup.  This only works in  
cpython.
try:
     logOwner
except NameError:
     logOwner = LogOwner()

     ...

# Prevent logfile from being erased on reload.  This only works in  
cpython.
try:
     logfile
except NameError:
     logfile = NullFile()
     logerr = sys.stderr


Okay, so we've got some code duplication here, and comment
skew.  I've fixed that up, and tidied up a few other bits of the code.
And for the life of me I can't figure out why the log file should
default (when no logging is enabled) to the NullFile rather than
sys.stderr -- if you really want the NullFile, just pass it in.  So
I switched it to use sys.stderr.

I then reran the 'admin/runtests' script and got ... some warnings
and comments which were being supressed.

/Users/dalke/cvses/Twisted/twisted/test/test_delay.py:24:  
DeprecationWarning: twisted.python.delay is deprecated. Please use  
reactor methods.
   from twisted.python import delay
/Users/dalke/cvses/Twisted/twisted/protocols/dns.py:46: RuntimeWarning:  
PyCrypto not available - proceeding with non-cryptographically secure  
random source
Enabling Multithreading.
Resolver added ('64.105.156.138', 53) to server list
Resolver added ('64.105.132.250', 53) to server list

Also, I removed those os.linesep references, and the os module,
and the needless string module.  And turned 'file_protocol' into
'_file_protocol' since it's for internal use only.

Why's the Log pickleable? What happens if a cStringIO is passed
in instead of a file?  Or an outgoing network socket?  Or a
os.popen("lp")?

It looks like Log.synchronized is old code that can be removed.  Yes?

Why does doc/examples/cursesclient.py set log.logfile directly?
Shouldn't it call log.startLogging(log.NullFile()) ?  It's the only  
other
piece of code which references log.NullFile.

Is 'discardLogs' the true inverse of startLogging?  If so, it
should add something to restore sys.stdout/sys.stderr if
startLogging asked them to be changed.

If not, where's the 'stopLogging' function?  And 'discard'
means to ignore logging?  Or should it throw away the
log files?  The terminology is confusing.

Anyway, the diff -u is attached for you all to review and
correct. 
  
-------------- next part --------------
A non-text attachment was scrubbed...
Name: log.py.diff
Type: application/octet-stream
Size: 4148 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030401/a162bb55/attachment.obj 
-------------- next part --------------


Oh, and with my changes, I now see the expected warning
when I start up, and I see two twisted messages ...

[Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% python cansmi_rpc.py
/usr/local/lib/python2.3/site-packages/openeye/oechem.py:5: 
RuntimeWarning: Python C API version mismatch for module _oechem: This 
Python has API version 1012, module _oechem has version 1011.
   import _oechem
twisted.web.server.Site starting on 8080
Starting factory <twisted.web.server.Site instance at 0x640850>

which tells me that those two messages ("Site starting" and "Starting
factory") were being sent to never-never-land the whole time.  Perhaps
the latter shouldn't be present?

					Andrew
					dalke at dalkescientific.com

From radix at twistedmatrix.com  Tue Apr  1 13:29:12 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 13:29:12 -0500
Subject: [Twisted-Python] PB+SSH
In-Reply-To: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>
References: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>
Message-ID: <20030401182912.GB29239@radii>

On Tue, Apr 01, 2003 at 09:21:37AM -0800, Joshua Kifer wrote:
> Can anyone indicate an example or doc on combining these two pieces?

Do you mean PB+SSL?

If so, the support for it (pb.connectSSL, or whatever the function is
called) is broken, IIRC. Sorry. I might have a reason to fix it soon,
however.

If you *do* mean PB+SSH, I have no idea what you mean.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From twisted at itamarst.org  Tue Apr  1 13:48:04 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 13:48:04 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401134804.1aeb646e.twisted@itamarst.org>

On Tue, 1 Apr 2003 07:00:53 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> A bit of searching later and I found
>    twisted/python/log.py
> which redefines (!) warnings.showwarning to dump the data to a
> logfile, which is initialized to a NullFile(), which does nothing.
> 
> So the twisted code is throwing some (potentially useful) diagnostics.

Fixed in CVS - warnings will be logged to stderr if no log file was
specified.

> I started to change the code, so I could submit a patch.  I got the
> code out of CVS and am reading the documentation at
>    http://twistedmatrix.com/documents/howto/coding-standard
> It says that the main test suite builder is in 'twisted.test.test_all'

Fixed doc in CVS.

> That module doesn't exist (can't import it) nor is the appropriate
> file present anywhere.  And the hyperlink from that page yields
>    "No Such Resource
>     File not found."
> 
> It then says
>    Acceptance tests are all automated by the bin/accepttests
> but that program is in admin/accepttests

Fixed in CVS.

> I ran that for my Mac OS X machine, with 'open' as the
> WEBBROWSER setting (where does the '-b' option go, since
> open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
> /bin/true
> as my IRCCLIENT, since I wouldn't know what to do with one
> even assuming I had one.

Running admintests correctly is hard - I've never gotten the web distrib
tests to pass. In general these tests are more for the release manager
than for end users.

> So I tried to rewrite the code given that it looks like the self-tests
> run reasonably well, but then ran into complications with this bit of 
> 
> code

> It looks like Log.synchronized is old code that can be removed.  Yes?

Probably not.

Basically, Twisted logging starts out with all log.msg() messages being
discarded, and exceptions, errors and in CVS warnings, logged to stderr.
startLogging() will set it so all messages get logged to the specified
file-like object.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jk at supplysolution.com  Tue Apr  1 14:11:29 2003
From: jk at supplysolution.com (Joshua Kifer)
Date: Tue, 1 Apr 2003 11:11:29 -0800
Subject: [Twisted-Python] PB+SSH
In-Reply-To: <20030401182912.GB29239@radii>
Message-ID: <BE32EA84-6475-11D7-AB83-00039398AC98@supplysolution.com>

Sorry SSL yes.  I'll take a look thanks.

On Tuesday, April 1, 2003, at 10:29 AM, Christopher Armstrong wrote:

> On Tue, Apr 01, 2003 at 09:21:37AM -0800, Joshua Kifer wrote:
>> Can anyone indicate an example or doc on combining these two pieces?
>
> Do you mean PB+SSL?
>
> If so, the support for it (pb.connectSSL, or whatever the function is
> called) is broken, IIRC. Sorry. I might have a reason to fix it soon,
> however.
>
> If you *do* mean PB+SSH, I have no idea what you mean.
>
> -- 
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+     http://twistedmatrix.com/users/radix.twistd/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--------------------------
Never do anything against conscience even if the state demands it. -- 
Albert Einstein




From radix at twistedmatrix.com  Tue Apr  1 14:11:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 14:11:18 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401191118.GC29239@radii>

On Tue, Apr 01, 2003 at 07:00:53AM -0500, Andrew Dalke wrote:

> A bit of searching later and I found
>   twisted/python/log.py
> which redefines (!) warnings.showwarning to dump the data to a
> logfile, which is initialized to a NullFile(), which does nothing.

Yeah, replacing showwarnings is the idiomatic way to override the
display of warnings. The bit that initializes the default logfile to
NullFile is something moshez and glyph wanted, and, for the record,
something I'm against. (sorry glyph :-)

> I started to change the code, so I could submit a patch.  I got the
> code out of CVS and am reading the documentation at
>   http://twistedmatrix.com/documents/howto/coding-standard
> It says that the main test suite builder is in 'twisted.test.test_all'
> 
> That module doesn't exist (can't import it) nor is the appropriate
> file present anywhere.  And the hyperlink from that page yields
>   "No Such Resource
>    File not found."

Oh, that's a bit out of date. Just run `./bin/trial -p twisted.test'
if you want to run all of the Twisted tests. I'll update the doc.

> It then says
>   Acceptance tests are all automated by the bin/accepttests
> but that program is in admin/accepttests
> 
> I ran that for my Mac OS X machine, with 'open' as the
> WEBBROWSER setting (where does the '-b' option go, since
> open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
> /bin/true
> as my IRCCLIENT, since I wouldn't know what to do with one
> even assuming I had one.

Note that all developers aren't really expected to run these, it's
super-dependant on your environment and is finicky about how exactly
you start the script. I'll add this to the doc, as well.


...

Oh, it seems itamar just fixed those issues with the coding standard.

> Anyway, after a while it gave this error

> Running Command: './admin/../bin/mktap mail --domain foo.bar=dump  
> --user postmaster=postmaster  --pop 18110'
> option --pop not a unique prefix

I have no idea what this error means.

> Hmmm.... Is 'admin/runtests' the correct script to run?  I ran that,
> and got the following output

Yeah, `admin/runtests' just runs `bin/trial -p twisted.test', for
convenience.

> ======================================================================== 
> FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> FAILURE: testPackages (twisted.test.test_setup.CheckingPackagesTestCase)
> ------------------------------------------------------------------------ 

This happened because you didn't use the `-P' option to cvs
update/checkout. Please put this in your ~/.cvsrc:

"""
update -d -P
checkout -P
"""

> ======================================================================== 
> FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
> ------------------------------------------------------------------------ 


I have no idea what the rest of the problems were about, though.

> And for the life of me I can't figure out why the log file should
> default (when no logging is enabled) to the NullFile rather than
> sys.stderr -- if you really want the NullFile, just pass it in.  So
> I switched it to use sys.stderr.
 
I wish this could be accepted, but unless glyph changes his mind, it
probably won't. The usual response is to use twistd, but twistd isn't
appropriate in all use-cases (it is in yours, however). The *reason*,
IIRC, was that "you shouldn't spam unwanted stuff to STDIO", which I
think is stupid. Application developers could notice spam to stdio,
and, if they don't like it, startLogging to NullFile. (I've heard a
lot more complaints about "Why don't I see any output!?" than "Why
does Twisted write stuff to my stdio?")

</rant>

Sorry, I guess I'll stop beating a dead horse. :)

> Why's the Log pickleable? What happens if a cStringIO is passed
> in instead of a file?  Or an outgoing network socket?  Or a
> os.popen("lp")?

Well, it should probably be pickleable only when it _can_ be. :) i.e.,
__getstate__ could test for a `.name' attribute on the file object, or
something. Handling stuff like StringIO might be a bit trickier
without hardcoding an `isinstance(self.file, StringIO)' into
it... Perhaps it could `try: cPickle.dumps(self.file)' to test if the
file's pickleable in the case where it's not a named file ;-)

> It looks like Log.synchronized is old code that can be removed.  Yes?

No, I'm pretty sure this is so threaded code that writes to the log
doesn't break.

> Why does doc/examples/cursesclient.py set log.logfile directly?
> Shouldn't it call log.startLogging(log.NullFile()) ?  It's the only  
> other
> piece of code which references log.NullFile.

Probably.

> Is 'discardLogs' the true inverse of startLogging?  If so, it
> should add something to restore sys.stdout/sys.stderr if
> startLogging asked them to be changed.
> 
> If not, where's the 'stopLogging' function?  And 'discard'
> means to ignore logging?  Or should it throw away the
> log files?  The terminology is confusing.

Well, if you want to switch your logging to something else
(sys.stdout/stderr), then pass that something else to startLogging,
probably.


> Anyway, the diff -u is attached for you all to review and
> correct. 

> Oh, and with my changes, I now see the expected warning
> when I start up, and I see two twisted messages ...
> 
> [Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% python cansmi_rpc.py
> /usr/local/lib/python2.3/site-packages/openeye/oechem.py:5: 
> RuntimeWarning: Python C API version mismatch for module _oechem: This 
> Python has API version 1012, module _oechem has version 1011.
>   import _oechem
> twisted.web.server.Site starting on 8080
> Starting factory <twisted.web.server.Site instance at 0x640850>
> 
> which tells me that those two messages ("Site starting" and "Starting
> factory") were being sent to never-never-land the whole time.  Perhaps
> the latter shouldn't be present?

Well, no, usually people use twistd. Which you should, if you're
writing a server. It handles logging, daemonization, and a whole slew
of other things for you, and, contrary to what most people think,
doesn't require the use of .taps (see the `-y' parameter).


Anyway, thanks for the in-depth message, it was helpful.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr  1 14:17:33 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 14:17:33 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191118.GC29239@radii>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com> <20030401191118.GC29239@radii>
Message-ID: <20030401191733.GD29239@radii>

On Tue, Apr 01, 2003 at 02:11:18PM -0500, Christopher Armstrong wrote:
> I wish this could be accepted, but unless glyph changes his mind, it
> probably won't. The usual response is to use twistd, but twistd isn't
> appropriate in all use-cases (it is in yours, however). The *reason*,
> IIRC, was that "you shouldn't spam unwanted stuff to STDIO", which I
> think is stupid. Application developers could notice spam to stdio,
> and, if they don't like it, startLogging to NullFile. (I've heard a
> lot more complaints about "Why don't I see any output!?" than "Why
> does Twisted write stuff to my stdio?")
> 
> </rant>
> 
> Sorry, I guess I'll stop beating a dead horse. :)

Ok, so apparently I had forgotten that glyph *did* agree to log errors
and warnings to STDIO, but when he implemented the change it didn't
work. Sorry, glyph :) Itamar just checked in a fix so stuff gets
logged to stderr. Hooray!


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Tue Apr  1 16:01:28 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Apr 2003 16:01:28 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191118.GC29239@radii>
Message-ID: <1B3A09C9-6485-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 1, 2003, at 02:11 PM, Christopher Armstrong wrote:

> On Tue, Apr 01, 2003 at 07:00:53AM -0500, Andrew Dalke wrote:
>
>> A bit of searching later and I found
>>   twisted/python/log.py
>> which redefines (!) warnings.showwarning to dump the data to a
>> logfile, which is initialized to a NullFile(), which does nothing.
>
> Yeah, replacing showwarnings is the idiomatic way to override the
> display of warnings. The bit that initializes the default logfile to
> NullFile is something moshez and glyph wanted, and, for the record,
> something I'm against. (sorry glyph :-)

The reason that moshez and I have it written this way is simple: we 
don't want library code generating spurious messages that your code may 
not want printed.  However, I think that you're correct in criticizing 
it for throwing away warnings and tracebacks.  Errors, even in library 
code, ought to be presented the same way they're normally presented.

>> And for the life of me I can't figure out why the log file should
>> default (when no logging is enabled) to the NullFile rather than
>> sys.stderr -- if you really want the NullFile, just pass it in.  So
>> I switched it to use sys.stderr.
>
> I wish this could be accepted, but unless glyph changes his mind, it
> probably won't.

As long as we're talking about sys.std*err*, and not std*out*, I think 
this is acceptable.  I'd like to hear if moshez's has any objections 
too, but barring that, let's do it immediately.

> The usual response is to use twistd, but twistd isn't
> appropriate in all use-cases (it is in yours, however).

This should be a FAQ.

	Q.  Is using 'twistd' always appropriate?

	A.  Not always, but it is in your case.

> The *reason*, IIRC, was that "you shouldn't spam unwanted stuff to 
> STDIO", which I think is stupid. Application developers could notice 
> spam to stdio, and, if they don't like it, startLogging to NullFile. 
> (I've heard a lot more complaints about "Why don't I see any output!?" 
> than "Why does Twisted write stuff to my stdio?")

Oh, I heard a lot of complaints about it writing spurious messages to 
stdio before this change was made.  Different people are unhappy, but 
people are unhappy either way :-)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+if4svVGR4uSOE2wRArcOAKCKs4sHno57LtUWgB+U2C1Oc1X6qgCfbg5N
qHg2Z9ZDNkGHddmnKvWEFBw=
=FtOD
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Tue Apr  1 16:02:14 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Apr 2003 16:02:14 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191733.GD29239@radii>
Message-ID: <36ED575D-6485-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 1, 2003, at 02:17 PM, Christopher Armstrong wrote:

> Ok, so apparently I had forgotten that glyph *did* agree to log errors
> and warnings to STDIO, but when he implemented the change it didn't
> work. Sorry, glyph :) Itamar just checked in a fix so stuff gets
> logged to stderr. Hooray!

Thank you, Itamar!  Hooray!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD4DBQE+if5XvVGR4uSOE2wRAk9NAJ9ORSTci/M4Eio4zN7TuoDOG8MdVwCWLgfa
SSRjC5KXmJj1Ei9jd6hBSg==
=xHFS
-----END PGP SIGNATURE-----




From dalke at dalkescientific.com  Tue Apr  1 16:48:01 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Tue, 1 Apr 2003 16:48:01 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
 > Fixed in CVS - warnings will be logged to stderr if no log file
 > was specified.

Mmm, okay, I see the patch you did in CVS.

One thing I don't like about the log system is that it goes
into place on import, rather than after some explicit request
to actually use the log.  It isn't obvious anywhere that that
import will make a system level change.
   - what if I've changed warnings.showwarning in my own
        code (or in some other 3rd party package).  Where's the
        documentation which states that there will be a problem?

   - It's pervasive.  That is, if I import twisted.lore (perhaps
       because I want it to use it for my own documentation
       system) it's still the case that warnings.showwarning
       gets replaced.  There should be no reason for that.

Are there any other system-level functions or settings which
get tweaked by Twisted?

 > > It looks like Log.synchronized is old code that can be removed.   
Yes?

 > Probably not

Ahh, I see.  It's emulating the Java keyword.  Hmm, I probably
would have had a Log implementation which changed depending
on of this was threaded or not, and have threaded calls forward
the write/writeline via a Queue.

There are only 4 places which use that, outside of some of the
test code.  Is it really that useful given how non-obvious it is?

Also, I see that the other places which use a class with the
synchronized attribute (like web/static.py) also call  
threadable.synchronize
on the class, as in

python/logfile.py:threadable.synchronize(LogFile)
test/test_threadpool.py:threadable.synchronize(Counter)
test/test_threads.py:threadable.synchronize(Counter)
web/static.py:threadable.synchronize(FileTransfer)

Notice that log.py's Log class, which has a 'synchronized'
attribute, is not so initialized.  This suggests there's either a bug
(this class needs to be synchronized) or that that attribute is
unneeded.

Christopher Armstrong:
 > The bit that initializes the default logfile to NullFile is
 > something moshez and glyph wanted

Actually, I don't care where the default logfile goes, I just
care where my system warnings go.  But as you pointed out
in a later email, it's now sent to 'STDIO'.

I still don't like that it goes into effect without me doing
anything other than an import.

 > > Running Command: './admin/../bin/mktap mail --domain foo.bar=dump
 > > --user postmaster=postmaster  --pop 18110'
 > > option --pop not a unique prefix

 > I have no idea what this error means.

Looking only at the error message, it means that:
   - the option parsing code does automatic prefix expansion, so
        that if the option is '--pop3' and the argument is '--pop' and no
        other option starts with '--pop' then it's elided to '--pop3'.   
This
        was what DEC machines did for VMS commands (as I recall)
        and it was annoying because if a new option is added (like
        '--popcorn') then scripts which assumed that '--pop' would
        always be unique, broke.

   - and a new option was added which started with the '--pop'
        prefix, breaking the code.

   - and no one has run those tests in a while, probably not since
      10-Feb-03 when moshez added the following option.

        ["pop3s", "S", 0, "Port to start the POP3-over-SSL server on (0  
to disable)."],


 > This happened because you didn't use the `-P' option to cvs
 > update/checkout. Please put this in your ~/.cvsrc:

Ummmm, okay, done, and those errors go away.  The page at
   http://twistedmatrix.com/developers/cvs
should be updated to mention this.

 > I have no idea what the rest of the problems were about, though.

Here's the full set of tracebacks

======================================================================== 
=======
FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 193, in testReadLimit
     self.assertEquals(tServer.readThisSecond, 0)
  FailTest: 20 != 0

No clue.  A timing issue?

======================================================================== 
=======
FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 152, in testWriteLimit
     self.assert_(abs(p.wrappedProtocol.paused - now - 1.0) < 0.1)
  FailTest

Related to the previous case?

======================================================================== 
=======
FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_tcp.py", line  
171, in testFailing
     self.assert_(time.time() - start < 0.1)
  FailTest

Looks like it takes more than 0.1 seconds for me to fail that test.
On this box (OS X), a connect looks like it starts off with an IPv6  
request
then tries 127.0.0.1 then tries ... an IP address I got a few weeks ago.
Strange.  That's on another network, which is firewalled from here.
So that's probably where the delay comes in.

[Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% time telnet localhost 69
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
telnet: connect to address 127.0.0.1: Connection refused
Trying 207.225.60.130...
telnet: connect to address 207.225.60.130: Connection refused
telnet: Unable to connect to remote host
0.000u 0.020s 0:00.46 4.3%      0+0k 0+0io 0pf+0w


======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_process.py", line  
140, in testEcho
     self.assertEquals(len(p.buffer), len(p.s * 10))
  AttributeError: EchoProtocol instance has no attribute 'buffer'

Trying to track that down, I see that
   twisted/internet/interfaces.py
has mention of
           @see: C{twisted.protocols.protocol.ProcessProtocol}
but twisted/protocols/protocol.py says
"""Deprecated - use twisted.internet.protocol instead.

Anyway, the only reason I can see this error happened is if
EchoProtocol's connectionMade wasn't called.  I simply
don't understand the code well enough to debug it right now.

======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback! exceptions.OSError, [Errno 35] Resource temporarily  
unavailable
./twisted/internet/process.py:281:__init__
./twisted/internet/protocol.py:290:makeConnection
/Users/dalke/cvses/Twisted/twisted/test/ 
test_process.py:82:connectionMade
./twisted/internet/process.py:358:write
./twisted/internet/process.py:126:write
./twisted/internet/abstract.py:145:write
./twisted/internet/process.py:111:writeSomeData
======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback! exceptions.AttributeError, EchoProtocol instance has no  
attribute 'buffer'
./twisted/internet/default.py:467:doSelect
./twisted/internet/process.py:345:doRead
./twisted/internet/fdesc.py:58:readFromFD
/Users/dalke/cvses/Twisted/twisted/test/test_process.py:86:outReceived
======================================================================== 
=======
ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_xml.py", line  
326, in testUnicodeTolerance
     ud = microdom.parseString(s.encode('UTF-16'))
    File "/Users/dalke/cvses/Twisted/twisted/web/microdom.py", line 648,  
in parseString
     return parse(StringIO(st), *args, **kw)
    File "/Users/dalke/cvses/Twisted/twisted/web/microdom.py", line 613,  
in parse
     mdp.dataReceived(readable.getvalue())
    File "./twisted/protocols/sux.py", line 155, in dataReceived
    File "./twisted/protocols/sux.py", line 176, in do_begin
    File "./twisted/protocols/sux.py", line 108, in _parseError
  ParseError: <xmlfile />:1:1: First char of document ['\xfe'] wasn't <

\xfe is the byte order marker.  This test started with

s = "<foo><bar><baz /></bar></foo>"
then encoded it as UTF-16, which puts the BOM at the front.
So of course the string doesn't start with a '<'.

 > The *reason*, IIRC, was that "you shouldn't spam unwanted stuff
 > to STDIO"

Again, I realize this has been changed.  Just wanted to note
that system warnings about API differences are wanted, as well
as warnings about deprecations, etc.

 > > Why's the Log pickleable? What happens if a cStringIO is passed
 > > in instead of a file?  Or an outgoing network socket?  Or a
 > > os.popen("lp")?

 > Well, it should probably be pickleable only when it _can_ be. :) i.e.,

That didn't answer my question of why it needs to be pickled.
I suppose it's part of the App, which saves complete state via
a pickle?  Err, it can't, because that's a module variable.

In any case, the cleaner way to fix it is to have a specialized
replacement called instead of the native open call, and
have it store the arguments so that the unpickling gets the
correct calls, and allow backwards compatibility with
   if isinstance(logfile, file):
     logfile = PickleableFile(logfile)

 > Well, no, usually people use twistd. Which you should, if you're
 > writing a server.

I'm just working my way through the example, and it doesn't
use twistd, so I didn't.

As mentioned, I don't like how system settings are changed
on an import, much less without documentation which says
this will happen.

If everything server related should be done in the context
of twistd, then that warnings.showwarning replacement
should only be done when twistd is used, which is why
the patch I sent only made the switch when startLogging
was called.

The solution I see now, which is that showwarnings calls
the errlog instead of the msg log, still isn't the right
behaviour, IMO, if only because you are changing the
format of the error messages.  At the very least you should
call warnings.formatwarning instead of building your own
warning message.

Oh, and the code should be that if file is not None, to
use the file handle passed in to showwarnings, and not
the error log, that is, replace twisted/python/log.py from

def showwarning(message, category, filename, lineno, file=None):
     err('''\
WARNING: %s::
%s
file: %s; line: %s
''' % (category, indent(message), filename, lineno))

to

def showwarning(message, category, filename, lineno, file=None):
     m = warnings.formatwarning(message, category, filename, lineno)
     if file is None:
       err(m)
     else:
       file.write(m)

Finally, I noticed that other part of my patch were not accepted.
For example, the use of os.linesep is incorrect.  The log file is
opened in text mode, so "\n" will be converted to the appropriate
byte representation for the given platform.  In other words,

         logerr.write(str(stuff)+os.linesep)
should be
         logerr.write(str(stuff)+"\n")

I also did some things to clean up the code, like getting
rid of unneeded module imports (like string) and replacing

import cStringIO
  ...
StringIO = cStringIO
del cStringIO

with

import cStringIO as StringIO

I noticed none of these were accepted.

What should I do to make these sorts of changes more acceptable?
After all, the point of a good unit test suite is to make it easy for
people to refactor and clean up existing code.  All the tests passed
identically before and after my changes.

I could, for instance, have split up the patch into several parts.
However, part of what I did was to replace the warnings.showwarning
code only once, which required a test against a reload (as is
done in two other parts for the code) so I moved those into a
single change and fixed the comments for why it was done.

					Andrew
					dalke at dalkescientific.com




From twisted at itamarst.org  Tue Apr  1 22:45:23 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 22:45:23 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
	<9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401224523.38e0a2f2.twisted@itamarst.org>

On Tue, 1 Apr 2003 16:48:01 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> to actually use the log.  It isn't obvious anywhere that that
> import will make a system level change.
>    - what if I've changed warnings.showwarning in my own
>         code (or in some other 3rd party package).  Where's the
>         documentation which states that there will be a problem?
> 
>    - It's pervasive.  That is, if I import twisted.lore (perhaps
>        because I want it to use it for my own documentation
>        system) it's still the case that warnings.showwarning
>        gets replaced.  There should be no reason for that.

I agree that this is bad. If you complain enough maybe glyph will listen
to reason.

> Are there any other system-level functions or settings which
> get tweaked by Twisted?

Not that I can recall.

> There are only 4 places which use that, outside of some of the
> test code.  Is it really that useful given how non-obvious it is?

No. We need to have thread-safe logging.

> Notice that log.py's Log class, which has a 'synchronized'
> attribute, is not so initialized.  This suggests there's either a bug
> (this class needs to be synchronized) or that that attribute is
> unneeded.

Indeed.

> I still don't like that it goes into effect without me doing
> anything other than an import.

Yes. Its glyph's fault, again.

> Looking only at the error message, it means that:
>    - the option parsing code does automatic prefix expansion, so
>         that if the option is '--pop3' and the argument is '--pop' and
>         no other option starts with '--pop' then it's elided to
>         '--pop3'.   
...
>    - and no one has run those tests in a while, probably not since
>       10-Feb-03 when moshez added the following option.
> 
>         ["pop3s", "S", 0, "Port to start the POP3-over-SSL server on
>         (0  
> to disable)."],

Yes, they only get run during releases. Jean-Paul fixed the --pop issue
in CVS I think.

Some of the failed tests look like timing issues, yes.

> -------
> Traceback (most recent call last):
>     File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line 
>     
> 165, in runOneTest
>      method(testCase)
>     File "/Users/dalke/cvses/Twisted/twisted/test/test_process.py",
>     line  
> 140, in testEcho
>      self.assertEquals(len(p.buffer), len(p.s * 10))
>   AttributeError: EchoProtocol instance has no attribute 'buffer'

Gar. I wonder why this isn't showing on the Max OS X buildbot.

> Trying to track that down, I see that
>    twisted/internet/interfaces.py
> has mention of
>            @see: C{twisted.protocols.protocol.ProcessProtocol}

Typo - fixed in CVS.

Any bugs we can reproduce and are easily fixable will be fixed by next
release, e.g. the dom one.

> As mentioned, I don't like how system settings are changed
> on an import, much less without documentation which says
> this will happen.

We should have logging docs soon.

> If everything server related should be done in the context
> of twistd, then that warnings.showwarning replacement
> should only be done when twistd is used, which is why
> the patch I sent only made the switch when startLogging
> was called.

Again, I agree, bug glyph.

> The solution I see now, which is that showwarnings calls
> the errlog instead of the msg log, still isn't the right
> behaviour, IMO, if only because you are changing the
> format of the error messages.  At the very least you should
> call warnings.formatwarning instead of building your own
> warning message.

The idea was to have more informative messages. Can you put in something
comparing the two formats?


> def showwarning(message, category, filename, lineno, file=None):
>      m = warnings.formatwarning(message, category, filename, lineno)
>      if file is None:
>        err(m)
>      else:
>        file.write(m)

Done, at least partially.

> Finally, I noticed that other part of my patch were not accepted.
> For example, the use of os.linesep is incorrect.  The log file is
> opened in text mode, so "\n" will be converted to the appropriate
> byte representation for the given platform.  In other words,
> 
>          logerr.write(str(stuff)+os.linesep)
> should be
>          logerr.write(str(stuff)+"\n")
> 
> I also did some things to clean up the code, like getting
> rid of unneeded module imports (like string) and replacing

> I noticed none of these were accepted.

Not really, I just didn't get around to reading the patch. I did some of
these in CVS.

> What should I do to make these sorts of changes more acceptable?

They were not bad, it seems, we just don't have time to deal with all of
them... I have a huge queue waiting for me :(

We do appreciate your efforts.

> After all, the point of a good unit test suite is to make it easy for
> people to refactor and clean up existing code.  All the tests passed
> identically before and after my changes.

Yes, but behaviour was changed I think? Possibly in a better way, but
changing behaviour takes more mental work on our part.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Tue Apr  1 22:51:22 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 1 Apr 2003 22:51:22 -0500
Subject: [Twisted-Python] twisted.internet.interfaces.IReactorTime.callAt
Message-ID: <5ECE2030-64BE-11D7-8315-000A95686CD8@redivi.com>

I think it's useful to have a callAt function in the reactor.  Itamar 
mentioned that one of the design goals of the reactor is to have a 
minimal interface.  However, IMHO it should be added to IReactor due to 
the utility (log rotation, scheduled events, etc.) of such a 
convenience function and the fact it takes a newbie a lot longer to 
find something hidden away in a utils package (for example, today, 
neither Itamar nor I knew that there was a function in t.i.utils to 
start a process and return a Deferred with the stdout of that 
process!).  The implementation is very simple, it looks like this:

     def callAt(self, when, f, *args, **kw):
         """See twisted.internet.interfaces.IReactorTime.callAt.
         """
         return self.callLater(max(0.0, when - time()), f, *args, **kw)

     def callAt(self, when, callable, *args, **kw):
         """Call a function at a specified float time

         @type when:  C{float}
         @param when: The approximate unix time (seconds since the 
Epoch) to
                      call the callable.  It will be called on or after 
the specified time;
                      immediately if the current or a past time is given.

         @param callable: the callable object to call later.

         @param args: the arguments to call it with.

         @param kw: they keyword arguments to call it with.

         @returns: An L{IDelayedCall} object that can be used to cancel
                   the scheduled call, by calling its C{cancel()} method.
                   It also may be rescheduled by calling its C{delay()}
                   or C{reset()} methods.
         """

-bob




From itamar at itamarst.org  Tue Apr  1 22:50:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 22:50:29 -0500
Subject: [Twisted-Python] A general note on logging
Message-ID: <20030401225029.5b32d55e.itamar@itamarst.org>

twisted.python.log is old and crufty. If anyone feels like updating it
(requirements include different channels that can be logged to different
files), feel free. If you do discuss it on the list first, to make sure
everyone has voiced their requirements.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Wed Apr  2 01:25:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 01:25:20 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030401224523.38e0a2f2.twisted@itamarst.org>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com> <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com> <20030401224523.38e0a2f2.twisted@itamarst.org>
Message-ID: <20030402062520.GC14038@radii>

On Tue, Apr 01, 2003 at 10:45:23PM -0500, Itamar Shtull-Trauring wrote:
> On Tue, 1 Apr 2003 16:48:01 -0500
> Andrew Dalke <dalke at dalkescientific.com> wrote:
> 
> > to actually use the log.  It isn't obvious anywhere that that
> > import will make a system level change.
> >    - what if I've changed warnings.showwarning in my own
> >         code (or in some other 3rd party package).  Where's the
> >         documentation which states that there will be a problem?
> > 
> >    - It's pervasive.  That is, if I import twisted.lore (perhaps
> >        because I want it to use it for my own documentation
> >        system) it's still the case that warnings.showwarning
> >        gets replaced.  There should be no reason for that.
> 
> I agree that this is bad. If you complain enough maybe glyph will listen
> to reason.

Well, I was the one who made this change, and there's no particular
philosophical reasons behind it. I agree moving it to twistd would be
good.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From smaniero at sfera.net  Wed Apr  2 03:28:08 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed,  2 Apr 2003 10:28:08 +0200
Subject: [Twisted-Python] FTP Server
Message-ID: <1049272088.3e8a9f186d8df@sferamail.sfera.net>

I'm a new developer in twisted. I want test twisted writing an ftp server.

Can anyone indicate an example or doc for developing ftp server? In twisted
distribution I didn't find it.

Thanks




From fog at initd.org  Wed Apr  2 03:53:30 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 02 Apr 2003 10:53:30 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <1049273610.974.32.camel@momo.initd.org>

Il mer, 2003-04-02 alle 10:28, Stefano Maniero ha scritto:
> I'm a new developer in twisted. I want test twisted writing an ftp server.
> 
> Can anyone indicate an example or doc for developing ftp server? In twisted
> distribution I didn't find it.

mm.. because twisted already has an ftp server? see module

	twisted.coil.plugins.ftp

(just guessing from the API, never used coil myself.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                           Don't dream it. Be it. -- Dr. Frank'n'further
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030402/7a5e3ba7/attachment.pgp 

From smaniero at sfera.net  Wed Apr  2 04:24:54 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed,  2 Apr 2003 11:24:54 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049273610.974.32.camel@momo.initd.org>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <1049273610.974.32.camel@momo.initd.org>
Message-ID: <1049275494.3e8aac66ef923@sferamail.sfera.net>

Yes, there is an ftp server.

In API docs:

....
Package twisted :: Package protocols :: Module ftp :: Class FTP

An FTP server.
....

...
twisted.tap.ftp

I am the support module for making a ftp server with mktap.
....

....
twisted.coil.plugins.ftp

Coil plugin for FTP server.
...


but I can't find any examples, or how-to, or implementation reference.


Quoting Federico Di Gregorio <fog at initd.org>:

> Il mer, 2003-04-02 alle 10:28, Stefano Maniero ha scritto:
> > I'm a new developer in twisted. I want test twisted writing an ftp server.
> > 
> > Can anyone indicate an example or doc for developing ftp server? In
> twisted
> > distribution I didn't find it.
> 
> mm.. because twisted already has an ftp server? see module
> 
> 	twisted.coil.plugins.ftp
> 
> (just guessing from the API, never used coil myself.)
> 
> -- 
> Federico Di Gregorio
> Debian GNU/Linux Developer                                fog at debian.org
> INIT.D Developer                                           fog at initd.org
>                            Don't dream it. Be it. -- Dr. Frank'n'further
> 







From theller at python.net  Wed Apr  2 05:15:35 2003
From: theller at python.net (Thomas Heller)
Date: 02 Apr 2003 12:15:35 +0200
Subject: [Twisted-Python] Re: win32guireactor
References: <vfzmlwyn.fsf@python.net>
Message-ID: <r88lmchk.fsf@python.net>

Thomas Heller <theller at python.net> writes:

> Here's my win32guireactor code, which at least for me, works better
> than win32eventreactor in my application.

Just in case this code is used by anyone, I just fixed two bugs.

Thomas

>     def __wm_timerevent(self, hwnd, msg, wParam, lParam):
>         # This method is called if the message window receives
>         # timer events
>         user32.KillTimer(hwnd, wParam)
>         tple = self.timers[wParam]
        del self.timers[wParam]
>         tple.func(*tple.args, **tple.kw)
> 


>     def _cancelCallLater(self, tple):
>         user32.KillTimer(self.__hwnd, tple._timerid)
>         del self.timers[tple._timerid]
        try:
            del self.timers[tple._timerid]
        except KeyError:
            pass

> 




From itamar at itamarst.org  Wed Apr  2 10:12:03 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 10:12:03 -0500
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <20030402101203.33888dc2.itamar@itamarst.org>

On Wed,  2 Apr 2003 10:28:08 +0200
Stefano Maniero <smaniero at sfera.net> wrote:

> I'm a new developer in twisted. I want test twisted writing an ftp
> server.
> 
> Can anyone indicate an example or doc for developing ftp server? In
> twisted distribution I didn't find it.

twisted.protocols.ftp has code for a FTP server that serves files from
the filesystem. It's not pluggable, and needs a lot of work, but it
could be used as a basis for a cleaned up refactored server.

Or, you could skip FTP (it's a really sucky protocol) and build a WebDAV
server instead.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 10:13:03 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 10:13:03 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030402062520.GC14038@radii>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
	<9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
	<20030401224523.38e0a2f2.twisted@itamarst.org>
	<20030402062520.GC14038@radii>
Message-ID: <20030402101303.5c719a30.itamar@itamarst.org>

On Wed, 2 Apr 2003 01:25:20 -0500
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> Well, I was the one who made this change, and there's no particular
> philosophical reasons behind it. I agree moving it to twistd would be
> good.

Why don't you do that then?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From acapnotic at twistedmatrix.com  Wed Apr  2 12:25:04 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Apr 2003 09:25:04 -0800
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
Message-ID: <1049304237.972.61.camel@troglodyte.funhouse>

On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> class IPullProducer(IProducer):
>     """A pull producer, also known as a non-streaming producer, is
>     expected to produce data each time resumeProducing() is called.
>     """
>     def resumeProducing(self):
>         """Resume producing data.
>         This tells a producer to re-add itself to the main loop and produce
>         more data for its consumer."""

Usage and behaviour of a PullProducer isn't clear to me.  Does
PullProducer.resumeProducing mean that it should call consumer.write
exactly once?  Or is the amount of times consumer.write will be called
undefined or context-dependent but merely guaranteed to be finite?

A PushProducer delivers an undefined quantity of data to consumer.write
some unknown time after resumeProducing is called.  A PullProducer
delivers an undefined quantity of data to consumer.write some unknown
time after resumeProducing is called.  So why two interfaces?  Why don't
pulling consumers just use pauseProducing upon getting a .write?[1] 
Then we can ditch one of the interfaces and the 'streaming' argument to
registerProducer and the conditionals that go with it...

If it is a different interface, can we give the method a different
name?  I think it strange that you call "resume" on these when producing
has never been "paused".  And that "resume" in this case does not signal
a return to an ongoing process from which it has been interrupted, but
is a single  request for a discrete amount of data.  A name beginning
with "get" or "next" seems more fitting.

 - Kevin


[1] "...just use pauseProducing upon getting a write()?": One answer to
that could be "it's more message traffic"; every write in a
pull-producer implemented on PushProducer this way would involve
p.resume();c.write();p.pause() as opposed to just p.resume();c.write(). 
But that alone doesn't convince me the interface confusion is worth it.

-- 
The moon is new, 0.3% illuminated, 0.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030402/0250a1e3/attachment.pgp 

From itamar at itamarst.org  Wed Apr  2 12:56:00 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 12:56:00 -0500
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <1049304237.972.61.camel@troglodyte.funhouse>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
	<1049304237.972.61.camel@troglodyte.funhouse>
Message-ID: <20030402125600.7c688aeb.itamar@itamarst.org>

On 02 Apr 2003 09:25:04 -0800
Kevin Turner <acapnotic at twistedmatrix.com> wrote:

> On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> > class IPullProducer(IProducer):
> >     """A pull producer, also known as a non-streaming producer, is
> >     expected to produce data each time resumeProducing() is called.
> >     """
> >     def resumeProducing(self):
> >         """Resume producing data.
> >         This tells a producer to re-add itself to the main loop and
> >         produce more data for its consumer."""
> 
> Usage and behaviour of a PullProducer isn't clear to me.  Does
> PullProducer.resumeProducing mean that it should call consumer.write
> exactly once?

Yes.

> If it is a different interface, can we give the method a different
> name?  I think it strange that you call "resume" on these when
> producing has never been "paused".  And that "resume" in this case
> does not signal a return to an ongoing process from which it has been
> interrupted, but is a single  request for a discrete amount of data. 
> A name beginning with "get" or "next" seems more fitting.

Yes, but it's there for historical reasons...

Idon't think the two interfaces should be merged - they are different in
intent and usage.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Wed Apr  2 15:17:53 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 2 Apr 2003 20:17:53 +0000
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <20030402125600.7c688aeb.itamar@itamarst.org>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org>
Message-ID: <20030402201753.GA84483@doublegemini.com>

On Wed, Apr 02, 2003 at 12:56:00PM -0500, Itamar Shtull-Trauring wrote:
| > On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
| > > class IPullProducer(IProducer):
| > >     """A pull producer, also known as a non-streaming producer, is
| > >     expected to produce data each time resumeProducing() is called.
| > >     """
| > >     def resumeProducing(self):
| > >         """Resume producing data.
| > >         This tells a producer to re-add itself to the main loop and
| > >         produce more data for its consumer."""
| > 
| > Usage and behaviour of a PullProducer isn't clear to me.  Does
| > PullProducer.resumeProducing mean that it should call consumer.write
| > exactly once?
| 
| Yes.

This is also similar to the 'flow' module by Bob Ippolito (etrepum)
and somewhat distantly related to my flow module; only that mine is
more 'push' like.  Both are attempts at bringing an async 
producer into play, where the producer could at any time block.
| 
| > If it is a different interface, can we give the method a different
| > name?  I think it strange that you call "resume" on these when
| > producing has never been "paused".  And that "resume" in this case
| > does not signal a return to an ongoing process from which it has been
| > interrupted, but is a single  request for a discrete amount of data. 
| > A name beginning with "get" or "next" seems more fitting.
| 
| Yes, but it's there for historical reasons...
| Idon't think the two interfaces should be merged - they are different in
| intent and usage.

Nods.




From moshez at twistedmatrix.org  Wed Apr  2 02:13:41 2003
From: moshez at twistedmatrix.org (Moshe Zadka)
Date: Wed, 02 Apr 2003 01:13:41 -0600
Subject: [Twisted-Python] non-blocking .read
Message-ID: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>

It is often convenient in protocol implementations to just .read() as
much as you want to. However, it is impossible in Twisted, becase .read()
is a blocking operation. Happily, we can make blocking operations seem
non-blocking with the use of deferred. The following protocol does just
that:

class ReadProtocol(protocol.Protocol)

    toRead = 0
    until = ''

    def rawDataReceived(self, data):
        pass

    def dataReceived(self, data):
        while data:
            if self.toRead:
                read, data = data[:self.toRead], data[self.toRead:]
                self.buffer.write(read)
                self.toRead -= len(read)
                if self.toRead == 0:
                    self.deferred.callback(self.buffer.getvalue())
                    self.buffer.close()
            elif self.until:
                idx = data.find(self.until)
                if idx == -1:
                    self.buffer.write(data)
                    data = ''
                else:
                    read, data = data[:idx], data[idx:]
                    self.until = ''
                    self.buffer.write(read):
                    self.deferred.callback(self.buffer.getvalue())
                    self.buffer.close()
            else:
                self.rawDataReceived(data)
                data = ''

    def readUntil(self, c):
        self.toRead = 0
        self.until = c
        self.buffer = StringIO()
        self.deferred = defer.Deferred()
        return self.deferred

    def readLength(self, len):
        self.toRead = len
        self.until = ''
        self.buffer = StringIO()
        self.deferred = defer.Deferred()
        return self.deferred

# How to use, e.g., to implement netstrings:

class NetstringProtocol(ReadProtocol):

    def connectionMade(self):
        self.readString()

    def readString(self):
        self.readUntil(':').callback(
        lambda s: self.readLength(int(s)).callback(
        self.stringReceived).callback(
        lambda _: self.readLength(1).callback(
        lambda x: x==',' or self.transport.loseConnection()).callback(
        lambda _: self.readString))

    def stringReceived(self, s):
        pass




From glyph at twistedmatrix.com  Wed Apr  2 15:19:24 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Apr 2003 15:19:24 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030402062520.GC14038@radii>
Message-ID: <656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, April 2, 2003, at 01:25 AM, Christopher Armstrong wrote:

[... import does bad stuff ...]

> Well, I was the one who made this change, and there's no particular
> philosophical reasons behind it. I agree moving it to twistd would be
> good.

Shouldn't this just be in startLogging?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+i0XQvVGR4uSOE2wRAu3KAKCOsnaYD58ywJT61CbsHxSi3N+qXACeI2Yn
BE4vqsLYA3ZSauUPkNfQHzs=
=74r3
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Wed Apr  2 15:28:48 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 15:28:48 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>
References: <20030402062520.GC14038@radii>
	<656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>
Message-ID: <20030402152848.0894dfc0.itamar@itamarst.org>

On Wed, 2 Apr 2003 15:19:24 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Shouldn't this just be in startLogging?

I'm pretty sure startLogging is called at some point on import? Or how
is the default logging set up?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 15:34:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 15:34:15 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
Message-ID: <20030402153415.567454c2.itamar@itamarst.org>

On Wed, 02 Apr 2003 01:13:41 -0600
Moshe Zadka <moshez at twistedmatrix.org> wrote:

> It is often convenient in protocol implementations to just .read() as
> much as you want to. However, it is impossible in Twisted, becase
> .read() is a blocking operation. Happily, we can make blocking
> operations seem non-blocking with the use of deferred. The following
> protocol does just that:

I suspect it will be waaaaaaaay slower than the equivalent netstring
implementation.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Wed Apr  2 16:22:21 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 2 Apr 2003 16:22:21 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
Message-ID: <30F32056-6551-11D7-8315-000A95686CD8@redivi.com>

Just to bring generators back up..  Note that of course, the wrappers 
for read and the actual flow.BufferedProtocol class don't exist.. but 
their implementation is possible with the given syntax.
I'm imagining that a "flow" version of Int32Receiver could be coded 
like this:

class NetstringProtocol(flow.BufferedProtocol):
	def connectionMade(self):
		pass

	def handleConnection(self):
		self.connectionMade()
		reason = None

		# the string receive loop
		while 1:
			# read int32, size of int32 is 4
			result = self.read(4)
			yield result
			if result.isFailure():
				reason = result.get()
				break
			strlen, = struct.unpack('!I', result.get())
			if strlen <= 0:
				endFailure = Failure(ValueError('Zero length strings are not 
valid'))
				break
			# read string
			result = self.read(strlen)
			yield result
			if result.isFailure():
				reason = result.get()
				break
			self.stringReceived(result.get())

		# exception caused connection to drop, or connection dropped on its 
own
		self.connectionLost(reason)

	def connectionLost(self, reason):
		pass	




From radix at twistedmatrix.com  Wed Apr  2 19:08:46 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 19:08:46 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <20030402153415.567454c2.itamar@itamarst.org>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com> <20030402153415.567454c2.itamar@itamarst.org>
Message-ID: <20030403000846.GD14038@radii>

On Wed, Apr 02, 2003 at 03:34:15PM -0500, Itamar Shtull-Trauring wrote:
> On Wed, 02 Apr 2003 01:13:41 -0600
> Moshe Zadka <moshez at twistedmatrix.org> wrote:
> 
> > It is often convenient in protocol implementations to just .read() as
> > much as you want to. However, it is impossible in Twisted, becase
> > .read() is a blocking operation. Happily, we can make blocking
> > operations seem non-blocking with the use of deferred. The following
> > protocol does just that:
> 
> I suspect it will be waaaaaaaay slower than the equivalent netstring
> implementation.

And way more DEMONIC.

You're a sick man, moshez.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Apr  2 19:14:16 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 19:14:16 -0500
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <20030402201753.GA84483@doublegemini.com>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org> <20030402201753.GA84483@doublegemini.com>
Message-ID: <20030403001416.GE14038@radii>

On Wed, Apr 02, 2003 at 08:17:53PM +0000, Clark C. Evans wrote:
> On Wed, Apr 02, 2003 at 12:56:00PM -0500, Itamar Shtull-Trauring wrote:
> | > On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> | > > class IPullProducer(IProducer):
> | > >     """A pull producer, also known as a non-streaming producer, is
> | > >     expected to produce data each time resumeProducing() is called.
> | > >     """
> | > >     def resumeProducing(self):
> | > >         """Resume producing data.
> | > >         This tells a producer to re-add itself to the main loop and
> | > >         produce more data for its consumer."""
> | > 
> | > Usage and behaviour of a PullProducer isn't clear to me.  Does
> | > PullProducer.resumeProducing mean that it should call consumer.write
> | > exactly once?
> | 
> | Yes.
> 
> This is also similar to the 'flow' module by Bob Ippolito (etrepum)
> and somewhat distantly related to my flow module; only that mine is
> more 'push' like.  Both are attempts at bringing an async 
> producer into play, where the producer could at any time block.

block? No.. Producers and Consumers have nothing to do with blocking..

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From dalke at dalkescientific.com  Wed Apr  2 18:48:46 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Wed, 2 Apr 2003 18:48:46 -0500
Subject: [Twisted-Python] (no subject)
Message-ID: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
 > I'm pretty sure startLogging is called at some point on import? Or how
 > is the default logging set up?

The twiddling of warnings is done during import, and the
logfile is set to NullFile.  The code looks like this (including
the indentation level)

import warnings
warnings.showwarning = showwarning
   ....
# Prevent logfile from being erased on reload.  This only works in 
cpython.
try:
     logfile
except NameError:
     logfile = NullFile()
     logerr = sys.stderr


The patch I submitted changes matters so that twiddling
doesn't occur until startLogging is called.

Also, Itamar said:
 > twisted.python.log is old and crufty. If anyone feels like updating it
 > (requirements include different channels that can be logged to 
different
 > files), feel free. If you do discuss it on the list first, to make 
sure
 > everyone has voiced their requirements.

Python 2.3 has a generalized logging framework.
   http://python.org/dev/doc/devel/lib/module-logging.html
] New in version 2.3.  This module defines functions and classes
] which implement a flexible error logging system for applications.


					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Wed Apr  2 21:47:55 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 21:47:55 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>
References: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030402214755.1a69fc91.itamar@itamarst.org>

On Wed, 2 Apr 2003 18:48:46 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> The patch I submitted changes matters so that twiddling
> doesn't occur until startLogging is called.

OK - we'll either do that or put this in twistd.

> Python 2.3 has a generalized logging framework.
>    http://python.org/dev/doc/devel/lib/module-logging.html
> ] New in version 2.3.  This module defines functions and classes
> ] which implement a flexible error logging system for applications.

We are probably not going to use it - those of us who looked at it
didn't seem to like it.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 21:48:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 21:48:44 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <20030403000846.GD14038@radii>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
	<20030402153415.567454c2.itamar@itamarst.org>
	<20030403000846.GD14038@radii>
Message-ID: <20030402214844.1fefe2ec.itamar@itamarst.org>

On Wed, 2 Apr 2003 19:08:46 -0500
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> And way more DEMONIC.
> 
> You're a sick man, moshez.

You say that like it's a bad thing.



From david at acz.org  Wed Apr  2 22:41:12 2003
From: david at acz.org (David Phillips)
Date: Wed, 2 Apr 2003 21:41:12 -0600
Subject: [Twisted-Python] FTP Server
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <001b01c2f992$df756770$0201a8c0@brinstar>

Stefano Maniero writes:
> Can anyone indicate an example or doc for developing ftp server?

This reference manual for FTP might be useful:

http://cr.yp.to/ftp.html

-- 
David Phillips <david at acz.org>
http://david.acz.org/




From david at acz.org  Wed Apr  2 22:51:51 2003
From: david at acz.org (David Phillips)
Date: Wed, 2 Apr 2003 21:51:51 -0600
Subject: [Twisted-Python] Connecting using SOCKS
Message-ID: <005c01c2f994$5c3be3a0$0201a8c0@brinstar>

I'm new to Twisted, so please forgive me if this is obvious.  I read the
howtos and looked at some of the example programs, but didn't find anything
relevant.

I would like to use a protocol with SOCKS.  For example, ircLogBot.py calls
reactor.connectTCP().  How would I make it connect through SOCKS?  If
Twisted does not currently have this functionality, how would I go about
implemented it the correct way?

--
David Phillips <david at acz.org>
http://david.acz.org/




From bob at redivi.com  Wed Apr  2 22:57:26 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 2 Apr 2003 22:57:26 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20030402214755.1a69fc91.itamar@itamarst.org>
Message-ID: <61C4350C-6588-11D7-96D9-000A95686CD8@redivi.com>

On Wednesday, Apr 2, 2003, at 21:47 America/New_York, Itamar 
Shtull-Trauring wrote:

> On Wed, 2 Apr 2003 18:48:46 -0500
> Andrew Dalke <dalke at dalkescientific.com> wrote:
>
>> The patch I submitted changes matters so that twiddling
>> doesn't occur until startLogging is called.
>
> OK - we'll either do that or put this in twistd.
>
>> Python 2.3 has a generalized logging framework.
>>    http://python.org/dev/doc/devel/lib/module-logging.html
>> ] New in version 2.3.  This module defines functions and classes
>> ] which implement a flexible error logging system for applications.
>
> We are probably not going to use it - those of us who looked at it
> didn't seem to like it.

If only it had zope3 style XML configuration files with namespaces!

-bob




From jasper at peak.org  Thu Apr  3 03:54:25 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 00:54:25 -0800 (PST)
Subject: [Twisted-Python] Reactor questions
Message-ID: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I notice from expirmentation that reactor.stop() seems to sever any ongoing
network connections.  Is there a way to temporarily stop then restart the
reactor without losing a network connection?  Or would I need to write my
own reactor?

I'm writing unit tests, where I want to script a sequence of events.
Currently I have a (pyui) loop calling twisted.internet.main.iterate(), and
have my code accept a startup flag telling it whether to stop for procederal
input after remote PB calls.

This is a bit awkward, and so I'm hoping someone has dealt with this before
in twisted.

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+i/bG8EpjZ7/X9bIRAg3GAJ90/aobSqyYGy+NgKbDyZYbS/+TNQCgs6sy
yOxkTjygUV5T5jUiBCNzBHw=
=B+J1
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Apr  3 05:35:36 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 02:35:36 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303241427460.7028-100000@localhost.localdomain>
Message-ID: <Pine.LNX.4.44.0304030157560.6359-100000@localhost.localdomain>

On Mon, 24 Mar 2003, Jasper Phillips wrote:

[talking about twisted.spread.jelly._Unjellier]

> > This scheme will change on Tuesday. The "reference" tags will go away and be
> > replaced by an implicit marker that is notionally inserted every time we
> > start jellying a new mutable object. The "dereference" tags will then point
> > to these implicit markers. This should improve performance quite a bit, and
> > will pave the way to a combined jelly+banana extension module that should
> > give an enormous speedup (doing everything in C).
> 
> Sounds good!  No point in my suggesting a fix then. ;-)  Will a new version
> of twisted be released along with these changes, or would I have to go
> through CVS?

I notice that there is a "newjelly.py" in twisted.spread, which appears to
have changed the code relavent to the error I was getting.  However, I
couldn't easily tell from the commit email whether this was finished, or how
one would use it...

Am I correct in guessing newjelly.py is intended to be renamed to jelly.py,
but isn't ready yet?

-Jasper


PS  I've got a kludge to the 1.03 jelly.py and flavors.py that avoids the
"storing a _Derefence into a __dict__" error I was getting.  If anyone's
interested I can post it, although there would be little point if newjelly.py
will be ready soon.





From lafou at wanadoo.fr  Thu Apr  3 04:01:31 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 11:01:31 +0200
Subject: [Twisted-Python] Re: wxPython and Twisted event loops
References: <200302210248.04290.uwe@oss4u.com> <20030222032838.GB7817@frobozz.local>
Message-ID: <b6guaq$496$1@main.gmane.org>

 
> Is there any reason why you aren't using the twisted.internet.wxsupport
> module?
> 
> -Andrew.

Yes, I have tested it also, and needed the activeState solution. Some 
dialogs froze when accessing to databases for exemple (or connecting to a 
server via PB).

the "dirty" solution solve the problem 






From lafou at wanadoo.fr  Thu Apr  3 06:02:08 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 13:02:08 +0200
Subject: [Twisted-Python] Re: PullProducer appreciation, lack thereof.
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org> <20030402201753.GA84483@doublegemini.com>
Message-ID: <b6h4e7$t8i$1@main.gmane.org>

 
> This is also similar to the 'flow' module by Bob Ippolito (etrepum)
> and somewhat distantly related to my flow module; only that mine is
> more 'push' like.  Both are attempts at bringing an async
> producer into play, where the producer could at any time block.

Yes, It's similar to the flow module. I 've seen the source in sandbox on 
cvs, flow will be very usefull in network processes (like treatments on 
database results). Please finish it !




From glyph at twistedmatrix.com  Thu Apr  3 06:40:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Apr 2003 06:40:10 -0500
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0304030157560.6359-100000@localhost.localdomain>
Message-ID: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, April 3, 2003, at 05:35 AM, Jasper Phillips wrote:

> I notice that there is a "newjelly.py" in twisted.spread, which 
> appears to
> have changed the code relavent to the error I was getting.  However, I
> couldn't easily tell from the commit email whether this was finished, 
> or how
> one would use it...

The way you use it is by replacing the imports at the top of pb.py and 
flavors.py to say "import jelly as newjelly" or "from newjelly import 
...".  Please do this and see if your problem is solved.  (better yet, 
contribute a unit test so we can make sure future changes don't break 
this either...)

> Am I correct in guessing newjelly.py is intended to be renamed to 
> jelly.py,
> but isn't ready yet?

The real issue is that this is a protocol-breaking change, and we're 
not quite prepared to deal with the fallout from that.  Brian Warner 
and I hacked on this at PyCon, and he has some ideas for backwards 
compatible version negotiation, so we may want to keep the old 
implementation around anyway.  When we figure out if and how we're 
going to do backwards compatibility, we'll make the changeover.

Also, the idea behind this implementation was to simplify things so 
that some new kinds of optimizations are possible -- the implementation 
is still really grotty (though it should be functional; I've made the 
aforementioned change to my pb.py and flavors.py and the PB unit tests 
pass), and I want to make sure that these optimizations *are* actually 
made possible, and we haven't just shuffled things around for no reason 
:-)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jB2evVGR4uSOE2wRAmCuAJ4laVyToPx8ybOt0RJP46voWjkUGQCgt99P
1sJ1romG8LZpzKXQD5Pj1Oc=
=kuA3
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Apr  3 07:34:22 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 04:34:22 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thu, 3 Apr 2003, Glyph Lefkowitz wrote:
> On Thursday, April 3, 2003, at 05:35 AM, Jasper Phillips wrote:
> 
> > I notice that there is a "newjelly.py" in twisted.spread, which appears
> > to have changed the code relavent to the error I was getting.  However, I
> > couldn't easily tell from the commit email whether this was finished, or
> > how one would use it...
> 
> The way you use it is by replacing the imports at the top of pb.py and
> flavors.py to say "import jelly as newjelly" or "from newjelly import
> ...".  Please do this and see if your problem is solved.  (better yet,
> contribute a unit test so we can make sure future changes don't break
> this either...)

I just took the shortcut of replacing jelly.py with newjelly.py, as I didn't
want to hunt down imports to change.  I got several errors, and hence
wondered if it was finished, e.g.

I get this Traceback when sending from Perspective -> Client
...
  File "...jelly.py", line 536, in _unjelly_tuple
    if preTuple.resolvedObject is None:
exceptions.AttributeError: _Tuple instance has no attribute 'resolvedObject'

After this error I get a similar error (when sending from Client ->
Perspective) where a local variable that is set on my Perspective before
calling a "remote" client method is later missing when the client calls a
"perspective" method.

I haven't looks more closely than this though.


I posted a test case demonstrating the "circular ref" bug a couple of
messages up this thread, but didn't work out a unit test.  I'll try to get
some time to do that, although I understand twisted uses something other than
pyunit so I'm not sure what's involved.

A cursory glance at newjelly.py makes me think it can't possibly have the
same problem, as "references" and "derefences" now seem to be treated in the
same manner, and presumably your unit tests cover simple references. ;-)

> > Am I correct in guessing newjelly.py is intended to be renamed to
> > jelly.py, but isn't ready yet?
> 
> The real issue is that this is a protocol-breaking change, and we're
> not quite prepared to deal with the fallout from that.  Brian Warner
> and I hacked on this at PyCon, and he has some ideas for backwards
> compatible version negotiation, so we may want to keep the old
> implementation around anyway.  When we figure out if and how we're
> going to do backwards compatibility, we'll make the changeover.

Isn't all the Jelly/Unjelly code pretty well encapsulated, so that others
needed really care how it works internally?

> Also, the idea behind this implementation was to simplify things so
> that some new kinds of optimizations are possible -- the implementation
> is still really grotty (though it should be functional; I've made the
> aforementioned change to my pb.py and flavors.py and the PB unit tests
> pass), and I want to make sure that these optimizations *are* actually
> made possible, and we haven't just shuffled things around for no reason
> :-)

For what it's worth (after a cursory glance), the reference/dereference
cleanup part of your changes looks like a clear improvement, but in
understandability and correctness. :-)

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+jCpU8EpjZ7/X9bIRAt99AKCXvM5vAXQhymxTnEfgVq/R0cPPNACeJmo1
7SVWbqQIC1d6YNsTSmrMUPk=
=g0Qk
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Thu Apr  3 10:18:52 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 10:18:52 -0500
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
Message-ID: <20030403101852.55620b15.itamar@itamarst.org>

On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
Jasper Phillips <jasper at peak.org> wrote:

> I notice from expirmentation that reactor.stop() seems to sever any
> ongoing network connections.  Is there a way to temporarily stop then
> restart the reactor without losing a network connection?  Or would I
> need to write my own reactor?
> 
> I'm writing unit tests, where I want to script a sequence of events.
> Currently I have a (pyui) loop calling
> twisted.internet.main.iterate(), and have my code accept a startup
> flag telling it whether to stop for procederal

1. Never ever use twisted.internet.main. Please. It is waaaay
deprecated.

2. You can use reactor.iterate().

3. For unittesting, reactor.crash() does exactly what you want - stop
reactor without closing anything.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jeff at bodkinpartners.com  Thu Apr  3 11:29:46 2003
From: jeff at bodkinpartners.com (Jeffrey Mathews)
Date: Thu, 3 Apr 2003 11:29:46 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
Message-ID: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>

I really enjoyed your talks at PyCon last week, as did pretty much everyone
I spoke with.  You all did a great job at creating a lot of enthusiasm for
twisted.

So I come home, and get the 1.0.3 self-installer for windows, as well as the
docs and start playing.

First thing I notice is that the introductory demo doesn't work, because
twistd.py won't run as a script (it has no "if __name__ == '__main__':
run()").  I obviously could fix that, but it seems so basic that I worry
that I'm just missing something (like I'm not supposed to be using the
scripts in /scripts directly).

Next question is what happened to support for a FieldStorage-like api in the
protocols.http.request module?  Googling shows that 0.99.3 had it, but 1.03
doesn't.  Is it coming back, or to be replaced by something else?  I'd like
it for file uploads in a very simple web-based photo album, to share some
family shots.

Thanks in advance for the help, and again, great job at PyCon.

---------------
Jeffrey Mathews
410 336 2279 cell




From cce at clarkevans.com  Thu Apr  3 11:53:54 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 3 Apr 2003 16:53:54 +0000
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403101852.55620b15.itamar@itamarst.org>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain> <20030403101852.55620b15.itamar@itamarst.org>
Message-ID: <20030403165354.GB87034@doublegemini.com>

On Thu, Apr 03, 2003 at 10:18:52AM -0500, Itamar Shtull-Trauring wrote:
| On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
| Jasper Phillips <jasper at peak.org> wrote:
| 
| > I notice from expirmentation that reactor.stop() seems to sever any
| > ongoing network connections.  Is there a way to temporarily stop then
| > restart the reactor without losing a network connection?  Or would I
| > need to write my own reactor?
| > 
| > I'm writing unit tests, where I want to script a sequence of events.
| > Currently I have a (pyui) loop calling
| > twisted.internet.main.iterate(), and have my code accept a startup
| > flag telling it whether to stop for procederal
| 
| 1. Never ever use twisted.internet.main. Please. It is waaaay
| deprecated.
| 
| 2. You can use reactor.iterate().
| 
| 3. For unittesting, reactor.crash() does exactly what you want - stop
| reactor without closing anything.

In my unit tests I often do the following.

  reactor.callLater(2, reactor.stop)

Just before the reactor starts.

Clark



From acapnotic at twistedmatrix.com  Thu Apr  3 11:52:06 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 03 Apr 2003 08:52:06 -0800
Subject: [Twisted-Python] Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <1049388724.975.100.camel@troglodyte.funhouse>

On Thu, 2003-04-03 at 08:29, Jeffrey Mathews wrote:
> I worry that I'm just missing something (like I'm not supposed to be
> using the scripts in /scripts directly).

You're not supposed to be using the scripts in site-packages/*/scripts
directly.  I'm told the Windows installer puts the runnable scripts in
something like C:\Python22\scripts\twistd.py

Happy twisting,

 - Kevin

(Hmm, twice in one week makes this a FAQ.  Added this to doc/howto/faq
in CVS.)

-- 
The moon is new, 2.2% illuminated, 1.4 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030403/9b1fc8a8/attachment.pgp 

From itamar at itamarst.org  Thu Apr  3 11:52:53 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 11:52:53 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <20030403115253.48e29638.itamar@itamarst.org>

On Thu, 3 Apr 2003 11:29:46 -0500
"Jeffrey Mathews" <jeff at bodkinpartners.com> wrote:

> Next question is what happened to support for a FieldStorage-like api
> in the protocols.http.request module?  Googling shows that 0.99.3 had
> it, but 1.03 doesn't.  Is it coming back, or to be replaced by
> something else?  I'd like it for file uploads in a very simple
> web-based photo album, to share some family shots.

It was in, but had to be taken out since it broke other code. Eventually
it will return - meanwhile you can still access the same data, just less
efficiently using existing APIs.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From peter at engcorp.com  Thu Apr  3 11:56:22 2003
From: peter at engcorp.com (Peter Hansen)
Date: Thu, 03 Apr 2003 11:56:22 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <3E8C67B6.C02882AC@engcorp.com>

Jeffrey Mathews wrote:
> 
> First thing I notice is that the introductory demo doesn't work, because
> twistd.py won't run as a script (it has no "if __name__ == '__main__':
> run()").  I obviously could fix that, but it seems so basic that I worry
> that I'm just missing something (like I'm not supposed to be using the
> scripts in /scripts directly).

The files in twisted/scripts are not the ones you want to run... you need
to run the ones that were installed under c:\python22\scripts, or wherever
they go on your own machine.  Those basically do an imported from the 
twisted.scripts.xxx modules and call xxx.run(), so it amounts to almost
the same thing.

> Next question is what happened to support for a FieldStorage-like api in the
> protocols.http.request module?  Googling shows that 0.99.3 had it, but 1.03
> doesn't.  Is it coming back, or to be replaced by something else?  I'd like
> it for file uploads in a very simple web-based photo album, to share some
> family shots.

FieldStorage, as in the cgi module?  What don't you like about the request.args
field that is nicely parsed for you from the HTTP GET or POST request?  (Note
that the fields all come in as lists, so if you expect only one instance of
any given field you need to grab request.args['fieldname'][0] to get the
actual string value.)

> Thanks in advance for the help, and again, great job at PyCon.

I'm a rookie at Twisted, but I've just "been there" on both issues... good
fodder for a tutorial/FAQ I suppose... or a wiki.

-Peter



From itamar at itamarst.org  Thu Apr  3 11:53:59 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 11:53:59 -0500
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403165354.GB87034@doublegemini.com>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
	<20030403101852.55620b15.itamar@itamarst.org>
	<20030403165354.GB87034@doublegemini.com>
Message-ID: <20030403115359.47b161a2.itamar@itamarst.org>

On Thu, 3 Apr 2003 16:53:54 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> In my unit tests I often do the following.
> 
>   reactor.callLater(2, reactor.stop)
> 
> Just before the reactor starts.

reactor.crash is better for tests since you can call reactor.run again
afterwards.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Thu Apr  3 12:38:46 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 3 Apr 2003 12:38:46 -0500
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>
References: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com> <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>
Message-ID: <20030403173846.GA31794@meson.dyndns.org>

On Thu, Apr 03, 2003 at 04:34:22AM -0800, Jasper Phillips wrote:
> [snip]
> 
> I posted a test case demonstrating the "circular ref" bug a couple of
> messages up this thread, but didn't work out a unit test.  I'll try to get
> some time to do that, although I understand twisted uses something other than
> pyunit so I'm not sure what's involved.

  We use twisted.trial, which presents an interface that's almost identical
to pyunit, so if you're familiar with one, working with the other should be
fairly easy.

  That said, I've added a TestCase to test_jelly.py that seems to tickle
this bug. :)  It's simplified even more from your example, but I think it
still catches the essense of the problem.

  Jp

-- 
1.79 x 10^24 furlongs per picofortnight - It's not just a good idea, 
			It's the law!
-- 
 up 14 days, 14:00, 4 users, load average: 0.04, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030403/d12856d2/attachment.pgp 

From itamar at itamarst.org  Thu Apr  3 13:21:57 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 13:21:57 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Test circular references
In-Reply-To: <E1918ar-0001fa-00@pyramid.twistedmatrix.com>
References: <E1918ar-0001fa-00@pyramid.twistedmatrix.com>
Message-ID: <20030403132157.1b3f7505.itamar@itamarst.org>

On Thu, 03 Apr 2003 11:33:41 -0600
exarkun CVS <exarkun at twistedmatrix.com> wrote:

> +testCases = [JellyTestCase, CircularReferenceTestCase]

This is not necessary - testCases hasn't been used for a long time.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From alan at norfolkgraphics.com  Thu Apr  3 17:16:02 2003
From: alan at norfolkgraphics.com (Alan McIntyre)
Date: Thu, 03 Apr 2003 17:16:02 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
Message-ID: <3E8CB2A2.5010908@norfolkgraphics.com>

Hi all,

First of all I wanted to say thanks to all the Twisted guys that gave 
talks at PyCon 2003.  I was going to use Zope for an upcoming project, 
but the demos you all gave made me think that Twisted might be a better 
fit for what we're doing.  So I had to have a look once I got home. :)

So far it's looking good; getting Twisted installed and a web instance 
running was a snap on both Windows and Debian.  I had zero knowledge of 
Twisted prior to PyCon, but I was able to start from scratch on Saturday 
and put together a simple web interface to some of our existing Python 
apps by Sunday afternoon.

I did notice something that I'm curious about: I've been running two 
Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
now, and the Windows instance has accumulated almost an hour of CPU time 
wherease the Debian instance has only used 2 seconds.  What's the Win32 
instance doing while it's idle? (It's not a big deal, I'm just curious)

Thanks!
Alan McIntyre





From radix at twistedmatrix.com  Thu Apr  3 18:16:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 3 Apr 2003 18:16:06 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <3E8CB2A2.5010908@norfolkgraphics.com>
References: <3E8CB2A2.5010908@norfolkgraphics.com>
Message-ID: <20030403231606.GC24393@radii>

On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> I did notice something that I'm curious about: I've been running two 
> Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
> and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
> now, and the Windows instance has accumulated almost an hour of CPU time 
> wherease the Debian instance has only used 2 seconds.  What's the Win32 
> instance doing while it's idle? (It's not a big deal, I'm just curious)

My first guess would be that the system calls involved (e.g., select)
are more expensive than on linux, but that's just a wild guess. I
doubt profiling would be much help, but maybe you (or someone) could
write a simple test that just recorded the time it takes to run an
immediately-returning select() a few thousand times.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Thu Apr  3 18:21:03 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 3 Apr 2003 18:21:03 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
References: <3E8CB2A2.5010908@norfolkgraphics.com> <20030403231606.GC24393@radii>
Message-ID: <20030403232103.GD24393@radii>

On Thu, Apr 03, 2003 at 06:16:06PM -0500, Christopher Armstrong wrote:
> On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> > I did notice something that I'm curious about: I've been running two 
> > Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
> > and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
> > now, and the Windows instance has accumulated almost an hour of CPU time 
> > wherease the Debian instance has only used 2 seconds.  What's the Win32 
> > instance doing while it's idle? (It's not a big deal, I'm just curious)
> 
> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

If this doesn't show any useful information, I also realized that
Twisted has some code to handle Windows' wacky select() semantics;
maybe there's something munching a little bit of CPU in those special
cases.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bob at redivi.com  Thu Apr  3 18:31:32 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 3 Apr 2003 18:31:32 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
Message-ID: <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>

On Thursday, Apr 3, 2003, at 18:16 America/New_York, Christopher 
Armstrong wrote:

> On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
>> I did notice something that I'm curious about: I've been running two
>> Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 
>> 2.2.2)
>> and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days
>> now, and the Windows instance has accumulated almost an hour of CPU 
>> time
>> wherease the Debian instance has only used 2 seconds.  What's the 
>> Win32
>> instance doing while it's idle? (It's not a big deal, I'm just 
>> curious)
>
> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

IIRC, the Twisted select reactor has a "background process" that gets 
triggered once a second or so when running on windows just to break the 
select() call (I don't believe it actually does anything).  I believe 
this is because processes in windows don't respond to signals (like 
ctrl-c, for example) during a select() call, so this 
convenience/workaround was put into the codebase.

In any case, an hour of CPU time over a few days is pretty negligible, 
but worthy of note for comparison's sake I suppose.. On a more heavily 
used Twisted daemon, it really wouldn't make any difference, since the 
select() call would spend less time idling.

-bob




From z3p at twistedmatrix.com  Thu Apr  3 18:40:35 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Thu, 03 Apr 2003 18:40:35 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
References: <3E8CB2A2.5010908@norfolkgraphics.com>
Message-ID: <3E8C8023.32403.DB3EF4@localhost>

On 3 Apr 2003 at 18:16, Christopher Armstrong 
wrote:

> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

A simple test shows that select() on 100 sockets, 
1000 times takes 1.313s (Windows XP, P4, 1.5GHz).  
Iterating on just one socket (which I think is 
what happens when idling) takes about 3/100 of a 
second.  To get an hour of CPU time, this would 
take 115 million select()s.  Whether or not that 
many select()s actually happen is up to other 
people. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From lafou at wanadoo.fr  Thu Apr  3 08:02:04 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 15:02:04 +0200
Subject: [Twisted-Python] Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com>
Message-ID: <b6hbjv$si1$1@main.gmane.org>

Clark C. Evans wrote:

> Howdy.   I've made quite a few changes to flow.py and it's
> quickly approaching maturity.   To summarize, flow.py is a
> way to express sequential, streaming data flows that are
> interruptable as a collection of small, atomic operations.
> This is needed since sometimes an operation must block,
> flow.py takes care of resuming your flow at a later time.
> 


how do you use it with adbapi ?? I mean, how do you use callbacks with your
flow ?

How does it work if a bloc has several inputs ?
I want to do this :

DS1 ---> FS1 ---+
                +--->  FS3
DS2 ---> FS2 ------->  FS3

Two datasources provide some data. Data are used to run Fuzzy Inference 
Systems (FS1, FS2, FS3).

FS3 must wait until all its inputs are ready. Is it possible with flow.py ?
Will it be possible ?




From jasper at peak.org  Thu Apr  3 19:20:59 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 16:20:59 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030403173846.GA31794@meson.dyndns.org>
Message-ID: <Pine.LNX.4.44.0304031619090.15271-100000@localhost.localdomain>

On Thu, 3 Apr 2003, Jp Calderone wrote:

> On Thu, Apr 03, 2003 at 04:34:22AM -0800, Jasper Phillips wrote:
> > [snip]
> > 
> > I posted a test case demonstrating the "circular ref" bug a couple of
> > messages up this thread, but didn't work out a unit test.  I'll try to get
> > some time to do that, although I understand twisted uses something other than
> > pyunit so I'm not sure what's involved.
> 
>   We use twisted.trial, which presents an interface that's almost identical
> to pyunit, so if you're familiar with one, working with the other should be
> fairly easy.

Ah. Judging from your unit tests, It looks you can just import
twisted.trial.unittest as unittest, and existing pyunit tests should just
work.  D'oh!

>   That said, I've added a TestCase to test_jelly.py that seems to tickle
> this bug. :)  It's simplified even more from your example, but I think it
> still catches the essense of the problem.

Thanks!  It was probably a good idea to remove all of the pb baggage from
my test case. ;-)

-Jasper





From jasper at peak.org  Thu Apr  3 19:36:23 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 16:36:23 -0800 (PST)
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403101852.55620b15.itamar@itamarst.org>
Message-ID: <Pine.LNX.4.44.0304031622580.15271-100000@localhost.localdomain>

On Thu, 3 Apr 2003, Itamar Shtull-Trauring wrote:

> On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
> Jasper Phillips <jasper at peak.org> wrote:
> 
> > I notice from expirmentation that reactor.stop() seems to sever any
> > ongoing network connections.  Is there a way to temporarily stop then
> > restart the reactor without losing a network connection?  Or would I
> > need to write my own reactor?
> > 
> > I'm writing unit tests, where I want to script a sequence of events.
> > Currently I have a (pyui) loop calling
> > twisted.internet.main.iterate(), and have my code accept a startup
> > flag telling it whether to stop for procederal
> 
> 1. Never ever use twisted.internet.main. Please. It is waaaay
> deprecated.

Yah, I saw a note to that effect in main, but I was following an
example I found, and the results worked so I stuck with it for a bit.

> 2. You can use reactor.iterate().

Much better.

> 3. For unittesting, reactor.crash() does exactly what you want - stop
> reactor without closing anything.

Ah, I see it now.  The name threw me off, as "crash" doesn't exactly
sound recoverable. ;-)

Thanks for your help!
-Jasper





From corydodt at yahoo.com  Fri Apr  4 03:04:14 2003
From: corydodt at yahoo.com (Cory Dodt)
Date: Fri, 4 Apr 2003 00:04:14 -0800 (PST)
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
Message-ID: <20030404080414.63446.qmail@web10009.mail.yahoo.com>

Just one more thing to say about this:  the installer for Twisted on
Windows provides icons in the start menu for a few things, one of which is
"Twisted Command Prompt".  This prompt runs a very thin batch file which
makes all the commands run on Windows "just like unix"; that is, typing

c:\>mktap

will do what you expect.

__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online, calculators, forms, and more
http://tax.yahoo.com



From peter at engcorp.com  Fri Apr  4 09:39:39 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 04 Apr 2003 09:39:39 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
References: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
Message-ID: <3E8D992B.144B0DDD@engcorp.com>

Cory Dodt wrote:
> 
> Just one more thing to say about this:  the installer for Twisted on
> Windows provides icons in the start menu for a few things, one of which is
> "Twisted Command Prompt".  This prompt runs a very thin batch file which
> makes all the commands run on Windows "just like unix"; that is, typing
> 
> c:\>mktap
> 
> will do what you expect.

This even works sometimes. :-)  

I'd report a bug, but it happened while I was still in the pre-newbie
stage with Twisted, and we have an unusual Python installation (network-
based) so I wasn't ready to blame the Twisted installer.  As I recall,
it was something like win32com.shortcut that was missing, and it was
needed by something that was like "win32_postinstall.py" (I really 
don't remember the name, and can't find the file right now).

The symptom, other than a failure right at the end of the installation
process (after the .pyc files are generated), was the lack of a Windows
start menu entry and any shortcuts...

If there's a concern about this, I can keep my eye out for what it was.

-Peter



From acapnotic at twistedmatrix.com  Fri Apr  4 13:28:59 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 04 Apr 2003 10:28:59 -0800
Subject: [Twisted-Python] release momentum
Message-ID: <1049480936.10270.52.camel@troglodyte.funhouse>

Our release schedule, or lack thereof, is getting to me.  I'm reluctant
to deploy new releases of CVSToys because I'd be asking people to depend
on an "alpha" version of Twisted.  At least one person has come in to
#twisted asking if there was going to be a release soon, or if he had to
ask his users to get Twisted from CVS.  

Our last *alpha* release was was five weeks before PyCon started; there
have been over five hundred commits since that time.

I know we've all been busy, I know our release manager has had to devote
his attention to people who will help him pay his bills -- I'm not
concerned with any of that now.  All I want to know is what we have to
do to get another alpha release out.

Tests we're having problems with:

 * testSignal in test_process.PosixProcessTestCase, fails regularly
under buildbot for python2.2, but not 2.1.  I cannot reproduce this
failure.

 * testStor in test_ftp, intermittent failures.

 * ThrottlingTestCase in test_policies has intermittent failures, they
may be spurious timing issues.

 * test_imap is under heavy development, failures changed fresh daily.

 * test_jelly.CircularReferenceTestCase, Jasper's bug.

How many of these do we have to turn green before we can build the next
alpha release?  Is the jelly bug going to wait on newjelly?

Since I'm the one raising a stink, I'll volunteer to manage the next
release should Chris remain unavailable.

(Now why did saying that start the music of foreshadowing doom in my
head?)

 - Kevin

-- 
The moon is waxing crescent, 6.1% illuminated, 2.3 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030404/df3ca099/attachment.pgp 

From jeff at bodkinpartners.com  Fri Apr  4 13:30:39 2003
From: jeff at bodkinpartners.com (Jeffrey Mathews)
Date: Fri, 4 Apr 2003 13:30:39 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
Message-ID: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>

Thanks everyone for the quick response.

The command prompt is VERY helpful, given the sorry state of Windows command
line life (and \python22\scripts is not added to PATH by the windows python
installer, so I didn't think to look there).  Sorry I didn't see the
question previously posted.

As for Peter's question about the need for a CGI.FieldStorage type api, it's
really only an issue when you're doing huge multipart mime posts (e.g., file
uploads).  The idea of passing around those results (potentially multi
megabyte) as strings is kind of frightening.  That said, I have no grasp on
what issues are raised when handling these things asynchronously (the cgi
module is all synchronous).

Thanks again.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From peter at engcorp.com  Fri Apr  4 14:08:06 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 04 Apr 2003 14:08:06 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
References: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
Message-ID: <3E8DD816.6EEBAB5F@engcorp.com>

Jeffrey Mathews wrote:
> 
> As for Peter's question about the need for a CGI.FieldStorage type api, it's
> really only an issue when you're doing huge multipart mime posts (e.g., file
> uploads).  The idea of passing around those results (potentially multi
> megabyte) as strings is kind of frightening.  That said, I have no grasp on
> what issues are raised when handling these things asynchronously (the cgi
> module is all synchronous).

What is it about passing around multi-megabyte data as strings that scares
you?  The data is only needed temporarily, I would think, until it is written
to a file.  Servers have gobs of memory, and massive file uploads are 
rare... or if they're not, surely the server can have adequate capacity
to handle the load (memory-wise).

Maybe I'm too naive, but unless I was expecting, say, greater than 10MB
or 20MB files on a regular basis, I wouldn't think twice about just using
strings.  Much simpler than trying to juggle temporary files and references
to them and removing them when appropriate etc.

Is your concern a case of premature optimization?

-Peter



From itamar at itamarst.org  Fri Apr  4 14:09:32 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 14:09:32 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
References: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
	<AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
Message-ID: <20030404140932.01df2c1c.itamar@itamarst.org>

On Fri, 4 Apr 2003 13:30:39 -0500
"Jeffrey Mathews" <jeff at bodkinpartners.com> wrote:

> As for Peter's question about the need for a CGI.FieldStorage type
> api, it's really only an issue when you're doing huge multipart mime
> posts (e.g., file uploads).  The idea of passing around those results
> (potentially multi megabyte) as strings is kind of frightening.  That
> said, I have no grasp on what issues are raised when handling these
> things asynchronously (the cgi module is all synchronous).

This is indeed an issue and the reason FieldStorage support will return
at some point.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Fri Apr  4 14:13:30 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 14:13:30 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <3E8DD816.6EEBAB5F@engcorp.com>
References: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
	<3E8DD816.6EEBAB5F@engcorp.com>
Message-ID: <20030404141330.61b498d9.itamar@itamarst.org>

On Fri, 04 Apr 2003 14:08:06 -0500
Peter Hansen <peter at engcorp.com> wrote:

> Is your concern a case of premature optimization?

Denial of service attacks, for one thing.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Fri Apr  4 14:21:56 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 4 Apr 2003 14:21:56 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <3E8DD816.6EEBAB5F@engcorp.com>
Message-ID: <B2E6BF37-66D2-11D7-96D9-000A95686CD8@redivi.com>

On Friday, Apr 4, 2003, at 14:08 America/New_York, Peter Hansen wrote:

> Jeffrey Mathews wrote:
>>
>> As for Peter's question about the need for a CGI.FieldStorage type 
>> api, it's
>> really only an issue when you're doing huge multipart mime posts 
>> (e.g., file
>> uploads).  The idea of passing around those results (potentially multi
>> megabyte) as strings is kind of frightening.  That said, I have no 
>> grasp on
>> what issues are raised when handling these things asynchronously (the 
>> cgi
>> module is all synchronous).
>
> What is it about passing around multi-megabyte data as strings that 
> scares
> you?  The data is only needed temporarily, I would think, until it is 
> written
> to a file.  Servers have gobs of memory, and massive file uploads are
> rare... or if they're not, surely the server can have adequate capacity
> to handle the load (memory-wise).
>
> Maybe I'm too naive, but unless I was expecting, say, greater than 10MB
> or 20MB files on a regular basis, I wouldn't think twice about just 
> using
> strings.  Much simpler than trying to juggle temporary files and 
> references
> to them and removing them when appropriate etc.
>
> Is your concern a case of premature optimization?

It's not premature optimization, it's proper design for an async 
framework.  If for no other reason, large strings take non-trivial 
amounts of time to process.  For example, on my laptop (which has a gig 
of ram): ('a' * 2**20).replace('a', 'b') takes about 0.35 seconds.. 
Twisted is not threaded, so that's a bad thing to do.  Processing 
chunks with file-like interfaces is scalable, large strings are 
definitely not.

-bob




From exarkun at intarweb.us  Fri Apr  4 15:39:51 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 4 Apr 2003 15:39:51 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
References: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <20030404203951.GA11365@meson.dyndns.org>

On Fri, Apr 04, 2003 at 10:28:59AM -0800, Kevin Turner wrote:
> Our release schedule, or lack thereof, is getting to me.  I'm reluctant
> to deploy new releases of CVSToys because I'd be asking people to depend
> on an "alpha" version of Twisted.  At least one person has come in to
> #twisted asking if there was going to be a release soon, or if he had to
> ask his users to get Twisted from CVS.  
> 
> Our last *alpha* release was was five weeks before PyCon started; there
> have been over five hundred commits since that time.
> 
> I know we've all been busy, I know our release manager has had to devote
> his attention to people who will help him pay his bills -- I'm not
> concerned with any of that now.  All I want to know is what we have to
> do to get another alpha release out.
> 

  Thanks for bringing this up.  I've been wondering about it a bit myself as
well.

> Tests we're having problems with:
> 
> [snip]
> 
>  * test_imap is under heavy development, failures changed fresh daily.

  I wouldn't be unhappy if imap4 were left out of the next release, if that
release is done before 1) the protocol support is somewhat stable 2) there
is a mailbox implementation in Twisted proper (I currently have one, but not
in Twisted).

  Of course, I also wouldn't be unhappy if it were included, assuming it is
in reasonable condition when someone actually does go ahead with the
release. 

> 
>  * test_jelly.CircularReferenceTestCase, Jasper's bug.
> 
> How many of these do we have to turn green before we can build the next
> alpha release?  Is the jelly bug going to wait on newjelly?
> 

  Speaking of newjelly... Is it definite yet whether this will be backwards
compatible with the current jelly yet?  I assumed it would not be, but I've
heard some rumors...

  Since our numbering scheme is currently "* glyph rolls dice.", maybe this
doesn't matter, but I think it *might* be nice if the next release was
1.1.0, if jelly compatibility isn't going to be maintained.

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 15 days, 16:00, 9 users, load average: 0.00, 0.02, 0.07
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030404/60712018/attachment.pgp 

From glyph at twistedmatrix.com  Fri Apr  4 18:20:11 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Apr 2003 18:20:11 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday, April 4, 2003, at 01:28 PM, Kevin Turner wrote:

> Our release schedule, or lack thereof, is getting to me.  I'm reluctant
> to deploy new releases of CVSToys because I'd be asking people to 
> depend
> on an "alpha" version of Twisted.  At least one person has come in to
> #twisted asking if there was going to be a release soon, or if he had 
> to
> ask his users to get Twisted from CVS.

You definitely have a point there.

> Our last *alpha* release was was five weeks before PyCon started; there
> have been over five hundred commits since that time.

Zow.  I hadn't counted.  This is pretty bad.

> Tests we're having problems with:
>
>  * testSignal in test_process.PosixProcessTestCase, fails regularly
> under buildbot for python2.2, but not 2.1.  I cannot reproduce this
> failure.

Neither can I.  does anyone have a theory as to what's causing it?

>  * testStor in test_ftp, intermittent failures.

This should be fixed eventually, but it's been having problems forever. 
  We shouldn't hold up the release based on it.

>  * ThrottlingTestCase in test_policies has intermittent failures, they 
> may be spurious timing issues.

The tests are written incorrectly.  They assert things that should 
usually be true, but aren't necessarily.

>  * test_imap is under heavy development, failures changed fresh daily.

JP should get these to pass, but similarly they should not hold up the 
release.

>  * test_jelly.CircularReferenceTestCase, Jasper's bug.

I'll pick this one up, since it's really my fault.  I should be able to 
look at it on Sunday.

> How many of these do we have to turn green before we can build the 
> next alpha release?  Is the jelly bug going to wait on newjelly?

The jelly bug shouldn't wait on newjelly because this involves breaking 
compatibility not only with old Twisted, but also with every other 
language implementation of PB that currently exists.  These should 
eventually be fixed, but I think at this point that we just can't 
ignore compatibility in the meanwhile.

> Since I'm the one raising a stink, I'll volunteer to manage the next 
> release should Chris remain unavailable.

Let me give you some advice, from the last time I volunteered to do 
this.  Corner Chris on IRC, get him to explain everything that needs to 
be done, and then take it over.  Don't wait for him to agree that he 
won't be available :-).

It's actually not that much work, now that most of it's automated.  The 
only thing that's really time-consuming is having to re-do it all every 
time somebody checks in a fix, and twice when moving to final-RC to 
final-release.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jhMuvVGR4uSOE2wRAr/dAKCEw5Og+P2Ho6FnUw0mvIdfhV9LFgCgkcXw
5dOivSojnY9quQY1KQVlAQk=
=jKiN
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Fri Apr  4 18:39:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Apr 2003 18:39:06 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <20030404203951.GA11365@meson.dyndns.org>
Message-ID: <A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, April 4, 2003, at 03:39 PM, Jp Calderone wrote:

>   Since our numbering scheme is currently "* glyph rolls dice.", maybe 
> this
> doesn't matter, but I think it *might* be nice if the next release was
> 1.1.0, if jelly compatibility isn't going to be maintained.

I think we should stick with 1.0.4, since I think we should do the 
release ASAP, and not wait until we have enough time to test newjelly 
with all the applications that might need it.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jhedvVGR4uSOE2wRAtIxAJ0QAu+gZ38kXNiKiu922OUg0XcYTwCfdjgx
oXtG5pQAwY4QnTgHS2CGGcU=
=VcV6
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Fri Apr  4 19:06:34 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 19:06:34 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>
References: <20030404203951.GA11365@meson.dyndns.org>
	<A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <20030404190634.5681aef5.itamar@itamarst.org>

On Fri, 4 Apr 2003 18:39:06 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I think we should stick with 1.0.4, since I think we should do the 
> release ASAP, and not wait until we have enough time to test newjelly 
> with all the applications that might need it.

And everyone can help by making sure they add changelog entries for any
new features/APIs they added since 1.0.3.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Fri Apr  4 20:12:09 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 4 Apr 2003 20:12:09 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>
References: <1049480936.10270.52.camel@troglodyte.funhouse> <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <20030405011209.GC956@radii>

On Fri, Apr 04, 2003 at 06:20:11PM -0500, Glyph Lefkowitz wrote:
> Let me give you some advice, from the last time I volunteered to do 
> this.  Corner Chris on IRC, get him to explain everything that needs to 
> be done, and then take it over.  Don't wait for him to agree that he 
> won't be available :-).

Glyph, you know me too well. I'll talk to Acap on IRC >:)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Sat Apr  5 04:12:14 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 5 Apr 2003 09:12:14 +0000
Subject: [Twisted-Python] Re: more thoughts on resumable async data flows
In-Reply-To: <b6hbjv$si1$1@main.gmane.org>
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org>
Message-ID: <20030405091214.GA94931@doublegemini.com>

On Thu, Apr 03, 2003 at 03:02:04PM +0200, Philippe Lafoucri?re wrote:
| how do you use it with adbapi ?? I mean, how do you use callbacks
| with your flow ?
|
| How does it work if a bloc has several inputs ?
| I want to do this :
| 
| DS1 ---> FS1 ---+
|                 +--->  FS3
| DS2 ---> FS2 ------->  FS3

If your queries are returning small results, ie, 
non-incremental, I would just set this up as a 
chain of Deferreds and not bother with flow as
it might be overkill for your needs.

In other words, in the twisted.enterprise.adbapi
when you run a query, it returns a deferred.  So
DS1 and DS2 would be those query results.

Your FS1 and FS2 should be deferred operations
as well, but fired via the 'addCallback' on 
DS1 and DS2 respectively.

Then FS3 is a DeferredList taking FS1 and FS2.

...

If you can use generators, for more complicated flows, 
etrepum's (Bob Ippolito's) approach may be better approach
to this, although I'm not sure how it would handle more
'fluid' flow through the process.  I need to understand
what he's doing better.   At first I thought his approach
is very different than mine, but I think (although I'm
not quite yet able to explain) that they are isomorphic;
only that I'm using a temp stack and he's using the 
event queue via a linked-list. 

...

As for the stuff in flow.py, right now it uses a thread
for each database connection.  Eventually for PostgreSQL,
I'd like to move over to a non-threaded driver.  Gerhard
was working on such a thing as I remember.  Also, it may
be renamed since extrepum was using "flow.py" before me.

Anyway, the database connection is done through a 
QueryIterator which basically sends a set of rows
(via fetchmany) on to the next stage.  So, the connection
from DS1 to FS1 and DS2 to FS2 could be done using 
a simple flow for each.  The problem in the flow module 
has to do with merging the two flows.  This can be done 
by using the 'context'.

In short, it would work, but I'm not sure that it's
your best option; and I'm still not quite happy with
flow.py myself (although it is in production).

Clark



From justin at gnubia.net  Sat Apr  5 15:20:11 2003
From: justin at gnubia.net (Justin Ryan)
Date: 05 Apr 2003 14:20:11 -0600
Subject: [Twisted-Python] enterprise.row
Message-ID: <1049574011.1503.45.camel@qutang.gnubian.org>

I'm attempting to implement a simple database application (again) using
twisted.enterprise.row.  Perhaps my failure to do so successfully in the
past should be a hint that I should give up, but the concept seems
really cool, and I keep getting closer.

I'm running into an issue that no doubt has something to do with my lack
of understanding of t.e.row.  I've been wanting to try it for a while,
and decided to design a simple database with the goal of implementing a
simple application using t.e.row.  In any case, it seems I am angering
row.  My first attempt at using it was to try and create/insert a new
row, and i received the following exception:

<- snip ->
Traceback (most recent call last):
  File "Zone.py", line 33, in ?
    reflector.insertRow(newZone).addCallback(onInsert)
  File
"/usr/lib/python2.2/site-packages/twisted/enterprise/sqlreflector.py",
line 308, in insertRow
    sql = self.insertRowSQL(rowObject)
  File
"/usr/lib/python2.2/site-packages/twisted/enterprise/sqlreflector.py",
line 301, in insertRowSQL
    args.append(self.quote_value(rowObject.findAttribute(column), type))
  File "/usr/lib/python2.2/site-packages/twisted/enterprise/row.py",
line 87, in findAttribute
    return getattr(self, attr)
AttributeError: ZONE_SOA instance has no attribute 'ZONE_SOAID'
<- snip ->

"ZONE_SOAID" is the primary key for the "ZONE_SOA" table.  I did not set
the primary key because it is a postgres serial column - that is, it
should automatically increment the pkey each time a new row is
inserted.  If I use setKeyAttr("ZONE_SOAID", 1), the AttributeError
comes up for the next attribute that is not being given a value.

I read the row documentation a little more, and it doesn't appear to
like what I'm trying to do all too much.  I can use python to fill the
object with default values, but the database will do that for me, and
with less work on the part of my application (plus, the KeyFactory class
says it is not thread-safe, I know that my postgres series is).

Is there any way for row to allow me to insert a new row with some empty
values, and simply ignore them (allowing the database to use its'
default)?  If not, any idears on where/how this might need to be done? 
Perhaps this is a good time for me to foray into twisted hacking..

TIA,

-Justin




From cce at clarkevans.com  Sat Apr  5 18:14:16 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 5 Apr 2003 23:14:16 +0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
Message-ID: <20030405231416.GA97462@doublegemini.com>

Toward the end of the discussion this past morning, we seemed
to have come to the agreement that start/stop/restart behavior
does not belong in twistd.  So, I've taken my original submit
and rephrased it as 'twistctl' which is a wrapper on twistd
providing those features.   

To get twistctl to work nicely with twistd, a few refactors
in twistd were needed:

  1.  refactor runApp to factor out the signal code into
      'signalApp' so that killApp in twistctl could use it.
      In general, runApp is quite huge and could use 
      a few breakdowns anyway

  2.  refactor the code to get the passphrase (if the
      application is encrypted) and the code which 
      parses options in run() into a 'parseOptions'
      method so that it can be called from twistctl

  Neither of these changes affect behavior, they only
  expose chunks of reusable code for twistctl

This is a first pass of this, and I'd like to do two
things in the repository: (a) commit the twistd.py.diff
changes, and (b) to put twistctl into the sandbox so
that people can play with it over the next month or
so and after we have a better idea of how it should
behave, we can then add it to the scripts directory.

The twistctl script needs help in many areas: 

  1. Moshez objected to the killApp implementation,
     when I get time I'll look at it.  But right now
     it works on my platform just wonderfully.
     The beauty of open source projects is that people
     can hack at it till it works for everyone...

  2. The restartApp and startApp behavior are not 
     exactly clear as to how they should use -shutdown.tap
     and a bit more research and experimenting is
     needed before this should be formalized.  Really,
     I'm still too new to taps to grok this fully.

In particular, Moshez said that he thinks this script
should *call* the twistd script via OS methods and
thus the refactor above is not needed.  I respectfully
disagree with his assertion.   Calling python from python
via python call mechanism is far superior as it allows
for better error handling, is less platform dependent,
and numerous other factors; such as being able to 
send a passphrase between the two modules easily.

Anyway, please comment.  And Glyph, I'd like permission
to commit the twistd.py.diff as specified below.

Clark
-------------- next part --------------
--- twistd.py.orig	Sat Apr  5 17:37:59 2003
+++ twistd.py	Sat Apr  5 17:36:14 2003
@@ -1,4 +1,3 @@
-
 # Copyright (C) 2001 Matthew W. Lefkowitz
 #
 # This library is free software; you can redistribute it and/or
@@ -190,11 +189,11 @@
     return filename, decode, mode
 
 
-def loadApplication(config, passphrase):
+def loadApplication(config):
     filename, decode, mode = createApplicationDecoder(config)
     if config['encrypted']:
         data = open(filename, 'rb').read()
-        data = decrypt(passphrase, data)
+        data = decrypt(config['passphrase'], data)
         try:
             return decode(filename, data)
         except:
@@ -211,6 +210,33 @@
     import pdb
     pdb.set_trace()
 
+def signalApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            msg = 'Pidfile %s contains non numeric value'
+            sys.exit(msg % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                msg = 'Can\'t check status of PID %s from pidfile %s: %s'
+                sys.exit(msg % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -238,39 +264,11 @@
         # only posix can fork, and debugging requires nodaemon
         config['nodaemon'] = 1
 
-    if config['encrypted']:
-        import getpass
-        passphrase = getpass.getpass('Passphrase: ')
-    else:
-        passphrase = None
-
     # Load the servers.
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    signalApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -316,7 +314,7 @@
     log.msg('reactor class: %s' % reactor.__class__)
 
     try:
-        application = loadApplication(config, passphrase)
+        application = loadApplication(config)
     except Exception, e:
         s = "Failed to load application: %s" % (e,)
         traceback.print_exc(file=log.logfile)
@@ -457,18 +455,22 @@
             log.err("--report-profile specified but application has no name (--appname unspecified)")
     log.msg("Server Shut Down.")
 
-
-def run():
+def parseOptions(config):
     # make default be "--help"
     if len(sys.argv) == 1:
         sys.argv.append("--help")
-
-    config = ServerOptions()
     try:
         config.parseOptions()
     except usage.error, ue:
         config.opt_help()
         print "%s: %s" % (sys.argv[0], ue)
         os._exit(1)
+    if config['encrypted']:
+        import getpass
+        config['passphrase'] = getpass.getpass('Passphrase: ')
+    else:
+        config['passphaase'] = None
+    return config
 
-    runApp(config)
+def run():
+    runApp(parseOptions(ServerOptions()))
-------------- next part --------------
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes

from twisted.scripts import twistd
from twisted.python import usage

class ServerOptions(twistd.ServerOptions):
    synopsis = "Usage: twistctl [options] [start|stop|restart]"

    subCommands = [['start', None, usage.Options, 
                    'starts the application requested (default)'],
                   ['stop', None, usage.Options,
                    'shuts the given application down if it is running'],
                   ['restart',None, usage.Options,
                    'restarts the application']] 

def stopApp(config):
    from signal import SIGTERM
    from os.path import exists
    from time import sleep
    twistd.signalApp(config, SIGTERM)
    nWait = 0  # processes do not die instantly
    while exists(config['pidfile']) and nWait < 20:
        sleep(.1)
        nWait += 1

def restartApp(config):
    stopApp(config)
    runApp(config)

def run():
    config = twistd.parseOptions(ServerOptions())
    cmd = getattr(config,'subCommand','start')
    if 'stop'    == cmd: return stopApp(config)
    if 'restart' == cmd: return restartApp(config)
    twistd.runApp(config)

From m at moshez.org  Sun Apr  6 01:44:41 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 Apr 2003 06:44:41 -0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
In-Reply-To: <20030405231416.GA97462@doublegemini.com>
References: <20030405231416.GA97462@doublegemini.com>
Message-ID: <20030406064441.19318.qmail@green.zadka.com>

On Sat, 5 Apr 2003, "Clark C. Evans" <cce at clarkevans.com> wrote:

>   1. Moshez objected to the killApp implementation,
>      when I get time I'll look at it.  But right now
>      it works on my platform just wonderfully.
>      The beauty of open source projects is that people
>      can hack at it till it works for everyone...

No, that's not a beauty.
Let me explain: checking something which "works for me, usually, when
my machine is not heavily loaded" is the worst thing that you can do.
Intermittent failures are *worse* than deterministic failures. Do you
seriously want something that you can't rely on?
It's not that hard to have an algorithm which is correct. Find one,
and code it.

> In particular, Moshez said that he thinks this script
> should *call* the twistd script via OS methods and
> thus the refactor above is not needed.  I respectfully
> disagree with his assertion.

Let me explain: the interface to twistd is well defined. It's documented
in the manpage. We are commited to maintaining backwards compatibility with
it. What you're doing with the refactor is forcing parts of the internal
twistd implementation to stay static. This is insane. We should not add
extra interfaces where existing ones will do. If "twistd" is not on your
path, just fix your Twisted installation. I fail to see how catering
for broken installations is in any way a good idea. Also, if you call
twistd via the OS, then on such places where both twistd2.1 and twistd2.2
scripts exist, *your script* only has to be available once, since it can
receive the name of the binary which has to be run. I'm not going to even
start talking about how most of the twistd flexibility is not needed,
since in real daemons which run from init scripts, the tap cannot be
encrypted anyway, since the key would have to be available to the script.

If you write the twistdctl, and it is actually working on more than one
platform, *and* there is a significant advantage in making it directly
Python->Python, then you can start thinking of adding more places where
we have to promise backwards compatibility in order not to break stuff.
Notice that this is an especially sore point for stuff like twistdctl
which is naturally harder to test in unit tests.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From dave at krondo.com  Sun Apr  6 04:49:06 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Apr 2003 00:49:06 -0800
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049574011.1503.45.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
Message-ID: <1049618946.20886.598.camel@oneiros>

On Sat, 2003-04-05 at 12:20, Justin Ryan wrote:
> "ZONE_SOAID" is the primary key for the "ZONE_SOA" table.  I did not set
> the primary key because it is a postgres serial column - that is, it
> should automatically increment the pkey each time a new row is
> inserted.  If I use setKeyAttr("ZONE_SOAID", 1), the AttributeError
> comes up for the next attribute that is not being given a value.
> 
> I read the row documentation a little more, and it doesn't appear to
> like what I'm trying to do all too much.  I can use python to fill the
> object with default values, but the database will do that for me, and
> with less work on the part of my application (plus, the KeyFactory class
> says it is not thread-safe, I know that my postgres series is).

I think your diagnosis is correct. The current t.e code does not handle
default values in the database schema, afaik. Given that, and the fact
that the reflector wants to cache rows by primary keys, it can't support
leaving primary keys unset before you create a new row.


> Is there any way for row to allow me to insert a new row with some empty
> values, and simply ignore them (allowing the database to use its'
> default)?  If not, any idears on where/how this might need to be done? 
> Perhaps this is a good time for me to foray into twisted hacking..

What I have done with postgres is to generate the primay key using
the nextval function on the sequence used for the serial column, setting
the row object's primary key, and then inserting it. This makes the t.e
code happy and you often need to know the new key anyway.

It would be nice to make t.e allow for default values and db-generated
primary keys, but that code would almost certainly need to be 
per-database since different databases handle serial/autoincrement
columns differently.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030406/f78f2a53/attachment.pgp 

From cce at clarkevans.com  Sun Apr  6 12:37:36 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 6 Apr 2003 16:37:36 +0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
In-Reply-To: <20030406064441.19318.qmail@green.zadka.com>
References: <20030405231416.GA97462@doublegemini.com> <20030406064441.19318.qmail@green.zadka.com>
Message-ID: <20030406163736.GA319@doublegemini.com>

Howdy Moshe!

On Sun, Apr 06, 2003 at 06:44:41AM -0000, Moshe Zadka wrote:
| >   1. Moshez objected to the killApp implementation,
| >      when I get time I'll look at it.  But right now
| >      it works on my platform just wonderfully.
| >      The beauty of open source projects is that people
| >      can hack at it till it works for everyone...
| 
| No, that's not a beauty.
| Let me explain: checking something which "works for me, usually, when
| my machine is not heavily loaded" is the worst thing that you can do.
| Intermittent failures are *worse* than deterministic failures. Do you
| seriously want something that you can't rely on?

Yes, you convinced me that the implementation sucks.  This is
why I'm proposing to check it in to the *sandbox* which has 
explicit warnings about broken code.   Once it is there it
can be worked on incrementally... perhaps by people other
than me.  If it stays private then we will have N people
working on the same thing without a chance of collaboration.

| > In particular, Moshez said that he thinks this script
| > should *call* the twistd script via OS methods and
| > thus the refactor above is not needed.  I respectfully
| > disagree with his assertion.
| 
| Let me explain: the interface to twistd is well defined. It's documented
| in the manpage. We are commited to maintaining backwards compatibility with
| it. What you're doing with the refactor is forcing parts of the internal
| twistd implementation to stay static. This is insane. We should not add
| extra interfaces where existing ones will do.

I would hardly call it an extra burden, calling it insane is a
bit over-the-top...  in any case, the refactor makes sense even
without users -- runApp is quite large and the code to fetch
the passphrase really belongs more up-stream.

| I'm not going to even start talking about how most of the twistd 
| flexibility is not needed, since in real daemons which run from 
| init scripts, the tap cannot be encrypted anyway, since the key 
| would have to be available to the script.

I'm not defending twistd, but it does seem to have a wee
bit more functionality than making twisted applications
into daemons.   Perhaps you should refactor it by moving
what *you* think twistd should be into its own module
and make it callable from twistd.   Something like
twisted.python.daemonize would be clean.  No?

Best,

Clark



From cce at clarkevans.com  Sun Apr  6 13:53:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 6 Apr 2003 17:53:04 +0000
Subject: [Twisted-Python] coding standard: plurals for database table names
Message-ID: <20030406175304.GA756@doublegemini.com>

I noticed  in the Twisted Coding Standard that...

   "Database tables shall be named with plural nouns"

I'd like to question this standard for several reasons:

  1. There is not one single rule for forming plurals.
     In particular, some plurals have the same spelling
     as their singluar, 'deer'; furthermore some plurals
     have different forms, 'people' instead of 'persons'.
     Sometimes it is 's' or 'es'.  These differences are
     especially hard for those who have English as a 
     a second language.
     
  2. Tables are to rows as classes are to instances.
     We name Classes singluar, and as such tables should
     also be singluar.  This makes mapping rules easier.

  3. It is helpful to name foreign key columns as the
     same name as the table that they are coming from.
     And it makes little sense to use plurals for 
     column names, for example, when the person table
     may have a 1-M relationship with address, it could
     have a 'address' column name, which is obviously
     a foreign key to the 'address' table.   If you used
     plurals for the table name it brings up the 
     question... do you use plurals for the column name?
     I've seen it done.  *ick*

  4. I often use the double underscore method for link
     tables which represent M-M relationships.  In this
     case good names are hard to find.  For example, a
     link from a person to their address... how do you
     name this?   I use person__address.  If you use
     plurals then this becomes persons__addresses, 
     dooable but ugly.

  5. While there are astechic reasons for this (above)
     the resons become all the more important when 
     you want to build automatic tools for searching 
     over schemata, etc.  In this case, using plurals
     only adds one extra (unnecessary) step in the
     automated translation of plural table names to 
     singluar column and or class names.

In short, I'd recommend singluar nouns, with M-M
link tables as one__two where one and two are 
tables being linked to.

Best,

Clark



From golux at comcast.net  Sun Apr  6 14:26:13 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 06 Apr 2003 14:26:13 -0400
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <20030406175304.GA756@doublegemini.com>
References: <20030406175304.GA756@doublegemini.com>
Message-ID: <1049653574.978.67.camel@golux>

On Sun, 2003-04-06 at 13:53, Clark C. Evans wrote:
> I noticed  in the Twisted Coding Standard that...
> 
>    "Database tables shall be named with plural nouns"
> 
> I'd like to question this standard for several reasons:
> [ some trimming for brevity ]
> 
>   3. It is helpful to name foreign key columns as the
>      same name as the table that they are coming from.

What if you have more than one foreign key to the same 
table?  A very simple example (from my app ;^):  the 
attributes "owner", "creator", and "modifier" all point 
to the "persons" table.  As a rule of thumb, it's usually 
best to name the foreign key column after the role that 
the foreign key entity plays in the referring table.

>   5. While there are astechic reasons for this (above)
>      the resons become all the more important when 
>      you want to build automatic tools for searching 
>      over schemata, etc.  In this case, using plurals
>      only adds one extra (unnecessary) step in the
>      automated translation of plural table names to 
>      singluar column and or class names.

I didn't think it was all that difficult.  I can send you
the O-R mapping I use, if you like.

> In short, I'd recommend singluar nouns, with M-M
> link tables as one__two where one and two are 
> tables being linked to.

One could reasonably argue that it is not important to have 
a table-naming rule in the coding standard.  I don't really 
care either way, but I happen to like using plural names for 
tables, and I'll use it regardless of what the Twisted coding std 
says anyhow, because I use my own O-R mapping instead of t.e.row 
(mine is different from t.e.row in many ways, but it does map plural 
table names to singular object names ;^).

Cheers,
- Steve.





From justin at gnubia.net  Sun Apr  6 14:56:06 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 13:56:06 -0500
Subject: [Twisted-Python] coding standard: plurals for database
	table	names
In-Reply-To: <1049653574.978.67.camel@golux>
References: <20030406175304.GA756@doublegemini.com>
	 <1049653574.978.67.camel@golux>
Message-ID: <1049655366.6953.282.camel@qutang.gnubian.org>

> >   3. It is helpful to name foreign key columns as the
> >      same name as the table that they are coming from.
> 
> What if you have more than one foreign key to the same 
> table?  A very simple example (from my app ;^):  the 
> attributes "owner", "creator", and "modifier" all point 
> to the "persons" table.  As a rule of thumb, it's usually 
> best to name the foreign key column after the role that 
> the foreign key entity plays in the referring table.

A combination of both is best - i.e.

CONT_Contact
  CONT_ContactID FirstName LastName CONT_ContactTypeID

CONT_ContactType
  CONT_ContactTypeID Name

CONT_Organization
  CONT_OrganizationID Name Address

CONT_xref_Contact_Organization
  CONT_ContactID CONT_OrganizationID

CONT_ContactTypeID is a primary key on CONT_ContactType, and a foreign
key on CONT_Contact.  The xref table CONT_xref_Contact_Organization is
obviously a relationship between Contacts and Organizations, and
CONT_ContactID is obviously a foreign key to CONT_Contact.

If you structure tables / references like this, it's very difficult to
miss a bug where the wrong fields are being joined.  This still falls in
line with the recommendation that table names should be singular.

I agree that the Table-Row relationship is similar to the Class-Instance
relationship.  I think that the existence of object relational mappers
like t.e.row support this paradigm.  It is easy to understand the
mapping of programmatical information into the structure of the database
if you can name a class after a table.  Then you have instances of
CONT.Contact and references to a CONT.ContactType instance and one or
more CONT.Organization instances.

You can create higher level objects to further the abstraction, having a
Contact with an organization and type attribute.

> >   5. While there are astechic reasons for this (above)
> >      the resons become all the more important when 
> >      you want to build automatic tools for searching 
> >      over schemata, etc.  In this case, using plurals
> >      only adds one extra (unnecessary) step in the
> >      automated translation of plural table names to 
> >      singluar column and or class names.
> 
> I didn't think it was all that difficult.  I can send you
> the O-R mapping I use, if you like.

I would like to see the O-R mapping that you use, simply to compare
ideas..  I still think singular table names are more logical ;p

> > In short, I'd recommend singluar nouns, with M-M
> > link tables as one__two where one and two are 
> > tables being linked to.

I think that my version with the 'xref' in the name is more readable.

> One could reasonably argue that it is not important to have 
> a table-naming rule in the coding standard.  I don't really 
> care either way, but I happen to like using plural names for 
> tables, and I'll use it regardless of what the Twisted coding std 
> says anyhow, because I use my own O-R mapping instead of t.e.row 
> (mine is different from t.e.row in many ways, but it does map plural 
> table names to singular object names ;^).

well, I beleive it's in the coding standard for the purpose of modules
that rely on a database schema of some sort.  It never hurts to develop
your code in line with the standards of a large framework you're using,
and if it doesn't make sense, you could question it (as we're doing
now).

Cheers,

-j




From justin at gnubia.net  Sun Apr  6 17:21:12 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 16:21:12 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049618946.20886.598.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
Message-ID: <1049656171.6953.312.camel@qutang.gnubian.org>

Dave,

Thanks for your response / comments..

> I think your diagnosis is correct. The current t.e code does not handle
> default values in the database schema, afaik. Given that, and the fact
> that the reflector wants to cache rows by primary keys, it can't support
> leaving primary keys unset before you create a new row.

I'm working on a patch that may allow this for key columns..

> What I have done with postgres is to generate the primay key using
> the nextval function on the sequence used for the serial column, setting
> the row object's primary key, and then inserting it. This makes the t.e
> code happy and you often need to know the new key anyway.

This will work but imho is a bit silly and not generally the way that I
expect a database application to work.  If I set the default value on a
column, I shouldn't have to handle that in my code.  Additionally, if
you have a large development team with a DBA who manages the DB schema,
changing the default value for a column shouldn't require a db change
_and_ a code change.. that's inefficient and bug prone..

> It would be nice to make t.e allow for default values and db-generated
> primary keys, but that code would almost certainly need to be 
> per-database since different databases handle serial/autoincrement
> columns differently.

I don't really see how allowing key columns to be ignored on an insert
would be database specific..  Ideally, whether or not a default value is
supplied by the database could be kept in rowColumns.  You could then
set a value to allow or disallow setting of key columns with a default
value provided by the database.  This would prevent twisted from
encountering errors, so long as you define your schema correctly. 
Additionally, it would be better for referential integrity's sake..

Anyway, I'd appreciate any comments on my ideas.  I'm evaluating
twisted, including t.e.row, as part of a proposal to migrate our entire
python toolkit to soap or xml-rpc using twisted.  Getting t.e.row to
work in such a way that our large database (515 relations, including
sequences) will not be at risk will be an important part of this task.

Cheers,

-Justin




From itamar at itamarst.org  Sun Apr  6 17:56:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 6 Apr 2003 17:56:44 -0400
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049656171.6953.312.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	<1049618946.20886.598.camel@oneiros>
	<1049656171.6953.312.camel@qutang.gnubian.org>
Message-ID: <20030406175644.5cdf9b49.itamar@itamarst.org>

On 06 Apr 2003 16:21:12 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Anyway, I'd appreciate any comments on my ideas.  I'm evaluating
> twisted, including t.e.row, as part of a proposal to migrate our
> entire python toolkit to soap or xml-rpc using twisted.  Getting
> t.e.row to work in such a way that our large database (515 relations,
> including sequences) will not be at risk will be an important part of
> this task.

You don't have to use t.e.row with Twisted. You can use any other
object/relational mapping system, or a custom one. That being said, the
row maintainer is no longer working on it, so if you want to take it up
and work on it that would be nice.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From justin at gnubia.net  Sun Apr  6 18:42:58 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 17:42:58 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <20030406175644.5cdf9b49.itamar@itamarst.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <20030406175644.5cdf9b49.itamar@itamarst.org>
Message-ID: <1049668978.6958.316.camel@qutang.gnubian.org>

> You don't have to use t.e.row with Twisted. You can use any other
> object/relational mapping system, or a custom one. That being said, the
> row maintainer is no longer working on it, so if you want to take it up
> and work on it that would be nice.

I would very much like to do this.  I've been digging around the code
and I feel pretty comfortable with it.  When you say that row has been
abandoned, does that include the reflectors and such as well?

Cheers,

-Justin




From jml at mumak.net  Sun Apr  6 18:40:43 2003
From: jml at mumak.net (Jonathan M. Lange)
Date: Mon, 7 Apr 2003 08:40:43 +1000
Subject: [Twisted-Python] epydoc-breaking microdom bug
Message-ID: <20030406224043.GA22604@mumak.net>


I've just attempted to generate API docs for twisted using epyrun, which uses
microdom. 

This fails when run with CVS latest, giving a "TypeError: unhashable instance"
when trying to hash a tuple of microdom.Element and something else.

At Moshe's suggestion, I removed the __eq__ methods from microdom in my local
copy, and generated the docs again. It generates the docs fine, but tests
break. Further, I was told that including the __eq__ methods makes the
behaviour of microdom incompatible with that of minidom, and that this is a
really bad thing.

I'm too zonked to patch things properly atm; could someone please fix microdom
and test_xml to not use / rely on __eq__ methods?

cheers,
jml

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030407/df9ed89e/attachment.pgp 

From lafou at wanadoo.fr  Sun Apr  6 09:39:30 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sun, 06 Apr 2003 15:39:30 +0200
Subject: [Twisted-Python] Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com>
Message-ID: <b6palq$e1n$1@main.gmane.org>

> If your queries are returning small results, ie,
> non-incremental, I would just set this up as a
> chain of Deferreds and not bother with flow as
> it might be overkill for your needs.

No, this may be used with a very large amount of data.

 
> In other words, in the twisted.enterprise.adbapi
> when you run a query, it returns a deferred.  So
> DS1 and DS2 would be those query results.

I agree with that
 
> Your FS1 and FS2 should be deferred operations
> as well, but fired via the 'addCallback' on
> DS1 and DS2 respectively.

How do you fire it exactly ? Moreover, the tutorial about deferred isn't so
clear for me (twisted newbie).
 
> Then FS3 is a DeferredList taking FS1 and FS2.

Just a note : this system may be dynamic. I mean that the user can create
the "flow" he wants (with various datasources and other blocs).

> If you can use generators, for more complicated flows,
> etrepum's (Bob Ippolito's) approach may be better approach
> to this, although I'm not sure how it would handle more
> 'fluid' flow through the process.  I need to understand
> what he's doing better.   At first I thought his approach
> is very different than mine, but I think (although I'm
> not quite yet able to explain) that they are isomorphic;
> only that I'm using a temp stack and he's using the
> event queue via a linked-list.
> 

I don't really know generators. I'm going to take a look at like tomorow...


> As for the stuff in flow.py, right now it uses a thread
> for each database connection.  Eventually for PostgreSQL,
> I'd like to move over to a non-threaded driver.  Gerhard
> was working on such a thing as I remember.  Also, it may
> be renamed since extrepum was using "flow.py" before me.
> 
> Anyway, the database connection is done through a
> QueryIterator which basically sends a set of rows
> (via fetchmany) on to the next stage.  So, the connection
> from DS1 to FS1 and DS2 to FS2 could be done using
> a simple flow for each.  The problem in the flow module
> has to do with merging the two flows.  This can be done
> by using the 'context'.

3 flows  ? (1 for DS1 to FS1, 1 for DS2 to FS2, and one the merge the 2
others) 

I was thinking of using only one flow. It's weird to seperate this process
in several flow, isn't it ?

 
> In short, it would work, but I'm not sure that it's
> your best option; and I'm still not quite happy with
> flow.py myself (although it is in production).

thank you for your help
 
> Clark

Thank very much Clark !
Philippe




From radix at twistedmatrix.com  Sun Apr  6 21:00:43 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Apr 2003 21:00:43 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] cleanup after test
In-Reply-To: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
References: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
Message-ID: <20030407010043.GE956@radii>

On Sun, Apr 06, 2003 at 02:30:44PM -0500, warner CVS wrote:
> Modified files:
> Twisted/twisted/test/test_journal.py 1.8 1.9
> 
> Log message:
> cleanup after test

Hmm, what's the point of this? I thought any files you create get
stored in the _trial_temp directory (because trial os.chdir()s, or
something), which is explicitly left around for post-mortem
debugging. Or were these tests creating files explicitly in other
locations?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Sun Apr  6 21:11:48 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Apr 2003 21:11:48 -0400
Subject: [Twisted-Python] epydoc-breaking microdom bug
In-Reply-To: <20030406224043.GA22604@mumak.net>
References: <20030406224043.GA22604@mumak.net>
Message-ID: <20030407011148.GF956@radii>

On Mon, Apr 07, 2003 at 08:40:43AM +1000, Jonathan M. Lange wrote:

> This fails when run with CVS latest, giving a "TypeError: unhashable instance"
> when trying to hash a tuple of microdom.Element and something else.
> 
> At Moshe's suggestion, I removed the __eq__ methods from microdom in my local
> copy, and generated the docs again. It generates the docs fine, but tests
> break. Further, I was told that including the __eq__ methods makes the
> behaviour of microdom incompatible with that of minidom, and that this is a
> really bad thing.
> 
> I'm too zonked to patch things properly atm; could someone please fix microdom
> and test_xml to not use / rely on __eq__ methods?

I think all that needs to be done is to add a __hash__ method. Just
make it return id(self) (which is how all instances are hashed by
default -- unless they have an __eq__, for some reason).

I don't know what's up with the microdom/minidom compatibility,
though.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From itamar at itamarst.org  Sun Apr  6 21:30:21 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 6 Apr 2003 21:30:21 -0400
Subject: [Twisted-Python] epydoc-breaking microdom bug
In-Reply-To: <20030407011148.GF956@radii>
References: <20030406224043.GA22604@mumak.net>
	<20030407011148.GF956@radii>
Message-ID: <20030406213021.3753e012.itamar@itamarst.org>

On Sun, 6 Apr 2003 21:11:48 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think all that needs to be done is to add a __hash__ method. Just
> make it return id(self) (which is how all instances are hashed by
> default -- unless they have an __eq__, for some reason).

Done.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Sun Apr  6 22:35:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 02:35:19 +0000
Subject: [Twisted-Python] Re: Re: more thoughts on resumable async data flows
In-Reply-To: <b6palq$e1n$1@main.gmane.org>
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org>
Message-ID: <20030407023519.GA1707@doublegemini.com>

On Sun, Apr 06, 2003 at 03:39:30PM +0200, Philippe Lafoucri?re wrote:
| How do you fire it exactly ? Moreover, the tutorial about deferred isn't so
| clear for me (twisted newbie).


The one in CVS is a bit better, bu t it still isn't by
any means perfect.  Basically 'deferred' is just a 
mechanism for managing callback chains (and errors).
|  
| > Then FS3 is a DeferredList taking FS1 and FS2.
| 
| Just a note : this system may be dynamic. I mean that the user can create
| the "flow" he wants (with various datasources and other blocs).

*nods*

| > As for the stuff in flow.py, right now it uses a thread
| > for each database connection.  Eventually for PostgreSQL,
| > I'd like to move over to a non-threaded driver.  Gerhard
| > was working on such a thing as I remember.  Also, it may
| > be renamed since extrepum was using "flow.py" before me.
| > 
| > Anyway, the database connection is done through a
| > QueryIterator which basically sends a set of rows
| > (via fetchmany) on to the next stage.  So, the connection
| > from DS1 to FS1 and DS2 to FS2 could be done using
| > a simple flow for each.  The problem in the flow module
| > has to do with merging the two flows.  This can be done
| > by using the 'context'.
| 
| 3 flows  ? (1 for DS1 to FS1, 1 for DS2 to FS2, and one the merge the 2
| others) 

Yes.  In my original version, when you see 'flow' think of
a pipeline.  It was the first approximation.  I'm not totally
happy with it...

| I was thinking of using only one flow. It's weird to seperate this process
| in several flow, isn't it ?

Well, your diagram sort of implies a parallel nature, which 
wasn't part of my original requirements.  I have that need
now, so flow needs to be updated to respect this.

If you want to go over this via phone, and you are in the US
or Canada I'd be happy to drop you a line... just send me
your phone number and a good time.

Best,

Clark



From warner at lothar.com  Sun Apr  6 23:56:28 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 06 Apr 2003 20:56:28 -0700 (PDT)
Subject: [Twisted-Python] Re: [Twisted-commits] cleanup after test
References: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
 <20030407010043.GE956@radii>
Message-ID: <20030406.205628.128713269.warner@lothar.com>

> > Twisted/twisted/test/test_journal.py 1.8 1.9
> > 
> > Log message:
> > cleanup after test
> 
> Hmm, what's the point of this? I thought any files you create get
> stored in the _trial_temp directory (because trial os.chdir()s, or
> something), which is explicitly left around for post-mortem
> debugging. Or were these tests creating files explicitly in other
> locations?

Both test_journal and test_logfile use tempfile.mktemp(), which creates new
directories in /tmp. Neither one removed the generated files (test_logfile
had code to do it, but it was commented out). pyramid had nearly a thousand
spurious /tmp/@1234.5 directories, all owned by me because the buildbot was
creating another dozen or so each time the test suite got run.

Those two tests could probably be modified to create temp file in the current
directory, but that change seemed like it had a higher probability of
failing.

cheers,
 -Brian

PS: folks who have run tests on pyramid, please check /tmp/ (and /tmp in the
sid-chroot) for leftover @1234.5 directories and delete them. You'll have to
do a 'chmod a+rwx' on them first because of a bug in the old cleanup code
(chmod(777) instead of chmod(0777)).



From justin at gnubia.net  Mon Apr  7 00:27:46 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 23:27:46 -0500
Subject: [Twisted-Python] [PATCH] row / reflector / sqlreflector - case insensitive
 tables/columns
Message-ID: <1049689666.6953.355.camel@qutang.gnubian.org>

Attached is a patch (cvs diff -u) to twisted.enterprise.row (and related
code).  Specifically, it affects the following files:

twisted/enterprise/row.py
twisted/enterprise/reflector.py
twisted/enterprise/sqlreflector.py
twisted/enterprise/util.py

The purpose is to allow for case-sensitive table/column names.  For me,
there are two parts to this:

(1) lots of comparisons in twisted use string.lower
(RowObject.__getattr__(), etc..).  There, theoretically, shouldn't be
any column names that are the same except for their case, but it still
seems logical to allow for case-sensitivity.  This change depends on the
RowObject's case_sensitive_relations attribute (which must be set by
child classes).

(2) I use postgres, and postgres requires you to enclose mixed-case
relation names in double quotes.  Thus, twisted needs to quote table
names, column names, etc..  This change depends on the sqlreflector's
quote_relations attribute, which can be passed as a keyword paramater to
sqlreflector.__init__().

I have given this some basic testing, but am mostly posting it for
scrutiny whilst I continue to work on it.  I think there are some areas
that can be improved, but it works and is pretty clean.

I think that this would be an appropriate time to state my intent to
become the maintainer of the row code, since it has apparently become
abandoned.  I have several other changes in mind, including the ability
to insert new rows without setting their primary keys and such, but I
thought that I should start submitting patches for little stuff to make
sure that the code I'm writing is sane for twisted.

TIA,

-Justin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: row-case.diff.final
Type: text/x-patch
Size: 9837 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030406/13708381/attachment.bin 

From justin at gnubia.net  Mon Apr  7 03:44:37 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 02:44:37 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049618946.20886.598.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
Message-ID: <1049701477.6953.383.camel@qutang.gnubian.org>

> What I have done with postgres is to generate the primay key using
> the nextval function on the sequence used for the serial column, setting
> the row object's primary key, and then inserting it. This makes the t.e
> code happy and you often need to know the new key anyway.

Could you post the code that does this, or a simple example of how you
are doing it?

Thanks!

-Justin




From dave at krondo.com  Mon Apr  7 04:30:11 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 01:30:11 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049656171.6953.312.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
Message-ID: <1049704211.19679.18.camel@oneiros>

On Sun, 2003-04-06 at 14:21, Justin Ryan wrote:
> > What I have done with postgres is to generate the primay key using
> > the nextval function on the sequence used for the serial column, setting
> > the row object's primary key, and then inserting it. This makes the t.e
> > code happy and you often need to know the new key anyway.
> 
> This will work but imho is a bit silly and not generally the way that I
> expect a database application to work.  If I set the default value on a
> column, I shouldn't have to handle that in my code.  Additionally, if
> you have a large development team with a DBA who manages the DB schema,
> changing the default value for a column shouldn't require a db change
> _and_ a code change.. that's inefficient and bug prone..

Sure, I'm not saying it's the best way, just the way I've done it 
before.


> > It would be nice to make t.e allow for default values and db-generated
> > primary keys, but that code would almost certainly need to be 
> > per-database since different databases handle serial/autoincrement
> > columns differently.
> 
> I don't really see how allowing key columns to be ignored on an insert
> would be database specific..  Ideally, whether or not a default value is

I don't think I fully articulated my thoughts. Currently the 'reflector'
code caches the rows you create. So, ideally, if the database is going
to set default values on a new row, you'd like the reflector to update
the row object with whatever values the database chose to maintain
consistency between the row object and the database. I haven't
thought about it too closely, but it seems to me that there's no
way to implement that in a database-independent way, but maybe I'm
just missing something.

What do you think?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030407/0e14a623/attachment.pgp 

From dave at krondo.com  Mon Apr  7 04:42:08 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 01:42:08 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049701477.6953.383.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049701477.6953.383.camel@qutang.gnubian.org>
Message-ID: <1049704928.19679.26.camel@oneiros>

On Mon, 2003-04-07 at 00:44, Justin Ryan wrote:
> > What I have done with postgres is to generate the primay key using
> > the nextval function on the sequence used for the serial column, setting
> > the row object's primary key, and then inserting it. This makes the t.e
> > code happy and you often need to know the new key anyway.
> 
> Could you post the code that does this, or a simple example of how you
> are doing it?

One strategy I used was to subclass SQLReflector for postgres
databases like so:

class PGSQLReflector(SQLReflector):

    def newRow(self, row_class, template=None):
        return self.runInteraction(self._newRow, row_class, template)

    def _newRow(self, transaction, row_class, template=None):
        row = row_class()

        if template is not None:
            for column, _ in row_class.rowColumns:
                if (hasattr(template, column) and
                    not getKeyColumn(row_class, column)):
                    setattr(row, column, getattr(template, column))

        for key, _ in row_class.rowKeyColumns:
            sql = "SELECT NEXTVAL('%s');" % row_class.keyGenerators[key]
            transaction.execute(sql)
            val = transaction.fetchone()[0]
            row.assignKeyAttr(key, long(val))

        return row

This requires that you specify the names of the sequences used
to generate the keys in the row class. Obviously this code isn't
very general, since it assumes keys will always be generated by 
sequences.

For your extensions which allow defaults, it might be better
to insert the row and then use the 'lastval' function to find
out what key was assigned to the row.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030407/f1d0b846/attachment.pgp 

From imunoz at daipro.net  Mon Apr  7 05:09:37 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Mon, 7 Apr 2003 11:09:37 +0200
Subject: [Twisted-Python] Oscar protocol information?
Message-ID: <004001c2fce5$6b499550$78924fd4@isidro>

Hello.

Where could I find information of Oscar protocol (AIM)?

Thanks.
Isidro Mu?oz.




From bob at redivi.com  Mon Apr  7 06:58:06 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 7 Apr 2003 06:58:06 -0400
Subject: [Twisted-Python] Copyright issues in the sandbox?
Message-ID: <CFEC2291-68E7-11D7-9A7D-000A95686CD8@redivi.com>

Two quick legalityish questions:

1) Is it acceptable to commit sets.py (from Python 2.3) into the sandbox
2) I made a pure python (2.2.x+) implementation of itertools, but I 
stole 99% of the code from the "Equivalent to:" text in the 
documentation for the C module ( 
http://www.python.org/dev/doc/devel/lib/itertools-functions.html ), is 
that legal to put into the sandbox?

-bob




From justin at gnubia.net  Mon Apr  7 09:43:29 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 08:43:29 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049704211.19679.18.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
Message-ID: <1049723009.10840.386.camel@qutang.gnubian.org>

> > I don't really see how allowing key columns to be ignored on an insert
> > would be database specific..  Ideally, whether or not a default value is
> 
> I don't think I fully articulated my thoughts. Currently the 'reflector'
> code caches the rows you create. So, ideally, if the database is going
> to set default values on a new row, you'd like the reflector to update
> the row object with whatever values the database chose to maintain
> consistency between the row object and the database. I haven't
> thought about it too closely, but it seems to me that there's no
> way to implement that in a database-independent way, but maybe I'm
> just missing something.
> 
> What do you think?

Welll...

I think that if you insert a row and allow the database to assign the
pkey, you can select out the pkey.  I'm not sure this is more efficient
than selecting nextval() before insert, but it would be more
database-independent..




From justin at gnubia.net  Mon Apr  7 09:46:25 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 08:46:25 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049704928.19679.26.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049701477.6953.383.camel@qutang.gnubian.org>
	 <1049704928.19679.26.camel@oneiros>
Message-ID: <1049723185.6953.390.camel@qutang.gnubian.org>

> This requires that you specify the names of the sequences used
> to generate the keys in the row class. Obviously this code isn't
> very general, since it assumes keys will always be generated by 
> sequences.

Can you subclass KeyFactory to do something like this I wonder?

> For your extensions which allow defaults, it might be better
> to insert the row and then use the 'lastval' function to find
> out what key was assigned to the row.

Not a bad idear - I missed this before sending my last post.  I beleive
that what I may do is allow for this in an abstract, db-independent way,
and then provide an example PSQLReflector that is db-dependent.  We
shall see ;p

Thanks again!

-Justin




From david at acz.org  Mon Apr  7 12:28:35 2003
From: david at acz.org (David Phillips)
Date: Mon, 7 Apr 2003 11:28:35 -0500
Subject: [Twisted-Python] enterprise.row
References: <1049574011.1503.45.camel@qutang.gnubian.org> <1049618946.20886.598.camel@oneiros> <1049656171.6953.312.camel@qutang.gnubian.org> <1049704211.19679.18.camel@oneiros> <1049723009.10840.386.camel@qutang.gnubian.org>
Message-ID: <004301c2fd22$bc661fc0$0201a8c0@brinstar>

Justin Ryan writes:
> I think that if you insert a row and allow the database to assign the
> pkey, you can select out the pkey.  I'm not sure this is more
> efficient than selecting nextval() before insert, but it would be more
> database-independent..

Some databases have an efficient way to get the key for the last row that
was inserted.  MySQL, for example, has mysql_insert_id() and
LAST_INSERT_ID():

http://www.mysql.com/doc/en/mysql_insert_id.html
http://www.mysql.com/doc/en/Miscellaneous_functions.html#IDX1347

--
David Phillips <david at acz.org>
http://david.acz.org/




From jdub at perkypants.org  Mon Apr  7 13:54:20 2003
From: jdub at perkypants.org (Jeff Waugh)
Date: Tue, 8 Apr 2003 03:54:20 +1000
Subject: [Twisted-Python] libivykis: Useful for Twisted?
Message-ID: <20030407175420.GY3705@lazarus>

"libivykis is a thin wrapper over various OS'es implementation of I/O
readiness notification facilities (sich as poll(2), kqueue(2)) and is mainly
intended for writing portable high-performance network servers."

Useful for Twisted? (spiv was telling me about unreleased epoll goodness,
perhaps this will help the Free World?)

- Jeff

-- 
GU4DEC: June 16th-18th in Dublin, Ireland             http://www.guadec.org/
 
       "Have you ever kissed a girl?" - Bryan Cantrill to Dave Miller



From itamar at itamarst.org  Mon Apr  7 13:57:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 7 Apr 2003 13:57:47 -0400
Subject: [Twisted-Python] libivykis: Useful for Twisted?
In-Reply-To: <20030407175420.GY3705@lazarus>
References: <20030407175420.GY3705@lazarus>
Message-ID: <20030407135747.76354cfe.itamar@itamarst.org>

On Tue, 8 Apr 2003 03:54:20 +1000
Jeff Waugh <jdub at perkypants.org> wrote:

> "libivykis is a thin wrapper over various OS'es implementation of I/O
> readiness notification facilities (sich as poll(2), kqueue(2)) and is
> mainly intended for writing portable high-performance network
> servers."
> 
> Useful for Twisted? (spiv was telling me about unreleased epoll
> goodness, perhaps this will help the Free World?)

Yes. Looks like we could use this as a basis for a cReactor, and
automatically get platform specific high-performance I/O. There might be
some benefit in a python reactor using a C extension, but that is less
certain.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From fog at initd.org  Mon Apr  7 14:15:37 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Apr 2003 20:15:37 +0200
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <004301c2fd22$bc661fc0$0201a8c0@brinstar>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
	 <1049723009.10840.386.camel@qutang.gnubian.org>
	 <004301c2fd22$bc661fc0$0201a8c0@brinstar>
Message-ID: <1049739337.916.15.camel@momo.initd.org>

Il lun, 2003-04-07 alle 18:28, David Phillips ha scritto:
> Justin Ryan writes:
> > I think that if you insert a row and allow the database to assign the
> > pkey, you can select out the pkey.  I'm not sure this is more
> > efficient than selecting nextval() before insert, but it would be more
> > database-independent..
> 
> Some databases have an efficient way to get the key for the last row that
> was inserted.  MySQL, for example, has mysql_insert_id() and
> LAST_INSERT_ID():

DBAPI-2.0 defines an optional .lastrowid attribute on cursors.
 
-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                      The number of the beast: vi vi vi. -- Delexa Jones
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030407/c41bf2ed/attachment.pgp 

From mclay at python.net  Mon Apr  7 15:00:09 2003
From: mclay at python.net (Michael McLay)
Date: Mon, 7 Apr 2003 15:00:09 -0400
Subject: [Twisted-Python] Twisted systems talking to one another
Message-ID: <200304071500.09093.mclay@python.net>

Are there any examples of having two twisted servers exchanging information. 
The scenario I need to automate is one in which an Original Equipment 
Manufacturer (OEM) negotiating a contract with an Electronic Manufacturer 
Systems (EMS) company. The EMS would procure parts and build a product, such 
as a generic personal computer, a router, or some other type of electronics 
that are mass produced, but with very short product lifecycles.

In this scenario the OEM would use PerspectiveBroker to publish the content of 
a Request for Quote. The contents of the product data package would not be 
entirely revealed to potential bidders. The data would be gradually made 
available based on the state of negotiation in the contracting process. This 
pattern parallels the gradual disclouse of information about the virtual 
world in a MUDD game. 

The trading partners who may wish to bid on the RFQ would copy the initial RFQ 
announcement to the local server where they could run an analysis program 
over the basic contract requirements. If the initial requirements look 
promising they would submit a request for additional information, passing in 
their qualifications in exchange for the added information. A non-disclosure 
agreement would be part of this exchange. Then eventually goal would be to 
respond to the RFQ with a quote and receive a contract to build the OEMs 
product. Between the initial receipt of the RFQ and the sending of the quote 
the two servers would engage in a series of moderated transactions for 
negotiating the terms and conditions for the contract, as well as negotiating 
the schedule for delivery and the potential to substitute parts in the 
assembly process. Some of the transactions between the two companies could be 
totally automated, while others may require human intervention in the 
decision making process.

According to the PerspectiveBroker documents I think this process could be 
made to work. One problem will be in setting up a universal authentication 
mechanism. This may just require using LDAP at all trading partnet sites and 
then federating the LDAP servers into a trading community. I haven't done 
something like that before, so that might be a bit of a challenge.

There are standards for the informationthat need to be used during the 
transactions (RosettaNet and OAG define that XML representations of documents 
such as an RFQ; and IPC defines representations for bills of materials of 
parts to be used and full product data packages), so I won't need to make up 
that part of the system. The rules governing the negotiations are partially 
defined in the workflow definitions of the document standards. I think most 
of the effort will be in building Gtk user interfaces and building the 
business logic to support the interaction between the trading partners. Each 
stage in the negotiation process needs to be scripted and a user interface 
needs to be created. 

So back to my original question. Are their examples that do something similar, 
perhaps in a different context. Do TwistedMatrix MUDD worlds talk to each 
other, do characters and materials shift between worlds, or is each world 
operating in isolation?

I can envision how the operation of the trading partner community could be 
created as a game, or manufacturing simulation environment. Once the bugs 
were worked out the simulator could be used to build and manage a real world 
virtual manufacturing community. Anyone care to estimate how long it might 
take to build the game version of the system using Twisted? I'm too new to 
the software to have a clue on what will be involved. 




From cce at clarkevans.com  Mon Apr  7 15:37:33 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 19:37:33 +0000
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <1049653574.978.67.camel@golux>
References: <20030406175304.GA756@doublegemini.com> <1049653574.978.67.camel@golux>
Message-ID: <20030407193733.GA4247@doublegemini.com>

On Sun, Apr 06, 2003 at 02:26:13PM -0400, Steve Waterbury wrote:
| On Sun, 2003-04-06 at 13:53, Clark C. Evans wrote:
| > I noticed  in the Twisted Coding Standard that...
| > 
| >    "Database tables shall be named with plural nouns"
| > 
| > I'd like to question this standard for several reasons:
| > [ some trimming for brevity ]
| > 
| >   3. It is helpful to name foreign key columns as the
| >      same name as the table that they are coming from.
| 
| What if you have more than one foreign key to the same 
| table?  A very simple example (from my app ;^):  the 
| attributes "owner", "creator", and "modifier" all point 
| to the "persons" table.  As a rule of thumb, it's usually 
| best to name the foreign key column after the role that 
| the foreign key entity plays in the referring table.

If there is more than one role, I usually use 'role_table'
for my foreign keys.  Otherwise it gets to be a bit messy,
especially if you use inheritance of sorts (there is not
only a person table but also an employee table, etc.) in
that case, 'creator' isn't good enough in some cases, you
may mean 'employee_creator' as not all person objects 
may be possible of creating.

| >   5. While there are astechic reasons for this (above)
| >      the resons become all the more important when 
| >      you want to build automatic tools for searching 
| 
| I didn't think it was all that difficult.  I can send you
| the O-R mapping I use, if you like.

I'm not saying it isn't possible, it is just unnecessary
complexity, and to mandate this is quite irksome.

| > In short, I'd recommend singluar nouns, with M-M
| > link tables as one__two where one and two are 
| > tables being linked to.
| 
| One could reasonably argue that it is not important to have 
| a table-naming rule in the coding standard. 

That makes sense.  I'd rather no standard is better than
a bad one.  ;) Clark



From glyph at twistedmatrix.com  Mon Apr  7 16:15:51 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Apr 2003 16:15:51 -0400
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <20030407193733.GA4247@doublegemini.com>
Message-ID: <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday, April 7, 2003, at 03:37 PM, Clark C. Evans wrote:

> | One could reasonably argue that it is not important to have
> | a table-naming rule in the coding standard.
>
> That makes sense.  I'd rather no standard is better than
> a bad one.  ;) Clark

I disagree.

While I don't feel particularly strongly about it one way or another, 
pretty much anything that isn't language-mandated ought to be 
standardized so that newcomers to the codebase at least get a common 
feel for certain kinds of naming.

Keep in mind that your personal coding standards need not adhere to the 
Twisted one - that standard is only for code actually checked in to the 
Twisted tree.  It may even be useful for products to diverge, so that 
someone reading code, schemas, or whatever can easily guess which 
components are from which codebase.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+kdx8vVGR4uSOE2wRAg8CAJ4lk+OyVG2ggtanqXZah/AI0WX3DACfbus8
63G1iFDroGKcxWR6IiLxhYQ=
=nhYa
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Mon Apr  7 02:06:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Mon, 07 Apr 2003 08:06:06 +0200
Subject: [Twisted-Python] Re: Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org> <20030407023519.GA1707@doublegemini.com>
Message-ID: <b6r4fk$juf$1@main.gmane.org>

> Well, your diagram sort of implies a parallel nature, which
> wasn't part of my original requirements.  I have that need
> now, so flow needs to be updated to respect this.
> 
> If you want to go over this via phone, and you are in the US
> or Canada I'd be happy to drop you a line... just send me
> your phone number and a good time.

:-(
I am in France near Paris !
but this is my personnal adress : lafou<at>wanadoo<dot>fr
and my icq number : 2376706
finally, my msn id : plafoucr at hotmail.com (eark, I hate msn)

Thank you again Clark
 





From dave at krondo.com  Mon Apr  7 16:17:46 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 13:17:46 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049723009.10840.386.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
	 <1049723009.10840.386.camel@qutang.gnubian.org>
Message-ID: <1049746666.19679.41.camel@oneiros>

On Mon, 2003-04-07 at 06:43, Justin Ryan wrote:
> > > I don't really see how allowing key columns to be ignored on an insert
> > > would be database specific..  Ideally, whether or not a default value is
> > 
> > I don't think I fully articulated my thoughts. Currently the 'reflector'
> > code caches the rows you create. So, ideally, if the database is going
> > to set default values on a new row, you'd like the reflector to update
> > the row object with whatever values the database chose to maintain
> > consistency between the row object and the database. I haven't
> > thought about it too closely, but it seems to me that there's no
> > way to implement that in a database-independent way, but maybe I'm
> > just missing something.
> > 
> > What do you think?
> 
> Welll...
> 
> I think that if you insert a row and allow the database to assign the
> pkey, you can select out the pkey.  I'm not sure this is more efficient
> than selecting nextval() before insert, but it would be more
> database-independent..

That would only work if twisted is the only process adding rows,
I think.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030407/9af5cb07/attachment.pgp 

From cce at clarkevans.com  Mon Apr  7 17:45:51 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 21:45:51 +0000
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
References: <20030407193733.GA4247@doublegemini.com> <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
Message-ID: <20030407214551.GA4832@doublegemini.com>

On Mon, Apr 07, 2003 at 04:15:51PM -0400, Glyph Lefkowitz wrote:
| On Monday, April 7, 2003, at 03:37 PM, Clark C. Evans wrote:
| >| One could reasonably argue that it is not important to have
| >| a table-naming rule in the coding standard.
| >
| >That makes sense.  I'd rather no standard is better than
| >a bad one.  ;) Clark
| 
| I disagree.

I feel almost embarrassed to bring this item up, as it seems so
trivial... but I think it deserves to be reviewed.

Everything else in the coding standard is very clear and resonably 
justified.  This particular item just stands out from the rest as 
quite arbitrary -- and based on my experience, giving addititional 
complexity without any commensurate advantages, especially for
those who do not have English as their primary language.

The English language can be quite complex, and Plurals and
their rules are a good part of this complexity.  For example,
plural nouns often sound the same as posessive nouns, and this
makes learning them more difficult.  Furthermore, plurals have
irregular forms, or use s or es, sometimes dropping one or more
letters before the modifier.  Even the notion of plurals themselves
is not really a universal construct, as I understand some 
languages use an adjective meaning 'one or more' in conjunction
with singluar nouns to make them plural rather than modifying
the word itself.  Some words are used as both singluar and 
plural.  And lastly, plurals enter into the whole range of 
collective nounds, which differ in their singluar/plural treatment 
depending if you are English or American.  In short, it's just ugly.  
And there isn't any advantage to *requiring* them; especially
when Internationalization is important.

The only somewhat-convincing argument that I've heared for it,
is that "SELECT * FROM people" seems to make more sense than
"SELECT * FROM person".  However, even this advantage falls
apart as soon as you add a where clause...  
   SELECT first_name FROM people 
   WHERE people.last_name = 'Evans'

I like person.last_name myself...

| While I don't feel particularly strongly about it one way or another, 
| pretty much anything that isn't language-mandated ought to be 
| standardized so that newcomers to the codebase at least get a common 
| feel for certain kinds of naming.

I feel that too much standardization can be a bad thing, 
especially when they bring unnecessary complexity.

Best,

Clark



From z3p at twistedmatrix.com  Mon Apr  7 17:51:57 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 07 Apr 2003 17:51:57 -0400
Subject: [Twisted-Python] Oscar protocol information?
In-Reply-To: <004001c2fce5$6b499550$78924fd4@isidro>
Message-ID: <3E91BABD.17017.8A593C@localhost>

On 7 Apr 2003 at 11:09, Isidro Mu?oz wrote:

> Where could I find information of Oscar protocol (AIM)?

The Twisted implementation lives in 
twisted/protocols/oscar.py.  If you've got any 
questions on how it works, you can get int touch 
with me (I'm the maintainer.)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From fog at initd.org  Mon Apr  7 18:39:29 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 08 Apr 2003 00:39:29 +0200
Subject: [Twisted-Python] coding standard: plurals for database
	table	names
In-Reply-To: <20030407214551.GA4832@doublegemini.com>
References: <20030407193733.GA4247@doublegemini.com>
	 <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
	 <20030407214551.GA4832@doublegemini.com>
Message-ID: <1049755169.920.85.camel@momo.initd.org>

Il lun, 2003-04-07 alle 23:45, Clark C. Evans ha scritto:

> The only somewhat-convincing argument that I've heared for it,
> is that "SELECT * FROM people" seems to make more sense than
> "SELECT * FROM person".  However, even this advantage falls
> apart as soon as you add a where clause...  
>    SELECT first_name FROM people 
>    WHERE people.last_name = 'Evans'
> 
> I like person.last_name myself...

from a non-native english speaker perspective... i don't understand why.
a WHERE clause can select more than just one persone, i.e., people.
using plurals seems correct and beautifull to me.

> I feel that too much standardization can be a bad thing, 
> especially when they bring unnecessary complexity.

i don't seeany complexity in using plurals.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We are all dust, Saqi, so play the lute
                    We are all wind, Saqi, so bring wine. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030408/507b614b/attachment.pgp 

From radix at twistedmatrix.com  Mon Apr  7 22:49:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 7 Apr 2003 22:49:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
Message-ID: <20030408024919.GG956@radii>

So, I've discovered[1] something new about Windows. Basically, there's
no such thing as `argv' in win32-land, and each program has to parse
its command-line manually (I had known that they had to do wild-card
expansion manually, but not parse the entire damned string). This
isn't so much the problem as there is no sane Win32 API for starting a
process with a sequence of arguments. The reason this is a problem is
that Twisted's Process API uses sequences of arguments.

In light of this, I have a few somewhat-orthogonal proposals to make,
but I think they should all be done (well, except, perhaps, the last):

 * Add a method to the Win32 Process Interface (IWin32Process?) that
   accepts a string rather than an executable and a list of args. We
   should allow people to use the (unfortunately) sanest method
   available for starting processes on Windows.

 * Add a warning to win32eventreactor.Process.__init__ (in the case
   that the user passed in a sequence of args) that tells people about
   this problem.

 * Add some auto-quoting evilness[2] to
   win32eventreactor.Process.__init__, for when arguments are passed
   as a sequence. What we have there absolutely sucks (" ".join), and we
   should probably at least try to make the existing API as reliable 
   as possible.

 * Perhaps make the string "command-line" API available on
   PosixProcess as well, so people can use either the string or the
   sequence API and expect at least some bit of cross-platformness (but
   I'm fine with telling people to just use the sequence API if others
   don't like this, especially considering this either requires
   calling out to a shell (gah), or doing some unfun argument-splitting.)

*whimper* :-(

References:
[1] http://mail.python.org/pipermail/python-win32/2003-April/000906.html
[2] <exarkun> ' '.join(['"%s"' % (s.replace('\\', '\\\\').replace('"',
              '\\"')) for s in args[1:]])

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From imunoz at daipro.net  Tue Apr  8 05:15:48 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Tue, 8 Apr 2003 11:15:48 +0200
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost>
Message-ID: <000b01c2fdaf$722b0000$78924fd4@isidro>

Thanks, Paul.

I'm C++ programmer.
I don't understand python.

I would like find information of Oscar protocol to analysis it, commands,
sockets, password, etc.

Sorry, my English isn't very good. I'm Spanish.

Thansks.
Isidro.


----- Original Message -----
From: "Paul Swartz" <z3p at twistedmatrix.com>
To: <twisted-python at twistedmatrix.com>
Sent: Monday, April 07, 2003 11:51 PM
Subject: Re: [Twisted-Python] Oscar protocol information?


On 7 Apr 2003 at 11:09, Isidro Mu?oz wrote:

> Where could I find information of Oscar protocol (AIM)?




From andrew-twisted at puzzling.org  Tue Apr  8 09:36:53 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:36:53 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <001b01c2f992$df756770$0201a8c0@brinstar>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <001b01c2f992$df756770$0201a8c0@brinstar>
Message-ID: <20030408133653.GC8291@frobozz.local>

On Wed, Apr 02, 2003 at 09:41:12PM -0600, David Phillips wrote:
> Stefano Maniero writes:
> > Can anyone indicate an example or doc for developing ftp server?
> 
> This reference manual for FTP might be useful:
> 
> http://cr.yp.to/ftp.html

In fact, that's the primary reference I used to implement Twisted's FTP
client.  :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 09:39:17 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:39:17 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <20030402101203.33888dc2.itamar@itamarst.org>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <20030402101203.33888dc2.itamar@itamarst.org>
Message-ID: <20030408133917.GD8291@frobozz.local>

On Wed, Apr 02, 2003 at 10:12:03AM -0500, Itamar Shtull-Trauring wrote:
> On Wed,  2 Apr 2003 10:28:08 +0200
> Stefano Maniero <smaniero at sfera.net> wrote:
> 
> > I'm a new developer in twisted. I want test twisted writing an ftp
> > server.
> > 
> > Can anyone indicate an example or doc for developing ftp server? In
> > twisted distribution I didn't find it.
> 
> twisted.protocols.ftp has code for a FTP server that serves files from
> the filesystem. It's not pluggable, and needs a lot of work, but it
> could be used as a basis for a cleaned up refactored server.

It also doesn't use twisted.cred at the moment, so not only are the
resources it serves not pluggable, neither is the authentication.

I'm planning on doing an FTP server rewrite "soon", based on the new
infrastructure that the FTP client now uses (thanks to radix for helping me
with that!).  Given my track record at doing things "soon", I probably
wouldn't hold my breath, though :)

-Andrew.




From david at acz.org  Tue Apr  8 11:03:36 2003
From: david at acz.org (David Phillips)
Date: Tue, 8 Apr 2003 10:03:36 -0500
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost> <000b01c2fdaf$722b0000$78924fd4@isidro>
Message-ID: <005801c2fde0$0813c450$0201a8c0@brinstar>

Isidro Mu?oz writes:
> I would like find information of Oscar protocol to analysis it,
> commands, sockets, password, etc.

http://www.google.com/search?q=oscar+protocol

--
David Phillips <david at acz.org>
http://david.acz.org/




From andrew-twisted at puzzling.org  Tue Apr  8 09:42:31 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:42:31 +1000
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>
References: <20030403231606.GC24393@radii> <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>
Message-ID: <20030408134231.GE8291@frobozz.local>

On Thu, Apr 03, 2003 at 06:31:32PM -0500, Bob Ippolito wrote:
> On Thursday, Apr 3, 2003, at 18:16 America/New_York, Christopher 
> Armstrong wrote:
> 
> >On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> >>I did notice something that I'm curious about: I've been running two
> >>Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2)
> >>and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days
> >>now, and the Windows instance has accumulated almost an hour of CPU time
> >>wherease the Debian instance has only used 2 seconds.  What's the Win32
> >>instance doing while it's idle? (It's not a big deal, I'm just curious)
> >
> >My first guess would be that the system calls involved (e.g., select)
> >are more expensive than on linux, but that's just a wild guess. I
> >doubt profiling would be much help, but maybe you (or someone) could
> >write a simple test that just recorded the time it takes to run an
> >immediately-returning select() a few thousand times.
> 
> IIRC, the Twisted select reactor has a "background process" that gets 
> triggered once a second or so when running on windows just to break the 
> select() call (I don't believe it actually does anything).  I believe 
> this is because processes in windows don't respond to signals (like 
> ctrl-c, for example) during a select() call, so this 
> convenience/workaround was put into the codebase.

Unless the implementation has changed significantly since I last looked at
it, this is the correct answer.  The select call under win32 times out every
second so that Ctrl-C/Ctrl-Break and other things (like stopping a Twisted
program running as a WinNT service) happen in a timely fashion, rather than
relying on network activity to wake it up.

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 09:47:08 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:47:08 +1000
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
References: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <20030408134708.GF8291@frobozz.local>

On Fri, Apr 04, 2003 at 10:28:59AM -0800, Kevin Turner wrote:
[...]
> Tests we're having problems with:
[...]
> 
>  * testStor in test_ftp, intermittent failures.

This is a new test, but an old problem.  The bug here is in the FTP server
(even though we wrote the test to test the new client support for STOR,
which seems to work just fine), and it hasn't changed for months.  On the
other hand, the failures are intermittent, and I suspect it's only a problem
in the test case (it's some sort of timing issue with having the same
process on either end of the socket, I think).

In short: the testStor test failure shouldn't hold up the release :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 09:56:29 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:56:29 +1000
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408024919.GG956@radii>
References: <20030408024919.GG956@radii>
Message-ID: <20030408135629.GG8291@frobozz.local>

On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> So, I've discovered[1] something new about Windows. Basically, there's
> no such thing as `argv' in win32-land, and each program has to parse
> its command-line manually (I had known that they had to do wild-card
> expansion manually, but not parse the entire damned string). This
> isn't so much the problem as there is no sane Win32 API for starting a
> process with a sequence of arguments. The reason this is a problem is
> that Twisted's Process API uses sequences of arguments.
> 
> In light of this, I have a few somewhat-orthogonal proposals to make,
> but I think they should all be done (well, except, perhaps, the last):

Do you have a use-case where the current string-joining breaks?  And if a
Twisted user really cared about passing arguments on Win32, wouldn't it be
easiest to just let them take care of it, e.g.:
    if sys.platform == 'win32':
        args = ["one big string"]
    else:
        args = ["one", "big", string"]
    ...
    
?

I'm not sure that adding lots of platform-dependent infrastructure to
Twisted can offer anything better than that, anyway, so we may as well keep
it simple.

I'm willing to be proved wrong, though -- it's not like I use Win32 anymore
:)

-Andrew.




From itamar at itamarst.org  Tue Apr  8 11:33:20 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 11:33:20 -0400
Subject: [Twisted-Python] Resource bug?
Message-ID: <20030408113320.6e45870f.itamar@itamarst.org>

Any reason the following is not the way resources work by default? And
would the change break backwards compatability?

*** resource.py.~1.23.~	Mon Mar 10 12:10:16 2003
--- resource.py	Tue Apr  8 11:18:50 2003
***************
*** 57,64 ****
      def listStaticEntities(self):
          return self.children.items()
  
!     listNames = listStaticNames
!     listEntities = listStaticEntities
  
      def listDynamicNames(self):
          return []
--- 57,67 ----
      def listStaticEntities(self):
          return self.children.items()
  
!     def listNames(self):
!         return self.listStaticNames() + self.listDynamicNames()
! 
!     def listEntities(self):
!         return self.listStaticEntities() + self.listDynamicEntities()
  
      def listDynamicNames(self):
          return []


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jasper at peak.org  Tue Apr  8 15:32:11 2003
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 8 Apr 2003 12:32:11 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
Message-ID: <Pine.LNX.4.44.0304081118030.12962-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I was talking with Kevin Turner at the pub last night after the "Porpig"
meeting, and he mentioned having the same problem with circular references I
was having, so I offered to post the klu... err, patch I had for the problem.


In short, it checks for _Dereference's (corresponding to dictionaries not yet
available) that are destined to be (erroneously) copied into the __dict__ of
an object that is then returned.  When one is found, it is returned instead
without a containing object, and a method object is scheduled to be run
via postUnjelly.

Later on (in crefutil.py), after the _Derefence has been magically replaced
by it's corresponding dictionary, the dictionary is taken and stored in
the __dict__ of a newly created object.  Even later, the postUnjelly
scheduled earlier is called, which sets the __class__ of the manually
created object.


This is a pretty hideous fix!  But it is minimal, and I think unlikely to
have side effects.  Then again, I do not have a broad understanding of
twisted, and haven't tested it extensively...  Clearly what newjelly.py is
aiming for is superior, and so I haven't been inclined to invest any further
effort.

The cvs -u for the two files affected follows.  Use them as you wish, and
critique is always welcome.

- -Jasper



Index: flavors.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/flavors.py,v
retrieving revision 1.28
diff -u -r1.28 flavors.py
- --- flavors.py  17 Feb 2003 20:48:30 -0000      1.28
+++ flavors.py  8 Apr 2003 18:16:27 -0000
@@ -388,9 +388,26 @@
     def unjellyFor(self, unjellier, jellyList):
         if unjellier.invoker is None:
             return setInstanceState(self, unjellier, jellyList)
- -        self.setCopyableState(unjellier.unjelly(jellyList[1]))
- -        return self
+        state = unjellier.unjelly( jellyList[1] )
 
+        from twisted.persisted.crefutil import _Dereference
+        if isinstance( state, _Dereference ):
+            # In the caller (jelly._Unjellier.unjelly()),
+            # presence of state.postUnjelly triggers a call to self.postUnjelly
+            # This seems like a bug...
+            state.postUnjelly = 1
+            self.postUnjelly  = ClassReset( state, self.__class__ )
+            return state
+        else:
+            self.setCopyableState( state )
+            return self
+        
+class ClassReset( object ):
+    def __init__( self, obj, klass ):
+        self.obj   = obj
+        self.klass = klass
+    def __call__( self ):
+        self.obj.__class__ = self.klass
 
 
 class RemoteCache(RemoteCopy, Serializable):

Index: crefutil.py
===================================================================
RCS file: /cvs/Twisted/twisted/persisted/crefutil.py,v
retrieving revision 1.11
diff -u -r1.11 crefutil.py
- --- crefutil.py 31 Mar 2003 00:28:34 -0000      1.11
+++ crefutil.py 8 Apr 2003 19:18:06 -0000
@@ -114,6 +114,17 @@
         NotKnown.__init__(self)
         self.id = id
 
+    def resolveDependants(self, newObject):
+        self.resolved = 1
+        self.resolvedObject = newObject
+        for mut, key in self.dependants:
+            inst           = mut.value
+            inst.__dict__  = newObject
+            mut[key]       = inst
+
+            if isinstance(newObject, NotKnown):
+                newObject.addDependant(mut, key)
+
 
 from twisted.internet.defer import Deferred

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+kyPC8EpjZ7/X9bIRAsxZAKDJZnJemKCtBFnhU+i7uRsLXLRCjwCg9XHn
aIviUjrRqf/KAzbJq7x708k=
=Cqoo
-----END PGP SIGNATURE-----




From rich at enflyer.com  Tue Apr  8 17:19:06 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Tue, 08 Apr 2003 17:19:06 -0400
Subject: [Twisted-Python] incredibly minor "fix"
Message-ID: <3E933CCA.3000508@enflyer.com>

	I know, I couldn't have possibly found something smaller. The warning was 
annoying me. This is a patch to FormErrorModel to add the request argument to 
the wmfactory method.

	Also, I was the one in #twisted this weekend asking about woven.guard. I pretty 
much figured it out, it seems so easy now. I have some ideas for making it easy 
(subclassing PerspectiveWrapper) to use any resource to display the login prompt 
(not the auto-generated FormProcessor). Is this something I should submit, or 
does it already work that way and I was too dense to see it?

rich


Index: form.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/form.py,v
retrieving revision 1.25
diff -u -r1.25 form.py
--- form.py	7 Mar 2003 17:22:41 -0000	1.25
+++ form.py	8 Apr 2003 21:07:47 -0000
@@ -265,7 +265,7 @@
              self.err = err
              self.desc = "Please try again"

-    def wmfactory_description(self):
+    def wmfactory_description(self, request):
          return str(self.desc)





From andrew-twisted at puzzling.org  Tue Apr  8 20:57:16 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 9 Apr 2003 10:57:16 +1000
Subject: [Twisted-Python] How do I upload files using FTPClient?
In-Reply-To: <20030106233722.GA32165@frobozz.local>
References: <Springmail.0994.1041876859.0.07496900@webmail.pas.earthlink.net> <20030106233722.GA32165@frobozz.local>
Message-ID: <20030409005716.GB19915@frobozz.local>

On Tue, Jan 07, 2003 at 10:37:22AM +1100, Andrew Bennetts wrote:
> On Mon, Jan 06, 2003 at 10:14:18AM -0800,  Daniel Burr wrote:
> > 
> > I've experimented with twisted.protocols.ftp.FTPClient, and the one thing I
> > can't seem to grok is how to perform file uploads.  I've read through the
> > code, and it seems that the FTP server class supports RETR and STOR, using
> > DTPFactory, while FTPClient only supports RETR, and implements it
> > independently.
> 
> Yes, that's my fault.  I haven't gotten around to that yet -- I might have a
> stab at it tonight, it shouldn't actually be that hard.  I'll try to make sure
> I get this done in time for the 1.0.2 release.

*Ahem*.

Ok, so it took slightly longer than that...

Thanks to working on this with Chris at PyCon, there is now STOR support for
the FTPClient, currently only in CVS, but it will be in the next release.

-Andrew.




From radix at twistedmatrix.com  Tue Apr  8 20:28:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Apr 2003 20:28:52 -0400
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030408113320.6e45870f.itamar@itamarst.org>
References: <20030408113320.6e45870f.itamar@itamarst.org>
Message-ID: <20030409002852.GA1140@radii>

On Tue, Apr 08, 2003 at 11:33:20AM -0400, Itamar Shtull-Trauring wrote:
> Any reason the following is not the way resources work by default? And
> would the change break backwards compatability?

I'm pretty sure nobody uses this interface, anyway. Wasn't it mainly
for coil?


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr  8 20:34:11 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Apr 2003 20:34:11 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408135629.GG8291@frobozz.local>
References: <20030408024919.GG956@radii> <20030408135629.GG8291@frobozz.local>
Message-ID: <20030409003411.GB1140@radii>

On Tue, Apr 08, 2003 at 11:56:29PM +1000, Andrew Bennetts wrote:
> Do you have a use-case where the current string-joining breaks? 

Yes. I was passing an arbitrary filename as one of the arguments to a
program in windows, and it broke when the filename had a space.

> And if a Twisted user really cared about passing arguments on Win32,
> wouldn't it be easiest to just let them take care of it, e.g.:
>     if sys.platform == 'win32':
>         args = ["one big string"]
>     else:
>         args = ["one", "big", string"]
>     ...
>     
> ?

I didn't think of this. This is a fine alternative to having a
separate API method for it. So, that gets rid of proposal for a new
method. I'm still thinking about implementing that warning, though, as
well as the auto-quoting.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From peter at engcorp.com  Tue Apr  8 22:26:12 2003
From: peter at engcorp.com (Peter Hansen)
Date: Tue, 08 Apr 2003 22:26:12 -0400
Subject: [Twisted-Python] Default reactor without signal handling
Message-ID: <3E9384C4.4D26E913@engcorp.com>

In twisted.internet.reactor, a call to twisted.internet.default.install()
is made automatically.  That call constructs a SelectReactor with
signal handling enabled, without any option for avoiding this behaviour.

What's the recommended approach for installing a reactor without the
signal handling behaviour turned on?

(For the curious, I'm trying to refactor an existing Zope-based 
application which has a "back end" server using a proprietary 
protocol on a non-standard socket.  Currently we just use 
the Zope asyncore and built our stuff on top of that.  We're
trying to move away from Zope, and this looked like the low-hanging
fruit for getting us onto Twisted...   Everything worked fine
when we spiked this, except we had to manually patch the above
call to do "reactor = SelectReactor(0)" instead of what it does
now.

Thanks.

-Peter



From itamar at itamarst.org  Tue Apr  8 23:16:13 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 23:16:13 -0400
Subject: [Twisted-Python] Default reactor without signal handling
In-Reply-To: <3E9384C4.4D26E913@engcorp.com>
References: <3E9384C4.4D26E913@engcorp.com>
Message-ID: <20030408231613.784ca27f.itamar@itamarst.org>

On Tue, 08 Apr 2003 22:26:12 -0400
Peter Hansen <peter at engcorp.com> wrote:

> In twisted.internet.reactor, a call to
> twisted.internet.default.install() is made automatically.  That call
> constructs a SelectReactor with signal handling enabled, without any
> option for avoiding this behaviour.
> 
> What's the recommended approach for installing a reactor without the
> signal handling behaviour turned on?

In 1.0.4 and CVS (soon to be released, we hope), you can do:

   reactor.run(installSignalHandlers=0)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Tue Apr  8 23:17:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 23:17:44 -0400
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030409002852.GA1140@radii>
References: <20030408113320.6e45870f.itamar@itamarst.org>
	<20030409002852.GA1140@radii>
Message-ID: <20030408231744.3d94bf50.itamar@itamarst.org>

On Tue, 8 Apr 2003 20:28:52 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I'm pretty sure nobody uses this interface, anyway. Wasn't it mainly
> for coil?

Not sure. But I think this should be changed, it is useful for certain
things (e.g. trees of Resources) and we'll need it for WebDAV if we use
Resources for that.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From lafou at wanadoo.fr  Tue Apr  8 13:09:03 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 08 Apr 2003 19:09:03 +0200
Subject: [Twisted-Python] Re: Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org> <20030407023519.GA1707@doublegemini.com> <b6r4fk$juf$1@main.gmane.org>
Message-ID: <b6uvmj$r13$1@main.gmane.org>

Did you try to contact me ? I 've got a LOT of spam this days, and I am
affraid of throwing some "good" mails.

thx 




From dp at twistedmatrix.com  Wed Apr  9 02:25:07 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 8 Apr 2003 23:25:07 -0700
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030408113320.6e45870f.itamar@itamarst.org>
Message-ID: <0209779E-6A54-11D7-940F-00039376B1AE@twistedmatrix.com>

On Tuesday, April 8, 2003, at 08:33 AM, Itamar Shtull-Trauring wrote:

> Any reason the following is not the way resources work by default? And
> would the change break backwards compatability?

I for one would really like it if this change were made. I have a base 
class that I always subclass instead of resource that does nothing but 
what this patch does.

Donovan




From lafou at wanadoo.fr  Wed Apr  9 03:34:49 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 09 Apr 2003 09:34:49 +0200
Subject: [Twisted-Python] Re: flow - a state-machine consumer
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <b70idr$ss2$1@main.gmane.org>

> It isn't stable, but you can find it in CVS, or at
>    http://clarkevans.com/flow.py
> 
> Comments are encouraged.
> 
> Best,
> 
> Clark

Could you send us some recent exemples ? I found some, but they use
deprecated methods I think.





From lafou at wanadoo.fr  Wed Apr  9 03:39:34 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 09 Apr 2003 09:39:34 +0200
Subject: [Twisted-Python] Re: flow - a state-machine consumer
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <b70imo$ss2$2@main.gmane.org>

> It isn't stable, but you can find it in CVS, or at
>    http://clarkevans.com/flow.py
> 
> Comments are encouraged.
> 
> Best,
> 
> Clark

It seems to be a little bit different from the cvs sandbox version !?
I remember a longer version in cvs. Anyway, I'am going to test it today, and
will report to you my feelings. see you on #twisted (nick : gravis)




From tv at twistedmatrix.com  Wed Apr  9 06:50:02 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 9 Apr 2003 13:50:02 +0300
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408024919.GG956@radii>
References: <20030408024919.GG956@radii>
Message-ID: <20030409105001.GA29042@lapdog>

On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
>  * Perhaps make the string "command-line" API available on
>    PosixProcess as well, so people can use either the string or the
>    sequence API and expect at least some bit of cross-platformness (but
>    I'm fine with telling people to just use the sequence API if others
>    don't like this, especially considering this either requires
>    calling out to a shell (gah), or doing some unfun argument-splitting.)

	Oh god please no.

	system(3) and its ilk must die. No exceptions allowed. Never
	concatenate arguments on UNIX.

-- 
:(){ :|:&};:



From radix at twistedmatrix.com  Wed Apr  9 06:30:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 9 Apr 2003 06:30:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030409105001.GA29042@lapdog>
References: <20030408024919.GG956@radii> <20030409105001.GA29042@lapdog>
Message-ID: <20030409103019.GE1107@radii>

On Wed, Apr 09, 2003 at 01:50:02PM +0300, Tommi Virtanen wrote:
> On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> >  * Perhaps make the string "command-line" API available on
> >    PosixProcess as well, so people can use either the string or the
> >    sequence API and expect at least some bit of cross-platformness (but
> >    I'm fine with telling people to just use the sequence API if others
> >    don't like this, especially considering this either requires
> >    calling out to a shell (gah), or doing some unfun argument-splitting.)
> 
> 	Oh god please no.
> 
> 	system(3) and its ilk must die. No exceptions allowed. Never
> 	concatenate arguments on UNIX.

If you'll re-read what you quoted of me, you'll see that I was
proposing auto-splitting of the arguments, not passing the thing to a
shell. Concatenating is only required in win32; we've already _got_
the arguments in a list (or as my proposal went, in a single string)
from the high-level API.

But you're right about it being a bad idea :) I've decided (in absense
of any others' opinions) to just do auto-quoting-with-a-warning in
win32's case.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Apr  9 06:35:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 9 Apr 2003 06:35:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030409103019.GE1107@radii>
References: <20030408024919.GG956@radii> <20030409105001.GA29042@lapdog> <20030409103019.GE1107@radii>
Message-ID: <20030409103519.GF1107@radii>

On Wed, Apr 09, 2003 at 06:30:19AM -0400, Christopher Armstrong wrote:
> On Wed, Apr 09, 2003 at 01:50:02PM +0300, Tommi Virtanen wrote:
> > On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> > >  * Perhaps make the string "command-line" API available on
> > >    PosixProcess as well, so people can use either the string or the
> > >    sequence API and expect at least some bit of cross-platformness (but
> > >    I'm fine with telling people to just use the sequence API if others
> > >    don't like this, especially considering this either requires
> > >    calling out to a shell (gah), or doing some unfun argument-splitting.)

Actually, I guess my wording here was a little off. Instead of "gah",
that should be "hello no". >:)

> > 	Oh god please no.
> > 
> > 	system(3) and its ilk must die. No exceptions allowed. Never
> > 	concatenate arguments on UNIX.
> 
> If you'll re-read what you quoted of me, you'll see that I was
> proposing auto-splitting of the arguments, not passing the thing to a
> shell. Concatenating is only required in win32; we've already _got_
> the arguments in a list (or as my proposal went, in a single string)
> from the high-level API.
> 
> But you're right about it being a bad idea :) I've decided (in absense
> of any others' opinions) to just do auto-quoting-with-a-warning in
> win32's case.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Wed Apr  9 17:30:35 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 09 Apr 2003 14:30:35 -0700
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <E1939zy-0000Hp-00@pyramid.twistedmatrix.com>
References: <E1939zy-0000Hp-00@pyramid.twistedmatrix.com>
Message-ID: <1049923833.30463.57.camel@troglodyte.funhouse>

[Recap:  Last night, Bob was complaining that the order that services
were started and stopped was undefined, saying

Bob> well if you have service A dependent on service B
Bob> and you don't want service A to actually start service B
Bob> like let's say you have a database service or something
Bob> and you have another service that wants to persist stuff using the
Bob> database service

so he made the order in which services are started defined as the order
in which they were added to the service collection, and the reverse for
stopping.]

Bob, I fear this solution is too fragile if your services really depend
on one another.  While it will work for now when installing services is
something that happens once in mktap, I fear it'll break down with more
dynamic service management.  Example::

    application.addService("dataStore", StupidStorage())
    application.addService("dataMaker", FooService())

    # ...later, decide we have outgrown StupidStorage:
    application.removeService("dataStore")
    application.addService("dataStore", RealStorage())

With your ordering, the new dataStore will now stop before dataMaker
does.

Instead of introducing ordering dependencies into the flat top-level
service namespace, I think the right answer to your problem is to do as
Chris suggested: Use a hierarchical structure by making dataStore a
MultiService, and adding any dataMaker services at its children.  That
way your dataStore can always make sure its children shut down before it
does.

Does this work for you?  If so, I would like to revert your changes
making Application.services an OrderedDict before the (imminent!)
release, just because anything that requires a change to the
persistnceVersion is a big potential spot for trouble.  We have no
inter-version testing framework at all.

(This whole thing would have passed without comment had I not
encountered an error in upgradeVersion13 in the acceptance tests.  I
*think* I fixed that bug, but I haven't yet found out what triggered it
in the first place (it *should* have been *generated* with version 13,
why was it upgrading?), and who knows what other uglies are hiding in
the dark corners of application persistence.)

 - Kevin

-- 
The moon is first quarter, 46.3% illuminated, 7.0 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030409/da7cda64/attachment.pgp 

From mesozoic at polynode.com  Wed Apr  9 16:22:49 2003
From: mesozoic at polynode.com (Alex Levy)
Date: Wed, 9 Apr 2003 16:22:49 -0400
Subject: [Twisted-Python] twistd causing AssertionError, exiting abruptly
Message-ID: <20030409202249.GA4696@polynode.com>

When I run 'twistd -nf web.tap', twistd spits out the following traceback
and exits.  I'm really not sure what this means; help?

This is a fresh CVS copy.

[-] Log opened.
[-] twistd 1.0.4alpha1 (/usr/bin/python 2.2.1) starting up
[-] license user: Nobody <>
[-] organization: No Organization
[-] reactor class: twisted.internet.default.SelectReactor
[-] Loading web.tap...
[-] Loaded.
[*web*] twisted.web.server.Site starting on 8888
[*web*] Starting factory <twisted.web.server.Site instance at 0x82aa28c>
[*web*] Traceback (most recent call last):
[*web*]   File "/home/mesozoic/dev/Twisted/bin/twistd", line 31, in ?
[*web*]     run()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 474, in run
[*web*]     runApp(config)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 390, in runApp
[*web*]     application.bindPorts()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/app.py", line 742, in bindPorts
[*web*]     self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/default.py", line 244, in listenTCP
[*web*]     p.startListening()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/tcp.py", line 417, in startListening
[*web*]     self.factory.doStart()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/protocol.py", line 55, in doStart
[*web*]     self.startFactory()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
[*web*]     self.logFile = self._openLogFile(self.logPath)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 407, in _openLogFile
[*web*]     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
[*web*]     BaseLogFile.__init__(self, name, directory, defaultMode)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
[*web*]     assert os.path.isdir(self.directory)
[*web*] AssertionError

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From dp at twistedmatrix.com  Wed Apr  9 18:24:56 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 9 Apr 2003 15:24:56 -0700
Subject: [Twisted-Python] incredibly minor "fix"
In-Reply-To: <3E933CCA.3000508@enflyer.com>
Message-ID: <17F13E44-6ADA-11D7-8291-000393B3EC2C@twistedmatrix.com>

On Tuesday, April 8, 2003, at 02:19 PM, Rich Cavanaugh wrote:

> 	I know, I couldn't have possibly found something smaller. The warning 
> was annoying me. This is a patch to FormErrorModel to add the request 
> argument to the wmfactory method.

Applied, thanks. If anyone else finds any of these in base twisted, 
please let me know.

Donovan




From bob at redivi.com  Wed Apr  9 18:36:03 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 9 Apr 2003 18:36:03 -0400
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <1049923833.30463.57.camel@troglodyte.funhouse>
Message-ID: <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>

I don't have time for a large reply right now, but....

On Wednesday, Apr 9, 2003, at 17:30 America/New_York, Kevin Turner 
wrote:

> [Recap:  Last night, Bob was complaining that the order that services
> were started and stopped was undefined, saying
>
> Bob> well if you have service A dependent on service B
> Bob> and you don't want service A to actually start service B
> Bob> like let's say you have a database service or something
> Bob> and you have another service that wants to persist stuff using the
> Bob> database service
>
> so he made the order in which services are started defined as the order
> in which they were added to the service collection, and the reverse for
> stopping.]
>
> Bob, I fear this solution is too fragile if your services really depend
> on one another.  While it will work for now when installing services is
> something that happens once in mktap, I fear it'll break down with more
> dynamic service management.  Example::
>
>     application.addService("dataStore", StupidStorage())
>     application.addService("dataMaker", FooService())
>
>     # ...later, decide we have outgrown StupidStorage:
>     application.removeService("dataStore")
>     application.addService("dataStore", RealStorage())

Well nomatter what, unless it uses 
application.getServiceNamed("dataStore") everywhere, you just broke 
dataMaker.  If you're changing the storage you have bigger things to 
worry about than this little corner case.  You need to pause/stop 
FooService, export all the data from the existing storage, stop the 
existing storage, start the new storage, import all the data into the 
new storage, change FooService's reference to the new storage, 
resume/start FooService, and cross your fingers.

It is a good feature that services get started and stopped in a 
sensible order, there's no reason they shouldn't.  I didn't want to 
change the implementation to a list because that would've required more 
code to change, and had the capability to break existing stuff because 
there is no API iterate an AbstractServiceCollection (or the bastard 
Application class, which should be one but doesn't mixin IIRC).

>
> With your ordering, the new dataStore will now stop before dataMaker
> does.
>
> Instead of introducing ordering dependencies into the flat top-level
> service namespace, I think the right answer to your problem is to do as
> Chris suggested: Use a hierarchical structure by making dataStore a
> MultiService, and adding any dataMaker services at its children.  That
> way your dataStore can always make sure its children shut down before 
> it
> does.

That's only an issue if you use persisted Application objects, I don't. 
  What if you want to stop the storage without stopping it's children?  
In some cases, my ApplicationServices only depend on the storage for 
initialization anyways, so it wouldn't make sense to force them to shut 
down when the storage does.

>
> Does this work for you?  If so, I would like to revert your changes
> making Application.services an OrderedDict before the (imminent!)
> release, just because anything that requires a change to the
> persistnceVersion is a big potential spot for trouble.  We have no
> inter-version testing framework at all.

You can take out the version upgrade if it doesn't work.  I used an 
OrderedDict for that reason, it has the same interface as a normal 
dict..  so no change to the code (other than stopping in reverse order 
of keys, which will still work on a regular dict, and __init__ of 
course) were made.  The upgrade was purely so new services added to old 
application objects would have their start/stop order preserved.

-bob




From cce at clarkevans.com  Thu Apr 10 01:33:02 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 05:33:02 +0000
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
Message-ID: <20030410053302.GA6339@doublegemini.com>

work in progress on my understanding of extrepum's flow... not
in anyway near perfect

-------------

''' Flow -- async data flows

    This is a flow module which is used for async data flows, 
    in particularly those coming from databases where blocking
    behavior is common.   Implementations will typically use
    generators (or anything implementing the iterator protocol)
    for each stage of the flow.

    Basically, communication within the data flow is carried
    out using the yield statement.  Besides using 'return' 
    or throwing a StopIteration exception, there are several
    items which yield can return:

       flow.Yield      This (singleton) value should be returned when an
                       operation would block, it gives other micro-threads
                       a chance to do their work.

       flow.Callable   A callable object should be returned when a function
                       should be executed.  This adds another stage to the
                       flow. These objects have a 'result' attribute which 
                       is filled in with the output of the function, or a 
                       subclass of failure.Failure for exceptions.

       flow.Iteration  An iterable object, that is, a generator, or array,
                       or class which implements both next() and __iter__.
                       These objects, like Callable, have a 'result' 
                       attribute, but also have a stop attribute which
                       is true when StopIteration has been thrown.

       <anything>      Any other return value
  
'''
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem:
    ''' Base class of all flow objects '''
    def __init__(self):
        self.result = None

Yield = FlowItem()  # A special flow item which signals a block

class Iteration(FlowItem):
    ''' An iteration object

        Used for objects which implement __iter__ and next
        and can be called more than once maintaining state.
    '''
    def __init__(self, iterable):
        FlowItem.__init__(self)
        self.next    = iter(iterable).next
        self.stop    = 0
    def __call__(self):
        try:
            self.result = self.next()
        except StopIteration:
            self.stop = 1
            self.result = None
        except:
            self.stop = 1
            self.result = failure.Failure()
        return self.result

class Callable(FlowItem):
    ''' A callable, where the function value is returned '''
    def __init__(self, func, *args, **kwargs):
        FlowItem.__init__(self)
        self.args   = args
        self.kwargs = kwargs
        self.func   = func
    def __call__(self):
        try:
            self.result = apply(self.func, self.args, self.kwargs)
        except:
            self.result = failure.Failure()
        return self.result

class Controller(Iteration):
      ''' An iteration object that remains on the stack

          When a Callable or an Iteration return a FlowItem
          other than Yield, then they are normally replaced
          by the returned value, so that it's value is returned
          to the Callable's caller.  In the case of a Controller,
          this replacement behavior isn't performed.
      '''
      pass

class Flow(object):
    ''' an flow, call next() until the iterator raises StopIteration '''
    def __init__(self, controller):
        self._stack = [controller]
    def __iter__(self): return self
    def next(self):
        while self._stack:
            head = self._stack.pop()
            result = head()
            if isinstance(result, FlowItem):
                if result is Yield: 
                    self._stack.append(head)
                    return 1
                if isinstance(head, Controller):
                    self._stack.append(head)
                self._stack.append(result)
        raise StopIteration

class DeferredFlow(object):
    pass
    # basically, create a Flow, loop on Flow.next()
    # for each item in the loop, do a reactor.callLater(0, next)
    # return the very last value or error via a Deferred




From lafou at wanadoo.fr  Thu Apr 10 03:04:59 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 10 Apr 2003 09:04:59 +0200
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <20030410053302.GA6339@doublegemini.com>
References: <1049923833.30463.57.camel@troglodyte.funhouse>
	 <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
	 <20030410053302.GA6339@doublegemini.com>
Message-ID: <1049958299.18982.23.camel@biproc>

Hello Clarck

Your post is in a wrong thread...

BTW, how do you test this ? It seems to be good (well written), but I'm
not sure to exactly understand what you wanted to do.

If I sum up (from my point of view) :

Callable  : may be a function bloc that run only once
Iteration : may be a function bloc that loop on something (like a
datasource)
and Yield : hum, what's the point of Yield ?


Anyway, this version if different from the one on your website.

On Thu, 2003-04-10 at 07:33, Clark C. Evans wrote:
> work in progress on my understanding of extrepum's flow... not
> in anyway near perfect
> 
> -------------
> 
> ''' Flow -- async data flows
> 
>     This is a flow module which is used for async data flows, 
>     in particularly those coming from databases where blocking
>     behavior is common.   Implementations will typically use
>     generators (or anything implementing the iterator protocol)
>     for each stage of the flow.
> 
>     Basically, communication within the data flow is carried
>     out using the yield statement.  Besides using 'return' 
>     or throwing a StopIteration exception, there are several
>     items which yield can return:
> 
>        flow.Yield      This (singleton) value should be returned when an
>                        operation would block, it gives other micro-threads
>                        a chance to do their work.
> 
>        flow.Callable   A callable object should be returned when a function
>                        should be executed.  This adds another stage to the
>                        flow. These objects have a 'result' attribute which 
>                        is filled in with the output of the function, or a 
>                        subclass of failure.Failure for exceptions.
> 
>        flow.Iteration  An iterable object, that is, a generator, or array,
>                        or class which implements both next() and __iter__.
>                        These objects, like Callable, have a 'result' 
>                        attribute, but also have a stop attribute which
>                        is true when StopIteration has been thrown.
> 
>        <anything>      Any other return value
>   
> '''
> from twisted.python import failure
> from twisted.python.compat import StopIteration, iter
> 
> class FlowItem:
>     ''' Base class of all flow objects '''
>     def __init__(self):
>         self.result = None
> 
> Yield = FlowItem()  # A special flow item which signals a block
> 
> class Iteration(FlowItem):
>     ''' An iteration object
> 
>         Used for objects which implement __iter__ and next
>         and can be called more than once maintaining state.
>     '''
>     def __init__(self, iterable):
>         FlowItem.__init__(self)
>         self.next    = iter(iterable).next
>         self.stop    = 0
>     def __call__(self):
>         try:
>             self.result = self.next()
>         except StopIteration:
>             self.stop = 1
>             self.result = None
>         except:
>             self.stop = 1
>             self.result = failure.Failure()
>         return self.result
> 
> class Callable(FlowItem):
>     ''' A callable, where the function value is returned '''
>     def __init__(self, func, *args, **kwargs):
>         FlowItem.__init__(self)
>         self.args   = args
>         self.kwargs = kwargs
>         self.func   = func
>     def __call__(self):
>         try:
>             self.result = apply(self.func, self.args, self.kwargs)
>         except:
>             self.result = failure.Failure()
>         return self.result
> 
> class Controller(Iteration):
>       ''' An iteration object that remains on the stack
> 
>           When a Callable or an Iteration return a FlowItem
>           other than Yield, then they are normally replaced
>           by the returned value, so that it's value is returned
>           to the Callable's caller.  In the case of a Controller,
>           this replacement behavior isn't performed.
>       '''
>       pass
> 
> class Flow(object):
>     ''' an flow, call next() until the iterator raises StopIteration '''
>     def __init__(self, controller):
>         self._stack = [controller]
>     def __iter__(self): return self
>     def next(self):
>         while self._stack:
>             head = self._stack.pop()
>             result = head()
>             if isinstance(result, FlowItem):
>                 if result is Yield: 
>                     self._stack.append(head)
>                     return 1
>                 if isinstance(head, Controller):
>                     self._stack.append(head)
>                 self._stack.append(result)
>         raise StopIteration
> 
> class DeferredFlow(object):
>     pass
>     # basically, create a Flow, loop on Flow.next()
>     # for each item in the loop, do a reactor.callLater(0, next)
>     # return the very last value or error via a Deferred
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From cce at clarkevans.com  Thu Apr 10 04:51:11 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 08:51:11 +0000
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <1049958299.18982.23.camel@biproc>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc>
Message-ID: <20030410085111.GA6915@doublegemini.com>

On Thu, Apr 10, 2003 at 09:04:59AM +0200, Philippe Lafoucri?re wrote:
| Your post is in a wrong thread...

Oops.  Responded to the wrong message.  ;(

| BTW, how do you test this ? It seems to be good (well written), but I'm
| not sure to exactly understand what you wanted to do.

The basic pattern, as put forth by extrepum in his post a while back...
http://www.twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html
is that you implement your Flow object using a generator...


   def mygenerator():
       print "dosomething"
       d = SubGenerator()
       yield d
       print d.result
       d = AnotherSubGenerator()
       yield d
       print d.result
    
...

 
''' Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.

    A data flow starts with a top level generator, which has numerous
    yield statements.   Each yield can return one of several types:

        flow.Cooperate  This (singleton) value should be returned when 
                        the flow would like to give up control of the 
                        call stack to allow other events to be handled.

        flow.Generator  This is a sub-flow (iterator) to be executed.  
                        This object has a 'result' value which can be 
                        checked for each value yielded.   If the last
                        iteration of the sub-flow produced an exception,
                        then a failure.Failure object will be returned.

                        While the sub-flow is generating (it has not
                        returned or raised StopIteration), it will have
                        an 'active' state of true.  Once it is finished,
                        the 'active' state will be false.

       <anything>       Any other return value, which is not a FlowItem
 
'''
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem: pass
Cooperate = FlowItem() 

class Generator(FlowItem):
    def __init__(self, iterable):
        self.__next  = iter(iterable).next
        self.result  = None
        self.active  = 1
    def isFailure(self):
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        if self.isFailure():
            res = self.result
            if res.value:  raise res.value
            raise res.type
        return self.result
    def generate(self):
        try:
            self.result = self.__next()
        except StopIteration:
            self.active = 0
            self.result = None
        except:
            self.active = 0
            self.result = failure.Failure()

class Flow(Generator):
    ''' a top-level generator which can handle subordinates '''
    def __init__(self, iterable):
        Generator.__init__(self, iterable)
        self._stack = [self]
    def execute(self):
        while self._stack:
            head = self._stack[-1]
            head.generate()
            if head.active:
                if isinstance(result, FlowItem):
                    if result is Yield: 
                        return 1
                    self._stack.append(result)
            else:
                self._stack.pop()
                

from twisted.internet import defer, reactor
class DeferredFlow(Flow, defer.Deferred):
   ''' a version of Flow using Twisted's reactor and Deferreds '''
   def __init__(self, iterable):
       defer.Deferred.__init__(self)
       Flow.__init__(iterable)
       reactor.callLater(0, self.execute)
   def execute(self):
       if Flow.execute(self):
           reactor.callLater(0, self.execute)
       else:
           if self.isFailure():
               self.errback(self.result)
           else:
               self.callback(self.result)
 



From tv at twistedmatrix.com  Thu Apr 10 03:03:14 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 10 Apr 2003 10:03:14 +0300
Subject: [Twisted-Python] twistd causing AssertionError, exiting abruptly
In-Reply-To: <20030409202249.GA4696@polynode.com>
References: <20030409202249.GA4696@polynode.com>
Message-ID: <20030410070314.GA12147@lapdog>

On Wed, Apr 09, 2003 at 04:22:49PM -0400, Alex Levy wrote:
> When I run 'twistd -nf web.tap', twistd spits out the following traceback
> and exits.  I'm really not sure what this means; help?

> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
> [*web*]     self.logFile = self._openLogFile(self.logPath)
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 407, in _openLogFile
> [*web*]     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
> [*web*]     BaseLogFile.__init__(self, name, directory, defaultMode)
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
> [*web*]     assert os.path.isdir(self.directory)
> [*web*] AssertionError

	The path you are passing to mktap web for HTTP request log is somehow
	broken. The dirname of the path does not seem to refer to an
	existing directory.

-- 
:(){ :|:&};:



From lafou at wanadoo.fr  Thu Apr 10 05:51:28 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 10 Apr 2003 11:51:28 +0200
Subject: [Twisted-Python] Re: hacking on flow
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com>
Message-ID: <b73etp$qeh$1@main.gmane.org>

Clark, this is just an alogithme I was thinking of, before I found flow.py

I had to manage different flows in one application.

DS1 ----> BLOC1 ---+
                   |
DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

is an exemple of what it could be. Every thing is a bloc. DSx are 
datasources (there are also blocs). BLOCx are some treatment bloc that 
operate with their inputs, and provide the result on their outputs.

this is the algorithm comming with :

all bloc are "inactive"
for bloc in blocs:
    if len(bloc.inputs) is 0:
        bloc is "active" # it should be a datasource/producer


gotData(bloc, lines) :
    for line in lines:
        fill in connected blocs's inputs with outputs
        connected blocs are active
        while connected blocs's inputs are set:
            wait # I know, this sucks
    bloc is inactive

while there are still active blocs  
    for bloc in blocs
        if all inputs are available (!= None)
            bloc.proceed().addCallback(gotData)
        

# Fin algo #################################

This doesn't work because we wait for blocs to finish their jobs, and never 
come back to main loop...

This means also that I have to define a mapping between inputs / outputs of 
blocs. I can't see such thing in flow.py, that's maybe why I don't 
understand it well.

I wish I was clear enough :p




From rich at enflyer.com  Thu Apr 10 11:07:33 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Thu, 10 Apr 2003 10:07:33 -0500
Subject: [Twisted-Python] woven guard patch and example
Message-ID: <018e01c2ff72$eb3cf330$6501a8c0@richdesk>

The woven.guard patch attached contains one minor bug fix (changing a
reference in GuardSession.checkExpired from self.site.sessions to
self.guard.sessions). Also, it slightly modifies PerspectiveWrapper to make
using alternate resources for a login page easier.

The example file attached demonstrates using woven.guard with the patch
applied. If anyone wants I can post an example of use without the patch.

rich
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: woven.guard_demo.py
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030410/77a75226/attachment.txt 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guard.py.patch
Type: application/octet-stream
Size: 1682 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030410/77a75226/attachment.obj 

From cce at clarkevans.com  Thu Apr 10 11:44:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 15:44:32 +0000
Subject: [Twisted-Python] Re: hacking on flow
In-Reply-To: <b73etp$qeh$1@main.gmane.org>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org>
Message-ID: <20030410154432.GA8077@doublegemini.com>

On Thu, Apr 10, 2003 at 11:51:28AM +0200, Philippe Lafoucri?re wrote:
| I had to manage different flows in one application.
| 
| DS1 ----> BLOC1 ---+
|                    |
| DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

Right.

| is an exemple of what it could be. Every thing is a bloc. DSx are 
| datasources (there are also blocs). BLOCx are some treatment bloc that 
| operate with their inputs, and provide the result on their outputs.
| 
| this is the algorithm comming with :
| 
| all bloc are "inactive"
| for bloc in blocs:
|     if len(bloc.inputs) is 0:
|         bloc is "active" # it should be a datasource/producer
| 
| gotData(bloc, lines) :
|     for line in lines:
|         fill in connected blocs's inputs with outputs
|         connected blocs are active
|         while connected blocs's inputs are set:
|             wait # I know, this sucks
|     bloc is inactive
| 
| while there are still active blocs  
|     for bloc in blocs
|         if all inputs are available (!= None)
|             bloc.proceed().addCallback(gotData)

Ok.  So, basically, you have an input queue for each
code block, and when a particular condition on the 
queue is triggered, the code block fires.  For BLOC1,
it'd be any input from DS1, for BLOC2, it'd be input
from DS2.  For BLOC3, it'd be both input from BLOC1
and BLOC2.  

This is interesting.  With the new-improved flow 
(aka extrepum's method), this would be listed as
3 generators... plus 2 built-in generators.

DS1 = flow.QueryIterator("some query")
DS2 = flow.QueryIterator("another query")

def BLOC1:
    ds1 = flow.Generator( DS1 )
    yield ds1   # think of as ds1.next()
    while ds1.active:
        result = ds1.result   # value of ds1.next()
        //
        // process ds1.result, possibly
        // sending the result to the next
        // stage using:   yield result
        //
        yield ds1

def BLOC2:
    ds2 = flow.Generator( DS2 )
    yield ds2
    while ds2.active:
        result = ds2.result
        //
        // process ds2, calling yield result
        // to pass on value to next stage
        //
        yield ds2

def BLOC3:
    bl1 = flow.Generator(BLOC1())
    bl2 = flow.Generator(BLOC2())
    yield bl1; yield bl2
    while bl1.active and bl2.active:
        // do somethign with bl1.result and bl2.result
        yield bl1; yield bl2

d = flow.DeferredFlow(BLOC3)
d.addBoth(lambda x: print 'done')
reactor.start()

I'll make a test like this for the flow module so that
it's more clear.   This is such a *HUGE* improvement over
what I was doing... thank you _so_ much extrepum.

Best,

;) Clark



From lafou at wanadoo.fr  Thu Apr 10 12:13:58 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 10 Apr 2003 18:13:58 +0200
Subject: [Twisted-Python] Re: Re: hacking on flow
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org> <20030410154432.GA8077@doublegemini.com>
Message-ID: <b74576$ah4$1@main.gmane.org>

Thank you for answering so quicly ! (did you slept enough ?? :p)


> I'll make a test like this for the flow module so that
> it's more clear.   This is such a *HUGE* improvement over
> what I was doing... thank you _so_ much extrepum.
> 
> Best,
> 
> ;) Clark

And thank you _so_ much Clark, this starts to make sence to me. When flow
will be finished, it would be a great part of Twisted, and a good
demonstration of generators. I habe great hopes in it :)

Just a question, where the QueryIterator is defined ? I can't find it in
your last post. (Flow just inheritate form object, QueryIterator would be
defined in object ?? hum...)

kind regards,
Philippe




From acapnotic at twistedmatrix.com  Thu Apr 10 14:44:46 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 Apr 2003 11:44:46 -0700
Subject: [Twisted-Python] 1.0.4alpha2 fails accepttests for mail
Message-ID: <1050000247.30458.78.camel@troglodyte.funhouse>

Twisted 1.0.4alpha2 has been released at last.  The reason it's marked
"alpha" rather than "release candidate" is because
accepttests.runMailTest fails.

 - Kevin,

Acting Release Manager

-- 
The moon is first quarter, 55.3% illuminated, 7.9 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030410/00a5dd24/attachment.pgp 

From cce at clarkevans.com  Thu Apr 10 15:21:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 19:21:23 +0000
Subject: [Twisted-Python] Re: Re: hacking on flow
In-Reply-To: <b74576$ah4$1@main.gmane.org>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org> <20030410154432.GA8077@doublegemini.com> <b74576$ah4$1@main.gmane.org>
Message-ID: <20030410192123.GA9260@doublegemini.com>

On Thu, Apr 10, 2003 at 06:13:58PM +0200, Philippe Lafoucri?re wrote:
| Just a question, where the QueryIterator is defined ? I can't find it in
| your last post. (Flow just inheritate form object, QueryIterator would be
| defined in object ?? hum...)

It is in the CVS version of flow.py... which may not perfectly work
till later this evening.     A copy included below.

Best,

Clark

# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
''' Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.

    A data flow starts with a top level generator, which has numerous
    yield statements.   Each yield can return one of several types:

        flow.Cooperate  This (singleton) value should be returned when 
                        the flow would like to give up control of the 
                        call stack to allow other events to be handled.

        flow.Generator  This is a sub-flow (iterator) to be executed.  
                        This object has a 'result' value which can be 
                        checked for each value yielded.   If the last
                        iteration of the sub-flow produced an exception,
                        then a failure.Failure object will be returned.

                        While the sub-flow is generating (it has not
                        returned or raised StopIteration), it will have
                        an 'active' state of true.  Once it is finished,
                        the 'active' state will be false.

       <anything>       Any other return value, which is not a FlowItem
 
'''
from __future__ import nested_scopes
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem: pass
Cooperate = FlowItem() 

class Generator(FlowItem):
    def __init__(self, iterable):
        self.__next  = iter(iterable).next
        self.result  = None
        self.active  = 1
    def isFailure(self):
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        if self.isFailure():
            res = self.result
            if res.value:  raise res.value
            raise res.type
        return self.result
    def generate(self):
        try:
            self.result = self.__next()
        except StopIteration:
            self.active = 0
            self.result = None
        except:
            self.active = 0
            self.result = failure.Failure()

class Flow(Generator):
    ''' a top-level generator which can handle subordinates '''
    def __init__(self, iterable):
        Generator.__init__(self, iterable)
        self._stack = [self]
    def execute(self, cooperate = 0):
        while self._stack:
            head = self._stack[-1]
            head.generate()
            if head.active:
                if isinstance(result, FlowItem):
                    if result is Cooperate:
                        if cooperate: 
                            return 1
                        else:
                            from time import sleep
                            sleep(.1)
                    self._stack.append(result)
            else:
                self._stack.pop()
                
#
# This code below belongs in twisted.internet.defer
#

from twisted.internet import defer, reactor
class DeferredFlow(Flow, defer.Deferred):
   ''' a version of Flow using Twisted's reactor and Deferreds '''
   def __init__(self, iterable):
       defer.Deferred.__init__(self)
       Flow.__init__(iterable)
       reactor.callLater(0, self.execute)
   def execute(self):
       if Flow.execute(self, cooperate = 1):
           reactor.callLater(0, self.execute)
       else:
           if self.isFailure():
               self.errback(self.result)
           else:
               self.callback(self.result)

#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow,
# with the exception of 'Cooperate'.  Although, if you are trying 
# to bring the output of a thread into a Flow, it is exactly what 
# you want.   The QueryIterator is just an obvious application 
# of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    """
     
    def __init__(self, data = None):
        self.data = data  
        tunnel = _TunnelIterator(self)
        self._tunnel = tunnel
     
    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
     
    def next(self):
        """ 
            The method used to fetch the next value, make sure
            to return a list of rows, not just a row
        """
        raise StopIteration

class _TunnelIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    """
    def __init__(self, source):
        """
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        """
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
     
    def process(self):
        """
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        """
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                self.buff.extend(val)    # lists are thread safe
        except StopIteration:
            callFromThread(self.stop)
        self.source = None
     
    def setFailure(self, failure):
        self.failure = failure
     
    def stop(self):
        self.isFinished = 1
     
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise Cooperation

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
        self.fetchall = fetchall
     
    def __call__(self,data):
        self.data = data
        return self
     
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res



From nbm at mithrandr.moria.org  Thu Apr 10 17:35:54 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 10 Apr 2003 23:35:54 +0200
Subject: [Twisted-Python] twisted.news cleanups and tests
Message-ID: <20030410213554.GA58576@mithrandr.moria.org>

Hi,

I'd like to know what people think about the following patch and tests.

These are my first tests for Twisted, so I'm not sure whether I'm
stepping over any style rules.

The patch fixes the unusability of NewsShelf due to dirdbm wanting to
try use directories as files.  It also stops us from putting '\n\r\n'
into the start of the body, and it puts '\r\n' termination on the last
line of the headers.  It moves placing the extra '\r\n' between the
headers and body in the one place it's necessary - articleRequest.

I haven't tested NewsStorage or NewsStorageAugmentation yet, but these
changes shouldn't be a problem.

The test cases detect the problems listed above, and perform some
general sanity tests.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
Index: database.py
===================================================================
RCS file: /cvs/Twisted/twisted/news/database.py,v
retrieving revision 1.17
diff -u -r1.17 database.py
--- database.py	5 Nov 2002 03:42:12 -0000	1.17
+++ database.py	10 Apr 2003 21:26:49 -0000
@@ -90,7 +90,7 @@
         headers = []
         for i in self.headers.values():
             headers.append('%s: %s' % i)
-        return string.join(headers, '\r\n')
+        return string.join(headers, '\r\n') + '\r\n'
     
     def overview(self):
         xover = []
@@ -275,7 +275,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
 
         a = Article(headers, article)
         groups = string.split(a.getHeader('Newsgroups'))
@@ -359,7 +359,7 @@
         if self.db.has_key(group):
             if self.db[group].has_key(index):
                 a = self.db[group][index]
-                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
             else:
                 return defer.fail(ERR_NOARTICLE)
         else:
@@ -431,7 +431,10 @@
         self.path = path
         self.mailhost = mailhost
 
-        self.dbm = dirdbm.Shelf(path)
+        if not os.path.exists(path):
+            os.mkdir(path)
+
+        self.dbm = dirdbm.Shelf(os.path.join(path, "newsshelf"))
         if not len(self.dbm.keys()):
             self.initialize()
 
@@ -500,7 +503,7 @@
 
     def postRequest(self, message):
         cleave = message.find('\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         
         article = Article(headers, article)
         groups = article.getHeader('Newsgroups').split()
@@ -722,7 +725,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         article = Article(headers, article)
         return self.runInteraction(self._doPost, article)
 
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os, types
from pprint import pformat

from twisted.trial import unittest
from twisted.news import news, database
from twisted.internet import reactor

MESSAGE_ID = "f83ba57450ed0fd8ac9a472b847e830e"

POST_STRING = """Path: not-for-mail
From: <exarkun at somehost.domain.com>
Subject: a test
Newsgroups: alt.test.nntp
Organization: 
Summary: 
Keywords: 
Message-Id: %s
User-Agent: tin/1.4.5-20010409 ("One More Nightmare") (UNIX) (Linux/2.4.17 (i686))

this is a test
...
lala
moo
-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
--
 10:56pm up 4 days, 4:42, 1 user, load average: 0.08, 0.08, 0.12
""" % (MESSAGE_ID)

class NewsTestCase(unittest.TestCase):
    def callback(self, result):
        self.result = result

    def errback(self, failure):
        try:
            self.fail('Errback called: ' + str(failure))
        except Exception, e:
            self.error = sys.exc_info()
            raise

    def timeout(self):
        reactor.crash()
        self.fail('Timed out')

    def setUp(self):
        self.backend = database.NewsShelf(None, 'news2.db')
        self.backend.addGroup('alt.test.nntp', 'y')
        self.backend.postRequest(POST_STRING.replace('\n', '\r\n'))

    def tearDown(self):
        try:
            del self.result
        except:
            pass
        try:
            del self.error
        except:
            pass

    def testArticleExists(self):
        d = self.backend.articleExistsRequest(MESSAGE_ID)
        self.assert_(d.result)

    def testArticleRequest(self):
        d = self.backend.articleRequest(None, None, MESSAGE_ID)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(type(self.result) == types.TupleType,
                        'callback result is wrong type: ' + str(self.result))
        self.failUnless(len(self.result) == 3,
                        'callback result list should have three entries: ' +
                        str(self.result))
        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

    def testHeadRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.headRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

        self.failUnless(self.result[2][-2:] == '\r\n',
                        "headers must be \\r\\n terminated.")

    def testBodyRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.bodyRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[2][0:4] == 'this', "message body has been altered: " +
                        pformat(self.result[2][0:4]))

From cce at clarkevans.com  Fri Apr 11 03:38:34 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 11 Apr 2003 07:38:34 +0000
Subject: [Twisted-Python] rewrite of flow.py completed
Message-ID: <20030411073834.GB11627@doublegemini.com>

Ok.  The complete re-write of flow.py based on the work of 
extrepum ("Bob Ippolito") is finished, with a test case
checked in.  This differs from extrepum's work [1] in 
some ways, but is almost identical in others.

1.  The implementation and test suite does not use generators,
    thus it is safe for 2.1 usage... although I can't imagine
    anyone using it without generators.   But the advantage 
    is that it could go into the current Twisted code base.
    The test suite uses iterators (with the corresponding
    generator commented out).

2.  This implementation has 4 distinct components:

    a) the core 'Flow' class and its supporting items, could be
       put into something like twisted.python.flow as they only
       depend upon other twisted.python stuff.  

    b) There is a DeferredFlow which uses Flow as a mix-in with
       Deferred, with behavior similar to DeferredList.  This 
       could go into twisted.internet.defer

    c) There is a ThreadedIterator which depends upon DeferredFlow, 
       and can be used to merge blocking behavior into the 
       framework.   This could go into twisted.internet.threads

    d) There is a very small class which builds upon ThreadedIterator
       that uses a pool from twisted.enterprise.adbapi; however, 
       in this context the async features of adbapi more or less
       get in the way.   So, perhaps this is best left as an example.

    In particular, extrepum's work build on top of Deferred, which
    I think is unnecessary; thus quite a bit of simplification 
    occurred when stripping out the Deferred stuff, and instead
    treating DeferredFlow as a cross product or mix-in of 
    Flow and Deferred.

3.  Extrepum's work was more 'flat' and didn't take recursive
    use of the technique into consideration; or perhaps I just 
    didn't understand how it would handle recursive usage.
    In any case, this implementation allows generators to call
    other generators and provides a nice stack unwinding, etc.

4.  I'd like to eventually look more at extrepum's work to 
    see if he had additional aspects that I've missed.  If 
    those aspects are generally useable, then I'll include 
    them.

Anyway, that's about it.  I'm now rebuilding some of my internal
code to use this module and ripping the old flow.py out.  This 
flow overall has been *greatly* simpler usage -- and I can't
thank extrepum enough for pointing me to his usage of generators
to create async flows within Twisted.

I'd also like to thank Itamar, Moshez, Radix, and Exarkun for
helping me along and pointing me in the right directions.

Best,

Clark

[1] twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html

# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
#
""" Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.   A data flow
    is constructed with a top level generator, which can have three 
    types of yield statements:  flow.Cooperate, flow.Generator, or
    any other return value with exceptions wrapped using failure.Failure
    An example program...

    from __future__ import generators
    import flow
    def producer():
        lst = flow.Generator([1,2,3])
        nam = flow.Generator(['one','two','three'])
        while 1:
            yield lst; yield nam
            if lst.stop or nam.stop: 
                return
            yield (lst.result, nam.result)

    def consumer():
        title = flow.Generator(['Title'])
        yield title
        print title.getResult()
        lst = flow.Generator(producer())
        try:
            while 1:
                yield lst
                print lst.getResult()
        except flow.StopIteration: pass

    flow.Flow(consumer()).execute()

"""
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowCommand: 
    """ Objects given special meaning when returned from yield """
    pass

class Cooperate(FlowCommand):
    """ Represents a request to delay and let other events process

        Objects of this type are returned within a flow when
        the flow would block, or needs to sleep.  This object
        is then used as a signal to the flow mechanism to pause
        and perhaps let other delayed operations to proceed.
    """
    def __init__(self, timeout = 0):
        self.timeout = timeout

class Generator(FlowCommand):
    """ Wraps a generator or other iterator for use in a flow 

        Creates a nested generation stage (a producer) which can provide
        zero or more values to the current stage (the consumer).  After 
        a yield of this object when control has returned to the caller,
        this object will have two attributes:

            stop    This is true if the underlying generator has not 
                    been started (a yield is needed) or if the underlying
                    generator has raised StopIteration

            result  This is the result of the generator if it is active, 
                    the result may be a fail.Failure object if an 
                    exception was thrown in the nested generator.
    """      
    def __init__(self, iterable):
        self._next  = iter(iterable).next
        self.result = None
        self.stop   = 1
    def isFailure(self):
        """ return a boolean value if the result is a Failure """ 
        if self.stop: raise StopIteration()
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        """ return the result, or re-throw an exception on Failure """
        if self.isFailure():
            raise (self.result.value or self.result.type)
        return self.result
    def _generate(self):
        """ update the active and result member variables """ 
        try:
            self.result = self._next()
            self.stop = 0
        except StopIteration:
            self.stop = 1
            self.result = None
        except Cooperate, coop:
            self.stop = 0
            self.result = coop
        except failure.Failure, fail:
            self.stop = 1
            self.result = failure
        except:
            self.stop = 1
            self.result = failure.Failure()

class Flow:
    """ A flow contruct, created with a top-level generator/iterator

        The iterable provided to this flow is the top-level consumer
        object.  From within the consumer, multiple 'yield' calls can
        be made returning either Cooperate or Generate.  If a Generate
        object is returned, then it becomes the current context and
        the process is continued.  Communication from the producer 
        back to the consumer is done by yield of a non FlowItem
    """
    def __init__(self, iterable):
        self.results = []
        self._stack  = [Generator(iterable)]
    def _addResult(self, result):
        """ private called as top-level results are added"""
        self.results.append(result)
    def _execute(self):
        """ private execute, execute flow till a Cooperate is found """
        while self._stack:
            head = self._stack[-1]
            head._generate()
            if head.stop:
                self._stack.pop()
            else:
                result = head.result
                if isinstance(result, FlowCommand):
                    if isinstance(result, Cooperate):
                        return result.timeout
                    assert(isinstance(result, Generator))
                    self._stack.append(result)
                else:
                    if len(self._stack) > 1:
                        self._stack.pop()
                    else:
                        if self._addResult(result):
                            return
    def execute(self):
        """ continually execute, using sleep for Cooperate """
        from time import sleep
        while 1:
            timeout = self._execute()
            if timeout is None: break
            sleep(timeout)

from twisted.internet import defer
class DeferredFlow(Flow, defer.Deferred):
    """ a version of Flow using Twisted's reactor and Deferreds
 
        In this version, a call to execute isn't required.  Instead,
        the iterable is scheduled right away using the reactor.  And,
        the Cooperate is implemented through the reactor's callLater.
 
        Since more than one (possibly failing) result could be returned,
        this uses the same semantics as DeferredList
    """
    def __init__(self, iterable, delay = 0, 
                 fireOnOneCallback=0, fireOnOneErrback=0):
        """initialize a DeferredFlow
        @param iterable:          top level iterator / generator
        @param delay:             delay when scheduling reactor.callLater
        @param fireOnOneCallback: a flag indicating that the first good 
                                  yielded result should be sent via Callback
        @param fireOnOneErrback:  a flag indicating that the first failing
                                  yield result should be sent via Errback
        """
        from twisted.internet import reactor
        defer.Deferred.__init__(self)
        Flow.__init__(self,iterable)
        self.fireOnOneCallback = fireOnOneCallback
        self.fireOnOneErrback  = fireOnOneErrback
        reactor.callLater(delay, self._execute)
    def execute(self): 
        raise TypeError("Deferred Flow is auto-executing") 
    def _addResult(self, result):
        """ emulate DeferredList behavior, short circut if event is fired """
        if not self.called:
            if self.fireOnOneCallback:
                if not isinstance(result, failure.Failure):
                    self.callback((result,len(self.results)))
                    return 1
            if self.fireOnOneErrback:
                if isinstance(result, failure.Failure):
                    self.errback(fail.Failure((result,len(self.results))))
                    return 1
            self.results.append(result)
    def _execute(self):
        timeout = Flow._execute(self)
        if timeout is None:
            if not self.called:
                self.callback(self.results)
        else:
            from twisted.internet import reactor
            reactor.callLater(timeout, self._execute)
 
#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow.
# Although, if you are trying to bring the output of a thread into
# a Flow, it is exactly what you want.   The QueryIterator is 
# just an obvious application of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    """
     
    def __init__(self):
        tunnel = _TunnelIterator(self)
        self._tunnel = tunnel
     
    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
     
    def next(self):
        """ 
            The method used to fetch the next value, make sure
            to return a list of rows, not just a row
        """
        raise StopIteration

class _TunnelIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    """
    def __init__(self, source):
        """
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        """
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
     
    def process(self):
        """
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        """
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                self.buff.extend(val)    # lists are thread safe
        except StopIteration:
            callFromThread(self.stop)
        self.source = None
     
    def setFailure(self, failure):
        self.failure = failure
     
    def stop(self):
        self.isFinished = 1
     
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise Cooperate()

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
        self.fetchall = fetchall
     
    def __call__(self,data):
        self.data = data
        return self
     
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res

----- End forwarded message -----



From warner at lothar.com  Fri Apr 11 04:02:39 2003
From: warner at lothar.com (Brian Warner)
Date: Fri, 11 Apr 2003 01:02:39 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
References: <Pine.LNX.4.44.0304081118030.12962-100000@localhost.localdomain>
Message-ID: <20030411.010239.88712921.warner@lothar.com>

Jasper Phillips <jasper at peak.org> writes:
> I was talking with Kevin Turner at the pub last night after the "Porpig"
> meeting, and he mentioned having the same problem with circular references I
> was having, so I offered to post the klu... err, patch I had for the problem.

Jasper: thanks so much for investigating this one!

I think Glyph finally nailed this bug in some code that went into CVS a few
days ago. It should be in the latest release (1.0.4a2). Could you give that a
try and see if it fixes your original bug? The test case that exarkun added
now passes, but I'd like to make sure your code is now working too.

thanks!
 -Brian



From imunoz at daipro.net  Fri Apr 11 08:37:16 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Fri, 11 Apr 2003 14:37:16 +0200
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost> <000b01c2fdaf$722b0000$78924fd4@isidro> <005801c2fde0$0813c450$0201a8c0@brinstar>
Message-ID: <000901c30027$16e38580$78924fd4@isidro>

Thanks David.

----- Original Message -----
From: "David Phillips" <david at acz.org>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, April 08, 2003 5:03 PM
Subject: Re: [Twisted-Python] Oscar protocol information?


> Isidro Mu?oz writes:
> > I would like find information of Oscar protocol to analysis it,
> > commands, sockets, password, etc.
>
> http://www.google.com/search?q=oscar+protocol
>
> --
> David Phillips <david at acz.org>
> http://david.acz.org/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From jasper at peak.org  Fri Apr 11 09:53:41 2003
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 11 Apr 2003 06:53:41 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
In-Reply-To: <20030411.010239.88712921.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0304110642270.10740-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Fri, 11 Apr 2003, Brian Warner wrote:

> Jasper Phillips <jasper at peak.org> writes:
> > I was talking with Kevin Turner at the pub last night after the "Porpig"
> > meeting, and he mentioned having the same problem with circular references I
> > was having, so I offered to post the klu... err, patch I had for the problem.
> 
> Jasper: thanks so much for investigating this one!

I didn't have much choice, as the objects I'm transporting are circular. ;-)

> I think Glyph finally nailed this bug in some code that went into CVS a few
> days ago. It should be in the latest release (1.0.4a2). Could you give that a
> try and see if it fixes your original bug? The test case that exarkun added
> now passes, but I'd like to make sure your code is now working too.

Unfortunately it doesn't work for me. :-(

The simple test case at the end of test_newjelly.py _does_ work, but the
orignal more verbose test I posted (using pb) doesn't work, getting the same
__dict__ error as before.

So I tried replacing jelly.py with newjelly.py, with my fingers crossed.
Both the unit test and my "acceptence" test then work, but my code still
doesn't work...  Arg!

The error is from the assertion on line 40 of crefutil.py:
class NotKnown:                                   |
    ...                                           |
    def addDependant(self, mutableObject, key):   |
        assert not self.resolved  <---------------+
        ...

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+lsjr8EpjZ7/X9bIRAuinAKChN/OUFdeImCmBGMD4vx1Td8g71QCg3DXx
h51tYwNqHLZ7gbdnD5S/TaE=
=SKt4
-----END PGP SIGNATURE-----




From nbm at mithrandr.moria.org  Fri Apr 11 10:09:16 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Fri, 11 Apr 2003 16:09:16 +0200
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030410213554.GA58576@mithrandr.moria.org>
References: <20030410213554.GA58576@mithrandr.moria.org>
Message-ID: <20030411140915.GA68773@mithrandr.moria.org>

On Thu 2003-04-10 (23:35), Neil Blakey-Milner wrote:
> I'd like to know what people think about the following patch and tests.
> 
> These are my first tests for Twisted, so I'm not sure whether I'm
> stepping over any style rules.
> 
> The patch fixes the unusability of NewsShelf due to dirdbm wanting to
> try use directories as files.  It also stops us from putting '\n\r\n'
> into the start of the body, and it puts '\r\n' termination on the last
> line of the headers.  It moves placing the extra '\r\n' between the
> headers and body in the one place it's necessary - articleRequest.
> 
> I haven't tested NewsStorage or NewsStorageAugmentation yet, but these
> changes shouldn't be a problem.
> 
> The test cases detect the problems listed above, and perform some
> general sanity tests.

Here're updated versions of the patch and the test case.  We also pass
test_nntp now...

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
Index: database.py
===================================================================
RCS file: /cvs/Twisted/twisted/news/database.py,v
retrieving revision 1.17
diff -u -r1.17 database.py
--- database.py	5 Nov 2002 03:42:12 -0000	1.17
+++ database.py	11 Apr 2003 08:33:39 -0000
@@ -50,15 +50,16 @@
 class Article:
     def __init__(self, head, body):
         self.body = body
-        head = map(lambda x: string.split(x, ': ', 1), string.split(head, '\r\n'))
         self.headers = {}
-        for i in head:
-            if len(i) == 0:
-                continue
-            elif len(i) == 1:
-                self.headers[string.lower(i[0])] = (i, '')
-            else:
-                self.headers[string.lower(i[0])] = tuple(i)
+        header = None
+        for line in head.split('\r\n'):
+            if line[0] in ' \t':
+                i = list(self.headers[header])
+                i[1] += '\r\n' + line
+            else:
+                i = line.split(': ', 1)
+                header = i[0].lower()
+            self.headers[header] = tuple(i)
 
         if not self.getHeader('Message-ID'):
             s = str(time.time()) + self.body
@@ -90,7 +91,7 @@
         headers = []
         for i in self.headers.values():
             headers.append('%s: %s' % i)
-        return string.join(headers, '\r\n')
+        return string.join(headers, '\r\n') + '\r\n'
     
     def overview(self):
         xover = []
@@ -275,7 +276,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
 
         a = Article(headers, article)
         groups = string.split(a.getHeader('Newsgroups'))
@@ -359,7 +360,7 @@
         if self.db.has_key(group):
             if self.db[group].has_key(index):
                 a = self.db[group][index]
-                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
             else:
                 return defer.fail(ERR_NOARTICLE)
         else:
@@ -431,7 +432,10 @@
         self.path = path
         self.mailhost = mailhost
 
-        self.dbm = dirdbm.Shelf(path)
+        if not os.path.exists(path):
+            os.mkdir(path)
+
+        self.dbm = dirdbm.Shelf(os.path.join(path, "newsshelf"))
         if not len(self.dbm.keys()):
             self.initialize()
 
@@ -500,7 +504,7 @@
 
     def postRequest(self, message):
         cleave = message.find('\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         
         article = Article(headers, article)
         groups = article.getHeader('Newsgroups').split()
@@ -600,7 +604,7 @@
         except KeyError:
             return defer.fail(NewsServerError("No such group: " + group))
         else:
-            return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+            return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
     
     
     def headRequest(self, group, index, id = None):
@@ -722,7 +726,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         article = Article(headers, article)
         return self.runInteraction(self._doPost, article)
 
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os, types
from pprint import pformat

from twisted.trial import unittest
from twisted.news import news, database
from twisted.internet import reactor

MESSAGE_ID = "f83ba57450ed0fd8ac9a472b847e830e"

POST_STRING = """Path: not-for-mail
From: <exarkun at somehost.domain.com>
Subject: a test
Newsgroups: alt.test.nntp
Organization: 
Summary: 
Keywords: 
Message-Id: %s
User-Agent: tin/1.4.5-20010409 ("One More Nightmare") (UNIX) (Linux/2.4.17 (i686))

this is a test
...
lala
moo
-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
--
 10:56pm up 4 days, 4:42, 1 user, load average: 0.08, 0.08, 0.12
""" % (MESSAGE_ID)

class NewsTestCase(unittest.TestCase):
    def callback(self, result):
        self.result = result

    def errback(self, failure):
        try:
            self.fail('Errback called: ' + str(failure))
        except Exception, e:
            self.error = sys.exc_info()
            raise

    def timeout(self):
        reactor.crash()
        self.fail('Timed out')

    def setUp(self):
        self.backend = database.NewsShelf(None, 'news2.db')
        self.backend.addGroup('alt.test.nntp', 'y')
        self.backend.postRequest(POST_STRING.replace('\n', '\r\n'))

    def tearDown(self):
        try:
            del self.result
        except:
            pass
        try:
            del self.error
        except:
            pass

    def testArticleExists(self):
        d = self.backend.articleExistsRequest(MESSAGE_ID)
        self.assert_(d.result)

    def testArticleRequest(self):
        d = self.backend.articleRequest(None, None, MESSAGE_ID)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(type(self.result) == types.TupleType,
                        'callback result is wrong type: ' + str(self.result))
        self.failUnless(len(self.result) == 3,
                        'callback result list should have three entries: ' +
                        str(self.result))
        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))
        self.failUnless(self.result[2].find('\r\n\r\n'),
                        "Can't find \\r\\n\\r\\n between header and body")

    def testHeadRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.headRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

        self.failUnless(self.result[2][-2:] == '\r\n',
                        "headers must be \\r\\n terminated.")

    def testBodyRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.bodyRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[2][0:4] == 'this', "message body has been altered: " +
                        pformat(self.result[2][0:4]))

From bob at mastersofbranding.com  Wed Apr  9 18:30:41 2003
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Wed, 9 Apr 2003 18:30:41 -0400
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <1049923833.30463.57.camel@troglodyte.funhouse>
Message-ID: <E542D743-6ADA-11D7-BB99-000A95686CD8@mastersofbranding.com>

I don't have time for a large reply right now, but....

On Wednesday, Apr 9, 2003, at 17:30 America/New_York, Kevin Turner 
wrote:

> [Recap:  Last night, Bob was complaining that the order that services
> were started and stopped was undefined, saying
>
> Bob> well if you have service A dependent on service B
> Bob> and you don't want service A to actually start service B
> Bob> like let's say you have a database service or something
> Bob> and you have another service that wants to persist stuff using the
> Bob> database service
>
> so he made the order in which services are started defined as the order
> in which they were added to the service collection, and the reverse for
> stopping.]
>
> Bob, I fear this solution is too fragile if your services really depend
> on one another.  While it will work for now when installing services is
> something that happens once in mktap, I fear it'll break down with more
> dynamic service management.  Example::
>
>     application.addService("dataStore", StupidStorage())
>     application.addService("dataMaker", FooService())
>
>     # ...later, decide we have outgrown StupidStorage:
>     application.removeService("dataStore")
>     application.addService("dataStore", RealStorage())

Well nomatter what, unless it uses 
application.getServiceNamed("dataStore") everywhere, you just broke 
dataMaker.  If you're changing the storage you have bigger things to 
worry about than this little corner case.  You need to pause/stop 
FooService, export all the data from the existing storage, stop the 
existing storage, start the new storage, import all the data into the 
new storage, change FooService's reference to the new storage, 
resume/start FooService, and cross your fingers.

It is a good feature that services get started and stopped in a 
sensible order, there's no reason they shouldn't.  I didn't want to 
change the implementation to a list because that would've required more 
code to change, and had the capability to break existing stuff because 
there is no API iterate an AbstractServiceCollection (or the bastard 
Application class, which should be one but doesn't mixin IIRC).

>
> With your ordering, the new dataStore will now stop before dataMaker
> does.
>
> Instead of introducing ordering dependencies into the flat top-level
> service namespace, I think the right answer to your problem is to do as
> Chris suggested: Use a hierarchical structure by making dataStore a
> MultiService, and adding any dataMaker services at its children.  That
> way your dataStore can always make sure its children shut down before 
> it
> does.

That's only an issue if you use persisted Application objects, I don't. 
  What if you want to stop the storage without stopping it's children?  
In some cases, my ApplicationServices only depend on the storage for 
initialization anyways, so it wouldn't make sense to force them to shut 
down when the storage does.

>
> Does this work for you?  If so, I would like to revert your changes
> making Application.services an OrderedDict before the (imminent!)
> release, just because anything that requires a change to the
> persistnceVersion is a big potential spot for trouble.  We have no
> inter-version testing framework at all.

You can take out the version upgrade if it doesn't work.  I used an 
OrderedDict for that reason, it has the same interface as a normal 
dict..  so no change to the code (other than stopping in reverse order 
of keys, which will still work on a regular dict, and __init__ of 
course) were made.  The upgrade was purely so new services added to old 
application objects would have their start/stop order preserved.

-bob




From kevin at freegeek.org  Thu Apr 10 05:50:14 2003
From: kevin at freegeek.org (Kevin Turner)
Date: 10 Apr 2003 02:50:14 -0700
Subject: [Twisted-Python] 1.0.4alpha2 fails accepttests for mail
Message-ID: <1049968211.30462.73.camel@troglodyte.funhouse>

Packages of 1.0.4alpha2 are on their way to distribution centers now. 
The reason it's marked "alpha" rather than "release candidate" is
because accepttests.runMailTest fails.

 - Kevin,

Acting Release Manager

-- 
The moon is first quarter, 51.4% illuminated, 7.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030410/9e2a796e/attachment.pgp 

From glyph at twistedmatrix.com  Sat Apr 12 00:45:18 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 12 Apr 2003 00:45:18 -0400
Subject: [Twisted-Python] This internet brought to you by ____.
Message-ID: <8FCE3252-6CA1-11D7-AF6F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Dear Twisted Users,

In the last few months, Twisted seems to have become exponentially more 
popular.  I need to create more graphs and charts that show this in a 
systematic way, but I can certainly tell you that my bandwidth has been 
utilized more than it was in the past.

As many of you know, I host twistedmatrix.com in my home, on a 
"business DSL" line.  All of the Twisted developers use this machine, 
for running tests, running their own development servers, and checking 
their email.  It also runs the twistedmatrix.com web site and CVS 
server.  I like this set-up since it makes it relatively easy to make 
backups quickly, upgrade the hardware on this machine to meet demand, 
and "eat our own dog food": use various Twisted services in production.

With increased popularity comes increased traffic.  While the CPU of 
our development system remains at near-idle load, the bandwidth here is 
clearly inadequate.  Also, although I do nominally run a business here 
(a few *very* small odd hosting jobs) that's certainly not paying the 
full cost of keeping business DSL running.  I also don't really have a 
good enough set-up to set up a sensible contribution plan like the 
http://www.gnu-darwin.org/ site.

So, if you would like to see better performance out of the 
twistedmatrix.com site, I've finally gotten a personal PayPal "donate" 
button working that you can send contributions to.  You can find it on 
my personal website:

	http://www.twistedmatrix.com/users/glyph/scribbles/

Please include "bandwidth" in the "special instructions" field that you 
see when you send a contribution.  Also, please don't contribute 
anything if you're struggling yourself.  The developers should be 
beneficiaries of such contributions, not the donors.

Be advised that if I were to somehow become fabulously wealthy from 
these contributions, it would definitely be a good thing for the 
project as a whole ;-).

In related news, we are working on a plan to recognize folks and 
companies who have contributed to development of particular areas of 
Twisted.  As-yet-unacknowledged sponsors include Zoteca, Divmod, and 
Ninjaneering.  If you'd like to be a sponsor of a particular area of 
Twisted development, I'd like to hear from you.

Sometime soon there will definitely be a more structured way to 
organize such efforts, but until then, every little bit helps.  I 
encourage other Twisted developers to get other similar "donate" 
buttons - I would like to put up a "tip jar" page at some point where 
users can select a developer and contribute something.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+l5nkvVGR4uSOE2wRAnYNAJ9ccUedM0rMpjLgfjew3kHeFY/4agCfeoad
xTCxz9IBWwjiB/cmzaRcMcQ=
=lqWu
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Sat Apr 12 03:12:08 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sat, 12 Apr 2003 09:12:08 +0200
Subject: [Twisted-Python] Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com>
Message-ID: <b78e75$e02$1@main.gmane.org>

Clark C. Evans wrote:

> Ok.  The complete re-write of flow.py based on the work of
> extrepum ("Bob Ippolito") is finished, with a test case
> checked in.  This differs from extrepum's work [1] in
> some ways, but is almost identical in others.


Thank you so much Clark ! 
BTW, I'd like to test flow.py for my own student projects, but documentation
is in several threads on the newsgroup. Moreover, they are sometimes for
deprecated versions of flow.py. The best would be to write a little
tutorial, and include it in the HOWTO documentation. flow.py would be so
clear for most people.

I'd like to sea some real exemples with QueryIterator and the way to manage
several flow in an application.

If you need some help to write it, maybe I can write some specific parts.
But due to my poor english, this will be painful for me :-p


---
Philippe






From lafou at wanadoo.fr  Sat Apr 12 09:51:41 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sat, 12 Apr 2003 15:51:41 +0200
Subject: [Twisted-Python] Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com>
Message-ID: <b795k9$4k0$1@main.gmane.org>

Clark C. Evans wrote:

> Ok.  The complete re-write of flow.py based on the work of
> extrepum ("Bob Ippolito") is finished, with a test case
> checked in.  This differs from extrepum's work [1] in
> some ways, but is almost identical in others.
> 


Just some questions : 

- will flow.py be included in Twisted 1.0.4 (rc) ? 
- Did you write some unit tests ?
- could you add the outpout of your exemple (at the beginning of flow.py) ?


- In QueryIterator :

"
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
"
but :

>>> 'cursor' in dir (adbapi.ConnectionPool)
0

I think you want to use a 'standard' pool corresponding to API DB 2.0
twisted.entreprise.adbapi.ConnectionPool doesn't have a cursor method.
NTL, it's just the right use of flow, because we don't want a deffered here
(because of thread use).



kind regards
Philippe





From ecn at metaslash.com  Sat Apr 12 10:29:30 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 12 Apr 2003 10:29:30 -0400
Subject: [Twisted-Python] serial port error
Message-ID: <20030412142930.GA925@localhost.localdomain>

I tried to write to a serial port today, and Twisted didn't do so well.
"AttributeError: SerialPort instance has no attribute 'unsent'"

Linux Red Hat 9
Twisted (from CVS at 5:30 AM EDT)

Test:
    from twisted.protocols.basic import LineReceiver
    from twisted.internet.serialport import SerialPort
    from twisted.internet import reactor

    class Test(LineReceiver):
	def connectionMade(self):
	    self.transport.write('Hello World!\n')
    SerialPort(Test(), '/dev/ttyS0', reactor)
    reactor.run()

Stacktrace:
      File "test.py", line 10, in ?
	SerialPort(Test(), '/dev/ttyS0', reactor)
      File "/usr/lib/python2.2/site-packages/twisted/internet/serialport/posixserialport.py", line 49, in __init__
	self.protocol.makeConnection(self)
      File "/usr/lib/python2.2/site-packages/twisted/internet/protocol.py", line 290, in makeConnection
	self.connectionMade()
      File "test.py", line 8, in connectionMade
	self.transport.write('Hello World!\n')
      File "/usr/lib/python2.2/site-packages/twisted/internet/abstract.py", line 145, in write
	l = self.writeSomeData(data)
      File "/usr/lib/python2.2/site-packages/twisted/internet/serialport/posixserialport.py", line 59, in writeSomeData
	return os.write(self.fileno(), self.unsent)
    AttributeError: SerialPort instance has no attribute 'unsent'

-Eric



From exarkun at intarweb.us  Sat Apr 12 16:44:47 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 16:44:47 -0400
Subject: [Twisted-Python] serial port error
In-Reply-To: <20030412142930.GA925@localhost.localdomain>
References: <20030412142930.GA925@localhost.localdomain>
Message-ID: <20030412204447.GA6488@meson.dyndns.org>

On Sat, Apr 12, 2003 at 10:29:30AM -0400, Eric C. Newton wrote:
> 
> I tried to write to a serial port today, and Twisted didn't do so well.
> "AttributeError: SerialPort instance has no attribute 'unsent'"

  I just commited the fix, thanks for the report!

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 23 days, 17:01, 4 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030412/803cff87/attachment.pgp 

From exarkun at intarweb.us  Sat Apr 12 17:50:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 17:50:53 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030411140915.GA68773@mithrandr.moria.org>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org>
Message-ID: <20030412215053.GA7183@meson.dyndns.org>

On Fri, Apr 11, 2003 at 04:09:16PM +0200, Neil Blakey-Milner wrote:
> On Thu 2003-04-10 (23:35), Neil Blakey-Milner wrote:
> > I'd like to know what people think about the following patch and tests.
> > 
> > These are my first tests for Twisted, so I'm not sure whether I'm
> > stepping over any style rules.
> > 

  Niel,

   Thanks!  I've neglected t.news for too long.  It looks like there are
some good fixes in here.

    I notice there's a fix for parsing headers with continuations included
here too, which is cool.  I don't think I was even aware of such things when
I wrote the code originally - what seems apparent to me now, though, is that
Article either shouldn't exist at all, or that it should grow into (and move
somewhere appropriate for) a fully-fledged, asynchronous message parser that
can be used throughout Twisted wherever email-like messages need to be dealt
with.

    In the test cases, you also used assert_() (but just once, I assume it
was an oversight), which shouldn't be access directly by tests cases, so I
changed this to a failUnless().  Also, I personally make it a point to turn
string module calls into string method calls when cleaning up code, and so
have done this as well.

    All in all, nice work.

  Jp 

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 23 days, 17:01, 4 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030412/f70f5746/attachment.pgp 

From acapnotic at twistedmatrix.com  Sat Apr 12 18:30:37 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 12 Apr 2003 15:30:37 -0700
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412215053.GA7183@meson.dyndns.org>
References: <20030410213554.GA58576@mithrandr.moria.org>
	 <20030411140915.GA68773@mithrandr.moria.org>
	 <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <1050186636.4978.12.camel@troglodyte.funhouse>

>     In the test cases, you also used assert_() (but just once, I assume it
> was an oversight), which shouldn't be access directly by tests cases,

says who?  why not?  I've always thought it was just an alternative
spelling of failUnless, and that it has the dangling underscore simply
because 'assert' is a keyword in Python.

-- 
The moon is waxing gibbous, 77.0% illuminated, 10.1 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030412/f7163b16/attachment.pgp 

From exarkun at intarweb.us  Sat Apr 12 18:42:29 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 18:42:29 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <1050186636.4978.12.camel@troglodyte.funhouse>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <1050186636.4978.12.camel@troglodyte.funhouse>
Message-ID: <20030412224229.GA7605@meson.dyndns.org>

On Sat, Apr 12, 2003 at 03:30:37PM -0700, Kevin Turner wrote:
> >     In the test cases, you also used assert_() (but just once, I assume it
> > was an oversight), which shouldn't be access directly by tests cases,
> 
> says who?  why not?  I've always thought it was just an alternative
> spelling of failUnless, and that it has the dangling underscore simply
> because 'assert' is a keyword in Python.

  Says me!  Rar!  I thought we only still supported it because PyUnit had
it.  In any case, it *is* bound to the same function as failUnless, so it
makes no practical difference, and I'm certainly not the authority for
Trial.  Multiple spellings for the same thing sucks, though, and given a
choice between the two, I'd pick failUnless() any day.

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 23 days, 19:01, 4 users, load average: 0.18, 0.18, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030412/ad2b0480/attachment.pgp 

From bob at redivi.com  Sat Apr 12 19:06:53 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 12 Apr 2003 19:06:53 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412224229.GA7605@meson.dyndns.org>
Message-ID: <73565079-6D3B-11D7-B675-000A95686CD8@redivi.com>

On Saturday, Apr 12, 2003, at 18:42 America/New_York, Jp Calderone 
wrote:

> On Sat, Apr 12, 2003 at 03:30:37PM -0700, Kevin Turner wrote:
>>>     In the test cases, you also used assert_() (but just once, I 
>>> assume it
>>> was an oversight), which shouldn't be access directly by tests cases,
>>
>> says who?  why not?  I've always thought it was just an alternative
>> spelling of failUnless, and that it has the dangling underscore simply
>> because 'assert' is a keyword in Python.
>
>   Says me!  Rar!  I thought we only still supported it because PyUnit 
> had
> it.  In any case, it *is* bound to the same function as failUnless, so 
> it
> makes no practical difference, and I'm certainly not the authority for
> Trial.  Multiple spellings for the same thing sucks, though, and given 
> a
> choice between the two, I'd pick failUnless() any day.

IIRC, Trial's unittest module has multiple spellings for a lot of 
things.  What we should probably do is make a decision on one set of 
spellings and issue DeprecationWarnings for the rest.

-bob




From cce at clarkevans.com  Sat Apr 12 19:39:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 12 Apr 2003 23:39:48 +0000
Subject: [Twisted-Python] Re: rewrite of flow.py completed
In-Reply-To: <b795k9$4k0$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org>
Message-ID: <20030412233948.GA16957@doublegemini.com>

On Sat, Apr 12, 2003 at 03:51:41PM +0200, Philippe Lafoucri?re wrote:
| - will flow.py be included in Twisted 1.0.4 (rc) ? 

It will probably be in the sandbox till it gets users other
than me, and in particular, till etrepum's feedback.

| - Did you write some unit tests ?

I started; see sandbox/test_flow.py

| - could you add the outpout of your exemple (at the beginning of flow.py)?

Done.

| - In QueryIterator :
| 
| "
|             self.curs = conn.cursor()
| "
| but :
| 
| >>> 'cursor' in dir (adbapi.ConnectionPool)
| 0

If you look, the conn is created from self.pool.connect() which
returns a standard API DB 2.0 connection.  I would have rather had
the constructor take a connection, but this won't work as the
Twisted ADBAPI uses the current thread to find the connection, thus
pool.connect() must be run in the appropriate thread, which is
not the thread where the constructor for this class would be executed.

| I think you want to use a 'standard' pool corresponding to API DB 2.0
| twisted.entreprise.adbapi.ConnectionPool doesn't have a cursor method.
| NTL, it's just the right use of flow, because we don't want a deffered here
| (because of thread use).

QueryIterator uses the ThreadedIterator.  ThreadedIterator basically
is two iterators that are 'linked' together, one in the main thread
and one in the thread which is allowed to block.  The two iterators
communicate with a shared list which holds intermediate output, ie,
it is the message queue from the iterator in the secondary thread 
to the primary thread.   Anyway, the iterator in the primary thread
is a simple 'proxy' like iterator, which raises Cooperate if there
isn't any data available from the secondary iterator.

Here is a simple example of how to make a ThreadedIterator...
note that the sleep(.1) call is not executed in the main 
thread -- that's the whole point of the ThreadedIterator.

        class CountIterator(flow.ThreadedIterator):
            def __init__(self, count):
                flow.ThreadedIterator.__init__(self)
                self.count = count
            def next(self): # this is run in a separate thread
                from time import sleep
                sleep(.1)
                val = self.count
                if not(val):
                    raise flow.StopIteration
                self.count -= 1
                return [val]
        def res(x): assert([5,4,3,2,1] == x)
        from twisted.internet import reactor
        f = flow.DeferredFlow(CountIterator(5))
        f.addCallback(res)
        reactor.callLater(2,reactor.stop)
        reactor.run()

Anyway, I made a bunch of checkins about a day ago to clean
up some of the documentation and to add the test_flow.py 

Best,

Clark
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes
import flow
import unittest

class producer:
    """ iterator version of the following generator... 

    def producer():
        lst = flow.Generator([1,2,3])
        nam = flow.Generator(['one','two','three'])
        while 1: 
            yield lst; yield nam
            if lst.stop or nam.stop:
                return
            yield (lst.result, nam.result)
    """
    def __iter__(self):
        self.lst   = flow.Generator([1,2,3])
        self.nam   = flow.Generator(['one','two','three'])
        self.state = self.yield_lst
        return self
    def yield_lst(self):
        self.state = self.yield_nam
        return self.lst
    def yield_nam(self):
        self.state = self.yield_results
        return self.nam
    def yield_results(self):
        self.state = self.yield_lst
        if self.lst.stop or self.nam.stop:
            raise flow.StopIteration
        return (self.lst.result, self.nam.result)
    def next(self):
        return self.state()


class consumer:
    """ iterator version of the following generator...

    def consumer():
        title = flow.Generator(['Title'])
        lst = flow.Generator(producer())
        yield title
        yield title.getResult()
        try:
            while 1:
                yield lst
                yield lst.getResult()
        except flow.StopIteration: pass
    """    
    def __iter__(self):
        self.title = flow.Generator(['Title'])
        self.lst   = flow.Generator(producer())
        self.state = self.yield_title
        return self
    def yield_title(self):
        self.state = self.yield_title_result
        return self.title
    def yield_title_result(self):
        self.state = self.yield_lst
        return self.title.getResult()
    def yield_lst(self):
        self.state = self.yield_result
        return self.lst
    def yield_result(self):
        self.state = self.yield_lst
        return self.lst.getResult()
    def next(self):
        return self.state()

class FlowTest(unittest.TestCase):
    def testBasic(self):
        f = flow.Flow([1,2,3])
        f.execute()
        self.assertEqual([1,2,3],f.results)

    def testProducer(self):
        f = flow.Flow(producer())
        f.execute() 
        self.assertEqual([(1,'one'),(2,'two'),(3,'three')],f.results)

    def testConsumer(self):
        f = flow.Flow(consumer())
        f.execute() 
        self.assertEqual(['Title',(1,'one'),(2,'two'),(3,'three')],f.results)

    def testDeferred(self):
        from twisted.internet import reactor
        def res(x):
            self.assertEqual(['Title', (1,'one'),(2,'two'),(3,'three')], x)
        f = flow.DeferredFlow(consumer())
        f.addCallback(res)
        reactor.iterate()

    def testThreaded(self):
        class CountIterator(flow.ThreadedIterator):
            def __init__(self, count):
                flow.ThreadedIterator.__init__(self)
                self.count = count
            def next(self): # this is run in a separate thread
                from time import sleep
                sleep(.1)
                val = self.count
                if not(val):
                    raise flow.StopIteration
                self.count -= 1
                return [val]
        def res(x): self.assertEqual([5,4,3,2,1], x)
        from twisted.internet import reactor
        f = flow.DeferredFlow(CountIterator(5))
        f.addCallback(res)
        reactor.callLater(2,reactor.stop)
        reactor.run()

if '__main__' == __name__:
    unittest.main()

-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
from __future__ import nested_scopes
""" Flow ... async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.   A data flow
    is constructed with a top level generator, which can have three 
    types of yield statements:  flow.Cooperate, flow.Generator, or
    any other return value with exceptions wrapped using failure.Failure
    An example program...

        from __future__ import generators
        import flow
        def producer():
            lst = flow.Generator([1,2,3])
            nam = flow.Generator(['one','two','three'])
            while 1:
                yield lst; yield nam
                if lst.stop or nam.stop: 
                    return
                yield (lst.result, nam.result)
    
        def consumer():
            title = flow.Generator(['Title'])
            yield title
            print title.getResult()
            lst = flow.Generator(producer())
            try:
                while 1:
                    yield lst
                    print lst.getResult()
            except flow.StopIteration: pass
    
        flow.Flow(consumer()).execute()

    produces the output:

        Title
        (1, 'one')
        (2, 'two')
        (3, 'three')
        
"""
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowCommand: 
    """ Objects given special meaning when returned from yield """
    pass

class Cooperate(FlowCommand):
    """ Represents a request to delay and let other events process

        Objects of this type are returned within a flow when
        the flow would block, or needs to sleep.  This object
        is then used as a signal to the flow mechanism to pause
        and perhaps let other delayed operations to proceed.
    """
    def __init__(self, timeout = 0):
        self.timeout = timeout

class Generator(FlowCommand):
    """ Wraps a generator or other iterator for use in a flow 

        Creates a nested generation stage (a producer) which can provide
        zero or more values to the current stage (the consumer).  After 
        a yield of this object when control has returned to the caller,
        this object will have two attributes:

            stop    This is true if the underlying generator has not 
                    been started (a yield is needed) or if the underlying
                    generator has raised StopIteration

            result  This is the result of the generator if it is active, 
                    the result may be a fail.Failure object if an 
                    exception was thrown in the nested generator.
    """      
    def __init__(self, iterable):
        self._next  = iter(iterable).next
        self.result = None
        self.stop   = 1
    def isFailure(self):
        """ return a boolean value if the result is a Failure """ 
        if self.stop: raise StopIteration()
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        """ return the result, or re-throw an exception on Failure """
        if self.isFailure():
            raise (self.result.value or self.result.type)
        return self.result
    def _generate(self):
        """ update the active and result member variables """ 
        try:
            self.result = self._next()
            self.stop = 0
        except StopIteration:
            self.stop = 1
            self.result = None
        except Cooperate, coop:
            self.stop = 0
            self.result = coop
        except failure.Failure, fail:
            self.stop = 1
            self.result = failure
        except:
            self.stop = 1
            self.result = failure.Failure()

class Flow:
    """ A flow contruct, created with a top-level generator/iterator

        The iterable provided to this flow is the top-level consumer
        object.  From within the consumer, multiple 'yield' calls can
        be made returning either Cooperate or Generate.  If a Generate
        object is returned, then it becomes the current context and
        the process is continued.  Communication from the producer 
        back to the consumer is done by yield of a non FlowItem
    """
    def __init__(self, iterable):
        self.results = []
        self._stack  = [Generator(iterable)]
    def _addResult(self, result):
        """ private called as top-level results are added"""
        self.results.append(result)
    def _execute(self):
        """ private execute, execute flow till a Cooperate is found """
        while self._stack:
            head = self._stack[-1]
            head._generate()
            if head.stop:
                self._stack.pop()
            else:
                result = head.result
                if isinstance(result, FlowCommand):
                    if isinstance(result, Cooperate):
                        return result.timeout
                    assert(isinstance(result, Generator))
                    self._stack.append(result)
                else:
                    if len(self._stack) > 1:
                        self._stack.pop()
                    else:
                        if self._addResult(result):
                            return
    def execute(self):
        """ continually execute, using sleep for Cooperate """
        from time import sleep
        while 1:
            timeout = self._execute()
            if timeout is None: break
            sleep(timeout)

from twisted.internet import defer
class DeferredFlow(Flow, defer.Deferred):
    """ a version of Flow using Twisted's reactor and Deferreds
 
        In this version, a call to execute isn't required.  Instead,
        the iterable is scheduled right away using the reactor.  And,
        the Cooperate is implemented through the reactor's callLater.
 
        Since more than one (possibly failing) result could be returned,
        this uses the same semantics as DeferredList
    """
    def __init__(self, iterable, delay = 0, 
                 fireOnOneCallback=0, fireOnOneErrback=0):
        """initialize a DeferredFlow
        @param iterable:          top level iterator / generator
        @param delay:             delay when scheduling reactor.callLater
        @param fireOnOneCallback: a flag indicating that the first good 
                                  yielded result should be sent via Callback
        @param fireOnOneErrback:  a flag indicating that the first failing
                                  yield result should be sent via Errback
        """
        from twisted.internet import reactor
        defer.Deferred.__init__(self)
        Flow.__init__(self,iterable)
        self.fireOnOneCallback = fireOnOneCallback
        self.fireOnOneErrback  = fireOnOneErrback
        reactor.callLater(delay, self._execute)
    def execute(self): 
        raise TypeError("Deferred Flow is auto-executing") 
    def _addResult(self, result):
        """ emulate DeferredList behavior, short circut if event is fired """
        if not self.called:
            if self.fireOnOneCallback:
                if not isinstance(result, failure.Failure):
                    self.callback((result,len(self.results)))
                    return 1
            if self.fireOnOneErrback:
                if isinstance(result, failure.Failure):
                    self.errback(fail.Failure((result,len(self.results))))
                    return 1
            self.results.append(result)
    def _execute(self):
        timeout = Flow._execute(self)
        if timeout is None:
            if not self.called:
                self.callback(self.results)
        else:
            from twisted.internet import reactor
            reactor.callLater(timeout, self._execute)
 
#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow.
# Although, if you are trying to bring the output of a thread into
# a Flow, it is exactly what you want.   The QueryIterator is 
# just an obvious application of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a Cooperate exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.

       Basically, the 'init' and 'next' method of subclasses are
       executed in this alternative thread.  The results of 'next'
       are marshalled back into the primary thread.  If when the
       main thread data is not available, then a particular 
       exception.
    """
    def __init__(self):
        class _Tunnel:
            def __init__(self, source):
                """
                    This is the setup, the source argument is the iterator
                    being wrapped, which exists in another thread.
                """
                self.source     = source
                self.isFinished = 0
                self.failure    = None
                self.buff       = []
            def process(self):
                """
                    This is called in the 'source' thread, and 
                    just basically sucks the iterator, appending
                    items back to the main thread.
                """
                try:
                    self.source.init()
                except: 
                    self.failure = failure.Failure()
                from twisted.internet.reactor import callFromThread
                try:
                    while 1:
                        val = self.source.next()
                        self.buff.extend(val)    # lists are thread safe
                except StopIteration:
                    callFromThread(self.stop)
                except: 
                    if not self.failure:
                        self.failure = failure.Failure()
                self.source = None
            def setFailure(self, failure):
                self.failure = failure
            def stop(self):
                self.isFinished = 1
            def next(self):
                if self.buff:
                   return self.buff.pop(0)
                if self.isFinished:  
                    raise StopIteration
                if self.failure:
                    raise self.failure
                raise Cooperate()
        tunnel = _Tunnel(self)
        self._tunnel = tunnel

    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
    
    def init(self):
        pass   
     
    def next(self):
        raise StopIteration

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.fetchall = fetchall
     
    def init(self):
        conn = self.pool.connect()
        self.curs = conn.cursor()
        self.curs.execute(self.sql)
 
    def next(self):
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res

From glyph at twistedmatrix.com  Sun Apr 13 02:16:55 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 01:16:55 -0500
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Saturday, April 12, 2003, at 04:50 PM, Jp Calderone wrote:

> ... throughout Twisted wherever email-like messages need to be dealt 
> with ...

Speaking of such message-unifying work:

Moshe and I were recently on IRC, discussing a unification of several 
disparate message representations within Twisted.  We're not exactly 
sure where this is going, but in a future release, the .mail, .words, 
and .news packages should all be unified, probably under the heading of 
"words", in order to present a coherent messaging API for things like 
bots which don't care whether you're talking to them through email, 
netnews, IRC, AOL IM, or whatever.

What this really means is that words is going to grow a 
"store-and-forward" mechanism as well as a "store-and-check" mechanism. 
  Also, a higher-level POP3 and IMAP client will be integrated for 
retrieval of messages.

twisted.im also needs to be refactored, in order to make its API more 
coherent and easier to register observers of.  However, it remains 
unclear whether this kind of functionality actually deserves a separate 
package (that .words will use) or whether it will go into .words 
directly.  Moshe has me mostly convinced that it should remain an 
independant package, since real-time-client code is going to look 
significantly different to abstract-message-processing-and-forwarding 
code.

Thoughts?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mQDZvVGR4uSOE2wRAi+AAJwOuVHtPtDr23Jz2bTgG5FbhnvqNACgjrVq
5/4mYIyKwFlvA0wMRyvWkjg=
=sF+C
-----END PGP SIGNATURE-----




From screwtape at froup.com  Sun Apr 13 03:53:46 2003
From: screwtape at froup.com (Tim Allen)
Date: Sun, 13 Apr 2003 17:53:46 +1000
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>

On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
wrote:

<snip>

> twisted.im also needs to be refactored, in order to make its API more 
> coherent and easier to register observers of.  However, it remains 
> unclear whether this kind of functionality actually deserves a 
> separate package (that .words will use) or whether it will go into 
> .words directly.  Moshe has me mostly convinced that it should remain 
> an independant package, since real-time-client code is going to look 
> significantly different to abstract-message-processing-and-forwarding 
> code.
>
> Thoughts?

I'll be watching this with interest. I'm not going to say it's 
impossible or crazy, but I'd like to see how all the inherent 
difficulties in making a "generic messagey thing" are overcome.

 From the top of my head:
  - IMAP and NNTP have a bunch of folders, POP3 has just one.
  - IMAP lets you create folders and move messages about, NNTP doesn't.
  - Instant messaging apps have no folders, but you could no doubt 
synthesise an 'inbox'. Some IM systems let you have 'categories' of 
buddies, which you might present as message folders. However, then IM 
has the restriction that a given folder can only contain messages from 
one recipient, which is not the case with IMAP or NNTP.
  - POP3 and NNTP need to be polled for new messages, IM protocols alert 
you when a new message comes in. I'm not sure which way IMAP goes.
  - Email and usenet messages generally have a variety of interesting 
and useful headers that end-user applications are going to want to look 
at, IM messages do not.
  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
NNTP.
  - Email and usenet messages have message-threading, IM does not.

I can't see any sort of 'core feature set' and 'extension feature set' 
in the above list, more like every protocol and format cherry-picks the 
features it wants from a central store.

Another idea - of the various communication sources I personally use, 
they generally fall into 'IM-style (ICQ, IRC)' and 'email-style (email, 
usenet)' interfaces. One message source that I read in email-style that 
I have not yet seen mentioned is RSS. That would be an interesting 
thing to add to  a Universal Messaging client, wouldn't it? :)




From santacruz at southern.edu  Sun Apr 13 12:07:43 2003
From: santacruz at southern.edu (dansan)
Date: Sun, 13 Apr 2003 12:07:43 -0400
Subject: [Twisted-Python] Would this do it?
Message-ID: <20030413160743.GA8677@matilda.southern.edu>

Enlightened ones,

I'm trying to develop a small server for a checkers tournament that we
are trying to host in our school.  Students will submit their entries
that talk on stdin-stdout.  Our idea was to make a socket server that
receives all the connections and then makes them all play a tournament.
I've been thinking about doing it from scratch, just using an array of
connections somehow, but this has proven to be way more difficult than I
anticipated.  For one, I've had a difficult time trying to figure out a
way of 'managing' the server real-time.  I've come across twisted just a
day ago, and I'm wondering if I could make it work for me.  Is twisted
applicable to my problem?

I'd appreciate any an all input anyone can give me.  I am quite the
beginner in python, but I'm willing to read up anything that needs to be
read :)

Thanks a ton.

dansan.



From bob at redivi.com  Sun Apr 13 13:37:42 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 13 Apr 2003 13:37:42 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
Message-ID: <A100D6D2-6DD6-11D7-B675-000A95686CD8@redivi.com>

On Sunday, Apr 13, 2003, at 03:53 America/New_York, Tim Allen wrote:

>
> On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
> wrote:
>
> <snip>
>
>> twisted.im also needs to be refactored, in order to make its API more 
>> coherent and easier to register observers of.  However, it remains 
>> unclear whether this kind of functionality actually deserves a 
>> separate package (that .words will use) or whether it will go into 
>> .words directly.  Moshe has me mostly convinced that it should remain 
>> an independant package, since real-time-client code is going to look 
>> significantly different to abstract-message-processing-and-forwarding 
>> code.
>>
>> Thoughts?
>
> I'll be watching this with interest. I'm not going to say it's 
> impossible or crazy, but I'd like to see how all the inherent 
> difficulties in making a "generic messagey thing" are overcome.
>
> From the top of my head:
>  - IMAP and NNTP have a bunch of folders, POP3 has just one.

But from a client perspective, everything but the inbox ends up 
locally.. so you could have the UI be just like IMAP or NNTP, you would 
just augment the POP3 account(s) with a local datastore.

>  - IMAP lets you create folders and move messages about, NNTP doesn't.

So perhaps you just raise exceptions if you try and move messages on a 
NNTP server?

>  - Instant messaging apps have no folders, but you could no doubt 
> synthesise an 'inbox'. Some IM systems let you have 'categories' of 
> buddies, which you might present as message folders. However, then IM 
> has the restriction that a given folder can only contain messages from 
> one recipient, which is not the case with IMAP or NNTP.

AIM has a "chat room" feature which would allow multiple participant 
'folders'

>  - POP3 and NNTP need to be polled for new messages, IM protocols 
> alert you when a new message comes in. I'm not sure which way IMAP 
> goes.

So you have a unified "notification center" type API.  Whether it gets 
notified async or needs to poll to generate notifications is just an 
implementation detail for each protocol.

>  - Email and usenet messages generally have a variety of interesting 
> and useful headers that end-user applications are going to want to 
> look at, IM messages do not.

IM messages have sender/recipient addresses and timestamps.. A chat 
room could have a bunch of "CC's".  What headers other than 
from/date/to/subject/etc are ever really that useful?

>  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
> NNTP.

That's a protocol implementation detail.  Twisted is very good at 
stateful protocols.. just because POP3 isn't completely stateful 
(although it does keep state as to whether or not you're authenticated) 
doesn't really change anything.

>  - Email and usenet messages have message-threading, IM does not.
>

IM is sort of threaded.. each conversation with each person could be 
considered a thread.. It's certainly not like a conversation with a 
particular person is a set of completely unrelated messages (although 
it can be :).

-bob




From exarkun at intarweb.us  Sun Apr 13 15:58:06 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 13 Apr 2003 15:58:06 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
Message-ID: <20030413195806.GC12415@meson.dyndns.org>

On Sun, Apr 13, 2003 at 05:53:46PM +1000, Tim Allen wrote:
> 
> On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
> wrote:
> 
> <snip>
> 
> >twisted.im also needs to be refactored, in order to make its API more 
> >coherent and easier to register observers of.  However, it remains 
> >unclear whether this kind of functionality actually deserves a 
> >separate package (that .words will use) or whether it will go into 
> >.words directly.  Moshe has me mostly convinced that it should remain 
> >an independant package, since real-time-client code is going to look 
> >significantly different to abstract-message-processing-and-forwarding 
> >code.
> >
> >Thoughts?
> 
> I'll be watching this with interest. I'm not going to say it's 
> impossible or crazy, but I'd like to see how all the inherent 
> difficulties in making a "generic messagey thing" are overcome.
> 
> From the top of my head:
>  - IMAP and NNTP have a bunch of folders, POP3 has just one.

  This is easy, POP3's single folder is IMAP4's "INBOX", and NNTP lives in
an entirely different namespace from regular IMAP4 folders.

  A related point: what isn't clear to me is how to handle the difference
between the practically required download-all-messages behavior of POP3, and
the complete opposite of IMAP4 and NNTP.

>  - IMAP lets you create folders and move messages about, NNTP doesn't.

  IMAP is allowed to reject these operations, so NNTP and POP3 could
just have this error behavior in all cases.

>  - Instant messaging apps have no folders, but you could no doubt 
> synthesise an 'inbox'. Some IM systems let you have 'categories' of 
> buddies, which you might present as message folders. However, then IM 
> has the restriction that a given folder can only contain messages from 
> one recipient, which is not the case with IMAP or NNTP.

  Hmm.  No ideas from me here, yet.

>  - POP3 and NNTP need to be polled for new messages, IM protocols alert 
> you when a new message comes in. I'm not sure which way IMAP goes.

  This is a kinda neat coincidence.  IMAP4 does both.  So we need both
behaviors, but POP3/NNTP will only use polling and IM will only use
notification.

>  - Email and usenet messages generally have a variety of interesting 
> and useful headers that end-user applications are going to want to look 
> at, IM messages do not.

  I'm not sure what the right answer is here.  One solution might be to add
headers to IM messages when exposing them through this API.  The information
for most of the common ones is available: From, Sender, Reply-To, To, Date
are obvious, CC and BCC are probably mostly empty (but ICQ used to support
multi-person chat, I don't know of any other protocols do, or if ICQ still
does); Subject is tough, and Message-ID I guess we'd generate ourself. 
Those are all the official "envelope" headers that are required to exist,
Subject being the only one that we really don't have information about -
perhaps giving users a way to tag exchanges with some value, or just leaving
it empty?

  OTOH, it makes sense to view IM messages in groups, not one at a time.  I
don't see how you could coherently add headers to more than one IM message.

>  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
> NNTP.

  NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
support [well?]).  Can you go more into why this might be a problem?  I
think the protocol code should handle any issues raised by this, and present
a unified front to the messaging API.

>  - Email and usenet messages have message-threading, IM does not.

  I think you could do some neat stuff with temporal analysis and trainable
neural networks, but I've got exactly zero practical experience with either
of these techniques, so I won't say this isn't a potential problem :)

  Some problems I foresee:

  - With email, you should always [according to standards documents, anyway]
    have a pretty good idea of what kind of data you're being handed. 
    Content-Type and other MIME headers make it easy enough to decypher what
    someone just sent you, but afaik, no IM protocols that support file
    transfer deal with this.  What's the correct way to handle a file with
    no meta data?

  - PGP; we can verify signatures, but security conscious users will want
    this done client-side - that means preserving the exact structure of the
    message somehow and then sending it on to them.  This doesn't play
    nicely with the idea of being able to receive one kind of message and
    send it off as another kind.

  Jp

-- 
Somewhere, something incredible is waiting to be known.
                -- Carl Sagan
-- 
 up 24 days, 15:01, 1 user, load average: 0.99, 0.90, 0.85
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030413/44967b1a/attachment.pgp 

From glyph at twistedmatrix.com  Sun Apr 13 20:32:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 19:32:25 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <E194oOh-0004HL-00@pyramid.twistedmatrix.com>
Message-ID: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This patch strikes me as unnecessary:

On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:

> Modified files:
> Twisted/twisted/internet/app.py 1.89 1.90
>
> Log message:
> DependentMultiService - chained start/stop of services in a sensible 
> order

but I would like to discuss it and other patches like it.  Not to pick 
on bob here; there isn't really a policy on avoiding bloat in Twisted, 
so it can't be said that this is a violation of anything in particular. 
  I just think we need one.

First, my question is: do we have more than one or two users who 
actually need this functionality?  If it's a real, present need for a 
wide variety of applications, then much of this criticism does not 
apply.

Addition of stuff like this strikes me as similar to the addition of 
complicated preference panels to GNOME to work around core usability 
problems, which only created a new usability problems.

This patch is a band-aid on an already crummy and huge interface 
(twisted.internet.app is nasty; ask anyone who has had to work on its 
internals) which makes it even crummier and huger.

Huger: it inflates the interface by one more potentially redundant 
class, so that we have that many more places to insert deprecation 
warnings when we refactor the whole mess into something usable.

Crummier:

> +        # Warning:  On failure, service stops are not
> +        # chained.  However, they will stop in the proper order.

"utility" patches like this will invariably fail to take edge cases 
into account well.  I wouldn't say it's immediately obvious how 
edge-cases *should* be taken into account, personally, but I would 
guess that half-changing the semantics of the ordering in case of 
failure is not the correct thing to do.

My concern is that some ill-thought-out parts of Twisted (twisted.cred, 
twisted.internet.app) will become calcified behind a wide and fragile 
interface that prevents any hope for refactoring.  So far, development 
on these kinds of problem areas has been fairly dynamic, because they 
have been kept small and simple.  However, the inevitable weight of 
history is already slowing down more improvement.  I would like to not 
increase that weight any more than necessary.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mgGcvVGR4uSOE2wRAiuSAKC4TvM4Xtqo3kR64/Z69ZxTh9rKpQCgmnJJ
rkXEyqUu1Rxs9DRjo1T9BS4=
=YYZ9
-----END PGP SIGNATURE-----




From jasper at peak.org  Sun Apr 13 20:57:55 2003
From: jasper at peak.org (Jasper Phillips)
Date: Sun, 13 Apr 2003 17:57:55 -0700 (PDT)
Subject: [Twisted-Python] Would this do it?
In-Reply-To: <20030413160743.GA8677@matilda.southern.edu>
Message-ID: <Pine.LNX.4.44.0304131741500.16658-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sun, 13 Apr 2003, dansan wrote:

> Enlightened ones,

That's not me, but I'll answer anyway...

> I'm trying to develop a small server for a checkers tournament that we
> are trying to host in our school.  Students will submit their entries
> that talk on stdin-stdout.  Our idea was to make a socket server that
> receives all the connections and then makes them all play a tournament.
> I've been thinking about doing it from scratch, just using an array of
> connections somehow, but this has proven to be way more difficult than I
> anticipated.  For one, I've had a difficult time trying to figure out a
> way of 'managing' the server real-time.  I've come across twisted just a
> day ago, and I'm wondering if I could make it work for me.  Is twisted
> applicable to my problem?
> 
> I'd appreciate any an all input anyone can give me.  I am quite the
> beginner in python, but I'm willing to read up anything that needs to be
> read :)

I'm using twisted's Perspective Broker for a generic turn based game engine,
and it works smoothly.  Using PB allows you to write your api almmost as if
networking wasn't involved, excepting only that you'll need to use "callRemote"
for client/server calls instead of normal method calling (and connect your
client/server of course).

The Perspective Broker section on this page was usefull to me:
http://twistedmatrix.com/documents/howto/

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+mgea8EpjZ7/X9bIRAmAOAJ9/p4Z5+CrIBLZe3P3VTWRcsNyRXACgpNPG
2hk3eED8fXi54fEYh+kGcbw=
=ltvO
-----END PGP SIGNATURE-----




From golux at comcast.net  Sun Apr 13 21:36:40 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 13 Apr 2003 21:36:40 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits]
	DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <1050284201.1076.2955.camel@golux>

On Sun, 2003-04-13 at 20:32, Glyph Lefkowitz wrote:

> This patch is a band-aid on an already crummy and huge interface 
> (twisted.internet.app is nasty; ask anyone who has had to work on its 
> internals) which makes it even crummier and huger.

I may be missing something, but this seems like a non-sequitur ...
isn't the putative crumminess and/or hugeness of its interface 
independent of the nastiness of its internals?  (Or at least, 
shouldn't it be ...?  But maybe that's part of what you're 
saying ...) 

> My concern is that some ill-thought-out parts of Twisted (twisted.cred, 
> twisted.internet.app) will become calcified behind a wide and fragile 
> interface that prevents any hope for refactoring.  So far, development 
> on these kinds of problem areas has been fairly dynamic, because they 
> have been kept small and simple.  However, the inevitable weight of 
> history is already slowing down more improvement.  ...

This does not make me feel warm and fuzzy.  ;^)  Okay, 
I admit to having had bad thoughts about cred ... how much 
work do you see it needing?  (Because I'm fixin' to use it 
in the near future ... :^)

Cheers,
- Steve.





From peter at engcorp.com  Sun Apr 13 21:59:30 2003
From: peter at engcorp.com (Peter Hansen)
Date: Sun, 13 Apr 2003 21:59:30 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <3E9A1602.7948A75D@engcorp.com>

Jp Calderone wrote:
> 
>     In the test cases, you also used assert_() (but just once, I assume it
> was an oversight), which shouldn't be access directly by tests cases, so I
> changed this to a failUnless().  

Jp, I realize Twisted unittest is either slightly older than the standard,
or perhaps slightly evolved from it, but I'm not sure why you think 
assert_() shouldn't be used directly by TestCases.  According at least to 
http://www.python.org/doc/current/lib/testcase-objects.html it's merely
a synonym for failUnless(), as all the other assertXxxx() variants are 
synonyms of their respective failXxxxx() methods.  I think it is intended
to be a perfectly valid exposed method.

-Peter



From peter at engcorp.com  Sun Apr 13 22:06:50 2003
From: peter at engcorp.com (Peter Hansen)
Date: Sun, 13 Apr 2003 22:06:50 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <3E9A1602.7948A75D@engcorp.com>
Message-ID: <3E9A17BA.45E6CB57@engcorp.com>

Peter Hansen wrote (on assert_() versus failUnlessXxxx() ):
> 
> According at least to 
> http://www.python.org/doc/current/lib/testcase-objects.html it's merely
> a synonym for failUnless(), as all the other assertXxxx() variants are
> synonyms of their respective failXxxxx() methods.

Yes, sorry... my response was already obsolete before I posted it.
Shouldn't count so much on my (also obsolete) mail reader's threading
capabilities to tell me when I'd read all messages on this topic.

(By the way, I think there's actually a place for both forms of the
assertXxxx() and failUnlessXxxxx() methods.  Sometimes the logic
just seems clearer to write it (and read it) one way, or the other.  
Perhaps that's a sign of smelly programmer thinking, but all I can do 
is report on what I've experienced personally...)

-Peter



From glyph at twistedmatrix.com  Sun Apr 13 22:42:29 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 21:42:29 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <1050284201.1076.2955.camel@golux>
Message-ID: <BC2B704E-6E22-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, April 13, 2003, at 08:36 PM, Steve Waterbury wrote:

> On Sun, 2003-04-13 at 20:32, Glyph Lefkowitz wrote:
>
>> This patch is a band-aid on an already crummy and huge interface
>> (twisted.internet.app is nasty; ask anyone who has had to work on its
>> internals) which makes it even crummier and huger.
>
> I may be missing something, but this seems like a non-sequitur ...
> isn't the putative crumminess and/or hugeness of its interface
> independent of the nastiness of its internals?  (Or at least,
> shouldn't it be ...?  But maybe that's part of what you're
> saying ...)

Yeah, the problem is that the interface is sufficiently ill-specified 
and lacking in features that folks will depend upon the internals for 
complete semantics.  The goal is to have as few intermediary versions 
of the internal semantics before we arrive at something well-specified 
and good :).

>> My concern is that some ill-thought-out parts of Twisted 
>> (twisted.cred,
>> twisted.internet.app) will become calcified behind a wide and fragile
>> interface that prevents any hope for refactoring.  So far, development
>> on these kinds of problem areas has been fairly dynamic, because they
>> have been kept small and simple.  However, the inevitable weight of
>> history is already slowing down more improvement.  ...
>
> This does not make me feel warm and fuzzy.  ;^)  Okay,
> I admit to having had bad thoughts about cred ... how much
> work do you see it needing?  (Because I'm fixin' to use it
> in the near future ... :^)

If I knew exactly how much work it needed, then the work would probably 
have begun :).

However, cred is in an acceptable state at the moment.  Most of the 
cruddiness has to do with backwards-compatibility hacks to a 
significantly worse version of itself.  When these get removed (circa 
Twisted 1.1), there are still a few semantic holes that need to be 
filled, such as the real utility of MultiService, but all in all it 
works as-is.

It's in a much less bad state than twisted.internet.app, at least in my 
opinion ;)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+miAbvVGR4uSOE2wRAtYgAKCfL9OhVLoINPxrxwIb3SP4v8o87gCfTK3X
2Ral38WVWcBJCacRuxedg2A=
=mX4+
-----END PGP SIGNATURE-----




From bob at redivi.com  Sun Apr 13 22:54:11 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 13 Apr 2003 22:54:11 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <5EA3CB5C-6E24-11D7-B675-000A95686CD8@redivi.com>

On Sunday, Apr 13, 2003, at 20:32 America/New_York, Glyph Lefkowitz 
wrote:

> This patch strikes me as unnecessary:
>
> On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:
>
>> Modified files:
>> Twisted/twisted/internet/app.py 1.89 1.90
>>
>> Log message:
>> DependentMultiService - chained start/stop of services in a sensible 
>> order
>
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in 
> particular.  I just think we need one.
>
> First, my question is: do we have more than one or two users who 
> actually need this functionality?  If it's a real, present need for a 
> wide variety of applications, then much of this criticism does not 
> apply.

Do we have more than two users that _know_ they need/want this 
functionality?  Probably not, yet.

Here's a use case.  Let's say you have some sort of service hierarchy 
that resembles a system startup.  The way Darwin does this is that it 
has plist files bundled with the actual "rc" scripts that determine 
which services get started and in what order by SystemStarter.  Here's 
an example plist file (in NeXT format, because XML is retarded) for the 
LDAP service:
{
   Description     = "LDAP";
   Provides        = ("LDAP");
   Requires        = ("Network Configuration", "DirectoryServices");
   OrderPreference = "None";
}

In this case, in order for LDAP to start, the services that provide 
Network Configuration and DirectoryServices must already be running.  
It doesn't care which ordering bucket it sits in (OrderPreference can 
be Last, First, etc.), and it provides LDAP functionality to other 
services that want it.

DependentMultiService is a very crude basis for such a mechanism, 
because I don't need that kind of functionality yet.  However, it does 
provide a pretty decent base class for a future Twisted "SystemStarter" 
equivalent... which we *should* want to have someday.

Thinking like this could potentially make things such as tying 
authorizers to pb services and whatnot easier, if they're done in a 
service collection manner rather than just tied to the same parent.  
However, as you said, app and cred are already nasty and need a major 
refactoring.

>
>> +        # Warning:  On failure, service stops are not
>> +        # chained.  However, they will stop in the proper order.
>
> "utility" patches like this will invariably fail to take edge cases 
> into account well.  I wouldn't say it's immediately obvious how 
> edge-cases *should* be taken into account, personally, but I would 
> guess that half-changing the semantics of the ordering in case of 
> failure is not the correct thing to do.

Basically, it's not at all obvious what you do if you have a failure in 
a collection of interdependent services.  On startup or shutdown, if 
one fails, you obviously aren't going to be able to say that whole 
collection is started or stopped properly, so I make the remainder of 
the running services shut down immediately.  The only difference in 
semantics is that once a failure happens, the service stopping is no 
longer chained (the rest of the running services get stopService called 
immediately).  It really depends on what kind of services you have to 
determine whether you want to try and chain this or not.. but in most 
cases, startService and stopService don't return deferreds anyways, and 
in even more cases, you don't expect them to fail.  I'll go ahead and 
add an __init__ option that lets you decide which behavior gets chosen 
in the case of a failure.

Also, the fact that I'm returning a deferred here either way means that 
it's probably possible that you could even set a timeout.. which is 
kind of cool, but I've said before that the Deferred timeout API can 
cause some issues (it can't actually make something NOT happen.. which 
is really unfortunate).  I really think there should be an API to 
cancel Deferreds, and the methods that return them should be refactored 
to respect a cancel whenever possible.

-bob




From exarkun at intarweb.us  Sun Apr 13 23:31:02 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 13 Apr 2003 23:31:02 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <E194oOh-0004HL-00@pyramid.twistedmatrix.com> <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030414033102.GB17538@meson.dyndns.org>

On Sun, Apr 13, 2003 at 07:32:25PM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> This patch strikes me as unnecessary:
> 
> On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:
> 
> >Modified files:
> >Twisted/twisted/internet/app.py 1.89 1.90
> >
> >Log message:
> >DependentMultiService - chained start/stop of services in a sensible 
> >order
> 
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in particular. 
>  I just think we need one.
> 
> First, my question is: do we have more than one or two users who 
> actually need this functionality?  If it's a real, present need for a 
> wide variety of applications, then much of this criticism does not 
> apply.

  I think I need this, but order is such a hard topic, I've mostly ignored
it and relied on luck to keep my app working instead of coming up with a
good solution.  I'm not entirely sure (and I won't be devoting time to the
project where it's needed in the near future) DependentMultiService solves
my use-case, but if not, something like it probably would.

  Jp

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 24 days, 23:01, 9 users, load average: 1.06, 1.21, 1.20
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030413/2b46fbc1/attachment.pgp 

From abe at fettig.net  Mon Apr 14 00:44:13 2003
From: abe at fettig.net (Abe Fettig)
Date: 14 Apr 2003 00:44:13 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <1050295453.1380.58.camel@mingus>

On Sun, 2003-04-13 at 02:16, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Saturday, April 12, 2003, at 04:50 PM, Jp Calderone wrote:
> 
> > ... throughout Twisted wherever email-like messages need to be dealt 
> > with ...
> 
> Speaking of such message-unifying work:
> 
> Moshe and I were recently on IRC, discussing a unification of several 
> disparate message representations within Twisted.  We're not exactly 
> sure where this is going, but in a future release, the .mail, .words, 
> and .news packages should all be unified, probably under the heading of 
> "words", in order to present a coherent messaging API for things like 
> bots which don't care whether you're talking to them through email, 
> netnews, IRC, AOL IM, or whatever.

As some of you know, I'm developing a Twisted application called Hep. 
Hep is a multiprotocol message server that lets users set up connections
to various messaging systems (currently: RSS, POP3, SMTP, Blogger API,
and local maildir storage) and then read/write to those connections
through various protocols (currently: POP3, SMTP, NNTP).  Hep also has a
web server with a basic web interface for managing things.

Anyhow, since I've been working on this project I've been thinking a lot
about abstraction layers for messages.  So here are some incomplete
late-night thoughts:

* First, I define 'message' very loosely: a short text communication
written by one person for one or more other persons to read.

* Formats, protocols, and storage are loosely coupled.  rfc822 is a
format for messages.  So is RSS.  So is HTML (if you want to look at it
that way), or plain .txt. SMTP, NNTP, IMAP, or POP3 can all be used to
transfer rfc822 messages.  HTTP is typically the protocol used to
transfer RSS and HTML.  You can store messages in plain directories,
specialized directory layouts like maildir, file formats like RSS and
mbox that support multiple messages, databases, etc.

* All types of messages, by definition, have a body (although it may be
left blank).

* Almost all messages can be looked at in terms of "from" and "to". 
Even personal-use text files on the local system.  Even web pages,
although the "from" might be unkown, and the "to" might be "anyone in
the world who happens to be interested in this"

* Most, but not all, message formats support the idea of a
title/subject.

* Messages can contain other messages.

* You can't rely on getting a (correct) mime-type along with the message
- I've had to resort to letting my format handlers try to figure out for
themselves whether they can handle a given file if the mime-type is
unknown.

* For messaging protocols, the basic operations are "scan" (and/or
"fetch"), "post", "edit", and "delete".  Fetch is almost universal,
although the way this works varies a lot from system to system.  My
messaging library currently has a single function that every protocol
supports, scan().  You run connection.scan(messageHandlerFunction), and
the connection will try to get whatever messages might be available
there, and run messageHandlerFunction on each message.  scan() returns a
deferred, which will be called back if the scan has completed, and there
won't be any more messages found unless scan() is called again. 
Although I haven't implemented it my idea has been that for
always-connected systems like IMAP and instant messaging, scan() would
continue to run until the connection was terminated.

* post() is pretty easy to abstract across various systems, and works
well for SMTP, IMAP, NNTP, various blog APIs, instant messaging, and
local message stores.  It even works with vanilla HTTP, sort of.

* So far I haven't put implemented edit() or delete() on anything except
local message stores, so no comments there.

* Folders and chat rooms are basically the same thing - a place where
messages are posted to and read from.

* I'm using URLs to describe places you can access messages.

Anyhow, I'm not sure what level of support for all this you want to have
in Twisted.  If you really wanted to go all out it's possible to create
a layer of abstraction that would let you read/write to a local mbox
file, a NNTP newsgroup, an RSS file accessed through HTTP, and a folder
full of text files, all using the same API.  That's the direction I'm
going in at the moment, but it's probably too wide a scope for the core
Twisted APIs.


If anybody here is interested in seeing my attempts at creating a system
that implements these kinds of ideas, you can check out the code from
CVS:

:pserver:anonymous at cvs.sourceforge.net:/cvsroot/hepserver

The two modules are "messaging" (the messaging abstraction layer, which
is usable on it's own - see examples/copymessages.py) and "hep".  If you
want to run Hep you'll also need the Lupy text indexer from divmod.org. 
You might also to read my weblog entries from last week at
http://www.fettig.net/.

Abe





From eholm37 at yahoo.com  Sun Apr 13 23:01:34 2003
From: eholm37 at yahoo.com (Eric Holm)
Date: 13 Apr 2003 20:01:34 -0700
Subject: [Twisted-Python] The Woven Way?
Message-ID: <uwuhx4wa9.fsf@yahoo.com>

First off, the cliche (but nonetheless genuine) thanks for the awesome set of tools!

Is there any way for a Woven resource script to retrieve the uri with which it was called, similar to passing arguments to a CGI script via the url?

Say I have a twisted server that I'd like to monitor via Woven pages.  One of the pages looks something like:

Port1  Up    Details...
Port2  Down  Details...
Port3  Up    Details...

where the "Details..." items are links to another Woven page.  If I were doing this with a CGI script, the links would contain something like href="details.rpy?port=1", or href="details.rpy?port=37", and details.rpy would grab the uri and generate the desired page.  I suspect I'm looking at this all wrong by thinking in terms of passing arguments via the url, but don't know what would be a more naturally Woven way to do this. Any guidance would be most appreciated.

Thanks,


Eric.




From warner at lothar.com  Mon Apr 14 05:15:14 2003
From: warner at lothar.com (Brian Warner)
Date: Mon, 14 Apr 2003 02:15:14 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
References: <Pine.LNX.4.44.0304110642270.10740-100000@localhost.localdomain>
Message-ID: <20030414.021514.34941857.warner@lothar.com>

Jasper Phillips <jasper at peak.org> writes:
> The simple test case at the end of test_newjelly.py _does_ work, but the
> orignal more verbose test I posted (using pb) doesn't work, getting the same
> __dict__ error as before.

Ok, after more careful searching and discussion with Glyph I think we nailed
it. The fix we put in earlier wasn't being used when PB calls jelly, but only
when jelly was run by itself. I've added the necessary code (and a new unit
test). It should be fixed now. The clientBug/serverBug scripts you attached
to your earlier message now run without error for me.

Thanks for your patience, and for the great bug report. That test script was
exactly what we needed.

Note to other bug submitters: following Jasper's excellent example will
greatly improve the chances of getting your bug fixed quickly :).

cheers,
 -Brian



From radix at twistedmatrix.com  Mon Apr 14 05:33:33 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 14 Apr 2003 05:33:33 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>; from glyph@twistedmatrix.com on Sun, Apr 13, 2003 at 20:32:25 -0400
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030414093333.GA16564@radii>


On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in particular. 
>   I just think we need one.

The one I've recently decided was good is "If there's no other code in
Twisted that relies on it, don't add it to CVS."

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030414/1fe08c3a/attachment.pgp 

From bob at redivi.com  Mon Apr 14 06:48:20 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 14 Apr 2003 06:48:20 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <20030414093333.GA16564@radii>
Message-ID: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>

On Monday, Apr 14, 2003, at 05:33 America/New_York, Christopher 
Armstrong wrote:

> On 2003.04.13 20:32, Glyph Lefkowitz wrote:
>> but I would like to discuss it and other patches like it.  Not to pick
>> on bob here; there isn't really a policy on avoiding bloat in Twisted,
>> so it can't be said that this is a violation of anything in 
>> particular.
>>   I just think we need one.
>
> The one I've recently decided was good is "If there's no other code in
> Twisted that relies on it, don't add it to CVS."

Which came first, the chicken or the egg?




From glyph at twistedmatrix.com  Mon Apr 14 07:16:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 06:16:25 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <5EA3CB5C-6E24-11D7-B675-000A95686CD8@redivi.com>
Message-ID: <87A4445E-6E6A-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday, April 13, 2003, at 09:54 PM, Bob Ippolito wrote:

> DependentMultiService is a very crude basis for such a mechanism, 
> because I don't need that kind of functionality yet.  However, it does 
> provide a pretty decent base class for a future Twisted 
> "SystemStarter" equivalent... which we *should* want to have someday.

YAGNI.

More specifically - maybe we will eventually need such a thing.  In the 
process of building a real "SystemStarter" equivalent, however, we may 
find that DependentMultiService actually isn't that useful, and we 
instead want to use some other intermediary dependency management 
strategy.

In a more optimistic case, we're merely maintaining an interface to an 
implementation detail that people shouldn't be using.  In a worse case, 
we have another twisted.python.observable on our hands - dead code that 
one or two things are using because we haven't had time to update them 
to use TwistedStarter instead.

In fact, I think that TwistedStarter sounds like a good idea - it 
provides a high-level interface to some functionality that may be 
tricky to implement correctly.  If you would go all the way and 
implement that I would probably be less unhappy than if this stayed in 
:-).

However, this is just an advice, not an "MDFL pronouncement" - the 
final call on that module is Itamar's, and if he's not going to stop 
you checking it in, then I'll concede.  I was mainly using this as an 
example, not as a particularly egregious thing that really needs to go. 
  I want Twisted developers to consider things like continuing 
maintenance before checking things in.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mpiMvVGR4uSOE2wRAo9RAKCRICLQu0IJPhiRrr1X8Y9bM/B5AwCfVBur
RFYJtMNc7n2SkS2VX44Zv+U=
=iLtN
-----END PGP SIGNATURE-----




From radix at twistedmatrix.com  Mon Apr 14 07:50:45 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 14 Apr 2003 07:50:45 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>; from bob@redivi.com on Mon, Apr 14, 2003 at 06:48:20 -0400
References: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>
Message-ID: <20030414115045.GA18748@radii>


On 2003.04.14 06:48, Bob Ippolito wrote:
> 
> On Monday, Apr 14, 2003, at 05:33 America/New_York, Christopher 
> Armstrong wrote:
> 
> > On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> >> but I would like to discuss it and other patches like it.  Not to pick
> >> on bob here; there isn't really a policy on avoiding bloat in Twisted,
> >> so it can't be said that this is a violation of anything in 
> >> particular.
> >>   I just think we need one.
> >
> > The one I've recently decided was good is "If there's no other code in
> > Twisted that relies on it, don't add it to CVS."
> 
> Which came first, the chicken or the egg?

Your analogy is broken. If you have some code that needs
DependantMultiService, then you can check in DependantMultiService at
the same time as your code. If it's only application-code (i.e., an
application that is not contributed to Twisted) that needs it, leave
it in your application for now.

Of course, maybe there can be exceptions to this occasionally, but I
think any exceptions need to be thought about very hard, for the
reasons Glyph pointed out.

Also, sandbox is appropriate for such stuff. e.g., flow.py.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030414/a64b0d48/attachment.pgp 

From tv at twistedmatrix.com  Mon Apr 14 09:02:24 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 14 Apr 2003 16:02:24 +0300
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030413195806.GC12415@meson.dyndns.org>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org>
Message-ID: <20030414130224.GA27087@lapdog>

On Sun, Apr 13, 2003 at 03:58:06PM -0400, Jp Calderone wrote:
>   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> support [well?]).  Can you go more into why this might be a problem?  I

	Umm, I'm quite confident Ldaptor does pipelined operations for
	the LDAP protocol, with Twisted. It's quite trivial.

-- 
:(){ :|:&};:



From fig at monitor.net  Mon Apr 14 10:35:41 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 09:35:41 -0500
Subject: [Twisted-Python] conch unit test errors
Message-ID: <3E9AC73D.7050201@monitor.net>

I am using a CVS version of Twisted, and pycrypto-1.9a6 on a RedHat 9.0 
install (openssh 3.5p1).  When running tests on conch I get an error on 
the first test, OK on the second, then get stuck on the third test.  If 
I Ctrl-C out of the test, I get the following:

[fig at dawa Twisted]$ ./bin/trial -v -m twisted.test.test_conch
twisted.test.test_conch
   SSHKeysHandlingTestCase
     test RSA keys ... 
  [ERROR]
     test DSA keys ... 
     [OK]
   SSHTransportTestCase
     test the SSH server against the OpenSSH client ... 
  [ERROR]
     test the SSH server against the SSH client ... 
  [ERROR]

===============================================================================
ERROR: testRSA (twisted.test.test_conch.SSHKeysHandlingTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
    File "/home/fig/twisted/Twisted/twisted/trial/unittest.py", line 
188, in runOneTest
     method(testCase)
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
76, in testRSA
     self._testKey(publicRSA_openssh, privateRSA_openssh, 'openssh')
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
83, in _testKey
     self._testKeySignVerify(privKey, pubKey)
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
89, in _testKeySignVerify
     sig = keys.signData(priv, testData)
    File "/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py", line 
342, in signData
     objType = objectType(obj)
    File "/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py", line 
317, in objectType
     return keyDataMapping[tuple(obj.keydata)]
  KeyError: ('n', 'e', 'd', 'p', 'q', 'u')
===============================================================================
ERROR: testOurServerOpenSSHClient 
(twisted.test.test_conch.SSHTransportTestCase)-------------------------------------------------------------------------------
Traceback! exceptions.KeyError, ('n', 'e', 'd', 'p', 'q', 'u')
/home/fig/twisted/Twisted/twisted/internet/default.py:469:doSelect
/home/fig/twisted/Twisted/twisted/internet/tcp.py:114:doRead
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:195:dataReceived
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:390:ssh_KEX_DH_GEX_INIT/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:342:signData
/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:317:objectType
===============================================================================
ERROR: testOurServerOurClient (twisted.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback! exceptions.KeyError, ('n', 'e', 'd', 'p', 'q', 'u')
/home/fig/twisted/Twisted/twisted/internet/default.py:469:doSelect
/home/fig/twisted/Twisted/twisted/internet/tcp.py:114:doRead
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:195:dataReceived
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:390:ssh_KEX_DH_GEX_INIT/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:342:signData
/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:317:objectType
-------------------------------------------------------------------------------
Ran 4 tests in 24.308s

FAILED (errors=3)
[fig at dawa Twisted]$




From z3p at twistedmatrix.com  Mon Apr 14 11:50:16 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 14 Apr 2003 11:50:16 -0400
Subject: [Twisted-Python] conch unit test errors
In-Reply-To: <3E9AC73D.7050201@monitor.net>
Message-ID: <3E9AA078.23940.5600DC6@localhost>

On 14 Apr 2003 at 9:35, Stephen Figgins wrote:

> I am using a CVS version of Twisted, and pycrypto-1.9a6 on a RedHat 9.0 
> install (openssh 3.5p1).  When running tests on conch I get an error on 
> the first test, OK on the second, then get stuck on the third test.  If 
> I Ctrl-C out of the test, I get the following:

I've fixed all of these in CVS now.  Thanks for 
the report. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From jasper at peak.org  Mon Apr 14 12:24:42 2003
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 14 Apr 2003 09:24:42 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
In-Reply-To: <20030414.021514.34941857.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0304140918540.32030-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Mon, 14 Apr 2003, Brian Warner wrote:

> Jasper Phillips <jasper at peak.org> writes:
> > The simple test case at the end of test_newjelly.py _does_ work, but the
> > orignal more verbose test I posted (using pb) doesn't work, getting the same
> > __dict__ error as before.
> 
> Ok, after more careful searching and discussion with Glyph I think we nailed
> it. The fix we put in earlier wasn't being used when PB calls jelly, but only
> when jelly was run by itself. I've added the necessary code (and a new unit
> test). It should be fixed now. The clientBug/serverBug scripts you attached
> to your earlier message now run without error for me.

Twisted's head CVS version also works for my actual code.  Thanks!

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+muDS8EpjZ7/X9bIRAnn5AJwNxYXu+CmgjCe81VXMKiIT7kfMqACgmKLJ
Q09SBGLGzwgnhI1Pz83EyUE=
=sHKc
-----END PGP SIGNATURE-----




From fig at monitor.net  Mon Apr 14 13:44:12 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 12:44:12 -0500
Subject: [Twisted-Python] conch unit test errors
In-Reply-To: <3E9AA078.23940.5600DC6@localhost>
References: <3E9AA078.23940.5600DC6@localhost>
Message-ID: <3E9AF36C.3040308@monitor.net>

Paul Swartz wrote:

> I've fixed all of these in CVS now.  Thanks for 
> the report. :)

I just updated and tried again.  It does look all fixed now.  Thanks.

-Stephen




From exarkun at intarweb.us  Mon Apr 14 14:22:59 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 14 Apr 2003 14:22:59 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030414130224.GA27087@lapdog>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org> <20030414130224.GA27087@lapdog>
Message-ID: <20030414182259.GC25237@meson.dyndns.org>

On Mon, Apr 14, 2003 at 04:02:24PM +0300, Tommi Virtanen wrote:
> On Sun, Apr 13, 2003 at 03:58:06PM -0400, Jp Calderone wrote:
> >   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> > support [well?]).  Can you go more into why this might be a problem?  I
> 
> 	Umm, I'm quite confident Ldaptor does pipelined operations for
> 	the LDAP protocol, with Twisted. It's quite trivial.
> 

  Does Ldaptor use NNTP?  I remember thinking "I'll do pipelining when
someone asks for it..." when I did the implementation, and no one ever
asked...

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 25 days, 15:02, 4 users, load average: 1.19, 1.11, 1.25
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030414/7826d153/attachment.pgp 

From fig at monitor.net  Mon Apr 14 19:20:19 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 18:20:19 -0500
Subject: [Twisted-Python] twisted.enterprise problem
Message-ID: <3E9B4233.5050906@monitor.net>

I am using Twisted CVS and pyPgSQL 2.3, attempting to create a dbpool 
with the line:

dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', user='fig', 
db='fig')

When I try to run it I get this traceback:

[fig at dawa dsi]$ python pbcontact.py
Traceback (most recent call last):
   File "pbcontact.py", line 19, in ?
     dbpool = adbapi.ConnectionPool("PgSQL", host='localhost', 
user='fig', db='fig')
   File "/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py", 
line 53, in
__init__
     self.dbapi = reflect.namedModule(dbapiName)
   File "/usr/lib/python2.2/site-packages/twisted/python/reflect.py", 
line 406, in namedModule
     topLevel = __import__(name)
ImportError: No module named PgSQL
[fig at dawa dsi]$ python pbcontact.py
Traceback (most recent call last):
   File "pbcontact.py", line 19, in ?
     dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', 
user='fig', db='fig')
   File "/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py", 
line 54, in
__init__
     assert self.dbapi.apilevel == '2.0', 'DB API module not DB API 2.0 
compliant.'
AttributeError: 'module' object has no attribute 'apilevel'
[fig at dawa dsi]$


Any ideas?


-Stephen




From fig at monitor.net  Mon Apr 14 19:25:47 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 18:25:47 -0500
Subject: [Twisted-Python] Re: twisted.enterprise problem
Message-ID: <3E9B437B.9020708@monitor.net>

Got it.... about a minute after I sent it.  I need to use "pyPgSQL.PgSQL"

At least I think.  That fixed my connection pool problem.

-Stephen




From bob at redivi.com  Mon Apr 14 19:27:38 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 14 Apr 2003 19:27:38 -0400
Subject: [Twisted-Python] twisted.enterprise problem
In-Reply-To: <3E9B4233.5050906@monitor.net>
Message-ID: <AE3CA91C-6ED0-11D7-B675-000A95686CD8@redivi.com>

On Monday, Apr 14, 2003, at 19:20 America/New_York, Stephen Figgins 
wrote:

> I am using Twisted CVS and pyPgSQL 2.3, attempting to create a dbpool 
> with the line:
>
> dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', 
> user='fig', db='fig')

IIRC, the module is called pyPgSQL.PgSQL.. I think you want this:

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL", host='localhost', 
user='fig', db='fig')

-bob




From jml at ids.org.au  Tue Apr 15 07:00:38 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Tue, 15 Apr 2003 21:00:38 +1000
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
Message-ID: <20030415110038.GH27721@mumak.net>


Woven code uses registerAdapter alot. When developing Woven code, it's
extremely handy to have a couple of 'rebuild' calls in your RPY. (If these
aren't there, the web server must be restarted for code canges to take effect)

However, registerAdapter and rebuild don't play nicely together. On a rebuild,
registerAdapter tries to re-register stuff, and throws an exception. 

Below is a patch that adds an optional keyword parameter 'force' to the
registerAdapter method. If force is set to a true value, registerAdapter should
happily re-register stuff. Otherwise, the current behaviour holds.

The tests work, and I'll quite happily commit if no-one has any problems.

cheers,
jml

===================================================================
RCS file: /cvs/Twisted/twisted/test/test_components.py,v
diff -u -r1.26 components.py
--- twisted/python/components.py        5 Apr 2003 00:28:37 -0000       1.26
+++ twisted/python/components.py        15 Apr 2003 00:32:30 -0000
@@ -115,7 +115,8 @@
         # mapping between (<class>, <interface>) and <adapter class>
         self.adapterRegistry = {}

-    def registerAdapter(self, adapterClass, origClass, *interfaceClasses):
+    def registerAdapter(self, adapterClass, origClass, *interfaceClasses,
+                        **kwarg):
         """Register an adapter class.

         An adapter class is expected to implement the given interface, by
@@ -124,7 +125,8 @@
         """
         assert interfaceClasses, "You need to pass an Interface"
         for interfaceClass in interfaceClasses:
-            if self.adapterRegistry.has_key((origClass, interfaceClass)):
+            if (self.adapterRegistry.has_key((origClass, interfaceClass))
+                and not kwarg.get('force')):
                 raise ValueError(
                     "an adapter (%s) was already registered." % (
                         self.adapterRegistry[(origClass, interfaceClass)]


===================================================================
RCS file: /cvs/Twisted/twisted/test/test_components.py,v
retrieving revision 1.8
diff -u -r1.8 test_components.py
--- twisted/test/test_components.py     5 Jan 2003 02:39:22 -0000       1.8
+++ twisted/test/test_components.py     15 Apr 2003 00:39:11 -0000
@@ -284,3 +284,13 @@

         # should fail because we already registered an IMultiply adapter for IntAdder
         self.assertRaises(ValueError, components.registerAdapter, IntMultiplyWithAdder, IntAdder, IMultiply)
+
+    def testForcedRegister(self):
+        # should not fail, despite re-registering, because we are forcing
+        # it to re-register.
+        try:
+            components.registerAdapter(IntMultiplyWithAdder, IntAdder, IMultiply, force=1)
+        except ValueError:
+            self.fail("Should have forced re-registration")
+
+
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030415/167ce612/attachment.pgp 

From peter at engcorp.com  Mon Apr 14 21:36:06 2003
From: peter at engcorp.com (Peter Hansen)
Date: Mon, 14 Apr 2003 21:36:06 -0400
Subject: [Twisted-Python] Multiple simultaneous SelectReactors?
Message-ID: <3E9B6206.D3C1C701@engcorp.com>

There appear to be serious problems in several areas of twisted.internet
if one tries to create multiple SelectReactors to use at the same time.

Why would one want to?  For acceptance testing, when it can be desirable 
that the code under test run in the same process as the test code, but
it's not appropriate to share the Reactor.

I'm working on a few fixes, some of which appear to be latent bugs of
various kinds, but I'm still extremely new at Twisted and won't 
immediately be able to provide nice patches and such.

For now, I mainly have these questions:

1. Is Twisted expected to support this in principle, if not currently
in practice?

2. Are the globals "reads" and "writes" that are used in 
twisted.internet.default there solely for optimization purposes, or is
there some more nefarious purpose?  Is it considered absolutely critical
that this optimization is in place?  (If so, it probably makes it 
impossible to fix this limitation of Twisted.)

3. Is it well-known that the abstract.FileDescriptor class does a quiet
little fallback to the global reactor if you don't pass it a reactor reference, 
and that Port fails to pass in its own reactor reference when it creates
a Server object in doRead()?

We've strung together a variety of little changes in the process of 
figuring this out.  Once we're more confident of what we're doing,
I'd be happy to supply the fixes, but I'm not going to waste my time
if everyone thinks SelectReactor.doSelect() absolutely must do those
optimizations.

Also note: I'm working on the most recent released version, not CVS.
The slightest hint that this stuff is significantly changed in CVS 
will send me there, but until now we weren't confident enough with
Twisted to work from unreleased code.  (Actually, attempting to 
resolve this has slightly lowered my confidence in Twisted, but 
only just a bit.)

-Peter



From glyph at twistedmatrix.com  Mon Apr 14 21:56:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 20:56:10 -0500
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
In-Reply-To: <20030415110038.GH27721@mumak.net>
Message-ID: <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 15, 2003, at 06:00 AM, jml at ids.org.au wrote:

> However, registerAdapter and rebuild don't play nicely together. On a 
> rebuild,
> registerAdapter tries to re-register stuff, and throws an exception.

I think you're approaching this the wrong way.

Rather than forcing it in a particular place in the code, you want to 
force it at a particular time; i.e. when a module is being rebuilt.

Could you instead have a module flag "allowDuplicates" which would be 
set by rebuild and unset when it was finished?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+m2bBvVGR4uSOE2wRAijFAJ9DzoW2dbRSatkbbiLzFqQJFOQMfwCgqYx/
1TPA4eeNpEViyCw1erJwbfg=
=V1Kd
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Mon Apr 14 22:03:35 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 21:03:35 -0500
Subject: [Twisted-Python] Multiple simultaneous SelectReactors?
In-Reply-To: <3E9B6206.D3C1C701@engcorp.com>
Message-ID: <777E9878-6EE6-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, April 14, 2003, at 08:36 PM, Peter Hansen wrote:

> There appear to be serious problems in several areas of 
> twisted.internet
> if one tries to create multiple SelectReactors to use at the same time.

That would be putting it mildly.

> Why would one want to?  For acceptance testing, when it can be 
> desirable
> that the code under test run in the same process as the test code, but
> it's not appropriate to share the Reactor.

I'm aware of this use-case, but it was difficult to write for a variety 
of reasons.  History plays a large role in Twisted's, um, history.  We 
try very hard to support backwards compatibility for many versions, so 
that early adopters do not get burned by quicksand interfaces, and 
sometimes a bit of ugliness results.  This is one of those cases.

As someone new to Twisted, your time would probably be better spent 
coding your acceptance tests to use spawnProcess and actually invoking 
different Python processes for the different components.  It's 
relatively easy to communicate between them once this is done.

> 1. Is Twisted expected to support this in principle, if not currently
> in practice?

Yes.  If you read the CVS logs, you'll notice a trend that more things 
these days take a "reactor" argument than they used to.  We have been 
slowly refactoring towards this for a while.

> 2. Are the globals "reads" and "writes" that are used in
> twisted.internet.default there solely for optimization purposes, or is
> there some more nefarious purpose?  Is it considered absolutely 
> critical
> that this optimization is in place?  (If so, it probably makes it
> impossible to fix this limitation of Twisted.)

I would prefer that this optimization remain in place (changes to code 
this far down into the core is a severe problem), but it wasn't 
originally an optimization.  It's present there as a 
backwards-compatibility hack for twisted.internet.main, which is so 
deprecated that you will get sick and die if you even look at it.  It 
can probably be changed at this point.

> 3. Is it well-known that the abstract.FileDescriptor class does a quiet
> little fallback to the global reactor if you don't pass it a reactor 
> reference,
> and that Port fails to pass in its own reactor reference when it 
> creates
> a Server object in doRead()?

Yes.  Trust me, this was the best compromise at the time :-).

> We've strung together a variety of little changes in the process of
> figuring this out.  Once we're more confident of what we're doing,
> I'd be happy to supply the fixes, but I'm not going to waste my time
> if everyone thinks SelectReactor.doSelect() absolutely must do those
> optimizations.

I would be happier with a simple subclass that was 
slightly-slower-but-multiple-reactor-capable.  However, if you were to 
supply a patch that actually caught all these nuances and fixed them in 
a sensible way, I seriously doubt I would turn it down if you undid a 
tiny (and dubious) optimization :).

> Also note: I'm working on the most recent released version, not CVS.
> The slightest hint that this stuff is significantly changed in CVS
> will send me there, but until now we weren't confident enough with
> Twisted to work from unreleased code.  (Actually, attempting to
> resolve this has slightly lowered my confidence in Twisted, but
> only just a bit.)

The unreleased code doesn't fix this in particular, but it does include 
a LOT of bug fixes.  We are currently struggling to get a release out, 
thanks to the heroic efforts of Kevin Turner.  Hopefully it won't be 
much longer now :).
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+m2h8vVGR4uSOE2wRAhFTAKCjmEHVoQI1hAGZHXq7Y9DHlPSzFACeMOh6
bmy8goeb0OEsB/1b12qBz80=
=6aR2
-----END PGP SIGNATURE-----




From exarkun at intarweb.us  Tue Apr 15 03:46:31 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 15 Apr 2003 03:46:31 -0400
Subject: [Twisted-Python] errno handling in udp.py
Message-ID: <20030415074631.GA32225@meson.dyndns.org>

  I noticed this in my local repository today, but I only vaguely remember
making the change, and I don't remember at all whether my version is out of
date or up to date and I forgot to commit it.  Anyone know?

===================================================================
RCS file: /cvs/Twisted/twisted/internet/udp.py,v
retrieving revision 1.38
diff -u -r1.38 udp.py
--- internet/udp.py     24 Feb 2003 23:04:15 -0000      1.38
+++ internet/udp.py     15 Apr 2003 07:46:53 -0000
@@ -33,7 +33,7 @@

 if os.name == 'nt':
     EWOULDBLOCK = 10035
-elif os.name != 'java':
+if os.name != 'java':
     from errno import EWOULDBLOCK, EINTR, EMSGSIZE, ECONNREFUSED

 # Twisted Imports


  Jp

-- 
<sil> thanks again exarkun, you're really helpful
-- 
 up 26 days, 3:02, 3 users, load average: 0.21, 0.15, 0.10
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030415/72daa091/attachment.pgp 

From lafou at wanadoo.fr  Tue Apr 15 04:05:41 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 10:05:41 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
Message-ID: <b7gf5d$u6u$1@main.gmane.org>

Sorry to bother you again but I don't understand how to link a QueryIterator
with "standart" consumer... :(

even with a simple exemple, I can't have QueryIterator to work :


  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50""" 
  queryIt = QueryIterator(dbpool, sql)

  def res(x): print "Results : ", x
  from twisted.internet import reactor
  f = flow.DeferredFlow(queryIt)
  f.addCallback(res)
  reactor.callLater(2,reactor.stop)
  reactor.run()

Just give me this ouput :

Results : []


Thank you !





From lafou at wanadoo.fr  Tue Apr 15 04:44:04 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 10:44:04 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org>
Message-ID: <b7ggnb$69u$1@main.gmane.org>

> Results : []
> 
> 
> Thank you !

sorry, this was a connexion problem. NTL, I can't use QueryIterator with a
consumer. I need a little more help, flow isn't easy to use if you aren't
familiar with deferred, reactors, generators, etc.




From lafou at wanadoo.fr  Tue Apr 15 07:21:55 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 13:21:55 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
Message-ID: <b7gpva$dbv$1@main.gmane.org>

 
>         class CountIterator(flow.ThreadedIterator):
>             def __init__(self, count):
>                 flow.ThreadedIterator.__init__(self)
>                 self.count = count
>             def next(self): # this is run in a separate thread
>                 from time import sleep
>                 sleep(.1)
>                 val = self.count
>                 if not(val):
>                     raise flow.StopIteration
>                 self.count -= 1
>                 return [val]
>         def res(x): assert([5,4,3,2,1] == x)
>         from twisted.internet import reactor
>         f = flow.DeferredFlow(CountIterator(5))
>         f.addCallback(res)
>         reactor.callLater(2,reactor.stop)
>         reactor.run()
> 

This doen't work
here's the real result : [[5], [4], [3], [2], [1]]

>python -u test_flow2.py
[[5], [4], [3], [2], [1]]
Traceback (most recent call last):
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/base.py", line
358, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "flow.py", line 215, in _execute
    self.callback(self.results)
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
193, in callback
    self._startRunCallbacks(result, 0)
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
249, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
262, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "test_flow2.py", line 16, in res
    def res(x): print x; assert([5,4,3,2,1] == x)
exceptions.AssertionError: 
>Exit code: 0





From tv at twistedmatrix.com  Tue Apr 15 03:42:40 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 15 Apr 2003 10:42:40 +0300
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030414182259.GC25237@meson.dyndns.org>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org> <20030414130224.GA27087@lapdog> <20030414182259.GC25237@meson.dyndns.org>
Message-ID: <20030415074240.GA30738@lapdog>

On Mon, Apr 14, 2003 at 02:22:59PM -0400, Jp Calderone wrote:
> > >   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> > > support [well?]).  Can you go more into why this might be a problem?  I
> > 	Umm, I'm quite confident Ldaptor does pipelined operations for
> > 	the LDAP protocol, with Twisted. It's quite trivial.
>   Does Ldaptor use NNTP?  I remember thinking "I'll do pipelining when
> someone asks for it..." when I did the implementation, and no one ever
> asked...

	No, it's LDAP. I now see what you mean, you want
	s/which Twisted doesn't support/which twisted.news doesn't support/

-- 
:(){ :|:&};:



From cce at clarkevans.com  Tue Apr 15 15:11:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 19:11:37 +0000
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <b7ggnb$69u$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
Message-ID: <20030415191137.GA25817@doublegemini.com>

On Tue, Apr 15, 2003 at 10:44:04AM +0200, Philippe Lafoucri?re wrote:
| sorry, this was a connexion problem.

It should have raised an exception if it couldn't connect.  I think
the new flow.py (you seemed to have been using an older one) should
fix this, but perhaps not, as I haven't tested it.  

| NTL, I can't use QueryIterator with a consumer. 

Hmm.  The following should work...


  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""

  def consumer()
      query = flow.Generator(QueryIterator(dbpool, sql))
      while 1:
          yield query
          if query.stop: break
          print query.result

  flow.Flow(consumer)
  flow.execute()

Or, if you want to use the twisted reactor to allow for
more than one process...

  from twisted.internet import reactor
  def res(x): print "Results : ", x
  f = flow.DeferredFlow(queryIt)
  f.addCallback(res)
  reactor.callLater(2,reactor.stop)
  reactor.run()

| I need a little more help, flow isn't easy to use if you aren't
| familiar with deferred, reactors, generators, etc.

Yes.  This stuff isn't easy.

Best,

Clark



From lafou at wanadoo.fr  Tue Apr 15 16:08:15 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 15 Apr 2003 22:08:15 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <20030415191137.GA25817@doublegemini.com>
References: <20030411073834.GB11627@doublegemini.com>
	 <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
	 <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
	 <20030415191137.GA25817@doublegemini.com>
Message-ID: <1050437295.27650.121.camel@biproc>

> It should have raised an exception if it couldn't connect.  I think
> the new flow.py (you seemed to have been using an older one) should
> fix this, but perhaps not, as I haven't tested it.  

This is weird, any exception is raised (try to change a function name in
a consumer).


> Hmm.  The following should work...
> 
> 
>   dbpool = adbapi.ConnectionPool("MySQLdb",
>                                 host=host,
>                                 db='MYDB',
>                                 user='USER',
>                                 passwd='PASS')
>   sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""
> 
>   def consumer()
>       query = flow.Generator(QueryIterator(dbpool, sql))
>       while 1:
>           yield query
>           if query.stop: break
>           print query.result
> 
>   flow.Flow(consumer)
>   flow.execute()


Thank you..... I 've tried all the day to make it work, but I didn't
succeed :(

But the code above blocks and never exits.



> Or, if you want to use the twisted reactor to allow for
> more than one process...
> 
>   from twisted.internet import reactor
>   def res(x): print "Results : ", x
>   f = flow.DeferredFlow(queryIt)
>   f.addCallback(res)
>   reactor.callLater(2,reactor.stop)
>   reactor.run()

Yes, this works (I've found it this morning). But it's still hard to use
with several producers and consumers.


> Yes.  This stuff isn't easy.

A little howto would greatly help :)
I can help you, if I understand every thing someday !

Thank you again for your help

-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From cce at clarkevans.com  Tue Apr 15 16:26:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 20:26:37 +0000
Subject: [Twisted-Python] Bloat
In-Reply-To: <20030414115045.GA18748@radii>
References: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com> <20030414115045.GA18748@radii>
Message-ID: <20030415202637.GA25999@doublegemini.com>

On Mon, Apr 14, 2003 at 07:50:45AM -0400, Christopher Armstrong wrote:
| On 2003.04.14 06:48, Bob Ippolito wrote:
| > > On 2003.04.13 20:32, Glyph Lefkowitz wrote:
| > > The one I've recently decided was good is "If there's no other code in
| > > Twisted that relies on it, don't add it to CVS."
| > 
| > Which came first, the chicken or the egg?
| 
| Your analogy is broken. If you have some code that needs
| DependantMultiService, then you can check in DependantMultiService at
| the same time as your code. If it's only application-code (i.e., an
| application that is not contributed to Twisted) that needs it, leave
| it in your application for now.

This isn't a clear policy.  The primary reason... Twisted is
a framework, and not an application (right?).  Therefore, 
applications shouldn't be part of Twisted (even if they were 
contributed).  So, it really is a chicken and egg.

Perhaps a better policy, if Glyph agrees, then it is in, 
otherwise the necessary conditions for a module to be
added to twisted.* are:
   
   1. the module has three or more end-user applications, from
      at least two different authors, where one of the applications
      (how ever trivial) must be open source so that it's usefulness
      can be highlighted; and

   2. the module complies with the coding standard, and comes
      with a complete coverage test suite; and

   3. the module comes with a documentation and tutorial so
      that it's usage can be understood by others; and

   4.  the module has at least two additional (committer)
       sponsors who think that it is useful to Twisted; and

   5.  the module 'floats' around on the list for at least
       a month or so so that enough people can 'chime' in
       any objections, or so that Glyph can register a veto.


Anyway, it's kinda strict, but it would make for a good basis
for the kind of quality level that we should probably have for
new modules.

But this still doesn't solve the 'bootstrap' issue, that is,
unless the module is checked into CVS, and the documentation
is clearly available, it makes it *very* hard to find users,
and thus to meet the first requirement.

| Of course, maybe there can be exceptions to this occasionally, but I
| think any exceptions need to be thought about very hard, for the
| reasons Glyph pointed out.
| 
| Also, sandbox is appropriate for such stuff. e.g., flow.py.

Yes.  I've found that the sandbox is a great place for this,
as the code isn't officially part of twisted; but yet is in
the CVS and distributed.  

...

However, there are problems with the 'Sandbox'.  The flow.py
file is really three items:

  1.  A new flow.py file in twisted.python
  2.  A small addition to twisted.internet.defer
  3.  A small addition to twisted.enterprise.adbapi
  4.  A small addition to twisted.python.compat (already applied)

So, I'd like to see the 'Sandbox' restructured in such
a way that it takes on a 'recursive diff' shape...

  Twisted/sandbox/flow/twisted/python/flow.py
  Twisted/sandbox/flow/twisted/internet/defer.py.diff
  Twisted/sandbox/flow/twisted/enterprise/adbapi.py.difff
  Twisted/sandbox/flow/test/test_flow.py
  Twisted/sandbox/flow/doc/howto/flow.html

And then having a 'make apply_flow' which will apply the
patches and copy over what would be the result when 
adding flow to the new tree.   In this way people can go
into the sandbox and 'enable' any new additions that they
want.  

I know it's not great, but it would then be clear to 
everyone what a given proposal is.  Most modules in 
the future may not be a simple file... flow isn't, 
despite it's very small size.

Best,

Clark



From cce at clarkevans.com  Tue Apr 15 16:36:26 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 20:36:26 +0000
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <1050437295.27650.121.camel@biproc>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc>
Message-ID: <20030415203626.GA26333@doublegemini.com>

On Tue, Apr 15, 2003 at 10:08:15PM +0200, Philippe Lafoucri?re wrote:
| > It should have raised an exception if it couldn't connect.  I think
| > the new flow.py (you seemed to have been using an older one) should
| > fix this, but perhaps not, as I haven't tested it.  
| 
| This is weird, any exception is raised (try to change a function name in
| a consumer).

The error handling is not a strong point of flow.py yet, but
it eventually will be.   Sorry about my last example, you
can't use QueryIterator or ThreadedIterator without using
the reactor... my bad ;)

  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""
  def consumer()
      query = flow.Generator(QueryIterator(dbpool, sql))
      while 1:
          yield query
          if query.stop: break
          print query.result

  from twisted.internet import reactor
  def finish(result): print result
  f = flow.DeferredFlow(consumer())
  f.addBoth(finish)
  reactor.callLater(2,reactor.stop)
  reactor.run()




From jml at ids.org.au  Wed Apr 16 06:16:26 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Wed, 16 Apr 2003 20:16:26 +1000
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
In-Reply-To: <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030415110038.GH27721@mumak.net> <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030416101625.GI27721@mumak.net>

On Mon, Apr 14, 2003 at 08:56:10PM -0500, Glyph Lefkowitz wrote:
> On Tuesday, April 15, 2003, at 06:00 AM, jml at ids.org.au wrote:
> 
> >However, registerAdapter and rebuild don't play nicely together. On a 
> >rebuild,
> >registerAdapter tries to re-register stuff, and throws an exception.
> 
> Could you instead have a module flag "allowDuplicates" which would be 
> set by rebuild and unset when it was finished?

Done (in CVS).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030416/3c71463c/attachment.pgp 

From glyph at twistedmatrix.com  Wed Apr 16 04:30:33 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Apr 2003 03:30:33 -0500
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <20030415202637.GA25999@doublegemini.com>
Message-ID: <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Clark,

I think your policy suggestion is a good one.  I don't have an 
immediate yea or nay, but I'm thinking about it.  As to one of the 
things you asked, though:

On Tuesday, April 15, 2003, at 03:26 PM, Clark C. Evans wrote:

> The primary reason... Twisted is a framework, and not an application 
> (right?).

Yes, but then, the things that we characterize as "applications" these 
days are really frameworks.

In the ideal world, Twisted would start up and take over all 
UNIX-networking-y services that you ask it to; a webserver, a mail 
server (POP and SMTP), an IRC server, a rendezvous client and server, 
and a generic PB port that would provide access to all this 
functionality through a better protocol.

Applications would then hook into this environment and provide either 
enhanced versions of infrastructure - say, database-backed message 
storage rather than maildirs - or more frequently, domain objects that 
would do things completely unrelated to infrastructure.  For example, a 
message board, a chatterbot, a knowledge management system, etc.  These 
applications would then hook multiple URIs.  A chatterbot might have an 
IRC nickname as well as an email address, and would respond similarly 
(but not identically) to either.

By having the actual protocols taken over by the infrastructure like 
this, multiple applications (some of them running in different OS-level 
protection domains) can all talk to the same core services at once.  
Two chatterbot instances owned by different users might even converse 
with each other over the core infrastructure layer, either on the same 
host or on different hosts.

The existing codebase obviously doesn't implement terribly much of 
this, but you can see some of it.  Some people consider a web-server an 
"application", but 'mktap web' starts up and serves web pages.  'mktap 
words' starts a chat server.  'im' starts a chat client.  Over time 
these will become more unified and integrated.

To put it simply, "yes, Twisted is a framework, which means it's an 
application".
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+nRStvVGR4uSOE2wRAiOFAJ90o+NLSraTvtfnpHcq0bocMzBzGwCeKJXD
Q/ozsMDTDOAKcOwZ0YAsGeA=
=NN3O
-----END PGP SIGNATURE-----




From acapnotic at twistedmatrix.com  Wed Apr 16 05:32:01 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 16 Apr 2003 02:32:01 -0700
Subject: [Twisted-Python] Release Candidate for 1.0.4
Message-ID: <1050485519.22298.185.camel@troglodyte.funhouse>

A release candidate for version 1.0.4 of twisted is now available for
download from http://twistedmatrix.com/.  We are currently without a
mirror for release distribution; our apologies if our web site gets
slow.

Barring any major problems with this code, it will be released as 1.0.4
final before the end of the week.  Testing on the Windows platform has
been much less extensive than others, so Windows folks, if you could
hammer on this release candidate a bit and report back what you find,
we'd appreciate it.

Share and enjoy,

 - Kevin Turner
   acting Release Manager

-- 
The moon is full, 99.2% illuminated, 13.9 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030416/dab4cee9/attachment.pgp 

From lafou at wanadoo.fr  Wed Apr 16 07:27:34 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 Apr 2003 13:27:34 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <20030415203626.GA26333@doublegemini.com>
References: <20030411073834.GB11627@doublegemini.com>
	 <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
	 <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
	 <20030415191137.GA25817@doublegemini.com>
	 <1050437295.27650.121.camel@biproc>
	 <20030415203626.GA26333@doublegemini.com>
Message-ID: <1050492454.14677.18.camel@biproc>

I'm really sorry Clark, but your exemple doesn't work better than mine
...

Here's the result I got from your (last post) code :


>python -u test_flow_clark.py
[]
>Exit code: 0

(and def "consumer()" should be "def consumer():" )

I'm on #twisted, I hope to see you


Philippe





From lafou at wanadoo.fr  Wed Apr 16 07:55:53 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 16 Apr 2003 13:55:53 +0200
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com>
Message-ID: <b7jgau$pqn$1@main.gmane.org>

Wow, strange :

*****************************************************************
def consumer():
    query = flow.Generator(QueryIterator(dbpool, sql))
    print "here"
    while 1:
        print "there"
        yield query
        if query.stop: break
        print query.result
[...]
*****************************************************************

I never get "here" and "there" !
Moreover :

*****************************************************************
def consumer():
    query = flow.Generator(QueryIterator(dbpool, sql))
    zorglub
    while 1:
        yield query
        if query.stop: break
        print query.result
*****************************************************************
still outputs
[]
(-> zorglub is anything you want)




From lafou at wanadoo.fr  Wed Apr 16 08:03:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 16 Apr 2003 14:03:06 +0200
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org>
Message-ID: <b7jgog$s7c$1@main.gmane.org>

I solved the problem. It was a missing import (QueryIterator). But any
exception is raised when using flow. It's too hard to debug, even for few
lines of code.





From dgoodwin at powderfone.com  Wed Apr 16 00:51:37 2003
From: dgoodwin at powderfone.com (Doug Goodwin)
Date: Tue, 15 Apr 2003 21:51:37 -0700
Subject: [Twisted-Python] code for game server
Message-ID: <1AE810A5-6FC7-11D7-8188-003065B2028C@powderfone.com>

> Hi,
>
> I've been sporadically developing some code for a tic-tac-toe client 
> and
> server upon which I intended to base a tutorial. I've not got around to
> starting the document, but I'd be happy to make the code available to 
> you
> and/or any other interested parties.
>
> Thanks,
> Joe

Joe,

Count me in! I've been looking everywhere for code and a tutorial like 
this, so I would very much appreciate a gander at your code.

I am building an application on top of a socket server that speaks 
Flash-friendly XML. Even with my minimal knowledge of Twisted I have 
built a working example on top of the simple echo server. I have a 
nagging feeling that I should be looking at PB instead.

The next step is to add persistence with database calls. Working in a 
strict asynchronous framework is all new to me. But exciting!

Thanks for all the good work,

Doug Goodwin
dgoodwin at calarts.edu
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 923 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030415/bd1e573d/attachment.bin 

From benno at eloquent.com.au  Wed Apr 16 09:57:00 2003
From: benno at eloquent.com.au (Benno Rice)
Date: 16 Apr 2003 23:57:00 +1000
Subject: [Twisted-Python] Mirror site for Twisted distfiles
Message-ID: <1050501420.696.33.camel@ratchet.jeamland.net>

To lessen the load on Glyph's link, I've put up a mirror site for the
Twisted distfiles at:

http://www.eloquent.com.au/twisted/

This is in a hosting facility in Melbourne, Australia so it'll
definitely be better for those in .au but it might be a better bet for
others as well, just so that Glyph's line doesn't melt. =)

I've got the 1.0.4rc1 distfiles, and I'm working on 1.0.3 now.

Enjoy!

-- 
Benno Rice                    Phone:  +61 3 9387 1131
Eloquent Systems              Mobile: +61 410 412 355
http://www.eloquent.com.au/   Email:  benno at eloquent.com.au






From 17056 at student.saxion.nl  Wed Apr 16 10:12:49 2003
From: 17056 at student.saxion.nl (Erik Bakker)
Date: Wed, 16 Apr 2003 16:12:49 +0200
Subject: [Twisted-Python] Broadcasting using twisted?
Message-ID: <OFC3CD91A0.BDA98395-ONC1256D0A.004E141A-C1256D0A.004E1429@saxion.nl>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030416/2751850e/attachment.htm 

From 17056 at student.saxion.nl  Wed Apr 16 10:16:08 2003
From: 17056 at student.saxion.nl (Erik Bakker)
Date: Wed, 16 Apr 2003 16:16:08 +0200
Subject: [Twisted-Python] broadcasting in Twisted?
Message-ID: <OF62EB2EC9.BB4B00C2-ONC1256D0A.004E58AC-C1256D0A.004E61D6@saxion.nl>

Hi all,

First of all I'd like to introduce myself. My name is Erik Bakker and i'm a
student at the university of Twente in the Netherlands. I'm working on a
project, in which we would like to use Twisted-python. We are making a
distributed 3D world using OpenGL in python. And we like to use Twisted for
the distribution. We don't need to distribute lots of data, in fact we only
need to distribute the 3D camera position (and only if the 3D camera
changes on input from the user). We would like to broadcast the camera
position to all clients but how is the big question. I can't find anything
in the documentation about broadcasting (except that it is possible:). Now
was our idea that it should be possible with the module UDP from the
internet package, but we can't get it to work.
Now my questions are if it is possible to broadcast using twisted and how.
I'm a bit a newbie in Twisted (yet;-) anybody got any idea's, examples?

Many thanks in advance!

Erik Bakker





From andrew-twisted at puzzling.org  Wed Apr 16 09:50:40 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 16 Apr 2003 23:50:40 +1000
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <3E9A1602.7948A75D@engcorp.com>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <3E9A1602.7948A75D@engcorp.com>
Message-ID: <20030416135040.GC27886@frobozz.local>

On Sun, Apr 13, 2003 at 09:59:30PM -0400, Peter Hansen wrote:
> Jp Calderone wrote:
> > 
> >     In the test cases, you also used assert_() (but just once, I assume it
> > was an oversight), which shouldn't be access directly by tests cases, so I
> > changed this to a failUnless().  
> 
> Jp, I realize Twisted unittest is either slightly older than the standard,

It's actually an API-compatible (or near enough) re-implementation, called
Trial.

-Andrew.




From cce at clarkevans.com  Wed Apr 16 10:38:57 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 14:38:57 +0000
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
In-Reply-To: <b7jgog$s7c$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org>
Message-ID: <20030416143857.GA28530@doublegemini.com>

On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucri?re wrote:
| I solved the problem. It was a missing import (QueryIterator). But any
| exception is raised when using flow. It's too hard to debug, even for few
| lines of code.

Yes, I know... better exception handling is next on me list.

;) Clark



From bob at redivi.com  Wed Apr 16 10:47:31 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 16 Apr 2003 10:47:31 -0400
Subject: [Twisted-Python] broadcasting in Twisted?
In-Reply-To: <OF62EB2EC9.BB4B00C2-ONC1256D0A.004E58AC-C1256D0A.004E61D6@saxion.nl>
Message-ID: <5A552932-701A-11D7-A5A3-000A95686CD8@redivi.com>

On Wednesday, Apr 16, 2003, at 10:16 America/New_York, Erik Bakker 
wrote:

> First of all I'd like to introduce myself. My name is Erik Bakker and 
> i'm a
> student at the university of Twente in the Netherlands. I'm working on 
> a
> project, in which we would like to use Twisted-python. We are making a
> distributed 3D world using OpenGL in python. And we like to use 
> Twisted for
> the distribution. We don't need to distribute lots of data, in fact we 
> only
> need to distribute the 3D camera position (and only if the 3D camera
> changes on input from the user). We would like to broadcast the camera
> position to all clients but how is the big question. I can't find 
> anything
> in the documentation about broadcasting (except that it is possible:). 
> Now
> was our idea that it should be possible with the module UDP from the
> internet package, but we can't get it to work.
> Now my questions are if it is possible to broadcast using twisted and 
> how.
> I'm a bit a newbie in Twisted (yet;-) anybody got any idea's, examples?

There is fledgling Multicast UDP support in Twisted, but I don't think 
anyone has really tried to use it yet.  Are all clients expected to be 
on the same subnet?  If not, multicast or broadcast is probably not 
going to be appropriate.

As far as implementation goes, take a look at the UDP howto, and 
echoclient_udp.py and echoserv_udp.py in doc/examples.  I haven't used 
UDP since the API for using UDP changed, so I can't really help you any 
more than that.

-bob




From cce at clarkevans.com  Wed Apr 16 11:17:39 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 15:17:39 +0000
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030415202637.GA25999@doublegemini.com> <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030416151739.GA28842@doublegemini.com>

On Wed, Apr 16, 2003 at 03:30:33AM -0500, Glyph Lefkowitz wrote:
| Yes, but then, the things that we characterize as "applications" these 
| days are really frameworks.

Ok.  I define an Application as a service which provides or
responds to specific user-level content.   Those software
components which can be shared by more than one application
are canidates for inclusion into Twisted.

| In the ideal world, Twisted would start up and take over all 
| UNIX-networking-y services that you ask it to; a webserver, a mail 
| server (POP and SMTP), an IRC server, a rendezvous client and server, 
| and a generic PB port that would provide access to all this 
| functionality through a better protocol.

Right.

| Applications would then hook into this environment and provide either 
| enhanced versions of infrastructure - say, database-backed message 
| storage rather than maildirs - or more frequently, domain objects that 
| would do things completely unrelated to infrastructure.  For example, a 
| message board, a chatterbot, a knowledge management system, etc.  These 
| applications would then hook multiple URIs.  A chatterbot might have an 
| IRC nickname as well as an email address, and would respond similarly 
| (but not identically) to either.

Right.  Are these applications considered part of Twisted?  For
instance, I can picture an 'Baseball Stat' application which
uses an IRC bot, plus a HTTP interface, etc.   

For contrast, let's say that a IMAP implementation which is part
of Twisted comes with a maildir backend; but then, someone provides
a generic database back end, a layer which maps database structures
onto IMAP requests.  As long as it is 'generic', in that it can work
with more than one set of user content (and thus possibly different
table structures, or with a single but generic table structure),
then I'd consider the database back end Infrastructure.

However, if this database backend maps only to one set of tables,
perhaps specific to a problem domain, I'd consider it part of
the Application.

So, the question is, when does a software component which is 
part of an Application become a canidate for inclusion into
Twisted... I'd say, when it is used by 3 or more Applications,
one of which is open source (which may be trivial, but is used
as an example)

| By having the actual protocols taken over by the infrastructure like 
| this, multiple applications (some of them running in different OS-level 
| protection domains) can all talk to the same core services at once.  
| Two chatterbot instances owned by different users might even converse 
| with each other over the core infrastructure layer, either on the same 
| host or on different hosts.
| 
| The existing codebase obviously doesn't implement terribly much of 
| this, but you can see some of it.  Some people consider a web-server an 
| "application", but 'mktap web' starts up and serves web pages.  'mktap 
| words' starts a chat server.  'im' starts a chat client.  Over time 
| these will become more unified and integrated.

Ok.  I don't really consider the generic web server as an Application,
IMHO, Apache is *not* an application.  Apache plus a content directory
and a given configuration file is an Application.  In this respect,
the configuration of the Webserver is the 'program'.

| To put it simply, "yes, Twisted is a framework, which means it's an 
| application".

A line has to be drawn, I like the idea of calling the stuff outside 
Twisted the Application.  If you define Twisted as an Application, 
then we just need another name for what is outside the line.  I'd
rather not find another name... and the purpose of this discussion
is to draw a distinction for what is in and what is not in Twisted.

For instance, a particular IRC chat client (/w a user interface)
should not be part of Twisted, as it will probably include lots
of specific assumptions as to how a given user would chat.  However,
just about everything that a chat client needs could be a 
canidate for Twisted.

Perhaps what we need is a 'apps' directory in the top level
of Twisted directory (but not in the twisted.* package) where
people can drop in Applications which they would like to share
with the community; but are not necessarly maintained by
the Twisted Community.  

Best,

Clark



From bob at redivi.com  Wed Apr 16 12:05:17 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 16 Apr 2003 12:05:17 -0400
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <20030416151739.GA28842@doublegemini.com>
Message-ID: <37867ACD-7025-11D7-8C15-000A95686CD8@redivi.com>

On Wednesday, Apr 16, 2003, at 11:17 America/New_York, Clark C. Evans 
wrote:

> Perhaps what we need is a 'apps' directory in the top level
> of Twisted directory (but not in the twisted.* package) where
> people can drop in Applications which they would like to share
> with the community; but are not necessarly maintained by
> the Twisted Community.

Or at least a set of links on the webpage that are more prevalent and 
better maintained than the success stories..  And then there's the 
hybrid of the two, where a sourceforge-like facility could (eventually) 
be provided to open source Twisted applications... but god knows that's 
a pain in the ass to setup.

Maybe when Twisted can host svn, has its own wiki and the bugtracker 
gets better.. who knows?  It'd certainly be a damn good demonstration 
of Twisted if it could run nearly the whole intranet (mail, web, dns, 
bug tracking, source code management, forums, wiki, instant messaging, 
ldap, etc.) of a software development company "out of the box".  I'd 
sure as hell use it, our exim + cyrus + openldap + ldapdns + apache + 
cvs + gforge... etc... setup is a real pain in my ass.

-bob




From ianb at colorstudy.com  Wed Apr 16 17:00:23 2003
From: ianb at colorstudy.com (Ian Bicking)
Date: 16 Apr 2003 16:00:23 -0500
Subject: [Twisted-Python] Webware/Twisted experiment
Message-ID: <1050526823.30719.591.camel@lothlorien>

In the webware-sandbox CVS (webware-sandbox.sf.net), in
Sandbox.ianbicking.TwistedWebware, I've put some code to run Webware
under Twisted.  This mostly subsumes the Webware AppServer, with Twisted
handling the threads and sending requests directly to
Application.dispatchRawRequest.

There's certainly some cludges.  There's a minor change to
MiscUtils.Funcs.hostName to accomodate Twisted, so the CVS version of
that file is required.

It's an experiment, because it doesn't actually offer anything we don't
have already.  It would be more interesting if we can use some of the
other protocols that Twisted supports.  I don't yet know how to do that
in Twisted, though.

  Ian





From cce at clarkevans.com  Wed Apr 16 17:14:39 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 21:14:39 +0000
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
In-Reply-To: <b7jgog$s7c$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org>
Message-ID: <20030416211439.GA29537@doublegemini.com>

On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucri?re wrote:
| I solved the problem. It was a missing import (QueryIterator). But any
| exception is raised when using flow. It's too hard to debug, even for few
| lines of code.

The flow module should be much better in 'debug' land now
as I think I'm capturing exceptions correctly.  By default,
the DeferredFlow object catches exceptions and uses 
deferred's errback.    It also allows you to pass a 
callable which creates a generator, in case you
forget to use () to invoke.  

If you want the old behavior (compatible with the default
behavior of DeferredList) then use failureAsResult to 
treat failure objects the same as any other result,
returning a list of results to the callback.  

Best,

Clark



From mclay at python.net  Wed Apr 16 17:44:09 2003
From: mclay at python.net (Michael McLay)
Date: Wed, 16 Apr 2003 17:44:09 -0400
Subject: [Twisted-Python] Broken HOWTO documentation
Message-ID: <200304161744.09301.mclay@python.net>

I have been trying to get the examples in section 2.4 of the HOWTO to work. It 
looks like the documentation is out of date with the current state of the 
software in the CVS. starting with 2.4.2, the "app.theApplication" returns 
the error

>>> a = app.theApplication
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute 'theApplication'
>>> dir(app)
['Accessor', 'Application', 'ApplicationService', 'DefaultAuthorizer', 
'False', 'MultiService', 'PortCollection', 'ServiceCollection', 
'StopIteration', 'StringIO', 'True', '_AbstractServiceCollection', '__all__', 
'__builtins__', '__doc__', '__file__', '__name__', 'bool', 'defer', 'dict', 
'encrypt', 'error', 'inet_ntop', 'inet_pton', 'interfaces', 'isinstance', 
'iter', 'log', 'main', 'os', 'platform', 'socket', 'string', 'styles', 
'types', 'warnings']

I had problems with the examples in section 2.4.3 and 2.5 as well. In section 
2.5 the telnet localhost 4040 command returned a different module location 
instead of twisted.protocols.telnet.ShellFactory and when I ran dir(__main__) 
the list of names did not come close to matching what was in the example. No 
twisted objects were listed.



From exarkun at intarweb.us  Wed Apr 16 23:07:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 16 Apr 2003 23:07:45 -0400
Subject: [Twisted-Python] Interfaces
Message-ID: <20030417030744.GA20191@meson.dyndns.org>

  I went to remove the interface inheritance done in
twisted.internet.interfaces tonight, thinking it was all my fault.  To my
surprise, IReadDescriptor and IWriteDescriptor both use it as well though. 
So what's the story on this?  Is it kosher?

  Next:  There is no IPerspective, and I think I want one.  What I actually
*really* want is a way to specify that any class that implements a
particular interface of mine also be a Perspective.  If interface
inheritance is okay, I can just make my interface inherit from IPerspective. 
If it's not, I guess I need another solution.

  Thoughts?

  Jp

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 27 days, 23:02, 6 users, load average: 0.48, 0.66, 1.08



From radix at twistedmatrix.com  Wed Apr 16 23:27:58 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Apr 2003 23:27:58 -0400
Subject: [Twisted-Python] Interfaces
In-Reply-To: <20030417030744.GA20191@meson.dyndns.org>; from exarkun@intarweb.us on Wed, Apr 16, 2003 at 23:07:45 -0400
References: <20030417030744.GA20191@meson.dyndns.org>
Message-ID: <20030417032758.GC7077@radii>


On 2003.04.16 23:07, Jp Calderone wrote:
>   I went to remove the interface inheritance done in
> twisted.internet.interfaces tonight, thinking it was all my fault.  To my
> surprise, IReadDescriptor and IWriteDescriptor both use it as well though. 
> So what's the story on this?  Is it kosher?
> 
>   Next:  There is no IPerspective, and I think I want one.  What I actually
> *really* want is a way to specify that any class that implements a
> particular interface of mine also be a Perspective.  If interface
> inheritance is okay, I can just make my interface inherit from IPerspective. 
> If it's not, I guess I need another solution.
> 
>   Thoughts?

I like Interface inheritance, and I don't think anyone has really objected to
it yet.

Maybe you were thinking of the objections to _inheriting of Interfaces_ of
superclasses?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030416/d2ba833e/attachment.pgp 

From glyph at twistedmatrix.com  Thu Apr 17 04:10:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Apr 2003 03:10:06 -0500
Subject: [Twisted-Python] Interfaces
In-Reply-To: <20030417032758.GC7077@radii>
Message-ID: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:

> I like Interface inheritance, and I don't think anyone has really 
> objected to
> it yet.

I have :-).

The problem is that currently, it doesn't do what you think.  What most 
people want an interface inheritance to do is make

     class IFoo(Interface): pass
     class IBar(IFoo): pass
     class Bar:
         __implements__ = IBar

be more or less equivalent to

     class IFoo(Interface): pass
     class IBar(Interface): pass
     class Bar:
         __implements__ = IFoo, IBar

Currently this does _not_ happen, because

Does this "DWIM" in Zope?  I have been hesitant to make 
python.components handle it this way, firstly because we didn't realize 
it at first and so it would now be a change in semantics, and secondly 
because it's not clear what effect this would have on registerAdapter.  
Would

     registerAdapter(Bar, Baz, IBar)

also register an adapter for Baz for IFoo?  Why or why not?  What if a 
different adapter was already registered?  I could see that taking 
interface inheritance into account here could be sometimes convenient, 
but it could also be sometimes wrong.  I really have no idea what the 
right answer is, and so leaving it "inconvenient but simple" was easier 
for the time being.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+nmFjvVGR4uSOE2wRAizjAJ9jF1XYx/3Arc31I8vK4SQnOkDi9gCgj6kk
cqnpAdkXmb4T8T3zOOT75oM=
=uG4y
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Thu Apr 17 06:49:54 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 17 Apr 2003 12:49:54 +0200
Subject: [Twisted-Python] Re: Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org> <20030416143857.GA28530@doublegemini.com>
Message-ID: <b7m0r5$817$1@main.gmane.org>

Clark C. Evans wrote:

> On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucri?re wrote:
> | I solved the problem. It was a missing import (QueryIterator). But any
> | exception is raised when using flow. It's too hard to debug, even for
> | few lines of code.
> 
> Yes, I know... better exception handling is next on me list.
> 
> ;) Clark

Thank you for the documentation Clark. Here's a little doc patch that just
add some titles and a new part on QueryIterator (which is not good at all
:( )

Index: flow.html
===================================================================
RCS file: /cvs/Twisted/sandbox/flow.html,v
retrieving revision 1.3
diff -u -r1.3 flow.html
--- flow.html   17 Apr 2003 08:00:11 -0000      1.3
+++ flow.html   17 Apr 2003 10:51:09 -0000
@@ -63,10 +63,10 @@
 than blocking, the entire state of the iterator chain must be saved so that
 it can be resumed later.   This is what the flow module does.</p>

-<h3>Iterators and Wraps</h3>
+<h3>Iterators and generators</h3>

 <p>An iterator is basically an object which produces a sequence of values.
-Python's iterators are simply objects with an <code>__iter__()</code>
+Python's iterators are simply objects with an <code>__iter__()</code>
 member function which returns an object (usually itself) which has a
 <code>next()</code> member function.   The <code>next()</code> method is
 then invoked till it raises a <code>StopIteration</code> exception.
@@ -206,6 +206,8 @@

 </pre>

+<h3>Wrapping Iterator</h3>
+
 <p>The problem with this approach, is that a producer could potentially
 block, and if it did, the entire process could potentially stop servicing
 other requests.   Thus, some mechanism for pausing the flow and rebuilding
@@ -259,11 +261,13 @@

 </pre>

-<p>This seems like quite the effort, wrapping each iterator and
+<h3>Cooperate</h3>
+
+<p>This seems like quite the effort, wrapping each iterator and
 then having to alter the calling sequence.  Why?  The answer is
 that it allows for a <code>flow.Cooperate</code> object to be
 returned.   When this happens, the entire call chain can be
-moved off the stack so that other flows can proceed.   For
+moved off the stack so that other flows can proceed.   For
 flow.Iterator (which blocks), the implementation of Cooperate
 simply puts the call chain to sleep</p>

@@ -281,10 +285,13 @@
 #   3
 </pre>

+
+<h3>Merging Iterators in one flow</h3>
+
 <p>Perhaps a more clear example can be found when using the
 Merge function in Flow.  This simply zips two or more wrapped
 iterators together, without blocking one or the other.  In the
-example below, the <code>States</code> iterator isn't blocked
+example below, the <code>States</code> iterator isn't blocked
 by the <code>Counter</code> iterator.
 </p>

@@ -324,7 +331,7 @@
 <code>reactor.callLater</code> and <code>internet.defer.Deferred</code>
 mechanism, things are very nice.  In the example below, the first two
 items in the list are produced (although they arn't delivered yet),
-other events in the reactor are allowed to proceed, and then the
+other events in the reactor are allowed to proceed, and then the
 last item in the list is produced.</p>


@@ -333,7 +340,7 @@
 from twisted.internet import reactor
 import flow

-def prn(x):
+def prn(x):
     print x
 d = flow.Deferred([1,2,flow.Cooperate(1),3])
 d.addCallback(prn)
@@ -344,6 +351,48 @@
 #   [1,2,3]
 </pre>

+<h3>Using database connexion to prodive data</h3>
+
+<p>
+Of course, Flow allows to use ConnectionPools to provide data.<br />
+QueryIterator is a simple Iterator which provides data from a database. Is
uses <code>twisted.enterprise.adbapi</code>
+connectionPools, and a query to fetch data. QueryIterator must be used with
a deferred execution.
+</p>
+
+<pre class="python">
+from __future__         import generators
+from twisted.enterprise import adbapi
+from sandbox.flow       import QueryIterator
+from twisted.internet   import reactor
+
+import flow
+
+dbpool = adbapi.ConnectionPool("MySQLdb",host='localhost',
db='ADB',user='AUSER',passwd='APASSWD')
+sql = """SELECT name FROM mytable LIMIT 0,3"""
+
+def consumer():
+    query = flow.Wrap(QueryIterator(dbpool, sql))
+    while 1:
+        try:
+            yield query
+            if query.stop: break
+            print "Processed result : ",query.result
+        except flow.StopIteration: print "-- Finished --"
+
+from twisted.internet import reactor
+def finish(result): print "Final result : ", result
+f = flow.Deferred(consumer())
+f.addBoth(finish)
+reactor.callLater(1,reactor.stop)
+reactor.run()
+
+# prints
+# Processed result :  ('SMITH',)
+# Processed result :  ('JOHN',)
+# Processed result :  ('BOB',)
+# Final result :  []
+
+</pre>

 </body>
 </html>






From lordvan at lordvan.com  Thu Apr 17 08:54:28 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Thu, 17 Apr 2003 14:54:28 +0200 (CEST)
Subject: [Twisted-Python] Woven b0rkage
Message-ID: <65236.62.47.64.183.1050584068.squirrel@mail-at.net>

hi!

woven b0rks here when i got an index.rpy which uses woven .. it does
endless redirects ... below is just a patch to comment it (whcih works
perfectly here..)

regards


--- /usr/portage/distfiles/cvs-src/Twisted/twisted/web/woven/controller.py
     2003-04-14 20:36:49.000000000 +0200
+++ /usr/lib/python2.2/site-packages/twisted/web/woven/controller.py   
2003-04-17 14:47:58.000000000 +0200
@@ -183,8 +183,8 @@
         DOM. gatheredControllers will render the page to the browser
         when it is done.
         """
-        if not request.prepath[-1] == '' and self.addSlash:
-            return redirectTo(addSlash(request), request)
+#        if not request.prepath[-1] == '' and self.addSlash:
+#            return redirectTo(addSlash(request), request)
         # Handle any inputhandlers that were passed in to the controller
first
         for ih in self._inputhandlers:
             ih._parent = self


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From cce at clarkevans.com  Thu Apr 17 10:21:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 17 Apr 2003 14:21:23 +0000
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030417142123.GA31619@doublegemini.com>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
| On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:
| >I like Interface inheritance, and I don't think anyone has really 
| >objected to it yet.
| 
| I have :-).

Alex and I have proposed a completely different alternative
to Interfaces, which I think is more Pythonic, and perhaps
may be more generally useful.  I'm not a big fan of Zope's
approach.

  http://www.python.org/peps/pep-0246.html

Best,

Clark



From cce at clarkevans.com  Thu Apr 17 12:09:57 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 17 Apr 2003 16:09:57 +0000
Subject: [Twisted-Python] feedback requested -- flow.py goes beta
Message-ID: <20030417160957.GA31818@doublegemini.com>

Abstract: >

   The flow module implements cooperative multi-tasking using
   iterators (easily created with generators) and Twisted's 
   event reactor.   The flow module also includes support for
   incrementally returning query results from Twisted's 
   database connection pool.  While this module does _not_ 
   require generators (a python v2.2 feature), applications 
   of the module are best demonstrated with generators.

Status: >

   The flow module (flow.py) is currently checked into CVS in
   the sandbox directory.  It is unlikely that any large 
   changes to the module will happen.   The documentation 
   is partial, but currently in development.

   General feedback from the Twisted Community is requested.
  
Deployment: >

   If flow was accepted into twisted, I was thinking 
   of spreading its functionality over several files.
   
   1.  Adding a base implementation module, twisted.python.flow,
       which only depends upon other items in twisted.python

   2.  Adding a (fairly small) Flow class to 
       twisted.internet.defer which takes the base
       implementation and uses the reactor and inherits
       from Deferrred.

   3.  Adding a ThreadedIterator class to twisted.internet.threads
       which depends upon twisted.internet.reactor and 
       twisted.python.*
  
   4.  Adding a (fairly small) QueryIterator class to 
       twisted.enterprise.adbapi which depends primarly 
       on ThreadedIterator, but provides for query 
       functionality from a ConnectionPool

Best,

Clark



From mesozoic at polynode.com  Thu Apr 17 10:31:34 2003
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 17 Apr 2003 10:31:34 -0400
Subject: [Twisted-Python] Problem with twisted.web log files
Message-ID: <20030417143134.GC2096@polynode.com>

I'm seeing some strange behavior from twisted.web.

After running "mktap web --logfile=web.log ; twistd -nf web.tap", I get the
following traceback:

Traceback (most recent call last):
  File "/home/mesozoic/dev/Twisted/bin/twistd", line 31, in ?
    run()
  File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 474, in run
    runApp(config)
  File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 390, in runApp
    application.bindPorts()
  File "/home/mesozoic/dev/Twisted/twisted/internet/app.py", line 738, in bindPorts
    self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
  File "/home/mesozoic/dev/Twisted/twisted/internet/default.py", line 244, in listenTCP
    p.startListening()
  File "/home/mesozoic/dev/Twisted/twisted/internet/tcp.py", line 417, in startListening
    self.factory.doStart()
  File "/home/mesozoic/dev/Twisted/twisted/internet/protocol.py", line 55, in doStart
    self.startFactory()
  File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
    self.logFile = self._openLogFile(self.logPath)
  File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 408, in _openLogFile
    return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
  File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
    BaseLogFile.__init__(self, name, directory, defaultMode)
  File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
    assert os.path.isdir(self.directory)
AssertionError

This does _not_ happen, however, if I run "mktap web --logfile=./web.log"

This problem has only surfaced recently, although I can't say precisely how
long ago.  I am using Twisted out of CVS.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From tvon at etria.org  Thu Apr 17 13:58:16 2003
From: tvon at etria.org (Tom von Schwerdtner)
Date: Thu, 17 Apr 2003 13:58:16 -0400
Subject: [Twisted-Python] Re: [Webware-discuss] Webware/Twisted experiment
In-Reply-To: <1050526823.30719.591.camel@lothlorien>
References: <1050526823.30719.591.camel@lothlorien>
Message-ID: <20030417175816.GA30583@linux.frdkmd.adelphia.net>

On Wed, Apr 16, 2003 at 04:00:23PM -0500, Ian Bicking wrote:
> In the webware-sandbox CVS (webware-sandbox.sf.net), in
> Sandbox.ianbicking.TwistedWebware, I've put some code to run Webware
> under Twisted.  This mostly subsumes the Webware AppServer, with Twisted
> handling the threads and sending requests directly to
> Application.dispatchRawRequest.

ANyone played with this?  I havent had time but I've been curious about
this direction of development.

-Tom
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030417/8fedd24f/attachment.pgp 

From exarkun at intarweb.us  Thu Apr 17 15:52:42 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 15:52:42 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <20030414093333.GA16564@radii>
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com> <20030414093333.GA16564@radii>
Message-ID: <20030417195242.GA30481@meson.dyndns.org>

On Mon, Apr 14, 2003 at 05:33:33AM -0400, Christopher Armstrong wrote:
> 
> On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> > but I would like to discuss it and other patches like it.  Not to pick 
> > on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> > so it can't be said that this is a violation of anything in particular. 
> >   I just think we need one.
> 
> The one I've recently decided was good is "If there's no other code in
> Twisted that relies on it, don't add it to CVS."
> 

  In this vein, what is the policy on things that are now in CVS but that
are no longer used by anything?

  I know this is trickier, because apps might be relying on them, but we've
got some *really* obscure stuff :)

  For example, twisted.python.reflect.{Settable,Promise,Summer} - completely
unused, except for their tests.

  It'd be nice if we could lose some of this baggage - not right away, but
maybe start with some deprecations now?

  Jp

-- 
Examinations are formidable even to the best prepared, for
even the greatest fool may ask more the the wisest man can answer.
                -- C.C. Colton
-- 
 up 28 days, 15:02, 5 users, load average: 0.06, 0.13, 0.16
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030417/f14396dd/attachment.pgp 

From jon at totient.demon.co.uk  Thu Apr 17 16:19:44 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Thu, 17 Apr 2003 21:19:44 +0100
Subject: [Twisted-Python] c++ style comments in c extension modules
Message-ID: <200304172119.44319.jon@totient.demon.co.uk>

When building twisted 1.0.3 on solaris using the sun 'cc' compiler, several of the c extension modules fail because 
of the prescence of '//' for a comment in the code. 

grep -n "\/\/" `find . -name "*.c" -print`

./twisted/internet/cReactor/cDelayedCall.c:126:    // self.time += secondsLater
./twisted/internet/cReactor/cDelayedCall.c:170:    // self.time = time() + secondsFromNow
./twisted/internet/cReactor/cReactorTCP.c:159:    char buf[3*20+3+1+100]; // for good measure
./twisted/internet/cReactor/cReactorTime.c:93:        return NULL; // TODO: set exception?
./twisted/internet/cReactor/cReactorTime.c:125:    //return cDelayedCall_cancel(call, NULL);



please can these be replaced with the /* */ to keep the compiler happy?
I'd fix it myself but dont have CVS access.

I think the gnu compiler is more forgiving, unfortunately solaris cc is not.

cheers

Jon



From exarkun at intarweb.us  Thu Apr 17 16:50:14 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 16:50:14 -0400
Subject: [Twisted-Python] c++ style comments in c extension modules
In-Reply-To: <200304172119.44319.jon@totient.demon.co.uk>
References: <200304172119.44319.jon@totient.demon.co.uk>
Message-ID: <20030417205014.GA31081@meson.dyndns.org>

On Thu, Apr 17, 2003 at 09:19:44PM +0100, Jon Dyte wrote:
> When building twisted 1.0.3 on solaris using the sun 'cc' compiler, several of the c extension modules fail because 
> of the prescence of '//' for a comment in the code. 

  Fixed in CVS, thanks.

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 28 days, 17:02, 10 users, load average: 0.03, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030417/2649e0db/attachment.pgp 

From konrad at wam.umd.edu  Thu Apr 17 23:15:06 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Thu, 17 Apr 2003 23:15:06 -0400 (EDT)
Subject: [Twisted-Python] blocking question
Message-ID: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>

Hey everyone, newbie question:
Are there any Python/Twisted idioms for doing blocking? More specifically,
in a client I have a method to send a query to the server and another
method that gets called when the query is answered. Is there an easy way
to say "send the query then wait x seconds for it to return in this
function"?
It seems like blocking is taboo in twisted and if anyone has an
alternative I'd be glad to hear it. I guess I could do this
asynchronically but it would be a pain I think.
Thanks,
Konrad Rokicki




From exarkun at intarweb.us  Thu Apr 17 23:33:38 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 23:33:38 -0400
Subject: [Twisted-Python] blocking question
In-Reply-To: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
References: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
Message-ID: <20030418033338.GA2630@meson.dyndns.org>

On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
> Hey everyone, newbie question:
> Are there any Python/Twisted idioms for doing blocking? More specifically,
> in a client I have a method to send a query to the server and another
> method that gets called when the query is answered. Is there an easy way
> to say "send the query then wait x seconds for it to return in this
> function"?

  Like this, probably:

    d = queryFunction()
    d.setTimeout(x)
    d.addCallbacks(handleAnswer, queryTimedOut)
    reactor.run()

  For more, http://www.twistedmatrix.com/documents/howto/

> It seems like blocking is taboo in twisted and if anyone has an
> alternative I'd be glad to hear it.

  It's not a taboo, it's just not done ;)

  Jp

-- 
C/C++/Java/Perl/Python/Smalltalk/PHP/ASP/XML/Linux (User+Admin)
Genetic Algorithms/Genetic Programming/Neural Networks
Networking/Multithreading/Legacy Code Maintenance/OpenGL
See my complete resume at http://intarweb.us:8080/
-- 
 up 28 days, 23:02, 11 users, load average: 0.08, 0.14, 0.10
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030417/0c4c5e29/attachment.pgp 

From andrew-twisted at puzzling.org  Thu Apr 17 23:43:11 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 18 Apr 2003 13:43:11 +1000
Subject: [Twisted-Python] blocking question
In-Reply-To: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
References: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
Message-ID: <20030418034311.GC23842@frobozz.local>

On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
> Hey everyone, newbie question:
> Are there any Python/Twisted idioms for doing blocking? More specifically,
> in a client I have a method to send a query to the server and another
> method that gets called when the query is answered. Is there an easy way
> to say "send the query then wait x seconds for it to return in this
> function"?
> It seems like blocking is taboo in twisted and if anyone has an
> alternative I'd be glad to hear it. I guess I could do this
> asynchronically but it would be a pain I think.

This is what Deferreds are for.  Your client should look something like
this:

    from twisted.internet.defer import Deferred
    from twisted.protocols.basic import LineReceiver
    
    class MyClient(LineReceiver):
        """A very simple protocol that sends one line 'queries', and
        receives one line answers in response.  An answer that startswith
        'Result:' is considered a successful response; anything else is an
        error response."""
        
        def sendQuery(queryString):
            self.sendLine(queryString)
            self.queryDeferred = Deferred()
            return queryDeferred
    
        def lineReceived(line):
            if line.startswith('Result:'):
                self.queryDeferred.callback(line[7:])
            else:
                self.queryDeferred.errback(line)
            self.queryDeferred = None


This is obviously a rather stupid protocol.
    
Then, to perform a query:

    # Assume we've already got a connected MyClient instance in the variable
    # 'myclient'.
    
    # Define a callback and an errback.
    def printResult(result, query):
        print 'Result of query %r is: %r' % (query, result)

    def printFailure(failure, query):
        print 'Query %r failed:' % query
        failure.printTraceback()

    # Send the query
    query = 'query string'
    deferred = myclient.sendQuery(query)

    # Set a timeout
    deferred.setTimeout(10)

    # Attach callback/errback to handle the result
    deferred.addCallback(printResult, query)
    deferred.addErrback(printResult, query)
    
    
See http://twistedmatrix.com/documents/howto/defer for more details on using
Deferreds.  See also the "Writing a Server" and "Writing a Client" howtos.
This is pretty basic Twisted stuff, so the existing docs cover it pretty
well.

-Andrew.




From exarkun at intarweb.us  Fri Apr 18 02:21:03 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 18 Apr 2003 02:21:03 -0400
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030418062103.GA3488@meson.dyndns.org>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:
> 
> >I like Interface inheritance, and I don't think anyone has really 
> >objected to
> >it yet.
> 
> I have :-).
> 
> The problem is that currently, it doesn't do what you think.  What most 
> people want an interface inheritance to do is make
> 
> [snip - Interface inheritance is complex and disallowed]

  So, there's maybe half a dozen interfaces in twisted.internet.interfaces
that inherit from something other than component.Interface.  Shall I go
ahead and clean these up?

  Jp

-- 
Somewhere, something incredible is waiting to be known.
                -- Carl Sagan
-- 
 up 29 days, 3:02, 9 users, load average: 0.00, 0.05, 0.06
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030418/59fbb105/attachment.pgp 

From m at moshez.org  Fri Apr 18 03:32:01 2003
From: m at moshez.org (Moshe Zadka)
Date: 18 Apr 2003 07:32:01 -0000
Subject: [Twisted-Python] fwd: Accepted twisted 1.0.4-1 (i386 source all)
Message-ID: <20030418073201.28515.qmail@green.zadka.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Format: 1.7
Date: Fri, 18 Apr 2003 03:46:22 +0000
Source: twisted
Binary: python2.3-twisted-conch python2.2-twisted-conch python2.1-twisted-conch python2.1-twisted python-twisted-conch twisted-quotes python2.1-twisted-bin twisted twisted-doc-api python2.3-twisted-bin twisted-doc python2.2-twisted python2.3-twisted python2.2-twisted-bin python-twisted
Architecture: source all i386
Version: 1.0.4-1
Distribution: unstable
Urgency: low
Maintainer: Moshe Zadka <moshez at debian.org>
Changed-By: Moshe Zadka <moshez at debian.org>
Description: 
 python-twisted - Event-based framework for internet applications. (dummy package)
 python-twisted-conch - The Twisted SSH Implementation (default python version)
 python2.1-twisted - Event-based framework for internet applications. (Python 2.1)
 python2.1-twisted-bin - Event-based framework for internet applications
 python2.1-twisted-conch - The Twisted SSH Implementation (for Python 2.1)
 python2.2-twisted - Event-based framework for internet applications.
 python2.2-twisted-bin - Event-based framework for internet applications
 python2.2-twisted-conch - The Twisted SSH Implementation (for Python 2.2)
 python2.3-twisted - Event-based framework for internet applications.
 python2.3-twisted-bin - Event-based framework for internet applications
 python2.3-twisted-conch - The Twisted SSH Implementation (for Python 2.3)
 twisted    - Event-based framework for internet applications. (transitional)
 twisted-doc - The official documentation of Twisted.
 twisted-doc-api - The auto-generated API docs of Twisted
 twisted-quotes - Quotes from the Twisted development team
Changes: 
 twisted (1.0.4-1) unstable; urgency=low
 .
   * New upstream version
Files: 
 e4ecff7777718f3151b87b626567fa9c 888 net extra twisted_1.0.4-1.dsc
 d47fc0f316d56af8dd8d513aac4422c0 6023353 net extra twisted_1.0.4.orig.tar.gz
 79dc06a577cb2964ce7391a25d7adb88 214 net extra twisted_1.0.4-1.diff.gz
 5e349bdf0c7924aa6989adaba389276b 4130 net extra twisted_1.0.4-1_all.deb
 04fbfd9babd2d4d993074f9a26d30753 4262 net extra python-twisted_1.0.4-1_all.deb
 3bb92f9a4b76e77182f0070526e2eb15 4116 net extra python-twisted-conch_1.0.4-1_all.deb
 19193ebf29efa1af348690dc10de0a6b 1440174 net extra twisted-doc_1.0.4-1_all.deb
 4b8c8be42548c9923fa1e0b58e064a1c 71724 net extra twisted-quotes_1.0.4-1_all.deb
 7b5493effac4d05a86b22b522c193413 3123752 net extra twisted-doc-api_1.0.4-1_all.deb
 78e97d259d3e914d63b0850480fc0649 791150 net extra python2.1-twisted_1.0.4-1_all.deb
 2b8d9506910a4be2e7a0920fdf62618d 791662 net extra python2.2-twisted_1.0.4-1_all.deb
 4735448dec72c541b6a579a43c00df0d 791146 net extra python2.3-twisted_1.0.4-1_all.deb
 a7d81d65fec0be8181a54432047f8eb7 56048 net extra python2.1-twisted-conch_1.0.4-1_all.deb
 d52fedad6cde1170d95c9a156c1e5c8f 56208 net extra python2.2-twisted-conch_1.0.4-1_all.deb
 5d6419958693ec2252d384bce8a4e76a 56048 net extra python2.3-twisted-conch_1.0.4-1_all.deb
 6a31706821867ef2edf438371a33f0fe 27504 net extra python2.1-twisted-bin_1.0.4-1_i386.deb
 a045902b3e7af2ff7d608ef116c59937 28590 net extra python2.2-twisted-bin_1.0.4-1_i386.deb
 054f8bbdb7025d86057e6d6c5800f8d3 28580 net extra python2.3-twisted-bin_1.0.4-1_i386.deb

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE+n06Xx/ymNkbQG9YRAgCKAJ40YNAlUFd7ozHtcHi0rwDROhPG8gCcDeDb
kImjwmnMAjq1BWm40p+qw6I=
=eqFP
-----END PGP SIGNATURE-----


Accepted:
python-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python-twisted-conch_1.0.4-1_all.deb
python-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python-twisted_1.0.4-1_all.deb
python2.1-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.1-twisted-bin_1.0.4-1_i386.deb
python2.1-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.1-twisted-conch_1.0.4-1_all.deb
python2.1-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.1-twisted_1.0.4-1_all.deb
python2.2-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted-bin_1.0.4-1_i386.deb
python2.2-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.2-twisted-conch_1.0.4-1_all.deb
python2.2-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.2-twisted_1.0.4-1_all.deb
python2.3-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.3-twisted-bin_1.0.4-1_i386.deb
python2.3-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.3-twisted-conch_1.0.4-1_all.deb
python2.3-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.3-twisted_1.0.4-1_all.deb
twisted-doc-api_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-doc-api_1.0.4-1_all.deb
twisted-doc_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-doc_1.0.4-1_all.deb
twisted-quotes_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-quotes_1.0.4-1_all.deb
twisted_1.0.4-1.diff.gz
  to pool/main/t/twisted/twisted_1.0.4-1.diff.gz
twisted_1.0.4-1.dsc
  to pool/main/t/twisted/twisted_1.0.4-1.dsc
twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted_1.0.4-1_all.deb
twisted_1.0.4.orig.tar.gz
  to pool/main/t/twisted/twisted_1.0.4.orig.tar.gz

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From bob at mastersofbranding.com  Thu Apr 17 16:43:10 2003
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Thu, 17 Apr 2003 16:43:10 -0400
Subject: [Twisted-Python] c++ style comments in c extension modules
In-Reply-To: <200304172119.44319.jon@totient.demon.co.uk>
Message-ID: <33A4EFD6-7115-11D7-83D9-000A95686CD8@mastersofbranding.com>

On Thursday, Apr 17, 2003, at 16:19 America/New_York, Jon Dyte wrote:

> When building twisted 1.0.3 on solaris using the sun 'cc' compiler, 
> several of the c extension modules fail because
> of the prescence of '//' for a comment in the code.
>
> grep -n "\/\/" `find . -name "*.c" -print`
>
> ./twisted/internet/cReactor/cDelayedCall.c:126:    // self.time += 
> secondsLater
> ./twisted/internet/cReactor/cDelayedCall.c:170:    // self.time = 
> time() + secondsFromNow
> ./twisted/internet/cReactor/cReactorTCP.c:159:    char 
> buf[3*20+3+1+100]; // for good measure
> ./twisted/internet/cReactor/cReactorTime.c:93:        return NULL; // 
> TODO: set exception?
> ./twisted/internet/cReactor/cReactorTime.c:125:    //return 
> cDelayedCall_cancel(call, NULL);
>
> please can these be replaced with the /* */ to keep the compiler happy?
> I'd fix it myself but dont have CVS access.
>
> I think the gnu compiler is more forgiving, unfortunately solaris cc 
> is not.

Well, as far as I know, cReactor doesn't really work yet.. and the 
other C extensions don't exhibit this issue.  I'm sure it'll get fixed 
by the time cReactor is actually supposed to work, though :)

-bob




From lafou at wanadoo.fr  Fri Apr 18 09:41:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 15:41:06 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <b7ov83$ot8$1@main.gmane.org>

Here's my feedback Clark :

I'm testing flow currently. The results I've got with it are wonderful. And
I couldn't do anything without your documentation. This is an important
part of flow. Maybe we should provide a concreate exemple (like Twisted
Quotes) to explain it ?

A little more tests, and flow would be considered as " stable ". I really
hope to see it in Twisted 1.0.5.







From lafou at wanadoo.fr  Fri Apr 18 09:47:45 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 15:47:45 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <b7ovkj$ot8$2@main.gmane.org>

I have one question : why did you delete the addBranch method ?

I see the point of Merge (merging 2 or more flows), but what is its opposite
? I mean, if you look at this :

DS1 ----> BLOC1 ---+
                             |
DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

DS1 and DS2 point the same server, the same db, and the same table. Why use
too connexions instead of one like above ?


DS   ----> BLOC1 ---+
       |                      |
        ----> BLOC2 ---+---- BLOC3 -----> DS3

Maybe it's already on your todo list !? :)

thank you




From lafou at wanadoo.fr  Fri Apr 18 10:31:19 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 16:31:19 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com> <b7ovkj$ot8$2@main.gmane.org>
Message-ID: <b7p269$688$1@main.gmane.org>

Detailled information about mappings:

(this is the previous schema)

DS   ----> BLOC1 ---+
       |                      |
        ----> BLOC2 ---+---- BLOC3 -----> DS3

In this exemple, DS has the role to provide data. For that, I use a query.
Let's say:

"Select field1, field2, field3, field4 from MYTABLE"

all field are numerical values.

BLOC1 has to work with field1 and field2
whereas BLOC2 has to work with field3 and field4.

I can split the datasource in 2 connexions. But this a really simple
exemple. If I have 100 BLOCS after the datasources, I may have 100
connexions * Number of Users. Crash ! :)

Am I clearer ?





From cce at clarkevans.com  Fri Apr 18 11:02:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 18 Apr 2003 15:02:31 +0000
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
In-Reply-To: <b7ov83$ot8$1@main.gmane.org>
References: <20030417160957.GA31818@doublegemini.com> <b7ov83$ot8$1@main.gmane.org>
Message-ID: <20030418150231.GB34406@doublegemini.com>

I've got a user interface question to ask... there are several user
interface improvements possible in flow's operation, here are the 
options:

currently:

  producer = flow.wrap([1,2,3])
  while 1:
      yield producer
      res = producer.getResult() 
      // handle success

  # or, if you wish to handle failures...

  producer = flow.wrap([1,2,3])
  while 1:
      yield producer
      if producer.stop: break
      if producer.isFailure:
          fail = producer.result
          // handle failure
      else:
          res = producer.result
          // handle success
      
We can reduce one line of code by making wrap return
an iterator... which always returns iself.   Thus, the
creation+while loop can be collapsed into a single 
for line.  Unfortunately, this isn't all that intutive
since the item being looped over isn't the result

   for producer in flow.wrap([1,2,3]):
        # same as above, use either form

Another option, which uses for construct,

   producer = flow.wrap([1,2,3])
   yield producer
   for result in producer:
       // handle success
       yield producer

   producer = flow.wrap([1,2,3], raiseFailures = 0)
   yield producer
   for result in producer:
       if producer.isFailure:
           // handle failure
       else:
           // handle success
       yield producer

I'm not sure if this is better... but it does
use the for loop correctly.   There is a variant
which could save one line of code in the yield...

   # done once at the top of the file
   import flow
   flow = flow.Flow()   # create a 'global' flow object


   # done elsewhere...

       yield flow.wrap([1,2,3])
       for result in flow:
           // handle success
           yield flow

This example keeps the 'producer' in a sort-of global
variable so it can be reused.   If you had more than
one producer, you'd have to fall-back on the previous
mechanism.  But for items with a single flow, this
perhaps could be useful.  I don't know, I haven't thought
it through very much.

Another advantage of this second form, is that producer
could sprout a 'peek' method to look at the next result...
but a problem of this method is that each wrapped producer
won't release the current value till the next one is
acquired (or the end of the iteration).   This could be
a problem.. I don't know.

Best,

Clark



From bob at redivi.com  Fri Apr 18 12:52:30 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Apr 2003 12:52:30 -0400
Subject: [Twisted-Python] blocking question
In-Reply-To: <20030418034311.GC23842@frobozz.local>
Message-ID: <24973722-71BE-11D7-92C2-000A95686CD8@redivi.com>

On Thursday, Apr 17, 2003, at 23:43 America/New_York, Andrew Bennetts 
wrote:

> On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
>> Hey everyone, newbie question:
>> Are there any Python/Twisted idioms for doing blocking? More 
>> specifically,
>> in a client I have a method to send a query to the server and another
>> method that gets called when the query is answered. Is there an easy 
>> way
>> to say "send the query then wait x seconds for it to return in this
>> function"?
>> It seems like blocking is taboo in twisted and if anyone has an
>> alternative I'd be glad to hear it. I guess I could do this
>> asynchronically but it would be a pain I think.
>
> See http://twistedmatrix.com/documents/howto/defer for more details on 
> using
> Deferreds.  See also the "Writing a Server" and "Writing a Client" 
> howtos.
> This is pretty basic Twisted stuff, so the existing docs cover it 
> pretty
> well.

Is Glyph's Deferred talk from PyCon online yet?  That might also be 
useful.

krad - You should've just gone to PyCon man, it was right in DC at GWU 
and there were god knows how many talks about various pieces of Twisted.

The only time threads are used in Twisted is if an API that only 
provides a blocking interface must be used.. for example, 
twisted.enterprise uses a threadpool to dispatch queries to DBAPI 
compliant databases, since DBAPI is synchronous and blocking.  The only 
other way around this is to have a pool of worker processes instead of 
worker threads, but you don't really have anything to gain with this 
approach b/c it uses more memory/resources and IPC is slower than 
thread communication.

But yeah, what you want to do is definitely the kind of thing that you 
should be using Deferreds for.. Also, due to the chaining behavior, you 
can do something practical like this:

from twisted.web import microdom, client
# Start webpage fetch
d = client.getPage('http://example.com/somewebpage.html')
# If webpage fetch takes more than aFewSeconds, raise error
d.setTimeout(aFewSeconds)
# Take the web fetch result, and parse it into a DOM tree
# equivalent to saying: microdom.parseString(webFetchResult, 
beExtremelyLenient=1)
d.addCallback(microdom.parseString, beExtremelyLenient=1)
# this will get triggered if the timeout happens, or if there's a parse 
error
# however, with beExtremelyLenient, there usually won't be one.. it can 
parse some f'ed up html
d.addErrback(yourTimeoutOrParseErrorHandler)
# If everything goes OK, or if for some reason 
yourTimeoutOrParseErrorHandler returns a non-Failure result
# call yourPageHandlerThatUnderstandsDOMTrees(result)
# because microdom.parseString was called on the result, it is now a 
DOM tree instead of a string
d.addCallback(yourPageHandlerThatUnderstandsDOMTrees)

Another convenient thing about deferreds is that if the result of some 
callback is a deferred, then it will automagically be chained as 
well... for example, if yourPageHandlerThatUnderstandsDOMTrees wants to 
pass a fetched URL to the next callback handler, then all it has to do 
is return client.getPage(someURL) and the next handler will receive the 
result of that request, not the deferred instance for that request.

-bob




From m at moshez.org  Fri Apr 18 14:07:33 2003
From: m at moshez.org (Moshe Zadka)
Date: 18 Apr 2003 18:07:33 -0000
Subject: [Twisted-Python] PHP Support
Message-ID: <20030418180733.19039.qmail@green.zadka.com>

Summary:
In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it is.
Currently, the current version in Debian is 4.2, which is why is was not
a problem for most of the core Twisted developers. Others, more "edgy",
operating systems like Gentoo have already begun to feel the repercussions.
I talked to Adam Conrad (infinity on Freenode), who is the Debian PHP
maintainer, about this issu, and relayed his thoughts to glyph.
We actually do need to solve this problem.

Following are the detailed conversation transcripts, mildly edited by
me for formatting.

[re 4.3, on #debian-devel]
<_moshez> but my understanding is that now the default binary thinks it is not a CGI
<_moshez> so doesn't give CGI headers by default
<_moshez> and you need to build with magic flags to force the binary to give CGI headers.
<_moshez> now, when Twisted runs /usr/bin/php <php script>, *it really wants those headers*
<infinity> Twisted should be running /usr/lib/cgi-bin/php4
<_moshez> infinity: does /u/l/c-b/p4-cgi exist in all 4 versions?
<infinity> "All 4"?
<_moshez> infinity: yes. 4.2.xs
<infinity> Oh.  Yes.
<infinity> It exists all the way back to potato's 4.0.3
<infinity> _moshez : Various dists may package it differently, so if this an upstream thing, I'm not sure how best to deal with it.  But in Debian, it always has been, and always will be in /usr/lib/cgi-bin/
<_moshez> infinity: I'll see what my upstream thinks, and if necessary I'll change it in my scripts
<_moshez> infinity: the important thing for me is to be woody-compatible
<infinity> _moshez : In fact, with 4.3, /usr/bin/php{,4} will be even less
+CGI-compatible than it is now, so make sure to use the CGI one. :)
<_moshez> infinity: I know that :)
<_moshez> infinity: this is why I wanted this cleared before 4.3 :)
<infinity> _moshez : Well, if this is for an httpd, a suggests might be nice,
<_moshez> infinity: I may use Suggests: in twisted-web, then.

[on #twisted]
<_moshez> glyph: <infinity> Twisted should be running /usr/lib/cgi-bin/php4
<_moshez> glyph: this is only guaranteed to be the location for Debian, though
<_moshez> glyph: I can deal with it in my scripts, or we can change it upstream
+then.  (I wish Enhances worked, I'd use it all over)
* _moshez notes nobody commented yet on his ITP
<glyph> _moshez: If you need to change it, upstream should have a way to configure it.  I imagine this is sufficiently variable that it should be an argument to mktap web
<_moshez> glyph: *you're* upstream
<_moshez> glyph: whatever you decide is fine by me...
<glyph> _moshez: I'm not going to fix PHP scripting right now, I do have more valuable things to be doing with my time :)
<glyph> _moshez: but that's what I recommend the solution to be.
<_moshez> glyph: if radix decides it's not worth his time, he should decide to either "leave as is" or "change to Debian default"
<_moshez> glyph: either of those would satisfy me
<glyph> _moshez: okay
<glyph> _moshez: could you write about this to the list, actually?
<glyph> _moshez: I think that we should have the issue talked about there, good raw material for a FAQ

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From bob at redivi.com  Fri Apr 18 15:07:43 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Apr 2003 15:07:43 -0400
Subject: [Twisted-Python] PHP Support
In-Reply-To: <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <0855725B-71D1-11D7-92C2-000A95686CD8@redivi.com>

On Friday, Apr 18, 2003, at 14:07 America/New_York, Moshe Zadka wrote:

> Summary:
> In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it is.
> Currently, the current version in Debian is 4.2, which is why is was 
> not
> a problem for most of the core Twisted developers. Others, more "edgy",
> operating systems like Gentoo have already begun to feel the 
> repercussions.
> I talked to Adam Conrad (infinity on Freenode), who is the Debian PHP
> maintainer, about this issu, and relayed his thoughts to glyph.
> We actually do need to solve this problem.

I did a little bit of research into the issue yesterday, when someone 
asked on IRC.. basically what happened is that PHP now has two types of 
executables.  Unfortunately, the one that goes into /usr/bin is to be 
used to write actual PHP applications in -- under NO circumstance will 
these PHP binaries will print headers, regardless of argv.  The other 
one is to be used from cgi-bin.  The other binary, which may or may not 
exist, WILL print headers by default, but can suppress them if -q is on 
the argv.

IMHO, this is *retarded* and the PHP developers should be smacked 
upside the head for this.  Why not add a flag that ALLOWS headers to be 
printed?  At most, it scrapes some modicum of support code out of the 
binary, and 4 CPU cycles out of the option parsing.. what are they 
smoking?  Why does PHP need TWO binaries?  Couldn't they have just made 
the commandline one have a different name, symlink to the cgi binary, 
and have the cgi binary check argv[0] to see if it should assume -q or 
not?!?

-bob




From cce at clarkevans.com  Fri Apr 18 17:43:41 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 18 Apr 2003 21:43:41 +0000
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
In-Reply-To: <1050677747.25823.32.camel@biproc>
References: <20030417160957.GA31818@doublegemini.com> <b7ov83$ot8$1@main.gmane.org> <20030418150231.GB34406@doublegemini.com> <1050677747.25823.32.camel@biproc>
Message-ID: <20030418214341.GA35318@doublegemini.com>

Ok.  Thanks to extrepum's suggestions, flow can now use the
for loop.  Also, it handles exceptions in a cleaner way.  
For more details, see

   http://clarkevans.com/flow.html

flow.py, test_flow.py, and flow.html are currently 
checked into the Twisted CVS.

Best,

Clark

On Fri, Apr 18, 2003 at 04:55:47PM +0200, Philippe Lafoucri?re wrote:
| >    producer = flow.wrap([1,2,3])
| >    yield producer
| >    for result in producer:
| >        // handle success
| >        yield producer
| 
| I prefer this version. Moreover, this is more clear, and easier to
| understand !



From radix at twistedmatrix.com  Fri Apr 18 19:44:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 18 Apr 2003 19:44:06 -0400
Subject: [Twisted-Python] Pair of prescription sunglasses left at PyCon sprint
Message-ID: <20030418234406.GA2993@radii>

I found a pair of prescription sunglasses on the table where the
Twisted gang was sprinting. If anyone can claim them, send me an
address to ship them to. Sorry for not posting about this earlier, I
had forgotten about them and they just turned up.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Fri Apr 18 21:33:06 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 18 Apr 2003 18:33:06 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] better password handling, also catch
 SystemExit and don't print it
In-Reply-To: <E196Bm2-0002E2-00@pyramid.twistedmatrix.com>
References: <E196Bm2-0002E2-00@pyramid.twistedmatrix.com>
Message-ID: <1050715983.22298.348.camel@troglodyte.funhouse>

On Thu, 2003-04-17 at 08:58, z3p CVS wrote:
> Twisted/twisted/python/util.py 1.23 1.24 [...]
> better password handling, also catch SystemExit and don't print it

Hey, you broke my code!  Fortunately, you did it after the release
candidate, so I don't have to kill you.  Sorry I didn't have a unit test
in for it before, I do now (test_util.GetPasswordTest).  The behaviour I
was depending on *was* fully specified by the docstring though, which
you blatantly changed.

I can understand why for conch you would want a way of grabbing a
password from the terminal while leaving stdin undisturbed, but that's
not what this function did.  It allowed for a password to be passed in
to stdin so that scripts could set passwords without doing it on the
command line, because command line arguments show up in the process
table which is way too public on many systems.

I'm going to revert your change to python.util, please feel free to add
this functionality in another way (perhaps with a new function or
parameter) that does not break documented behaviour.

Thanks,

 - Kevin

-- 
The moon is waning gibbous, 94.3% illuminated, 17.0 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030418/38edb635/attachment.pgp 

From david at acz.org  Sat Apr 19 01:57:40 2003
From: david at acz.org (David Phillips)
Date: Sat, 19 Apr 2003 00:57:40 -0500
Subject: [Twisted-Python] PHP Support
References: <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <002a01c30638$963d97a0$0201a8c0@brinstar>

Moshe Zadka writes:
> In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it
> is.

Speaking of PHP support, are there any plans for FastCGI?  Seeing at least a
10x performance increase in PHP would be nice.

--
David Phillips <david at acz.org>
http://david.acz.org/




From cce at clarkevans.com  Sat Apr 19 02:28:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 19 Apr 2003 06:28:28 +0000
Subject: [Twisted-Python] why flow?
In-Reply-To: <20030417160957.GA31818@doublegemini.com>
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <20030419062827.GA37919@doublegemini.com>

#
# Why flow?
#
#   The flow module provides a mechanism for delivering incremental
#   results and performing long computations in a manner which 
#   cooperates with other simoutaneous requests.
#
#   In this example are two data sources, one of which simulates
#   a long-computation which is made to cooperate with other 
#   requests, and the other which blocks, perhaps simulating a 
#   database result that delivers content in small chunks as it 
#   pages through the query results.
#
#   Using these two data sources is a simple HTML web page,
#   which weaves the data together onto a single output
#   stream, via request.write  
#
# Why not Deferreds?
#
#   One could use deferreds, however, in the first, cooperative
#   example, one would really have to use a thread or break the
#   computation down into very small deferred chunks (where one
#   really isn't necessary with the flow module).   And, in the
#   second, either you'd need a deferred for each row (or chunk
#   of rows), or the results could not be incrementally delivered.  
#   And, further, the HTML page generation would have to be broken
#   up into several 'stages' which were executed after each
#   other.   Furthermore, if more than one 'database' query
#   was to be used, the deferreds from them would have to
#   be synconized; or, you could not execute the queries
#   in parallel (one on a different database node, for 
#   example).  In any case, I don't think it'd be as 
#   pretty as this...  or am I missing something?
#

from __future__ import generators
from twisted.internet import reactor
from twisted.web import server, resource
import flow

def cooperative():
    """ simulate a cooperative resource, that doesn't block """
    from random import random
    while 1:
        val = random()
        yield flow.Cooperate(val/5)
        yield str(val)[-5:]

def blocking():
    """ simulate a blocking database resource """
    from time import sleep
    sleep(1)
    yield (3,'AL','Alabama')
    yield (4,'AK','Alaska')
    yield (6,'AZ','Arizona')
    yield (7,'AR','Arkansas')
    yield (8,'CA','California')
    yield (9,'CO','Colorado')
    yield (1,'CT','Connecticut')
    sleep(1)
    yield (1,'DE','Delaware')
    yield (2,'DC','District of Columbia')
    yield (4,'FL','Florida')
    yield (5,'GA','Georgia')
    yield (7,'HI','Hawaii')
    yield (8,'ID','Idaho')
    yield (9,'IL','Illinois')
    yield (3,'IN','Indiana')
    yield (1,'IA','Iowa')
    yield (2,'KS','Kansas')
    yield (3,'KY','Kentucky')
    sleep(1)
    yield (4,'LA','Louisiana')
    yield (5,'ME','Maine')
    yield (7,'MD','Maryland')
    yield (8,'MA','Massachusetts')
    yield (9,'MI','Michigan')
    yield (0,'MN','Minnesota')
    yield (1,'MS','Mississippi')
    yield (2,'MO','Missouri')
    yield (3,'MT','Montana')
    yield (4,'NE','Nebraska')
    yield (5,'NV','Nevada')
    yield (6,'NH','New Hampshire')
    sleep(1)
    yield (7,'NJ','New Jersey')
    yield (8,'NM','New Mexico')
    yield (9,'NY','New York')
    yield (0,'NC','North Carolina')
    yield (1,'ND','North Dakota')
    yield (3,'OH','Ohio')
    yield (4,'OK','Oklahoma')
    yield (5,'OR','Oregon')
    sleep(1)
    yield (7,'PA','Pennsylvania')
    yield (9,'RI','Rhode Island')
    yield (0,'SC','South Carolina')
    yield (1,'SD','South Dakota')
    yield (2,'TN','Tennessee')
    yield (3,'TX','Texas')
    yield (4,'UT','Utah')
    yield (5,'VT','Vermont')
    yield (7,'VA','Virginia')
    yield (8,'WA','Washington')
    yield (9,'WV','West Virginia')
    yield (3,'WI','Wisconsin')
    yield (8,'WY','Wyoming')

def render(req):
    req.write("""
       <html>
         <head>
           <title>Icremental Webpage</title></head>
         <body>
           <h1>Incremental Webpage</h1>
           <table>
             <tr>
                <td>State</td>
                <td>Zipcodes</td>
             <tr>
    """)
    zips   = flow.wrap(cooperative())
    states = flow.wrap(flow.ThreadedIterator(blocking()))
    yield states
    for cnt, abbr, state in states:
        req.write("""
            <tr><td>%s</td><td>%s</td>
                <td>
        """ % (abbr, state))
        for x in range(cnt):
            yield zips; 
            if x: req.write(", ")
            req.write(zips.result)
        req.write("""
            </td></tr>
        """)
        yield states
    req.finish()

class FlowResource(resource.Resource):
    def isLeaf(self): return true
    def render(self, req):
        flow.Deferred(render(req))
        return server.NOT_DONE_YET

root = FlowResource()
site = server.Site(root)
reactor.listenTCP(8081,site)
reactor.run()



From m at moshez.org  Sat Apr 19 06:13:05 2003
From: m at moshez.org (Moshe Zadka)
Date: 19 Apr 2003 10:13:05 -0000
Subject: [Twisted-Python] PHP Support
In-Reply-To: <002a01c30638$963d97a0$0201a8c0@brinstar>
References: <002a01c30638$963d97a0$0201a8c0@brinstar>, <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <20030419101305.22751.qmail@green.zadka.com>

On Sat, 19 Apr 2003, "David Phillips" <david at acz.org> wrote:

> Speaking of PHP support, are there any plans for FastCGI?  Seeing at least a
> 10x performance increase in PHP would be nice.

It shouldn't be too hard to write if you're interested in it.
Read the twisted/web/twcgi.py code to see how all of this is done
now. If you do write, we may integrate it into Twisted -- but
note that Twisted works just fine with 3rd party Resources and modules.
Most of the Twisted do not use CGI enough that this become a problem.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Sat Apr 19 08:04:12 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Apr 2003 07:04:12 -0500
Subject: [Twisted-Python] Pair of prescription sunglasses left at PyCon sprint
In-Reply-To: <20030418234406.GA2993@radii>
Message-ID: <08855125-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

AAARGHH!  I was looking EVERYWHERE for those!  It's a good thing you 
posted this to the list today, or I'd be buying a new pair this 
evening.  :)

On Friday, April 18, 2003, at 06:44 PM, Christopher Armstrong wrote:

> I found a pair of prescription sunglasses on the table where the
> Twisted gang was sprinting. If anyone can claim them, send me an
> address to ship them to. Sorry for not posting about this earlier, I
> had forgotten about them and they just turned up.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+oTtBvVGR4uSOE2wRAperAJ9os6hw/svi1/N+B3by9cTbrOSFagCfWle9
X4DIAcvbo493BKE6sV5bQpw=
=HYvT
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Sat Apr 19 08:09:48 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Apr 2003 07:09:48 -0500
Subject: [Twisted-Python] PHP Support
In-Reply-To: <0855725B-71D1-11D7-92C2-000A95686CD8@redivi.com>
Message-ID: <D0CDC76F-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, April 18, 2003, at 02:07 PM, Bob Ippolito wrote:

> IMHO, this is *retarded* and the PHP developers should be smacked 
> upside the head for this.

If we are going to sit around talking about everything for which this 
is true, we could be talking about PHP for a long, long time :).  
Thanks to those of you who did the research to get this working again.  
It's unnerving that the behavior of these versions is different, 
however, if we're going to have to start inserting options about which 
binary to use, FastCGI support, et. al. for PHP, perhaps we should have 
a --with-php=... option for mktap web?  Debian can provide a sensible, 
working default, but I have a feeling that other installations 
(/usr/local/bin seems popular for PHP users, especially if they *were* 
using apache and are *now* using Twisted with their PHP setup) will 
have problems.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+oTyQvVGR4uSOE2wRAi4/AJ4s0tUjN0b4hKeTzB+IfjH7BZngfwCgpErP
S406mBMjl4Ppws+jeU+24E0=
=e0e1
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Thu Apr 17 10:10:09 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 17 Apr 2003 17:10:09 +0300
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030417141009.GA11507@lapdog>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
> Currently this does _not_ happen, because
> 
> Does this "DWIM" in Zope?  I have been hesitant to make 

	Well, I sure was unsure about the cause until I read your
	eloquent description of the real reasons behind it.

	*cough*

> also register an adapter for Baz for IFoo?  Why or why not?  What if a 
> different adapter was already registered?  I could see that taking 
> interface inheritance into account here could be sometimes convenient, 
> but it could also be sometimes wrong.  I really have no idea what the 
> right answer is, and so leaving it "inconvenient but simple" was easier 
> for the time being.

	Then there should probably be a check that no interface
	inherits another interface, as that is meaningless but badly
	misleading in the current system.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Apr 19 09:35:11 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 19 Apr 2003 16:35:11 +0300
Subject: [Twisted-Python] Problem with twisted.web log files
In-Reply-To: <20030417143134.GC2096@polynode.com>
References: <20030417143134.GC2096@polynode.com>
Message-ID: <20030419133511.GA2656@lapdog>

On Thu, Apr 17, 2003 at 10:31:34AM -0400, Alex Levy wrote:
> I'm seeing some strange behavior from twisted.web.
> 
> After running "mktap web --logfile=web.log ; twistd -nf web.tap", I get the
                                     ^^^^^^^
> following traceback:
...
>   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 408, in _openLogFile
>     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
                                                     ^^^^^^^^^^^^^^^^^^^^^ == ""

>   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
>     BaseLogFile.__init__(self, name, directory, defaultMode)
>   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
>     assert os.path.isdir(self.directory)
> AssertionError
> 
> This does _not_ happen, however, if I run "mktap web --logfile=./web.log"

	Which makes dirname be ".".

> This problem has only surfaced recently, although I can't say precisely how
> long ago.  I am using Twisted out of CVS.

1.64         (itamarst 28-Apr-02):     def _openLogFile(self, path):
1.67         (carmstro 27-May-02):         from twisted.python import logfile
1.64         (itamarst 28-Apr-02):         return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
1.66         (acapnoti 26-May-02): 

	I believe it's been like that since the support for separate
	web access log was added. A quick and perlish fix would be in
	Twisted/twisted/web/server.py, line 408, in _openLogFile, to
	change:

-	return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
+	return logfile.LogFile(os.path.basename(path), os.path.dirname(path) or '.')

-- 
:(){ :|:&};:



From david at acz.org  Sat Apr 19 15:28:39 2003
From: david at acz.org (David Phillips)
Date: Sat, 19 Apr 2003 14:28:39 -0500
Subject: [Twisted-Python] PHP Support
References: <D0CDC76F-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>
Message-ID: <001001c306a9$e11e39c0$0201a8c0@brinstar>

Glyph Lefkowitz writes:
> If we are going to sit around talking about everything for which this
> is true, we could be talking about PHP for a long, long time :).

That's an understatement.

> but I have a feeling that other
> installations (/usr/local/bin seems popular for PHP users, especially
> if they *were* using apache and are *now* using Twisted with their
> PHP setup) will have problems.

Wouldn't most Apache users use mod_php4?  Personally, my PHP lives in
/zeus/php/php.fcgi :)  I keep the CLI version as /usr/local/bin/php.

-- 
David Phillips <david at acz.org>
http://david.acz.org/




From cce at clarkevans.com  Sat Apr 19 15:55:54 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 19 Apr 2003 19:55:54 +0000
Subject: [Twisted-Python] feedback requested -- flow.py goes beta
In-Reply-To: <20030417160957.GA31818@doublegemini.com>
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <20030419195554.GA39452@doublegemini.com>

When to use flow?

  For simple processes which can be broken down into
  a small set of chunks, then Deferred is the best way
  to go.  To make it worth while to use flow, you need
  one of the following:

    a) incremental results: for example, a big or slow
       executing database query that needs to process
       results as they become available.
 
    b) merging or splitting: for example, having two
       database queries running in parallel, the
       results being merged together

    c) complicated chunking: if your deferred chunks
       start to get numerous or have non-trivial logic
       in them, then flow would be useful.

    d) intensive computations: if your process has
       computations that need to be broken into
       chunks, then flow may be better than deferreds.

Recent changes:

   I renamed flow.ThreadedIterator to flow.Threaded,
   as it is now a wrapper (you don't inherit).

Clark


On Thu, Apr 17, 2003 at 04:09:57PM +0000, Clark C. Evans wrote:
| Abstract: >
| 
|    The flow module implements cooperative multi-tasking using
|    iterators (easily created with generators) and Twisted's 
|    event reactor.   The flow module also includes support for
|    incrementally returning query results from Twisted's 
|    database connection pool.  While this module does _not_ 
|    require generators (a python v2.2 feature), applications 
|    of the module are best demonstrated with generators.
| 
| Status: >
| 
|    The flow module (flow.py) is currently checked into CVS in
|    the sandbox directory.  It is unlikely that any large 
|    changes to the module will happen.   The documentation 
|    is partial, but currently in development.
| 
|    General feedback from the Twisted Community is requested.
|   
| Deployment: >
| 
|    If flow was accepted into twisted, I was thinking 
|    of spreading its functionality over several files.
|    
|    1.  Adding a base implementation module, twisted.python.flow,
|        which only depends upon other items in twisted.python
| 
|    2.  Adding a (fairly small) Flow class to 
|        twisted.internet.defer which takes the base
|        implementation and uses the reactor and inherits
|        from Deferrred.
| 
|    3.  Adding a ThreadedIterator class to twisted.internet.threads
|        which depends upon twisted.internet.reactor and 
|        twisted.python.*
|   
|    4.  Adding a (fairly small) QueryIterator class to 
|        twisted.enterprise.adbapi which depends primarly 
|        on ThreadedIterator, but provides for query 
|        functionality from a ConnectionPool
| 
| Best,
| 
| Clark
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From missive at hotmail.com  Sat Apr 19 17:03:12 2003
From: missive at hotmail.com (Lee Harr)
Date: Sat, 19 Apr 2003 21:03:12 +0000
Subject: [Twisted-Python] links to .xhtml files in doc/index.html
Message-ID: <BAY2-F149zxgLNnQRoV0000100d@hotmail.com>

Hi;

Is there a reason why the links to the sections in doc/index.html point
to .xhtml files instead of the .html files that are actually there?

Here is a patch that I applied to my local copy of the docs. It makes
more sense to me this way....


16:58 >cvs diff -u index.html
Index: index.html
===================================================================
RCS file: /cvs/Twisted/doc/index.html,v
retrieving revision 1.4
diff -u -r1.4 index.html
--- index.html  11 Feb 2003 00:32:35 -0000      1.4
+++ index.html  19 Apr 2003 20:56:49 -0000
@@ -2,12 +2,12 @@
<h1>Start</h1>

<ul>
-<li><a href="howto/index.xhtml">HOWTOs</a></li>
+<li><a href="howto/index.html">HOWTOs</a></li>
<li><a href="api/index.html">API reference</a></li>
<li><a href="examples/index.html">Examples</a></li>
<li><a href="historic/index.html">Documents of historical 
importance</a></li>
-<li><a href="man/index.xhtml">Manual pages</a></li>
-<li><a href="specifications/index.xhtml">Specifications</a></li>
-<li><a href="vision/index.xhtml">Philosophical papers</a></li>
+<li><a href="man/index.html">Manual pages</a></li>
+<li><a href="specifications/index.html">Specifications</a></li>
+<li><a href="vision/index.html">Philosophical papers</a></li>
</ul>
</body></html>


_________________________________________________________________
Help STOP SPAM with the new MSN 8 and get 2 months FREE*  
http://join.msn.com/?page=features/junkmail




From santacruz at southern.edu  Sat Apr 19 22:46:59 2003
From: santacruz at southern.edu (dansan)
Date: Sat, 19 Apr 2003 22:46:59 -0400
Subject: [Twisted-Python] Thinking backwards, design ideas
Message-ID: <20030420024659.GA8813@matilda.southern.edu>

Fellow twisters,

I have finally read all that seemed necesary to get a good feel of
twisted! and I have finally been able to implement a few 'play'
programs.

I have a project I'd like to write, and I have always tought about it in
the normal "use a library" fashion (in oppisition to the "use a
framework").  My idea is to create a program that is a tournament
manager, it works kind of like this:

	* Accepts connections (there are 2 types, admin, regular).
		* Listen to the admin connection
			- Start tournament at admin's command 
			  This would create tournament brackets and actually give the
			  connected players the "play" command.
			- View current games
			- A bunch of other things :)

Then when the admin starts the games, the program would spun a new "game
thread" that would have the game logic, and that would keep track of the
game (check legality of moves), tell player A to go, tell B what A play,
tell B to go, decide on the winner, etc.

But now I find my self trying to think twisted. I am no longer in
control of the main program loop it seems.  I see how I can keep some of
my static info (having my Protocols register them in the Application).
What I'm having a hard time with is envisioning how to get my games
started, and how to keep track of them.  
* Where does my game-logic go?
* Do my protocols check for valid moves... if so, who keeps track of the
  board? The board is a share resource between 2 players of a short
  amount of time, and there are potentially many games going on at the
  same time.
* How can I implement timeouts?  So that players have to play within 
  given time-limits?  (like, X seconds per-move kinds of deals?)  I
  thougt about starting a timer in my Protocol when a "MAKE A MOVE"
  command is sent to the player, and then checking that time when the
  move is received... but this seems to involve threads?

Anyway, I'd really would appreciate your thoughts on this.  This
'higher-design' stuff is keeping me from getting dirty :)

Thanks.

dansan



From andrew-twisted at puzzling.org  Sat Apr 19 23:16:09 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 20 Apr 2003 13:16:09 +1000
Subject: [Twisted-Python] Thinking backwards, design ideas
In-Reply-To: <20030420024659.GA8813@matilda.southern.edu>
References: <20030420024659.GA8813@matilda.southern.edu>
Message-ID: <20030420031609.GD1316@frobozz.local>

On Sat, Apr 19, 2003 at 10:46:59PM -0400, dansan wrote:
> Fellow twisters,
> 
> I have finally read all that seemed necesary to get a good feel of
> twisted! and I have finally been able to implement a few 'play'
> programs.
> 
> I have a project I'd like to write, and I have always tought about it in
> the normal "use a library" fashion (in oppisition to the "use a
> framework").  My idea is to create a program that is a tournament
> manager, it works kind of like this:
> 
> 	* Accepts connections (there are 2 types, admin, regular).

I'd say there's two types of *users*.  There's no need to listen on
different ports, it's just a matter of who they authenticate as.

> 		* Listen to the admin connection
> 			- Start tournament at admin's command 
> 			  This would create tournament brackets and actually give the
> 			  connected players the "play" command.
> 			- View current games
> 			- A bunch of other things :)
> 
> Then when the admin starts the games, the program would spun a new "game
> thread" that would have the game logic, and that would keep track of the
> game (check legality of moves), tell player A to go, tell B what A play,
> tell B to go, decide on the winner, etc.
> 
> But now I find my self trying to think twisted. I am no longer in
> control of the main program loop it seems.  I see how I can keep some of
> my static info (having my Protocols register them in the Application).
> What I'm having a hard time with is envisioning how to get my games
> started, and how to keep track of them.  
> * Where does my game-logic go?

I think you want a TournamentService, see
http://twistedmatrix.com/documents/howto/pb-cred for details of using
Services in the context of PB, but hopefully you can get something out of it
even if you don't use PB.  See doc/examples/pbecho.py for an example of a
simple service.  Basically, it's:

    from twisted.internet.app import Application
    from twisted.cred.service import Service
    from twisted.cred.authorizer import DefaultAuthorizer

    class TournamentService(Service):
        """Game logic goes here"""

    myApp = Application('Tournament')
    auth = DefaultAuthorizer(myApp)
    svc = TournamentService('Tournament', myApp, auth)
    myApp.listenTCP(1234, YourProtocolFactory(svc))
    myApp.run()

> * Do my protocols check for valid moves... if so, who keeps track of the
>   board? The board is a share resource between 2 players of a short
>   amount of time, and there are potentially many games going on at the
>   same time.

I'd have a TournamentService keeping tracking of all the games running at
any time in a dict mapping players to a board.  So when a player sends a
move, the service looks up the player's board, and tells the board what that
player X wants to play move Y, and the board then accepts that or raises an
exception.  It's the board that knows what moves can be played at any given
time; the protocol's job is merely to pass messages to and from the player
on the network.

> * How can I implement timeouts?  So that players have to play within 
>   given time-limits?  (like, X seconds per-move kinds of deals?)  I
>   thougt about starting a timer in my Protocol when a "MAKE A MOVE"
>   command is sent to the player, and then checking that time when the
>   move is received... but this seems to involve threads?

There's plenty of stuff built into Twisted for doing timeouts already, that
doesn't involve threads or anything icky.

You can use reactor.callLater, as described here:
   http://twistedmatrix.com/documents/howto/time

Depending on what you're doing, you may also find the setTimeout method of
Deferreds to be useful.

> Anyway, I'd really would appreciate your thoughts on this.  This
> 'higher-design' stuff is keeping me from getting dirty :)

I hope I've made it clearer for you.  Let us know if you're still unsure
about something.

[I think someone wrote a tic-tac-toe example, which might help a little
here... does anyone know where that is?]

-Andrew.




From lafou at wanadoo.fr  Sun Apr 20 06:28:24 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 20 Apr 2003 12:28:24 +0200
Subject: [Twisted-Python] [flow.py] : iterator problems
Message-ID: <1050834504.26760.58.camel@biproc>

Clark I have a problem here.
queryIterator doesn't work anymore :(

when I yield a producer, I got in one shot the complete set of results !


--------------------------------------------------------------------------
Processed result :  ((1L, 1L), (12L, 90L), (1300L, 560L), (2000L, 10L),
(30L, 900L), (5000L, 500L))
--------------------------------------------------------------------------

Instead of 

--------------------------------------------------------------------------
Processed result : (1L, 1L)
Processed result : (12L, 90L)
Processed result : (1300L, 560L)
Processed result : (2000L, 10L)
Processed result : (30L, 900L)
Processed result : (5000L, 500L)
--------------------------------------------------------------------------



I saw you changed many things since few days, and I'm not sure I will be
able to correct this bug alone. By the way, I'd like to work on my
project today, could you help me please ?

thank you.
Philippe 





From cce at clarkevans.com  Sun Apr 20 13:14:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 20 Apr 2003 17:14:35 +0000
Subject: [Twisted-Python] Re: [flow.py] : iterator problems
In-Reply-To: <1050834504.26760.58.camel@biproc>
References: <1050834504.26760.58.camel@biproc>
Message-ID: <20030420171435.GA42062@doublegemini.com>

On Sun, Apr 20, 2003 at 12:28:24PM +0200, Philippe Lafoucri?re wrote:
|
| when I yield a producer, I got in one shot the complete set of results !
|

Sorry about that.  There are two ways to make Threaded the threaded
wrapper operate.  In one case, the default, the wrapper yields for
every time that the wrapped iterator has returned.  In the other,
it assumes that the wrapped iterator returns a lists, and then 
yields for each item in those lists.

When I split QueryIterator and Threaded, there wasn't a way to 
let Threaded know that QueryIterator wants the second behavior,
so to do that you need to use the 'extend' option:

   flow.Threaded(flow.QueryIterator(...), extend = 1)

Anyway, I assume you are using the defaults, fetchall=0 for the 
QueryIterator, and extend = 0, for the Threaded wrapper.  In this
case, you could get N yields with M rows in them.  This is probably
the most efficient mechanism, as you spend less time in the flow
module, yet the results are incremental.   

| --------------------------------------------------------------------------
| Processed result :  ((1L, 1L), (12L, 90L), (1300L, 560L), (2000L, 10L),
| (30L, 900L), (5000L, 500L))
| --------------------------------------------------------------------------

Right, and if your result set had more rows you'd get...


| --------------------------------------------------------------------------
| Processed result :  ((1L, 1L), (12L, 90L), ... )
| Processed result :  ((1300L, 560L), (2000L, 10L), ... )
| Processed result :  ((30L, 900L), (5000L, 500L), ... )
| --------------------------------------------------------------------------

Although, to make it easier for programming, the 
extend = 1 option would make it return results...

| --------------------------------------------------------------------------
| Processed result : (1L, 1L)
| Processed result : (12L, 90L)
| Processed result : (1300L, 560L)
| Processed result : (2000L, 10L)
| Processed result : (30L, 900L)
| Processed result : (5000L, 500L)
| --------------------------------------------------------------------------

| 
| I saw you changed many things since few days, and I'm not sure I will be
| able to correct this bug alone. By the way, I'd like to work on my
| project today, could you help me please ?

Sure.  I'll be around all day on IRC.

Clark



From p.mayers at imperial.ac.uk  Mon Apr 21 10:26:57 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 15:26:57 +0100
Subject: [Twisted-Python] UDP servers and socket queues
Message-ID: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>

All,

I'm porting an app over which had it's own async job thingy, similar to
Twisted's most basics - I now want it to run as a long-running server
with multiprotocol support, and Twisted is the logical choice.

The core of the app is a UDP-based RPC client (bespoke stuff) which does
a periodic flurry of activity (plus on-demand stuff - that's the plan
for later anyway).

The problem is that the flurry of activity fills the UDP socket queue,
and I think some simple changes to SelectReactor (which I've done
locally via a nasty/messy subclass) which could be useful to others will
fix it:

from twisted.internet import reactor
from twisted.internet import client

class RPCProtocol(protocol.DatagramProtocol):
    def __init__(self);
        # setup some icky stuff for retries etc here

    def datagramReceived(self, data, addr):
        pdu = self._decode(data)
        dfurred = self.outstanding[pdu.uuid]
        del self.outstanding[pdu.uuid]
        dfurred.callback(pdu)

    def sendPDU(pdu, addr):
        self.outstanding[pdu.uuid] = defer.Deferred()
        self.writeMessage(pdu.encode(), addr)
        return self.outstanding[pdu.uuid]

class endpoint:
    def __init__(self, protcol, host):
        self.protocol = protocol
        self.addr = resolve(host)
        self.actions = load_from_config(host)

    def go(self):
        pdu = self.create_pdu(self.actions.pop(0))
        self.protocol.sendPDU(pdu, self.addr).addCallback(self.handle)

    def handle(self, pdu):
        func = self.actions.pop(0)
        func(pdu)
        pdu = self.create_pdu(self.actions.pop(0))
        self.protocol.sendPDU(pdu, self.addr).addCallback(self.handle)
        
Anyway, you get the idea. The code fires up, and you get:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    ep.go()

...the problem is that the responses come back too fast - they overflow
the UDP socket buffer after a couple of hundred packets. So, try this:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    reactor.callLater(0, ep.go)

...except that the default SelectReactor will always execute any
pendingTimedCalls before calling doIteration (where the select() call
actually happens).

Ok, so inherit from SelectReactor and override mainLoop - except that
doIteration will only execute one doRead for each ready socket (there's
one socket - there are potentially thousands of hosts and I don't want
to overload either select()'s performance characteristics with the
number of fd's or the fd limit).

My old code did this:

while running:
    while 1:
        rs, ws, xs = select.select([self.fd,], [], [], self.timeout())
        if self.fd in rs:
            self.doRead()
        else:
            break
    for p in self.pending:
        p()

...i.e. empty the socket queue before doing *any* callback activity. I
can do this with a suitable reactor - it's just messy. Is it worthwhile
a flag in the core SelectReactor to change the preferences for
network/callback behaviour and the rate of network activity?

Just a thought.

Twisted is excellent work - keep it up!

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From bob at redivi.com  Mon Apr 21 10:54:40 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 21 Apr 2003 10:54:40 -0400
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
Message-ID: <2DEDE0E0-7409-11D7-92C2-000A95686CD8@redivi.com>

On Monday, Apr 21, 2003, at 10:26 America/New_York, Phil Mayers wrote:

> ...the problem is that the responses come back too fast - they overflow
> the UDP socket buffer after a couple of hundred packets. So, try this:
>
> proto = RPCProtocol()
> for host in hosts:
>     ep = endpoint(proto, host)
>     reactor.callLater(0, ep.go)
>
> ...except that the default SelectReactor will always execute any
> pendingTimedCalls before calling doIteration (where the select() call
> actually happens).

Have you tried doing reactor.callLater(smallFloatButNotZero, ep.go)?  
If you use a small number it typically won't happen in that iteration.

-bob




From itamar at itamarst.org  Mon Apr 21 11:16:06 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 21 Apr 2003 11:16:06 -0400
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
Message-ID: <20030421111606.4b39e311.itamar@itamarst.org>

On Mon, 21 Apr 2003 15:26:57 +0100
Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> The problem is that the flurry of activity fills the UDP socket queue,
> and I think some simple changes to SelectReactor (which I've done
> locally via a nasty/messy subclass) which could be useful to others
> will fix it:

I'll take a look at trying to fix this sometime this week. The solution
will be to do up to X reads of UDP packets in each iteration of the
event loop, instead of reading only one packet in each iteration. 

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From p.mayers at imperial.ac.uk  Mon Apr 21 14:29:56 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 19:29:56 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421111606.4b39e311.itamar@itamarst.org>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org>
Message-ID: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>

On Mon, Apr 21, 2003 at 11:16:06AM -0400, Itamar Shtull-Trauring wrote:
> 
> I'll take a look at trying to fix this sometime this week. The solution
> will be to do up to X reads of UDP packets in each iteration of the
> event loop, instead of reading only one packet in each iteration. 
> 

I figured something like that. Does anyone know if the various socket
readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
given you sufficient information to know when you can do multiple reads?

The other option I guess would be to for connection-less sockets to do:

while 1:
    try:
        data, addr = self.socket.recvfrom(65535)
        self.protocol.datagramReceived(data, addr)
    except socket.error, se:
        if se.args[0]==errno.EWOULDBLOCK:
            break
    except:
        log.deferr()

...in doRead (line 91, twisted/internet/udp.py)?

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From p.mayers at imperial.ac.uk  Mon Apr 21 14:48:09 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 19:48:09 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
Message-ID: <20030421184809.GC10336@wildfire0.net.ic.ac.uk>

On Mon, Apr 21, 2003 at 07:29:56PM +0100, Phil Mayers wrote:
> 
> I figured something like that. Does anyone know if the various socket
> readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
> given you sufficient information to know when you can do multiple reads?
> 
> The other option I guess would be to for connection-less sockets to do:
> 
> while 1:
>     try:
>         data, addr = self.socket.recvfrom(65535)
>         self.protocol.datagramReceived(data, addr)
>     except socket.error, se:
>         if se.args[0]==errno.EWOULDBLOCK:
>             break
>     except:
>         log.deferr()
> 
> ...in doRead (line 91, twisted/internet/udp.py)?
> 
> -- 
> 

On second thoughts, (having just tested it) that alone won't be
sufficient, although it does make things a lot cleaner. The problem also
is:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    reactor.callLater(0, ep.go)

...the in mainLoop of SelectReactor (or rather the subclass which reads
from the network *first*):


while self.running:
    try:
        while self.running:
            # Still need to reverse the order of the read
            # versus the call of functions
            t2 = self.timeout()
            t = self.running and t2
            self.doIteration(t)
            # Advance simulation time in delayed event
            # processors.
            self.runUntilCurrent()
    except:
        log.msg("Unexpected error in main loop.")
        log.deferr()
    else:
        log.msg('Main loop terminated.')

...the runUntilCurrent will execute *all* the callLater's that are
queued, which takes a couple of seconds (say) - however, halfway though
the runUntilCurrent, a sufficient number of replies has been returned to
overflow the socket input buffer - so you still need to somehow limit
the amount of work done in runUntilCurrent.

Now, I could put "reactor.callLater(when, ep.go)" then "when += 0.1" but
as the process runs more callLaters will happen, will pile up against
each other, and eventually the same problem will likely occur.

Interesting behaviour though!

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From pinard at iro.umontreal.ca  Mon Apr 21 17:55:56 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 17:55:56 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `im' bug report
Message-ID: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>

Hi.  I intend to become a Twisted novice.  At the beginning of the road, I
got, unpacked and installed Twisted 1.0.4.  Then, I called `im' in a shell,
and in the window that appeared, pushed on button `Join Group', to get:

---------------------------------------------------------------------->
<GtkObject of type GladeXML at 84a2398>
initialized!
Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/libglade.py", line 28, in __call__
    ret = apply(self.func, a)
  File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
    self.currentAccount.joinGroup(name)
AttributeError: 'NoneType' object has no attribute 'joinGroup'
Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/libglade.py", line 28, in __call__
    ret = apply(self.func, a)
  File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
    self.currentAccount.joinGroup(name)
AttributeError: 'NoneType' object has no attribute 'joinGroup'
----------------------------------------------------------------------<

It looks like a bug to my naive eyes.  Would it be? :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Mon Apr 21 18:24:42 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Apr 2003 18:24:42 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `im' bug report
In-Reply-To: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Mon, Apr 21, 2003 at 17:55:56 -0400
References: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030421222442.GA12222@toshi.anaprd01.md.comcast.net>

On 2003.04.21 17:55, Fran?ois Pinard wrote:
> Hi.  I intend to become a Twisted novice.  At the beginning of the road, I
> got, unpacked and installed Twisted 1.0.4.  Then, I called `im' in a shell,
> and in the window that appeared, pushed on button `Join Group', to get:
> 
> ---------------------------------------------------------------------->

...

>   File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
>     self.currentAccount.joinGroup(name)
> AttributeError: 'NoneType' object has no attribute 'joinGroup'
> ----------------------------------------------------------------------<

> It looks like a bug to my naive eyes.  Would it be? :-)

Yeah, you weren't logged on, so there was no currentAccount (i.e., it was set 
to None). If you want, you can add a check to say "if not self.currentAccount"
and pop up a nice dialog with an error message :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Mon Apr 21 19:47:43 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 19:47:43 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
Message-ID: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>

Hello.

In the `doc/' hierarchy of the Twisted 1.0.4 distribution, some `.html'
files have links to `.xhtml' files, where apparently `.html' files by the
same base exist.  Should `.html' rather point to `.html' files whenever
possible?  Here are possible points to visit:

* `doc/index.html' has references to `howto/index.xhtml', 'man/index.xhtml',
  `specifications/index.xhtml' and `vision/index.xhtml'.

* `doc/howto/woven.html' refers to `listings/HelloWorld/HelloWorld.html'
  correctly, yet the text says `Listing 2: HelloWorld.xhtml...' which does
  not exist; it also refers to `listings/TwistedQuotes/WovenQuotes.xhtml'
  and says so in the text, yet sadly, there is no corresponding `.html' file.

* `doc/howto/domtemplate.html' refers to `TwistedQuotes/WebQuotes.xhtml',
  while the text which announces `Listing 2: WebQuotes.html...', and sadly,
  the reference is correct while the text is not.

* `doc/howto/lore.html', `doc/api/private/twisted.lore.default.html' and
  `doc/api/public/twisted.lore.default.html' also seem to indicate that
  `lore' will generate `.xhtml'; I am not familiar with `lore', and cannot
  say if it should or can generate `.html' instead.  If it can, it most
  probably should for generated documents to pointed to by `.html' files.

P.S. - I'm using `links' by preference (fast startup and reasonable image
support), which `links' does not seem to support `.xhtml' files.  Given that
`.html' is pretty widespread and reasonably understood by all Web browsers,
while `.xhtml' is more recent or specialised, would not it be a good idea to
aim `.html' as a uniform standard base for interactive documentation, (given
it ought to go through Web browsers), and offer `.xhtml' merely as an extra?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 20:06:45 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:06:45 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Problem with `domtemplate.html'
Message-ID: <oqk7dnjsyy.fsf@titan.progiciels-bpi.ca>

Hi, people.

In Twisted 1.0.4, file `doc/howto/domtemplate.html' has this line:

---------------------------------------------------------------------->
<a href="http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy">See it in action!</a>
----------------------------------------------------------------------<

I was expecting a demonstration of some sort.  `links' gave me a traceback,
which is likely not the correct output.  For this message, I wanted a copy
of that output (`links' does not seem to support mouse cuts), so I tried:

---------------------------------------------------------------------->
wget http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy
----------------------------------------------------------------------<

which yielded:

---------------------------------------------------------------------->
--19:55:44--  http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy
           => `webquote.rpy'
R?solution de twistedmatrix.com... compl?t?.
Connexion vers twistedmatrix.com[64.123.27.105]:80...connect?.
requ?te HTTP transmise, en attente de la r?ponse...500 Internal Server Error
19:55:46 ERREUR 500: Internal Server Error.
----------------------------------------------------------------------<

and no output.  Suffering the slooow start of Netscape, I got a cut-able
output, which appears below.  Netscape did not show the `500' Error...

---------------------------------------------------------------------->
web.Server Traceback (most recent call last): 

exceptions.ImportError: No module named TwistedQuotes

   /usr/lib/python2.2/site-packages/twisted/web/server.py, line 152 in process
     150    self.postpath = map(urllib.unquote, string.split(self.path[1:], '/'))
     151    try:
     152      resrc = self.site.getResourceFor(self)
     153      self.render(resrc)
   Self 
   site
   path
             '/documents/howto/listings/TwistedQuotes/webquote.rpy'
    postpath

   Locals 
    self

   Globals 
    urllib
           <module 'urllib' from '/usr/lib/python2.2/urllib.pyc'>
    string
           <module 'string' from '/usr/lib/python2.2/string.pyc'>

   /usr/lib/python2.2/site-packages/twisted/web/server.py, line 471 in getResourceFor
     469    request.sitepath = copy.copy(request.prepath)
     470    request.acqpath = copy.copy(request.prepath)
     471    return self.resource.getChildForRequest(request)
     472
   Self 
    resource

   Locals 
   self
    request

   Globals 
    copy
          <module 'copy' from '/usr/lib/python2.2/copy.pyc'>

   /usr/lib/python2.2/site-packages/twisted/web/resource.py, line 173 in getChildForRequest
     171      request.acqpath.append(pathElement)
     172      request.prepath.append(pathElement)
     173      res = res.getChildWithDefault(pathElement, request)
     174    return res
   Locals 
    pathElement
                'webquote.rpy'
   res
   request

   /usr/lib/python2.2/site-packages/twisted/web/resource.py, line 160 in getChildWithDefault
     158      return self.children[path]
     159
     160    return self.getChild(path, request)
     161
   Self 
    children

   Locals 
   path
           'webquote.rpy'
   self
    request

   /usr/lib/python2.2/site-packages/twisted/web/static.py, line 340 in getChild
     338      #the `registry' argument is new, so we have to do this nasty hack
     339      try:
     340        p = processor(childPath, self.registry)
     341      except TypeError: # this isn't very robust :(
   Self 
    registry

   Locals 
    childPath
             '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy'
   self
   p
             '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote'
   processor

   /usr/lib/python2.2/site-packages/twisted/web/script.py, line 80 in ResourceScript
     78      'recache': cs.recache}
     79  try:
     80    execfile(path, glob, glob)
     81  except AlreadyCached, ac:
   Locals 
   cs
    path
         '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy'
   glob

   Globals 
    AlreadyCached
                   <class twisted.web.script.AlreadyCached at 0x83e1fc4>

   /var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy, line 3 in ?
     1# -*- Python -*-
     2
     3from TwistedQuotes import webquoteresource
     4

exceptions.ImportError: No module named TwistedQuotes
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 20:23:15 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:23:15 -0400
Subject: [Twisted-Python] Re: Lore vs. latex2html: Fight to the Finish
In-Reply-To: <20030208185304.9876.qmail@green.zadka.com>
References: <20030208185304.9876.qmail@green.zadka.com>
Message-ID: <oqfzobjs7g.fsf@titan.progiciels-bpi.ca>

[Moshe Zadka]

> Dear Twisted developers,

I am not a developer, so I'm not sure if I may reply! :-)

> However, beyond that, I am interested to know which looks better:

> latex2html: http://www.ibiblio.org/obp/thinkCSpy/chap01.htm
> Lore: http://twistedmatrix.com/users/moshez/loreprop/
> (The Lore is using the Twisted documentation stylesheet.)

For my own taste, the first (latex2html) is a bit more legible, because it
has less distracting boxes, and the diagrams are more neat.  The navigation
bars at the beginning and the end give a bit of decoration, outside the
text, which is OK.  We should stay aware that "good looking" is only of
secondary value for documentation, legibility always goes before art.

> Any comments would be nice.  Comments which come with a patch to the
> stylesheet will be doubly appreciated.

By saying so, you reveal a prejudice towards the second (Lore).  :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 20:49:46 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:49:46 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `im' bug report
In-Reply-To: <20030421222442.GA12222@toshi.anaprd01.md.comcast.net>
References: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>
	<20030421222442.GA12222@toshi.anaprd01.md.comcast.net>
Message-ID: <oq3ckbjqz9.fsf@titan.progiciels-bpi.ca>

[Christopher Armstrong]

> Yeah, you weren't logged on, so there was no currentAccount (i.e., it was
> set to None).  If you want, you can add a check to say "if not
> self.currentAccount" and pop up a nice dialog with an error message :-)

I'm a newcomer to Twisted, and `im' is suggested right in the `README', that
is, really early in the adventure of discovering Twisted.  It would probably
be worth that Twisted polishes the first impressions it creates, or else,
that explanations like above be added to the `README' file. :-)

In that respect, what I want is a somewhat irrelevant.  Let's use some good
horse sense.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From andrew-twisted at puzzling.org  Mon Apr 21 22:16:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 12:16:57 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030422021657.GC7666@frobozz.local>

On Mon, Apr 21, 2003 at 07:47:43PM -0400, Fran?ois Pinard wrote:
> Hello.
> 
> In the `doc/' hierarchy of the Twisted 1.0.4 distribution, some `.html'
> files have links to `.xhtml' files, where apparently `.html' files by the
> same base exist.  Should `.html' rather point to `.html' files whenever
> possible?  Here are possible points to visit:

Yes, the '.html' should link to '.html'.  They '.html' files are the source
format for our documentation generation system that will process these to
'.xhtml' files, with various nice things done to them (including changing
the links to point to the .xhtml).

This is actually a known problem (someone else reported this a couple of
days ago).  I'll take care of it in CVS later today.

[...]
> * `doc/howto/lore.html', `doc/api/private/twisted.lore.default.html' and
>   `doc/api/public/twisted.lore.default.html' also seem to indicate that
>   `lore' will generate `.xhtml'; I am not familiar with `lore', and cannot
>   say if it should or can generate `.html' instead.  If it can, it most
>   probably should for generated documents to pointed to by `.html' files.

Lore's default behaviour is '.html' -> '.xhtml'.  If you are reading the
docs, just ignore the .html files and read the .xhtml, which are nicer
anyway.

> P.S. - I'm using `links' by preference (fast startup and reasonable image
> support), which `links' does not seem to support `.xhtml' files.  Given that
> `.html' is pretty widespread and reasonably understood by all Web browsers,
> while `.xhtml' is more recent or specialised, would not it be a good idea to
> aim `.html' as a uniform standard base for interactive documentation, (given
> it ought to go through Web browsers), and offer `.xhtml' merely as an extra?

I suspect links is probably having problems with the lack of <!DOCTYPE ...>
declarations in the .xhtml files, which is a bug in microdom.  Hopefully
this will be fixed soon.

-Andrew.




From radix at twistedmatrix.com  Mon Apr 21 22:28:03 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Apr 2003 22:28:03 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422021657.GC7666@frobozz.local>; from andrew-twisted@puzzling.org on Mon, Apr 21, 2003 at 22:16:57 -0400
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local>
Message-ID: <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>

On 2003.04.21 22:16, Andrew Bennetts wrote:

> Yes, the '.html' should link to '.html'.  They '.html' files are the source
> format for our documentation generation system that will process these to
> '.xhtml' files, with various nice things done to them (including changing
> the links to point to the .xhtml).
> 
> This is actually a known problem (someone else reported this a couple of
> days ago).  I'll take care of it in CVS later today.

Do we need something like <a href="foo.html" munge="Don't!">...</a> ?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Mon Apr 21 22:53:31 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 12:53:31 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
Message-ID: <20030422025331.GD7666@frobozz.local>

On Mon, Apr 21, 2003 at 10:28:03PM -0400, Christopher Armstrong wrote:
> 
> On 2003.04.21 22:16, Andrew Bennetts wrote:
> 
> > Yes, the '.html' should link to '.html'.  They '.html' files are the source
> > format for our documentation generation system that will process these to
> > '.xhtml' files, with various nice things done to them (including changing
> > the links to point to the .xhtml).
> > 
> > This is actually a known problem (someone else reported this a couple of
> > days ago).  I'll take care of it in CVS later today.
> 
> Do we need something like <a href="foo.html" munge="Don't!">...</a> ?

Maybe, but so far, no.  Lore doesn't munge links with / in them at the
moment, which is usually plenty.

I'm actually intending on changing that to munging all relative links, or
perhaps all relative links under the current working directory (but that
seems a touch too magical).  If I do that, then a class="no_munge" is
probably justified -- although I'd prefer a better name for it :)

-Andrew.




From m at moshez.org  Tue Apr 22 00:22:51 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 Apr 2003 04:22:51 -0000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030422042251.11167.qmail@green.zadka.com>

On 21 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> P.S. - I'm using `links' by preference (fast startup and reasonable image
> support), which `links' does not seem to support `.xhtml' files.

Either fix links, or use a real browser like lynx or w3m.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Tue Apr 22 00:25:34 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 Apr 2003 04:25:34 -0000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422025331.GD7666@frobozz.local>
References: <20030422025331.GD7666@frobozz.local>, <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
Message-ID: <20030422042534.11220.qmail@green.zadka.com>

On Tue, 22 Apr 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> I'm actually intending on changing that to munging all relative links, or
> perhaps all relative links under the current working directory (but that
> seems a touch too magical).  If I do that, then a class="no_munge" is
> probably justified -- although I'd prefer a better name for it :)
 
How about class="absolute"?
[I only *look* like a relative link :)]

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From andrew-twisted at puzzling.org  Tue Apr 22 00:35:55 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 14:35:55 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042251.11167.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com>
Message-ID: <20030422043555.GF7666@frobozz.local>

On Tue, Apr 22, 2003 at 04:22:51AM -0000, Moshe Zadka wrote:
> On 21 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:
> 
> > P.S. - I'm using `links' by preference (fast startup and reasonable image
> > support), which `links' does not seem to support `.xhtml' files.
> 
> Either fix links, or use a real browser like lynx or w3m.

You can workaround links behaviour by hitting \

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr 22 00:36:35 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 14:36:35 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042534.11220.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net> <20030422042534.11220.qmail@green.zadka.com>
Message-ID: <20030422043635.GG7666@frobozz.local>

On Tue, Apr 22, 2003 at 04:25:34AM -0000, Moshe Zadka wrote:
> On Tue, 22 Apr 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> 
> > I'm actually intending on changing that to munging all relative links, or
> > perhaps all relative links under the current working directory (but that
> > seems a touch too magical).  If I do that, then a class="no_munge" is
> > probably justified -- although I'd prefer a better name for it :)
>  
> How about class="absolute"?
> [I only *look* like a relative link :)]

Sold!

Expect this to be checked in tonight.

-Andrew.




From egor at iplus.ru  Tue Apr 22 05:13:14 2003
From: egor at iplus.ru (Egor Cheshkov)
Date: Tue, 22 Apr 2003 13:13:14 +0400
Subject: [Twisted-Python] perspective broker question
Message-ID: <3EA507AA.7060404@iplus.ru>

Hello everyone! Newbie question. I need to make a blocking call in 
perspective_X() method. So I put my call into separate thread and get a 
deferred wich will be called back when data available. But deferred 
could not be returned from perspective_X method (not sure). My question 
is how can I implement perspective_X method wich getting data from 
deferred?

-- 
Egor Cheshkov <egor at iplus.ru>





From pinard at iro.umontreal.ca  Tue Apr 22 09:50:53 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 09:50:53 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042251.11167.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
	<20030422042251.11167.qmail@green.zadka.com>
Message-ID: <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>

[Moshe Zadka]

> > P.S. - I'm using `links' by preference (fast startup and reasonable
> > image support), which `links' does not seem to support `.xhtml' files.

> Either fix links, or use a real browser like lynx or w3m.

So, in your opinion, any browser which does not grok `.xhtml' is not real?
Happily enough, my preferred non-real browser is very useful as it stands,
and it seems that `.xhtml' is still exceptional rather than the usual in
real life, for a tremendous lot of people.  Ah, religions, religions... :-)
I hope Twisted is its own goal, and not an occasion for random proletysm!

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From tv at twistedmatrix.com  Tue Apr 22 02:30:56 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 22 Apr 2003 09:30:56 +0300
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
Message-ID: <20030422063056.GA5184@lapdog>

On Mon, Apr 21, 2003 at 07:29:56PM +0100, Phil Mayers wrote:
> I figured something like that. Does anyone know if the various socket
> readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
> given you sufficient information to know when you can do multiple reads?

	Yes. All of them. If you want to empty the channel, read until
	it would block. Same for writing..

> The other option I guess would be to for connection-less sockets to do:
> 
> while 1:
>     try:
>         data, addr = self.socket.recvfrom(65535)
>         self.protocol.datagramReceived(data, addr)
>     except socket.error, se:
>         if se.args[0]==errno.EWOULDBLOCK:
>             break
>     except:
>         log.deferr()
> 
> ...in doRead (line 91, twisted/internet/udp.py)?

	It should do this already, in any case. It's a bug it doesn't.
	select/poll/etc only give a hint that the fd might be
	readable; the code must _always_ be prepared for the fact that
	it might not be readable after all.



	But your basic problem is trying to use UDP where it doesn't
	work.  Even if you find some sufficient delays that make the
	system not lose packets in your specific case, changing any of
	the variables (upgrading CPU, NICs, switches, OS, ...) can
	make it fail again. You should use a protocol that doesn't
	rely on luck, except maybe for optimization.

-- 
:(){ :|:&};:



From p.mayers at imperial.ac.uk  Tue Apr 22 10:07:03 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Apr 2003 15:07:03 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030422063056.GA5184@lapdog>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk> <20030422063056.GA5184@lapdog>
Message-ID: <20030422140703.GA21486@wildfire0.net.ic.ac.uk>

On Tue, Apr 22, 2003 at 09:30:56AM +0300, Tommi Virtanen wrote:
> 
> 	But your basic problem is trying to use UDP where it doesn't
> 	work.  Even if you find some sufficient delays that make the
> 	system not lose packets in your specific case, changing any of
> 	the variables (upgrading CPU, NICs, switches, OS, ...) can
> 	make it fail again. You should use a protocol that doesn't
> 	rely on luck, except maybe for optimization.
> 

Hmm. Without going into irrelevant detail, I'm certain the UDP is the
appropriate protocol for this application, for a number of reasons, but
thanks for the comment.

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From andrew-twisted at puzzling.org  Tue Apr 22 10:23:27 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 00:23:27 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com> <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030422142327.GC8567@frobozz.local>

On Tue, Apr 22, 2003 at 09:50:53AM -0400, Francois Pinard wrote:
> [Moshe Zadka]
> 
> > > P.S. - I'm using `links' by preference (fast startup and reasonable
> > > image support), which `links' does not seem to support `.xhtml' files.
> 
> > Either fix links, or use a real browser like lynx or w3m.
> 
> So, in your opinion, any browser which does not grok `.xhtml' is not real?
> Happily enough, my preferred non-real browser is very useful as it stands,
> and it seems that `.xhtml' is still exceptional rather than the usual in
> real life, for a tremendous lot of people.  Ah, religions, religions... :-)
> I hope Twisted is its own goal, and not an occasion for random proletysm!

Well, links could be more intelligent here, and it seems other browsers
manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
...> declaration or the opening <html> tag seem sufficient for links to
realise that it is dealing with actual HTML.  Additionally, I wasn't able to
successfully configure my local links to recognise .xhtml as being
html/plain content, even though the menus seemed to suggest I could (it
happily accepted the entry, but the behaviour was unchanged).

I don't regard it as a major problem, though: in links you can hit "\" and
then it works.  Other browsers I've tried all seem fine -- as is links if
you are reading it off the website, which of course sets the Content-type
HTTP header.  Considering that you are the first person to report this
problem, I doubt this is worth the effort for us to "fix".  

You are welcome to locally rename or symlink the .xhtml files to .html if
you're really inconvenienced by this ;)

Or you can read the .ps or .pdf format -- or read it from the website, which
works around links' limitations.

> I hope Twisted is its own goal, and not an occasion for random proletysm!

The true goal of Twisted is to DESTROY THE SUN, of course.  Random proletysm
is merely a distraction we create so that no-one will stop us!  Muahahahaha!

-Andrew.




From pinard at iro.umontreal.ca  Tue Apr 22 11:08:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 11:08:49 -0400
Subject: [Twisted-Python] Newbie reading Twisted book!
Message-ID: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>

Hi, people.

I just want to share my enthusiasm, so far, at reading the Twisted book
(from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
interesting style of prose which triggers pleasure.  Thanks for this.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 22 11:24:14 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 11:24:14 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422142327.GC8567@frobozz.local>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
	<20030422042251.11167.qmail@green.zadka.com>
	<oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
	<20030422142327.GC8567@frobozz.local>
Message-ID: <oqof2yy2qp.fsf@alcyon.progiciels-bpi.ca>

[Andrew Bennetts]

By the way, Andrew, let me thank you for your replies.

> Or you can read the .ps or .pdf format

And moreover, these are far more legible than rendered HTML (or XHTML),
whatever browser one uses.

> The true goal of Twisted is to DESTROY THE SUN, of course.  Random
> proletysm is merely a distraction we create so that no-one will stop us!
> Muahahahaha!

:-) :-).  I begin to see that Twisted has (or nearly has) all the needed
machinery towards this noble goal.  There surely is a lot of stuff
in there!  Yet, I guess I'll have to read some more before I can figure
out how to cleverly connect various parts towards the goal.  Beware! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Tue Apr 22 11:39:11 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 11:39:11 -0400
Subject: [Twisted-Python] perspective broker question
In-Reply-To: <3EA507AA.7060404@iplus.ru>; from egor@iplus.ru on Tue, Apr 22, 2003 at 05:13:14 -0400
References: <3EA507AA.7060404@iplus.ru>
Message-ID: <20030422153911.GA15037@toshi.anaprd01.md.comcast.net>

On 2003.04.22 05:13, Egor Cheshkov wrote:
> Hello everyone! Newbie question. I need to make a blocking call in 
> perspective_X() method. So I put my call into separate thread and get a 
> deferred wich will be called back when data available. But deferred 
> could not be returned from perspective_X method (not sure). 

Yes, you can return a Deferred from a perspective_ method and it will
do the right thing.

Also, you can do something like this

    def perspective_X(self):
        #doSomeOperation here returns a Deferred
        return doSomeOperation().addCallbacks(self.mungeIt, self.ohCrap)

... And implement mungeIt and ohCrap to take the result, munge it in some
useful way, and return it. The return value will be used as the result
on the client side (who originally did callRemote('X'))
This way you can do some processing on the result of your operation
before the client gets it, if you need to.

For more info on Deferreds, http://twistedmatrix.com/documents/howto/defer

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From p.mayers at imperial.ac.uk  Tue Apr 22 13:28:26 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Apr 2003 18:28:26 +0100
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <200303111417.h2BEHt327030@localhost.localdomain>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain>
Message-ID: <20030422172826.GB19382@wildfire0.net.ic.ac.uk>

On Wed, Mar 12, 2003 at 01:17:55AM +1100, Anthony Baxter wrote:
> 
> >>> Tommi Virtanen wrote
> > 	0) make the t.i.process setuid/setgid code actually work (see
> > 	   patch; BTW is the initgroups part really needed? I feel my
> > 	   pure-python 6-liner does the same thing.)
> 
> > +        def initgroups(username, dummy):
> > +            l=[]
> > +            for groupname, password, gid, userlist in grp.getgrall():
> > +                if username in userlist:
> > +                    l.append(gid)
> > +            os.setgroups(l)
> 
> Certainly on the operating systems that I can recall, your initgroups()
> is doing the same thing as the C level initgroups. But if the C level

No no no no. getgrall could theoretically return a *huge* number of
groups, and/or individual groups could have *huge* numbers of members.
For a system with /etc/passwd and /etc/group only, this doesn't matter,
but think about a system with an LDAP (RFC2307) nameservice backend - I
just tested it on my machine, and getgrall results in over 48Mb of
LDAP queries based on our ActiveDirectory groups. Many tens of seconds.

However, calling initgroups results in a single query:

memberUid=foo

...and only returns the groupname and gid, so is efficient every time.
The "right" way to do this is the getgrouplist() call (see
http://www.openbsd.org/cgi-bin/man.cgi?query=getgrouplist) and if you
look at the NSS code in e.g. glibc the NSS modules can provide
"efficient" hooks which initgroups() and getgrouplist() can implement.
initgroups() in glibc basically calls getgrouplist() on the NSS plugin
and so whilst the *result* is the same, you're taking the slow path.

This is important - don't use the sucky getgrent (in fact, I'm an
advocate of making the gr_mem member of the "struct group" always be
null. Just because other apps do it is no exscuse either :o)

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From tv at twistedmatrix.com  Tue Apr 22 14:59:21 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 22 Apr 2003 21:59:21 +0300
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030422172826.GB19382@wildfire0.net.ic.ac.uk>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030422172826.GB19382@wildfire0.net.ic.ac.uk>
Message-ID: <20030422185921.GA19301@lapdog>

On Tue, Apr 22, 2003 at 06:28:26PM +0100, Phil Mayers wrote:
> No no no no. getgrall could theoretically return a *huge* number of
> groups, and/or individual groups could have *huge* numbers of members.
> For a system with /etc/passwd and /etc/group only, this doesn't matter,
> but think about a system with an LDAP (RFC2307) nameservice backend - I
> just tested it on my machine, and getgrall results in over 48Mb of
> LDAP queries based on our ActiveDirectory groups. Many tens of seconds.
> 
> However, calling initgroups results in a single query:
> 
> memberUid=foo
> 
> ...and only returns the groupname and gid, so is efficient every time.

	Certainly you are correct. The point you are missing is
	that we are programming in Python, not in C. And Python does
	not have initgroups.

	We could add initgroups into eunuchs
	(http://twistedmatrix.com/users/tv/eunuchs/), or use the
	initgroups module by one of the Twisted developers; the code
	could be rewritten to try importing the C part, and falling
	back to the dumb version. Then using the smart API would be a
	true optimization.

	However, before I touched it, the code did _NOTHING_ unless
	the C initgroups module was available. And that resulted in
	bad things.

> The "right" way to do this is the getgrouplist() call (see
> http://www.openbsd.org/cgi-bin/man.cgi?query=getgrouplist) and if you
> look at the NSS code in e.g. glibc the NSS modules can provide
> "efficient" hooks which initgroups() and getgrouplist() can implement.
> initgroups() in glibc basically calls getgrouplist() on the NSS plugin
> and so whilst the *result* is the same, you're taking the slow path.

	getgrouplist() is as much missing from python stdlib as
	initgroups(), so you aren't really helping there.

-- 
:(){ :|:&};:



From lafou at wanadoo.fr  Tue Apr 22 15:54:30 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 22 Apr 2003 21:54:30 +0200
Subject: [Twisted-Python] flow.Zip
Message-ID: <1051041270.26073.92.camel@biproc>

Clark,

just a mail to remind you to code flow.zip.

with merge :[1,Cooperate(),2] + [3,4] = [1,3,4,2]
with zip, it should be [1,Cooperate(),2] + [3,4] = [(1,3)(2,4)]


Hmm, By the way, Cooperate() isn't clear, even with the doc... :-(
could you explain me that please ?

thx
Philippe




From itamar at itamarst.org  Tue Apr 22 15:48:27 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 15:48:27 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
Message-ID: <20030422154827.17021602.itamar@itamarst.org>

1. Do you require Python 2.1 support in Twisted? If so, for what reason?
How problematic would a switch to 2.2 be for you? Please try to answer
within a week so we can have some immediate info.

2. Do you have any Twisted success stories you'd like to share (besides
those listed in our success stories page, of course)?

Thanks.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Tue Apr 22 17:23:34 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 17:23:34 -0400
Subject: [Twisted-Python] Re: SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <oqk7dmxm3t.fsf@alcyon.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you?  Please try to answer
> within a week so we can have some immediate info.

I'm not yet a Twisted user, but intend to use it over two sites, (and maybe
a third withinin a few months).  All sites run Python 2.2.1 or better.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet...  Later maybe, soon hopefully! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From bob at redivi.com  Tue Apr 22 17:26:05 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 22 Apr 2003 17:26:05 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <0658F662-7509-11D7-92C2-000A95686CD8@redivi.com>

On Tuesday, Apr 22, 2003, at 15:48 America/New_York, Itamar 
Shtull-Trauring wrote:

> 1. Do you require Python 2.1 support in Twisted? If so, for what 
> reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

No, Python 2.1 needs to die, slowly and painfully.

-bob




From warner at lothar.com  Tue Apr 22 17:29:41 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 22 Apr 2003 14:29:41 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
 <20030422042251.11167.qmail@green.zadka.com>
 <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
 <20030422142327.GC8567@frobozz.local>
Message-ID: <20030422.142941.35634384.warner@lothar.com>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> 
> Well, links could be more intelligent here, and it seems other browsers
> manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
> ..> declaration or the opening <html> tag seem sufficient for links to
> realise that it is dealing with actual HTML.  Additionally, I wasn't able to
> successfully configure my local links to recognise .xhtml as being
> html/plain content, even though the menus seemed to suggest I could (it
> happily accepted the entry, but the behaviour was unchanged).

Forgive my confusion, but why isn't this sort of thing entirely up to the
server? Shouldn't the client merely obey the Content-Type: header?

I'm willing to believe it's more confusing than that, both because I've seen
it break and because I've seen the zillion mapping preferences in web
browsers, but I'd love to know how it's *supposed* to work before all the
band-aids got applied. In-line magic numbers like <html> or <!DOCTYPE> are
what MIME was supposed to get rid of.

 -Brian



From radix at twistedmatrix.com  Tue Apr 22 17:35:40 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 17:35:40 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422.142941.35634384.warner@lothar.com>; from warner@lothar.com on Tue, Apr 22, 2003 at 17:29:41 -0400
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com> <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca> <20030422142327.GC8567@frobozz.local> <20030422.142941.35634384.warner@lothar.com>
Message-ID: <20030422213540.GA612@toshi.anaprd01.md.comcast.net>

On 2003.04.22 17:29, Brian Warner wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> > 
> > Well, links could be more intelligent here, and it seems other browsers
> > manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
> > ..> declaration or the opening <html> tag seem sufficient for links to
> > realise that it is dealing with actual HTML.  Additionally, I wasn't able to
> > successfully configure my local links to recognise .xhtml as being
> > html/plain content, even though the menus seemed to suggest I could (it
> > happily accepted the entry, but the behaviour was unchanged).
> 
> Forgive my confusion, but why isn't this sort of thing entirely up to the
> server? Shouldn't the client merely obey the Content-Type: header?

The problem they're talking about is when you `links' a *local* file, so no
mime-type information is available.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From peter at engcorp.com  Tue Apr 22 17:34:31 2003
From: peter at engcorp.com (Peter Hansen)
Date: Tue, 22 Apr 2003 17:34:31 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <3EA5B567.444B7AB4@engcorp.com>

Itamar Shtull-Trauring wrote:
> 
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

We currently are using Twisted (just upgraded to 1.0.4) along with Zope 2.5.1,
Zope for the "front end" (but only for as long as it takes until we can remove it)
and Twisted for the "back end" of our application.  Zope still uses Python 2.1
so we would be unable to do this with Python 2.2.  Since we will definitely
have excised all traces of Zope by the time anything really changes with
Twisted and 2.2, I'm not seriously concerned but I thought I'd note it as
an interesting data point.

Also perhaps interesting, though off-topic, is that we patched 1.0.3 to
run under Python 2.0 (just a few quick hacks) successfully, as we are
still using that on our network for development, even though this one
particular application deploys with Python 2.1.  It was rather simple
with 1.0.3 although I'm not sure whether we'll have better or worse
luck when we try this with 1.0.4.  Chances are the nested scopes have
propagated throughout more of the code now...

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Eventually we will have something more official to report, but just for
this list, unofficially :-), for now, I'd like to report that Kaval
Wireless Technologies Inc (www.kaval.com) is integrating Twisted into a 
server application which is used to monitor equipment in wireless coverage 
extension systems.  (The monitoring links themselves are not wireless, so Twisted
is carrying only data which travelled as electrons, not as radio waves...)

Until now we'd been using Zope, but it was really not the most appropriate
choice since this isn't a content management system.  Twisted appears
more robust, lighter weight, and likely to prove much more amenable to
rapid development on our end, and as a hardcore XP team we highly
appreciate the XP approach of the Twisted team and look forward to
contributing as we learn more.  I don't want to diminish Zope, which
provided an effective platform at an earlier stage, but we've definitely
grown beyond it and are tightly constrained by its limitations and
difficult development model.

-Peter Hansen



From golux at comcast.net  Tue Apr 22 18:09:20 2003
From: golux at comcast.net (Steve Waterbury)
Date: Tue, 22 Apr 2003 18:09:20 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <1051049361.1072.197.camel@golux>

On Tue, 2003-04-22 at 15:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

Negatory!  2.2 is a-ok with us!!  

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet ... but we hope to have some embellishments in 
a little while ... ;^)

Cheers,
- Steve.





From kwaker at uch.net  Tue Apr 22 18:39:29 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Wed, 23 Apr 2003 01:39:29 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <4697194518.20030423013929@uch.net>

Hello Itamar,

Tuesday, April 22, 2003, 10:48:27 PM, you wrote:

IST> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
IST> How problematic would a switch to 2.2 be for you? Please try to answer
IST> within a week so we can have some immediate info.

2.1 is not required.

IST> 2. Do you have any Twisted success stories you'd like to share (besides
IST> those listed in our success stories page, of course)?

I am writing clone of my worknode in C++, so Twisted version is used
just until I complete C++ version. This is because of productivity
concerns, I have hit Python's productivity ceiling. After that I may
succeed in writing cluster kernel and web interface in Twisted. I.e.
still no success story, sorry.

-- 
Best regards,
 Dmitry                            mailto:kwaker at uch.net




From 2002 at weholt.org  Tue Apr 22 18:45:55 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Wed, 23 Apr 2003 00:45:55 +0200
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
Message-ID: <004701c30920$ef9cf3f0$0401a8c0@razor>

Hi,

I was hoping some of the things at PyCon related to Twisted would be available for all of us who didn't have a chance to attend. Especially the part about deployment of Twisted websites.

Any information about this ??

Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030423/19858c61/attachment.htm 

From bob at redivi.com  Tue Apr 22 18:57:11 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 22 Apr 2003 18:57:11 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <4697194518.20030423013929@uch.net>
Message-ID: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>

On Tuesday, Apr 22, 2003, at 18:39 America/New_York, Dmitry Litovchenko 
wrote:

> I am writing clone of my worknode in C++, so Twisted version is used
> just until I complete C++ version. This is because of productivity
> concerns, I have hit Python's productivity ceiling. After that I may
> succeed in writing cluster kernel and web interface in Twisted. I.e.
> still no success story, sorry.

Have you considered using something like BOOST.Python or Pyrex to do 
optimized implementations of the portions that have poor performance?  
Typically, rewriting the whole thing in C/C++ is a bad idea.

-bob




From astreib at indiana.edu  Tue Apr 22 19:19:28 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 18:19:28 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
Message-ID: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>

First to set my perspective -- I never heard of Twisted before two days
ago.

I have an XMLRPC server built with the Medusa framework.  I am looking at
moving the methods to Twisted in order to take advantage of Deferreds, SSL
support, and based on my brief exposure, the overall framework seems
cleaner.

This is a simplification, but to keep this short I have an XMLRPC method
that returns results from an LDAP search.  Currently the searches are
synchronous but they are fast enough that it has not been a problem.  Now
I need to expand the search filter options which will (could) result in a
slower search.

The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
perfect.  A call to ldap.search_s() returns a message ID which is later
used in a call to result() to get the results.  ldap.result() takes the
message ID, and a timeout argument which if zero is in effect a poll.

So what I want is for my XMLRPC method to invoke search_s and get the
message ID.  Then create a defered and provide its callback and the
message ID to something that will poll ldap.result() until it returns
results (if results are not ready it will return [None, None]) and then
pass those to the callback.  Here's where I get confused; I think the call
to ldap.result() needs to be done by reactor somehow since ldap.result()
may need to be called repeatedly before results are ready) but I'm not
sure.

The whole deferred light bulb has not quite come on for me yet, so I
appreciate any guidance.  The defer HOWTO examples all use something like
reactor.callLater() to represent a "delayed result" which is not really
helping me.  The XMLRPC example of returning a defered just returns
defer.succeed("hello"), again not quite a rich enough example.

I thought about adapting the adbapi stuff for LDAP, but the notion is in
my head that I should be able to do this without threads since the ldap
API supports async operations.

Many thanks,

Allan
-- 
"If you understand what you're doing, you're not learning anything"
                                             - Anon



From itamar at itamarst.org  Tue Apr 22 19:21:59 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 19:21:59 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <3EA5B567.444B7AB4@engcorp.com>
References: <20030422154827.17021602.itamar@itamarst.org>
	<3EA5B567.444B7AB4@engcorp.com>
Message-ID: <20030422192159.628b54af.itamar@itamarst.org>

On Tue, 22 Apr 2003 17:34:31 -0400
Peter Hansen <peter at engcorp.com> wrote:

> and Twisted for the "back end" of our application.  Zope still uses
> Python 2.1 so we would be unable to do this with Python 2.2.  Since we
> will definitely have excised all traces of Zope by the time anything
> really changes with Twisted and 2.2, I'm not seriously concerned but I
> thought I'd note it as an interesting data point.

Arte you using them in the same process? Or as separate processes? Any
reason you can't install two versions of Python at once?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Tue Apr 22 19:35:38 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 19:35:38 -0400
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>; from astreib@indiana.edu on Tue, Apr 22, 2003 at 19:19:28 -0400
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
Message-ID: <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>

On 2003.04.22 19:19, Allan Streib wrote:
> First to set my perspective -- I never heard of Twisted before two days
> ago.
> 
> I have an XMLRPC server built with the Medusa framework.  I am looking at
> moving the methods to Twisted in order to take advantage of Deferreds, SSL
> support, and based on my brief exposure, the overall framework seems
> cleaner.
> 
> This is a simplification, but to keep this short I have an XMLRPC method
> that returns results from an LDAP search.  Currently the searches are
> synchronous but they are fast enough that it has not been a problem.  Now
> I need to expand the search filter options which will (could) result in a
> slower search.
> 
> The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
> perfect.  A call to ldap.search_s() returns a message ID which is later
> used in a call to result() to get the results.  ldap.result() takes the
> message ID, and a timeout argument which if zero is in effect a poll.
> 

Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
http://twistedmatrix.com/users/tv/ldaptor/
It's a natively-Twisted LDAP client library.

Also (it's moot if you'll use ldaptor, which I recommend, but..), returning the
message ID as the result of the Deferred, and requiring the caller to poll,
is a bad idea. You would do the polling yourself (every iteration of the
mainloop, with a reactor.callLater(0, pollIt) or somesuch), and once the
result is available, trigger the Deferred with it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From ecn at metaslash.com  Tue Apr 22 19:39:38 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 22 Apr 2003 19:39:38 -0400
Subject: [Twisted-Python] serial port blocking on Linux
Message-ID: <20030422233938.GA4946@localhost.localdomain>

Twisted 1.0.4
Linux Redhat 9.0

I have evidence of the SerialPort class blocking.  

strace says write operations are blocking and always return the number
of bytes to be written.

The problem goes away if I set the file descriptor on the object to
non-blocking using posixy controls.

Test program below.

-Eric

#! /usr/bin/python
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols.basic import LineReceiver
import fcntl, os

import time

class Client(LineReceiver):
    
    def connectionMade(self):
        # Uncomment to fix
        #assert fcntl.fcntl(self.transport.fileno(),
        #                   fcntl.F_SETFL,
        #                   os.O_RDWR|os.O_NONBLOCK) == 0
        before = time.time()
        self.transport.write('This is a long message\n' * 500)
        after = time.time()
        print 'long write took', after - before, 'seconds'

    def lineReceived(self, line):
        pass
    
s = SerialPort(Client(), '/dev/ttyS1', reactor)
reactor.run()



From jml at ids.org.au  Tue Apr 22 20:17:21 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Wed, 23 Apr 2003 10:17:21 +1000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>; from itamar@itamarst.org on Wed, Apr 23, 2003 at 05:48:27 +1000
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030423001721.GA650@sting>

On 2003.04.23 05:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what
> reason?

No. I am happy for this to change.
My only concern would be Debian packaging issues.

> 2. Do you have any Twisted success stories you'd like to share

Not yet.

cheers,
jml



From cce at clarkevans.com  Tue Apr 22 20:54:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 00:54:43 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <1051041270.26073.92.camel@biproc>
References: <1051041270.26073.92.camel@biproc>
Message-ID: <20030423005443.GA48917@doublegemini.com>

On Tue, Apr 22, 2003 at 09:54:30PM +0200, Philippe Lafoucri?re wrote:
| just a mail to remind you to code flow.zip.

Done

| Hmm, By the way, Cooperate() isn't clear, even with the doc... :-(
| could you explain me that please ?

Cooperate() is called when an iterator would block, thus,
the flow module allows other tasks (connections, users)
to continue.   If you look at the source for flow.Threaded
you will see that it raises Cooperate() when the database
hasn't produced data yet.



From exarkun at intarweb.us  Tue Apr 22 20:51:54 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 22 Apr 2003 20:51:54 -0400
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
Message-ID: <20030423005154.GA31760@meson.dyndns.org>

On Tue, Apr 22, 2003 at 06:19:28PM -0500, Allan Streib wrote:
> First to set my perspective -- I never heard of Twisted before two days
> ago.
> 
> I have an XMLRPC server built with the Medusa framework.  I am looking at
> moving the methods to Twisted in order to take advantage of Deferreds, SSL
> support, and based on my brief exposure, the overall framework seems
> cleaner.
> 
> This is a simplification, but to keep this short I have an XMLRPC method
> that returns results from an LDAP search.  Currently the searches are
> synchronous but they are fast enough that it has not been a problem.  Now
> I need to expand the search filter options which will (could) result in a
> slower search.
> 
> The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
> perfect.  A call to ldap.search_s() returns a message ID which is later
> used in a call to result() to get the results.  ldap.result() takes the
> message ID, and a timeout argument which if zero is in effect a poll.
> 
> So what I want is for my XMLRPC method to invoke search_s and get the
> message ID.  Then create a defered and provide its callback and the
> message ID to something that will poll ldap.result() until it returns
> results (if results are not ready it will return [None, None]) and then
> pass those to the callback.  Here's where I get confused; I think the call
> to ldap.result() needs to be done by reactor somehow since ldap.result()
> may need to be called repeatedly before results are ready) but I'm not
> sure.
> 
> The whole deferred light bulb has not quite come on for me yet, so I
> appreciate any guidance.  The defer HOWTO examples all use something like
> reactor.callLater() to represent a "delayed result" which is not really
> helping me.  The XMLRPC example of returning a defered just returns
> defer.succeed("hello"), again not quite a rich enough example.
> 
> I thought about adapting the adbapi stuff for LDAP, but the notion is in
> my head that I should be able to do this without threads since the ldap
> API supports async operations.
> 

  Here's something that might help (note that I am not familiar with the
python-ldap API, so I'm just guessing at how it is laidd out):

    from twisted.internet import reactor, defer

    class LDAPQueryTracker:
        def __init__(self):
            self._ids = {}

        # Wrapper around python-ldap's search function
        # returns a Deferred whose callback will be invoked
        # with the result
        def search(self, args):
            id = ldap.search_s(args)
            self._ids[id] = defer.Deferred()
            reactor.callLater(0, self.poll)
            return self._ids[id]

        # A method to poll any "live" queries,
        # and to schedule another poll if there are any
        # remaining outstanding queries
        def poll(self):
            for (id, d) in self._ids.items():
                r = ldap.result(id, timeout=0):
                if r is not None:
                    del self._ids[id]
                    d.callback(r)
            if self._ids:
                reactor.callLater(0, self.poll)

    # Two trivial callbacks to handle the result
    def printResult(result):
        print 'LDAP result:', result
    def printFailure(failure):
        print 'LDAP failed!'
        failure.printTraceback()

    # Make a tracker, perform a query, and add some callbacks
    qt = LDAPQueryTracker()
    d = qt.search("humm, I have no idea what an ldap query looks like")
    d.addCallbacks(printResult, printFailure)

    # Do it.
    reactor.run()


  Hope this helps,

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 33 days, 21:03, 5 users, load average: 2.01, 1.90, 1.90
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030422/f76cf7e1/attachment.pgp 

From glyph at twistedmatrix.com  Tue Apr 22 22:31:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Apr 2003 21:31:52 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <4697194518.20030423013929@uch.net>
Message-ID: <BE148C28-7533-11D7-B5A1-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 22, 2003, at 05:39 PM, Dmitry Litovchenko wrote:

> 2.1 is not required.

Thanks for the feedback :).

> This is because of productivity concerns, I have hit Python's 
> productivity ceiling.

Do you mean "performance"?  Python has a pretty high productivity 
ceiling.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+pfsdvVGR4uSOE2wRAnERAJ0apXwxdAc2i+z+vyKNZ8CuehH8KgCgl5bB
sBIIfS703nPhQrWPiiviWrw=
=Dzcr
-----END PGP SIGNATURE-----




From astreib at indiana.edu  Tue Apr 22 23:21:13 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 22:21:13 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030423005154.GA31760@meson.dyndns.org>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030423005154.GA31760@meson.dyndns.org>
Message-ID: <Pine.LNX.4.51.0304222216390.4013@garp.ucs.indiana.edu>

Thanks, Jp, your example is helpful.  I will give it a try.

(Note to other readers -- ldap.search_s() is the synchronous (blocking)
method.  The async method is ldap.search().  I've been using
ldap.search_s() up until now and my fingers automatically typed that.)

Allan



From astreib at indiana.edu  Tue Apr 22 23:30:38 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 22:30:38 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>
Message-ID: <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>

On Tue, 22 Apr 2003, Christopher Armstrong wrote:

> Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
> http://twistedmatrix.com/users/tv/ldaptor/
> It's a natively-Twisted LDAP client library.

I saw that and downloaded the latest .tar.gz, but it was not immediately
obvious how it worked.  There seemed to be no documentation -- did I miss
it?  I'll peruse through the code a bit more; I'm all for not reinventing
the wheel, but on the other hand I'm very happy with the python-ldap
wrappers for the OpenLDAP API -- they've worked flawlessly for me so far.

> Also (it's moot if you'll use ldaptor, which I recommend, but..),
> returning the message ID as the result of the Deferred, and requiring
> the caller to poll, is a bad idea. You would do the polling yourself
> (every iteration of the mainloop, with a reactor.callLater(0, pollIt) or
> somesuch), and once the result is available, trigger the Deferred with
> it.

Yes, that's what I was trying to say.  I probably did not say it well.
Thanks.

Allan
--
"If you understand what you're doing, you're not learning anything."
                                                -- Anonymous



From itamar at itamarst.org  Tue Apr 22 23:32:38 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 23:32:38 -0400
Subject: [Twisted-Python] UDP changes
Message-ID: <20030422233238.64891bce.itamar@itamarst.org>

I checked in some changes to UDP in CVS that may very will improve
performance significantly. Or not. Could someone check and see if
there's any difference?

Code for a UDP throughput benchmark would also be much appreciated.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jjn at kriln.com  Wed Apr 23 00:21:00 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Wed, 23 Apr 2003 04:21:00 +0000 (GMT)
Subject: [Twisted-Python] UDP changes
In-Reply-To: <20030422233238.64891bce.itamar@itamarst.org>
Message-ID: <20030423041942.I41027-100000@nosferatu.kriln.com>

On Tue, 22 Apr 2003, Itamar Shtull-Trauring wrote:

> Code for a UDP throughput benchmark would also be much appreciated.

Perusing the code/design of iperf may be useful for whoever does this.
Those of us who routinely do very high speed data transfers (1GBit+
streams) use iperf regularly to ensure the end-to-end performance
characteristics of the path.

J


>
> --
> Itamar Shtull-Trauring    http://itamarst.org/
> http://www.zoteca.com -- Python & Twisted consulting
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From screwtape at froup.com  Wed Apr 23 00:37:45 2003
From: screwtape at froup.com (Tim Allen)
Date: Wed, 23 Apr 2003 14:37:45 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422142327.GC8567@frobozz.local>
Message-ID: <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>

On Wednesday, Apr 23, 2003, at 00:23 Australia/Sydney, Andrew Bennetts 
wrote:
> Well, links could be more intelligent here, and it seems other browsers
> manage to figure this out just fine.  Neither the presence of a 
> <!DOCTYPE
> ...> declaration or the opening <html> tag seem sufficient for links to
> realise that it is dealing with actual HTML.  Additionally, I wasn't 
> able to
> successfully configure my local links to recognise .xhtml as being
> html/plain content, even though the menus seemed to suggest I could (it
> happily accepted the entry, but the behaviour was unchanged).

Just as a point of pedanticism, what happens if you configure your 
local links to recognise .xhtml as "text/html" rather than "html/plain"?




From andrew-twisted at puzzling.org  Wed Apr 23 00:49:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 14:49:34 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>
References: <20030422142327.GC8567@frobozz.local> <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>
Message-ID: <20030423044934.GC10754@frobozz.local>

On Wed, Apr 23, 2003 at 02:37:45PM +1000, Tim Allen wrote:
> On Wednesday, Apr 23, 2003, at 00:23 Australia/Sydney, Andrew Bennetts 
> wrote:
> >Well, links could be more intelligent here, and it seems other browsers
> >manage to figure this out just fine.  Neither the presence of a 
> ><!DOCTYPE
> >...> declaration or the opening <html> tag seem sufficient for links to
> >realise that it is dealing with actual HTML.  Additionally, I wasn't 
> >able to
> >successfully configure my local links to recognise .xhtml as being
> >html/plain content, even though the menus seemed to suggest I could (it
> >happily accepted the entry, but the behaviour was unchanged).
> 
> Just as a point of pedanticism, what happens if you configure your 
> local links to recognise .xhtml as "text/html" rather than "html/plain"?

Good question.

Answer: still no luck.

(Incidentally, I tried "html/plain" because of the "Toggle html/plain    \"
entry in the View menu, which made it render the page properly.)

-Andrew.




From peter at engcorp.com  Wed Apr 23 01:02:01 2003
From: peter at engcorp.com (Peter Hansen)
Date: Wed, 23 Apr 2003 01:02:01 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
		<3EA5B567.444B7AB4@engcorp.com> <20030422192159.628b54af.itamar@itamarst.org>
Message-ID: <3EA61E49.66DDFACE@engcorp.com>

Itamar Shtull-Trauring wrote:
> 
> On Tue, 22 Apr 2003 17:34:31 -0400
> Peter Hansen <peter at engcorp.com> wrote:
> 
> > and Twisted for the "back end" of our application.  Zope still uses
> > Python 2.1 so we would be unable to do this with Python 2.2.  Since we
> > will definitely have excised all traces of Zope by the time anything
> > really changes with Twisted and 2.2, I'm not seriously concerned but I
> > thought I'd note it as an interesting data point.
> 
> Arte you using them in the same process? Or as separate processes? Any
> reason you can't install two versions of Python at once?

Same process.  Rewriting as two processes, communicating via 
sockets internally or something, would be larger rework than
just excising Zope, which is a goal for other reasons anyway.

-Peter



From m at moshez.org  Wed Apr 23 01:54:13 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 Apr 2003 05:54:13 -0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030423055413.3842.qmail@green.zadka.com>

On Tue, 22 Apr 2003, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

On Debian woody (stable), Python/GTK+ is available only for Python 2.1.
This means woody users would not be able to use the GUI clients in Twisted
(some of which are GTK+-based). In addition, other libraries which specific
developers might wish to use might be unavailable for Python 2.2. I can
probably conjure up a list of such libraries.

I've already made my position clear on IRC, but figured it should be
documented here as well :)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Wed Apr 23 01:59:27 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 Apr 2003 05:59:27 -0000
Subject: [Twisted-Python] Newbie reading Twisted book!
In-Reply-To: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423055927.3937.qmail@green.zadka.com>

On 22 Apr 2003, Francois Pinard <pinard at iro.umontreal.ca> wrote:

> I just want to share my enthusiasm, so far, at reading the Twisted book
> (from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
> interesting style of prose which triggers pleasure.  Thanks for this.

The book is a collaboration of many Twisted developers.
Andrew and I are responsible for making the book out of the various
contributed documents, but the prose itself is written by many different
people (among the contributors are Glyph, Itamar, Andrew, Jp Calderone
and many others).
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From andrew-twisted at puzzling.org  Wed Apr 23 02:25:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 16:25:13 +1000
Subject: [Twisted-Python] Newbie reading Twisted book!
In-Reply-To: <20030423055927.3937.qmail@green.zadka.com>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca> <20030423055927.3937.qmail@green.zadka.com>
Message-ID: <20030423062513.GD10754@frobozz.local>

On Wed, Apr 23, 2003 at 05:59:27AM -0000, Moshe Zadka wrote:
> On 22 Apr 2003, Francois Pinard <pinard at iro.umontreal.ca> wrote:
> 
> > I just want to share my enthusiasm, so far, at reading the Twisted book
> > (from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
> > interesting style of prose which triggers pleasure.  Thanks for this.
> 
> The book is a collaboration of many Twisted developers.
> Andrew and I are responsible for making the book out of the various
> contributed documents, but the prose itself is written by many different
> people (among the contributors are Glyph, Itamar, Andrew, Jp Calderone
> and many others).

And particularly Brian Warner, who is my personal documentation hero for
writing the PB chapter virtually single-handedly! :)

-Andrew.




From lafou at wanadoo.fr  Wed Apr 23 02:57:50 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 23 Apr 2003 08:57:50 +0200
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423005443.GA48917@doublegemini.com>
References: <1051041270.26073.92.camel@biproc>
	 <20030423005443.GA48917@doublegemini.com>
Message-ID: <1051081070.26792.96.camel@biproc>

On Wed, 2003-04-23 at 02:54, Clark C. Evans wrote:
> On Tue, Apr 22, 2003 at 09:54:30PM +0200, Philippe Lafoucri?re wrote:
> | just a mail to remind you to code flow.zip.
> 
> Done
Thank you !! I'll test it in a few minutes. Feedback in an hour.


> Cooperate() is called when an iterator would block, thus,
> the flow module allows other tasks (connections, users)
> to continue.   If you look at the source for flow.Threaded
> you will see that it raises Cooperate() when the database
> hasn't produced data yet.

Ho well. So, Cooperate() is a kind de defered (for flows) ?

-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From p.mayers at imperial.ac.uk  Wed Apr 23 04:23:34 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Apr 2003 09:23:34 +0100
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030422185921.GA19301@lapdog>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030422172826.GB19382@wildfire0.net.ic.ac.uk> <20030422185921.GA19301@lapdog>
Message-ID: <20030423082334.GC1100@wildfire0.net.ic.ac.uk>

On Tue, Apr 22, 2003 at 09:59:21PM +0300, Tommi Virtanen wrote:
> 	getgrouplist() is as much missing from python stdlib as
> 	initgroups(), so you aren't really helping there.
> 

My apologies - I thought the discussion was *about* the use or non-use
of the initgroups C module, rather than what to do in the absence. My
bad.

Has any thought been given to a PEP for adding initgroups() and/or
getgrouplist() to the Python standard "group" module?

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From kwaker at uch.net  Wed Apr 23 05:29:28 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Wed, 23 Apr 2003 12:29:28 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>
References: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>
Message-ID: <129136193806.20030423122928@uch.net>

Hello Bob,

>> I am writing clone of my worknode in C++, so Twisted version is used
>> just until I complete C++ version. This is because of productivity
>> concerns, I have hit Python's productivity ceiling. After that I may
>> succeed in writing cluster kernel and web interface in Twisted. I.e.
>> still no success story, sorry.

BI> Have you considered using something like BOOST.Python or Pyrex to do 
BI> optimized implementations of the portions that have poor performance?  
BI> Typically, rewriting the whole thing in C/C++ is a bad idea.

I am using just Psyco, but wow! Never saw these two. Thanks, Bob.

-- 
Best regards,
 Dmitry                            mailto:kwaker at uch.net




From warner at lothar.com  Wed Apr 23 05:37:21 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 23 Apr 2003 02:37:21 -0700 (PDT)
Subject: [Twisted-Python] Broken HOWTO documentation
References: <200304161744.09301.mclay@python.net>
Message-ID: <20030423.023721.59490921.warner@lothar.com>

Michael McLay <mclay at python.net> writes:
> I have been trying to get the examples in section 2.4 of the HOWTO to work.
> It looks like the documentation is out of date with the current state of
> the software in the CVS. starting with 2.4.2, the "app.theApplication"
> returns the error
> 
> >>> a = app.theApplication
> Traceback (most recent call last):

twisted.internet.app.theApplication doesn't actually appear until the
application starts running, usually through app.run(), and sometimes with
reactor.run().

> I had problems with the examples in section 2.4.3 and 2.5 as well. In
> section 2.5 the telnet localhost 4040 command returned a different module
> location instead of twisted.protocols.telnet.ShellFactory and when I ran
> dir(__main__) the list of names did not come close to matching what was in
> the example. No twisted objects were listed.

You're right, those examples were ancient. I've updated them to match the
current code, and removed some of the most unhelpful pieces.

thanks,
 -Brian



From tv at twistedmatrix.com  Wed Apr 23 02:12:06 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 23 Apr 2003 09:12:06 +0300
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu> <20030422233538.GA2575@toshi.anaprd01.md.comcast.net> <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>
Message-ID: <20030423061205.GA26917@lapdog>

On Tue, Apr 22, 2003 at 10:30:38PM -0500, Allan Streib wrote:
> > Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
> > http://twistedmatrix.com/users/tv/ldaptor/
> > It's a natively-Twisted LDAP client library.
> 
> I saw that and downloaded the latest .tar.gz, but it was not immediately
> obvious how it worked.  There seemed to be no documentation -- did I miss
> it?  I'll peruse through the code a bit more; I'm all for not reinventing
> the wheel, but on the other hand I'm very happy with the python-ldap
> wrappers for the OpenLDAP API -- they've worked flawlessly for me so far.

	There's no HOWTO-style documentation (because *I* don't
	usually want to read such, so I don't want to write it), but
	there current head of the tree actually has decent
	docstrings. Here's a few links:

	API Docs: http://tv.debian.net/software/ldaptor/api/

	Main site: http://tv.debian.net/software/ldaptor/

	See the latest code: http://ldaptor.bkbits.net/



	There's also *13* example client apps, as of now.

	The search utility should be reasonably obvious:

	http://ldaptor.bkbits.net:8080/ldaptor/anno/bin/ldaptor-search at 1.12?nav=index.html|src/|src/bin


	You also have this great mailing list to ask questions on.

-- 
:(){ :|:&};:



From exarkun at intarweb.us  Wed Apr 23 10:21:05 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 10:21:05 -0400
Subject: [Twisted-Python] UDP changes
In-Reply-To: <20030422233238.64891bce.itamar@itamarst.org>
References: <20030422233238.64891bce.itamar@itamarst.org>
Message-ID: <20030423142105.GB9664@meson.dyndns.org>

On Tue, Apr 22, 2003 at 11:32:38PM -0400, Itamar Shtull-Trauring wrote:
> I checked in some changes to UDP in CVS that may very will improve
> performance significantly. Or not. Could someone check and see if
> there's any difference?
> 
> Code for a UDP throughput benchmark would also be much appreciated.
> 

  I have some code I can use to test this, I'll post results when I get a
chance.

  An apparent problem, though.  On Windows, under Cygwin:

    File "C:\cygwin\home\amir\Twisted\twisted\internet\udp.py", line 39, in ?
      from errno import WSAEAGAIN as EAGAIN
    ImportError: cannot import name WSAEAGAIN  File "C:\cygwin\home\amir\Twisted\twisted\internet\udp.py", line 39, in ?
      from errno import WSAEAGAIN as EAGAIN
    ImportError: cannot import name WSAEAGAIN

  Jp

-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
-- 
 up 34 days, 11:03, 4 users, load average: 1.96, 1.78, 1.70
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030423/0d50ba77/attachment.pgp 

From cce at clarkevans.com  Wed Apr 23 10:33:29 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 14:33:29 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <1051081070.26792.96.camel@biproc>
References: <1051041270.26073.92.camel@biproc> <20030423005443.GA48917@doublegemini.com> <1051081070.26792.96.camel@biproc>
Message-ID: <20030423143329.GA50525@doublegemini.com>

On Wed, Apr 23, 2003 at 08:57:50AM +0200, Philippe Lafoucri?re wrote:
| > Cooperate() is called when an iterator would block, thus,
| > the flow module allows other tasks (connections, users)
| > to continue.   If you look at the source for flow.Threaded
| > you will see that it raises Cooperate() when the database
| > hasn't produced data yet.
| 
| Ho well. So, Cooperate() is a kind de defered (for flows) ?

Well, Cooperate is the whole reason for flow... otherwise you
could just use recursive generators.   Basically, in one of 
your generators (Threaded(QueryIterator())), your code would 
block waiting for a row, etc.  So rather than blocking, Threaded
returns Cooperate.   This return value is handled by the wrappers
all the way up the call chain.  At the top of the call chain is
Deferred, and when Deferrerd gets a Cooperate, it does a 
callLater(0, self), so that other processes can run.  


Suppose you have generator X -> Y -> Z, the picture 
then looks like...

     Wrap  <--  Z
      |
      v
     Wrap  <--> Y
      |   
      v
     Wrap  <--> X
      |
      V
     Deferred
      |
      V
     reactor

So, rather than X talking to Y, talking to Z, each of
your generators is talking to a wrapper instead, which
tries to be as transparent as possible.   The 
wrapper has the following behavior:

    0.  If a value is returned from a generator to 
        a wrapper, it is given to the previous generator
        in the chain; at the bottom of the chain it is
        added to an array which is sent to the deferred's
        callback.  Failures are handled the same way.

    1.  If the value returned is a wrapper, then it adds
        the new wrapper to the top of the stack and 
        starts to process it.

    2.  When Cooperate is returned from a generator, 
        it is sent all the way down the Wrapper linked
        list so that the reactor can re-schedule the
        processing chain (micro-thread).

So, I hope this helps.  Cooperate is the whole reason
for flow... without the need to 'pause' the whole stack
one wouldn't need the wrapper at all.  

;) Clark



From smaniero at sfera.net  Wed Apr 23 11:02:46 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed, 23 Apr 2003 17:02:46 +0200
Subject: [Twisted-Python] FTP Server
Message-ID: <1051110166.3ea6ab16dd249@sferamail.sfera.net>

I'm new user for Twisted.

I've seen an FTP server module in twisted, but I see that the server will be
re-written. There's some implementation of new FTP module?




From cce at clarkevans.com  Wed Apr 23 11:48:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 15:48:23 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423143329.GA50525@doublegemini.com>
References: <1051041270.26073.92.camel@biproc> <20030423005443.GA48917@doublegemini.com> <1051081070.26792.96.camel@biproc> <20030423143329.GA50525@doublegemini.com>
Message-ID: <20030423154823.GA50971@doublegemini.com>

Actually, the diagram isn't quite right.  Here is a better one.

Suppose you have generator X -> Y -> Z, the picture 
then looks like...

     Wrap  <--  Z
         \ 
           \
             \
               v
     Wrap  <-- Y
         \ 
           \
             \
               v
     Wrap  <-- X
      |
      V
     Deferred
      |
      V
     reactor

| So, rather than X talking to Y, talking to Z, each of
| your generators is talking to a wrapper instead, which
| tries to be as transparent as possible.   The 
| wrapper has the following behavior:
| 
|     0.  If a value is returned from a generator to 
|         a wrapper, it is given to the previous generator
|         in the chain; at the bottom of the chain it is
|         added to an array which is sent to the deferred's
|         callback.  Failures are handled the same way.
| 
|     1.  If the value returned is a wrapper, then it adds
|         the new wrapper to the top of the stack and 
|         starts to process it.
| 
|     2.  When Cooperate is returned from a generator, 
|         it is sent all the way down the Wrapper linked
|         list so that the reactor can re-schedule the
|         processing chain (micro-thread).



From lafou at wanadoo.fr  Wed Apr 23 11:36:16 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 23 Apr 2003 17:36:16 +0200
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423143329.GA50525@doublegemini.com>
References: <1051041270.26073.92.camel@biproc>
	 <20030423005443.GA48917@doublegemini.com>
	 <1051081070.26792.96.camel@biproc>
	 <20030423143329.GA50525@doublegemini.com>
Message-ID: <1051112176.22002.55.camel@biproc>

> Well, Cooperate is the whole reason for flow... otherwise you
> could just use recursive generators.   Basically, in one of 
> your generators (Threaded(QueryIterator())), your code would 
> block waiting for a row, etc.  So rather than blocking, Threaded
> returns Cooperate.   This return value is handled by the wrappers
> all the way up the call chain.  At the top of the call chain is
> Deferred, and when Deferrerd gets a Cooperate, it does a 
> callLater(0, self), so that other processes can run.  
> 
> 
> Suppose you have generator X -> Y -> Z, the picture 
> then looks like...
> 
>      Wrap  <--  Z
>       |
>       v
>      Wrap  <--> Y
>       |   
>       v
>      Wrap  <--> X
>       |
>       V
>      Deferred
>       |
>       V
>      reactor
> 
> So, rather than X talking to Y, talking to Z, each of
> your generators is talking to a wrapper instead, which
> tries to be as transparent as possible.   The 
> wrapper has the following behavior:
> 
>     0.  If a value is returned from a generator to 
>         a wrapper, it is given to the previous generator
>         in the chain; at the bottom of the chain it is
>         added to an array which is sent to the deferred's
>         callback.  Failures are handled the same way.
> 
>     1.  If the value returned is a wrapper, then it adds
>         the new wrapper to the top of the stack and 
>         starts to process it.
> 
>     2.  When Cooperate is returned from a generator, 
>         it is sent all the way down the Wrapper linked
>         list so that the reactor can re-schedule the
>         processing chain (micro-thread).
> 
> So, I hope this helps.  Cooperate is the whole reason
> for flow... without the need to 'pause' the whole stack
> one wouldn't need the wrapper at all.  
> 
> ;) Clark


Ho, this makes more sence now. Thank you ! (Maybe you could insert this in flow.py inline
doc ?)




From pinard at iro.umontreal.ca  Wed Apr 23 17:30:00 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 17:30:00 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
Message-ID: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>

Hello, Twisted people.

Out of the box (yet I already did `python setup.py install --prefix=/usr,
as `root'), `admin/runtests' yields a few errors, as shown below.
Should these be expected?  Reported?  This is over a SuSE 8.1 Linux.
`pycrypto' 1.9a6 is installed.



17:21:31 0 pinard at alcyon:/usr/tmp/Twisted-1.0.4 $ admin/runtests

===============================================================================
SKIPPED: testModules (twisted.test.test_doc.DocCoverage)
-------------------------------------------------------------------------------
Activate me when you feel like writing docstrings, and fixing GTK crashing bugs.
===============================================================================
SKIPPED: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
SKIPPED: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
EXPECTED FAILURE: testStor (twisted.test.test_ftp.FTPClientAndServerTests)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_ftp.py", line 276, in testStor
    self.assertEquals(open('HelloThere').read(), expectedContent)
 FailTest: '' != 'Hello\nHello\nHello\nHello\n'
===============================================================================
EXPECTED FAILURE: testSneakyHiddenDoom (twisted.test.test_loopback.LoopbackTCPTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 77, in testSneakyHiddenDoom
    LoopbackTestCase.testSneakyHiddenDoom(self)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 71, in testSneakyHiddenDoom
    self.assertEquals(c.lines, ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3'])
 FailTest: ['DOOM LINE', 'Hello 1', 'Hello 2'] != ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3']
===============================================================================
FAILURE: testModificationTime (twisted.test.test_dirdbm.ShelfTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_dirdbm.py", line 114, in testModificationTime
    self.assert_(0 <= time.time() - self.dbm.getModificationTime("k") < 1)
 FailTest
===============================================================================
FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
    self.assertEquals(lsOut, p.errF.getvalue())
 FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'
===============================================================================
ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
    method(testCase)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
    self.assertEquals(self.server.packets[0][0], "hello world")
 IndexError: list index out of range
-------------------------------------------------------------------------------
Ran 587 tests in 100.385s

FAILED (failures=2, errors=1, skips=3, expectedFailures=2)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Wed Apr 23 17:48:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 17:48:49 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Figures in the manual
Message-ID: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>

Hello, Twisted people.

In the manual found as `doc/howto/book.ps', some figures are inserted in
the text with a 90 degree rotation.  Despite this is not a great evil,
they would appear better if not rotated.  There is one on page 10 (1.1
High-Level Overview of Twisted); another on page 76 (4.6.2 Deferreds -
Visual Explanation); another on page 147 (6.3.3 The Diagram), and maybe
others, I did not try to be exhaustive here.

The figure on page 10 drops off the page, however, and this is more
serious, as one does not figure out how much of it is missing (I mean,
without looking at the HTML rendering of that section, which is OK).

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From acapnotic at twistedmatrix.com  Wed Apr 23 17:57:50 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 23 Apr 2003 14:57:50 -0700
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
In-Reply-To: <004701c30920$ef9cf3f0$0401a8c0@razor>
References: <004701c30920$ef9cf3f0$0401a8c0@razor>
Message-ID: <1051131181.22306.471.camel@troglodyte.funhouse>

On Tue, 2003-04-22 at 15:45, Thomas Weholt wrote:
> I was hoping some of the things at PyCon related to Twisted would be
> available for all of us who didn't have a chance to attend. Especially
> the part about deployment of Twisted websites.
>  
> Any information about this ??

All the source material for the Twisted PyCon papers and slides should
be in doc/historic/2003/pycon/.


Hey gang, what's the recommended procedure to make them pretty (i.e.
in-line the source examples, etc)?  Is that something that's supposed to
be part of the release process but we forgot to add to
admin/process-docs when we added these papers?  And if these papers are
really going to be static and unchanging, what do you think of
committing their rendered forms to the repository?

-- 
The moon is last quarter, 49.3% illuminated, 22.2 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030423/acf05839/attachment.pgp 

From astreib at indiana.edu  Wed Apr 23 18:00:52 2003
From: astreib at indiana.edu (Allan Streib)
Date: Wed, 23 Apr 2003 17:00:52 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030423005154.GA31760@meson.dyndns.org>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030423005154.GA31760@meson.dyndns.org>
Message-ID: <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>

On Tue, 22 Apr 2003, Jp Calderone wrote:

>   Here's something that might help (note that I am not familiar with the
> python-ldap API, so I'm just guessing at how it is laidd out):

Your example works nicely with only minor changes.  Here's what I wrote
just to verify it works.  Many thanks!

Allan


from twisted.internet import reactor, defer
import ldap

class LDAPQueryTracker:
    def __init__(self):
        self._ids = {}
        self.ldapCon = ldap.initialize('ldap://localhost/')
        self.ldapCon.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
        self.ldapCon.simple_bind_s('cn=Manager,dc=iu,dc=edu', 'xxxxxx')

    def search(self, searchargs):
        id = self.ldapCon.search(searchargs['base'],
                                 ldap.SCOPE_SUBTREE,
                                 searchargs['filter'])
        self._ids[id] = defer.Deferred()
        reactor.callLater(0, self.checkResults)
        return self._ids[id]

    def checkResults(self):
        for (id, deferedResult) in self._ids.items():
            resultType, resultData = self.ldapCon.result(msgid=id,
                                                         all=1,
                                                         timeout=0)
            if resultType is not None:
                del self._ids[id]
                deferedResult.callback(resultData)

            if self._ids:
                reactor.callLater(0, self.checkResults)



#A simple callback
def printResults(results):
    for result in results:
        print result

def printFailure(failure):
    print "LDAP Operation failed"
    failure.printTraceback()


qt = LDAPQueryTracker()
deferedResult = qt.search({'base': 'ou=people,dc=iu,dc=edu',
                           'filter': '(uid=astreib)'})
deferedResult.addCallbacks(printResults, printFailure)

reactor.run()




From exarkun at intarweb.us  Wed Apr 23 18:09:30 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 18:09:30 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423220930.GA14554@meson.dyndns.org>

On Wed, Apr 23, 2003 at 05:30:00PM -0400, Francois Pinard wrote:
> Hello, Twisted people.
> 
> Out of the box (yet I already did `python setup.py install --prefix=/usr,
> as `root'), `admin/runtests' yields a few errors, as shown below.
> Should these be expected?  Reported?  This is over a SuSE 8.1 Linux.
> `pycrypto' 1.9a6 is installed.
> 

  Thanks for the report.

> 
> 
> [snip - stuff I don't have thoughts on]
> ===============================================================================
> FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
> -------------------------------------------------------------------------------
> Traceback (most recent call last):
>    File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
>     self.assertEquals(lsOut, p.errF.getvalue())
>  FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'

  Woops.  This is a localization problem.  Maybe it should be an expected
skip for certain values of LC_LANG?  Or maybe we should just not use ls.


> ===============================================================================
> ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
> -------------------------------------------------------------------------------
> Traceback (most recent call last):
>    File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
>     method(testCase)
>    File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
>     self.assertEquals(self.server.packets[0][0], "hello world")
>  IndexError: list index out of range
> -------------------------------------------------------------------------------

  Multicast is known to be broken in a few situations.  Can you describe
your network setup.  In particular, do you have a firewall configured, or is
the machine performing NAT?

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 34 days, 19:03, 7 users, load average: 0.31, 0.48, 0.53
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030423/688ed719/attachment.pgp 

From warner at lothar.com  Wed Apr 23 18:57:34 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 23 Apr 2003 15:57:34 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
 <20030423220930.GA14554@meson.dyndns.org>
Message-ID: <20030423.155734.48529138.warner@lothar.com>

> Woops.  This is a localization problem.  Maybe it should be an expected
> skip for certain values of LC_LANG?  Or maybe we should just not use ls.

Hmm, it means popen2 used french while reactor.spawnProcess used english.
That test clears the environment before running spawnProcess.. maybe we
should let it inherit the complete environment from its parent.

Could you try the attached patch and see if it fixes the problem?

> Multicast is known to be broken in a few situations.  Can you describe
> your network setup.  In particular, do you have a firewall configured, or is
> the machine performing NAT?

I've seen that test fail on machines that don't have any external network
interfaces configured (just the loopback interface). My guess is that it has
to do with the 'MULTICAST' flag, which isn't usually set on lo.

thanks,
 -Brian

-------------- next part --------------
Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.72
diff -u -r1.72 default.py
--- twisted/internet/default.py	21 Apr 2003 15:32:15 -0000	1.72
+++ twisted/internet/default.py	23 Apr 2003 22:55:48 -0000
@@ -149,8 +149,10 @@
 
     # IReactorProcess
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None,
-                     uid=None, gid=None, usePTY = 0):
+    def spawnProcess(self, processProtocol, executable, args=(), env=None,
+                     path=None, uid=None, gid=None, usePTY=0):
+        if env == None:
+            env = os.environ
         p = platform.getType()
         if p == 'posix':
             if usePTY:
Index: twisted/internet/interfaces.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/interfaces.py,v
retrieving revision 1.78
diff -u -r1.78 interfaces.py
--- twisted/internet/interfaces.py	21 Apr 2003 19:53:39 -0000	1.78
+++ twisted/internet/interfaces.py	23 Apr 2003 22:55:49 -0000
@@ -324,7 +324,7 @@
 
 class IReactorProcess(Interface):
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None, uid=None, gid=None, usePTY=0):
+    def spawnProcess(self, processProtocol, executable, args=(), env=None, path=None, uid=None, gid=None, usePTY=0):
         """Spawn a process, with a process protcol.
 
         @param processProtocol: a L{ProcessProtocol} instance
@@ -337,7 +337,7 @@
                      executable's name.
 
         @param env: the environment variables to pass to the processs; a
-                    dictionary of strings.
+                    dictionary of strings. If 'None', use os.environ.
 
         @param path: the path to run the subprocess in - defaults to the
                      current directory.
Index: twisted/test/test_process.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_process.py,v
retrieving revision 1.38
diff -u -r1.38 test_process.py
--- twisted/test/test_process.py	14 Apr 2003 06:28:27 -0000	1.38
+++ twisted/test/test_process.py	23 Apr 2003 22:55:49 -0000
@@ -378,7 +378,7 @@
         if not os.path.exists('/bin/ls'): raise RuntimeError("/bin/ls not found")
 
         p = Accumulator()
-        reactor.spawnProcess(p, '/bin/ls', ["/bin/ls", "ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"], {}, "/tmp",
+        reactor.spawnProcess(p, '/bin/ls', ["/bin/ls", "ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"], None, "/tmp",
                              usePTY=self.usePTY)
 
         while not p.closed:
@@ -391,7 +391,7 @@
         else: raise RuntimeError("gzip not found in /bin or /usr/bin")
         s = "there's no place like home!\n" * 3
         p = Accumulator()
-        reactor.spawnProcess(p, cmd, [cmd, "-c"], {}, "/tmp",
+        reactor.spawnProcess(p, cmd, [cmd, "-c"], None, "/tmp",
                              usePTY=self.usePTY)
         p.transport.write(s)
         p.transport.closeStdin()

From pinard at iro.umontreal.ca  Wed Apr 23 19:06:24 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 19:06:24 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `mktap --help SERVER'
Message-ID: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>

Hi, still me.

After having quickly glanced over the manual, I'm reading it a bit more
carefully now, and if comments like this message continue to pop up, you
will observe my progression, or non-progression if I cannot find enough
time :-), without my real will.  Sigh!  OK, let not me be too shy...

Page 21 (2.2.3 mktap and tapconvert) says: "For a given server, `mktap
--help <name>' shows the possible configuration options.".  The following
shell script:

---------------------------------------------------------------------->
#!/bin/bash
for s in coil conch dns ftp im inetd mail manhole news parent pinger ponger \
	 portforward procmon sibling socks telnet toc web words zoot; do
  echo $s =====================================
  mktap --help $s < /dev/null
done
----------------------------------------------------------------------<

seems to show that this is not completely true.

* For coil, dns, ftp, im, mail, pinger, ponger, portforward, socks, telnet,
  toc, web, words and zoot, I got no output at all, so I presume this
  may be interpreted as meaning that these servers use no option.  Yet,
  for all those, a `.tap' file was created, which is probably not what
  one expect from a mere `--help' option.  So maybe the `--help' did not
  work so well after all.

* I also got many DeprecationWarnings, which probably should not be there.
  Let's see:

  + conch yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    setApplication is deprecated, use setServiceCollection instead.
file: /usr/lib/python2.2/site-packages/twisted/scripts/mktap.py; line: 217
----------------------------------------------------------------------<

  + parent yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    You have to pass an authorizer separately from an application now.
file: /usr/lib/python2.2/site-packages/twisted/sibling/parentserv.py; line: 23

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/cred/service.py; line: 84

WARNING: exceptions.DeprecationWarning::
    setApplication is deprecated, use setServiceCollection instead.
file: /usr/lib/python2.2/site-packages/twisted/python/reflect.py; line: 192

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/spread/pb.py; line: 959
----------------------------------------------------------------------<

  + sibling yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    You have to pass an authorizer separately from an application now.
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 68

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/cred/service.py; line: 84

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 80

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 82

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/spread/pb.py; line: 959
----------------------------------------------------------------------<

  and for these three cases as well, a `.tap' file was created.  So maybe
  `--help' does not work as documented for these either.

* manhole did ask for supplementary information, like this:

---------------------------------------------------------------------->
Password: 
Confirm: 
----------------------------------------------------------------------<

  While sorting and cleaning out my various tries, I also found another
  case for `mktap --help manhole' which yielded the following:

---------------------------------------------------------------------->
An error unexpected occurred:
  File "/usr/lib/python2.2/site-packages/twisted/tap/manhole.py", line 45, in opt_password
    self['password'] = util.getPassword(confirm=1)
  File "/usr/lib/python2.2/site-packages/twisted/python/util.py", line 154, in getPassword
    if password[-1] == '\n':
IndexError: string index out of range
----------------------------------------------------------------------<

  yet I do not find back the exact recipe I use for producing this.
  Maybe the traceback will give hints about another problem?  In any case,
  a `.tap' file was created.

* For inetd, I got:

---------------------------------------------------------------------->
An error unexpected occurred:
  File "/usr/lib/python2.2/site-packages/twisted/runner/inetdconf.py", line 90, in parseLine
    self.parseFields(*line.split())
  File "/usr/lib/python2.2/site-packages/twisted/runner/inetdconf.py", line 174, in parseFields
    raise InvalidServicesConfError, 'Invalid port/protocol:' + \
InvalidServicesConfError: Invalid port/protocol:'3322-3325'
----------------------------------------------------------------------<

  At least, no `.tap' was created. :-)

* Both news and procmon provided the expected help output, and created no
  `.tap'.  However, the help was assorted with an error diagnostic,
  which is probably not appropriate for a mere help request.

  + news help output was prefixed with:

---------------------------------------------------------------------->
Usage Error: No newsgroups specified
----------------------------------------------------------------------<

  + procmon help output was suffixed with:

---------------------------------------------------------------------->
Wrong number of arguments.
----------------------------------------------------------------------<

  Even if the errors were expected, they should _ideally_ be presented
  both before, or both after; and both have the `Usage Error:' prefix,
  or both not have it.

All in all, I'm left with the impression that `--help' does not work,
or at least, not as documented in the book.

It might be worth, maybe, adding another unit test which makes sure that
`mktap --help <name>' produces for all servers, some output (on standard
output ideally, not standard error), or no output at all, but surely no
traceback, and with an exit status that would be consistently zero.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From exarkun at intarweb.us  Wed Apr 23 19:35:56 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 19:35:56 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `mktap --help SERVER'
In-Reply-To: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
References: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423233556.GB14554@meson.dyndns.org>

On Wed, Apr 23, 2003 at 07:06:24PM -0400, Francois Pinard wrote:
> Hi, still me.

  Hi :)

> 
> After having quickly glanced over the manual, I'm reading it a bit more
> carefully now, and if comments like this message continue to pop up, you
> will observe my progression, or non-progression if I cannot find enough
> time :-), without my real will.  Sigh!  OK, let not me be too shy...
> 
> Page 21 (2.2.3 mktap and tapconvert) says: "For a given server, `mktap
> --help <name>' shows the possible configuration options.".  The following
> shell script:

  After looking at this for more minutes than it probably merited, I feel
that this usage should stay gone (rather than have mktap be fixed to
work as documented).

  It requires --help to be both a flag and a parameter, which usage does not
support directly.  It is also trivially achieved by reversing the order of
the arguments to be "mktap <name> --help".

  Any objections?  If not, I'll check in a doc fix tomorrow.

> [snip]
> 
> All in all, I'm left with the impression that `--help' does not work,
> or at least, not as documented in the book.

  Thank you for pointing this out.

> 
> It might be worth, maybe, adding another unit test which makes sure that
> `mktap --help <name>' produces for all servers, some output (on standard
> output ideally, not standard error), or no output at all, but surely no
> traceback, and with an exit status that would be consistently zero.
> 

  I agree.  There are effectively no unit tests for either mktap or twistd,
and the acceptance tests only test it in well-formed cases, which are nice,
but probably the least important ones to *test*, since that is how the
developers will all be invoked the tools (and so they will get plenty of
testing that way).

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 34 days, 19:03, 7 users, load average: 0.31, 0.48, 0.53
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030423/b66633e1/attachment.pgp 

From pinard at iro.umontreal.ca  Wed Apr 23 19:48:42 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 19:48:42 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <20030423220930.GA14554@meson.dyndns.org>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
	<20030423220930.GA14554@meson.dyndns.org>
Message-ID: <oqfzo8wzad.fsf@alcyon.progiciels-bpi.ca>

[Jp Calderone]

>   Thanks for the report.

OK.  So it was OK to send it. :-)

> > ===============================================================================
> > FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
> > -------------------------------------------------------------------------------
> > Traceback (most recent call last):
> >    File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
> >     self.assertEquals(lsOut, p.errF.getvalue())
> >  FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'

>   Woops.  This is a localization problem.  Maybe it should be an expected
> skip for certain values of LC_LANG?  Or maybe we should just not use ls.

And / or, maybe, the overall testing environment (not the user) should
reset LANG, LANGUAGE, LC_LANG, LC_ALL and LC_MESSAGES before proceeding,
all to non set, or less ideally, set to empty, to `C' or to `POSIX'.

> > ===============================================================================
> > ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
> > -------------------------------------------------------------------------------
> > Traceback (most recent call last):
> >    File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
> >     method(testCase)
> >    File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
> >     self.assertEquals(self.server.packets[0][0], "hello world")
> >  IndexError: list index out of range
> > -------------------------------------------------------------------------------

>   Multicast is known to be broken in a few situations.  Can you describe
> your network setup.  In particular, do you have a firewall configured, or is
> the machine performing NAT?

Wow!  All this from a mere "list index out of range"! :-)

There is indeed a firewall on the machine I use for testing Twisted, at
least on the network card facing the Internet, and masquereding is done
for internal machines forwarded from a second network card.  I would not
think beforehand that localhost as limitations against itself, however,
but am never fully sure, I do not often visit the firewall configuration.
I naively think that I can access localhost:ANYPORT without the firewall
being in the way.

I'm willing to revisit the firewall if you have a suggestion for me about
how to carefully open it, enough for Twisted to work reliably.

I surely could use, for testing Twisted, an internal machine which has
no intrinsic firewall, on some other internal network, but this might
not be where I want to run it in the long run.  Opinions?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From andrew-twisted at puzzling.org  Wed Apr 23 22:17:44 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 24 Apr 2003 12:17:44 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1051110166.3ea6ab16dd249@sferamail.sfera.net>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net>
Message-ID: <20030424021744.GA13306@frobozz.local>

On Wed, Apr 23, 2003 at 05:02:46PM +0200, Stefano Maniero wrote:
> I'm new user for Twisted.
> 
> I've seen an FTP server module in twisted, but I see that the server will be
> re-written. There's some implementation of new FTP module?

Sadly, the new module lives only in my head at the moment.  I'd guess I'll
probably have it in CVS within a month.

Do you just want a simple FTP server that serves files from the filesystem?
If so, you may be able to use the existing code, but beware... it doesn't
have much access control beyond "authenticated" and "not authenticated",
which means that if you have anonymous access enabled, *anyone* use any FTP
command, including STOR, and so on.  If you want to use the existing code,
make sure to run it from a directory whose contents (including the directory
itself!) are read-only, even for the owner.  It *might* be safe to use then,
but I haven't rigorously checked that :)

What do you want to use an FTP server for?   :)

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 23 22:22:48 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 24 Apr 2003 12:22:48 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - Figures in the manual
In-Reply-To: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>
References: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030424022248.GB13306@frobozz.local>

On Wed, Apr 23, 2003 at 05:48:49PM -0400, Francois Pinard wrote:
> Hello, Twisted people.
> 
> In the manual found as `doc/howto/book.ps', some figures are inserted in
> the text with a 90 degree rotation.  Despite this is not a great evil,
> they would appear better if not rotated.  There is one on page 10 (1.1
> High-Level Overview of Twisted); another on page 76 (4.6.2 Deferreds -
> Visual Explanation); another on page 147 (6.3.3 The Diagram), and maybe
> others, I did not try to be exhaustive here.

The rotation is known bug.  Thanks for the reminder, though!

> The figure on page 10 drops off the page, however, and this is more
> serious, as one does not figure out how much of it is missing (I mean,
> without looking at the HTML rendering of that section, which is OK).

This works ok for me locally (using a copy of book.ps I built myself).  I
suspect the hack I use to make dia scale down the images when converting to
.eps is broken with some versions of dia.  I've been meaning to find a nicer
way to do this anyway...

Thanks for bug reports!

-Andrew.




From nafai at twistedmatrix.com  Wed Apr 23 02:56:08 2003
From: nafai at twistedmatrix.com (Travis B. Hartwell)
Date: Wed, 23 Apr 2003 00:56:08 -0600
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
In-Reply-To: <004701c30920$ef9cf3f0$0401a8c0@razor> (Thomas Weholt's message
 of "Wed, 23 Apr 2003 00:45:55 +0200")
References: <004701c30920$ef9cf3f0$0401a8c0@razor>
Message-ID: <8765p5zoqf.fsf@lutya.travishartwell.net>

Thomas Weholt <2002 at weholt.org> writes:

> Hi,
>  
> I was hoping some of the things at PyCon related to Twisted would be
> available for all of us who didn't have a chance to
> attend. Especially the part about deployment of Twisted websites.
>  
> Any information about this ??
>  
> Thomas

Thomas,

We should probably have those linked somewhere from
twistedmatrix.com.  Hopefully, that can be resolved soon.  Until then,
look in the doc/historic/2003/pycon directory for all of the papers
and most of the slides (I think).  This can be found in the 1.0.4
release or from Twisted CVS.

I was the one who gave the Twisted Web tutorial.  Unfortunately, I
didn't get a paper written.  I do, however, have slides.  They are
with the docs mentioned above or you can look at them at:

http://www.twistedmatrix.com/users/nafai/pycon-paper/

If you have any questions, feel free to ask.  Sorry if the slides are
a little sparse.

Travis



From news at exultants.org  Wed Apr 23 02:41:21 2003
From: news at exultants.org (Van Gale)
Date: Tue, 22 Apr 2003 23:41:21 -0700
Subject: [Twisted-Python] Re: SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <b85cgk$d6$1@main.gmane.org>

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you?

I'm not using Twisted yet, but I expect to use it within a month or two. 
  I'll be porting an asyncore/chat based app developed using python 2.0. 
  I will definitely be adding some 2.2 features at the same time, so, in 
other words, no, I don't need 2.1 support :)

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet, but this application will see some serious usage starting in 
September.  It could potentially see peaks of 90k-200k clients 
connecting in a 24 hour span.  Hopefully I'll be able to report positive 
results to this list during load-tests.  Rewriting outside of 
python/twisted is obviously a no-go at this point, so if load testing 
comes up short we'll just throw more hardware at it!! :O

Side note: we're going to be using DNS round robin + Wackamole + Spread 
toolkit for server load balancing.  I haven't needed to use the python 
spread interface developed by Jeremy, Guido and Tim yet 
(http://www.python.org/other/spread/) but I'm wondering if anyone's 
tried to integrate that into Twisted?  I'd love for spread mailboxes to 
be processed through reactor like any other socket :)





From wilk-ml at flibuste.net  Thu Apr 24 06:30:33 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 24 Apr 2003 12:30:33 +0200
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <87adegnq5y.fsf@flibuste.net>

Itamar Shtull-Trauring <itamar at itamarst.org> writes:

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

no. But why don't wait somes month and switch directly to python2.3 ?

> 
> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

I did an online scrabble game. But i did'nt use a lot of feature of
twisted, it's a quick port of the cgi version.

-- 
William Dod? - http://flibuste.net



From mvanderheijden at fininfo.fr  Thu Apr 24 11:43:47 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Thu, 24 Apr 2003 17:43:47 +0200
Subject: [Twisted-Python] win32all and spawnProcess
Message-ID: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>

Hello ,

twisted/internet/defaults.py contains the function spawnProcess 

This function doesn't seem to work on windows, and contains the following
comment
   # This is possible, just needs work - talk to itamar if you want this.

Who is Itamar ?

Thanks in advance,

Maarten




  def spawnProcess(self, processProtocol, executable, args=(), env={},
path=None,
                     uid=None, gid=None, usePTY = 0):
        p = platform.getType()
        if p == 'posix':
            if usePTY:
                return process.PTYProcess(self, executable, args, env, path,
processProtocol, uid, gid, usePTY)
            else:
                return process.Process(self, executable, args, env, path,
processProtocol, uid, gid)
     
        #elif p == "win32":
        #    if win32process:
        #        threadable.init(1)
        #        import win32eventreactor
        #        return win32eventreactor.Process(self, processProtocol,
executable, args, env, path)
        #    else:
        #        raise NotImplementedError, "process not available since
win32all is not installed"
        else:
            raise NotImplementedError, "process only available in this
reactor on POSIX"


This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From mvanderheijden at fininfo.fr  Thu Apr 24 11:48:30 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Thu, 24 Apr 2003 17:48:30 +0200
Subject: [Twisted-Python] RE: win32all and spawnProcess
Message-ID: <59720C230F8BC54098777277F5E1068881BFEB@fininfomail.fininfo.grp>

Sorry ,

I did find the reference to Itmar.

Maintainer: U{Itamar Shtull-Trauring<mailto:twisted at itamarst.org>}

Maarten

> -----Message d'origine-----
> De:	VAN DER HEIJDEN Maarten 
> Date:	24 avr. 03 17:44
> ?:	'twisted-python at twistedmatrix.com'
> Objet:	win32all and spawnProcess
> 
> Hello ,
> 
> twisted/internet/defaults.py contains the function spawnProcess 
> 
> This function doesn't seem to work on windows, and contains the following
> comment
>    # This is possible, just needs work - talk to itamar if you want this.
> 
> Who is Itamar ?
> 
> Thanks in advance,
> 
> Maarten
> 
> 
> 
> 
>   def spawnProcess(self, processProtocol, executable, args=(), env={},
> path=None,
>                      uid=None, gid=None, usePTY = 0):
>         p = platform.getType()
>         if p == 'posix':
>             if usePTY:
>                 return process.PTYProcess(self, executable, args, env,
> path, processProtocol, uid, gid, usePTY)
>             else:
>                 return process.Process(self, executable, args, env, path,
> processProtocol, uid, gid)
>      
>         #elif p == "win32":
>         #    if win32process:
>         #        threadable.init(1)
>         #        import win32eventreactor
>         #        return win32eventreactor.Process(self, processProtocol,
> executable, args, env, path)
>         #    else:
>         #        raise NotImplementedError, "process not available since
> win32all is not installed"
>         else:
>             raise NotImplementedError, "process only available in this
> reactor on POSIX"


Ce message et toutes les pi?ces jointes (ci-apr?s le "message") sont ?tablis ? l'intention exclusive de ses destinataires et sont confidentiels. Si vous recevez ce message par erreur, merci de le d?truire et d'en avertir imm?diatement l'exp?diteur. Toute utilisation de ce message non conforme ? sa destination, modification, diffusion ou toute publication, totale ou partielle, est interdite, sauf autorisation expresse.FININFO (et ses filiales) d?cline(nt) toute responsabilit? au titre de ce message, dans l'hypoth?se ou il aurait ?t? modifi?, alt?r?, falsifi? ou encore ?dit? ou diffus? sans autorisation.
-----------------------------------------------------
This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From itamar at itamarst.org  Thu Apr 24 11:59:37 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Apr 2003 11:59:37 -0400
Subject: [Twisted-Python] win32all and spawnProcess
In-Reply-To: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>
Message-ID: <20030424115937.21fef653.itamar@itamarst.org>

On Thu, 24 Apr 2003 17:43:47 +0200
VAN DER HEIJDEN Maarten <mvanderheijden at fininfo.fr> wrote:

> twisted/internet/defaults.py contains the function spawnProcess 
> 
> This function doesn't seem to work on windows, and contains the
> following comment
>    # This is possible, just needs work - talk to itamar if you want
>    # this.

You can use spawnProcess on windows by using the win32 reactor, see the
Choosing Reactors howto for instructions.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Thu Apr 24 12:59:52 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 24 Apr 2003 12:59:52 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <87adegnq5y.fsf@flibuste.net>
Message-ID: <2A7DE011-7676-11D7-8222-000A95686CD8@redivi.com>

On Thursday, Apr 24, 2003, at 06:30 America/New_York, William Dode 
wrote:

> Itamar Shtull-Trauring <itamar at itamarst.org> writes:
>
>> 1. Do you require Python 2.1 support in Twisted? If so, for what 
>> reason?
>> How problematic would a switch to 2.2 be for you? Please try to answer
>> within a week so we can have some immediate info.
>
> no. But why don't wait somes month and switch directly to python2.3 ?

Well I don't think any of us have found that python 2.3 has significant 
new conveniences that can't be done adequately in 2.2 (i.e., it's 
possible to implement the itertools module in pure python, emulate the 
new dict creation behavior, etc.).  It seems to be mostly new modules, 
bugfixes, and performance enhancements.  Moving from 2.1 to 2.2 does 
have significant new features, though (mostly generators and new style 
classes).

Also, when 2.3 is released, hopefully in a few months, it'll probably 
take the better part of a year /after/ that for python 2.3 to come into 
common use (i.e. ISPs, linux distributions, etc.).

-bob




From tv-nospam.da39a3ee5e6b4b0d3255bfef95601890afd80709 at tv.debian.net  Thu Apr 24 03:42:01 2003
From: tv-nospam.da39a3ee5e6b4b0d3255bfef95601890afd80709 at tv.debian.net (Tommi Virtanen)
Date: Thu, 24 Apr 2003 10:42:01 +0300
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu> <20030423005154.GA31760@meson.dyndns.org> <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>
Message-ID: <20030424074201.GB2882@lapdog>

On Wed, Apr 23, 2003 at 05:00:52PM -0500, Allan Streib wrote:
> class LDAPQueryTracker:
>     def __init__(self):
>         self._ids = {}
>         self.ldapCon = ldap.initialize('ldap://localhost/')
>         self.ldapCon.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
>         self.ldapCon.simple_bind_s('cn=Manager,dc=iu,dc=edu', 'xxxxxx')

	This blocks right here; maybe it blocks in the ldap.initialize part, too.

	And it's error return mechanism seems to be by way of
	exceptions, so making it async will change the API, too.

> #A simple callback
> def printResults(results):
>     for result in results:
>         print result
> 
> def printFailure(failure):
>     print "LDAP Operation failed"
>     failure.printTraceback()
> 
> 
> qt = LDAPQueryTracker()
> deferedResult = qt.search({'base': 'ou=people,dc=iu,dc=edu',
>                            'filter': '(uid=astreib)'})
> deferedResult.addCallbacks(printResults, printFailure)
> 
> reactor.run()

	Doing the same with Ldaptor (not tested):

class Search(ldapclient.LDAPClient):
    def connectionMade(self):
	d=self.bind()
	d.addCallback(self._handle_bind_success)
	d.addErrback(self.factory.deferred.errback)

    def _handle_bind_success(self, x):
	matchedDN, serverSaslCreds = x
	o=ldapsyntax.LDAPObject(client=self,
				dn='ou=people,dc=iu,dc=edu')
	d=o.search(filterText='(uid=astreib)')
	d.chainDeferred(self.factory.deferred)

class SearchFactory(protocol.ClientFactory):
    protocol = Search

    def __init__(self, deferred):
	self.deferred=deferred

    def clientConnectionFailed(self, connector, reason):
	self.deferred.errback(reason)

d=defer.Deferred()
s=SearchFactory(d)
d.addCallbacks(printResults, printFailure)
d.addBoth(lambda x: reactor.stop())

# service discovery from DNS, no need to know host name of server
dn = distinguishedname.DistinguishedName(stringValue='ou=people,dc=iu,dc=edu')
c = ldapconnector.LDAPConnector(reactor, dn, s)
c.connect()

reactor.run()


-- 
:(){ :|:&};:



From radix at twistedmatrix.com  Thu Apr 24 21:21:36 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 24 Apr 2003 21:21:36 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
Message-ID: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>

I'm going to be hacking on DatabaseAuthorizer soon(er or later).

 * Is anybody using it? The current code is pretty crufty, so
   I'll probably just replace it once the hacking is done, unless
   it's actually being used.
 * Does anyone have a wishlist for it?

Right now I'm thinking of parameterizing what goes into the 
twisted_perspectives schema, so we can easily add 
perspective-class-specific state.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Thu Apr 24 21:52:05 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Apr 2003 20:52:05 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030423055413.3842.qmail@green.zadka.com>
Message-ID: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, April 23, 2003, at 12:54 AM, Moshe Zadka wrote:

> On Debian woody (stable), Python/GTK+ is available only for Python 2.1.
> This means woody users would not be able to use the GUI clients in 
> Twisted
> (some of which are GTK+-based). In addition, other libraries which 
> specific
> developers might wish to use might be unavailable for Python 2.2. I can
> probably conjure up a list of such libraries.

Python/GTK+ is only necessary for two arguably experimental portions of 
Twisted - im and manhole.  I think that it is acceptable to remove 
support in Debian woody for these, considering that more substantial, 
stable portions of Twisted (e.g. Conch, and twisted.web SSL) don't 
work, since they require libraries that are missing on woody.  Future 
GTK+ work is going to be using GTK2 anyway, considering that it is 
vastly more stable for the kinds of things we want to do, most of which 
involve displaying large, scrolling blocks of text.

PyQT is technically in Debian, but the version in Woody isn't very 
useful, and I haven't heard from anyone using it with Twisted.

There are no third-party programs that support Debian woody which 
require GTK to be working with Twisted.

As to other libraries - my primary concern was with database drivers 
which may have been incompatible with Python-2.2.  However, it appears 
that all DB-API compatible drivers that come with Woody have both 
python-2.1 and python-2.2 versions.

I've just spent the last few weeks working without the 2.1-support 
constraint, and I can see why all the Twisted developers have been 
clamoring for 2.2 :-).  While I have some concern that moving along 
with rearrangements of Python's basic semantics encourages the 
development of useless, whiz-bang infrastructure, the fact is that the 
new object model is substantially more amenable to necessary features 
like those implemented in twisted.python.components and 
twisted.python.reflect.

The results of this survey appear to indicate that most Twisted users 
are not using Python-2.1, and those that are plan to stop in the near 
future.  Also, as far as I can tell, nobody on the development team 
uses Python 2.1 any more, and so test failures related to 2.1 
incompatibilities are always caught after the fact.

I think it would improve our development speed and the general attitude 
of the team, so I propose we cut over to 2.2 immediately.  For the 
reasons I gave above, I don't think the GTK situation is important 
enough to prevent this.  If anyone else would like to give reasons for 
not going ahead with this, please speak now or forever hold your peace 
:)

(This does not mean "everybody check in 2.2-only code".  It means "get 
ready to check in 2.2-only code".  I will hopefully announce open 
season on 2.2 features later this week.)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qJTMvVGR4uSOE2wRAifhAJ4v2MGaU3lYFQgF2ft+yMFHxpBw2ACglh+u
60N1LM62g2voaw2ygpT2P9Q=
=wsDm
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Apr 24 22:12:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 25 Apr 2003 02:12:28 +0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030425021228.GA55361@doublegemini.com>

On Tue, Apr 22, 2003 at 03:48:27PM -0400, Itamar Shtull-Trauring wrote:
| 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
| How problematic would a switch to 2.2 be for you? Please try to answer
| within a week so we can have some immediate info.

I use 2.2 in my production environment.  However...

Python 2.1 was the "blessed" version of Python that Guido had
said would be supported for a _long_ time out (like 1.5 was).
It is also, as Moshe points out, the Debian standard and I know
many debian people who won't be upgrading.    This may play
a role in 'hosted environments' where people would like to 
deploy Twisted, but really can't reinstall Python. 

Also, with etrepum's recent patches to twisted.python.compat, 
much Twisted can still use the iterator protocol (compatible 
with 2.1).   Re-writing generators as 2.1 iterators is tedious,
but quite straight forward.

I can see some places where the use of generators is too much of
a goodness to pass up.   Why not mark those modules explicitly,
and make them 2.2 only?  For example, Woven could probably really
use 2.2 features.   In this way those users who insist on 2.1 can
use the bulk of (but perhaps not all of) Twisted, in such a way
that we don't compromise future development.

Also, someone posted that it didn't take too many changes to 
make Twisted 2.0 compatible.  Perhaps we should consider 
committing those changes.   Nested scopes are nice, especially
in application code, but they certainly arn't essential 
to library development.

Best,

Clark



From itamar at itamarst.org  Thu Apr 24 22:07:51 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Apr 2003 22:07:51 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425021228.GA55361@doublegemini.com>
References: <20030422154827.17021602.itamar@itamarst.org>
	<20030425021228.GA55361@doublegemini.com>
Message-ID: <20030424220751.6316db31.itamar@itamarst.org>

On Fri, 25 Apr 2003 02:12:28 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Python 2.1 was the "blessed" version of Python that Guido had
> said would be supported for a _long_ time out (like 1.5 was).

No, that was 2.2.

Debian Woody has Python 2.2 included.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Thu Apr 24 22:52:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 25 Apr 2003 02:52:32 +0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030424220751.6316db31.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425021228.GA55361@doublegemini.com> <20030424220751.6316db31.itamar@itamarst.org>
Message-ID: <20030425025232.GA56114@doublegemini.com>

On Thu, Apr 24, 2003 at 10:07:51PM -0400, Itamar Shtull-Trauring wrote:
| > Python 2.1 was the "blessed" version of Python that Guido had
| > said would be supported for a _long_ time out (like 1.5 was).
| 
| No, that was 2.2.
| Debian Woody has Python 2.2 included.

Oh, you are right. Python-In-A-Tie [1] *is* 2.2

[1] http://www.python-in-business.org/sigs/PIT/



From peter at engcorp.com  Thu Apr 24 22:49:17 2003
From: peter at engcorp.com (Peter Hansen)
Date: Thu, 24 Apr 2003 22:49:17 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org> <20030425021228.GA55361@doublegemini.com>
Message-ID: <3EA8A22D.B2F4B3B5@engcorp.com>

"Clark C. Evans" wrote:
> 
> Also, someone posted that it didn't take too many changes to
> make Twisted 2.0 compatible.  Perhaps we should consider
> committing those changes.   

'Twas I who said something like that, but I have to caution
that it was definitely not a case of making all of Twisted
run under 2.0.  All I did, as a spike, was to repeatedly run 
our little test program, which imported about three things from
twisted.internet, and patch -- in the most hideously ugly but
direct manner that I could -- anything which complained.  

I think there were about three complaints, two of which were
nested scope warnings.  To fix these, I simply removed the
"from __future__" statement and ran again.  I think the other
thing needed a stub/mock of some kind, with no functionality.
I supposed the code involved is either not being invoked (but
was giving syntax errors or warnings), or is managing to function 
normally or near normally in spite of being invoked without nested 
scopes working.  

There are probably a *lot* of latent problems, but for our purposes 
it seems to be adequate.  There's no way I'd translate this into 
a suggestion any of these changes should be checked in though! :-)

-Peter



From mvanderheijden at fininfo.fr  Fri Apr 25 02:54:03 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Fri, 25 Apr 2003 08:54:03 +0200
Subject: [Twisted-Python] twisted web, documentation
Message-ID: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>

Hello,


Being new to twisted, I didn't find in the documentation an example  (in DOM
Template, widgets, woven or resource templates ), for implementing a form.

Someone has a link?

Maarten



This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From andrew-twisted at puzzling.org  Fri Apr 25 03:16:25 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 25 Apr 2003 17:16:25 +1000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
Message-ID: <20030425071624.GE15695@frobozz.local>

On Fri, Apr 25, 2003 at 08:54:03AM +0200, VAN DER HEIJDEN Maarten wrote:
> Hello,
> 
> 
> Being new to twisted, I didn't find in the documentation an example  (in DOM
> Template, widgets, woven or resource templates ), for implementing a form.
> 
> Someone has a link?

There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
week.  I believe this includes a general tutorial and stuff about using
forms.

If you can, wait until we've got those docs ready.  Otherwise, you could try
asking for advice on #twisted on irc.freenode.net, which is currently the
best place for Woven docs (until the new docs get checked in...)

-Andrew.




From nico at tekNico.net  Fri Apr 25 08:42:15 2003
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 25 Apr 2003 14:42:15 +0200
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
References: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
Message-ID: <3EA92D27.4080604@tekNico.net>

> I think it would improve our development speed and the general attitude 
> of the team, so I propose we cut over to 2.2 immediately.

What about the Jython situation?


-- 
"If you really feel that being a programmer makes you part of an elite and
you want to keep others out of that elite, I pity you."  Guido Van Rossum

Nicola Larosa - nico at tekNico.net





From fog at initd.org  Fri Apr 25 10:05:22 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 25 Apr 2003 16:05:22 +0200
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <1051279521.1053.15.camel@momo.initd.org>

Il ven, 2003-04-25 alle 03:21, Christopher Armstrong ha scritto:
> I'm going to be hacking on DatabaseAuthorizer soon(er or later).
> 
>  * Is anybody using it? The current code is pretty crufty, so
>    I'll probably just replace it once the hacking is done, unless
>    it's actually being used.

no. i wrote my own authorizer because DatabaseAuthorizer was not up to
the task.

>  * Does anyone have a wishlist for it?

put service and perspective names in database and allow for the client
to request for service/perspecitve in his keyring (derived from db).
that would be nice (and is what my authorizer does, btw.)

ciao,

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Having paid our respects to the dead (Taligent), nearly dead
   (Objective-C) and legendary (Symbolics), let's start digging
   into the features that make Python a great language for mix-in
   programming.                                      -- Chuck Esterbrook
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030425/98c3f8dc/attachment.pgp 

From waterbug at beeblebrox.gsfc.nasa.gov  Fri Apr 25 13:26:15 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Stephen Waterbury)
Date: Fri, 25 Apr 2003 10:26:15 -0700
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
 <1051279521.1053.15.camel@momo.initd.org>
Message-ID: <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>

Federico Di Gregorio wrote:
> 
> Il ven, 2003-04-25 alle 03:21, Christopher Armstrong ha scritto:
> > I'm going to be hacking on DatabaseAuthorizer soon(er or later).
> >
> >  * Is anybody using it? The current code is pretty crufty, so
> >    I'll probably just replace it once the hacking is done, unless
> >    it's actually being used.
> 
> no. i wrote my own authorizer because DatabaseAuthorizer was not up to
> the task.
> 
> >  * Does anyone have a wishlist for it?
> 
> put service and perspective names in database and allow for the client
> to request for service/perspecitve in his keyring (derived from db).
> that would be nice (and is what my authorizer does, btw.)

That was my thinking, too.  

Any chance you would be willing to share your authorizer?  
Some of us actually prefer not to reinvent wheels ... :^)

- Steve.



From fog at initd.org  Fri Apr 25 10:48:22 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 25 Apr 2003 16:48:22 +0200
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
	 <1051279521.1053.15.camel@momo.initd.org>
	 <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>
Message-ID: <1051282102.1053.50.camel@momo.initd.org>

Il ven, 2003-04-25 alle 19:26, Stephen Waterbury ha scritto:

> That was my thinking, too.  
> 
> Any chance you would be willing to share your authorizer?  
> Some of us actually prefer not to reinvent wheels ... :^)

all my code (and i mean *all*, even the one i write for customers) is
available from cvs.initd.org under GPL. you may be interested in the
following files:

http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/server/wilmad
http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/wilma/server/auth.py
http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/wilma/server/service.py

they implement a db authorizer with just one service ("wilma") and some
perspectives, taken from the keyring (for example the "admin"
perspective is available only to people that have the "admin" role in
DB). i planned a better version (the code in wilma is very specific for
that project) but i have almost no time nowdays.. too much work.

also, for wilma we are moving to a much more fine-grained authorization
policy that does not involve perspectives, but that's completely OT
here.

one more: wabba is a generic "transaction manager" that takes a
completely different approach to dababase access than other
object-relational mappers (i talked about it with itamar on irc someweek
ago). it is still very alpha and we are reworking it a lot but there
will be an "official" release around june. it integrates well with
twisted.

hope this helps,
federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  99.99999999999999999999% still isn't 100% but sometimes suffice. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030425/07173054/attachment.pgp 

From uwe at oss4u.com  Fri Apr 25 12:33:29 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 25 Apr 2003 09:33:29 -0700
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <200304250933.29642.uwe@oss4u.com>

On Thursday 24 April 2003 06:21 pm, Christopher Armstrong wrote:
> I'm going to be hacking on DatabaseAuthorizer soon(er or later).
>
>  * Is anybody using it? The current code is pretty crufty, so
>    I'll probably just replace it once the hacking is done, unless
>    it's actually being used.
>  * Does anyone have a wishlist for it?

Yes and yes. Don't hardcode table and fieldnames. 
Maybe you want to produce more detailed errors why the auth failed. I.e. when 
you have several services and a user isn't subscribed to one of them you'll 
get an "unknown user" error,  I think you should get a different error saying 
something about "service subscribtion" if the user is subscribed to other 
services on the same server.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From wilk-ml at flibuste.net  Fri Apr 25 14:46:51 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 25 Apr 2003 20:46:51 +0200
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
Message-ID: <87he8ml8is.fsf@flibuste.net>

VAN DER HEIJDEN Maarten <mvanderheijden at fininfo.fr> writes:

> Hello,
> 
> 
> Being new to twisted, I didn't find in the documentation an example  (in DOM
> Template, widgets, woven or resource templates ), for implementing a form.
> 
> Someone has a link?

this is an extended ReportRequest with form :

import twisted.web.resource
import cgi
from twisted.protocols import http
from twisted.web import resource,error
class ReportRequest(twisted.web.resource.Resource):
    """ ReportRequest with forms and cookies """
    def isLeaf(self):
        return true
    def render(self, request):
        user = request.getUser()
        password = request.getPassword()

        if not user:
            request.setResponseCode(401, 'Authentication needed')
            request.setHeader('WWW-authenticate', 'Basic realm="enter new user and password"')
            errpage = error.ErrorPage(http.UNAUTHORIZED,"Unauthorized","401 Authentication required")
            return errpage.render(request)

        session = request.getSession()

        try:
            if request.args["text"]!="":
                session.text = request.args["text"]
                session.touch()
        except:
            pass # no text arg
        session_text = getattr(session,"text","init")        
        # create and increment cookie counter,
        try:
            counter = int(request.getCookie("counter"))
            counter += 1
        except:
            counter = 0
        request.addCookie("counter",counter)
            
        cookies = request.received_cookies
        args = request.args
        path = request.path
        _, host, port = request.getHost()
        url = request.prePathURL()
        uri = request.uri
        secure = (request.isSecure() and "securely") or "insecurely"
        return ("""\
<HTML>
    <HEAD><TITLE>Welcome To Twisted Python Reporting</title></head>

    <BODY><H1>Welcome To Twisted Python Reporting</H1>
    <UL>
    <LI>User : %(user)s
    <LI>Password : %(password)s
    <LI>The path to me is %(path)s
    <LI>The host I'm on is %(host)s
    <LI>The port I'm on is %(port)s
    <LI>I was accessed %(secure)s
    <LI>A URL to me is %(url)s
    <LI>My URI to me is %(uri)s
    <LI>Session text : %(session_text)s
    <LI>Cookies (incremented in each reload): <pre>%(cookies)s</pre>
    <LI>Form args : <pre>%(args)s</pre>
    </UL>
    <hr>
    <h2>Testing args</h2>
    Test args : <a href='?a=1&a=2&a=3&b=4'>?a=1&amp;a=3&amp;a=3&amp;b=4</a><br>
    Test forms with method=post enctype='multipart/form-data'
    <form method=post enctype='multipart/form-data'>
    <table>
    <tr><td> text : </td><td> <input name=text type=text> </td></tr>
    <tr><td> file : </td><td> <input name=file type=file> </td></tr>
    <tr><td> select (multiple) : </td><td>
    <select name=select multiple><option>one</option><option>two</option><option>three</option></select>
    </td></tr></table>
    <input type=submit></form>
    </body>
</html>""" % vars())




-- 
William Dod? - http://flibuste.net



From peter at engcorp.com  Fri Apr 25 15:16:22 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 25 Apr 2003 15:16:22 -0400
Subject: [Twisted-Python] twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net>
Message-ID: <3EA98986.18D66A1E@engcorp.com>

William Dode wrote:
> 
> class ReportRequest(twisted.web.resource.Resource):
>     """ ReportRequest with forms and cookies """
>     def render(self, request):
>         session = request.getSession()
> 
>         try:
>             if request.args["text"]!="":
>                 session.text = request.args["text"]

Please correct me if I'm wrong, or out of date, but doesn't request.args
contain *lists* of things, always, and not the strings directly?  That
was what I observed on 1.0.3 anyway, I thought.

If that's so, then I think the above test will always pass, as 
request.args['text'] would contain [''] or [] or something, but
never just "".


-Peter



From itamar at itamarst.org  Fri Apr 25 12:37:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Apr 2003 12:37:01 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <20030425123701.66f14b2a.itamar@itamarst.org>

On Thu, 24 Apr 2003 21:21:36 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I'm going to be hacking on DatabaseAuthorizer soon(er or later).

Glyph and I just came up with a new shiny non-broken design for cred, so
you may want to talk to us first.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dp at twistedmatrix.com  Fri Apr 25 15:42:34 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 25 Apr 2003 12:42:34 -0700
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <3EA98986.18D66A1E@engcorp.com>
Message-ID: <0F6F65B9-7756-11D7-9195-000393B3EC2C@twistedmatrix.com>

On Friday, April 25, 2003, at 12:16 PM, Peter Hansen wrote:

> William Dode wrote:
>>
>> class ReportRequest(twisted.web.resource.Resource):
>>     """ ReportRequest with forms and cookies """
>>     def render(self, request):
>>         session = request.getSession()
>>
>>         try:
>>             if request.args["text"]!="":
>>                 session.text = request.args["text"]
>
> Please correct me if I'm wrong, or out of date, but doesn't 
> request.args
> contain *lists* of things, always, and not the strings directly?  That
> was what I observed on 1.0.3 anyway, I thought.
>
> If that's so, then I think the above test will always pass, as
> request.args['text'] would contain [''] or [] or something, but
> never just "".

That is correct. request.args always contains lists.

Donovan




From skin_pup-twisted at damnable.happypoo.com  Fri Apr 25 11:37:55 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 25 Apr 2003 11:37:55 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030425153755.GD37090@shitbomb.com>

Itamar Shtull-Trauring [itamar at itamarst.org] wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

I have 2.2 everywhere I have twisted.  :)

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

I have twisted running with ldaptor on over 200 Solaris systems, pulling
configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
and a few others things.  I do keep my own cvs of both twisted and ldaptor 
due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
They are highly out of date but work for me now.  

> Thanks.

No thank you all love twisted. 

Jeremy 



From itamar at itamarst.org  Fri Apr 25 17:36:54 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Apr 2003 17:36:54 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <3EA92D27.4080604@tekNico.net>
References: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
	<3EA92D27.4080604@tekNico.net>
Message-ID: <20030425173654.3ada6313.itamar@itamarst.org>

On Fri, 25 Apr 2003 14:42:15 +0200
Nicola Larosa <nico at tekNico.net> wrote:

> What about the Jython situation?

Do you use jython with twisted? AFAIK no one does. And it's close to
being useless anyway.

Hopefully by the time 1.4 is widespread and we can write a decent nio
reactor (the current java reactor is more proof-of-concept than useful
implementation), Jython will support 2.2.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From glyph at twistedmatrix.com  Fri Apr 25 18:45:56 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Apr 2003 17:45:56 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425173654.3ada6313.itamar@itamarst.org>
Message-ID: <AD771888-776F-11D7-B63C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday, April 25, 2003, at 04:36 PM, Itamar Shtull-Trauring wrote:

> Do you use jython with twisted? AFAIK no one does. And it's close to
> being useless anyway.

Currently you can't even run the test suite with Jython, to say nothing 
of the tests actually passing.  There would be a lot of work involved 
in getting Twisted to run on Jython-2.1 as-is, and 2.2isms are not a 
part of that.

At some point I'll try to get Jython's CVS running with current 
twisted.  Maybe we can encourage them to do a release if Twisted works 
on CVS and not on the released versions :)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qbqnvVGR4uSOE2wRAsMoAJ4kQFuW8PNtKhONV1QJDEMrDAHfIwCgtcrB
+tRpEggsscTpslBser3QWQY=
=NuES
-----END PGP SIGNATURE-----




From arashi1 at pd.jaring.my  Sat Apr 26 01:26:37 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Sat, 26 Apr 2003 13:26:37 +0800
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <200304261326.37251.arashi1@pd.jaring.my>

On Wednesday 23 April 2003 03:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

No requirement for 2.1 at all - using 2.2 as normal (freebsd 4.8 comes with 
2.2.2 out of the box) in fact, looking forward to 2.3. Lots of goodies there. 
In fact I only have the 2.1 that comes with binary zope.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet still plumbing the twisted depths.



From m at moshez.org  Sat Apr 26 03:17:08 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 Apr 2003 07:17:08 -0000
Subject: [Twisted-Python] Version support: a note
Message-ID: <20030426071708.4683.qmail@green.zadka.com>

If we do decide to drop support for a widely-deployed version of Python,
it is my firm belief that we should make setup.py fail loudly when used
with those versions. If nothing else, it will make sure the Debian build
will never work until I actually remove the build of non-supported versions.
Which reminds me: please don't drop 2.1 support until sarge's freeze (not
release -- but post-freeze, I'll be assured of my new uploads not getting
into sarge, and I'd really like sarge's Twisted to support 2.1)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From lordvan at lordvan.com  Sat Apr 26 04:26:42 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Sat, 26 Apr 2003 10:26:42 +0200 (CEST)
Subject: [Twisted-Python] twisted.web.resource.Resource.getChild*
Message-ID: <65512.62.47.64.183.1051345602.squirrel@mail-at.net>

hi!

i just had a endless recursion traceback of getChildWithDefault and
wondered why e.g. getChildWithDefault doesn't return error.NoResource()
when the child doesn't exist (same for getChildForRequest i think)

if there's a reason please enlighten me :)

greetings, LordVan


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From glyph at twistedmatrix.com  Sat Apr 26 05:09:45 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 26 Apr 2003 04:09:45 -0500
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <20030426071708.4683.qmail@green.zadka.com>
Message-ID: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, April 26, 2003, at 02:17 AM, Moshe Zadka wrote:

> If we do decide to drop support for a widely-deployed version of 
> Python,
> it is my firm belief that we should make setup.py fail loudly when used
> with those versions.

That sounds like a good idea.

> I'd really like sarge's Twisted to support 2.1

Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
much every package compiled for it?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qkzcvVGR4uSOE2wRAlyKAJ0ST932+rW/0aUaCBMTZoGRALEuvgCdF6Ni
r2UIPo8TUPN25fHArwei+hI=
=4UVg
-----END PGP SIGNATURE-----




From smaniero at sfera.net  Sat Apr 26 05:30:44 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Sat, 26 Apr 2003 11:30:44 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <20030424021744.GA13306@frobozz.local>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net> <20030424021744.GA13306@frobozz.local>
Message-ID: <1051349444.3eaa51c438eeb@sferamail.sfera.net>

I need store files upoloaded via FTP into mysql database, and twisted seems very
powerful framowork for this...

There's a valid alternative?

Quoting Andrew Bennetts <andrew-twisted at puzzling.org>:

> On Wed, Apr 23, 2003 at 05:02:46PM +0200, Stefano Maniero wrote:
> > I'm new user for Twisted.
> > 
> > I've seen an FTP server module in twisted, but I see that the server will
> be
> > re-written. There's some implementation of new FTP module?
> 
> Sadly, the new module lives only in my head at the moment.  I'd guess I'll
> probably have it in CVS within a month.
> 
> Do you just want a simple FTP server that serves files from the filesystem?
> If so, you may be able to use the existing code, but beware... it doesn't
> have much access control beyond "authenticated" and "not authenticated",
> which means that if you have anonymous access enabled, *anyone* use any FTP
> command, including STOR, and so on.  If you want to use the existing code,
> make sure to run it from a directory whose contents (including the directory
> itself!) are read-only, even for the owner.  It *might* be safe to use then,
> but I haven't rigorously checked that :)
> 
> What do you want to use an FTP server for?   :)
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 







From fog at initd.org  Sat Apr 26 05:30:27 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 11:30:27 +0200
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
References: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
Message-ID: <1051349426.13205.3.camel@momo.initd.org>

Il sab, 2003-04-26 alle 11:09, Glyph Lefkowitz ha scritto:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Saturday, April 26, 2003, at 02:17 AM, Moshe Zadka wrote:
> 
> > If we do decide to drop support for a widely-deployed version of 
> > Python,
> > it is my firm belief that we should make setup.py fail loudly when used
> > with those versions.
> 
> That sounds like a good idea.
> 
> > I'd really like sarge's Twisted to support 2.1
> 
> Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
> much every package compiled for it?

yes. default python for sarge is 2.2 (and there even was a discussion
about switching to 2.3 if a stable release happens before freeze [i
don't think it'll happen :)])

(the only reason for 2.1 in sarge is zope.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli avvoltoi cinesi si nutrono di arte, ma possono anche mangiare
   i `domani'.                                        -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030426/a2cd2474/attachment.pgp 

From andrew-twisted at puzzling.org  Sat Apr 26 05:43:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 26 Apr 2003 19:43:13 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1051349444.3eaa51c438eeb@sferamail.sfera.net>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net> <20030424021744.GA13306@frobozz.local> <1051349444.3eaa51c438eeb@sferamail.sfera.net>
Message-ID: <20030426094313.GB26530@frobozz.local>

On Sat, Apr 26, 2003 at 11:30:44AM +0200, Stefano Maniero wrote:
> I need store files upoloaded via FTP into mysql database, and twisted seems very
> powerful framowork for this...
> 
> There's a valid alternative?

Not in Twisted -- yet.  This sort of thing is exactly why I want to do the
FTP server rewrite.

Thanks for the feedback!

-Andrew.




From m at moshez.org  Sat Apr 26 06:03:37 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 Apr 2003 10:03:37 -0000
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
References: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
Message-ID: <20030426100337.11114.qmail@green.zadka.com>

On Sat, 26 Apr 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
 
> > I'd really like sarge's Twisted to support 2.1
> 
> Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
> much every package compiled for it?

Smoother upgrade path from woody.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From ecn at metaslash.com  Sat Apr 26 09:55:46 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 09:55:46 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
Message-ID: <20030426135546.GA24250@localhost.localdomain>

RedHat 9.0 on intel
Twisted 1.0.4

In twisted.enterprise.adbapi we find this method of ConnectionPool:

    def _runQuery(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.execute, args, kw)
            result = curs.fetchall()
            curs.close()
        finally:
            conn.rollback()
        return result

I do not understand the logic of always running a rollback even if the
query is successful.  I would, instead, expect this:

    def _runQuery(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.execute, args, kw)
            result = curs.fetchall()
            curs.close()
        except:
            conn.rollback()
	    raise
        return result

And, indeed, this is _exactly_ what we see in adbapi._runOperation,
which is the method following _runQuery.

-Eric

PS. This buglet brought to you by MySQL which does not support rollback(), 
    and tells you with an exception.



From andrew-twisted at puzzling.org  Sat Apr 26 10:07:22 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 27 Apr 2003 00:07:22 +1000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <20030426140722.GE26530@frobozz.local>

On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
> RedHat 9.0 on intel
> Twisted 1.0.4
> 
> In twisted.enterprise.adbapi we find this method of ConnectionPool:

[snip -- runQuery always does a rollback]

The theory here, I believe is that queries are meant to have no side-effects
on the DB, so the rollback is done to guarantee this.  If you *do* want to
change the state of the DB, use runOperation.

> PS. This buglet brought to you by MySQL which does not support rollback(), 
>     and tells you with an exception.

Then the database module you are using doesn't adhere to DB-API 2.0[1], which
adbapi requires.

-Andrew.

[1]  http://www.python.org/topics/database/DatabaseAPI-2.0.html




From ecn at metaslash.com  Sat Apr 26 12:12:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 12:12:08 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426140722.GE26530@frobozz.local>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local>
Message-ID: <20030426161208.GA25510@localhost.localdomain>

Sure, that's a theory.  And, yay, verily, MySQL isn't known for it's
strict adherance to standards.  However:

   http://www.python.org/topics/database/DatabaseAPI-2.0.html#connection

Says

 rollback()
    This method is optional since not all databases provide 
    transaction support.[3]

And footnote 3 sayeth:

    3 If the database does not support the functionality required by
    the method, the interface should throw an exception in case the
    method is used.

    The preferred approach is to not implement the method and thus
    have Python generate an AttributeError in case the method is
    requested. This allows the programmer to check for database
    capabilities using the standard hasattr() function.

    For some dynamically configured interfaces it may not be
    appropriate to require dynamically making the method
    available. These interfaces should then raise a NotSupportedError
    to indicate the non-ability to perform the roll back when the
    method is invoked.

Further, a rollback trashes a whole transaction.  The query could be
part of a larger transaction which includes update operations.
Granted, this is just silly in the async thread-pool, but that's why I
found it rather surprising.

-Eric

On Sun, Apr 27, 2003 at 12:07:22AM +1000, Andrew Bennetts wrote:
> On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
> > RedHat 9.0 on intel
> > Twisted 1.0.4
> > 
> > In twisted.enterprise.adbapi we find this method of ConnectionPool:
> 
> [snip -- runQuery always does a rollback]
> 
> The theory here, I believe is that queries are meant to have no side-effects
> on the DB, so the rollback is done to guarantee this.  If you *do* want to
> change the state of the DB, use runOperation.
> 
> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> Then the database module you are using doesn't adhere to DB-API 2.0[1], which
> adbapi requires.
> 
> -Andrew.
> 
> [1]  http://www.python.org/topics/database/DatabaseAPI-2.0.html
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Sat Apr 26 12:20:16 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 26 Apr 2003 12:20:16 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does
 rollback()
In-Reply-To: <20030426161208.GA25510@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
	<20030426140722.GE26530@frobozz.local>
	<20030426161208.GA25510@localhost.localdomain>
Message-ID: <20030426122016.1a357aa3.itamar@itamarst.org>

On Sat, 26 Apr 2003 12:12:08 -0400
"Eric C. Newton" <ecn at metaslash.com> wrote:

> Further, a rollback trashes a whole transaction.  The query could be
> part of a larger transaction which includes update operations.
> Granted, this is just silly in the async thread-pool, but that's why I
> found it rather surprising.

For long running transactions you want to do the runTransaction or
whatever it's called method - the one where you pass a callable and it
gets run with a adbapi.Transaction object in a thread, thus allowing you
to do a series of database queries one after the other in a natural,
blocking way.

But, looks like we do need to deal with broken rollback support in
mysql. Is there any flag we can check, or must we trap AttributeError
and whatever mysql throws on rollback() calls?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Sat Apr 26 12:35:38 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 26 Apr 2003 16:35:38 +0000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <20030426163538.GA61437@doublegemini.com>

On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
| I do not understand the logic of always running a rollback even if the
| query is successful.  I would, instead, expect this:

One of the ACID properties is to provide for a consistent read,
that is, if N queries are executed in a row, and a change happens
between the two reads, the 2nd query sees things without the change.
If you don't rollback, then the 'read transaction' will still 
reflect results at the time the first query was executed.

Therefore, a rollback is needed so that subsequent queries
reflect new changes to the database and is not 'stale'.

Best,

Clark



From justin at gnubia.net  Sat Apr 26 12:23:14 2003
From: justin at gnubia.net (Justin Ryan)
Date: 26 Apr 2003 11:23:14 -0500
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <200304250933.29642.uwe@oss4u.com>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
	 <200304250933.29642.uwe@oss4u.com>
Message-ID: <1051374194.12540.25.camel@qutang.gnubian.org>

> Maybe you want to produce more detailed errors why the auth failed. I.e. when 
> you have several services and a user isn't subscribed to one of them you'll 
> get an "unknown user" error,  I think you should get a different error saying 
> something about "service subscribtion" if the user is subscribed to other 
> services on the same server.

This is an arguable point..

Consider, from a security standpoint, that an attacker is trying to
brute-force your server.  'service subscription' error says 'you have
correctly guessed a username, but are attempting to access the wrong
service'.  Having a valid username is much closer to a username/password
pair than not having a valid username.. ;p

Perhaps it should be configurable to behave both ways.

-Justin




From justin at gnubia.net  Sat Apr 26 12:47:31 2003
From: justin at gnubia.net (Justin Ryan)
Date: 26 Apr 2003 11:47:31 -0500
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426140722.GE26530@frobozz.local>
References: <20030426135546.GA24250@localhost.localdomain>
	 <20030426140722.GE26530@frobozz.local>
Message-ID: <1051374310.12540.29.camel@qutang.gnubian.org>

> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> Then the database module you are using doesn't adhere to DB-API 2.0[1], which
> adbapi requires.

What type of database are you accessing?  Would transactions be
helpful?  MySQL has transaction-safe tables, you simply have to be
explicit when creating them (and all of your tables must be transaction
safe to avoid 'partial' rollbacks..).

-Justin




From z3p at twistedmatrix.com  Sat Apr 26 12:55:05 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sat, 26 Apr 2003 12:55:05 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <1051374194.12540.25.camel@qutang.gnubian.org>
References: <200304250933.29642.uwe@oss4u.com>
Message-ID: <3EAA81A9.30144.292C572@localhost>

On 26 Apr 2003 at 11:23, Justin Ryan wrote:

> Consider, from a security standpoint, that an attacker is trying to
> brute-force your server.  'service subscription' error says 'you have
> correctly guessed a username, but are attempting to access the wrong
> service'.  Having a valid username is much closer to a username/password
> pair than not having a valid username.. ;p

What Conch does for this is takes whatever error 
the authentication raises, whether it be invalid 
user, invalid password, etc., and turns it into a 
generic 'not authenticated' message.  If you want 
to keep attackers from knowing which names are 
actual users, you probably just want to do that, 
rather than having a flag in the Authorizer.

-p

-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From ecn at metaslash.com  Sat Apr 26 13:12:29 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 13:12:29 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426122016.1a357aa3.itamar@itamarst.org>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <20030426161208.GA25510@localhost.localdomain> <20030426122016.1a357aa3.itamar@itamarst.org>
Message-ID: <20030426171229.GA25940@localhost.localdomain>

> But, looks like we do need to deal with broken rollback support in
> mysql. Is there any flag we can check, or must we trap AttributeError
> and whatever mysql throws on rollback() calls?

I checked.  It's AttributeError.

     try:
         conn.rollback()
     except AttributeError:        # Grr.. MySQL without rollback support
         pass

-Eric



From ecn at metaslash.com  Sat Apr 26 13:15:32 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 13:15:32 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051374310.12540.29.camel@qutang.gnubian.org>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <1051374310.12540.29.camel@qutang.gnubian.org>
Message-ID: <20030426171532.GB25940@localhost.localdomain>

> What type of database are you accessing?

It's my own.

> Would transactions be helpful?  

Not at this time.

MySQL is very fast and very lightweight.  It also runs on platforms
like Win9X (the pain, the pain!).

-Eric



From jml at ids.org.au  Sat Apr 26 13:23:23 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Sun, 27 Apr 2003 03:23:23 +1000
Subject: [Twisted-Python] Trial Refactoring
Message-ID: <20030426172323.GA620@sting>

I've made some pretty significant changes to trial tonight [1][2]. They 
have been mainly focussed on refactoring to reduce repeated code, and 
on being able to extend trial.

The tests work for me [3]. If they don't work for you, this is probably 
the reason. Please check for your platform as soon as possible and let 
the list know.

I have tried hard to keep the functionality as close to the original as 
possible, but there have been some changes.

Feel free to gaffle me and rollback the commit if this is a disastrous 
mistake.

cheers,
jml

[1] 
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/trial/unittest.py.diff?r1=1.63&r2=1.64&cvsroot=Twisted
[2] 
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/trial/unittest.py.diff?r1=1.64&r2=1.65&cvsroot=Twisted
[3] In Python 2.2. In Python 2.1, testPackages in test_doc fails. I     
don't think this is my fault.



From fog at initd.org  Sat Apr 26 13:33:25 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 19:33:25 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <1051378404.15063.6.camel@momo.initd.org>

Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> not understand the logic of always running a rollback even if the
> query is successful.  I would, instead, expect this:

i introduced such buglet but i thought it was fixed (see discussion on
this list some weeks ago). 

> PS. This buglet brought to you by MySQL which does not support rollback(), 
>     and tells you with an exception.

your adapter is b0rked. as per dbapi-2.0 document:

            Database modules that do not support transactions should
            implement this method with void functionality.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                           Don't dream it. Be it. -- Dr. Frank'n'further
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030426/2989f997/attachment.pgp 

From ecn at metaslash.com  Sat Apr 26 14:30:18 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 14:30:18 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051378404.15063.6.camel@momo.initd.org>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org>
Message-ID: <20030426183018.GA26181@localhost.localdomain>

Alrighty.  In case anyone else needs to do this before the MySQL
Python API is brought up-to-date, here's how I kludged it without
changing twisted:

    import MySQLdb

    def doNothing(*args, **kw):
       return None

    class AddRollback:
       def __init__(self, module):
	  self.doConnect = module.connect

       def connect(self, *args, **kw):
	  result = self.doConnect(*args, **kw)
	  result.rollback = doNothing
	  return result

    MySQLdb.connect = AddRollback(MySQLdb).connect

On Sat, Apr 26, 2003 at 07:33:25PM +0200, Federico Di Gregorio wrote:
> Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > not understand the logic of always running a rollback even if the
> > query is successful.  I would, instead, expect this:
> 
> i introduced such buglet but i thought it was fixed (see discussion on
> this list some weeks ago). 
> 
> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> your adapter is b0rked. as per dbapi-2.0 document:
> 
>             Database modules that do not support transactions should
>             implement this method with void functionality.
> 
> -- 
> Federico Di Gregorio
> Debian GNU/Linux Developer                                fog at debian.org
> INIT.D Developer                                           fog at initd.org
>                            Don't dream it. Be it. -- Dr. Frank'n'further





From lordvan at lordvan.com  Sat Apr 26 16:19:01 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Sat, 26 Apr 2003 22:19:01 +0200 (CEST)
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426183018.GA26181@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
        <1051378404.15063.6.camel@momo.initd.org>
        <20030426183018.GA26181@localhost.localdomain>
Message-ID: <65316.62.47.64.183.1051388341.squirrel@mail-at.net>

hi!

you did this in your 'application' code? (you know that this will block
your whole twisted app for the time of the query right? since MySQLdb is
not async .. and u'd need a thread to make it kinda async ..)

regards
<quote who="Eric C. Newton">
> Alrighty.  In case anyone else needs to do this before the MySQL
> Python API is brought up-to-date, here's how I kludged it without
> changing twisted:
>
>     import MySQLdb
>
>     def doNothing(*args, **kw):
>        return None
>
>     class AddRollback:
>        def __init__(self, module):
> 	  self.doConnect = module.connect
>
>        def connect(self, *args, **kw):
> 	  result = self.doConnect(*args, **kw)
> 	  result.rollback = doNothing
> 	  return result
>
>     MySQLdb.connect = AddRollback(MySQLdb).connect
>


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From dave at krondo.com  Sat Apr 26 16:49:06 2003
From: dave at krondo.com (Dave Peticolas)
Date: 26 Apr 2003 13:49:06 -0700
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <1051378404.15063.6.camel@momo.initd.org>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
Message-ID: <1051390145.1428.319.camel@oneiros>

On Sat, 2003-04-26 at 10:33, Federico Di Gregorio wrote:
> Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > not understand the logic of always running a rollback even if the
> > query is successful.  I would, instead, expect this:
> 
> i introduced such buglet but i thought it was fixed (see discussion on
> this list some weeks ago). 

I meant to, but I guess I never did -- I'll do that now.

To summarize the discussion, you need to commit, not rollback,
as it's possible for select calls to have side effects. One example
is calling a stored procedure.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030426/03171834/attachment.pgp 

From fog at initd.org  Sat Apr 26 17:22:06 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 23:22:06 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <1051390145.1428.319.camel@oneiros>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
	 <1051390145.1428.319.camel@oneiros>
Message-ID: <1051392126.13205.8.camel@momo.initd.org>

Il sab, 2003-04-26 alle 22:49, Dave Peticolas ha scritto:
> On Sat, 2003-04-26 at 10:33, Federico Di Gregorio wrote:
> > Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > > not understand the logic of always running a rollback even if the
> > > query is successful.  I would, instead, expect this:
> > 
> > i introduced such buglet but i thought it was fixed (see discussion on
> > this list some weeks ago). 
> 
> I meant to, but I guess I never did -- I'll do that now.
> 
> To summarize the discussion, you need to commit, not rollback,
> as it's possible for select calls to have side effects. One example
> is calling a stored procedure.

exactly.

federico

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030426/a6ac5660/attachment.pgp 

From cce at clarkevans.com  Sat Apr 26 17:44:21 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 26 Apr 2003 21:44:21 +0000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051390145.1428.319.camel@oneiros>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org> <1051390145.1428.319.camel@oneiros>
Message-ID: <20030426214421.GA62586@doublegemini.com>

On Sat, Apr 26, 2003 at 01:49:06PM -0700, Dave Peticolas wrote:
| To summarize the discussion, you need to commit, not rollback,
| as it's possible for select calls to have side effects. One example
| is calling a stored procedure.

This makes sense.  For example, the stored procedure may update
an access log table which records the last time that a user looked
at a given peice of information.   This could be quite useful.

But, in any case, the 'transaction' should be terminated.  If it
was successful (no exception) then it should be committed, else
it should be rolled back...

Clark



From fog at initd.org  Sat Apr 26 17:45:55 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 23:45:55 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426214421.GA62586@doublegemini.com>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
	 <1051390145.1428.319.camel@oneiros>
	 <20030426214421.GA62586@doublegemini.com>
Message-ID: <1051393555.13196.11.camel@momo.initd.org>

Il sab, 2003-04-26 alle 23:44, Clark C. Evans ha scritto:
> On Sat, Apr 26, 2003 at 01:49:06PM -0700, Dave Peticolas wrote:
> | To summarize the discussion, you need to commit, not rollback,
> | as it's possible for select calls to have side effects. One example
> | is calling a stored procedure.
> 
> This makes sense.  For example, the stored procedure may update
> an access log table which records the last time that a user looked
> at a given peice of information.   This could be quite useful.
> 
> But, in any case, the 'transaction' should be terminated.  If it
> was successful (no exception) then it should be committed, else
> it should be rolled back...

yes, there is not that much difference between a Query and an Operation.
imho the adbapi can be cleaned up *a lot*, but i'll try that after
sending my big cleanup patch (that makes min/max of connections
working). i just need to find enough time to write a test case to
demonstrate it does not break anything.

federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
              All programmers are optimists. -- Frederick P. Brooks, Jr.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030426/6004c232/attachment.pgp 

From ecn at metaslash.com  Sat Apr 26 17:51:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 17:51:08 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <65316.62.47.64.183.1051388341.squirrel@mail-at.net>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org> <20030426183018.GA26181@localhost.localdomain> <65316.62.47.64.183.1051388341.squirrel@mail-at.net>
Message-ID: <20030426215108.GA27354@localhost.localdomain>

Thanks. I know that the MySQLdb API blocks.

You will note that I'm not actually using the MySQLdb API in the code
below, but adding code which adds a rollback method to allocated
connection objects.  Long-running calls go through the
twisted.enterprise APIs.

-Eric

On Sat, Apr 26, 2003 at 10:19:01PM +0200, Thomas Raschbacher wrote:
> hi!
> 
> you did this in your 'application' code? (you know that this will block
> your whole twisted app for the time of the query right? since MySQLdb is
> not async .. and u'd need a thread to make it kinda async ..)
> 
> regards
> <quote who="Eric C. Newton">
> > Alrighty.  In case anyone else needs to do this before the MySQL
> > Python API is brought up-to-date, here's how I kludged it without
> > changing twisted:
> >
> >     import MySQLdb
> >
> >     def doNothing(*args, **kw):
> >        return None
> >
> >     class AddRollback:
> >        def __init__(self, module):
> > 	  self.doConnect = module.connect
> >
> >        def connect(self, *args, **kw):
> > 	  result = self.doConnect(*args, **kw)
> > 	  result.rollback = doNothing
> > 	  return result
> >
> >     MySQLdb.connect = AddRollback(MySQLdb).connect



From andrew-twisted at puzzling.org  Sat Apr 26 22:00:47 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 27 Apr 2003 12:00:47 +1000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426161208.GA25510@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <20030426161208.GA25510@localhost.localdomain>
Message-ID: <20030427020047.GF26530@frobozz.local>

On Sat, Apr 26, 2003 at 12:12:08PM -0400, Eric C. Newton wrote:
> Sure, that's a theory.  And, yay, verily, MySQL isn't known for it's
> strict adherance to standards.  However:
> 
>    http://www.python.org/topics/database/DatabaseAPI-2.0.html#connection
> 
> Says
> 
>  rollback()
>     This method is optional since not all databases provide 
>     transaction support.[3]

Oops.  I'll remember to read more closely next time.

Thanks for correcting me :)

-Andrew.




From tv at twistedmatrix.com  Sat Apr 26 03:57:36 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 26 Apr 2003 10:57:36 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425153755.GD37090@shitbomb.com>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425153755.GD37090@shitbomb.com>
Message-ID: <20030426075736.GB14322@lapdog>

On Fri, Apr 25, 2003 at 11:37:55AM -0400, Skinny Puppy wrote:
> > 2. Do you have any Twisted success stories you'd like to share (besides
> > those listed in our success stories page, of course)?
> 
> I have twisted running with ldaptor on over 200 Solaris systems, pulling
> configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
> and a few others things.  I do keep my own cvs of both twisted and ldaptor 
> due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
> They are highly out of date but work for me now.  

	Ooh! An actual ldaptor user!

	At this point, you are the most important external party using
	ldaptor, it seems. How's it been? Any thoughts on what you would
	want to see?

-- 
:(){ :|:&};:



From pinard at iro.umontreal.ca  Sun Apr 27 10:35:41 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 10:35:41 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Typo in code
Message-ID: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>

Hi, a mini-tiny nit.

In Twisted-1.0.4/twisted/persisted/styles.py, the doc-string writes
"peristed" instead of "persisted".

P.S. - Is there an email address I could use for such nits, instead of
bothering the whole list?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From skin_pup-twisted at damnable.happypoo.com  Sun Apr 27 06:27:06 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Sun, 27 Apr 2003 06:27:06 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030426075736.GB14322@lapdog>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425153755.GD37090@shitbomb.com> <20030426075736.GB14322@lapdog>
Message-ID: <20030427102706.GE37090@shitbomb.com>

Tommi Virtanen [tv at twistedmatrix.com] wrote:
> On Fri, Apr 25, 2003 at 11:37:55AM -0400, Skinny Puppy wrote:
> > > 2. Do you have any Twisted success stories you'd like to share (besides
> > > those listed in our success stories page, of course)?
> > 
> > I have twisted running with ldaptor on over 200 Solaris systems, pulling
> > configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
> > and a few others things.  I do keep my own cvs of both twisted and ldaptor 
> > due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
> > They are highly out of date but work for me now.  
> 
> 	Ooh! An actual ldaptor user!
> 
> 	At this point, you are the most important external party using
> 	ldaptor, it seems. How's it been? Any thoughts on what you would
> 	want to see?
> 

to be honest - nothing - I have my own version based .10 and patches
hand applied as needed up to version .13.  With it being deployed on as
many systems we do the process of upgrading is not something we do
often.

I have not come across anything I was not able to do with ldaptor.  I
dont push it to hard, just a lot of searches and maybe a password change or
two. 

I don't really like the DNS SRV records and that way of connecting.  So 
I just don't use it.  

We have added TLS support to ldaptor to go along with the TLS patch I 
wrote for twisted.  I am not able to release that patch due to it was 
created by working with another employee.

One thing I would kill to have is the server side of things in twisted.
This would allow me to build the ldap caching daemon / proxy daemon. nscd
on Solaris is a pile of junk, but an absolute need for nsswitch with ldap.  
And just be damn fun to play with.  But I will be damned if I know anyone 
that wants to write it. 

Thank you once again for creating ldaptor, it has save this sysadmin
untold hours of config changes and has been fun to play with. 

Jeremy 





From pinard at iro.umontreal.ca  Sun Apr 27 10:58:54 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 10:58:54 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Heavy search for `plugins.tml'
Message-ID: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>

Hi, people.

I noticed yesterday how heavily Twisted tries to find `plugins.tml'.  Being
new to the game, and not knowing the motivations, a lot of things surely
escape my comprehension, yet at first glance, it looks excessive to me
trying many thousands of disk accesses merely to find a configuration file.

Instead of a long listing followed by a discussion about what could be
spared (like, for example, looking all over in `/usr/bin'), this simple
experiment shows the problem -- if you agree that there is a problem! :-)

---------------------------------------------------------------------->
$ strace 2>&1 mktap | grep plugins.tml | wc -l
   2814
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From bob at redivi.com  Sun Apr 27 11:13:36 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 27 Apr 2003 11:13:36 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427102706.GE37090@shitbomb.com>
Message-ID: <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>

On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy wrote:

> We have added TLS support to ldaptor to go along with the TLS patch I
> wrote for twisted.  I am not able to release that patch due to it was
> created by working with another employee.

That doesn't really make any sense.  Does your employer have some 
ridiculous "we own you" IP contract?

-bob




From skin_pup-twisted at damnable.happypoo.com  Sun Apr 27 07:10:38 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Sun, 27 Apr 2003 07:10:38 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
References: <20030427102706.GE37090@shitbomb.com> <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
Message-ID: <20030427111038.GF37090@shitbomb.com>

Bob Ippolito [bob at redivi.com] wrote:
> 
> On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy wrote:
> 
> >We have added TLS support to ldaptor to go along with the TLS patch I
> >wrote for twisted.  I am not able to release that patch due to it was
> >created by working with another employee.
> 
> That doesn't really make any sense.  Does your employer have some 
> ridiculous "we own you" IP contract?

Yes - I have permission (in writing for what i do at home is mine) but
other employees do not (or have not even asked).  And all work done at 
the office is owned wholly by my employer.  There is really nothing 
I can do, I have ask permission to release it back to everyone and was 
denied.  The TLS patch i sent was created at home just for this reason. 

Jeremy



From alan at norfolkgraphics.com  Sun Apr 27 11:39:34 2003
From: alan at norfolkgraphics.com (Alan McIntyre)
Date: Sun, 27 Apr 2003 11:39:34 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <3EABF9B6.4020101@norfolkgraphics.com>

Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

I plan on using Twisted for at least a couple of new (from-scratch) 
projects, and they will all be using Python 2.2.2 or newer.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet, but if everything goes according to current plan I should have 
something interesting to share in 6-9 months. ;)




From bob at redivi.com  Sun Apr 27 12:02:18 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 27 Apr 2003 12:02:18 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427111038.GF37090@shitbomb.com>
Message-ID: <9F539584-78C9-11D7-B5C0-000A95686CD8@redivi.com>

On Sunday, Apr 27, 2003, at 07:10 America/New_York, Skinny Puppy wrote:

> Bob Ippolito [bob at redivi.com] wrote:
>>
>> On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy 
>> wrote:
>>
>>> We have added TLS support to ldaptor to go along with the TLS patch I
>>> wrote for twisted.  I am not able to release that patch due to it was
>>> created by working with another employee.
>>
>> That doesn't really make any sense.  Does your employer have some
>> ridiculous "we own you" IP contract?
>
> Yes - I have permission (in writing for what i do at home is mine) but
> other employees do not (or have not even asked).  And all work done at
> the office is owned wholly by my employer.  There is really nothing
> I can do, I have ask permission to release it back to everyone and was
> denied.  The TLS patch i sent was created at home just for this reason.

Wow, your job sucks :)  I used to have one of those a few years ago.  I 
wonder if they realize that it actually bleeds time for you to maintain 
your own internal versions of open source software?

-bob




From pinard at iro.umontreal.ca  Sun Apr 27 12:13:43 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:13:43 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Tildes in the book
Message-ID: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>

Hi, still me...

In the Twisted 1.0.4 book -- I hope this reference is unambiguous enough,
I have not seen more than one :-) -- there is a problem here and there with
`~' being shown over the next character (`/' for example) instead of prior
to it as intented.  At many places, tildes are OK, however.  Should I try
reporting all problematic cases?  I guess not, as the problem is likely
to be the same at all places, and some global action could be taken.
The example I'm currently looking at is at the end of page 136 (6. Web
Applications; 6.1.2 Before we begin) on this quote:

   Make sure the `TwistedQuotes' directory is on your PYTYONPATH, put
   `webquotes.rpy' and `WebQuotes.html' in your `~/public_html' directory,
   and you are ready to go.

The `~' and `/' on the last sentence are at the same character position.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 12:26:00 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:26:00 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - mktap verbosity [was: Re: documentation issue?]
In-Reply-To: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
References: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
Message-ID: <oqznmbc3fr.fsf@alcyon.progiciels-bpi.ca>

[rprice at collegenet.com]

> I am working my way through "The Twisted Documentation" Jan
> 29, 2003 and found a problem with an example (or with me).
> At http://twistedmatrix.com/documents/howto/plugin it says:
>    % mktap qotd
>    Saving qotd application to qotd.tap...
>    Saved.
> % twistd -f qotd.tap
> % nc localhost 8007
> An apple a day keeps the doctor away.
> % kill `cat twistd.pid`

> The problem is when I run 'mktap qotd' I get the following error:
>    Unknown command: qotd
> and then it prints the usage and options help.

I got the same problem, then quickly figured out that I forgot to create
an empty `__init.py__' file within the other files.

But the real reason of this reply is for reporting that the documented:

---------------------------------------------------------------------->
   Saving qotd application to qotd.tap...
   Saved.
----------------------------------------------------------------------<

lines are not given in response to calling `mktap'.  Besides that detail,
the example nicely works.  Instead of amending the documentation to
remove those two lines, maybe `mktap' could accept some `-v' option,
server generic, for producing them, and be an opened door for any later
other useful extra feedback?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 12:27:02 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 12:27:02 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 10:58:54 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427162702.GA7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 10:58, Francois Pinard wrote:
> Hi, people.
> 
> I noticed yesterday how heavily Twisted tries to find `plugins.tml'.  Being
> new to the game, and not knowing the motivations, a lot of things surely
> escape my comprehension, yet at first glance, it looks excessive to me
> trying many thousands of disk accesses merely to find a configuration file.

The thing is, it's not a configuration file :-) It's a plugins file. The point
is for applications to distribute one along with their packages, and just have
it put into their Python package directory, so there's no tricky registration
process required.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Sun Apr 27 12:50:43 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:50:43 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
Message-ID: <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]
> [Francois Pinard]

> > I noticed yesterday how heavily Twisted tries to find `plugins.tml'.
> > Being new to the game, and not knowing the motivations, a lot of
> > things surely escape my comprehension, yet at first glance, it looks
> > excessive to me trying many thousands of disk accesses merely to find
> > a configuration file.

> The thing is, it's not a configuration file :-) It's a plugins file.
> The point is for applications to distribute one along with their
> packages, and just have it put into their Python package directory,
> so there's no tricky registration process required.

Ok.  It is not a configuration file, if you want.  Or this file configures
the plugins, say.  And, I surely understood that the idea of searching so
hard was so the user does not have to say much about where it is.  Granted.

It still looks like Twisted is going overboard with this.  If `plugins.tml'
files were being collected from the top-level directories along `sys.path'
and maybe no more than one-level below, and maybe also for test purposes
(despite the security weakness), into the current directory and one
level of directories below, it would probably make a lot of sense at a
reasonable cost.

But trying every single executable along the shell load path as if the
executable were a directory (yet I understand it would be slower to first
check if it is a directory) is heavy and unlikely to be any fruitful -- at
least in my naive eyes.  It might be worth some revisiting, who knows...
If you really want full generality, it might be more sane and useful to
invent some TWISTED_SEARCH_PATH environment variable, than to go berzerk
and frantically search everything in the wild. :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 13:14:35 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 13:14:35 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 12:50:43 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 12:50, Francois Pinard wrote:
> It still looks like Twisted is going overboard with this.  If `plugins.tml'
> files were being collected from the top-level directories along `sys.path'
> and maybe no more than one-level below, and maybe also for test purposes
> (despite the security weakness), into the current directory and one
> level of directories below, it would probably make a lot of sense at a
> reasonable cost.

That's exactly what it's documented to do. If it's not doing that, it's a bug.
(btw, the current directory gets no special treatment. If it's searching
the current directory, it's because the current directory is somehow in 
sys.path)

> But trying every single executable along the shell load path as if the
> executable were a directory (yet I understand it would be slower to first
> check if it is a directory) is heavy and unlikely to be any fruitful -- at
> least in my naive eyes.  It might be worth some revisiting, who knows...
> If you really want full generality, it might be more sane and useful to
> invent some TWISTED_SEARCH_PATH environment variable, than to go berzerk
> and frantically search everything in the wild. :-)

It's not using the shell load path. /usr/bin just happens to be in your
sys.path. And, I'm guessing that explicitly checking 1) whether or not
each item is a directory and 2) whether or not that directory has an 
__init__.py is, as you said, more expensive (and checking for __init__.py
is actually trickier than it seems at first, because you also need to
check for .pyc, .pyo, .pyd, .so....).

And inventing a new environment variable is contrary to the stated goal,
which is the lack of a registration process (apart from what you need to do
to have your package work with Python).

Now, are you actually having a *problem* with the performance of mktap?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Sun Apr 27 13:21:53 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 13:21:53 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Sun, Apr 27, 2003 at 13:14:35 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
Message-ID: <20030427172153.GE7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 13:14, Christopher Armstrong wrote:
> 
> On 2003.04.27 12:50, Francois Pinard wrote:
> > It still looks like Twisted is going overboard with this.  If `plugins.tml'
> > files were being collected from the top-level directories along `sys.path'
> > and maybe no more than one-level below, and maybe also for test purposes
> > (despite the security weakness), into the current directory and one
> > level of directories below, it would probably make a lot of sense at a
> > reasonable cost.
> 
> That's exactly what it's documented to do. If it's not doing that, it's a bug.
> (btw, the current directory gets no special treatment. If it's searching
> the current directory, it's because the current directory is somehow in 
> sys.path)

Sorry, I misread your paragraph. It's not quite exactly doing that - it's
searching in one *less* place than what you said (directories along sys.path;
it *only* searches one level of subdirectories along each directory in sys.path)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From justin at gnubia.net  Sun Apr 27 14:10:57 2003
From: justin at gnubia.net (Justin Ryan)
Date: Sun, 27 Apr 2003 13:10:57 -0500
Subject: [Twisted-Python] Patch: row / reflectors / util
Message-ID: <3EAC1D31.7060107@gnubia.net>

Attached is a patch to twisted.enterprise.row, the sqlreflector, and 
util.py to allow mixed-case table/row names (and to double-quote them in 
databases that require it, such as postgres).

I sent this a while back with a detailed explanation, but have now 
developed some docs on the web at http://gnubia.net/Docs/Twisted.Gnubia/ 
detailing some of my changes..

Oh yeh and.. erm.. Itamar told me to re-send on irc a few min ago..

This stuff may need to be cleaned up, and I've considered separating 
some of it out into a PGRow or somesuch, the way that I (and someone 
else on the list) am using a PGSQLReflector to do some postgres-specific 
stuff.

suggestions / criticism / flames welcome

-j




From justin at gnubia.net  Sun Apr 27 14:19:31 2003
From: justin at gnubia.net (Justin Ryan)
Date: Sun, 27 Apr 2003 13:19:31 -0500
Subject: [Twisted-Python] Patch: row (forgot attachment)
Message-ID: <3EAC1F33.5@gnubia.net>

Ooops, forgot the attachment..

-j
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: row.diff
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030427/460c56f7/attachment.txt 

From itamar at itamarst.org  Sun Apr 27 14:12:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 14:12:15 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427111038.GF37090@shitbomb.com>
References: <20030427102706.GE37090@shitbomb.com>
	<D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
	<20030427111038.GF37090@shitbomb.com>
Message-ID: <20030427141215.7935a322.itamar@itamarst.org>

On Sun, 27 Apr 2003 07:10:38 -0400
Skinny Puppy <skin_pup-twisted at damnable.happypoo.com> wrote:

> Yes - I have permission (in writing for what i do at home is mine) but
> other employees do not (or have not even asked).  And all work done at
> 
> the office is owned wholly by my employer.  There is really nothing 
> I can do, I have ask permission to release it back to everyone and was
> 
> denied.  The TLS patch i sent was created at home just for this
> reason. 

Could you resend it to me? and explain what the other patch is that you
did with your co-worker?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 16:38:06 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 16:38:06 -0400
Subject: [Twisted-Python] Twisted-1.0.4 - Typo in twisted/words/service.py
Message-ID: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>

Hi.  Another nit.  In Twisted-1.0.4/twisted/words/service.py, line 562:

---------------------------------------------------------------------->
            raise KeyError("Pariticpant already exists: %s." % name)
----------------------------------------------------------------------<

should be written:

---------------------------------------------------------------------->
            raise KeyError("Participant already exists: %s." % name)
----------------------------------------------------------------------<

P.S. - If there is an email address to use for such details, instead of the
mailing list, please tell me.  As long as this is email, it's OK for me! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Sun Apr 27 16:53:11 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 16:53:11 -0400
Subject: [Twisted-Python] Twisted-1.0.4 - Typo in
 twisted/words/service.py
In-Reply-To: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
References: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427165311.138e7727.itamar@itamarst.org>

On 27 Apr 2003 16:38:06 -0400
Francois Pinard <pinard at iro.umontreal.ca> wrote:

> Hi.  Another nit.  In Twisted-1.0.4/twisted/words/service.py, line
> 562:
> 
> ---------------------------------------------------------------------
> ->
>             raise KeyError("Pariticpant already exists: %s." % name)
> ---------------------------------------------------------------------
> -<

Fixed in CVS. For spelling errors, mentioning it on IRC (#twisted
irc.freenode.net) would probably work too. I think I fixed the other
typo you mentioned a few days ago.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 17:08:09 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:08:09 -0400
Subject: [Twisted-Python] Re: Twisted-1.0.4 - Typo in twisted/words/service.py
In-Reply-To: <20030427165311.138e7727.itamar@itamarst.org>
References: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
	<20030427165311.138e7727.itamar@itamarst.org>
Message-ID: <oqbryrbqdi.fsf@alcyon.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> For spelling errors, mentioning it on IRC (#twisted irc.freenode.net)
> would probably work too.

Just have to wait for an acknowledgement there, from you presumably?

> I think I fixed the other typo you mentioned a few days ago.

Thanks.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 17:26:32 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:26:32 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
Message-ID: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>

An embedded message was scrubbed...
From: Francois Pinard <pinard at IRO.UMontreal.CA>
Subject: Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
Date: 27 Apr 2003 14:25:28 -0400
Size: 8621
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20030427/81b40340/attachment.eml 
-------------- next part --------------


-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard

From itamar at itamarst.org  Sun Apr 27 17:21:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 17:21:29 -0400
Subject: [Twisted-Python] Joined the bleedin' choir invisible!
Message-ID: <20030427172129.5fc476c5.itamar@itamarst.org>

2.1 support is now officially dead.

Please don't start changing existing Twisted code to use 2.2 features
unless you're actually adding new functionality. We might need to
backport some code to 2.1 at some point, though that's pretty unlikely.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 17:39:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:39:49 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `mktap --help SERVER'
In-Reply-To: <20030423233556.GB14554@meson.dyndns.org>
References: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
	<20030423233556.GB14554@meson.dyndns.org>
Message-ID: <oq1xznbowq.fsf@alcyon.progiciels-bpi.ca>

[Jp Calderone]
> [Francois Pinard]

> > Page 21 (2.2.3 mktap and tapconvert) says: "For a given server,
> > `mktap --help <name>' shows the possible configuration options.".

> After looking at this for more minutes than it probably merited, I feel
> that this usage should stay gone (rather than have mktap be fixed to
> work as documented).  [...] It is also trivially achieved by reversing
> the order of the arguments to be "mktap <name> --help".

Sounds very reasonable.

> There are effectively no unit tests for either mktap or twistd, and
> the acceptance tests only test it in well-formed cases, which are nice,
> but probably the least important ones to *test*, since that is how the
> developers will all be invoked the tools (and so they will get plenty
> of testing that way).

My feeling is that we should wonder nevertheless.  Consider that, in
actual practice, 1.0.4 was issued with DeprecationWarnings still remaining
for a few servers (conch, parent, sibling), that another server without
arguments raises an exception (inetd).  So we can doubt there was so plenty
of testing, and a unit test for those would add more security to releases.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Sun Apr 27 17:44:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 17:44:29 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427174429.29b2c130.itamar@itamarst.org>

On 27 Apr 2003 17:26:32 -0400
Francois Pinard <pinard at iro.umontreal.ca> wrote:

> Hi.  This is a resend of a message which was rejected, because too
> big. Wise mailing list system! :-).  So, I removed 1255 lines from the
> middle of the last transcript, showing the first 20 and the last 20
> only. You'll merely have to believe me that those lines I removed were
> there! :-)

Thank you! We will see about fixing this ASAP.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Sun Apr 27 17:56:16 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 17:56:16 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 17:26:32 -0400
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427215616.GA9407@toshi.anaprd01.md.comcast.net>

On 2003.04.27 17:26, Francois Pinard wrote:
> Hi.  This is a resend of a message which was rejected, because too big.
> Wise mailing list system! :-).  So, I removed 1255 lines from the middle
> of the last transcript, showing the first 20 and the last 20 only.
> You'll merely have to believe me that those lines I removed were there! :-)

> > It's not using the shell load path.  /usr/bin just happens to be in
> > your sys.path.

> No, it is not.  How can you be so assertive?

Because I know :-) The default sys.path isn't there, but your `mktap'
is located in /usr/bin, isn't it? :-)

You probably thought I was being over-assertive because I wasn't explaining
myself fully. I apologize for that. But I did the research, and found out
why this was happening. (more below)

> > And inventing a new environment variable is contrary to the stated goal,
> > which is the lack of a registration process (apart from what you need
> > to do to have your package work with Python).

> Stated where?  The book does not clearly indicate (or I did not read that
> part yet) where `.tml' files are exactly looked for.

The "Writing Twisted Plugins" section, IIRC.


> And besides and moreover, I may well report a bug, without having an actual
> problem with it.  Having to much insist that a bug exists remembers me
> the old times of contacting vendors of non-free software.  This is the
> second time in the Python community that I observe this phenomenon.
> Being receptive to feedback is a good way to keep it coming, you know.

Trolls like this aren't necessary. If you have a suggestion for improvement
(a special-case for leaving out /usr/bin despite its being in the python
path, for example), then I'll gladly hear it out. But I'm fairly certain
that there's no debate on what the *current* behavior is.

> OK then.  I am now reporting a bug.  The default Python path for this
> Python 2.2.1, which I installed over a SuSE 8.0 Linux distribution, is:

As I stated above, /usr/bin is in your sys.path because that's probably where
your `mktap' is located. If you don't believe me, modify your local Twisted
installation to add a `print sys.path' to twisted.scripts.mktap.


> Doing `strace mktap', and cleaning out from the result what is expected
> from the current value of `sys.path' (yet without checking if the depth
> of search is reasonable), leaves these to consider, explain and justify:

Yeah, I examined the output of that strace that you quoted in your original
mail; I discovered, as I had expected, that /usr/bin was in my python path
because that's where `mktap' is located.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Sun Apr 27 18:03:42 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 18:03:42 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <20030423.155734.48529138.warner@lothar.com>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
	<20030423220930.GA14554@meson.dyndns.org>
	<20030423.155734.48529138.warner@lothar.com>
Message-ID: <oqwuhfa98h.fsf@alcyon.progiciels-bpi.ca>

[Brian Warner]

> > Woops.  This is a localization problem.  Maybe it should be an expected
> > skip for certain values of LC_LANG?  Or maybe we should just not use ls.

> Hmm, it means popen2 used french while reactor.spawnProcess used english.
> [...]  Could you try the attached patch and see if it fixes the problem?

> Index: twisted/internet/default.py
> Index: twisted/internet/interfaces.py
> Index: twisted/test/test_process.py

Thanks.  Following your suggestion, I re-installed Twisted 1.0.4 with
the above patches, and reran `admin/runtests'.  The patches apparently
solved a few things.  Without them, the testing summary was:

---------------------------------------------------------------------->
FAILED (failures=2, errors=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

and now, it is reduced to:

---------------------------------------------------------------------->
FAILED (failures=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

Here is the listing result of what remains:

---------------------------------------------------------------------->

===============================================================================
SKIPPED: testModules (twisted.test.test_doc.DocCoverage)
-------------------------------------------------------------------------------
Activate me when you feel like writing docstrings, and fixing GTK crashing bugs.
===============================================================================
SKIPPED: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
SKIPPED: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
EXPECTED FAILURE: testStor (twisted.test.test_ftp.FTPClientAndServerTests)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_ftp.py", line 276, in testStor
    self.assertEquals(open('HelloThere').read(), expectedContent)
 FailTest: '' != 'Hello\nHello\nHello\nHello\n'
===============================================================================
EXPECTED FAILURE: testSneakyHiddenDoom (twisted.test.test_loopback.LoopbackTCPTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 77, in testSneakyHiddenDoom
    LoopbackTestCase.testSneakyHiddenDoom(self)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 71, in testSneakyHiddenDoom
    self.assertEquals(c.lines, ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3'])
 FailTest: ['DOOM LINE', 'Hello 1', 'Hello 2'] != ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3']
===============================================================================
FAILURE: testRSA (twisted.test.test_conch.SSHKeysHandlingTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 76, in testRSA
    self._testKey(publicRSA_openssh, privateRSA_openssh, 'openssh')
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 85, in _testKey
    self._testGenerateKey(privKey, pubKey, privData, pubData, keyType)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 118, in _testGenerateKey
    self.assertEquals(keys.makePrivateKeyString(privKey, kind=keyType), privData)
 FailTest: '-----BEGIN RSA PRIVATE KEY-----\nMIIBxwIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW\n4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw\nvgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb\nZ4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSWKRxK0mvh6ERxKqIt1\nxJEJO74EykXZV4oNJ8sjAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2gyTr\niKFVoqjeEjt3SZKKqXHSApP/AjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0F\nVP+8PQm/g/aXf2QQkQT+omdHVEJrAjAXO7DkmaHRZwIq8j/kIPaLUgYyd20DC6Uk\n6su3N2tgEnAv2MjsJA2iAh55w918ozMCMEukX33NwkllGrZpuBiV/2W/VyGStaoM\ndS4Nm22Zgl4R+IUEFq9VggXV06VlPQbyMwIwJQPp/z+HDpM0ntg9cAo3390laeF0\nk8jwQJ0gL5x0oMYdpOhV0O5Ck/yrsRDCKDZA\n-----END RSA PRIVATE KEY-----' != '-----BEGIN RSA PRIVATE KEY-----\nMIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW\n4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw\nvgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb\nZ4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSW
 KRxK0mvh6ERxKqIt1\nxJEJO74EykXZV4oNJ8sjAjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0FVP+8\nPQm/g/aXf2QQkQT+omdHVEJrAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2\ngyTriKFVoqjeEjt3SZKKqXHSApP/AjBLpF99zcJJZRq2abgYlf9lv1chkrWqDHUu\nDZttmYJeEfiFBBavVYIF1dOlZT0G8jMCMBc7sOSZodFnAiryP+Qg9otSBjJ3bQML\npSTqy7c3a2AScC/YyOwkDaICHnnD3XyjMwIxALRzl0tQEKMXs6hH8ToUdlLROCrP\nEhQ0wahUTCk1gKA4uPD6TMTChavbh4K63OvbKg==\n-----END RSA PRIVATE KEY-----'
-------------------------------------------------------------------------------
Ran 587 tests in 98.090s

FAILED (failures=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 14:25:28 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 14:25:28 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
	<oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
	<20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
Message-ID: <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> It's not using the shell load path.  /usr/bin just happens to be in
> your sys.path.

No, it is not.  How can you be so assertive?

> And inventing a new environment variable is contrary to the stated goal,
> which is the lack of a registration process (apart from what you need
> to do to have your package work with Python).

Stated where?  The book does not clearly indicate (or I did not read that
part yet) where `.tml' files are exactly looked for.

> Now, are you actually having a *problem* with the performance of mktap?

I'm surely a patient man.  Yet, `mktap' could be faster, and nobody
would complain.

And besides and moreover, I may well report a bug, without having an actual
problem with it.  Having to much insist that a bug exists remembers me
the old times of contacting vendors of non-free software.  This is the
second time in the Python community that I observe this phenomenon.
Being receptive to feedback is a good way to keep it coming, you know.

> On 2003.04.27 12:50, Francois Pinard wrote:
> > It still looks like Twisted is going overboard with this.  If `plugins.tml'
> > files were being collected from the top-level directories along `sys.path'
> > and maybe no more than one-level below, and maybe also for test purposes
> > (despite the security weakness), into the current directory and one
> > level of directories below, it would probably make a lot of sense at a
> > reasonable cost.

> That's exactly what it's documented to do.  If it's not doing that,
> it's a bug.  (btw, the current directory gets no special treatment. If
> it's searching the current directory, it's because the current directory
> is somehow in sys.path)

OK then.  I am now reporting a bug.  The default Python path for this
Python 2.2.1, which I installed over a SuSE 8.0 Linux distribution, is:

---------------------------------------------------------------------->
>>> sys.path
['',
 '/usr/lib/python2.2',
 '/usr/lib/python2.2/plat-linux2',
 '/usr/lib/python2.2/lib-tk',
 '/usr/lib/python2.2/lib-dynload',
 '/usr/lib/python2.2/site-packages',
 '/usr/lib/python2.2/site-packages/PIL',
 '/sram/griffon/local/lib/python2.2/site-packages']
----------------------------------------------------------------------<

The last line comes from a local `sitecustomize.py'.  The current directory
while testing is:

---------------------------------------------------------------------->
~/sram/twisted/web
----------------------------------------------------------------------<

Doing `strace mktap', and cleaning out from the result what is expected
from the current value of `sys.path' (yet without checking if the depth
of search is reasonable), leaves these to consider, explain and justify:

---------------------------------------------------------------------->
stat64("/usr/bin/[/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/as/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/at/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ci/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/co/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/du/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/m4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/id/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/im/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ld/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/od/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ud/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ul/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/GET/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/X11/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/a2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/b2m/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/awk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/col/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/env/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gcc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gdb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/joe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/man/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdu/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mft/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mfw/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mrd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/s2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/old/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pic/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/red/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w3m/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/scp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/seq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tac/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tbl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tee/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tic/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tgz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/toe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/top/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tty/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/who/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xtp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xxd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstruct/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/infotocap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-remote/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dnsquery/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnminterp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnminvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/HEAD/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/Mail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/POST/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/a2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c2ph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cZ11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aoss/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/card/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cfte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chfn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/h2ph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cjet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/h2xs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/coil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/comm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cpio/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/edit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/file/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/find/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flea/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gasp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gcov/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fold/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/geqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/free/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/head/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpgv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsbj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsdj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gslj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gslp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gtbl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsnd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/host/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/info/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipcs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isql/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/join/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/last/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/less/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/line/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/make/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/look/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lore/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mesg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lprm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lynx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/neqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mren/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mutt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/t-im/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/audiofile-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pico/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pine/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/over/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/deallocvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w3mj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rjoe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/siga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rtin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/size/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rvim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sort/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/test/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/time/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sudo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tput/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vbox/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uniq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unsq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vdir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/view/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xdvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zcmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/znew/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xml-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/asciiview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfinitex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kbdrate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ior-decode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unicode_stop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2magick/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lxdialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/set_default_volume/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.runtime/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_deadlock/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/CheckHardware/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/conjure/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapdelete/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/convert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmmargin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gnuplot_x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/raw2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vimtutor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/utmpdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c++filt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bioradtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxbeep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/devdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxcnvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxctrl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxmode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxtoau/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmnlfilt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmllint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/susehelp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2dvi4a2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/addftinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unexpand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readelf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftstring/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftstrpnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/crontab/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2-port-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial-write-section/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setmetamode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.mesasoft/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcre-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/macptopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makeindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fiascotopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libusb-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-download/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csplain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allneeded/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbm2l2030/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rgb2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpbulkwalk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcolormask/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/disable-paste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cmuwmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dirname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/display/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pngtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/killall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c2070/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptranslate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lddlibc4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/escputil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2ascii/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmrotate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allcm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/batch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g3cat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bison/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cjpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/clear/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cksum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/susewvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ddate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzip2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/colrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/conch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ctags/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diff3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/djpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/egrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvihp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvips/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/etags/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixnt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gamix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gears/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifbg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.nvidia_glx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gperf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gprof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/graph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/groff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/iconv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ident/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gzexe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hpijs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/igawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmsmooth/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ijoin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/inimf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipcrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jmacs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpico/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jscal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jstar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/latex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lastb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2html/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/links/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lkbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mandb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2text/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/merge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf12/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf13/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdfwr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsdev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mib2c/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/minfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/namei/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmove/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showchar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/s3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/GameWrapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mxtar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nohup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nroff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/patch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/paste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pk2bm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pl2pm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pinky/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkill/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppm3d/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psnup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptked/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptksh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rbash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pydoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/refer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/reset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rexec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/shred/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsync/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/skill/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/split/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sprof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkmib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/touch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/trial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/troff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoddif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tsort/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtofits/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unrar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtojpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/users/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spctoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtopalm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/virmf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtorast/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/watch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtotiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/brushtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/which/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wishx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2x/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xargs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/write/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/addr2line/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xterm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zless/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zmore/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/palmtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfstriptable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ebrowse/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xwdtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tek2plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmnoise/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamstretch-gen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmalias/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lastlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmarith/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapmodify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapmodrdn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmdepth/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmslice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmgamma/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/asciitopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontexport/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/safe-rm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gtk-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sf2text/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfvirtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmnoraw/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpaste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapadd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmremap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmquant/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmscale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmshear/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c_rehash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtopng/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtorle/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtosgi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtosir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoxwd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pychecker/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sbiload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cfconv.wvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldappasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsewhich/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grep-changelog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ilbmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsexpand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpewrap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmquantall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dprofpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmchange/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uncompress/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/composite/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontimport/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libtoolize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcolors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kbd_mode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lesskey/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcs-checkin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/x3270if/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdither/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xbmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-idl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-ird/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pre-grohtml/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wine_wrapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamstretch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapsearch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sensors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tktwistd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tifftopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ximtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setJava/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkfontdesc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/find2perl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setleds/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/automake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setterm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoscan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autovbox/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getkeycodes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rubibtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libtool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pic2plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypmatch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-agent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpgetnext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sha1sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lynx-color/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/newaliases/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfxload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvi2fax/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfxtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libmikmod-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypwhich/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xpmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvicopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj4l/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvitomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvitype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpnetstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-name-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfxtable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontinst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixscribeps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showkey/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/faillog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/scgcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/411toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/resizecons/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/anytopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/findaffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoyuvsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makempy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tryaffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/manhole/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/manpath/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/podchecker/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-remote-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mapscrn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipnote/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sliceprint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ziptool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/name-client/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fdf2tan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mattrib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_printlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sirtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icon2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perl5.6.1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tap2deb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icombine/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcookie/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/updatedb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unzipsfx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/post-grohtml/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/logname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smidiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smidump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-mirror/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smilint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unicode_start/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eps2eps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gdbserver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lookbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/identify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/captoinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcl3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/epsffit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mgrtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/test_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glibcbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/testparm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/testpcsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pooltype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclhelp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpusm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/filesize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsyncstats/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makeinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cabextract/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdfilt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/installifd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdloop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/install-info/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xisdnload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/escputil-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_dump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_load/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_stat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkmanifest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag-result/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtowinicon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-event-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mbadblocks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yuvsplittoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sputoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/termidx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tzselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/findsmb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texfind/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texexec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texhash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/text2sf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texshow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texutil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2dvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2pdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoheader/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texdoctk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fitstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tgatoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmrelief/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/e2pall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixfmps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfcslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixtpps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texlinks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwpps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwwps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aafire/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aaflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aainfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rasttopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-add/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gemtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gemtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aatest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/access/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/text2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfcsplain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/podselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixpsditps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tfmtodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmshadow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/amixer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gettextize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g32pbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmclean/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texconfig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcolormap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bibtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmspread/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkisofs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2html/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2roff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aweset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/floppyd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cancel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/catman/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zsoelim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoacad/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strings/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtocpva/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoeyuv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoilbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtojpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoleaf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtompeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chattr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopict/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopjxl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopuzz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtorgb3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spottopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexmf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexpk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chroot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacs-21.2.95/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmto10x/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psidtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoatk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtogem/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomda/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtolps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomgr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopi3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoptx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoxbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoybm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmrainbow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixwish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkconch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/extractres/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-request/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/colcrt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/column/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipcloak/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fmtutil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/detect_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cspctl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diffpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ChangeSymlinks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkmktap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dltest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_archive/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cytune/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsepath/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/double/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsestat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsetool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capiinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/floppyd_installtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/envy24control/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/qrttoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpmlocate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmflash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmforge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessecho/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj6/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvipdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvired/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/factor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmlabel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/formail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mogrify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdctl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esddsp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/leaftoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdmon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdrec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/Check4SoundLibs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/finger/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gendiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmquant/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/websetroot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/genpref/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmshift/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flex++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/evtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtobmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtogif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoicr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtomap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoneo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopi1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopcx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtotga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtouil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoxpm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoyuv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expiry/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/montage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmenlarge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/font2c/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sperl5.6.1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gencat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getafm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getopt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/composeglyphs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aasavefont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ogonkify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifasm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifpos/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftlint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/funzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftzoom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftodvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gs_x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grodvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grolbp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grolj4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grotty/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/groups/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmenhance/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strace-graph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mptopdf/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/gunzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gouldtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnmonp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hostid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnrate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hpftodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2rgb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dosformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifclip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcomb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/qtconfig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixmacps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/indent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/import/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/initex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fterror/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifovly/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giftext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoreconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixmswrd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgcomm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fstopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixpspps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keyconverter/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ispell/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isovfy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/munchlist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwfwps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fttimer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/keygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unprotoize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdsample/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jstest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aconnect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfconvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2latex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lm1100/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/linkto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/md5sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ttf2afm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fdformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcedit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcmfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/locale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/locate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.devel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sldtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2usage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpstyl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsattr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmscalefixed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libIDL-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkfifo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mlabel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessopen.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/enscript/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmroff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoupdate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/netcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/newgrp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aclocal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chkdupexe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgcmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbpasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtofiasco/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtools/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtrace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/formaticc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zeisstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtexture/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpm2cpio/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/objcopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/objdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimptool-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcprofiledump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pf2afm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamcut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamoil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpegtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbm2g3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/patgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/passwd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmupc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdf2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfopt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdftex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/openvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nslookup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perlcc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xdvi.bin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nmblookup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gnuplot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmoil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpgpg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/neotoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/platex/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/pktogf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pktype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/afm2tfm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pr3287/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pltotf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpad/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bmptoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcie/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmmix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmpat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psbook/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rawtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rawtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstree/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdflatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ranlib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pyrexc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/python/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readcd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/recode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rename/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/renice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/all_notes_off/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcregrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamdeinterlace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcretest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hexdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rlogin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoplainpnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/screen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/script/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpcgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/inputattach/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rgb3toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setsid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libwmf-fontmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsdj500/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbmnt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbtar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/slogin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtotiffcmyk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsftopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/soelim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/splain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/telnet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spline/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texdoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/localedef/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tftopl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/loadkeys/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbcacls/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/states/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pi1toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbumount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmmontage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fgconsole/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/t1mapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eyuvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/buildhash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial.lxdialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpmqpack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/genscript/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/python2.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbmount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/imgtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpegtran/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/MakeTeXPK/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/twistd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkafmmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdatopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xsltproc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capifaxrcvd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbspool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uptime/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vftovp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/catchsegv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pi3topbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/virtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/usbview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wbinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vmstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lockfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gusload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vptovf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whatis/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yuvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whoami/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/widget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mpartition/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bashbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ksysguardd3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2gd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtolispm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/picttoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tapconvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printafm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printenv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icontopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vimdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamchannel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/animate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/switch2nv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpbulkget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdeltree/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uuidgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/thinkjettopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xpenguins/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xtrace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bdftops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcxtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypchfn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypchsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zegrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/omfonts/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zfgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmcrater/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zforce/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfdprm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pathchk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dircolors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smicache/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmlife/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmmask/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmpage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtogo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtolj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/apropos/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_recover/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/loadunimap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_checkpoint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdf2dsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ngettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixdlsrps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/arecord/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smiquery/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpinform/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smistrip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/openssl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/procinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/procmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpdelta/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fetchmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ifnames/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aseqnet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aserver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/winicontoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfb2pfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixwish8.1.8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/includeres/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmbrighten/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xvminitoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkhybrid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfbtops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3dinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtoolstest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/volname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/thumbpdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/protoize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perlbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perldoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/taskjuggler/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atmdiag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atmdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2epsn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keyscan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfgettable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ybmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessclose.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2index/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glib-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmedge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmhist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmnorm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmramp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtofs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbcontrol/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/html2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g3topbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpring/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chrc.config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pyprojet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmkernel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wftopfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmonisdn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/imlib-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xgettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsclean/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whereis/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rumakeindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cdparanoia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/encode_keychange/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capifax/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacsclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bootsplash-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltsh24/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltwish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtobbnbg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoascii/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lispmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmlcatalog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtocmuwm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoepson/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmhistmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkgmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkgpack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/odbcinst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pjtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wish8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifburst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifclrmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcolor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtonokia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcompose/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/apple_driver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giffiltr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfaddtable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yppasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtox10bm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifhisto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfbtopfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkinfodir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinter/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jaztool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/indxbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/infocmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rdjpgcom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pktopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifrotat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifrsize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifspnge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpcclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giftopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/alsaconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readlink/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifwedge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/epstopdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psmandup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/install/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/basename/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial.tcl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2eps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2fig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2svg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdialconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sgitopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wbmptopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnm2ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wrjpgcom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2epsi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2frag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2man/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcrop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpstatus/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpsnr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dosbootdisk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cdrecord/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmconvol/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/plotfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtomitsu/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpm-root/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmpscale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/suidperl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtosixel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.ignoredb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipython/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexlsr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktextfm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzip2recover/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sbigtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chkstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmreduce/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dumpkeys/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/calibrate_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmfade/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmhist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmnorm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmntsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmqvga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtolj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/old-name-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnmon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_dump185/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgunfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/switch2nvidia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setkeycodes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hipstopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/alsamixer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltwish24/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mshowfat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isodump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isoinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmbentley/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isosize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclsh8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.dri/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/CheckFor3DLibs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.mesaglide/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/afmtodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-rget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psresize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bunzip2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ckeygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmto4425/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptrap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpvacm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpwalk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pygtk-codegen-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoepsi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoicon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmhisteq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/socklist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoln03/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomacp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoplot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopsg3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtowbmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtozinc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimptool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atktopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rletopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From glyph at twistedmatrix.com  Sun Apr 27 18:29:43 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Apr 2003 17:29:43 -0500
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427174429.29b2c130.itamar@itamarst.org>
Message-ID: <BE4C732C-78FF-11D7-9C95-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, April 27, 2003, at 04:44 PM, Itamar Shtull-Trauring wrote:

>> Hi.  This is a resend of a message which was rejected, because too
>> big. Wise mailing list system! :-).  So, I removed 1255 lines from the
>> middle of the last transcript, showing the first 20 and the last 20
>> only. You'll merely have to believe me that those lines I removed were
>> there! :-)

Whoooops!  Since all the mailing list messages I get to OK are spam, I 
just scan the headers to make sure it's from someone valid.  This time, 
that meant I OK'd a huuge message (as I rejected 8 other spams...).  
Smart mailing list systems don't help if you have dumb mailing list 
admin.

> Thank you! We will see about fixing this ASAP.

This is a subtle issue... right now we're going to fix it by 
hard-coding /usr/bin and /usr/local/bin as paths that should not be 
checked, but the real problem is an interaction between Python's 
default path behavior, UNIX's filesystem layout, and the way 
twisted.python.plugins works.

Itamar and I had a few ideas for fixing it "for real" but the caveats 
that we would have to put in the documentation are so ugly that we 
discarded them.  Hard coding '/usr/bin' should fix most cases.

While we were in there, we also removed all paths with a '.' in them: 
since these can't be valid Python packages anyway, it doesn't affect 
its correctness, and it has the benefit of making mktap at least 30% 
faster, even without filtering /usr/bin.

Thanks for bringing 'strace mktap' to our attention.  I'm sure 
everybody will appreciate mktap being much less sluggish :).
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+rFnbvVGR4uSOE2wRAg4VAJ9GaUH7G0/8pSIzwPBkn5Do2ePw/ACeNHLf
4XcMqTTBAvo+gReI4HfjJ6E=
=YDQQ
-----END PGP SIGNATURE-----




From pinard at iro.umontreal.ca  Sun Apr 27 18:46:34 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 18:46:34 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
Message-ID: <oqr87na791.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> The default sys.path isn't there, but your `mktap' is located in
> /usr/bin, isn't it? :-)

It is.  Twisted was installed using `root', and with --prefix=/usr.

> > > And inventing a new environment variable is contrary to the stated goal,
> > > which is the lack of a registration process [...]

> > Stated where?  The book does not clearly indicate (or I did not read that
> > part yet) where `.tml' files are exactly looked for.

> The "Writing Twisted Plugins" section, IIRC.

I have "3.3 - Writing a New Plug-In for Twisted", and I presume this is what
you are referring to.  I read that section many times, and once more before
sending the above question, and once more now.
The documentation says that:

   Twisted finds its plug-ins by using pre-existing Python concepts;
   the load path, and packages.  Every top-level Python package[4]
   [...] can potentailly contain some number of plug-ins.  [...] The only
   difference between a package and a drop-in is the existence of a file
   named `plugins.tml' [...] that contains some special Python expression
   to identify the location of sub-packages or modules which can be loaded.

This is the most precise description I could find.  Maybe there is a
linguistic barrier (I'm not an English speaker), but to me, this is a
bit generic.  It is not said that plug-ins _are_ `plugins.tml' files, nor
that those TML files are necessarily at the same place the plug-ins are,
(like next to `__init__.py', say), only their existence is asserted.

It is not so clearly stated either that this is a goal that TML files shall
never be themselves registered.  Maybe you could use my naive reading
as a hint that the documentation could be more precise on these points,
as other readers might have the same interpretation difficulties than me.

> > [...] Being receptive to feedback is a good way to keep it coming,
> > you know.

> Trolls like this aren't necessary.

Hopefully, you'll come to know be better, and discover that I never troll.
I am a peaceful and joyful man, and try to speak in all honesty, always.
Oh, I may tease in a friendly way, but then, there are smileys not far.

> If you have a suggestion for improvement [...] then I'll gladly hear
> it out.

For now, being a Twisted newcomer that knows very little about it, my
contributions may be timid for a good while.  I'm just sharing the mere
existence of problems I see with my naive eyes, despite I know that in
the area of free software, patches and precise suggestions are usually
quite welcome.  I hope acquiring a bit of competence, and become a better
contributor with the time passing.  Let me apologise for all the false
notes I may sing in the meantime.

> If you don't believe me, modify your local Twisted installation to add a
> `print sys.path' to twisted.scripts.mktap.

I'm quite willing to believe you, you know! :-)

> [...] /usr/bin is in your sys.path because that's probably where your
> `mktap' is located.

Is Twisted modifying `sys.path' to include the first part of argv[0]?
Or is it standard Python behaviour?  I never noticed this yet in my own
scripts, but it might just have escaped my attention, and I might not know.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 19:20:57 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 19:20:57 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqr87na791.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 18:46:34 -0400
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca> <20030427215616.GA9407@toshi.anaprd01.md.comcast.net> <oqr87na791.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>

On 2003.04.27 18:46, Francois Pinard wrote:

> Is Twisted modifying `sys.path' to include the first part of argv[0]?
> Or is it standard Python behaviour?  I never noticed this yet in my own
> scripts, but it might just have escaped my attention, and I might not know.

Yeah, it's a common misconception about Python, actually. Yes, Python always
adds the location of the main script to sys.path (the misconception is that
people think it's "the current directory" rather than "the location of the main
script", because people so often run their main scripts from the directory
that they're located in.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Sun Apr 27 20:16:30 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 28 Apr 2003 10:16:30 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - Tildes in the book
In-Reply-To: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
References: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428001630.GU26530@frobozz.local>

On Sun, Apr 27, 2003 at 12:13:43PM -0400, Francois Pinard wrote:
> Hi, still me...
> 
> In the Twisted 1.0.4 book -- I hope this reference is unambiguous enough,
> I have not seen more than one :-) -- there is a problem here and there with
> `~' being shown over the next character (`/' for example) instead of prior
> to it as intented.  At many places, tildes are OK, however.  Should I try
> reporting all problematic cases?  I guess not, as the problem is likely
> to be the same at all places, and some global action could be taken.
> The example I'm currently looking at is at the end of page 136 (6. Web
> Applications; 6.1.2 Before we begin) on this quote:
> 
>    Make sure the `TwistedQuotes' directory is on your PYTYONPATH, put
>    `webquotes.rpy' and `WebQuotes.html' in your `~/public_html' directory,
>    and you are ready to go.
> 
> The `~' and `/' on the last sentence are at the same character position.

This is already fixed in CVS :)

You will find ^ also has the same problem -- and it is also fixed in CVS :)

-Andrew.




From pinard at iro.umontreal.ca  Sun Apr 27 20:28:48 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 20:28:48 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> > Is Twisted modifying `sys.path' to include the first part of argv[0]?
> > Or is it standard Python behaviour?

> Yes, Python always adds the location of the main script to sys.path [...]

Thanks for enlightening me.

For the case of the heaviness for `plugins.tml', at least on Unix, there
might be something we could do that would be reasonable on average,
but I'm not fully sure, I'll merely let judge those who are grown up! :-)

Usually, `/usr/bin/' and such do not have subdirectories, so if a
directory contains 1000 entries, one may immediately check if one of
these is `plugins.tml' by a direct try.  Then, if the number of links of
that directory -- itself -- is exactly 2, we can conclude that it has no
sub-directories, and that there is nothing more to check for this one.
We could then get more speed even for directories other than `/usr/bin/'.

This trick is heavily used in GNU find as a way to avoid `stat'ing all
entries in a directory to find sub-directories, when it can be proven
in advance there is no such sub-directories.  When the trick was added,
the speed-up that resulted was judged spectacular.

But I do not remember if Linux existed at the time.  As Linux seems to
beat many other systems at properly caching disk accesses, the benefits
of the trick might be more hidden.  A year ago, maybe, I tried the same
trick on Linux in hope of increasing the performance of `os.path.walk',
and the speed-up was not so significant.  This is part of my hesitation.

Moreover, maybe the above trick is meaningless on Windows or on MacOS.
I would be surprised if there are Unix filesystems where the link count of
2 for directories (`/' excepted) is not dependable; this might be another
thing to check.  With some luck, GNU find sources would tell us what the
problems may be.  The maintainers surely met them all! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From xlp223 at sina.com  Sun Apr 27 20:46:45 2003
From: xlp223 at sina.com (xlp223)
Date: Mon, 28 Apr 2003 08:46:45 +0800
Subject: [Twisted-Python] a problem about running php on twisted?
Message-ID: <20030428004645.8429.qmail@sina.com>

my system is 
window me
python 2.2.2
twisted 1.0.4
php 4.3.1
mysql
phpbb 2.0.4

i want to run phpbb on twisted 1.0.4 under window,
when i installed above software on window xp home edition,it was successful.
but when i installed above software on window me or window xp profession edition,it failed.

Step of my doing is 
1)create dir c:\pydoc and copy c:\python22\doc to c:\pydoc 
  create c:\pydoc\phpbb2 and copy phpbb2 to it

2)edit hello.rpy in c:\python22\scripts and save it in this dir
from twisted.web import static, twcgi

class PHPScript(twcgi.FilteredScript):
    filter = 'C:\\PHP\\php'

resource = static.File("c:\\pydoc")

resource.processors[".php"] = PHPScript

resource.indexNames = ['index.html','index.php']

3)run the command:
  python mktap.py web -p 80 --resource-script=hello.rpy -i index.html,index.php

4)run the command:
  python twistd.py -f web.tap -r win32

After the fourth step ran,i entered into the ie browser and input
http://localhost/   it is ok to show the html.
but while i input http://localhost/phpbb2 ,
it show 500 error. 

why? who can help me to solve it?

______________________________________

===================================================================



From itamar at itamarst.org  Sun Apr 27 21:25:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 21:25:47 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <20030427212547.6465e5b4.itamar@itamarst.org>

On Sun, 27 Apr 2003 19:20:57 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> > Is Twisted modifying `sys.path' to include the first part of
> > argv[0]? Or is it standard Python behaviour?  I never noticed this
> > yet in my own scripts, but it might just have escaped my attention,
> > and I might not know.
> 
> Yeah, it's a common misconception about Python, actually. Yes, Python
> always adds the location of the main script to sys.path (the
> misconception is that people think it's "the current directory" rather
> than "the location of the main script", because people so often run
> their main scripts from the directory that they're located in.

Of course, mktap also adds "the current directory" (".") to sys.path.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Sun Apr 27 22:28:25 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 27 Apr 2003 22:28:25 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net> <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428022825.GA27647@meson.dyndns.org>

On Sun, Apr 27, 2003 at 02:25:28PM -0400, Francois Pinard wrote:
> [Christopher Armstrong]
> 
> > It's not using the shell load path.  /usr/bin just happens to be in
> > your sys.path.
> 
> No, it is not.  How can you be so assertive?
> 

  If your "twistd" is in /usr/bin, then the '' at the beginning of sys.path
refers to /usr/bin.  It is not at all clear to me that it would be correct
to remove '' from the .tml search path.  It would result in greatly enhanced
mktap performance, but it could also lead to confusing behavior (and the
behavior of .tml searching is more than confusing enough already).

> > And inventing a new environment variable is contrary to the stated goal,
> > which is the lack of a registration process (apart from what you need
> > to do to have your package work with Python).
> 
> Stated where?  The book does not clearly indicate (or I did not read that
> part yet) where `.tml' files are exactly looked for.
> 
> > Now, are you actually having a *problem* with the performance of mktap?
> 
> I'm surely a patient man.  Yet, `mktap' could be faster, and nobody
> would complain.

  I certainly wouldn't ;)

  What twisted/python/plugins.py does is not particularly difficult.  Python
makes it difficult to do efficiently (perhaps because it is difficult to do
efficiently in a platform independant way).  If someone with more POSIX-foo
than I could take a good look at what it does, and see if there really is a
portable way we could implement parts of it in C (and maybe get those bits
added to Python itself), that'd be fantastic.

> [snip - searched paths]

  Thanks again for the bug reports.  Please, keep them coming :)

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 38 days, 23:03, 7 users, load average: 0.58, 0.50, 0.46
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030427/e722171b/attachment.pgp 

From itamar at itamarst.org  Sun Apr 27 22:32:08 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 22:32:08 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <20030428022825.GA27647@meson.dyndns.org>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
	<oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
	<20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
	<oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
	<20030428022825.GA27647@meson.dyndns.org>
Message-ID: <20030427223208.275ba0f0.itamar@itamarst.org>

On Sun, 27 Apr 2003 22:28:25 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   If your "twistd" is in /usr/bin, then the '' at the beginning of
>   sys.path
> refers to /usr/bin.  It is not at all clear to me that it would be
> correct to remove '' from the .tml search path.  It would result in
> greatly enhanced mktap performance, but it could also lead to
> confusing behavior (and the behavior of .tml searching is more than
> confusing enough already).

I think the fixes I made make it fast enough.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Sun Apr 27 22:53:00 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 27 Apr 2003 22:53:00 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427223208.275ba0f0.itamar@itamarst.org>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net> <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca> <20030428022825.GA27647@meson.dyndns.org> <20030427223208.275ba0f0.itamar@itamarst.org>
Message-ID: <20030428025300.GA31533@meson.dyndns.org>

On Sun, Apr 27, 2003 at 10:32:08PM -0400, Itamar Shtull-Trauring wrote:
> On Sun, 27 Apr 2003 22:28:25 -0400
> Jp Calderone <exarkun at intarweb.us> wrote:
> 
> >   If your "twistd" is in /usr/bin, then the '' at the beginning of
> > sys.path refers to /usr/bin.  It is not at all clear to me that it would
> > be correct to remove '' from the .tml search path.  It would result in
> > greatly enhanced mktap performance, but it could also lead to confusing
> > behavior (and the behavior of .tml searching is more than confusing
> > enough already).
> 
> I think the fixes I made make it fast enough.
> 

  I think it was fast enough before ;)  And my computer is *slow*.  But it
could be faster.

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 38 days, 23:03, 7 users, load average: 0.58, 0.50, 0.46
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030427/0a6ba54c/attachment.pgp 

From arashi1 at pd.jaring.my  Mon Apr 28 00:19:52 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Mon, 28 Apr 2003 12:19:52 +0800
Subject: [Twisted-Python] Virtual hosting and twisted.mail and twisted.web
Message-ID: <200304281219.52777.arashi1@pd.jaring.my>

Hello all,

I'm doing some RnD for eventual migration to a twisted system. I'm not sure 
how 'production' the various bits of twisted are and I'm also not sure how 
all the bits would fit together. 

I'm thinking I'll need:
twisted.web (need to do virtual hosts on with this)
twisted.mail
twisted.names(?)

I think the setup I'm planning is quite common on the net but most people use 
apache and sendmail and something called virtualhostmonster?

Users should not need a unix account - for email, I'm thinking of using a db 
to store their username and passwords and get twisted.mail to check there 
when they try to authenticate to download their emails. Incidentally, would 
mbox or a dbms be better here?

Of course, each website of these users would be on the same machine with the 
same ip. They would have different domains though - with the content of their 
websites stored in (maybe) an rdbms. So:

Bob's homepage would be at:
http://www.bobshome.com

and his email would be: bob at bobshome.net

I would greatly appreciate pointers/tips to achieve this.




From tv at twistedmatrix.com  Mon Apr 28 03:18:11 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Apr 2003 10:18:11 +0300
Subject: [Twisted-Python] Virtual hosting and twisted.mail and twisted.web
In-Reply-To: <200304281219.52777.arashi1@pd.jaring.my>
References: <200304281219.52777.arashi1@pd.jaring.my>
Message-ID: <20030428071811.GB31294@lapdog>

On Mon, Apr 28, 2003 at 12:19:52PM +0800, Mukhsein Johari wrote:
> Users should not need a unix account - for email, I'm thinking of using a db 
> to store their username and passwords and get twisted.mail to check there 
> when they try to authenticate to download their emails. Incidentally, would 
> mbox or a dbms be better here?

	Maildir is better than mbox is better than dbms.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Mon Apr 28 03:12:57 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Apr 2003 10:12:57 +0300
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca> <20030427215616.GA9407@toshi.anaprd01.md.comcast.net> <oqr87na791.fsf@alcyon.progiciels-bpi.ca> <20030427232057.GA10462@toshi.anaprd01.md.comcast.net> <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428071254.GA31294@lapdog>

On Sun, Apr 27, 2003 at 08:28:48PM -0400, Francois Pinard wrote:
> Usually, `/usr/bin/' and such do not have subdirectories, so if a
> directory contains 1000 entries, one may immediately check if one of
> these is `plugins.tml' by a direct try.  Then, if the number of links of
> that directory -- itself -- is exactly 2, we can conclude that it has no
> sub-directories, and that there is nothing more to check for this one.
> We could then get more speed even for directories other than `/usr/bin/'.

	The important thing is to make that optimization disabled if
	link count != 2. That is, in any other case you really need
	to go through the stat calls.

> But I do not remember if Linux existed at the time.  As Linux seems to
> beat many other systems at properly caching disk accesses, the benefits
> of the trick might be more hidden.  A year ago, maybe, I tried the same
> trick on Linux in hope of increasing the performance of `os.path.walk',
> and the speed-up was not so significant.  This is part of my hesitation.

	A Linux box with enough memory should have really good stat
	performance with a hot cache. For /usr/bin, it may be that
	the cache is mostly hot anyway. But even Linux will suffer
	the same performance problems with a cold cache or too little
	RAM to cache much.

-- 
:(){ :|:&};:



From xlp223 at sina.com  Mon Apr 28 04:52:28 2003
From: xlp223 at sina.com (xlp223)
Date: Mon, 28 Apr 2003 16:52:28 +0800
Subject: [Twisted-Python] speed on intranet?
Message-ID: <20030428085228.29234.qmail@sina.com>

my office has some computers with intranet.
i installed twisted 1.0.4 on a computer
when i visited the computer with twisted 1.0.4 from another
computer,speed in intranet is slow.

but since i enter into the internet on a computer through gateway,
speed of visiting the computer with web server of twisted 1.0.4 in intranet is quick.

why?

______________________________________

===================================================================



From pinard at iro.umontreal.ca  Mon Apr 28 09:51:03 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 09:51:03 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030428071254.GA31294@lapdog>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
	<oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
	<20030428071254.GA31294@lapdog>
Message-ID: <oqsms2yblk.fsf@alcyon.progiciels-bpi.ca>

[Tommi Virtanen]
> [Francois Pinard]

> > [...] if the number of links of that directory -- itself -- is exactly
> > 2, we can conclude that it has no sub-directories, and that there
> > is nothing more to check for this one.

> The important thing is to make that optimization disabled if link count
> != 2.  That is, in any other case you really need to go through the
> stat calls.

If I remember well, GNU `find' keeps the link count for a given directory.
Every time it stats an entry which is a sub-directory, it decreases the
link count.  When the link count reaches 2, the loop is exited (provided
`stat' calls are only needed for directory recursion -- `find' sometimes
need them for other purposes).

> A Linux box with enough memory should have really good stat performance
> with a hot cache.  [...] But even Linux will suffer the same performance
> problems with a cold cache or too little RAM to cache much.

One may consider that Twisted may also be used on lesser Unices than
Linux -- I'm not going to name any! :-) -- where the performance hit might
hurt more.  As a good rule, I think one should not overly rely on various
systems' disk cache, and be on the parsimonious side while accessing disks.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 28 09:54:12 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 09:54:12 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <oqof2qybgb.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> [...] it's a common misconception about Python, actually. Yes,
> Python always adds the location of the main script to sys.path (the
> misconception is that people think it's "the current directory" rather
> than "the location of the main script", because people so often run
> their main scripts from the directory that they're located in.

Interesting.  Thanks!

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 28 10:14:40 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 10:14:40 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Tildes in the book
In-Reply-To: <20030428001630.GU26530@frobozz.local>
References: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
	<20030428001630.GU26530@frobozz.local>
Message-ID: <oqk7deyai7.fsf@alcyon.progiciels-bpi.ca>

[Andrew Bennetts]
> [Francois Pinard]

> > The `~' and `/' on the last sentence are at the same character position.

> This is already fixed in CVS :) You will find ^ also has the same
> problem -- and it is also fixed in CVS :)

Thanks!  In fact, I remembered that I've seen the problem with `^', but
I did not have at hand an example of it, so I kept silent on this one...

P.S. - I'm still learning, a bit overwhelmed, but not discouraged yet! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From jdub at perkypants.org  Mon Apr 28 10:10:12 2003
From: jdub at perkypants.org (Jeff Waugh)
Date: Tue, 29 Apr 2003 00:10:12 +1000
Subject: [Twisted-Python] speed on intranet?
In-Reply-To: <20030428085228.29234.qmail@sina.com>
References: <20030428085228.29234.qmail@sina.com>
Message-ID: <20030428141012.GQ24149@lazarus>

<quote who="xlp223">

> my office has some computers with intranet.
> i installed twisted 1.0.4 on a computer
> when i visited the computer with twisted 1.0.4 from another
> computer,speed in intranet is slow.
> 
> but since i enter into the internet on a computer through gateway,
> speed of visiting the computer with web server of twisted 1.0.4 in intranet is quick.
> 
> why?

Possibly lack of reverse DNS on your local network, depending on what
twisted is doing - I could be speaking from my orifice. (If it's trying to
do a reverse lookup, it's timing out in the process, thus appearing to be
slow.)

(If this *is* happening, why is twisted doing the lookup by default?)

- Jeff

-- 
linux.conf.au 2004: Adelaide, Australia         http://lca2004.linux.org.au/
 
       "A rest with a fermata is the moral opposite of the fast food
           restaurant with express lane." - James Gleick, Faster



From cce at clarkevans.com  Mon Apr 28 12:09:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 28 Apr 2003 16:09:35 +0000
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
Message-ID: <20030428160935.GA68316@doublegemini.com>

I was just giving a quick Twisted tutorial to someone using
twisted and as we were breaking page construction into more
than one chunk... an unexpected stumbling block occurred --
returning NOT_DONE_YET form the resource's render() function.

I was thinking about two other options:

  1.  Perhaps NOT_DONE_YET could just be None, this 
      way, it can be the default return value.  As I'm
      browsing through my code this is the most common
      return... why not make it the default.

  2.  Alternatively, allow a Deferred to be a return 
      value.  Then the underlying caller can add 
      result.finish() to the deferred chain.   This
      has the advantage of not requiring finish() to
      really be managed.   Either the return value is
      a string, a Deferred, (or for backwards compatibiliy
      NOT_DONE_YET).  In either of the primary cases,
      result.finish() always gets called... thus making
      it easier on newbies.

Ideally, both of the above options could be used...

Best,

Clark



From cce at clarkevans.com  Mon Apr 28 12:17:56 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 28 Apr 2003 16:17:56 +0000
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428160935.GA68316@doublegemini.com>
References: <20030428160935.GA68316@doublegemini.com>
Message-ID: <20030428161756.GA68410@doublegemini.com>

On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
| I was just giving a quick Twisted tutorial to someone using
| twisted and as we were breaking page construction into more
| than one chunk... an unexpected stumbling block occurred --
| returning NOT_DONE_YET form the resource's render() function.
| 
| I was thinking about two other options:
| 
|   1.  Perhaps NOT_DONE_YET could just be None, this 
|       way, it can be the default return value.  As I'm
|       browsing through my code this is the most common
|       return... why not make it the default.

        Err, this isn't exactly what I was thinking.  What
        I was proposing...  if during the scope of the render()
        function, req.write() is called, then a None value
        would be an allowable return.   And if None is returned,
        req.finish() would be called automagically.

|   2.  Alternatively, allow a Deferred to be a return 
|       value.  Then the underlying caller can add 
|       result.finish() to the deferred chain.   This
|       has the advantage of not requiring finish() to
|       really be managed.   Either the return value is
|       a string, a Deferred, (or for backwards compatibiliy
|       NOT_DONE_YET).  In either of the primary cases,
|       result.finish() always gets called... thus making
|       it easier on newbies.
| 
| Ideally, both of the above options could be used...
| 
| Best,
| 
| Clark



From bob at redivi.com  Mon Apr 28 13:11:33 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 28 Apr 2003 13:11:33 -0400
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428161756.GA68410@doublegemini.com>
Message-ID: <7603D404-799C-11D7-B5C0-000A95686CD8@redivi.com>

On Monday, Apr 28, 2003, at 12:17 America/New_York, Clark C. Evans 
wrote:

> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
> | I was just giving a quick Twisted tutorial to someone using
> | twisted and as we were breaking page construction into more
> | than one chunk... an unexpected stumbling block occurred --
> | returning NOT_DONE_YET form the resource's render() function.
> |
> | I was thinking about two other options:
> |
> |   1.  Perhaps NOT_DONE_YET could just be None, this
> |       way, it can be the default return value.  As I'm
> |       browsing through my code this is the most common
> |       return... why not make it the default.
>
>         Err, this isn't exactly what I was thinking.  What
>         I was proposing...  if during the scope of the render()
>         function, req.write() is called, then a None value
>         would be an allowable return.   And if None is returned,
>         req.finish() would be called automagically.
>
> |   2.  Alternatively, allow a Deferred to be a return
> |       value.  Then the underlying caller can add
> |       result.finish() to the deferred chain.   This
> |       has the advantage of not requiring finish() to
> |       really be managed.   Either the return value is
> |       a string, a Deferred, (or for backwards compatibiliy
> |       NOT_DONE_YET).  In either of the primary cases,
> |       result.finish() always gets called... thus making
> |       it easier on newbies.
> |
> | Ideally, both of the above options could be used...

Or, you could just deprecate NOT_DONE_YET and say "if you're doing 
something that uses req.write you need to return a deferred".

For case 1, you return a deferred with an empty rval (None or '').  
This signifies that you took care of req.write.
For case 2, you return a deferred with the page as the rval.  This 
signifies that you want the server to req.write.

I think that's the simplest way, and takes the return values for render 
down to three, but really two for new code:
1) a string
2) a deferred
3) a deprecated NOT_DONE_YET




From stephen at theboulets.net  Mon Apr 28 13:20:20 2003
From: stephen at theboulets.net (Stephen Boulet)
Date: Mon, 28 Apr 2003 12:20:20 -0500
Subject: [Twisted-Python] Serving up php apps: gallery
Message-ID: <200304281220.20796.stephen@theboulets.net>

Anyone familiar with the php app "The Gallery" for online photo galleries? Is 
this the type of thing twisted can serve up?

I understand it makes use of the apache module "mod_rewrite"...

Thanks.

-- 
Stephen      
              From here to there
             and there to here,
           funny things are everywhere.  -- Dr Seuss





From radix at twistedmatrix.com  Mon Apr 28 14:08:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Apr 2003 14:08:52 -0400
Subject: [Twisted-Python] Serving up php apps: gallery
In-Reply-To: <200304281220.20796.stephen@theboulets.net>; from stephen@theboulets.net on Mon, Apr 28, 2003 at 13:20:20 -0400
References: <200304281220.20796.stephen@theboulets.net>
Message-ID: <20030428180852.GA1422@toshi.anaprd01.md.comcast.net>

On 2003.04.28 13:20, Stephen Boulet wrote:
> Anyone familiar with the php app "The Gallery" for online photo galleries? Is 
> this the type of thing twisted can serve up?

There are problems with using Twisted/PHP right now. PHP won't work unless you've
compiled it with some special flags for "CGI Support", at least as of one of the
recent PHP versions.

I'm not even sure if PHP support should remain in. Nobody's maintaining it (not
to mention that it's hard to support, apparently), and there are much better
solutions for serving PHP than what Twisted can offer.

> I understand it makes use of the apache module "mod_rewrite"...

I don't know what you're talking about wrt mod_rewrite,  but if you've already
got Apache, you should definitely be using Apache's PHP support with mod_php.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Mon Apr 28 15:57:15 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Apr 2003 14:57:15 -0500
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428161756.GA68410@doublegemini.com>
Message-ID: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, April 28, 2003, at 11:17 AM, Clark C. Evans wrote:

> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
> | I was just giving a quick Twisted tutorial to someone using
> | twisted and as we were breaking page construction into more
> | than one chunk... an unexpected stumbling block occurred --
> | returning NOT_DONE_YET form the resource's render() function.
> |
> | I was thinking about two other options:
> |
> |   1.  Perhaps NOT_DONE_YET could just be None, this
> |       way, it can be the default return value.  As I'm
> |       browsing through my code this is the most common
> |       return... why not make it the default.

The reasoning behind not allowing None as a default value is that 
forgetting is too easy.  If you're writing a simple request that has a 
render() method that looks like

     def render(self, request):
         if self.authenticated:
             return self.goodies

the default behavior should not be "hang forever".

>         Err, this isn't exactly what I was thinking.  What
>         I was proposing...  if during the scope of the render()
>         function, req.write() is called, then a None value
>         would be an allowable return.   And if None is returned,
>         req.finish() would be called automagically.

What if you wanted to start writing the page in the render() method but 
keep writing it later?  Then we have None as a synonym for NOT_DONE_YET 
except in certain situations where you've done something to the request?

> |   2.  Alternatively, allow a Deferred to be a return
> |       value.  Then the underlying caller can add
> |       result.finish() to the deferred chain.   This
> |       has the advantage of not requiring finish() to
> |       really be managed.   Either the return value is
> |       a string, a Deferred, (or for backwards compatibiliy
> |       NOT_DONE_YET).  In either of the primary cases,
> |       result.finish() always gets called... thus making
> |       it easier on newbies.

I've discussed this with several different people at various times... 
the trouble is, there isn't really a use-case that Deferreds make 
easier.  render() ends up being a relatively low-level interface, and 
the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
that has been implemented with it.

I am definitely a True Believer in the Deferred, but in this case it 
just doesn't seem worth the inconvenience of deprecating things and 
shuffling stuff around for a vanishingly small benefit.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+rYejvVGR4uSOE2wRAnNVAJ9yv7vhkmlVSYT/Ba5HhGF9UmXaGwCghHEa
Il76B0P3doYwTxldfvakhms=
=as/e
-----END PGP SIGNATURE-----




From bruce at cubik.org  Mon Apr 28 16:41:39 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 28 Apr 2003 14:41:39 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] "no such user" is too informative, no need
 to give attackers more information than necessary
In-Reply-To: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com>
References: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com>
Message-ID: <3EAD9203.4030204@cubik.org>

itamarst CVS wrote:
> Modified files:
> Twisted/twisted/web/distrib.py 1.47 1.48
> 
> Log message:
> "no such user" is too informative, no need to give attackers more information than necessary

While there is good motivation for not making this public info, it seems 
like it would be a good thing to make this available to someone 
debugging the system, either by way of the log file or some other means.

While not necessarily appropriate for Twisted, one approach that I've 
used well in the past (in my own webserver and web app software) was to 
have an error page that recognized authenticated users and would display 
generic errors to unknown or unauthorized users, and 
informative/descriptive errors to authorized people (as well as direct 
access to the web-based tools used to determine what went wrong and so on).

Maybe some sort of policy framework might let that happen within Twisted 
or some other generalized logging infrastructure.  But at the least, it 
seems like this sort of info should be logged.

Cheers,

  - Bruce

> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/web/distrib.py.diff?r1=text&tr1=1.47&r2=text&tr2=1.48&cvsroot=Twisted
> 
> Index: Twisted/twisted/web/distrib.py
> diff -u Twisted/twisted/web/distrib.py:1.47 Twisted/twisted/web/distrib.py:1.48
> --- Twisted/twisted/web/distrib.py:1.47	Tue Dec  3 03:21:48 2002
> +++ Twisted/twisted/web/distrib.py	Mon Apr 28 13:36:52 2003
> @@ -230,10 +230,7 @@
>              pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell \
>                       = pwd.getpwnam(username)
>          except KeyError:
> -            return error.ErrorPage(http.NOT_FOUND,
> -                                   "No Such User",
> -                                   "The user %s was not found on this system." %
> -                                   repr(username))
> +            return error.NoResource()
>          if sub:
>              twistdsock = os.path.join(pw_dir, self.userSocketName)
>              rs = ResourceSubscription('unix',twistdsock)




From astreib at indiana.edu  Mon Apr 28 17:29:08 2003
From: astreib at indiana.edu (Allan Streib)
Date: Mon, 28 Apr 2003 16:29:08 -0500 (EST)
Subject: [Twisted-Python] mktap problem, cPickle.UnpickleableError
Message-ID: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>

Hi,

I am trying to create an XMLRPC server based on the plugins example in the
HOWTO documentation.  My TAP construction module looks like:

    from twisted.web import server
    from MyXMLRPCServer import methods

    from twisted.python import usage

    class Options(usage.Options):
        optParameters = [["port", "p", 8080, "Port number for XMLRPC Server."],
                         ["ldapurl", None, "ldap://localhost/", "URL for ldap directory server."],
                         ["ldapbinddn", None, "cn=Manager,dc=iu,dc=edu", "Bind DN for directory"],
                         ["ldappw", None, None, "Password for directory Bind DN"]]

        def postOptions(self):
            if self['ldappw'] is None:
                raise usage.UsageError, "Must provide option ldappw"

    def updateApplication(app, config):
        port = int(config['port'])
        factory = server.Site(methods.MyXMLRPCMethods(config))
	 app.listenTCP(port, factory)


 When I run mktap with the appropriate parameters for my application, I get:

    Traceback (most recent call last):
      File "/usr/local/bin/mktap", line 30, in ?
        run()
      File "/usr/local/lib/python2.2/site-packages/twisted/scripts/mktap.py", line 252, in run
        a.save()
      File "/usr/local/lib/python2.2/site-packages/twisted/internet/app.py", line 754, in save
        dumpFunc(self, f)
      File "/usr/local/lib/python2.2/site-packages/twisted/internet/app.py", line 736, in dumpFunc
        _dump(obj, file, 1)
    cPickle.UnpickleableError: Cannot pickle <type 'LDAP'> objects

I think I am getting this because my "MyXMLRPCMethods" instance contains a
connection to the LDAP Server.  So what is the best approach to work
around this.  Sorry if this is a newbie question; I am a newbie.

Allan



From exarkun at intarweb.us  Mon Apr 28 17:42:19 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 28 Apr 2003 17:42:19 -0400
Subject: [Twisted-Python] mktap problem, cPickle.UnpickleableError
In-Reply-To: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>
Message-ID: <20030428214219.GA6512@meson.dyndns.org>

On Mon, Apr 28, 2003 at 04:29:08PM -0500, Allan Streib wrote:
> 
> Hi,
> 
> I am trying to create an XMLRPC server based on the plugins example in the
> HOWTO documentation.  My TAP construction module looks like:
> 
> [snip]
> 
> I think I am getting this because my "MyXMLRPCMethods" instance contains a
> connection to the LDAP Server.  So what is the best approach to work
> around this.  Sorry if this is a newbie question; I am a newbie.
> 

  Don't connect to the LDAP server until your application starts up.  This
may be best done in a Factory's startFactory() method or a Service's
startService method, or hackfully in one of your object's __setstate__
methods.

  mktap is writing a configuration file to disk, not actually running your
app.  So you don't want to set up any runtime stuff, like network
connections, in updateApplication().

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 39 days, 17:03, 8 users, load average: 0.67, 0.68, 0.64
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030428/f5c07df3/attachment.pgp 

From uwe at oss4u.com  Mon Apr 28 17:45:07 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 28 Apr 2003 14:45:07 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] "no such user" is too informative, no need to give attackers more information than necessary
In-Reply-To: <3EAD9203.4030204@cubik.org>
References: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com> <3EAD9203.4030204@cubik.org>
Message-ID: <200304281445.07171.uwe@oss4u.com>

It would already be helpful if there was a simple log entry, console message 
etc.  about this

On Monday 28 April 2003 01:41 pm, Bruce Mitchener wrote:
> itamarst CVS wrote:
> > Modified files:
> > Twisted/twisted/web/distrib.py 1.47 1.48
> >
> > Log message:
> > "no such user" is too informative, no need to give attackers more
> > information than necessary
>
> While there is good motivation for not making this public info, it seems
> like it would be a good thing to make this available to someone
> debugging the system, either by way of the log file or some other means.
>
> While not necessarily appropriate for Twisted, one approach that I've
> used well in the past (in my own webserver and web app software) was to
> have an error page that recognized authenticated users and would display
> generic errors to unknown or unauthorized users, and
> informative/descriptive errors to authorized people (as well as direct
> access to the web-based tools used to determine what went wrong and so on).
>
> Maybe some sort of policy framework might let that happen within Twisted
> or some other generalized logging infrastructure.  But at the least, it
> seems like this sort of info should be logged.
>
> Cheers,
>
>   - Bruce
>
> > ViewCVS links:
> > http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/
> >web/distrib.py.diff?r1=text&tr1=1.47&r2=text&tr2=1.48&cvsroot=Twisted
> >
> > Index: Twisted/twisted/web/distrib.py
> > diff -u Twisted/twisted/web/distrib.py:1.47
> > Twisted/twisted/web/distrib.py:1.48 ---
> > Twisted/twisted/web/distrib.py:1.47	Tue Dec  3 03:21:48 2002 +++
> > Twisted/twisted/web/distrib.py	Mon Apr 28 13:36:52 2003
> > @@ -230,10 +230,7 @@
> >              pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir,
> > pw_shell \ = pwd.getpwnam(username)
> >          except KeyError:
> > -            return error.ErrorPage(http.NOT_FOUND,
> > -                                   "No Such User",
> > -                                   "The user %s was not found on this
> > system." % -                                   repr(username))
> > +            return error.NoResource()
> >          if sub:
> >              twistdsock = os.path.join(pw_dir, self.userSocketName)
> >              rs = ResourceSubscription('unix',twistdsock)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From mario at ruggier.org  Mon Apr 28 17:46:53 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Mon, 28 Apr 2003 23:46:53 +0200
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>
Message-ID: <ECAECBFE-79C2-11D7-B928-000393756786@ruggier.org>

On lundi, avr 28, 2003, at 21:57 Europe/Amsterdam, Glyph Lefkowitz 
wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Monday, April 28, 2003, at 11:17 AM, Clark C. Evans wrote:
>
>> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
>> | I was just giving a quick Twisted tutorial to someone using
>> | twisted and as we were breaking page construction into more
>> | than one chunk... an unexpected stumbling block occurred --
>> | returning NOT_DONE_YET form the resource's render() function.
>> |
>> | I was thinking about two other options:
>> |
>> |   1.  Perhaps NOT_DONE_YET could just be None, this
>> |       way, it can be the default return value.  As I'm
>> |       browsing through my code this is the most common
>> |       return... why not make it the default.
>
> The reasoning behind not allowing None as a default value is that 
> forgetting is too easy.  If you're writing a simple request that has a 
> render() method that looks like
>
>     def render(self, request):
>         if self.authenticated:
>             return self.goodies
>
> the default behavior should not be "hang forever".
>
>>         Err, this isn't exactly what I was thinking.  What
>>         I was proposing...  if during the scope of the render()
>>         function, req.write() is called, then a None value
>>         would be an allowable return.   And if None is returned,
>>         req.finish() would be called automagically.
>
> What if you wanted to start writing the page in the render() method 
> but keep writing it later?  Then we have None as a synonym for 
> NOT_DONE_YET except in certain situations where you've done something 
> to the request?
>
>> |   2.  Alternatively, allow a Deferred to be a return
>> |       value.  Then the underlying caller can add
>> |       result.finish() to the deferred chain.   This
>> |       has the advantage of not requiring finish() to
>> |       really be managed.   Either the return value is
>> |       a string, a Deferred, (or for backwards compatibiliy
>> |       NOT_DONE_YET).  In either of the primary cases,
>> |       result.finish() always gets called... thus making
>> |       it easier on newbies.
>
> I've discussed this with several different people at various times... 
> the trouble is, there isn't really a use-case that Deferreds make 
> easier.  render() ends up being a relatively low-level interface, and 
> the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
> that has been implemented with it.
>
> I am definitely a True Believer in the Deferred, but in this case it 
> just doesn't seem worth the inconvenience of deprecating things and 
> shuffling stuff around for a vanishingly small benefit.

Completely agree. Related to this issue, i feel, is what should be best 
practices
for a twisted web application? With all that's available, and little 
imagination,
one can very easily get all tangled up in blue ;)

In view of a site that I have the intention to build, I have been 
trying to select
what best implementation architecture to adopt, looking always for the 
most
stupidly simple. I also want to be able to handle errors as nicely as 
possible
for the users -- meaning I would like to, _whenever_ possible, return a
fully consistent page (and hopefully the one expected by the user) that
provides also the error info, but that would not require the user to do 
anything
more than correct form input data on the _same_ page (without even 
hitting Back
on the browser). I hate the feeling of being surprised with drastic 
error pages,
with all my input data apparently disappeared (also dislike pop-ups 
asking to
repost data, ...). Of course these errors will be of the type 'Ah, that 
one exists
already please try another'... This is all somewhat application 
specific, and
about interfaces, but i feel implementation style can both help or 
hinder this.

A further issue that i find very nagging (at least during development), 
is that
if an error occurs within the presentation layer, the response hangs 
forever.
(These should of course be only development bugs, but i would not like 
to
deliver an app that *may* have presentation bugs yet unknown.) I 
therefore
wrap the call to the real presentation handler in a try/catch. Errors 
in the
business logic are raised to the error handler, so this is not a 
problem. Since I
want my errors to be rendered with a fully functional response, the 
error callback
simply sets the additional response data object, and passes to the
presentation layer (this assumes that the business layer has behaved 
nicely
and attached to request the necessary and sufficient data objects, so 
that
the presentation can render it into a coherent page).

  I am going for this anatomy:


class WebAppPage(twisted.web.resource.Resource):

     def render(self, request):
         request.setHeader('Content-Type', 'text/html; charset=utf-8')
         ...
         d = threads.deferToThread(self.businessLogic, request) # to be 
threadpooled ;)
         d.addCallback(self.presentationLogic, request)
         d.addErrback(self.errBack, request)
         return NOT_DONE_YET

   def businessLogic(self, request):
       # uses functionality that is neatly factored in external modules 
;)
       # and attaches the resulting data objects to request in a 
designated
       # container, separate from args (e.g. respargs).
       # Knows no HTML, never calls request.write()

  def presentationLogic(self, result, request, error=None):
     try:
         self._presentationLogic(result, request, error)
     except:
         import sys
         request.write( '''Ooops, error in presentation layer:<p>%s: 
%s</p>'''
                         % ( sys.exc_info()[0], ' -- 
'.join(sys.exc_info()[1].args) ))

   def _presentationLogic(self, result, request, error=None):
       # combines the data objects in args, and result (if any - thus 
may be None)
       # with rendering templates, html, js, css, ...

def errBack(self, error, request):
     self.presentationLogic([],request,error=error)


This suggests that my site's rpy resources should inherit from a 
subclass of resource,
to at least define a common error callback and presentation try/catch 
wrap for the whole
site. However, a small thing escapes me -- how do i guarantee specific 
and automatic
treatment to the request object for all my resources? E.g. setting 
specific headers,
reading cookies/session info, etc., without coding this in every rpy 
instance?

       mario




From bob at redivi.com  Mon Apr 28 18:14:57 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 28 Apr 2003 18:14:57 -0400
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>
Message-ID: <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>

On Monday, Apr 28, 2003, at 15:57 America/New_York, Glyph Lefkowitz 
wrote:
>> |   2.  Alternatively, allow a Deferred to be a return
>> |       value.  Then the underlying caller can add
>> |       result.finish() to the deferred chain.   This
>> |       has the advantage of not requiring finish() to
>> |       really be managed.   Either the return value is
>> |       a string, a Deferred, (or for backwards compatibiliy
>> |       NOT_DONE_YET).  In either of the primary cases,
>> |       result.finish() always gets called... thus making
>> |       it easier on newbies.
>
> I've discussed this with several different people at various times... 
> the trouble is, there isn't really a use-case that Deferreds make 
> easier.  render() ends up being a relatively low-level interface, and 
> the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
> that has been implemented with it.
>
> I am definitely a True Believer in the Deferred, but in this case it 
> just doesn't seem worth the inconvenience of deprecating things and 
> shuffling stuff around for a vanishingly small benefit.

The error handling inherent with Deferred makes it worth it IMHO.  I 
see a lot of NOT_DONE_YET responses fail and it just hangs for the web 
user unless the developer of the function did a lot more work.. a 
deferred could just errback on a failure rather than having to summon 
the web traceback mechanism manually.

-bob




From cce at clarkevans.com  Mon Apr 28 22:37:26 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 29 Apr 2003 02:37:26 +0000
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>
References: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com> <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>
Message-ID: <20030429023726.GA70169@doublegemini.com>

On Mon, Apr 28, 2003 at 01:11:33PM -0400, Bob Ippolito wrote:
| Or, you could just deprecate NOT_DONE_YET and say "if you're doing
| something that uses req.write you need to return a deferred".
...
| I think that's the simplest way, and takes the return values for
| render down to three, but really two for new code:
| 1) a string
| 2) a deferred
| 3) a deprecated NOT_DONE_YET

Advantages:
 - keeps the clear error condition when mis-used
 - NOT_DONE_YET uglyness goes away
 - request.finish() can be handled automatically, ie, the
   default errback/callback and the end of the chain can
   make sure that request.finish() is called
 - could provide for better default exception handling,
   the first thing I did as a newbie was dig to find out
   how to get those wonderful traceback pages working
   for deferred failures... why not let it be the default?

I'd add one more... option though:

  4) If request.finish() has already been called, then
     it is acceptable to return None

On Mon, Apr 28, 2003 at 06:14:57PM -0400, Bob Ippolito wrote:
| On Monday, Apr 28, 2003, at 15:57 America/New_York, Glyph Lefkowitz wrote:
| >>|   2.  Alternatively, allow a Deferred to be a return
| >>|       value.  Then the underlying caller can add
| >>|       result.finish() to the deferred chain.   This
| >>|       has the advantage of not requiring finish() to
| >>|       really be managed.   Either the return value is
| >>|       a string, a Deferred, (or for backwards compatibiliy
| >>|       NOT_DONE_YET).  In either of the primary cases,
| >>|       result.finish() always gets called... thus making
| >>|       it easier on newbies.
| >
| >I've discussed this with several different people at various times... 
| >the trouble is, there isn't really a use-case that Deferreds make 
| >easier.  render() ends up being a relatively low-level interface, and 
| >the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
| >that has been implemented with it.
| >
| >I am definitely a True Believer in the Deferred, but in this case it 
| >just doesn't seem worth the inconvenience of deprecating things and 
| >shuffling stuff around for a vanishingly small benefit.
| 
| The error handling inherent with Deferred makes it worth it IMHO.  I 
| see a lot of NOT_DONE_YET responses fail and it just hangs for the web 
| user unless the developer of the function did a lot more work.. a 
| deferred could just errback on a failure rather than having to summon 
| the web traceback mechanism manually.

I've had two use cases for NOT_DONE_YET they are:

   1.  You've already use req.write() several times followed
       by req.finish()... and then return NOT_DONE_YET.   This is
       confusing usage, primarly beacuse you *are* done.   This
       usage is supported by option #4 above.

   2.  You've setup a async call to finish handling the request,
       and in this case, it makes sence to return Deferred.  In
       this case returning NOT_DONE_YET, and having to call 
       req.finish() is just extra, unnecessary baggage; further,
       default error handling isn't provided when it should be.

NOT_DONE_YET is less than optimal in both use cases where it is used,
both of these cases confused a newbie that I was trying to teach.

Best,

Clark



From m at moshez.org  Tue Apr 29 05:34:07 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 09:34:07 -0000
Subject: [Twisted-Python] Tagging
Message-ID: <20030429093407.7593.qmail@green.zadka.com>

FYI: last-python2_1-compatible is a tag that marks the last place where
Twisted is (in theory) Python 2.1 compatible

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From pinard at iro.umontreal.ca  Tue Apr 29 10:41:50 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 10:41:50 -0400
Subject: [Twisted-Python] Reloading of the same `.rpy' file
Message-ID: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>

Hi, Twisted people.

Playing with resource files, I noticed that the outer-level code within
`.rpy' files is executed again every time the page using them is fetched by
the browser.  If `test.py' contains:

---------------------------------------------------------------------->
print "Hello!"

...
resource = ...
----------------------------------------------------------------------<

than each `Alt-R' within Netscape, once `http://localhost:8080/test.rpy' has
been loaded, will have "Hello!" added to the Twisted log file.

I would have expected the resource file to be loaded once, and reused after
without being wholly re-initialised each time.  I tried "import remanent"
within the resource file, and checked that "remanent" is loaded and
intialised only once (moreover, it gets compiled!), so I'm tempted to move
all code from `test.rpy' into `remanent.py' and reduce `test.rpy' to a mere:

---------------------------------------------------------------------->
import remanent
resource = remanent.resource
----------------------------------------------------------------------<

which is a bit ridiculous if it has to be a standard idiom.

On the other hand, for debugging, I agree it is a bit handsome being able to
modify `test.rpy' and trying the new version without restarting the server.
This is a weak justification however.  Whenever the `.tap' file needs to be
rebuilt, the server needs to be restarted anyway.  This soon warrants a
Makefile, and adding another dependency over `test.rpy' is a simple matter.

Maybe the Twisted design is trying, here, to spare memory by not keeping
`.rpy' code in its memory, in case these would be very numerous or contain a
lot of code?  Or trying to protect itself against leaks from such, but how?
I have the vague feeling that I'm missing something important in this area.
Would some soul be kind enough to accept enlightening mine? :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From lafou at wanadoo.fr  Tue Apr 29 11:23:12 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 29 Apr 2003 17:23:12 +0200
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <1051629791.3016.14.camel@biproc>

I think Zope has the same behaviour. The solution is often to put a
reverse proxy before twisted.web.

On Tue, 2003-04-29 at 16:41, Fran?ois Pinard wrote:
> Hi, Twisted people.
> 
> Playing with resource files, I noticed that the outer-level code within
> `.rpy' files is executed again every time the page using them is fetched by
> the browser.  If `test.py' contains:
> 
> ---------------------------------------------------------------------->
> print "Hello!"
> 
> ...
> resource = ...
> ----------------------------------------------------------------------<
> 
> than each `Alt-R' within Netscape, once `http://localhost:8080/test.rpy' has
> been loaded, will have "Hello!" added to the Twisted log file.
> 
> I would have expected the resource file to be loaded once, and reused after
> without being wholly re-initialised each time.  I tried "import remanent"
> within the resource file, and checked that "remanent" is loaded and
> intialised only once (moreover, it gets compiled!), so I'm tempted to move
> all code from `test.rpy' into `remanent.py' and reduce `test.rpy' to a mere:
> 
> ---------------------------------------------------------------------->
> import remanent
> resource = remanent.resource
> ----------------------------------------------------------------------<
> 
> which is a bit ridiculous if it has to be a standard idiom.
> 
> On the other hand, for debugging, I agree it is a bit handsome being able to
> modify `test.rpy' and trying the new version without restarting the server.
> This is a weak justification however.  Whenever the `.tap' file needs to be
> rebuilt, the server needs to be restarted anyway.  This soon warrants a
> Makefile, and adding another dependency over `test.rpy' is a simple matter.
> 
> Maybe the Twisted design is trying, here, to spare memory by not keeping
> `.rpy' code in its memory, in case these would be very numerous or contain a
> lot of code?  Or trying to protect itself against leaks from such, but how?
> I have the vague feeling that I'm missing something important in this area.
> Would some soul be kind enough to accept enlightening mine? :-)
-- 
Philippe Lafoucri?re <lafou at wanadoo.fr>
InFuzzion




From m at moshez.org  Tue Apr 29 11:34:42 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 15:34:42 -0000
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429153442.23304.qmail@green.zadka.com>

On 29 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> which is a bit ridiculous if it has to be a standard idiom.

The standard idiom is to use the Twisted Registry. Look at
http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From pinard at iro.umontreal.ca  Tue Apr 29 13:39:49 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 13:39:49 -0400
Subject: [Twisted-Python] Re: Newbie reading Twisted book!
In-Reply-To: <20030423062513.GD10754@frobozz.local>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
	<20030423055927.3937.qmail@green.zadka.com>
	<20030423062513.GD10754@frobozz.local>
Message-ID: <oqel3lyzh6.fsf@titan.progiciels-bpi.ca>

[Andrew Bennetts]
> [Moshe Zadka]
> > [Francois Pinard]

> > > I just want to share my enthusiasm, so far, at reading the Twisted book

> > The book is a collaboration of many Twisted developers.

> [...] Brian Warner, who is my personal documentation hero for writing the
> PB chapter virtually single-handedly! :)

Yes, there surely is a lot of substance in that single chapter.  It cannot
be swallowed all at once, people like me have to digest in small gulps! :-)

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 14:05:18 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:05:18 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429153442.23304.qmail@green.zadka.com>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429153442.23304.qmail@green.zadka.com>
Message-ID: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>

[Moshe Zadka]

> The standard idiom is to use the Twisted Registry.  Look at
> http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml

Thanks for the pointer, yet I'm not ready to understand it yet.  It seems I
should know `Componentized' first.  Later, hopefully.  I wonder what is the
extent and scope of a `registry'.  Exactly one per `.rpy' file presumably?

Does this explain why, or why not, `.rpy' files are reloaded many times?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 14:07:25 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:07:25 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <1051629791.3016.14.camel@biproc>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
Message-ID: <oq4r4hyy76.fsf@titan.progiciels-bpi.ca>

[Philippe Lafoucri?re]

> The solution is often to put a reverse proxy before twisted.web.

I'm at lost here.  What is a reverse proxy in the context of Twisted?
(Could you give me some pointers?)  And how does a reverse proxy (whatever
it is) change the reloading behaviour of Twisted for `.rpy' files?

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Tue Apr 29 14:19:41 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 29 Apr 2003 14:19:41 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
	<oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429141941.1386dd4e.itamar@itamarst.org>

On 29 Apr 2003 14:07:25 -0400
pinard at iro.umontreal.ca (Fran?ois Pinard) wrote:

> > The solution is often to put a reverse proxy before twisted.web.

Nope.

> I'm at lost here.  What is a reverse proxy in the context of Twisted?
> (Could you give me some pointers?)  And how does a reverse proxy
> (whatever it is) change the reloading behaviour of Twisted for `.rpy'
> files?

It doesn't affect .rpy's in any way whatsoever. 

RPYs are designed to be reloaded every time. If you don't want this
behaviour, don't use RPYs - rather, create your Resource tree in memory,
rather than out of the filesystem.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Tue Apr 29 14:51:11 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:51:11 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <87he8ml8is.fsf@flibuste.net>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net>
Message-ID: <oqznm9xhls.fsf@titan.progiciels-bpi.ca>

[William Dode]
> [VAN DER HEIJDEN Maarten]

> > Being new to twisted, I didn't find in the documentation an example (in
> > DOM Template, widgets, woven or resource templates ), for implementing a
> > form.  Someone has a link?

> this is an extended ReportRequest with form :

Thanks a lot, William.

Your example (quoted in full below, for reference) has been both useful and
instructive.  I have a question, though.  What is the purpose of `isLeaf'?
It does not seem to be called ever, when I run your example.

---------------------------------------------------------------------->
import twisted.web.resource
import cgi
from twisted.protocols import http
from twisted.web import resource,error
class ReportRequest(twisted.web.resource.Resource):
    """ ReportRequest with forms and cookies """
    def isLeaf(self):
        return true
    def render(self, request):
        user = request.getUser()
        password = request.getPassword()

        if not user:
            request.setResponseCode(401, 'Authentication needed')
            request.setHeader('WWW-authenticate', 'Basic realm="enter new user and password"')
            errpage = error.ErrorPage(http.UNAUTHORIZED,"Unauthorized","401 Authentication required")
            return errpage.render(request)

        session = request.getSession()

        try:
            if request.args["text"]!="":
                session.text = request.args["text"]
                session.touch()
        except:
            pass # no text arg
        session_text = getattr(session,"text","init")        
        # create and increment cookie counter,
        try:
            counter = int(request.getCookie("counter"))
            counter += 1
        except:
            counter = 0
        request.addCookie("counter",counter)
            
        cookies = request.received_cookies
        args = request.args
        path = request.path
        _, host, port = request.getHost()
        url = request.prePathURL()
        uri = request.uri
        secure = (request.isSecure() and "securely") or "insecurely"
        return ("""\
<HTML>
    <HEAD><TITLE>Welcome To Twisted Python Reporting</title></head>

    <BODY><H1>Welcome To Twisted Python Reporting</H1>
    <UL>
    <LI>User : %(user)s
    <LI>Password : %(password)s
    <LI>The path to me is %(path)s
    <LI>The host I'm on is %(host)s
    <LI>The port I'm on is %(port)s
    <LI>I was accessed %(secure)s
    <LI>A URL to me is %(url)s
    <LI>My URI to me is %(uri)s
    <LI>Session text : %(session_text)s
    <LI>Cookies (incremented in each reload): <pre>%(cookies)s</pre>
    <LI>Form args : <pre>%(args)s</pre>
    </UL>
    <hr>
    <h2>Testing args</h2>
    Test args : <a href='?a=1&a=2&a=3&b=4'>?a=1&amp;a=3&amp;a=3&amp;b=4</a><br>
    Test forms with method=post enctype='multipart/form-data'
    <form method=post enctype='multipart/form-data'>
    <table>
    <tr><td> text : </td><td> <input name=text type=text> </td></tr>
    <tr><td> file : </td><td> <input name=file type=file> </td></tr>
    <tr><td> select (multiple) : </td><td>
    <select name=select multiple><option>one</option><option>two</option><option>three</option></select>
    </td></tr></table>
    <input type=submit></form>
    </body>
</html>""" % vars())
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 15:11:14 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 15:11:14 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429141941.1386dd4e.itamar@itamarst.org>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
	<oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
	<20030429141941.1386dd4e.itamar@itamarst.org>
Message-ID: <oqvfwxxgod.fsf@titan.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> RPYs are designed to be reloaded every time.  If you don't want this
> behaviour, don't use RPYs - rather, create your Resource tree in memory,
> rather than out of the filesystem.

Hello, Itamar.  Thanks for replying.

I'm not trying to challenge the design, I'm much too new to Twisted. :-) I'm
just not understanding it.  What are the reasons for reloading `.rpy' files
every time?  There ought to be some advantages, but I'm not seeing them.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From m at moshez.org  Tue Apr 29 15:14:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 19:14:00 -0000
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>
References: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>, <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429153442.23304.qmail@green.zadka.com>
Message-ID: <20030429191400.31585.qmail@green.zadka.com>

On 29 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> Does this explain why, or why not, `.rpy' files are reloaded many times?

No, it merely talks about how to persistize objects...such as your resource.
See the example :)
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From radix at twistedmatrix.com  Tue Apr 29 15:27:34 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:27:34 -0400
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 10:41:50 -0400
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429192734.GA16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 10:41, Fran?ois Pinard wrote:
> ---------------------------------------------------------------------->
> import remanent
> resource = remanent.resource
> ----------------------------------------------------------------------<
> 
> which is a bit ridiculous if it has to be a standard idiom.

Why is it ridiculous? The semantics for .rpy are good because they're flexible;
you can either recreate your Resource object every time, or you can cache it.

Also, mind that .rpys are meant to be as tiny as possible; they're just
supposed to be glue code between your web app code and the web server.

> Maybe the Twisted design is trying, here, to spare memory by not keeping
> `.rpy' code in its memory, in case these would be very numerous or contain a
> lot of code?

Nope, just trying to remain flexible. It gives you a choice between CPU usage
(recreating your Resource every time) and memory usage (keeping your Resources
around in memory between requests).

> Or trying to protect itself against leaks from such, but how?
> I have the vague feeling that I'm missing something important in this area.
> Would some soul be kind enough to accept enlightening mine? :-)

Also, IIRC there's some sort of caching mechanism that glyph implemented for
rpys, but I don't remember how it works. IIRC, you just add "cache()" to the
top of your .rpy, or something. Unfortunately, it's not documented as it is.
Can someone comment on this? I'll add some docstrings to ResourceScript
if someone explains it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Tue Apr 29 15:35:47 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 15:35:47 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Possible typo in twisted.web.vhost ?
Message-ID: <oqr87lxfjg.fsf@titan.progiciels-bpi.ca>

For Twisted 1.0.4, file twisted/web/vhost.py, line 100 is:

---------------------------------------------------------------------->
        return self.hosts.get(host, self.default or error.NoResource("host %s not in vhost map" % repr(host)))
----------------------------------------------------------------------<

Could it be (?) that this line should be written:

---------------------------------------------------------------------->
        return self.hosts.get(host, self.default) or error.NoResource("host %s not in vhost map" % repr(host))
----------------------------------------------------------------------<

or, to keep it under 80 columns:

---------------------------------------------------------------------->
        return (self.hosts.get(host, self.default)
                or error.NoResource("host %s not in vhost map" % repr(host)))
----------------------------------------------------------------------<

If we can rely on Python 2.2, we could simplify it a bit more:

---------------------------------------------------------------------->
        return (self.hosts.get(host, self.default)
                or error.NoResource("host %r not in vhost map" % host))
----------------------------------------------------------------------<

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Tue Apr 29 15:41:23 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:41:23 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 14:05:18 -0400
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca> <20030429153442.23304.qmail@green.zadka.com> <oq8yttyyap.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429194123.GE16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 14:05, Fran?ois Pinard wrote:
> [Moshe Zadka]
> 
> > The standard idiom is to use the Twisted Registry.  Look at
> > http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml
> 
> Thanks for the pointer, yet I'm not ready to understand it yet.  It seems I
> should know `Componentized' first.  Later, hopefully.  I wonder what is the
> extent and scope of a `registry'.  Exactly one per `.rpy' file presumably?
> 
> Does this explain why, or why not, `.rpy' files are reloaded many times?

In itself, it doesn't, but that caching mechanism I mentioned in my last email
uses it (I just went and read the source in twisted/web/script.py)

And the scope of the registry is one per top-level static.File instance; i.e.,
if you have a web server set up with `mktap web --path foo', then there will
only be one Registry unless you create some static.Files explicitly elsewhere.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr 29 15:44:58 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:44:58 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <oqznm9xhls.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 14:51:11 -0400
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429194458.GG16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 14:51, Fran?ois Pinard wrote:

> 
> Your example (quoted in full below, for reference) has been both useful and
> instructive.  I have a question, though.  What is the purpose of `isLeaf'?
> It does not seem to be called ever, when I run your example.

> class ReportRequest(twisted.web.resource.Resource):
>     """ ReportRequest with forms and cookies """
>     def isLeaf(self):
>         return true

It looks like he meant to just say "isLeaf = True". It's expected to be an 
attribute, not a method. It worked accidentally because all function objects
are True.

What isLeaf *does* is to say "Stop looking for more children beyond me".
i.e., this resource will not have `getChild' called on it; it will be
immediately render()ed. You can handle the rest of the path segments by
accessing them through the request object passed to the render method.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From warner at lothar.com  Tue Apr 29 16:08:00 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 13:08:00 -0700 (PDT)
Subject: [Twisted-Python] Re: twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
 <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429.130800.59496401.warner@lothar.com>

pinard at iro.umontreal.ca (Fran?ois Pinard) writes:
> 
> Your example (quoted in full below, for reference) has been both useful and
> instructive.  I have a question, though.  What is the purpose of `isLeaf'?
> It does not seem to be called ever, when I run your example.

...

> class ReportRequest(twisted.web.resource.Resource):
>     def isLeaf(self):
>         return true

Oops. 'isLeaf' is a boolean attribute, not a function. It is usually set at
the class level, and overrides t.w.r.Resource's default of '0'. So this class
should really be written as follows:

  class ReportRequest(twisted.web.resource.Resource):
      isLeaf = 1

(the ReportRequest example worked because a bound method happens to be "true"
when evaluated in a conditional. However, it would never have been able to
return "false").

'isLeaf' is a flag tells the server to stop walking through the URL path.
Each slash-delimited component of the URL is put into a list, and the
resource tree is walked (the Site is asked for a child indexed by the first
component, that child is asked for one indexed by the second, etc). If a
child is returned with the .isLeaf flag set, the walk is terminated, and that
child is responsible for dealing with the rest of the path on its own. The
request.postpath array contains the remaining components of the URL.

This is useful when you want to change the resource lookup behavior below
some sub-node of the URL tree. Above the child that sets .isLeaf=1, the usual
Resource.getChild() scheme is used to find a Resource. Below that, the child
can do whatever it wants.

For example, let's pretend that we have a web server which serves users'
~/public_html/ directories, but each user is in a department, and the URL is
always supposed to look like http://foo.com/Department/User/Dir/Subdir/File .
The top two levels of the tree (department and user) must do some kind of
lookup to find out who is in which department and where their home directory
is. The child that is returned by the User lookup would set .isLeaf=1, and
then get the actual file based upon the directory path contained in the
remaining part of the URL. We're basically breaking the URL into two pieces:
[http://foo.com/Department/User], and [Dir/Subdir/File]. The resource tree is
walked with the first part, but the second part is given all at once (as a
list) to the results of the lookup on the first part.

 class MySite(Resource):
  def getChild(self, path, request):
    dept = self.findDepartment(path) # returns a DepartmentResource
    if dept == None:
        return error.NoResource("No such department '%s'" % path)
    return dept

 class DepartmentResource(Resource):
  def getChild(self, path, request):
    user = self.findUser(path) # returns a UserResource
    if user == None:
        return error.NoResource("No such user '%s'" % path)
    return user
  
 class UserResource(Resource):
  isLeaf = 1 # don't call our .getChild(), just do render()
  def render(self, request):
    # rest of URL is in request.postpath
    for p in request.postpath:
      if p == "..": return error.NoResource("naughty naughty")
    filename = os.path.join(self.homedir(), "public_html", request.postpath)
    file = File(filename)
    return file.render(request)


I'm sure there are better examples of isLeaf out there.. this is what comes
to my mind when I see that flag.


cheers,
 -Brian



From pinard at iro.umontreal.ca  Tue Apr 29 16:10:13 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 16:10:13 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429192734.GA16135@toshi.anaprd01.md.comcast.net>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429192734.GA16135@toshi.anaprd01.md.comcast.net>
Message-ID: <oqn0i9xdy2.fsf@titan.progiciels-bpi.ca>

[Christopher Armstrong]

> On 2003.04.29 10:41, Fran?ois Pinard wrote:
> > ---------------------------------------------------------------------->
> > import remanent
> > resource = remanent.resource
> > ----------------------------------------------------------------------<
> > 
> > which is a bit ridiculous if it has to be a standard idiom.

> Why is it ridiculous?

Sorry if the word offended anyone, it surely was not my intent to do so.

I only meant that if there is really no advantage at reloading an RPY file,
then there is an advantage at loading it only once (unless such RPY files
are so numerous or so big that it would create a memory problem, but it
might likely not be the case in practice), which is avoiding spurious or
useless re-initialisation.  Then, the proper way would be to use a two-liner
for each such file, and having such small bootstraps is questionable.

> The semantics for .rpy are good because they're flexible; you can either
> recreate your Resource object every time, or you can cache it.  [...]  It
> gives you a choice between CPU usage (recreating your Resource every time)
> and memory usage (keeping your Resources around in memory between
> requests).  [...] Also, mind that .rpys are meant to be as tiny as
> possible; they're just supposed to be glue code between your web app code
> and the web server.

If a resource was consuming a lot of memory, I would understand.  But as you
just explained, RPY files are meant to be tiny, and then unlikely to build
tons of fresh bytes in Python structures.

Yet, within a small RPY file, one might import from library big modules
having Resource based classes, and resources are meant to be freed
immediately after having been consumed.  For example, such a library
resource might define some big triple-quoted static string holding the
template of an HTML page.  But then, the module will stay imported after the
RPY file disappears, the big string will not be freed, and reloading will
not trigger significant memory savings.  If the template string gets read
from disk each time, it will likely be kept in a local variable in the
`render' method, and will be freed as soon as we exit that method, so
reloading does not in itself trigger memory savings in that case either.

So, just to help me understand, could you illustrate by an example, a likely
case demonstrating the flexibility gained by multiple reloading?

> Also, IIRC there's some sort of caching mechanism that glyph implemented for
> rpys, but I don't remember how it works.

It might be those Registry instances which Moshe referred to in a recent
message, and which are sketched a bit quickly in the book, page 23, (2.3.2
"Using Twisted.Web", section "Resource Scripts").

-- 
Fran??ois Pinard   http://www.iro.umontreal.ca/~pinard



From warner at lothar.com  Tue Apr 29 16:36:27 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 13:36:27 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.0.4 - Possible typo in
 twisted.web.vhost ?
References: <oqr87lxfjg.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429.133627.131689907.warner@lothar.com>

pinard at iro.umontreal.ca (Fran?ois Pinard) writes:

>         return self.hosts.get(host, self.default or error.NoResource("host %s not in vhost map" % repr(host)))

> Could it be (?) that this line should be written:

>         return (self.hosts.get(host, self.default)
>                 or error.NoResource("host %s not in vhost map" % repr(host)))

The two are actually logically the same, but I prefer yours because it puts
off the creation of the NoResource error until it is really necessary. Fixed
in CVS.

thanks,
 -Brian



From pinard at iro.umontreal.ca  Tue Apr 29 16:42:55 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 16:42:55 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <20030429.130800.59496401.warner@lothar.com>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
	<20030429.130800.59496401.warner@lothar.com>
Message-ID: <oqissxxcfk.fsf@titan.progiciels-bpi.ca>

[Brian Warner]
> [Fran?ois Pinard]

> > [...] What is the purpose of `isLeaf'?  It does not seem to be called
> > ever, when I run your example. [...]

> > class ReportRequest(twisted.web.resource.Resource):
> >     def isLeaf(self):
> >         return true

> Oops. 'isLeaf' is a boolean attribute, not a function. [...]

Brian and Christopher, let me thank you both for your replies.

I did not find a presentation in the manual (but I'm far from having read it
all yet) about a tree organisation of resources.  Brian's explanation is
quite comprehensive, and in my opinion, should happily find its way into the
current Twisted book.  Is there someone listening, who is taking care of
such things?  We surely have good documentation material in Brian's reply!

     --------------------

I also found, by re-reading various saved messages from the list, that three
of them were especially instructive about the nature and justification of
TAPs, which are:

   2003-02-14 07:42 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>
   2003-02-11 15:17 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>
   2003-02-11 01:35 -0500  Moshe Zadka <twisted at moshez.org>

all having "In Defense of Taps (was Re: [Twisted-Python] where to begin)"
for a Subject.  Also likely interesting for users is:

   2003-02-12 08:51 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>

In all these messages, and surely others, there is documentation material
that could be retrofitted in the Twisted manual (editing out some unwanted
parts and maybe rephrasing others).  Is there someone, taking care of the
documentation, to whom I should direct a copy of the above (if needed)?

-- 
Fran??ois Pinard   http://www.iro.umontreal.ca/~pinard



From warner at lothar.com  Tue Apr 29 17:23:53 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 14:23:53 -0700 (PDT)
Subject: [Twisted-Python] spawnProcess and environment inheritance
Message-ID: <20030429.142353.133032176.warner@lothar.com>

I wanted to ask what people thought about a potential change to the way
reactor.spawnProcess() sets up the child's environment variables.

The current default is to provide an empty environment to the child:
reactor.spawnProcess() has a env={} default parameter. I'm wondering if this
should be changed to env=None, which would instruct os.execvpe() to let the
child inherit the environment from the parent process.

This showed up in a recent test_process.py failure, which effectively
compared a "file not found" error message obtained with popen3() against a
similar one retrieved with reactor.spawnProcess(). The test failed when it
was run in a localized environment. popen3() inherited $LANG from the parent
(in this case, LANG was set to French), and the error message came out in one
language, whereas spawnProcess() cleared the environment, and the error came
out in English. The two didn't match, so the test harness thought
spawnProcess had somehow failed.

I've changed test_process.py to explicitly pass env=None to all child
processes, but given that Python's popen2 and os.exec library functions all
default to inheritance rather than an empty environment, I'm thinking it
might be a good idea to match them and have spawnProcess() default to
inheritance too.

pros: Less surprise factor for those used to normal unix behavior. Would
reduce the differences between programs run from the shell and those run from
inside spawnProcess.

cons: Sometimes you want to clean the environment as a security measure. The
existing behavior has been around for a while and changing it might cause
problems.

What do you all think?

The change in question, in case you'd like to try it out, would be the
following one-liner:

Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.72
diff -u -r1.72 default.py
--- twisted/internet/default.py	21 Apr 2003 15:32:15 -0000	1.72
+++ twisted/internet/default.py	29 Apr 2003 21:19:32 -0000
@@ -149,7 +149,7 @@
 
     # IReactorProcess
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None,
+    def spawnProcess(self, processProtocol, executable, args=(), env=None, path=None,
                      uid=None, gid=None, usePTY = 0):
         p = platform.getType()
         if p == 'posix':



thanks,
 -Brian



From andrew-twisted at puzzling.org  Tue Apr 29 21:05:44 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 30 Apr 2003 11:05:44 +1000
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <oqissxxcfk.fsf@titan.progiciels-bpi.ca>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca> <20030429.130800.59496401.warner@lothar.com> <oqissxxcfk.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030430010544.GE13813@frobozz.local>

On Tue, Apr 29, 2003 at 04:42:55PM -0400, Fran?ois Pinard wrote:
[...]
> 
> In all these messages, and surely others, there is documentation material
> that could be retrofitted in the Twisted manual (editing out some unwanted
> parts and maybe rephrasing others).  Is there someone, taking care of the
> documentation, to whom I should direct a copy of the above (if needed)?

Send it to the list, or if you think it's too large, post it on a website
somewhere and send the URL to the list.

You are welcome to send it directly to me, but then you'll miss out on feedback
from everyone else...

-Andrew.




From shrogers at ionet.net  Mon Apr 28 12:27:07 2003
From: shrogers at ionet.net (steve@shrogers.com)
Date: Mon, 28 Apr 2003 11:27:07 -0500 (GMT)
Subject: [Twisted-Python] WovenQuotes Howto Problem
Message-ID: <6897150.1051543643452.JavaMail.nobody@wamui01.slb.atl.earthlink.net>

I'm playing with Twisted 1.0.4.  After making it through the first couple of TwistedQuotes examples, I get the following failure with the TwistedQuotes example.

2003/04/28 10:05 [HTTPChannel,0,127.0.0.1] exceptions.TypeError: getData() takes exactly 1 argument (2 given)




From anthony at interlink.com.au  Wed Apr 30 04:01:05 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 30 Apr 2003 18:01:05 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore?
Message-ID: <200304300801.h3U815Q05758@localhost.localdomain>

I kinda suspected that twisted might be slower than asyncore for the
straight go-hell-for-leather usage in pythondirector, but I'd not got
around to actually testing it. It seems like it's nearly 30% slower
than the equivalent asyncore code! This seems a bit higher than I'd
expect -- but given all the extra overhead of object creation I guess
it's not all that surprising. Current CVS python, Twisted 1.0.4.

Has anyone else done similar benchmarking and found different results?
I'm not planning on switching the default back to asyncore - the 
asyncore code is just too brittle for my tastes.

(FWIW, the two equivalent modules are 
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythondirector/pythondirector/pydirector/pdnetworktwisted.py?only_with_tag=HEAD
and 
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythondirector/pythondirector/pydirector/pdnetworkasyncore.py?only_with_tag=HEAD
)

Anthony

--
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From wilk-ml at flibuste.net  Wed Apr 30 08:46:13 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 30 Apr 2003 14:46:13 +0200
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <20030430010544.GE13813@frobozz.local>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
	<20030429.130800.59496401.warner@lothar.com>
	<oqissxxcfk.fsf@titan.progiciels-bpi.ca>
	<20030430010544.GE13813@frobozz.local>
Message-ID: <87znm8up9m.fsf@flibuste.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Tue, Apr 29, 2003 at 04:42:55PM -0400, Fran?ois Pinard wrote:
> [...]
> > 
> > In all these messages, and surely others, there is documentation material
> > that could be retrofitted in the Twisted manual (editing out some unwanted
> > parts and maybe rephrasing others).  Is there someone, taking care of the
> > documentation, to whom I should direct a copy of the above (if needed)?
> 
> Send it to the list, or if you think it's too large, post it on a website
> somewhere and send the URL to the list.
> 
> You are welcome to send it directly to me, but then you'll miss out on feedback
> from everyone else...

A wiki could be ideal for this... examples and documentation draft.

I post two times my example, and it's the first time somebody correct it,
if i didn't look at the list (i'm very busy now) i could post the
mistake again...
Maybe somebody will look in the archive and use my first post with the
mistake !

-- 
William Dode - http://flibuste.net



From andrew-twisted at puzzling.org  Wed Apr 30 10:01:03 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 May 2003 00:01:03 +1000
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <87znm8up9m.fsf@flibuste.net>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca> <20030429.130800.59496401.warner@lothar.com> <oqissxxcfk.fsf@titan.progiciels-bpi.ca> <20030430010544.GE13813@frobozz.local> <87znm8up9m.fsf@flibuste.net>
Message-ID: <20030430140103.GB18706@frobozz.local>

On Wed, Apr 30, 2003 at 02:46:13PM +0200, William Dode wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> 
> > Send it to the list, or if you think it's too large, post it on a website
> > somewhere and send the URL to the list.
> > 
> > You are welcome to send it directly to me, but then you'll miss out on feedback
> > from everyone else...
> 
> A wiki could be ideal for this... examples and documentation draft.
> 
> I post two times my example, and it's the first time somebody correct it,
> if i didn't look at the list (i'm very busy now) i could post the
> mistake again...
> Maybe somebody will look in the archive and use my first post with the
> mistake !

A wiki would probably be just as bad -- if people aren't looking in the list
archives for unreplied to patches, they won't check the wiki either, and
things would get lost.

The current recommended strategy is to post to the list, maybe post a
reminder (like you just did... thanks! :), and finally, if we still haven't
responded, add it to our bug tracker on SourceForge, so we won't forget it
for eternity.

Pestering random developers on IRC can work well, too, but that can require
a fair bit your time to make that work :)

-Andrew.




From tv at twistedmatrix.com  Wed Apr 30 12:01:59 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 30 Apr 2003 19:01:59 +0300
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
Message-ID: <20030430160159.GA28522@lapdog>

	Hi. Lately, I've been playing with using "mktap dns" as a
	resolver for my laptop. Except, it's making me angry.

	It doesn't reload resolv.conf. My resolv.conf nameserver list
	is changed by DHCP about twice per day, atleast.

	In fact, it even loads the resolv.conf only in __init__, so
	the list gets stored in the tap file. I need to mktap, tap2deb
	and dpkg -i whenever I switch subnets!

	Here's a quick-and-stupid patch that makes it reload
	resolv.conf regularly, currently made to reread it every
	minute. This is "close enough". Actually, I want to make
	it get a notification from somewhere..

	I definitely want this implemented. Please tell what direction
	should I go with the patch, and what do you think is missing
	from "production quality"?

Index: twisted/names/client.py
===================================================================
RCS file: /cvs/Twisted/twisted/names/client.py,v
retrieving revision 1.31
diff -u -r1.31 client.py
--- twisted/names/client.py	29 Mar 2003 18:10:14 -0000	1.31
+++ twisted/names/client.py	30 Apr 2003 15:56:00 -0000
@@ -30,6 +30,8 @@
 
 import socket
 import os
+import errno
+import time
 
 # Twisted imports
 from twisted.python.runtime import platform
@@ -52,6 +54,10 @@
     protocol = None
     connections = None
 
+    resolv = None
+    resolv_last_read = 0
+    resolv_read_interval = 60
+
     def __init__(self, resolv = None, servers = None, timeout = (1, 3, 11, 45)):
         """
         @type servers: C{list} of C{(str, int)} or C{None}
@@ -78,10 +84,9 @@
         else:
             self.servers = servers
         
-        if resolv and os.path.exists(resolv):
-            self.parseConfig(resolv)
+        self.resolv = resolv
         
-        if not len(self.servers):
+        if not len(self.servers) and not resolv:
             raise ValueError, "No nameservers specified"
         
         self.factory = DNSClientFactory(self, timeout)
@@ -99,20 +104,36 @@
         d['connections'] = []
         return d
 
+    def maybeParseConfig(self):
+        if self.resolv_last_read + self.resolv_read_interval < time.time():
+            self.parseConfig()
 
-    def parseConfig(self, conf):
-        lines = open(conf).readlines()
+    def parseConfig(self):
+        try:
+            file = open(self.resolv)
+        except IOError, e:
+            if e.errno == errno.ENOENT:
+                return
+            else:
+                raise
+
+        lines = file.readlines()
+        self.resolv_last_read = os.fstat(file.fileno()).st_mtime
+        file.close()
+        servers = []
         for l in lines:
             l = l.strip()
             if l.startswith('nameserver'):
-                self.servers.append((l.split()[1], dns.PORT))
-                log.msg("Resolver added %r to server list" % (self.servers[-1],))
+                resolver = (l.split()[1], dns.PORT)
+                servers.append(resolver)
+                log.msg("Resolver added %r to server list" % (resolver,))
             elif l.startswith('domain'):
                 self.domain = l.split()[1]
                 self.search = None
             elif l.startswith('search'):
                 self.search = l.split()[1:]
                 self.domain = None
+        self.dynamicServers = servers
 
 
     def pickServer(self):
@@ -122,8 +143,15 @@
         TODO: Weight servers for response time so faster ones can be
         preferred.
         """
-        self.index = (self.index + 1) % len(self.servers)
-        return self.servers[self.index]
+        self.parseConfig()
+        if not self.servers and not self.dynamicServers:
+            return None
+        self.index = ((self.index + 1)
+                      % (len(self.servers) + len(self.dynamicServers)))
+        if self.index < len(self.servers):
+            return self.servers[self.index]
+        else:
+            return self.dynamicServers[self.index - len(self.servers)]
 
 
     def connectionMade(self, protocol):
@@ -155,7 +183,10 @@
         if timeout is None:
             timeout = self.timeout
         address = self.pickServer()
-        d = self.protocol.query(address, queries, timeout[0])
+        if address is not None:
+            d = self.protocol.query(address, queries, timeout[0])
+        else:
+            d = defer.fail()
         d.addErrback(self._reissue, address, queries, timeout[1:])
         return d
 
@@ -186,7 +217,10 @@
         @rtype: C{Deferred}
         """
         if not len(self.connections):
-            host, port = self.pickServer()
+            address = self.pickServer()
+            if address is None:
+                return defer.fail()
+            host, port = address
             from twisted.internet import reactor
             reactor.connectTCP(host, port, self.factory)
             self.pending.append((defer.Deferred(), queries, timeout))

-- 
:(){ :|:&};:



From itamar at itamarst.org  Wed Apr 30 12:45:38 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 12:45:38 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200304300801.h3U815Q05758@localhost.localdomain>
References: <200304300801.h3U815Q05758@localhost.localdomain>
Message-ID: <20030430124538.72ca4dc2.itamar@itamarst.org>

On Wed, 30 Apr 2003 18:01:05 +1000
Anthony Baxter <anthony at interlink.com.au> wrote:
 
> I kinda suspected that twisted might be slower than asyncore for the
> straight go-hell-for-leather usage in pythondirector, but I'd not got
> around to actually testing it. It seems like it's nearly 30% slower
> than the equivalent asyncore code! This seems a bit higher than I'd
> expect -- but given all the extra overhead of object creation I guess
> it's not all that surprising. Current CVS python, Twisted 1.0.4.

We'll see what we can do to improve this (if we can, and when we have
time :).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From abe at fettig.net  Wed Apr 30 13:27:53 2003
From: abe at fettig.net (Abe Fettig)
Date: 30 Apr 2003 13:27:53 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
Message-ID: <1051723673.639.18.camel@mingus>

Hi folks,

In order to really get NNTP and SMTP (securely) integrated with Hep I
need to get authentication working.  Both of these protocols support
authentication, although it's not required by the core RFCs.  But as far
as I can tell neither of the modules in twisted/protocols supports
authentication at the moment.

Is anyone working on this already?  If not, I'd like to do it myself,
and I'd appreciate some help in understanding the 'right' way to
implement authentication in Twisted.  I've been looking at J.P.'s IMAP4
work in CVS, and I can see he's using identities and perspectives
(although I don't have a complete understanding of how these work).  Is
the use of twisted.cred preferred?  Other drivers, such as POP3, don't
seem to use it...

Thanks,

Abe




From exarkun at intarweb.us  Wed Apr 30 14:34:41 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 30 Apr 2003 14:34:41 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <1051723673.639.18.camel@mingus>
References: <1051723673.639.18.camel@mingus>
Message-ID: <20030430183441.GA26588@meson.dyndns.org>

On Wed, Apr 30, 2003 at 01:27:53PM -0400, Abe Fettig wrote:
> Hi folks,
> 
> In order to really get NNTP and SMTP (securely) integrated with Hep I
> need to get authentication working.  Both of these protocols support
> authentication, although it's not required by the core RFCs.  But as far
> as I can tell neither of the modules in twisted/protocols supports
> authentication at the moment.
> 

  If you don't get to it first, I may end up doing SMTP authentication
sometime in the near future (as I have need for it as well).  I hadn't given
much thought to NNTP.

> Is anyone working on this already?  If not, I'd like to do it myself,
> and I'd appreciate some help in understanding the 'right' way to
> implement authentication in Twisted.  I've been looking at J.P.'s IMAP4
> work in CVS, and I can see he's using identities and perspectives
> (although I don't have a complete understanding of how these work).  Is
> the use of twisted.cred preferred?  Other drivers, such as POP3, don't
> seem to use it...

  I think POP3 should be updated to use cred in a manner similar to that
which IMAP4 uses it.  Since I wrote IMAP4, obviously I think that is the
right way to do authentication ;) (modulo one thing - the actual
challenge/response verification should be factored out and away from the
Identity class - I believe itamar and glyph have discussed this and have
some ideas for the implementation).

  Whether the *actual* details of how IMAP4 is using cred are proper are
not, I don't know ;) The code works, but it seems that there are too many
different objects involved in the process (CramMD5Identity,
CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's just for
*one* kind of authentication scheme).  Setup is similarly tedious, requiring
4 lines of "boilerplate" to set things up, and then *10* lines to add each
new identity.  Now that imap4.py is settling down, it'd be great if someone
with more experience with cred could take a look at it and give me some
feedback.

  Maybe there will be a coil for cred someday so you can keep this part of
the code out of your actual app, though.  If so, this is one of the real
strengths of cred.  Your app doesn't have to do anything to manage user
accounts, you just attach the cred coil and you're done.


  Hope this helps,

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 41 days, 15:04, 4 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030430/b87e0e53/attachment.pgp 

From exarkun at intarweb.us  Wed Apr 30 14:43:57 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 30 Apr 2003 14:43:57 -0400
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
In-Reply-To: <20030430160159.GA28522@lapdog>
References: <20030430160159.GA28522@lapdog>
Message-ID: <20030430184357.GB26588@meson.dyndns.org>

On Wed, Apr 30, 2003 at 07:01:59PM +0300, Tommi Virtanen wrote:
> 	Hi. Lately, I've been playing with using "mktap dns" as a
> 	resolver for my laptop. Except, it's making me angry.
> 
> 	It doesn't reload resolv.conf. My resolv.conf nameserver list
> 	is changed by DHCP about twice per day, atleast.
> 

  The "usability" of t.names could be a bit better, I agree.

> 	In fact, it even loads the resolv.conf only in __init__, so
> 	the list gets stored in the tap file. I need to mktap, tap2deb
> 	and dpkg -i whenever I switch subnets!
> 
> 	Here's a quick-and-stupid patch that makes it reload
> 	resolv.conf regularly, currently made to reread it every
> 	minute. This is "close enough". Actually, I want to make
> 	it get a notification from somewhere..

  It would be great if Twisted could speak FAM.  I looked briefly at
integrating the python wrapper, but didn't have time to go very in-depth. 

> 
> 	I definitely want this implemented. Please tell what direction
> 	should I go with the patch, and what do you think is missing
> 	from "production quality"?

  It basically looks good.  One thing I'd like done differently is to have
parseConfig() called at a different time.  Possibly calling it as a result
of connectionMade() further increases an already large latency on queries. 
If this were done in a callLater() loop, this would keep the parsing
overhead out of the path of actual queries the client performs.

  As a short term solution, I think this is reasonable (but the point is
moot if we wrap and use libfam).  How's it sound to you?

> [snip patch]

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 41 days, 15:04, 4 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030430/dd05da67/attachment.pgp 

From abe at fettig.net  Wed Apr 30 15:14:59 2003
From: abe at fettig.net (Abe Fettig)
Date: 30 Apr 2003 15:14:59 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430183441.GA26588@meson.dyndns.org>
References: <1051723673.639.18.camel@mingus>
	 <20030430183441.GA26588@meson.dyndns.org>
Message-ID: <1051730099.641.32.camel@mingus>

On Wed, 2003-04-30 at 14:34, Jp Calderone wrote:

> On Wed, Apr 30, 2003 at 01:27:53PM -0400, Abe Fettig wrote:
> > Hi folks,
> > 
> > In order to really get NNTP and SMTP (securely) integrated with Hep I
> > need to get authentication working.  Both of these protocols support
> > authentication, although it's not required by the core RFCs.  But as far
> > as I can tell neither of the modules in twisted/protocols supports
> > authentication at the moment.
> > 
> 
>   If you don't get to it first, I may end up doing SMTP authentication
> sometime in the near future (as I have need for it as well).  I hadn't given
> much thought to NNTP.

I'll make a deal with you - if you do SMTP authentication (demonstrating
the 'right way to do it'), I'll write a similar patch for NNTP :-)

>   I think POP3 should be updated to use cred in a manner similar to that
> which IMAP4 uses it.  Since I wrote IMAP4, obviously I think that is the
> right way to do authentication ;) (modulo one thing - the actual
> challenge/response verification should be factored out and away from the
> Identity class - I believe itamar and glyph have discussed this and have
> some ideas for the implementation).
> 
>   Whether the *actual* details of how IMAP4 is using cred are proper are
> not, I don't know ;) The code works, but it seems that there are too many
> different objects involved in the process (CramMD5Identity,
> CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's just for
> *one* kind of authentication scheme).  Setup is similarly tedious, requiring
> 4 lines of "boilerplate" to set things up, and then *10* lines to add each
> new identity.  Now that imap4.py is settling down, it'd be great if someone
> with more experience with cred could take a look at it and give me some
> feedback.
> 
>   Maybe there will be a coil for cred someday so you can keep this part of
> the code out of your actual app, though.  If so, this is one of the real
> strengths of cred.  Your app doesn't have to do anything to manage user
> accounts, you just attach the cred coil and you're done.

That would be nice.  It seems like there's also the potential to share
the code for different methods of authentication between
POP3/SMTP/IMAP/NNTP - I think they all can use CRAM-MD5, for example,
and it seems silly to duplicate the code in each protocol.

Abe




From tv at twistedmatrix.com  Wed Apr 30 15:14:06 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 30 Apr 2003 22:14:06 +0300
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
In-Reply-To: <20030430184357.GB26588@meson.dyndns.org>
References: <20030430160159.GA28522@lapdog> <20030430184357.GB26588@meson.dyndns.org>
Message-ID: <20030430191406.GA29480@lapdog>

On Wed, Apr 30, 2003 at 02:43:57PM -0400, Jp Calderone wrote:
>   It would be great if Twisted could speak FAM.  I looked briefly at
> integrating the python wrapper, but didn't have time to go very in-depth. 

	Well, it'll need a secondary mechanism anyway, as FAM
	is far from portable.

	Besides, FAM is a daemon. The actual kernel interface
	it uses is called "dnotify", and it goes like this:

fd = open(".", O_RDONLY);
fcntl(fd, F_SETSIG, SIGRTMIN);
fcntl(fd, F_NOTIFY, DN_MODIFY|DN_CREATE|DN_MULTISHOT);

	and you'll get an SIGRTMIN every time the dir changes. Allocating
	an available signal sounds like this is something that should first
	be "twistedified", and not used raw.

	This might not even need any C wrapping, or at most exposing
	those DN_* and F_* constants.

	If you really want to use that API, and the DN_* constants
	aren't exported by standard python, it'd be trivial to add
	them to eunuchs. And fall back to statting the file every
	once in a while if eunuchs isn't installed or the kernel
	doesn't understand the fcntl.

> > 	I definitely want this implemented. Please tell what direction
> > 	should I go with the patch, and what do you think is missing
> > 	from "production quality"?
>   It basically looks good.  One thing I'd like done differently is to have
> parseConfig() called at a different time.  Possibly calling it as a result
> of connectionMade() further increases an already large latency on queries. 
> If this were done in a callLater() loop, this would keep the parsing
> overhead out of the path of actual queries the client performs.

	Yeah, sure. I ended up doing it that way just because I couldn't
	remember whether callLaters etc are pickled or not, and make it
	resume from a .tap correctly, etc..

>   As a short term solution, I think this is reasonable (but the point is
> moot if we wrap and use libfam).  How's it sound to you?

	Okay, how about I make it check the file timestamp every n seconds
	via callLater, and commit that? Maybe tomorrow.

-- 
:(){ :|:&};:



From itamar at itamarst.org  Wed Apr 30 15:25:32 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 15:25:32 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430183441.GA26588@meson.dyndns.org>
References: <1051723673.639.18.camel@mingus>
	<20030430183441.GA26588@meson.dyndns.org>
Message-ID: <20030430152532.1f6eb902.itamar@itamarst.org>

On Wed, 30 Apr 2003 14:34:41 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   Whether the *actual* details of how IMAP4 is using cred are proper
>   are
> not, I don't know ;) The code works, but it seems that there are too
> many different objects involved in the process (CramMD5Identity,
> CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's
> just for*one* kind of authentication scheme).  Setup is similarly
> tedious, requiring 4 lines of "boilerplate" to set things up, and then
> *10* lines to add each new identity.  Now that imap4.py is settling
> down, it'd be great if someone with more experience with cred could
> take a look at it and give me some feedback.

This is why cred is going to be refactored. With a chainsaw. On fire.
End result should be that you have to do a *lot* less work in your
protocol.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Wed Apr 30 16:32:25 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Apr 2003 13:32:25 -0700 (PDT)
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
References: <20030430160159.GA28522@lapdog>
 <20030430184357.GB26588@meson.dyndns.org>
Message-ID: <20030430.133225.59480235.warner@lothar.com>

Jp Calderone <exarkun at intarweb.us> writes:
>   It would be great if Twisted could speak FAM.  I looked briefly at
> integrating the python wrapper, but didn't have time to go very in-depth. 

Personally, I find FAM's implementation annoying, because is uses sunrpc, and
requires the "security-compromise-waiting-to-happen" portmap daemon be
running. I wish they had implemented it with a unix socket instead, but it
appears to be aimed at handling remote (NFS) directory changes as well as
local ones. Something less server-heavy would seem more appropriate.

The Linux mechanism is DNotify, and you can get at most of the functionality
from the Python side. I have code in the BuildBot (buildbot.dnotify) which
does the necessary Twisted glue, and I'd be happy to contribute that if it
seems useable. Code is available from http://buildbot.sf.net .

One problem with that module is that DNotify uses SIGIO (or other signal of
your choice) to indicate the change, and Python's signal-delivery code
doesn't pass the siginfo_t argument to the Python handler, which means
multiple DNotify notifications for the same process all look the same.

That buildbot code also falls back to polling every 10 seconds if the DNotify
fcntl values aren't available (e.g. non-linux).


cheers,
 -Brian



From jon at totient.demon.co.uk  Wed Apr 30 18:28:31 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Wed, 30 Apr 2003 23:28:31 +0100
Subject: [Twisted-Python] adbapi question
Message-ID: <200304302328.31599.jon@totient.demon.co.uk>

Hi

Below is a small script. My question is what is the correct way to exit after using the adbapi stuff. The script as it stands just hangs the terminal
until I Ctrl-Z and kill it.
sample run

jon> python simpledb.py jon jon jon
Done
0
finished
{1026: <connection object at 0x8228048>}
0
[<_MainThread(MainThread, started)>, <Thread(PoolThread-136416140-1, started)>]


Jon


import sys
import threading
import pprint
from twisted.enterprise import adbapi
from twisted.internet import reactor

dbname,user,passwd = sys.argv[1:4]

class SomeTable(adbapi.Augmentation):
    def getSomeData(self):
        self.done = 1
        qry = "select * from SomeTable"
        return self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
    
    def operationDone(self, done):
        print "Done"
        self.done =0
        
    def operationError(self,err):
        print err
        

dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))

db1=SomeTable(dbpool)

db1.getSomeData()

while 1 == db1.done:
        reactor.iterate()

print db1.done
print "finished"
reactor.crash()
reactor.stop()
dbpool.close()
print dbpool.connections
print reactor.running
print threading.enumerate()




From dave at krondo.com  Wed Apr 30 18:48:46 2003
From: dave at krondo.com (Dave Peticolas)
Date: 30 Apr 2003 15:48:46 -0700
Subject: [Twisted-Python] Patch: row / reflectors / util
In-Reply-To: <3EAC1D31.7060107@gnubia.net>
References: <3EAC1D31.7060107@gnubia.net>
Message-ID: <1051742926.20769.8.camel@oneiros>

On Sun, 2003-04-27 at 11:10, Justin Ryan wrote:
> Attached is a patch to twisted.enterprise.row, the sqlreflector, and 
> util.py to allow mixed-case table/row names (and to double-quote them in 
> databases that require it, such as postgres).
> 
> I sent this a while back with a detailed explanation, but have now 
> developed some docs on the web at http://gnubia.net/Docs/Twisted.Gnubia/
> detailing some of my changes..
> 
> Oh yeh and.. erm.. Itamar told me to re-send on irc a few min ago..

Your patch looks reasonable to me.


> This stuff may need to be cleaned up, and I've considered separating 
> some of it out into a PGRow or somesuch, the way that I (and someone 
> else on the list) am using a PGSQLReflector to do some postgres-specific 
> stuff.

So you are thinking of factoring out the case sensitive relations code?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030430/023ccd0d/attachment.pgp 

From pinard at iro.umontreal.ca  Wed Apr 30 20:03:18 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 30 Apr 2003 20:03:18 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - NameVirtualHost and isLeaf
Message-ID: <oqu1cfleih.fsf@titan.progiciels-bpi.ca>

Hi, people.

Thanks to the recent explanations about `isLeaf', I was able to figure out
that if, with Twisted 1.0.4, I was unable to get virtual hosts to work, this
was because the `isLeaf' attribute of an instance of `vhost.NameVirtualHost'
is not True.  At least with the setup I use.  the instance's `render' method
is not called then, and consequently, the dispatching to the proper resource
does not occur.

In what circumstance would it be useful that such an instance has `isLeaf'
set to False?  I presume this might help me better understand resources.

-- 
Fran?ois Pinard   http://www.iro.umontreal.ca/~pinard



From justin at gnubia.net  Wed Apr 30 21:29:01 2003
From: justin at gnubia.net (Justin Ryan)
Date: 30 Apr 2003 20:29:01 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200304302328.31599.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
Message-ID: <1051752541.32738.206.camel@samadhi>

Someone will surely correct me if I'm wrong, but I ran into this same
dilemma when I began to use twisted.  It seems that as twisted is an
event-driven framework for asynchronous networked applications, it isn't
intended to be used in this way.

Twisted applications should generally sit around waiting for requests,
and respond to them in a timely, but non-blocking manner.  Starting up,
doing some stuff, and exiting, just doesn't seem to be the idiom at play
here.

YMMV..

On Wed, 2003-04-30 at 17:28, Jon Dyte wrote:
> Hi
> 
> Below is a small script. My question is what is the correct way to exit after using the adbapi stuff. The script as it stands just hangs the terminal
> until I Ctrl-Z and kill it.
> sample run
> 
> jon> python simpledb.py jon jon jon
> Done
> 0
> finished
> {1026: <connection object at 0x8228048>}
> 0
> [<_MainThread(MainThread, started)>, <Thread(PoolThread-136416140-1, started)>]
> 
> 
> Jon
> 
> 
> import sys
> import threading
> import pprint
> from twisted.enterprise import adbapi
> from twisted.internet import reactor
> 
> dbname,user,passwd = sys.argv[1:4]
> 
> class SomeTable(adbapi.Augmentation):
>     def getSomeData(self):
>         self.done = 1
>         qry = "select * from SomeTable"
>         return self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
>     
>     def operationDone(self, done):
>         print "Done"
>         self.done =0
>         
>     def operationError(self,err):
>         print err
>         
> 
> dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))
> 
> db1=SomeTable(dbpool)
> 
> db1.getSomeData()
> 
> while 1 == db1.done:
>         reactor.iterate()
> 
> print db1.done
> print "finished"
> reactor.crash()
> reactor.stop()
> dbpool.close()
> print dbpool.connections
> print reactor.running
> print threading.enumerate()
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20030430/0b1471b7/attachment.pgp 

From itamar at itamarst.org  Wed Apr 30 21:38:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 21:38:15 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200304302328.31599.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
Message-ID: <20030430213815.3fff4347.itamar@itamarst.org>

On Wed, 30 Apr 2003 23:28:31 +0100
Jon Dyte <jon at totient.demon.co.uk> wrote:

> Below is a small script. My question is what is the correct way to
> exit after using the adbapi stuff. The script as it stands just hangs
> the terminal until I Ctrl-Z and kill it.

You don't want a reactor.crash() and a reactor.stop(). Just do
reactor.stop().

Using threads can make your python program not exit if they hang around,
but reactor.stop() should shut down all threads in the thread pool.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr 30 21:39:30 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 21:39:30 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <1051752541.32738.206.camel@samadhi>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<1051752541.32738.206.camel@samadhi>
Message-ID: <20030430213930.542c81d9.itamar@itamarst.org>

On 30 Apr 2003 20:29:01 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Someone will surely correct me if I'm wrong, but I ran into this same
> dilemma when I began to use twisted.  It seems that as twisted is an
> event-driven framework for asynchronous networked applications, it
> isn't intended to be used in this way.

Dunno what you mean by "this way". If you need to deal with a blocking
database operation you dispatch it to the thread pool, and that works
just fine.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jk at supplysolution.com  Tue Apr  1 10:21:37 2003
From: jk at supplysolution.com (Joshua Kifer)
Date: Tue, 1 Apr 2003 09:21:37 -0800
Subject: [Twisted-Python] PB+SSH
Message-ID: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>

Can anyone indicate an example or doc on combining these two pieces?

-----------------------------
Democracy is two wolves and a lamb voting on what to have for lunch. 
Liberty is a well-armed lamb contesting the vote.

-- Benjamin Franklin




From dalke at dalkescientific.com  Tue Apr  1 05:00:53 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Tue, 1 Apr 2003 07:00:53 -0500
Subject: [Twisted-Python] supressess warnings
Message-ID: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>

I'm just starting to learn how to use Twisted.  My first project
is to write a simple XML-RPC server.  I started with the demo,
and that worked fine.

I then added an import statement for the module I need.

from openeye.oechem import *

Now, this uses a shared library extension which was built
for Python 2.2, and I'm running a CVS version of Python 2.3,
so I usually get

/usr/local/lib/python2.3/site-packages/openeye/oechem.py:5:  
RuntimeWarning: Python C API version mismatch for module _oechem: This  
Python has API version 1012, module _oechem has version 1011.
   import _oechem

However, that didn't happen when I started my my simple
server.  I got no warning message.  I started to worry that my
file system wasn't properly saving files!  I played around with
the imports, and moved that import to be above the twisted
ones, and it started reporting the warning.

A bit of searching later and I found
   twisted/python/log.py
which redefines (!) warnings.showwarning to dump the data to a
logfile, which is initialized to a NullFile(), which does nothing.

So the twisted code is throwing some (potentially useful) diagnostics.

Doing a search I found the commit statement
http://twistedmatrix.com/pipermail/twisted-commits/2002-October/ 
003975.html
 > 2) implemented a custom warning handler; now warnings look sexy.
 >   (the hackish overriding of warnings.showwarning is the recommended  
way to
 >   do so, according to the library reference.)

I'll grant that's what the docs say.  However, why is the logfile for
showwarnings initialized to NullFile, and not to sys.stderr?

For that matter, I think it's better to delay replacement until  
startLogging
is called.

Hmm, and why is os.linesep used in the logging?  The log
file should have been opened in text mode, in which case "\n"
will get translated to the proper os-dependent form.


I started to change the code, so I could submit a patch.  I got the
code out of CVS and am reading the documentation at
   http://twistedmatrix.com/documents/howto/coding-standard
It says that the main test suite builder is in 'twisted.test.test_all'

That module doesn't exist (can't import it) nor is the appropriate
file present anywhere.  And the hyperlink from that page yields
   "No Such Resource
    File not found."

It then says
   Acceptance tests are all automated by the bin/accepttests
but that program is in admin/accepttests

I ran that for my Mac OS X machine, with 'open' as the
WEBBROWSER setting (where does the '-b' option go, since
open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
/bin/true
as my IRCCLIENT, since I wouldn't know what to do with one
even assuming I had one.

Anyway, after a while it gave this error

/------
|####
|#### Starting mail test.
|#### Output should be one email (postmaster at foo.bar)
|#### and one bounce (postmaster at no.such.domain).
|####
\------
Running Command: './admin/../bin/mktap mail --domain foo.bar=dump  
--user postmaster=postmaster  --pop 18110'
option --pop not a unique prefix
Usage: mktap mail [options]
Options:
   -p, --pop3=                 Port to start the POP3 server on (0 to  
disable).
                               [default: 8110]
   -S, --pop3s=                Port to start the POP3-over-SSL server on  
(0 to
                               disable). [default: 0]
   -s, --smtp=                 Port to start the SMTP server on (0 to  
disable).
                               [default: 8025]
   -r, --relay=                relay mail we do not know how to handle  
to this
                               IP, using the given path as a queue  
directory
   -c, --certificate=          Certificate file to use for SSL  
connections
   -d, --domain=               generate an SMTP/POP3 virtual domain  
which saves
                               to "path"
       --version
       --help                  Display this help and exit.
   -u, --user=                 add a user/password to the last specified  
domains
       --bounce-to-postmaster  undelivered mails are sent to the  
postmaster

This creates a mail.tap file that can be used by twistd.
Running Command: './admin/../bin/twistd -f mail.tap'

Failed to load application: [Errno 2] No such file or directory:  
'mail.tap'
Traceback (most recent call last):
   File "./admin/accepttests", line 271, in ?
     runAllTests()
   File "./admin/accepttests", line 247, in runAllTests
     runMailTest()
   File "./admin/accepttests", line 204, in runMailTest
     s = smtplib.SMTP('127.0.0.1', 18026)
   File "/usr/local/lib/python2.3/smtplib.py", line 240, in __init__
     (code, msg) = self.connect(host, port)
   File "/usr/local/lib/python2.3/smtplib.py", line 302, in connect
     raise socket.error, msg
socket.error: (61, 'Connection refused')

Hmmm.... Is 'admin/runtests' the correct script to run?  I ran that,
and got the following output

======================================================================== 
=======
FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 193, in testReadLimit
     self.assertEquals(tServer.readThisSecond, 0)
  FailTest: 20 != 0
======================================================================== 
=======
FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 152, in testWriteLimit
     self.assert_(abs(p.wrappedProtocol.paused - now - 1.0) < 0.1)
  FailTest
======================================================================== 
=======
FAILURE: testPackages (twisted.test.test_setup.CheckingPackagesTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_setup.py", line  
44, in testPackages
     self.failUnlessEqual(l, [])
  FailTest: ['twisted.bugs', 'twisted.coils', 'twisted.eco',  
'twisted.enterprise.userRequests', 'twisted.forum', 'twisted.inetd',  
'twisted.issues', 'twisted.issues.ui', 'twisted.issues.ui.templates',  
'twisted.lumberjack', 'twisted.metrics', 'twisted.pretzel',  
'twisted.protocols.ldap', 'twisted.reality', 'twisted.reality.ui',  
'twisted.secsh', 'twisted.test.interactive', 'twisted.web.blog',  
'twisted.words.ui', 'twisted.words.ui.gateways'] != []
======================================================================== 
=======
FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_tcp.py", line  
171, in testFailing
     self.assert_(time.time() - start < 0.1)
  FailTest
======================================================================== 
=======
ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_xml.py", line  
326, in testUnicodeTolerance
     ud = microdom.parseString(s.encode('UTF-16'))
    File "./twisted/web/microdom.py", line 644, in parseString
    File "./twisted/web/microdom.py", line 609, in parse
    File "./twisted/protocols/sux.py", line 155, in dataReceived
    File "./twisted/protocols/sux.py", line 176, in do_begin
    File "./twisted/protocols/sux.py", line 108, in _parseError
  ParseError: <xmlfile />:1:1: First char of document ['\xfe'] wasn't <
======================================================================== 
=======
SKIPPED: test_modules (twisted.test.test_doc.DocCoverage)
------------------------------------------------------------------------ 
-------
Remove this line when you feel like writing docstrings.
------------------------------------------------------------------------ 
-------
Ran 494 tests in 227.667s

FAILED (failures=4, errors=1, skips=1)

Could not import twisted.test.test_conch: No module named Crypto.Cipher





So I tried to rewrite the code given that it looks like the self-tests
run reasonably well, but then ran into complications with this bit of  
code

# Make sure we have some basic logging setup.  This only works in  
cpython.
try:
     logOwner
except NameError:
     logOwner = LogOwner()

     ...

# Prevent logfile from being erased on reload.  This only works in  
cpython.
try:
     logfile
except NameError:
     logfile = NullFile()
     logerr = sys.stderr


Okay, so we've got some code duplication here, and comment
skew.  I've fixed that up, and tidied up a few other bits of the code.
And for the life of me I can't figure out why the log file should
default (when no logging is enabled) to the NullFile rather than
sys.stderr -- if you really want the NullFile, just pass it in.  So
I switched it to use sys.stderr.

I then reran the 'admin/runtests' script and got ... some warnings
and comments which were being supressed.

/Users/dalke/cvses/Twisted/twisted/test/test_delay.py:24:  
DeprecationWarning: twisted.python.delay is deprecated. Please use  
reactor methods.
   from twisted.python import delay
/Users/dalke/cvses/Twisted/twisted/protocols/dns.py:46: RuntimeWarning:  
PyCrypto not available - proceeding with non-cryptographically secure  
random source
Enabling Multithreading.
Resolver added ('64.105.156.138', 53) to server list
Resolver added ('64.105.132.250', 53) to server list

Also, I removed those os.linesep references, and the os module,
and the needless string module.  And turned 'file_protocol' into
'_file_protocol' since it's for internal use only.

Why's the Log pickleable? What happens if a cStringIO is passed
in instead of a file?  Or an outgoing network socket?  Or a
os.popen("lp")?

It looks like Log.synchronized is old code that can be removed.  Yes?

Why does doc/examples/cursesclient.py set log.logfile directly?
Shouldn't it call log.startLogging(log.NullFile()) ?  It's the only  
other
piece of code which references log.NullFile.

Is 'discardLogs' the true inverse of startLogging?  If so, it
should add something to restore sys.stdout/sys.stderr if
startLogging asked them to be changed.

If not, where's the 'stopLogging' function?  And 'discard'
means to ignore logging?  Or should it throw away the
log files?  The terminology is confusing.

Anyway, the diff -u is attached for you all to review and
correct. 
  
-------------- next part --------------
A non-text attachment was scrubbed...
Name: log.py.diff
Type: application/octet-stream
Size: 4148 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030401/a162bb55/attachment-0002.obj>
-------------- next part --------------


Oh, and with my changes, I now see the expected warning
when I start up, and I see two twisted messages ...

[Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% python cansmi_rpc.py
/usr/local/lib/python2.3/site-packages/openeye/oechem.py:5: 
RuntimeWarning: Python C API version mismatch for module _oechem: This 
Python has API version 1012, module _oechem has version 1011.
   import _oechem
twisted.web.server.Site starting on 8080
Starting factory <twisted.web.server.Site instance at 0x640850>

which tells me that those two messages ("Site starting" and "Starting
factory") were being sent to never-never-land the whole time.  Perhaps
the latter shouldn't be present?

					Andrew
					dalke at dalkescientific.com

From radix at twistedmatrix.com  Tue Apr  1 11:29:12 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 13:29:12 -0500
Subject: [Twisted-Python] PB+SSH
In-Reply-To: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>
References: <64E9FA92-6466-11D7-AB83-00039398AC98@supplysolution.com>
Message-ID: <20030401182912.GB29239@radii>

On Tue, Apr 01, 2003 at 09:21:37AM -0800, Joshua Kifer wrote:
> Can anyone indicate an example or doc on combining these two pieces?

Do you mean PB+SSL?

If so, the support for it (pb.connectSSL, or whatever the function is
called) is broken, IIRC. Sorry. I might have a reason to fix it soon,
however.

If you *do* mean PB+SSH, I have no idea what you mean.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From twisted at itamarst.org  Tue Apr  1 11:48:04 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 13:48:04 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401134804.1aeb646e.twisted@itamarst.org>

On Tue, 1 Apr 2003 07:00:53 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> A bit of searching later and I found
>    twisted/python/log.py
> which redefines (!) warnings.showwarning to dump the data to a
> logfile, which is initialized to a NullFile(), which does nothing.
> 
> So the twisted code is throwing some (potentially useful) diagnostics.

Fixed in CVS - warnings will be logged to stderr if no log file was
specified.

> I started to change the code, so I could submit a patch.  I got the
> code out of CVS and am reading the documentation at
>    http://twistedmatrix.com/documents/howto/coding-standard
> It says that the main test suite builder is in 'twisted.test.test_all'

Fixed doc in CVS.

> That module doesn't exist (can't import it) nor is the appropriate
> file present anywhere.  And the hyperlink from that page yields
>    "No Such Resource
>     File not found."
> 
> It then says
>    Acceptance tests are all automated by the bin/accepttests
> but that program is in admin/accepttests

Fixed in CVS.

> I ran that for my Mac OS X machine, with 'open' as the
> WEBBROWSER setting (where does the '-b' option go, since
> open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
> /bin/true
> as my IRCCLIENT, since I wouldn't know what to do with one
> even assuming I had one.

Running admintests correctly is hard - I've never gotten the web distrib
tests to pass. In general these tests are more for the release manager
than for end users.

> So I tried to rewrite the code given that it looks like the self-tests
> run reasonably well, but then ran into complications with this bit of 
> 
> code

> It looks like Log.synchronized is old code that can be removed.  Yes?

Probably not.

Basically, Twisted logging starts out with all log.msg() messages being
discarded, and exceptions, errors and in CVS warnings, logged to stderr.
startLogging() will set it so all messages get logged to the specified
file-like object.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jk at supplysolution.com  Tue Apr  1 12:11:29 2003
From: jk at supplysolution.com (Joshua Kifer)
Date: Tue, 1 Apr 2003 11:11:29 -0800
Subject: [Twisted-Python] PB+SSH
In-Reply-To: <20030401182912.GB29239@radii>
Message-ID: <BE32EA84-6475-11D7-AB83-00039398AC98@supplysolution.com>

Sorry SSL yes.  I'll take a look thanks.

On Tuesday, April 1, 2003, at 10:29 AM, Christopher Armstrong wrote:

> On Tue, Apr 01, 2003 at 09:21:37AM -0800, Joshua Kifer wrote:
>> Can anyone indicate an example or doc on combining these two pieces?
>
> Do you mean PB+SSL?
>
> If so, the support for it (pb.connectSSL, or whatever the function is
> called) is broken, IIRC. Sorry. I might have a reason to fix it soon,
> however.
>
> If you *do* mean PB+SSH, I have no idea what you mean.
>
> -- 
>  Twisted | Christopher Armstrong: International Man of Twistery
>   Radix  |          Release Manager,  Twisted Project
> ---------+     http://twistedmatrix.com/users/radix.twistd/
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


--------------------------
Never do anything against conscience even if the state demands it. -- 
Albert Einstein




From radix at twistedmatrix.com  Tue Apr  1 12:11:18 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 14:11:18 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401191118.GC29239@radii>

On Tue, Apr 01, 2003 at 07:00:53AM -0500, Andrew Dalke wrote:

> A bit of searching later and I found
>   twisted/python/log.py
> which redefines (!) warnings.showwarning to dump the data to a
> logfile, which is initialized to a NullFile(), which does nothing.

Yeah, replacing showwarnings is the idiomatic way to override the
display of warnings. The bit that initializes the default logfile to
NullFile is something moshez and glyph wanted, and, for the record,
something I'm against. (sorry glyph :-)

> I started to change the code, so I could submit a patch.  I got the
> code out of CVS and am reading the documentation at
>   http://twistedmatrix.com/documents/howto/coding-standard
> It says that the main test suite builder is in 'twisted.test.test_all'
> 
> That module doesn't exist (can't import it) nor is the appropriate
> file present anywhere.  And the hyperlink from that page yields
>   "No Such Resource
>    File not found."

Oh, that's a bit out of date. Just run `./bin/trial -p twisted.test'
if you want to run all of the Twisted tests. I'll update the doc.

> It then says
>   Acceptance tests are all automated by the bin/accepttests
> but that program is in admin/accepttests
> 
> I ran that for my Mac OS X machine, with 'open' as the
> WEBBROWSER setting (where does the '-b' option go, since
> open doesn't block .. do I pass it to 'accepttests'?  Yes.) and  
> /bin/true
> as my IRCCLIENT, since I wouldn't know what to do with one
> even assuming I had one.

Note that all developers aren't really expected to run these, it's
super-dependant on your environment and is finicky about how exactly
you start the script. I'll add this to the doc, as well.


...

Oh, it seems itamar just fixed those issues with the coding standard.

> Anyway, after a while it gave this error

> Running Command: './admin/../bin/mktap mail --domain foo.bar=dump  
> --user postmaster=postmaster  --pop 18110'
> option --pop not a unique prefix

I have no idea what this error means.

> Hmmm.... Is 'admin/runtests' the correct script to run?  I ran that,
> and got the following output

Yeah, `admin/runtests' just runs `bin/trial -p twisted.test', for
convenience.

> ======================================================================== 
> FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> FAILURE: testPackages (twisted.test.test_setup.CheckingPackagesTestCase)
> ------------------------------------------------------------------------ 

This happened because you didn't use the `-P' option to cvs
update/checkout. Please put this in your ~/.cvsrc:

"""
update -d -P
checkout -P
"""

> ======================================================================== 
> FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
> ------------------------------------------------------------------------ 

> ======================================================================== 
> ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
> ------------------------------------------------------------------------ 


I have no idea what the rest of the problems were about, though.

> And for the life of me I can't figure out why the log file should
> default (when no logging is enabled) to the NullFile rather than
> sys.stderr -- if you really want the NullFile, just pass it in.  So
> I switched it to use sys.stderr.
 
I wish this could be accepted, but unless glyph changes his mind, it
probably won't. The usual response is to use twistd, but twistd isn't
appropriate in all use-cases (it is in yours, however). The *reason*,
IIRC, was that "you shouldn't spam unwanted stuff to STDIO", which I
think is stupid. Application developers could notice spam to stdio,
and, if they don't like it, startLogging to NullFile. (I've heard a
lot more complaints about "Why don't I see any output!?" than "Why
does Twisted write stuff to my stdio?")

</rant>

Sorry, I guess I'll stop beating a dead horse. :)

> Why's the Log pickleable? What happens if a cStringIO is passed
> in instead of a file?  Or an outgoing network socket?  Or a
> os.popen("lp")?

Well, it should probably be pickleable only when it _can_ be. :) i.e.,
__getstate__ could test for a `.name' attribute on the file object, or
something. Handling stuff like StringIO might be a bit trickier
without hardcoding an `isinstance(self.file, StringIO)' into
it... Perhaps it could `try: cPickle.dumps(self.file)' to test if the
file's pickleable in the case where it's not a named file ;-)

> It looks like Log.synchronized is old code that can be removed.  Yes?

No, I'm pretty sure this is so threaded code that writes to the log
doesn't break.

> Why does doc/examples/cursesclient.py set log.logfile directly?
> Shouldn't it call log.startLogging(log.NullFile()) ?  It's the only  
> other
> piece of code which references log.NullFile.

Probably.

> Is 'discardLogs' the true inverse of startLogging?  If so, it
> should add something to restore sys.stdout/sys.stderr if
> startLogging asked them to be changed.
> 
> If not, where's the 'stopLogging' function?  And 'discard'
> means to ignore logging?  Or should it throw away the
> log files?  The terminology is confusing.

Well, if you want to switch your logging to something else
(sys.stdout/stderr), then pass that something else to startLogging,
probably.


> Anyway, the diff -u is attached for you all to review and
> correct. 

> Oh, and with my changes, I now see the expected warning
> when I start up, and I see two twisted messages ...
> 
> [Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% python cansmi_rpc.py
> /usr/local/lib/python2.3/site-packages/openeye/oechem.py:5: 
> RuntimeWarning: Python C API version mismatch for module _oechem: This 
> Python has API version 1012, module _oechem has version 1011.
>   import _oechem
> twisted.web.server.Site starting on 8080
> Starting factory <twisted.web.server.Site instance at 0x640850>
> 
> which tells me that those two messages ("Site starting" and "Starting
> factory") were being sent to never-never-land the whole time.  Perhaps
> the latter shouldn't be present?

Well, no, usually people use twistd. Which you should, if you're
writing a server. It handles logging, daemonization, and a whole slew
of other things for you, and, contrary to what most people think,
doesn't require the use of .taps (see the `-y' parameter).


Anyway, thanks for the in-depth message, it was helpful.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr  1 12:17:33 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 1 Apr 2003 14:17:33 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191118.GC29239@radii>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com> <20030401191118.GC29239@radii>
Message-ID: <20030401191733.GD29239@radii>

On Tue, Apr 01, 2003 at 02:11:18PM -0500, Christopher Armstrong wrote:
> I wish this could be accepted, but unless glyph changes his mind, it
> probably won't. The usual response is to use twistd, but twistd isn't
> appropriate in all use-cases (it is in yours, however). The *reason*,
> IIRC, was that "you shouldn't spam unwanted stuff to STDIO", which I
> think is stupid. Application developers could notice spam to stdio,
> and, if they don't like it, startLogging to NullFile. (I've heard a
> lot more complaints about "Why don't I see any output!?" than "Why
> does Twisted write stuff to my stdio?")
> 
> </rant>
> 
> Sorry, I guess I'll stop beating a dead horse. :)

Ok, so apparently I had forgotten that glyph *did* agree to log errors
and warnings to STDIO, but when he implemented the change it didn't
work. Sorry, glyph :) Itamar just checked in a fix so stuff gets
logged to stderr. Hooray!


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Tue Apr  1 14:01:28 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Apr 2003 16:01:28 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191118.GC29239@radii>
Message-ID: <1B3A09C9-6485-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 1, 2003, at 02:11 PM, Christopher Armstrong wrote:

> On Tue, Apr 01, 2003 at 07:00:53AM -0500, Andrew Dalke wrote:
>
>> A bit of searching later and I found
>>   twisted/python/log.py
>> which redefines (!) warnings.showwarning to dump the data to a
>> logfile, which is initialized to a NullFile(), which does nothing.
>
> Yeah, replacing showwarnings is the idiomatic way to override the
> display of warnings. The bit that initializes the default logfile to
> NullFile is something moshez and glyph wanted, and, for the record,
> something I'm against. (sorry glyph :-)

The reason that moshez and I have it written this way is simple: we 
don't want library code generating spurious messages that your code may 
not want printed.  However, I think that you're correct in criticizing 
it for throwing away warnings and tracebacks.  Errors, even in library 
code, ought to be presented the same way they're normally presented.

>> And for the life of me I can't figure out why the log file should
>> default (when no logging is enabled) to the NullFile rather than
>> sys.stderr -- if you really want the NullFile, just pass it in.  So
>> I switched it to use sys.stderr.
>
> I wish this could be accepted, but unless glyph changes his mind, it
> probably won't.

As long as we're talking about sys.std*err*, and not std*out*, I think 
this is acceptable.  I'd like to hear if moshez's has any objections 
too, but barring that, let's do it immediately.

> The usual response is to use twistd, but twistd isn't
> appropriate in all use-cases (it is in yours, however).

This should be a FAQ.

	Q.  Is using 'twistd' always appropriate?

	A.  Not always, but it is in your case.

> The *reason*, IIRC, was that "you shouldn't spam unwanted stuff to 
> STDIO", which I think is stupid. Application developers could notice 
> spam to stdio, and, if they don't like it, startLogging to NullFile. 
> (I've heard a lot more complaints about "Why don't I see any output!?" 
> than "Why does Twisted write stuff to my stdio?")

Oh, I heard a lot of complaints about it writing spurious messages to 
stdio before this change was made.  Different people are unhappy, but 
people are unhappy either way :-)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+if4svVGR4uSOE2wRArcOAKCKs4sHno57LtUWgB+U2C1Oc1X6qgCfbg5N
qHg2Z9ZDNkGHddmnKvWEFBw=
=FtOD
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Tue Apr  1 14:02:14 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Apr 2003 16:02:14 -0500
Subject: [Twisted-Python] supressess warnings
In-Reply-To: <20030401191733.GD29239@radii>
Message-ID: <36ED575D-6485-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 1, 2003, at 02:17 PM, Christopher Armstrong wrote:

> Ok, so apparently I had forgotten that glyph *did* agree to log errors
> and warnings to STDIO, but when he implemented the change it didn't
> work. Sorry, glyph :) Itamar just checked in a fix so stuff gets
> logged to stderr. Hooray!

Thank you, Itamar!  Hooray!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD4DBQE+if5XvVGR4uSOE2wRAk9NAJ9ORSTci/M4Eio4zN7TuoDOG8MdVwCWLgfa
SSRjC5KXmJj1Ei9jd6hBSg==
=xHFS
-----END PGP SIGNATURE-----




From dalke at dalkescientific.com  Tue Apr  1 14:48:01 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Tue, 1 Apr 2003 16:48:01 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
 > Fixed in CVS - warnings will be logged to stderr if no log file
 > was specified.

Mmm, okay, I see the patch you did in CVS.

One thing I don't like about the log system is that it goes
into place on import, rather than after some explicit request
to actually use the log.  It isn't obvious anywhere that that
import will make a system level change.
   - what if I've changed warnings.showwarning in my own
        code (or in some other 3rd party package).  Where's the
        documentation which states that there will be a problem?

   - It's pervasive.  That is, if I import twisted.lore (perhaps
       because I want it to use it for my own documentation
       system) it's still the case that warnings.showwarning
       gets replaced.  There should be no reason for that.

Are there any other system-level functions or settings which
get tweaked by Twisted?

 > > It looks like Log.synchronized is old code that can be removed.   
Yes?

 > Probably not

Ahh, I see.  It's emulating the Java keyword.  Hmm, I probably
would have had a Log implementation which changed depending
on of this was threaded or not, and have threaded calls forward
the write/writeline via a Queue.

There are only 4 places which use that, outside of some of the
test code.  Is it really that useful given how non-obvious it is?

Also, I see that the other places which use a class with the
synchronized attribute (like web/static.py) also call  
threadable.synchronize
on the class, as in

python/logfile.py:threadable.synchronize(LogFile)
test/test_threadpool.py:threadable.synchronize(Counter)
test/test_threads.py:threadable.synchronize(Counter)
web/static.py:threadable.synchronize(FileTransfer)

Notice that log.py's Log class, which has a 'synchronized'
attribute, is not so initialized.  This suggests there's either a bug
(this class needs to be synchronized) or that that attribute is
unneeded.

Christopher Armstrong:
 > The bit that initializes the default logfile to NullFile is
 > something moshez and glyph wanted

Actually, I don't care where the default logfile goes, I just
care where my system warnings go.  But as you pointed out
in a later email, it's now sent to 'STDIO'.

I still don't like that it goes into effect without me doing
anything other than an import.

 > > Running Command: './admin/../bin/mktap mail --domain foo.bar=dump
 > > --user postmaster=postmaster  --pop 18110'
 > > option --pop not a unique prefix

 > I have no idea what this error means.

Looking only at the error message, it means that:
   - the option parsing code does automatic prefix expansion, so
        that if the option is '--pop3' and the argument is '--pop' and no
        other option starts with '--pop' then it's elided to '--pop3'.   
This
        was what DEC machines did for VMS commands (as I recall)
        and it was annoying because if a new option is added (like
        '--popcorn') then scripts which assumed that '--pop' would
        always be unique, broke.

   - and a new option was added which started with the '--pop'
        prefix, breaking the code.

   - and no one has run those tests in a while, probably not since
      10-Feb-03 when moshez added the following option.

        ["pop3s", "S", 0, "Port to start the POP3-over-SSL server on (0  
to disable)."],


 > This happened because you didn't use the `-P' option to cvs
 > update/checkout. Please put this in your ~/.cvsrc:

Ummmm, okay, done, and those errors go away.  The page at
   http://twistedmatrix.com/developers/cvs
should be updated to mention this.

 > I have no idea what the rest of the problems were about, though.

Here's the full set of tracebacks

======================================================================== 
=======
FAILURE: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 193, in testReadLimit
     self.assertEquals(tServer.readThisSecond, 0)
  FailTest: 20 != 0

No clue.  A timing issue?

======================================================================== 
=======
FAILURE: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_policies.py",  
line 152, in testWriteLimit
     self.assert_(abs(p.wrappedProtocol.paused - now - 1.0) < 0.1)
  FailTest

Related to the previous case?

======================================================================== 
=======
FAILURE: testFailing (twisted.test.test_tcp.LoopbackTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/test/test_tcp.py", line  
171, in testFailing
     self.assert_(time.time() - start < 0.1)
  FailTest

Looks like it takes more than 0.1 seconds for me to fail that test.
On this box (OS X), a connect looks like it starts off with an IPv6  
request
then tries 127.0.0.1 then tries ... an IP address I got a few weeks ago.
Strange.  That's on another network, which is firewalled from here.
So that's probably where the delay comes in.

[Andrew-Dalkes-Computer:~/cvses/Twisted] dalke% time telnet localhost 69
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
telnet: connect to address 127.0.0.1: Connection refused
Trying 207.225.60.130...
telnet: connect to address 207.225.60.130: Connection refused
telnet: Unable to connect to remote host
0.000u 0.020s 0:00.46 4.3%      0+0k 0+0io 0pf+0w


======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_process.py", line  
140, in testEcho
     self.assertEquals(len(p.buffer), len(p.s * 10))
  AttributeError: EchoProtocol instance has no attribute 'buffer'

Trying to track that down, I see that
   twisted/internet/interfaces.py
has mention of
           @see: C{twisted.protocols.protocol.ProcessProtocol}
but twisted/protocols/protocol.py says
"""Deprecated - use twisted.internet.protocol instead.

Anyway, the only reason I can see this error happened is if
EchoProtocol's connectionMade wasn't called.  I simply
don't understand the code well enough to debug it right now.

======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback! exceptions.OSError, [Errno 35] Resource temporarily  
unavailable
./twisted/internet/process.py:281:__init__
./twisted/internet/protocol.py:290:makeConnection
/Users/dalke/cvses/Twisted/twisted/test/ 
test_process.py:82:connectionMade
./twisted/internet/process.py:358:write
./twisted/internet/process.py:126:write
./twisted/internet/abstract.py:145:write
./twisted/internet/process.py:111:writeSomeData
======================================================================== 
=======
ERROR: testEcho (twisted.test.test_process.ProcessTestCase)
------------------------------------------------------------------------ 
-------
Traceback! exceptions.AttributeError, EchoProtocol instance has no  
attribute 'buffer'
./twisted/internet/default.py:467:doSelect
./twisted/internet/process.py:345:doRead
./twisted/internet/fdesc.py:58:readFromFD
/Users/dalke/cvses/Twisted/twisted/test/test_process.py:86:outReceived
======================================================================== 
=======
ERROR: testUnicodeTolerance (twisted.test.test_xml.MicroDOMTest)
------------------------------------------------------------------------ 
-------
Traceback (most recent call last):
    File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line  
165, in runOneTest
     method(testCase)
    File "/Users/dalke/cvses/Twisted/twisted/test/test_xml.py", line  
326, in testUnicodeTolerance
     ud = microdom.parseString(s.encode('UTF-16'))
    File "/Users/dalke/cvses/Twisted/twisted/web/microdom.py", line 648,  
in parseString
     return parse(StringIO(st), *args, **kw)
    File "/Users/dalke/cvses/Twisted/twisted/web/microdom.py", line 613,  
in parse
     mdp.dataReceived(readable.getvalue())
    File "./twisted/protocols/sux.py", line 155, in dataReceived
    File "./twisted/protocols/sux.py", line 176, in do_begin
    File "./twisted/protocols/sux.py", line 108, in _parseError
  ParseError: <xmlfile />:1:1: First char of document ['\xfe'] wasn't <

\xfe is the byte order marker.  This test started with

s = "<foo><bar><baz /></bar></foo>"
then encoded it as UTF-16, which puts the BOM at the front.
So of course the string doesn't start with a '<'.

 > The *reason*, IIRC, was that "you shouldn't spam unwanted stuff
 > to STDIO"

Again, I realize this has been changed.  Just wanted to note
that system warnings about API differences are wanted, as well
as warnings about deprecations, etc.

 > > Why's the Log pickleable? What happens if a cStringIO is passed
 > > in instead of a file?  Or an outgoing network socket?  Or a
 > > os.popen("lp")?

 > Well, it should probably be pickleable only when it _can_ be. :) i.e.,

That didn't answer my question of why it needs to be pickled.
I suppose it's part of the App, which saves complete state via
a pickle?  Err, it can't, because that's a module variable.

In any case, the cleaner way to fix it is to have a specialized
replacement called instead of the native open call, and
have it store the arguments so that the unpickling gets the
correct calls, and allow backwards compatibility with
   if isinstance(logfile, file):
     logfile = PickleableFile(logfile)

 > Well, no, usually people use twistd. Which you should, if you're
 > writing a server.

I'm just working my way through the example, and it doesn't
use twistd, so I didn't.

As mentioned, I don't like how system settings are changed
on an import, much less without documentation which says
this will happen.

If everything server related should be done in the context
of twistd, then that warnings.showwarning replacement
should only be done when twistd is used, which is why
the patch I sent only made the switch when startLogging
was called.

The solution I see now, which is that showwarnings calls
the errlog instead of the msg log, still isn't the right
behaviour, IMO, if only because you are changing the
format of the error messages.  At the very least you should
call warnings.formatwarning instead of building your own
warning message.

Oh, and the code should be that if file is not None, to
use the file handle passed in to showwarnings, and not
the error log, that is, replace twisted/python/log.py from

def showwarning(message, category, filename, lineno, file=None):
     err('''\
WARNING: %s::
%s
file: %s; line: %s
''' % (category, indent(message), filename, lineno))

to

def showwarning(message, category, filename, lineno, file=None):
     m = warnings.formatwarning(message, category, filename, lineno)
     if file is None:
       err(m)
     else:
       file.write(m)

Finally, I noticed that other part of my patch were not accepted.
For example, the use of os.linesep is incorrect.  The log file is
opened in text mode, so "\n" will be converted to the appropriate
byte representation for the given platform.  In other words,

         logerr.write(str(stuff)+os.linesep)
should be
         logerr.write(str(stuff)+"\n")

I also did some things to clean up the code, like getting
rid of unneeded module imports (like string) and replacing

import cStringIO
  ...
StringIO = cStringIO
del cStringIO

with

import cStringIO as StringIO

I noticed none of these were accepted.

What should I do to make these sorts of changes more acceptable?
After all, the point of a good unit test suite is to make it easy for
people to refactor and clean up existing code.  All the tests passed
identically before and after my changes.

I could, for instance, have split up the patch into several parts.
However, part of what I did was to replace the warnings.showwarning
code only once, which required a test against a reload (as is
done in two other parts for the code) so I moved those into a
single change and fixed the comments for why it was done.

					Andrew
					dalke at dalkescientific.com




From twisted at itamarst.org  Tue Apr  1 20:45:23 2003
From: twisted at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 22:45:23 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
	<9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030401224523.38e0a2f2.twisted@itamarst.org>

On Tue, 1 Apr 2003 16:48:01 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> to actually use the log.  It isn't obvious anywhere that that
> import will make a system level change.
>    - what if I've changed warnings.showwarning in my own
>         code (or in some other 3rd party package).  Where's the
>         documentation which states that there will be a problem?
> 
>    - It's pervasive.  That is, if I import twisted.lore (perhaps
>        because I want it to use it for my own documentation
>        system) it's still the case that warnings.showwarning
>        gets replaced.  There should be no reason for that.

I agree that this is bad. If you complain enough maybe glyph will listen
to reason.

> Are there any other system-level functions or settings which
> get tweaked by Twisted?

Not that I can recall.

> There are only 4 places which use that, outside of some of the
> test code.  Is it really that useful given how non-obvious it is?

No. We need to have thread-safe logging.

> Notice that log.py's Log class, which has a 'synchronized'
> attribute, is not so initialized.  This suggests there's either a bug
> (this class needs to be synchronized) or that that attribute is
> unneeded.

Indeed.

> I still don't like that it goes into effect without me doing
> anything other than an import.

Yes. Its glyph's fault, again.

> Looking only at the error message, it means that:
>    - the option parsing code does automatic prefix expansion, so
>         that if the option is '--pop3' and the argument is '--pop' and
>         no other option starts with '--pop' then it's elided to
>         '--pop3'.   
...
>    - and no one has run those tests in a while, probably not since
>       10-Feb-03 when moshez added the following option.
> 
>         ["pop3s", "S", 0, "Port to start the POP3-over-SSL server on
>         (0  
> to disable)."],

Yes, they only get run during releases. Jean-Paul fixed the --pop issue
in CVS I think.

Some of the failed tests look like timing issues, yes.

> -------
> Traceback (most recent call last):
>     File "/Users/dalke/cvses/Twisted/twisted/trial/unittest.py", line 
>     
> 165, in runOneTest
>      method(testCase)
>     File "/Users/dalke/cvses/Twisted/twisted/test/test_process.py",
>     line  
> 140, in testEcho
>      self.assertEquals(len(p.buffer), len(p.s * 10))
>   AttributeError: EchoProtocol instance has no attribute 'buffer'

Gar. I wonder why this isn't showing on the Max OS X buildbot.

> Trying to track that down, I see that
>    twisted/internet/interfaces.py
> has mention of
>            @see: C{twisted.protocols.protocol.ProcessProtocol}

Typo - fixed in CVS.

Any bugs we can reproduce and are easily fixable will be fixed by next
release, e.g. the dom one.

> As mentioned, I don't like how system settings are changed
> on an import, much less without documentation which says
> this will happen.

We should have logging docs soon.

> If everything server related should be done in the context
> of twistd, then that warnings.showwarning replacement
> should only be done when twistd is used, which is why
> the patch I sent only made the switch when startLogging
> was called.

Again, I agree, bug glyph.

> The solution I see now, which is that showwarnings calls
> the errlog instead of the msg log, still isn't the right
> behaviour, IMO, if only because you are changing the
> format of the error messages.  At the very least you should
> call warnings.formatwarning instead of building your own
> warning message.

The idea was to have more informative messages. Can you put in something
comparing the two formats?


> def showwarning(message, category, filename, lineno, file=None):
>      m = warnings.formatwarning(message, category, filename, lineno)
>      if file is None:
>        err(m)
>      else:
>        file.write(m)

Done, at least partially.

> Finally, I noticed that other part of my patch were not accepted.
> For example, the use of os.linesep is incorrect.  The log file is
> opened in text mode, so "\n" will be converted to the appropriate
> byte representation for the given platform.  In other words,
> 
>          logerr.write(str(stuff)+os.linesep)
> should be
>          logerr.write(str(stuff)+"\n")
> 
> I also did some things to clean up the code, like getting
> rid of unneeded module imports (like string) and replacing

> I noticed none of these were accepted.

Not really, I just didn't get around to reading the patch. I did some of
these in CVS.

> What should I do to make these sorts of changes more acceptable?

They were not bad, it seems, we just don't have time to deal with all of
them... I have a huge queue waiting for me :(

We do appreciate your efforts.

> After all, the point of a good unit test suite is to make it easy for
> people to refactor and clean up existing code.  All the tests passed
> identically before and after my changes.

Yes, but behaviour was changed I think? Possibly in a better way, but
changing behaviour takes more mental work on our part.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Tue Apr  1 20:51:22 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 1 Apr 2003 22:51:22 -0500
Subject: [Twisted-Python] twisted.internet.interfaces.IReactorTime.callAt
Message-ID: <5ECE2030-64BE-11D7-8315-000A95686CD8@redivi.com>

I think it's useful to have a callAt function in the reactor.  Itamar 
mentioned that one of the design goals of the reactor is to have a 
minimal interface.  However, IMHO it should be added to IReactor due to 
the utility (log rotation, scheduled events, etc.) of such a 
convenience function and the fact it takes a newbie a lot longer to 
find something hidden away in a utils package (for example, today, 
neither Itamar nor I knew that there was a function in t.i.utils to 
start a process and return a Deferred with the stdout of that 
process!).  The implementation is very simple, it looks like this:

     def callAt(self, when, f, *args, **kw):
         """See twisted.internet.interfaces.IReactorTime.callAt.
         """
         return self.callLater(max(0.0, when - time()), f, *args, **kw)

     def callAt(self, when, callable, *args, **kw):
         """Call a function at a specified float time

         @type when:  C{float}
         @param when: The approximate unix time (seconds since the 
Epoch) to
                      call the callable.  It will be called on or after 
the specified time;
                      immediately if the current or a past time is given.

         @param callable: the callable object to call later.

         @param args: the arguments to call it with.

         @param kw: they keyword arguments to call it with.

         @returns: An L{IDelayedCall} object that can be used to cancel
                   the scheduled call, by calling its C{cancel()} method.
                   It also may be rescheduled by calling its C{delay()}
                   or C{reset()} methods.
         """

-bob




From itamar at itamarst.org  Tue Apr  1 20:50:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 1 Apr 2003 22:50:29 -0500
Subject: [Twisted-Python] A general note on logging
Message-ID: <20030401225029.5b32d55e.itamar@itamarst.org>

twisted.python.log is old and crufty. If anyone feels like updating it
(requirements include different channels that can be logged to different
files), feel free. If you do discuss it on the list first, to make sure
everyone has voiced their requirements.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Tue Apr  1 23:25:20 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 01:25:20 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030401224523.38e0a2f2.twisted@itamarst.org>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com> <9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com> <20030401224523.38e0a2f2.twisted@itamarst.org>
Message-ID: <20030402062520.GC14038@radii>

On Tue, Apr 01, 2003 at 10:45:23PM -0500, Itamar Shtull-Trauring wrote:
> On Tue, 1 Apr 2003 16:48:01 -0500
> Andrew Dalke <dalke at dalkescientific.com> wrote:
> 
> > to actually use the log.  It isn't obvious anywhere that that
> > import will make a system level change.
> >    - what if I've changed warnings.showwarning in my own
> >         code (or in some other 3rd party package).  Where's the
> >         documentation which states that there will be a problem?
> > 
> >    - It's pervasive.  That is, if I import twisted.lore (perhaps
> >        because I want it to use it for my own documentation
> >        system) it's still the case that warnings.showwarning
> >        gets replaced.  There should be no reason for that.
> 
> I agree that this is bad. If you complain enough maybe glyph will listen
> to reason.

Well, I was the one who made this change, and there's no particular
philosophical reasons behind it. I agree moving it to twistd would be
good.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From smaniero at sfera.net  Wed Apr  2 01:28:08 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed,  2 Apr 2003 10:28:08 +0200
Subject: [Twisted-Python] FTP Server
Message-ID: <1049272088.3e8a9f186d8df@sferamail.sfera.net>

I'm a new developer in twisted. I want test twisted writing an ftp server.

Can anyone indicate an example or doc for developing ftp server? In twisted
distribution I didn't find it.

Thanks




From fog at initd.org  Wed Apr  2 01:53:30 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 02 Apr 2003 10:53:30 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <1049273610.974.32.camel@momo.initd.org>

Il mer, 2003-04-02 alle 10:28, Stefano Maniero ha scritto:
> I'm a new developer in twisted. I want test twisted writing an ftp server.
> 
> Can anyone indicate an example or doc for developing ftp server? In twisted
> distribution I didn't find it.

mm.. because twisted already has an ftp server? see module

	twisted.coil.plugins.ftp

(just guessing from the API, never used coil myself.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                           Don't dream it. Be it. -- Dr. Frank'n'further
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030402/7a5e3ba7/attachment.sig>

From smaniero at sfera.net  Wed Apr  2 02:24:54 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed,  2 Apr 2003 11:24:54 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049273610.974.32.camel@momo.initd.org>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <1049273610.974.32.camel@momo.initd.org>
Message-ID: <1049275494.3e8aac66ef923@sferamail.sfera.net>

Yes, there is an ftp server.

In API docs:

....
Package twisted :: Package protocols :: Module ftp :: Class FTP

An FTP server.
....

...
twisted.tap.ftp

I am the support module for making a ftp server with mktap.
....

....
twisted.coil.plugins.ftp

Coil plugin for FTP server.
...


but I can't find any examples, or how-to, or implementation reference.


Quoting Federico Di Gregorio <fog at initd.org>:

> Il mer, 2003-04-02 alle 10:28, Stefano Maniero ha scritto:
> > I'm a new developer in twisted. I want test twisted writing an ftp server.
> > 
> > Can anyone indicate an example or doc for developing ftp server? In
> twisted
> > distribution I didn't find it.
> 
> mm.. because twisted already has an ftp server? see module
> 
> 	twisted.coil.plugins.ftp
> 
> (just guessing from the API, never used coil myself.)
> 
> -- 
> Federico Di Gregorio
> Debian GNU/Linux Developer                                fog at debian.org
> INIT.D Developer                                           fog at initd.org
>                            Don't dream it. Be it. -- Dr. Frank'n'further
> 







From theller at python.net  Wed Apr  2 03:15:35 2003
From: theller at python.net (Thomas Heller)
Date: 02 Apr 2003 12:15:35 +0200
Subject: [Twisted-Python] Re: win32guireactor
References: <vfzmlwyn.fsf@python.net>
Message-ID: <r88lmchk.fsf@python.net>

Thomas Heller <theller at python.net> writes:

> Here's my win32guireactor code, which at least for me, works better
> than win32eventreactor in my application.

Just in case this code is used by anyone, I just fixed two bugs.

Thomas

>     def __wm_timerevent(self, hwnd, msg, wParam, lParam):
>         # This method is called if the message window receives
>         # timer events
>         user32.KillTimer(hwnd, wParam)
>         tple = self.timers[wParam]
        del self.timers[wParam]
>         tple.func(*tple.args, **tple.kw)
> 


>     def _cancelCallLater(self, tple):
>         user32.KillTimer(self.__hwnd, tple._timerid)
>         del self.timers[tple._timerid]
        try:
            del self.timers[tple._timerid]
        except KeyError:
            pass

> 




From itamar at itamarst.org  Wed Apr  2 08:12:03 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 10:12:03 -0500
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <20030402101203.33888dc2.itamar@itamarst.org>

On Wed,  2 Apr 2003 10:28:08 +0200
Stefano Maniero <smaniero at sfera.net> wrote:

> I'm a new developer in twisted. I want test twisted writing an ftp
> server.
> 
> Can anyone indicate an example or doc for developing ftp server? In
> twisted distribution I didn't find it.

twisted.protocols.ftp has code for a FTP server that serves files from
the filesystem. It's not pluggable, and needs a lot of work, but it
could be used as a basis for a cleaned up refactored server.

Or, you could skip FTP (it's a really sucky protocol) and build a WebDAV
server instead.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 08:13:03 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 10:13:03 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030402062520.GC14038@radii>
References: <96CF4C0E-6439-11D7-8A58-000393C92466@dalkescientific.com>
	<9C86C66E-648B-11D7-8A58-000393C92466@dalkescientific.com>
	<20030401224523.38e0a2f2.twisted@itamarst.org>
	<20030402062520.GC14038@radii>
Message-ID: <20030402101303.5c719a30.itamar@itamarst.org>

On Wed, 2 Apr 2003 01:25:20 -0500
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> Well, I was the one who made this change, and there's no particular
> philosophical reasons behind it. I agree moving it to twistd would be
> good.

Why don't you do that then?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From acapnotic at twistedmatrix.com  Wed Apr  2 10:25:04 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 02 Apr 2003 09:25:04 -0800
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
Message-ID: <1049304237.972.61.camel@troglodyte.funhouse>

On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> class IPullProducer(IProducer):
>     """A pull producer, also known as a non-streaming producer, is
>     expected to produce data each time resumeProducing() is called.
>     """
>     def resumeProducing(self):
>         """Resume producing data.
>         This tells a producer to re-add itself to the main loop and produce
>         more data for its consumer."""

Usage and behaviour of a PullProducer isn't clear to me.  Does
PullProducer.resumeProducing mean that it should call consumer.write
exactly once?  Or is the amount of times consumer.write will be called
undefined or context-dependent but merely guaranteed to be finite?

A PushProducer delivers an undefined quantity of data to consumer.write
some unknown time after resumeProducing is called.  A PullProducer
delivers an undefined quantity of data to consumer.write some unknown
time after resumeProducing is called.  So why two interfaces?  Why don't
pulling consumers just use pauseProducing upon getting a .write?[1] 
Then we can ditch one of the interfaces and the 'streaming' argument to
registerProducer and the conditionals that go with it...

If it is a different interface, can we give the method a different
name?  I think it strange that you call "resume" on these when producing
has never been "paused".  And that "resume" in this case does not signal
a return to an ongoing process from which it has been interrupted, but
is a single  request for a discrete amount of data.  A name beginning
with "get" or "next" seems more fitting.

 - Kevin


[1] "...just use pauseProducing upon getting a write()?": One answer to
that could be "it's more message traffic"; every write in a
pull-producer implemented on PushProducer this way would involve
p.resume();c.write();p.pause() as opposed to just p.resume();c.write(). 
But that alone doesn't convince me the interface confusion is worth it.

-- 
The moon is new, 0.3% illuminated, 0.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030402/0250a1e3/attachment.sig>

From itamar at itamarst.org  Wed Apr  2 10:56:00 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 12:56:00 -0500
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <1049304237.972.61.camel@troglodyte.funhouse>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com>
	<1049304237.972.61.camel@troglodyte.funhouse>
Message-ID: <20030402125600.7c688aeb.itamar@itamarst.org>

On 02 Apr 2003 09:25:04 -0800
Kevin Turner <acapnotic at twistedmatrix.com> wrote:

> On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> > class IPullProducer(IProducer):
> >     """A pull producer, also known as a non-streaming producer, is
> >     expected to produce data each time resumeProducing() is called.
> >     """
> >     def resumeProducing(self):
> >         """Resume producing data.
> >         This tells a producer to re-add itself to the main loop and
> >         produce more data for its consumer."""
> 
> Usage and behaviour of a PullProducer isn't clear to me.  Does
> PullProducer.resumeProducing mean that it should call consumer.write
> exactly once?

Yes.

> If it is a different interface, can we give the method a different
> name?  I think it strange that you call "resume" on these when
> producing has never been "paused".  And that "resume" in this case
> does not signal a return to an ongoing process from which it has been
> interrupted, but is a single  request for a discrete amount of data. 
> A name beginning with "get" or "next" seems more fitting.

Yes, but it's there for historical reasons...

Idon't think the two interfaces should be merged - they are different in
intent and usage.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Wed Apr  2 13:17:53 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 2 Apr 2003 20:17:53 +0000
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <20030402125600.7c688aeb.itamar@itamarst.org>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org>
Message-ID: <20030402201753.GA84483@doublegemini.com>

On Wed, Apr 02, 2003 at 12:56:00PM -0500, Itamar Shtull-Trauring wrote:
| > On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
| > > class IPullProducer(IProducer):
| > >     """A pull producer, also known as a non-streaming producer, is
| > >     expected to produce data each time resumeProducing() is called.
| > >     """
| > >     def resumeProducing(self):
| > >         """Resume producing data.
| > >         This tells a producer to re-add itself to the main loop and
| > >         produce more data for its consumer."""
| > 
| > Usage and behaviour of a PullProducer isn't clear to me.  Does
| > PullProducer.resumeProducing mean that it should call consumer.write
| > exactly once?
| 
| Yes.

This is also similar to the 'flow' module by Bob Ippolito (etrepum)
and somewhat distantly related to my flow module; only that mine is
more 'push' like.  Both are attempts at bringing an async 
producer into play, where the producer could at any time block.
| 
| > If it is a different interface, can we give the method a different
| > name?  I think it strange that you call "resume" on these when
| > producing has never been "paused".  And that "resume" in this case
| > does not signal a return to an ongoing process from which it has been
| > interrupted, but is a single  request for a discrete amount of data. 
| > A name beginning with "get" or "next" seems more fitting.
| 
| Yes, but it's there for historical reasons...
| Idon't think the two interfaces should be merged - they are different in
| intent and usage.

Nods.




From moshez at twistedmatrix.org  Wed Apr  2 00:13:41 2003
From: moshez at twistedmatrix.org (Moshe Zadka)
Date: Wed, 02 Apr 2003 01:13:41 -0600
Subject: [Twisted-Python] non-blocking .read
Message-ID: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>

It is often convenient in protocol implementations to just .read() as
much as you want to. However, it is impossible in Twisted, becase .read()
is a blocking operation. Happily, we can make blocking operations seem
non-blocking with the use of deferred. The following protocol does just
that:

class ReadProtocol(protocol.Protocol)

    toRead = 0
    until = ''

    def rawDataReceived(self, data):
        pass

    def dataReceived(self, data):
        while data:
            if self.toRead:
                read, data = data[:self.toRead], data[self.toRead:]
                self.buffer.write(read)
                self.toRead -= len(read)
                if self.toRead == 0:
                    self.deferred.callback(self.buffer.getvalue())
                    self.buffer.close()
            elif self.until:
                idx = data.find(self.until)
                if idx == -1:
                    self.buffer.write(data)
                    data = ''
                else:
                    read, data = data[:idx], data[idx:]
                    self.until = ''
                    self.buffer.write(read):
                    self.deferred.callback(self.buffer.getvalue())
                    self.buffer.close()
            else:
                self.rawDataReceived(data)
                data = ''

    def readUntil(self, c):
        self.toRead = 0
        self.until = c
        self.buffer = StringIO()
        self.deferred = defer.Deferred()
        return self.deferred

    def readLength(self, len):
        self.toRead = len
        self.until = ''
        self.buffer = StringIO()
        self.deferred = defer.Deferred()
        return self.deferred

# How to use, e.g., to implement netstrings:

class NetstringProtocol(ReadProtocol):

    def connectionMade(self):
        self.readString()

    def readString(self):
        self.readUntil(':').callback(
        lambda s: self.readLength(int(s)).callback(
        self.stringReceived).callback(
        lambda _: self.readLength(1).callback(
        lambda x: x==',' or self.transport.loseConnection()).callback(
        lambda _: self.readString))

    def stringReceived(self, s):
        pass




From glyph at twistedmatrix.com  Wed Apr  2 13:19:24 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Apr 2003 15:19:24 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <20030402062520.GC14038@radii>
Message-ID: <656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Wednesday, April 2, 2003, at 01:25 AM, Christopher Armstrong wrote:

[... import does bad stuff ...]

> Well, I was the one who made this change, and there's no particular
> philosophical reasons behind it. I agree moving it to twistd would be
> good.

Shouldn't this just be in startLogging?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+i0XQvVGR4uSOE2wRAu3KAKCOsnaYD58ywJT61CbsHxSi3N+qXACeI2Yn
BE4vqsLYA3ZSauUPkNfQHzs=
=74r3
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Wed Apr  2 13:28:48 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 15:28:48 -0500
Subject: [Twisted-Python] Re: supressess warnings
In-Reply-To: <656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>
References: <20030402062520.GC14038@radii>
	<656DD8D4-6548-11D7-8F67-000393C9700E@twistedmatrix.com>
Message-ID: <20030402152848.0894dfc0.itamar@itamarst.org>

On Wed, 2 Apr 2003 15:19:24 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> Shouldn't this just be in startLogging?

I'm pretty sure startLogging is called at some point on import? Or how
is the default logging set up?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 13:34:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 15:34:15 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
Message-ID: <20030402153415.567454c2.itamar@itamarst.org>

On Wed, 02 Apr 2003 01:13:41 -0600
Moshe Zadka <moshez at twistedmatrix.org> wrote:

> It is often convenient in protocol implementations to just .read() as
> much as you want to. However, it is impossible in Twisted, becase
> .read() is a blocking operation. Happily, we can make blocking
> operations seem non-blocking with the use of deferred. The following
> protocol does just that:

I suspect it will be waaaaaaaay slower than the equivalent netstring
implementation.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Wed Apr  2 14:22:21 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 2 Apr 2003 16:22:21 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
Message-ID: <30F32056-6551-11D7-8315-000A95686CD8@redivi.com>

Just to bring generators back up..  Note that of course, the wrappers 
for read and the actual flow.BufferedProtocol class don't exist.. but 
their implementation is possible with the given syntax.
I'm imagining that a "flow" version of Int32Receiver could be coded 
like this:

class NetstringProtocol(flow.BufferedProtocol):
	def connectionMade(self):
		pass

	def handleConnection(self):
		self.connectionMade()
		reason = None

		# the string receive loop
		while 1:
			# read int32, size of int32 is 4
			result = self.read(4)
			yield result
			if result.isFailure():
				reason = result.get()
				break
			strlen, = struct.unpack('!I', result.get())
			if strlen <= 0:
				endFailure = Failure(ValueError('Zero length strings are not 
valid'))
				break
			# read string
			result = self.read(strlen)
			yield result
			if result.isFailure():
				reason = result.get()
				break
			self.stringReceived(result.get())

		# exception caused connection to drop, or connection dropped on its 
own
		self.connectionLost(reason)

	def connectionLost(self, reason):
		pass	




From radix at twistedmatrix.com  Wed Apr  2 17:08:46 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 19:08:46 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <20030402153415.567454c2.itamar@itamarst.org>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com> <20030402153415.567454c2.itamar@itamarst.org>
Message-ID: <20030403000846.GD14038@radii>

On Wed, Apr 02, 2003 at 03:34:15PM -0500, Itamar Shtull-Trauring wrote:
> On Wed, 02 Apr 2003 01:13:41 -0600
> Moshe Zadka <moshez at twistedmatrix.org> wrote:
> 
> > It is often convenient in protocol implementations to just .read() as
> > much as you want to. However, it is impossible in Twisted, becase
> > .read() is a blocking operation. Happily, we can make blocking
> > operations seem non-blocking with the use of deferred. The following
> > protocol does just that:
> 
> I suspect it will be waaaaaaaay slower than the equivalent netstring
> implementation.

And way more DEMONIC.

You're a sick man, moshez.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Apr  2 17:14:16 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Apr 2003 19:14:16 -0500
Subject: [Twisted-Python] PullProducer appreciation, lack thereof.
In-Reply-To: <20030402201753.GA84483@doublegemini.com>
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org> <20030402201753.GA84483@doublegemini.com>
Message-ID: <20030403001416.GE14038@radii>

On Wed, Apr 02, 2003 at 08:17:53PM +0000, Clark C. Evans wrote:
> On Wed, Apr 02, 2003 at 12:56:00PM -0500, Itamar Shtull-Trauring wrote:
> | > On Mon, 2003-03-24 at 14:29, radix CVS wrote: 
> | > > class IPullProducer(IProducer):
> | > >     """A pull producer, also known as a non-streaming producer, is
> | > >     expected to produce data each time resumeProducing() is called.
> | > >     """
> | > >     def resumeProducing(self):
> | > >         """Resume producing data.
> | > >         This tells a producer to re-add itself to the main loop and
> | > >         produce more data for its consumer."""
> | > 
> | > Usage and behaviour of a PullProducer isn't clear to me.  Does
> | > PullProducer.resumeProducing mean that it should call consumer.write
> | > exactly once?
> | 
> | Yes.
> 
> This is also similar to the 'flow' module by Bob Ippolito (etrepum)
> and somewhat distantly related to my flow module; only that mine is
> more 'push' like.  Both are attempts at bringing an async 
> producer into play, where the producer could at any time block.

block? No.. Producers and Consumers have nothing to do with blocking..

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From dalke at dalkescientific.com  Wed Apr  2 16:48:46 2003
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Wed, 2 Apr 2003 18:48:46 -0500
Subject: [Twisted-Python] (no subject)
Message-ID: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>

Itamar Shtull-Trauring:
 > I'm pretty sure startLogging is called at some point on import? Or how
 > is the default logging set up?

The twiddling of warnings is done during import, and the
logfile is set to NullFile.  The code looks like this (including
the indentation level)

import warnings
warnings.showwarning = showwarning
   ....
# Prevent logfile from being erased on reload.  This only works in 
cpython.
try:
     logfile
except NameError:
     logfile = NullFile()
     logerr = sys.stderr


The patch I submitted changes matters so that twiddling
doesn't occur until startLogging is called.

Also, Itamar said:
 > twisted.python.log is old and crufty. If anyone feels like updating it
 > (requirements include different channels that can be logged to 
different
 > files), feel free. If you do discuss it on the list first, to make 
sure
 > everyone has voiced their requirements.

Python 2.3 has a generalized logging framework.
   http://python.org/dev/doc/devel/lib/module-logging.html
] New in version 2.3.  This module defines functions and classes
] which implement a flexible error logging system for applications.


					Andrew
					dalke at dalkescientific.com




From itamar at itamarst.org  Wed Apr  2 19:47:55 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 21:47:55 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>
References: <A52A9C0A-6565-11D7-8A58-000393C92466@dalkescientific.com>
Message-ID: <20030402214755.1a69fc91.itamar@itamarst.org>

On Wed, 2 Apr 2003 18:48:46 -0500
Andrew Dalke <dalke at dalkescientific.com> wrote:

> The patch I submitted changes matters so that twiddling
> doesn't occur until startLogging is called.

OK - we'll either do that or put this in twistd.

> Python 2.3 has a generalized logging framework.
>    http://python.org/dev/doc/devel/lib/module-logging.html
> ] New in version 2.3.  This module defines functions and classes
> ] which implement a flexible error logging system for applications.

We are probably not going to use it - those of us who looked at it
didn't seem to like it.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr  2 19:48:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 2 Apr 2003 21:48:44 -0500
Subject: [Twisted-Python] non-blocking .read
In-Reply-To: <20030403000846.GD14038@radii>
References: <E190cRJ-0003PJ-00@pyramid.twistedmatrix.com>
	<20030402153415.567454c2.itamar@itamarst.org>
	<20030403000846.GD14038@radii>
Message-ID: <20030402214844.1fefe2ec.itamar@itamarst.org>

On Wed, 2 Apr 2003 19:08:46 -0500
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> And way more DEMONIC.
> 
> You're a sick man, moshez.

You say that like it's a bad thing.



From david at acz.org  Wed Apr  2 20:41:12 2003
From: david at acz.org (David Phillips)
Date: Wed, 2 Apr 2003 21:41:12 -0600
Subject: [Twisted-Python] FTP Server
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net>
Message-ID: <001b01c2f992$df756770$0201a8c0@brinstar>

Stefano Maniero writes:
> Can anyone indicate an example or doc for developing ftp server?

This reference manual for FTP might be useful:

http://cr.yp.to/ftp.html

-- 
David Phillips <david at acz.org>
http://david.acz.org/




From david at acz.org  Wed Apr  2 20:51:51 2003
From: david at acz.org (David Phillips)
Date: Wed, 2 Apr 2003 21:51:51 -0600
Subject: [Twisted-Python] Connecting using SOCKS
Message-ID: <005c01c2f994$5c3be3a0$0201a8c0@brinstar>

I'm new to Twisted, so please forgive me if this is obvious.  I read the
howtos and looked at some of the example programs, but didn't find anything
relevant.

I would like to use a protocol with SOCKS.  For example, ircLogBot.py calls
reactor.connectTCP().  How would I make it connect through SOCKS?  If
Twisted does not currently have this functionality, how would I go about
implemented it the correct way?

--
David Phillips <david at acz.org>
http://david.acz.org/




From bob at redivi.com  Wed Apr  2 20:57:26 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 2 Apr 2003 22:57:26 -0500
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20030402214755.1a69fc91.itamar@itamarst.org>
Message-ID: <61C4350C-6588-11D7-96D9-000A95686CD8@redivi.com>

On Wednesday, Apr 2, 2003, at 21:47 America/New_York, Itamar 
Shtull-Trauring wrote:

> On Wed, 2 Apr 2003 18:48:46 -0500
> Andrew Dalke <dalke at dalkescientific.com> wrote:
>
>> The patch I submitted changes matters so that twiddling
>> doesn't occur until startLogging is called.
>
> OK - we'll either do that or put this in twistd.
>
>> Python 2.3 has a generalized logging framework.
>>    http://python.org/dev/doc/devel/lib/module-logging.html
>> ] New in version 2.3.  This module defines functions and classes
>> ] which implement a flexible error logging system for applications.
>
> We are probably not going to use it - those of us who looked at it
> didn't seem to like it.

If only it had zope3 style XML configuration files with namespaces!

-bob




From jasper at peak.org  Thu Apr  3 01:54:25 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 00:54:25 -0800 (PST)
Subject: [Twisted-Python] Reactor questions
Message-ID: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I notice from expirmentation that reactor.stop() seems to sever any ongoing
network connections.  Is there a way to temporarily stop then restart the
reactor without losing a network connection?  Or would I need to write my
own reactor?

I'm writing unit tests, where I want to script a sequence of events.
Currently I have a (pyui) loop calling twisted.internet.main.iterate(), and
have my code accept a startup flag telling it whether to stop for procederal
input after remote PB calls.

This is a bit awkward, and so I'm hoping someone has dealt with this before
in twisted.

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+i/bG8EpjZ7/X9bIRAg3GAJ90/aobSqyYGy+NgKbDyZYbS/+TNQCgs6sy
yOxkTjygUV5T5jUiBCNzBHw=
=B+J1
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Apr  3 03:35:36 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 02:35:36 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0303241427460.7028-100000@localhost.localdomain>
Message-ID: <Pine.LNX.4.44.0304030157560.6359-100000@localhost.localdomain>

On Mon, 24 Mar 2003, Jasper Phillips wrote:

[talking about twisted.spread.jelly._Unjellier]

> > This scheme will change on Tuesday. The "reference" tags will go away and be
> > replaced by an implicit marker that is notionally inserted every time we
> > start jellying a new mutable object. The "dereference" tags will then point
> > to these implicit markers. This should improve performance quite a bit, and
> > will pave the way to a combined jelly+banana extension module that should
> > give an enormous speedup (doing everything in C).
> 
> Sounds good!  No point in my suggesting a fix then. ;-)  Will a new version
> of twisted be released along with these changes, or would I have to go
> through CVS?

I notice that there is a "newjelly.py" in twisted.spread, which appears to
have changed the code relavent to the error I was getting.  However, I
couldn't easily tell from the commit email whether this was finished, or how
one would use it...

Am I correct in guessing newjelly.py is intended to be renamed to jelly.py,
but isn't ready yet?

-Jasper


PS  I've got a kludge to the 1.03 jelly.py and flavors.py that avoids the
"storing a _Derefence into a __dict__" error I was getting.  If anyone's
interested I can post it, although there would be little point if newjelly.py
will be ready soon.





From lafou at wanadoo.fr  Thu Apr  3 02:01:31 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 11:01:31 +0200
Subject: [Twisted-Python] Re: wxPython and Twisted event loops
References: <200302210248.04290.uwe@oss4u.com> <20030222032838.GB7817@frobozz.local>
Message-ID: <b6guaq$496$1@main.gmane.org>

 
> Is there any reason why you aren't using the twisted.internet.wxsupport
> module?
> 
> -Andrew.

Yes, I have tested it also, and needed the activeState solution. Some 
dialogs froze when accessing to databases for exemple (or connecting to a 
server via PB).

the "dirty" solution solve the problem 






From lafou at wanadoo.fr  Thu Apr  3 04:02:08 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 13:02:08 +0200
Subject: [Twisted-Python] Re: PullProducer appreciation, lack thereof.
References: <E18xaRr-0000GW-00@pyramid.twistedmatrix.com> <1049304237.972.61.camel@troglodyte.funhouse> <20030402125600.7c688aeb.itamar@itamarst.org> <20030402201753.GA84483@doublegemini.com>
Message-ID: <b6h4e7$t8i$1@main.gmane.org>

 
> This is also similar to the 'flow' module by Bob Ippolito (etrepum)
> and somewhat distantly related to my flow module; only that mine is
> more 'push' like.  Both are attempts at bringing an async
> producer into play, where the producer could at any time block.

Yes, It's similar to the flow module. I 've seen the source in sandbox on 
cvs, flow will be very usefull in network processes (like treatments on 
database results). Please finish it !




From glyph at twistedmatrix.com  Thu Apr  3 04:40:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 3 Apr 2003 06:40:10 -0500
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0304030157560.6359-100000@localhost.localdomain>
Message-ID: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Thursday, April 3, 2003, at 05:35 AM, Jasper Phillips wrote:

> I notice that there is a "newjelly.py" in twisted.spread, which 
> appears to
> have changed the code relavent to the error I was getting.  However, I
> couldn't easily tell from the commit email whether this was finished, 
> or how
> one would use it...

The way you use it is by replacing the imports at the top of pb.py and 
flavors.py to say "import jelly as newjelly" or "from newjelly import 
...".  Please do this and see if your problem is solved.  (better yet, 
contribute a unit test so we can make sure future changes don't break 
this either...)

> Am I correct in guessing newjelly.py is intended to be renamed to 
> jelly.py,
> but isn't ready yet?

The real issue is that this is a protocol-breaking change, and we're 
not quite prepared to deal with the fallout from that.  Brian Warner 
and I hacked on this at PyCon, and he has some ideas for backwards 
compatible version negotiation, so we may want to keep the old 
implementation around anyway.  When we figure out if and how we're 
going to do backwards compatibility, we'll make the changeover.

Also, the idea behind this implementation was to simplify things so 
that some new kinds of optimizations are possible -- the implementation 
is still really grotty (though it should be functional; I've made the 
aforementioned change to my pb.py and flavors.py and the PB unit tests 
pass), and I want to make sure that these optimizations *are* actually 
made possible, and we haven't just shuffled things around for no reason 
:-)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jB2evVGR4uSOE2wRAmCuAJ4laVyToPx8ybOt0RJP46voWjkUGQCgt99P
1sJ1romG8LZpzKXQD5Pj1Oc=
=kuA3
-----END PGP SIGNATURE-----




From jasper at peak.org  Thu Apr  3 05:34:22 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 04:34:22 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thu, 3 Apr 2003, Glyph Lefkowitz wrote:
> On Thursday, April 3, 2003, at 05:35 AM, Jasper Phillips wrote:
> 
> > I notice that there is a "newjelly.py" in twisted.spread, which appears
> > to have changed the code relavent to the error I was getting.  However, I
> > couldn't easily tell from the commit email whether this was finished, or
> > how one would use it...
> 
> The way you use it is by replacing the imports at the top of pb.py and
> flavors.py to say "import jelly as newjelly" or "from newjelly import
> ...".  Please do this and see if your problem is solved.  (better yet,
> contribute a unit test so we can make sure future changes don't break
> this either...)

I just took the shortcut of replacing jelly.py with newjelly.py, as I didn't
want to hunt down imports to change.  I got several errors, and hence
wondered if it was finished, e.g.

I get this Traceback when sending from Perspective -> Client
...
  File "...jelly.py", line 536, in _unjelly_tuple
    if preTuple.resolvedObject is None:
exceptions.AttributeError: _Tuple instance has no attribute 'resolvedObject'

After this error I get a similar error (when sending from Client ->
Perspective) where a local variable that is set on my Perspective before
calling a "remote" client method is later missing when the client calls a
"perspective" method.

I haven't looks more closely than this though.


I posted a test case demonstrating the "circular ref" bug a couple of
messages up this thread, but didn't work out a unit test.  I'll try to get
some time to do that, although I understand twisted uses something other than
pyunit so I'm not sure what's involved.

A cursory glance at newjelly.py makes me think it can't possibly have the
same problem, as "references" and "derefences" now seem to be treated in the
same manner, and presumably your unit tests cover simple references. ;-)

> > Am I correct in guessing newjelly.py is intended to be renamed to
> > jelly.py, but isn't ready yet?
> 
> The real issue is that this is a protocol-breaking change, and we're
> not quite prepared to deal with the fallout from that.  Brian Warner
> and I hacked on this at PyCon, and he has some ideas for backwards
> compatible version negotiation, so we may want to keep the old
> implementation around anyway.  When we figure out if and how we're
> going to do backwards compatibility, we'll make the changeover.

Isn't all the Jelly/Unjelly code pretty well encapsulated, so that others
needed really care how it works internally?

> Also, the idea behind this implementation was to simplify things so
> that some new kinds of optimizations are possible -- the implementation
> is still really grotty (though it should be functional; I've made the
> aforementioned change to my pb.py and flavors.py and the PB unit tests
> pass), and I want to make sure that these optimizations *are* actually
> made possible, and we haven't just shuffled things around for no reason
> :-)

For what it's worth (after a cursory glance), the reference/dereference
cleanup part of your changes looks like a clear improvement, but in
understandability and correctness. :-)

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+jCpU8EpjZ7/X9bIRAt99AKCXvM5vAXQhymxTnEfgVq/R0cPPNACeJmo1
7SVWbqQIC1d6YNsTSmrMUPk=
=g0Qk
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Thu Apr  3 08:18:52 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 10:18:52 -0500
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
Message-ID: <20030403101852.55620b15.itamar@itamarst.org>

On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
Jasper Phillips <jasper at peak.org> wrote:

> I notice from expirmentation that reactor.stop() seems to sever any
> ongoing network connections.  Is there a way to temporarily stop then
> restart the reactor without losing a network connection?  Or would I
> need to write my own reactor?
> 
> I'm writing unit tests, where I want to script a sequence of events.
> Currently I have a (pyui) loop calling
> twisted.internet.main.iterate(), and have my code accept a startup
> flag telling it whether to stop for procederal

1. Never ever use twisted.internet.main. Please. It is waaaay
deprecated.

2. You can use reactor.iterate().

3. For unittesting, reactor.crash() does exactly what you want - stop
reactor without closing anything.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jeff at bodkinpartners.com  Thu Apr  3 09:29:46 2003
From: jeff at bodkinpartners.com (Jeffrey Mathews)
Date: Thu, 3 Apr 2003 11:29:46 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
Message-ID: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>

I really enjoyed your talks at PyCon last week, as did pretty much everyone
I spoke with.  You all did a great job at creating a lot of enthusiasm for
twisted.

So I come home, and get the 1.0.3 self-installer for windows, as well as the
docs and start playing.

First thing I notice is that the introductory demo doesn't work, because
twistd.py won't run as a script (it has no "if __name__ == '__main__':
run()").  I obviously could fix that, but it seems so basic that I worry
that I'm just missing something (like I'm not supposed to be using the
scripts in /scripts directly).

Next question is what happened to support for a FieldStorage-like api in the
protocols.http.request module?  Googling shows that 0.99.3 had it, but 1.03
doesn't.  Is it coming back, or to be replaced by something else?  I'd like
it for file uploads in a very simple web-based photo album, to share some
family shots.

Thanks in advance for the help, and again, great job at PyCon.

---------------
Jeffrey Mathews
410 336 2279 cell




From cce at clarkevans.com  Thu Apr  3 09:53:54 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 3 Apr 2003 16:53:54 +0000
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403101852.55620b15.itamar@itamarst.org>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain> <20030403101852.55620b15.itamar@itamarst.org>
Message-ID: <20030403165354.GB87034@doublegemini.com>

On Thu, Apr 03, 2003 at 10:18:52AM -0500, Itamar Shtull-Trauring wrote:
| On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
| Jasper Phillips <jasper at peak.org> wrote:
| 
| > I notice from expirmentation that reactor.stop() seems to sever any
| > ongoing network connections.  Is there a way to temporarily stop then
| > restart the reactor without losing a network connection?  Or would I
| > need to write my own reactor?
| > 
| > I'm writing unit tests, where I want to script a sequence of events.
| > Currently I have a (pyui) loop calling
| > twisted.internet.main.iterate(), and have my code accept a startup
| > flag telling it whether to stop for procederal
| 
| 1. Never ever use twisted.internet.main. Please. It is waaaay
| deprecated.
| 
| 2. You can use reactor.iterate().
| 
| 3. For unittesting, reactor.crash() does exactly what you want - stop
| reactor without closing anything.

In my unit tests I often do the following.

  reactor.callLater(2, reactor.stop)

Just before the reactor starts.

Clark



From acapnotic at twistedmatrix.com  Thu Apr  3 09:52:06 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 03 Apr 2003 08:52:06 -0800
Subject: [Twisted-Python] Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <1049388724.975.100.camel@troglodyte.funhouse>

On Thu, 2003-04-03 at 08:29, Jeffrey Mathews wrote:
> I worry that I'm just missing something (like I'm not supposed to be
> using the scripts in /scripts directly).

You're not supposed to be using the scripts in site-packages/*/scripts
directly.  I'm told the Windows installer puts the runnable scripts in
something like C:\Python22\scripts\twistd.py

Happy twisting,

 - Kevin

(Hmm, twice in one week makes this a FAQ.  Added this to doc/howto/faq
in CVS.)

-- 
The moon is new, 2.2% illuminated, 1.4 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030403/9b1fc8a8/attachment.sig>

From itamar at itamarst.org  Thu Apr  3 09:52:53 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 11:52:53 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <20030403115253.48e29638.itamar@itamarst.org>

On Thu, 3 Apr 2003 11:29:46 -0500
"Jeffrey Mathews" <jeff at bodkinpartners.com> wrote:

> Next question is what happened to support for a FieldStorage-like api
> in the protocols.http.request module?  Googling shows that 0.99.3 had
> it, but 1.03 doesn't.  Is it coming back, or to be replaced by
> something else?  I'd like it for file uploads in a very simple
> web-based photo album, to share some family shots.

It was in, but had to be taken out since it broke other code. Eventually
it will return - meanwhile you can still access the same data, just less
efficiently using existing APIs.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From peter at engcorp.com  Thu Apr  3 09:56:22 2003
From: peter at engcorp.com (Peter Hansen)
Date: Thu, 03 Apr 2003 11:56:22 -0500
Subject: [Twisted-Python] Congrats / a little newbie confusion
References: <AGEBLLLECPANMIBABBDNKEBJCMAA.jeff@bodkinpartners.com>
Message-ID: <3E8C67B6.C02882AC@engcorp.com>

Jeffrey Mathews wrote:
> 
> First thing I notice is that the introductory demo doesn't work, because
> twistd.py won't run as a script (it has no "if __name__ == '__main__':
> run()").  I obviously could fix that, but it seems so basic that I worry
> that I'm just missing something (like I'm not supposed to be using the
> scripts in /scripts directly).

The files in twisted/scripts are not the ones you want to run... you need
to run the ones that were installed under c:\python22\scripts, or wherever
they go on your own machine.  Those basically do an imported from the 
twisted.scripts.xxx modules and call xxx.run(), so it amounts to almost
the same thing.

> Next question is what happened to support for a FieldStorage-like api in the
> protocols.http.request module?  Googling shows that 0.99.3 had it, but 1.03
> doesn't.  Is it coming back, or to be replaced by something else?  I'd like
> it for file uploads in a very simple web-based photo album, to share some
> family shots.

FieldStorage, as in the cgi module?  What don't you like about the request.args
field that is nicely parsed for you from the HTTP GET or POST request?  (Note
that the fields all come in as lists, so if you expect only one instance of
any given field you need to grab request.args['fieldname'][0] to get the
actual string value.)

> Thanks in advance for the help, and again, great job at PyCon.

I'm a rookie at Twisted, but I've just "been there" on both issues... good
fodder for a tutorial/FAQ I suppose... or a wiki.

-Peter



From itamar at itamarst.org  Thu Apr  3 09:53:59 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 11:53:59 -0500
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403165354.GB87034@doublegemini.com>
References: <Pine.LNX.4.44.0304030038510.3009-100000@localhost.localdomain>
	<20030403101852.55620b15.itamar@itamarst.org>
	<20030403165354.GB87034@doublegemini.com>
Message-ID: <20030403115359.47b161a2.itamar@itamarst.org>

On Thu, 3 Apr 2003 16:53:54 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> In my unit tests I often do the following.
> 
>   reactor.callLater(2, reactor.stop)
> 
> Just before the reactor starts.

reactor.crash is better for tests since you can call reactor.run again
afterwards.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Thu Apr  3 10:38:46 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 3 Apr 2003 12:38:46 -0500
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>
References: <06B18C99-65C9-11D7-A7BC-000393C9700E@twistedmatrix.com> <Pine.LNX.4.44.0304030400480.11596-100000@localhost.localdomain>
Message-ID: <20030403173846.GA31794@meson.dyndns.org>

On Thu, Apr 03, 2003 at 04:34:22AM -0800, Jasper Phillips wrote:
> [snip]
> 
> I posted a test case demonstrating the "circular ref" bug a couple of
> messages up this thread, but didn't work out a unit test.  I'll try to get
> some time to do that, although I understand twisted uses something other than
> pyunit so I'm not sure what's involved.

  We use twisted.trial, which presents an interface that's almost identical
to pyunit, so if you're familiar with one, working with the other should be
fairly easy.

  That said, I've added a TestCase to test_jelly.py that seems to tickle
this bug. :)  It's simplified even more from your example, but I think it
still catches the essense of the problem.

  Jp

-- 
1.79 x 10^24 furlongs per picofortnight - It's not just a good idea, 
			It's the law!
-- 
 up 14 days, 14:00, 4 users, load average: 0.04, 0.03, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030403/d12856d2/attachment.sig>

From itamar at itamarst.org  Thu Apr  3 11:21:57 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 3 Apr 2003 13:21:57 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] Test circular references
In-Reply-To: <E1918ar-0001fa-00@pyramid.twistedmatrix.com>
References: <E1918ar-0001fa-00@pyramid.twistedmatrix.com>
Message-ID: <20030403132157.1b3f7505.itamar@itamarst.org>

On Thu, 03 Apr 2003 11:33:41 -0600
exarkun CVS <exarkun at twistedmatrix.com> wrote:

> +testCases = [JellyTestCase, CircularReferenceTestCase]

This is not necessary - testCases hasn't been used for a long time.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From alan at norfolkgraphics.com  Thu Apr  3 15:16:02 2003
From: alan at norfolkgraphics.com (Alan McIntyre)
Date: Thu, 03 Apr 2003 17:16:02 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
Message-ID: <3E8CB2A2.5010908@norfolkgraphics.com>

Hi all,

First of all I wanted to say thanks to all the Twisted guys that gave 
talks at PyCon 2003.  I was going to use Zope for an upcoming project, 
but the demos you all gave made me think that Twisted might be a better 
fit for what we're doing.  So I had to have a look once I got home. :)

So far it's looking good; getting Twisted installed and a web instance 
running was a snap on both Windows and Debian.  I had zero knowledge of 
Twisted prior to PyCon, but I was able to start from scratch on Saturday 
and put together a simple web interface to some of our existing Python 
apps by Sunday afternoon.

I did notice something that I'm curious about: I've been running two 
Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
now, and the Windows instance has accumulated almost an hour of CPU time 
wherease the Debian instance has only used 2 seconds.  What's the Win32 
instance doing while it's idle? (It's not a big deal, I'm just curious)

Thanks!
Alan McIntyre





From radix at twistedmatrix.com  Thu Apr  3 16:16:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 3 Apr 2003 18:16:06 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <3E8CB2A2.5010908@norfolkgraphics.com>
References: <3E8CB2A2.5010908@norfolkgraphics.com>
Message-ID: <20030403231606.GC24393@radii>

On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> I did notice something that I'm curious about: I've been running two 
> Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
> and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
> now, and the Windows instance has accumulated almost an hour of CPU time 
> wherease the Debian instance has only used 2 seconds.  What's the Win32 
> instance doing while it's idle? (It's not a big deal, I'm just curious)

My first guess would be that the system calls involved (e.g., select)
are more expensive than on linux, but that's just a wild guess. I
doubt profiling would be much help, but maybe you (or someone) could
write a simple test that just recorded the time it takes to run an
immediately-returning select() a few thousand times.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Thu Apr  3 16:21:03 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 3 Apr 2003 18:21:03 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
References: <3E8CB2A2.5010908@norfolkgraphics.com> <20030403231606.GC24393@radii>
Message-ID: <20030403232103.GD24393@radii>

On Thu, Apr 03, 2003 at 06:16:06PM -0500, Christopher Armstrong wrote:
> On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> > I did notice something that I'm curious about: I've been running two 
> > Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2) 
> > and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days 
> > now, and the Windows instance has accumulated almost an hour of CPU time 
> > wherease the Debian instance has only used 2 seconds.  What's the Win32 
> > instance doing while it's idle? (It's not a big deal, I'm just curious)
> 
> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

If this doesn't show any useful information, I also realized that
Twisted has some code to handle Windows' wacky select() semantics;
maybe there's something munching a little bit of CPU in those special
cases.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From bob at redivi.com  Thu Apr  3 16:31:32 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 3 Apr 2003 18:31:32 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
Message-ID: <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>

On Thursday, Apr 3, 2003, at 18:16 America/New_York, Christopher 
Armstrong wrote:

> On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
>> I did notice something that I'm curious about: I've been running two
>> Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 
>> 2.2.2)
>> and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days
>> now, and the Windows instance has accumulated almost an hour of CPU 
>> time
>> wherease the Debian instance has only used 2 seconds.  What's the 
>> Win32
>> instance doing while it's idle? (It's not a big deal, I'm just 
>> curious)
>
> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

IIRC, the Twisted select reactor has a "background process" that gets 
triggered once a second or so when running on windows just to break the 
select() call (I don't believe it actually does anything).  I believe 
this is because processes in windows don't respond to signals (like 
ctrl-c, for example) during a select() call, so this 
convenience/workaround was put into the codebase.

In any case, an hour of CPU time over a few days is pretty negligible, 
but worthy of note for comparison's sake I suppose.. On a more heavily 
used Twisted daemon, it really wouldn't make any difference, since the 
select() call would spend less time idling.

-bob




From z3p at twistedmatrix.com  Thu Apr  3 16:40:35 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Thu, 03 Apr 2003 18:40:35 -0500
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <20030403231606.GC24393@radii>
References: <3E8CB2A2.5010908@norfolkgraphics.com>
Message-ID: <3E8C8023.32403.DB3EF4@localhost>

On 3 Apr 2003 at 18:16, Christopher Armstrong 
wrote:

> My first guess would be that the system calls involved (e.g., select)
> are more expensive than on linux, but that's just a wild guess. I
> doubt profiling would be much help, but maybe you (or someone) could
> write a simple test that just recorded the time it takes to run an
> immediately-returning select() a few thousand times.

A simple test shows that select() on 100 sockets, 
1000 times takes 1.313s (Windows XP, P4, 1.5GHz).  
Iterating on just one socket (which I think is 
what happens when idling) takes about 3/100 of a 
second.  To get an hour of CPU time, this would 
take 115 million select()s.  Whether or not that 
many select()s actually happen is up to other 
people. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From lafou at wanadoo.fr  Thu Apr  3 06:02:04 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 03 Apr 2003 15:02:04 +0200
Subject: [Twisted-Python] Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com>
Message-ID: <b6hbjv$si1$1@main.gmane.org>

Clark C. Evans wrote:

> Howdy.   I've made quite a few changes to flow.py and it's
> quickly approaching maturity.   To summarize, flow.py is a
> way to express sequential, streaming data flows that are
> interruptable as a collection of small, atomic operations.
> This is needed since sometimes an operation must block,
> flow.py takes care of resuming your flow at a later time.
> 


how do you use it with adbapi ?? I mean, how do you use callbacks with your
flow ?

How does it work if a bloc has several inputs ?
I want to do this :

DS1 ---> FS1 ---+
                +--->  FS3
DS2 ---> FS2 ------->  FS3

Two datasources provide some data. Data are used to run Fuzzy Inference 
Systems (FS1, FS2, FS3).

FS3 must wait until all its inputs are ready. Is it possible with flow.py ?
Will it be possible ?




From jasper at peak.org  Thu Apr  3 17:20:59 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 16:20:59 -0800 (PST)
Subject: [Twisted-Python] Problems with PB and Jelly...
In-Reply-To: <20030403173846.GA31794@meson.dyndns.org>
Message-ID: <Pine.LNX.4.44.0304031619090.15271-100000@localhost.localdomain>

On Thu, 3 Apr 2003, Jp Calderone wrote:

> On Thu, Apr 03, 2003 at 04:34:22AM -0800, Jasper Phillips wrote:
> > [snip]
> > 
> > I posted a test case demonstrating the "circular ref" bug a couple of
> > messages up this thread, but didn't work out a unit test.  I'll try to get
> > some time to do that, although I understand twisted uses something other than
> > pyunit so I'm not sure what's involved.
> 
>   We use twisted.trial, which presents an interface that's almost identical
> to pyunit, so if you're familiar with one, working with the other should be
> fairly easy.

Ah. Judging from your unit tests, It looks you can just import
twisted.trial.unittest as unittest, and existing pyunit tests should just
work.  D'oh!

>   That said, I've added a TestCase to test_jelly.py that seems to tickle
> this bug. :)  It's simplified even more from your example, but I think it
> still catches the essense of the problem.

Thanks!  It was probably a good idea to remove all of the pb baggage from
my test case. ;-)

-Jasper





From jasper at peak.org  Thu Apr  3 17:36:23 2003
From: jasper at peak.org (Jasper Phillips)
Date: Thu, 3 Apr 2003 16:36:23 -0800 (PST)
Subject: [Twisted-Python] Reactor questions
In-Reply-To: <20030403101852.55620b15.itamar@itamarst.org>
Message-ID: <Pine.LNX.4.44.0304031622580.15271-100000@localhost.localdomain>

On Thu, 3 Apr 2003, Itamar Shtull-Trauring wrote:

> On Thu, 3 Apr 2003 00:54:25 -0800 (PST)
> Jasper Phillips <jasper at peak.org> wrote:
> 
> > I notice from expirmentation that reactor.stop() seems to sever any
> > ongoing network connections.  Is there a way to temporarily stop then
> > restart the reactor without losing a network connection?  Or would I
> > need to write my own reactor?
> > 
> > I'm writing unit tests, where I want to script a sequence of events.
> > Currently I have a (pyui) loop calling
> > twisted.internet.main.iterate(), and have my code accept a startup
> > flag telling it whether to stop for procederal
> 
> 1. Never ever use twisted.internet.main. Please. It is waaaay
> deprecated.

Yah, I saw a note to that effect in main, but I was following an
example I found, and the results worked so I stuck with it for a bit.

> 2. You can use reactor.iterate().

Much better.

> 3. For unittesting, reactor.crash() does exactly what you want - stop
> reactor without closing anything.

Ah, I see it now.  The name threw me off, as "crash" doesn't exactly
sound recoverable. ;-)

Thanks for your help!
-Jasper





From corydodt at yahoo.com  Fri Apr  4 01:04:14 2003
From: corydodt at yahoo.com (Cory Dodt)
Date: Fri, 4 Apr 2003 00:04:14 -0800 (PST)
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
Message-ID: <20030404080414.63446.qmail@web10009.mail.yahoo.com>

Just one more thing to say about this:  the installer for Twisted on
Windows provides icons in the start menu for a few things, one of which is
"Twisted Command Prompt".  This prompt runs a very thin batch file which
makes all the commands run on Windows "just like unix"; that is, typing

c:\>mktap

will do what you expect.

__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - File online, calculators, forms, and more
http://tax.yahoo.com



From peter at engcorp.com  Fri Apr  4 07:39:39 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 04 Apr 2003 09:39:39 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
References: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
Message-ID: <3E8D992B.144B0DDD@engcorp.com>

Cory Dodt wrote:
> 
> Just one more thing to say about this:  the installer for Twisted on
> Windows provides icons in the start menu for a few things, one of which is
> "Twisted Command Prompt".  This prompt runs a very thin batch file which
> makes all the commands run on Windows "just like unix"; that is, typing
> 
> c:\>mktap
> 
> will do what you expect.

This even works sometimes. :-)  

I'd report a bug, but it happened while I was still in the pre-newbie
stage with Twisted, and we have an unusual Python installation (network-
based) so I wasn't ready to blame the Twisted installer.  As I recall,
it was something like win32com.shortcut that was missing, and it was
needed by something that was like "win32_postinstall.py" (I really 
don't remember the name, and can't find the file right now).

The symptom, other than a failure right at the end of the installation
process (after the .pyc files are generated), was the lack of a Windows
start menu entry and any shortcuts...

If there's a concern about this, I can keep my eye out for what it was.

-Peter



From acapnotic at twistedmatrix.com  Fri Apr  4 11:28:59 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 04 Apr 2003 10:28:59 -0800
Subject: [Twisted-Python] release momentum
Message-ID: <1049480936.10270.52.camel@troglodyte.funhouse>

Our release schedule, or lack thereof, is getting to me.  I'm reluctant
to deploy new releases of CVSToys because I'd be asking people to depend
on an "alpha" version of Twisted.  At least one person has come in to
#twisted asking if there was going to be a release soon, or if he had to
ask his users to get Twisted from CVS.  

Our last *alpha* release was was five weeks before PyCon started; there
have been over five hundred commits since that time.

I know we've all been busy, I know our release manager has had to devote
his attention to people who will help him pay his bills -- I'm not
concerned with any of that now.  All I want to know is what we have to
do to get another alpha release out.

Tests we're having problems with:

 * testSignal in test_process.PosixProcessTestCase, fails regularly
under buildbot for python2.2, but not 2.1.  I cannot reproduce this
failure.

 * testStor in test_ftp, intermittent failures.

 * ThrottlingTestCase in test_policies has intermittent failures, they
may be spurious timing issues.

 * test_imap is under heavy development, failures changed fresh daily.

 * test_jelly.CircularReferenceTestCase, Jasper's bug.

How many of these do we have to turn green before we can build the next
alpha release?  Is the jelly bug going to wait on newjelly?

Since I'm the one raising a stink, I'll volunteer to manage the next
release should Chris remain unavailable.

(Now why did saying that start the music of foreshadowing doom in my
head?)

 - Kevin

-- 
The moon is waxing crescent, 6.1% illuminated, 2.3 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030404/df3ca099/attachment.sig>

From jeff at bodkinpartners.com  Fri Apr  4 11:30:39 2003
From: jeff at bodkinpartners.com (Jeffrey Mathews)
Date: Fri, 4 Apr 2003 13:30:39 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
Message-ID: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>

Thanks everyone for the quick response.

The command prompt is VERY helpful, given the sorry state of Windows command
line life (and \python22\scripts is not added to PATH by the windows python
installer, so I didn't think to look there).  Sorry I didn't see the
question previously posted.

As for Peter's question about the need for a CGI.FieldStorage type api, it's
really only an issue when you're doing huge multipart mime posts (e.g., file
uploads).  The idea of passing around those results (potentially multi
megabyte) as strings is kind of frightening.  That said, I have no grasp on
what issues are raised when handling these things asynchronously (the cgi
module is all synchronous).

Thanks again.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From peter at engcorp.com  Fri Apr  4 12:08:06 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 04 Apr 2003 14:08:06 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
References: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
Message-ID: <3E8DD816.6EEBAB5F@engcorp.com>

Jeffrey Mathews wrote:
> 
> As for Peter's question about the need for a CGI.FieldStorage type api, it's
> really only an issue when you're doing huge multipart mime posts (e.g., file
> uploads).  The idea of passing around those results (potentially multi
> megabyte) as strings is kind of frightening.  That said, I have no grasp on
> what issues are raised when handling these things asynchronously (the cgi
> module is all synchronous).

What is it about passing around multi-megabyte data as strings that scares
you?  The data is only needed temporarily, I would think, until it is written
to a file.  Servers have gobs of memory, and massive file uploads are 
rare... or if they're not, surely the server can have adequate capacity
to handle the load (memory-wise).

Maybe I'm too naive, but unless I was expecting, say, greater than 10MB
or 20MB files on a regular basis, I wouldn't think twice about just using
strings.  Much simpler than trying to juggle temporary files and references
to them and removing them when appropriate etc.

Is your concern a case of premature optimization?

-Peter



From itamar at itamarst.org  Fri Apr  4 12:09:32 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 14:09:32 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
References: <20030404080414.63446.qmail@web10009.mail.yahoo.com>
	<AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
Message-ID: <20030404140932.01df2c1c.itamar@itamarst.org>

On Fri, 4 Apr 2003 13:30:39 -0500
"Jeffrey Mathews" <jeff at bodkinpartners.com> wrote:

> As for Peter's question about the need for a CGI.FieldStorage type
> api, it's really only an issue when you're doing huge multipart mime
> posts (e.g., file uploads).  The idea of passing around those results
> (potentially multi megabyte) as strings is kind of frightening.  That
> said, I have no grasp on what issues are raised when handling these
> things asynchronously (the cgi module is all synchronous).

This is indeed an issue and the reason FieldStorage support will return
at some point.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Fri Apr  4 12:13:30 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 14:13:30 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <3E8DD816.6EEBAB5F@engcorp.com>
References: <AGEBLLLECPANMIBABBDNEECECMAA.jeff@bodkinpartners.com>
	<3E8DD816.6EEBAB5F@engcorp.com>
Message-ID: <20030404141330.61b498d9.itamar@itamarst.org>

On Fri, 04 Apr 2003 14:08:06 -0500
Peter Hansen <peter at engcorp.com> wrote:

> Is your concern a case of premature optimization?

Denial of service attacks, for one thing.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Fri Apr  4 12:21:56 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 4 Apr 2003 14:21:56 -0500
Subject: [Twisted-Python] re: Congrats / a little newbie confusion
In-Reply-To: <3E8DD816.6EEBAB5F@engcorp.com>
Message-ID: <B2E6BF37-66D2-11D7-96D9-000A95686CD8@redivi.com>

On Friday, Apr 4, 2003, at 14:08 America/New_York, Peter Hansen wrote:

> Jeffrey Mathews wrote:
>>
>> As for Peter's question about the need for a CGI.FieldStorage type 
>> api, it's
>> really only an issue when you're doing huge multipart mime posts 
>> (e.g., file
>> uploads).  The idea of passing around those results (potentially multi
>> megabyte) as strings is kind of frightening.  That said, I have no 
>> grasp on
>> what issues are raised when handling these things asynchronously (the 
>> cgi
>> module is all synchronous).
>
> What is it about passing around multi-megabyte data as strings that 
> scares
> you?  The data is only needed temporarily, I would think, until it is 
> written
> to a file.  Servers have gobs of memory, and massive file uploads are
> rare... or if they're not, surely the server can have adequate capacity
> to handle the load (memory-wise).
>
> Maybe I'm too naive, but unless I was expecting, say, greater than 10MB
> or 20MB files on a regular basis, I wouldn't think twice about just 
> using
> strings.  Much simpler than trying to juggle temporary files and 
> references
> to them and removing them when appropriate etc.
>
> Is your concern a case of premature optimization?

It's not premature optimization, it's proper design for an async 
framework.  If for no other reason, large strings take non-trivial 
amounts of time to process.  For example, on my laptop (which has a gig 
of ram): ('a' * 2**20).replace('a', 'b') takes about 0.35 seconds.. 
Twisted is not threaded, so that's a bad thing to do.  Processing 
chunks with file-like interfaces is scalable, large strings are 
definitely not.

-bob




From exarkun at intarweb.us  Fri Apr  4 13:39:51 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 4 Apr 2003 15:39:51 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
References: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <20030404203951.GA11365@meson.dyndns.org>

On Fri, Apr 04, 2003 at 10:28:59AM -0800, Kevin Turner wrote:
> Our release schedule, or lack thereof, is getting to me.  I'm reluctant
> to deploy new releases of CVSToys because I'd be asking people to depend
> on an "alpha" version of Twisted.  At least one person has come in to
> #twisted asking if there was going to be a release soon, or if he had to
> ask his users to get Twisted from CVS.  
> 
> Our last *alpha* release was was five weeks before PyCon started; there
> have been over five hundred commits since that time.
> 
> I know we've all been busy, I know our release manager has had to devote
> his attention to people who will help him pay his bills -- I'm not
> concerned with any of that now.  All I want to know is what we have to
> do to get another alpha release out.
> 

  Thanks for bringing this up.  I've been wondering about it a bit myself as
well.

> Tests we're having problems with:
> 
> [snip]
> 
>  * test_imap is under heavy development, failures changed fresh daily.

  I wouldn't be unhappy if imap4 were left out of the next release, if that
release is done before 1) the protocol support is somewhat stable 2) there
is a mailbox implementation in Twisted proper (I currently have one, but not
in Twisted).

  Of course, I also wouldn't be unhappy if it were included, assuming it is
in reasonable condition when someone actually does go ahead with the
release. 

> 
>  * test_jelly.CircularReferenceTestCase, Jasper's bug.
> 
> How many of these do we have to turn green before we can build the next
> alpha release?  Is the jelly bug going to wait on newjelly?
> 

  Speaking of newjelly... Is it definite yet whether this will be backwards
compatible with the current jelly yet?  I assumed it would not be, but I've
heard some rumors...

  Since our numbering scheme is currently "* glyph rolls dice.", maybe this
doesn't matter, but I think it *might* be nice if the next release was
1.1.0, if jelly compatibility isn't going to be maintained.

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 15 days, 16:00, 9 users, load average: 0.00, 0.02, 0.07
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030404/60712018/attachment.sig>

From glyph at twistedmatrix.com  Fri Apr  4 16:20:11 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Apr 2003 18:20:11 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday, April 4, 2003, at 01:28 PM, Kevin Turner wrote:

> Our release schedule, or lack thereof, is getting to me.  I'm reluctant
> to deploy new releases of CVSToys because I'd be asking people to 
> depend
> on an "alpha" version of Twisted.  At least one person has come in to
> #twisted asking if there was going to be a release soon, or if he had 
> to
> ask his users to get Twisted from CVS.

You definitely have a point there.

> Our last *alpha* release was was five weeks before PyCon started; there
> have been over five hundred commits since that time.

Zow.  I hadn't counted.  This is pretty bad.

> Tests we're having problems with:
>
>  * testSignal in test_process.PosixProcessTestCase, fails regularly
> under buildbot for python2.2, but not 2.1.  I cannot reproduce this
> failure.

Neither can I.  does anyone have a theory as to what's causing it?

>  * testStor in test_ftp, intermittent failures.

This should be fixed eventually, but it's been having problems forever. 
  We shouldn't hold up the release based on it.

>  * ThrottlingTestCase in test_policies has intermittent failures, they 
> may be spurious timing issues.

The tests are written incorrectly.  They assert things that should 
usually be true, but aren't necessarily.

>  * test_imap is under heavy development, failures changed fresh daily.

JP should get these to pass, but similarly they should not hold up the 
release.

>  * test_jelly.CircularReferenceTestCase, Jasper's bug.

I'll pick this one up, since it's really my fault.  I should be able to 
look at it on Sunday.

> How many of these do we have to turn green before we can build the 
> next alpha release?  Is the jelly bug going to wait on newjelly?

The jelly bug shouldn't wait on newjelly because this involves breaking 
compatibility not only with old Twisted, but also with every other 
language implementation of PB that currently exists.  These should 
eventually be fixed, but I think at this point that we just can't 
ignore compatibility in the meanwhile.

> Since I'm the one raising a stink, I'll volunteer to manage the next 
> release should Chris remain unavailable.

Let me give you some advice, from the last time I volunteered to do 
this.  Corner Chris on IRC, get him to explain everything that needs to 
be done, and then take it over.  Don't wait for him to agree that he 
won't be available :-).

It's actually not that much work, now that most of it's automated.  The 
only thing that's really time-consuming is having to re-do it all every 
time somebody checks in a fix, and twice when moving to final-RC to 
final-release.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jhMuvVGR4uSOE2wRAr/dAKCEw5Og+P2Ho6FnUw0mvIdfhV9LFgCgkcXw
5dOivSojnY9quQY1KQVlAQk=
=jKiN
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Fri Apr  4 16:39:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 4 Apr 2003 18:39:06 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <20030404203951.GA11365@meson.dyndns.org>
Message-ID: <A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, April 4, 2003, at 03:39 PM, Jp Calderone wrote:

>   Since our numbering scheme is currently "* glyph rolls dice.", maybe 
> this
> doesn't matter, but I think it *might* be nice if the next release was
> 1.1.0, if jelly compatibility isn't going to be maintained.

I think we should stick with 1.0.4, since I think we should do the 
release ASAP, and not wait until we have enough time to test newjelly 
with all the applications that might need it.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+jhedvVGR4uSOE2wRAtIxAJ0QAu+gZ38kXNiKiu922OUg0XcYTwCfdjgx
oXtG5pQAwY4QnTgHS2CGGcU=
=VcV6
-----END PGP SIGNATURE-----




From itamar at itamarst.org  Fri Apr  4 17:06:34 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 4 Apr 2003 19:06:34 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>
References: <20030404203951.GA11365@meson.dyndns.org>
	<A00B9B86-66F6-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <20030404190634.5681aef5.itamar@itamarst.org>

On Fri, 4 Apr 2003 18:39:06 -0500
Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> I think we should stick with 1.0.4, since I think we should do the 
> release ASAP, and not wait until we have enough time to test newjelly 
> with all the applications that might need it.

And everyone can help by making sure they add changelog entries for any
new features/APIs they added since 1.0.3.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Fri Apr  4 18:12:09 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 4 Apr 2003 20:12:09 -0500
Subject: [Twisted-Python] release momentum
In-Reply-To: <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>
References: <1049480936.10270.52.camel@troglodyte.funhouse> <FB7B880E-66F3-11D7-A7BC-000393C9700E@twistedmatrix.com>
Message-ID: <20030405011209.GC956@radii>

On Fri, Apr 04, 2003 at 06:20:11PM -0500, Glyph Lefkowitz wrote:
> Let me give you some advice, from the last time I volunteered to do 
> this.  Corner Chris on IRC, get him to explain everything that needs to 
> be done, and then take it over.  Don't wait for him to agree that he 
> won't be available :-).

Glyph, you know me too well. I'll talk to Acap on IRC >:)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From cce at clarkevans.com  Sat Apr  5 02:12:14 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 5 Apr 2003 09:12:14 +0000
Subject: [Twisted-Python] Re: more thoughts on resumable async data flows
In-Reply-To: <b6hbjv$si1$1@main.gmane.org>
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org>
Message-ID: <20030405091214.GA94931@doublegemini.com>

On Thu, Apr 03, 2003 at 03:02:04PM +0200, Philippe Lafoucri�re wrote:
| how do you use it with adbapi ?? I mean, how do you use callbacks
| with your flow ?
|
| How does it work if a bloc has several inputs ?
| I want to do this :
| 
| DS1 ---> FS1 ---+
|                 +--->  FS3
| DS2 ---> FS2 ------->  FS3

If your queries are returning small results, ie, 
non-incremental, I would just set this up as a 
chain of Deferreds and not bother with flow as
it might be overkill for your needs.

In other words, in the twisted.enterprise.adbapi
when you run a query, it returns a deferred.  So
DS1 and DS2 would be those query results.

Your FS1 and FS2 should be deferred operations
as well, but fired via the 'addCallback' on 
DS1 and DS2 respectively.

Then FS3 is a DeferredList taking FS1 and FS2.

...

If you can use generators, for more complicated flows, 
etrepum's (Bob Ippolito's) approach may be better approach
to this, although I'm not sure how it would handle more
'fluid' flow through the process.  I need to understand
what he's doing better.   At first I thought his approach
is very different than mine, but I think (although I'm
not quite yet able to explain) that they are isomorphic;
only that I'm using a temp stack and he's using the 
event queue via a linked-list. 

...

As for the stuff in flow.py, right now it uses a thread
for each database connection.  Eventually for PostgreSQL,
I'd like to move over to a non-threaded driver.  Gerhard
was working on such a thing as I remember.  Also, it may
be renamed since extrepum was using "flow.py" before me.

Anyway, the database connection is done through a 
QueryIterator which basically sends a set of rows
(via fetchmany) on to the next stage.  So, the connection
from DS1 to FS1 and DS2 to FS2 could be done using 
a simple flow for each.  The problem in the flow module 
has to do with merging the two flows.  This can be done 
by using the 'context'.

In short, it would work, but I'm not sure that it's
your best option; and I'm still not quite happy with
flow.py myself (although it is in production).

Clark



From justin at gnubia.net  Sat Apr  5 13:20:11 2003
From: justin at gnubia.net (Justin Ryan)
Date: 05 Apr 2003 14:20:11 -0600
Subject: [Twisted-Python] enterprise.row
Message-ID: <1049574011.1503.45.camel@qutang.gnubian.org>

I'm attempting to implement a simple database application (again) using
twisted.enterprise.row.  Perhaps my failure to do so successfully in the
past should be a hint that I should give up, but the concept seems
really cool, and I keep getting closer.

I'm running into an issue that no doubt has something to do with my lack
of understanding of t.e.row.  I've been wanting to try it for a while,
and decided to design a simple database with the goal of implementing a
simple application using t.e.row.  In any case, it seems I am angering
row.  My first attempt at using it was to try and create/insert a new
row, and i received the following exception:

<- snip ->
Traceback (most recent call last):
  File "Zone.py", line 33, in ?
    reflector.insertRow(newZone).addCallback(onInsert)
  File
"/usr/lib/python2.2/site-packages/twisted/enterprise/sqlreflector.py",
line 308, in insertRow
    sql = self.insertRowSQL(rowObject)
  File
"/usr/lib/python2.2/site-packages/twisted/enterprise/sqlreflector.py",
line 301, in insertRowSQL
    args.append(self.quote_value(rowObject.findAttribute(column), type))
  File "/usr/lib/python2.2/site-packages/twisted/enterprise/row.py",
line 87, in findAttribute
    return getattr(self, attr)
AttributeError: ZONE_SOA instance has no attribute 'ZONE_SOAID'
<- snip ->

"ZONE_SOAID" is the primary key for the "ZONE_SOA" table.  I did not set
the primary key because it is a postgres serial column - that is, it
should automatically increment the pkey each time a new row is
inserted.  If I use setKeyAttr("ZONE_SOAID", 1), the AttributeError
comes up for the next attribute that is not being given a value.

I read the row documentation a little more, and it doesn't appear to
like what I'm trying to do all too much.  I can use python to fill the
object with default values, but the database will do that for me, and
with less work on the part of my application (plus, the KeyFactory class
says it is not thread-safe, I know that my postgres series is).

Is there any way for row to allow me to insert a new row with some empty
values, and simply ignore them (allowing the database to use its'
default)?  If not, any idears on where/how this might need to be done? 
Perhaps this is a good time for me to foray into twisted hacking..

TIA,

-Justin




From cce at clarkevans.com  Sat Apr  5 16:14:16 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 5 Apr 2003 23:14:16 +0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
Message-ID: <20030405231416.GA97462@doublegemini.com>

Toward the end of the discussion this past morning, we seemed
to have come to the agreement that start/stop/restart behavior
does not belong in twistd.  So, I've taken my original submit
and rephrased it as 'twistctl' which is a wrapper on twistd
providing those features.   

To get twistctl to work nicely with twistd, a few refactors
in twistd were needed:

  1.  refactor runApp to factor out the signal code into
      'signalApp' so that killApp in twistctl could use it.
      In general, runApp is quite huge and could use 
      a few breakdowns anyway

  2.  refactor the code to get the passphrase (if the
      application is encrypted) and the code which 
      parses options in run() into a 'parseOptions'
      method so that it can be called from twistctl

  Neither of these changes affect behavior, they only
  expose chunks of reusable code for twistctl

This is a first pass of this, and I'd like to do two
things in the repository: (a) commit the twistd.py.diff
changes, and (b) to put twistctl into the sandbox so
that people can play with it over the next month or
so and after we have a better idea of how it should
behave, we can then add it to the scripts directory.

The twistctl script needs help in many areas: 

  1. Moshez objected to the killApp implementation,
     when I get time I'll look at it.  But right now
     it works on my platform just wonderfully.
     The beauty of open source projects is that people
     can hack at it till it works for everyone...

  2. The restartApp and startApp behavior are not 
     exactly clear as to how they should use -shutdown.tap
     and a bit more research and experimenting is
     needed before this should be formalized.  Really,
     I'm still too new to taps to grok this fully.

In particular, Moshez said that he thinks this script
should *call* the twistd script via OS methods and
thus the refactor above is not needed.  I respectfully
disagree with his assertion.   Calling python from python
via python call mechanism is far superior as it allows
for better error handling, is less platform dependent,
and numerous other factors; such as being able to 
send a passphrase between the two modules easily.

Anyway, please comment.  And Glyph, I'd like permission
to commit the twistd.py.diff as specified below.

Clark
-------------- next part --------------
--- twistd.py.orig	Sat Apr  5 17:37:59 2003
+++ twistd.py	Sat Apr  5 17:36:14 2003
@@ -1,4 +1,3 @@
-
 # Copyright (C) 2001 Matthew W. Lefkowitz
 #
 # This library is free software; you can redistribute it and/or
@@ -190,11 +189,11 @@
     return filename, decode, mode
 
 
-def loadApplication(config, passphrase):
+def loadApplication(config):
     filename, decode, mode = createApplicationDecoder(config)
     if config['encrypted']:
         data = open(filename, 'rb').read()
-        data = decrypt(passphrase, data)
+        data = decrypt(config['passphrase'], data)
         try:
             return decode(filename, data)
         except:
@@ -211,6 +210,33 @@
     import pdb
     pdb.set_trace()
 
+def signalApp(config, signal = 0):
+    if os.path.exists(config['pidfile']):
+        try:
+            pid = int(open(config['pidfile']).read())
+        except ValueError:
+            msg = 'Pidfile %s contains non numeric value'
+            sys.exit(msg % config['pidfile'])
+
+        try:
+            os.kill(pid, signal)
+        except OSError, why:
+            if why[0] == errno.ESRCH:
+                # The pid doesnt exists.
+                if not config['quiet']:
+                    print 'Removing stale pidfile %s' % config['pidfile']
+                    os.remove(config['pidfile'])
+            else:
+                msg = 'Can\'t check status of PID %s from pidfile %s: %s'
+                sys.exit(msg % (pid, config['pidfile'], why[1]))
+        else:
+            if not(signal):
+                sys.exit("""\
+Another twistd server is running, PID %s\n
+This could either be a previously started instance of your application or a
+different application entirely. To start a new one, either run it in some other
+directory, or use my --pidfile and --logfile parameters to avoid clashes.
+""" %  pid)
 
 def runApp(config):
     global initRun
@@ -238,39 +264,11 @@
         # only posix can fork, and debugging requires nodaemon
         config['nodaemon'] = 1
 
-    if config['encrypted']:
-        import getpass
-        passphrase = getpass.getpass('Passphrase: ')
-    else:
-        passphrase = None
-
     # Load the servers.
     # This will fix up accidental function definitions in evaluation spaces
     # and the like.
     initRun = 0
-    if os.path.exists(config['pidfile']):
-        try:
-            pid = int(open(config['pidfile']).read())
-        except ValueError:
-            sys.exit('Pidfile %s contains non numeric value' % config['pidfile'])
-
-        try:
-            os.kill(pid, 0)
-        except OSError, why:
-            if why[0] == errno.ESRCH:
-                # The pid doesnt exists.
-                if not config['quiet']:
-                    print 'Removing stale pidfile %s' % config['pidfile']
-                    os.remove(config['pidfile'])
-            else:
-                sys.exit('Can\'t check status of PID %s from pidfile %s: %s' % (pid, config['pidfile'], why[1]))
-        else:
-            sys.exit("""\
-Another twistd server is running, PID %s\n
-This could either be a previously started instance of your application or a
-different application entirely. To start a new one, either run it in some other
-directory, or use my --pidfile and --logfile parameters to avoid clashes.
-""" %  pid)
+    signalApp(config)
 
     if config['logfile'] == '-':
         if not config['nodaemon']:
@@ -316,7 +314,7 @@
     log.msg('reactor class: %s' % reactor.__class__)
 
     try:
-        application = loadApplication(config, passphrase)
+        application = loadApplication(config)
     except Exception, e:
         s = "Failed to load application: %s" % (e,)
         traceback.print_exc(file=log.logfile)
@@ -457,18 +455,22 @@
             log.err("--report-profile specified but application has no name (--appname unspecified)")
     log.msg("Server Shut Down.")
 
-
-def run():
+def parseOptions(config):
     # make default be "--help"
     if len(sys.argv) == 1:
         sys.argv.append("--help")
-
-    config = ServerOptions()
     try:
         config.parseOptions()
     except usage.error, ue:
         config.opt_help()
         print "%s: %s" % (sys.argv[0], ue)
         os._exit(1)
+    if config['encrypted']:
+        import getpass
+        config['passphrase'] = getpass.getpass('Passphrase: ')
+    else:
+        config['passphaase'] = None
+    return config
 
-    runApp(config)
+def run():
+    runApp(parseOptions(ServerOptions()))
-------------- next part --------------
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes

from twisted.scripts import twistd
from twisted.python import usage

class ServerOptions(twistd.ServerOptions):
    synopsis = "Usage: twistctl [options] [start|stop|restart]"

    subCommands = [['start', None, usage.Options, 
                    'starts the application requested (default)'],
                   ['stop', None, usage.Options,
                    'shuts the given application down if it is running'],
                   ['restart',None, usage.Options,
                    'restarts the application']] 

def stopApp(config):
    from signal import SIGTERM
    from os.path import exists
    from time import sleep
    twistd.signalApp(config, SIGTERM)
    nWait = 0  # processes do not die instantly
    while exists(config['pidfile']) and nWait < 20:
        sleep(.1)
        nWait += 1

def restartApp(config):
    stopApp(config)
    runApp(config)

def run():
    config = twistd.parseOptions(ServerOptions())
    cmd = getattr(config,'subCommand','start')
    if 'stop'    == cmd: return stopApp(config)
    if 'restart' == cmd: return restartApp(config)
    twistd.runApp(config)

From m at moshez.org  Sat Apr  5 23:44:41 2003
From: m at moshez.org (Moshe Zadka)
Date: 6 Apr 2003 06:44:41 -0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
In-Reply-To: <20030405231416.GA97462@doublegemini.com>
References: <20030405231416.GA97462@doublegemini.com>
Message-ID: <20030406064441.19318.qmail@green.zadka.com>

On Sat, 5 Apr 2003, "Clark C. Evans" <cce at clarkevans.com> wrote:

>   1. Moshez objected to the killApp implementation,
>      when I get time I'll look at it.  But right now
>      it works on my platform just wonderfully.
>      The beauty of open source projects is that people
>      can hack at it till it works for everyone...

No, that's not a beauty.
Let me explain: checking something which "works for me, usually, when
my machine is not heavily loaded" is the worst thing that you can do.
Intermittent failures are *worse* than deterministic failures. Do you
seriously want something that you can't rely on?
It's not that hard to have an algorithm which is correct. Find one,
and code it.

> In particular, Moshez said that he thinks this script
> should *call* the twistd script via OS methods and
> thus the refactor above is not needed.  I respectfully
> disagree with his assertion.

Let me explain: the interface to twistd is well defined. It's documented
in the manpage. We are commited to maintaining backwards compatibility with
it. What you're doing with the refactor is forcing parts of the internal
twistd implementation to stay static. This is insane. We should not add
extra interfaces where existing ones will do. If "twistd" is not on your
path, just fix your Twisted installation. I fail to see how catering
for broken installations is in any way a good idea. Also, if you call
twistd via the OS, then on such places where both twistd2.1 and twistd2.2
scripts exist, *your script* only has to be available once, since it can
receive the name of the binary which has to be run. I'm not going to even
start talking about how most of the twistd flexibility is not needed,
since in real daemons which run from init scripts, the tap cannot be
encrypted anyway, since the key would have to be available to the script.

If you write the twistdctl, and it is actually working on more than one
platform, *and* there is a significant advantage in making it directly
Python->Python, then you can start thinking of adding more places where
we have to promise backwards compatibility in order not to break stuff.
Notice that this is an especially sore point for stuff like twistdctl
which is naturally harder to test in unit tests.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.



From dave at krondo.com  Sun Apr  6 01:49:06 2003
From: dave at krondo.com (Dave Peticolas)
Date: 06 Apr 2003 00:49:06 -0800
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049574011.1503.45.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
Message-ID: <1049618946.20886.598.camel@oneiros>

On Sat, 2003-04-05 at 12:20, Justin Ryan wrote:
> "ZONE_SOAID" is the primary key for the "ZONE_SOA" table.  I did not set
> the primary key because it is a postgres serial column - that is, it
> should automatically increment the pkey each time a new row is
> inserted.  If I use setKeyAttr("ZONE_SOAID", 1), the AttributeError
> comes up for the next attribute that is not being given a value.
> 
> I read the row documentation a little more, and it doesn't appear to
> like what I'm trying to do all too much.  I can use python to fill the
> object with default values, but the database will do that for me, and
> with less work on the part of my application (plus, the KeyFactory class
> says it is not thread-safe, I know that my postgres series is).

I think your diagnosis is correct. The current t.e code does not handle
default values in the database schema, afaik. Given that, and the fact
that the reflector wants to cache rows by primary keys, it can't support
leaving primary keys unset before you create a new row.


> Is there any way for row to allow me to insert a new row with some empty
> values, and simply ignore them (allowing the database to use its'
> default)?  If not, any idears on where/how this might need to be done? 
> Perhaps this is a good time for me to foray into twisted hacking..

What I have done with postgres is to generate the primay key using
the nextval function on the sequence used for the serial column, setting
the row object's primary key, and then inserting it. This makes the t.e
code happy and you often need to know the new key anyway.

It would be nice to make t.e allow for default values and db-generated
primary keys, but that code would almost certainly need to be 
per-database since different databases handle serial/autoincrement
columns differently.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030406/f78f2a53/attachment.sig>

From cce at clarkevans.com  Sun Apr  6 10:37:36 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 6 Apr 2003 16:37:36 +0000
Subject: [Twisted-Python] twistctl - start/stop/restart revisited
In-Reply-To: <20030406064441.19318.qmail@green.zadka.com>
References: <20030405231416.GA97462@doublegemini.com> <20030406064441.19318.qmail@green.zadka.com>
Message-ID: <20030406163736.GA319@doublegemini.com>

Howdy Moshe!

On Sun, Apr 06, 2003 at 06:44:41AM -0000, Moshe Zadka wrote:
| >   1. Moshez objected to the killApp implementation,
| >      when I get time I'll look at it.  But right now
| >      it works on my platform just wonderfully.
| >      The beauty of open source projects is that people
| >      can hack at it till it works for everyone...
| 
| No, that's not a beauty.
| Let me explain: checking something which "works for me, usually, when
| my machine is not heavily loaded" is the worst thing that you can do.
| Intermittent failures are *worse* than deterministic failures. Do you
| seriously want something that you can't rely on?

Yes, you convinced me that the implementation sucks.  This is
why I'm proposing to check it in to the *sandbox* which has 
explicit warnings about broken code.   Once it is there it
can be worked on incrementally... perhaps by people other
than me.  If it stays private then we will have N people
working on the same thing without a chance of collaboration.

| > In particular, Moshez said that he thinks this script
| > should *call* the twistd script via OS methods and
| > thus the refactor above is not needed.  I respectfully
| > disagree with his assertion.
| 
| Let me explain: the interface to twistd is well defined. It's documented
| in the manpage. We are commited to maintaining backwards compatibility with
| it. What you're doing with the refactor is forcing parts of the internal
| twistd implementation to stay static. This is insane. We should not add
| extra interfaces where existing ones will do.

I would hardly call it an extra burden, calling it insane is a
bit over-the-top...  in any case, the refactor makes sense even
without users -- runApp is quite large and the code to fetch
the passphrase really belongs more up-stream.

| I'm not going to even start talking about how most of the twistd 
| flexibility is not needed, since in real daemons which run from 
| init scripts, the tap cannot be encrypted anyway, since the key 
| would have to be available to the script.

I'm not defending twistd, but it does seem to have a wee
bit more functionality than making twisted applications
into daemons.   Perhaps you should refactor it by moving
what *you* think twistd should be into its own module
and make it callable from twistd.   Something like
twisted.python.daemonize would be clean.  No?

Best,

Clark



From cce at clarkevans.com  Sun Apr  6 11:53:04 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 6 Apr 2003 17:53:04 +0000
Subject: [Twisted-Python] coding standard: plurals for database table names
Message-ID: <20030406175304.GA756@doublegemini.com>

I noticed  in the Twisted Coding Standard that...

   "Database tables shall be named with plural nouns"

I'd like to question this standard for several reasons:

  1. There is not one single rule for forming plurals.
     In particular, some plurals have the same spelling
     as their singluar, 'deer'; furthermore some plurals
     have different forms, 'people' instead of 'persons'.
     Sometimes it is 's' or 'es'.  These differences are
     especially hard for those who have English as a 
     a second language.
     
  2. Tables are to rows as classes are to instances.
     We name Classes singluar, and as such tables should
     also be singluar.  This makes mapping rules easier.

  3. It is helpful to name foreign key columns as the
     same name as the table that they are coming from.
     And it makes little sense to use plurals for 
     column names, for example, when the person table
     may have a 1-M relationship with address, it could
     have a 'address' column name, which is obviously
     a foreign key to the 'address' table.   If you used
     plurals for the table name it brings up the 
     question... do you use plurals for the column name?
     I've seen it done.  *ick*

  4. I often use the double underscore method for link
     tables which represent M-M relationships.  In this
     case good names are hard to find.  For example, a
     link from a person to their address... how do you
     name this?   I use person__address.  If you use
     plurals then this becomes persons__addresses, 
     dooable but ugly.

  5. While there are astechic reasons for this (above)
     the resons become all the more important when 
     you want to build automatic tools for searching 
     over schemata, etc.  In this case, using plurals
     only adds one extra (unnecessary) step in the
     automated translation of plural table names to 
     singluar column and or class names.

In short, I'd recommend singluar nouns, with M-M
link tables as one__two where one and two are 
tables being linked to.

Best,

Clark



From golux at comcast.net  Sun Apr  6 12:26:13 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 06 Apr 2003 14:26:13 -0400
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <20030406175304.GA756@doublegemini.com>
References: <20030406175304.GA756@doublegemini.com>
Message-ID: <1049653574.978.67.camel@golux>

On Sun, 2003-04-06 at 13:53, Clark C. Evans wrote:
> I noticed  in the Twisted Coding Standard that...
> 
>    "Database tables shall be named with plural nouns"
> 
> I'd like to question this standard for several reasons:
> [ some trimming for brevity ]
> 
>   3. It is helpful to name foreign key columns as the
>      same name as the table that they are coming from.

What if you have more than one foreign key to the same 
table?  A very simple example (from my app ;^):  the 
attributes "owner", "creator", and "modifier" all point 
to the "persons" table.  As a rule of thumb, it's usually 
best to name the foreign key column after the role that 
the foreign key entity plays in the referring table.

>   5. While there are astechic reasons for this (above)
>      the resons become all the more important when 
>      you want to build automatic tools for searching 
>      over schemata, etc.  In this case, using plurals
>      only adds one extra (unnecessary) step in the
>      automated translation of plural table names to 
>      singluar column and or class names.

I didn't think it was all that difficult.  I can send you
the O-R mapping I use, if you like.

> In short, I'd recommend singluar nouns, with M-M
> link tables as one__two where one and two are 
> tables being linked to.

One could reasonably argue that it is not important to have 
a table-naming rule in the coding standard.  I don't really 
care either way, but I happen to like using plural names for 
tables, and I'll use it regardless of what the Twisted coding std 
says anyhow, because I use my own O-R mapping instead of t.e.row 
(mine is different from t.e.row in many ways, but it does map plural 
table names to singular object names ;^).

Cheers,
- Steve.





From justin at gnubia.net  Sun Apr  6 12:56:06 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 13:56:06 -0500
Subject: [Twisted-Python] coding standard: plurals for database
	table	names
In-Reply-To: <1049653574.978.67.camel@golux>
References: <20030406175304.GA756@doublegemini.com>
	 <1049653574.978.67.camel@golux>
Message-ID: <1049655366.6953.282.camel@qutang.gnubian.org>

> >   3. It is helpful to name foreign key columns as the
> >      same name as the table that they are coming from.
> 
> What if you have more than one foreign key to the same 
> table?  A very simple example (from my app ;^):  the 
> attributes "owner", "creator", and "modifier" all point 
> to the "persons" table.  As a rule of thumb, it's usually 
> best to name the foreign key column after the role that 
> the foreign key entity plays in the referring table.

A combination of both is best - i.e.

CONT_Contact
  CONT_ContactID FirstName LastName CONT_ContactTypeID

CONT_ContactType
  CONT_ContactTypeID Name

CONT_Organization
  CONT_OrganizationID Name Address

CONT_xref_Contact_Organization
  CONT_ContactID CONT_OrganizationID

CONT_ContactTypeID is a primary key on CONT_ContactType, and a foreign
key on CONT_Contact.  The xref table CONT_xref_Contact_Organization is
obviously a relationship between Contacts and Organizations, and
CONT_ContactID is obviously a foreign key to CONT_Contact.

If you structure tables / references like this, it's very difficult to
miss a bug where the wrong fields are being joined.  This still falls in
line with the recommendation that table names should be singular.

I agree that the Table-Row relationship is similar to the Class-Instance
relationship.  I think that the existence of object relational mappers
like t.e.row support this paradigm.  It is easy to understand the
mapping of programmatical information into the structure of the database
if you can name a class after a table.  Then you have instances of
CONT.Contact and references to a CONT.ContactType instance and one or
more CONT.Organization instances.

You can create higher level objects to further the abstraction, having a
Contact with an organization and type attribute.

> >   5. While there are astechic reasons for this (above)
> >      the resons become all the more important when 
> >      you want to build automatic tools for searching 
> >      over schemata, etc.  In this case, using plurals
> >      only adds one extra (unnecessary) step in the
> >      automated translation of plural table names to 
> >      singluar column and or class names.
> 
> I didn't think it was all that difficult.  I can send you
> the O-R mapping I use, if you like.

I would like to see the O-R mapping that you use, simply to compare
ideas..  I still think singular table names are more logical ;p

> > In short, I'd recommend singluar nouns, with M-M
> > link tables as one__two where one and two are 
> > tables being linked to.

I think that my version with the 'xref' in the name is more readable.

> One could reasonably argue that it is not important to have 
> a table-naming rule in the coding standard.  I don't really 
> care either way, but I happen to like using plural names for 
> tables, and I'll use it regardless of what the Twisted coding std 
> says anyhow, because I use my own O-R mapping instead of t.e.row 
> (mine is different from t.e.row in many ways, but it does map plural 
> table names to singular object names ;^).

well, I beleive it's in the coding standard for the purpose of modules
that rely on a database schema of some sort.  It never hurts to develop
your code in line with the standards of a large framework you're using,
and if it doesn't make sense, you could question it (as we're doing
now).

Cheers,

-j




From justin at gnubia.net  Sun Apr  6 15:21:12 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 16:21:12 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049618946.20886.598.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
Message-ID: <1049656171.6953.312.camel@qutang.gnubian.org>

Dave,

Thanks for your response / comments..

> I think your diagnosis is correct. The current t.e code does not handle
> default values in the database schema, afaik. Given that, and the fact
> that the reflector wants to cache rows by primary keys, it can't support
> leaving primary keys unset before you create a new row.

I'm working on a patch that may allow this for key columns..

> What I have done with postgres is to generate the primay key using
> the nextval function on the sequence used for the serial column, setting
> the row object's primary key, and then inserting it. This makes the t.e
> code happy and you often need to know the new key anyway.

This will work but imho is a bit silly and not generally the way that I
expect a database application to work.  If I set the default value on a
column, I shouldn't have to handle that in my code.  Additionally, if
you have a large development team with a DBA who manages the DB schema,
changing the default value for a column shouldn't require a db change
_and_ a code change.. that's inefficient and bug prone..

> It would be nice to make t.e allow for default values and db-generated
> primary keys, but that code would almost certainly need to be 
> per-database since different databases handle serial/autoincrement
> columns differently.

I don't really see how allowing key columns to be ignored on an insert
would be database specific..  Ideally, whether or not a default value is
supplied by the database could be kept in rowColumns.  You could then
set a value to allow or disallow setting of key columns with a default
value provided by the database.  This would prevent twisted from
encountering errors, so long as you define your schema correctly. 
Additionally, it would be better for referential integrity's sake..

Anyway, I'd appreciate any comments on my ideas.  I'm evaluating
twisted, including t.e.row, as part of a proposal to migrate our entire
python toolkit to soap or xml-rpc using twisted.  Getting t.e.row to
work in such a way that our large database (515 relations, including
sequences) will not be at risk will be an important part of this task.

Cheers,

-Justin




From itamar at itamarst.org  Sun Apr  6 15:56:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 6 Apr 2003 17:56:44 -0400
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049656171.6953.312.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	<1049618946.20886.598.camel@oneiros>
	<1049656171.6953.312.camel@qutang.gnubian.org>
Message-ID: <20030406175644.5cdf9b49.itamar@itamarst.org>

On 06 Apr 2003 16:21:12 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Anyway, I'd appreciate any comments on my ideas.  I'm evaluating
> twisted, including t.e.row, as part of a proposal to migrate our
> entire python toolkit to soap or xml-rpc using twisted.  Getting
> t.e.row to work in such a way that our large database (515 relations,
> including sequences) will not be at risk will be an important part of
> this task.

You don't have to use t.e.row with Twisted. You can use any other
object/relational mapping system, or a custom one. That being said, the
row maintainer is no longer working on it, so if you want to take it up
and work on it that would be nice.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From justin at gnubia.net  Sun Apr  6 16:42:58 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 17:42:58 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <20030406175644.5cdf9b49.itamar@itamarst.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <20030406175644.5cdf9b49.itamar@itamarst.org>
Message-ID: <1049668978.6958.316.camel@qutang.gnubian.org>

> You don't have to use t.e.row with Twisted. You can use any other
> object/relational mapping system, or a custom one. That being said, the
> row maintainer is no longer working on it, so if you want to take it up
> and work on it that would be nice.

I would very much like to do this.  I've been digging around the code
and I feel pretty comfortable with it.  When you say that row has been
abandoned, does that include the reflectors and such as well?

Cheers,

-Justin




From jml at mumak.net  Sun Apr  6 16:40:43 2003
From: jml at mumak.net (Jonathan M. Lange)
Date: Mon, 7 Apr 2003 08:40:43 +1000
Subject: [Twisted-Python] epydoc-breaking microdom bug
Message-ID: <20030406224043.GA22604@mumak.net>


I've just attempted to generate API docs for twisted using epyrun, which uses
microdom. 

This fails when run with CVS latest, giving a "TypeError: unhashable instance"
when trying to hash a tuple of microdom.Element and something else.

At Moshe's suggestion, I removed the __eq__ methods from microdom in my local
copy, and generated the docs again. It generates the docs fine, but tests
break. Further, I was told that including the __eq__ methods makes the
behaviour of microdom incompatible with that of minidom, and that this is a
really bad thing.

I'm too zonked to patch things properly atm; could someone please fix microdom
and test_xml to not use / rely on __eq__ methods?

cheers,
jml

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030407/df9ed89e/attachment.sig>

From lafou at wanadoo.fr  Sun Apr  6 07:39:30 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sun, 06 Apr 2003 15:39:30 +0200
Subject: [Twisted-Python] Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com>
Message-ID: <b6palq$e1n$1@main.gmane.org>

> If your queries are returning small results, ie,
> non-incremental, I would just set this up as a
> chain of Deferreds and not bother with flow as
> it might be overkill for your needs.

No, this may be used with a very large amount of data.

 
> In other words, in the twisted.enterprise.adbapi
> when you run a query, it returns a deferred.  So
> DS1 and DS2 would be those query results.

I agree with that
 
> Your FS1 and FS2 should be deferred operations
> as well, but fired via the 'addCallback' on
> DS1 and DS2 respectively.

How do you fire it exactly ? Moreover, the tutorial about deferred isn't so
clear for me (twisted newbie).
 
> Then FS3 is a DeferredList taking FS1 and FS2.

Just a note : this system may be dynamic. I mean that the user can create
the "flow" he wants (with various datasources and other blocs).

> If you can use generators, for more complicated flows,
> etrepum's (Bob Ippolito's) approach may be better approach
> to this, although I'm not sure how it would handle more
> 'fluid' flow through the process.  I need to understand
> what he's doing better.   At first I thought his approach
> is very different than mine, but I think (although I'm
> not quite yet able to explain) that they are isomorphic;
> only that I'm using a temp stack and he's using the
> event queue via a linked-list.
> 

I don't really know generators. I'm going to take a look at like tomorow...


> As for the stuff in flow.py, right now it uses a thread
> for each database connection.  Eventually for PostgreSQL,
> I'd like to move over to a non-threaded driver.  Gerhard
> was working on such a thing as I remember.  Also, it may
> be renamed since extrepum was using "flow.py" before me.
> 
> Anyway, the database connection is done through a
> QueryIterator which basically sends a set of rows
> (via fetchmany) on to the next stage.  So, the connection
> from DS1 to FS1 and DS2 to FS2 could be done using
> a simple flow for each.  The problem in the flow module
> has to do with merging the two flows.  This can be done
> by using the 'context'.

3 flows  ? (1 for DS1 to FS1, 1 for DS2 to FS2, and one the merge the 2
others) 

I was thinking of using only one flow. It's weird to seperate this process
in several flow, isn't it ?

 
> In short, it would work, but I'm not sure that it's
> your best option; and I'm still not quite happy with
> flow.py myself (although it is in production).

thank you for your help
 
> Clark

Thank very much Clark !
Philippe




From radix at twistedmatrix.com  Sun Apr  6 19:00:43 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Apr 2003 21:00:43 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] cleanup after test
In-Reply-To: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
References: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
Message-ID: <20030407010043.GE956@radii>

On Sun, Apr 06, 2003 at 02:30:44PM -0500, warner CVS wrote:
> Modified files:
> Twisted/twisted/test/test_journal.py 1.8 1.9
> 
> Log message:
> cleanup after test

Hmm, what's the point of this? I thought any files you create get
stored in the _trial_temp directory (because trial os.chdir()s, or
something), which is explicitly left around for post-mortem
debugging. Or were these tests creating files explicitly in other
locations?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Sun Apr  6 19:11:48 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 6 Apr 2003 21:11:48 -0400
Subject: [Twisted-Python] epydoc-breaking microdom bug
In-Reply-To: <20030406224043.GA22604@mumak.net>
References: <20030406224043.GA22604@mumak.net>
Message-ID: <20030407011148.GF956@radii>

On Mon, Apr 07, 2003 at 08:40:43AM +1000, Jonathan M. Lange wrote:

> This fails when run with CVS latest, giving a "TypeError: unhashable instance"
> when trying to hash a tuple of microdom.Element and something else.
> 
> At Moshe's suggestion, I removed the __eq__ methods from microdom in my local
> copy, and generated the docs again. It generates the docs fine, but tests
> break. Further, I was told that including the __eq__ methods makes the
> behaviour of microdom incompatible with that of minidom, and that this is a
> really bad thing.
> 
> I'm too zonked to patch things properly atm; could someone please fix microdom
> and test_xml to not use / rely on __eq__ methods?

I think all that needs to be done is to add a __hash__ method. Just
make it return id(self) (which is how all instances are hashed by
default -- unless they have an __eq__, for some reason).

I don't know what's up with the microdom/minidom compatibility,
though.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From itamar at itamarst.org  Sun Apr  6 19:30:21 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 6 Apr 2003 21:30:21 -0400
Subject: [Twisted-Python] epydoc-breaking microdom bug
In-Reply-To: <20030407011148.GF956@radii>
References: <20030406224043.GA22604@mumak.net>
	<20030407011148.GF956@radii>
Message-ID: <20030406213021.3753e012.itamar@itamarst.org>

On Sun, 6 Apr 2003 21:11:48 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I think all that needs to be done is to add a __hash__ method. Just
> make it return id(self) (which is how all instances are hashed by
> default -- unless they have an __eq__, for some reason).

Done.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Sun Apr  6 20:35:19 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 02:35:19 +0000
Subject: [Twisted-Python] Re: Re: more thoughts on resumable async data flows
In-Reply-To: <b6palq$e1n$1@main.gmane.org>
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org>
Message-ID: <20030407023519.GA1707@doublegemini.com>

On Sun, Apr 06, 2003 at 03:39:30PM +0200, Philippe Lafoucri�re wrote:
| How do you fire it exactly ? Moreover, the tutorial about deferred isn't so
| clear for me (twisted newbie).


The one in CVS is a bit better, bu t it still isn't by
any means perfect.  Basically 'deferred' is just a 
mechanism for managing callback chains (and errors).
|  
| > Then FS3 is a DeferredList taking FS1 and FS2.
| 
| Just a note : this system may be dynamic. I mean that the user can create
| the "flow" he wants (with various datasources and other blocs).

*nods*

| > As for the stuff in flow.py, right now it uses a thread
| > for each database connection.  Eventually for PostgreSQL,
| > I'd like to move over to a non-threaded driver.  Gerhard
| > was working on such a thing as I remember.  Also, it may
| > be renamed since extrepum was using "flow.py" before me.
| > 
| > Anyway, the database connection is done through a
| > QueryIterator which basically sends a set of rows
| > (via fetchmany) on to the next stage.  So, the connection
| > from DS1 to FS1 and DS2 to FS2 could be done using
| > a simple flow for each.  The problem in the flow module
| > has to do with merging the two flows.  This can be done
| > by using the 'context'.
| 
| 3 flows  ? (1 for DS1 to FS1, 1 for DS2 to FS2, and one the merge the 2
| others) 

Yes.  In my original version, when you see 'flow' think of
a pipeline.  It was the first approximation.  I'm not totally
happy with it...

| I was thinking of using only one flow. It's weird to seperate this process
| in several flow, isn't it ?

Well, your diagram sort of implies a parallel nature, which 
wasn't part of my original requirements.  I have that need
now, so flow needs to be updated to respect this.

If you want to go over this via phone, and you are in the US
or Canada I'd be happy to drop you a line... just send me
your phone number and a good time.

Best,

Clark



From warner at lothar.com  Sun Apr  6 21:56:28 2003
From: warner at lothar.com (Brian Warner)
Date: Sun, 06 Apr 2003 20:56:28 -0700 (PDT)
Subject: [Twisted-Python] Re: [Twisted-commits] cleanup after test
References: <E192Fqm-0006BD-00@pyramid.twistedmatrix.com>
 <20030407010043.GE956@radii>
Message-ID: <20030406.205628.128713269.warner@lothar.com>

> > Twisted/twisted/test/test_journal.py 1.8 1.9
> > 
> > Log message:
> > cleanup after test
> 
> Hmm, what's the point of this? I thought any files you create get
> stored in the _trial_temp directory (because trial os.chdir()s, or
> something), which is explicitly left around for post-mortem
> debugging. Or were these tests creating files explicitly in other
> locations?

Both test_journal and test_logfile use tempfile.mktemp(), which creates new
directories in /tmp. Neither one removed the generated files (test_logfile
had code to do it, but it was commented out). pyramid had nearly a thousand
spurious /tmp/@1234.5 directories, all owned by me because the buildbot was
creating another dozen or so each time the test suite got run.

Those two tests could probably be modified to create temp file in the current
directory, but that change seemed like it had a higher probability of
failing.

cheers,
 -Brian

PS: folks who have run tests on pyramid, please check /tmp/ (and /tmp in the
sid-chroot) for leftover @1234.5 directories and delete them. You'll have to
do a 'chmod a+rwx' on them first because of a bug in the old cleanup code
(chmod(777) instead of chmod(0777)).



From justin at gnubia.net  Sun Apr  6 22:27:46 2003
From: justin at gnubia.net (Justin Ryan)
Date: 06 Apr 2003 23:27:46 -0500
Subject: [Twisted-Python] [PATCH] row / reflector / sqlreflector - case insensitive
 tables/columns
Message-ID: <1049689666.6953.355.camel@qutang.gnubian.org>

Attached is a patch (cvs diff -u) to twisted.enterprise.row (and related
code).  Specifically, it affects the following files:

twisted/enterprise/row.py
twisted/enterprise/reflector.py
twisted/enterprise/sqlreflector.py
twisted/enterprise/util.py

The purpose is to allow for case-sensitive table/column names.  For me,
there are two parts to this:

(1) lots of comparisons in twisted use string.lower
(RowObject.__getattr__(), etc..).  There, theoretically, shouldn't be
any column names that are the same except for their case, but it still
seems logical to allow for case-sensitivity.  This change depends on the
RowObject's case_sensitive_relations attribute (which must be set by
child classes).

(2) I use postgres, and postgres requires you to enclose mixed-case
relation names in double quotes.  Thus, twisted needs to quote table
names, column names, etc..  This change depends on the sqlreflector's
quote_relations attribute, which can be passed as a keyword paramater to
sqlreflector.__init__().

I have given this some basic testing, but am mostly posting it for
scrutiny whilst I continue to work on it.  I think there are some areas
that can be improved, but it works and is pretty clean.

I think that this would be an appropriate time to state my intent to
become the maintainer of the row code, since it has apparently become
abandoned.  I have several other changes in mind, including the ability
to insert new rows without setting their primary keys and such, but I
thought that I should start submitting patches for little stuff to make
sure that the code I'm writing is sane for twisted.

TIA,

-Justin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: row-case.diff.final
Type: text/x-patch
Size: 9837 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030406/13708381/attachment-0002.bin>

From justin at gnubia.net  Mon Apr  7 01:44:37 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 02:44:37 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049618946.20886.598.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
Message-ID: <1049701477.6953.383.camel@qutang.gnubian.org>

> What I have done with postgres is to generate the primay key using
> the nextval function on the sequence used for the serial column, setting
> the row object's primary key, and then inserting it. This makes the t.e
> code happy and you often need to know the new key anyway.

Could you post the code that does this, or a simple example of how you
are doing it?

Thanks!

-Justin




From dave at krondo.com  Mon Apr  7 02:30:11 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 01:30:11 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049656171.6953.312.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
Message-ID: <1049704211.19679.18.camel@oneiros>

On Sun, 2003-04-06 at 14:21, Justin Ryan wrote:
> > What I have done with postgres is to generate the primay key using
> > the nextval function on the sequence used for the serial column, setting
> > the row object's primary key, and then inserting it. This makes the t.e
> > code happy and you often need to know the new key anyway.
> 
> This will work but imho is a bit silly and not generally the way that I
> expect a database application to work.  If I set the default value on a
> column, I shouldn't have to handle that in my code.  Additionally, if
> you have a large development team with a DBA who manages the DB schema,
> changing the default value for a column shouldn't require a db change
> _and_ a code change.. that's inefficient and bug prone..

Sure, I'm not saying it's the best way, just the way I've done it 
before.


> > It would be nice to make t.e allow for default values and db-generated
> > primary keys, but that code would almost certainly need to be 
> > per-database since different databases handle serial/autoincrement
> > columns differently.
> 
> I don't really see how allowing key columns to be ignored on an insert
> would be database specific..  Ideally, whether or not a default value is

I don't think I fully articulated my thoughts. Currently the 'reflector'
code caches the rows you create. So, ideally, if the database is going
to set default values on a new row, you'd like the reflector to update
the row object with whatever values the database chose to maintain
consistency between the row object and the database. I haven't
thought about it too closely, but it seems to me that there's no
way to implement that in a database-independent way, but maybe I'm
just missing something.

What do you think?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030407/0e14a623/attachment.sig>

From dave at krondo.com  Mon Apr  7 02:42:08 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 01:42:08 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049701477.6953.383.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049701477.6953.383.camel@qutang.gnubian.org>
Message-ID: <1049704928.19679.26.camel@oneiros>

On Mon, 2003-04-07 at 00:44, Justin Ryan wrote:
> > What I have done with postgres is to generate the primay key using
> > the nextval function on the sequence used for the serial column, setting
> > the row object's primary key, and then inserting it. This makes the t.e
> > code happy and you often need to know the new key anyway.
> 
> Could you post the code that does this, or a simple example of how you
> are doing it?

One strategy I used was to subclass SQLReflector for postgres
databases like so:

class PGSQLReflector(SQLReflector):

    def newRow(self, row_class, template=None):
        return self.runInteraction(self._newRow, row_class, template)

    def _newRow(self, transaction, row_class, template=None):
        row = row_class()

        if template is not None:
            for column, _ in row_class.rowColumns:
                if (hasattr(template, column) and
                    not getKeyColumn(row_class, column)):
                    setattr(row, column, getattr(template, column))

        for key, _ in row_class.rowKeyColumns:
            sql = "SELECT NEXTVAL('%s');" % row_class.keyGenerators[key]
            transaction.execute(sql)
            val = transaction.fetchone()[0]
            row.assignKeyAttr(key, long(val))

        return row

This requires that you specify the names of the sequences used
to generate the keys in the row class. Obviously this code isn't
very general, since it assumes keys will always be generated by 
sequences.

For your extensions which allow defaults, it might be better
to insert the row and then use the 'lastval' function to find
out what key was assigned to the row.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030407/f1d0b846/attachment.sig>

From imunoz at daipro.net  Mon Apr  7 03:09:37 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Mon, 7 Apr 2003 11:09:37 +0200
Subject: [Twisted-Python] Oscar protocol information?
Message-ID: <004001c2fce5$6b499550$78924fd4@isidro>

Hello.

Where could I find information of Oscar protocol (AIM)?

Thanks.
Isidro Muñoz.




From bob at redivi.com  Mon Apr  7 04:58:06 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 7 Apr 2003 06:58:06 -0400
Subject: [Twisted-Python] Copyright issues in the sandbox?
Message-ID: <CFEC2291-68E7-11D7-9A7D-000A95686CD8@redivi.com>

Two quick legalityish questions:

1) Is it acceptable to commit sets.py (from Python 2.3) into the sandbox
2) I made a pure python (2.2.x+) implementation of itertools, but I 
stole 99% of the code from the "Equivalent to:" text in the 
documentation for the C module ( 
http://www.python.org/dev/doc/devel/lib/itertools-functions.html ), is 
that legal to put into the sandbox?

-bob




From justin at gnubia.net  Mon Apr  7 07:43:29 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 08:43:29 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049704211.19679.18.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
Message-ID: <1049723009.10840.386.camel@qutang.gnubian.org>

> > I don't really see how allowing key columns to be ignored on an insert
> > would be database specific..  Ideally, whether or not a default value is
> 
> I don't think I fully articulated my thoughts. Currently the 'reflector'
> code caches the rows you create. So, ideally, if the database is going
> to set default values on a new row, you'd like the reflector to update
> the row object with whatever values the database chose to maintain
> consistency between the row object and the database. I haven't
> thought about it too closely, but it seems to me that there's no
> way to implement that in a database-independent way, but maybe I'm
> just missing something.
> 
> What do you think?

Welll...

I think that if you insert a row and allow the database to assign the
pkey, you can select out the pkey.  I'm not sure this is more efficient
than selecting nextval() before insert, but it would be more
database-independent..




From justin at gnubia.net  Mon Apr  7 07:46:25 2003
From: justin at gnubia.net (Justin Ryan)
Date: 07 Apr 2003 08:46:25 -0500
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049704928.19679.26.camel@oneiros>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049701477.6953.383.camel@qutang.gnubian.org>
	 <1049704928.19679.26.camel@oneiros>
Message-ID: <1049723185.6953.390.camel@qutang.gnubian.org>

> This requires that you specify the names of the sequences used
> to generate the keys in the row class. Obviously this code isn't
> very general, since it assumes keys will always be generated by 
> sequences.

Can you subclass KeyFactory to do something like this I wonder?

> For your extensions which allow defaults, it might be better
> to insert the row and then use the 'lastval' function to find
> out what key was assigned to the row.

Not a bad idear - I missed this before sending my last post.  I beleive
that what I may do is allow for this in an abstract, db-independent way,
and then provide an example PSQLReflector that is db-dependent.  We
shall see ;p

Thanks again!

-Justin




From david at acz.org  Mon Apr  7 10:28:35 2003
From: david at acz.org (David Phillips)
Date: Mon, 7 Apr 2003 11:28:35 -0500
Subject: [Twisted-Python] enterprise.row
References: <1049574011.1503.45.camel@qutang.gnubian.org> <1049618946.20886.598.camel@oneiros> <1049656171.6953.312.camel@qutang.gnubian.org> <1049704211.19679.18.camel@oneiros> <1049723009.10840.386.camel@qutang.gnubian.org>
Message-ID: <004301c2fd22$bc661fc0$0201a8c0@brinstar>

Justin Ryan writes:
> I think that if you insert a row and allow the database to assign the
> pkey, you can select out the pkey.  I'm not sure this is more
> efficient than selecting nextval() before insert, but it would be more
> database-independent..

Some databases have an efficient way to get the key for the last row that
was inserted.  MySQL, for example, has mysql_insert_id() and
LAST_INSERT_ID():

http://www.mysql.com/doc/en/mysql_insert_id.html
http://www.mysql.com/doc/en/Miscellaneous_functions.html#IDX1347

--
David Phillips <david at acz.org>
http://david.acz.org/




From jdub at perkypants.org  Mon Apr  7 11:54:20 2003
From: jdub at perkypants.org (Jeff Waugh)
Date: Tue, 8 Apr 2003 03:54:20 +1000
Subject: [Twisted-Python] libivykis: Useful for Twisted?
Message-ID: <20030407175420.GY3705@lazarus>

"libivykis is a thin wrapper over various OS'es implementation of I/O
readiness notification facilities (sich as poll(2), kqueue(2)) and is mainly
intended for writing portable high-performance network servers."

Useful for Twisted? (spiv was telling me about unreleased epoll goodness,
perhaps this will help the Free World?)

- Jeff

-- 
GU4DEC: June 16th-18th in Dublin, Ireland             http://www.guadec.org/
 
       "Have you ever kissed a girl?" - Bryan Cantrill to Dave Miller



From itamar at itamarst.org  Mon Apr  7 11:57:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 7 Apr 2003 13:57:47 -0400
Subject: [Twisted-Python] libivykis: Useful for Twisted?
In-Reply-To: <20030407175420.GY3705@lazarus>
References: <20030407175420.GY3705@lazarus>
Message-ID: <20030407135747.76354cfe.itamar@itamarst.org>

On Tue, 8 Apr 2003 03:54:20 +1000
Jeff Waugh <jdub at perkypants.org> wrote:

> "libivykis is a thin wrapper over various OS'es implementation of I/O
> readiness notification facilities (sich as poll(2), kqueue(2)) and is
> mainly intended for writing portable high-performance network
> servers."
> 
> Useful for Twisted? (spiv was telling me about unreleased epoll
> goodness, perhaps this will help the Free World?)

Yes. Looks like we could use this as a basis for a cReactor, and
automatically get platform specific high-performance I/O. There might be
some benefit in a python reactor using a C extension, but that is less
certain.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From fog at initd.org  Mon Apr  7 12:15:37 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 07 Apr 2003 20:15:37 +0200
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <004301c2fd22$bc661fc0$0201a8c0@brinstar>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
	 <1049723009.10840.386.camel@qutang.gnubian.org>
	 <004301c2fd22$bc661fc0$0201a8c0@brinstar>
Message-ID: <1049739337.916.15.camel@momo.initd.org>

Il lun, 2003-04-07 alle 18:28, David Phillips ha scritto:
> Justin Ryan writes:
> > I think that if you insert a row and allow the database to assign the
> > pkey, you can select out the pkey.  I'm not sure this is more
> > efficient than selecting nextval() before insert, but it would be more
> > database-independent..
> 
> Some databases have an efficient way to get the key for the last row that
> was inserted.  MySQL, for example, has mysql_insert_id() and
> LAST_INSERT_ID():

DBAPI-2.0 defines an optional .lastrowid attribute on cursors.
 
-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                      The number of the beast: vi vi vi. -- Delexa Jones
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030407/c41bf2ed/attachment.sig>

From mclay at python.net  Mon Apr  7 13:00:09 2003
From: mclay at python.net (Michael McLay)
Date: Mon, 7 Apr 2003 15:00:09 -0400
Subject: [Twisted-Python] Twisted systems talking to one another
Message-ID: <200304071500.09093.mclay@python.net>

Are there any examples of having two twisted servers exchanging information. 
The scenario I need to automate is one in which an Original Equipment 
Manufacturer (OEM) negotiating a contract with an Electronic Manufacturer 
Systems (EMS) company. The EMS would procure parts and build a product, such 
as a generic personal computer, a router, or some other type of electronics 
that are mass produced, but with very short product lifecycles.

In this scenario the OEM would use PerspectiveBroker to publish the content of 
a Request for Quote. The contents of the product data package would not be 
entirely revealed to potential bidders. The data would be gradually made 
available based on the state of negotiation in the contracting process. This 
pattern parallels the gradual disclouse of information about the virtual 
world in a MUDD game. 

The trading partners who may wish to bid on the RFQ would copy the initial RFQ 
announcement to the local server where they could run an analysis program 
over the basic contract requirements. If the initial requirements look 
promising they would submit a request for additional information, passing in 
their qualifications in exchange for the added information. A non-disclosure 
agreement would be part of this exchange. Then eventually goal would be to 
respond to the RFQ with a quote and receive a contract to build the OEMs 
product. Between the initial receipt of the RFQ and the sending of the quote 
the two servers would engage in a series of moderated transactions for 
negotiating the terms and conditions for the contract, as well as negotiating 
the schedule for delivery and the potential to substitute parts in the 
assembly process. Some of the transactions between the two companies could be 
totally automated, while others may require human intervention in the 
decision making process.

According to the PerspectiveBroker documents I think this process could be 
made to work. One problem will be in setting up a universal authentication 
mechanism. This may just require using LDAP at all trading partnet sites and 
then federating the LDAP servers into a trading community. I haven't done 
something like that before, so that might be a bit of a challenge.

There are standards for the informationthat need to be used during the 
transactions (RosettaNet and OAG define that XML representations of documents 
such as an RFQ; and IPC defines representations for bills of materials of 
parts to be used and full product data packages), so I won't need to make up 
that part of the system. The rules governing the negotiations are partially 
defined in the workflow definitions of the document standards. I think most 
of the effort will be in building Gtk user interfaces and building the 
business logic to support the interaction between the trading partners. Each 
stage in the negotiation process needs to be scripted and a user interface 
needs to be created. 

So back to my original question. Are their examples that do something similar, 
perhaps in a different context. Do TwistedMatrix MUDD worlds talk to each 
other, do characters and materials shift between worlds, or is each world 
operating in isolation?

I can envision how the operation of the trading partner community could be 
created as a game, or manufacturing simulation environment. Once the bugs 
were worked out the simulator could be used to build and manage a real world 
virtual manufacturing community. Anyone care to estimate how long it might 
take to build the game version of the system using Twisted? I'm too new to 
the software to have a clue on what will be involved. 




From cce at clarkevans.com  Mon Apr  7 13:37:33 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 19:37:33 +0000
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <1049653574.978.67.camel@golux>
References: <20030406175304.GA756@doublegemini.com> <1049653574.978.67.camel@golux>
Message-ID: <20030407193733.GA4247@doublegemini.com>

On Sun, Apr 06, 2003 at 02:26:13PM -0400, Steve Waterbury wrote:
| On Sun, 2003-04-06 at 13:53, Clark C. Evans wrote:
| > I noticed  in the Twisted Coding Standard that...
| > 
| >    "Database tables shall be named with plural nouns"
| > 
| > I'd like to question this standard for several reasons:
| > [ some trimming for brevity ]
| > 
| >   3. It is helpful to name foreign key columns as the
| >      same name as the table that they are coming from.
| 
| What if you have more than one foreign key to the same 
| table?  A very simple example (from my app ;^):  the 
| attributes "owner", "creator", and "modifier" all point 
| to the "persons" table.  As a rule of thumb, it's usually 
| best to name the foreign key column after the role that 
| the foreign key entity plays in the referring table.

If there is more than one role, I usually use 'role_table'
for my foreign keys.  Otherwise it gets to be a bit messy,
especially if you use inheritance of sorts (there is not
only a person table but also an employee table, etc.) in
that case, 'creator' isn't good enough in some cases, you
may mean 'employee_creator' as not all person objects 
may be possible of creating.

| >   5. While there are astechic reasons for this (above)
| >      the resons become all the more important when 
| >      you want to build automatic tools for searching 
| 
| I didn't think it was all that difficult.  I can send you
| the O-R mapping I use, if you like.

I'm not saying it isn't possible, it is just unnecessary
complexity, and to mandate this is quite irksome.

| > In short, I'd recommend singluar nouns, with M-M
| > link tables as one__two where one and two are 
| > tables being linked to.
| 
| One could reasonably argue that it is not important to have 
| a table-naming rule in the coding standard. 

That makes sense.  I'd rather no standard is better than
a bad one.  ;) Clark



From glyph at twistedmatrix.com  Mon Apr  7 14:15:51 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Apr 2003 16:15:51 -0400
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <20030407193733.GA4247@doublegemini.com>
Message-ID: <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday, April 7, 2003, at 03:37 PM, Clark C. Evans wrote:

> | One could reasonably argue that it is not important to have
> | a table-naming rule in the coding standard.
>
> That makes sense.  I'd rather no standard is better than
> a bad one.  ;) Clark

I disagree.

While I don't feel particularly strongly about it one way or another, 
pretty much anything that isn't language-mandated ought to be 
standardized so that newcomers to the codebase at least get a common 
feel for certain kinds of naming.

Keep in mind that your personal coding standards need not adhere to the 
Twisted one - that standard is only for code actually checked in to the 
Twisted tree.  It may even be useful for products to diverge, so that 
someone reading code, schemas, or whatever can easily guess which 
components are from which codebase.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+kdx8vVGR4uSOE2wRAg8CAJ4lk+OyVG2ggtanqXZah/AI0WX3DACfbus8
63G1iFDroGKcxWR6IiLxhYQ=
=nhYa
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Mon Apr  7 00:06:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Mon, 07 Apr 2003 08:06:06 +0200
Subject: [Twisted-Python] Re: Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org> <20030407023519.GA1707@doublegemini.com>
Message-ID: <b6r4fk$juf$1@main.gmane.org>

> Well, your diagram sort of implies a parallel nature, which
> wasn't part of my original requirements.  I have that need
> now, so flow needs to be updated to respect this.
> 
> If you want to go over this via phone, and you are in the US
> or Canada I'd be happy to drop you a line... just send me
> your phone number and a good time.

:-(
I am in France near Paris !
but this is my personnal adress : lafou<at>wanadoo<dot>fr
and my icq number : 2376706
finally, my msn id : plafoucr at hotmail.com (eark, I hate msn)

Thank you again Clark
 





From dave at krondo.com  Mon Apr  7 14:17:46 2003
From: dave at krondo.com (Dave Peticolas)
Date: 07 Apr 2003 13:17:46 -0700
Subject: [Twisted-Python] enterprise.row
In-Reply-To: <1049723009.10840.386.camel@qutang.gnubian.org>
References: <1049574011.1503.45.camel@qutang.gnubian.org>
	 <1049618946.20886.598.camel@oneiros>
	 <1049656171.6953.312.camel@qutang.gnubian.org>
	 <1049704211.19679.18.camel@oneiros>
	 <1049723009.10840.386.camel@qutang.gnubian.org>
Message-ID: <1049746666.19679.41.camel@oneiros>

On Mon, 2003-04-07 at 06:43, Justin Ryan wrote:
> > > I don't really see how allowing key columns to be ignored on an insert
> > > would be database specific..  Ideally, whether or not a default value is
> > 
> > I don't think I fully articulated my thoughts. Currently the 'reflector'
> > code caches the rows you create. So, ideally, if the database is going
> > to set default values on a new row, you'd like the reflector to update
> > the row object with whatever values the database chose to maintain
> > consistency between the row object and the database. I haven't
> > thought about it too closely, but it seems to me that there's no
> > way to implement that in a database-independent way, but maybe I'm
> > just missing something.
> > 
> > What do you think?
> 
> Welll...
> 
> I think that if you insert a row and allow the database to assign the
> pkey, you can select out the pkey.  I'm not sure this is more efficient
> than selecting nextval() before insert, but it would be more
> database-independent..

That would only work if twisted is the only process adding rows,
I think.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030407/9af5cb07/attachment.sig>

From cce at clarkevans.com  Mon Apr  7 15:45:51 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 7 Apr 2003 21:45:51 +0000
Subject: [Twisted-Python] coding standard: plurals for database table	names
In-Reply-To: <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
References: <20030407193733.GA4247@doublegemini.com> <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
Message-ID: <20030407214551.GA4832@doublegemini.com>

On Mon, Apr 07, 2003 at 04:15:51PM -0400, Glyph Lefkowitz wrote:
| On Monday, April 7, 2003, at 03:37 PM, Clark C. Evans wrote:
| >| One could reasonably argue that it is not important to have
| >| a table-naming rule in the coding standard.
| >
| >That makes sense.  I'd rather no standard is better than
| >a bad one.  ;) Clark
| 
| I disagree.

I feel almost embarrassed to bring this item up, as it seems so
trivial... but I think it deserves to be reviewed.

Everything else in the coding standard is very clear and resonably 
justified.  This particular item just stands out from the rest as 
quite arbitrary -- and based on my experience, giving addititional 
complexity without any commensurate advantages, especially for
those who do not have English as their primary language.

The English language can be quite complex, and Plurals and
their rules are a good part of this complexity.  For example,
plural nouns often sound the same as posessive nouns, and this
makes learning them more difficult.  Furthermore, plurals have
irregular forms, or use s or es, sometimes dropping one or more
letters before the modifier.  Even the notion of plurals themselves
is not really a universal construct, as I understand some 
languages use an adjective meaning 'one or more' in conjunction
with singluar nouns to make them plural rather than modifying
the word itself.  Some words are used as both singluar and 
plural.  And lastly, plurals enter into the whole range of 
collective nounds, which differ in their singluar/plural treatment 
depending if you are English or American.  In short, it's just ugly.  
And there isn't any advantage to *requiring* them; especially
when Internationalization is important.

The only somewhat-convincing argument that I've heared for it,
is that "SELECT * FROM people" seems to make more sense than
"SELECT * FROM person".  However, even this advantage falls
apart as soon as you add a where clause...  
   SELECT first_name FROM people 
   WHERE people.last_name = 'Evans'

I like person.last_name myself...

| While I don't feel particularly strongly about it one way or another, 
| pretty much anything that isn't language-mandated ought to be 
| standardized so that newcomers to the codebase at least get a common 
| feel for certain kinds of naming.

I feel that too much standardization can be a bad thing, 
especially when they bring unnecessary complexity.

Best,

Clark



From z3p at twistedmatrix.com  Mon Apr  7 15:51:57 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 07 Apr 2003 17:51:57 -0400
Subject: [Twisted-Python] Oscar protocol information?
In-Reply-To: <004001c2fce5$6b499550$78924fd4@isidro>
Message-ID: <3E91BABD.17017.8A593C@localhost>

On 7 Apr 2003 at 11:09, Isidro Muñoz wrote:

> Where could I find information of Oscar protocol (AIM)?

The Twisted implementation lives in 
twisted/protocols/oscar.py.  If you've got any 
questions on how it works, you can get int touch 
with me (I'm the maintainer.)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From fog at initd.org  Mon Apr  7 16:39:29 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 08 Apr 2003 00:39:29 +0200
Subject: [Twisted-Python] coding standard: plurals for database
	table	names
In-Reply-To: <20030407214551.GA4832@doublegemini.com>
References: <20030407193733.GA4247@doublegemini.com>
	 <BA922D7E-6935-11D7-AF6F-000393C9700E@twistedmatrix.com>
	 <20030407214551.GA4832@doublegemini.com>
Message-ID: <1049755169.920.85.camel@momo.initd.org>

Il lun, 2003-04-07 alle 23:45, Clark C. Evans ha scritto:

> The only somewhat-convincing argument that I've heared for it,
> is that "SELECT * FROM people" seems to make more sense than
> "SELECT * FROM person".  However, even this advantage falls
> apart as soon as you add a where clause...  
>    SELECT first_name FROM people 
>    WHERE people.last_name = 'Evans'
> 
> I like person.last_name myself...

from a non-native english speaker perspective... i don't understand why.
a WHERE clause can select more than just one persone, i.e., people.
using plurals seems correct and beautifull to me.

> I feel that too much standardization can be a bad thing, 
> especially when they bring unnecessary complexity.

i don't seeany complexity in using plurals.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  We are all dust, Saqi, so play the lute
                    We are all wind, Saqi, so bring wine. -- Omar Khayam
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030408/507b614b/attachment.sig>

From radix at twistedmatrix.com  Mon Apr  7 20:49:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 7 Apr 2003 22:49:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
Message-ID: <20030408024919.GG956@radii>

So, I've discovered[1] something new about Windows. Basically, there's
no such thing as `argv' in win32-land, and each program has to parse
its command-line manually (I had known that they had to do wild-card
expansion manually, but not parse the entire damned string). This
isn't so much the problem as there is no sane Win32 API for starting a
process with a sequence of arguments. The reason this is a problem is
that Twisted's Process API uses sequences of arguments.

In light of this, I have a few somewhat-orthogonal proposals to make,
but I think they should all be done (well, except, perhaps, the last):

 * Add a method to the Win32 Process Interface (IWin32Process?) that
   accepts a string rather than an executable and a list of args. We
   should allow people to use the (unfortunately) sanest method
   available for starting processes on Windows.

 * Add a warning to win32eventreactor.Process.__init__ (in the case
   that the user passed in a sequence of args) that tells people about
   this problem.

 * Add some auto-quoting evilness[2] to
   win32eventreactor.Process.__init__, for when arguments are passed
   as a sequence. What we have there absolutely sucks (" ".join), and we
   should probably at least try to make the existing API as reliable 
   as possible.

 * Perhaps make the string "command-line" API available on
   PosixProcess as well, so people can use either the string or the
   sequence API and expect at least some bit of cross-platformness (but
   I'm fine with telling people to just use the sequence API if others
   don't like this, especially considering this either requires
   calling out to a shell (gah), or doing some unfun argument-splitting.)

*whimper* :-(

References:
[1] http://mail.python.org/pipermail/python-win32/2003-April/000906.html
[2] <exarkun> ' '.join(['"%s"' % (s.replace('\\', '\\\\').replace('"',
              '\\"')) for s in args[1:]])

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From imunoz at daipro.net  Tue Apr  8 03:15:48 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Tue, 8 Apr 2003 11:15:48 +0200
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost>
Message-ID: <000b01c2fdaf$722b0000$78924fd4@isidro>

Thanks, Paul.

I'm C++ programmer.
I don't understand python.

I would like find information of Oscar protocol to analysis it, commands,
sockets, password, etc.

Sorry, my English isn't very good. I'm Spanish.

Thansks.
Isidro.


----- Original Message -----
From: "Paul Swartz" <z3p at twistedmatrix.com>
To: <twisted-python at twistedmatrix.com>
Sent: Monday, April 07, 2003 11:51 PM
Subject: Re: [Twisted-Python] Oscar protocol information?


On 7 Apr 2003 at 11:09, Isidro Muñoz wrote:

> Where could I find information of Oscar protocol (AIM)?




From andrew-twisted at puzzling.org  Tue Apr  8 07:36:53 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:36:53 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <001b01c2f992$df756770$0201a8c0@brinstar>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <001b01c2f992$df756770$0201a8c0@brinstar>
Message-ID: <20030408133653.GC8291@frobozz.local>

On Wed, Apr 02, 2003 at 09:41:12PM -0600, David Phillips wrote:
> Stefano Maniero writes:
> > Can anyone indicate an example or doc for developing ftp server?
> 
> This reference manual for FTP might be useful:
> 
> http://cr.yp.to/ftp.html

In fact, that's the primary reference I used to implement Twisted's FTP
client.  :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 07:39:17 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:39:17 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <20030402101203.33888dc2.itamar@itamarst.org>
References: <1049272088.3e8a9f186d8df@sferamail.sfera.net> <20030402101203.33888dc2.itamar@itamarst.org>
Message-ID: <20030408133917.GD8291@frobozz.local>

On Wed, Apr 02, 2003 at 10:12:03AM -0500, Itamar Shtull-Trauring wrote:
> On Wed,  2 Apr 2003 10:28:08 +0200
> Stefano Maniero <smaniero at sfera.net> wrote:
> 
> > I'm a new developer in twisted. I want test twisted writing an ftp
> > server.
> > 
> > Can anyone indicate an example or doc for developing ftp server? In
> > twisted distribution I didn't find it.
> 
> twisted.protocols.ftp has code for a FTP server that serves files from
> the filesystem. It's not pluggable, and needs a lot of work, but it
> could be used as a basis for a cleaned up refactored server.

It also doesn't use twisted.cred at the moment, so not only are the
resources it serves not pluggable, neither is the authentication.

I'm planning on doing an FTP server rewrite "soon", based on the new
infrastructure that the FTP client now uses (thanks to radix for helping me
with that!).  Given my track record at doing things "soon", I probably
wouldn't hold my breath, though :)

-Andrew.




From david at acz.org  Tue Apr  8 09:03:36 2003
From: david at acz.org (David Phillips)
Date: Tue, 8 Apr 2003 10:03:36 -0500
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost> <000b01c2fdaf$722b0000$78924fd4@isidro>
Message-ID: <005801c2fde0$0813c450$0201a8c0@brinstar>

Isidro Muñoz writes:
> I would like find information of Oscar protocol to analysis it,
> commands, sockets, password, etc.

http://www.google.com/search?q=oscar+protocol

--
David Phillips <david at acz.org>
http://david.acz.org/




From andrew-twisted at puzzling.org  Tue Apr  8 07:42:31 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:42:31 +1000
Subject: [Twisted-Python] What's twistd doing on Windows?
In-Reply-To: <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>
References: <20030403231606.GC24393@radii> <67414075-662C-11D7-96D9-000A95686CD8@redivi.com>
Message-ID: <20030408134231.GE8291@frobozz.local>

On Thu, Apr 03, 2003 at 06:31:32PM -0500, Bob Ippolito wrote:
> On Thursday, Apr 3, 2003, at 18:16 America/New_York, Christopher 
> Armstrong wrote:
> 
> >On Thu, Apr 03, 2003 at 05:16:02PM -0500, Alan McIntyre wrote:
> >>I did notice something that I'm curious about: I've been running two
> >>Twisted web instances, one on a Win2k machine (1.4GHz P4, Python 2.2.2)
> >>and one on a Debian machine (266MHz PII, Python 2.1.3) for a few days
> >>now, and the Windows instance has accumulated almost an hour of CPU time
> >>wherease the Debian instance has only used 2 seconds.  What's the Win32
> >>instance doing while it's idle? (It's not a big deal, I'm just curious)
> >
> >My first guess would be that the system calls involved (e.g., select)
> >are more expensive than on linux, but that's just a wild guess. I
> >doubt profiling would be much help, but maybe you (or someone) could
> >write a simple test that just recorded the time it takes to run an
> >immediately-returning select() a few thousand times.
> 
> IIRC, the Twisted select reactor has a "background process" that gets 
> triggered once a second or so when running on windows just to break the 
> select() call (I don't believe it actually does anything).  I believe 
> this is because processes in windows don't respond to signals (like 
> ctrl-c, for example) during a select() call, so this 
> convenience/workaround was put into the codebase.

Unless the implementation has changed significantly since I last looked at
it, this is the correct answer.  The select call under win32 times out every
second so that Ctrl-C/Ctrl-Break and other things (like stopping a Twisted
program running as a WinNT service) happen in a timely fashion, rather than
relying on network activity to wake it up.

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 07:47:08 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:47:08 +1000
Subject: [Twisted-Python] release momentum
In-Reply-To: <1049480936.10270.52.camel@troglodyte.funhouse>
References: <1049480936.10270.52.camel@troglodyte.funhouse>
Message-ID: <20030408134708.GF8291@frobozz.local>

On Fri, Apr 04, 2003 at 10:28:59AM -0800, Kevin Turner wrote:
[...]
> Tests we're having problems with:
[...]
> 
>  * testStor in test_ftp, intermittent failures.

This is a new test, but an old problem.  The bug here is in the FTP server
(even though we wrote the test to test the new client support for STOR,
which seems to work just fine), and it hasn't changed for months.  On the
other hand, the failures are intermittent, and I suspect it's only a problem
in the test case (it's some sort of timing issue with having the same
process on either end of the socket, I think).

In short: the testStor test failure shouldn't hold up the release :)

-Andrew.




From andrew-twisted at puzzling.org  Tue Apr  8 07:56:29 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 8 Apr 2003 23:56:29 +1000
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408024919.GG956@radii>
References: <20030408024919.GG956@radii>
Message-ID: <20030408135629.GG8291@frobozz.local>

On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> So, I've discovered[1] something new about Windows. Basically, there's
> no such thing as `argv' in win32-land, and each program has to parse
> its command-line manually (I had known that they had to do wild-card
> expansion manually, but not parse the entire damned string). This
> isn't so much the problem as there is no sane Win32 API for starting a
> process with a sequence of arguments. The reason this is a problem is
> that Twisted's Process API uses sequences of arguments.
> 
> In light of this, I have a few somewhat-orthogonal proposals to make,
> but I think they should all be done (well, except, perhaps, the last):

Do you have a use-case where the current string-joining breaks?  And if a
Twisted user really cared about passing arguments on Win32, wouldn't it be
easiest to just let them take care of it, e.g.:
    if sys.platform == 'win32':
        args = ["one big string"]
    else:
        args = ["one", "big", string"]
    ...
    
?

I'm not sure that adding lots of platform-dependent infrastructure to
Twisted can offer anything better than that, anyway, so we may as well keep
it simple.

I'm willing to be proved wrong, though -- it's not like I use Win32 anymore
:)

-Andrew.




From itamar at itamarst.org  Tue Apr  8 09:33:20 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 11:33:20 -0400
Subject: [Twisted-Python] Resource bug?
Message-ID: <20030408113320.6e45870f.itamar@itamarst.org>

Any reason the following is not the way resources work by default? And
would the change break backwards compatability?

*** resource.py.~1.23.~	Mon Mar 10 12:10:16 2003
--- resource.py	Tue Apr  8 11:18:50 2003
***************
*** 57,64 ****
      def listStaticEntities(self):
          return self.children.items()
  
!     listNames = listStaticNames
!     listEntities = listStaticEntities
  
      def listDynamicNames(self):
          return []
--- 57,67 ----
      def listStaticEntities(self):
          return self.children.items()
  
!     def listNames(self):
!         return self.listStaticNames() + self.listDynamicNames()
! 
!     def listEntities(self):
!         return self.listStaticEntities() + self.listDynamicEntities()
  
      def listDynamicNames(self):
          return []


-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jasper at peak.org  Tue Apr  8 13:32:11 2003
From: jasper at peak.org (Jasper Phillips)
Date: Tue, 8 Apr 2003 12:32:11 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
Message-ID: <Pine.LNX.4.44.0304081118030.12962-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I was talking with Kevin Turner at the pub last night after the "Porpig"
meeting, and he mentioned having the same problem with circular references I
was having, so I offered to post the klu... err, patch I had for the problem.


In short, it checks for _Dereference's (corresponding to dictionaries not yet
available) that are destined to be (erroneously) copied into the __dict__ of
an object that is then returned.  When one is found, it is returned instead
without a containing object, and a method object is scheduled to be run
via postUnjelly.

Later on (in crefutil.py), after the _Derefence has been magically replaced
by it's corresponding dictionary, the dictionary is taken and stored in
the __dict__ of a newly created object.  Even later, the postUnjelly
scheduled earlier is called, which sets the __class__ of the manually
created object.


This is a pretty hideous fix!  But it is minimal, and I think unlikely to
have side effects.  Then again, I do not have a broad understanding of
twisted, and haven't tested it extensively...  Clearly what newjelly.py is
aiming for is superior, and so I haven't been inclined to invest any further
effort.

The cvs -u for the two files affected follows.  Use them as you wish, and
critique is always welcome.

- -Jasper



Index: flavors.py
===================================================================
RCS file: /cvs/Twisted/twisted/spread/flavors.py,v
retrieving revision 1.28
diff -u -r1.28 flavors.py
- --- flavors.py  17 Feb 2003 20:48:30 -0000      1.28
+++ flavors.py  8 Apr 2003 18:16:27 -0000
@@ -388,9 +388,26 @@
     def unjellyFor(self, unjellier, jellyList):
         if unjellier.invoker is None:
             return setInstanceState(self, unjellier, jellyList)
- -        self.setCopyableState(unjellier.unjelly(jellyList[1]))
- -        return self
+        state = unjellier.unjelly( jellyList[1] )
 
+        from twisted.persisted.crefutil import _Dereference
+        if isinstance( state, _Dereference ):
+            # In the caller (jelly._Unjellier.unjelly()),
+            # presence of state.postUnjelly triggers a call to self.postUnjelly
+            # This seems like a bug...
+            state.postUnjelly = 1
+            self.postUnjelly  = ClassReset( state, self.__class__ )
+            return state
+        else:
+            self.setCopyableState( state )
+            return self
+        
+class ClassReset( object ):
+    def __init__( self, obj, klass ):
+        self.obj   = obj
+        self.klass = klass
+    def __call__( self ):
+        self.obj.__class__ = self.klass
 
 
 class RemoteCache(RemoteCopy, Serializable):

Index: crefutil.py
===================================================================
RCS file: /cvs/Twisted/twisted/persisted/crefutil.py,v
retrieving revision 1.11
diff -u -r1.11 crefutil.py
- --- crefutil.py 31 Mar 2003 00:28:34 -0000      1.11
+++ crefutil.py 8 Apr 2003 19:18:06 -0000
@@ -114,6 +114,17 @@
         NotKnown.__init__(self)
         self.id = id
 
+    def resolveDependants(self, newObject):
+        self.resolved = 1
+        self.resolvedObject = newObject
+        for mut, key in self.dependants:
+            inst           = mut.value
+            inst.__dict__  = newObject
+            mut[key]       = inst
+
+            if isinstance(newObject, NotKnown):
+                newObject.addDependant(mut, key)
+
 
 from twisted.internet.defer import Deferred

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+kyPC8EpjZ7/X9bIRAsxZAKDJZnJemKCtBFnhU+i7uRsLXLRCjwCg9XHn
aIviUjrRqf/KAzbJq7x708k=
=Cqoo
-----END PGP SIGNATURE-----




From rich at enflyer.com  Tue Apr  8 15:19:06 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Tue, 08 Apr 2003 17:19:06 -0400
Subject: [Twisted-Python] incredibly minor "fix"
Message-ID: <3E933CCA.3000508@enflyer.com>

	I know, I couldn't have possibly found something smaller. The warning was 
annoying me. This is a patch to FormErrorModel to add the request argument to 
the wmfactory method.

	Also, I was the one in #twisted this weekend asking about woven.guard. I pretty 
much figured it out, it seems so easy now. I have some ideas for making it easy 
(subclassing PerspectiveWrapper) to use any resource to display the login prompt 
(not the auto-generated FormProcessor). Is this something I should submit, or 
does it already work that way and I was too dense to see it?

rich


Index: form.py
===================================================================
RCS file: /cvs/Twisted/twisted/web/woven/form.py,v
retrieving revision 1.25
diff -u -r1.25 form.py
--- form.py	7 Mar 2003 17:22:41 -0000	1.25
+++ form.py	8 Apr 2003 21:07:47 -0000
@@ -265,7 +265,7 @@
              self.err = err
              self.desc = "Please try again"

-    def wmfactory_description(self):
+    def wmfactory_description(self, request):
          return str(self.desc)





From andrew-twisted at puzzling.org  Tue Apr  8 18:57:16 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 9 Apr 2003 10:57:16 +1000
Subject: [Twisted-Python] How do I upload files using FTPClient?
In-Reply-To: <20030106233722.GA32165@frobozz.local>
References: <Springmail.0994.1041876859.0.07496900@webmail.pas.earthlink.net> <20030106233722.GA32165@frobozz.local>
Message-ID: <20030409005716.GB19915@frobozz.local>

On Tue, Jan 07, 2003 at 10:37:22AM +1100, Andrew Bennetts wrote:
> On Mon, Jan 06, 2003 at 10:14:18AM -0800,  Daniel Burr wrote:
> > 
> > I've experimented with twisted.protocols.ftp.FTPClient, and the one thing I
> > can't seem to grok is how to perform file uploads.  I've read through the
> > code, and it seems that the FTP server class supports RETR and STOR, using
> > DTPFactory, while FTPClient only supports RETR, and implements it
> > independently.
> 
> Yes, that's my fault.  I haven't gotten around to that yet -- I might have a
> stab at it tonight, it shouldn't actually be that hard.  I'll try to make sure
> I get this done in time for the 1.0.2 release.

*Ahem*.

Ok, so it took slightly longer than that...

Thanks to working on this with Chris at PyCon, there is now STOR support for
the FTPClient, currently only in CVS, but it will be in the next release.

-Andrew.




From radix at twistedmatrix.com  Tue Apr  8 18:28:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Apr 2003 20:28:52 -0400
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030408113320.6e45870f.itamar@itamarst.org>
References: <20030408113320.6e45870f.itamar@itamarst.org>
Message-ID: <20030409002852.GA1140@radii>

On Tue, Apr 08, 2003 at 11:33:20AM -0400, Itamar Shtull-Trauring wrote:
> Any reason the following is not the way resources work by default? And
> would the change break backwards compatability?

I'm pretty sure nobody uses this interface, anyway. Wasn't it mainly
for coil?


-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr  8 18:34:11 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 8 Apr 2003 20:34:11 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408135629.GG8291@frobozz.local>
References: <20030408024919.GG956@radii> <20030408135629.GG8291@frobozz.local>
Message-ID: <20030409003411.GB1140@radii>

On Tue, Apr 08, 2003 at 11:56:29PM +1000, Andrew Bennetts wrote:
> Do you have a use-case where the current string-joining breaks? 

Yes. I was passing an arbitrary filename as one of the arguments to a
program in windows, and it broke when the filename had a space.

> And if a Twisted user really cared about passing arguments on Win32,
> wouldn't it be easiest to just let them take care of it, e.g.:
>     if sys.platform == 'win32':
>         args = ["one big string"]
>     else:
>         args = ["one", "big", string"]
>     ...
>     
> ?

I didn't think of this. This is a fine alternative to having a
separate API method for it. So, that gets rid of proposal for a new
method. I'm still thinking about implementing that warning, though, as
well as the auto-quoting.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From peter at engcorp.com  Tue Apr  8 20:26:12 2003
From: peter at engcorp.com (Peter Hansen)
Date: Tue, 08 Apr 2003 22:26:12 -0400
Subject: [Twisted-Python] Default reactor without signal handling
Message-ID: <3E9384C4.4D26E913@engcorp.com>

In twisted.internet.reactor, a call to twisted.internet.default.install()
is made automatically.  That call constructs a SelectReactor with
signal handling enabled, without any option for avoiding this behaviour.

What's the recommended approach for installing a reactor without the
signal handling behaviour turned on?

(For the curious, I'm trying to refactor an existing Zope-based 
application which has a "back end" server using a proprietary 
protocol on a non-standard socket.  Currently we just use 
the Zope asyncore and built our stuff on top of that.  We're
trying to move away from Zope, and this looked like the low-hanging
fruit for getting us onto Twisted...   Everything worked fine
when we spiked this, except we had to manually patch the above
call to do "reactor = SelectReactor(0)" instead of what it does
now.

Thanks.

-Peter



From itamar at itamarst.org  Tue Apr  8 21:16:13 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 23:16:13 -0400
Subject: [Twisted-Python] Default reactor without signal handling
In-Reply-To: <3E9384C4.4D26E913@engcorp.com>
References: <3E9384C4.4D26E913@engcorp.com>
Message-ID: <20030408231613.784ca27f.itamar@itamarst.org>

On Tue, 08 Apr 2003 22:26:12 -0400
Peter Hansen <peter at engcorp.com> wrote:

> In twisted.internet.reactor, a call to
> twisted.internet.default.install() is made automatically.  That call
> constructs a SelectReactor with signal handling enabled, without any
> option for avoiding this behaviour.
> 
> What's the recommended approach for installing a reactor without the
> signal handling behaviour turned on?

In 1.0.4 and CVS (soon to be released, we hope), you can do:

   reactor.run(installSignalHandlers=0)

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Tue Apr  8 21:17:44 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 8 Apr 2003 23:17:44 -0400
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030409002852.GA1140@radii>
References: <20030408113320.6e45870f.itamar@itamarst.org>
	<20030409002852.GA1140@radii>
Message-ID: <20030408231744.3d94bf50.itamar@itamarst.org>

On Tue, 8 Apr 2003 20:28:52 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I'm pretty sure nobody uses this interface, anyway. Wasn't it mainly
> for coil?

Not sure. But I think this should be changed, it is useful for certain
things (e.g. trees of Resources) and we'll need it for WebDAV if we use
Resources for that.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From lafou at wanadoo.fr  Tue Apr  8 11:09:03 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 08 Apr 2003 19:09:03 +0200
Subject: [Twisted-Python] Re: Re: Re: more thoughts on resumable async data flows
References: <20030314065003.GA99373@doublegemini.com> <b6hbjv$si1$1@main.gmane.org> <20030405091214.GA94931@doublegemini.com> <b6palq$e1n$1@main.gmane.org> <20030407023519.GA1707@doublegemini.com> <b6r4fk$juf$1@main.gmane.org>
Message-ID: <b6uvmj$r13$1@main.gmane.org>

Did you try to contact me ? I 've got a LOT of spam this days, and I am
affraid of throwing some "good" mails.

thx 




From dp at twistedmatrix.com  Wed Apr  9 00:25:07 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Tue, 8 Apr 2003 23:25:07 -0700
Subject: [Twisted-Python] Resource bug?
In-Reply-To: <20030408113320.6e45870f.itamar@itamarst.org>
Message-ID: <0209779E-6A54-11D7-940F-00039376B1AE@twistedmatrix.com>

On Tuesday, April 8, 2003, at 08:33 AM, Itamar Shtull-Trauring wrote:

> Any reason the following is not the way resources work by default? And
> would the change break backwards compatability?

I for one would really like it if this change were made. I have a base 
class that I always subclass instead of resource that does nothing but 
what this patch does.

Donovan




From lafou at wanadoo.fr  Wed Apr  9 01:34:49 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 09 Apr 2003 09:34:49 +0200
Subject: [Twisted-Python] Re: flow - a state-machine consumer
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <b70idr$ss2$1@main.gmane.org>

> It isn't stable, but you can find it in CVS, or at
>    http://clarkevans.com/flow.py
> 
> Comments are encouraged.
> 
> Best,
> 
> Clark

Could you send us some recent exemples ? I found some, but they use
deprecated methods I think.





From lafou at wanadoo.fr  Wed Apr  9 01:39:34 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 09 Apr 2003 09:39:34 +0200
Subject: [Twisted-Python] Re: flow - a state-machine consumer
References: <20030307070735.GA73244@doublegemini.com>
Message-ID: <b70imo$ss2$2@main.gmane.org>

> It isn't stable, but you can find it in CVS, or at
>    http://clarkevans.com/flow.py
> 
> Comments are encouraged.
> 
> Best,
> 
> Clark

It seems to be a little bit different from the cvs sandbox version !?
I remember a longer version in cvs. Anyway, I'am going to test it today, and
will report to you my feelings. see you on #twisted (nick : gravis)




From tv at twistedmatrix.com  Wed Apr  9 04:50:02 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 9 Apr 2003 13:50:02 +0300
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030408024919.GG956@radii>
References: <20030408024919.GG956@radii>
Message-ID: <20030409105001.GA29042@lapdog>

On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
>  * Perhaps make the string "command-line" API available on
>    PosixProcess as well, so people can use either the string or the
>    sequence API and expect at least some bit of cross-platformness (but
>    I'm fine with telling people to just use the sequence API if others
>    don't like this, especially considering this either requires
>    calling out to a shell (gah), or doing some unfun argument-splitting.)

	Oh god please no.

	system(3) and its ilk must die. No exceptions allowed. Never
	concatenate arguments on UNIX.

-- 
:(){ :|:&};:



From radix at twistedmatrix.com  Wed Apr  9 04:30:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 9 Apr 2003 06:30:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030409105001.GA29042@lapdog>
References: <20030408024919.GG956@radii> <20030409105001.GA29042@lapdog>
Message-ID: <20030409103019.GE1107@radii>

On Wed, Apr 09, 2003 at 01:50:02PM +0300, Tommi Virtanen wrote:
> On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> >  * Perhaps make the string "command-line" API available on
> >    PosixProcess as well, so people can use either the string or the
> >    sequence API and expect at least some bit of cross-platformness (but
> >    I'm fine with telling people to just use the sequence API if others
> >    don't like this, especially considering this either requires
> >    calling out to a shell (gah), or doing some unfun argument-splitting.)
> 
> 	Oh god please no.
> 
> 	system(3) and its ilk must die. No exceptions allowed. Never
> 	concatenate arguments on UNIX.

If you'll re-read what you quoted of me, you'll see that I was
proposing auto-splitting of the arguments, not passing the thing to a
shell. Concatenating is only required in win32; we've already _got_
the arguments in a list (or as my proposal went, in a single string)
from the high-level API.

But you're right about it being a bad idea :) I've decided (in absense
of any others' opinions) to just do auto-quoting-with-a-warning in
win32's case.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Wed Apr  9 04:35:19 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 9 Apr 2003 06:35:19 -0400
Subject: [Twisted-Python] Windows <strike>i hate it</strike> Process API
In-Reply-To: <20030409103019.GE1107@radii>
References: <20030408024919.GG956@radii> <20030409105001.GA29042@lapdog> <20030409103019.GE1107@radii>
Message-ID: <20030409103519.GF1107@radii>

On Wed, Apr 09, 2003 at 06:30:19AM -0400, Christopher Armstrong wrote:
> On Wed, Apr 09, 2003 at 01:50:02PM +0300, Tommi Virtanen wrote:
> > On Mon, Apr 07, 2003 at 10:49:19PM -0400, Christopher Armstrong wrote:
> > >  * Perhaps make the string "command-line" API available on
> > >    PosixProcess as well, so people can use either the string or the
> > >    sequence API and expect at least some bit of cross-platformness (but
> > >    I'm fine with telling people to just use the sequence API if others
> > >    don't like this, especially considering this either requires
> > >    calling out to a shell (gah), or doing some unfun argument-splitting.)

Actually, I guess my wording here was a little off. Instead of "gah",
that should be "hello no". >:)

> > 	Oh god please no.
> > 
> > 	system(3) and its ilk must die. No exceptions allowed. Never
> > 	concatenate arguments on UNIX.
> 
> If you'll re-read what you quoted of me, you'll see that I was
> proposing auto-splitting of the arguments, not passing the thing to a
> shell. Concatenating is only required in win32; we've already _got_
> the arguments in a list (or as my proposal went, in a single string)
> from the high-level API.
> 
> But you're right about it being a bad idea :) I've decided (in absense
> of any others' opinions) to just do auto-quoting-with-a-warning in
> win32's case.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Wed Apr  9 15:30:35 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 09 Apr 2003 14:30:35 -0700
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <E1939zy-0000Hp-00@pyramid.twistedmatrix.com>
References: <E1939zy-0000Hp-00@pyramid.twistedmatrix.com>
Message-ID: <1049923833.30463.57.camel@troglodyte.funhouse>

[Recap:  Last night, Bob was complaining that the order that services
were started and stopped was undefined, saying

Bob> well if you have service A dependent on service B
Bob> and you don't want service A to actually start service B
Bob> like let's say you have a database service or something
Bob> and you have another service that wants to persist stuff using the
Bob> database service

so he made the order in which services are started defined as the order
in which they were added to the service collection, and the reverse for
stopping.]

Bob, I fear this solution is too fragile if your services really depend
on one another.  While it will work for now when installing services is
something that happens once in mktap, I fear it'll break down with more
dynamic service management.  Example::

    application.addService("dataStore", StupidStorage())
    application.addService("dataMaker", FooService())

    # ...later, decide we have outgrown StupidStorage:
    application.removeService("dataStore")
    application.addService("dataStore", RealStorage())

With your ordering, the new dataStore will now stop before dataMaker
does.

Instead of introducing ordering dependencies into the flat top-level
service namespace, I think the right answer to your problem is to do as
Chris suggested: Use a hierarchical structure by making dataStore a
MultiService, and adding any dataMaker services at its children.  That
way your dataStore can always make sure its children shut down before it
does.

Does this work for you?  If so, I would like to revert your changes
making Application.services an OrderedDict before the (imminent!)
release, just because anything that requires a change to the
persistnceVersion is a big potential spot for trouble.  We have no
inter-version testing framework at all.

(This whole thing would have passed without comment had I not
encountered an error in upgradeVersion13 in the acceptance tests.  I
*think* I fixed that bug, but I haven't yet found out what triggered it
in the first place (it *should* have been *generated* with version 13,
why was it upgrading?), and who knows what other uglies are hiding in
the dark corners of application persistence.)

 - Kevin

-- 
The moon is first quarter, 46.3% illuminated, 7.0 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030409/da7cda64/attachment.sig>

From mesozoic at polynode.com  Wed Apr  9 14:22:49 2003
From: mesozoic at polynode.com (Alex Levy)
Date: Wed, 9 Apr 2003 16:22:49 -0400
Subject: [Twisted-Python] twistd causing AssertionError, exiting abruptly
Message-ID: <20030409202249.GA4696@polynode.com>

When I run 'twistd -nf web.tap', twistd spits out the following traceback
and exits.  I'm really not sure what this means; help?

This is a fresh CVS copy.

[-] Log opened.
[-] twistd 1.0.4alpha1 (/usr/bin/python 2.2.1) starting up
[-] license user: Nobody <>
[-] organization: No Organization
[-] reactor class: twisted.internet.default.SelectReactor
[-] Loading web.tap...
[-] Loaded.
[*web*] twisted.web.server.Site starting on 8888
[*web*] Starting factory <twisted.web.server.Site instance at 0x82aa28c>
[*web*] Traceback (most recent call last):
[*web*]   File "/home/mesozoic/dev/Twisted/bin/twistd", line 31, in ?
[*web*]     run()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 474, in run
[*web*]     runApp(config)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 390, in runApp
[*web*]     application.bindPorts()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/app.py", line 742, in bindPorts
[*web*]     self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/default.py", line 244, in listenTCP
[*web*]     p.startListening()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/tcp.py", line 417, in startListening
[*web*]     self.factory.doStart()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/internet/protocol.py", line 55, in doStart
[*web*]     self.startFactory()
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
[*web*]     self.logFile = self._openLogFile(self.logPath)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 407, in _openLogFile
[*web*]     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
[*web*]     BaseLogFile.__init__(self, name, directory, defaultMode)
[*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
[*web*]     assert os.path.isdir(self.directory)
[*web*] AssertionError

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From dp at twistedmatrix.com  Wed Apr  9 16:24:56 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Wed, 9 Apr 2003 15:24:56 -0700
Subject: [Twisted-Python] incredibly minor "fix"
In-Reply-To: <3E933CCA.3000508@enflyer.com>
Message-ID: <17F13E44-6ADA-11D7-8291-000393B3EC2C@twistedmatrix.com>

On Tuesday, April 8, 2003, at 02:19 PM, Rich Cavanaugh wrote:

> 	I know, I couldn't have possibly found something smaller. The warning 
> was annoying me. This is a patch to FormErrorModel to add the request 
> argument to the wmfactory method.

Applied, thanks. If anyone else finds any of these in base twisted, 
please let me know.

Donovan




From bob at redivi.com  Wed Apr  9 16:36:03 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 9 Apr 2003 18:36:03 -0400
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <1049923833.30463.57.camel@troglodyte.funhouse>
Message-ID: <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>

I don't have time for a large reply right now, but....

On Wednesday, Apr 9, 2003, at 17:30 America/New_York, Kevin Turner 
wrote:

> [Recap:  Last night, Bob was complaining that the order that services
> were started and stopped was undefined, saying
>
> Bob> well if you have service A dependent on service B
> Bob> and you don't want service A to actually start service B
> Bob> like let's say you have a database service or something
> Bob> and you have another service that wants to persist stuff using the
> Bob> database service
>
> so he made the order in which services are started defined as the order
> in which they were added to the service collection, and the reverse for
> stopping.]
>
> Bob, I fear this solution is too fragile if your services really depend
> on one another.  While it will work for now when installing services is
> something that happens once in mktap, I fear it'll break down with more
> dynamic service management.  Example::
>
>     application.addService("dataStore", StupidStorage())
>     application.addService("dataMaker", FooService())
>
>     # ...later, decide we have outgrown StupidStorage:
>     application.removeService("dataStore")
>     application.addService("dataStore", RealStorage())

Well nomatter what, unless it uses 
application.getServiceNamed("dataStore") everywhere, you just broke 
dataMaker.  If you're changing the storage you have bigger things to 
worry about than this little corner case.  You need to pause/stop 
FooService, export all the data from the existing storage, stop the 
existing storage, start the new storage, import all the data into the 
new storage, change FooService's reference to the new storage, 
resume/start FooService, and cross your fingers.

It is a good feature that services get started and stopped in a 
sensible order, there's no reason they shouldn't.  I didn't want to 
change the implementation to a list because that would've required more 
code to change, and had the capability to break existing stuff because 
there is no API iterate an AbstractServiceCollection (or the bastard 
Application class, which should be one but doesn't mixin IIRC).

>
> With your ordering, the new dataStore will now stop before dataMaker
> does.
>
> Instead of introducing ordering dependencies into the flat top-level
> service namespace, I think the right answer to your problem is to do as
> Chris suggested: Use a hierarchical structure by making dataStore a
> MultiService, and adding any dataMaker services at its children.  That
> way your dataStore can always make sure its children shut down before 
> it
> does.

That's only an issue if you use persisted Application objects, I don't. 
  What if you want to stop the storage without stopping it's children?  
In some cases, my ApplicationServices only depend on the storage for 
initialization anyways, so it wouldn't make sense to force them to shut 
down when the storage does.

>
> Does this work for you?  If so, I would like to revert your changes
> making Application.services an OrderedDict before the (imminent!)
> release, just because anything that requires a change to the
> persistnceVersion is a big potential spot for trouble.  We have no
> inter-version testing framework at all.

You can take out the version upgrade if it doesn't work.  I used an 
OrderedDict for that reason, it has the same interface as a normal 
dict..  so no change to the code (other than stopping in reverse order 
of keys, which will still work on a regular dict, and __init__ of 
course) were made.  The upgrade was purely so new services added to old 
application objects would have their start/stop order preserved.

-bob




From cce at clarkevans.com  Wed Apr  9 23:33:02 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 05:33:02 +0000
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
Message-ID: <20030410053302.GA6339@doublegemini.com>

work in progress on my understanding of extrepum's flow... not
in anyway near perfect

-------------

''' Flow -- async data flows

    This is a flow module which is used for async data flows, 
    in particularly those coming from databases where blocking
    behavior is common.   Implementations will typically use
    generators (or anything implementing the iterator protocol)
    for each stage of the flow.

    Basically, communication within the data flow is carried
    out using the yield statement.  Besides using 'return' 
    or throwing a StopIteration exception, there are several
    items which yield can return:

       flow.Yield      This (singleton) value should be returned when an
                       operation would block, it gives other micro-threads
                       a chance to do their work.

       flow.Callable   A callable object should be returned when a function
                       should be executed.  This adds another stage to the
                       flow. These objects have a 'result' attribute which 
                       is filled in with the output of the function, or a 
                       subclass of failure.Failure for exceptions.

       flow.Iteration  An iterable object, that is, a generator, or array,
                       or class which implements both next() and __iter__.
                       These objects, like Callable, have a 'result' 
                       attribute, but also have a stop attribute which
                       is true when StopIteration has been thrown.

       <anything>      Any other return value
  
'''
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem:
    ''' Base class of all flow objects '''
    def __init__(self):
        self.result = None

Yield = FlowItem()  # A special flow item which signals a block

class Iteration(FlowItem):
    ''' An iteration object

        Used for objects which implement __iter__ and next
        and can be called more than once maintaining state.
    '''
    def __init__(self, iterable):
        FlowItem.__init__(self)
        self.next    = iter(iterable).next
        self.stop    = 0
    def __call__(self):
        try:
            self.result = self.next()
        except StopIteration:
            self.stop = 1
            self.result = None
        except:
            self.stop = 1
            self.result = failure.Failure()
        return self.result

class Callable(FlowItem):
    ''' A callable, where the function value is returned '''
    def __init__(self, func, *args, **kwargs):
        FlowItem.__init__(self)
        self.args   = args
        self.kwargs = kwargs
        self.func   = func
    def __call__(self):
        try:
            self.result = apply(self.func, self.args, self.kwargs)
        except:
            self.result = failure.Failure()
        return self.result

class Controller(Iteration):
      ''' An iteration object that remains on the stack

          When a Callable or an Iteration return a FlowItem
          other than Yield, then they are normally replaced
          by the returned value, so that it's value is returned
          to the Callable's caller.  In the case of a Controller,
          this replacement behavior isn't performed.
      '''
      pass

class Flow(object):
    ''' an flow, call next() until the iterator raises StopIteration '''
    def __init__(self, controller):
        self._stack = [controller]
    def __iter__(self): return self
    def next(self):
        while self._stack:
            head = self._stack.pop()
            result = head()
            if isinstance(result, FlowItem):
                if result is Yield: 
                    self._stack.append(head)
                    return 1
                if isinstance(head, Controller):
                    self._stack.append(head)
                self._stack.append(result)
        raise StopIteration

class DeferredFlow(object):
    pass
    # basically, create a Flow, loop on Flow.next()
    # for each item in the loop, do a reactor.callLater(0, next)
    # return the very last value or error via a Deferred




From lafou at wanadoo.fr  Thu Apr 10 01:04:59 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 10 Apr 2003 09:04:59 +0200
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <20030410053302.GA6339@doublegemini.com>
References: <1049923833.30463.57.camel@troglodyte.funhouse>
	 <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com>
	 <20030410053302.GA6339@doublegemini.com>
Message-ID: <1049958299.18982.23.camel@biproc>

Hello Clarck

Your post is in a wrong thread...

BTW, how do you test this ? It seems to be good (well written), but I'm
not sure to exactly understand what you wanted to do.

If I sum up (from my point of view) :

Callable  : may be a function bloc that run only once
Iteration : may be a function bloc that loop on something (like a
datasource)
and Yield : hum, what's the point of Yield ?


Anyway, this version if different from the one on your website.

On Thu, 2003-04-10 at 07:33, Clark C. Evans wrote:
> work in progress on my understanding of extrepum's flow... not
> in anyway near perfect
> 
> -------------
> 
> ''' Flow -- async data flows
> 
>     This is a flow module which is used for async data flows, 
>     in particularly those coming from databases where blocking
>     behavior is common.   Implementations will typically use
>     generators (or anything implementing the iterator protocol)
>     for each stage of the flow.
> 
>     Basically, communication within the data flow is carried
>     out using the yield statement.  Besides using 'return' 
>     or throwing a StopIteration exception, there are several
>     items which yield can return:
> 
>        flow.Yield      This (singleton) value should be returned when an
>                        operation would block, it gives other micro-threads
>                        a chance to do their work.
> 
>        flow.Callable   A callable object should be returned when a function
>                        should be executed.  This adds another stage to the
>                        flow. These objects have a 'result' attribute which 
>                        is filled in with the output of the function, or a 
>                        subclass of failure.Failure for exceptions.
> 
>        flow.Iteration  An iterable object, that is, a generator, or array,
>                        or class which implements both next() and __iter__.
>                        These objects, like Callable, have a 'result' 
>                        attribute, but also have a stop attribute which
>                        is true when StopIteration has been thrown.
> 
>        <anything>      Any other return value
>   
> '''
> from twisted.python import failure
> from twisted.python.compat import StopIteration, iter
> 
> class FlowItem:
>     ''' Base class of all flow objects '''
>     def __init__(self):
>         self.result = None
> 
> Yield = FlowItem()  # A special flow item which signals a block
> 
> class Iteration(FlowItem):
>     ''' An iteration object
> 
>         Used for objects which implement __iter__ and next
>         and can be called more than once maintaining state.
>     '''
>     def __init__(self, iterable):
>         FlowItem.__init__(self)
>         self.next    = iter(iterable).next
>         self.stop    = 0
>     def __call__(self):
>         try:
>             self.result = self.next()
>         except StopIteration:
>             self.stop = 1
>             self.result = None
>         except:
>             self.stop = 1
>             self.result = failure.Failure()
>         return self.result
> 
> class Callable(FlowItem):
>     ''' A callable, where the function value is returned '''
>     def __init__(self, func, *args, **kwargs):
>         FlowItem.__init__(self)
>         self.args   = args
>         self.kwargs = kwargs
>         self.func   = func
>     def __call__(self):
>         try:
>             self.result = apply(self.func, self.args, self.kwargs)
>         except:
>             self.result = failure.Failure()
>         return self.result
> 
> class Controller(Iteration):
>       ''' An iteration object that remains on the stack
> 
>           When a Callable or an Iteration return a FlowItem
>           other than Yield, then they are normally replaced
>           by the returned value, so that it's value is returned
>           to the Callable's caller.  In the case of a Controller,
>           this replacement behavior isn't performed.
>       '''
>       pass
> 
> class Flow(object):
>     ''' an flow, call next() until the iterator raises StopIteration '''
>     def __init__(self, controller):
>         self._stack = [controller]
>     def __iter__(self): return self
>     def next(self):
>         while self._stack:
>             head = self._stack.pop()
>             result = head()
>             if isinstance(result, FlowItem):
>                 if result is Yield: 
>                     self._stack.append(head)
>                     return 1
>                 if isinstance(head, Controller):
>                     self._stack.append(head)
>                 self._stack.append(result)
>         raise StopIteration
> 
> class DeferredFlow(object):
>     pass
>     # basically, create a Flow, loop on Flow.next()
>     # for each item in the loop, do a reactor.callLater(0, next)
>     # return the very last value or error via a Deferred
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From cce at clarkevans.com  Thu Apr 10 02:51:11 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 08:51:11 +0000
Subject: [Twisted-Python] hacking on flow
In-Reply-To: <1049958299.18982.23.camel@biproc>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc>
Message-ID: <20030410085111.GA6915@doublegemini.com>

On Thu, Apr 10, 2003 at 09:04:59AM +0200, Philippe Lafoucri�re wrote:
| Your post is in a wrong thread...

Oops.  Responded to the wrong message.  ;(

| BTW, how do you test this ? It seems to be good (well written), but I'm
| not sure to exactly understand what you wanted to do.

The basic pattern, as put forth by extrepum in his post a while back...
http://www.twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html
is that you implement your Flow object using a generator...


   def mygenerator():
       print "dosomething"
       d = SubGenerator()
       yield d
       print d.result
       d = AnotherSubGenerator()
       yield d
       print d.result
    
...

 
''' Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.

    A data flow starts with a top level generator, which has numerous
    yield statements.   Each yield can return one of several types:

        flow.Cooperate  This (singleton) value should be returned when 
                        the flow would like to give up control of the 
                        call stack to allow other events to be handled.

        flow.Generator  This is a sub-flow (iterator) to be executed.  
                        This object has a 'result' value which can be 
                        checked for each value yielded.   If the last
                        iteration of the sub-flow produced an exception,
                        then a failure.Failure object will be returned.

                        While the sub-flow is generating (it has not
                        returned or raised StopIteration), it will have
                        an 'active' state of true.  Once it is finished,
                        the 'active' state will be false.

       <anything>       Any other return value, which is not a FlowItem
 
'''
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem: pass
Cooperate = FlowItem() 

class Generator(FlowItem):
    def __init__(self, iterable):
        self.__next  = iter(iterable).next
        self.result  = None
        self.active  = 1
    def isFailure(self):
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        if self.isFailure():
            res = self.result
            if res.value:  raise res.value
            raise res.type
        return self.result
    def generate(self):
        try:
            self.result = self.__next()
        except StopIteration:
            self.active = 0
            self.result = None
        except:
            self.active = 0
            self.result = failure.Failure()

class Flow(Generator):
    ''' a top-level generator which can handle subordinates '''
    def __init__(self, iterable):
        Generator.__init__(self, iterable)
        self._stack = [self]
    def execute(self):
        while self._stack:
            head = self._stack[-1]
            head.generate()
            if head.active:
                if isinstance(result, FlowItem):
                    if result is Yield: 
                        return 1
                    self._stack.append(result)
            else:
                self._stack.pop()
                

from twisted.internet import defer, reactor
class DeferredFlow(Flow, defer.Deferred):
   ''' a version of Flow using Twisted's reactor and Deferreds '''
   def __init__(self, iterable):
       defer.Deferred.__init__(self)
       Flow.__init__(iterable)
       reactor.callLater(0, self.execute)
   def execute(self):
       if Flow.execute(self):
           reactor.callLater(0, self.execute)
       else:
           if self.isFailure():
               self.errback(self.result)
           else:
               self.callback(self.result)
 



From tv at twistedmatrix.com  Thu Apr 10 01:03:14 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 10 Apr 2003 10:03:14 +0300
Subject: [Twisted-Python] twistd causing AssertionError, exiting abruptly
In-Reply-To: <20030409202249.GA4696@polynode.com>
References: <20030409202249.GA4696@polynode.com>
Message-ID: <20030410070314.GA12147@lapdog>

On Wed, Apr 09, 2003 at 04:22:49PM -0400, Alex Levy wrote:
> When I run 'twistd -nf web.tap', twistd spits out the following traceback
> and exits.  I'm really not sure what this means; help?

> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
> [*web*]     self.logFile = self._openLogFile(self.logPath)
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 407, in _openLogFile
> [*web*]     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
> [*web*]     BaseLogFile.__init__(self, name, directory, defaultMode)
> [*web*]   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
> [*web*]     assert os.path.isdir(self.directory)
> [*web*] AssertionError

	The path you are passing to mktap web for HTTP request log is somehow
	broken. The dirname of the path does not seem to refer to an
	existing directory.

-- 
:(){ :|:&};:



From lafou at wanadoo.fr  Thu Apr 10 03:51:28 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 10 Apr 2003 11:51:28 +0200
Subject: [Twisted-Python] Re: hacking on flow
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com>
Message-ID: <b73etp$qeh$1@main.gmane.org>

Clark, this is just an alogithme I was thinking of, before I found flow.py

I had to manage different flows in one application.

DS1 ----> BLOC1 ---+
                   |
DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

is an exemple of what it could be. Every thing is a bloc. DSx are 
datasources (there are also blocs). BLOCx are some treatment bloc that 
operate with their inputs, and provide the result on their outputs.

this is the algorithm comming with :

all bloc are "inactive"
for bloc in blocs:
    if len(bloc.inputs) is 0:
        bloc is "active" # it should be a datasource/producer


gotData(bloc, lines) :
    for line in lines:
        fill in connected blocs's inputs with outputs
        connected blocs are active
        while connected blocs's inputs are set:
            wait # I know, this sucks
    bloc is inactive

while there are still active blocs  
    for bloc in blocs
        if all inputs are available (!= None)
            bloc.proceed().addCallback(gotData)
        

# Fin algo #################################

This doesn't work because we wait for blocs to finish their jobs, and never 
come back to main loop...

This means also that I have to define a mapping between inputs / outputs of 
blocs. I can't see such thing in flow.py, that's maybe why I don't 
understand it well.

I wish I was clear enough :p




From rich at enflyer.com  Thu Apr 10 09:07:33 2003
From: rich at enflyer.com (Rich Cavanaugh)
Date: Thu, 10 Apr 2003 10:07:33 -0500
Subject: [Twisted-Python] woven guard patch and example
Message-ID: <018e01c2ff72$eb3cf330$6501a8c0@richdesk>

The woven.guard patch attached contains one minor bug fix (changing a
reference in GuardSession.checkExpired from self.site.sessions to
self.guard.sessions). Also, it slightly modifies PerspectiveWrapper to make
using alternate resources for a login page easier.

The example file attached demonstrates using woven.guard with the patch
applied. If anyone wants I can post an example of use without the patch.

rich
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: woven.guard_demo.py
URL: </pipermail/twisted-python/attachments/20030410/77a75226/attachment.ksh>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: guard.py.patch
Type: application/octet-stream
Size: 1682 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030410/77a75226/attachment-0002.obj>

From cce at clarkevans.com  Thu Apr 10 09:44:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 15:44:32 +0000
Subject: [Twisted-Python] Re: hacking on flow
In-Reply-To: <b73etp$qeh$1@main.gmane.org>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org>
Message-ID: <20030410154432.GA8077@doublegemini.com>

On Thu, Apr 10, 2003 at 11:51:28AM +0200, Philippe Lafoucri�re wrote:
| I had to manage different flows in one application.
| 
| DS1 ----> BLOC1 ---+
|                    |
| DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

Right.

| is an exemple of what it could be. Every thing is a bloc. DSx are 
| datasources (there are also blocs). BLOCx are some treatment bloc that 
| operate with their inputs, and provide the result on their outputs.
| 
| this is the algorithm comming with :
| 
| all bloc are "inactive"
| for bloc in blocs:
|     if len(bloc.inputs) is 0:
|         bloc is "active" # it should be a datasource/producer
| 
| gotData(bloc, lines) :
|     for line in lines:
|         fill in connected blocs's inputs with outputs
|         connected blocs are active
|         while connected blocs's inputs are set:
|             wait # I know, this sucks
|     bloc is inactive
| 
| while there are still active blocs  
|     for bloc in blocs
|         if all inputs are available (!= None)
|             bloc.proceed().addCallback(gotData)

Ok.  So, basically, you have an input queue for each
code block, and when a particular condition on the 
queue is triggered, the code block fires.  For BLOC1,
it'd be any input from DS1, for BLOC2, it'd be input
from DS2.  For BLOC3, it'd be both input from BLOC1
and BLOC2.  

This is interesting.  With the new-improved flow 
(aka extrepum's method), this would be listed as
3 generators... plus 2 built-in generators.

DS1 = flow.QueryIterator("some query")
DS2 = flow.QueryIterator("another query")

def BLOC1:
    ds1 = flow.Generator( DS1 )
    yield ds1   # think of as ds1.next()
    while ds1.active:
        result = ds1.result   # value of ds1.next()
        //
        // process ds1.result, possibly
        // sending the result to the next
        // stage using:   yield result
        //
        yield ds1

def BLOC2:
    ds2 = flow.Generator( DS2 )
    yield ds2
    while ds2.active:
        result = ds2.result
        //
        // process ds2, calling yield result
        // to pass on value to next stage
        //
        yield ds2

def BLOC3:
    bl1 = flow.Generator(BLOC1())
    bl2 = flow.Generator(BLOC2())
    yield bl1; yield bl2
    while bl1.active and bl2.active:
        // do somethign with bl1.result and bl2.result
        yield bl1; yield bl2

d = flow.DeferredFlow(BLOC3)
d.addBoth(lambda x: print 'done')
reactor.start()

I'll make a test like this for the flow module so that
it's more clear.   This is such a *HUGE* improvement over
what I was doing... thank you _so_ much extrepum.

Best,

;) Clark



From lafou at wanadoo.fr  Thu Apr 10 10:13:58 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 10 Apr 2003 18:13:58 +0200
Subject: [Twisted-Python] Re: Re: hacking on flow
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org> <20030410154432.GA8077@doublegemini.com>
Message-ID: <b74576$ah4$1@main.gmane.org>

Thank you for answering so quicly ! (did you slept enough ?? :p)


> I'll make a test like this for the flow module so that
> it's more clear.   This is such a *HUGE* improvement over
> what I was doing... thank you _so_ much extrepum.
> 
> Best,
> 
> ;) Clark

And thank you _so_ much Clark, this starts to make sence to me. When flow
will be finished, it would be a great part of Twisted, and a good
demonstration of generators. I habe great hopes in it :)

Just a question, where the QueryIterator is defined ? I can't find it in
your last post. (Flow just inheritate form object, QueryIterator would be
defined in object ?? hum...)

kind regards,
Philippe




From acapnotic at twistedmatrix.com  Thu Apr 10 12:44:46 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 10 Apr 2003 11:44:46 -0700
Subject: [Twisted-Python] 1.0.4alpha2 fails accepttests for mail
Message-ID: <1050000247.30458.78.camel@troglodyte.funhouse>

Twisted 1.0.4alpha2 has been released at last.  The reason it's marked
"alpha" rather than "release candidate" is because
accepttests.runMailTest fails.

 - Kevin,

Acting Release Manager

-- 
The moon is first quarter, 55.3% illuminated, 7.9 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030410/00a5dd24/attachment.sig>

From cce at clarkevans.com  Thu Apr 10 13:21:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 10 Apr 2003 19:21:23 +0000
Subject: [Twisted-Python] Re: Re: hacking on flow
In-Reply-To: <b74576$ah4$1@main.gmane.org>
References: <1049923833.30463.57.camel@troglodyte.funhouse> <A583BD72-6ADB-11D7-BB99-000A95686CD8@redivi.com> <20030410053302.GA6339@doublegemini.com> <1049958299.18982.23.camel@biproc> <20030410085111.GA6915@doublegemini.com> <b73etp$qeh$1@main.gmane.org> <20030410154432.GA8077@doublegemini.com> <b74576$ah4$1@main.gmane.org>
Message-ID: <20030410192123.GA9260@doublegemini.com>

On Thu, Apr 10, 2003 at 06:13:58PM +0200, Philippe Lafoucri�re wrote:
| Just a question, where the QueryIterator is defined ? I can't find it in
| your last post. (Flow just inheritate form object, QueryIterator would be
| defined in object ?? hum...)

It is in the CVS version of flow.py... which may not perfectly work
till later this evening.     A copy included below.

Best,

Clark

# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
''' Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.

    A data flow starts with a top level generator, which has numerous
    yield statements.   Each yield can return one of several types:

        flow.Cooperate  This (singleton) value should be returned when 
                        the flow would like to give up control of the 
                        call stack to allow other events to be handled.

        flow.Generator  This is a sub-flow (iterator) to be executed.  
                        This object has a 'result' value which can be 
                        checked for each value yielded.   If the last
                        iteration of the sub-flow produced an exception,
                        then a failure.Failure object will be returned.

                        While the sub-flow is generating (it has not
                        returned or raised StopIteration), it will have
                        an 'active' state of true.  Once it is finished,
                        the 'active' state will be false.

       <anything>       Any other return value, which is not a FlowItem
 
'''
from __future__ import nested_scopes
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowItem: pass
Cooperate = FlowItem() 

class Generator(FlowItem):
    def __init__(self, iterable):
        self.__next  = iter(iterable).next
        self.result  = None
        self.active  = 1
    def isFailure(self):
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        if self.isFailure():
            res = self.result
            if res.value:  raise res.value
            raise res.type
        return self.result
    def generate(self):
        try:
            self.result = self.__next()
        except StopIteration:
            self.active = 0
            self.result = None
        except:
            self.active = 0
            self.result = failure.Failure()

class Flow(Generator):
    ''' a top-level generator which can handle subordinates '''
    def __init__(self, iterable):
        Generator.__init__(self, iterable)
        self._stack = [self]
    def execute(self, cooperate = 0):
        while self._stack:
            head = self._stack[-1]
            head.generate()
            if head.active:
                if isinstance(result, FlowItem):
                    if result is Cooperate:
                        if cooperate: 
                            return 1
                        else:
                            from time import sleep
                            sleep(.1)
                    self._stack.append(result)
            else:
                self._stack.pop()
                
#
# This code below belongs in twisted.internet.defer
#

from twisted.internet import defer, reactor
class DeferredFlow(Flow, defer.Deferred):
   ''' a version of Flow using Twisted's reactor and Deferreds '''
   def __init__(self, iterable):
       defer.Deferred.__init__(self)
       Flow.__init__(iterable)
       reactor.callLater(0, self.execute)
   def execute(self):
       if Flow.execute(self, cooperate = 1):
           reactor.callLater(0, self.execute)
       else:
           if self.isFailure():
               self.errback(self.result)
           else:
               self.callback(self.result)

#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow,
# with the exception of 'Cooperate'.  Although, if you are trying 
# to bring the output of a thread into a Flow, it is exactly what 
# you want.   The QueryIterator is just an obvious application 
# of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    """
     
    def __init__(self, data = None):
        self.data = data  
        tunnel = _TunnelIterator(self)
        self._tunnel = tunnel
     
    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
     
    def next(self):
        """ 
            The method used to fetch the next value, make sure
            to return a list of rows, not just a row
        """
        raise StopIteration

class _TunnelIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    """
    def __init__(self, source):
        """
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        """
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
     
    def process(self):
        """
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        """
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                self.buff.extend(val)    # lists are thread safe
        except StopIteration:
            callFromThread(self.stop)
        self.source = None
     
    def setFailure(self, failure):
        self.failure = failure
     
    def stop(self):
        self.isFinished = 1
     
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise Cooperation

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
        self.fetchall = fetchall
     
    def __call__(self,data):
        self.data = data
        return self
     
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res



From nbm at mithrandr.moria.org  Thu Apr 10 15:35:54 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Thu, 10 Apr 2003 23:35:54 +0200
Subject: [Twisted-Python] twisted.news cleanups and tests
Message-ID: <20030410213554.GA58576@mithrandr.moria.org>

Hi,

I'd like to know what people think about the following patch and tests.

These are my first tests for Twisted, so I'm not sure whether I'm
stepping over any style rules.

The patch fixes the unusability of NewsShelf due to dirdbm wanting to
try use directories as files.  It also stops us from putting '\n\r\n'
into the start of the body, and it puts '\r\n' termination on the last
line of the headers.  It moves placing the extra '\r\n' between the
headers and body in the one place it's necessary - articleRequest.

I haven't tested NewsStorage or NewsStorageAugmentation yet, but these
changes shouldn't be a problem.

The test cases detect the problems listed above, and perform some
general sanity tests.

Thanks,

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
Index: database.py
===================================================================
RCS file: /cvs/Twisted/twisted/news/database.py,v
retrieving revision 1.17
diff -u -r1.17 database.py
--- database.py	5 Nov 2002 03:42:12 -0000	1.17
+++ database.py	10 Apr 2003 21:26:49 -0000
@@ -90,7 +90,7 @@
         headers = []
         for i in self.headers.values():
             headers.append('%s: %s' % i)
-        return string.join(headers, '\r\n')
+        return string.join(headers, '\r\n') + '\r\n'
     
     def overview(self):
         xover = []
@@ -275,7 +275,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
 
         a = Article(headers, article)
         groups = string.split(a.getHeader('Newsgroups'))
@@ -359,7 +359,7 @@
         if self.db.has_key(group):
             if self.db[group].has_key(index):
                 a = self.db[group][index]
-                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
             else:
                 return defer.fail(ERR_NOARTICLE)
         else:
@@ -431,7 +431,10 @@
         self.path = path
         self.mailhost = mailhost
 
-        self.dbm = dirdbm.Shelf(path)
+        if not os.path.exists(path):
+            os.mkdir(path)
+
+        self.dbm = dirdbm.Shelf(os.path.join(path, "newsshelf"))
         if not len(self.dbm.keys()):
             self.initialize()
 
@@ -500,7 +503,7 @@
 
     def postRequest(self, message):
         cleave = message.find('\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         
         article = Article(headers, article)
         groups = article.getHeader('Newsgroups').split()
@@ -722,7 +725,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         article = Article(headers, article)
         return self.runInteraction(self._doPost, article)
 
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os, types
from pprint import pformat

from twisted.trial import unittest
from twisted.news import news, database
from twisted.internet import reactor

MESSAGE_ID = "f83ba57450ed0fd8ac9a472b847e830e"

POST_STRING = """Path: not-for-mail
From: <exarkun at somehost.domain.com>
Subject: a test
Newsgroups: alt.test.nntp
Organization: 
Summary: 
Keywords: 
Message-Id: %s
User-Agent: tin/1.4.5-20010409 ("One More Nightmare") (UNIX) (Linux/2.4.17 (i686))

this is a test
...
lala
moo
-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
--
 10:56pm up 4 days, 4:42, 1 user, load average: 0.08, 0.08, 0.12
""" % (MESSAGE_ID)

class NewsTestCase(unittest.TestCase):
    def callback(self, result):
        self.result = result

    def errback(self, failure):
        try:
            self.fail('Errback called: ' + str(failure))
        except Exception, e:
            self.error = sys.exc_info()
            raise

    def timeout(self):
        reactor.crash()
        self.fail('Timed out')

    def setUp(self):
        self.backend = database.NewsShelf(None, 'news2.db')
        self.backend.addGroup('alt.test.nntp', 'y')
        self.backend.postRequest(POST_STRING.replace('\n', '\r\n'))

    def tearDown(self):
        try:
            del self.result
        except:
            pass
        try:
            del self.error
        except:
            pass

    def testArticleExists(self):
        d = self.backend.articleExistsRequest(MESSAGE_ID)
        self.assert_(d.result)

    def testArticleRequest(self):
        d = self.backend.articleRequest(None, None, MESSAGE_ID)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(type(self.result) == types.TupleType,
                        'callback result is wrong type: ' + str(self.result))
        self.failUnless(len(self.result) == 3,
                        'callback result list should have three entries: ' +
                        str(self.result))
        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

    def testHeadRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.headRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

        self.failUnless(self.result[2][-2:] == '\r\n',
                        "headers must be \\r\\n terminated.")

    def testBodyRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.bodyRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[2][0:4] == 'this', "message body has been altered: " +
                        pformat(self.result[2][0:4]))

From cce at clarkevans.com  Fri Apr 11 01:38:34 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 11 Apr 2003 07:38:34 +0000
Subject: [Twisted-Python] rewrite of flow.py completed
Message-ID: <20030411073834.GB11627@doublegemini.com>

Ok.  The complete re-write of flow.py based on the work of 
extrepum ("Bob Ippolito") is finished, with a test case
checked in.  This differs from extrepum's work [1] in 
some ways, but is almost identical in others.

1.  The implementation and test suite does not use generators,
    thus it is safe for 2.1 usage... although I can't imagine
    anyone using it without generators.   But the advantage 
    is that it could go into the current Twisted code base.
    The test suite uses iterators (with the corresponding
    generator commented out).

2.  This implementation has 4 distinct components:

    a) the core 'Flow' class and its supporting items, could be
       put into something like twisted.python.flow as they only
       depend upon other twisted.python stuff.  

    b) There is a DeferredFlow which uses Flow as a mix-in with
       Deferred, with behavior similar to DeferredList.  This 
       could go into twisted.internet.defer

    c) There is a ThreadedIterator which depends upon DeferredFlow, 
       and can be used to merge blocking behavior into the 
       framework.   This could go into twisted.internet.threads

    d) There is a very small class which builds upon ThreadedIterator
       that uses a pool from twisted.enterprise.adbapi; however, 
       in this context the async features of adbapi more or less
       get in the way.   So, perhaps this is best left as an example.

    In particular, extrepum's work build on top of Deferred, which
    I think is unnecessary; thus quite a bit of simplification 
    occurred when stripping out the Deferred stuff, and instead
    treating DeferredFlow as a cross product or mix-in of 
    Flow and Deferred.

3.  Extrepum's work was more 'flat' and didn't take recursive
    use of the technique into consideration; or perhaps I just 
    didn't understand how it would handle recursive usage.
    In any case, this implementation allows generators to call
    other generators and provides a nice stack unwinding, etc.

4.  I'd like to eventually look more at extrepum's work to 
    see if he had additional aspects that I've missed.  If 
    those aspects are generally useable, then I'll include 
    them.

Anyway, that's about it.  I'm now rebuilding some of my internal
code to use this module and ripping the old flow.py out.  This 
flow overall has been *greatly* simpler usage -- and I can't
thank extrepum enough for pointing me to his usage of generators
to create async flows within Twisted.

I'd also like to thank Itamar, Moshez, Radix, and Exarkun for
helping me along and pointing me in the right directions.

Best,

Clark

[1] twistedmatrix.com/pipermail/twisted-python/2003-February/002808.html

# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
#
""" Flow -- async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.   A data flow
    is constructed with a top level generator, which can have three 
    types of yield statements:  flow.Cooperate, flow.Generator, or
    any other return value with exceptions wrapped using failure.Failure
    An example program...

    from __future__ import generators
    import flow
    def producer():
        lst = flow.Generator([1,2,3])
        nam = flow.Generator(['one','two','three'])
        while 1:
            yield lst; yield nam
            if lst.stop or nam.stop: 
                return
            yield (lst.result, nam.result)

    def consumer():
        title = flow.Generator(['Title'])
        yield title
        print title.getResult()
        lst = flow.Generator(producer())
        try:
            while 1:
                yield lst
                print lst.getResult()
        except flow.StopIteration: pass

    flow.Flow(consumer()).execute()

"""
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowCommand: 
    """ Objects given special meaning when returned from yield """
    pass

class Cooperate(FlowCommand):
    """ Represents a request to delay and let other events process

        Objects of this type are returned within a flow when
        the flow would block, or needs to sleep.  This object
        is then used as a signal to the flow mechanism to pause
        and perhaps let other delayed operations to proceed.
    """
    def __init__(self, timeout = 0):
        self.timeout = timeout

class Generator(FlowCommand):
    """ Wraps a generator or other iterator for use in a flow 

        Creates a nested generation stage (a producer) which can provide
        zero or more values to the current stage (the consumer).  After 
        a yield of this object when control has returned to the caller,
        this object will have two attributes:

            stop    This is true if the underlying generator has not 
                    been started (a yield is needed) or if the underlying
                    generator has raised StopIteration

            result  This is the result of the generator if it is active, 
                    the result may be a fail.Failure object if an 
                    exception was thrown in the nested generator.
    """      
    def __init__(self, iterable):
        self._next  = iter(iterable).next
        self.result = None
        self.stop   = 1
    def isFailure(self):
        """ return a boolean value if the result is a Failure """ 
        if self.stop: raise StopIteration()
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        """ return the result, or re-throw an exception on Failure """
        if self.isFailure():
            raise (self.result.value or self.result.type)
        return self.result
    def _generate(self):
        """ update the active and result member variables """ 
        try:
            self.result = self._next()
            self.stop = 0
        except StopIteration:
            self.stop = 1
            self.result = None
        except Cooperate, coop:
            self.stop = 0
            self.result = coop
        except failure.Failure, fail:
            self.stop = 1
            self.result = failure
        except:
            self.stop = 1
            self.result = failure.Failure()

class Flow:
    """ A flow contruct, created with a top-level generator/iterator

        The iterable provided to this flow is the top-level consumer
        object.  From within the consumer, multiple 'yield' calls can
        be made returning either Cooperate or Generate.  If a Generate
        object is returned, then it becomes the current context and
        the process is continued.  Communication from the producer 
        back to the consumer is done by yield of a non FlowItem
    """
    def __init__(self, iterable):
        self.results = []
        self._stack  = [Generator(iterable)]
    def _addResult(self, result):
        """ private called as top-level results are added"""
        self.results.append(result)
    def _execute(self):
        """ private execute, execute flow till a Cooperate is found """
        while self._stack:
            head = self._stack[-1]
            head._generate()
            if head.stop:
                self._stack.pop()
            else:
                result = head.result
                if isinstance(result, FlowCommand):
                    if isinstance(result, Cooperate):
                        return result.timeout
                    assert(isinstance(result, Generator))
                    self._stack.append(result)
                else:
                    if len(self._stack) > 1:
                        self._stack.pop()
                    else:
                        if self._addResult(result):
                            return
    def execute(self):
        """ continually execute, using sleep for Cooperate """
        from time import sleep
        while 1:
            timeout = self._execute()
            if timeout is None: break
            sleep(timeout)

from twisted.internet import defer
class DeferredFlow(Flow, defer.Deferred):
    """ a version of Flow using Twisted's reactor and Deferreds
 
        In this version, a call to execute isn't required.  Instead,
        the iterable is scheduled right away using the reactor.  And,
        the Cooperate is implemented through the reactor's callLater.
 
        Since more than one (possibly failing) result could be returned,
        this uses the same semantics as DeferredList
    """
    def __init__(self, iterable, delay = 0, 
                 fireOnOneCallback=0, fireOnOneErrback=0):
        """initialize a DeferredFlow
        @param iterable:          top level iterator / generator
        @param delay:             delay when scheduling reactor.callLater
        @param fireOnOneCallback: a flag indicating that the first good 
                                  yielded result should be sent via Callback
        @param fireOnOneErrback:  a flag indicating that the first failing
                                  yield result should be sent via Errback
        """
        from twisted.internet import reactor
        defer.Deferred.__init__(self)
        Flow.__init__(self,iterable)
        self.fireOnOneCallback = fireOnOneCallback
        self.fireOnOneErrback  = fireOnOneErrback
        reactor.callLater(delay, self._execute)
    def execute(self): 
        raise TypeError("Deferred Flow is auto-executing") 
    def _addResult(self, result):
        """ emulate DeferredList behavior, short circut if event is fired """
        if not self.called:
            if self.fireOnOneCallback:
                if not isinstance(result, failure.Failure):
                    self.callback((result,len(self.results)))
                    return 1
            if self.fireOnOneErrback:
                if isinstance(result, failure.Failure):
                    self.errback(fail.Failure((result,len(self.results))))
                    return 1
            self.results.append(result)
    def _execute(self):
        timeout = Flow._execute(self)
        if timeout is None:
            if not self.called:
                self.callback(self.results)
        else:
            from twisted.internet import reactor
            reactor.callLater(timeout, self._execute)
 
#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow.
# Although, if you are trying to bring the output of a thread into
# a Flow, it is exactly what you want.   The QueryIterator is 
# just an obvious application of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator base class which can be used to build
       iterators which are constructed and run within a Flow
    """
     
    def __init__(self):
        tunnel = _TunnelIterator(self)
        self._tunnel = tunnel
     
    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
     
    def next(self):
        """ 
            The method used to fetch the next value, make sure
            to return a list of rows, not just a row
        """
        raise StopIteration

class _TunnelIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a PauseFlow exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.
    """
    def __init__(self, source):
        """
            This is the setup, the source argument is the iterator
            being wrapped, which exists in another thread.
        """
        self.source     = source
        self.isFinished = 0
        self.failure    = None
        self.buff       = []
     
    def process(self):
        """
            This is called in the 'source' thread, and 
            just basically sucks the iterator, appending
            items back to the main thread.
        """
        from twisted.internet.reactor import callFromThread
        try:
            while 1:
                val = self.source.next()
                self.buff.extend(val)    # lists are thread safe
        except StopIteration:
            callFromThread(self.stop)
        self.source = None
     
    def setFailure(self, failure):
        self.failure = failure
     
    def stop(self):
        self.isFinished = 1
     
    def next(self):
        if self.buff:
           return self.buff.pop(0)
        if self.isFinished:  
            raise StopIteration
        if self.failure:
            raise self.failure
        raise Cooperate()

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.data = None
        self.fetchall = fetchall
     
    def __call__(self,data):
        self.data = data
        return self
     
    def next(self):
        if not self.curs:
            conn = self.pool.connect()
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
            else: self.curs.execute(self.sql)
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res

----- End forwarded message -----



From warner at lothar.com  Fri Apr 11 02:02:39 2003
From: warner at lothar.com (Brian Warner)
Date: Fri, 11 Apr 2003 01:02:39 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
References: <Pine.LNX.4.44.0304081118030.12962-100000@localhost.localdomain>
Message-ID: <20030411.010239.88712921.warner@lothar.com>

Jasper Phillips <jasper at peak.org> writes:
> I was talking with Kevin Turner at the pub last night after the "Porpig"
> meeting, and he mentioned having the same problem with circular references I
> was having, so I offered to post the klu... err, patch I had for the problem.

Jasper: thanks so much for investigating this one!

I think Glyph finally nailed this bug in some code that went into CVS a few
days ago. It should be in the latest release (1.0.4a2). Could you give that a
try and see if it fixes your original bug? The test case that exarkun added
now passes, but I'd like to make sure your code is now working too.

thanks!
 -Brian



From imunoz at daipro.net  Fri Apr 11 06:37:16 2003
From: imunoz at daipro.net (=?iso-8859-1?Q?Isidro_Mu=F1oz?=)
Date: Fri, 11 Apr 2003 14:37:16 +0200
Subject: [Twisted-Python] Oscar protocol information?
References: <3E91BABD.17017.8A593C@localhost> <000b01c2fdaf$722b0000$78924fd4@isidro> <005801c2fde0$0813c450$0201a8c0@brinstar>
Message-ID: <000901c30027$16e38580$78924fd4@isidro>

Thanks David.

----- Original Message -----
From: "David Phillips" <david at acz.org>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, April 08, 2003 5:03 PM
Subject: Re: [Twisted-Python] Oscar protocol information?


> Isidro Muñoz writes:
> > I would like find information of Oscar protocol to analysis it,
> > commands, sockets, password, etc.
>
> http://www.google.com/search?q=oscar+protocol
>
> --
> David Phillips <david at acz.org>
> http://david.acz.org/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From jasper at peak.org  Fri Apr 11 07:53:41 2003
From: jasper at peak.org (Jasper Phillips)
Date: Fri, 11 Apr 2003 06:53:41 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
In-Reply-To: <20030411.010239.88712921.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0304110642270.10740-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Fri, 11 Apr 2003, Brian Warner wrote:

> Jasper Phillips <jasper at peak.org> writes:
> > I was talking with Kevin Turner at the pub last night after the "Porpig"
> > meeting, and he mentioned having the same problem with circular references I
> > was having, so I offered to post the klu... err, patch I had for the problem.
> 
> Jasper: thanks so much for investigating this one!

I didn't have much choice, as the objects I'm transporting are circular. ;-)

> I think Glyph finally nailed this bug in some code that went into CVS a few
> days ago. It should be in the latest release (1.0.4a2). Could you give that a
> try and see if it fixes your original bug? The test case that exarkun added
> now passes, but I'd like to make sure your code is now working too.

Unfortunately it doesn't work for me. :-(

The simple test case at the end of test_newjelly.py _does_ work, but the
orignal more verbose test I posted (using pb) doesn't work, getting the same
__dict__ error as before.

So I tried replacing jelly.py with newjelly.py, with my fingers crossed.
Both the unit test and my "acceptence" test then work, but my code still
doesn't work...  Arg!

The error is from the assertion on line 40 of crefutil.py:
class NotKnown:                                   |
    ...                                           |
    def addDependant(self, mutableObject, key):   |
        assert not self.resolved  <---------------+
        ...

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+lsjr8EpjZ7/X9bIRAuinAKChN/OUFdeImCmBGMD4vx1Td8g71QCg3DXx
h51tYwNqHLZ7gbdnD5S/TaE=
=SKt4
-----END PGP SIGNATURE-----




From nbm at mithrandr.moria.org  Fri Apr 11 08:09:16 2003
From: nbm at mithrandr.moria.org (Neil Blakey-Milner)
Date: Fri, 11 Apr 2003 16:09:16 +0200
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030410213554.GA58576@mithrandr.moria.org>
References: <20030410213554.GA58576@mithrandr.moria.org>
Message-ID: <20030411140915.GA68773@mithrandr.moria.org>

On Thu 2003-04-10 (23:35), Neil Blakey-Milner wrote:
> I'd like to know what people think about the following patch and tests.
> 
> These are my first tests for Twisted, so I'm not sure whether I'm
> stepping over any style rules.
> 
> The patch fixes the unusability of NewsShelf due to dirdbm wanting to
> try use directories as files.  It also stops us from putting '\n\r\n'
> into the start of the body, and it puts '\r\n' termination on the last
> line of the headers.  It moves placing the extra '\r\n' between the
> headers and body in the one place it's necessary - articleRequest.
> 
> I haven't tested NewsStorage or NewsStorageAugmentation yet, but these
> changes shouldn't be a problem.
> 
> The test cases detect the problems listed above, and perform some
> general sanity tests.

Here're updated versions of the patch and the test case.  We also pass
test_nntp now...

Neil
-- 
Neil Blakey-Milner
nbm at mithrandr.moria.org
-------------- next part --------------
Index: database.py
===================================================================
RCS file: /cvs/Twisted/twisted/news/database.py,v
retrieving revision 1.17
diff -u -r1.17 database.py
--- database.py	5 Nov 2002 03:42:12 -0000	1.17
+++ database.py	11 Apr 2003 08:33:39 -0000
@@ -50,15 +50,16 @@
 class Article:
     def __init__(self, head, body):
         self.body = body
-        head = map(lambda x: string.split(x, ': ', 1), string.split(head, '\r\n'))
         self.headers = {}
-        for i in head:
-            if len(i) == 0:
-                continue
-            elif len(i) == 1:
-                self.headers[string.lower(i[0])] = (i, '')
-            else:
-                self.headers[string.lower(i[0])] = tuple(i)
+        header = None
+        for line in head.split('\r\n'):
+            if line[0] in ' \t':
+                i = list(self.headers[header])
+                i[1] += '\r\n' + line
+            else:
+                i = line.split(': ', 1)
+                header = i[0].lower()
+            self.headers[header] = tuple(i)
 
         if not self.getHeader('Message-ID'):
             s = str(time.time()) + self.body
@@ -90,7 +91,7 @@
         headers = []
         for i in self.headers.values():
             headers.append('%s: %s' % i)
-        return string.join(headers, '\r\n')
+        return string.join(headers, '\r\n') + '\r\n'
     
     def overview(self):
         xover = []
@@ -275,7 +276,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
 
         a = Article(headers, article)
         groups = string.split(a.getHeader('Newsgroups'))
@@ -359,7 +360,7 @@
         if self.db.has_key(group):
             if self.db[group].has_key(index):
                 a = self.db[group][index]
-                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+                return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
             else:
                 return defer.fail(ERR_NOARTICLE)
         else:
@@ -431,7 +432,10 @@
         self.path = path
         self.mailhost = mailhost
 
-        self.dbm = dirdbm.Shelf(path)
+        if not os.path.exists(path):
+            os.mkdir(path)
+
+        self.dbm = dirdbm.Shelf(os.path.join(path, "newsshelf"))
         if not len(self.dbm.keys()):
             self.initialize()
 
@@ -500,7 +504,7 @@
 
     def postRequest(self, message):
         cleave = message.find('\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         
         article = Article(headers, article)
         groups = article.getHeader('Newsgroups').split()
@@ -600,7 +604,7 @@
         except KeyError:
             return defer.fail(NewsServerError("No such group: " + group))
         else:
-            return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + a.body))
+            return defer.succeed((index, a.getHeader('Message-ID'), a.textHeaders() + '\r\n' + a.body))
     
     
     def headRequest(self, group, index, id = None):
@@ -722,7 +726,7 @@
 
     def postRequest(self, message):
         cleave = string.find(message, '\r\n\r\n')
-        headers, article = message[:cleave], message[cleave + 1:]
+        headers, article = message[:cleave], message[cleave + 4:]
         article = Article(headers, article)
         return self.runInteraction(self._doPost, article)
 
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os, types
from pprint import pformat

from twisted.trial import unittest
from twisted.news import news, database
from twisted.internet import reactor

MESSAGE_ID = "f83ba57450ed0fd8ac9a472b847e830e"

POST_STRING = """Path: not-for-mail
From: <exarkun at somehost.domain.com>
Subject: a test
Newsgroups: alt.test.nntp
Organization: 
Summary: 
Keywords: 
Message-Id: %s
User-Agent: tin/1.4.5-20010409 ("One More Nightmare") (UNIX) (Linux/2.4.17 (i686))

this is a test
...
lala
moo
-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
--
 10:56pm up 4 days, 4:42, 1 user, load average: 0.08, 0.08, 0.12
""" % (MESSAGE_ID)

class NewsTestCase(unittest.TestCase):
    def callback(self, result):
        self.result = result

    def errback(self, failure):
        try:
            self.fail('Errback called: ' + str(failure))
        except Exception, e:
            self.error = sys.exc_info()
            raise

    def timeout(self):
        reactor.crash()
        self.fail('Timed out')

    def setUp(self):
        self.backend = database.NewsShelf(None, 'news2.db')
        self.backend.addGroup('alt.test.nntp', 'y')
        self.backend.postRequest(POST_STRING.replace('\n', '\r\n'))

    def tearDown(self):
        try:
            del self.result
        except:
            pass
        try:
            del self.error
        except:
            pass

    def testArticleExists(self):
        d = self.backend.articleExistsRequest(MESSAGE_ID)
        self.assert_(d.result)

    def testArticleRequest(self):
        d = self.backend.articleRequest(None, None, MESSAGE_ID)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(type(self.result) == types.TupleType,
                        'callback result is wrong type: ' + str(self.result))
        self.failUnless(len(self.result) == 3,
                        'callback result list should have three entries: ' +
                        str(self.result))
        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))
        self.failUnless(self.result[2].find('\r\n\r\n'),
                        "Can't find \\r\\n\\r\\n between header and body")

    def testHeadRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.headRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[1] == MESSAGE_ID,
                        "callback result Message-Id doesn't match: %s vs %s" %
                        (MESSAGE_ID, self.result[1]))

        self.failUnless(self.result[2][-2:] == '\r\n',
                        "headers must be \\r\\n terminated.")

    def testBodyRequest(self):
        self.testArticleRequest()
        index = self.result[0]

        try: del self.result
        except: pass

        try: del self.error
        except: pass

        d = self.backend.bodyRequest("alt.test.nntp", index)
        d.addCallbacks(self.callback, self.errback)

        id = reactor.callLater(5, self.timeout)
        while not hasattr(self, 'result') and not hasattr(self, 'error'):
            reactor.iterate()
        try:
            id.cancel()
        except ValueError: pass

        error = getattr(self, 'error', None)
        if error:
            raise error[0], error[1], error[2]

        self.failUnless(self.result[2][0:4] == 'this', "message body has been altered: " +
                        pformat(self.result[2][0:4]))

From bob at mastersofbranding.com  Wed Apr  9 16:30:41 2003
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Wed, 9 Apr 2003 18:30:41 -0400
Subject: [Twisted-Python] Re: ApplicationService orderization
In-Reply-To: <1049923833.30463.57.camel@troglodyte.funhouse>
Message-ID: <E542D743-6ADA-11D7-BB99-000A95686CD8@mastersofbranding.com>

I don't have time for a large reply right now, but....

On Wednesday, Apr 9, 2003, at 17:30 America/New_York, Kevin Turner 
wrote:

> [Recap:  Last night, Bob was complaining that the order that services
> were started and stopped was undefined, saying
>
> Bob> well if you have service A dependent on service B
> Bob> and you don't want service A to actually start service B
> Bob> like let's say you have a database service or something
> Bob> and you have another service that wants to persist stuff using the
> Bob> database service
>
> so he made the order in which services are started defined as the order
> in which they were added to the service collection, and the reverse for
> stopping.]
>
> Bob, I fear this solution is too fragile if your services really depend
> on one another.  While it will work for now when installing services is
> something that happens once in mktap, I fear it'll break down with more
> dynamic service management.  Example::
>
>     application.addService("dataStore", StupidStorage())
>     application.addService("dataMaker", FooService())
>
>     # ...later, decide we have outgrown StupidStorage:
>     application.removeService("dataStore")
>     application.addService("dataStore", RealStorage())

Well nomatter what, unless it uses 
application.getServiceNamed("dataStore") everywhere, you just broke 
dataMaker.  If you're changing the storage you have bigger things to 
worry about than this little corner case.  You need to pause/stop 
FooService, export all the data from the existing storage, stop the 
existing storage, start the new storage, import all the data into the 
new storage, change FooService's reference to the new storage, 
resume/start FooService, and cross your fingers.

It is a good feature that services get started and stopped in a 
sensible order, there's no reason they shouldn't.  I didn't want to 
change the implementation to a list because that would've required more 
code to change, and had the capability to break existing stuff because 
there is no API iterate an AbstractServiceCollection (or the bastard 
Application class, which should be one but doesn't mixin IIRC).

>
> With your ordering, the new dataStore will now stop before dataMaker
> does.
>
> Instead of introducing ordering dependencies into the flat top-level
> service namespace, I think the right answer to your problem is to do as
> Chris suggested: Use a hierarchical structure by making dataStore a
> MultiService, and adding any dataMaker services at its children.  That
> way your dataStore can always make sure its children shut down before 
> it
> does.

That's only an issue if you use persisted Application objects, I don't. 
  What if you want to stop the storage without stopping it's children?  
In some cases, my ApplicationServices only depend on the storage for 
initialization anyways, so it wouldn't make sense to force them to shut 
down when the storage does.

>
> Does this work for you?  If so, I would like to revert your changes
> making Application.services an OrderedDict before the (imminent!)
> release, just because anything that requires a change to the
> persistnceVersion is a big potential spot for trouble.  We have no
> inter-version testing framework at all.

You can take out the version upgrade if it doesn't work.  I used an 
OrderedDict for that reason, it has the same interface as a normal 
dict..  so no change to the code (other than stopping in reverse order 
of keys, which will still work on a regular dict, and __init__ of 
course) were made.  The upgrade was purely so new services added to old 
application objects would have their start/stop order preserved.

-bob




From kevin at freegeek.org  Thu Apr 10 03:50:14 2003
From: kevin at freegeek.org (Kevin Turner)
Date: 10 Apr 2003 02:50:14 -0700
Subject: [Twisted-Python] 1.0.4alpha2 fails accepttests for mail
Message-ID: <1049968211.30462.73.camel@troglodyte.funhouse>

Packages of 1.0.4alpha2 are on their way to distribution centers now. 
The reason it's marked "alpha" rather than "release candidate" is
because accepttests.runMailTest fails.

 - Kevin,

Acting Release Manager

-- 
The moon is first quarter, 51.4% illuminated, 7.5 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030410/9e2a796e/attachment.sig>

From glyph at twistedmatrix.com  Fri Apr 11 22:45:18 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 12 Apr 2003 00:45:18 -0400
Subject: [Twisted-Python] This internet brought to you by ____.
Message-ID: <8FCE3252-6CA1-11D7-AF6F-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Dear Twisted Users,

In the last few months, Twisted seems to have become exponentially more 
popular.  I need to create more graphs and charts that show this in a 
systematic way, but I can certainly tell you that my bandwidth has been 
utilized more than it was in the past.

As many of you know, I host twistedmatrix.com in my home, on a 
"business DSL" line.  All of the Twisted developers use this machine, 
for running tests, running their own development servers, and checking 
their email.  It also runs the twistedmatrix.com web site and CVS 
server.  I like this set-up since it makes it relatively easy to make 
backups quickly, upgrade the hardware on this machine to meet demand, 
and "eat our own dog food": use various Twisted services in production.

With increased popularity comes increased traffic.  While the CPU of 
our development system remains at near-idle load, the bandwidth here is 
clearly inadequate.  Also, although I do nominally run a business here 
(a few *very* small odd hosting jobs) that's certainly not paying the 
full cost of keeping business DSL running.  I also don't really have a 
good enough set-up to set up a sensible contribution plan like the 
http://www.gnu-darwin.org/ site.

So, if you would like to see better performance out of the 
twistedmatrix.com site, I've finally gotten a personal PayPal "donate" 
button working that you can send contributions to.  You can find it on 
my personal website:

	http://www.twistedmatrix.com/users/glyph/scribbles/

Please include "bandwidth" in the "special instructions" field that you 
see when you send a contribution.  Also, please don't contribute 
anything if you're struggling yourself.  The developers should be 
beneficiaries of such contributions, not the donors.

Be advised that if I were to somehow become fabulously wealthy from 
these contributions, it would definitely be a good thing for the 
project as a whole ;-).

In related news, we are working on a plan to recognize folks and 
companies who have contributed to development of particular areas of 
Twisted.  As-yet-unacknowledged sponsors include Zoteca, Divmod, and 
Ninjaneering.  If you'd like to be a sponsor of a particular area of 
Twisted development, I'd like to hear from you.

Sometime soon there will definitely be a more structured way to 
organize such efforts, but until then, every little bit helps.  I 
encourage other Twisted developers to get other similar "donate" 
buttons - I would like to put up a "tip jar" page at some point where 
users can select a developer and contribute something.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+l5nkvVGR4uSOE2wRAnYNAJ9ccUedM0rMpjLgfjew3kHeFY/4agCfeoad
xTCxz9IBWwjiB/cmzaRcMcQ=
=lqWu
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Sat Apr 12 01:12:08 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sat, 12 Apr 2003 09:12:08 +0200
Subject: [Twisted-Python] Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com>
Message-ID: <b78e75$e02$1@main.gmane.org>

Clark C. Evans wrote:

> Ok.  The complete re-write of flow.py based on the work of
> extrepum ("Bob Ippolito") is finished, with a test case
> checked in.  This differs from extrepum's work [1] in
> some ways, but is almost identical in others.


Thank you so much Clark ! 
BTW, I'd like to test flow.py for my own student projects, but documentation
is in several threads on the newsgroup. Moreover, they are sometimes for
deprecated versions of flow.py. The best would be to write a little
tutorial, and include it in the HOWTO documentation. flow.py would be so
clear for most people.

I'd like to sea some real exemples with QueryIterator and the way to manage
several flow in an application.

If you need some help to write it, maybe I can write some specific parts.
But due to my poor english, this will be painful for me :-p


---
Philippe






From lafou at wanadoo.fr  Sat Apr 12 07:51:41 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Sat, 12 Apr 2003 15:51:41 +0200
Subject: [Twisted-Python] Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com>
Message-ID: <b795k9$4k0$1@main.gmane.org>

Clark C. Evans wrote:

> Ok.  The complete re-write of flow.py based on the work of
> extrepum ("Bob Ippolito") is finished, with a test case
> checked in.  This differs from extrepum's work [1] in
> some ways, but is almost identical in others.
> 


Just some questions : 

- will flow.py be included in Twisted 1.0.4 (rc) ? 
- Did you write some unit tests ?
- could you add the outpout of your exemple (at the beginning of flow.py) ?


- In QueryIterator :

"
            self.curs = conn.cursor()
            if self.data: self.curs.execute(self.sql % self.data) 
"
but :

>>> 'cursor' in dir (adbapi.ConnectionPool)
0

I think you want to use a 'standard' pool corresponding to API DB 2.0
twisted.entreprise.adbapi.ConnectionPool doesn't have a cursor method.
NTL, it's just the right use of flow, because we don't want a deffered here
(because of thread use).



kind regards
Philippe





From ecn at metaslash.com  Sat Apr 12 08:29:30 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 12 Apr 2003 10:29:30 -0400
Subject: [Twisted-Python] serial port error
Message-ID: <20030412142930.GA925@localhost.localdomain>

I tried to write to a serial port today, and Twisted didn't do so well.
"AttributeError: SerialPort instance has no attribute 'unsent'"

Linux Red Hat 9
Twisted (from CVS at 5:30 AM EDT)

Test:
    from twisted.protocols.basic import LineReceiver
    from twisted.internet.serialport import SerialPort
    from twisted.internet import reactor

    class Test(LineReceiver):
	def connectionMade(self):
	    self.transport.write('Hello World!\n')
    SerialPort(Test(), '/dev/ttyS0', reactor)
    reactor.run()

Stacktrace:
      File "test.py", line 10, in ?
	SerialPort(Test(), '/dev/ttyS0', reactor)
      File "/usr/lib/python2.2/site-packages/twisted/internet/serialport/posixserialport.py", line 49, in __init__
	self.protocol.makeConnection(self)
      File "/usr/lib/python2.2/site-packages/twisted/internet/protocol.py", line 290, in makeConnection
	self.connectionMade()
      File "test.py", line 8, in connectionMade
	self.transport.write('Hello World!\n')
      File "/usr/lib/python2.2/site-packages/twisted/internet/abstract.py", line 145, in write
	l = self.writeSomeData(data)
      File "/usr/lib/python2.2/site-packages/twisted/internet/serialport/posixserialport.py", line 59, in writeSomeData
	return os.write(self.fileno(), self.unsent)
    AttributeError: SerialPort instance has no attribute 'unsent'

-Eric



From exarkun at intarweb.us  Sat Apr 12 14:44:47 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 16:44:47 -0400
Subject: [Twisted-Python] serial port error
In-Reply-To: <20030412142930.GA925@localhost.localdomain>
References: <20030412142930.GA925@localhost.localdomain>
Message-ID: <20030412204447.GA6488@meson.dyndns.org>

On Sat, Apr 12, 2003 at 10:29:30AM -0400, Eric C. Newton wrote:
> 
> I tried to write to a serial port today, and Twisted didn't do so well.
> "AttributeError: SerialPort instance has no attribute 'unsent'"

  I just commited the fix, thanks for the report!

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 23 days, 17:01, 4 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030412/803cff87/attachment.sig>

From exarkun at intarweb.us  Sat Apr 12 15:50:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 17:50:53 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030411140915.GA68773@mithrandr.moria.org>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org>
Message-ID: <20030412215053.GA7183@meson.dyndns.org>

On Fri, Apr 11, 2003 at 04:09:16PM +0200, Neil Blakey-Milner wrote:
> On Thu 2003-04-10 (23:35), Neil Blakey-Milner wrote:
> > I'd like to know what people think about the following patch and tests.
> > 
> > These are my first tests for Twisted, so I'm not sure whether I'm
> > stepping over any style rules.
> > 

  Niel,

   Thanks!  I've neglected t.news for too long.  It looks like there are
some good fixes in here.

    I notice there's a fix for parsing headers with continuations included
here too, which is cool.  I don't think I was even aware of such things when
I wrote the code originally - what seems apparent to me now, though, is that
Article either shouldn't exist at all, or that it should grow into (and move
somewhere appropriate for) a fully-fledged, asynchronous message parser that
can be used throughout Twisted wherever email-like messages need to be dealt
with.

    In the test cases, you also used assert_() (but just once, I assume it
was an oversight), which shouldn't be access directly by tests cases, so I
changed this to a failUnless().  Also, I personally make it a point to turn
string module calls into string method calls when cleaning up code, and so
have done this as well.

    All in all, nice work.

  Jp 

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 23 days, 17:01, 4 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030412/f70f5746/attachment.sig>

From acapnotic at twistedmatrix.com  Sat Apr 12 16:30:37 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 12 Apr 2003 15:30:37 -0700
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412215053.GA7183@meson.dyndns.org>
References: <20030410213554.GA58576@mithrandr.moria.org>
	 <20030411140915.GA68773@mithrandr.moria.org>
	 <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <1050186636.4978.12.camel@troglodyte.funhouse>

>     In the test cases, you also used assert_() (but just once, I assume it
> was an oversight), which shouldn't be access directly by tests cases,

says who?  why not?  I've always thought it was just an alternative
spelling of failUnless, and that it has the dangling underscore simply
because 'assert' is a keyword in Python.

-- 
The moon is waxing gibbous, 77.0% illuminated, 10.1 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030412/f7163b16/attachment.sig>

From exarkun at intarweb.us  Sat Apr 12 16:42:29 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sat, 12 Apr 2003 18:42:29 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <1050186636.4978.12.camel@troglodyte.funhouse>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <1050186636.4978.12.camel@troglodyte.funhouse>
Message-ID: <20030412224229.GA7605@meson.dyndns.org>

On Sat, Apr 12, 2003 at 03:30:37PM -0700, Kevin Turner wrote:
> >     In the test cases, you also used assert_() (but just once, I assume it
> > was an oversight), which shouldn't be access directly by tests cases,
> 
> says who?  why not?  I've always thought it was just an alternative
> spelling of failUnless, and that it has the dangling underscore simply
> because 'assert' is a keyword in Python.

  Says me!  Rar!  I thought we only still supported it because PyUnit had
it.  In any case, it *is* bound to the same function as failUnless, so it
makes no practical difference, and I'm certainly not the authority for
Trial.  Multiple spellings for the same thing sucks, though, and given a
choice between the two, I'd pick failUnless() any day.

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 23 days, 19:01, 4 users, load average: 0.18, 0.18, 0.13
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030412/ad2b0480/attachment.sig>

From bob at redivi.com  Sat Apr 12 17:06:53 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sat, 12 Apr 2003 19:06:53 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412224229.GA7605@meson.dyndns.org>
Message-ID: <73565079-6D3B-11D7-B675-000A95686CD8@redivi.com>

On Saturday, Apr 12, 2003, at 18:42 America/New_York, Jp Calderone 
wrote:

> On Sat, Apr 12, 2003 at 03:30:37PM -0700, Kevin Turner wrote:
>>>     In the test cases, you also used assert_() (but just once, I 
>>> assume it
>>> was an oversight), which shouldn't be access directly by tests cases,
>>
>> says who?  why not?  I've always thought it was just an alternative
>> spelling of failUnless, and that it has the dangling underscore simply
>> because 'assert' is a keyword in Python.
>
>   Says me!  Rar!  I thought we only still supported it because PyUnit 
> had
> it.  In any case, it *is* bound to the same function as failUnless, so 
> it
> makes no practical difference, and I'm certainly not the authority for
> Trial.  Multiple spellings for the same thing sucks, though, and given 
> a
> choice between the two, I'd pick failUnless() any day.

IIRC, Trial's unittest module has multiple spellings for a lot of 
things.  What we should probably do is make a decision on one set of 
spellings and issue DeprecationWarnings for the rest.

-bob




From cce at clarkevans.com  Sat Apr 12 17:39:48 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 12 Apr 2003 23:39:48 +0000
Subject: [Twisted-Python] Re: rewrite of flow.py completed
In-Reply-To: <b795k9$4k0$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org>
Message-ID: <20030412233948.GA16957@doublegemini.com>

On Sat, Apr 12, 2003 at 03:51:41PM +0200, Philippe Lafoucri�re wrote:
| - will flow.py be included in Twisted 1.0.4 (rc) ? 

It will probably be in the sandbox till it gets users other
than me, and in particular, till etrepum's feedback.

| - Did you write some unit tests ?

I started; see sandbox/test_flow.py

| - could you add the outpout of your exemple (at the beginning of flow.py)?

Done.

| - In QueryIterator :
| 
| "
|             self.curs = conn.cursor()
| "
| but :
| 
| >>> 'cursor' in dir (adbapi.ConnectionPool)
| 0

If you look, the conn is created from self.pool.connect() which
returns a standard API DB 2.0 connection.  I would have rather had
the constructor take a connection, but this won't work as the
Twisted ADBAPI uses the current thread to find the connection, thus
pool.connect() must be run in the appropriate thread, which is
not the thread where the constructor for this class would be executed.

| I think you want to use a 'standard' pool corresponding to API DB 2.0
| twisted.entreprise.adbapi.ConnectionPool doesn't have a cursor method.
| NTL, it's just the right use of flow, because we don't want a deffered here
| (because of thread use).

QueryIterator uses the ThreadedIterator.  ThreadedIterator basically
is two iterators that are 'linked' together, one in the main thread
and one in the thread which is allowed to block.  The two iterators
communicate with a shared list which holds intermediate output, ie,
it is the message queue from the iterator in the secondary thread 
to the primary thread.   Anyway, the iterator in the primary thread
is a simple 'proxy' like iterator, which raises Cooperate if there
isn't any data available from the secondary iterator.

Here is a simple example of how to make a ThreadedIterator...
note that the sleep(.1) call is not executed in the main 
thread -- that's the whole point of the ThreadedIterator.

        class CountIterator(flow.ThreadedIterator):
            def __init__(self, count):
                flow.ThreadedIterator.__init__(self)
                self.count = count
            def next(self): # this is run in a separate thread
                from time import sleep
                sleep(.1)
                val = self.count
                if not(val):
                    raise flow.StopIteration
                self.count -= 1
                return [val]
        def res(x): assert([5,4,3,2,1] == x)
        from twisted.internet import reactor
        f = flow.DeferredFlow(CountIterator(5))
        f.addCallback(res)
        reactor.callLater(2,reactor.stop)
        reactor.run()

Anyway, I made a bunch of checkins about a day ago to clean
up some of the documentation and to add the test_flow.py 

Best,

Clark
-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2001 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from __future__ import nested_scopes
import flow
import unittest

class producer:
    """ iterator version of the following generator... 

    def producer():
        lst = flow.Generator([1,2,3])
        nam = flow.Generator(['one','two','three'])
        while 1: 
            yield lst; yield nam
            if lst.stop or nam.stop:
                return
            yield (lst.result, nam.result)
    """
    def __iter__(self):
        self.lst   = flow.Generator([1,2,3])
        self.nam   = flow.Generator(['one','two','three'])
        self.state = self.yield_lst
        return self
    def yield_lst(self):
        self.state = self.yield_nam
        return self.lst
    def yield_nam(self):
        self.state = self.yield_results
        return self.nam
    def yield_results(self):
        self.state = self.yield_lst
        if self.lst.stop or self.nam.stop:
            raise flow.StopIteration
        return (self.lst.result, self.nam.result)
    def next(self):
        return self.state()


class consumer:
    """ iterator version of the following generator...

    def consumer():
        title = flow.Generator(['Title'])
        lst = flow.Generator(producer())
        yield title
        yield title.getResult()
        try:
            while 1:
                yield lst
                yield lst.getResult()
        except flow.StopIteration: pass
    """    
    def __iter__(self):
        self.title = flow.Generator(['Title'])
        self.lst   = flow.Generator(producer())
        self.state = self.yield_title
        return self
    def yield_title(self):
        self.state = self.yield_title_result
        return self.title
    def yield_title_result(self):
        self.state = self.yield_lst
        return self.title.getResult()
    def yield_lst(self):
        self.state = self.yield_result
        return self.lst
    def yield_result(self):
        self.state = self.yield_lst
        return self.lst.getResult()
    def next(self):
        return self.state()

class FlowTest(unittest.TestCase):
    def testBasic(self):
        f = flow.Flow([1,2,3])
        f.execute()
        self.assertEqual([1,2,3],f.results)

    def testProducer(self):
        f = flow.Flow(producer())
        f.execute() 
        self.assertEqual([(1,'one'),(2,'two'),(3,'three')],f.results)

    def testConsumer(self):
        f = flow.Flow(consumer())
        f.execute() 
        self.assertEqual(['Title',(1,'one'),(2,'two'),(3,'three')],f.results)

    def testDeferred(self):
        from twisted.internet import reactor
        def res(x):
            self.assertEqual(['Title', (1,'one'),(2,'two'),(3,'three')], x)
        f = flow.DeferredFlow(consumer())
        f.addCallback(res)
        reactor.iterate()

    def testThreaded(self):
        class CountIterator(flow.ThreadedIterator):
            def __init__(self, count):
                flow.ThreadedIterator.__init__(self)
                self.count = count
            def next(self): # this is run in a separate thread
                from time import sleep
                sleep(.1)
                val = self.count
                if not(val):
                    raise flow.StopIteration
                self.count -= 1
                return [val]
        def res(x): self.assertEqual([5,4,3,2,1], x)
        from twisted.internet import reactor
        f = flow.DeferredFlow(CountIterator(5))
        f.addCallback(res)
        reactor.callLater(2,reactor.stop)
        reactor.run()

if '__main__' == __name__:
    unittest.main()

-------------- next part --------------
# Twisted, the Framework of Your Internet
# Copyright (C) 2003 Matthew W. Lefkowitz
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of version 2.1 of the GNU Lesser General
# Public License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
# USA
#
from __future__ import nested_scopes
""" Flow ... async data flow

    This module provides a mechanism for using async data flows through
    the use of generators.  While this module does not use generators in
    its implementation, it isn't very useable without them.   A data flow
    is constructed with a top level generator, which can have three 
    types of yield statements:  flow.Cooperate, flow.Generator, or
    any other return value with exceptions wrapped using failure.Failure
    An example program...

        from __future__ import generators
        import flow
        def producer():
            lst = flow.Generator([1,2,3])
            nam = flow.Generator(['one','two','three'])
            while 1:
                yield lst; yield nam
                if lst.stop or nam.stop: 
                    return
                yield (lst.result, nam.result)
    
        def consumer():
            title = flow.Generator(['Title'])
            yield title
            print title.getResult()
            lst = flow.Generator(producer())
            try:
                while 1:
                    yield lst
                    print lst.getResult()
            except flow.StopIteration: pass
    
        flow.Flow(consumer()).execute()

    produces the output:

        Title
        (1, 'one')
        (2, 'two')
        (3, 'three')
        
"""
from twisted.python import failure
from twisted.python.compat import StopIteration, iter

class FlowCommand: 
    """ Objects given special meaning when returned from yield """
    pass

class Cooperate(FlowCommand):
    """ Represents a request to delay and let other events process

        Objects of this type are returned within a flow when
        the flow would block, or needs to sleep.  This object
        is then used as a signal to the flow mechanism to pause
        and perhaps let other delayed operations to proceed.
    """
    def __init__(self, timeout = 0):
        self.timeout = timeout

class Generator(FlowCommand):
    """ Wraps a generator or other iterator for use in a flow 

        Creates a nested generation stage (a producer) which can provide
        zero or more values to the current stage (the consumer).  After 
        a yield of this object when control has returned to the caller,
        this object will have two attributes:

            stop    This is true if the underlying generator has not 
                    been started (a yield is needed) or if the underlying
                    generator has raised StopIteration

            result  This is the result of the generator if it is active, 
                    the result may be a fail.Failure object if an 
                    exception was thrown in the nested generator.
    """      
    def __init__(self, iterable):
        self._next  = iter(iterable).next
        self.result = None
        self.stop   = 1
    def isFailure(self):
        """ return a boolean value if the result is a Failure """ 
        if self.stop: raise StopIteration()
        return isinstance(self.result, failure.Failure)
    def getResult(self):
        """ return the result, or re-throw an exception on Failure """
        if self.isFailure():
            raise (self.result.value or self.result.type)
        return self.result
    def _generate(self):
        """ update the active and result member variables """ 
        try:
            self.result = self._next()
            self.stop = 0
        except StopIteration:
            self.stop = 1
            self.result = None
        except Cooperate, coop:
            self.stop = 0
            self.result = coop
        except failure.Failure, fail:
            self.stop = 1
            self.result = failure
        except:
            self.stop = 1
            self.result = failure.Failure()

class Flow:
    """ A flow contruct, created with a top-level generator/iterator

        The iterable provided to this flow is the top-level consumer
        object.  From within the consumer, multiple 'yield' calls can
        be made returning either Cooperate or Generate.  If a Generate
        object is returned, then it becomes the current context and
        the process is continued.  Communication from the producer 
        back to the consumer is done by yield of a non FlowItem
    """
    def __init__(self, iterable):
        self.results = []
        self._stack  = [Generator(iterable)]
    def _addResult(self, result):
        """ private called as top-level results are added"""
        self.results.append(result)
    def _execute(self):
        """ private execute, execute flow till a Cooperate is found """
        while self._stack:
            head = self._stack[-1]
            head._generate()
            if head.stop:
                self._stack.pop()
            else:
                result = head.result
                if isinstance(result, FlowCommand):
                    if isinstance(result, Cooperate):
                        return result.timeout
                    assert(isinstance(result, Generator))
                    self._stack.append(result)
                else:
                    if len(self._stack) > 1:
                        self._stack.pop()
                    else:
                        if self._addResult(result):
                            return
    def execute(self):
        """ continually execute, using sleep for Cooperate """
        from time import sleep
        while 1:
            timeout = self._execute()
            if timeout is None: break
            sleep(timeout)

from twisted.internet import defer
class DeferredFlow(Flow, defer.Deferred):
    """ a version of Flow using Twisted's reactor and Deferreds
 
        In this version, a call to execute isn't required.  Instead,
        the iterable is scheduled right away using the reactor.  And,
        the Cooperate is implemented through the reactor's callLater.
 
        Since more than one (possibly failing) result could be returned,
        this uses the same semantics as DeferredList
    """
    def __init__(self, iterable, delay = 0, 
                 fireOnOneCallback=0, fireOnOneErrback=0):
        """initialize a DeferredFlow
        @param iterable:          top level iterator / generator
        @param delay:             delay when scheduling reactor.callLater
        @param fireOnOneCallback: a flag indicating that the first good 
                                  yielded result should be sent via Callback
        @param fireOnOneErrback:  a flag indicating that the first failing
                                  yield result should be sent via Errback
        """
        from twisted.internet import reactor
        defer.Deferred.__init__(self)
        Flow.__init__(self,iterable)
        self.fireOnOneCallback = fireOnOneCallback
        self.fireOnOneErrback  = fireOnOneErrback
        reactor.callLater(delay, self._execute)
    def execute(self): 
        raise TypeError("Deferred Flow is auto-executing") 
    def _addResult(self, result):
        """ emulate DeferredList behavior, short circut if event is fired """
        if not self.called:
            if self.fireOnOneCallback:
                if not isinstance(result, failure.Failure):
                    self.callback((result,len(self.results)))
                    return 1
            if self.fireOnOneErrback:
                if isinstance(result, failure.Failure):
                    self.errback(fail.Failure((result,len(self.results))))
                    return 1
            self.results.append(result)
    def _execute(self):
        timeout = Flow._execute(self)
        if timeout is None:
            if not self.called:
                self.callback(self.results)
        else:
            from twisted.internet import reactor
            reactor.callLater(timeout, self._execute)
 
#
# The following is a thread package which really is othogonal to
# Flow.  Flow does not depend on it, and it does not depend on Flow.
# Although, if you are trying to bring the output of a thread into
# a Flow, it is exactly what you want.   The QueryIterator is 
# just an obvious application of the ThreadedIterator.
#

class ThreadedIterator:
    """
       This is an iterator which tunnels output from an iterator
       executed in a thread to the main thread.   Note, unlike
       regular iterators, this one throws a Cooperate exception
       which must be handled by calling reactor.callLater so that
       the producer threads can have a chance to send events to 
       the main thread.

       Basically, the 'init' and 'next' method of subclasses are
       executed in this alternative thread.  The results of 'next'
       are marshalled back into the primary thread.  If when the
       main thread data is not available, then a particular 
       exception.
    """
    def __init__(self):
        class _Tunnel:
            def __init__(self, source):
                """
                    This is the setup, the source argument is the iterator
                    being wrapped, which exists in another thread.
                """
                self.source     = source
                self.isFinished = 0
                self.failure    = None
                self.buff       = []
            def process(self):
                """
                    This is called in the 'source' thread, and 
                    just basically sucks the iterator, appending
                    items back to the main thread.
                """
                try:
                    self.source.init()
                except: 
                    self.failure = failure.Failure()
                from twisted.internet.reactor import callFromThread
                try:
                    while 1:
                        val = self.source.next()
                        self.buff.extend(val)    # lists are thread safe
                except StopIteration:
                    callFromThread(self.stop)
                except: 
                    if not self.failure:
                        self.failure = failure.Failure()
                self.source = None
            def setFailure(self, failure):
                self.failure = failure
            def stop(self):
                self.isFinished = 1
            def next(self):
                if self.buff:
                   return self.buff.pop(0)
                if self.isFinished:  
                    raise StopIteration
                if self.failure:
                    raise self.failure
                raise Cooperate()
        tunnel = _Tunnel(self)
        self._tunnel = tunnel

    def __iter__(self): 
        from twisted.internet.reactor import callInThread
        callInThread(self._tunnel.process)
        return self._tunnel
    
    def init(self):
        pass   
     
    def next(self):
        raise StopIteration

class QueryIterator(ThreadedIterator):
    def __init__(self, pool, sql, fetchall=0):
        ThreadedIterator.__init__(self)
        self.curs = None
        self.sql  = sql
        self.pool = pool
        self.fetchall = fetchall
     
    def init(self):
        conn = self.pool.connect()
        self.curs = conn.cursor()
        self.curs.execute(self.sql)
 
    def next(self):
        if self.fetchall:
            res = self.curs.fetchall()
        else:
            res = self.curs.fetchmany()
        if not(res): 
            raise StopIteration
        return res

From glyph at twistedmatrix.com  Sun Apr 13 00:16:55 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 01:16:55 -0500
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Saturday, April 12, 2003, at 04:50 PM, Jp Calderone wrote:

> ... throughout Twisted wherever email-like messages need to be dealt 
> with ...

Speaking of such message-unifying work:

Moshe and I were recently on IRC, discussing a unification of several 
disparate message representations within Twisted.  We're not exactly 
sure where this is going, but in a future release, the .mail, .words, 
and .news packages should all be unified, probably under the heading of 
"words", in order to present a coherent messaging API for things like 
bots which don't care whether you're talking to them through email, 
netnews, IRC, AOL IM, or whatever.

What this really means is that words is going to grow a 
"store-and-forward" mechanism as well as a "store-and-check" mechanism. 
  Also, a higher-level POP3 and IMAP client will be integrated for 
retrieval of messages.

twisted.im also needs to be refactored, in order to make its API more 
coherent and easier to register observers of.  However, it remains 
unclear whether this kind of functionality actually deserves a separate 
package (that .words will use) or whether it will go into .words 
directly.  Moshe has me mostly convinced that it should remain an 
independant package, since real-time-client code is going to look 
significantly different to abstract-message-processing-and-forwarding 
code.

Thoughts?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mQDZvVGR4uSOE2wRAi+AAJwOuVHtPtDr23Jz2bTgG5FbhnvqNACgjrVq
5/4mYIyKwFlvA0wMRyvWkjg=
=sF+C
-----END PGP SIGNATURE-----




From screwtape at froup.com  Sun Apr 13 01:53:46 2003
From: screwtape at froup.com (Tim Allen)
Date: Sun, 13 Apr 2003 17:53:46 +1000
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>

On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
wrote:

<snip>

> twisted.im also needs to be refactored, in order to make its API more 
> coherent and easier to register observers of.  However, it remains 
> unclear whether this kind of functionality actually deserves a 
> separate package (that .words will use) or whether it will go into 
> .words directly.  Moshe has me mostly convinced that it should remain 
> an independant package, since real-time-client code is going to look 
> significantly different to abstract-message-processing-and-forwarding 
> code.
>
> Thoughts?

I'll be watching this with interest. I'm not going to say it's 
impossible or crazy, but I'd like to see how all the inherent 
difficulties in making a "generic messagey thing" are overcome.

 From the top of my head:
  - IMAP and NNTP have a bunch of folders, POP3 has just one.
  - IMAP lets you create folders and move messages about, NNTP doesn't.
  - Instant messaging apps have no folders, but you could no doubt 
synthesise an 'inbox'. Some IM systems let you have 'categories' of 
buddies, which you might present as message folders. However, then IM 
has the restriction that a given folder can only contain messages from 
one recipient, which is not the case with IMAP or NNTP.
  - POP3 and NNTP need to be polled for new messages, IM protocols alert 
you when a new message comes in. I'm not sure which way IMAP goes.
  - Email and usenet messages generally have a variety of interesting 
and useful headers that end-user applications are going to want to look 
at, IM messages do not.
  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
NNTP.
  - Email and usenet messages have message-threading, IM does not.

I can't see any sort of 'core feature set' and 'extension feature set' 
in the above list, more like every protocol and format cherry-picks the 
features it wants from a central store.

Another idea - of the various communication sources I personally use, 
they generally fall into 'IM-style (ICQ, IRC)' and 'email-style (email, 
usenet)' interfaces. One message source that I read in email-style that 
I have not yet seen mentioned is RSS. That would be an interesting 
thing to add to  a Universal Messaging client, wouldn't it? :)




From santacruz at southern.edu  Sun Apr 13 10:07:43 2003
From: santacruz at southern.edu (dansan)
Date: Sun, 13 Apr 2003 12:07:43 -0400
Subject: [Twisted-Python] Would this do it?
Message-ID: <20030413160743.GA8677@matilda.southern.edu>

Enlightened ones,

I'm trying to develop a small server for a checkers tournament that we
are trying to host in our school.  Students will submit their entries
that talk on stdin-stdout.  Our idea was to make a socket server that
receives all the connections and then makes them all play a tournament.
I've been thinking about doing it from scratch, just using an array of
connections somehow, but this has proven to be way more difficult than I
anticipated.  For one, I've had a difficult time trying to figure out a
way of 'managing' the server real-time.  I've come across twisted just a
day ago, and I'm wondering if I could make it work for me.  Is twisted
applicable to my problem?

I'd appreciate any an all input anyone can give me.  I am quite the
beginner in python, but I'm willing to read up anything that needs to be
read :)

Thanks a ton.

dansan.



From bob at redivi.com  Sun Apr 13 11:37:42 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 13 Apr 2003 13:37:42 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
Message-ID: <A100D6D2-6DD6-11D7-B675-000A95686CD8@redivi.com>

On Sunday, Apr 13, 2003, at 03:53 America/New_York, Tim Allen wrote:

>
> On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
> wrote:
>
> <snip>
>
>> twisted.im also needs to be refactored, in order to make its API more 
>> coherent and easier to register observers of.  However, it remains 
>> unclear whether this kind of functionality actually deserves a 
>> separate package (that .words will use) or whether it will go into 
>> .words directly.  Moshe has me mostly convinced that it should remain 
>> an independant package, since real-time-client code is going to look 
>> significantly different to abstract-message-processing-and-forwarding 
>> code.
>>
>> Thoughts?
>
> I'll be watching this with interest. I'm not going to say it's 
> impossible or crazy, but I'd like to see how all the inherent 
> difficulties in making a "generic messagey thing" are overcome.
>
> From the top of my head:
>  - IMAP and NNTP have a bunch of folders, POP3 has just one.

But from a client perspective, everything but the inbox ends up 
locally.. so you could have the UI be just like IMAP or NNTP, you would 
just augment the POP3 account(s) with a local datastore.

>  - IMAP lets you create folders and move messages about, NNTP doesn't.

So perhaps you just raise exceptions if you try and move messages on a 
NNTP server?

>  - Instant messaging apps have no folders, but you could no doubt 
> synthesise an 'inbox'. Some IM systems let you have 'categories' of 
> buddies, which you might present as message folders. However, then IM 
> has the restriction that a given folder can only contain messages from 
> one recipient, which is not the case with IMAP or NNTP.

AIM has a "chat room" feature which would allow multiple participant 
'folders'

>  - POP3 and NNTP need to be polled for new messages, IM protocols 
> alert you when a new message comes in. I'm not sure which way IMAP 
> goes.

So you have a unified "notification center" type API.  Whether it gets 
notified async or needs to poll to generate notifications is just an 
implementation detail for each protocol.

>  - Email and usenet messages generally have a variety of interesting 
> and useful headers that end-user applications are going to want to 
> look at, IM messages do not.

IM messages have sender/recipient addresses and timestamps.. A chat 
room could have a bunch of "CC's".  What headers other than 
from/date/to/subject/etc are ever really that useful?

>  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
> NNTP.

That's a protocol implementation detail.  Twisted is very good at 
stateful protocols.. just because POP3 isn't completely stateful 
(although it does keep state as to whether or not you're authenticated) 
doesn't really change anything.

>  - Email and usenet messages have message-threading, IM does not.
>

IM is sort of threaded.. each conversation with each person could be 
considered a thread.. It's certainly not like a conversation with a 
particular person is a set of completely unrelated messages (although 
it can be :).

-bob




From exarkun at intarweb.us  Sun Apr 13 13:58:06 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 13 Apr 2003 15:58:06 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com>
Message-ID: <20030413195806.GC12415@meson.dyndns.org>

On Sun, Apr 13, 2003 at 05:53:46PM +1000, Tim Allen wrote:
> 
> On Sunday, Apr 13, 2003, at 16:16 Australia/Sydney, Glyph Lefkowitz 
> wrote:
> 
> <snip>
> 
> >twisted.im also needs to be refactored, in order to make its API more 
> >coherent and easier to register observers of.  However, it remains 
> >unclear whether this kind of functionality actually deserves a 
> >separate package (that .words will use) or whether it will go into 
> >.words directly.  Moshe has me mostly convinced that it should remain 
> >an independant package, since real-time-client code is going to look 
> >significantly different to abstract-message-processing-and-forwarding 
> >code.
> >
> >Thoughts?
> 
> I'll be watching this with interest. I'm not going to say it's 
> impossible or crazy, but I'd like to see how all the inherent 
> difficulties in making a "generic messagey thing" are overcome.
> 
> From the top of my head:
>  - IMAP and NNTP have a bunch of folders, POP3 has just one.

  This is easy, POP3's single folder is IMAP4's "INBOX", and NNTP lives in
an entirely different namespace from regular IMAP4 folders.

  A related point: what isn't clear to me is how to handle the difference
between the practically required download-all-messages behavior of POP3, and
the complete opposite of IMAP4 and NNTP.

>  - IMAP lets you create folders and move messages about, NNTP doesn't.

  IMAP is allowed to reject these operations, so NNTP and POP3 could
just have this error behavior in all cases.

>  - Instant messaging apps have no folders, but you could no doubt 
> synthesise an 'inbox'. Some IM systems let you have 'categories' of 
> buddies, which you might present as message folders. However, then IM 
> has the restriction that a given folder can only contain messages from 
> one recipient, which is not the case with IMAP or NNTP.

  Hmm.  No ideas from me here, yet.

>  - POP3 and NNTP need to be polled for new messages, IM protocols alert 
> you when a new message comes in. I'm not sure which way IMAP goes.

  This is a kinda neat coincidence.  IMAP4 does both.  So we need both
behaviors, but POP3/NNTP will only use polling and IM will only use
notification.

>  - Email and usenet messages generally have a variety of interesting 
> and useful headers that end-user applications are going to want to look 
> at, IM messages do not.

  I'm not sure what the right answer is here.  One solution might be to add
headers to IM messages when exposing them through this API.  The information
for most of the common ones is available: From, Sender, Reply-To, To, Date
are obvious, CC and BCC are probably mostly empty (but ICQ used to support
multi-person chat, I don't know of any other protocols do, or if ICQ still
does); Subject is tough, and Message-ID I guess we'd generate ourself. 
Those are all the official "envelope" headers that are required to exist,
Subject being the only one that we really don't have information about -
perhaps giving users a way to tag exchanges with some value, or just leaving
it empty?

  OTOH, it makes sense to view IM messages in groups, not one at a time.  I
don't see how you could coherently add headers to more than one IM message.

>  - IMAP and IM are stateful protocols, POP3 is not. I'm not sure about 
> NNTP.

  NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
support [well?]).  Can you go more into why this might be a problem?  I
think the protocol code should handle any issues raised by this, and present
a unified front to the messaging API.

>  - Email and usenet messages have message-threading, IM does not.

  I think you could do some neat stuff with temporal analysis and trainable
neural networks, but I've got exactly zero practical experience with either
of these techniques, so I won't say this isn't a potential problem :)

  Some problems I foresee:

  - With email, you should always [according to standards documents, anyway]
    have a pretty good idea of what kind of data you're being handed. 
    Content-Type and other MIME headers make it easy enough to decypher what
    someone just sent you, but afaik, no IM protocols that support file
    transfer deal with this.  What's the correct way to handle a file with
    no meta data?

  - PGP; we can verify signatures, but security conscious users will want
    this done client-side - that means preserving the exact structure of the
    message somehow and then sending it on to them.  This doesn't play
    nicely with the idea of being able to receive one kind of message and
    send it off as another kind.

  Jp

-- 
Somewhere, something incredible is waiting to be known.
                -- Carl Sagan
-- 
 up 24 days, 15:01, 1 user, load average: 0.99, 0.90, 0.85
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030413/44967b1a/attachment.sig>

From glyph at twistedmatrix.com  Sun Apr 13 18:32:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 19:32:25 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <E194oOh-0004HL-00@pyramid.twistedmatrix.com>
Message-ID: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This patch strikes me as unnecessary:

On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:

> Modified files:
> Twisted/twisted/internet/app.py 1.89 1.90
>
> Log message:
> DependentMultiService - chained start/stop of services in a sensible 
> order

but I would like to discuss it and other patches like it.  Not to pick 
on bob here; there isn't really a policy on avoiding bloat in Twisted, 
so it can't be said that this is a violation of anything in particular. 
  I just think we need one.

First, my question is: do we have more than one or two users who 
actually need this functionality?  If it's a real, present need for a 
wide variety of applications, then much of this criticism does not 
apply.

Addition of stuff like this strikes me as similar to the addition of 
complicated preference panels to GNOME to work around core usability 
problems, which only created a new usability problems.

This patch is a band-aid on an already crummy and huge interface 
(twisted.internet.app is nasty; ask anyone who has had to work on its 
internals) which makes it even crummier and huger.

Huger: it inflates the interface by one more potentially redundant 
class, so that we have that many more places to insert deprecation 
warnings when we refactor the whole mess into something usable.

Crummier:

> +        # Warning:  On failure, service stops are not
> +        # chained.  However, they will stop in the proper order.

"utility" patches like this will invariably fail to take edge cases 
into account well.  I wouldn't say it's immediately obvious how 
edge-cases *should* be taken into account, personally, but I would 
guess that half-changing the semantics of the ordering in case of 
failure is not the correct thing to do.

My concern is that some ill-thought-out parts of Twisted (twisted.cred, 
twisted.internet.app) will become calcified behind a wide and fragile 
interface that prevents any hope for refactoring.  So far, development 
on these kinds of problem areas has been fairly dynamic, because they 
have been kept small and simple.  However, the inevitable weight of 
history is already slowing down more improvement.  I would like to not 
increase that weight any more than necessary.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mgGcvVGR4uSOE2wRAiuSAKC4TvM4Xtqo3kR64/Z69ZxTh9rKpQCgmnJJ
rkXEyqUu1Rxs9DRjo1T9BS4=
=YYZ9
-----END PGP SIGNATURE-----




From jasper at peak.org  Sun Apr 13 18:57:55 2003
From: jasper at peak.org (Jasper Phillips)
Date: Sun, 13 Apr 2003 17:57:55 -0700 (PDT)
Subject: [Twisted-Python] Would this do it?
In-Reply-To: <20030413160743.GA8677@matilda.southern.edu>
Message-ID: <Pine.LNX.4.44.0304131741500.16658-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sun, 13 Apr 2003, dansan wrote:

> Enlightened ones,

That's not me, but I'll answer anyway...

> I'm trying to develop a small server for a checkers tournament that we
> are trying to host in our school.  Students will submit their entries
> that talk on stdin-stdout.  Our idea was to make a socket server that
> receives all the connections and then makes them all play a tournament.
> I've been thinking about doing it from scratch, just using an array of
> connections somehow, but this has proven to be way more difficult than I
> anticipated.  For one, I've had a difficult time trying to figure out a
> way of 'managing' the server real-time.  I've come across twisted just a
> day ago, and I'm wondering if I could make it work for me.  Is twisted
> applicable to my problem?
> 
> I'd appreciate any an all input anyone can give me.  I am quite the
> beginner in python, but I'm willing to read up anything that needs to be
> read :)

I'm using twisted's Perspective Broker for a generic turn based game engine,
and it works smoothly.  Using PB allows you to write your api almmost as if
networking wasn't involved, excepting only that you'll need to use "callRemote"
for client/server calls instead of normal method calling (and connect your
client/server of course).

The Perspective Broker section on this page was usefull to me:
http://twistedmatrix.com/documents/howto/

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+mgea8EpjZ7/X9bIRAmAOAJ9/p4Z5+CrIBLZe3P3VTWRcsNyRXACgpNPG
2hk3eED8fXi54fEYh+kGcbw=
=ltvO
-----END PGP SIGNATURE-----




From golux at comcast.net  Sun Apr 13 19:36:40 2003
From: golux at comcast.net (Steve Waterbury)
Date: Sun, 13 Apr 2003 21:36:40 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits]
	DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <1050284201.1076.2955.camel@golux>

On Sun, 2003-04-13 at 20:32, Glyph Lefkowitz wrote:

> This patch is a band-aid on an already crummy and huge interface 
> (twisted.internet.app is nasty; ask anyone who has had to work on its 
> internals) which makes it even crummier and huger.

I may be missing something, but this seems like a non-sequitur ...
isn't the putative crumminess and/or hugeness of its interface 
independent of the nastiness of its internals?  (Or at least, 
shouldn't it be ...?  But maybe that's part of what you're 
saying ...) 

> My concern is that some ill-thought-out parts of Twisted (twisted.cred, 
> twisted.internet.app) will become calcified behind a wide and fragile 
> interface that prevents any hope for refactoring.  So far, development 
> on these kinds of problem areas has been fairly dynamic, because they 
> have been kept small and simple.  However, the inevitable weight of 
> history is already slowing down more improvement.  ...

This does not make me feel warm and fuzzy.  ;^)  Okay, 
I admit to having had bad thoughts about cred ... how much 
work do you see it needing?  (Because I'm fixin' to use it 
in the near future ... :^)

Cheers,
- Steve.





From peter at engcorp.com  Sun Apr 13 19:59:30 2003
From: peter at engcorp.com (Peter Hansen)
Date: Sun, 13 Apr 2003 21:59:30 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org>
Message-ID: <3E9A1602.7948A75D@engcorp.com>

Jp Calderone wrote:
> 
>     In the test cases, you also used assert_() (but just once, I assume it
> was an oversight), which shouldn't be access directly by tests cases, so I
> changed this to a failUnless().  

Jp, I realize Twisted unittest is either slightly older than the standard,
or perhaps slightly evolved from it, but I'm not sure why you think 
assert_() shouldn't be used directly by TestCases.  According at least to 
http://www.python.org/doc/current/lib/testcase-objects.html it's merely
a synonym for failUnless(), as all the other assertXxxx() variants are 
synonyms of their respective failXxxxx() methods.  I think it is intended
to be a perfectly valid exposed method.

-Peter



From peter at engcorp.com  Sun Apr 13 20:06:50 2003
From: peter at engcorp.com (Peter Hansen)
Date: Sun, 13 Apr 2003 22:06:50 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <3E9A1602.7948A75D@engcorp.com>
Message-ID: <3E9A17BA.45E6CB57@engcorp.com>

Peter Hansen wrote (on assert_() versus failUnlessXxxx() ):
> 
> According at least to 
> http://www.python.org/doc/current/lib/testcase-objects.html it's merely
> a synonym for failUnless(), as all the other assertXxxx() variants are
> synonyms of their respective failXxxxx() methods.

Yes, sorry... my response was already obsolete before I posted it.
Shouldn't count so much on my (also obsolete) mail reader's threading
capabilities to tell me when I'd read all messages on this topic.

(By the way, I think there's actually a place for both forms of the
assertXxxx() and failUnlessXxxxx() methods.  Sometimes the logic
just seems clearer to write it (and read it) one way, or the other.  
Perhaps that's a sign of smelly programmer thinking, but all I can do 
is report on what I've experienced personally...)

-Peter



From glyph at twistedmatrix.com  Sun Apr 13 20:42:29 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 13 Apr 2003 21:42:29 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <1050284201.1076.2955.camel@golux>
Message-ID: <BC2B704E-6E22-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, April 13, 2003, at 08:36 PM, Steve Waterbury wrote:

> On Sun, 2003-04-13 at 20:32, Glyph Lefkowitz wrote:
>
>> This patch is a band-aid on an already crummy and huge interface
>> (twisted.internet.app is nasty; ask anyone who has had to work on its
>> internals) which makes it even crummier and huger.
>
> I may be missing something, but this seems like a non-sequitur ...
> isn't the putative crumminess and/or hugeness of its interface
> independent of the nastiness of its internals?  (Or at least,
> shouldn't it be ...?  But maybe that's part of what you're
> saying ...)

Yeah, the problem is that the interface is sufficiently ill-specified 
and lacking in features that folks will depend upon the internals for 
complete semantics.  The goal is to have as few intermediary versions 
of the internal semantics before we arrive at something well-specified 
and good :).

>> My concern is that some ill-thought-out parts of Twisted 
>> (twisted.cred,
>> twisted.internet.app) will become calcified behind a wide and fragile
>> interface that prevents any hope for refactoring.  So far, development
>> on these kinds of problem areas has been fairly dynamic, because they
>> have been kept small and simple.  However, the inevitable weight of
>> history is already slowing down more improvement.  ...
>
> This does not make me feel warm and fuzzy.  ;^)  Okay,
> I admit to having had bad thoughts about cred ... how much
> work do you see it needing?  (Because I'm fixin' to use it
> in the near future ... :^)

If I knew exactly how much work it needed, then the work would probably 
have begun :).

However, cred is in an acceptable state at the moment.  Most of the 
cruddiness has to do with backwards-compatibility hacks to a 
significantly worse version of itself.  When these get removed (circa 
Twisted 1.1), there are still a few semantic holes that need to be 
filled, such as the real utility of MultiService, but all in all it 
works as-is.

It's in a much less bad state than twisted.internet.app, at least in my 
opinion ;)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+miAbvVGR4uSOE2wRAtYgAKCfL9OhVLoINPxrxwIb3SP4v8o87gCfTK3X
2Ral38WVWcBJCacRuxedg2A=
=mX4+
-----END PGP SIGNATURE-----




From bob at redivi.com  Sun Apr 13 20:54:11 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 13 Apr 2003 22:54:11 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <5EA3CB5C-6E24-11D7-B675-000A95686CD8@redivi.com>

On Sunday, Apr 13, 2003, at 20:32 America/New_York, Glyph Lefkowitz 
wrote:

> This patch strikes me as unnecessary:
>
> On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:
>
>> Modified files:
>> Twisted/twisted/internet/app.py 1.89 1.90
>>
>> Log message:
>> DependentMultiService - chained start/stop of services in a sensible 
>> order
>
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in 
> particular.  I just think we need one.
>
> First, my question is: do we have more than one or two users who 
> actually need this functionality?  If it's a real, present need for a 
> wide variety of applications, then much of this criticism does not 
> apply.

Do we have more than two users that _know_ they need/want this 
functionality?  Probably not, yet.

Here's a use case.  Let's say you have some sort of service hierarchy 
that resembles a system startup.  The way Darwin does this is that it 
has plist files bundled with the actual "rc" scripts that determine 
which services get started and in what order by SystemStarter.  Here's 
an example plist file (in NeXT format, because XML is retarded) for the 
LDAP service:
{
   Description     = "LDAP";
   Provides        = ("LDAP");
   Requires        = ("Network Configuration", "DirectoryServices");
   OrderPreference = "None";
}

In this case, in order for LDAP to start, the services that provide 
Network Configuration and DirectoryServices must already be running.  
It doesn't care which ordering bucket it sits in (OrderPreference can 
be Last, First, etc.), and it provides LDAP functionality to other 
services that want it.

DependentMultiService is a very crude basis for such a mechanism, 
because I don't need that kind of functionality yet.  However, it does 
provide a pretty decent base class for a future Twisted "SystemStarter" 
equivalent... which we *should* want to have someday.

Thinking like this could potentially make things such as tying 
authorizers to pb services and whatnot easier, if they're done in a 
service collection manner rather than just tied to the same parent.  
However, as you said, app and cred are already nasty and need a major 
refactoring.

>
>> +        # Warning:  On failure, service stops are not
>> +        # chained.  However, they will stop in the proper order.
>
> "utility" patches like this will invariably fail to take edge cases 
> into account well.  I wouldn't say it's immediately obvious how 
> edge-cases *should* be taken into account, personally, but I would 
> guess that half-changing the semantics of the ordering in case of 
> failure is not the correct thing to do.

Basically, it's not at all obvious what you do if you have a failure in 
a collection of interdependent services.  On startup or shutdown, if 
one fails, you obviously aren't going to be able to say that whole 
collection is started or stopped properly, so I make the remainder of 
the running services shut down immediately.  The only difference in 
semantics is that once a failure happens, the service stopping is no 
longer chained (the rest of the running services get stopService called 
immediately).  It really depends on what kind of services you have to 
determine whether you want to try and chain this or not.. but in most 
cases, startService and stopService don't return deferreds anyways, and 
in even more cases, you don't expect them to fail.  I'll go ahead and 
add an __init__ option that lets you decide which behavior gets chosen 
in the case of a failure.

Also, the fact that I'm returning a deferred here either way means that 
it's probably possible that you could even set a timeout.. which is 
kind of cool, but I've said before that the Deferred timeout API can 
cause some issues (it can't actually make something NOT happen.. which 
is really unfortunate).  I really think there should be an API to 
cancel Deferreds, and the methods that return them should be refactored 
to respect a cancel whenever possible.

-bob




From exarkun at intarweb.us  Sun Apr 13 21:31:02 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 13 Apr 2003 23:31:02 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <E194oOh-0004HL-00@pyramid.twistedmatrix.com> <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030414033102.GB17538@meson.dyndns.org>

On Sun, Apr 13, 2003 at 07:32:25PM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> This patch strikes me as unnecessary:
> 
> On Sunday, April 13, 2003, at 03:48 PM, etrepum CVS wrote:
> 
> >Modified files:
> >Twisted/twisted/internet/app.py 1.89 1.90
> >
> >Log message:
> >DependentMultiService - chained start/stop of services in a sensible 
> >order
> 
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in particular. 
>  I just think we need one.
> 
> First, my question is: do we have more than one or two users who 
> actually need this functionality?  If it's a real, present need for a 
> wide variety of applications, then much of this criticism does not 
> apply.

  I think I need this, but order is such a hard topic, I've mostly ignored
it and relied on luck to keep my app working instead of coming up with a
good solution.  I'm not entirely sure (and I won't be devoting time to the
project where it's needed in the near future) DependentMultiService solves
my use-case, but if not, something like it probably would.

  Jp

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 24 days, 23:01, 9 users, load average: 1.06, 1.21, 1.20
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030413/2b46fbc1/attachment.sig>

From abe at fettig.net  Sun Apr 13 22:44:13 2003
From: abe at fettig.net (Abe Fettig)
Date: 14 Apr 2003 00:44:13 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <1050295453.1380.58.camel@mingus>

On Sun, 2003-04-13 at 02:16, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> 
> On Saturday, April 12, 2003, at 04:50 PM, Jp Calderone wrote:
> 
> > ... throughout Twisted wherever email-like messages need to be dealt 
> > with ...
> 
> Speaking of such message-unifying work:
> 
> Moshe and I were recently on IRC, discussing a unification of several 
> disparate message representations within Twisted.  We're not exactly 
> sure where this is going, but in a future release, the .mail, .words, 
> and .news packages should all be unified, probably under the heading of 
> "words", in order to present a coherent messaging API for things like 
> bots which don't care whether you're talking to them through email, 
> netnews, IRC, AOL IM, or whatever.

As some of you know, I'm developing a Twisted application called Hep. 
Hep is a multiprotocol message server that lets users set up connections
to various messaging systems (currently: RSS, POP3, SMTP, Blogger API,
and local maildir storage) and then read/write to those connections
through various protocols (currently: POP3, SMTP, NNTP).  Hep also has a
web server with a basic web interface for managing things.

Anyhow, since I've been working on this project I've been thinking a lot
about abstraction layers for messages.  So here are some incomplete
late-night thoughts:

* First, I define 'message' very loosely: a short text communication
written by one person for one or more other persons to read.

* Formats, protocols, and storage are loosely coupled.  rfc822 is a
format for messages.  So is RSS.  So is HTML (if you want to look at it
that way), or plain .txt. SMTP, NNTP, IMAP, or POP3 can all be used to
transfer rfc822 messages.  HTTP is typically the protocol used to
transfer RSS and HTML.  You can store messages in plain directories,
specialized directory layouts like maildir, file formats like RSS and
mbox that support multiple messages, databases, etc.

* All types of messages, by definition, have a body (although it may be
left blank).

* Almost all messages can be looked at in terms of "from" and "to". 
Even personal-use text files on the local system.  Even web pages,
although the "from" might be unkown, and the "to" might be "anyone in
the world who happens to be interested in this"

* Most, but not all, message formats support the idea of a
title/subject.

* Messages can contain other messages.

* You can't rely on getting a (correct) mime-type along with the message
- I've had to resort to letting my format handlers try to figure out for
themselves whether they can handle a given file if the mime-type is
unknown.

* For messaging protocols, the basic operations are "scan" (and/or
"fetch"), "post", "edit", and "delete".  Fetch is almost universal,
although the way this works varies a lot from system to system.  My
messaging library currently has a single function that every protocol
supports, scan().  You run connection.scan(messageHandlerFunction), and
the connection will try to get whatever messages might be available
there, and run messageHandlerFunction on each message.  scan() returns a
deferred, which will be called back if the scan has completed, and there
won't be any more messages found unless scan() is called again. 
Although I haven't implemented it my idea has been that for
always-connected systems like IMAP and instant messaging, scan() would
continue to run until the connection was terminated.

* post() is pretty easy to abstract across various systems, and works
well for SMTP, IMAP, NNTP, various blog APIs, instant messaging, and
local message stores.  It even works with vanilla HTTP, sort of.

* So far I haven't put implemented edit() or delete() on anything except
local message stores, so no comments there.

* Folders and chat rooms are basically the same thing - a place where
messages are posted to and read from.

* I'm using URLs to describe places you can access messages.

Anyhow, I'm not sure what level of support for all this you want to have
in Twisted.  If you really wanted to go all out it's possible to create
a layer of abstraction that would let you read/write to a local mbox
file, a NNTP newsgroup, an RSS file accessed through HTTP, and a folder
full of text files, all using the same API.  That's the direction I'm
going in at the moment, but it's probably too wide a scope for the core
Twisted APIs.


If anybody here is interested in seeing my attempts at creating a system
that implements these kinds of ideas, you can check out the code from
CVS:

:pserver:anonymous at cvs.sourceforge.net:/cvsroot/hepserver

The two modules are "messaging" (the messaging abstraction layer, which
is usable on it's own - see examples/copymessages.py) and "hep".  If you
want to run Hep you'll also need the Lupy text indexer from divmod.org. 
You might also to read my weblog entries from last week at
http://www.fettig.net/.

Abe





From eholm37 at yahoo.com  Sun Apr 13 21:01:34 2003
From: eholm37 at yahoo.com (Eric Holm)
Date: 13 Apr 2003 20:01:34 -0700
Subject: [Twisted-Python] The Woven Way?
Message-ID: <uwuhx4wa9.fsf@yahoo.com>

First off, the cliche (but nonetheless genuine) thanks for the awesome set of tools!

Is there any way for a Woven resource script to retrieve the uri with which it was called, similar to passing arguments to a CGI script via the url?

Say I have a twisted server that I'd like to monitor via Woven pages.  One of the pages looks something like:

Port1  Up    Details...
Port2  Down  Details...
Port3  Up    Details...

where the "Details..." items are links to another Woven page.  If I were doing this with a CGI script, the links would contain something like href="details.rpy?port=1", or href="details.rpy?port=37", and details.rpy would grab the uri and generate the desired page.  I suspect I'm looking at this all wrong by thinking in terms of passing arguments via the url, but don't know what would be a more naturally Woven way to do this. Any guidance would be most appreciated.

Thanks,


Eric.




From warner at lothar.com  Mon Apr 14 03:15:14 2003
From: warner at lothar.com (Brian Warner)
Date: Mon, 14 Apr 2003 02:15:14 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
References: <Pine.LNX.4.44.0304110642270.10740-100000@localhost.localdomain>
Message-ID: <20030414.021514.34941857.warner@lothar.com>

Jasper Phillips <jasper at peak.org> writes:
> The simple test case at the end of test_newjelly.py _does_ work, but the
> orignal more verbose test I posted (using pb) doesn't work, getting the same
> __dict__ error as before.

Ok, after more careful searching and discussion with Glyph I think we nailed
it. The fix we put in earlier wasn't being used when PB calls jelly, but only
when jelly was run by itself. I've added the necessary code (and a new unit
test). It should be fixed now. The clientBug/serverBug scripts you attached
to your earlier message now run without error for me.

Thanks for your patience, and for the great bug report. That test script was
exactly what we needed.

Note to other bug submitters: following Jasper's excellent example will
greatly improve the chances of getting your bug fixed quickly :).

cheers,
 -Brian



From radix at twistedmatrix.com  Mon Apr 14 03:33:33 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 14 Apr 2003 05:33:33 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>; from glyph@twistedmatrix.com on Sun, Apr 13, 2003 at 20:32:25 -0400
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030414093333.GA16564@radii>


On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> but I would like to discuss it and other patches like it.  Not to pick 
> on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> so it can't be said that this is a violation of anything in particular. 
>   I just think we need one.

The one I've recently decided was good is "If there's no other code in
Twisted that relies on it, don't add it to CVS."

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030414/1fe08c3a/attachment.sig>

From bob at redivi.com  Mon Apr 14 04:48:20 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 14 Apr 2003 06:48:20 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <20030414093333.GA16564@radii>
Message-ID: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>

On Monday, Apr 14, 2003, at 05:33 America/New_York, Christopher 
Armstrong wrote:

> On 2003.04.13 20:32, Glyph Lefkowitz wrote:
>> but I would like to discuss it and other patches like it.  Not to pick
>> on bob here; there isn't really a policy on avoiding bloat in Twisted,
>> so it can't be said that this is a violation of anything in 
>> particular.
>>   I just think we need one.
>
> The one I've recently decided was good is "If there's no other code in
> Twisted that relies on it, don't add it to CVS."

Which came first, the chicken or the egg?




From glyph at twistedmatrix.com  Mon Apr 14 05:16:25 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 06:16:25 -0500
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <5EA3CB5C-6E24-11D7-B675-000A95686CD8@redivi.com>
Message-ID: <87A4445E-6E6A-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday, April 13, 2003, at 09:54 PM, Bob Ippolito wrote:

> DependentMultiService is a very crude basis for such a mechanism, 
> because I don't need that kind of functionality yet.  However, it does 
> provide a pretty decent base class for a future Twisted 
> "SystemStarter" equivalent... which we *should* want to have someday.

YAGNI.

More specifically - maybe we will eventually need such a thing.  In the 
process of building a real "SystemStarter" equivalent, however, we may 
find that DependentMultiService actually isn't that useful, and we 
instead want to use some other intermediary dependency management 
strategy.

In a more optimistic case, we're merely maintaining an interface to an 
implementation detail that people shouldn't be using.  In a worse case, 
we have another twisted.python.observable on our hands - dead code that 
one or two things are using because we haven't had time to update them 
to use TwistedStarter instead.

In fact, I think that TwistedStarter sounds like a good idea - it 
provides a high-level interface to some functionality that may be 
tricky to implement correctly.  If you would go all the way and 
implement that I would probably be less unhappy than if this stayed in 
:-).

However, this is just an advice, not an "MDFL pronouncement" - the 
final call on that module is Itamar's, and if he's not going to stop 
you checking it in, then I'll concede.  I was mainly using this as an 
example, not as a particularly egregious thing that really needs to go. 
  I want Twisted developers to consider things like continuing 
maintenance before checking things in.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+mpiMvVGR4uSOE2wRAo9RAKCRICLQu0IJPhiRrr1X8Y9bM/B5AwCfVBur
RFYJtMNc7n2SkS2VX44Zv+U=
=iLtN
-----END PGP SIGNATURE-----




From radix at twistedmatrix.com  Mon Apr 14 05:50:45 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 14 Apr 2003 07:50:45 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>; from bob@redivi.com on Mon, Apr 14, 2003 at 06:48:20 -0400
References: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com>
Message-ID: <20030414115045.GA18748@radii>


On 2003.04.14 06:48, Bob Ippolito wrote:
> 
> On Monday, Apr 14, 2003, at 05:33 America/New_York, Christopher 
> Armstrong wrote:
> 
> > On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> >> but I would like to discuss it and other patches like it.  Not to pick
> >> on bob here; there isn't really a policy on avoiding bloat in Twisted,
> >> so it can't be said that this is a violation of anything in 
> >> particular.
> >>   I just think we need one.
> >
> > The one I've recently decided was good is "If there's no other code in
> > Twisted that relies on it, don't add it to CVS."
> 
> Which came first, the chicken or the egg?

Your analogy is broken. If you have some code that needs
DependantMultiService, then you can check in DependantMultiService at
the same time as your code. If it's only application-code (i.e., an
application that is not contributed to Twisted) that needs it, leave
it in your application for now.

Of course, maybe there can be exceptions to this occasionally, but I
think any exceptions need to be thought about very hard, for the
reasons Glyph pointed out.

Also, sandbox is appropriate for such stuff. e.g., flow.py.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030414/a64b0d48/attachment.sig>

From tv at twistedmatrix.com  Mon Apr 14 07:02:24 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 14 Apr 2003 16:02:24 +0300
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030413195806.GC12415@meson.dyndns.org>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org>
Message-ID: <20030414130224.GA27087@lapdog>

On Sun, Apr 13, 2003 at 03:58:06PM -0400, Jp Calderone wrote:
>   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> support [well?]).  Can you go more into why this might be a problem?  I

	Umm, I'm quite confident Ldaptor does pipelined operations for
	the LDAP protocol, with Twisted. It's quite trivial.

-- 
:(){ :|:&};:



From fig at monitor.net  Mon Apr 14 08:35:41 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 09:35:41 -0500
Subject: [Twisted-Python] conch unit test errors
Message-ID: <3E9AC73D.7050201@monitor.net>

I am using a CVS version of Twisted, and pycrypto-1.9a6 on a RedHat 9.0 
install (openssh 3.5p1).  When running tests on conch I get an error on 
the first test, OK on the second, then get stuck on the third test.  If 
I Ctrl-C out of the test, I get the following:

[fig at dawa Twisted]$ ./bin/trial -v -m twisted.test.test_conch
twisted.test.test_conch
   SSHKeysHandlingTestCase
     test RSA keys ... 
  [ERROR]
     test DSA keys ... 
     [OK]
   SSHTransportTestCase
     test the SSH server against the OpenSSH client ... 
  [ERROR]
     test the SSH server against the SSH client ... 
  [ERROR]

===============================================================================
ERROR: testRSA (twisted.test.test_conch.SSHKeysHandlingTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
    File "/home/fig/twisted/Twisted/twisted/trial/unittest.py", line 
188, in runOneTest
     method(testCase)
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
76, in testRSA
     self._testKey(publicRSA_openssh, privateRSA_openssh, 'openssh')
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
83, in _testKey
     self._testKeySignVerify(privKey, pubKey)
    File "/home/fig/twisted/Twisted/twisted/test/test_conch.py", line 
89, in _testKeySignVerify
     sig = keys.signData(priv, testData)
    File "/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py", line 
342, in signData
     objType = objectType(obj)
    File "/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py", line 
317, in objectType
     return keyDataMapping[tuple(obj.keydata)]
  KeyError: ('n', 'e', 'd', 'p', 'q', 'u')
===============================================================================
ERROR: testOurServerOpenSSHClient 
(twisted.test.test_conch.SSHTransportTestCase)-------------------------------------------------------------------------------
Traceback! exceptions.KeyError, ('n', 'e', 'd', 'p', 'q', 'u')
/home/fig/twisted/Twisted/twisted/internet/default.py:469:doSelect
/home/fig/twisted/Twisted/twisted/internet/tcp.py:114:doRead
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:195:dataReceived
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:390:ssh_KEX_DH_GEX_INIT/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:342:signData
/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:317:objectType
===============================================================================
ERROR: testOurServerOurClient (twisted.test.test_conch.SSHTransportTestCase)
-------------------------------------------------------------------------------
Traceback! exceptions.KeyError, ('n', 'e', 'd', 'p', 'q', 'u')
/home/fig/twisted/Twisted/twisted/internet/default.py:469:doSelect
/home/fig/twisted/Twisted/twisted/internet/tcp.py:114:doRead
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:195:dataReceived
/home/fig/twisted/Twisted/twisted/conch/ssh/transport.py:390:ssh_KEX_DH_GEX_INIT/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:342:signData
/home/fig/twisted/Twisted/twisted/conch/ssh/keys.py:317:objectType
-------------------------------------------------------------------------------
Ran 4 tests in 24.308s

FAILED (errors=3)
[fig at dawa Twisted]$




From z3p at twistedmatrix.com  Mon Apr 14 09:50:16 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Mon, 14 Apr 2003 11:50:16 -0400
Subject: [Twisted-Python] conch unit test errors
In-Reply-To: <3E9AC73D.7050201@monitor.net>
Message-ID: <3E9AA078.23940.5600DC6@localhost>

On 14 Apr 2003 at 9:35, Stephen Figgins wrote:

> I am using a CVS version of Twisted, and pycrypto-1.9a6 on a RedHat 9.0 
> install (openssh 3.5p1).  When running tests on conch I get an error on 
> the first test, OK on the second, then get stuck on the third test.  If 
> I Ctrl-C out of the test, I get the following:

I've fixed all of these in CVS now.  Thanks for 
the report. :)

-p
-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From jasper at peak.org  Mon Apr 14 10:24:42 2003
From: jasper at peak.org (Jasper Phillips)
Date: Mon, 14 Apr 2003 09:24:42 -0700 (PDT)
Subject: [Twisted-Python] Patch for flavors.py?
In-Reply-To: <20030414.021514.34941857.warner@lothar.com>
Message-ID: <Pine.LNX.4.44.0304140918540.32030-100000@localhost.localdomain>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Mon, 14 Apr 2003, Brian Warner wrote:

> Jasper Phillips <jasper at peak.org> writes:
> > The simple test case at the end of test_newjelly.py _does_ work, but the
> > orignal more verbose test I posted (using pb) doesn't work, getting the same
> > __dict__ error as before.
> 
> Ok, after more careful searching and discussion with Glyph I think we nailed
> it. The fix we put in earlier wasn't being used when PB calls jelly, but only
> when jelly was run by itself. I've added the necessary code (and a new unit
> test). It should be fixed now. The clientBug/serverBug scripts you attached
> to your earlier message now run without error for me.

Twisted's head CVS version also works for my actual code.  Thanks!

- -Jasper

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE+muDS8EpjZ7/X9bIRAnn5AJwNxYXu+CmgjCe81VXMKiIT7kfMqACgmKLJ
Q09SBGLGzwgnhI1Pz83EyUE=
=sHKc
-----END PGP SIGNATURE-----




From fig at monitor.net  Mon Apr 14 11:44:12 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 12:44:12 -0500
Subject: [Twisted-Python] conch unit test errors
In-Reply-To: <3E9AA078.23940.5600DC6@localhost>
References: <3E9AA078.23940.5600DC6@localhost>
Message-ID: <3E9AF36C.3040308@monitor.net>

Paul Swartz wrote:

> I've fixed all of these in CVS now.  Thanks for 
> the report. :)

I just updated and tried again.  It does look all fixed now.  Thanks.

-Stephen




From exarkun at intarweb.us  Mon Apr 14 12:22:59 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 14 Apr 2003 14:22:59 -0400
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030414130224.GA27087@lapdog>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org> <20030414130224.GA27087@lapdog>
Message-ID: <20030414182259.GC25237@meson.dyndns.org>

On Mon, Apr 14, 2003 at 04:02:24PM +0300, Tommi Virtanen wrote:
> On Sun, Apr 13, 2003 at 03:58:06PM -0400, Jp Calderone wrote:
> >   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> > support [well?]).  Can you go more into why this might be a problem?  I
> 
> 	Umm, I'm quite confident Ldaptor does pipelined operations for
> 	the LDAP protocol, with Twisted. It's quite trivial.
> 

  Does Ldaptor use NNTP?  I remember thinking "I'll do pipelining when
someone asks for it..." when I did the implementation, and no one ever
asked...

  Jp

-- 
http://catandgirl.com/view.cgi?44
-- 
 up 25 days, 15:02, 4 users, load average: 1.19, 1.11, 1.25
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030414/7826d153/attachment.sig>

From fig at monitor.net  Mon Apr 14 17:20:19 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 18:20:19 -0500
Subject: [Twisted-Python] twisted.enterprise problem
Message-ID: <3E9B4233.5050906@monitor.net>

I am using Twisted CVS and pyPgSQL 2.3, attempting to create a dbpool 
with the line:

dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', user='fig', 
db='fig')

When I try to run it I get this traceback:

[fig at dawa dsi]$ python pbcontact.py
Traceback (most recent call last):
   File "pbcontact.py", line 19, in ?
     dbpool = adbapi.ConnectionPool("PgSQL", host='localhost', 
user='fig', db='fig')
   File "/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py", 
line 53, in
__init__
     self.dbapi = reflect.namedModule(dbapiName)
   File "/usr/lib/python2.2/site-packages/twisted/python/reflect.py", 
line 406, in namedModule
     topLevel = __import__(name)
ImportError: No module named PgSQL
[fig at dawa dsi]$ python pbcontact.py
Traceback (most recent call last):
   File "pbcontact.py", line 19, in ?
     dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', 
user='fig', db='fig')
   File "/usr/lib/python2.2/site-packages/twisted/enterprise/adbapi.py", 
line 54, in
__init__
     assert self.dbapi.apilevel == '2.0', 'DB API module not DB API 2.0 
compliant.'
AttributeError: 'module' object has no attribute 'apilevel'
[fig at dawa dsi]$


Any ideas?


-Stephen




From fig at monitor.net  Mon Apr 14 17:25:47 2003
From: fig at monitor.net (Stephen Figgins)
Date: Mon, 14 Apr 2003 18:25:47 -0500
Subject: [Twisted-Python] Re: twisted.enterprise problem
Message-ID: <3E9B437B.9020708@monitor.net>

Got it.... about a minute after I sent it.  I need to use "pyPgSQL.PgSQL"

At least I think.  That fixed my connection pool problem.

-Stephen




From bob at redivi.com  Mon Apr 14 17:27:38 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 14 Apr 2003 19:27:38 -0400
Subject: [Twisted-Python] twisted.enterprise problem
In-Reply-To: <3E9B4233.5050906@monitor.net>
Message-ID: <AE3CA91C-6ED0-11D7-B675-000A95686CD8@redivi.com>

On Monday, Apr 14, 2003, at 19:20 America/New_York, Stephen Figgins 
wrote:

> I am using Twisted CVS and pyPgSQL 2.3, attempting to create a dbpool 
> with the line:
>
> dbpool = adbapi.ConnectionPool("pyPgSQL", host='localhost', 
> user='fig', db='fig')

IIRC, the module is called pyPgSQL.PgSQL.. I think you want this:

dbpool = adbapi.ConnectionPool("pyPgSQL.PgSQL", host='localhost', 
user='fig', db='fig')

-bob




From jml at ids.org.au  Tue Apr 15 05:00:38 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Tue, 15 Apr 2003 21:00:38 +1000
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
Message-ID: <20030415110038.GH27721@mumak.net>


Woven code uses registerAdapter alot. When developing Woven code, it's
extremely handy to have a couple of 'rebuild' calls in your RPY. (If these
aren't there, the web server must be restarted for code canges to take effect)

However, registerAdapter and rebuild don't play nicely together. On a rebuild,
registerAdapter tries to re-register stuff, and throws an exception. 

Below is a patch that adds an optional keyword parameter 'force' to the
registerAdapter method. If force is set to a true value, registerAdapter should
happily re-register stuff. Otherwise, the current behaviour holds.

The tests work, and I'll quite happily commit if no-one has any problems.

cheers,
jml

===================================================================
RCS file: /cvs/Twisted/twisted/test/test_components.py,v
diff -u -r1.26 components.py
--- twisted/python/components.py        5 Apr 2003 00:28:37 -0000       1.26
+++ twisted/python/components.py        15 Apr 2003 00:32:30 -0000
@@ -115,7 +115,8 @@
         # mapping between (<class>, <interface>) and <adapter class>
         self.adapterRegistry = {}

-    def registerAdapter(self, adapterClass, origClass, *interfaceClasses):
+    def registerAdapter(self, adapterClass, origClass, *interfaceClasses,
+                        **kwarg):
         """Register an adapter class.

         An adapter class is expected to implement the given interface, by
@@ -124,7 +125,8 @@
         """
         assert interfaceClasses, "You need to pass an Interface"
         for interfaceClass in interfaceClasses:
-            if self.adapterRegistry.has_key((origClass, interfaceClass)):
+            if (self.adapterRegistry.has_key((origClass, interfaceClass))
+                and not kwarg.get('force')):
                 raise ValueError(
                     "an adapter (%s) was already registered." % (
                         self.adapterRegistry[(origClass, interfaceClass)]


===================================================================
RCS file: /cvs/Twisted/twisted/test/test_components.py,v
retrieving revision 1.8
diff -u -r1.8 test_components.py
--- twisted/test/test_components.py     5 Jan 2003 02:39:22 -0000       1.8
+++ twisted/test/test_components.py     15 Apr 2003 00:39:11 -0000
@@ -284,3 +284,13 @@

         # should fail because we already registered an IMultiply adapter for IntAdder
         self.assertRaises(ValueError, components.registerAdapter, IntMultiplyWithAdder, IntAdder, IMultiply)
+
+    def testForcedRegister(self):
+        # should not fail, despite re-registering, because we are forcing
+        # it to re-register.
+        try:
+            components.registerAdapter(IntMultiplyWithAdder, IntAdder, IMultiply, force=1)
+        except ValueError:
+            self.fail("Should have forced re-registration")
+
+
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030415/167ce612/attachment.sig>

From peter at engcorp.com  Mon Apr 14 19:36:06 2003
From: peter at engcorp.com (Peter Hansen)
Date: Mon, 14 Apr 2003 21:36:06 -0400
Subject: [Twisted-Python] Multiple simultaneous SelectReactors?
Message-ID: <3E9B6206.D3C1C701@engcorp.com>

There appear to be serious problems in several areas of twisted.internet
if one tries to create multiple SelectReactors to use at the same time.

Why would one want to?  For acceptance testing, when it can be desirable 
that the code under test run in the same process as the test code, but
it's not appropriate to share the Reactor.

I'm working on a few fixes, some of which appear to be latent bugs of
various kinds, but I'm still extremely new at Twisted and won't 
immediately be able to provide nice patches and such.

For now, I mainly have these questions:

1. Is Twisted expected to support this in principle, if not currently
in practice?

2. Are the globals "reads" and "writes" that are used in 
twisted.internet.default there solely for optimization purposes, or is
there some more nefarious purpose?  Is it considered absolutely critical
that this optimization is in place?  (If so, it probably makes it 
impossible to fix this limitation of Twisted.)

3. Is it well-known that the abstract.FileDescriptor class does a quiet
little fallback to the global reactor if you don't pass it a reactor reference, 
and that Port fails to pass in its own reactor reference when it creates
a Server object in doRead()?

We've strung together a variety of little changes in the process of 
figuring this out.  Once we're more confident of what we're doing,
I'd be happy to supply the fixes, but I'm not going to waste my time
if everyone thinks SelectReactor.doSelect() absolutely must do those
optimizations.

Also note: I'm working on the most recent released version, not CVS.
The slightest hint that this stuff is significantly changed in CVS 
will send me there, but until now we weren't confident enough with
Twisted to work from unreleased code.  (Actually, attempting to 
resolve this has slightly lowered my confidence in Twisted, but 
only just a bit.)

-Peter



From glyph at twistedmatrix.com  Mon Apr 14 19:56:10 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 20:56:10 -0500
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
In-Reply-To: <20030415110038.GH27721@mumak.net>
Message-ID: <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 15, 2003, at 06:00 AM, jml at ids.org.au wrote:

> However, registerAdapter and rebuild don't play nicely together. On a 
> rebuild,
> registerAdapter tries to re-register stuff, and throws an exception.

I think you're approaching this the wrong way.

Rather than forcing it in a particular place in the code, you want to 
force it at a particular time; i.e. when a module is being rebuilt.

Could you instead have a module flag "allowDuplicates" which would be 
set by rebuild and unset when it was finished?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+m2bBvVGR4uSOE2wRAijFAJ9DzoW2dbRSatkbbiLzFqQJFOQMfwCgqYx/
1TPA4eeNpEViyCw1erJwbfg=
=V1Kd
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Mon Apr 14 20:03:35 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 14 Apr 2003 21:03:35 -0500
Subject: [Twisted-Python] Multiple simultaneous SelectReactors?
In-Reply-To: <3E9B6206.D3C1C701@engcorp.com>
Message-ID: <777E9878-6EE6-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, April 14, 2003, at 08:36 PM, Peter Hansen wrote:

> There appear to be serious problems in several areas of 
> twisted.internet
> if one tries to create multiple SelectReactors to use at the same time.

That would be putting it mildly.

> Why would one want to?  For acceptance testing, when it can be 
> desirable
> that the code under test run in the same process as the test code, but
> it's not appropriate to share the Reactor.

I'm aware of this use-case, but it was difficult to write for a variety 
of reasons.  History plays a large role in Twisted's, um, history.  We 
try very hard to support backwards compatibility for many versions, so 
that early adopters do not get burned by quicksand interfaces, and 
sometimes a bit of ugliness results.  This is one of those cases.

As someone new to Twisted, your time would probably be better spent 
coding your acceptance tests to use spawnProcess and actually invoking 
different Python processes for the different components.  It's 
relatively easy to communicate between them once this is done.

> 1. Is Twisted expected to support this in principle, if not currently
> in practice?

Yes.  If you read the CVS logs, you'll notice a trend that more things 
these days take a "reactor" argument than they used to.  We have been 
slowly refactoring towards this for a while.

> 2. Are the globals "reads" and "writes" that are used in
> twisted.internet.default there solely for optimization purposes, or is
> there some more nefarious purpose?  Is it considered absolutely 
> critical
> that this optimization is in place?  (If so, it probably makes it
> impossible to fix this limitation of Twisted.)

I would prefer that this optimization remain in place (changes to code 
this far down into the core is a severe problem), but it wasn't 
originally an optimization.  It's present there as a 
backwards-compatibility hack for twisted.internet.main, which is so 
deprecated that you will get sick and die if you even look at it.  It 
can probably be changed at this point.

> 3. Is it well-known that the abstract.FileDescriptor class does a quiet
> little fallback to the global reactor if you don't pass it a reactor 
> reference,
> and that Port fails to pass in its own reactor reference when it 
> creates
> a Server object in doRead()?

Yes.  Trust me, this was the best compromise at the time :-).

> We've strung together a variety of little changes in the process of
> figuring this out.  Once we're more confident of what we're doing,
> I'd be happy to supply the fixes, but I'm not going to waste my time
> if everyone thinks SelectReactor.doSelect() absolutely must do those
> optimizations.

I would be happier with a simple subclass that was 
slightly-slower-but-multiple-reactor-capable.  However, if you were to 
supply a patch that actually caught all these nuances and fixed them in 
a sensible way, I seriously doubt I would turn it down if you undid a 
tiny (and dubious) optimization :).

> Also note: I'm working on the most recent released version, not CVS.
> The slightest hint that this stuff is significantly changed in CVS
> will send me there, but until now we weren't confident enough with
> Twisted to work from unreleased code.  (Actually, attempting to
> resolve this has slightly lowered my confidence in Twisted, but
> only just a bit.)

The unreleased code doesn't fix this in particular, but it does include 
a LOT of bug fixes.  We are currently struggling to get a release out, 
thanks to the heroic efforts of Kevin Turner.  Hopefully it won't be 
much longer now :).
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+m2h8vVGR4uSOE2wRAhFTAKCjmEHVoQI1hAGZHXq7Y9DHlPSzFACeMOh6
bmy8goeb0OEsB/1b12qBz80=
=6aR2
-----END PGP SIGNATURE-----




From exarkun at intarweb.us  Tue Apr 15 01:46:31 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 15 Apr 2003 03:46:31 -0400
Subject: [Twisted-Python] errno handling in udp.py
Message-ID: <20030415074631.GA32225@meson.dyndns.org>

  I noticed this in my local repository today, but I only vaguely remember
making the change, and I don't remember at all whether my version is out of
date or up to date and I forgot to commit it.  Anyone know?

===================================================================
RCS file: /cvs/Twisted/twisted/internet/udp.py,v
retrieving revision 1.38
diff -u -r1.38 udp.py
--- internet/udp.py     24 Feb 2003 23:04:15 -0000      1.38
+++ internet/udp.py     15 Apr 2003 07:46:53 -0000
@@ -33,7 +33,7 @@

 if os.name == 'nt':
     EWOULDBLOCK = 10035
-elif os.name != 'java':
+if os.name != 'java':
     from errno import EWOULDBLOCK, EINTR, EMSGSIZE, ECONNREFUSED

 # Twisted Imports


  Jp

-- 
<sil> thanks again exarkun, you're really helpful
-- 
 up 26 days, 3:02, 3 users, load average: 0.21, 0.15, 0.10
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030415/72daa091/attachment.sig>

From lafou at wanadoo.fr  Tue Apr 15 02:05:41 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 10:05:41 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
Message-ID: <b7gf5d$u6u$1@main.gmane.org>

Sorry to bother you again but I don't understand how to link a QueryIterator
with "standart" consumer... :(

even with a simple exemple, I can't have QueryIterator to work :


  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50""" 
  queryIt = QueryIterator(dbpool, sql)

  def res(x): print "Results : ", x
  from twisted.internet import reactor
  f = flow.DeferredFlow(queryIt)
  f.addCallback(res)
  reactor.callLater(2,reactor.stop)
  reactor.run()

Just give me this ouput :

Results : []


Thank you !





From lafou at wanadoo.fr  Tue Apr 15 02:44:04 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 10:44:04 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org>
Message-ID: <b7ggnb$69u$1@main.gmane.org>

> Results : []
> 
> 
> Thank you !

sorry, this was a connexion problem. NTL, I can't use QueryIterator with a
consumer. I need a little more help, flow isn't easy to use if you aren't
familiar with deferred, reactors, generators, etc.




From lafou at wanadoo.fr  Tue Apr 15 05:21:55 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Tue, 15 Apr 2003 13:21:55 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
Message-ID: <b7gpva$dbv$1@main.gmane.org>

 
>         class CountIterator(flow.ThreadedIterator):
>             def __init__(self, count):
>                 flow.ThreadedIterator.__init__(self)
>                 self.count = count
>             def next(self): # this is run in a separate thread
>                 from time import sleep
>                 sleep(.1)
>                 val = self.count
>                 if not(val):
>                     raise flow.StopIteration
>                 self.count -= 1
>                 return [val]
>         def res(x): assert([5,4,3,2,1] == x)
>         from twisted.internet import reactor
>         f = flow.DeferredFlow(CountIterator(5))
>         f.addCallback(res)
>         reactor.callLater(2,reactor.stop)
>         reactor.run()
> 

This doen't work
here's the real result : [[5], [4], [3], [2], [1]]

>python -u test_flow2.py
[[5], [4], [3], [2], [1]]
Traceback (most recent call last):
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/base.py", line
358, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "flow.py", line 215, in _execute
    self.callback(self.results)
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
193, in callback
    self._startRunCallbacks(result, 0)
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
249, in _startRunCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/home/gravis/src/python/cvs/Twisted/twisted/internet/defer.py", line
262, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "test_flow2.py", line 16, in res
    def res(x): print x; assert([5,4,3,2,1] == x)
exceptions.AssertionError: 
>Exit code: 0





From tv at twistedmatrix.com  Tue Apr 15 01:42:40 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 15 Apr 2003 10:42:40 +0300
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <20030414182259.GC25237@meson.dyndns.org>
References: <86309581-6D77-11D7-8B81-000393C9700E@twistedmatrix.com> <0E2D8F2D-6D85-11D7-830B-003065D61A3E@froup.com> <20030413195806.GC12415@meson.dyndns.org> <20030414130224.GA27087@lapdog> <20030414182259.GC25237@meson.dyndns.org>
Message-ID: <20030415074240.GA30738@lapdog>

On Mon, Apr 14, 2003 at 02:22:59PM -0400, Jp Calderone wrote:
> > >   NNTP isn't, unless you go into pipeline mode (which Twisted doesn't
> > > support [well?]).  Can you go more into why this might be a problem?  I
> > 	Umm, I'm quite confident Ldaptor does pipelined operations for
> > 	the LDAP protocol, with Twisted. It's quite trivial.
>   Does Ldaptor use NNTP?  I remember thinking "I'll do pipelining when
> someone asks for it..." when I did the implementation, and no one ever
> asked...

	No, it's LDAP. I now see what you mean, you want
	s/which Twisted doesn't support/which twisted.news doesn't support/

-- 
:(){ :|:&};:



From cce at clarkevans.com  Tue Apr 15 13:11:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 19:11:37 +0000
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <b7ggnb$69u$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
Message-ID: <20030415191137.GA25817@doublegemini.com>

On Tue, Apr 15, 2003 at 10:44:04AM +0200, Philippe Lafoucri�re wrote:
| sorry, this was a connexion problem.

It should have raised an exception if it couldn't connect.  I think
the new flow.py (you seemed to have been using an older one) should
fix this, but perhaps not, as I haven't tested it.  

| NTL, I can't use QueryIterator with a consumer. 

Hmm.  The following should work...


  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""

  def consumer()
      query = flow.Generator(QueryIterator(dbpool, sql))
      while 1:
          yield query
          if query.stop: break
          print query.result

  flow.Flow(consumer)
  flow.execute()

Or, if you want to use the twisted reactor to allow for
more than one process...

  from twisted.internet import reactor
  def res(x): print "Results : ", x
  f = flow.DeferredFlow(queryIt)
  f.addCallback(res)
  reactor.callLater(2,reactor.stop)
  reactor.run()

| I need a little more help, flow isn't easy to use if you aren't
| familiar with deferred, reactors, generators, etc.

Yes.  This stuff isn't easy.

Best,

Clark



From lafou at wanadoo.fr  Tue Apr 15 14:08:15 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 15 Apr 2003 22:08:15 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <20030415191137.GA25817@doublegemini.com>
References: <20030411073834.GB11627@doublegemini.com>
	 <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
	 <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
	 <20030415191137.GA25817@doublegemini.com>
Message-ID: <1050437295.27650.121.camel@biproc>

> It should have raised an exception if it couldn't connect.  I think
> the new flow.py (you seemed to have been using an older one) should
> fix this, but perhaps not, as I haven't tested it.  

This is weird, any exception is raised (try to change a function name in
a consumer).


> Hmm.  The following should work...
> 
> 
>   dbpool = adbapi.ConnectionPool("MySQLdb",
>                                 host=host,
>                                 db='MYDB',
>                                 user='USER',
>                                 passwd='PASS')
>   sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""
> 
>   def consumer()
>       query = flow.Generator(QueryIterator(dbpool, sql))
>       while 1:
>           yield query
>           if query.stop: break
>           print query.result
> 
>   flow.Flow(consumer)
>   flow.execute()


Thank you..... I 've tried all the day to make it work, but I didn't
succeed :(

But the code above blocks and never exits.



> Or, if you want to use the twisted reactor to allow for
> more than one process...
> 
>   from twisted.internet import reactor
>   def res(x): print "Results : ", x
>   f = flow.DeferredFlow(queryIt)
>   f.addCallback(res)
>   reactor.callLater(2,reactor.stop)
>   reactor.run()

Yes, this works (I've found it this morning). But it's still hard to use
with several producers and consumers.


> Yes.  This stuff isn't easy.

A little howto would greatly help :)
I can help you, if I understand every thing someday !

Thank you again for your help

-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From cce at clarkevans.com  Tue Apr 15 14:26:37 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 20:26:37 +0000
Subject: [Twisted-Python] Bloat
In-Reply-To: <20030414115045.GA18748@radii>
References: <9BBE33DE-6E66-11D7-B675-000A95686CD8@redivi.com> <20030414115045.GA18748@radii>
Message-ID: <20030415202637.GA25999@doublegemini.com>

On Mon, Apr 14, 2003 at 07:50:45AM -0400, Christopher Armstrong wrote:
| On 2003.04.14 06:48, Bob Ippolito wrote:
| > > On 2003.04.13 20:32, Glyph Lefkowitz wrote:
| > > The one I've recently decided was good is "If there's no other code in
| > > Twisted that relies on it, don't add it to CVS."
| > 
| > Which came first, the chicken or the egg?
| 
| Your analogy is broken. If you have some code that needs
| DependantMultiService, then you can check in DependantMultiService at
| the same time as your code. If it's only application-code (i.e., an
| application that is not contributed to Twisted) that needs it, leave
| it in your application for now.

This isn't a clear policy.  The primary reason... Twisted is
a framework, and not an application (right?).  Therefore, 
applications shouldn't be part of Twisted (even if they were 
contributed).  So, it really is a chicken and egg.

Perhaps a better policy, if Glyph agrees, then it is in, 
otherwise the necessary conditions for a module to be
added to twisted.* are:
   
   1. the module has three or more end-user applications, from
      at least two different authors, where one of the applications
      (how ever trivial) must be open source so that it's usefulness
      can be highlighted; and

   2. the module complies with the coding standard, and comes
      with a complete coverage test suite; and

   3. the module comes with a documentation and tutorial so
      that it's usage can be understood by others; and

   4.  the module has at least two additional (committer)
       sponsors who think that it is useful to Twisted; and

   5.  the module 'floats' around on the list for at least
       a month or so so that enough people can 'chime' in
       any objections, or so that Glyph can register a veto.


Anyway, it's kinda strict, but it would make for a good basis
for the kind of quality level that we should probably have for
new modules.

But this still doesn't solve the 'bootstrap' issue, that is,
unless the module is checked into CVS, and the documentation
is clearly available, it makes it *very* hard to find users,
and thus to meet the first requirement.

| Of course, maybe there can be exceptions to this occasionally, but I
| think any exceptions need to be thought about very hard, for the
| reasons Glyph pointed out.
| 
| Also, sandbox is appropriate for such stuff. e.g., flow.py.

Yes.  I've found that the sandbox is a great place for this,
as the code isn't officially part of twisted; but yet is in
the CVS and distributed.  

...

However, there are problems with the 'Sandbox'.  The flow.py
file is really three items:

  1.  A new flow.py file in twisted.python
  2.  A small addition to twisted.internet.defer
  3.  A small addition to twisted.enterprise.adbapi
  4.  A small addition to twisted.python.compat (already applied)

So, I'd like to see the 'Sandbox' restructured in such
a way that it takes on a 'recursive diff' shape...

  Twisted/sandbox/flow/twisted/python/flow.py
  Twisted/sandbox/flow/twisted/internet/defer.py.diff
  Twisted/sandbox/flow/twisted/enterprise/adbapi.py.difff
  Twisted/sandbox/flow/test/test_flow.py
  Twisted/sandbox/flow/doc/howto/flow.html

And then having a 'make apply_flow' which will apply the
patches and copy over what would be the result when 
adding flow to the new tree.   In this way people can go
into the sandbox and 'enable' any new additions that they
want.  

I know it's not great, but it would then be clear to 
everyone what a given proposal is.  Most modules in 
the future may not be a simple file... flow isn't, 
despite it's very small size.

Best,

Clark



From cce at clarkevans.com  Tue Apr 15 14:36:26 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 15 Apr 2003 20:36:26 +0000
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <1050437295.27650.121.camel@biproc>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc>
Message-ID: <20030415203626.GA26333@doublegemini.com>

On Tue, Apr 15, 2003 at 10:08:15PM +0200, Philippe Lafoucri�re wrote:
| > It should have raised an exception if it couldn't connect.  I think
| > the new flow.py (you seemed to have been using an older one) should
| > fix this, but perhaps not, as I haven't tested it.  
| 
| This is weird, any exception is raised (try to change a function name in
| a consumer).

The error handling is not a strong point of flow.py yet, but
it eventually will be.   Sorry about my last example, you
can't use QueryIterator or ThreadedIterator without using
the reactor... my bad ;)

  dbpool = adbapi.ConnectionPool("MySQLdb",
                                host=host,
                                db='MYDB',
                                user='USER',
                                passwd='PASS')
  sql = """SELECT nom FROM dbo_questionnaire limit 0,50"""
  def consumer()
      query = flow.Generator(QueryIterator(dbpool, sql))
      while 1:
          yield query
          if query.stop: break
          print query.result

  from twisted.internet import reactor
  def finish(result): print result
  f = flow.DeferredFlow(consumer())
  f.addBoth(finish)
  reactor.callLater(2,reactor.stop)
  reactor.run()




From jml at ids.org.au  Wed Apr 16 04:16:26 2003
From: jml at ids.org.au (jml at ids.org.au)
Date: Wed, 16 Apr 2003 20:16:26 +1000
Subject: [Twisted-Python] Forcing adapter re-registration (patch)
In-Reply-To: <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030415110038.GH27721@mumak.net> <6E186FCB-6EE5-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030416101625.GI27721@mumak.net>

On Mon, Apr 14, 2003 at 08:56:10PM -0500, Glyph Lefkowitz wrote:
> On Tuesday, April 15, 2003, at 06:00 AM, jml at ids.org.au wrote:
> 
> >However, registerAdapter and rebuild don't play nicely together. On a 
> >rebuild,
> >registerAdapter tries to re-register stuff, and throws an exception.
> 
> Could you instead have a module flag "allowDuplicates" which would be 
> set by rebuild and unset when it was finished?

Done (in CVS).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030416/3c71463c/attachment.sig>

From glyph at twistedmatrix.com  Wed Apr 16 02:30:33 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Apr 2003 03:30:33 -0500
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <20030415202637.GA25999@doublegemini.com>
Message-ID: <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Clark,

I think your policy suggestion is a good one.  I don't have an 
immediate yea or nay, but I'm thinking about it.  As to one of the 
things you asked, though:

On Tuesday, April 15, 2003, at 03:26 PM, Clark C. Evans wrote:

> The primary reason... Twisted is a framework, and not an application 
> (right?).

Yes, but then, the things that we characterize as "applications" these 
days are really frameworks.

In the ideal world, Twisted would start up and take over all 
UNIX-networking-y services that you ask it to; a webserver, a mail 
server (POP and SMTP), an IRC server, a rendezvous client and server, 
and a generic PB port that would provide access to all this 
functionality through a better protocol.

Applications would then hook into this environment and provide either 
enhanced versions of infrastructure - say, database-backed message 
storage rather than maildirs - or more frequently, domain objects that 
would do things completely unrelated to infrastructure.  For example, a 
message board, a chatterbot, a knowledge management system, etc.  These 
applications would then hook multiple URIs.  A chatterbot might have an 
IRC nickname as well as an email address, and would respond similarly 
(but not identically) to either.

By having the actual protocols taken over by the infrastructure like 
this, multiple applications (some of them running in different OS-level 
protection domains) can all talk to the same core services at once.  
Two chatterbot instances owned by different users might even converse 
with each other over the core infrastructure layer, either on the same 
host or on different hosts.

The existing codebase obviously doesn't implement terribly much of 
this, but you can see some of it.  Some people consider a web-server an 
"application", but 'mktap web' starts up and serves web pages.  'mktap 
words' starts a chat server.  'im' starts a chat client.  Over time 
these will become more unified and integrated.

To put it simply, "yes, Twisted is a framework, which means it's an 
application".
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+nRStvVGR4uSOE2wRAiOFAJ90o+NLSraTvtfnpHcq0bocMzBzGwCeKJXD
Q/ozsMDTDOAKcOwZ0YAsGeA=
=NN3O
-----END PGP SIGNATURE-----




From acapnotic at twistedmatrix.com  Wed Apr 16 03:32:01 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 16 Apr 2003 02:32:01 -0700
Subject: [Twisted-Python] Release Candidate for 1.0.4
Message-ID: <1050485519.22298.185.camel@troglodyte.funhouse>

A release candidate for version 1.0.4 of twisted is now available for
download from http://twistedmatrix.com/.  We are currently without a
mirror for release distribution; our apologies if our web site gets
slow.

Barring any major problems with this code, it will be released as 1.0.4
final before the end of the week.  Testing on the Windows platform has
been much less extensive than others, so Windows folks, if you could
hammer on this release candidate a bit and report back what you find,
we'd appreciate it.

Share and enjoy,

 - Kevin Turner
   acting Release Manager

-- 
The moon is full, 99.2% illuminated, 13.9 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030416/dab4cee9/attachment.sig>

From lafou at wanadoo.fr  Wed Apr 16 05:27:34 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 16 Apr 2003 13:27:34 +0200
Subject: [Twisted-Python] Re: Re: rewrite of flow.py completed
In-Reply-To: <20030415203626.GA26333@doublegemini.com>
References: <20030411073834.GB11627@doublegemini.com>
	 <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com>
	 <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org>
	 <20030415191137.GA25817@doublegemini.com>
	 <1050437295.27650.121.camel@biproc>
	 <20030415203626.GA26333@doublegemini.com>
Message-ID: <1050492454.14677.18.camel@biproc>

I'm really sorry Clark, but your exemple doesn't work better than mine
...

Here's the result I got from your (last post) code :


>python -u test_flow_clark.py
[]
>Exit code: 0

(and def "consumer()" should be "def consumer():" )

I'm on #twisted, I hope to see you


Philippe





From lafou at wanadoo.fr  Wed Apr 16 05:55:53 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 16 Apr 2003 13:55:53 +0200
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com>
Message-ID: <b7jgau$pqn$1@main.gmane.org>

Wow, strange :

*****************************************************************
def consumer():
    query = flow.Generator(QueryIterator(dbpool, sql))
    print "here"
    while 1:
        print "there"
        yield query
        if query.stop: break
        print query.result
[...]
*****************************************************************

I never get "here" and "there" !
Moreover :

*****************************************************************
def consumer():
    query = flow.Generator(QueryIterator(dbpool, sql))
    zorglub
    while 1:
        yield query
        if query.stop: break
        print query.result
*****************************************************************
still outputs
[]
(-> zorglub is anything you want)




From lafou at wanadoo.fr  Wed Apr 16 06:03:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Wed, 16 Apr 2003 14:03:06 +0200
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org>
Message-ID: <b7jgog$s7c$1@main.gmane.org>

I solved the problem. It was a missing import (QueryIterator). But any
exception is raised when using flow. It's too hard to debug, even for few
lines of code.





From dgoodwin at powderfone.com  Tue Apr 15 22:51:37 2003
From: dgoodwin at powderfone.com (Doug Goodwin)
Date: Tue, 15 Apr 2003 21:51:37 -0700
Subject: [Twisted-Python] code for game server
Message-ID: <1AE810A5-6FC7-11D7-8188-003065B2028C@powderfone.com>

> Hi,
>
> I've been sporadically developing some code for a tic-tac-toe client 
> and
> server upon which I intended to base a tutorial. I've not got around to
> starting the document, but I'd be happy to make the code available to 
> you
> and/or any other interested parties.
>
> Thanks,
> Joe

Joe,

Count me in! I've been looking everywhere for code and a tutorial like 
this, so I would very much appreciate a gander at your code.

I am building an application on top of a socket server that speaks 
Flash-friendly XML. Even with my minimal knowledge of Twisted I have 
built a working example on top of the simple echo server. I have a 
nagging feeling that I should be looking at PB instead.

The next step is to add persistence with database calls. Working in a 
strict asynchronous framework is all new to me. But exciting!

Thanks for all the good work,

Doug Goodwin
dgoodwin at calarts.edu
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 923 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030415/bd1e573d/attachment-0002.bin>

From benno at eloquent.com.au  Wed Apr 16 07:57:00 2003
From: benno at eloquent.com.au (Benno Rice)
Date: 16 Apr 2003 23:57:00 +1000
Subject: [Twisted-Python] Mirror site for Twisted distfiles
Message-ID: <1050501420.696.33.camel@ratchet.jeamland.net>

To lessen the load on Glyph's link, I've put up a mirror site for the
Twisted distfiles at:

http://www.eloquent.com.au/twisted/

This is in a hosting facility in Melbourne, Australia so it'll
definitely be better for those in .au but it might be a better bet for
others as well, just so that Glyph's line doesn't melt. =)

I've got the 1.0.4rc1 distfiles, and I'm working on 1.0.3 now.

Enjoy!

-- 
Benno Rice                    Phone:  +61 3 9387 1131
Eloquent Systems              Mobile: +61 410 412 355
http://www.eloquent.com.au/   Email:  benno at eloquent.com.au






From 17056 at student.saxion.nl  Wed Apr 16 08:12:49 2003
From: 17056 at student.saxion.nl (Erik Bakker)
Date: Wed, 16 Apr 2003 16:12:49 +0200
Subject: [Twisted-Python] Broadcasting using twisted?
Message-ID: <OFC3CD91A0.BDA98395-ONC1256D0A.004E141A-C1256D0A.004E1429@saxion.nl>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030416/2751850e/attachment.html>

From 17056 at student.saxion.nl  Wed Apr 16 08:16:08 2003
From: 17056 at student.saxion.nl (Erik Bakker)
Date: Wed, 16 Apr 2003 16:16:08 +0200
Subject: [Twisted-Python] broadcasting in Twisted?
Message-ID: <OF62EB2EC9.BB4B00C2-ONC1256D0A.004E58AC-C1256D0A.004E61D6@saxion.nl>

Hi all,

First of all I'd like to introduce myself. My name is Erik Bakker and i'm a
student at the university of Twente in the Netherlands. I'm working on a
project, in which we would like to use Twisted-python. We are making a
distributed 3D world using OpenGL in python. And we like to use Twisted for
the distribution. We don't need to distribute lots of data, in fact we only
need to distribute the 3D camera position (and only if the 3D camera
changes on input from the user). We would like to broadcast the camera
position to all clients but how is the big question. I can't find anything
in the documentation about broadcasting (except that it is possible:). Now
was our idea that it should be possible with the module UDP from the
internet package, but we can't get it to work.
Now my questions are if it is possible to broadcast using twisted and how.
I'm a bit a newbie in Twisted (yet;-) anybody got any idea's, examples?

Many thanks in advance!

Erik Bakker





From andrew-twisted at puzzling.org  Wed Apr 16 07:50:40 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 16 Apr 2003 23:50:40 +1000
Subject: [Twisted-Python] twisted.news cleanups and tests
In-Reply-To: <3E9A1602.7948A75D@engcorp.com>
References: <20030410213554.GA58576@mithrandr.moria.org> <20030411140915.GA68773@mithrandr.moria.org> <20030412215053.GA7183@meson.dyndns.org> <3E9A1602.7948A75D@engcorp.com>
Message-ID: <20030416135040.GC27886@frobozz.local>

On Sun, Apr 13, 2003 at 09:59:30PM -0400, Peter Hansen wrote:
> Jp Calderone wrote:
> > 
> >     In the test cases, you also used assert_() (but just once, I assume it
> > was an oversight), which shouldn't be access directly by tests cases, so I
> > changed this to a failUnless().  
> 
> Jp, I realize Twisted unittest is either slightly older than the standard,

It's actually an API-compatible (or near enough) re-implementation, called
Trial.

-Andrew.




From cce at clarkevans.com  Wed Apr 16 08:38:57 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 14:38:57 +0000
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
In-Reply-To: <b7jgog$s7c$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org>
Message-ID: <20030416143857.GA28530@doublegemini.com>

On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucri�re wrote:
| I solved the problem. It was a missing import (QueryIterator). But any
| exception is raised when using flow. It's too hard to debug, even for few
| lines of code.

Yes, I know... better exception handling is next on me list.

;) Clark



From bob at redivi.com  Wed Apr 16 08:47:31 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 16 Apr 2003 10:47:31 -0400
Subject: [Twisted-Python] broadcasting in Twisted?
In-Reply-To: <OF62EB2EC9.BB4B00C2-ONC1256D0A.004E58AC-C1256D0A.004E61D6@saxion.nl>
Message-ID: <5A552932-701A-11D7-A5A3-000A95686CD8@redivi.com>

On Wednesday, Apr 16, 2003, at 10:16 America/New_York, Erik Bakker 
wrote:

> First of all I'd like to introduce myself. My name is Erik Bakker and 
> i'm a
> student at the university of Twente in the Netherlands. I'm working on 
> a
> project, in which we would like to use Twisted-python. We are making a
> distributed 3D world using OpenGL in python. And we like to use 
> Twisted for
> the distribution. We don't need to distribute lots of data, in fact we 
> only
> need to distribute the 3D camera position (and only if the 3D camera
> changes on input from the user). We would like to broadcast the camera
> position to all clients but how is the big question. I can't find 
> anything
> in the documentation about broadcasting (except that it is possible:). 
> Now
> was our idea that it should be possible with the module UDP from the
> internet package, but we can't get it to work.
> Now my questions are if it is possible to broadcast using twisted and 
> how.
> I'm a bit a newbie in Twisted (yet;-) anybody got any idea's, examples?

There is fledgling Multicast UDP support in Twisted, but I don't think 
anyone has really tried to use it yet.  Are all clients expected to be 
on the same subnet?  If not, multicast or broadcast is probably not 
going to be appropriate.

As far as implementation goes, take a look at the UDP howto, and 
echoclient_udp.py and echoserv_udp.py in doc/examples.  I haven't used 
UDP since the API for using UDP changed, so I can't really help you any 
more than that.

-bob




From cce at clarkevans.com  Wed Apr 16 09:17:39 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 15:17:39 +0000
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030415202637.GA25999@doublegemini.com> <B110B702-6FE5-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030416151739.GA28842@doublegemini.com>

On Wed, Apr 16, 2003 at 03:30:33AM -0500, Glyph Lefkowitz wrote:
| Yes, but then, the things that we characterize as "applications" these 
| days are really frameworks.

Ok.  I define an Application as a service which provides or
responds to specific user-level content.   Those software
components which can be shared by more than one application
are canidates for inclusion into Twisted.

| In the ideal world, Twisted would start up and take over all 
| UNIX-networking-y services that you ask it to; a webserver, a mail 
| server (POP and SMTP), an IRC server, a rendezvous client and server, 
| and a generic PB port that would provide access to all this 
| functionality through a better protocol.

Right.

| Applications would then hook into this environment and provide either 
| enhanced versions of infrastructure - say, database-backed message 
| storage rather than maildirs - or more frequently, domain objects that 
| would do things completely unrelated to infrastructure.  For example, a 
| message board, a chatterbot, a knowledge management system, etc.  These 
| applications would then hook multiple URIs.  A chatterbot might have an 
| IRC nickname as well as an email address, and would respond similarly 
| (but not identically) to either.

Right.  Are these applications considered part of Twisted?  For
instance, I can picture an 'Baseball Stat' application which
uses an IRC bot, plus a HTTP interface, etc.   

For contrast, let's say that a IMAP implementation which is part
of Twisted comes with a maildir backend; but then, someone provides
a generic database back end, a layer which maps database structures
onto IMAP requests.  As long as it is 'generic', in that it can work
with more than one set of user content (and thus possibly different
table structures, or with a single but generic table structure),
then I'd consider the database back end Infrastructure.

However, if this database backend maps only to one set of tables,
perhaps specific to a problem domain, I'd consider it part of
the Application.

So, the question is, when does a software component which is 
part of an Application become a canidate for inclusion into
Twisted... I'd say, when it is used by 3 or more Applications,
one of which is open source (which may be trivial, but is used
as an example)

| By having the actual protocols taken over by the infrastructure like 
| this, multiple applications (some of them running in different OS-level 
| protection domains) can all talk to the same core services at once.  
| Two chatterbot instances owned by different users might even converse 
| with each other over the core infrastructure layer, either on the same 
| host or on different hosts.
| 
| The existing codebase obviously doesn't implement terribly much of 
| this, but you can see some of it.  Some people consider a web-server an 
| "application", but 'mktap web' starts up and serves web pages.  'mktap 
| words' starts a chat server.  'im' starts a chat client.  Over time 
| these will become more unified and integrated.

Ok.  I don't really consider the generic web server as an Application,
IMHO, Apache is *not* an application.  Apache plus a content directory
and a given configuration file is an Application.  In this respect,
the configuration of the Webserver is the 'program'.

| To put it simply, "yes, Twisted is a framework, which means it's an 
| application".

A line has to be drawn, I like the idea of calling the stuff outside 
Twisted the Application.  If you define Twisted as an Application, 
then we just need another name for what is outside the line.  I'd
rather not find another name... and the purpose of this discussion
is to draw a distinction for what is in and what is not in Twisted.

For instance, a particular IRC chat client (/w a user interface)
should not be part of Twisted, as it will probably include lots
of specific assumptions as to how a given user would chat.  However,
just about everything that a chat client needs could be a 
canidate for Twisted.

Perhaps what we need is a 'apps' directory in the top level
of Twisted directory (but not in the twisted.* package) where
people can drop in Applications which they would like to share
with the community; but are not necessarly maintained by
the Twisted Community.  

Best,

Clark



From bob at redivi.com  Wed Apr 16 10:05:17 2003
From: bob at redivi.com (Bob Ippolito)
Date: Wed, 16 Apr 2003 12:05:17 -0400
Subject: The Vision Thing (was Re: [Twisted-Python] Bloat)
In-Reply-To: <20030416151739.GA28842@doublegemini.com>
Message-ID: <37867ACD-7025-11D7-8C15-000A95686CD8@redivi.com>

On Wednesday, Apr 16, 2003, at 11:17 America/New_York, Clark C. Evans 
wrote:

> Perhaps what we need is a 'apps' directory in the top level
> of Twisted directory (but not in the twisted.* package) where
> people can drop in Applications which they would like to share
> with the community; but are not necessarly maintained by
> the Twisted Community.

Or at least a set of links on the webpage that are more prevalent and 
better maintained than the success stories..  And then there's the 
hybrid of the two, where a sourceforge-like facility could (eventually) 
be provided to open source Twisted applications... but god knows that's 
a pain in the ass to setup.

Maybe when Twisted can host svn, has its own wiki and the bugtracker 
gets better.. who knows?  It'd certainly be a damn good demonstration 
of Twisted if it could run nearly the whole intranet (mail, web, dns, 
bug tracking, source code management, forums, wiki, instant messaging, 
ldap, etc.) of a software development company "out of the box".  I'd 
sure as hell use it, our exim + cyrus + openldap + ldapdns + apache + 
cvs + gforge... etc... setup is a real pain in my ass.

-bob




From ianb at colorstudy.com  Wed Apr 16 15:00:23 2003
From: ianb at colorstudy.com (Ian Bicking)
Date: 16 Apr 2003 16:00:23 -0500
Subject: [Twisted-Python] Webware/Twisted experiment
Message-ID: <1050526823.30719.591.camel@lothlorien>

In the webware-sandbox CVS (webware-sandbox.sf.net), in
Sandbox.ianbicking.TwistedWebware, I've put some code to run Webware
under Twisted.  This mostly subsumes the Webware AppServer, with Twisted
handling the threads and sending requests directly to
Application.dispatchRawRequest.

There's certainly some cludges.  There's a minor change to
MiscUtils.Funcs.hostName to accomodate Twisted, so the CVS version of
that file is required.

It's an experiment, because it doesn't actually offer anything we don't
have already.  It would be more interesting if we can use some of the
other protocols that Twisted supports.  I don't yet know how to do that
in Twisted, though.

  Ian





From cce at clarkevans.com  Wed Apr 16 15:14:39 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 16 Apr 2003 21:14:39 +0000
Subject: [Twisted-Python] Re: Re: Re: rewrite of flow.py completed
In-Reply-To: <b7jgog$s7c$1@main.gmane.org>
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org>
Message-ID: <20030416211439.GA29537@doublegemini.com>

On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucri�re wrote:
| I solved the problem. It was a missing import (QueryIterator). But any
| exception is raised when using flow. It's too hard to debug, even for few
| lines of code.

The flow module should be much better in 'debug' land now
as I think I'm capturing exceptions correctly.  By default,
the DeferredFlow object catches exceptions and uses 
deferred's errback.    It also allows you to pass a 
callable which creates a generator, in case you
forget to use () to invoke.  

If you want the old behavior (compatible with the default
behavior of DeferredList) then use failureAsResult to 
treat failure objects the same as any other result,
returning a list of results to the callback.  

Best,

Clark



From mclay at python.net  Wed Apr 16 15:44:09 2003
From: mclay at python.net (Michael McLay)
Date: Wed, 16 Apr 2003 17:44:09 -0400
Subject: [Twisted-Python] Broken HOWTO documentation
Message-ID: <200304161744.09301.mclay@python.net>

I have been trying to get the examples in section 2.4 of the HOWTO to work. It 
looks like the documentation is out of date with the current state of the 
software in the CVS. starting with 2.4.2, the "app.theApplication" returns 
the error

>>> a = app.theApplication
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
AttributeError: 'module' object has no attribute 'theApplication'
>>> dir(app)
['Accessor', 'Application', 'ApplicationService', 'DefaultAuthorizer', 
'False', 'MultiService', 'PortCollection', 'ServiceCollection', 
'StopIteration', 'StringIO', 'True', '_AbstractServiceCollection', '__all__', 
'__builtins__', '__doc__', '__file__', '__name__', 'bool', 'defer', 'dict', 
'encrypt', 'error', 'inet_ntop', 'inet_pton', 'interfaces', 'isinstance', 
'iter', 'log', 'main', 'os', 'platform', 'socket', 'string', 'styles', 
'types', 'warnings']

I had problems with the examples in section 2.4.3 and 2.5 as well. In section 
2.5 the telnet localhost 4040 command returned a different module location 
instead of twisted.protocols.telnet.ShellFactory and when I ran dir(__main__) 
the list of names did not come close to matching what was in the example. No 
twisted objects were listed.



From exarkun at intarweb.us  Wed Apr 16 21:07:45 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 16 Apr 2003 23:07:45 -0400
Subject: [Twisted-Python] Interfaces
Message-ID: <20030417030744.GA20191@meson.dyndns.org>

  I went to remove the interface inheritance done in
twisted.internet.interfaces tonight, thinking it was all my fault.  To my
surprise, IReadDescriptor and IWriteDescriptor both use it as well though. 
So what's the story on this?  Is it kosher?

  Next:  There is no IPerspective, and I think I want one.  What I actually
*really* want is a way to specify that any class that implements a
particular interface of mine also be a Perspective.  If interface
inheritance is okay, I can just make my interface inherit from IPerspective. 
If it's not, I guess I need another solution.

  Thoughts?

  Jp

-- 
"The problem is, of course, that not only is economics bankrupt but it has
 always been nothing more than politics in disguise ... economics is a form
 of brain damage."  -- Hazel Henderson
-- 
 up 27 days, 23:02, 6 users, load average: 0.48, 0.66, 1.08



From radix at twistedmatrix.com  Wed Apr 16 21:27:58 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Apr 2003 23:27:58 -0400
Subject: [Twisted-Python] Interfaces
In-Reply-To: <20030417030744.GA20191@meson.dyndns.org>; from exarkun@intarweb.us on Wed, Apr 16, 2003 at 23:07:45 -0400
References: <20030417030744.GA20191@meson.dyndns.org>
Message-ID: <20030417032758.GC7077@radii>


On 2003.04.16 23:07, Jp Calderone wrote:
>   I went to remove the interface inheritance done in
> twisted.internet.interfaces tonight, thinking it was all my fault.  To my
> surprise, IReadDescriptor and IWriteDescriptor both use it as well though. 
> So what's the story on this?  Is it kosher?
> 
>   Next:  There is no IPerspective, and I think I want one.  What I actually
> *really* want is a way to specify that any class that implements a
> particular interface of mine also be a Perspective.  If interface
> inheritance is okay, I can just make my interface inherit from IPerspective. 
> If it's not, I guess I need another solution.
> 
>   Thoughts?

I like Interface inheritance, and I don't think anyone has really objected to
it yet.

Maybe you were thinking of the objections to _inheriting of Interfaces_ of
superclasses?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030416/d2ba833e/attachment.sig>

From glyph at twistedmatrix.com  Thu Apr 17 02:10:06 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 17 Apr 2003 03:10:06 -0500
Subject: [Twisted-Python] Interfaces
In-Reply-To: <20030417032758.GC7077@radii>
Message-ID: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:

> I like Interface inheritance, and I don't think anyone has really 
> objected to
> it yet.

I have :-).

The problem is that currently, it doesn't do what you think.  What most 
people want an interface inheritance to do is make

     class IFoo(Interface): pass
     class IBar(IFoo): pass
     class Bar:
         __implements__ = IBar

be more or less equivalent to

     class IFoo(Interface): pass
     class IBar(Interface): pass
     class Bar:
         __implements__ = IFoo, IBar

Currently this does _not_ happen, because

Does this "DWIM" in Zope?  I have been hesitant to make 
python.components handle it this way, firstly because we didn't realize 
it at first and so it would now be a change in semantics, and secondly 
because it's not clear what effect this would have on registerAdapter.  
Would

     registerAdapter(Bar, Baz, IBar)

also register an adapter for Baz for IFoo?  Why or why not?  What if a 
different adapter was already registered?  I could see that taking 
interface inheritance into account here could be sometimes convenient, 
but it could also be sometimes wrong.  I really have no idea what the 
right answer is, and so leaving it "inconvenient but simple" was easier 
for the time being.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+nmFjvVGR4uSOE2wRAizjAJ9jF1XYx/3Arc31I8vK4SQnOkDi9gCgj6kk
cqnpAdkXmb4T8T3zOOT75oM=
=uG4y
-----END PGP SIGNATURE-----




From lafou at wanadoo.fr  Thu Apr 17 04:49:54 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Thu, 17 Apr 2003 12:49:54 +0200
Subject: [Twisted-Python] Re: Re: Re: Re: rewrite of flow.py completed
References: <20030411073834.GB11627@doublegemini.com> <b795k9$4k0$1@main.gmane.org> <20030412233948.GA16957@doublegemini.com> <b7gf5d$u6u$1@main.gmane.org> <b7ggnb$69u$1@main.gmane.org> <20030415191137.GA25817@doublegemini.com> <1050437295.27650.121.camel@biproc> <20030415203626.GA26333@doublegemini.com> <b7jgau$pqn$1@main.gmane.org> <b7jgog$s7c$1@main.gmane.org> <20030416143857.GA28530@doublegemini.com>
Message-ID: <b7m0r5$817$1@main.gmane.org>

Clark C. Evans wrote:

> On Wed, Apr 16, 2003 at 02:03:06PM +0200, Philippe Lafoucrière wrote:
> | I solved the problem. It was a missing import (QueryIterator). But any
> | exception is raised when using flow. It's too hard to debug, even for
> | few lines of code.
> 
> Yes, I know... better exception handling is next on me list.
> 
> ;) Clark

Thank you for the documentation Clark. Here's a little doc patch that just
add some titles and a new part on QueryIterator (which is not good at all
:( )

Index: flow.html
===================================================================
RCS file: /cvs/Twisted/sandbox/flow.html,v
retrieving revision 1.3
diff -u -r1.3 flow.html
--- flow.html   17 Apr 2003 08:00:11 -0000      1.3
+++ flow.html   17 Apr 2003 10:51:09 -0000
@@ -63,10 +63,10 @@
 than blocking, the entire state of the iterator chain must be saved so that
 it can be resumed later.   This is what the flow module does.</p>

-<h3>Iterators and Wraps</h3>
+<h3>Iterators and generators</h3>

 <p>An iterator is basically an object which produces a sequence of values.
-Python's iterators are simply objects with an <code>__iter__()</code>
+Python's iterators are simply objects with an <code>__iter__()</code>
 member function which returns an object (usually itself) which has a
 <code>next()</code> member function.   The <code>next()</code> method is
 then invoked till it raises a <code>StopIteration</code> exception.
@@ -206,6 +206,8 @@

 </pre>

+<h3>Wrapping Iterator</h3>
+
 <p>The problem with this approach, is that a producer could potentially
 block, and if it did, the entire process could potentially stop servicing
 other requests.   Thus, some mechanism for pausing the flow and rebuilding
@@ -259,11 +261,13 @@

 </pre>

-<p>This seems like quite the effort, wrapping each iterator and
+<h3>Cooperate</h3>
+
+<p>This seems like quite the effort, wrapping each iterator and
 then having to alter the calling sequence.  Why?  The answer is
 that it allows for a <code>flow.Cooperate</code> object to be
 returned.   When this happens, the entire call chain can be
-moved off the stack so that other flows can proceed.   For
+moved off the stack so that other flows can proceed.   For
 flow.Iterator (which blocks), the implementation of Cooperate
 simply puts the call chain to sleep</p>

@@ -281,10 +285,13 @@
 #   3
 </pre>

+
+<h3>Merging Iterators in one flow</h3>
+
 <p>Perhaps a more clear example can be found when using the
 Merge function in Flow.  This simply zips two or more wrapped
 iterators together, without blocking one or the other.  In the
-example below, the <code>States</code> iterator isn't blocked
+example below, the <code>States</code> iterator isn't blocked
 by the <code>Counter</code> iterator.
 </p>

@@ -324,7 +331,7 @@
 <code>reactor.callLater</code> and <code>internet.defer.Deferred</code>
 mechanism, things are very nice.  In the example below, the first two
 items in the list are produced (although they arn't delivered yet),
-other events in the reactor are allowed to proceed, and then the
+other events in the reactor are allowed to proceed, and then the
 last item in the list is produced.</p>


@@ -333,7 +340,7 @@
 from twisted.internet import reactor
 import flow

-def prn(x):
+def prn(x):
     print x
 d = flow.Deferred([1,2,flow.Cooperate(1),3])
 d.addCallback(prn)
@@ -344,6 +351,48 @@
 #   [1,2,3]
 </pre>

+<h3>Using database connexion to prodive data</h3>
+
+<p>
+Of course, Flow allows to use ConnectionPools to provide data.<br />
+QueryIterator is a simple Iterator which provides data from a database. Is
uses <code>twisted.enterprise.adbapi</code>
+connectionPools, and a query to fetch data. QueryIterator must be used with
a deferred execution.
+</p>
+
+<pre class="python">
+from __future__         import generators
+from twisted.enterprise import adbapi
+from sandbox.flow       import QueryIterator
+from twisted.internet   import reactor
+
+import flow
+
+dbpool = adbapi.ConnectionPool("MySQLdb",host='localhost',
db='ADB',user='AUSER',passwd='APASSWD')
+sql = """SELECT name FROM mytable LIMIT 0,3"""
+
+def consumer():
+    query = flow.Wrap(QueryIterator(dbpool, sql))
+    while 1:
+        try:
+            yield query
+            if query.stop: break
+            print "Processed result : ",query.result
+        except flow.StopIteration: print "-- Finished --"
+
+from twisted.internet import reactor
+def finish(result): print "Final result : ", result
+f = flow.Deferred(consumer())
+f.addBoth(finish)
+reactor.callLater(1,reactor.stop)
+reactor.run()
+
+# prints
+# Processed result :  ('SMITH',)
+# Processed result :  ('JOHN',)
+# Processed result :  ('BOB',)
+# Final result :  []
+
+</pre>

 </body>
 </html>






From lordvan at lordvan.com  Thu Apr 17 06:54:28 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Thu, 17 Apr 2003 14:54:28 +0200 (CEST)
Subject: [Twisted-Python] Woven b0rkage
Message-ID: <65236.62.47.64.183.1050584068.squirrel@mail-at.net>

hi!

woven b0rks here when i got an index.rpy which uses woven .. it does
endless redirects ... below is just a patch to comment it (whcih works
perfectly here..)

regards


--- /usr/portage/distfiles/cvs-src/Twisted/twisted/web/woven/controller.py
     2003-04-14 20:36:49.000000000 +0200
+++ /usr/lib/python2.2/site-packages/twisted/web/woven/controller.py   
2003-04-17 14:47:58.000000000 +0200
@@ -183,8 +183,8 @@
         DOM. gatheredControllers will render the page to the browser
         when it is done.
         """
-        if not request.prepath[-1] == '' and self.addSlash:
-            return redirectTo(addSlash(request), request)
+#        if not request.prepath[-1] == '' and self.addSlash:
+#            return redirectTo(addSlash(request), request)
         # Handle any inputhandlers that were passed in to the controller
first
         for ih in self._inputhandlers:
             ih._parent = self


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From cce at clarkevans.com  Thu Apr 17 08:21:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 17 Apr 2003 14:21:23 +0000
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030417142123.GA31619@doublegemini.com>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
| On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:
| >I like Interface inheritance, and I don't think anyone has really 
| >objected to it yet.
| 
| I have :-).

Alex and I have proposed a completely different alternative
to Interfaces, which I think is more Pythonic, and perhaps
may be more generally useful.  I'm not a big fan of Zope's
approach.

  http://www.python.org/peps/pep-0246.html

Best,

Clark



From cce at clarkevans.com  Thu Apr 17 10:09:57 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Thu, 17 Apr 2003 16:09:57 +0000
Subject: [Twisted-Python] feedback requested -- flow.py goes beta
Message-ID: <20030417160957.GA31818@doublegemini.com>

Abstract: >

   The flow module implements cooperative multi-tasking using
   iterators (easily created with generators) and Twisted's 
   event reactor.   The flow module also includes support for
   incrementally returning query results from Twisted's 
   database connection pool.  While this module does _not_ 
   require generators (a python v2.2 feature), applications 
   of the module are best demonstrated with generators.

Status: >

   The flow module (flow.py) is currently checked into CVS in
   the sandbox directory.  It is unlikely that any large 
   changes to the module will happen.   The documentation 
   is partial, but currently in development.

   General feedback from the Twisted Community is requested.
  
Deployment: >

   If flow was accepted into twisted, I was thinking 
   of spreading its functionality over several files.
   
   1.  Adding a base implementation module, twisted.python.flow,
       which only depends upon other items in twisted.python

   2.  Adding a (fairly small) Flow class to 
       twisted.internet.defer which takes the base
       implementation and uses the reactor and inherits
       from Deferrred.

   3.  Adding a ThreadedIterator class to twisted.internet.threads
       which depends upon twisted.internet.reactor and 
       twisted.python.*
  
   4.  Adding a (fairly small) QueryIterator class to 
       twisted.enterprise.adbapi which depends primarly 
       on ThreadedIterator, but provides for query 
       functionality from a ConnectionPool

Best,

Clark



From mesozoic at polynode.com  Thu Apr 17 08:31:34 2003
From: mesozoic at polynode.com (Alex Levy)
Date: Thu, 17 Apr 2003 10:31:34 -0400
Subject: [Twisted-Python] Problem with twisted.web log files
Message-ID: <20030417143134.GC2096@polynode.com>

I'm seeing some strange behavior from twisted.web.

After running "mktap web --logfile=web.log ; twistd -nf web.tap", I get the
following traceback:

Traceback (most recent call last):
  File "/home/mesozoic/dev/Twisted/bin/twistd", line 31, in ?
    run()
  File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 474, in run
    runApp(config)
  File "/home/mesozoic/dev/Twisted/twisted/scripts/twistd.py", line 390, in runApp
    application.bindPorts()
  File "/home/mesozoic/dev/Twisted/twisted/internet/app.py", line 738, in bindPorts
    self._listenerDict[port, interface] = reactor.listenTCP(port, factory, backlog, interface)
  File "/home/mesozoic/dev/Twisted/twisted/internet/default.py", line 244, in listenTCP
    p.startListening()
  File "/home/mesozoic/dev/Twisted/twisted/internet/tcp.py", line 417, in startListening
    self.factory.doStart()
  File "/home/mesozoic/dev/Twisted/twisted/internet/protocol.py", line 55, in doStart
    self.startFactory()
  File "/home/mesozoic/dev/Twisted/twisted/protocols/http.py", line 1009, in startFactory
    self.logFile = self._openLogFile(self.logPath)
  File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 408, in _openLogFile
    return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
  File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
    BaseLogFile.__init__(self, name, directory, defaultMode)
  File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
    assert os.path.isdir(self.directory)
AssertionError

This does _not_ happen, however, if I run "mktap web --logfile=./web.log"

This problem has only surfaced recently, although I can't say precisely how
long ago.  I am using Twisted out of CVS.

-- 
Alex Levy
WWW: http://mesozoic.geecs.org

"Never let your sense of morals prevent you from doing what is right."
 -- Salvor Hardin, Isaac Asimov's _Foundation_



From tvon at etria.org  Thu Apr 17 11:58:16 2003
From: tvon at etria.org (Tom von Schwerdtner)
Date: Thu, 17 Apr 2003 13:58:16 -0400
Subject: [Twisted-Python] Re: [Webware-discuss] Webware/Twisted experiment
In-Reply-To: <1050526823.30719.591.camel@lothlorien>
References: <1050526823.30719.591.camel@lothlorien>
Message-ID: <20030417175816.GA30583@linux.frdkmd.adelphia.net>

On Wed, Apr 16, 2003 at 04:00:23PM -0500, Ian Bicking wrote:
> In the webware-sandbox CVS (webware-sandbox.sf.net), in
> Sandbox.ianbicking.TwistedWebware, I've put some code to run Webware
> under Twisted.  This mostly subsumes the Webware AppServer, with Twisted
> handling the threads and sending requests directly to
> Application.dispatchRawRequest.

ANyone played with this?  I havent had time but I've been curious about
this direction of development.

-Tom
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030417/8fedd24f/attachment.sig>

From exarkun at intarweb.us  Thu Apr 17 13:52:42 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 15:52:42 -0400
Subject: [Twisted-Python] Bloat (was Re: [Twisted-commits] DependentMultiService - chained start/stop of services in a sensible order)
In-Reply-To: <20030414093333.GA16564@radii>
References: <9077504A-6E10-11D7-8B81-000393C9700E@twistedmatrix.com> <20030414093333.GA16564@radii>
Message-ID: <20030417195242.GA30481@meson.dyndns.org>

On Mon, Apr 14, 2003 at 05:33:33AM -0400, Christopher Armstrong wrote:
> 
> On 2003.04.13 20:32, Glyph Lefkowitz wrote:
> > but I would like to discuss it and other patches like it.  Not to pick 
> > on bob here; there isn't really a policy on avoiding bloat in Twisted, 
> > so it can't be said that this is a violation of anything in particular. 
> >   I just think we need one.
> 
> The one I've recently decided was good is "If there's no other code in
> Twisted that relies on it, don't add it to CVS."
> 

  In this vein, what is the policy on things that are now in CVS but that
are no longer used by anything?

  I know this is trickier, because apps might be relying on them, but we've
got some *really* obscure stuff :)

  For example, twisted.python.reflect.{Settable,Promise,Summer} - completely
unused, except for their tests.

  It'd be nice if we could lose some of this baggage - not right away, but
maybe start with some deprecations now?

  Jp

-- 
Examinations are formidable even to the best prepared, for
even the greatest fool may ask more the the wisest man can answer.
                -- C.C. Colton
-- 
 up 28 days, 15:02, 5 users, load average: 0.06, 0.13, 0.16
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030417/f14396dd/attachment.sig>

From jon at totient.demon.co.uk  Thu Apr 17 14:19:44 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Thu, 17 Apr 2003 21:19:44 +0100
Subject: [Twisted-Python] c++ style comments in c extension modules
Message-ID: <200304172119.44319.jon@totient.demon.co.uk>

When building twisted 1.0.3 on solaris using the sun 'cc' compiler, several of the c extension modules fail because 
of the prescence of '//' for a comment in the code. 

grep -n "\/\/" `find . -name "*.c" -print`

./twisted/internet/cReactor/cDelayedCall.c:126:    // self.time += secondsLater
./twisted/internet/cReactor/cDelayedCall.c:170:    // self.time = time() + secondsFromNow
./twisted/internet/cReactor/cReactorTCP.c:159:    char buf[3*20+3+1+100]; // for good measure
./twisted/internet/cReactor/cReactorTime.c:93:        return NULL; // TODO: set exception?
./twisted/internet/cReactor/cReactorTime.c:125:    //return cDelayedCall_cancel(call, NULL);



please can these be replaced with the /* */ to keep the compiler happy?
I'd fix it myself but dont have CVS access.

I think the gnu compiler is more forgiving, unfortunately solaris cc is not.

cheers

Jon



From exarkun at intarweb.us  Thu Apr 17 14:50:14 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 16:50:14 -0400
Subject: [Twisted-Python] c++ style comments in c extension modules
In-Reply-To: <200304172119.44319.jon@totient.demon.co.uk>
References: <200304172119.44319.jon@totient.demon.co.uk>
Message-ID: <20030417205014.GA31081@meson.dyndns.org>

On Thu, Apr 17, 2003 at 09:19:44PM +0100, Jon Dyte wrote:
> When building twisted 1.0.3 on solaris using the sun 'cc' compiler, several of the c extension modules fail because 
> of the prescence of '//' for a comment in the code. 

  Fixed in CVS, thanks.

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 28 days, 17:02, 10 users, load average: 0.03, 0.05, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030417/2649e0db/attachment.sig>

From konrad at wam.umd.edu  Thu Apr 17 21:15:06 2003
From: konrad at wam.umd.edu (Konrad Rokicki)
Date: Thu, 17 Apr 2003 23:15:06 -0400 (EDT)
Subject: [Twisted-Python] blocking question
Message-ID: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>

Hey everyone, newbie question:
Are there any Python/Twisted idioms for doing blocking? More specifically,
in a client I have a method to send a query to the server and another
method that gets called when the query is answered. Is there an easy way
to say "send the query then wait x seconds for it to return in this
function"?
It seems like blocking is taboo in twisted and if anyone has an
alternative I'd be glad to hear it. I guess I could do this
asynchronically but it would be a pain I think.
Thanks,
Konrad Rokicki




From exarkun at intarweb.us  Thu Apr 17 21:33:38 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 17 Apr 2003 23:33:38 -0400
Subject: [Twisted-Python] blocking question
In-Reply-To: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
References: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
Message-ID: <20030418033338.GA2630@meson.dyndns.org>

On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
> Hey everyone, newbie question:
> Are there any Python/Twisted idioms for doing blocking? More specifically,
> in a client I have a method to send a query to the server and another
> method that gets called when the query is answered. Is there an easy way
> to say "send the query then wait x seconds for it to return in this
> function"?

  Like this, probably:

    d = queryFunction()
    d.setTimeout(x)
    d.addCallbacks(handleAnswer, queryTimedOut)
    reactor.run()

  For more, http://www.twistedmatrix.com/documents/howto/

> It seems like blocking is taboo in twisted and if anyone has an
> alternative I'd be glad to hear it.

  It's not a taboo, it's just not done ;)

  Jp

-- 
C/C++/Java/Perl/Python/Smalltalk/PHP/ASP/XML/Linux (User+Admin)
Genetic Algorithms/Genetic Programming/Neural Networks
Networking/Multithreading/Legacy Code Maintenance/OpenGL
See my complete resume at http://intarweb.us:8080/
-- 
 up 28 days, 23:02, 11 users, load average: 0.08, 0.14, 0.10
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030417/0c4c5e29/attachment.sig>

From andrew-twisted at puzzling.org  Thu Apr 17 21:43:11 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 18 Apr 2003 13:43:11 +1000
Subject: [Twisted-Python] blocking question
In-Reply-To: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
References: <Pine.SOL.4.44.0304172305520.3390-100000@rac1.wam.umd.edu>
Message-ID: <20030418034311.GC23842@frobozz.local>

On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
> Hey everyone, newbie question:
> Are there any Python/Twisted idioms for doing blocking? More specifically,
> in a client I have a method to send a query to the server and another
> method that gets called when the query is answered. Is there an easy way
> to say "send the query then wait x seconds for it to return in this
> function"?
> It seems like blocking is taboo in twisted and if anyone has an
> alternative I'd be glad to hear it. I guess I could do this
> asynchronically but it would be a pain I think.

This is what Deferreds are for.  Your client should look something like
this:

    from twisted.internet.defer import Deferred
    from twisted.protocols.basic import LineReceiver
    
    class MyClient(LineReceiver):
        """A very simple protocol that sends one line 'queries', and
        receives one line answers in response.  An answer that startswith
        'Result:' is considered a successful response; anything else is an
        error response."""
        
        def sendQuery(queryString):
            self.sendLine(queryString)
            self.queryDeferred = Deferred()
            return queryDeferred
    
        def lineReceived(line):
            if line.startswith('Result:'):
                self.queryDeferred.callback(line[7:])
            else:
                self.queryDeferred.errback(line)
            self.queryDeferred = None


This is obviously a rather stupid protocol.
    
Then, to perform a query:

    # Assume we've already got a connected MyClient instance in the variable
    # 'myclient'.
    
    # Define a callback and an errback.
    def printResult(result, query):
        print 'Result of query %r is: %r' % (query, result)

    def printFailure(failure, query):
        print 'Query %r failed:' % query
        failure.printTraceback()

    # Send the query
    query = 'query string'
    deferred = myclient.sendQuery(query)

    # Set a timeout
    deferred.setTimeout(10)

    # Attach callback/errback to handle the result
    deferred.addCallback(printResult, query)
    deferred.addErrback(printResult, query)
    
    
See http://twistedmatrix.com/documents/howto/defer for more details on using
Deferreds.  See also the "Writing a Server" and "Writing a Client" howtos.
This is pretty basic Twisted stuff, so the existing docs cover it pretty
well.

-Andrew.




From exarkun at intarweb.us  Fri Apr 18 00:21:03 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Fri, 18 Apr 2003 02:21:03 -0400
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030418062103.GA3488@meson.dyndns.org>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Wednesday, April 16, 2003, at 10:27 PM, Christopher Armstrong wrote:
> 
> >I like Interface inheritance, and I don't think anyone has really 
> >objected to
> >it yet.
> 
> I have :-).
> 
> The problem is that currently, it doesn't do what you think.  What most 
> people want an interface inheritance to do is make
> 
> [snip - Interface inheritance is complex and disallowed]

  So, there's maybe half a dozen interfaces in twisted.internet.interfaces
that inherit from something other than component.Interface.  Shall I go
ahead and clean these up?

  Jp

-- 
Somewhere, something incredible is waiting to be known.
                -- Carl Sagan
-- 
 up 29 days, 3:02, 9 users, load average: 0.00, 0.05, 0.06
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030418/59fbb105/attachment.sig>

From m at moshez.org  Fri Apr 18 01:32:01 2003
From: m at moshez.org (Moshe Zadka)
Date: 18 Apr 2003 07:32:01 -0000
Subject: [Twisted-Python] fwd: Accepted twisted 1.0.4-1 (i386 source all)
Message-ID: <20030418073201.28515.qmail@green.zadka.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Format: 1.7
Date: Fri, 18 Apr 2003 03:46:22 +0000
Source: twisted
Binary: python2.3-twisted-conch python2.2-twisted-conch python2.1-twisted-conch python2.1-twisted python-twisted-conch twisted-quotes python2.1-twisted-bin twisted twisted-doc-api python2.3-twisted-bin twisted-doc python2.2-twisted python2.3-twisted python2.2-twisted-bin python-twisted
Architecture: source all i386
Version: 1.0.4-1
Distribution: unstable
Urgency: low
Maintainer: Moshe Zadka <moshez at debian.org>
Changed-By: Moshe Zadka <moshez at debian.org>
Description: 
 python-twisted - Event-based framework for internet applications. (dummy package)
 python-twisted-conch - The Twisted SSH Implementation (default python version)
 python2.1-twisted - Event-based framework for internet applications. (Python 2.1)
 python2.1-twisted-bin - Event-based framework for internet applications
 python2.1-twisted-conch - The Twisted SSH Implementation (for Python 2.1)
 python2.2-twisted - Event-based framework for internet applications.
 python2.2-twisted-bin - Event-based framework for internet applications
 python2.2-twisted-conch - The Twisted SSH Implementation (for Python 2.2)
 python2.3-twisted - Event-based framework for internet applications.
 python2.3-twisted-bin - Event-based framework for internet applications
 python2.3-twisted-conch - The Twisted SSH Implementation (for Python 2.3)
 twisted    - Event-based framework for internet applications. (transitional)
 twisted-doc - The official documentation of Twisted.
 twisted-doc-api - The auto-generated API docs of Twisted
 twisted-quotes - Quotes from the Twisted development team
Changes: 
 twisted (1.0.4-1) unstable; urgency=low
 .
   * New upstream version
Files: 
 e4ecff7777718f3151b87b626567fa9c 888 net extra twisted_1.0.4-1.dsc
 d47fc0f316d56af8dd8d513aac4422c0 6023353 net extra twisted_1.0.4.orig.tar.gz
 79dc06a577cb2964ce7391a25d7adb88 214 net extra twisted_1.0.4-1.diff.gz
 5e349bdf0c7924aa6989adaba389276b 4130 net extra twisted_1.0.4-1_all.deb
 04fbfd9babd2d4d993074f9a26d30753 4262 net extra python-twisted_1.0.4-1_all.deb
 3bb92f9a4b76e77182f0070526e2eb15 4116 net extra python-twisted-conch_1.0.4-1_all.deb
 19193ebf29efa1af348690dc10de0a6b 1440174 net extra twisted-doc_1.0.4-1_all.deb
 4b8c8be42548c9923fa1e0b58e064a1c 71724 net extra twisted-quotes_1.0.4-1_all.deb
 7b5493effac4d05a86b22b522c193413 3123752 net extra twisted-doc-api_1.0.4-1_all.deb
 78e97d259d3e914d63b0850480fc0649 791150 net extra python2.1-twisted_1.0.4-1_all.deb
 2b8d9506910a4be2e7a0920fdf62618d 791662 net extra python2.2-twisted_1.0.4-1_all.deb
 4735448dec72c541b6a579a43c00df0d 791146 net extra python2.3-twisted_1.0.4-1_all.deb
 a7d81d65fec0be8181a54432047f8eb7 56048 net extra python2.1-twisted-conch_1.0.4-1_all.deb
 d52fedad6cde1170d95c9a156c1e5c8f 56208 net extra python2.2-twisted-conch_1.0.4-1_all.deb
 5d6419958693ec2252d384bce8a4e76a 56048 net extra python2.3-twisted-conch_1.0.4-1_all.deb
 6a31706821867ef2edf438371a33f0fe 27504 net extra python2.1-twisted-bin_1.0.4-1_i386.deb
 a045902b3e7af2ff7d608ef116c59937 28590 net extra python2.2-twisted-bin_1.0.4-1_i386.deb
 054f8bbdb7025d86057e6d6c5800f8d3 28580 net extra python2.3-twisted-bin_1.0.4-1_i386.deb

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.7 (GNU/Linux)

iD8DBQE+n06Xx/ymNkbQG9YRAgCKAJ40YNAlUFd7ozHtcHi0rwDROhPG8gCcDeDb
kImjwmnMAjq1BWm40p+qw6I=
=eqFP
-----END PGP SIGNATURE-----


Accepted:
python-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python-twisted-conch_1.0.4-1_all.deb
python-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python-twisted_1.0.4-1_all.deb
python2.1-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.1-twisted-bin_1.0.4-1_i386.deb
python2.1-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.1-twisted-conch_1.0.4-1_all.deb
python2.1-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.1-twisted_1.0.4-1_all.deb
python2.2-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.2-twisted-bin_1.0.4-1_i386.deb
python2.2-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.2-twisted-conch_1.0.4-1_all.deb
python2.2-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.2-twisted_1.0.4-1_all.deb
python2.3-twisted-bin_1.0.4-1_i386.deb
  to pool/main/t/twisted/python2.3-twisted-bin_1.0.4-1_i386.deb
python2.3-twisted-conch_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.3-twisted-conch_1.0.4-1_all.deb
python2.3-twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/python2.3-twisted_1.0.4-1_all.deb
twisted-doc-api_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-doc-api_1.0.4-1_all.deb
twisted-doc_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-doc_1.0.4-1_all.deb
twisted-quotes_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted-quotes_1.0.4-1_all.deb
twisted_1.0.4-1.diff.gz
  to pool/main/t/twisted/twisted_1.0.4-1.diff.gz
twisted_1.0.4-1.dsc
  to pool/main/t/twisted/twisted_1.0.4-1.dsc
twisted_1.0.4-1_all.deb
  to pool/main/t/twisted/twisted_1.0.4-1_all.deb
twisted_1.0.4.orig.tar.gz
  to pool/main/t/twisted/twisted_1.0.4.orig.tar.gz

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From bob at mastersofbranding.com  Thu Apr 17 14:43:10 2003
From: bob at mastersofbranding.com (Bob Ippolito)
Date: Thu, 17 Apr 2003 16:43:10 -0400
Subject: [Twisted-Python] c++ style comments in c extension modules
In-Reply-To: <200304172119.44319.jon@totient.demon.co.uk>
Message-ID: <33A4EFD6-7115-11D7-83D9-000A95686CD8@mastersofbranding.com>

On Thursday, Apr 17, 2003, at 16:19 America/New_York, Jon Dyte wrote:

> When building twisted 1.0.3 on solaris using the sun 'cc' compiler, 
> several of the c extension modules fail because
> of the prescence of '//' for a comment in the code.
>
> grep -n "\/\/" `find . -name "*.c" -print`
>
> ./twisted/internet/cReactor/cDelayedCall.c:126:    // self.time += 
> secondsLater
> ./twisted/internet/cReactor/cDelayedCall.c:170:    // self.time = 
> time() + secondsFromNow
> ./twisted/internet/cReactor/cReactorTCP.c:159:    char 
> buf[3*20+3+1+100]; // for good measure
> ./twisted/internet/cReactor/cReactorTime.c:93:        return NULL; // 
> TODO: set exception?
> ./twisted/internet/cReactor/cReactorTime.c:125:    //return 
> cDelayedCall_cancel(call, NULL);
>
> please can these be replaced with the /* */ to keep the compiler happy?
> I'd fix it myself but dont have CVS access.
>
> I think the gnu compiler is more forgiving, unfortunately solaris cc 
> is not.

Well, as far as I know, cReactor doesn't really work yet.. and the 
other C extensions don't exhibit this issue.  I'm sure it'll get fixed 
by the time cReactor is actually supposed to work, though :)

-bob




From lafou at wanadoo.fr  Fri Apr 18 07:41:06 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 15:41:06 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <b7ov83$ot8$1@main.gmane.org>

Here's my feedback Clark :

I'm testing flow currently. The results I've got with it are wonderful. And
I couldn't do anything without your documentation. This is an important
part of flow. Maybe we should provide a concreate exemple (like Twisted
Quotes) to explain it ?

A little more tests, and flow would be considered as " stable ". I really
hope to see it in Twisted 1.0.5.







From lafou at wanadoo.fr  Fri Apr 18 07:47:45 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 15:47:45 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <b7ovkj$ot8$2@main.gmane.org>

I have one question : why did you delete the addBranch method ?

I see the point of Merge (merging 2 or more flows), but what is its opposite
? I mean, if you look at this :

DS1 ----> BLOC1 ---+
                             |
DS2 ----> BLOC2 ---+---- BLOC3 -----> DS3

DS1 and DS2 point the same server, the same db, and the same table. Why use
too connexions instead of one like above ?


DS   ----> BLOC1 ---+
       |                      |
        ----> BLOC2 ---+---- BLOC3 -----> DS3

Maybe it's already on your todo list !? :)

thank you




From lafou at wanadoo.fr  Fri Apr 18 08:31:19 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: Fri, 18 Apr 2003 16:31:19 +0200
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
References: <20030417160957.GA31818@doublegemini.com> <b7ovkj$ot8$2@main.gmane.org>
Message-ID: <b7p269$688$1@main.gmane.org>

Detailled information about mappings:

(this is the previous schema)

DS   ----> BLOC1 ---+
       |                      |
        ----> BLOC2 ---+---- BLOC3 -----> DS3

In this exemple, DS has the role to provide data. For that, I use a query.
Let's say:

"Select field1, field2, field3, field4 from MYTABLE"

all field are numerical values.

BLOC1 has to work with field1 and field2
whereas BLOC2 has to work with field3 and field4.

I can split the datasource in 2 connexions. But this a really simple
exemple. If I have 100 BLOCS after the datasources, I may have 100
connexions * Number of Users. Crash ! :)

Am I clearer ?





From cce at clarkevans.com  Fri Apr 18 09:02:31 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 18 Apr 2003 15:02:31 +0000
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
In-Reply-To: <b7ov83$ot8$1@main.gmane.org>
References: <20030417160957.GA31818@doublegemini.com> <b7ov83$ot8$1@main.gmane.org>
Message-ID: <20030418150231.GB34406@doublegemini.com>

I've got a user interface question to ask... there are several user
interface improvements possible in flow's operation, here are the 
options:

currently:

  producer = flow.wrap([1,2,3])
  while 1:
      yield producer
      res = producer.getResult() 
      // handle success

  # or, if you wish to handle failures...

  producer = flow.wrap([1,2,3])
  while 1:
      yield producer
      if producer.stop: break
      if producer.isFailure:
          fail = producer.result
          // handle failure
      else:
          res = producer.result
          // handle success
      
We can reduce one line of code by making wrap return
an iterator... which always returns iself.   Thus, the
creation+while loop can be collapsed into a single 
for line.  Unfortunately, this isn't all that intutive
since the item being looped over isn't the result

   for producer in flow.wrap([1,2,3]):
        # same as above, use either form

Another option, which uses for construct,

   producer = flow.wrap([1,2,3])
   yield producer
   for result in producer:
       // handle success
       yield producer

   producer = flow.wrap([1,2,3], raiseFailures = 0)
   yield producer
   for result in producer:
       if producer.isFailure:
           // handle failure
       else:
           // handle success
       yield producer

I'm not sure if this is better... but it does
use the for loop correctly.   There is a variant
which could save one line of code in the yield...

   # done once at the top of the file
   import flow
   flow = flow.Flow()   # create a 'global' flow object


   # done elsewhere...

       yield flow.wrap([1,2,3])
       for result in flow:
           // handle success
           yield flow

This example keeps the 'producer' in a sort-of global
variable so it can be reused.   If you had more than
one producer, you'd have to fall-back on the previous
mechanism.  But for items with a single flow, this
perhaps could be useful.  I don't know, I haven't thought
it through very much.

Another advantage of this second form, is that producer
could sprout a 'peek' method to look at the next result...
but a problem of this method is that each wrapped producer
won't release the current value till the next one is
acquired (or the end of the iteration).   This could be
a problem.. I don't know.

Best,

Clark



From bob at redivi.com  Fri Apr 18 10:52:30 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Apr 2003 12:52:30 -0400
Subject: [Twisted-Python] blocking question
In-Reply-To: <20030418034311.GC23842@frobozz.local>
Message-ID: <24973722-71BE-11D7-92C2-000A95686CD8@redivi.com>

On Thursday, Apr 17, 2003, at 23:43 America/New_York, Andrew Bennetts 
wrote:

> On Thu, Apr 17, 2003 at 11:15:06PM -0400, Konrad Rokicki wrote:
>> Hey everyone, newbie question:
>> Are there any Python/Twisted idioms for doing blocking? More 
>> specifically,
>> in a client I have a method to send a query to the server and another
>> method that gets called when the query is answered. Is there an easy 
>> way
>> to say "send the query then wait x seconds for it to return in this
>> function"?
>> It seems like blocking is taboo in twisted and if anyone has an
>> alternative I'd be glad to hear it. I guess I could do this
>> asynchronically but it would be a pain I think.
>
> See http://twistedmatrix.com/documents/howto/defer for more details on 
> using
> Deferreds.  See also the "Writing a Server" and "Writing a Client" 
> howtos.
> This is pretty basic Twisted stuff, so the existing docs cover it 
> pretty
> well.

Is Glyph's Deferred talk from PyCon online yet?  That might also be 
useful.

krad - You should've just gone to PyCon man, it was right in DC at GWU 
and there were god knows how many talks about various pieces of Twisted.

The only time threads are used in Twisted is if an API that only 
provides a blocking interface must be used.. for example, 
twisted.enterprise uses a threadpool to dispatch queries to DBAPI 
compliant databases, since DBAPI is synchronous and blocking.  The only 
other way around this is to have a pool of worker processes instead of 
worker threads, but you don't really have anything to gain with this 
approach b/c it uses more memory/resources and IPC is slower than 
thread communication.

But yeah, what you want to do is definitely the kind of thing that you 
should be using Deferreds for.. Also, due to the chaining behavior, you 
can do something practical like this:

from twisted.web import microdom, client
# Start webpage fetch
d = client.getPage('http://example.com/somewebpage.html')
# If webpage fetch takes more than aFewSeconds, raise error
d.setTimeout(aFewSeconds)
# Take the web fetch result, and parse it into a DOM tree
# equivalent to saying: microdom.parseString(webFetchResult, 
beExtremelyLenient=1)
d.addCallback(microdom.parseString, beExtremelyLenient=1)
# this will get triggered if the timeout happens, or if there's a parse 
error
# however, with beExtremelyLenient, there usually won't be one.. it can 
parse some f'ed up html
d.addErrback(yourTimeoutOrParseErrorHandler)
# If everything goes OK, or if for some reason 
yourTimeoutOrParseErrorHandler returns a non-Failure result
# call yourPageHandlerThatUnderstandsDOMTrees(result)
# because microdom.parseString was called on the result, it is now a 
DOM tree instead of a string
d.addCallback(yourPageHandlerThatUnderstandsDOMTrees)

Another convenient thing about deferreds is that if the result of some 
callback is a deferred, then it will automagically be chained as 
well... for example, if yourPageHandlerThatUnderstandsDOMTrees wants to 
pass a fetched URL to the next callback handler, then all it has to do 
is return client.getPage(someURL) and the next handler will receive the 
result of that request, not the deferred instance for that request.

-bob




From m at moshez.org  Fri Apr 18 12:07:33 2003
From: m at moshez.org (Moshe Zadka)
Date: 18 Apr 2003 18:07:33 -0000
Subject: [Twisted-Python] PHP Support
Message-ID: <20030418180733.19039.qmail@green.zadka.com>

Summary:
In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it is.
Currently, the current version in Debian is 4.2, which is why is was not
a problem for most of the core Twisted developers. Others, more "edgy",
operating systems like Gentoo have already begun to feel the repercussions.
I talked to Adam Conrad (infinity on Freenode), who is the Debian PHP
maintainer, about this issu, and relayed his thoughts to glyph.
We actually do need to solve this problem.

Following are the detailed conversation transcripts, mildly edited by
me for formatting.

[re 4.3, on #debian-devel]
<_moshez> but my understanding is that now the default binary thinks it is not a CGI
<_moshez> so doesn't give CGI headers by default
<_moshez> and you need to build with magic flags to force the binary to give CGI headers.
<_moshez> now, when Twisted runs /usr/bin/php <php script>, *it really wants those headers*
<infinity> Twisted should be running /usr/lib/cgi-bin/php4
<_moshez> infinity: does /u/l/c-b/p4-cgi exist in all 4 versions?
<infinity> "All 4"?
<_moshez> infinity: yes. 4.2.xs
<infinity> Oh.  Yes.
<infinity> It exists all the way back to potato's 4.0.3
<infinity> _moshez : Various dists may package it differently, so if this an upstream thing, I'm not sure how best to deal with it.  But in Debian, it always has been, and always will be in /usr/lib/cgi-bin/
<_moshez> infinity: I'll see what my upstream thinks, and if necessary I'll change it in my scripts
<_moshez> infinity: the important thing for me is to be woody-compatible
<infinity> _moshez : In fact, with 4.3, /usr/bin/php{,4} will be even less
+CGI-compatible than it is now, so make sure to use the CGI one. :)
<_moshez> infinity: I know that :)
<_moshez> infinity: this is why I wanted this cleared before 4.3 :)
<infinity> _moshez : Well, if this is for an httpd, a suggests might be nice,
<_moshez> infinity: I may use Suggests: in twisted-web, then.

[on #twisted]
<_moshez> glyph: <infinity> Twisted should be running /usr/lib/cgi-bin/php4
<_moshez> glyph: this is only guaranteed to be the location for Debian, though
<_moshez> glyph: I can deal with it in my scripts, or we can change it upstream
+then.  (I wish Enhances worked, I'd use it all over)
* _moshez notes nobody commented yet on his ITP
<glyph> _moshez: If you need to change it, upstream should have a way to configure it.  I imagine this is sufficiently variable that it should be an argument to mktap web
<_moshez> glyph: *you're* upstream
<_moshez> glyph: whatever you decide is fine by me...
<glyph> _moshez: I'm not going to fix PHP scripting right now, I do have more valuable things to be doing with my time :)
<glyph> _moshez: but that's what I recommend the solution to be.
<_moshez> glyph: if radix decides it's not worth his time, he should decide to either "leave as is" or "change to Debian default"
<_moshez> glyph: either of those would satisfy me
<glyph> _moshez: okay
<glyph> _moshez: could you write about this to the list, actually?
<glyph> _moshez: I think that we should have the issue talked about there, good raw material for a FAQ

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From bob at redivi.com  Fri Apr 18 13:07:43 2003
From: bob at redivi.com (Bob Ippolito)
Date: Fri, 18 Apr 2003 15:07:43 -0400
Subject: [Twisted-Python] PHP Support
In-Reply-To: <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <0855725B-71D1-11D7-92C2-000A95686CD8@redivi.com>

On Friday, Apr 18, 2003, at 14:07 America/New_York, Moshe Zadka wrote:

> Summary:
> In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it is.
> Currently, the current version in Debian is 4.2, which is why is was 
> not
> a problem for most of the core Twisted developers. Others, more "edgy",
> operating systems like Gentoo have already begun to feel the 
> repercussions.
> I talked to Adam Conrad (infinity on Freenode), who is the Debian PHP
> maintainer, about this issu, and relayed his thoughts to glyph.
> We actually do need to solve this problem.

I did a little bit of research into the issue yesterday, when someone 
asked on IRC.. basically what happened is that PHP now has two types of 
executables.  Unfortunately, the one that goes into /usr/bin is to be 
used to write actual PHP applications in -- under NO circumstance will 
these PHP binaries will print headers, regardless of argv.  The other 
one is to be used from cgi-bin.  The other binary, which may or may not 
exist, WILL print headers by default, but can suppress them if -q is on 
the argv.

IMHO, this is *retarded* and the PHP developers should be smacked 
upside the head for this.  Why not add a flag that ALLOWS headers to be 
printed?  At most, it scrapes some modicum of support code out of the 
binary, and 4 CPU cycles out of the option parsing.. what are they 
smoking?  Why does PHP need TWO binaries?  Couldn't they have just made 
the commandline one have a different name, symlink to the cgi binary, 
and have the cgi binary check argv[0] to see if it should assume -q or 
not?!?

-bob




From cce at clarkevans.com  Fri Apr 18 15:43:41 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 18 Apr 2003 21:43:41 +0000
Subject: [Twisted-Python] Re: feedback requested -- flow.py goes beta
In-Reply-To: <1050677747.25823.32.camel@biproc>
References: <20030417160957.GA31818@doublegemini.com> <b7ov83$ot8$1@main.gmane.org> <20030418150231.GB34406@doublegemini.com> <1050677747.25823.32.camel@biproc>
Message-ID: <20030418214341.GA35318@doublegemini.com>

Ok.  Thanks to extrepum's suggestions, flow can now use the
for loop.  Also, it handles exceptions in a cleaner way.  
For more details, see

   http://clarkevans.com/flow.html

flow.py, test_flow.py, and flow.html are currently 
checked into the Twisted CVS.

Best,

Clark

On Fri, Apr 18, 2003 at 04:55:47PM +0200, Philippe Lafoucri�re wrote:
| >    producer = flow.wrap([1,2,3])
| >    yield producer
| >    for result in producer:
| >        // handle success
| >        yield producer
| 
| I prefer this version. Moreover, this is more clear, and easier to
| understand !



From radix at twistedmatrix.com  Fri Apr 18 17:44:06 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 18 Apr 2003 19:44:06 -0400
Subject: [Twisted-Python] Pair of prescription sunglasses left at PyCon sprint
Message-ID: <20030418234406.GA2993@radii>

I found a pair of prescription sunglasses on the table where the
Twisted gang was sprinting. If anyone can claim them, send me an
address to ship them to. Sorry for not posting about this earlier, I
had forgotten about them and they just turned up.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From acapnotic at twistedmatrix.com  Fri Apr 18 19:33:06 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 18 Apr 2003 18:33:06 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] better password handling, also catch
 SystemExit and don't print it
In-Reply-To: <E196Bm2-0002E2-00@pyramid.twistedmatrix.com>
References: <E196Bm2-0002E2-00@pyramid.twistedmatrix.com>
Message-ID: <1050715983.22298.348.camel@troglodyte.funhouse>

On Thu, 2003-04-17 at 08:58, z3p CVS wrote:
> Twisted/twisted/python/util.py 1.23 1.24 [...]
> better password handling, also catch SystemExit and don't print it

Hey, you broke my code!  Fortunately, you did it after the release
candidate, so I don't have to kill you.  Sorry I didn't have a unit test
in for it before, I do now (test_util.GetPasswordTest).  The behaviour I
was depending on *was* fully specified by the docstring though, which
you blatantly changed.

I can understand why for conch you would want a way of grabbing a
password from the terminal while leaving stdin undisturbed, but that's
not what this function did.  It allowed for a password to be passed in
to stdin so that scripts could set passwords without doing it on the
command line, because command line arguments show up in the process
table which is way too public on many systems.

I'm going to revert your change to python.util, please feel free to add
this functionality in another way (perhaps with a new function or
parameter) that does not break documented behaviour.

Thanks,

 - Kevin

-- 
The moon is waning gibbous, 94.3% illuminated, 17.0 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030418/38edb635/attachment.sig>

From david at acz.org  Fri Apr 18 23:57:40 2003
From: david at acz.org (David Phillips)
Date: Sat, 19 Apr 2003 00:57:40 -0500
Subject: [Twisted-Python] PHP Support
References: <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <002a01c30638$963d97a0$0201a8c0@brinstar>

Moshe Zadka writes:
> In PHP 4.3, /usr/bin/php4 is not CGI compatible. Twisted assumes it
> is.

Speaking of PHP support, are there any plans for FastCGI?  Seeing at least a
10x performance increase in PHP would be nice.

--
David Phillips <david at acz.org>
http://david.acz.org/




From cce at clarkevans.com  Sat Apr 19 00:28:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 19 Apr 2003 06:28:28 +0000
Subject: [Twisted-Python] why flow?
In-Reply-To: <20030417160957.GA31818@doublegemini.com>
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <20030419062827.GA37919@doublegemini.com>

#
# Why flow?
#
#   The flow module provides a mechanism for delivering incremental
#   results and performing long computations in a manner which 
#   cooperates with other simoutaneous requests.
#
#   In this example are two data sources, one of which simulates
#   a long-computation which is made to cooperate with other 
#   requests, and the other which blocks, perhaps simulating a 
#   database result that delivers content in small chunks as it 
#   pages through the query results.
#
#   Using these two data sources is a simple HTML web page,
#   which weaves the data together onto a single output
#   stream, via request.write  
#
# Why not Deferreds?
#
#   One could use deferreds, however, in the first, cooperative
#   example, one would really have to use a thread or break the
#   computation down into very small deferred chunks (where one
#   really isn't necessary with the flow module).   And, in the
#   second, either you'd need a deferred for each row (or chunk
#   of rows), or the results could not be incrementally delivered.  
#   And, further, the HTML page generation would have to be broken
#   up into several 'stages' which were executed after each
#   other.   Furthermore, if more than one 'database' query
#   was to be used, the deferreds from them would have to
#   be synconized; or, you could not execute the queries
#   in parallel (one on a different database node, for 
#   example).  In any case, I don't think it'd be as 
#   pretty as this...  or am I missing something?
#

from __future__ import generators
from twisted.internet import reactor
from twisted.web import server, resource
import flow

def cooperative():
    """ simulate a cooperative resource, that doesn't block """
    from random import random
    while 1:
        val = random()
        yield flow.Cooperate(val/5)
        yield str(val)[-5:]

def blocking():
    """ simulate a blocking database resource """
    from time import sleep
    sleep(1)
    yield (3,'AL','Alabama')
    yield (4,'AK','Alaska')
    yield (6,'AZ','Arizona')
    yield (7,'AR','Arkansas')
    yield (8,'CA','California')
    yield (9,'CO','Colorado')
    yield (1,'CT','Connecticut')
    sleep(1)
    yield (1,'DE','Delaware')
    yield (2,'DC','District of Columbia')
    yield (4,'FL','Florida')
    yield (5,'GA','Georgia')
    yield (7,'HI','Hawaii')
    yield (8,'ID','Idaho')
    yield (9,'IL','Illinois')
    yield (3,'IN','Indiana')
    yield (1,'IA','Iowa')
    yield (2,'KS','Kansas')
    yield (3,'KY','Kentucky')
    sleep(1)
    yield (4,'LA','Louisiana')
    yield (5,'ME','Maine')
    yield (7,'MD','Maryland')
    yield (8,'MA','Massachusetts')
    yield (9,'MI','Michigan')
    yield (0,'MN','Minnesota')
    yield (1,'MS','Mississippi')
    yield (2,'MO','Missouri')
    yield (3,'MT','Montana')
    yield (4,'NE','Nebraska')
    yield (5,'NV','Nevada')
    yield (6,'NH','New Hampshire')
    sleep(1)
    yield (7,'NJ','New Jersey')
    yield (8,'NM','New Mexico')
    yield (9,'NY','New York')
    yield (0,'NC','North Carolina')
    yield (1,'ND','North Dakota')
    yield (3,'OH','Ohio')
    yield (4,'OK','Oklahoma')
    yield (5,'OR','Oregon')
    sleep(1)
    yield (7,'PA','Pennsylvania')
    yield (9,'RI','Rhode Island')
    yield (0,'SC','South Carolina')
    yield (1,'SD','South Dakota')
    yield (2,'TN','Tennessee')
    yield (3,'TX','Texas')
    yield (4,'UT','Utah')
    yield (5,'VT','Vermont')
    yield (7,'VA','Virginia')
    yield (8,'WA','Washington')
    yield (9,'WV','West Virginia')
    yield (3,'WI','Wisconsin')
    yield (8,'WY','Wyoming')

def render(req):
    req.write("""
       <html>
         <head>
           <title>Icremental Webpage</title></head>
         <body>
           <h1>Incremental Webpage</h1>
           <table>
             <tr>
                <td>State</td>
                <td>Zipcodes</td>
             <tr>
    """)
    zips   = flow.wrap(cooperative())
    states = flow.wrap(flow.ThreadedIterator(blocking()))
    yield states
    for cnt, abbr, state in states:
        req.write("""
            <tr><td>%s</td><td>%s</td>
                <td>
        """ % (abbr, state))
        for x in range(cnt):
            yield zips; 
            if x: req.write(", ")
            req.write(zips.result)
        req.write("""
            </td></tr>
        """)
        yield states
    req.finish()

class FlowResource(resource.Resource):
    def isLeaf(self): return true
    def render(self, req):
        flow.Deferred(render(req))
        return server.NOT_DONE_YET

root = FlowResource()
site = server.Site(root)
reactor.listenTCP(8081,site)
reactor.run()



From m at moshez.org  Sat Apr 19 04:13:05 2003
From: m at moshez.org (Moshe Zadka)
Date: 19 Apr 2003 10:13:05 -0000
Subject: [Twisted-Python] PHP Support
In-Reply-To: <002a01c30638$963d97a0$0201a8c0@brinstar>
References: <002a01c30638$963d97a0$0201a8c0@brinstar>, <20030418180733.19039.qmail@green.zadka.com>
Message-ID: <20030419101305.22751.qmail@green.zadka.com>

On Sat, 19 Apr 2003, "David Phillips" <david at acz.org> wrote:

> Speaking of PHP support, are there any plans for FastCGI?  Seeing at least a
> 10x performance increase in PHP would be nice.

It shouldn't be too hard to write if you're interested in it.
Read the twisted/web/twcgi.py code to see how all of this is done
now. If you do write, we may integrate it into Twisted -- but
note that Twisted works just fine with 3rd party Resources and modules.
Most of the Twisted do not use CGI enough that this become a problem.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From glyph at twistedmatrix.com  Sat Apr 19 06:04:12 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Apr 2003 07:04:12 -0500
Subject: [Twisted-Python] Pair of prescription sunglasses left at PyCon sprint
In-Reply-To: <20030418234406.GA2993@radii>
Message-ID: <08855125-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

AAARGHH!  I was looking EVERYWHERE for those!  It's a good thing you 
posted this to the list today, or I'd be buying a new pair this 
evening.  :)

On Friday, April 18, 2003, at 06:44 PM, Christopher Armstrong wrote:

> I found a pair of prescription sunglasses on the table where the
> Twisted gang was sprinting. If anyone can claim them, send me an
> address to ship them to. Sorry for not posting about this earlier, I
> had forgotten about them and they just turned up.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+oTtBvVGR4uSOE2wRAperAJ9os6hw/svi1/N+B3by9cTbrOSFagCfWle9
X4DIAcvbo493BKE6sV5bQpw=
=HYvT
-----END PGP SIGNATURE-----




From glyph at twistedmatrix.com  Sat Apr 19 06:09:48 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 19 Apr 2003 07:09:48 -0500
Subject: [Twisted-Python] PHP Support
In-Reply-To: <0855725B-71D1-11D7-92C2-000A95686CD8@redivi.com>
Message-ID: <D0CDC76F-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Friday, April 18, 2003, at 02:07 PM, Bob Ippolito wrote:

> IMHO, this is *retarded* and the PHP developers should be smacked 
> upside the head for this.

If we are going to sit around talking about everything for which this 
is true, we could be talking about PHP for a long, long time :).  
Thanks to those of you who did the research to get this working again.  
It's unnerving that the behavior of these versions is different, 
however, if we're going to have to start inserting options about which 
binary to use, FastCGI support, et. al. for PHP, perhaps we should have 
a --with-php=... option for mktap web?  Debian can provide a sensible, 
working default, but I have a feeling that other installations 
(/usr/local/bin seems popular for PHP users, especially if they *were* 
using apache and are *now* using Twisted with their PHP setup) will 
have problems.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+oTyQvVGR4uSOE2wRAi4/AJ4s0tUjN0b4hKeTzB+IfjH7BZngfwCgpErP
S406mBMjl4Ppws+jeU+24E0=
=e0e1
-----END PGP SIGNATURE-----




From tv at twistedmatrix.com  Thu Apr 17 08:10:09 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 17 Apr 2003 17:10:09 +0300
Subject: [Twisted-Python] Interfaces
In-Reply-To: <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
References: <20030417032758.GC7077@radii> <FFD9E21A-70AB-11D7-8B81-000393C9700E@twistedmatrix.com>
Message-ID: <20030417141009.GA11507@lapdog>

On Thu, Apr 17, 2003 at 03:10:06AM -0500, Glyph Lefkowitz wrote:
> Currently this does _not_ happen, because
> 
> Does this "DWIM" in Zope?  I have been hesitant to make 

	Well, I sure was unsure about the cause until I read your
	eloquent description of the real reasons behind it.

	*cough*

> also register an adapter for Baz for IFoo?  Why or why not?  What if a 
> different adapter was already registered?  I could see that taking 
> interface inheritance into account here could be sometimes convenient, 
> but it could also be sometimes wrong.  I really have no idea what the 
> right answer is, and so leaving it "inconvenient but simple" was easier 
> for the time being.

	Then there should probably be a check that no interface
	inherits another interface, as that is meaningless but badly
	misleading in the current system.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Sat Apr 19 07:35:11 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 19 Apr 2003 16:35:11 +0300
Subject: [Twisted-Python] Problem with twisted.web log files
In-Reply-To: <20030417143134.GC2096@polynode.com>
References: <20030417143134.GC2096@polynode.com>
Message-ID: <20030419133511.GA2656@lapdog>

On Thu, Apr 17, 2003 at 10:31:34AM -0400, Alex Levy wrote:
> I'm seeing some strange behavior from twisted.web.
> 
> After running "mktap web --logfile=web.log ; twistd -nf web.tap", I get the
                                     ^^^^^^^
> following traceback:
...
>   File "/home/mesozoic/dev/Twisted/twisted/web/server.py", line 408, in _openLogFile
>     return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
                                                     ^^^^^^^^^^^^^^^^^^^^^ == ""

>   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 107, in __init__
>     BaseLogFile.__init__(self, name, directory, defaultMode)
>   File "/home/mesozoic/dev/Twisted/twisted/python/logfile.py", line 38, in __init__
>     assert os.path.isdir(self.directory)
> AssertionError
> 
> This does _not_ happen, however, if I run "mktap web --logfile=./web.log"

	Which makes dirname be ".".

> This problem has only surfaced recently, although I can't say precisely how
> long ago.  I am using Twisted out of CVS.

1.64         (itamarst 28-Apr-02):     def _openLogFile(self, path):
1.67         (carmstro 27-May-02):         from twisted.python import logfile
1.64         (itamarst 28-Apr-02):         return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
1.66         (acapnoti 26-May-02): 

	I believe it's been like that since the support for separate
	web access log was added. A quick and perlish fix would be in
	Twisted/twisted/web/server.py, line 408, in _openLogFile, to
	change:

-	return logfile.LogFile(os.path.basename(path), os.path.dirname(path))
+	return logfile.LogFile(os.path.basename(path), os.path.dirname(path) or '.')

-- 
:(){ :|:&};:



From david at acz.org  Sat Apr 19 13:28:39 2003
From: david at acz.org (David Phillips)
Date: Sat, 19 Apr 2003 14:28:39 -0500
Subject: [Twisted-Python] PHP Support
References: <D0CDC76F-725F-11D7-B1EF-000393C9700E@twistedmatrix.com>
Message-ID: <001001c306a9$e11e39c0$0201a8c0@brinstar>

Glyph Lefkowitz writes:
> If we are going to sit around talking about everything for which this
> is true, we could be talking about PHP for a long, long time :).

That's an understatement.

> but I have a feeling that other
> installations (/usr/local/bin seems popular for PHP users, especially
> if they *were* using apache and are *now* using Twisted with their
> PHP setup) will have problems.

Wouldn't most Apache users use mod_php4?  Personally, my PHP lives in
/zeus/php/php.fcgi :)  I keep the CLI version as /usr/local/bin/php.

-- 
David Phillips <david at acz.org>
http://david.acz.org/




From cce at clarkevans.com  Sat Apr 19 13:55:54 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 19 Apr 2003 19:55:54 +0000
Subject: [Twisted-Python] feedback requested -- flow.py goes beta
In-Reply-To: <20030417160957.GA31818@doublegemini.com>
References: <20030417160957.GA31818@doublegemini.com>
Message-ID: <20030419195554.GA39452@doublegemini.com>

When to use flow?

  For simple processes which can be broken down into
  a small set of chunks, then Deferred is the best way
  to go.  To make it worth while to use flow, you need
  one of the following:

    a) incremental results: for example, a big or slow
       executing database query that needs to process
       results as they become available.
 
    b) merging or splitting: for example, having two
       database queries running in parallel, the
       results being merged together

    c) complicated chunking: if your deferred chunks
       start to get numerous or have non-trivial logic
       in them, then flow would be useful.

    d) intensive computations: if your process has
       computations that need to be broken into
       chunks, then flow may be better than deferreds.

Recent changes:

   I renamed flow.ThreadedIterator to flow.Threaded,
   as it is now a wrapper (you don't inherit).

Clark


On Thu, Apr 17, 2003 at 04:09:57PM +0000, Clark C. Evans wrote:
| Abstract: >
| 
|    The flow module implements cooperative multi-tasking using
|    iterators (easily created with generators) and Twisted's 
|    event reactor.   The flow module also includes support for
|    incrementally returning query results from Twisted's 
|    database connection pool.  While this module does _not_ 
|    require generators (a python v2.2 feature), applications 
|    of the module are best demonstrated with generators.
| 
| Status: >
| 
|    The flow module (flow.py) is currently checked into CVS in
|    the sandbox directory.  It is unlikely that any large 
|    changes to the module will happen.   The documentation 
|    is partial, but currently in development.
| 
|    General feedback from the Twisted Community is requested.
|   
| Deployment: >
| 
|    If flow was accepted into twisted, I was thinking 
|    of spreading its functionality over several files.
|    
|    1.  Adding a base implementation module, twisted.python.flow,
|        which only depends upon other items in twisted.python
| 
|    2.  Adding a (fairly small) Flow class to 
|        twisted.internet.defer which takes the base
|        implementation and uses the reactor and inherits
|        from Deferrred.
| 
|    3.  Adding a ThreadedIterator class to twisted.internet.threads
|        which depends upon twisted.internet.reactor and 
|        twisted.python.*
|   
|    4.  Adding a (fairly small) QueryIterator class to 
|        twisted.enterprise.adbapi which depends primarly 
|        on ThreadedIterator, but provides for query 
|        functionality from a ConnectionPool
| 
| Best,
| 
| Clark
| 
| _______________________________________________
| Twisted-Python mailing list
| Twisted-Python at twistedmatrix.com
| http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From missive at hotmail.com  Sat Apr 19 15:03:12 2003
From: missive at hotmail.com (Lee Harr)
Date: Sat, 19 Apr 2003 21:03:12 +0000
Subject: [Twisted-Python] links to .xhtml files in doc/index.html
Message-ID: <BAY2-F149zxgLNnQRoV0000100d@hotmail.com>

Hi;

Is there a reason why the links to the sections in doc/index.html point
to .xhtml files instead of the .html files that are actually there?

Here is a patch that I applied to my local copy of the docs. It makes
more sense to me this way....


16:58 >cvs diff -u index.html
Index: index.html
===================================================================
RCS file: /cvs/Twisted/doc/index.html,v
retrieving revision 1.4
diff -u -r1.4 index.html
--- index.html  11 Feb 2003 00:32:35 -0000      1.4
+++ index.html  19 Apr 2003 20:56:49 -0000
@@ -2,12 +2,12 @@
<h1>Start</h1>

<ul>
-<li><a href="howto/index.xhtml">HOWTOs</a></li>
+<li><a href="howto/index.html">HOWTOs</a></li>
<li><a href="api/index.html">API reference</a></li>
<li><a href="examples/index.html">Examples</a></li>
<li><a href="historic/index.html">Documents of historical 
importance</a></li>
-<li><a href="man/index.xhtml">Manual pages</a></li>
-<li><a href="specifications/index.xhtml">Specifications</a></li>
-<li><a href="vision/index.xhtml">Philosophical papers</a></li>
+<li><a href="man/index.html">Manual pages</a></li>
+<li><a href="specifications/index.html">Specifications</a></li>
+<li><a href="vision/index.html">Philosophical papers</a></li>
</ul>
</body></html>


_________________________________________________________________
Help STOP SPAM with the new MSN 8 and get 2 months FREE*  
http://join.msn.com/?page=features/junkmail




From santacruz at southern.edu  Sat Apr 19 20:46:59 2003
From: santacruz at southern.edu (dansan)
Date: Sat, 19 Apr 2003 22:46:59 -0400
Subject: [Twisted-Python] Thinking backwards, design ideas
Message-ID: <20030420024659.GA8813@matilda.southern.edu>

Fellow twisters,

I have finally read all that seemed necesary to get a good feel of
twisted! and I have finally been able to implement a few 'play'
programs.

I have a project I'd like to write, and I have always tought about it in
the normal "use a library" fashion (in oppisition to the "use a
framework").  My idea is to create a program that is a tournament
manager, it works kind of like this:

	* Accepts connections (there are 2 types, admin, regular).
		* Listen to the admin connection
			- Start tournament at admin's command 
			  This would create tournament brackets and actually give the
			  connected players the "play" command.
			- View current games
			- A bunch of other things :)

Then when the admin starts the games, the program would spun a new "game
thread" that would have the game logic, and that would keep track of the
game (check legality of moves), tell player A to go, tell B what A play,
tell B to go, decide on the winner, etc.

But now I find my self trying to think twisted. I am no longer in
control of the main program loop it seems.  I see how I can keep some of
my static info (having my Protocols register them in the Application).
What I'm having a hard time with is envisioning how to get my games
started, and how to keep track of them.  
* Where does my game-logic go?
* Do my protocols check for valid moves... if so, who keeps track of the
  board? The board is a share resource between 2 players of a short
  amount of time, and there are potentially many games going on at the
  same time.
* How can I implement timeouts?  So that players have to play within 
  given time-limits?  (like, X seconds per-move kinds of deals?)  I
  thougt about starting a timer in my Protocol when a "MAKE A MOVE"
  command is sent to the player, and then checking that time when the
  move is received... but this seems to involve threads?

Anyway, I'd really would appreciate your thoughts on this.  This
'higher-design' stuff is keeping me from getting dirty :)

Thanks.

dansan



From andrew-twisted at puzzling.org  Sat Apr 19 21:16:09 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 20 Apr 2003 13:16:09 +1000
Subject: [Twisted-Python] Thinking backwards, design ideas
In-Reply-To: <20030420024659.GA8813@matilda.southern.edu>
References: <20030420024659.GA8813@matilda.southern.edu>
Message-ID: <20030420031609.GD1316@frobozz.local>

On Sat, Apr 19, 2003 at 10:46:59PM -0400, dansan wrote:
> Fellow twisters,
> 
> I have finally read all that seemed necesary to get a good feel of
> twisted! and I have finally been able to implement a few 'play'
> programs.
> 
> I have a project I'd like to write, and I have always tought about it in
> the normal "use a library" fashion (in oppisition to the "use a
> framework").  My idea is to create a program that is a tournament
> manager, it works kind of like this:
> 
> 	* Accepts connections (there are 2 types, admin, regular).

I'd say there's two types of *users*.  There's no need to listen on
different ports, it's just a matter of who they authenticate as.

> 		* Listen to the admin connection
> 			- Start tournament at admin's command 
> 			  This would create tournament brackets and actually give the
> 			  connected players the "play" command.
> 			- View current games
> 			- A bunch of other things :)
> 
> Then when the admin starts the games, the program would spun a new "game
> thread" that would have the game logic, and that would keep track of the
> game (check legality of moves), tell player A to go, tell B what A play,
> tell B to go, decide on the winner, etc.
> 
> But now I find my self trying to think twisted. I am no longer in
> control of the main program loop it seems.  I see how I can keep some of
> my static info (having my Protocols register them in the Application).
> What I'm having a hard time with is envisioning how to get my games
> started, and how to keep track of them.  
> * Where does my game-logic go?

I think you want a TournamentService, see
http://twistedmatrix.com/documents/howto/pb-cred for details of using
Services in the context of PB, but hopefully you can get something out of it
even if you don't use PB.  See doc/examples/pbecho.py for an example of a
simple service.  Basically, it's:

    from twisted.internet.app import Application
    from twisted.cred.service import Service
    from twisted.cred.authorizer import DefaultAuthorizer

    class TournamentService(Service):
        """Game logic goes here"""

    myApp = Application('Tournament')
    auth = DefaultAuthorizer(myApp)
    svc = TournamentService('Tournament', myApp, auth)
    myApp.listenTCP(1234, YourProtocolFactory(svc))
    myApp.run()

> * Do my protocols check for valid moves... if so, who keeps track of the
>   board? The board is a share resource between 2 players of a short
>   amount of time, and there are potentially many games going on at the
>   same time.

I'd have a TournamentService keeping tracking of all the games running at
any time in a dict mapping players to a board.  So when a player sends a
move, the service looks up the player's board, and tells the board what that
player X wants to play move Y, and the board then accepts that or raises an
exception.  It's the board that knows what moves can be played at any given
time; the protocol's job is merely to pass messages to and from the player
on the network.

> * How can I implement timeouts?  So that players have to play within 
>   given time-limits?  (like, X seconds per-move kinds of deals?)  I
>   thougt about starting a timer in my Protocol when a "MAKE A MOVE"
>   command is sent to the player, and then checking that time when the
>   move is received... but this seems to involve threads?

There's plenty of stuff built into Twisted for doing timeouts already, that
doesn't involve threads or anything icky.

You can use reactor.callLater, as described here:
   http://twistedmatrix.com/documents/howto/time

Depending on what you're doing, you may also find the setTimeout method of
Deferreds to be useful.

> Anyway, I'd really would appreciate your thoughts on this.  This
> 'higher-design' stuff is keeping me from getting dirty :)

I hope I've made it clearer for you.  Let us know if you're still unsure
about something.

[I think someone wrote a tic-tac-toe example, which might help a little
here... does anyone know where that is?]

-Andrew.




From lafou at wanadoo.fr  Sun Apr 20 04:28:24 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 20 Apr 2003 12:28:24 +0200
Subject: [Twisted-Python] [flow.py] : iterator problems
Message-ID: <1050834504.26760.58.camel@biproc>

Clark I have a problem here.
queryIterator doesn't work anymore :(

when I yield a producer, I got in one shot the complete set of results !


--------------------------------------------------------------------------
Processed result :  ((1L, 1L), (12L, 90L), (1300L, 560L), (2000L, 10L),
(30L, 900L), (5000L, 500L))
--------------------------------------------------------------------------

Instead of 

--------------------------------------------------------------------------
Processed result : (1L, 1L)
Processed result : (12L, 90L)
Processed result : (1300L, 560L)
Processed result : (2000L, 10L)
Processed result : (30L, 900L)
Processed result : (5000L, 500L)
--------------------------------------------------------------------------



I saw you changed many things since few days, and I'm not sure I will be
able to correct this bug alone. By the way, I'd like to work on my
project today, could you help me please ?

thank you.
Philippe 





From cce at clarkevans.com  Sun Apr 20 11:14:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sun, 20 Apr 2003 17:14:35 +0000
Subject: [Twisted-Python] Re: [flow.py] : iterator problems
In-Reply-To: <1050834504.26760.58.camel@biproc>
References: <1050834504.26760.58.camel@biproc>
Message-ID: <20030420171435.GA42062@doublegemini.com>

On Sun, Apr 20, 2003 at 12:28:24PM +0200, Philippe Lafoucri�re wrote:
|
| when I yield a producer, I got in one shot the complete set of results !
|

Sorry about that.  There are two ways to make Threaded the threaded
wrapper operate.  In one case, the default, the wrapper yields for
every time that the wrapped iterator has returned.  In the other,
it assumes that the wrapped iterator returns a lists, and then 
yields for each item in those lists.

When I split QueryIterator and Threaded, there wasn't a way to 
let Threaded know that QueryIterator wants the second behavior,
so to do that you need to use the 'extend' option:

   flow.Threaded(flow.QueryIterator(...), extend = 1)

Anyway, I assume you are using the defaults, fetchall=0 for the 
QueryIterator, and extend = 0, for the Threaded wrapper.  In this
case, you could get N yields with M rows in them.  This is probably
the most efficient mechanism, as you spend less time in the flow
module, yet the results are incremental.   

| --------------------------------------------------------------------------
| Processed result :  ((1L, 1L), (12L, 90L), (1300L, 560L), (2000L, 10L),
| (30L, 900L), (5000L, 500L))
| --------------------------------------------------------------------------

Right, and if your result set had more rows you'd get...


| --------------------------------------------------------------------------
| Processed result :  ((1L, 1L), (12L, 90L), ... )
| Processed result :  ((1300L, 560L), (2000L, 10L), ... )
| Processed result :  ((30L, 900L), (5000L, 500L), ... )
| --------------------------------------------------------------------------

Although, to make it easier for programming, the 
extend = 1 option would make it return results...

| --------------------------------------------------------------------------
| Processed result : (1L, 1L)
| Processed result : (12L, 90L)
| Processed result : (1300L, 560L)
| Processed result : (2000L, 10L)
| Processed result : (30L, 900L)
| Processed result : (5000L, 500L)
| --------------------------------------------------------------------------

| 
| I saw you changed many things since few days, and I'm not sure I will be
| able to correct this bug alone. By the way, I'd like to work on my
| project today, could you help me please ?

Sure.  I'll be around all day on IRC.

Clark



From p.mayers at imperial.ac.uk  Mon Apr 21 08:26:57 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 15:26:57 +0100
Subject: [Twisted-Python] UDP servers and socket queues
Message-ID: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>

All,

I'm porting an app over which had it's own async job thingy, similar to
Twisted's most basics - I now want it to run as a long-running server
with multiprotocol support, and Twisted is the logical choice.

The core of the app is a UDP-based RPC client (bespoke stuff) which does
a periodic flurry of activity (plus on-demand stuff - that's the plan
for later anyway).

The problem is that the flurry of activity fills the UDP socket queue,
and I think some simple changes to SelectReactor (which I've done
locally via a nasty/messy subclass) which could be useful to others will
fix it:

from twisted.internet import reactor
from twisted.internet import client

class RPCProtocol(protocol.DatagramProtocol):
    def __init__(self);
        # setup some icky stuff for retries etc here

    def datagramReceived(self, data, addr):
        pdu = self._decode(data)
        dfurred = self.outstanding[pdu.uuid]
        del self.outstanding[pdu.uuid]
        dfurred.callback(pdu)

    def sendPDU(pdu, addr):
        self.outstanding[pdu.uuid] = defer.Deferred()
        self.writeMessage(pdu.encode(), addr)
        return self.outstanding[pdu.uuid]

class endpoint:
    def __init__(self, protcol, host):
        self.protocol = protocol
        self.addr = resolve(host)
        self.actions = load_from_config(host)

    def go(self):
        pdu = self.create_pdu(self.actions.pop(0))
        self.protocol.sendPDU(pdu, self.addr).addCallback(self.handle)

    def handle(self, pdu):
        func = self.actions.pop(0)
        func(pdu)
        pdu = self.create_pdu(self.actions.pop(0))
        self.protocol.sendPDU(pdu, self.addr).addCallback(self.handle)
        
Anyway, you get the idea. The code fires up, and you get:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    ep.go()

...the problem is that the responses come back too fast - they overflow
the UDP socket buffer after a couple of hundred packets. So, try this:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    reactor.callLater(0, ep.go)

...except that the default SelectReactor will always execute any
pendingTimedCalls before calling doIteration (where the select() call
actually happens).

Ok, so inherit from SelectReactor and override mainLoop - except that
doIteration will only execute one doRead for each ready socket (there's
one socket - there are potentially thousands of hosts and I don't want
to overload either select()'s performance characteristics with the
number of fd's or the fd limit).

My old code did this:

while running:
    while 1:
        rs, ws, xs = select.select([self.fd,], [], [], self.timeout())
        if self.fd in rs:
            self.doRead()
        else:
            break
    for p in self.pending:
        p()

...i.e. empty the socket queue before doing *any* callback activity. I
can do this with a suitable reactor - it's just messy. Is it worthwhile
a flag in the core SelectReactor to change the preferences for
network/callback behaviour and the rate of network activity?

Just a thought.

Twisted is excellent work - keep it up!

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From bob at redivi.com  Mon Apr 21 08:54:40 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 21 Apr 2003 10:54:40 -0400
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
Message-ID: <2DEDE0E0-7409-11D7-92C2-000A95686CD8@redivi.com>

On Monday, Apr 21, 2003, at 10:26 America/New_York, Phil Mayers wrote:

> ...the problem is that the responses come back too fast - they overflow
> the UDP socket buffer after a couple of hundred packets. So, try this:
>
> proto = RPCProtocol()
> for host in hosts:
>     ep = endpoint(proto, host)
>     reactor.callLater(0, ep.go)
>
> ...except that the default SelectReactor will always execute any
> pendingTimedCalls before calling doIteration (where the select() call
> actually happens).

Have you tried doing reactor.callLater(smallFloatButNotZero, ep.go)?  
If you use a small number it typically won't happen in that iteration.

-bob




From itamar at itamarst.org  Mon Apr 21 09:16:06 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 21 Apr 2003 11:16:06 -0400
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk>
Message-ID: <20030421111606.4b39e311.itamar@itamarst.org>

On Mon, 21 Apr 2003 15:26:57 +0100
Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> The problem is that the flurry of activity fills the UDP socket queue,
> and I think some simple changes to SelectReactor (which I've done
> locally via a nasty/messy subclass) which could be useful to others
> will fix it:

I'll take a look at trying to fix this sometime this week. The solution
will be to do up to X reads of UDP packets in each iteration of the
event loop, instead of reading only one packet in each iteration. 

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From p.mayers at imperial.ac.uk  Mon Apr 21 12:29:56 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 19:29:56 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421111606.4b39e311.itamar@itamarst.org>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org>
Message-ID: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>

On Mon, Apr 21, 2003 at 11:16:06AM -0400, Itamar Shtull-Trauring wrote:
> 
> I'll take a look at trying to fix this sometime this week. The solution
> will be to do up to X reads of UDP packets in each iteration of the
> event loop, instead of reading only one packet in each iteration. 
> 

I figured something like that. Does anyone know if the various socket
readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
given you sufficient information to know when you can do multiple reads?

The other option I guess would be to for connection-less sockets to do:

while 1:
    try:
        data, addr = self.socket.recvfrom(65535)
        self.protocol.datagramReceived(data, addr)
    except socket.error, se:
        if se.args[0]==errno.EWOULDBLOCK:
            break
    except:
        log.deferr()

...in doRead (line 91, twisted/internet/udp.py)?

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From p.mayers at imperial.ac.uk  Mon Apr 21 12:48:09 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Apr 2003 19:48:09 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
Message-ID: <20030421184809.GC10336@wildfire0.net.ic.ac.uk>

On Mon, Apr 21, 2003 at 07:29:56PM +0100, Phil Mayers wrote:
> 
> I figured something like that. Does anyone know if the various socket
> readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
> given you sufficient information to know when you can do multiple reads?
> 
> The other option I guess would be to for connection-less sockets to do:
> 
> while 1:
>     try:
>         data, addr = self.socket.recvfrom(65535)
>         self.protocol.datagramReceived(data, addr)
>     except socket.error, se:
>         if se.args[0]==errno.EWOULDBLOCK:
>             break
>     except:
>         log.deferr()
> 
> ...in doRead (line 91, twisted/internet/udp.py)?
> 
> -- 
> 

On second thoughts, (having just tested it) that alone won't be
sufficient, although it does make things a lot cleaner. The problem also
is:

proto = RPCProtocol()
for host in hosts:
    ep = endpoint(proto, host)
    reactor.callLater(0, ep.go)

...the in mainLoop of SelectReactor (or rather the subclass which reads
from the network *first*):


while self.running:
    try:
        while self.running:
            # Still need to reverse the order of the read
            # versus the call of functions
            t2 = self.timeout()
            t = self.running and t2
            self.doIteration(t)
            # Advance simulation time in delayed event
            # processors.
            self.runUntilCurrent()
    except:
        log.msg("Unexpected error in main loop.")
        log.deferr()
    else:
        log.msg('Main loop terminated.')

...the runUntilCurrent will execute *all* the callLater's that are
queued, which takes a couple of seconds (say) - however, halfway though
the runUntilCurrent, a sufficient number of replies has been returned to
overflow the socket input buffer - so you still need to somehow limit
the amount of work done in runUntilCurrent.

Now, I could put "reactor.callLater(when, ep.go)" then "when += 0.1" but
as the process runs more callLaters will happen, will pile up against
each other, and eventually the same problem will likely occur.

Interesting behaviour though!

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From pinard at iro.umontreal.ca  Mon Apr 21 15:55:56 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 17:55:56 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `im' bug report
Message-ID: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>

Hi.  I intend to become a Twisted novice.  At the beginning of the road, I
got, unpacked and installed Twisted 1.0.4.  Then, I called `im' in a shell,
and in the window that appeared, pushed on button `Join Group', to get:

---------------------------------------------------------------------->
<GtkObject of type GladeXML at 84a2398>
initialized!
Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/libglade.py", line 28, in __call__
    ret = apply(self.func, a)
  File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
    self.currentAccount.joinGroup(name)
AttributeError: 'NoneType' object has no attribute 'joinGroup'
Traceback (most recent call last):
  File "/usr/lib/python2.2/site-packages/libglade.py", line 28, in __call__
    ret = apply(self.func, a)
  File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
    self.currentAccount.joinGroup(name)
AttributeError: 'NoneType' object has no attribute 'joinGroup'
----------------------------------------------------------------------<

It looks like a bug to my naive eyes.  Would it be? :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Mon Apr 21 16:24:42 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Apr 2003 18:24:42 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `im' bug report
In-Reply-To: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Mon, Apr 21, 2003 at 17:55:56 -0400
References: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030421222442.GA12222@toshi.anaprd01.md.comcast.net>

On 2003.04.21 17:55, François Pinard wrote:
> Hi.  I intend to become a Twisted novice.  At the beginning of the road, I
> got, unpacked and installed Twisted 1.0.4.  Then, I called `im' in a shell,
> and in the window that appeared, pushed on button `Join Group', to get:
> 
> ---------------------------------------------------------------------->

...

>   File "/bpi/titan/local/lib/python2.2/site-packages/twisted/im/gtkchat.py", line 101, in on_PlainJoinChat_clicked
>     self.currentAccount.joinGroup(name)
> AttributeError: 'NoneType' object has no attribute 'joinGroup'
> ----------------------------------------------------------------------<

> It looks like a bug to my naive eyes.  Would it be? :-)

Yeah, you weren't logged on, so there was no currentAccount (i.e., it was set 
to None). If you want, you can add a check to say "if not self.currentAccount"
and pop up a nice dialog with an error message :-)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Mon Apr 21 17:47:43 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 19:47:43 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
Message-ID: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>

Hello.

In the `doc/' hierarchy of the Twisted 1.0.4 distribution, some `.html'
files have links to `.xhtml' files, where apparently `.html' files by the
same base exist.  Should `.html' rather point to `.html' files whenever
possible?  Here are possible points to visit:

* `doc/index.html' has references to `howto/index.xhtml', 'man/index.xhtml',
  `specifications/index.xhtml' and `vision/index.xhtml'.

* `doc/howto/woven.html' refers to `listings/HelloWorld/HelloWorld.html'
  correctly, yet the text says `Listing 2: HelloWorld.xhtml...' which does
  not exist; it also refers to `listings/TwistedQuotes/WovenQuotes.xhtml'
  and says so in the text, yet sadly, there is no corresponding `.html' file.

* `doc/howto/domtemplate.html' refers to `TwistedQuotes/WebQuotes.xhtml',
  while the text which announces `Listing 2: WebQuotes.html...', and sadly,
  the reference is correct while the text is not.

* `doc/howto/lore.html', `doc/api/private/twisted.lore.default.html' and
  `doc/api/public/twisted.lore.default.html' also seem to indicate that
  `lore' will generate `.xhtml'; I am not familiar with `lore', and cannot
  say if it should or can generate `.html' instead.  If it can, it most
  probably should for generated documents to pointed to by `.html' files.

P.S. - I'm using `links' by preference (fast startup and reasonable image
support), which `links' does not seem to support `.xhtml' files.  Given that
`.html' is pretty widespread and reasonably understood by all Web browsers,
while `.xhtml' is more recent or specialised, would not it be a good idea to
aim `.html' as a uniform standard base for interactive documentation, (given
it ought to go through Web browsers), and offer `.xhtml' merely as an extra?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 18:06:45 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:06:45 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Problem with `domtemplate.html'
Message-ID: <oqk7dnjsyy.fsf@titan.progiciels-bpi.ca>

Hi, people.

In Twisted 1.0.4, file `doc/howto/domtemplate.html' has this line:

---------------------------------------------------------------------->
<a href="http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy">See it in action!</a>
----------------------------------------------------------------------<

I was expecting a demonstration of some sort.  `links' gave me a traceback,
which is likely not the correct output.  For this message, I wanted a copy
of that output (`links' does not seem to support mouse cuts), so I tried:

---------------------------------------------------------------------->
wget http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy
----------------------------------------------------------------------<

which yielded:

---------------------------------------------------------------------->
--19:55:44--  http://twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy
           => `webquote.rpy'
Résolution de twistedmatrix.com... complété.
Connexion vers twistedmatrix.com[64.123.27.105]:80...connecté.
requête HTTP transmise, en attente de la réponse...500 Internal Server Error
19:55:46 ERREUR 500: Internal Server Error.
----------------------------------------------------------------------<

and no output.  Suffering the slooow start of Netscape, I got a cut-able
output, which appears below.  Netscape did not show the `500' Error...

---------------------------------------------------------------------->
web.Server Traceback (most recent call last): 

exceptions.ImportError: No module named TwistedQuotes

   /usr/lib/python2.2/site-packages/twisted/web/server.py, line 152 in process
     150    self.postpath = map(urllib.unquote, string.split(self.path[1:], '/'))
     151    try:
     152      resrc = self.site.getResourceFor(self)
     153      self.render(resrc)
   Self 
   site
   path
             '/documents/howto/listings/TwistedQuotes/webquote.rpy'
    postpath

   Locals 
    self

   Globals 
    urllib
           <module 'urllib' from '/usr/lib/python2.2/urllib.pyc'>
    string
           <module 'string' from '/usr/lib/python2.2/string.pyc'>

   /usr/lib/python2.2/site-packages/twisted/web/server.py, line 471 in getResourceFor
     469    request.sitepath = copy.copy(request.prepath)
     470    request.acqpath = copy.copy(request.prepath)
     471    return self.resource.getChildForRequest(request)
     472
   Self 
    resource

   Locals 
   self
    request

   Globals 
    copy
          <module 'copy' from '/usr/lib/python2.2/copy.pyc'>

   /usr/lib/python2.2/site-packages/twisted/web/resource.py, line 173 in getChildForRequest
     171      request.acqpath.append(pathElement)
     172      request.prepath.append(pathElement)
     173      res = res.getChildWithDefault(pathElement, request)
     174    return res
   Locals 
    pathElement
                'webquote.rpy'
   res
   request

   /usr/lib/python2.2/site-packages/twisted/web/resource.py, line 160 in getChildWithDefault
     158      return self.children[path]
     159
     160    return self.getChild(path, request)
     161
   Self 
    children

   Locals 
   path
           'webquote.rpy'
   self
    request

   /usr/lib/python2.2/site-packages/twisted/web/static.py, line 340 in getChild
     338      #the `registry' argument is new, so we have to do this nasty hack
     339      try:
     340        p = processor(childPath, self.registry)
     341      except TypeError: # this isn't very robust :(
   Self 
    registry

   Locals 
    childPath
             '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy'
   self
   p
             '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote'
   processor

   /usr/lib/python2.2/site-packages/twisted/web/script.py, line 80 in ResourceScript
     78      'recache': cs.recache}
     79  try:
     80    execfile(path, glob, glob)
     81  except AlreadyCached, ac:
   Locals 
   cs
    path
         '/var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy'
   glob

   Globals 
    AlreadyCached
                   <class twisted.web.script.AlreadyCached at 0x83e1fc4>

   /var/www/WebSite/twistedmatrix.com/documents/howto/listings/TwistedQuotes/webquote.rpy, line 3 in ?
     1# -*- Python -*-
     2
     3from TwistedQuotes import webquoteresource
     4

exceptions.ImportError: No module named TwistedQuotes
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 18:23:15 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:23:15 -0400
Subject: [Twisted-Python] Re: Lore vs. latex2html: Fight to the Finish
In-Reply-To: <20030208185304.9876.qmail@green.zadka.com>
References: <20030208185304.9876.qmail@green.zadka.com>
Message-ID: <oqfzobjs7g.fsf@titan.progiciels-bpi.ca>

[Moshe Zadka]

> Dear Twisted developers,

I am not a developer, so I'm not sure if I may reply! :-)

> However, beyond that, I am interested to know which looks better:

> latex2html: http://www.ibiblio.org/obp/thinkCSpy/chap01.htm
> Lore: http://twistedmatrix.com/users/moshez/loreprop/
> (The Lore is using the Twisted documentation stylesheet.)

For my own taste, the first (latex2html) is a bit more legible, because it
has less distracting boxes, and the diagrams are more neat.  The navigation
bars at the beginning and the end give a bit of decoration, outside the
text, which is OK.  We should stay aware that "good looking" is only of
secondary value for documentation, legibility always goes before art.

> Any comments would be nice.  Comments which come with a patch to the
> stylesheet will be doubly appreciated.

By saying so, you reveal a prejudice towards the second (Lore).  :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 21 18:49:46 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 21 Apr 2003 20:49:46 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `im' bug report
In-Reply-To: <20030421222442.GA12222@toshi.anaprd01.md.comcast.net>
References: <oqsmsbjz0z.fsf@titan.progiciels-bpi.ca>
	<20030421222442.GA12222@toshi.anaprd01.md.comcast.net>
Message-ID: <oq3ckbjqz9.fsf@titan.progiciels-bpi.ca>

[Christopher Armstrong]

> Yeah, you weren't logged on, so there was no currentAccount (i.e., it was
> set to None).  If you want, you can add a check to say "if not
> self.currentAccount" and pop up a nice dialog with an error message :-)

I'm a newcomer to Twisted, and `im' is suggested right in the `README', that
is, really early in the adventure of discovering Twisted.  It would probably
be worth that Twisted polishes the first impressions it creates, or else,
that explanations like above be added to the `README' file. :-)

In that respect, what I want is a somewhat irrelevant.  Let's use some good
horse sense.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From andrew-twisted at puzzling.org  Mon Apr 21 20:16:57 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 12:16:57 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030422021657.GC7666@frobozz.local>

On Mon, Apr 21, 2003 at 07:47:43PM -0400, Fran?ois Pinard wrote:
> Hello.
> 
> In the `doc/' hierarchy of the Twisted 1.0.4 distribution, some `.html'
> files have links to `.xhtml' files, where apparently `.html' files by the
> same base exist.  Should `.html' rather point to `.html' files whenever
> possible?  Here are possible points to visit:

Yes, the '.html' should link to '.html'.  They '.html' files are the source
format for our documentation generation system that will process these to
'.xhtml' files, with various nice things done to them (including changing
the links to point to the .xhtml).

This is actually a known problem (someone else reported this a couple of
days ago).  I'll take care of it in CVS later today.

[...]
> * `doc/howto/lore.html', `doc/api/private/twisted.lore.default.html' and
>   `doc/api/public/twisted.lore.default.html' also seem to indicate that
>   `lore' will generate `.xhtml'; I am not familiar with `lore', and cannot
>   say if it should or can generate `.html' instead.  If it can, it most
>   probably should for generated documents to pointed to by `.html' files.

Lore's default behaviour is '.html' -> '.xhtml'.  If you are reading the
docs, just ignore the .html files and read the .xhtml, which are nicer
anyway.

> P.S. - I'm using `links' by preference (fast startup and reasonable image
> support), which `links' does not seem to support `.xhtml' files.  Given that
> `.html' is pretty widespread and reasonably understood by all Web browsers,
> while `.xhtml' is more recent or specialised, would not it be a good idea to
> aim `.html' as a uniform standard base for interactive documentation, (given
> it ought to go through Web browsers), and offer `.xhtml' merely as an extra?

I suspect links is probably having problems with the lack of <!DOCTYPE ...>
declarations in the .xhtml files, which is a bug in microdom.  Hopefully
this will be fixed soon.

-Andrew.




From radix at twistedmatrix.com  Mon Apr 21 20:28:03 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 21 Apr 2003 22:28:03 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422021657.GC7666@frobozz.local>; from andrew-twisted@puzzling.org on Mon, Apr 21, 2003 at 22:16:57 -0400
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local>
Message-ID: <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>

On 2003.04.21 22:16, Andrew Bennetts wrote:

> Yes, the '.html' should link to '.html'.  They '.html' files are the source
> format for our documentation generation system that will process these to
> '.xhtml' files, with various nice things done to them (including changing
> the links to point to the .xhtml).
> 
> This is actually a known problem (someone else reported this a couple of
> days ago).  I'll take care of it in CVS later today.

Do we need something like <a href="foo.html" munge="Don't!">...</a> ?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Mon Apr 21 20:53:31 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 12:53:31 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
Message-ID: <20030422025331.GD7666@frobozz.local>

On Mon, Apr 21, 2003 at 10:28:03PM -0400, Christopher Armstrong wrote:
> 
> On 2003.04.21 22:16, Andrew Bennetts wrote:
> 
> > Yes, the '.html' should link to '.html'.  They '.html' files are the source
> > format for our documentation generation system that will process these to
> > '.xhtml' files, with various nice things done to them (including changing
> > the links to point to the .xhtml).
> > 
> > This is actually a known problem (someone else reported this a couple of
> > days ago).  I'll take care of it in CVS later today.
> 
> Do we need something like <a href="foo.html" munge="Don't!">...</a> ?

Maybe, but so far, no.  Lore doesn't munge links with / in them at the
moment, which is usually plenty.

I'm actually intending on changing that to munging all relative links, or
perhaps all relative links under the current working directory (but that
seems a touch too magical).  If I do that, then a class="no_munge" is
probably justified -- although I'd prefer a better name for it :)

-Andrew.




From m at moshez.org  Mon Apr 21 22:22:51 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 Apr 2003 04:22:51 -0000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030422042251.11167.qmail@green.zadka.com>

On 21 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> P.S. - I'm using `links' by preference (fast startup and reasonable image
> support), which `links' does not seem to support `.xhtml' files.

Either fix links, or use a real browser like lynx or w3m.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Mon Apr 21 22:25:34 2003
From: m at moshez.org (Moshe Zadka)
Date: 22 Apr 2003 04:25:34 -0000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422025331.GD7666@frobozz.local>
References: <20030422025331.GD7666@frobozz.local>, <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net>
Message-ID: <20030422042534.11220.qmail@green.zadka.com>

On Tue, 22 Apr 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:

> I'm actually intending on changing that to munging all relative links, or
> perhaps all relative links under the current working directory (but that
> seems a touch too magical).  If I do that, then a class="no_munge" is
> probably justified -- although I'd prefer a better name for it :)
 
How about class="absolute"?
[I only *look* like a relative link :)]

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From andrew-twisted at puzzling.org  Mon Apr 21 22:35:55 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 14:35:55 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042251.11167.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com>
Message-ID: <20030422043555.GF7666@frobozz.local>

On Tue, Apr 22, 2003 at 04:22:51AM -0000, Moshe Zadka wrote:
> On 21 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:
> 
> > P.S. - I'm using `links' by preference (fast startup and reasonable image
> > support), which `links' does not seem to support `.xhtml' files.
> 
> Either fix links, or use a real browser like lynx or w3m.

You can workaround links behaviour by hitting \

-Andrew.




From andrew-twisted at puzzling.org  Mon Apr 21 22:36:35 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 22 Apr 2003 14:36:35 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042534.11220.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422021657.GC7666@frobozz.local> <20030422022803.GA12754@toshi.anaprd01.md.comcast.net> <20030422042534.11220.qmail@green.zadka.com>
Message-ID: <20030422043635.GG7666@frobozz.local>

On Tue, Apr 22, 2003 at 04:25:34AM -0000, Moshe Zadka wrote:
> On Tue, 22 Apr 2003, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
> 
> > I'm actually intending on changing that to munging all relative links, or
> > perhaps all relative links under the current working directory (but that
> > seems a touch too magical).  If I do that, then a class="no_munge" is
> > probably justified -- although I'd prefer a better name for it :)
>  
> How about class="absolute"?
> [I only *look* like a relative link :)]

Sold!

Expect this to be checked in tonight.

-Andrew.




From egor at iplus.ru  Tue Apr 22 03:13:14 2003
From: egor at iplus.ru (Egor Cheshkov)
Date: Tue, 22 Apr 2003 13:13:14 +0400
Subject: [Twisted-Python] perspective broker question
Message-ID: <3EA507AA.7060404@iplus.ru>

Hello everyone! Newbie question. I need to make a blocking call in 
perspective_X() method. So I put my call into separate thread and get a 
deferred wich will be called back when data available. But deferred 
could not be returned from perspective_X method (not sure). My question 
is how can I implement perspective_X method wich getting data from 
deferred?

-- 
Egor Cheshkov <egor at iplus.ru>





From pinard at iro.umontreal.ca  Tue Apr 22 07:50:53 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 09:50:53 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422042251.11167.qmail@green.zadka.com>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
	<20030422042251.11167.qmail@green.zadka.com>
Message-ID: <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>

[Moshe Zadka]

> > P.S. - I'm using `links' by preference (fast startup and reasonable
> > image support), which `links' does not seem to support `.xhtml' files.

> Either fix links, or use a real browser like lynx or w3m.

So, in your opinion, any browser which does not grok `.xhtml' is not real?
Happily enough, my preferred non-real browser is very useful as it stands,
and it seems that `.xhtml' is still exceptional rather than the usual in
real life, for a tremendous lot of people.  Ah, religions, religions... :-)
I hope Twisted is its own goal, and not an occasion for random proletysm!

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From tv at twistedmatrix.com  Tue Apr 22 00:30:56 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 22 Apr 2003 09:30:56 +0300
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk>
Message-ID: <20030422063056.GA5184@lapdog>

On Mon, Apr 21, 2003 at 07:29:56PM +0100, Phil Mayers wrote:
> I figured something like that. Does anyone know if the various socket
> readiness abstractions (select(), poll(), kqueue, RT signals, etc.)
> given you sufficient information to know when you can do multiple reads?

	Yes. All of them. If you want to empty the channel, read until
	it would block. Same for writing..

> The other option I guess would be to for connection-less sockets to do:
> 
> while 1:
>     try:
>         data, addr = self.socket.recvfrom(65535)
>         self.protocol.datagramReceived(data, addr)
>     except socket.error, se:
>         if se.args[0]==errno.EWOULDBLOCK:
>             break
>     except:
>         log.deferr()
> 
> ...in doRead (line 91, twisted/internet/udp.py)?

	It should do this already, in any case. It's a bug it doesn't.
	select/poll/etc only give a hint that the fd might be
	readable; the code must _always_ be prepared for the fact that
	it might not be readable after all.



	But your basic problem is trying to use UDP where it doesn't
	work.  Even if you find some sufficient delays that make the
	system not lose packets in your specific case, changing any of
	the variables (upgrading CPU, NICs, switches, OS, ...) can
	make it fail again. You should use a protocol that doesn't
	rely on luck, except maybe for optimization.

-- 
:(){ :|:&};:



From p.mayers at imperial.ac.uk  Tue Apr 22 08:07:03 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Apr 2003 15:07:03 +0100
Subject: [Twisted-Python] UDP servers and socket queues
In-Reply-To: <20030422063056.GA5184@lapdog>
References: <20030421142657.GB7900@wildfire0.net.ic.ac.uk> <20030421111606.4b39e311.itamar@itamarst.org> <20030421182956.GB10336@wildfire0.net.ic.ac.uk> <20030422063056.GA5184@lapdog>
Message-ID: <20030422140703.GA21486@wildfire0.net.ic.ac.uk>

On Tue, Apr 22, 2003 at 09:30:56AM +0300, Tommi Virtanen wrote:
> 
> 	But your basic problem is trying to use UDP where it doesn't
> 	work.  Even if you find some sufficient delays that make the
> 	system not lose packets in your specific case, changing any of
> 	the variables (upgrading CPU, NICs, switches, OS, ...) can
> 	make it fail again. You should use a protocol that doesn't
> 	rely on luck, except maybe for optimization.
> 

Hmm. Without going into irrelevant detail, I'm certain the UDP is the
appropriate protocol for this application, for a number of reasons, but
thanks for the comment.

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From andrew-twisted at puzzling.org  Tue Apr 22 08:23:27 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 00:23:27 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com> <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030422142327.GC8567@frobozz.local>

On Tue, Apr 22, 2003 at 09:50:53AM -0400, Francois Pinard wrote:
> [Moshe Zadka]
> 
> > > P.S. - I'm using `links' by preference (fast startup and reasonable
> > > image support), which `links' does not seem to support `.xhtml' files.
> 
> > Either fix links, or use a real browser like lynx or w3m.
> 
> So, in your opinion, any browser which does not grok `.xhtml' is not real?
> Happily enough, my preferred non-real browser is very useful as it stands,
> and it seems that `.xhtml' is still exceptional rather than the usual in
> real life, for a tremendous lot of people.  Ah, religions, religions... :-)
> I hope Twisted is its own goal, and not an occasion for random proletysm!

Well, links could be more intelligent here, and it seems other browsers
manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
...> declaration or the opening <html> tag seem sufficient for links to
realise that it is dealing with actual HTML.  Additionally, I wasn't able to
successfully configure my local links to recognise .xhtml as being
html/plain content, even though the menus seemed to suggest I could (it
happily accepted the entry, but the behaviour was unchanged).

I don't regard it as a major problem, though: in links you can hit "\" and
then it works.  Other browsers I've tried all seem fine -- as is links if
you are reading it off the website, which of course sets the Content-type
HTTP header.  Considering that you are the first person to report this
problem, I doubt this is worth the effort for us to "fix".  

You are welcome to locally rename or symlink the .xhtml files to .html if
you're really inconvenienced by this ;)

Or you can read the .ps or .pdf format -- or read it from the website, which
works around links' limitations.

> I hope Twisted is its own goal, and not an occasion for random proletysm!

The true goal of Twisted is to DESTROY THE SUN, of course.  Random proletysm
is merely a distraction we create so that no-one will stop us!  Muahahahaha!

-Andrew.




From pinard at iro.umontreal.ca  Tue Apr 22 09:08:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 11:08:49 -0400
Subject: [Twisted-Python] Newbie reading Twisted book!
Message-ID: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>

Hi, people.

I just want to share my enthusiasm, so far, at reading the Twisted book
(from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
interesting style of prose which triggers pleasure.  Thanks for this.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 22 09:24:14 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 11:24:14 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422142327.GC8567@frobozz.local>
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
	<20030422042251.11167.qmail@green.zadka.com>
	<oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
	<20030422142327.GC8567@frobozz.local>
Message-ID: <oqof2yy2qp.fsf@alcyon.progiciels-bpi.ca>

[Andrew Bennetts]

By the way, Andrew, let me thank you for your replies.

> Or you can read the .ps or .pdf format

And moreover, these are far more legible than rendered HTML (or XHTML),
whatever browser one uses.

> The true goal of Twisted is to DESTROY THE SUN, of course.  Random
> proletysm is merely a distraction we create so that no-one will stop us!
> Muahahahaha!

:-) :-).  I begin to see that Twisted has (or nearly has) all the needed
machinery towards this noble goal.  There surely is a lot of stuff
in there!  Yet, I guess I'll have to read some more before I can figure
out how to cleverly connect various parts towards the goal.  Beware! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Tue Apr 22 09:39:11 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 11:39:11 -0400
Subject: [Twisted-Python] perspective broker question
In-Reply-To: <3EA507AA.7060404@iplus.ru>; from egor@iplus.ru on Tue, Apr 22, 2003 at 05:13:14 -0400
References: <3EA507AA.7060404@iplus.ru>
Message-ID: <20030422153911.GA15037@toshi.anaprd01.md.comcast.net>

On 2003.04.22 05:13, Egor Cheshkov wrote:
> Hello everyone! Newbie question. I need to make a blocking call in 
> perspective_X() method. So I put my call into separate thread and get a 
> deferred wich will be called back when data available. But deferred 
> could not be returned from perspective_X method (not sure). 

Yes, you can return a Deferred from a perspective_ method and it will
do the right thing.

Also, you can do something like this

    def perspective_X(self):
        #doSomeOperation here returns a Deferred
        return doSomeOperation().addCallbacks(self.mungeIt, self.ohCrap)

... And implement mungeIt and ohCrap to take the result, munge it in some
useful way, and return it. The return value will be used as the result
on the client side (who originally did callRemote('X'))
This way you can do some processing on the result of your operation
before the client gets it, if you need to.

For more info on Deferreds, http://twistedmatrix.com/documents/howto/defer

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From p.mayers at imperial.ac.uk  Tue Apr 22 11:28:26 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 22 Apr 2003 18:28:26 +0100
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <200303111417.h2BEHt327030@localhost.localdomain>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain>
Message-ID: <20030422172826.GB19382@wildfire0.net.ic.ac.uk>

On Wed, Mar 12, 2003 at 01:17:55AM +1100, Anthony Baxter wrote:
> 
> >>> Tommi Virtanen wrote
> > 	0) make the t.i.process setuid/setgid code actually work (see
> > 	   patch; BTW is the initgroups part really needed? I feel my
> > 	   pure-python 6-liner does the same thing.)
> 
> > +        def initgroups(username, dummy):
> > +            l=[]
> > +            for groupname, password, gid, userlist in grp.getgrall():
> > +                if username in userlist:
> > +                    l.append(gid)
> > +            os.setgroups(l)
> 
> Certainly on the operating systems that I can recall, your initgroups()
> is doing the same thing as the C level initgroups. But if the C level

No no no no. getgrall could theoretically return a *huge* number of
groups, and/or individual groups could have *huge* numbers of members.
For a system with /etc/passwd and /etc/group only, this doesn't matter,
but think about a system with an LDAP (RFC2307) nameservice backend - I
just tested it on my machine, and getgrall results in over 48Mb of
LDAP queries based on our ActiveDirectory groups. Many tens of seconds.

However, calling initgroups results in a single query:

memberUid=foo

...and only returns the groupname and gid, so is efficient every time.
The "right" way to do this is the getgrouplist() call (see
http://www.openbsd.org/cgi-bin/man.cgi?query=getgrouplist) and if you
look at the NSS code in e.g. glibc the NSS modules can provide
"efficient" hooks which initgroups() and getgrouplist() can implement.
initgroups() in glibc basically calls getgrouplist() on the NSS plugin
and so whilst the *result* is the same, you're taking the slow path.

This is important - don't use the sucky getgrent (in fact, I'm an
advocate of making the gr_mem member of the "struct group" always be
null. Just because other apps do it is no exscuse either :o)

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From tv at twistedmatrix.com  Tue Apr 22 12:59:21 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Tue, 22 Apr 2003 21:59:21 +0300
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030422172826.GB19382@wildfire0.net.ic.ac.uk>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030422172826.GB19382@wildfire0.net.ic.ac.uk>
Message-ID: <20030422185921.GA19301@lapdog>

On Tue, Apr 22, 2003 at 06:28:26PM +0100, Phil Mayers wrote:
> No no no no. getgrall could theoretically return a *huge* number of
> groups, and/or individual groups could have *huge* numbers of members.
> For a system with /etc/passwd and /etc/group only, this doesn't matter,
> but think about a system with an LDAP (RFC2307) nameservice backend - I
> just tested it on my machine, and getgrall results in over 48Mb of
> LDAP queries based on our ActiveDirectory groups. Many tens of seconds.
> 
> However, calling initgroups results in a single query:
> 
> memberUid=foo
> 
> ...and only returns the groupname and gid, so is efficient every time.

	Certainly you are correct. The point you are missing is
	that we are programming in Python, not in C. And Python does
	not have initgroups.

	We could add initgroups into eunuchs
	(http://twistedmatrix.com/users/tv/eunuchs/), or use the
	initgroups module by one of the Twisted developers; the code
	could be rewritten to try importing the C part, and falling
	back to the dumb version. Then using the smart API would be a
	true optimization.

	However, before I touched it, the code did _NOTHING_ unless
	the C initgroups module was available. And that resulted in
	bad things.

> The "right" way to do this is the getgrouplist() call (see
> http://www.openbsd.org/cgi-bin/man.cgi?query=getgrouplist) and if you
> look at the NSS code in e.g. glibc the NSS modules can provide
> "efficient" hooks which initgroups() and getgrouplist() can implement.
> initgroups() in glibc basically calls getgrouplist() on the NSS plugin
> and so whilst the *result* is the same, you're taking the slow path.

	getgrouplist() is as much missing from python stdlib as
	initgroups(), so you aren't really helping there.

-- 
:(){ :|:&};:



From lafou at wanadoo.fr  Tue Apr 22 13:54:30 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 22 Apr 2003 21:54:30 +0200
Subject: [Twisted-Python] flow.Zip
Message-ID: <1051041270.26073.92.camel@biproc>

Clark,

just a mail to remind you to code flow.zip.

with merge :[1,Cooperate(),2] + [3,4] = [1,3,4,2]
with zip, it should be [1,Cooperate(),2] + [3,4] = [(1,3)(2,4)]


Hmm, By the way, Cooperate() isn't clear, even with the doc... :-(
could you explain me that please ?

thx
Philippe




From itamar at itamarst.org  Tue Apr 22 13:48:27 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 15:48:27 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
Message-ID: <20030422154827.17021602.itamar@itamarst.org>

1. Do you require Python 2.1 support in Twisted? If so, for what reason?
How problematic would a switch to 2.2 be for you? Please try to answer
within a week so we can have some immediate info.

2. Do you have any Twisted success stories you'd like to share (besides
those listed in our success stories page, of course)?

Thanks.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Tue Apr 22 15:23:34 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 22 Apr 2003 17:23:34 -0400
Subject: [Twisted-Python] Re: SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <oqk7dmxm3t.fsf@alcyon.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you?  Please try to answer
> within a week so we can have some immediate info.

I'm not yet a Twisted user, but intend to use it over two sites, (and maybe
a third withinin a few months).  All sites run Python 2.2.1 or better.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet...  Later maybe, soon hopefully! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From bob at redivi.com  Tue Apr 22 15:26:05 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 22 Apr 2003 17:26:05 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <0658F662-7509-11D7-92C2-000A95686CD8@redivi.com>

On Tuesday, Apr 22, 2003, at 15:48 America/New_York, Itamar 
Shtull-Trauring wrote:

> 1. Do you require Python 2.1 support in Twisted? If so, for what 
> reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

No, Python 2.1 needs to die, slowly and painfully.

-bob




From warner at lothar.com  Tue Apr 22 15:29:41 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 22 Apr 2003 14:29:41 -0700 (PDT)
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca>
 <20030422042251.11167.qmail@green.zadka.com>
 <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca>
 <20030422142327.GC8567@frobozz.local>
Message-ID: <20030422.142941.35634384.warner@lothar.com>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> 
> Well, links could be more intelligent here, and it seems other browsers
> manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
> ..> declaration or the opening <html> tag seem sufficient for links to
> realise that it is dealing with actual HTML.  Additionally, I wasn't able to
> successfully configure my local links to recognise .xhtml as being
> html/plain content, even though the menus seemed to suggest I could (it
> happily accepted the entry, but the behaviour was unchanged).

Forgive my confusion, but why isn't this sort of thing entirely up to the
server? Shouldn't the client merely obey the Content-Type: header?

I'm willing to believe it's more confusing than that, both because I've seen
it break and because I've seen the zillion mapping preferences in web
browsers, but I'd love to know how it's *supposed* to work before all the
band-aids got applied. In-line magic numbers like <html> or <!DOCTYPE> are
what MIME was supposed to get rid of.

 -Brian



From radix at twistedmatrix.com  Tue Apr 22 15:35:40 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 17:35:40 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422.142941.35634384.warner@lothar.com>; from warner@lothar.com on Tue, Apr 22, 2003 at 17:29:41 -0400
References: <oqof2zjtuo.fsf@titan.progiciels-bpi.ca> <20030422042251.11167.qmail@green.zadka.com> <oqwuhmy72a.fsf@alcyon.progiciels-bpi.ca> <20030422142327.GC8567@frobozz.local> <20030422.142941.35634384.warner@lothar.com>
Message-ID: <20030422213540.GA612@toshi.anaprd01.md.comcast.net>

On 2003.04.22 17:29, Brian Warner wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> > 
> > Well, links could be more intelligent here, and it seems other browsers
> > manage to figure this out just fine.  Neither the presence of a <!DOCTYPE
> > ..> declaration or the opening <html> tag seem sufficient for links to
> > realise that it is dealing with actual HTML.  Additionally, I wasn't able to
> > successfully configure my local links to recognise .xhtml as being
> > html/plain content, even though the menus seemed to suggest I could (it
> > happily accepted the entry, but the behaviour was unchanged).
> 
> Forgive my confusion, but why isn't this sort of thing entirely up to the
> server? Shouldn't the client merely obey the Content-Type: header?

The problem they're talking about is when you `links' a *local* file, so no
mime-type information is available.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From peter at engcorp.com  Tue Apr 22 15:34:31 2003
From: peter at engcorp.com (Peter Hansen)
Date: Tue, 22 Apr 2003 17:34:31 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <3EA5B567.444B7AB4@engcorp.com>

Itamar Shtull-Trauring wrote:
> 
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

We currently are using Twisted (just upgraded to 1.0.4) along with Zope 2.5.1,
Zope for the "front end" (but only for as long as it takes until we can remove it)
and Twisted for the "back end" of our application.  Zope still uses Python 2.1
so we would be unable to do this with Python 2.2.  Since we will definitely
have excised all traces of Zope by the time anything really changes with
Twisted and 2.2, I'm not seriously concerned but I thought I'd note it as
an interesting data point.

Also perhaps interesting, though off-topic, is that we patched 1.0.3 to
run under Python 2.0 (just a few quick hacks) successfully, as we are
still using that on our network for development, even though this one
particular application deploys with Python 2.1.  It was rather simple
with 1.0.3 although I'm not sure whether we'll have better or worse
luck when we try this with 1.0.4.  Chances are the nested scopes have
propagated throughout more of the code now...

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Eventually we will have something more official to report, but just for
this list, unofficially :-), for now, I'd like to report that Kaval
Wireless Technologies Inc (www.kaval.com) is integrating Twisted into a 
server application which is used to monitor equipment in wireless coverage 
extension systems.  (The monitoring links themselves are not wireless, so Twisted
is carrying only data which travelled as electrons, not as radio waves...)

Until now we'd been using Zope, but it was really not the most appropriate
choice since this isn't a content management system.  Twisted appears
more robust, lighter weight, and likely to prove much more amenable to
rapid development on our end, and as a hardcore XP team we highly
appreciate the XP approach of the Twisted team and look forward to
contributing as we learn more.  I don't want to diminish Zope, which
provided an effective platform at an earlier stage, but we've definitely
grown beyond it and are tightly constrained by its limitations and
difficult development model.

-Peter Hansen



From golux at comcast.net  Tue Apr 22 16:09:20 2003
From: golux at comcast.net (Steve Waterbury)
Date: Tue, 22 Apr 2003 18:09:20 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <1051049361.1072.197.camel@golux>

On Tue, 2003-04-22 at 15:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

Negatory!  2.2 is a-ok with us!!  

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet ... but we hope to have some embellishments in 
a little while ... ;^)

Cheers,
- Steve.





From kwaker at uch.net  Tue Apr 22 16:39:29 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Wed, 23 Apr 2003 01:39:29 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <4697194518.20030423013929@uch.net>

Hello Itamar,

Tuesday, April 22, 2003, 10:48:27 PM, you wrote:

IST> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
IST> How problematic would a switch to 2.2 be for you? Please try to answer
IST> within a week so we can have some immediate info.

2.1 is not required.

IST> 2. Do you have any Twisted success stories you'd like to share (besides
IST> those listed in our success stories page, of course)?

I am writing clone of my worknode in C++, so Twisted version is used
just until I complete C++ version. This is because of productivity
concerns, I have hit Python's productivity ceiling. After that I may
succeed in writing cluster kernel and web interface in Twisted. I.e.
still no success story, sorry.

-- 
Best regards,
 Dmitry                            mailto:kwaker at uch.net




From 2002 at weholt.org  Tue Apr 22 16:45:55 2003
From: 2002 at weholt.org (Thomas Weholt)
Date: Wed, 23 Apr 2003 00:45:55 +0200
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
Message-ID: <004701c30920$ef9cf3f0$0401a8c0@razor>

Hi,

I was hoping some of the things at PyCon related to Twisted would be available for all of us who didn't have a chance to attend. Especially the part about deployment of Twisted websites.

Any information about this ??

Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20030423/19858c61/attachment.html>

From bob at redivi.com  Tue Apr 22 16:57:11 2003
From: bob at redivi.com (Bob Ippolito)
Date: Tue, 22 Apr 2003 18:57:11 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <4697194518.20030423013929@uch.net>
Message-ID: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>

On Tuesday, Apr 22, 2003, at 18:39 America/New_York, Dmitry Litovchenko 
wrote:

> I am writing clone of my worknode in C++, so Twisted version is used
> just until I complete C++ version. This is because of productivity
> concerns, I have hit Python's productivity ceiling. After that I may
> succeed in writing cluster kernel and web interface in Twisted. I.e.
> still no success story, sorry.

Have you considered using something like BOOST.Python or Pyrex to do 
optimized implementations of the portions that have poor performance?  
Typically, rewriting the whole thing in C/C++ is a bad idea.

-bob




From astreib at indiana.edu  Tue Apr 22 17:19:28 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 18:19:28 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
Message-ID: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>

First to set my perspective -- I never heard of Twisted before two days
ago.

I have an XMLRPC server built with the Medusa framework.  I am looking at
moving the methods to Twisted in order to take advantage of Deferreds, SSL
support, and based on my brief exposure, the overall framework seems
cleaner.

This is a simplification, but to keep this short I have an XMLRPC method
that returns results from an LDAP search.  Currently the searches are
synchronous but they are fast enough that it has not been a problem.  Now
I need to expand the search filter options which will (could) result in a
slower search.

The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
perfect.  A call to ldap.search_s() returns a message ID which is later
used in a call to result() to get the results.  ldap.result() takes the
message ID, and a timeout argument which if zero is in effect a poll.

So what I want is for my XMLRPC method to invoke search_s and get the
message ID.  Then create a defered and provide its callback and the
message ID to something that will poll ldap.result() until it returns
results (if results are not ready it will return [None, None]) and then
pass those to the callback.  Here's where I get confused; I think the call
to ldap.result() needs to be done by reactor somehow since ldap.result()
may need to be called repeatedly before results are ready) but I'm not
sure.

The whole deferred light bulb has not quite come on for me yet, so I
appreciate any guidance.  The defer HOWTO examples all use something like
reactor.callLater() to represent a "delayed result" which is not really
helping me.  The XMLRPC example of returning a defered just returns
defer.succeed("hello"), again not quite a rich enough example.

I thought about adapting the adbapi stuff for LDAP, but the notion is in
my head that I should be able to do this without threads since the ldap
API supports async operations.

Many thanks,

Allan
-- 
"If you understand what you're doing, you're not learning anything"
                                             - Anon



From itamar at itamarst.org  Tue Apr 22 17:21:59 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 19:21:59 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <3EA5B567.444B7AB4@engcorp.com>
References: <20030422154827.17021602.itamar@itamarst.org>
	<3EA5B567.444B7AB4@engcorp.com>
Message-ID: <20030422192159.628b54af.itamar@itamarst.org>

On Tue, 22 Apr 2003 17:34:31 -0400
Peter Hansen <peter at engcorp.com> wrote:

> and Twisted for the "back end" of our application.  Zope still uses
> Python 2.1 so we would be unable to do this with Python 2.2.  Since we
> will definitely have excised all traces of Zope by the time anything
> really changes with Twisted and 2.2, I'm not seriously concerned but I
> thought I'd note it as an interesting data point.

Arte you using them in the same process? Or as separate processes? Any
reason you can't install two versions of Python at once?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Tue Apr 22 17:35:38 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 22 Apr 2003 19:35:38 -0400
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>; from astreib@indiana.edu on Tue, Apr 22, 2003 at 19:19:28 -0400
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
Message-ID: <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>

On 2003.04.22 19:19, Allan Streib wrote:
> First to set my perspective -- I never heard of Twisted before two days
> ago.
> 
> I have an XMLRPC server built with the Medusa framework.  I am looking at
> moving the methods to Twisted in order to take advantage of Deferreds, SSL
> support, and based on my brief exposure, the overall framework seems
> cleaner.
> 
> This is a simplification, but to keep this short I have an XMLRPC method
> that returns results from an LDAP search.  Currently the searches are
> synchronous but they are fast enough that it has not been a problem.  Now
> I need to expand the search filter options which will (could) result in a
> slower search.
> 
> The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
> perfect.  A call to ldap.search_s() returns a message ID which is later
> used in a call to result() to get the results.  ldap.result() takes the
> message ID, and a timeout argument which if zero is in effect a poll.
> 

Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
http://twistedmatrix.com/users/tv/ldaptor/
It's a natively-Twisted LDAP client library.

Also (it's moot if you'll use ldaptor, which I recommend, but..), returning the
message ID as the result of the Deferred, and requiring the caller to poll,
is a bad idea. You would do the polling yourself (every iteration of the
mainloop, with a reactor.callLater(0, pollIt) or somesuch), and once the
result is available, trigger the Deferred with it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From ecn at metaslash.com  Tue Apr 22 17:39:38 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Tue, 22 Apr 2003 19:39:38 -0400
Subject: [Twisted-Python] serial port blocking on Linux
Message-ID: <20030422233938.GA4946@localhost.localdomain>

Twisted 1.0.4
Linux Redhat 9.0

I have evidence of the SerialPort class blocking.  

strace says write operations are blocking and always return the number
of bytes to be written.

The problem goes away if I set the file descriptor on the object to
non-blocking using posixy controls.

Test program below.

-Eric

#! /usr/bin/python
from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols.basic import LineReceiver
import fcntl, os

import time

class Client(LineReceiver):
    
    def connectionMade(self):
        # Uncomment to fix
        #assert fcntl.fcntl(self.transport.fileno(),
        #                   fcntl.F_SETFL,
        #                   os.O_RDWR|os.O_NONBLOCK) == 0
        before = time.time()
        self.transport.write('This is a long message\n' * 500)
        after = time.time()
        print 'long write took', after - before, 'seconds'

    def lineReceived(self, line):
        pass
    
s = SerialPort(Client(), '/dev/ttyS1', reactor)
reactor.run()



From jml at ids.org.au  Tue Apr 22 18:17:21 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Wed, 23 Apr 2003 10:17:21 +1000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>; from itamar@itamarst.org on Wed, Apr 23, 2003 at 05:48:27 +1000
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030423001721.GA650@sting>

On 2003.04.23 05:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what
> reason?

No. I am happy for this to change.
My only concern would be Debian packaging issues.

> 2. Do you have any Twisted success stories you'd like to share

Not yet.

cheers,
jml



From cce at clarkevans.com  Tue Apr 22 18:54:43 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 00:54:43 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <1051041270.26073.92.camel@biproc>
References: <1051041270.26073.92.camel@biproc>
Message-ID: <20030423005443.GA48917@doublegemini.com>

On Tue, Apr 22, 2003 at 09:54:30PM +0200, Philippe Lafoucri�re wrote:
| just a mail to remind you to code flow.zip.

Done

| Hmm, By the way, Cooperate() isn't clear, even with the doc... :-(
| could you explain me that please ?

Cooperate() is called when an iterator would block, thus,
the flow module allows other tasks (connections, users)
to continue.   If you look at the source for flow.Threaded
you will see that it raises Cooperate() when the database
hasn't produced data yet.



From exarkun at intarweb.us  Tue Apr 22 18:51:54 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Tue, 22 Apr 2003 20:51:54 -0400
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
Message-ID: <20030423005154.GA31760@meson.dyndns.org>

On Tue, Apr 22, 2003 at 06:19:28PM -0500, Allan Streib wrote:
> First to set my perspective -- I never heard of Twisted before two days
> ago.
> 
> I have an XMLRPC server built with the Medusa framework.  I am looking at
> moving the methods to Twisted in order to take advantage of Deferreds, SSL
> support, and based on my brief exposure, the overall framework seems
> cleaner.
> 
> This is a simplification, but to keep this short I have an XMLRPC method
> that returns results from an LDAP search.  Currently the searches are
> synchronous but they are fast enough that it has not been a problem.  Now
> I need to expand the search filter options which will (could) result in a
> slower search.
> 
> The OpenLDAP API (and python-ldap) supports asynchronus searching.  Sounds
> perfect.  A call to ldap.search_s() returns a message ID which is later
> used in a call to result() to get the results.  ldap.result() takes the
> message ID, and a timeout argument which if zero is in effect a poll.
> 
> So what I want is for my XMLRPC method to invoke search_s and get the
> message ID.  Then create a defered and provide its callback and the
> message ID to something that will poll ldap.result() until it returns
> results (if results are not ready it will return [None, None]) and then
> pass those to the callback.  Here's where I get confused; I think the call
> to ldap.result() needs to be done by reactor somehow since ldap.result()
> may need to be called repeatedly before results are ready) but I'm not
> sure.
> 
> The whole deferred light bulb has not quite come on for me yet, so I
> appreciate any guidance.  The defer HOWTO examples all use something like
> reactor.callLater() to represent a "delayed result" which is not really
> helping me.  The XMLRPC example of returning a defered just returns
> defer.succeed("hello"), again not quite a rich enough example.
> 
> I thought about adapting the adbapi stuff for LDAP, but the notion is in
> my head that I should be able to do this without threads since the ldap
> API supports async operations.
> 

  Here's something that might help (note that I am not familiar with the
python-ldap API, so I'm just guessing at how it is laidd out):

    from twisted.internet import reactor, defer

    class LDAPQueryTracker:
        def __init__(self):
            self._ids = {}

        # Wrapper around python-ldap's search function
        # returns a Deferred whose callback will be invoked
        # with the result
        def search(self, args):
            id = ldap.search_s(args)
            self._ids[id] = defer.Deferred()
            reactor.callLater(0, self.poll)
            return self._ids[id]

        # A method to poll any "live" queries,
        # and to schedule another poll if there are any
        # remaining outstanding queries
        def poll(self):
            for (id, d) in self._ids.items():
                r = ldap.result(id, timeout=0):
                if r is not None:
                    del self._ids[id]
                    d.callback(r)
            if self._ids:
                reactor.callLater(0, self.poll)

    # Two trivial callbacks to handle the result
    def printResult(result):
        print 'LDAP result:', result
    def printFailure(failure):
        print 'LDAP failed!'
        failure.printTraceback()

    # Make a tracker, perform a query, and add some callbacks
    qt = LDAPQueryTracker()
    d = qt.search("humm, I have no idea what an ldap query looks like")
    d.addCallbacks(printResult, printFailure)

    # Do it.
    reactor.run()


  Hope this helps,

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 33 days, 21:03, 5 users, load average: 2.01, 1.90, 1.90
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030422/f76cf7e1/attachment.sig>

From glyph at twistedmatrix.com  Tue Apr 22 20:31:52 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 22 Apr 2003 21:31:52 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <4697194518.20030423013929@uch.net>
Message-ID: <BE148C28-7533-11D7-B5A1-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Tuesday, April 22, 2003, at 05:39 PM, Dmitry Litovchenko wrote:

> 2.1 is not required.

Thanks for the feedback :).

> This is because of productivity concerns, I have hit Python's 
> productivity ceiling.

Do you mean "performance"?  Python has a pretty high productivity 
ceiling.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+pfsdvVGR4uSOE2wRAnERAJ0apXwxdAc2i+z+vyKNZ8CuehH8KgCgl5bB
sBIIfS703nPhQrWPiiviWrw=
=Dzcr
-----END PGP SIGNATURE-----




From astreib at indiana.edu  Tue Apr 22 21:21:13 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 22:21:13 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030423005154.GA31760@meson.dyndns.org>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030423005154.GA31760@meson.dyndns.org>
Message-ID: <Pine.LNX.4.51.0304222216390.4013@garp.ucs.indiana.edu>

Thanks, Jp, your example is helpful.  I will give it a try.

(Note to other readers -- ldap.search_s() is the synchronous (blocking)
method.  The async method is ldap.search().  I've been using
ldap.search_s() up until now and my fingers automatically typed that.)

Allan



From astreib at indiana.edu  Tue Apr 22 21:30:38 2003
From: astreib at indiana.edu (Allan Streib)
Date: Tue, 22 Apr 2003 22:30:38 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030422233538.GA2575@toshi.anaprd01.md.comcast.net>
Message-ID: <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>

On Tue, 22 Apr 2003, Christopher Armstrong wrote:

> Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
> http://twistedmatrix.com/users/tv/ldaptor/
> It's a natively-Twisted LDAP client library.

I saw that and downloaded the latest .tar.gz, but it was not immediately
obvious how it worked.  There seemed to be no documentation -- did I miss
it?  I'll peruse through the code a bit more; I'm all for not reinventing
the wheel, but on the other hand I'm very happy with the python-ldap
wrappers for the OpenLDAP API -- they've worked flawlessly for me so far.

> Also (it's moot if you'll use ldaptor, which I recommend, but..),
> returning the message ID as the result of the Deferred, and requiring
> the caller to poll, is a bad idea. You would do the polling yourself
> (every iteration of the mainloop, with a reactor.callLater(0, pollIt) or
> somesuch), and once the result is available, trigger the Deferred with
> it.

Yes, that's what I was trying to say.  I probably did not say it well.
Thanks.

Allan
--
"If you understand what you're doing, you're not learning anything."
                                                -- Anonymous



From itamar at itamarst.org  Tue Apr 22 21:32:38 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 22 Apr 2003 23:32:38 -0400
Subject: [Twisted-Python] UDP changes
Message-ID: <20030422233238.64891bce.itamar@itamarst.org>

I checked in some changes to UDP in CVS that may very will improve
performance significantly. Or not. Could someone check and see if
there's any difference?

Code for a UDP throughput benchmark would also be much appreciated.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From jjn at kriln.com  Tue Apr 22 22:21:00 2003
From: jjn at kriln.com (Jeremy Noetzelman)
Date: Wed, 23 Apr 2003 04:21:00 +0000 (GMT)
Subject: [Twisted-Python] UDP changes
In-Reply-To: <20030422233238.64891bce.itamar@itamarst.org>
Message-ID: <20030423041942.I41027-100000@nosferatu.kriln.com>

On Tue, 22 Apr 2003, Itamar Shtull-Trauring wrote:

> Code for a UDP throughput benchmark would also be much appreciated.

Perusing the code/design of iperf may be useful for whoever does this.
Those of us who routinely do very high speed data transfers (1GBit+
streams) use iperf regularly to ensure the end-to-end performance
characteristics of the path.

J


>
> --
> Itamar Shtull-Trauring    http://itamarst.org/
> http://www.zoteca.com -- Python & Twisted consulting
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From screwtape at froup.com  Tue Apr 22 22:37:45 2003
From: screwtape at froup.com (Tim Allen)
Date: Wed, 23 Apr 2003 14:37:45 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <20030422142327.GC8567@frobozz.local>
Message-ID: <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>

On Wednesday, Apr 23, 2003, at 00:23 Australia/Sydney, Andrew Bennetts 
wrote:
> Well, links could be more intelligent here, and it seems other browsers
> manage to figure this out just fine.  Neither the presence of a 
> <!DOCTYPE
> ...> declaration or the opening <html> tag seem sufficient for links to
> realise that it is dealing with actual HTML.  Additionally, I wasn't 
> able to
> successfully configure my local links to recognise .xhtml as being
> html/plain content, even though the menus seemed to suggest I could (it
> happily accepted the entry, but the behaviour was unchanged).

Just as a point of pedanticism, what happens if you configure your 
local links to recognise .xhtml as "text/html" rather than "html/plain"?




From andrew-twisted at puzzling.org  Tue Apr 22 22:49:34 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 14:49:34 +1000
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `html' .vs. `xhtml'
In-Reply-To: <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>
References: <20030422142327.GC8567@frobozz.local> <5447A188-7545-11D7-96AB-003065D61A3E@froup.com>
Message-ID: <20030423044934.GC10754@frobozz.local>

On Wed, Apr 23, 2003 at 02:37:45PM +1000, Tim Allen wrote:
> On Wednesday, Apr 23, 2003, at 00:23 Australia/Sydney, Andrew Bennetts 
> wrote:
> >Well, links could be more intelligent here, and it seems other browsers
> >manage to figure this out just fine.  Neither the presence of a 
> ><!DOCTYPE
> >...> declaration or the opening <html> tag seem sufficient for links to
> >realise that it is dealing with actual HTML.  Additionally, I wasn't 
> >able to
> >successfully configure my local links to recognise .xhtml as being
> >html/plain content, even though the menus seemed to suggest I could (it
> >happily accepted the entry, but the behaviour was unchanged).
> 
> Just as a point of pedanticism, what happens if you configure your 
> local links to recognise .xhtml as "text/html" rather than "html/plain"?

Good question.

Answer: still no luck.

(Incidentally, I tried "html/plain" because of the "Toggle html/plain    \"
entry in the View menu, which made it render the page properly.)

-Andrew.




From peter at engcorp.com  Tue Apr 22 23:02:01 2003
From: peter at engcorp.com (Peter Hansen)
Date: Wed, 23 Apr 2003 01:02:01 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
		<3EA5B567.444B7AB4@engcorp.com> <20030422192159.628b54af.itamar@itamarst.org>
Message-ID: <3EA61E49.66DDFACE@engcorp.com>

Itamar Shtull-Trauring wrote:
> 
> On Tue, 22 Apr 2003 17:34:31 -0400
> Peter Hansen <peter at engcorp.com> wrote:
> 
> > and Twisted for the "back end" of our application.  Zope still uses
> > Python 2.1 so we would be unable to do this with Python 2.2.  Since we
> > will definitely have excised all traces of Zope by the time anything
> > really changes with Twisted and 2.2, I'm not seriously concerned but I
> > thought I'd note it as an interesting data point.
> 
> Arte you using them in the same process? Or as separate processes? Any
> reason you can't install two versions of Python at once?

Same process.  Rewriting as two processes, communicating via 
sockets internally or something, would be larger rework than
just excising Zope, which is a goal for other reasons anyway.

-Peter



From m at moshez.org  Tue Apr 22 23:54:13 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 Apr 2003 05:54:13 -0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030423055413.3842.qmail@green.zadka.com>

On Tue, 22 Apr 2003, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

On Debian woody (stable), Python/GTK+ is available only for Python 2.1.
This means woody users would not be able to use the GUI clients in Twisted
(some of which are GTK+-based). In addition, other libraries which specific
developers might wish to use might be unavailable for Python 2.2. I can
probably conjure up a list of such libraries.

I've already made my position clear on IRC, but figured it should be
documented here as well :)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From m at moshez.org  Tue Apr 22 23:59:27 2003
From: m at moshez.org (Moshe Zadka)
Date: 23 Apr 2003 05:59:27 -0000
Subject: [Twisted-Python] Newbie reading Twisted book!
In-Reply-To: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423055927.3937.qmail@green.zadka.com>

On 22 Apr 2003, Francois Pinard <pinard at iro.umontreal.ca> wrote:

> I just want to share my enthusiasm, so far, at reading the Twisted book
> (from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
> interesting style of prose which triggers pleasure.  Thanks for this.

The book is a collaboration of many Twisted developers.
Andrew and I are responsible for making the book out of the various
contributed documents, but the prose itself is written by many different
people (among the contributors are Glyph, Itamar, Andrew, Jp Calderone
and many others).
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From andrew-twisted at puzzling.org  Wed Apr 23 00:25:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 23 Apr 2003 16:25:13 +1000
Subject: [Twisted-Python] Newbie reading Twisted book!
In-Reply-To: <20030423055927.3937.qmail@green.zadka.com>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca> <20030423055927.3937.qmail@green.zadka.com>
Message-ID: <20030423062513.GD10754@frobozz.local>

On Wed, Apr 23, 2003 at 05:59:27AM -0000, Moshe Zadka wrote:
> On 22 Apr 2003, Francois Pinard <pinard at iro.umontreal.ca> wrote:
> 
> > I just want to share my enthusiasm, so far, at reading the Twisted book
> > (from the `doc/howto/' directory).  Whoever wrote it uses a vivid and
> > interesting style of prose which triggers pleasure.  Thanks for this.
> 
> The book is a collaboration of many Twisted developers.
> Andrew and I are responsible for making the book out of the various
> contributed documents, but the prose itself is written by many different
> people (among the contributors are Glyph, Itamar, Andrew, Jp Calderone
> and many others).

And particularly Brian Warner, who is my personal documentation hero for
writing the PB chapter virtually single-handedly! :)

-Andrew.




From lafou at wanadoo.fr  Wed Apr 23 00:57:50 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 23 Apr 2003 08:57:50 +0200
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423005443.GA48917@doublegemini.com>
References: <1051041270.26073.92.camel@biproc>
	 <20030423005443.GA48917@doublegemini.com>
Message-ID: <1051081070.26792.96.camel@biproc>

On Wed, 2003-04-23 at 02:54, Clark C. Evans wrote:
> On Tue, Apr 22, 2003 at 09:54:30PM +0200, Philippe Lafoucrière wrote:
> | just a mail to remind you to code flow.zip.
> 
> Done
Thank you !! I'll test it in a few minutes. Feedback in an hour.


> Cooperate() is called when an iterator would block, thus,
> the flow module allows other tasks (connections, users)
> to continue.   If you look at the source for flow.Threaded
> you will see that it raises Cooperate() when the database
> hasn't produced data yet.

Ho well. So, Cooperate() is a kind de defered (for flows) ?

-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From p.mayers at imperial.ac.uk  Wed Apr 23 02:23:34 2003
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Apr 2003 09:23:34 +0100
Subject: [Twisted-Python] t.i.process uid/gid suckiness
In-Reply-To: <20030422185921.GA19301@lapdog>
References: <20030311132510.GA11040@lapdog> <200303111417.h2BEHt327030@localhost.localdomain> <20030422172826.GB19382@wildfire0.net.ic.ac.uk> <20030422185921.GA19301@lapdog>
Message-ID: <20030423082334.GC1100@wildfire0.net.ic.ac.uk>

On Tue, Apr 22, 2003 at 09:59:21PM +0300, Tommi Virtanen wrote:
> 	getgrouplist() is as much missing from python stdlib as
> 	initgroups(), so you aren't really helping there.
> 

My apologies - I thought the discussion was *about* the use or non-use
of the initgroups C module, rather than what to do in the absence. My
bad.

Has any thought been given to a PEP for adding initgroups() and/or
getgrouplist() to the Python standard "group" module?

-- 

Regards,
Phil

+------------------------------------------+
| Phil Mayers                              |
| Network & Infrastructure Group           |
| Information & Communication Technologies |
| Imperial College                         |
+------------------------------------------+



From kwaker at uch.net  Wed Apr 23 03:29:28 2003
From: kwaker at uch.net (Dmitry Litovchenko)
Date: Wed, 23 Apr 2003 12:29:28 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>
References: <C07B80A7-7515-11D7-92C2-000A95686CD8@redivi.com>
Message-ID: <129136193806.20030423122928@uch.net>

Hello Bob,

>> I am writing clone of my worknode in C++, so Twisted version is used
>> just until I complete C++ version. This is because of productivity
>> concerns, I have hit Python's productivity ceiling. After that I may
>> succeed in writing cluster kernel and web interface in Twisted. I.e.
>> still no success story, sorry.

BI> Have you considered using something like BOOST.Python or Pyrex to do 
BI> optimized implementations of the portions that have poor performance?  
BI> Typically, rewriting the whole thing in C/C++ is a bad idea.

I am using just Psyco, but wow! Never saw these two. Thanks, Bob.

-- 
Best regards,
 Dmitry                            mailto:kwaker at uch.net




From warner at lothar.com  Wed Apr 23 03:37:21 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 23 Apr 2003 02:37:21 -0700 (PDT)
Subject: [Twisted-Python] Broken HOWTO documentation
References: <200304161744.09301.mclay@python.net>
Message-ID: <20030423.023721.59490921.warner@lothar.com>

Michael McLay <mclay at python.net> writes:
> I have been trying to get the examples in section 2.4 of the HOWTO to work.
> It looks like the documentation is out of date with the current state of
> the software in the CVS. starting with 2.4.2, the "app.theApplication"
> returns the error
> 
> >>> a = app.theApplication
> Traceback (most recent call last):

twisted.internet.app.theApplication doesn't actually appear until the
application starts running, usually through app.run(), and sometimes with
reactor.run().

> I had problems with the examples in section 2.4.3 and 2.5 as well. In
> section 2.5 the telnet localhost 4040 command returned a different module
> location instead of twisted.protocols.telnet.ShellFactory and when I ran
> dir(__main__) the list of names did not come close to matching what was in
> the example. No twisted objects were listed.

You're right, those examples were ancient. I've updated them to match the
current code, and removed some of the most unhelpful pieces.

thanks,
 -Brian



From tv at twistedmatrix.com  Wed Apr 23 00:12:06 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 23 Apr 2003 09:12:06 +0300
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu> <20030422233538.GA2575@toshi.anaprd01.md.comcast.net> <Pine.LNX.4.51.0304222225100.4013@garp.ucs.indiana.edu>
Message-ID: <20030423061205.GA26917@lapdog>

On Tue, Apr 22, 2003 at 10:30:38PM -0500, Allan Streib wrote:
> > Eek, polling is terrible. You should check out Tv's Ldaptor for Twisted:
> > http://twistedmatrix.com/users/tv/ldaptor/
> > It's a natively-Twisted LDAP client library.
> 
> I saw that and downloaded the latest .tar.gz, but it was not immediately
> obvious how it worked.  There seemed to be no documentation -- did I miss
> it?  I'll peruse through the code a bit more; I'm all for not reinventing
> the wheel, but on the other hand I'm very happy with the python-ldap
> wrappers for the OpenLDAP API -- they've worked flawlessly for me so far.

	There's no HOWTO-style documentation (because *I* don't
	usually want to read such, so I don't want to write it), but
	there current head of the tree actually has decent
	docstrings. Here's a few links:

	API Docs: http://tv.debian.net/software/ldaptor/api/

	Main site: http://tv.debian.net/software/ldaptor/

	See the latest code: http://ldaptor.bkbits.net/



	There's also *13* example client apps, as of now.

	The search utility should be reasonably obvious:

	http://ldaptor.bkbits.net:8080/ldaptor/anno/bin/ldaptor-search at 1.12?nav=index.html|src/|src/bin


	You also have this great mailing list to ask questions on.

-- 
:(){ :|:&};:



From exarkun at intarweb.us  Wed Apr 23 08:21:05 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 10:21:05 -0400
Subject: [Twisted-Python] UDP changes
In-Reply-To: <20030422233238.64891bce.itamar@itamarst.org>
References: <20030422233238.64891bce.itamar@itamarst.org>
Message-ID: <20030423142105.GB9664@meson.dyndns.org>

On Tue, Apr 22, 2003 at 11:32:38PM -0400, Itamar Shtull-Trauring wrote:
> I checked in some changes to UDP in CVS that may very will improve
> performance significantly. Or not. Could someone check and see if
> there's any difference?
> 
> Code for a UDP throughput benchmark would also be much appreciated.
> 

  I have some code I can use to test this, I'll post results when I get a
chance.

  An apparent problem, though.  On Windows, under Cygwin:

    File "C:\cygwin\home\amir\Twisted\twisted\internet\udp.py", line 39, in ?
      from errno import WSAEAGAIN as EAGAIN
    ImportError: cannot import name WSAEAGAIN  File "C:\cygwin\home\amir\Twisted\twisted\internet\udp.py", line 39, in ?
      from errno import WSAEAGAIN as EAGAIN
    ImportError: cannot import name WSAEAGAIN

  Jp

-- 
"One World, one Web, one Program." - Microsoft(R) promotional ad
"Ein Volk, ein Reich, ein Fuhrer." - Adolf Hitler
-- 
 up 34 days, 11:03, 4 users, load average: 1.96, 1.78, 1.70
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030423/0d50ba77/attachment.sig>

From cce at clarkevans.com  Wed Apr 23 08:33:29 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 14:33:29 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <1051081070.26792.96.camel@biproc>
References: <1051041270.26073.92.camel@biproc> <20030423005443.GA48917@doublegemini.com> <1051081070.26792.96.camel@biproc>
Message-ID: <20030423143329.GA50525@doublegemini.com>

On Wed, Apr 23, 2003 at 08:57:50AM +0200, Philippe Lafoucri�re wrote:
| > Cooperate() is called when an iterator would block, thus,
| > the flow module allows other tasks (connections, users)
| > to continue.   If you look at the source for flow.Threaded
| > you will see that it raises Cooperate() when the database
| > hasn't produced data yet.
| 
| Ho well. So, Cooperate() is a kind de defered (for flows) ?

Well, Cooperate is the whole reason for flow... otherwise you
could just use recursive generators.   Basically, in one of 
your generators (Threaded(QueryIterator())), your code would 
block waiting for a row, etc.  So rather than blocking, Threaded
returns Cooperate.   This return value is handled by the wrappers
all the way up the call chain.  At the top of the call chain is
Deferred, and when Deferrerd gets a Cooperate, it does a 
callLater(0, self), so that other processes can run.  


Suppose you have generator X -> Y -> Z, the picture 
then looks like...

     Wrap  <--  Z
      |
      v
     Wrap  <--> Y
      |   
      v
     Wrap  <--> X
      |
      V
     Deferred
      |
      V
     reactor

So, rather than X talking to Y, talking to Z, each of
your generators is talking to a wrapper instead, which
tries to be as transparent as possible.   The 
wrapper has the following behavior:

    0.  If a value is returned from a generator to 
        a wrapper, it is given to the previous generator
        in the chain; at the bottom of the chain it is
        added to an array which is sent to the deferred's
        callback.  Failures are handled the same way.

    1.  If the value returned is a wrapper, then it adds
        the new wrapper to the top of the stack and 
        starts to process it.

    2.  When Cooperate is returned from a generator, 
        it is sent all the way down the Wrapper linked
        list so that the reactor can re-schedule the
        processing chain (micro-thread).

So, I hope this helps.  Cooperate is the whole reason
for flow... without the need to 'pause' the whole stack
one wouldn't need the wrapper at all.  

;) Clark



From smaniero at sfera.net  Wed Apr 23 09:02:46 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Wed, 23 Apr 2003 17:02:46 +0200
Subject: [Twisted-Python] FTP Server
Message-ID: <1051110166.3ea6ab16dd249@sferamail.sfera.net>

I'm new user for Twisted.

I've seen an FTP server module in twisted, but I see that the server will be
re-written. There's some implementation of new FTP module?




From cce at clarkevans.com  Wed Apr 23 09:48:23 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Wed, 23 Apr 2003 15:48:23 +0000
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423143329.GA50525@doublegemini.com>
References: <1051041270.26073.92.camel@biproc> <20030423005443.GA48917@doublegemini.com> <1051081070.26792.96.camel@biproc> <20030423143329.GA50525@doublegemini.com>
Message-ID: <20030423154823.GA50971@doublegemini.com>

Actually, the diagram isn't quite right.  Here is a better one.

Suppose you have generator X -> Y -> Z, the picture 
then looks like...

     Wrap  <--  Z
         \ 
           \
             \
               v
     Wrap  <-- Y
         \ 
           \
             \
               v
     Wrap  <-- X
      |
      V
     Deferred
      |
      V
     reactor

| So, rather than X talking to Y, talking to Z, each of
| your generators is talking to a wrapper instead, which
| tries to be as transparent as possible.   The 
| wrapper has the following behavior:
| 
|     0.  If a value is returned from a generator to 
|         a wrapper, it is given to the previous generator
|         in the chain; at the bottom of the chain it is
|         added to an array which is sent to the deferred's
|         callback.  Failures are handled the same way.
| 
|     1.  If the value returned is a wrapper, then it adds
|         the new wrapper to the top of the stack and 
|         starts to process it.
| 
|     2.  When Cooperate is returned from a generator, 
|         it is sent all the way down the Wrapper linked
|         list so that the reactor can re-schedule the
|         processing chain (micro-thread).



From lafou at wanadoo.fr  Wed Apr 23 09:36:16 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 23 Apr 2003 17:36:16 +0200
Subject: [Twisted-Python] Re: flow.Zip
In-Reply-To: <20030423143329.GA50525@doublegemini.com>
References: <1051041270.26073.92.camel@biproc>
	 <20030423005443.GA48917@doublegemini.com>
	 <1051081070.26792.96.camel@biproc>
	 <20030423143329.GA50525@doublegemini.com>
Message-ID: <1051112176.22002.55.camel@biproc>

> Well, Cooperate is the whole reason for flow... otherwise you
> could just use recursive generators.   Basically, in one of 
> your generators (Threaded(QueryIterator())), your code would 
> block waiting for a row, etc.  So rather than blocking, Threaded
> returns Cooperate.   This return value is handled by the wrappers
> all the way up the call chain.  At the top of the call chain is
> Deferred, and when Deferrerd gets a Cooperate, it does a 
> callLater(0, self), so that other processes can run.  
> 
> 
> Suppose you have generator X -> Y -> Z, the picture 
> then looks like...
> 
>      Wrap  <--  Z
>       |
>       v
>      Wrap  <--> Y
>       |   
>       v
>      Wrap  <--> X
>       |
>       V
>      Deferred
>       |
>       V
>      reactor
> 
> So, rather than X talking to Y, talking to Z, each of
> your generators is talking to a wrapper instead, which
> tries to be as transparent as possible.   The 
> wrapper has the following behavior:
> 
>     0.  If a value is returned from a generator to 
>         a wrapper, it is given to the previous generator
>         in the chain; at the bottom of the chain it is
>         added to an array which is sent to the deferred's
>         callback.  Failures are handled the same way.
> 
>     1.  If the value returned is a wrapper, then it adds
>         the new wrapper to the top of the stack and 
>         starts to process it.
> 
>     2.  When Cooperate is returned from a generator, 
>         it is sent all the way down the Wrapper linked
>         list so that the reactor can re-schedule the
>         processing chain (micro-thread).
> 
> So, I hope this helps.  Cooperate is the whole reason
> for flow... without the need to 'pause' the whole stack
> one wouldn't need the wrapper at all.  
> 
> ;) Clark


Ho, this makes more sence now. Thank you ! (Maybe you could insert this in flow.py inline
doc ?)




From pinard at iro.umontreal.ca  Wed Apr 23 15:30:00 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 17:30:00 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
Message-ID: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>

Hello, Twisted people.

Out of the box (yet I already did `python setup.py install --prefix=/usr,
as `root'), `admin/runtests' yields a few errors, as shown below.
Should these be expected?  Reported?  This is over a SuSE 8.1 Linux.
`pycrypto' 1.9a6 is installed.



17:21:31 0 pinard at alcyon:/usr/tmp/Twisted-1.0.4 $ admin/runtests

===============================================================================
SKIPPED: testModules (twisted.test.test_doc.DocCoverage)
-------------------------------------------------------------------------------
Activate me when you feel like writing docstrings, and fixing GTK crashing bugs.
===============================================================================
SKIPPED: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
SKIPPED: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
EXPECTED FAILURE: testStor (twisted.test.test_ftp.FTPClientAndServerTests)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_ftp.py", line 276, in testStor
    self.assertEquals(open('HelloThere').read(), expectedContent)
 FailTest: '' != 'Hello\nHello\nHello\nHello\n'
===============================================================================
EXPECTED FAILURE: testSneakyHiddenDoom (twisted.test.test_loopback.LoopbackTCPTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 77, in testSneakyHiddenDoom
    LoopbackTestCase.testSneakyHiddenDoom(self)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 71, in testSneakyHiddenDoom
    self.assertEquals(c.lines, ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3'])
 FailTest: ['DOOM LINE', 'Hello 1', 'Hello 2'] != ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3']
===============================================================================
FAILURE: testModificationTime (twisted.test.test_dirdbm.ShelfTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_dirdbm.py", line 114, in testModificationTime
    self.assert_(0 <= time.time() - self.dbm.getModificationTime("k") < 1)
 FailTest
===============================================================================
FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
    self.assertEquals(lsOut, p.errF.getvalue())
 FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'
===============================================================================
ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
    method(testCase)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
    self.assertEquals(self.server.packets[0][0], "hello world")
 IndexError: list index out of range
-------------------------------------------------------------------------------
Ran 587 tests in 100.385s

FAILED (failures=2, errors=1, skips=3, expectedFailures=2)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Wed Apr 23 15:48:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 17:48:49 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Figures in the manual
Message-ID: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>

Hello, Twisted people.

In the manual found as `doc/howto/book.ps', some figures are inserted in
the text with a 90 degree rotation.  Despite this is not a great evil,
they would appear better if not rotated.  There is one on page 10 (1.1
High-Level Overview of Twisted); another on page 76 (4.6.2 Deferreds -
Visual Explanation); another on page 147 (6.3.3 The Diagram), and maybe
others, I did not try to be exhaustive here.

The figure on page 10 drops off the page, however, and this is more
serious, as one does not figure out how much of it is missing (I mean,
without looking at the HTML rendering of that section, which is OK).

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From acapnotic at twistedmatrix.com  Wed Apr 23 15:57:50 2003
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: 23 Apr 2003 14:57:50 -0700
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
In-Reply-To: <004701c30920$ef9cf3f0$0401a8c0@razor>
References: <004701c30920$ef9cf3f0$0401a8c0@razor>
Message-ID: <1051131181.22306.471.camel@troglodyte.funhouse>

On Tue, 2003-04-22 at 15:45, Thomas Weholt wrote:
> I was hoping some of the things at PyCon related to Twisted would be
> available for all of us who didn't have a chance to attend. Especially
> the part about deployment of Twisted websites.
>  
> Any information about this ??

All the source material for the Twisted PyCon papers and slides should
be in doc/historic/2003/pycon/.


Hey gang, what's the recommended procedure to make them pretty (i.e.
in-line the source examples, etc)?  Is that something that's supposed to
be part of the release process but we forgot to add to
admin/process-docs when we added these papers?  And if these papers are
really going to be static and unchanging, what do you think of
committing their rendered forms to the repository?

-- 
The moon is last quarter, 49.3% illuminated, 22.2 days old.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030423/acf05839/attachment.sig>

From astreib at indiana.edu  Wed Apr 23 16:00:52 2003
From: astreib at indiana.edu (Allan Streib)
Date: Wed, 23 Apr 2003 17:00:52 -0500 (EST)
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <20030423005154.GA31760@meson.dyndns.org>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu>
 <20030423005154.GA31760@meson.dyndns.org>
Message-ID: <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>

On Tue, 22 Apr 2003, Jp Calderone wrote:

>   Here's something that might help (note that I am not familiar with the
> python-ldap API, so I'm just guessing at how it is laidd out):

Your example works nicely with only minor changes.  Here's what I wrote
just to verify it works.  Many thanks!

Allan


from twisted.internet import reactor, defer
import ldap

class LDAPQueryTracker:
    def __init__(self):
        self._ids = {}
        self.ldapCon = ldap.initialize('ldap://localhost/')
        self.ldapCon.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
        self.ldapCon.simple_bind_s('cn=Manager,dc=iu,dc=edu', 'xxxxxx')

    def search(self, searchargs):
        id = self.ldapCon.search(searchargs['base'],
                                 ldap.SCOPE_SUBTREE,
                                 searchargs['filter'])
        self._ids[id] = defer.Deferred()
        reactor.callLater(0, self.checkResults)
        return self._ids[id]

    def checkResults(self):
        for (id, deferedResult) in self._ids.items():
            resultType, resultData = self.ldapCon.result(msgid=id,
                                                         all=1,
                                                         timeout=0)
            if resultType is not None:
                del self._ids[id]
                deferedResult.callback(resultData)

            if self._ids:
                reactor.callLater(0, self.checkResults)



#A simple callback
def printResults(results):
    for result in results:
        print result

def printFailure(failure):
    print "LDAP Operation failed"
    failure.printTraceback()


qt = LDAPQueryTracker()
deferedResult = qt.search({'base': 'ou=people,dc=iu,dc=edu',
                           'filter': '(uid=astreib)'})
deferedResult.addCallbacks(printResults, printFailure)

reactor.run()




From exarkun at intarweb.us  Wed Apr 23 16:09:30 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 18:09:30 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423220930.GA14554@meson.dyndns.org>

On Wed, Apr 23, 2003 at 05:30:00PM -0400, Francois Pinard wrote:
> Hello, Twisted people.
> 
> Out of the box (yet I already did `python setup.py install --prefix=/usr,
> as `root'), `admin/runtests' yields a few errors, as shown below.
> Should these be expected?  Reported?  This is over a SuSE 8.1 Linux.
> `pycrypto' 1.9a6 is installed.
> 

  Thanks for the report.

> 
> 
> [snip - stuff I don't have thoughts on]
> ===============================================================================
> FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
> -------------------------------------------------------------------------------
> Traceback (most recent call last):
>    File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
>     self.assertEquals(lsOut, p.errF.getvalue())
>  FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'

  Woops.  This is a localization problem.  Maybe it should be an expected
skip for certain values of LC_LANG?  Or maybe we should just not use ls.


> ===============================================================================
> ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
> -------------------------------------------------------------------------------
> Traceback (most recent call last):
>    File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
>     method(testCase)
>    File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
>     self.assertEquals(self.server.packets[0][0], "hello world")
>  IndexError: list index out of range
> -------------------------------------------------------------------------------

  Multicast is known to be broken in a few situations.  Can you describe
your network setup.  In particular, do you have a firewall configured, or is
the machine performing NAT?

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 34 days, 19:03, 7 users, load average: 0.31, 0.48, 0.53
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030423/688ed719/attachment.sig>

From warner at lothar.com  Wed Apr 23 16:57:34 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 23 Apr 2003 15:57:34 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.0.4 - admin/runtests failures?
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
 <20030423220930.GA14554@meson.dyndns.org>
Message-ID: <20030423.155734.48529138.warner@lothar.com>

> Woops.  This is a localization problem.  Maybe it should be an expected
> skip for certain values of LC_LANG?  Or maybe we should just not use ls.

Hmm, it means popen2 used french while reactor.spawnProcess used english.
That test clears the environment before running spawnProcess.. maybe we
should let it inherit the complete environment from its parent.

Could you try the attached patch and see if it fixes the problem?

> Multicast is known to be broken in a few situations.  Can you describe
> your network setup.  In particular, do you have a firewall configured, or is
> the machine performing NAT?

I've seen that test fail on machines that don't have any external network
interfaces configured (just the loopback interface). My guess is that it has
to do with the 'MULTICAST' flag, which isn't usually set on lo.

thanks,
 -Brian

-------------- next part --------------
Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.72
diff -u -r1.72 default.py
--- twisted/internet/default.py	21 Apr 2003 15:32:15 -0000	1.72
+++ twisted/internet/default.py	23 Apr 2003 22:55:48 -0000
@@ -149,8 +149,10 @@
 
     # IReactorProcess
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None,
-                     uid=None, gid=None, usePTY = 0):
+    def spawnProcess(self, processProtocol, executable, args=(), env=None,
+                     path=None, uid=None, gid=None, usePTY=0):
+        if env == None:
+            env = os.environ
         p = platform.getType()
         if p == 'posix':
             if usePTY:
Index: twisted/internet/interfaces.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/interfaces.py,v
retrieving revision 1.78
diff -u -r1.78 interfaces.py
--- twisted/internet/interfaces.py	21 Apr 2003 19:53:39 -0000	1.78
+++ twisted/internet/interfaces.py	23 Apr 2003 22:55:49 -0000
@@ -324,7 +324,7 @@
 
 class IReactorProcess(Interface):
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None, uid=None, gid=None, usePTY=0):
+    def spawnProcess(self, processProtocol, executable, args=(), env=None, path=None, uid=None, gid=None, usePTY=0):
         """Spawn a process, with a process protcol.
 
         @param processProtocol: a L{ProcessProtocol} instance
@@ -337,7 +337,7 @@
                      executable's name.
 
         @param env: the environment variables to pass to the processs; a
-                    dictionary of strings.
+                    dictionary of strings. If 'None', use os.environ.
 
         @param path: the path to run the subprocess in - defaults to the
                      current directory.
Index: twisted/test/test_process.py
===================================================================
RCS file: /cvs/Twisted/twisted/test/test_process.py,v
retrieving revision 1.38
diff -u -r1.38 test_process.py
--- twisted/test/test_process.py	14 Apr 2003 06:28:27 -0000	1.38
+++ twisted/test/test_process.py	23 Apr 2003 22:55:49 -0000
@@ -378,7 +378,7 @@
         if not os.path.exists('/bin/ls'): raise RuntimeError("/bin/ls not found")
 
         p = Accumulator()
-        reactor.spawnProcess(p, '/bin/ls', ["/bin/ls", "ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"], {}, "/tmp",
+        reactor.spawnProcess(p, '/bin/ls', ["/bin/ls", "ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"], None, "/tmp",
                              usePTY=self.usePTY)
 
         while not p.closed:
@@ -391,7 +391,7 @@
         else: raise RuntimeError("gzip not found in /bin or /usr/bin")
         s = "there's no place like home!\n" * 3
         p = Accumulator()
-        reactor.spawnProcess(p, cmd, [cmd, "-c"], {}, "/tmp",
+        reactor.spawnProcess(p, cmd, [cmd, "-c"], None, "/tmp",
                              usePTY=self.usePTY)
         p.transport.write(s)
         p.transport.closeStdin()

From pinard at iro.umontreal.ca  Wed Apr 23 17:06:24 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 19:06:24 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `mktap --help SERVER'
Message-ID: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>

Hi, still me.

After having quickly glanced over the manual, I'm reading it a bit more
carefully now, and if comments like this message continue to pop up, you
will observe my progression, or non-progression if I cannot find enough
time :-), without my real will.  Sigh!  OK, let not me be too shy...

Page 21 (2.2.3 mktap and tapconvert) says: "For a given server, `mktap
--help <name>' shows the possible configuration options.".  The following
shell script:

---------------------------------------------------------------------->
#!/bin/bash
for s in coil conch dns ftp im inetd mail manhole news parent pinger ponger \
	 portforward procmon sibling socks telnet toc web words zoot; do
  echo $s =====================================
  mktap --help $s < /dev/null
done
----------------------------------------------------------------------<

seems to show that this is not completely true.

* For coil, dns, ftp, im, mail, pinger, ponger, portforward, socks, telnet,
  toc, web, words and zoot, I got no output at all, so I presume this
  may be interpreted as meaning that these servers use no option.  Yet,
  for all those, a `.tap' file was created, which is probably not what
  one expect from a mere `--help' option.  So maybe the `--help' did not
  work so well after all.

* I also got many DeprecationWarnings, which probably should not be there.
  Let's see:

  + conch yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    setApplication is deprecated, use setServiceCollection instead.
file: /usr/lib/python2.2/site-packages/twisted/scripts/mktap.py; line: 217
----------------------------------------------------------------------<

  + parent yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    You have to pass an authorizer separately from an application now.
file: /usr/lib/python2.2/site-packages/twisted/sibling/parentserv.py; line: 23

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/cred/service.py; line: 84

WARNING: exceptions.DeprecationWarning::
    setApplication is deprecated, use setServiceCollection instead.
file: /usr/lib/python2.2/site-packages/twisted/python/reflect.py; line: 192

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/spread/pb.py; line: 959
----------------------------------------------------------------------<

  + sibling yields:

---------------------------------------------------------------------->
WARNING: exceptions.DeprecationWarning::
    You have to pass an authorizer separately from an application now.
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 68

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/cred/service.py; line: 84

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 80

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/sibling/siblingserv.py; line: 82

WARNING: exceptions.DeprecationWarning::
    Application.authorizer attribute is deprecated, use Service.authorizer instead
file: /usr/lib/python2.2/site-packages/twisted/spread/pb.py; line: 959
----------------------------------------------------------------------<

  and for these three cases as well, a `.tap' file was created.  So maybe
  `--help' does not work as documented for these either.

* manhole did ask for supplementary information, like this:

---------------------------------------------------------------------->
Password: 
Confirm: 
----------------------------------------------------------------------<

  While sorting and cleaning out my various tries, I also found another
  case for `mktap --help manhole' which yielded the following:

---------------------------------------------------------------------->
An error unexpected occurred:
  File "/usr/lib/python2.2/site-packages/twisted/tap/manhole.py", line 45, in opt_password
    self['password'] = util.getPassword(confirm=1)
  File "/usr/lib/python2.2/site-packages/twisted/python/util.py", line 154, in getPassword
    if password[-1] == '\n':
IndexError: string index out of range
----------------------------------------------------------------------<

  yet I do not find back the exact recipe I use for producing this.
  Maybe the traceback will give hints about another problem?  In any case,
  a `.tap' file was created.

* For inetd, I got:

---------------------------------------------------------------------->
An error unexpected occurred:
  File "/usr/lib/python2.2/site-packages/twisted/runner/inetdconf.py", line 90, in parseLine
    self.parseFields(*line.split())
  File "/usr/lib/python2.2/site-packages/twisted/runner/inetdconf.py", line 174, in parseFields
    raise InvalidServicesConfError, 'Invalid port/protocol:' + \
InvalidServicesConfError: Invalid port/protocol:'3322-3325'
----------------------------------------------------------------------<

  At least, no `.tap' was created. :-)

* Both news and procmon provided the expected help output, and created no
  `.tap'.  However, the help was assorted with an error diagnostic,
  which is probably not appropriate for a mere help request.

  + news help output was prefixed with:

---------------------------------------------------------------------->
Usage Error: No newsgroups specified
----------------------------------------------------------------------<

  + procmon help output was suffixed with:

---------------------------------------------------------------------->
Wrong number of arguments.
----------------------------------------------------------------------<

  Even if the errors were expected, they should _ideally_ be presented
  both before, or both after; and both have the `Usage Error:' prefix,
  or both not have it.

All in all, I'm left with the impression that `--help' does not work,
or at least, not as documented in the book.

It might be worth, maybe, adding another unit test which makes sure that
`mktap --help <name>' produces for all servers, some output (on standard
output ideally, not standard error), or no output at all, but surely no
traceback, and with an exit status that would be consistently zero.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From exarkun at intarweb.us  Wed Apr 23 17:35:56 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 23 Apr 2003 19:35:56 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - `mktap --help SERVER'
In-Reply-To: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
References: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030423233556.GB14554@meson.dyndns.org>

On Wed, Apr 23, 2003 at 07:06:24PM -0400, Francois Pinard wrote:
> Hi, still me.

  Hi :)

> 
> After having quickly glanced over the manual, I'm reading it a bit more
> carefully now, and if comments like this message continue to pop up, you
> will observe my progression, or non-progression if I cannot find enough
> time :-), without my real will.  Sigh!  OK, let not me be too shy...
> 
> Page 21 (2.2.3 mktap and tapconvert) says: "For a given server, `mktap
> --help <name>' shows the possible configuration options.".  The following
> shell script:

  After looking at this for more minutes than it probably merited, I feel
that this usage should stay gone (rather than have mktap be fixed to
work as documented).

  It requires --help to be both a flag and a parameter, which usage does not
support directly.  It is also trivially achieved by reversing the order of
the arguments to be "mktap <name> --help".

  Any objections?  If not, I'll check in a doc fix tomorrow.

> [snip]
> 
> All in all, I'm left with the impression that `--help' does not work,
> or at least, not as documented in the book.

  Thank you for pointing this out.

> 
> It might be worth, maybe, adding another unit test which makes sure that
> `mktap --help <name>' produces for all servers, some output (on standard
> output ideally, not standard error), or no output at all, but surely no
> traceback, and with an exit status that would be consistently zero.
> 

  I agree.  There are effectively no unit tests for either mktap or twistd,
and the acceptance tests only test it in well-formed cases, which are nice,
but probably the least important ones to *test*, since that is how the
developers will all be invoked the tools (and so they will get plenty of
testing that way).

  Jp

-- 
A sad spectacle.  If they be inhabited, what a scope for misery 
and folly.  If they be not inhabited, what a waste of space.
                -- Thomas Carlyle, looking at the stars
-- 
 up 34 days, 19:03, 7 users, load average: 0.31, 0.48, 0.53
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030423/b66633e1/attachment.sig>

From pinard at iro.umontreal.ca  Wed Apr 23 17:48:42 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 23 Apr 2003 19:48:42 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <20030423220930.GA14554@meson.dyndns.org>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
	<20030423220930.GA14554@meson.dyndns.org>
Message-ID: <oqfzo8wzad.fsf@alcyon.progiciels-bpi.ca>

[Jp Calderone]

>   Thanks for the report.

OK.  So it was OK to send it. :-)

> > ===============================================================================
> > FAILURE: testStderr (twisted.test.test_process.PosixProcessTestCase)
> > -------------------------------------------------------------------------------
> > Traceback (most recent call last):
> >    File "/var/tmp/Twisted-1.0.4/twisted/test/test_process.py", line 386, in testStderr
> >     self.assertEquals(lsOut, p.errF.getvalue())
> >  FailTest: '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: Aucun fichier ou r\xe9pertoire de ce type\n' != '/bin/ls: ZZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX: No such file or directory\n'

>   Woops.  This is a localization problem.  Maybe it should be an expected
> skip for certain values of LC_LANG?  Or maybe we should just not use ls.

And / or, maybe, the overall testing environment (not the user) should
reset LANG, LANGUAGE, LC_LANG, LC_ALL and LC_MESSAGES before proceeding,
all to non set, or less ideally, set to empty, to `C' or to `POSIX'.

> > ===============================================================================
> > ERROR: testMulticast (twisted.test.test_udp.MulticastTestCase)
> > -------------------------------------------------------------------------------
> > Traceback (most recent call last):
> >    File "/var/tmp/Twisted-1.0.4/twisted/trial/unittest.py", line 188, in runOneTest
> >     method(testCase)
> >    File "/var/tmp/Twisted-1.0.4/twisted/test/test_udp.py", line 186, in testMulticast
> >     self.assertEquals(self.server.packets[0][0], "hello world")
> >  IndexError: list index out of range
> > -------------------------------------------------------------------------------

>   Multicast is known to be broken in a few situations.  Can you describe
> your network setup.  In particular, do you have a firewall configured, or is
> the machine performing NAT?

Wow!  All this from a mere "list index out of range"! :-)

There is indeed a firewall on the machine I use for testing Twisted, at
least on the network card facing the Internet, and masquereding is done
for internal machines forwarded from a second network card.  I would not
think beforehand that localhost as limitations against itself, however,
but am never fully sure, I do not often visit the firewall configuration.
I naively think that I can access localhost:ANYPORT without the firewall
being in the way.

I'm willing to revisit the firewall if you have a suggestion for me about
how to carefully open it, enough for Twisted to work reliably.

I surely could use, for testing Twisted, an internal machine which has
no intrinsic firewall, on some other internal network, but this might
not be where I want to run it in the long run.  Opinions?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From andrew-twisted at puzzling.org  Wed Apr 23 20:17:44 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 24 Apr 2003 12:17:44 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1051110166.3ea6ab16dd249@sferamail.sfera.net>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net>
Message-ID: <20030424021744.GA13306@frobozz.local>

On Wed, Apr 23, 2003 at 05:02:46PM +0200, Stefano Maniero wrote:
> I'm new user for Twisted.
> 
> I've seen an FTP server module in twisted, but I see that the server will be
> re-written. There's some implementation of new FTP module?

Sadly, the new module lives only in my head at the moment.  I'd guess I'll
probably have it in CVS within a month.

Do you just want a simple FTP server that serves files from the filesystem?
If so, you may be able to use the existing code, but beware... it doesn't
have much access control beyond "authenticated" and "not authenticated",
which means that if you have anonymous access enabled, *anyone* use any FTP
command, including STOR, and so on.  If you want to use the existing code,
make sure to run it from a directory whose contents (including the directory
itself!) are read-only, even for the owner.  It *might* be safe to use then,
but I haven't rigorously checked that :)

What do you want to use an FTP server for?   :)

-Andrew.




From andrew-twisted at puzzling.org  Wed Apr 23 20:22:48 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 24 Apr 2003 12:22:48 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - Figures in the manual
In-Reply-To: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>
References: <oqof2wx4u6.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030424022248.GB13306@frobozz.local>

On Wed, Apr 23, 2003 at 05:48:49PM -0400, Francois Pinard wrote:
> Hello, Twisted people.
> 
> In the manual found as `doc/howto/book.ps', some figures are inserted in
> the text with a 90 degree rotation.  Despite this is not a great evil,
> they would appear better if not rotated.  There is one on page 10 (1.1
> High-Level Overview of Twisted); another on page 76 (4.6.2 Deferreds -
> Visual Explanation); another on page 147 (6.3.3 The Diagram), and maybe
> others, I did not try to be exhaustive here.

The rotation is known bug.  Thanks for the reminder, though!

> The figure on page 10 drops off the page, however, and this is more
> serious, as one does not figure out how much of it is missing (I mean,
> without looking at the HTML rendering of that section, which is OK).

This works ok for me locally (using a copy of book.ps I built myself).  I
suspect the hack I use to make dia scale down the images when converting to
.eps is broken with some versions of dia.  I've been meaning to find a nicer
way to do this anyway...

Thanks for bug reports!

-Andrew.




From nafai at twistedmatrix.com  Wed Apr 23 00:56:08 2003
From: nafai at twistedmatrix.com (Travis B. Hartwell)
Date: Wed, 23 Apr 2003 00:56:08 -0600
Subject: [Twisted-Python] Any papers or slides etc available from PyCon?
In-Reply-To: <004701c30920$ef9cf3f0$0401a8c0@razor> (Thomas Weholt's message
 of "Wed, 23 Apr 2003 00:45:55 +0200")
References: <004701c30920$ef9cf3f0$0401a8c0@razor>
Message-ID: <8765p5zoqf.fsf@lutya.travishartwell.net>

Thomas Weholt <2002 at weholt.org> writes:

> Hi,
>  
> I was hoping some of the things at PyCon related to Twisted would be
> available for all of us who didn't have a chance to
> attend. Especially the part about deployment of Twisted websites.
>  
> Any information about this ??
>  
> Thomas

Thomas,

We should probably have those linked somewhere from
twistedmatrix.com.  Hopefully, that can be resolved soon.  Until then,
look in the doc/historic/2003/pycon directory for all of the papers
and most of the slides (I think).  This can be found in the 1.0.4
release or from Twisted CVS.

I was the one who gave the Twisted Web tutorial.  Unfortunately, I
didn't get a paper written.  I do, however, have slides.  They are
with the docs mentioned above or you can look at them at:

http://www.twistedmatrix.com/users/nafai/pycon-paper/

If you have any questions, feel free to ask.  Sorry if the slides are
a little sparse.

Travis



From news at exultants.org  Wed Apr 23 00:41:21 2003
From: news at exultants.org (Van Gale)
Date: Tue, 22 Apr 2003 23:41:21 -0700
Subject: [Twisted-Python] Re: SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <b85cgk$d6$1@main.gmane.org>

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you?

I'm not using Twisted yet, but I expect to use it within a month or two. 
  I'll be porting an asyncore/chat based app developed using python 2.0. 
  I will definitely be adding some 2.2 features at the same time, so, in 
other words, no, I don't need 2.1 support :)

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet, but this application will see some serious usage starting in 
September.  It could potentially see peaks of 90k-200k clients 
connecting in a 24 hour span.  Hopefully I'll be able to report positive 
results to this list during load-tests.  Rewriting outside of 
python/twisted is obviously a no-go at this point, so if load testing 
comes up short we'll just throw more hardware at it!! :O

Side note: we're going to be using DNS round robin + Wackamole + Spread 
toolkit for server load balancing.  I haven't needed to use the python 
spread interface developed by Jeremy, Guido and Tim yet 
(http://www.python.org/other/spread/) but I'm wondering if anyone's 
tried to integrate that into Twisted?  I'd love for spread mailboxes to 
be processed through reactor like any other socket :)





From wilk-ml at flibuste.net  Thu Apr 24 04:30:33 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 24 Apr 2003 12:30:33 +0200
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <87adegnq5y.fsf@flibuste.net>

Itamar Shtull-Trauring <itamar at itamarst.org> writes:

> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

no. But why don't wait somes month and switch directly to python2.3 ?

> 
> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

I did an online scrabble game. But i did'nt use a lot of feature of
twisted, it's a quick port of the cgi version.

-- 
William Dodé - http://flibuste.net



From mvanderheijden at fininfo.fr  Thu Apr 24 09:43:47 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Thu, 24 Apr 2003 17:43:47 +0200
Subject: [Twisted-Python] win32all and spawnProcess
Message-ID: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>

Hello ,

twisted/internet/defaults.py contains the function spawnProcess 

This function doesn't seem to work on windows, and contains the following
comment
   # This is possible, just needs work - talk to itamar if you want this.

Who is Itamar ?

Thanks in advance,

Maarten




  def spawnProcess(self, processProtocol, executable, args=(), env={},
path=None,
                     uid=None, gid=None, usePTY = 0):
        p = platform.getType()
        if p == 'posix':
            if usePTY:
                return process.PTYProcess(self, executable, args, env, path,
processProtocol, uid, gid, usePTY)
            else:
                return process.Process(self, executable, args, env, path,
processProtocol, uid, gid)
     
        #elif p == "win32":
        #    if win32process:
        #        threadable.init(1)
        #        import win32eventreactor
        #        return win32eventreactor.Process(self, processProtocol,
executable, args, env, path)
        #    else:
        #        raise NotImplementedError, "process not available since
win32all is not installed"
        else:
            raise NotImplementedError, "process only available in this
reactor on POSIX"


This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From mvanderheijden at fininfo.fr  Thu Apr 24 09:48:30 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Thu, 24 Apr 2003 17:48:30 +0200
Subject: [Twisted-Python] RE: win32all and spawnProcess
Message-ID: <59720C230F8BC54098777277F5E1068881BFEB@fininfomail.fininfo.grp>

Sorry ,

I did find the reference to Itmar.

Maintainer: U{Itamar Shtull-Trauring<mailto:twisted at itamarst.org>}

Maarten

> -----Message d'origine-----
> De:	VAN DER HEIJDEN Maarten 
> Date:	24 avr. 03 17:44
> À:	'twisted-python at twistedmatrix.com'
> Objet:	win32all and spawnProcess
> 
> Hello ,
> 
> twisted/internet/defaults.py contains the function spawnProcess 
> 
> This function doesn't seem to work on windows, and contains the following
> comment
>    # This is possible, just needs work - talk to itamar if you want this.
> 
> Who is Itamar ?
> 
> Thanks in advance,
> 
> Maarten
> 
> 
> 
> 
>   def spawnProcess(self, processProtocol, executable, args=(), env={},
> path=None,
>                      uid=None, gid=None, usePTY = 0):
>         p = platform.getType()
>         if p == 'posix':
>             if usePTY:
>                 return process.PTYProcess(self, executable, args, env,
> path, processProtocol, uid, gid, usePTY)
>             else:
>                 return process.Process(self, executable, args, env, path,
> processProtocol, uid, gid)
>      
>         #elif p == "win32":
>         #    if win32process:
>         #        threadable.init(1)
>         #        import win32eventreactor
>         #        return win32eventreactor.Process(self, processProtocol,
> executable, args, env, path)
>         #    else:
>         #        raise NotImplementedError, "process not available since
> win32all is not installed"
>         else:
>             raise NotImplementedError, "process only available in this
> reactor on POSIX"


Ce message et toutes les pièces jointes (ci-après le "message") sont établis à l'intention exclusive de ses destinataires et sont confidentiels. Si vous recevez ce message par erreur, merci de le détruire et d'en avertir immédiatement l'expéditeur. Toute utilisation de ce message non conforme à sa destination, modification, diffusion ou toute publication, totale ou partielle, est interdite, sauf autorisation expresse.FININFO (et ses filiales) décline(nt) toute responsabilité au titre de ce message, dans l'hypothèse ou il aurait été modifié, altéré, falsifié ou encore édité ou diffusé sans autorisation.
-----------------------------------------------------
This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From itamar at itamarst.org  Thu Apr 24 09:59:37 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Apr 2003 11:59:37 -0400
Subject: [Twisted-Python] win32all and spawnProcess
In-Reply-To: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881BFB1@fininfomail.fininfo.grp>
Message-ID: <20030424115937.21fef653.itamar@itamarst.org>

On Thu, 24 Apr 2003 17:43:47 +0200
VAN DER HEIJDEN Maarten <mvanderheijden at fininfo.fr> wrote:

> twisted/internet/defaults.py contains the function spawnProcess 
> 
> This function doesn't seem to work on windows, and contains the
> following comment
>    # This is possible, just needs work - talk to itamar if you want
>    # this.

You can use spawnProcess on windows by using the win32 reactor, see the
Choosing Reactors howto for instructions.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From bob at redivi.com  Thu Apr 24 10:59:52 2003
From: bob at redivi.com (Bob Ippolito)
Date: Thu, 24 Apr 2003 12:59:52 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <87adegnq5y.fsf@flibuste.net>
Message-ID: <2A7DE011-7676-11D7-8222-000A95686CD8@redivi.com>

On Thursday, Apr 24, 2003, at 06:30 America/New_York, William Dode 
wrote:

> Itamar Shtull-Trauring <itamar at itamarst.org> writes:
>
>> 1. Do you require Python 2.1 support in Twisted? If so, for what 
>> reason?
>> How problematic would a switch to 2.2 be for you? Please try to answer
>> within a week so we can have some immediate info.
>
> no. But why don't wait somes month and switch directly to python2.3 ?

Well I don't think any of us have found that python 2.3 has significant 
new conveniences that can't be done adequately in 2.2 (i.e., it's 
possible to implement the itertools module in pure python, emulate the 
new dict creation behavior, etc.).  It seems to be mostly new modules, 
bugfixes, and performance enhancements.  Moving from 2.1 to 2.2 does 
have significant new features, though (mostly generators and new style 
classes).

Also, when 2.3 is released, hopefully in a few months, it'll probably 
take the better part of a year /after/ that for python 2.3 to come into 
common use (i.e. ISPs, linux distributions, etc.).

-bob




From tv-nospam.da39a3ee5e6b4b0d3255bfef95601890afd80709 at tv.debian.net  Thu Apr 24 01:42:01 2003
From: tv-nospam.da39a3ee5e6b4b0d3255bfef95601890afd80709 at tv.debian.net (Tommi Virtanen)
Date: Thu, 24 Apr 2003 10:42:01 +0300
Subject: [Twisted-Python] newbie -- trying to do async ldap operations
In-Reply-To: <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304221724530.3672@garp.ucs.indiana.edu> <20030423005154.GA31760@meson.dyndns.org> <Pine.LNX.4.51.0304231652340.4438@garp.ucs.indiana.edu>
Message-ID: <20030424074201.GB2882@lapdog>

On Wed, Apr 23, 2003 at 05:00:52PM -0500, Allan Streib wrote:
> class LDAPQueryTracker:
>     def __init__(self):
>         self._ids = {}
>         self.ldapCon = ldap.initialize('ldap://localhost/')
>         self.ldapCon.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
>         self.ldapCon.simple_bind_s('cn=Manager,dc=iu,dc=edu', 'xxxxxx')

	This blocks right here; maybe it blocks in the ldap.initialize part, too.

	And it's error return mechanism seems to be by way of
	exceptions, so making it async will change the API, too.

> #A simple callback
> def printResults(results):
>     for result in results:
>         print result
> 
> def printFailure(failure):
>     print "LDAP Operation failed"
>     failure.printTraceback()
> 
> 
> qt = LDAPQueryTracker()
> deferedResult = qt.search({'base': 'ou=people,dc=iu,dc=edu',
>                            'filter': '(uid=astreib)'})
> deferedResult.addCallbacks(printResults, printFailure)
> 
> reactor.run()

	Doing the same with Ldaptor (not tested):

class Search(ldapclient.LDAPClient):
    def connectionMade(self):
	d=self.bind()
	d.addCallback(self._handle_bind_success)
	d.addErrback(self.factory.deferred.errback)

    def _handle_bind_success(self, x):
	matchedDN, serverSaslCreds = x
	o=ldapsyntax.LDAPObject(client=self,
				dn='ou=people,dc=iu,dc=edu')
	d=o.search(filterText='(uid=astreib)')
	d.chainDeferred(self.factory.deferred)

class SearchFactory(protocol.ClientFactory):
    protocol = Search

    def __init__(self, deferred):
	self.deferred=deferred

    def clientConnectionFailed(self, connector, reason):
	self.deferred.errback(reason)

d=defer.Deferred()
s=SearchFactory(d)
d.addCallbacks(printResults, printFailure)
d.addBoth(lambda x: reactor.stop())

# service discovery from DNS, no need to know host name of server
dn = distinguishedname.DistinguishedName(stringValue='ou=people,dc=iu,dc=edu')
c = ldapconnector.LDAPConnector(reactor, dn, s)
c.connect()

reactor.run()


-- 
:(){ :|:&};:



From radix at twistedmatrix.com  Thu Apr 24 19:21:36 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 24 Apr 2003 21:21:36 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
Message-ID: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>

I'm going to be hacking on DatabaseAuthorizer soon(er or later).

 * Is anybody using it? The current code is pretty crufty, so
   I'll probably just replace it once the hacking is done, unless
   it's actually being used.
 * Does anyone have a wishlist for it?

Right now I'm thinking of parameterizing what goes into the 
twisted_perspectives schema, so we can easily add 
perspective-class-specific state.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Thu Apr 24 19:52:05 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 24 Apr 2003 20:52:05 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030423055413.3842.qmail@green.zadka.com>
Message-ID: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday, April 23, 2003, at 12:54 AM, Moshe Zadka wrote:

> On Debian woody (stable), Python/GTK+ is available only for Python 2.1.
> This means woody users would not be able to use the GUI clients in 
> Twisted
> (some of which are GTK+-based). In addition, other libraries which 
> specific
> developers might wish to use might be unavailable for Python 2.2. I can
> probably conjure up a list of such libraries.

Python/GTK+ is only necessary for two arguably experimental portions of 
Twisted - im and manhole.  I think that it is acceptable to remove 
support in Debian woody for these, considering that more substantial, 
stable portions of Twisted (e.g. Conch, and twisted.web SSL) don't 
work, since they require libraries that are missing on woody.  Future 
GTK+ work is going to be using GTK2 anyway, considering that it is 
vastly more stable for the kinds of things we want to do, most of which 
involve displaying large, scrolling blocks of text.

PyQT is technically in Debian, but the version in Woody isn't very 
useful, and I haven't heard from anyone using it with Twisted.

There are no third-party programs that support Debian woody which 
require GTK to be working with Twisted.

As to other libraries - my primary concern was with database drivers 
which may have been incompatible with Python-2.2.  However, it appears 
that all DB-API compatible drivers that come with Woody have both 
python-2.1 and python-2.2 versions.

I've just spent the last few weeks working without the 2.1-support 
constraint, and I can see why all the Twisted developers have been 
clamoring for 2.2 :-).  While I have some concern that moving along 
with rearrangements of Python's basic semantics encourages the 
development of useless, whiz-bang infrastructure, the fact is that the 
new object model is substantially more amenable to necessary features 
like those implemented in twisted.python.components and 
twisted.python.reflect.

The results of this survey appear to indicate that most Twisted users 
are not using Python-2.1, and those that are plan to stop in the near 
future.  Also, as far as I can tell, nobody on the development team 
uses Python 2.1 any more, and so test failures related to 2.1 
incompatibilities are always caught after the fact.

I think it would improve our development speed and the general attitude 
of the team, so I propose we cut over to 2.2 immediately.  For the 
reasons I gave above, I don't think the GTK situation is important 
enough to prevent this.  If anyone else would like to give reasons for 
not going ahead with this, please speak now or forever hold your peace 
:)

(This does not mean "everybody check in 2.2-only code".  It means "get 
ready to check in 2.2-only code".  I will hopefully announce open 
season on 2.2 features later this week.)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qJTMvVGR4uSOE2wRAifhAJ4v2MGaU3lYFQgF2ft+yMFHxpBw2ACglh+u
60N1LM62g2voaw2ygpT2P9Q=
=wsDm
-----END PGP SIGNATURE-----




From cce at clarkevans.com  Thu Apr 24 20:12:28 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 25 Apr 2003 02:12:28 +0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030425021228.GA55361@doublegemini.com>

On Tue, Apr 22, 2003 at 03:48:27PM -0400, Itamar Shtull-Trauring wrote:
| 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
| How problematic would a switch to 2.2 be for you? Please try to answer
| within a week so we can have some immediate info.

I use 2.2 in my production environment.  However...

Python 2.1 was the "blessed" version of Python that Guido had
said would be supported for a _long_ time out (like 1.5 was).
It is also, as Moshe points out, the Debian standard and I know
many debian people who won't be upgrading.    This may play
a role in 'hosted environments' where people would like to 
deploy Twisted, but really can't reinstall Python. 

Also, with etrepum's recent patches to twisted.python.compat, 
much Twisted can still use the iterator protocol (compatible 
with 2.1).   Re-writing generators as 2.1 iterators is tedious,
but quite straight forward.

I can see some places where the use of generators is too much of
a goodness to pass up.   Why not mark those modules explicitly,
and make them 2.2 only?  For example, Woven could probably really
use 2.2 features.   In this way those users who insist on 2.1 can
use the bulk of (but perhaps not all of) Twisted, in such a way
that we don't compromise future development.

Also, someone posted that it didn't take too many changes to 
make Twisted 2.0 compatible.  Perhaps we should consider 
committing those changes.   Nested scopes are nice, especially
in application code, but they certainly arn't essential 
to library development.

Best,

Clark



From itamar at itamarst.org  Thu Apr 24 20:07:51 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Apr 2003 22:07:51 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425021228.GA55361@doublegemini.com>
References: <20030422154827.17021602.itamar@itamarst.org>
	<20030425021228.GA55361@doublegemini.com>
Message-ID: <20030424220751.6316db31.itamar@itamarst.org>

On Fri, 25 Apr 2003 02:12:28 +0000
"Clark C. Evans" <cce at clarkevans.com> wrote:

> Python 2.1 was the "blessed" version of Python that Guido had
> said would be supported for a _long_ time out (like 1.5 was).

No, that was 2.2.

Debian Woody has Python 2.2 included.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Thu Apr 24 20:52:32 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Fri, 25 Apr 2003 02:52:32 +0000
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030424220751.6316db31.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425021228.GA55361@doublegemini.com> <20030424220751.6316db31.itamar@itamarst.org>
Message-ID: <20030425025232.GA56114@doublegemini.com>

On Thu, Apr 24, 2003 at 10:07:51PM -0400, Itamar Shtull-Trauring wrote:
| > Python 2.1 was the "blessed" version of Python that Guido had
| > said would be supported for a _long_ time out (like 1.5 was).
| 
| No, that was 2.2.
| Debian Woody has Python 2.2 included.

Oh, you are right. Python-In-A-Tie [1] *is* 2.2

[1] http://www.python-in-business.org/sigs/PIT/



From peter at engcorp.com  Thu Apr 24 20:49:17 2003
From: peter at engcorp.com (Peter Hansen)
Date: Thu, 24 Apr 2003 22:49:17 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org> <20030425021228.GA55361@doublegemini.com>
Message-ID: <3EA8A22D.B2F4B3B5@engcorp.com>

"Clark C. Evans" wrote:
> 
> Also, someone posted that it didn't take too many changes to
> make Twisted 2.0 compatible.  Perhaps we should consider
> committing those changes.   

'Twas I who said something like that, but I have to caution
that it was definitely not a case of making all of Twisted
run under 2.0.  All I did, as a spike, was to repeatedly run 
our little test program, which imported about three things from
twisted.internet, and patch -- in the most hideously ugly but
direct manner that I could -- anything which complained.  

I think there were about three complaints, two of which were
nested scope warnings.  To fix these, I simply removed the
"from __future__" statement and ran again.  I think the other
thing needed a stub/mock of some kind, with no functionality.
I supposed the code involved is either not being invoked (but
was giving syntax errors or warnings), or is managing to function 
normally or near normally in spite of being invoked without nested 
scopes working.  

There are probably a *lot* of latent problems, but for our purposes 
it seems to be adequate.  There's no way I'd translate this into 
a suggestion any of these changes should be checked in though! :-)

-Peter



From mvanderheijden at fininfo.fr  Fri Apr 25 00:54:03 2003
From: mvanderheijden at fininfo.fr (VAN DER HEIJDEN Maarten)
Date: Fri, 25 Apr 2003 08:54:03 +0200
Subject: [Twisted-Python] twisted web, documentation
Message-ID: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>

Hello,


Being new to twisted, I didn't find in the documentation an example  (in DOM
Template, widgets, woven or resource templates ), for implementing a form.

Someone has a link?

Maarten



This message and any attachments (the "message") is intended
solely for the addressees and is confidential. If you receive this 
message in error, please delete it and immediately notify the 
sender. Any use not in accord with its purpose, any dissemination 
or disclosure, either whole or partial, is prohibited except formal 
approval. Neither FININFO (nor any of its subsidiaries or affiliates) 
shall be liable for the message if modified, altered, falsified, edited 
or diffused without authorization. 




From andrew-twisted at puzzling.org  Fri Apr 25 01:16:25 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 25 Apr 2003 17:16:25 +1000
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
Message-ID: <20030425071624.GE15695@frobozz.local>

On Fri, Apr 25, 2003 at 08:54:03AM +0200, VAN DER HEIJDEN Maarten wrote:
> Hello,
> 
> 
> Being new to twisted, I didn't find in the documentation an example  (in DOM
> Template, widgets, woven or resource templates ), for implementing a form.
> 
> Someone has a link?

There will be a whole bunch of new, up-to-date docs on Woven in CVS within a
week.  I believe this includes a general tutorial and stuff about using
forms.

If you can, wait until we've got those docs ready.  Otherwise, you could try
asking for advice on #twisted on irc.freenode.net, which is currently the
best place for Woven docs (until the new docs get checked in...)

-Andrew.




From nico at tekNico.net  Fri Apr 25 06:42:15 2003
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 25 Apr 2003 14:42:15 +0200
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
References: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
Message-ID: <3EA92D27.4080604@tekNico.net>

> I think it would improve our development speed and the general attitude 
> of the team, so I propose we cut over to 2.2 immediately.

What about the Jython situation?


-- 
"If you really feel that being a programmer makes you part of an elite and
you want to keep others out of that elite, I pity you."  Guido Van Rossum

Nicola Larosa - nico at tekNico.net





From fog at initd.org  Fri Apr 25 08:05:22 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 25 Apr 2003 16:05:22 +0200
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <1051279521.1053.15.camel@momo.initd.org>

Il ven, 2003-04-25 alle 03:21, Christopher Armstrong ha scritto:
> I'm going to be hacking on DatabaseAuthorizer soon(er or later).
> 
>  * Is anybody using it? The current code is pretty crufty, so
>    I'll probably just replace it once the hacking is done, unless
>    it's actually being used.

no. i wrote my own authorizer because DatabaseAuthorizer was not up to
the task.

>  * Does anyone have a wishlist for it?

put service and perspective names in database and allow for the client
to request for service/perspecitve in his keyring (derived from db).
that would be nice (and is what my authorizer does, btw.)

ciao,

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Having paid our respects to the dead (Taligent), nearly dead
   (Objective-C) and legendary (Symbolics), let's start digging
   into the features that make Python a great language for mix-in
   programming.                                      -- Chuck Esterbrook
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030425/98c3f8dc/attachment.sig>

From waterbug at beeblebrox.gsfc.nasa.gov  Fri Apr 25 11:26:15 2003
From: waterbug at beeblebrox.gsfc.nasa.gov (Stephen Waterbury)
Date: Fri, 25 Apr 2003 10:26:15 -0700
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
 <1051279521.1053.15.camel@momo.initd.org>
Message-ID: <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>

Federico Di Gregorio wrote:
> 
> Il ven, 2003-04-25 alle 03:21, Christopher Armstrong ha scritto:
> > I'm going to be hacking on DatabaseAuthorizer soon(er or later).
> >
> >  * Is anybody using it? The current code is pretty crufty, so
> >    I'll probably just replace it once the hacking is done, unless
> >    it's actually being used.
> 
> no. i wrote my own authorizer because DatabaseAuthorizer was not up to
> the task.
> 
> >  * Does anyone have a wishlist for it?
> 
> put service and perspective names in database and allow for the client
> to request for service/perspecitve in his keyring (derived from db).
> that would be nice (and is what my authorizer does, btw.)

That was my thinking, too.  

Any chance you would be willing to share your authorizer?  
Some of us actually prefer not to reinvent wheels ... :^)

- Steve.



From fog at initd.org  Fri Apr 25 08:48:22 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 25 Apr 2003 16:48:22 +0200
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
	 <1051279521.1053.15.camel@momo.initd.org>
	 <3EA96FB7.A442EECF@beeblebrox.gsfc.nasa.gov>
Message-ID: <1051282102.1053.50.camel@momo.initd.org>

Il ven, 2003-04-25 alle 19:26, Stephen Waterbury ha scritto:

> That was my thinking, too.  
> 
> Any chance you would be willing to share your authorizer?  
> Some of us actually prefer not to reinvent wheels ... :^)

all my code (and i mean *all*, even the one i write for customers) is
available from cvs.initd.org under GPL. you may be interested in the
following files:

http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/server/wilmad
http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/wilma/server/auth.py
http://cvs.initd.org/cgi-bin/viewcvs.cgi/wilma-prototype-2/wilma/server/service.py

they implement a db authorizer with just one service ("wilma") and some
perspectives, taken from the keyring (for example the "admin"
perspective is available only to people that have the "admin" role in
DB). i planned a better version (the code in wilma is very specific for
that project) but i have almost no time nowdays.. too much work.

also, for wilma we are moving to a much more fine-grained authorization
policy that does not involve perspectives, but that's completely OT
here.

one more: wabba is a generic "transaction manager" that takes a
completely different approach to dababase access than other
object-relational mappers (i talked about it with itamar on irc someweek
ago). it is still very alpha and we are reworking it a lot but there
will be an "official" release around june. it integrates well with
twisted.

hope this helps,
federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  99.99999999999999999999% still isn't 100% but sometimes suffice. -- Me
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030425/07173054/attachment.sig>

From uwe at oss4u.com  Fri Apr 25 10:33:29 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Fri, 25 Apr 2003 09:33:29 -0700
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <200304250933.29642.uwe@oss4u.com>

On Thursday 24 April 2003 06:21 pm, Christopher Armstrong wrote:
> I'm going to be hacking on DatabaseAuthorizer soon(er or later).
>
>  * Is anybody using it? The current code is pretty crufty, so
>    I'll probably just replace it once the hacking is done, unless
>    it's actually being used.
>  * Does anyone have a wishlist for it?

Yes and yes. Don't hardcode table and fieldnames. 
Maybe you want to produce more detailed errors why the auth failed. I.e. when 
you have several services and a user isn't subscribed to one of them you'll 
get an "unknown user" error,  I think you should get a different error saying 
something about "service subscribtion" if the user is subscribed to other 
services on the same server.


	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From wilk-ml at flibuste.net  Fri Apr 25 12:46:51 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 25 Apr 2003 20:46:51 +0200
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
Message-ID: <87he8ml8is.fsf@flibuste.net>

VAN DER HEIJDEN Maarten <mvanderheijden at fininfo.fr> writes:

> Hello,
> 
> 
> Being new to twisted, I didn't find in the documentation an example  (in DOM
> Template, widgets, woven or resource templates ), for implementing a form.
> 
> Someone has a link?

this is an extended ReportRequest with form :

import twisted.web.resource
import cgi
from twisted.protocols import http
from twisted.web import resource,error
class ReportRequest(twisted.web.resource.Resource):
    """ ReportRequest with forms and cookies """
    def isLeaf(self):
        return true
    def render(self, request):
        user = request.getUser()
        password = request.getPassword()

        if not user:
            request.setResponseCode(401, 'Authentication needed')
            request.setHeader('WWW-authenticate', 'Basic realm="enter new user and password"')
            errpage = error.ErrorPage(http.UNAUTHORIZED,"Unauthorized","401 Authentication required")
            return errpage.render(request)

        session = request.getSession()

        try:
            if request.args["text"]!="":
                session.text = request.args["text"]
                session.touch()
        except:
            pass # no text arg
        session_text = getattr(session,"text","init")        
        # create and increment cookie counter,
        try:
            counter = int(request.getCookie("counter"))
            counter += 1
        except:
            counter = 0
        request.addCookie("counter",counter)
            
        cookies = request.received_cookies
        args = request.args
        path = request.path
        _, host, port = request.getHost()
        url = request.prePathURL()
        uri = request.uri
        secure = (request.isSecure() and "securely") or "insecurely"
        return ("""\
<HTML>
    <HEAD><TITLE>Welcome To Twisted Python Reporting</title></head>

    <BODY><H1>Welcome To Twisted Python Reporting</H1>
    <UL>
    <LI>User : %(user)s
    <LI>Password : %(password)s
    <LI>The path to me is %(path)s
    <LI>The host I'm on is %(host)s
    <LI>The port I'm on is %(port)s
    <LI>I was accessed %(secure)s
    <LI>A URL to me is %(url)s
    <LI>My URI to me is %(uri)s
    <LI>Session text : %(session_text)s
    <LI>Cookies (incremented in each reload): <pre>%(cookies)s</pre>
    <LI>Form args : <pre>%(args)s</pre>
    </UL>
    <hr>
    <h2>Testing args</h2>
    Test args : <a href='?a=1&a=2&a=3&b=4'>?a=1&amp;a=3&amp;a=3&amp;b=4</a><br>
    Test forms with method=post enctype='multipart/form-data'
    <form method=post enctype='multipart/form-data'>
    <table>
    <tr><td> text : </td><td> <input name=text type=text> </td></tr>
    <tr><td> file : </td><td> <input name=file type=file> </td></tr>
    <tr><td> select (multiple) : </td><td>
    <select name=select multiple><option>one</option><option>two</option><option>three</option></select>
    </td></tr></table>
    <input type=submit></form>
    </body>
</html>""" % vars())




-- 
William Dodé - http://flibuste.net



From peter at engcorp.com  Fri Apr 25 13:16:22 2003
From: peter at engcorp.com (Peter Hansen)
Date: Fri, 25 Apr 2003 15:16:22 -0400
Subject: [Twisted-Python] twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net>
Message-ID: <3EA98986.18D66A1E@engcorp.com>

William Dode wrote:
> 
> class ReportRequest(twisted.web.resource.Resource):
>     """ ReportRequest with forms and cookies """
>     def render(self, request):
>         session = request.getSession()
> 
>         try:
>             if request.args["text"]!="":
>                 session.text = request.args["text"]

Please correct me if I'm wrong, or out of date, but doesn't request.args
contain *lists* of things, always, and not the strings directly?  That
was what I observed on 1.0.3 anyway, I thought.

If that's so, then I think the above test will always pass, as 
request.args['text'] would contain [''] or [] or something, but
never just "".


-Peter



From itamar at itamarst.org  Fri Apr 25 10:37:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Apr 2003 12:37:01 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
Message-ID: <20030425123701.66f14b2a.itamar@itamarst.org>

On Thu, 24 Apr 2003 21:21:36 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> I'm going to be hacking on DatabaseAuthorizer soon(er or later).

Glyph and I just came up with a new shiny non-broken design for cred, so
you may want to talk to us first.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From dp at twistedmatrix.com  Fri Apr 25 13:42:34 2003
From: dp at twistedmatrix.com (Donovan Preston)
Date: Fri, 25 Apr 2003 12:42:34 -0700
Subject: [Twisted-Python] twisted web, documentation
In-Reply-To: <3EA98986.18D66A1E@engcorp.com>
Message-ID: <0F6F65B9-7756-11D7-9195-000393B3EC2C@twistedmatrix.com>

On Friday, April 25, 2003, at 12:16 PM, Peter Hansen wrote:

> William Dode wrote:
>>
>> class ReportRequest(twisted.web.resource.Resource):
>>     """ ReportRequest with forms and cookies """
>>     def render(self, request):
>>         session = request.getSession()
>>
>>         try:
>>             if request.args["text"]!="":
>>                 session.text = request.args["text"]
>
> Please correct me if I'm wrong, or out of date, but doesn't 
> request.args
> contain *lists* of things, always, and not the strings directly?  That
> was what I observed on 1.0.3 anyway, I thought.
>
> If that's so, then I think the above test will always pass, as
> request.args['text'] would contain [''] or [] or something, but
> never just "".

That is correct. request.args always contains lists.

Donovan




From skin_pup-twisted at damnable.happypoo.com  Fri Apr 25 09:37:55 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Fri, 25 Apr 2003 11:37:55 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <20030425153755.GD37090@shitbomb.com>

Itamar Shtull-Trauring [itamar at itamarst.org] wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

I have 2.2 everywhere I have twisted.  :)

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

I have twisted running with ldaptor on over 200 Solaris systems, pulling
configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
and a few others things.  I do keep my own cvs of both twisted and ldaptor 
due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
They are highly out of date but work for me now.  

> Thanks.

No thank you all love twisted. 

Jeremy 



From itamar at itamarst.org  Fri Apr 25 15:36:54 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 25 Apr 2003 17:36:54 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <3EA92D27.4080604@tekNico.net>
References: <84134934-76C0-11D7-B5A1-000393C9700E@twistedmatrix.com>
	<3EA92D27.4080604@tekNico.net>
Message-ID: <20030425173654.3ada6313.itamar@itamarst.org>

On Fri, 25 Apr 2003 14:42:15 +0200
Nicola Larosa <nico at tekNico.net> wrote:

> What about the Jython situation?

Do you use jython with twisted? AFAIK no one does. And it's close to
being useless anyway.

Hopefully by the time 1.4 is widespread and we can write a decent nio
reactor (the current java reactor is more proof-of-concept than useful
implementation), Jython will support 2.2.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From glyph at twistedmatrix.com  Fri Apr 25 16:45:56 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 25 Apr 2003 17:45:56 -0500
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425173654.3ada6313.itamar@itamarst.org>
Message-ID: <AD771888-776F-11D7-B63C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday, April 25, 2003, at 04:36 PM, Itamar Shtull-Trauring wrote:

> Do you use jython with twisted? AFAIK no one does. And it's close to
> being useless anyway.

Currently you can't even run the test suite with Jython, to say nothing 
of the tests actually passing.  There would be a lot of work involved 
in getting Twisted to run on Jython-2.1 as-is, and 2.2isms are not a 
part of that.

At some point I'll try to get Jython's CVS running with current 
twisted.  Maybe we can encourage them to do a release if Twisted works 
on CVS and not on the released versions :)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qbqnvVGR4uSOE2wRAsMoAJ4kQFuW8PNtKhONV1QJDEMrDAHfIwCgtcrB
+tRpEggsscTpslBser3QWQY=
=NuES
-----END PGP SIGNATURE-----




From arashi1 at pd.jaring.my  Fri Apr 25 23:26:37 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Sat, 26 Apr 2003 13:26:37 +0800
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030422154827.17021602.itamar@itamarst.org>
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <200304261326.37251.arashi1@pd.jaring.my>

On Wednesday 23 April 2003 03:48, Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

No requirement for 2.1 at all - using 2.2 as normal (freebsd 4.8 comes with 
2.2.2 out of the box) in fact, looking forward to 2.3. Lots of goodies there. 
In fact I only have the 2.1 that comes with binary zope.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet still plumbing the twisted depths.



From m at moshez.org  Sat Apr 26 01:17:08 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 Apr 2003 07:17:08 -0000
Subject: [Twisted-Python] Version support: a note
Message-ID: <20030426071708.4683.qmail@green.zadka.com>

If we do decide to drop support for a widely-deployed version of Python,
it is my firm belief that we should make setup.py fail loudly when used
with those versions. If nothing else, it will make sure the Debian build
will never work until I actually remove the build of non-supported versions.
Which reminds me: please don't drop 2.1 support until sarge's freeze (not
release -- but post-freeze, I'll be assured of my new uploads not getting
into sarge, and I'd really like sarge's Twisted to support 2.1)

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From lordvan at lordvan.com  Sat Apr 26 02:26:42 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Sat, 26 Apr 2003 10:26:42 +0200 (CEST)
Subject: [Twisted-Python] twisted.web.resource.Resource.getChild*
Message-ID: <65512.62.47.64.183.1051345602.squirrel@mail-at.net>

hi!

i just had a endless recursion traceback of getChildWithDefault and
wondered why e.g. getChildWithDefault doesn't return error.NoResource()
when the child doesn't exist (same for getChildForRequest i think)

if there's a reason please enlighten me :)

greetings, LordVan


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From glyph at twistedmatrix.com  Sat Apr 26 03:09:45 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sat, 26 Apr 2003 04:09:45 -0500
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <20030426071708.4683.qmail@green.zadka.com>
Message-ID: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday, April 26, 2003, at 02:17 AM, Moshe Zadka wrote:

> If we do decide to drop support for a widely-deployed version of 
> Python,
> it is my firm belief that we should make setup.py fail loudly when used
> with those versions.

That sounds like a good idea.

> I'd really like sarge's Twisted to support 2.1

Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
much every package compiled for it?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+qkzcvVGR4uSOE2wRAlyKAJ0ST932+rW/0aUaCBMTZoGRALEuvgCdF6Ni
r2UIPo8TUPN25fHArwei+hI=
=4UVg
-----END PGP SIGNATURE-----




From smaniero at sfera.net  Sat Apr 26 03:30:44 2003
From: smaniero at sfera.net (Stefano Maniero)
Date: Sat, 26 Apr 2003 11:30:44 +0200
Subject: [Twisted-Python] FTP Server
In-Reply-To: <20030424021744.GA13306@frobozz.local>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net> <20030424021744.GA13306@frobozz.local>
Message-ID: <1051349444.3eaa51c438eeb@sferamail.sfera.net>

I need store files upoloaded via FTP into mysql database, and twisted seems very
powerful framowork for this...

There's a valid alternative?

Quoting Andrew Bennetts <andrew-twisted at puzzling.org>:

> On Wed, Apr 23, 2003 at 05:02:46PM +0200, Stefano Maniero wrote:
> > I'm new user for Twisted.
> > 
> > I've seen an FTP server module in twisted, but I see that the server will
> be
> > re-written. There's some implementation of new FTP module?
> 
> Sadly, the new module lives only in my head at the moment.  I'd guess I'll
> probably have it in CVS within a month.
> 
> Do you just want a simple FTP server that serves files from the filesystem?
> If so, you may be able to use the existing code, but beware... it doesn't
> have much access control beyond "authenticated" and "not authenticated",
> which means that if you have anonymous access enabled, *anyone* use any FTP
> command, including STOR, and so on.  If you want to use the existing code,
> make sure to run it from a directory whose contents (including the directory
> itself!) are read-only, even for the owner.  It *might* be safe to use then,
> but I haven't rigorously checked that :)
> 
> What do you want to use an FTP server for?   :)
> 
> -Andrew.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 







From fog at initd.org  Sat Apr 26 03:30:27 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 11:30:27 +0200
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
References: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
Message-ID: <1051349426.13205.3.camel@momo.initd.org>

Il sab, 2003-04-26 alle 11:09, Glyph Lefkowitz ha scritto:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On Saturday, April 26, 2003, at 02:17 AM, Moshe Zadka wrote:
> 
> > If we do decide to drop support for a widely-deployed version of 
> > Python,
> > it is my firm belief that we should make setup.py fail loudly when used
> > with those versions.
> 
> That sounds like a good idea.
> 
> > I'd really like sarge's Twisted to support 2.1
> 
> Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
> much every package compiled for it?

yes. default python for sarge is 2.2 (and there even was a discussion
about switching to 2.3 if a stable release happens before freeze [i
don't think it'll happen :)])

(the only reason for 2.1 in sarge is zope.)

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Gli avvoltoi cinesi si nutrono di arte, ma possono anche mangiare
   i `domani'.                                        -- Haruki Murakami
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030426/a2cd2474/attachment.sig>

From andrew-twisted at puzzling.org  Sat Apr 26 03:43:13 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sat, 26 Apr 2003 19:43:13 +1000
Subject: [Twisted-Python] FTP Server
In-Reply-To: <1051349444.3eaa51c438eeb@sferamail.sfera.net>
References: <1051110166.3ea6ab16dd249@sferamail.sfera.net> <20030424021744.GA13306@frobozz.local> <1051349444.3eaa51c438eeb@sferamail.sfera.net>
Message-ID: <20030426094313.GB26530@frobozz.local>

On Sat, Apr 26, 2003 at 11:30:44AM +0200, Stefano Maniero wrote:
> I need store files upoloaded via FTP into mysql database, and twisted seems very
> powerful framowork for this...
> 
> There's a valid alternative?

Not in Twisted -- yet.  This sort of thing is exactly why I want to do the
FTP server rewrite.

Thanks for the feedback!

-Andrew.




From m at moshez.org  Sat Apr 26 04:03:37 2003
From: m at moshez.org (Moshe Zadka)
Date: 26 Apr 2003 10:03:37 -0000
Subject: [Twisted-Python] Version support: a note
In-Reply-To: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
References: <D2A24186-77C6-11D7-B63C-000393C9700E@twistedmatrix.com>
Message-ID: <20030426100337.11114.qmail@green.zadka.com>

On Sat, 26 Apr 2003, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
 
> > I'd really like sarge's Twisted to support 2.1
> 
> Why?  Doesn't sarge come with 2.2 as the default 'python', and pretty 
> much every package compiled for it?

Smoother upgrade path from woody.

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From ecn at metaslash.com  Sat Apr 26 07:55:46 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 09:55:46 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
Message-ID: <20030426135546.GA24250@localhost.localdomain>

RedHat 9.0 on intel
Twisted 1.0.4

In twisted.enterprise.adbapi we find this method of ConnectionPool:

    def _runQuery(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.execute, args, kw)
            result = curs.fetchall()
            curs.close()
        finally:
            conn.rollback()
        return result

I do not understand the logic of always running a rollback even if the
query is successful.  I would, instead, expect this:

    def _runQuery(self, args, kw):
        conn = self.connect()
        curs = conn.cursor()
        try:
            apply(curs.execute, args, kw)
            result = curs.fetchall()
            curs.close()
        except:
            conn.rollback()
	    raise
        return result

And, indeed, this is _exactly_ what we see in adbapi._runOperation,
which is the method following _runQuery.

-Eric

PS. This buglet brought to you by MySQL which does not support rollback(), 
    and tells you with an exception.



From andrew-twisted at puzzling.org  Sat Apr 26 08:07:22 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 27 Apr 2003 00:07:22 +1000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <20030426140722.GE26530@frobozz.local>

On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
> RedHat 9.0 on intel
> Twisted 1.0.4
> 
> In twisted.enterprise.adbapi we find this method of ConnectionPool:

[snip -- runQuery always does a rollback]

The theory here, I believe is that queries are meant to have no side-effects
on the DB, so the rollback is done to guarantee this.  If you *do* want to
change the state of the DB, use runOperation.

> PS. This buglet brought to you by MySQL which does not support rollback(), 
>     and tells you with an exception.

Then the database module you are using doesn't adhere to DB-API 2.0[1], which
adbapi requires.

-Andrew.

[1]  http://www.python.org/topics/database/DatabaseAPI-2.0.html




From ecn at metaslash.com  Sat Apr 26 10:12:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 12:12:08 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426140722.GE26530@frobozz.local>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local>
Message-ID: <20030426161208.GA25510@localhost.localdomain>

Sure, that's a theory.  And, yay, verily, MySQL isn't known for it's
strict adherance to standards.  However:

   http://www.python.org/topics/database/DatabaseAPI-2.0.html#connection

Says

 rollback()
    This method is optional since not all databases provide 
    transaction support.[3]

And footnote 3 sayeth:

    3 If the database does not support the functionality required by
    the method, the interface should throw an exception in case the
    method is used.

    The preferred approach is to not implement the method and thus
    have Python generate an AttributeError in case the method is
    requested. This allows the programmer to check for database
    capabilities using the standard hasattr() function.

    For some dynamically configured interfaces it may not be
    appropriate to require dynamically making the method
    available. These interfaces should then raise a NotSupportedError
    to indicate the non-ability to perform the roll back when the
    method is invoked.

Further, a rollback trashes a whole transaction.  The query could be
part of a larger transaction which includes update operations.
Granted, this is just silly in the async thread-pool, but that's why I
found it rather surprising.

-Eric

On Sun, Apr 27, 2003 at 12:07:22AM +1000, Andrew Bennetts wrote:
> On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
> > RedHat 9.0 on intel
> > Twisted 1.0.4
> > 
> > In twisted.enterprise.adbapi we find this method of ConnectionPool:
> 
> [snip -- runQuery always does a rollback]
> 
> The theory here, I believe is that queries are meant to have no side-effects
> on the DB, so the rollback is done to guarantee this.  If you *do* want to
> change the state of the DB, use runOperation.
> 
> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> Then the database module you are using doesn't adhere to DB-API 2.0[1], which
> adbapi requires.
> 
> -Andrew.
> 
> [1]  http://www.python.org/topics/database/DatabaseAPI-2.0.html
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From itamar at itamarst.org  Sat Apr 26 10:20:16 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 26 Apr 2003 12:20:16 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does
 rollback()
In-Reply-To: <20030426161208.GA25510@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
	<20030426140722.GE26530@frobozz.local>
	<20030426161208.GA25510@localhost.localdomain>
Message-ID: <20030426122016.1a357aa3.itamar@itamarst.org>

On Sat, 26 Apr 2003 12:12:08 -0400
"Eric C. Newton" <ecn at metaslash.com> wrote:

> Further, a rollback trashes a whole transaction.  The query could be
> part of a larger transaction which includes update operations.
> Granted, this is just silly in the async thread-pool, but that's why I
> found it rather surprising.

For long running transactions you want to do the runTransaction or
whatever it's called method - the one where you pass a callable and it
gets run with a adbapi.Transaction object in a thread, thus allowing you
to do a series of database queries one after the other in a natural,
blocking way.

But, looks like we do need to deal with broken rollback support in
mysql. Is there any flag we can check, or must we trap AttributeError
and whatever mysql throws on rollback() calls?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From cce at clarkevans.com  Sat Apr 26 10:35:38 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 26 Apr 2003 16:35:38 +0000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <20030426163538.GA61437@doublegemini.com>

On Sat, Apr 26, 2003 at 09:55:46AM -0400, Eric C. Newton wrote:
| I do not understand the logic of always running a rollback even if the
| query is successful.  I would, instead, expect this:

One of the ACID properties is to provide for a consistent read,
that is, if N queries are executed in a row, and a change happens
between the two reads, the 2nd query sees things without the change.
If you don't rollback, then the 'read transaction' will still 
reflect results at the time the first query was executed.

Therefore, a rollback is needed so that subsequent queries
reflect new changes to the database and is not 'stale'.

Best,

Clark



From justin at gnubia.net  Sat Apr 26 10:23:14 2003
From: justin at gnubia.net (Justin Ryan)
Date: 26 Apr 2003 11:23:14 -0500
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <200304250933.29642.uwe@oss4u.com>
References: <20030425012136.GC4827@toshi.anaprd01.md.comcast.net>
	 <200304250933.29642.uwe@oss4u.com>
Message-ID: <1051374194.12540.25.camel@qutang.gnubian.org>

> Maybe you want to produce more detailed errors why the auth failed. I.e. when 
> you have several services and a user isn't subscribed to one of them you'll 
> get an "unknown user" error,  I think you should get a different error saying 
> something about "service subscribtion" if the user is subscribed to other 
> services on the same server.

This is an arguable point..

Consider, from a security standpoint, that an attacker is trying to
brute-force your server.  'service subscription' error says 'you have
correctly guessed a username, but are attempting to access the wrong
service'.  Having a valid username is much closer to a username/password
pair than not having a valid username.. ;p

Perhaps it should be configurable to behave both ways.

-Justin




From justin at gnubia.net  Sat Apr 26 10:47:31 2003
From: justin at gnubia.net (Justin Ryan)
Date: 26 Apr 2003 11:47:31 -0500
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426140722.GE26530@frobozz.local>
References: <20030426135546.GA24250@localhost.localdomain>
	 <20030426140722.GE26530@frobozz.local>
Message-ID: <1051374310.12540.29.camel@qutang.gnubian.org>

> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> Then the database module you are using doesn't adhere to DB-API 2.0[1], which
> adbapi requires.

What type of database are you accessing?  Would transactions be
helpful?  MySQL has transaction-safe tables, you simply have to be
explicit when creating them (and all of your tables must be transaction
safe to avoid 'partial' rollbacks..).

-Justin




From z3p at twistedmatrix.com  Sat Apr 26 10:55:05 2003
From: z3p at twistedmatrix.com (Paul Swartz)
Date: Sat, 26 Apr 2003 12:55:05 -0400
Subject: [Twisted-Python] enterprise.dbcred.DatabaseAuthorizer
In-Reply-To: <1051374194.12540.25.camel@qutang.gnubian.org>
References: <200304250933.29642.uwe@oss4u.com>
Message-ID: <3EAA81A9.30144.292C572@localhost>

On 26 Apr 2003 at 11:23, Justin Ryan wrote:

> Consider, from a security standpoint, that an attacker is trying to
> brute-force your server.  'service subscription' error says 'you have
> correctly guessed a username, but are attempting to access the wrong
> service'.  Having a valid username is much closer to a username/password
> pair than not having a valid username.. ;p

What Conch does for this is takes whatever error 
the authentication raises, whether it be invalid 
user, invalid password, etc., and turns it into a 
generic 'not authenticated' message.  If you want 
to keep attackers from knowing which names are 
actual users, you probably just want to do that, 
rather than having a flag in the Authorizer.

-p

-- 
     Paul Swartz
(o_  http://twistedmatrix.com/users/z3p.twistd/
//\  z3p at twistedmatrix.com
V_/_ AIM: Z3Penguin




From ecn at metaslash.com  Sat Apr 26 11:12:29 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 13:12:29 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426122016.1a357aa3.itamar@itamarst.org>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <20030426161208.GA25510@localhost.localdomain> <20030426122016.1a357aa3.itamar@itamarst.org>
Message-ID: <20030426171229.GA25940@localhost.localdomain>

> But, looks like we do need to deal with broken rollback support in
> mysql. Is there any flag we can check, or must we trap AttributeError
> and whatever mysql throws on rollback() calls?

I checked.  It's AttributeError.

     try:
         conn.rollback()
     except AttributeError:        # Grr.. MySQL without rollback support
         pass

-Eric



From ecn at metaslash.com  Sat Apr 26 11:15:32 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 13:15:32 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051374310.12540.29.camel@qutang.gnubian.org>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <1051374310.12540.29.camel@qutang.gnubian.org>
Message-ID: <20030426171532.GB25940@localhost.localdomain>

> What type of database are you accessing?

It's my own.

> Would transactions be helpful?  

Not at this time.

MySQL is very fast and very lightweight.  It also runs on platforms
like Win9X (the pain, the pain!).

-Eric



From jml at ids.org.au  Sat Apr 26 11:23:23 2003
From: jml at ids.org.au (Jonathan Lange)
Date: Sun, 27 Apr 2003 03:23:23 +1000
Subject: [Twisted-Python] Trial Refactoring
Message-ID: <20030426172323.GA620@sting>

I've made some pretty significant changes to trial tonight [1][2]. They 
have been mainly focussed on refactoring to reduce repeated code, and 
on being able to extend trial.

The tests work for me [3]. If they don't work for you, this is probably 
the reason. Please check for your platform as soon as possible and let 
the list know.

I have tried hard to keep the functionality as close to the original as 
possible, but there have been some changes.

Feel free to gaffle me and rollback the commit if this is a disastrous 
mistake.

cheers,
jml

[1] 
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/trial/unittest.py.diff?r1=1.63&r2=1.64&cvsroot=Twisted
[2] 
http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/trial/unittest.py.diff?r1=1.64&r2=1.65&cvsroot=Twisted
[3] In Python 2.2. In Python 2.1, testPackages in test_doc fails. I     
don't think this is my fault.



From fog at initd.org  Sat Apr 26 11:33:25 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 19:33:25 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426135546.GA24250@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
Message-ID: <1051378404.15063.6.camel@momo.initd.org>

Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> not understand the logic of always running a rollback even if the
> query is successful.  I would, instead, expect this:

i introduced such buglet but i thought it was fixed (see discussion on
this list some weeks ago). 

> PS. This buglet brought to you by MySQL which does not support rollback(), 
>     and tells you with an exception.

your adapter is b0rked. as per dbapi-2.0 document:

            Database modules that do not support transactions should
            implement this method with void functionality.

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                           Don't dream it. Be it. -- Dr. Frank'n'further
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030426/2989f997/attachment.sig>

From ecn at metaslash.com  Sat Apr 26 12:30:18 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 14:30:18 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051378404.15063.6.camel@momo.initd.org>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org>
Message-ID: <20030426183018.GA26181@localhost.localdomain>

Alrighty.  In case anyone else needs to do this before the MySQL
Python API is brought up-to-date, here's how I kludged it without
changing twisted:

    import MySQLdb

    def doNothing(*args, **kw):
       return None

    class AddRollback:
       def __init__(self, module):
	  self.doConnect = module.connect

       def connect(self, *args, **kw):
	  result = self.doConnect(*args, **kw)
	  result.rollback = doNothing
	  return result

    MySQLdb.connect = AddRollback(MySQLdb).connect

On Sat, Apr 26, 2003 at 07:33:25PM +0200, Federico Di Gregorio wrote:
> Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > not understand the logic of always running a rollback even if the
> > query is successful.  I would, instead, expect this:
> 
> i introduced such buglet but i thought it was fixed (see discussion on
> this list some weeks ago). 
> 
> > PS. This buglet brought to you by MySQL which does not support rollback(), 
> >     and tells you with an exception.
> 
> your adapter is b0rked. as per dbapi-2.0 document:
> 
>             Database modules that do not support transactions should
>             implement this method with void functionality.
> 
> -- 
> Federico Di Gregorio
> Debian GNU/Linux Developer                                fog at debian.org
> INIT.D Developer                                           fog at initd.org
>                            Don't dream it. Be it. -- Dr. Frank'n'further





From lordvan at lordvan.com  Sat Apr 26 14:19:01 2003
From: lordvan at lordvan.com (Thomas Raschbacher)
Date: Sat, 26 Apr 2003 22:19:01 +0200 (CEST)
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426183018.GA26181@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain>
        <1051378404.15063.6.camel@momo.initd.org>
        <20030426183018.GA26181@localhost.localdomain>
Message-ID: <65316.62.47.64.183.1051388341.squirrel@mail-at.net>

hi!

you did this in your 'application' code? (you know that this will block
your whole twisted app for the time of the query right? since MySQLdb is
not async .. and u'd need a thread to make it kinda async ..)

regards
<quote who="Eric C. Newton">
> Alrighty.  In case anyone else needs to do this before the MySQL
> Python API is brought up-to-date, here's how I kludged it without
> changing twisted:
>
>     import MySQLdb
>
>     def doNothing(*args, **kw):
>        return None
>
>     class AddRollback:
>        def __init__(self, module):
> 	  self.doConnect = module.connect
>
>        def connect(self, *args, **kw):
> 	  result = self.doConnect(*args, **kw)
> 	  result.rollback = doNothing
> 	  return result
>
>     MySQLdb.connect = AddRollback(MySQLdb).connect
>


-- 
-----BEGIN GEEK CODE BLOCK-----
GCS/CC/E/M/MU/S d- s: a--- C++++(++) UL++++ P+ L++++ E W+++ N+++ o-- K w-- O
M-- V- PS+ PE-- Y++ PGP+++ t+++ 5+ X- R tv b++++ DI- D+ G++ e-->+++++ h-- !r
z-
------END GEEK CODE BLOCK------


-----------------------------------------
This email was sent using SquirrelMail.
   "Webmail for nuts!"
http://squirrelmail.org/





From dave at krondo.com  Sat Apr 26 14:49:06 2003
From: dave at krondo.com (Dave Peticolas)
Date: 26 Apr 2003 13:49:06 -0700
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <1051378404.15063.6.camel@momo.initd.org>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
Message-ID: <1051390145.1428.319.camel@oneiros>

On Sat, 2003-04-26 at 10:33, Federico Di Gregorio wrote:
> Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > not understand the logic of always running a rollback even if the
> > query is successful.  I would, instead, expect this:
> 
> i introduced such buglet but i thought it was fixed (see discussion on
> this list some weeks ago). 

I meant to, but I guess I never did -- I'll do that now.

To summarize the discussion, you need to commit, not rollback,
as it's possible for select calls to have side effects. One example
is calling a stored procedure.

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030426/03171834/attachment.sig>

From fog at initd.org  Sat Apr 26 15:22:06 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 23:22:06 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <1051390145.1428.319.camel@oneiros>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
	 <1051390145.1428.319.camel@oneiros>
Message-ID: <1051392126.13205.8.camel@momo.initd.org>

Il sab, 2003-04-26 alle 22:49, Dave Peticolas ha scritto:
> On Sat, 2003-04-26 at 10:33, Federico Di Gregorio wrote:
> > Il sab, 2003-04-26 alle 15:55, Eric C. Newton ha scritto:
> > > not understand the logic of always running a rollback even if the
> > > query is successful.  I would, instead, expect this:
> > 
> > i introduced such buglet but i thought it was fixed (see discussion on
> > this list some weeks ago). 
> 
> I meant to, but I guess I never did -- I'll do that now.
> 
> To summarize the discussion, you need to commit, not rollback,
> as it's possible for select calls to have side effects. One example
> is calling a stored procedure.

exactly.

federico

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030426/a6ac5660/attachment.sig>

From cce at clarkevans.com  Sat Apr 26 15:44:21 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Sat, 26 Apr 2003 21:44:21 +0000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <1051390145.1428.319.camel@oneiros>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org> <1051390145.1428.319.camel@oneiros>
Message-ID: <20030426214421.GA62586@doublegemini.com>

On Sat, Apr 26, 2003 at 01:49:06PM -0700, Dave Peticolas wrote:
| To summarize the discussion, you need to commit, not rollback,
| as it's possible for select calls to have side effects. One example
| is calling a stored procedure.

This makes sense.  For example, the stored procedure may update
an access log table which records the last time that a user looked
at a given peice of information.   This could be quite useful.

But, in any case, the 'transaction' should be terminated.  If it
was successful (no exception) then it should be committed, else
it should be rolled back...

Clark



From fog at initd.org  Sat Apr 26 15:45:55 2003
From: fog at initd.org (Federico Di Gregorio)
Date: 26 Apr 2003 23:45:55 +0200
Subject: [Twisted-Python] adapi.Connection._runQuery always does
	rollback()
In-Reply-To: <20030426214421.GA62586@doublegemini.com>
References: <20030426135546.GA24250@localhost.localdomain>
	 <1051378404.15063.6.camel@momo.initd.org>
	 <1051390145.1428.319.camel@oneiros>
	 <20030426214421.GA62586@doublegemini.com>
Message-ID: <1051393555.13196.11.camel@momo.initd.org>

Il sab, 2003-04-26 alle 23:44, Clark C. Evans ha scritto:
> On Sat, Apr 26, 2003 at 01:49:06PM -0700, Dave Peticolas wrote:
> | To summarize the discussion, you need to commit, not rollback,
> | as it's possible for select calls to have side effects. One example
> | is calling a stored procedure.
> 
> This makes sense.  For example, the stored procedure may update
> an access log table which records the last time that a user looked
> at a given peice of information.   This could be quite useful.
> 
> But, in any case, the 'transaction' should be terminated.  If it
> was successful (no exception) then it should be committed, else
> it should be rolled back...

yes, there is not that much difference between a Query and an Operation.
imho the adbapi can be cleaned up *a lot*, but i'll try that after
sending my big cleanup patch (that makes min/max of connections
working). i just need to find enough time to write a test case to
demonstrate it does not break anything.

federico

-- 
Federico Di Gregorio
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
              All programmers are optimists. -- Frederick P. Brooks, Jr.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030426/6004c232/attachment.sig>

From ecn at metaslash.com  Sat Apr 26 15:51:08 2003
From: ecn at metaslash.com (Eric C. Newton)
Date: Sat, 26 Apr 2003 17:51:08 -0400
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <65316.62.47.64.183.1051388341.squirrel@mail-at.net>
References: <20030426135546.GA24250@localhost.localdomain> <1051378404.15063.6.camel@momo.initd.org> <20030426183018.GA26181@localhost.localdomain> <65316.62.47.64.183.1051388341.squirrel@mail-at.net>
Message-ID: <20030426215108.GA27354@localhost.localdomain>

Thanks. I know that the MySQLdb API blocks.

You will note that I'm not actually using the MySQLdb API in the code
below, but adding code which adds a rollback method to allocated
connection objects.  Long-running calls go through the
twisted.enterprise APIs.

-Eric

On Sat, Apr 26, 2003 at 10:19:01PM +0200, Thomas Raschbacher wrote:
> hi!
> 
> you did this in your 'application' code? (you know that this will block
> your whole twisted app for the time of the query right? since MySQLdb is
> not async .. and u'd need a thread to make it kinda async ..)
> 
> regards
> <quote who="Eric C. Newton">
> > Alrighty.  In case anyone else needs to do this before the MySQL
> > Python API is brought up-to-date, here's how I kludged it without
> > changing twisted:
> >
> >     import MySQLdb
> >
> >     def doNothing(*args, **kw):
> >        return None
> >
> >     class AddRollback:
> >        def __init__(self, module):
> > 	  self.doConnect = module.connect
> >
> >        def connect(self, *args, **kw):
> > 	  result = self.doConnect(*args, **kw)
> > 	  result.rollback = doNothing
> > 	  return result
> >
> >     MySQLdb.connect = AddRollback(MySQLdb).connect



From andrew-twisted at puzzling.org  Sat Apr 26 20:00:47 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Sun, 27 Apr 2003 12:00:47 +1000
Subject: [Twisted-Python] adapi.Connection._runQuery always does rollback()
In-Reply-To: <20030426161208.GA25510@localhost.localdomain>
References: <20030426135546.GA24250@localhost.localdomain> <20030426140722.GE26530@frobozz.local> <20030426161208.GA25510@localhost.localdomain>
Message-ID: <20030427020047.GF26530@frobozz.local>

On Sat, Apr 26, 2003 at 12:12:08PM -0400, Eric C. Newton wrote:
> Sure, that's a theory.  And, yay, verily, MySQL isn't known for it's
> strict adherance to standards.  However:
> 
>    http://www.python.org/topics/database/DatabaseAPI-2.0.html#connection
> 
> Says
> 
>  rollback()
>     This method is optional since not all databases provide 
>     transaction support.[3]

Oops.  I'll remember to read more closely next time.

Thanks for correcting me :)

-Andrew.




From tv at twistedmatrix.com  Sat Apr 26 01:57:36 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sat, 26 Apr 2003 10:57:36 +0300
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030425153755.GD37090@shitbomb.com>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425153755.GD37090@shitbomb.com>
Message-ID: <20030426075736.GB14322@lapdog>

On Fri, Apr 25, 2003 at 11:37:55AM -0400, Skinny Puppy wrote:
> > 2. Do you have any Twisted success stories you'd like to share (besides
> > those listed in our success stories page, of course)?
> 
> I have twisted running with ldaptor on over 200 Solaris systems, pulling
> configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
> and a few others things.  I do keep my own cvs of both twisted and ldaptor 
> due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
> They are highly out of date but work for me now.  

	Ooh! An actual ldaptor user!

	At this point, you are the most important external party using
	ldaptor, it seems. How's it been? Any thoughts on what you would
	want to see?

-- 
:(){ :|:&};:



From pinard at iro.umontreal.ca  Sun Apr 27 08:35:41 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 10:35:41 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Typo in code
Message-ID: <oqist0c8jm.fsf@alcyon.progiciels-bpi.ca>

Hi, a mini-tiny nit.

In Twisted-1.0.4/twisted/persisted/styles.py, the doc-string writes
"peristed" instead of "persisted".

P.S. - Is there an email address I could use for such nits, instead of
bothering the whole list?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From skin_pup-twisted at damnable.happypoo.com  Sun Apr 27 04:27:06 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Sun, 27 Apr 2003 06:27:06 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030426075736.GB14322@lapdog>
References: <20030422154827.17021602.itamar@itamarst.org> <20030425153755.GD37090@shitbomb.com> <20030426075736.GB14322@lapdog>
Message-ID: <20030427102706.GE37090@shitbomb.com>

Tommi Virtanen [tv at twistedmatrix.com] wrote:
> On Fri, Apr 25, 2003 at 11:37:55AM -0400, Skinny Puppy wrote:
> > > 2. Do you have any Twisted success stories you'd like to share (besides
> > > those listed in our success stories page, of course)?
> > 
> > I have twisted running with ldaptor on over 200 Solaris systems, pulling
> > configs out of LDAP for inetd/dnscache/tinydns/ldap.conf (pam/nss)/cron
> > and a few others things.  I do keep my own cvs of both twisted and ldaptor 
> > due to my need for having TLS built directly in <HINT>.  (yes I sent a patch).
> > They are highly out of date but work for me now.  
> 
> 	Ooh! An actual ldaptor user!
> 
> 	At this point, you are the most important external party using
> 	ldaptor, it seems. How's it been? Any thoughts on what you would
> 	want to see?
> 

to be honest - nothing - I have my own version based .10 and patches
hand applied as needed up to version .13.  With it being deployed on as
many systems we do the process of upgrading is not something we do
often.

I have not come across anything I was not able to do with ldaptor.  I
dont push it to hard, just a lot of searches and maybe a password change or
two. 

I don't really like the DNS SRV records and that way of connecting.  So 
I just don't use it.  

We have added TLS support to ldaptor to go along with the TLS patch I 
wrote for twisted.  I am not able to release that patch due to it was 
created by working with another employee.

One thing I would kill to have is the server side of things in twisted.
This would allow me to build the ldap caching daemon / proxy daemon. nscd
on Solaris is a pile of junk, but an absolute need for nsswitch with ldap.  
And just be damn fun to play with.  But I will be damned if I know anyone 
that wants to write it. 

Thank you once again for creating ldaptor, it has save this sysadmin
untold hours of config changes and has been fun to play with. 

Jeremy 





From pinard at iro.umontreal.ca  Sun Apr 27 08:58:54 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 10:58:54 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Heavy search for `plugins.tml'
Message-ID: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>

Hi, people.

I noticed yesterday how heavily Twisted tries to find `plugins.tml'.  Being
new to the game, and not knowing the motivations, a lot of things surely
escape my comprehension, yet at first glance, it looks excessive to me
trying many thousands of disk accesses merely to find a configuration file.

Instead of a long listing followed by a discussion about what could be
spared (like, for example, looking all over in `/usr/bin'), this simple
experiment shows the problem -- if you agree that there is a problem! :-)

---------------------------------------------------------------------->
$ strace 2>&1 mktap | grep plugins.tml | wc -l
   2814
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From bob at redivi.com  Sun Apr 27 09:13:36 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 27 Apr 2003 11:13:36 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427102706.GE37090@shitbomb.com>
Message-ID: <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>

On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy wrote:

> We have added TLS support to ldaptor to go along with the TLS patch I
> wrote for twisted.  I am not able to release that patch due to it was
> created by working with another employee.

That doesn't really make any sense.  Does your employer have some 
ridiculous "we own you" IP contract?

-bob




From skin_pup-twisted at damnable.happypoo.com  Sun Apr 27 05:10:38 2003
From: skin_pup-twisted at damnable.happypoo.com (Skinny Puppy)
Date: Sun, 27 Apr 2003 07:10:38 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
References: <20030427102706.GE37090@shitbomb.com> <D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
Message-ID: <20030427111038.GF37090@shitbomb.com>

Bob Ippolito [bob at redivi.com] wrote:
> 
> On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy wrote:
> 
> >We have added TLS support to ldaptor to go along with the TLS patch I
> >wrote for twisted.  I am not able to release that patch due to it was
> >created by working with another employee.
> 
> That doesn't really make any sense.  Does your employer have some 
> ridiculous "we own you" IP contract?

Yes - I have permission (in writing for what i do at home is mine) but
other employees do not (or have not even asked).  And all work done at 
the office is owned wholly by my employer.  There is really nothing 
I can do, I have ask permission to release it back to everyone and was 
denied.  The TLS patch i sent was created at home just for this reason. 

Jeremy



From alan at norfolkgraphics.com  Sun Apr 27 09:39:34 2003
From: alan at norfolkgraphics.com (Alan McIntyre)
Date: Sun, 27 Apr 2003 11:39:34 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
References: <20030422154827.17021602.itamar@itamarst.org>
Message-ID: <3EABF9B6.4020101@norfolkgraphics.com>

Itamar Shtull-Trauring wrote:
> 1. Do you require Python 2.1 support in Twisted? If so, for what reason?
> How problematic would a switch to 2.2 be for you? Please try to answer
> within a week so we can have some immediate info.

I plan on using Twisted for at least a couple of new (from-scratch) 
projects, and they will all be using Python 2.2.2 or newer.

> 2. Do you have any Twisted success stories you'd like to share (besides
> those listed in our success stories page, of course)?

Not yet, but if everything goes according to current plan I should have 
something interesting to share in 6-9 months. ;)




From bob at redivi.com  Sun Apr 27 10:02:18 2003
From: bob at redivi.com (Bob Ippolito)
Date: Sun, 27 Apr 2003 12:02:18 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427111038.GF37090@shitbomb.com>
Message-ID: <9F539584-78C9-11D7-B5C0-000A95686CD8@redivi.com>

On Sunday, Apr 27, 2003, at 07:10 America/New_York, Skinny Puppy wrote:

> Bob Ippolito [bob at redivi.com] wrote:
>>
>> On Sunday, Apr 27, 2003, at 06:27 America/New_York, Skinny Puppy 
>> wrote:
>>
>>> We have added TLS support to ldaptor to go along with the TLS patch I
>>> wrote for twisted.  I am not able to release that patch due to it was
>>> created by working with another employee.
>>
>> That doesn't really make any sense.  Does your employer have some
>> ridiculous "we own you" IP contract?
>
> Yes - I have permission (in writing for what i do at home is mine) but
> other employees do not (or have not even asked).  And all work done at
> the office is owned wholly by my employer.  There is really nothing
> I can do, I have ask permission to release it back to everyone and was
> denied.  The TLS patch i sent was created at home just for this reason.

Wow, your job sucks :)  I used to have one of those a few years ago.  I 
wonder if they realize that it actually bleeds time for you to maintain 
your own internal versions of open source software?

-bob




From pinard at iro.umontreal.ca  Sun Apr 27 10:13:43 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:13:43 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Tildes in the book
Message-ID: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>

Hi, still me...

In the Twisted 1.0.4 book -- I hope this reference is unambiguous enough,
I have not seen more than one :-) -- there is a problem here and there with
`~' being shown over the next character (`/' for example) instead of prior
to it as intented.  At many places, tildes are OK, however.  Should I try
reporting all problematic cases?  I guess not, as the problem is likely
to be the same at all places, and some global action could be taken.
The example I'm currently looking at is at the end of page 136 (6. Web
Applications; 6.1.2 Before we begin) on this quote:

   Make sure the `TwistedQuotes' directory is on your PYTYONPATH, put
   `webquotes.rpy' and `WebQuotes.html' in your `~/public_html' directory,
   and you are ready to go.

The `~' and `/' on the last sentence are at the same character position.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 10:26:00 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:26:00 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - mktap verbosity [was: Re: documentation issue?]
In-Reply-To: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
References: <58285.10.1.4.156.1047510183.squirrel@webmail.collegenet.com>
Message-ID: <oqznmbc3fr.fsf@alcyon.progiciels-bpi.ca>

[rprice at collegenet.com]

> I am working my way through "The Twisted Documentation" Jan
> 29, 2003 and found a problem with an example (or with me).
> At http://twistedmatrix.com/documents/howto/plugin it says:
>    % mktap qotd
>    Saving qotd application to qotd.tap...
>    Saved.
> % twistd -f qotd.tap
> % nc localhost 8007
> An apple a day keeps the doctor away.
> % kill `cat twistd.pid`

> The problem is when I run 'mktap qotd' I get the following error:
>    Unknown command: qotd
> and then it prints the usage and options help.

I got the same problem, then quickly figured out that I forgot to create
an empty `__init.py__' file within the other files.

But the real reason of this reply is for reporting that the documented:

---------------------------------------------------------------------->
   Saving qotd application to qotd.tap...
   Saved.
----------------------------------------------------------------------<

lines are not given in response to calling `mktap'.  Besides that detail,
the example nicely works.  Instead of amending the documentation to
remove those two lines, maybe `mktap' could accept some `-v' option,
server generic, for producing them, and be an opened door for any later
other useful extra feedback?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 10:27:02 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 12:27:02 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 10:58:54 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427162702.GA7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 10:58, Francois Pinard wrote:
> Hi, people.
> 
> I noticed yesterday how heavily Twisted tries to find `plugins.tml'.  Being
> new to the game, and not knowing the motivations, a lot of things surely
> escape my comprehension, yet at first glance, it looks excessive to me
> trying many thousands of disk accesses merely to find a configuration file.

The thing is, it's not a configuration file :-) It's a plugins file. The point
is for applications to distribute one along with their packages, and just have
it put into their Python package directory, so there's no tricky registration
process required.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Sun Apr 27 10:50:43 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 12:50:43 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
Message-ID: <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]
> [Francois Pinard]

> > I noticed yesterday how heavily Twisted tries to find `plugins.tml'.
> > Being new to the game, and not knowing the motivations, a lot of
> > things surely escape my comprehension, yet at first glance, it looks
> > excessive to me trying many thousands of disk accesses merely to find
> > a configuration file.

> The thing is, it's not a configuration file :-) It's a plugins file.
> The point is for applications to distribute one along with their
> packages, and just have it put into their Python package directory,
> so there's no tricky registration process required.

Ok.  It is not a configuration file, if you want.  Or this file configures
the plugins, say.  And, I surely understood that the idea of searching so
hard was so the user does not have to say much about where it is.  Granted.

It still looks like Twisted is going overboard with this.  If `plugins.tml'
files were being collected from the top-level directories along `sys.path'
and maybe no more than one-level below, and maybe also for test purposes
(despite the security weakness), into the current directory and one
level of directories below, it would probably make a lot of sense at a
reasonable cost.

But trying every single executable along the shell load path as if the
executable were a directory (yet I understand it would be slower to first
check if it is a directory) is heavy and unlikely to be any fruitful -- at
least in my naive eyes.  It might be worth some revisiting, who knows...
If you really want full generality, it might be more sane and useful to
invent some TWISTED_SEARCH_PATH environment variable, than to go berzerk
and frantically search everything in the wild. :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 11:14:35 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 13:14:35 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 12:50:43 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 12:50, Francois Pinard wrote:
> It still looks like Twisted is going overboard with this.  If `plugins.tml'
> files were being collected from the top-level directories along `sys.path'
> and maybe no more than one-level below, and maybe also for test purposes
> (despite the security weakness), into the current directory and one
> level of directories below, it would probably make a lot of sense at a
> reasonable cost.

That's exactly what it's documented to do. If it's not doing that, it's a bug.
(btw, the current directory gets no special treatment. If it's searching
the current directory, it's because the current directory is somehow in 
sys.path)

> But trying every single executable along the shell load path as if the
> executable were a directory (yet I understand it would be slower to first
> check if it is a directory) is heavy and unlikely to be any fruitful -- at
> least in my naive eyes.  It might be worth some revisiting, who knows...
> If you really want full generality, it might be more sane and useful to
> invent some TWISTED_SEARCH_PATH environment variable, than to go berzerk
> and frantically search everything in the wild. :-)

It's not using the shell load path. /usr/bin just happens to be in your
sys.path. And, I'm guessing that explicitly checking 1) whether or not
each item is a directory and 2) whether or not that directory has an 
__init__.py is, as you said, more expensive (and checking for __init__.py
is actually trickier than it seems at first, because you also need to
check for .pyc, .pyo, .pyd, .so....).

And inventing a new environment variable is contrary to the stated goal,
which is the lack of a registration process (apart from what you need to do
to have your package work with Python).

Now, are you actually having a *problem* with the performance of mktap?

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Sun Apr 27 11:21:53 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 13:21:53 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>; from radix@twistedmatrix.com on Sun, Apr 27, 2003 at 13:14:35 -0400
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
Message-ID: <20030427172153.GE7671@toshi.anaprd01.md.comcast.net>

On 2003.04.27 13:14, Christopher Armstrong wrote:
> 
> On 2003.04.27 12:50, Francois Pinard wrote:
> > It still looks like Twisted is going overboard with this.  If `plugins.tml'
> > files were being collected from the top-level directories along `sys.path'
> > and maybe no more than one-level below, and maybe also for test purposes
> > (despite the security weakness), into the current directory and one
> > level of directories below, it would probably make a lot of sense at a
> > reasonable cost.
> 
> That's exactly what it's documented to do. If it's not doing that, it's a bug.
> (btw, the current directory gets no special treatment. If it's searching
> the current directory, it's because the current directory is somehow in 
> sys.path)

Sorry, I misread your paragraph. It's not quite exactly doing that - it's
searching in one *less* place than what you said (directories along sys.path;
it *only* searches one level of subdirectories along each directory in sys.path)

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From justin at gnubia.net  Sun Apr 27 12:10:57 2003
From: justin at gnubia.net (Justin Ryan)
Date: Sun, 27 Apr 2003 13:10:57 -0500
Subject: [Twisted-Python] Patch: row / reflectors / util
Message-ID: <3EAC1D31.7060107@gnubia.net>

Attached is a patch to twisted.enterprise.row, the sqlreflector, and 
util.py to allow mixed-case table/row names (and to double-quote them in 
databases that require it, such as postgres).

I sent this a while back with a detailed explanation, but have now 
developed some docs on the web at http://gnubia.net/Docs/Twisted.Gnubia/ 
detailing some of my changes..

Oh yeh and.. erm.. Itamar told me to re-send on irc a few min ago..

This stuff may need to be cleaned up, and I've considered separating 
some of it out into a PGRow or somesuch, the way that I (and someone 
else on the list) am using a PGSQLReflector to do some postgres-specific 
stuff.

suggestions / criticism / flames welcome

-j




From justin at gnubia.net  Sun Apr 27 12:19:31 2003
From: justin at gnubia.net (Justin Ryan)
Date: Sun, 27 Apr 2003 13:19:31 -0500
Subject: [Twisted-Python] Patch: row (forgot attachment)
Message-ID: <3EAC1F33.5@gnubia.net>

Ooops, forgot the attachment..

-j
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: row.diff
URL: </pipermail/twisted-python/attachments/20030427/460c56f7/attachment.ksh>

From itamar at itamarst.org  Sun Apr 27 12:12:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 14:12:15 -0400
Subject: [Twisted-Python] SURVEY: For Twisted users, please answer
In-Reply-To: <20030427111038.GF37090@shitbomb.com>
References: <20030427102706.GE37090@shitbomb.com>
	<D1872426-78C2-11D7-B5C0-000A95686CD8@redivi.com>
	<20030427111038.GF37090@shitbomb.com>
Message-ID: <20030427141215.7935a322.itamar@itamarst.org>

On Sun, 27 Apr 2003 07:10:38 -0400
Skinny Puppy <skin_pup-twisted at damnable.happypoo.com> wrote:

> Yes - I have permission (in writing for what i do at home is mine) but
> other employees do not (or have not even asked).  And all work done at
> 
> the office is owned wholly by my employer.  There is really nothing 
> I can do, I have ask permission to release it back to everyone and was
> 
> denied.  The TLS patch i sent was created at home just for this
> reason. 

Could you resend it to me? and explain what the other patch is that you
did with your co-worker?

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 14:38:06 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 16:38:06 -0400
Subject: [Twisted-Python] Twisted-1.0.4 - Typo in twisted/words/service.py
Message-ID: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>

Hi.  Another nit.  In Twisted-1.0.4/twisted/words/service.py, line 562:

---------------------------------------------------------------------->
            raise KeyError("Pariticpant already exists: %s." % name)
----------------------------------------------------------------------<

should be written:

---------------------------------------------------------------------->
            raise KeyError("Participant already exists: %s." % name)
----------------------------------------------------------------------<

P.S. - If there is an email address to use for such details, instead of the
mailing list, please tell me.  As long as this is email, it's OK for me! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Sun Apr 27 14:53:11 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 16:53:11 -0400
Subject: [Twisted-Python] Twisted-1.0.4 - Typo in
 twisted/words/service.py
In-Reply-To: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
References: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427165311.138e7727.itamar@itamarst.org>

On 27 Apr 2003 16:38:06 -0400
Francois Pinard <pinard at iro.umontreal.ca> wrote:

> Hi.  Another nit.  In Twisted-1.0.4/twisted/words/service.py, line
> 562:
> 
> ---------------------------------------------------------------------
> ->
>             raise KeyError("Pariticpant already exists: %s." % name)
> ---------------------------------------------------------------------
> -<

Fixed in CVS. For spelling errors, mentioning it on IRC (#twisted
irc.freenode.net) would probably work too. I think I fixed the other
typo you mentioned a few days ago.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 15:08:09 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:08:09 -0400
Subject: [Twisted-Python] Re: Twisted-1.0.4 - Typo in twisted/words/service.py
In-Reply-To: <20030427165311.138e7727.itamar@itamarst.org>
References: <oqfzo3brrl.fsf@alcyon.progiciels-bpi.ca>
	<20030427165311.138e7727.itamar@itamarst.org>
Message-ID: <oqbryrbqdi.fsf@alcyon.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> For spelling errors, mentioning it on IRC (#twisted irc.freenode.net)
> would probably work too.

Just have to wait for an acknowledgement there, from you presumably?

> I think I fixed the other typo you mentioned a few days ago.

Thanks.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 15:26:32 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:26:32 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
Message-ID: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>

Hi.  This is a resend of a message which was rejected, because too big.
Wise mailing list system! :-).  So, I removed 1255 lines from the middle
of the last transcript, showing the first 20 and the last 20 only.
You'll merely have to believe me that those lines I removed were there! :-)

-------------- next part --------------
An embedded message was scrubbed...
From: Francois Pinard <pinard at IRO.UMontreal.CA>
Subject: Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
Date: 27 Apr 2003 14:25:28 -0400
Size: 8619
URL: </pipermail/twisted-python/attachments/20030427/81b40340/attachment.mht>
-------------- next part --------------


-- 
François Pinard   http://www.iro.umontreal.ca/~pinard

From itamar at itamarst.org  Sun Apr 27 15:21:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 17:21:29 -0400
Subject: [Twisted-Python] Joined the bleedin' choir invisible!
Message-ID: <20030427172129.5fc476c5.itamar@itamarst.org>

2.1 support is now officially dead.

Please don't start changing existing Twisted code to use 2.2 features
unless you're actually adding new functionality. We might need to
backport some code to 2.1 at some point, though that's pretty unlikely.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Sun Apr 27 15:39:49 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 17:39:49 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - `mktap --help SERVER'
In-Reply-To: <20030423233556.GB14554@meson.dyndns.org>
References: <oqk7dkx18v.fsf@alcyon.progiciels-bpi.ca>
	<20030423233556.GB14554@meson.dyndns.org>
Message-ID: <oq1xznbowq.fsf@alcyon.progiciels-bpi.ca>

[Jp Calderone]
> [Francois Pinard]

> > Page 21 (2.2.3 mktap and tapconvert) says: "For a given server,
> > `mktap --help <name>' shows the possible configuration options.".

> After looking at this for more minutes than it probably merited, I feel
> that this usage should stay gone (rather than have mktap be fixed to
> work as documented).  [...] It is also trivially achieved by reversing
> the order of the arguments to be "mktap <name> --help".

Sounds very reasonable.

> There are effectively no unit tests for either mktap or twistd, and
> the acceptance tests only test it in well-formed cases, which are nice,
> but probably the least important ones to *test*, since that is how the
> developers will all be invoked the tools (and so they will get plenty
> of testing that way).

My feeling is that we should wonder nevertheless.  Consider that, in
actual practice, 1.0.4 was issued with DeprecationWarnings still remaining
for a few servers (conch, parent, sibling), that another server without
arguments raises an exception (inetd).  So we can doubt there was so plenty
of testing, and a unit test for those would add more security to releases.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Sun Apr 27 15:44:29 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 17:44:29 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427174429.29b2c130.itamar@itamarst.org>

On 27 Apr 2003 17:26:32 -0400
Francois Pinard <pinard at iro.umontreal.ca> wrote:

> Hi.  This is a resend of a message which was rejected, because too
> big. Wise mailing list system! :-).  So, I removed 1255 lines from the
> middle of the last transcript, showing the first 20 and the last 20
> only. You'll merely have to believe me that those lines I removed were
> there! :-)

Thank you! We will see about fixing this ASAP.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From radix at twistedmatrix.com  Sun Apr 27 15:56:16 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 17:56:16 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 17:26:32 -0400
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427215616.GA9407@toshi.anaprd01.md.comcast.net>

On 2003.04.27 17:26, Francois Pinard wrote:
> Hi.  This is a resend of a message which was rejected, because too big.
> Wise mailing list system! :-).  So, I removed 1255 lines from the middle
> of the last transcript, showing the first 20 and the last 20 only.
> You'll merely have to believe me that those lines I removed were there! :-)

> > It's not using the shell load path.  /usr/bin just happens to be in
> > your sys.path.

> No, it is not.  How can you be so assertive?

Because I know :-) The default sys.path isn't there, but your `mktap'
is located in /usr/bin, isn't it? :-)

You probably thought I was being over-assertive because I wasn't explaining
myself fully. I apologize for that. But I did the research, and found out
why this was happening. (more below)

> > And inventing a new environment variable is contrary to the stated goal,
> > which is the lack of a registration process (apart from what you need
> > to do to have your package work with Python).

> Stated where?  The book does not clearly indicate (or I did not read that
> part yet) where `.tml' files are exactly looked for.

The "Writing Twisted Plugins" section, IIRC.


> And besides and moreover, I may well report a bug, without having an actual
> problem with it.  Having to much insist that a bug exists remembers me
> the old times of contacting vendors of non-free software.  This is the
> second time in the Python community that I observe this phenomenon.
> Being receptive to feedback is a good way to keep it coming, you know.

Trolls like this aren't necessary. If you have a suggestion for improvement
(a special-case for leaving out /usr/bin despite its being in the python
path, for example), then I'll gladly hear it out. But I'm fairly certain
that there's no debate on what the *current* behavior is.

> OK then.  I am now reporting a bug.  The default Python path for this
> Python 2.2.1, which I installed over a SuSE 8.0 Linux distribution, is:

As I stated above, /usr/bin is in your sys.path because that's probably where
your `mktap' is located. If you don't believe me, modify your local Twisted
installation to add a `print sys.path' to twisted.scripts.mktap.


> Doing `strace mktap', and cleaning out from the result what is expected
> from the current value of `sys.path' (yet without checking if the depth
> of search is reasonable), leaves these to consider, explain and justify:

Yeah, I examined the output of that strace that you quoted in your original
mail; I discovered, as I had expected, that /usr/bin was in my python path
because that's where `mktap' is located.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Sun Apr 27 16:03:42 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 18:03:42 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - admin/runtests failures?
In-Reply-To: <20030423.155734.48529138.warner@lothar.com>
References: <oqwuhkx5pj.fsf@alcyon.progiciels-bpi.ca>
	<20030423220930.GA14554@meson.dyndns.org>
	<20030423.155734.48529138.warner@lothar.com>
Message-ID: <oqwuhfa98h.fsf@alcyon.progiciels-bpi.ca>

[Brian Warner]

> > Woops.  This is a localization problem.  Maybe it should be an expected
> > skip for certain values of LC_LANG?  Or maybe we should just not use ls.

> Hmm, it means popen2 used french while reactor.spawnProcess used english.
> [...]  Could you try the attached patch and see if it fixes the problem?

> Index: twisted/internet/default.py
> Index: twisted/internet/interfaces.py
> Index: twisted/test/test_process.py

Thanks.  Following your suggestion, I re-installed Twisted 1.0.4 with
the above patches, and reran `admin/runtests'.  The patches apparently
solved a few things.  Without them, the testing summary was:

---------------------------------------------------------------------->
FAILED (failures=2, errors=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

and now, it is reduced to:

---------------------------------------------------------------------->
FAILED (failures=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

Here is the listing result of what remains:

---------------------------------------------------------------------->

===============================================================================
SKIPPED: testModules (twisted.test.test_doc.DocCoverage)
-------------------------------------------------------------------------------
Activate me when you feel like writing docstrings, and fixing GTK crashing bugs.
===============================================================================
SKIPPED: testReadLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
SKIPPED: testWriteLimit (twisted.test.test_policies.ThrottlingTestCase)
-------------------------------------------------------------------------------
Inaccurate tests are worse than no tests.
===============================================================================
EXPECTED FAILURE: testStor (twisted.test.test_ftp.FTPClientAndServerTests)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_ftp.py", line 276, in testStor
    self.assertEquals(open('HelloThere').read(), expectedContent)
 FailTest: '' != 'Hello\nHello\nHello\nHello\n'
===============================================================================
EXPECTED FAILURE: testSneakyHiddenDoom (twisted.test.test_loopback.LoopbackTCPTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 77, in testSneakyHiddenDoom
    LoopbackTestCase.testSneakyHiddenDoom(self)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_loopback.py", line 71, in testSneakyHiddenDoom
    self.assertEquals(c.lines, ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3'])
 FailTest: ['DOOM LINE', 'Hello 1', 'Hello 2'] != ['DOOM LINE', 'Hello 1', 'Hello 2', 'Hello 3']
===============================================================================
FAILURE: testRSA (twisted.test.test_conch.SSHKeysHandlingTestCase)
-------------------------------------------------------------------------------
Traceback (most recent call last):
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 76, in testRSA
    self._testKey(publicRSA_openssh, privateRSA_openssh, 'openssh')
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 85, in _testKey
    self._testGenerateKey(privKey, pubKey, privData, pubData, keyType)
   File "/var/tmp/Twisted-1.0.4/twisted/test/test_conch.py", line 118, in _testGenerateKey
    self.assertEquals(keys.makePrivateKeyString(privKey, kind=keyType), privData)
 FailTest: '-----BEGIN RSA PRIVATE KEY-----\nMIIBxwIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW\n4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw\nvgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb\nZ4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSWKRxK0mvh6ERxKqIt1\nxJEJO74EykXZV4oNJ8sjAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2gyTr\niKFVoqjeEjt3SZKKqXHSApP/AjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0F\nVP+8PQm/g/aXf2QQkQT+omdHVEJrAjAXO7DkmaHRZwIq8j/kIPaLUgYyd20DC6Uk\n6su3N2tgEnAv2MjsJA2iAh55w918ozMCMEukX33NwkllGrZpuBiV/2W/VyGStaoM\ndS4Nm22Zgl4R+IUEFq9VggXV06VlPQbyMwIwJQPp/z+HDpM0ntg9cAo3390laeF0\nk8jwQJ0gL5x0oMYdpOhV0O5Ck/yrsRDCKDZA\n-----END RSA PRIVATE KEY-----' != '-----BEGIN RSA PRIVATE KEY-----\nMIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW\n4sbUIZR/ZXzY1CMfuC5qyR+UDUbBaaK3Bwyjk8E02C4eSpkabJZGB0Yr3CUpG4fw\nvgUd7rQ0ueeZlQIBIwJgbh+1VZfr7WftK5lu7MHtqE1S1vPWZQYE3+VUn8yJADyb\nZ4fsZaCrzW9lkIqXkE3GIY+ojdhZhkO1gbG0118sIgphwSW
 KRxK0mvh6ERxKqIt1\nxJEJO74EykXZV4oNJ8sjAjEA3J9r2ZghVhGN6V8DnQrTk24Td0E8hU8AcP0FVP+8\nPQm/g/aXf2QQkQT+omdHVEJrAjEAy0pL0EBH6EVS98evDCBtQw22OZT52qXlAwZ2\ngyTriKFVoqjeEjt3SZKKqXHSApP/AjBLpF99zcJJZRq2abgYlf9lv1chkrWqDHUu\nDZttmYJeEfiFBBavVYIF1dOlZT0G8jMCMBc7sOSZodFnAiryP+Qg9otSBjJ3bQML\npSTqy7c3a2AScC/YyOwkDaICHnnD3XyjMwIxALRzl0tQEKMXs6hH8ToUdlLROCrP\nEhQ0wahUTCk1gKA4uPD6TMTChavbh4K63OvbKg==\n-----END RSA PRIVATE KEY-----'
-------------------------------------------------------------------------------
Ran 587 tests in 98.090s

FAILED (failures=1, skips=3, expectedFailures=2)
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Sun Apr 27 12:25:28 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 14:25:28 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
	<oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
	<20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
Message-ID: <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> It's not using the shell load path.  /usr/bin just happens to be in
> your sys.path.

No, it is not.  How can you be so assertive?

> And inventing a new environment variable is contrary to the stated goal,
> which is the lack of a registration process (apart from what you need
> to do to have your package work with Python).

Stated where?  The book does not clearly indicate (or I did not read that
part yet) where `.tml' files are exactly looked for.

> Now, are you actually having a *problem* with the performance of mktap?

I'm surely a patient man.  Yet, `mktap' could be faster, and nobody
would complain.

And besides and moreover, I may well report a bug, without having an actual
problem with it.  Having to much insist that a bug exists remembers me
the old times of contacting vendors of non-free software.  This is the
second time in the Python community that I observe this phenomenon.
Being receptive to feedback is a good way to keep it coming, you know.

> On 2003.04.27 12:50, Francois Pinard wrote:
> > It still looks like Twisted is going overboard with this.  If `plugins.tml'
> > files were being collected from the top-level directories along `sys.path'
> > and maybe no more than one-level below, and maybe also for test purposes
> > (despite the security weakness), into the current directory and one
> > level of directories below, it would probably make a lot of sense at a
> > reasonable cost.

> That's exactly what it's documented to do.  If it's not doing that,
> it's a bug.  (btw, the current directory gets no special treatment. If
> it's searching the current directory, it's because the current directory
> is somehow in sys.path)

OK then.  I am now reporting a bug.  The default Python path for this
Python 2.2.1, which I installed over a SuSE 8.0 Linux distribution, is:

---------------------------------------------------------------------->
>>> sys.path
['',
 '/usr/lib/python2.2',
 '/usr/lib/python2.2/plat-linux2',
 '/usr/lib/python2.2/lib-tk',
 '/usr/lib/python2.2/lib-dynload',
 '/usr/lib/python2.2/site-packages',
 '/usr/lib/python2.2/site-packages/PIL',
 '/sram/griffon/local/lib/python2.2/site-packages']
----------------------------------------------------------------------<

The last line comes from a local `sitecustomize.py'.  The current directory
while testing is:

---------------------------------------------------------------------->
~/sram/twisted/web
----------------------------------------------------------------------<

Doing `strace mktap', and cleaning out from the result what is expected
from the current value of `sys.path' (yet without checking if the depth
of search is reasonable), leaves these to consider, explain and justify:

---------------------------------------------------------------------->
stat64("/usr/bin/[/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/as/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/at/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ci/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/co/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/du/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/m4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/id/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/im/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ld/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/od/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ud/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ul/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/GET/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/X11/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/a2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/b2m/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/awk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/col/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/env/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gcc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gdb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/joe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/man/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdu/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mft/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mfw/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mrd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/s2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/old/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pic/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/red/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w3m/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/scp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/seq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tac/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tbl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tee/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tic/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tgz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/toe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/top/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tty/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/who/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xtp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xxd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstruct/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/infotocap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-remote/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dnsquery/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnminterp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnminvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/HEAD/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/Mail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/POST/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/a2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c2ph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cZ11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aoss/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/card/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cfte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chfn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/h2ph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cjet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/h2xs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/coil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/comm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cpio/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/edit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/file/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/find/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flea/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gasp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gcov/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fold/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/geqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/free/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/head/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpgv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsbj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsdj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gslj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gslp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gtbl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsnd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/host/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/info/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipcs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isql/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/join/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/last/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/less/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/line/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/make/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/look/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lore/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mesg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lprm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lynx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/neqn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mren/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mutt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/t-im/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/audiofile-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pico/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pine/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/over/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/deallocvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/w3mj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rjoe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfte/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sftp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/siga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rtin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/size/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rvim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sort/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/test/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/time/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sudo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tput/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vbox/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uniq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unsq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vdir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/view/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xdvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zcmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/znew/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xml-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/asciiview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfinitex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kbdrate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ior-decode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unicode_stop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2magick/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lxdialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/set_default_volume/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.runtime/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_deadlock/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/CheckHardware/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/conjure/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapdelete/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/convert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmmargin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gnuplot_x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/raw2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vimtutor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/utmpdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c++filt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bioradtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxbeep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/devdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxcnvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxctrl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxmode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vboxtoau/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmnlfilt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmllint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/susehelp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2dvi4a2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/addftinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unexpand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readelf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftstring/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftstrpnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/crontab/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2-port-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial-write-section/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setmetamode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.mesasoft/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcre-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/macptopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makeindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fiascotopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libusb-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-download/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csplain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allneeded/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbm2l2030/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rgb2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpbulkwalk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcolormask/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/disable-paste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cmuwmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dirname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/display/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pngtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/killall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c2070/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptranslate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lddlibc4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/escputil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2ascii/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmrotate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allcm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/allec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/batch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g3cat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bison/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cjpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/clear/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cksum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/susewvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ddate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzip2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/colrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/conch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ctags/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diff3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/djpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/egrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvihp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvips/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/etags/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixnt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gamix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gears/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifbg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.nvidia_glx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gperf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gprof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/graph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/groff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/iconv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ident/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gzexe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hpijs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/igawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmsmooth/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ijoin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/inimf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipcrm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jmacs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpico/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jscal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jstar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/latex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lastb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2html/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/links/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lkbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mandb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2text/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/merge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf12/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf13/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdfwr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsdev/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mib2c/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/minfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/namei/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmove/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showchar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/s3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/GameWrapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mxtar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nohup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nroff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/patch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/paste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pk2bm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgawk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pl2pm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pinky/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkill/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppm3d/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psnup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptked/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ptksh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rbash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pydoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/refer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/reset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rexec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/shred/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsync/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/skill/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/split/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sprof/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkmib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/touch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/trial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/troff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoddif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tsort/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtofits/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unrar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtojpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/users/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spctoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtopalm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/virmf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtorast/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/watch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtotiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/brushtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/which/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wishx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2x/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xargs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/write/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/addr2line/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xterm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zless/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zmore/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/palmtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfstriptable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ebrowse/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xwdtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tek2plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmnoise/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamstretch-gen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmalias/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lastlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmarith/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapmodify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapmodrdn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmdepth/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmslice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmgamma/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/asciitopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontexport/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/safe-rm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gtk-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sf2text/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfvirtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmnoraw/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpaste/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapadd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmremap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmquant/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmscale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmshear/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/c_rehash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtopng/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtorle/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtosgi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtosir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoxwd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pychecker/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sbiload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cfconv.wvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldappasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsewhich/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grep-changelog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ilbmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsexpand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpewrap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmquantall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dprofpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmchange/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uncompress/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/composite/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontimport/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libtoolize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcolors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kbd_mode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lesskey/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcs-checkin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/x3270if/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdither/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xbmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-idl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-ird/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pre-grohtml/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wine_wrapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamstretch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ldapsearch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sensors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tktwistd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tifftopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ximtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setJava/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkfontdesc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/find2perl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setleds/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/automake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setterm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoscan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autovbox/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getkeycodes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rubibtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libtool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pic2plot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypmatch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-agent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpgetnext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sha1sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lynx-color/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/newaliases/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfxload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvi2fax/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfxtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libmikmod-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypwhich/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xpmtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvicopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj2p/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj4l/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvitomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvitype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpnetstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-name-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfxtable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fontinst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixscribeps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/showkey/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/faillog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/scgcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/411toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/resizecons/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/anytopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/findaffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoyuvsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makempy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tryaffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/manhole/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/manpath/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/podchecker/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-remote-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mapscrn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipnote/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sliceprint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ziptool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/name-client/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fdf2tan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mattrib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_printlog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sirtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icon2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perl5.6.1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tap2deb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icombine/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcookie/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/updatedb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unzipsfx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/post-grohtml/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/logname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smidiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smidump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-mirror/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smilint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unicode_start/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eps2eps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gdbserver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lookbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/identify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/captoinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tcl3270/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/epsffit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mgrtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mailstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/test_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glibcbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/testparm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/testpcsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pooltype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclhelp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpusm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/filesize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rsyncstats/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/makeinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cabextract/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdfilt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/installifd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdloop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdplay/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/install-info/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xisdnload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/escputil-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_dump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_load/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_stat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkmanifest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag-result/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtowinicon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-event-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mbadblocks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yuvsplittoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sputoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/termidx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tzselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/findsmb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texfind/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texexec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texhash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/text2sf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texshow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texutil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2dvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2pdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoheader/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texdoctk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fitstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tgatoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmrelief/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/e2pall/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixfmps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfcslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixtpps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texlinks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwpps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwwps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aafire/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aaflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aainfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rasttopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-add/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gemtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gemtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aatest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/access/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/text2gif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfcsplain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/podselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixpsditps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tfmtodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmshadow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/amixer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gettextize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g32pbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmclean/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texconfig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcolormap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/orbit-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bibtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmspread/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkisofs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2html/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2roff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aweset/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/floppyd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cancel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/catman/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zsoelim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoacad/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strings/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtocpva/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoeyuv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoilbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtojpeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoleaf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtompeg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chattr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopict/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopjxl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopuzz/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtorgb3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spottopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexmf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexpk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chroot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacs-21.2.95/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmto10x/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psidtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoatk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtogem/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomda/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtolps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomgr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopi3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoptx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoxbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoybm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmrainbow/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixwish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkconch/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/extractres/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-request/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/colcrt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/column/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipcloak/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fmtutil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/detect_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cspctl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/diffpp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/csplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ChangeSymlinks/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tkmktap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dltest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_archive/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cytune/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsepath/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/double/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsestat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/kpsetool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capiinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/floppyd_installtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/envy24control/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/qrttoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpmlocate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmflash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmforge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessecho/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvilj6/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvipdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dvired/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/factor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zipsplit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmlabel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/formail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mogrify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdctl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esddsp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/leaftoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdmon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdrec/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/Check4SoundLibs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/finger/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gendiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmquant/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/websetroot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/genpref/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmshift/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/flex++/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/evtest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtobmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtogif/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoicr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtomap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoneo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopi1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopcx/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtotga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtouil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoxpm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtoyuv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expand/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/expiry/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/montage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmenlarge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/font2c/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sperl5.6.1/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gencat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getafm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/getopt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/composeglyphs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aasavefont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ogonkify/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifasm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giffix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifpos/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftlint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/funzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ftzoom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gftodvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gs_x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grodvi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grolbp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grolj4/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/grotty/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/groups/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmenhance/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strace-graph/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mptopdf/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/gunzip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gouldtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnmonp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hostid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnrate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hpftodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2rgb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2x11/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dosformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifclip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcomb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/qtconfig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixmacps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/indent/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/import/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/initex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fterror/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifovly/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giftext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoreconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixmswrd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgcomm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fstopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixpspps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keyconverter/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ispell/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isovfy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/munchlist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixwfwps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fttimer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/keygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/unprotoize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/esdsample/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jstest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aconnect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfconvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2latex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lm1100/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/linkto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/md5sum/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ttf2afm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fdformat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcedit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mcmfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/locale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/locate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.devel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sldtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2usage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lpstyl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lsattr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmscalefixed/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libIDL-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkfifo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mlabel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessopen.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/enscript/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mmroff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/autoupdate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/netcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/newgrp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aclocal/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chkdupexe/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgcmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbpasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtofiasco/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtools/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtrace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/formaticc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zeisstopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtexture/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpm2cpio/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/objcopy/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/objdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimptool-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcprofiledump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pf2afm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamcut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamoil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpegtopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbm2g3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/patgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/passwd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmupc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdf2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdfopt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdftex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/openvt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nslookup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perlcc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xdvi.bin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/nmblookup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gnuplot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmoil/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpgpg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/neotoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/platex/plugins.tml", 0xbfffe2bc) = -1 ENOENT (No such file or directory)
stat64("/usr/bin/pktogf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pktype/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/afm2tfm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pr3287/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pltotf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2pdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcut/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpad/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gphoto2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bmptoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmcie/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmmix/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmpat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psbook/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rawtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rawtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pstree/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdflatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ranlib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pyrexc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/python/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readcd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/recode/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rename/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/renice/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/all_notes_off/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcregrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamdeinterlace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcretest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hexdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rlogin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtoplainpnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/screen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/script/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpcgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/inputattach/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rgb3toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sfinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setsid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/libwmf-fontmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsdj500/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbmnt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbtar/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/slogin/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtotiffcmyk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gsftopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/soelim/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/splain/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/telnet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/spline/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texdoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/localedef/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tftopl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/loadkeys/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbcacls/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/states/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pi1toppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbumount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmmontage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fgconsole/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/strace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/t1mapper/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/eyuvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/buildhash/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial.lxdialog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpmqpack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/genscript/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/python2.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbmount/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/imgtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jpegtran/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/MakeTeXPK/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/twistd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkafmmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdatopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xsltproc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capifaxrcvd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbspool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uptime/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vftovp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/catchsegv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pi3topbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/virtex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/usbview/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wbinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vmstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lockfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gusload/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vptovf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whatis/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yuvtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whoami/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/widget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mpartition/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bashbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ksysguardd3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2gd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtolispm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/picttoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tapconvert/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printafm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/printenv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/icontopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/vimdiff/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamchannel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/animate/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/switch2nv/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpbulkget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mdeltree/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/uuidgen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/thinkjettopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xpenguins/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xtrace/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bdftops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pcxtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypchfn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ypchsh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zegrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/omfonts/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zfgrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmcrater/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/zforce/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pamfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setfdprm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pathchk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dircolors/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smicache/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmlife/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmmask/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmpage/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtogo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtolj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/apropos/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_recover/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/loadunimap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_checkpoint/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pdf2dsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ngettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fixdlsrps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/arecord/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smiquery/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpinform/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smistrip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/openssl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpcheck/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/procinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/procmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpdelta/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/fetchmail/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ifnames/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aseqnet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/aserver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/winicontoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfb2pfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixwish8.1.8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/includeres/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmbrighten/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xvminitoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkhybrid/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfbtops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3dinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mtoolstest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/volname/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/thumbpdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/protoize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perlbug/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/perldoc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/taskjuggler/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atmdiag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atmdump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gif2epsn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keyscan/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfgettable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ybmtopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lessclose.sh/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/texi2index/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/glib-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmedge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmhist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmnorm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmramp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmtofs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/smbcontrol/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/html2ps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/g3topbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgpring/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chrc.config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pyprojet/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmkernel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wftopfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmonisdn/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/imlib-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xgettext/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsclean/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/whereis/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rumakeindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cdparanoia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/encode_keychange/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/capifax/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/emacsclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rcsmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bootsplash-config/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltsh24/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltwish/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtobbnbg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoascii/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lispmtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/xmlcatalog/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtocmuwm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoepson/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmhistmap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkgmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pkgpack/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/odbcinst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pjtoppm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wish8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifburst/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifclrmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcolor/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtonokia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifcompose/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/apple_driver/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giffiltr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psfaddtable/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/yppasswd/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtox10bm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifhisto/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pfbtopfa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mkinfodir/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifinter/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/jaztool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/indxbib/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/infocmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rdjpgcom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pktopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifrotat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifrsize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifspnge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rpcclient/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/giftopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/alsaconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/readlink/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gifwedge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/epstopdf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psmandup/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/install/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/basename/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdial.tcl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2eps/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2fig/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wmf2svg/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wvdialconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sgitopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wbmptopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnm2ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/wrjpgcom/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2epsi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ps2frag/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pod2man/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcomp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmcrop/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmfile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmflip/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpstatus/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmpsnr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dosbootdisk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtile/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmtops/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/cdrecord/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmconvol/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/plotfont/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtomitsu/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gpm-root/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmpscale/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/suidperl/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtosixel/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.ignoredb/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ipython/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktexlsr/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mktextfm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bzip2recover/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/sbigtopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/chkstat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmreduce/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/dumpkeys/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/calibrate_ppa/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmdist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmfade/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmhist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmmake/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmnorm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmntsc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmqvga/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtolj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ppmtopj/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/old-name-server/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnmon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isdnrep/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/db2_dump185/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/msgunfmt/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/switch2nvidia/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/setkeycodes/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/hipstopgm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/alsamixer/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bltwish24/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/mshowfat/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isodump/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isoinfo/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pgmbentley/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/isosize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tclsh8.3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.dri/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/CheckFor3DLibs/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/3Ddiag.mesaglide/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/afmtodit/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/lwp-rget/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psresize/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/bunzip2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpconf/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ckeygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmto4425/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptest/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmptrap/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpvacm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/snmpwalk/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimp-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/ssh-keygen/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pygtk-codegen-1.2/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoepsi/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoicon/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pnmhisteq/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/socklist/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoln03/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtomacp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtoplot/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtopsg3/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtowbmp/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pslatex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/pbmtozinc/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/tixindex/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/gimptool/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psmerge/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/psselect/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/atktopbm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
stat64("/usr/bin/rletopnm/plugins.tml", 0xbfffe2bc) = -1 ENOTDIR (Not a directory)
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From glyph at twistedmatrix.com  Sun Apr 27 16:29:43 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 27 Apr 2003 17:29:43 -0500
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427174429.29b2c130.itamar@itamarst.org>
Message-ID: <BE4C732C-78FF-11D7-9C95-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Sunday, April 27, 2003, at 04:44 PM, Itamar Shtull-Trauring wrote:

>> Hi.  This is a resend of a message which was rejected, because too
>> big. Wise mailing list system! :-).  So, I removed 1255 lines from the
>> middle of the last transcript, showing the first 20 and the last 20
>> only. You'll merely have to believe me that those lines I removed were
>> there! :-)

Whoooops!  Since all the mailing list messages I get to OK are spam, I 
just scan the headers to make sure it's from someone valid.  This time, 
that meant I OK'd a huuge message (as I rejected 8 other spams...).  
Smart mailing list systems don't help if you have dumb mailing list 
admin.

> Thank you! We will see about fixing this ASAP.

This is a subtle issue... right now we're going to fix it by 
hard-coding /usr/bin and /usr/local/bin as paths that should not be 
checked, but the real problem is an interaction between Python's 
default path behavior, UNIX's filesystem layout, and the way 
twisted.python.plugins works.

Itamar and I had a few ideas for fixing it "for real" but the caveats 
that we would have to put in the documentation are so ugly that we 
discarded them.  Hard coding '/usr/bin' should fix most cases.

While we were in there, we also removed all paths with a '.' in them: 
since these can't be valid Python packages anyway, it doesn't affect 
its correctness, and it has the benefit of making mktap at least 30% 
faster, even without filtering /usr/bin.

Thanks for bringing 'strace mktap' to our attention.  I'm sure 
everybody will appreciate mktap being much less sluggish :).
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+rFnbvVGR4uSOE2wRAg4VAJ9GaUH7G0/8pSIzwPBkn5Do2ePw/ACeNHLf
4XcMqTTBAvo+gReI4HfjJ6E=
=YDQQ
-----END PGP SIGNATURE-----




From pinard at iro.umontreal.ca  Sun Apr 27 16:46:34 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 18:46:34 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
Message-ID: <oqr87na791.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> The default sys.path isn't there, but your `mktap' is located in
> /usr/bin, isn't it? :-)

It is.  Twisted was installed using `root', and with --prefix=/usr.

> > > And inventing a new environment variable is contrary to the stated goal,
> > > which is the lack of a registration process [...]

> > Stated where?  The book does not clearly indicate (or I did not read that
> > part yet) where `.tml' files are exactly looked for.

> The "Writing Twisted Plugins" section, IIRC.

I have "3.3 - Writing a New Plug-In for Twisted", and I presume this is what
you are referring to.  I read that section many times, and once more before
sending the above question, and once more now.
The documentation says that:

   Twisted finds its plug-ins by using pre-existing Python concepts;
   the load path, and packages.  Every top-level Python package[4]
   [...] can potentailly contain some number of plug-ins.  [...] The only
   difference between a package and a drop-in is the existence of a file
   named `plugins.tml' [...] that contains some special Python expression
   to identify the location of sub-packages or modules which can be loaded.

This is the most precise description I could find.  Maybe there is a
linguistic barrier (I'm not an English speaker), but to me, this is a
bit generic.  It is not said that plug-ins _are_ `plugins.tml' files, nor
that those TML files are necessarily at the same place the plug-ins are,
(like next to `__init__.py', say), only their existence is asserted.

It is not so clearly stated either that this is a goal that TML files shall
never be themselves registered.  Maybe you could use my naive reading
as a hint that the documentation could be more precise on these points,
as other readers might have the same interpretation difficulties than me.

> > [...] Being receptive to feedback is a good way to keep it coming,
> > you know.

> Trolls like this aren't necessary.

Hopefully, you'll come to know be better, and discover that I never troll.
I am a peaceful and joyful man, and try to speak in all honesty, always.
Oh, I may tease in a friendly way, but then, there are smileys not far.

> If you have a suggestion for improvement [...] then I'll gladly hear
> it out.

For now, being a Twisted newcomer that knows very little about it, my
contributions may be timid for a good while.  I'm just sharing the mere
existence of problems I see with my naive eyes, despite I know that in
the area of free software, patches and precise suggestions are usually
quite welcome.  I hope acquiring a bit of competence, and become a better
contributor with the time passing.  Let me apologise for all the false
notes I may sing in the meantime.

> If you don't believe me, modify your local Twisted installation to add a
> `print sys.path' to twisted.scripts.mktap.

I'm quite willing to believe you, you know! :-)

> [...] /usr/bin is in your sys.path because that's probably where your
> `mktap' is located.

Is Twisted modifying `sys.path' to include the first part of argv[0]?
Or is it standard Python behaviour?  I never noticed this yet in my own
scripts, but it might just have escaped my attention, and I might not know.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Sun Apr 27 17:20:57 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sun, 27 Apr 2003 19:20:57 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqr87na791.fsf@alcyon.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Sun, Apr 27, 2003 at 18:46:34 -0400
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca> <20030427215616.GA9407@toshi.anaprd01.md.comcast.net> <oqr87na791.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>

On 2003.04.27 18:46, Francois Pinard wrote:

> Is Twisted modifying `sys.path' to include the first part of argv[0]?
> Or is it standard Python behaviour?  I never noticed this yet in my own
> scripts, but it might just have escaped my attention, and I might not know.

Yeah, it's a common misconception about Python, actually. Yes, Python always
adds the location of the main script to sys.path (the misconception is that
people think it's "the current directory" rather than "the location of the main
script", because people so often run their main scripts from the directory
that they're located in.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From andrew-twisted at puzzling.org  Sun Apr 27 18:16:30 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 28 Apr 2003 10:16:30 +1000
Subject: [Twisted-Python] Twisted 1.0.4 - Tildes in the book
In-Reply-To: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
References: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428001630.GU26530@frobozz.local>

On Sun, Apr 27, 2003 at 12:13:43PM -0400, Francois Pinard wrote:
> Hi, still me...
> 
> In the Twisted 1.0.4 book -- I hope this reference is unambiguous enough,
> I have not seen more than one :-) -- there is a problem here and there with
> `~' being shown over the next character (`/' for example) instead of prior
> to it as intented.  At many places, tildes are OK, however.  Should I try
> reporting all problematic cases?  I guess not, as the problem is likely
> to be the same at all places, and some global action could be taken.
> The example I'm currently looking at is at the end of page 136 (6. Web
> Applications; 6.1.2 Before we begin) on this quote:
> 
>    Make sure the `TwistedQuotes' directory is on your PYTYONPATH, put
>    `webquotes.rpy' and `WebQuotes.html' in your `~/public_html' directory,
>    and you are ready to go.
> 
> The `~' and `/' on the last sentence are at the same character position.

This is already fixed in CVS :)

You will find ^ also has the same problem -- and it is also fixed in CVS :)

-Andrew.




From pinard at iro.umontreal.ca  Sun Apr 27 18:28:48 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 27 Apr 2003 20:28:48 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> > Is Twisted modifying `sys.path' to include the first part of argv[0]?
> > Or is it standard Python behaviour?

> Yes, Python always adds the location of the main script to sys.path [...]

Thanks for enlightening me.

For the case of the heaviness for `plugins.tml', at least on Unix, there
might be something we could do that would be reasonable on average,
but I'm not fully sure, I'll merely let judge those who are grown up! :-)

Usually, `/usr/bin/' and such do not have subdirectories, so if a
directory contains 1000 entries, one may immediately check if one of
these is `plugins.tml' by a direct try.  Then, if the number of links of
that directory -- itself -- is exactly 2, we can conclude that it has no
sub-directories, and that there is nothing more to check for this one.
We could then get more speed even for directories other than `/usr/bin/'.

This trick is heavily used in GNU find as a way to avoid `stat'ing all
entries in a directory to find sub-directories, when it can be proven
in advance there is no such sub-directories.  When the trick was added,
the speed-up that resulted was judged spectacular.

But I do not remember if Linux existed at the time.  As Linux seems to
beat many other systems at properly caching disk accesses, the benefits
of the trick might be more hidden.  A year ago, maybe, I tried the same
trick on Linux in hope of increasing the performance of `os.path.walk',
and the speed-up was not so significant.  This is part of my hesitation.

Moreover, maybe the above trick is meaningless on Windows or on MacOS.
I would be surprised if there are Unix filesystems where the link count of
2 for directories (`/' excepted) is not dependable; this might be another
thing to check.  With some luck, GNU find sources would tell us what the
problems may be.  The maintainers surely met them all! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From xlp223 at sina.com  Sun Apr 27 18:46:45 2003
From: xlp223 at sina.com (xlp223)
Date: Mon, 28 Apr 2003 08:46:45 +0800
Subject: [Twisted-Python] a problem about running php on twisted?
Message-ID: <20030428004645.8429.qmail@sina.com>

my system is 
window me
python 2.2.2
twisted 1.0.4
php 4.3.1
mysql
phpbb 2.0.4

i want to run phpbb on twisted 1.0.4 under window,
when i installed above software on window xp home edition,it was successful.
but when i installed above software on window me or window xp profession edition,it failed.

Step of my doing is 
1)create dir c:\pydoc and copy c:\python22\doc to c:\pydoc 
  create c:\pydoc\phpbb2 and copy phpbb2 to it

2)edit hello.rpy in c:\python22\scripts and save it in this dir
from twisted.web import static, twcgi

class PHPScript(twcgi.FilteredScript):
    filter = 'C:\\PHP\\php'

resource = static.File("c:\\pydoc")

resource.processors[".php"] = PHPScript

resource.indexNames = ['index.html','index.php']

3)run the command:
  python mktap.py web -p 80 --resource-script=hello.rpy -i index.html,index.php

4)run the command:
  python twistd.py -f web.tap -r win32

After the fourth step ran,i entered into the ie browser and input
http://localhost/   it is ok to show the html.
but while i input http://localhost/phpbb2 ,
it show 500 error. 

why? who can help me to solve it?

______________________________________

===================================================================



From itamar at itamarst.org  Sun Apr 27 19:25:47 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 21:25:47 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <20030427212547.6465e5b4.itamar@itamarst.org>

On Sun, 27 Apr 2003 19:20:57 -0400
Christopher Armstrong <radix at twistedmatrix.com> wrote:

> > Is Twisted modifying `sys.path' to include the first part of
> > argv[0]? Or is it standard Python behaviour?  I never noticed this
> > yet in my own scripts, but it might just have escaped my attention,
> > and I might not know.
> 
> Yeah, it's a common misconception about Python, actually. Yes, Python
> always adds the location of the main script to sys.path (the
> misconception is that people think it's "the current directory" rather
> than "the location of the main script", because people so often run
> their main scripts from the directory that they're located in.

Of course, mktap also adds "the current directory" (".") to sys.path.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Sun Apr 27 20:28:25 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 27 Apr 2003 22:28:25 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net> <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428022825.GA27647@meson.dyndns.org>

On Sun, Apr 27, 2003 at 02:25:28PM -0400, Francois Pinard wrote:
> [Christopher Armstrong]
> 
> > It's not using the shell load path.  /usr/bin just happens to be in
> > your sys.path.
> 
> No, it is not.  How can you be so assertive?
> 

  If your "twistd" is in /usr/bin, then the '' at the beginning of sys.path
refers to /usr/bin.  It is not at all clear to me that it would be correct
to remove '' from the .tml search path.  It would result in greatly enhanced
mktap performance, but it could also lead to confusing behavior (and the
behavior of .tml searching is more than confusing enough already).

> > And inventing a new environment variable is contrary to the stated goal,
> > which is the lack of a registration process (apart from what you need
> > to do to have your package work with Python).
> 
> Stated where?  The book does not clearly indicate (or I did not read that
> part yet) where `.tml' files are exactly looked for.
> 
> > Now, are you actually having a *problem* with the performance of mktap?
> 
> I'm surely a patient man.  Yet, `mktap' could be faster, and nobody
> would complain.

  I certainly wouldn't ;)

  What twisted/python/plugins.py does is not particularly difficult.  Python
makes it difficult to do efficiently (perhaps because it is difficult to do
efficiently in a platform independant way).  If someone with more POSIX-foo
than I could take a good look at what it does, and see if there really is a
portable way we could implement parts of it in C (and maybe get those bits
added to Python itself), that'd be fantastic.

> [snip - searched paths]

  Thanks again for the bug reports.  Please, keep them coming :)

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 38 days, 23:03, 7 users, load average: 0.58, 0.50, 0.46
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030427/e722171b/attachment.sig>

From itamar at itamarst.org  Sun Apr 27 20:32:08 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 27 Apr 2003 22:32:08 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for
 `plugins.tml'
In-Reply-To: <20030428022825.GA27647@meson.dyndns.org>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca>
	<20030427162702.GA7671@toshi.anaprd01.md.comcast.net>
	<oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca>
	<20030427171435.GC7671@toshi.anaprd01.md.comcast.net>
	<oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca>
	<20030428022825.GA27647@meson.dyndns.org>
Message-ID: <20030427223208.275ba0f0.itamar@itamarst.org>

On Sun, 27 Apr 2003 22:28:25 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   If your "twistd" is in /usr/bin, then the '' at the beginning of
>   sys.path
> refers to /usr/bin.  It is not at all clear to me that it would be
> correct to remove '' from the .tml search path.  It would result in
> greatly enhanced mktap performance, but it could also lead to
> confusing behavior (and the behavior of .tml searching is more than
> confusing enough already).

I think the fixes I made make it fast enough.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From exarkun at intarweb.us  Sun Apr 27 20:53:00 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Sun, 27 Apr 2003 22:53:00 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427223208.275ba0f0.itamar@itamarst.org>
References: <oqel3oc7gx.fsf@alcyon.progiciels-bpi.ca> <20030427162702.GA7671@toshi.anaprd01.md.comcast.net> <oqvfwzc2ak.fsf@alcyon.progiciels-bpi.ca> <20030427171435.GC7671@toshi.anaprd01.md.comcast.net> <oqof2rbxwn.fsf@alcyon.progiciels-bpi.ca> <20030428022825.GA27647@meson.dyndns.org> <20030427223208.275ba0f0.itamar@itamarst.org>
Message-ID: <20030428025300.GA31533@meson.dyndns.org>

On Sun, Apr 27, 2003 at 10:32:08PM -0400, Itamar Shtull-Trauring wrote:
> On Sun, 27 Apr 2003 22:28:25 -0400
> Jp Calderone <exarkun at intarweb.us> wrote:
> 
> >   If your "twistd" is in /usr/bin, then the '' at the beginning of
> > sys.path refers to /usr/bin.  It is not at all clear to me that it would
> > be correct to remove '' from the .tml search path.  It would result in
> > greatly enhanced mktap performance, but it could also lead to confusing
> > behavior (and the behavior of .tml searching is more than confusing
> > enough already).
> 
> I think the fixes I made make it fast enough.
> 

  I think it was fast enough before ;)  And my computer is *slow*.  But it
could be faster.

  Jp

-- 
"If you find a neighbor in need, you're responsible for serving that
neighbor in need, you're responsible for loving a neighbor just like you'd
like to love yourself." -- George W. Bush, Sept. 16, 2002
-- 
 up 38 days, 23:03, 7 users, load average: 0.58, 0.50, 0.46
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030427/0a6ba54c/attachment.sig>

From arashi1 at pd.jaring.my  Sun Apr 27 22:19:52 2003
From: arashi1 at pd.jaring.my (Mukhsein Johari)
Date: Mon, 28 Apr 2003 12:19:52 +0800
Subject: [Twisted-Python] Virtual hosting and twisted.mail and twisted.web
Message-ID: <200304281219.52777.arashi1@pd.jaring.my>

Hello all,

I'm doing some RnD for eventual migration to a twisted system. I'm not sure 
how 'production' the various bits of twisted are and I'm also not sure how 
all the bits would fit together. 

I'm thinking I'll need:
twisted.web (need to do virtual hosts on with this)
twisted.mail
twisted.names(?)

I think the setup I'm planning is quite common on the net but most people use 
apache and sendmail and something called virtualhostmonster?

Users should not need a unix account - for email, I'm thinking of using a db 
to store their username and passwords and get twisted.mail to check there 
when they try to authenticate to download their emails. Incidentally, would 
mbox or a dbms be better here?

Of course, each website of these users would be on the same machine with the 
same ip. They would have different domains though - with the content of their 
websites stored in (maybe) an rdbms. So:

Bob's homepage would be at:
http://www.bobshome.com

and his email would be: bob at bobshome.net

I would greatly appreciate pointers/tips to achieve this.




From tv at twistedmatrix.com  Mon Apr 28 01:18:11 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Apr 2003 10:18:11 +0300
Subject: [Twisted-Python] Virtual hosting and twisted.mail and twisted.web
In-Reply-To: <200304281219.52777.arashi1@pd.jaring.my>
References: <200304281219.52777.arashi1@pd.jaring.my>
Message-ID: <20030428071811.GB31294@lapdog>

On Mon, Apr 28, 2003 at 12:19:52PM +0800, Mukhsein Johari wrote:
> Users should not need a unix account - for email, I'm thinking of using a db 
> to store their username and passwords and get twisted.mail to check there 
> when they try to authenticate to download their emails. Incidentally, would 
> mbox or a dbms be better here?

	Maildir is better than mbox is better than dbms.

-- 
:(){ :|:&};:



From tv at twistedmatrix.com  Mon Apr 28 01:12:57 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 28 Apr 2003 10:12:57 +0300
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca> <20030427215616.GA9407@toshi.anaprd01.md.comcast.net> <oqr87na791.fsf@alcyon.progiciels-bpi.ca> <20030427232057.GA10462@toshi.anaprd01.md.comcast.net> <oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
Message-ID: <20030428071254.GA31294@lapdog>

On Sun, Apr 27, 2003 at 08:28:48PM -0400, Francois Pinard wrote:
> Usually, `/usr/bin/' and such do not have subdirectories, so if a
> directory contains 1000 entries, one may immediately check if one of
> these is `plugins.tml' by a direct try.  Then, if the number of links of
> that directory -- itself -- is exactly 2, we can conclude that it has no
> sub-directories, and that there is nothing more to check for this one.
> We could then get more speed even for directories other than `/usr/bin/'.

	The important thing is to make that optimization disabled if
	link count != 2. That is, in any other case you really need
	to go through the stat calls.

> But I do not remember if Linux existed at the time.  As Linux seems to
> beat many other systems at properly caching disk accesses, the benefits
> of the trick might be more hidden.  A year ago, maybe, I tried the same
> trick on Linux in hope of increasing the performance of `os.path.walk',
> and the speed-up was not so significant.  This is part of my hesitation.

	A Linux box with enough memory should have really good stat
	performance with a hot cache. For /usr/bin, it may be that
	the cache is mostly hot anyway. But even Linux will suffer
	the same performance problems with a cold cache or too little
	RAM to cache much.

-- 
:(){ :|:&};:



From xlp223 at sina.com  Mon Apr 28 02:52:28 2003
From: xlp223 at sina.com (xlp223)
Date: Mon, 28 Apr 2003 16:52:28 +0800
Subject: [Twisted-Python] speed on intranet?
Message-ID: <20030428085228.29234.qmail@sina.com>

my office has some computers with intranet.
i installed twisted 1.0.4 on a computer
when i visited the computer with twisted 1.0.4 from another
computer,speed in intranet is slow.

but since i enter into the internet on a computer through gateway,
speed of visiting the computer with web server of twisted 1.0.4 in intranet is quick.

why?

______________________________________

===================================================================



From pinard at iro.umontreal.ca  Mon Apr 28 07:51:03 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 09:51:03 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030428071254.GA31294@lapdog>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
	<oqllxva2in.fsf@alcyon.progiciels-bpi.ca>
	<20030428071254.GA31294@lapdog>
Message-ID: <oqsms2yblk.fsf@alcyon.progiciels-bpi.ca>

[Tommi Virtanen]
> [Francois Pinard]

> > [...] if the number of links of that directory -- itself -- is exactly
> > 2, we can conclude that it has no sub-directories, and that there
> > is nothing more to check for this one.

> The important thing is to make that optimization disabled if link count
> != 2.  That is, in any other case you really need to go through the
> stat calls.

If I remember well, GNU `find' keeps the link count for a given directory.
Every time it stats an entry which is a sub-directory, it decreases the
link count.  When the link count reaches 2, the loop is exited (provided
`stat' calls are only needed for directory recursion -- `find' sometimes
need them for other purposes).

> A Linux box with enough memory should have really good stat performance
> with a hot cache.  [...] But even Linux will suffer the same performance
> problems with a cold cache or too little RAM to cache much.

One may consider that Twisted may also be used on lesser Unices than
Linux -- I'm not going to name any! :-) -- where the performance hit might
hurt more.  As a good rule, I think one should not overly rely on various
systems' disk cache, and be on the parsimonious side while accessing disks.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 28 07:54:12 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 09:54:12 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Heavy search for `plugins.tml'
In-Reply-To: <20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
References: <oq65ozbpiv.fsf@alcyon.progiciels-bpi.ca>
	<20030427215616.GA9407@toshi.anaprd01.md.comcast.net>
	<oqr87na791.fsf@alcyon.progiciels-bpi.ca>
	<20030427232057.GA10462@toshi.anaprd01.md.comcast.net>
Message-ID: <oqof2qybgb.fsf@alcyon.progiciels-bpi.ca>

[Christopher Armstrong]

> [...] it's a common misconception about Python, actually. Yes,
> Python always adds the location of the main script to sys.path (the
> misconception is that people think it's "the current directory" rather
> than "the location of the main script", because people so often run
> their main scripts from the directory that they're located in.

Interesting.  Thanks!

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Mon Apr 28 08:14:40 2003
From: pinard at iro.umontreal.ca (Francois Pinard)
Date: 28 Apr 2003 10:14:40 -0400
Subject: [Twisted-Python] Re: Twisted 1.0.4 - Tildes in the book
In-Reply-To: <20030428001630.GU26530@frobozz.local>
References: <oq4r4jdiko.fsf@alcyon.progiciels-bpi.ca>
	<20030428001630.GU26530@frobozz.local>
Message-ID: <oqk7deyai7.fsf@alcyon.progiciels-bpi.ca>

[Andrew Bennetts]
> [Francois Pinard]

> > The `~' and `/' on the last sentence are at the same character position.

> This is already fixed in CVS :) You will find ^ also has the same
> problem -- and it is also fixed in CVS :)

Thanks!  In fact, I remembered that I've seen the problem with `^', but
I did not have at hand an example of it, so I kept silent on this one...

P.S. - I'm still learning, a bit overwhelmed, but not discouraged yet! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From jdub at perkypants.org  Mon Apr 28 08:10:12 2003
From: jdub at perkypants.org (Jeff Waugh)
Date: Tue, 29 Apr 2003 00:10:12 +1000
Subject: [Twisted-Python] speed on intranet?
In-Reply-To: <20030428085228.29234.qmail@sina.com>
References: <20030428085228.29234.qmail@sina.com>
Message-ID: <20030428141012.GQ24149@lazarus>

<quote who="xlp223">

> my office has some computers with intranet.
> i installed twisted 1.0.4 on a computer
> when i visited the computer with twisted 1.0.4 from another
> computer,speed in intranet is slow.
> 
> but since i enter into the internet on a computer through gateway,
> speed of visiting the computer with web server of twisted 1.0.4 in intranet is quick.
> 
> why?

Possibly lack of reverse DNS on your local network, depending on what
twisted is doing - I could be speaking from my orifice. (If it's trying to
do a reverse lookup, it's timing out in the process, thus appearing to be
slow.)

(If this *is* happening, why is twisted doing the lookup by default?)

- Jeff

-- 
linux.conf.au 2004: Adelaide, Australia         http://lca2004.linux.org.au/
 
       "A rest with a fermata is the moral opposite of the fast food
           restaurant with express lane." - James Gleick, Faster



From cce at clarkevans.com  Mon Apr 28 10:09:35 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 28 Apr 2003 16:09:35 +0000
Subject: [Twisted-Python] Resource.render() returning NOT_DONE_YET
Message-ID: <20030428160935.GA68316@doublegemini.com>

I was just giving a quick Twisted tutorial to someone using
twisted and as we were breaking page construction into more
than one chunk... an unexpected stumbling block occurred --
returning NOT_DONE_YET form the resource's render() function.

I was thinking about two other options:

  1.  Perhaps NOT_DONE_YET could just be None, this 
      way, it can be the default return value.  As I'm
      browsing through my code this is the most common
      return... why not make it the default.

  2.  Alternatively, allow a Deferred to be a return 
      value.  Then the underlying caller can add 
      result.finish() to the deferred chain.   This
      has the advantage of not requiring finish() to
      really be managed.   Either the return value is
      a string, a Deferred, (or for backwards compatibiliy
      NOT_DONE_YET).  In either of the primary cases,
      result.finish() always gets called... thus making
      it easier on newbies.

Ideally, both of the above options could be used...

Best,

Clark



From cce at clarkevans.com  Mon Apr 28 10:17:56 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Mon, 28 Apr 2003 16:17:56 +0000
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428160935.GA68316@doublegemini.com>
References: <20030428160935.GA68316@doublegemini.com>
Message-ID: <20030428161756.GA68410@doublegemini.com>

On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
| I was just giving a quick Twisted tutorial to someone using
| twisted and as we were breaking page construction into more
| than one chunk... an unexpected stumbling block occurred --
| returning NOT_DONE_YET form the resource's render() function.
| 
| I was thinking about two other options:
| 
|   1.  Perhaps NOT_DONE_YET could just be None, this 
|       way, it can be the default return value.  As I'm
|       browsing through my code this is the most common
|       return... why not make it the default.

        Err, this isn't exactly what I was thinking.  What
        I was proposing...  if during the scope of the render()
        function, req.write() is called, then a None value
        would be an allowable return.   And if None is returned,
        req.finish() would be called automagically.

|   2.  Alternatively, allow a Deferred to be a return 
|       value.  Then the underlying caller can add 
|       result.finish() to the deferred chain.   This
|       has the advantage of not requiring finish() to
|       really be managed.   Either the return value is
|       a string, a Deferred, (or for backwards compatibiliy
|       NOT_DONE_YET).  In either of the primary cases,
|       result.finish() always gets called... thus making
|       it easier on newbies.
| 
| Ideally, both of the above options could be used...
| 
| Best,
| 
| Clark



From bob at redivi.com  Mon Apr 28 11:11:33 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 28 Apr 2003 13:11:33 -0400
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428161756.GA68410@doublegemini.com>
Message-ID: <7603D404-799C-11D7-B5C0-000A95686CD8@redivi.com>

On Monday, Apr 28, 2003, at 12:17 America/New_York, Clark C. Evans 
wrote:

> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
> | I was just giving a quick Twisted tutorial to someone using
> | twisted and as we were breaking page construction into more
> | than one chunk... an unexpected stumbling block occurred --
> | returning NOT_DONE_YET form the resource's render() function.
> |
> | I was thinking about two other options:
> |
> |   1.  Perhaps NOT_DONE_YET could just be None, this
> |       way, it can be the default return value.  As I'm
> |       browsing through my code this is the most common
> |       return... why not make it the default.
>
>         Err, this isn't exactly what I was thinking.  What
>         I was proposing...  if during the scope of the render()
>         function, req.write() is called, then a None value
>         would be an allowable return.   And if None is returned,
>         req.finish() would be called automagically.
>
> |   2.  Alternatively, allow a Deferred to be a return
> |       value.  Then the underlying caller can add
> |       result.finish() to the deferred chain.   This
> |       has the advantage of not requiring finish() to
> |       really be managed.   Either the return value is
> |       a string, a Deferred, (or for backwards compatibiliy
> |       NOT_DONE_YET).  In either of the primary cases,
> |       result.finish() always gets called... thus making
> |       it easier on newbies.
> |
> | Ideally, both of the above options could be used...

Or, you could just deprecate NOT_DONE_YET and say "if you're doing 
something that uses req.write you need to return a deferred".

For case 1, you return a deferred with an empty rval (None or '').  
This signifies that you took care of req.write.
For case 2, you return a deferred with the page as the rval.  This 
signifies that you want the server to req.write.

I think that's the simplest way, and takes the return values for render 
down to three, but really two for new code:
1) a string
2) a deferred
3) a deprecated NOT_DONE_YET




From stephen at theboulets.net  Mon Apr 28 11:20:20 2003
From: stephen at theboulets.net (Stephen Boulet)
Date: Mon, 28 Apr 2003 12:20:20 -0500
Subject: [Twisted-Python] Serving up php apps: gallery
Message-ID: <200304281220.20796.stephen@theboulets.net>

Anyone familiar with the php app "The Gallery" for online photo galleries? Is 
this the type of thing twisted can serve up?

I understand it makes use of the apache module "mod_rewrite"...

Thanks.

-- 
Stephen      
              From here to there
             and there to here,
           funny things are everywhere.  -- Dr Seuss





From radix at twistedmatrix.com  Mon Apr 28 12:08:52 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 28 Apr 2003 14:08:52 -0400
Subject: [Twisted-Python] Serving up php apps: gallery
In-Reply-To: <200304281220.20796.stephen@theboulets.net>; from stephen@theboulets.net on Mon, Apr 28, 2003 at 13:20:20 -0400
References: <200304281220.20796.stephen@theboulets.net>
Message-ID: <20030428180852.GA1422@toshi.anaprd01.md.comcast.net>

On 2003.04.28 13:20, Stephen Boulet wrote:
> Anyone familiar with the php app "The Gallery" for online photo galleries? Is 
> this the type of thing twisted can serve up?

There are problems with using Twisted/PHP right now. PHP won't work unless you've
compiled it with some special flags for "CGI Support", at least as of one of the
recent PHP versions.

I'm not even sure if PHP support should remain in. Nobody's maintaining it (not
to mention that it's hard to support, apparently), and there are much better
solutions for serving PHP than what Twisted can offer.

> I understand it makes use of the apache module "mod_rewrite"...

I don't know what you're talking about wrt mod_rewrite,  but if you've already
got Apache, you should definitely be using Apache's PHP support with mod_php.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From glyph at twistedmatrix.com  Mon Apr 28 13:57:15 2003
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Apr 2003 14:57:15 -0500
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <20030428161756.GA68410@doublegemini.com>
Message-ID: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On Monday, April 28, 2003, at 11:17 AM, Clark C. Evans wrote:

> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
> | I was just giving a quick Twisted tutorial to someone using
> | twisted and as we were breaking page construction into more
> | than one chunk... an unexpected stumbling block occurred --
> | returning NOT_DONE_YET form the resource's render() function.
> |
> | I was thinking about two other options:
> |
> |   1.  Perhaps NOT_DONE_YET could just be None, this
> |       way, it can be the default return value.  As I'm
> |       browsing through my code this is the most common
> |       return... why not make it the default.

The reasoning behind not allowing None as a default value is that 
forgetting is too easy.  If you're writing a simple request that has a 
render() method that looks like

     def render(self, request):
         if self.authenticated:
             return self.goodies

the default behavior should not be "hang forever".

>         Err, this isn't exactly what I was thinking.  What
>         I was proposing...  if during the scope of the render()
>         function, req.write() is called, then a None value
>         would be an allowable return.   And if None is returned,
>         req.finish() would be called automagically.

What if you wanted to start writing the page in the render() method but 
keep writing it later?  Then we have None as a synonym for NOT_DONE_YET 
except in certain situations where you've done something to the request?

> |   2.  Alternatively, allow a Deferred to be a return
> |       value.  Then the underlying caller can add
> |       result.finish() to the deferred chain.   This
> |       has the advantage of not requiring finish() to
> |       really be managed.   Either the return value is
> |       a string, a Deferred, (or for backwards compatibiliy
> |       NOT_DONE_YET).  In either of the primary cases,
> |       result.finish() always gets called... thus making
> |       it easier on newbies.

I've discussed this with several different people at various times... 
the trouble is, there isn't really a use-case that Deferreds make 
easier.  render() ends up being a relatively low-level interface, and 
the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
that has been implemented with it.

I am definitely a True Believer in the Deferred, but in this case it 
just doesn't seem worth the inconvenience of deprecating things and 
shuffling stuff around for a vanishingly small benefit.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.1 (Darwin)

iD8DBQE+rYejvVGR4uSOE2wRAnNVAJ9yv7vhkmlVSYT/Ba5HhGF9UmXaGwCghHEa
Il76B0P3doYwTxldfvakhms=
=as/e
-----END PGP SIGNATURE-----




From bruce at cubik.org  Mon Apr 28 14:41:39 2003
From: bruce at cubik.org (Bruce Mitchener)
Date: Mon, 28 Apr 2003 14:41:39 -0600
Subject: [Twisted-Python] Re: [Twisted-commits] "no such user" is too informative, no need
 to give attackers more information than necessary
In-Reply-To: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com>
References: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com>
Message-ID: <3EAD9203.4030204@cubik.org>

itamarst CVS wrote:
> Modified files:
> Twisted/twisted/web/distrib.py 1.47 1.48
> 
> Log message:
> "no such user" is too informative, no need to give attackers more information than necessary

While there is good motivation for not making this public info, it seems 
like it would be a good thing to make this available to someone 
debugging the system, either by way of the log file or some other means.

While not necessarily appropriate for Twisted, one approach that I've 
used well in the past (in my own webserver and web app software) was to 
have an error page that recognized authenticated users and would display 
generic errors to unknown or unauthorized users, and 
informative/descriptive errors to authorized people (as well as direct 
access to the web-based tools used to determine what went wrong and so on).

Maybe some sort of policy framework might let that happen within Twisted 
or some other generalized logging infrastructure.  But at the least, it 
seems like this sort of info should be logged.

Cheers,

  - Bruce

> ViewCVS links:
> http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/web/distrib.py.diff?r1=text&tr1=1.47&r2=text&tr2=1.48&cvsroot=Twisted
> 
> Index: Twisted/twisted/web/distrib.py
> diff -u Twisted/twisted/web/distrib.py:1.47 Twisted/twisted/web/distrib.py:1.48
> --- Twisted/twisted/web/distrib.py:1.47	Tue Dec  3 03:21:48 2002
> +++ Twisted/twisted/web/distrib.py	Mon Apr 28 13:36:52 2003
> @@ -230,10 +230,7 @@
>              pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell \
>                       = pwd.getpwnam(username)
>          except KeyError:
> -            return error.ErrorPage(http.NOT_FOUND,
> -                                   "No Such User",
> -                                   "The user %s was not found on this system." %
> -                                   repr(username))
> +            return error.NoResource()
>          if sub:
>              twistdsock = os.path.join(pw_dir, self.userSocketName)
>              rs = ResourceSubscription('unix',twistdsock)




From astreib at indiana.edu  Mon Apr 28 15:29:08 2003
From: astreib at indiana.edu (Allan Streib)
Date: Mon, 28 Apr 2003 16:29:08 -0500 (EST)
Subject: [Twisted-Python] mktap problem, cPickle.UnpickleableError
Message-ID: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>

Hi,

I am trying to create an XMLRPC server based on the plugins example in the
HOWTO documentation.  My TAP construction module looks like:

    from twisted.web import server
    from MyXMLRPCServer import methods

    from twisted.python import usage

    class Options(usage.Options):
        optParameters = [["port", "p", 8080, "Port number for XMLRPC Server."],
                         ["ldapurl", None, "ldap://localhost/", "URL for ldap directory server."],
                         ["ldapbinddn", None, "cn=Manager,dc=iu,dc=edu", "Bind DN for directory"],
                         ["ldappw", None, None, "Password for directory Bind DN"]]

        def postOptions(self):
            if self['ldappw'] is None:
                raise usage.UsageError, "Must provide option ldappw"

    def updateApplication(app, config):
        port = int(config['port'])
        factory = server.Site(methods.MyXMLRPCMethods(config))
	 app.listenTCP(port, factory)


 When I run mktap with the appropriate parameters for my application, I get:

    Traceback (most recent call last):
      File "/usr/local/bin/mktap", line 30, in ?
        run()
      File "/usr/local/lib/python2.2/site-packages/twisted/scripts/mktap.py", line 252, in run
        a.save()
      File "/usr/local/lib/python2.2/site-packages/twisted/internet/app.py", line 754, in save
        dumpFunc(self, f)
      File "/usr/local/lib/python2.2/site-packages/twisted/internet/app.py", line 736, in dumpFunc
        _dump(obj, file, 1)
    cPickle.UnpickleableError: Cannot pickle <type 'LDAP'> objects

I think I am getting this because my "MyXMLRPCMethods" instance contains a
connection to the LDAP Server.  So what is the best approach to work
around this.  Sorry if this is a newbie question; I am a newbie.

Allan



From exarkun at intarweb.us  Mon Apr 28 15:42:19 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Mon, 28 Apr 2003 17:42:19 -0400
Subject: [Twisted-Python] mktap problem, cPickle.UnpickleableError
In-Reply-To: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>
References: <Pine.LNX.4.51.0304281615590.8713@garp.ucs.indiana.edu>
Message-ID: <20030428214219.GA6512@meson.dyndns.org>

On Mon, Apr 28, 2003 at 04:29:08PM -0500, Allan Streib wrote:
> 
> Hi,
> 
> I am trying to create an XMLRPC server based on the plugins example in the
> HOWTO documentation.  My TAP construction module looks like:
> 
> [snip]
> 
> I think I am getting this because my "MyXMLRPCMethods" instance contains a
> connection to the LDAP Server.  So what is the best approach to work
> around this.  Sorry if this is a newbie question; I am a newbie.
> 

  Don't connect to the LDAP server until your application starts up.  This
may be best done in a Factory's startFactory() method or a Service's
startService method, or hackfully in one of your object's __setstate__
methods.

  mktap is writing a configuration file to disk, not actually running your
app.  So you don't want to set up any runtime stuff, like network
connections, in updateApplication().

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 39 days, 17:03, 8 users, load average: 0.67, 0.68, 0.64
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030428/f5c07df3/attachment.sig>

From uwe at oss4u.com  Mon Apr 28 15:45:07 2003
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 28 Apr 2003 14:45:07 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] "no such user" is too informative, no need to give attackers more information than necessary
In-Reply-To: <3EAD9203.4030204@cubik.org>
References: <E19ADUj-0003eM-00@pyramid.twistedmatrix.com> <3EAD9203.4030204@cubik.org>
Message-ID: <200304281445.07171.uwe@oss4u.com>

It would already be helpful if there was a simple log entry, console message 
etc.  about this

On Monday 28 April 2003 01:41 pm, Bruce Mitchener wrote:
> itamarst CVS wrote:
> > Modified files:
> > Twisted/twisted/web/distrib.py 1.47 1.48
> >
> > Log message:
> > "no such user" is too informative, no need to give attackers more
> > information than necessary
>
> While there is good motivation for not making this public info, it seems
> like it would be a good thing to make this available to someone
> debugging the system, either by way of the log file or some other means.
>
> While not necessarily appropriate for Twisted, one approach that I've
> used well in the past (in my own webserver and web app software) was to
> have an error page that recognized authenticated users and would display
> generic errors to unknown or unauthorized users, and
> informative/descriptive errors to authorized people (as well as direct
> access to the web-based tools used to determine what went wrong and so on).
>
> Maybe some sort of policy framework might let that happen within Twisted
> or some other generalized logging infrastructure.  But at the least, it
> seems like this sort of info should be logged.
>
> Cheers,
>
>   - Bruce
>
> > ViewCVS links:
> > http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/twisted/
> >web/distrib.py.diff?r1=text&tr1=1.47&r2=text&tr2=1.48&cvsroot=Twisted
> >
> > Index: Twisted/twisted/web/distrib.py
> > diff -u Twisted/twisted/web/distrib.py:1.47
> > Twisted/twisted/web/distrib.py:1.48 ---
> > Twisted/twisted/web/distrib.py:1.47	Tue Dec  3 03:21:48 2002 +++
> > Twisted/twisted/web/distrib.py	Mon Apr 28 13:36:52 2003
> > @@ -230,10 +230,7 @@
> >              pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir,
> > pw_shell \ = pwd.getpwnam(username)
> >          except KeyError:
> > -            return error.ErrorPage(http.NOT_FOUND,
> > -                                   "No Such User",
> > -                                   "The user %s was not found on this
> > system." % -                                   repr(username))
> > +            return error.NoResource()
> >          if sub:
> >              twistdsock = os.path.join(pw_dir, self.userSocketName)
> >              rs = ResourceSubscription('unix',twistdsock)
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
	UC

--
Open Source Solutions 4U, LLC	2570 Fleetwood Drive
Phone:  +1 650 872 2425		San Bruno, CA 94066
Cell:   +1 650 302 2405		United States
Fax:    +1 650 872 2417




From mario at ruggier.org  Mon Apr 28 15:46:53 2003
From: mario at ruggier.org (Mario Ruggier)
Date: Mon, 28 Apr 2003 23:46:53 +0200
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>
Message-ID: <ECAECBFE-79C2-11D7-B928-000393756786@ruggier.org>

On lundi, avr 28, 2003, at 21:57 Europe/Amsterdam, Glyph Lefkowitz 
wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On Monday, April 28, 2003, at 11:17 AM, Clark C. Evans wrote:
>
>> On Mon, Apr 28, 2003 at 04:09:35PM +0000, Clark C. Evans wrote:
>> | I was just giving a quick Twisted tutorial to someone using
>> | twisted and as we were breaking page construction into more
>> | than one chunk... an unexpected stumbling block occurred --
>> | returning NOT_DONE_YET form the resource's render() function.
>> |
>> | I was thinking about two other options:
>> |
>> |   1.  Perhaps NOT_DONE_YET could just be None, this
>> |       way, it can be the default return value.  As I'm
>> |       browsing through my code this is the most common
>> |       return... why not make it the default.
>
> The reasoning behind not allowing None as a default value is that 
> forgetting is too easy.  If you're writing a simple request that has a 
> render() method that looks like
>
>     def render(self, request):
>         if self.authenticated:
>             return self.goodies
>
> the default behavior should not be "hang forever".
>
>>         Err, this isn't exactly what I was thinking.  What
>>         I was proposing...  if during the scope of the render()
>>         function, req.write() is called, then a None value
>>         would be an allowable return.   And if None is returned,
>>         req.finish() would be called automagically.
>
> What if you wanted to start writing the page in the render() method 
> but keep writing it later?  Then we have None as a synonym for 
> NOT_DONE_YET except in certain situations where you've done something 
> to the request?
>
>> |   2.  Alternatively, allow a Deferred to be a return
>> |       value.  Then the underlying caller can add
>> |       result.finish() to the deferred chain.   This
>> |       has the advantage of not requiring finish() to
>> |       really be managed.   Either the return value is
>> |       a string, a Deferred, (or for backwards compatibiliy
>> |       NOT_DONE_YET).  In either of the primary cases,
>> |       result.finish() always gets called... thus making
>> |       it easier on newbies.
>
> I've discussed this with several different people at various times... 
> the trouble is, there isn't really a use-case that Deferreds make 
> easier.  render() ends up being a relatively low-level interface, and 
> the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
> that has been implemented with it.
>
> I am definitely a True Believer in the Deferred, but in this case it 
> just doesn't seem worth the inconvenience of deprecating things and 
> shuffling stuff around for a vanishingly small benefit.

Completely agree. Related to this issue, i feel, is what should be best 
practices
for a twisted web application? With all that's available, and little 
imagination,
one can very easily get all tangled up in blue ;)

In view of a site that I have the intention to build, I have been 
trying to select
what best implementation architecture to adopt, looking always for the 
most
stupidly simple. I also want to be able to handle errors as nicely as 
possible
for the users -- meaning I would like to, _whenever_ possible, return a
fully consistent page (and hopefully the one expected by the user) that
provides also the error info, but that would not require the user to do 
anything
more than correct form input data on the _same_ page (without even 
hitting Back
on the browser). I hate the feeling of being surprised with drastic 
error pages,
with all my input data apparently disappeared (also dislike pop-ups 
asking to
repost data, ...). Of course these errors will be of the type 'Ah, that 
one exists
already please try another'... This is all somewhat application 
specific, and
about interfaces, but i feel implementation style can both help or 
hinder this.

A further issue that i find very nagging (at least during development), 
is that
if an error occurs within the presentation layer, the response hangs 
forever.
(These should of course be only development bugs, but i would not like 
to
deliver an app that *may* have presentation bugs yet unknown.) I 
therefore
wrap the call to the real presentation handler in a try/catch. Errors 
in the
business logic are raised to the error handler, so this is not a 
problem. Since I
want my errors to be rendered with a fully functional response, the 
error callback
simply sets the additional response data object, and passes to the
presentation layer (this assumes that the business layer has behaved 
nicely
and attached to request the necessary and sufficient data objects, so 
that
the presentation can render it into a coherent page).

  I am going for this anatomy:


class WebAppPage(twisted.web.resource.Resource):

     def render(self, request):
         request.setHeader('Content-Type', 'text/html; charset=utf-8')
         ...
         d = threads.deferToThread(self.businessLogic, request) # to be 
threadpooled ;)
         d.addCallback(self.presentationLogic, request)
         d.addErrback(self.errBack, request)
         return NOT_DONE_YET

   def businessLogic(self, request):
       # uses functionality that is neatly factored in external modules 
;)
       # and attaches the resulting data objects to request in a 
designated
       # container, separate from args (e.g. respargs).
       # Knows no HTML, never calls request.write()

  def presentationLogic(self, result, request, error=None):
     try:
         self._presentationLogic(result, request, error)
     except:
         import sys
         request.write( '''Ooops, error in presentation layer:<p>%s: 
%s</p>'''
                         % ( sys.exc_info()[0], ' -- 
'.join(sys.exc_info()[1].args) ))

   def _presentationLogic(self, result, request, error=None):
       # combines the data objects in args, and result (if any - thus 
may be None)
       # with rendering templates, html, js, css, ...

def errBack(self, error, request):
     self.presentationLogic([],request,error=error)


This suggests that my site's rpy resources should inherit from a 
subclass of resource,
to at least define a common error callback and presentation try/catch 
wrap for the whole
site. However, a small thing escapes me -- how do i guarantee specific 
and automatic
treatment to the request object for all my resources? E.g. setting 
specific headers,
reading cookies/session info, etc., without coding this in every rpy 
instance?

       mario




From bob at redivi.com  Mon Apr 28 16:14:57 2003
From: bob at redivi.com (Bob Ippolito)
Date: Mon, 28 Apr 2003 18:14:57 -0400
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com>
Message-ID: <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>

On Monday, Apr 28, 2003, at 15:57 America/New_York, Glyph Lefkowitz 
wrote:
>> |   2.  Alternatively, allow a Deferred to be a return
>> |       value.  Then the underlying caller can add
>> |       result.finish() to the deferred chain.   This
>> |       has the advantage of not requiring finish() to
>> |       really be managed.   Either the return value is
>> |       a string, a Deferred, (or for backwards compatibiliy
>> |       NOT_DONE_YET).  In either of the primary cases,
>> |       result.finish() always gets called... thus making
>> |       it easier on newbies.
>
> I've discussed this with several different people at various times... 
> the trouble is, there isn't really a use-case that Deferreds make 
> easier.  render() ends up being a relatively low-level interface, and 
> the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
> that has been implemented with it.
>
> I am definitely a True Believer in the Deferred, but in this case it 
> just doesn't seem worth the inconvenience of deprecating things and 
> shuffling stuff around for a vanishingly small benefit.

The error handling inherent with Deferred makes it worth it IMHO.  I 
see a lot of NOT_DONE_YET responses fail and it just hangs for the web 
user unless the developer of the function did a lot more work.. a 
deferred could just errback on a failure rather than having to summon 
the web traceback mechanism manually.

-bob




From cce at clarkevans.com  Mon Apr 28 20:37:26 2003
From: cce at clarkevans.com (Clark C. Evans)
Date: Tue, 29 Apr 2003 02:37:26 +0000
Subject: [Twisted-Python] Re: Resource.render() returning NOT_DONE_YET
In-Reply-To: <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>
References: <9C3CBDBA-79B3-11D7-B13E-000393C9700E@twistedmatrix.com> <D8BD39B8-79C6-11D7-BCBE-000A95686CD8@redivi.com>
Message-ID: <20030429023726.GA70169@doublegemini.com>

On Mon, Apr 28, 2003 at 01:11:33PM -0400, Bob Ippolito wrote:
| Or, you could just deprecate NOT_DONE_YET and say "if you're doing
| something that uses req.write you need to return a deferred".
...
| I think that's the simplest way, and takes the return values for
| render down to three, but really two for new code:
| 1) a string
| 2) a deferred
| 3) a deprecated NOT_DONE_YET

Advantages:
 - keeps the clear error condition when mis-used
 - NOT_DONE_YET uglyness goes away
 - request.finish() can be handled automatically, ie, the
   default errback/callback and the end of the chain can
   make sure that request.finish() is called
 - could provide for better default exception handling,
   the first thing I did as a newbie was dig to find out
   how to get those wonderful traceback pages working
   for deferred failures... why not let it be the default?

I'd add one more... option though:

  4) If request.finish() has already been called, then
     it is acceptable to return None

On Mon, Apr 28, 2003 at 06:14:57PM -0400, Bob Ippolito wrote:
| On Monday, Apr 28, 2003, at 15:57 America/New_York, Glyph Lefkowitz wrote:
| >>|   2.  Alternatively, allow a Deferred to be a return
| >>|       value.  Then the underlying caller can add
| >>|       result.finish() to the deferred chain.   This
| >>|       has the advantage of not requiring finish() to
| >>|       really be managed.   Either the return value is
| >>|       a string, a Deferred, (or for backwards compatibiliy
| >>|       NOT_DONE_YET).  In either of the primary cases,
| >>|       result.finish() always gets called... thus making
| >>|       it easier on newbies.
| >
| >I've discussed this with several different people at various times... 
| >the trouble is, there isn't really a use-case that Deferreds make 
| >easier.  render() ends up being a relatively low-level interface, and 
| >the NOT_DONE_YET/write/finish API is quite convenient for the stuff 
| >that has been implemented with it.
| >
| >I am definitely a True Believer in the Deferred, but in this case it 
| >just doesn't seem worth the inconvenience of deprecating things and 
| >shuffling stuff around for a vanishingly small benefit.
| 
| The error handling inherent with Deferred makes it worth it IMHO.  I 
| see a lot of NOT_DONE_YET responses fail and it just hangs for the web 
| user unless the developer of the function did a lot more work.. a 
| deferred could just errback on a failure rather than having to summon 
| the web traceback mechanism manually.

I've had two use cases for NOT_DONE_YET they are:

   1.  You've already use req.write() several times followed
       by req.finish()... and then return NOT_DONE_YET.   This is
       confusing usage, primarly beacuse you *are* done.   This
       usage is supported by option #4 above.

   2.  You've setup a async call to finish handling the request,
       and in this case, it makes sence to return Deferred.  In
       this case returning NOT_DONE_YET, and having to call 
       req.finish() is just extra, unnecessary baggage; further,
       default error handling isn't provided when it should be.

NOT_DONE_YET is less than optimal in both use cases where it is used,
both of these cases confused a newbie that I was trying to teach.

Best,

Clark



From m at moshez.org  Tue Apr 29 03:34:07 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 09:34:07 -0000
Subject: [Twisted-Python] Tagging
Message-ID: <20030429093407.7593.qmail@green.zadka.com>

FYI: last-python2_1-compatible is a tag that marks the last place where
Twisted is (in theory) Python 2.1 compatible

-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From pinard at iro.umontreal.ca  Tue Apr 29 08:41:50 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 10:41:50 -0400
Subject: [Twisted-Python] Reloading of the same `.rpy' file
Message-ID: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>

Hi, Twisted people.

Playing with resource files, I noticed that the outer-level code within
`.rpy' files is executed again every time the page using them is fetched by
the browser.  If `test.py' contains:

---------------------------------------------------------------------->
print "Hello!"

...
resource = ...
----------------------------------------------------------------------<

than each `Alt-R' within Netscape, once `http://localhost:8080/test.rpy' has
been loaded, will have "Hello!" added to the Twisted log file.

I would have expected the resource file to be loaded once, and reused after
without being wholly re-initialised each time.  I tried "import remanent"
within the resource file, and checked that "remanent" is loaded and
intialised only once (moreover, it gets compiled!), so I'm tempted to move
all code from `test.rpy' into `remanent.py' and reduce `test.rpy' to a mere:

---------------------------------------------------------------------->
import remanent
resource = remanent.resource
----------------------------------------------------------------------<

which is a bit ridiculous if it has to be a standard idiom.

On the other hand, for debugging, I agree it is a bit handsome being able to
modify `test.rpy' and trying the new version without restarting the server.
This is a weak justification however.  Whenever the `.tap' file needs to be
rebuilt, the server needs to be restarted anyway.  This soon warrants a
Makefile, and adding another dependency over `test.rpy' is a simple matter.

Maybe the Twisted design is trying, here, to spare memory by not keeping
`.rpy' code in its memory, in case these would be very numerous or contain a
lot of code?  Or trying to protect itself against leaks from such, but how?
I have the vague feeling that I'm missing something important in this area.
Would some soul be kind enough to accept enlightening mine? :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From lafou at wanadoo.fr  Tue Apr 29 09:23:12 2003
From: lafou at wanadoo.fr (Philippe =?ISO-8859-1?Q?Lafoucri=E8re?=)
Date: 29 Apr 2003 17:23:12 +0200
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <1051629791.3016.14.camel@biproc>

I think Zope has the same behaviour. The solution is often to put a
reverse proxy before twisted.web.

On Tue, 2003-04-29 at 16:41, François Pinard wrote:
> Hi, Twisted people.
> 
> Playing with resource files, I noticed that the outer-level code within
> `.rpy' files is executed again every time the page using them is fetched by
> the browser.  If `test.py' contains:
> 
> ---------------------------------------------------------------------->
> print "Hello!"
> 
> ...
> resource = ...
> ----------------------------------------------------------------------<
> 
> than each `Alt-R' within Netscape, once `http://localhost:8080/test.rpy' has
> been loaded, will have "Hello!" added to the Twisted log file.
> 
> I would have expected the resource file to be loaded once, and reused after
> without being wholly re-initialised each time.  I tried "import remanent"
> within the resource file, and checked that "remanent" is loaded and
> intialised only once (moreover, it gets compiled!), so I'm tempted to move
> all code from `test.rpy' into `remanent.py' and reduce `test.rpy' to a mere:
> 
> ---------------------------------------------------------------------->
> import remanent
> resource = remanent.resource
> ----------------------------------------------------------------------<
> 
> which is a bit ridiculous if it has to be a standard idiom.
> 
> On the other hand, for debugging, I agree it is a bit handsome being able to
> modify `test.rpy' and trying the new version without restarting the server.
> This is a weak justification however.  Whenever the `.tap' file needs to be
> rebuilt, the server needs to be restarted anyway.  This soon warrants a
> Makefile, and adding another dependency over `test.rpy' is a simple matter.
> 
> Maybe the Twisted design is trying, here, to spare memory by not keeping
> `.rpy' code in its memory, in case these would be very numerous or contain a
> lot of code?  Or trying to protect itself against leaks from such, but how?
> I have the vague feeling that I'm missing something important in this area.
> Would some soul be kind enough to accept enlightening mine? :-)
-- 
Philippe Lafoucrière <lafou at wanadoo.fr>
InFuzzion




From m at moshez.org  Tue Apr 29 09:34:42 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 15:34:42 -0000
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429153442.23304.qmail@green.zadka.com>

On 29 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> which is a bit ridiculous if it has to be a standard idiom.

The standard idiom is to use the Twisted Registry. Look at
http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From pinard at iro.umontreal.ca  Tue Apr 29 11:39:49 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 13:39:49 -0400
Subject: [Twisted-Python] Re: Newbie reading Twisted book!
In-Reply-To: <20030423062513.GD10754@frobozz.local>
References: <oqsmsay3ge.fsf@alcyon.progiciels-bpi.ca>
	<20030423055927.3937.qmail@green.zadka.com>
	<20030423062513.GD10754@frobozz.local>
Message-ID: <oqel3lyzh6.fsf@titan.progiciels-bpi.ca>

[Andrew Bennetts]
> [Moshe Zadka]
> > [Francois Pinard]

> > > I just want to share my enthusiasm, so far, at reading the Twisted book

> > The book is a collaboration of many Twisted developers.

> [...] Brian Warner, who is my personal documentation hero for writing the
> PB chapter virtually single-handedly! :)

Yes, there surely is a lot of substance in that single chapter.  It cannot
be swallowed all at once, people like me have to digest in small gulps! :-)

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 12:05:18 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:05:18 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429153442.23304.qmail@green.zadka.com>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429153442.23304.qmail@green.zadka.com>
Message-ID: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>

[Moshe Zadka]

> The standard idiom is to use the Twisted Registry.  Look at
> http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml

Thanks for the pointer, yet I'm not ready to understand it yet.  It seems I
should know `Componentized' first.  Later, hopefully.  I wonder what is the
extent and scope of a `registry'.  Exactly one per `.rpy' file presumably?

Does this explain why, or why not, `.rpy' files are reloaded many times?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 12:07:25 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:07:25 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <1051629791.3016.14.camel@biproc>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
Message-ID: <oq4r4hyy76.fsf@titan.progiciels-bpi.ca>

[Philippe Lafoucrière]

> The solution is often to put a reverse proxy before twisted.web.

I'm at lost here.  What is a reverse proxy in the context of Twisted?
(Could you give me some pointers?)  And how does a reverse proxy (whatever
it is) change the reloading behaviour of Twisted for `.rpy' files?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From itamar at itamarst.org  Tue Apr 29 12:19:41 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 29 Apr 2003 14:19:41 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
	<oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429141941.1386dd4e.itamar@itamarst.org>

On 29 Apr 2003 14:07:25 -0400
pinard at iro.umontreal.ca (François Pinard) wrote:

> > The solution is often to put a reverse proxy before twisted.web.

Nope.

> I'm at lost here.  What is a reverse proxy in the context of Twisted?
> (Could you give me some pointers?)  And how does a reverse proxy
> (whatever it is) change the reloading behaviour of Twisted for `.rpy'
> files?

It doesn't affect .rpy's in any way whatsoever. 

RPYs are designed to be reloaded every time. If you don't want this
behaviour, don't use RPYs - rather, create your Resource tree in memory,
rather than out of the filesystem.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From pinard at iro.umontreal.ca  Tue Apr 29 12:51:11 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 14:51:11 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <87he8ml8is.fsf@flibuste.net>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net>
Message-ID: <oqznm9xhls.fsf@titan.progiciels-bpi.ca>

[William Dode]
> [VAN DER HEIJDEN Maarten]

> > Being new to twisted, I didn't find in the documentation an example (in
> > DOM Template, widgets, woven or resource templates ), for implementing a
> > form.  Someone has a link?

> this is an extended ReportRequest with form :

Thanks a lot, William.

Your example (quoted in full below, for reference) has been both useful and
instructive.  I have a question, though.  What is the purpose of `isLeaf'?
It does not seem to be called ever, when I run your example.

---------------------------------------------------------------------->
import twisted.web.resource
import cgi
from twisted.protocols import http
from twisted.web import resource,error
class ReportRequest(twisted.web.resource.Resource):
    """ ReportRequest with forms and cookies """
    def isLeaf(self):
        return true
    def render(self, request):
        user = request.getUser()
        password = request.getPassword()

        if not user:
            request.setResponseCode(401, 'Authentication needed')
            request.setHeader('WWW-authenticate', 'Basic realm="enter new user and password"')
            errpage = error.ErrorPage(http.UNAUTHORIZED,"Unauthorized","401 Authentication required")
            return errpage.render(request)

        session = request.getSession()

        try:
            if request.args["text"]!="":
                session.text = request.args["text"]
                session.touch()
        except:
            pass # no text arg
        session_text = getattr(session,"text","init")        
        # create and increment cookie counter,
        try:
            counter = int(request.getCookie("counter"))
            counter += 1
        except:
            counter = 0
        request.addCookie("counter",counter)
            
        cookies = request.received_cookies
        args = request.args
        path = request.path
        _, host, port = request.getHost()
        url = request.prePathURL()
        uri = request.uri
        secure = (request.isSecure() and "securely") or "insecurely"
        return ("""\
<HTML>
    <HEAD><TITLE>Welcome To Twisted Python Reporting</title></head>

    <BODY><H1>Welcome To Twisted Python Reporting</H1>
    <UL>
    <LI>User : %(user)s
    <LI>Password : %(password)s
    <LI>The path to me is %(path)s
    <LI>The host I'm on is %(host)s
    <LI>The port I'm on is %(port)s
    <LI>I was accessed %(secure)s
    <LI>A URL to me is %(url)s
    <LI>My URI to me is %(uri)s
    <LI>Session text : %(session_text)s
    <LI>Cookies (incremented in each reload): <pre>%(cookies)s</pre>
    <LI>Form args : <pre>%(args)s</pre>
    </UL>
    <hr>
    <h2>Testing args</h2>
    Test args : <a href='?a=1&a=2&a=3&b=4'>?a=1&amp;a=3&amp;a=3&amp;b=4</a><br>
    Test forms with method=post enctype='multipart/form-data'
    <form method=post enctype='multipart/form-data'>
    <table>
    <tr><td> text : </td><td> <input name=text type=text> </td></tr>
    <tr><td> file : </td><td> <input name=file type=file> </td></tr>
    <tr><td> select (multiple) : </td><td>
    <select name=select multiple><option>one</option><option>two</option><option>three</option></select>
    </td></tr></table>
    <input type=submit></form>
    </body>
</html>""" % vars())
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From pinard at iro.umontreal.ca  Tue Apr 29 13:11:14 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 15:11:14 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429141941.1386dd4e.itamar@itamarst.org>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<1051629791.3016.14.camel@biproc>
	<oq4r4hyy76.fsf@titan.progiciels-bpi.ca>
	<20030429141941.1386dd4e.itamar@itamarst.org>
Message-ID: <oqvfwxxgod.fsf@titan.progiciels-bpi.ca>

[Itamar Shtull-Trauring]

> RPYs are designed to be reloaded every time.  If you don't want this
> behaviour, don't use RPYs - rather, create your Resource tree in memory,
> rather than out of the filesystem.

Hello, Itamar.  Thanks for replying.

I'm not trying to challenge the design, I'm much too new to Twisted. :-) I'm
just not understanding it.  What are the reasons for reloading `.rpy' files
every time?  There ought to be some advantages, but I'm not seeing them.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From m at moshez.org  Tue Apr 29 13:14:00 2003
From: m at moshez.org (Moshe Zadka)
Date: 29 Apr 2003 19:14:00 -0000
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>
References: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>, <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429153442.23304.qmail@green.zadka.com>
Message-ID: <20030429191400.31585.qmail@green.zadka.com>

On 29 Apr 2003, pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=) wrote:

> Does this explain why, or why not, `.rpy' files are reloaded many times?

No, it merely talks about how to persistize objects...such as your resource.
See the example :)
 
-- 
Moshe Zadka -- http://moshez.org/
Buffy: I don't like you hanging out with someone that... short.
Riley: Yeah, a lot of young people nowadays are experimenting with shortness.
Agile Programming Language -- http://www.python.org/



From radix at twistedmatrix.com  Tue Apr 29 13:27:34 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:27:34 -0400
Subject: [Twisted-Python] Reloading of the same `.rpy' file
In-Reply-To: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 10:41:50 -0400
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429192734.GA16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 10:41, François Pinard wrote:
> ---------------------------------------------------------------------->
> import remanent
> resource = remanent.resource
> ----------------------------------------------------------------------<
> 
> which is a bit ridiculous if it has to be a standard idiom.

Why is it ridiculous? The semantics for .rpy are good because they're flexible;
you can either recreate your Resource object every time, or you can cache it.

Also, mind that .rpys are meant to be as tiny as possible; they're just
supposed to be glue code between your web app code and the web server.

> Maybe the Twisted design is trying, here, to spare memory by not keeping
> `.rpy' code in its memory, in case these would be very numerous or contain a
> lot of code?

Nope, just trying to remain flexible. It gives you a choice between CPU usage
(recreating your Resource every time) and memory usage (keeping your Resources
around in memory between requests).

> Or trying to protect itself against leaks from such, but how?
> I have the vague feeling that I'm missing something important in this area.
> Would some soul be kind enough to accept enlightening mine? :-)

Also, IIRC there's some sort of caching mechanism that glyph implemented for
rpys, but I don't remember how it works. IIRC, you just add "cache()" to the
top of your .rpy, or something. Unfortunately, it's not documented as it is.
Can someone comment on this? I'll add some docstrings to ResourceScript
if someone explains it.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From pinard at iro.umontreal.ca  Tue Apr 29 13:35:47 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 15:35:47 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - Possible typo in twisted.web.vhost ?
Message-ID: <oqr87lxfjg.fsf@titan.progiciels-bpi.ca>

For Twisted 1.0.4, file twisted/web/vhost.py, line 100 is:

---------------------------------------------------------------------->
        return self.hosts.get(host, self.default or error.NoResource("host %s not in vhost map" % repr(host)))
----------------------------------------------------------------------<

Could it be (?) that this line should be written:

---------------------------------------------------------------------->
        return self.hosts.get(host, self.default) or error.NoResource("host %s not in vhost map" % repr(host))
----------------------------------------------------------------------<

or, to keep it under 80 columns:

---------------------------------------------------------------------->
        return (self.hosts.get(host, self.default)
                or error.NoResource("host %s not in vhost map" % repr(host)))
----------------------------------------------------------------------<

If we can rely on Python 2.2, we could simplify it a bit more:

---------------------------------------------------------------------->
        return (self.hosts.get(host, self.default)
                or error.NoResource("host %r not in vhost map" % host))
----------------------------------------------------------------------<

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From radix at twistedmatrix.com  Tue Apr 29 13:41:23 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:41:23 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <oq8yttyyap.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 14:05:18 -0400
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca> <20030429153442.23304.qmail@green.zadka.com> <oq8yttyyap.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429194123.GE16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 14:05, François Pinard wrote:
> [Moshe Zadka]
> 
> > The standard idiom is to use the Twisted Registry.  Look at
> > http://twistedmatrix.com/documents/howto/using-twistedweb.xhtml
> 
> Thanks for the pointer, yet I'm not ready to understand it yet.  It seems I
> should know `Componentized' first.  Later, hopefully.  I wonder what is the
> extent and scope of a `registry'.  Exactly one per `.rpy' file presumably?
> 
> Does this explain why, or why not, `.rpy' files are reloaded many times?

In itself, it doesn't, but that caching mechanism I mentioned in my last email
uses it (I just went and read the source in twisted/web/script.py)

And the scope of the registry is one per top-level static.File instance; i.e.,
if you have a web server set up with `mktap web --path foo', then there will
only be one Registry unless you create some static.Files explicitly elsewhere.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From radix at twistedmatrix.com  Tue Apr 29 13:44:58 2003
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 29 Apr 2003 15:44:58 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <oqznm9xhls.fsf@titan.progiciels-bpi.ca>; from pinard@iro.umontreal.ca on Tue, Apr 29, 2003 at 14:51:11 -0400
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429194458.GG16135@toshi.anaprd01.md.comcast.net>

On 2003.04.29 14:51, François Pinard wrote:

> 
> Your example (quoted in full below, for reference) has been both useful and
> instructive.  I have a question, though.  What is the purpose of `isLeaf'?
> It does not seem to be called ever, when I run your example.

> class ReportRequest(twisted.web.resource.Resource):
>     """ ReportRequest with forms and cookies """
>     def isLeaf(self):
>         return true

It looks like he meant to just say "isLeaf = True". It's expected to be an 
attribute, not a method. It worked accidentally because all function objects
are True.

What isLeaf *does* is to say "Stop looking for more children beyond me".
i.e., this resource will not have `getChild' called on it; it will be
immediately render()ed. You can handle the rest of the path segments by
accessing them through the request object passed to the render method.

-- 
 Twisted | Christopher Armstrong: International Man of Twistery
  Radix  |          Release Manager,  Twisted Project
---------+     http://twistedmatrix.com/users/radix.twistd/



From warner at lothar.com  Tue Apr 29 14:08:00 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 13:08:00 -0700 (PDT)
Subject: [Twisted-Python] Re: twisted web, documentation
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
 <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429.130800.59496401.warner@lothar.com>

pinard at iro.umontreal.ca (François Pinard) writes:
> 
> Your example (quoted in full below, for reference) has been both useful and
> instructive.  I have a question, though.  What is the purpose of `isLeaf'?
> It does not seem to be called ever, when I run your example.

...

> class ReportRequest(twisted.web.resource.Resource):
>     def isLeaf(self):
>         return true

Oops. 'isLeaf' is a boolean attribute, not a function. It is usually set at
the class level, and overrides t.w.r.Resource's default of '0'. So this class
should really be written as follows:

  class ReportRequest(twisted.web.resource.Resource):
      isLeaf = 1

(the ReportRequest example worked because a bound method happens to be "true"
when evaluated in a conditional. However, it would never have been able to
return "false").

'isLeaf' is a flag tells the server to stop walking through the URL path.
Each slash-delimited component of the URL is put into a list, and the
resource tree is walked (the Site is asked for a child indexed by the first
component, that child is asked for one indexed by the second, etc). If a
child is returned with the .isLeaf flag set, the walk is terminated, and that
child is responsible for dealing with the rest of the path on its own. The
request.postpath array contains the remaining components of the URL.

This is useful when you want to change the resource lookup behavior below
some sub-node of the URL tree. Above the child that sets .isLeaf=1, the usual
Resource.getChild() scheme is used to find a Resource. Below that, the child
can do whatever it wants.

For example, let's pretend that we have a web server which serves users'
~/public_html/ directories, but each user is in a department, and the URL is
always supposed to look like http://foo.com/Department/User/Dir/Subdir/File .
The top two levels of the tree (department and user) must do some kind of
lookup to find out who is in which department and where their home directory
is. The child that is returned by the User lookup would set .isLeaf=1, and
then get the actual file based upon the directory path contained in the
remaining part of the URL. We're basically breaking the URL into two pieces:
[http://foo.com/Department/User], and [Dir/Subdir/File]. The resource tree is
walked with the first part, but the second part is given all at once (as a
list) to the results of the lookup on the first part.

 class MySite(Resource):
  def getChild(self, path, request):
    dept = self.findDepartment(path) # returns a DepartmentResource
    if dept == None:
        return error.NoResource("No such department '%s'" % path)
    return dept

 class DepartmentResource(Resource):
  def getChild(self, path, request):
    user = self.findUser(path) # returns a UserResource
    if user == None:
        return error.NoResource("No such user '%s'" % path)
    return user
  
 class UserResource(Resource):
  isLeaf = 1 # don't call our .getChild(), just do render()
  def render(self, request):
    # rest of URL is in request.postpath
    for p in request.postpath:
      if p == "..": return error.NoResource("naughty naughty")
    filename = os.path.join(self.homedir(), "public_html", request.postpath)
    file = File(filename)
    return file.render(request)


I'm sure there are better examples of isLeaf out there.. this is what comes
to my mind when I see that flag.


cheers,
 -Brian



From pinard at iro.umontreal.ca  Tue Apr 29 14:10:13 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 16:10:13 -0400
Subject: [Twisted-Python] Re: Reloading of the same `.rpy' file
In-Reply-To: <20030429192734.GA16135@toshi.anaprd01.md.comcast.net>
References: <oqk7ddz7pt.fsf@titan.progiciels-bpi.ca>
	<20030429192734.GA16135@toshi.anaprd01.md.comcast.net>
Message-ID: <oqn0i9xdy2.fsf@titan.progiciels-bpi.ca>

[Christopher Armstrong]

> On 2003.04.29 10:41, Fran�ois Pinard wrote:
> > ---------------------------------------------------------------------->
> > import remanent
> > resource = remanent.resource
> > ----------------------------------------------------------------------<
> > 
> > which is a bit ridiculous if it has to be a standard idiom.

> Why is it ridiculous?

Sorry if the word offended anyone, it surely was not my intent to do so.

I only meant that if there is really no advantage at reloading an RPY file,
then there is an advantage at loading it only once (unless such RPY files
are so numerous or so big that it would create a memory problem, but it
might likely not be the case in practice), which is avoiding spurious or
useless re-initialisation.  Then, the proper way would be to use a two-liner
for each such file, and having such small bootstraps is questionable.

> The semantics for .rpy are good because they're flexible; you can either
> recreate your Resource object every time, or you can cache it.  [...]  It
> gives you a choice between CPU usage (recreating your Resource every time)
> and memory usage (keeping your Resources around in memory between
> requests).  [...] Also, mind that .rpys are meant to be as tiny as
> possible; they're just supposed to be glue code between your web app code
> and the web server.

If a resource was consuming a lot of memory, I would understand.  But as you
just explained, RPY files are meant to be tiny, and then unlikely to build
tons of fresh bytes in Python structures.

Yet, within a small RPY file, one might import from library big modules
having Resource based classes, and resources are meant to be freed
immediately after having been consumed.  For example, such a library
resource might define some big triple-quoted static string holding the
template of an HTML page.  But then, the module will stay imported after the
RPY file disappears, the big string will not be freed, and reloading will
not trigger significant memory savings.  If the template string gets read
from disk each time, it will likely be kept in a local variable in the
`render' method, and will be freed as soon as we exit that method, so
reloading does not in itself trigger memory savings in that case either.

So, just to help me understand, could you illustrate by an example, a likely
case demonstrating the flexibility gained by multiple reloading?

> Also, IIRC there's some sort of caching mechanism that glyph implemented for
> rpys, but I don't remember how it works.

It might be those Registry instances which Moshe referred to in a recent
message, and which are sketched a bit quickly in the book, page 23, (2.3.2
"Using Twisted.Web", section "Resource Scripts").

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From warner at lothar.com  Tue Apr 29 14:36:27 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 13:36:27 -0700 (PDT)
Subject: [Twisted-Python] Twisted 1.0.4 - Possible typo in
 twisted.web.vhost ?
References: <oqr87lxfjg.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030429.133627.131689907.warner@lothar.com>

pinard at iro.umontreal.ca (François Pinard) writes:

>         return self.hosts.get(host, self.default or error.NoResource("host %s not in vhost map" % repr(host)))

> Could it be (?) that this line should be written:

>         return (self.hosts.get(host, self.default)
>                 or error.NoResource("host %s not in vhost map" % repr(host)))

The two are actually logically the same, but I prefer yours because it puts
off the creation of the NoResource error until it is really necessary. Fixed
in CVS.

thanks,
 -Brian



From pinard at iro.umontreal.ca  Tue Apr 29 14:42:55 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 29 Apr 2003 16:42:55 -0400
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <20030429.130800.59496401.warner@lothar.com>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
	<20030429.130800.59496401.warner@lothar.com>
Message-ID: <oqissxxcfk.fsf@titan.progiciels-bpi.ca>

[Brian Warner]
> [Fran�ois Pinard]

> > [...] What is the purpose of `isLeaf'?  It does not seem to be called
> > ever, when I run your example. [...]

> > class ReportRequest(twisted.web.resource.Resource):
> >     def isLeaf(self):
> >         return true

> Oops. 'isLeaf' is a boolean attribute, not a function. [...]

Brian and Christopher, let me thank you both for your replies.

I did not find a presentation in the manual (but I'm far from having read it
all yet) about a tree organisation of resources.  Brian's explanation is
quite comprehensive, and in my opinion, should happily find its way into the
current Twisted book.  Is there someone listening, who is taking care of
such things?  We surely have good documentation material in Brian's reply!

     --------------------

I also found, by re-reading various saved messages from the list, that three
of them were especially instructive about the nature and justification of
TAPs, which are:

   2003-02-14 07:42 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>
   2003-02-11 15:17 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>
   2003-02-11 01:35 -0500  Moshe Zadka <twisted at moshez.org>

all having "In Defense of Taps (was Re: [Twisted-Python] where to begin)"
for a Subject.  Also likely interesting for users is:

   2003-02-12 08:51 -0500  Glyph Lefkowitz <glyph at twistedmatrix.com>

In all these messages, and surely others, there is documentation material
that could be retrofitted in the Twisted manual (editing out some unwanted
parts and maybe rephrasing others).  Is there someone, taking care of the
documentation, to whom I should direct a copy of the above (if needed)?

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From warner at lothar.com  Tue Apr 29 15:23:53 2003
From: warner at lothar.com (Brian Warner)
Date: Tue, 29 Apr 2003 14:23:53 -0700 (PDT)
Subject: [Twisted-Python] spawnProcess and environment inheritance
Message-ID: <20030429.142353.133032176.warner@lothar.com>

I wanted to ask what people thought about a potential change to the way
reactor.spawnProcess() sets up the child's environment variables.

The current default is to provide an empty environment to the child:
reactor.spawnProcess() has a env={} default parameter. I'm wondering if this
should be changed to env=None, which would instruct os.execvpe() to let the
child inherit the environment from the parent process.

This showed up in a recent test_process.py failure, which effectively
compared a "file not found" error message obtained with popen3() against a
similar one retrieved with reactor.spawnProcess(). The test failed when it
was run in a localized environment. popen3() inherited $LANG from the parent
(in this case, LANG was set to French), and the error message came out in one
language, whereas spawnProcess() cleared the environment, and the error came
out in English. The two didn't match, so the test harness thought
spawnProcess had somehow failed.

I've changed test_process.py to explicitly pass env=None to all child
processes, but given that Python's popen2 and os.exec library functions all
default to inheritance rather than an empty environment, I'm thinking it
might be a good idea to match them and have spawnProcess() default to
inheritance too.

pros: Less surprise factor for those used to normal unix behavior. Would
reduce the differences between programs run from the shell and those run from
inside spawnProcess.

cons: Sometimes you want to clean the environment as a security measure. The
existing behavior has been around for a while and changing it might cause
problems.

What do you all think?

The change in question, in case you'd like to try it out, would be the
following one-liner:

Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.72
diff -u -r1.72 default.py
--- twisted/internet/default.py	21 Apr 2003 15:32:15 -0000	1.72
+++ twisted/internet/default.py	29 Apr 2003 21:19:32 -0000
@@ -149,7 +149,7 @@
 
     # IReactorProcess
 
-    def spawnProcess(self, processProtocol, executable, args=(), env={}, path=None,
+    def spawnProcess(self, processProtocol, executable, args=(), env=None, path=None,
                      uid=None, gid=None, usePTY = 0):
         p = platform.getType()
         if p == 'posix':



thanks,
 -Brian



From andrew-twisted at puzzling.org  Tue Apr 29 19:05:44 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 30 Apr 2003 11:05:44 +1000
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <oqissxxcfk.fsf@titan.progiciels-bpi.ca>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca> <20030429.130800.59496401.warner@lothar.com> <oqissxxcfk.fsf@titan.progiciels-bpi.ca>
Message-ID: <20030430010544.GE13813@frobozz.local>

On Tue, Apr 29, 2003 at 04:42:55PM -0400, Fran?ois Pinard wrote:
[...]
> 
> In all these messages, and surely others, there is documentation material
> that could be retrofitted in the Twisted manual (editing out some unwanted
> parts and maybe rephrasing others).  Is there someone, taking care of the
> documentation, to whom I should direct a copy of the above (if needed)?

Send it to the list, or if you think it's too large, post it on a website
somewhere and send the URL to the list.

You are welcome to send it directly to me, but then you'll miss out on feedback
from everyone else...

-Andrew.




From shrogers at ionet.net  Mon Apr 28 10:27:07 2003
From: shrogers at ionet.net (steve@shrogers.com)
Date: Mon, 28 Apr 2003 11:27:07 -0500 (GMT)
Subject: [Twisted-Python] WovenQuotes Howto Problem
Message-ID: <6897150.1051543643452.JavaMail.nobody@wamui01.slb.atl.earthlink.net>

I'm playing with Twisted 1.0.4.  After making it through the first couple of TwistedQuotes examples, I get the following failure with the TwistedQuotes example.

2003/04/28 10:05 [HTTPChannel,0,127.0.0.1] exceptions.TypeError: getData() takes exactly 1 argument (2 given)




From anthony at interlink.com.au  Wed Apr 30 02:01:05 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Wed, 30 Apr 2003 18:01:05 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore?
Message-ID: <200304300801.h3U815Q05758@localhost.localdomain>

I kinda suspected that twisted might be slower than asyncore for the
straight go-hell-for-leather usage in pythondirector, but I'd not got
around to actually testing it. It seems like it's nearly 30% slower
than the equivalent asyncore code! This seems a bit higher than I'd
expect -- but given all the extra overhead of object creation I guess
it's not all that surprising. Current CVS python, Twisted 1.0.4.

Has anyone else done similar benchmarking and found different results?
I'm not planning on switching the default back to asyncore - the 
asyncore code is just too brittle for my tastes.

(FWIW, the two equivalent modules are 
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythondirector/pythondirector/pydirector/pdnetworktwisted.py?only_with_tag=HEAD
and 
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pythondirector/pythondirector/pydirector/pdnetworkasyncore.py?only_with_tag=HEAD
)

Anthony

--
Anthony Baxter     <anthony at interlink.com.au>
It's never too late to have a happy childhood.



From wilk-ml at flibuste.net  Wed Apr 30 06:46:13 2003
From: wilk-ml at flibuste.net (William Dode)
Date: 30 Apr 2003 14:46:13 +0200
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <20030430010544.GE13813@frobozz.local>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp>
	<87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca>
	<20030429.130800.59496401.warner@lothar.com>
	<oqissxxcfk.fsf@titan.progiciels-bpi.ca>
	<20030430010544.GE13813@frobozz.local>
Message-ID: <87znm8up9m.fsf@flibuste.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> On Tue, Apr 29, 2003 at 04:42:55PM -0400, Fran?ois Pinard wrote:
> [...]
> > 
> > In all these messages, and surely others, there is documentation material
> > that could be retrofitted in the Twisted manual (editing out some unwanted
> > parts and maybe rephrasing others).  Is there someone, taking care of the
> > documentation, to whom I should direct a copy of the above (if needed)?
> 
> Send it to the list, or if you think it's too large, post it on a website
> somewhere and send the URL to the list.
> 
> You are welcome to send it directly to me, but then you'll miss out on feedback
> from everyone else...

A wiki could be ideal for this... examples and documentation draft.

I post two times my example, and it's the first time somebody correct it,
if i didn't look at the list (i'm very busy now) i could post the
mistake again...
Maybe somebody will look in the archive and use my first post with the
mistake !

-- 
William Dode - http://flibuste.net



From andrew-twisted at puzzling.org  Wed Apr 30 08:01:03 2003
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 1 May 2003 00:01:03 +1000
Subject: [Twisted-Python] Re: twisted web, documentation
In-Reply-To: <87znm8up9m.fsf@flibuste.net>
References: <59720C230F8BC54098777277F5E1068881C2D5@fininfomail.fininfo.grp> <87he8ml8is.fsf@flibuste.net> <oqznm9xhls.fsf@titan.progiciels-bpi.ca> <20030429.130800.59496401.warner@lothar.com> <oqissxxcfk.fsf@titan.progiciels-bpi.ca> <20030430010544.GE13813@frobozz.local> <87znm8up9m.fsf@flibuste.net>
Message-ID: <20030430140103.GB18706@frobozz.local>

On Wed, Apr 30, 2003 at 02:46:13PM +0200, William Dode wrote:
> Andrew Bennetts <andrew-twisted at puzzling.org> writes:
> 
> > Send it to the list, or if you think it's too large, post it on a website
> > somewhere and send the URL to the list.
> > 
> > You are welcome to send it directly to me, but then you'll miss out on feedback
> > from everyone else...
> 
> A wiki could be ideal for this... examples and documentation draft.
> 
> I post two times my example, and it's the first time somebody correct it,
> if i didn't look at the list (i'm very busy now) i could post the
> mistake again...
> Maybe somebody will look in the archive and use my first post with the
> mistake !

A wiki would probably be just as bad -- if people aren't looking in the list
archives for unreplied to patches, they won't check the wiki either, and
things would get lost.

The current recommended strategy is to post to the list, maybe post a
reminder (like you just did... thanks! :), and finally, if we still haven't
responded, add it to our bug tracker on SourceForge, so we won't forget it
for eternity.

Pestering random developers on IRC can work well, too, but that can require
a fair bit your time to make that work :)

-Andrew.




From tv at twistedmatrix.com  Wed Apr 30 10:01:59 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 30 Apr 2003 19:01:59 +0300
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
Message-ID: <20030430160159.GA28522@lapdog>

	Hi. Lately, I've been playing with using "mktap dns" as a
	resolver for my laptop. Except, it's making me angry.

	It doesn't reload resolv.conf. My resolv.conf nameserver list
	is changed by DHCP about twice per day, atleast.

	In fact, it even loads the resolv.conf only in __init__, so
	the list gets stored in the tap file. I need to mktap, tap2deb
	and dpkg -i whenever I switch subnets!

	Here's a quick-and-stupid patch that makes it reload
	resolv.conf regularly, currently made to reread it every
	minute. This is "close enough". Actually, I want to make
	it get a notification from somewhere..

	I definitely want this implemented. Please tell what direction
	should I go with the patch, and what do you think is missing
	from "production quality"?

Index: twisted/names/client.py
===================================================================
RCS file: /cvs/Twisted/twisted/names/client.py,v
retrieving revision 1.31
diff -u -r1.31 client.py
--- twisted/names/client.py	29 Mar 2003 18:10:14 -0000	1.31
+++ twisted/names/client.py	30 Apr 2003 15:56:00 -0000
@@ -30,6 +30,8 @@
 
 import socket
 import os
+import errno
+import time
 
 # Twisted imports
 from twisted.python.runtime import platform
@@ -52,6 +54,10 @@
     protocol = None
     connections = None
 
+    resolv = None
+    resolv_last_read = 0
+    resolv_read_interval = 60
+
     def __init__(self, resolv = None, servers = None, timeout = (1, 3, 11, 45)):
         """
         @type servers: C{list} of C{(str, int)} or C{None}
@@ -78,10 +84,9 @@
         else:
             self.servers = servers
         
-        if resolv and os.path.exists(resolv):
-            self.parseConfig(resolv)
+        self.resolv = resolv
         
-        if not len(self.servers):
+        if not len(self.servers) and not resolv:
             raise ValueError, "No nameservers specified"
         
         self.factory = DNSClientFactory(self, timeout)
@@ -99,20 +104,36 @@
         d['connections'] = []
         return d
 
+    def maybeParseConfig(self):
+        if self.resolv_last_read + self.resolv_read_interval < time.time():
+            self.parseConfig()
 
-    def parseConfig(self, conf):
-        lines = open(conf).readlines()
+    def parseConfig(self):
+        try:
+            file = open(self.resolv)
+        except IOError, e:
+            if e.errno == errno.ENOENT:
+                return
+            else:
+                raise
+
+        lines = file.readlines()
+        self.resolv_last_read = os.fstat(file.fileno()).st_mtime
+        file.close()
+        servers = []
         for l in lines:
             l = l.strip()
             if l.startswith('nameserver'):
-                self.servers.append((l.split()[1], dns.PORT))
-                log.msg("Resolver added %r to server list" % (self.servers[-1],))
+                resolver = (l.split()[1], dns.PORT)
+                servers.append(resolver)
+                log.msg("Resolver added %r to server list" % (resolver,))
             elif l.startswith('domain'):
                 self.domain = l.split()[1]
                 self.search = None
             elif l.startswith('search'):
                 self.search = l.split()[1:]
                 self.domain = None
+        self.dynamicServers = servers
 
 
     def pickServer(self):
@@ -122,8 +143,15 @@
         TODO: Weight servers for response time so faster ones can be
         preferred.
         """
-        self.index = (self.index + 1) % len(self.servers)
-        return self.servers[self.index]
+        self.parseConfig()
+        if not self.servers and not self.dynamicServers:
+            return None
+        self.index = ((self.index + 1)
+                      % (len(self.servers) + len(self.dynamicServers)))
+        if self.index < len(self.servers):
+            return self.servers[self.index]
+        else:
+            return self.dynamicServers[self.index - len(self.servers)]
 
 
     def connectionMade(self, protocol):
@@ -155,7 +183,10 @@
         if timeout is None:
             timeout = self.timeout
         address = self.pickServer()
-        d = self.protocol.query(address, queries, timeout[0])
+        if address is not None:
+            d = self.protocol.query(address, queries, timeout[0])
+        else:
+            d = defer.fail()
         d.addErrback(self._reissue, address, queries, timeout[1:])
         return d
 
@@ -186,7 +217,10 @@
         @rtype: C{Deferred}
         """
         if not len(self.connections):
-            host, port = self.pickServer()
+            address = self.pickServer()
+            if address is None:
+                return defer.fail()
+            host, port = address
             from twisted.internet import reactor
             reactor.connectTCP(host, port, self.factory)
             self.pending.append((defer.Deferred(), queries, timeout))

-- 
:(){ :|:&};:



From itamar at itamarst.org  Wed Apr 30 10:45:38 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 12:45:38 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200304300801.h3U815Q05758@localhost.localdomain>
References: <200304300801.h3U815Q05758@localhost.localdomain>
Message-ID: <20030430124538.72ca4dc2.itamar@itamarst.org>

On Wed, 30 Apr 2003 18:01:05 +1000
Anthony Baxter <anthony at interlink.com.au> wrote:
 
> I kinda suspected that twisted might be slower than asyncore for the
> straight go-hell-for-leather usage in pythondirector, but I'd not got
> around to actually testing it. It seems like it's nearly 30% slower
> than the equivalent asyncore code! This seems a bit higher than I'd
> expect -- but given all the extra overhead of object creation I guess
> it's not all that surprising. Current CVS python, Twisted 1.0.4.

We'll see what we can do to improve this (if we can, and when we have
time :).

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From abe at fettig.net  Wed Apr 30 11:27:53 2003
From: abe at fettig.net (Abe Fettig)
Date: 30 Apr 2003 13:27:53 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
Message-ID: <1051723673.639.18.camel@mingus>

Hi folks,

In order to really get NNTP and SMTP (securely) integrated with Hep I
need to get authentication working.  Both of these protocols support
authentication, although it's not required by the core RFCs.  But as far
as I can tell neither of the modules in twisted/protocols supports
authentication at the moment.

Is anyone working on this already?  If not, I'd like to do it myself,
and I'd appreciate some help in understanding the 'right' way to
implement authentication in Twisted.  I've been looking at J.P.'s IMAP4
work in CVS, and I can see he's using identities and perspectives
(although I don't have a complete understanding of how these work).  Is
the use of twisted.cred preferred?  Other drivers, such as POP3, don't
seem to use it...

Thanks,

Abe




From exarkun at intarweb.us  Wed Apr 30 12:34:41 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 30 Apr 2003 14:34:41 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <1051723673.639.18.camel@mingus>
References: <1051723673.639.18.camel@mingus>
Message-ID: <20030430183441.GA26588@meson.dyndns.org>

On Wed, Apr 30, 2003 at 01:27:53PM -0400, Abe Fettig wrote:
> Hi folks,
> 
> In order to really get NNTP and SMTP (securely) integrated with Hep I
> need to get authentication working.  Both of these protocols support
> authentication, although it's not required by the core RFCs.  But as far
> as I can tell neither of the modules in twisted/protocols supports
> authentication at the moment.
> 

  If you don't get to it first, I may end up doing SMTP authentication
sometime in the near future (as I have need for it as well).  I hadn't given
much thought to NNTP.

> Is anyone working on this already?  If not, I'd like to do it myself,
> and I'd appreciate some help in understanding the 'right' way to
> implement authentication in Twisted.  I've been looking at J.P.'s IMAP4
> work in CVS, and I can see he's using identities and perspectives
> (although I don't have a complete understanding of how these work).  Is
> the use of twisted.cred preferred?  Other drivers, such as POP3, don't
> seem to use it...

  I think POP3 should be updated to use cred in a manner similar to that
which IMAP4 uses it.  Since I wrote IMAP4, obviously I think that is the
right way to do authentication ;) (modulo one thing - the actual
challenge/response verification should be factored out and away from the
Identity class - I believe itamar and glyph have discussed this and have
some ideas for the implementation).

  Whether the *actual* details of how IMAP4 is using cred are proper are
not, I don't know ;) The code works, but it seems that there are too many
different objects involved in the process (CramMD5Identity,
CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's just for
*one* kind of authentication scheme).  Setup is similarly tedious, requiring
4 lines of "boilerplate" to set things up, and then *10* lines to add each
new identity.  Now that imap4.py is settling down, it'd be great if someone
with more experience with cred could take a look at it and give me some
feedback.

  Maybe there will be a coil for cred someday so you can keep this part of
the code out of your actual app, though.  If so, this is one of the real
strengths of cred.  Your app doesn't have to do anything to manage user
accounts, you just attach the cred coil and you're done.


  Hope this helps,

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 41 days, 15:04, 4 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030430/b87e0e53/attachment.sig>

From exarkun at intarweb.us  Wed Apr 30 12:43:57 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Wed, 30 Apr 2003 14:43:57 -0400
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
In-Reply-To: <20030430160159.GA28522@lapdog>
References: <20030430160159.GA28522@lapdog>
Message-ID: <20030430184357.GB26588@meson.dyndns.org>

On Wed, Apr 30, 2003 at 07:01:59PM +0300, Tommi Virtanen wrote:
> 	Hi. Lately, I've been playing with using "mktap dns" as a
> 	resolver for my laptop. Except, it's making me angry.
> 
> 	It doesn't reload resolv.conf. My resolv.conf nameserver list
> 	is changed by DHCP about twice per day, atleast.
> 

  The "usability" of t.names could be a bit better, I agree.

> 	In fact, it even loads the resolv.conf only in __init__, so
> 	the list gets stored in the tap file. I need to mktap, tap2deb
> 	and dpkg -i whenever I switch subnets!
> 
> 	Here's a quick-and-stupid patch that makes it reload
> 	resolv.conf regularly, currently made to reread it every
> 	minute. This is "close enough". Actually, I want to make
> 	it get a notification from somewhere..

  It would be great if Twisted could speak FAM.  I looked briefly at
integrating the python wrapper, but didn't have time to go very in-depth. 

> 
> 	I definitely want this implemented. Please tell what direction
> 	should I go with the patch, and what do you think is missing
> 	from "production quality"?

  It basically looks good.  One thing I'd like done differently is to have
parseConfig() called at a different time.  Possibly calling it as a result
of connectionMade() further increases an already large latency on queries. 
If this were done in a callLater() loop, this would keep the parsing
overhead out of the path of actual queries the client performs.

  As a short term solution, I think this is reasonable (but the point is
moot if we wrap and use libfam).  How's it sound to you?

> [snip patch]

  Jp

-- 
A disciple of another sect once came to Drescher as he was eating his
morning meal. "I would like to give you this personality test," said the
outsider, "because I want you to be happy." Drescher took the paper that was
offered him and put it into the toaster: "I wish the toaster to be happy, 
too."
-- 
 up 41 days, 15:04, 4 users, load average: 0.00, 0.00, 0.00
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030430/dd05da67/attachment.sig>

From abe at fettig.net  Wed Apr 30 13:14:59 2003
From: abe at fettig.net (Abe Fettig)
Date: 30 Apr 2003 15:14:59 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430183441.GA26588@meson.dyndns.org>
References: <1051723673.639.18.camel@mingus>
	 <20030430183441.GA26588@meson.dyndns.org>
Message-ID: <1051730099.641.32.camel@mingus>

On Wed, 2003-04-30 at 14:34, Jp Calderone wrote:

> On Wed, Apr 30, 2003 at 01:27:53PM -0400, Abe Fettig wrote:
> > Hi folks,
> > 
> > In order to really get NNTP and SMTP (securely) integrated with Hep I
> > need to get authentication working.  Both of these protocols support
> > authentication, although it's not required by the core RFCs.  But as far
> > as I can tell neither of the modules in twisted/protocols supports
> > authentication at the moment.
> > 
> 
>   If you don't get to it first, I may end up doing SMTP authentication
> sometime in the near future (as I have need for it as well).  I hadn't given
> much thought to NNTP.

I'll make a deal with you - if you do SMTP authentication (demonstrating
the 'right way to do it'), I'll write a similar patch for NNTP :-)

>   I think POP3 should be updated to use cred in a manner similar to that
> which IMAP4 uses it.  Since I wrote IMAP4, obviously I think that is the
> right way to do authentication ;) (modulo one thing - the actual
> challenge/response verification should be factored out and away from the
> Identity class - I believe itamar and glyph have discussed this and have
> some ideas for the implementation).
> 
>   Whether the *actual* details of how IMAP4 is using cred are proper are
> not, I don't know ;) The code works, but it seems that there are too many
> different objects involved in the process (CramMD5Identity,
> CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's just for
> *one* kind of authentication scheme).  Setup is similarly tedious, requiring
> 4 lines of "boilerplate" to set things up, and then *10* lines to add each
> new identity.  Now that imap4.py is settling down, it'd be great if someone
> with more experience with cred could take a look at it and give me some
> feedback.
> 
>   Maybe there will be a coil for cred someday so you can keep this part of
> the code out of your actual app, though.  If so, this is one of the real
> strengths of cred.  Your app doesn't have to do anything to manage user
> accounts, you just attach the cred coil and you're done.

That would be nice.  It seems like there's also the potential to share
the code for different methods of authentication between
POP3/SMTP/IMAP/NNTP - I think they all can use CRAM-MD5, for example,
and it seems silly to duplicate the code in each protocol.

Abe




From tv at twistedmatrix.com  Wed Apr 30 13:14:06 2003
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Wed, 30 Apr 2003 22:14:06 +0300
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
In-Reply-To: <20030430184357.GB26588@meson.dyndns.org>
References: <20030430160159.GA28522@lapdog> <20030430184357.GB26588@meson.dyndns.org>
Message-ID: <20030430191406.GA29480@lapdog>

On Wed, Apr 30, 2003 at 02:43:57PM -0400, Jp Calderone wrote:
>   It would be great if Twisted could speak FAM.  I looked briefly at
> integrating the python wrapper, but didn't have time to go very in-depth. 

	Well, it'll need a secondary mechanism anyway, as FAM
	is far from portable.

	Besides, FAM is a daemon. The actual kernel interface
	it uses is called "dnotify", and it goes like this:

fd = open(".", O_RDONLY);
fcntl(fd, F_SETSIG, SIGRTMIN);
fcntl(fd, F_NOTIFY, DN_MODIFY|DN_CREATE|DN_MULTISHOT);

	and you'll get an SIGRTMIN every time the dir changes. Allocating
	an available signal sounds like this is something that should first
	be "twistedified", and not used raw.

	This might not even need any C wrapping, or at most exposing
	those DN_* and F_* constants.

	If you really want to use that API, and the DN_* constants
	aren't exported by standard python, it'd be trivial to add
	them to eunuchs. And fall back to statting the file every
	once in a while if eunuchs isn't installed or the kernel
	doesn't understand the fcntl.

> > 	I definitely want this implemented. Please tell what direction
> > 	should I go with the patch, and what do you think is missing
> > 	from "production quality"?
>   It basically looks good.  One thing I'd like done differently is to have
> parseConfig() called at a different time.  Possibly calling it as a result
> of connectionMade() further increases an already large latency on queries. 
> If this were done in a callLater() loop, this would keep the parsing
> overhead out of the path of actual queries the client performs.

	Yeah, sure. I ended up doing it that way just because I couldn't
	remember whether callLaters etc are pickled or not, and make it
	resume from a .tap correctly, etc..

>   As a short term solution, I think this is reasonable (but the point is
> moot if we wrap and use libfam).  How's it sound to you?

	Okay, how about I make it check the file timestamp every n seconds
	via callLater, and commit that? Maybe tomorrow.

-- 
:(){ :|:&};:



From itamar at itamarst.org  Wed Apr 30 13:25:32 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 15:25:32 -0400
Subject: [Twisted-Python] NNTP/SMTP authentication
In-Reply-To: <20030430183441.GA26588@meson.dyndns.org>
References: <1051723673.639.18.camel@mingus>
	<20030430183441.GA26588@meson.dyndns.org>
Message-ID: <20030430152532.1f6eb902.itamar@itamarst.org>

On Wed, 30 Apr 2003 14:34:41 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   Whether the *actual* details of how IMAP4 is using cred are proper
>   are
> not, I don't know ;) The code works, but it seems that there are too
> many different objects involved in the process (CramMD5Identity,
> CramMD5ServerAuthenticator, CramMD5ClientAuthenticator - and that's
> just for*one* kind of authentication scheme).  Setup is similarly
> tedious, requiring 4 lines of "boilerplate" to set things up, and then
> *10* lines to add each new identity.  Now that imap4.py is settling
> down, it'd be great if someone with more experience with cred could
> take a look at it and give me some feedback.

This is why cred is going to be refactored. With a chainsaw. On fire.
End result should be that you have to do a *lot* less work in your
protocol.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From warner at lothar.com  Wed Apr 30 14:32:25 2003
From: warner at lothar.com (Brian Warner)
Date: Wed, 30 Apr 2003 13:32:25 -0700 (PDT)
Subject: [Twisted-Python] mktap dns is broken if you switch subnets
References: <20030430160159.GA28522@lapdog>
 <20030430184357.GB26588@meson.dyndns.org>
Message-ID: <20030430.133225.59480235.warner@lothar.com>

Jp Calderone <exarkun at intarweb.us> writes:
>   It would be great if Twisted could speak FAM.  I looked briefly at
> integrating the python wrapper, but didn't have time to go very in-depth. 

Personally, I find FAM's implementation annoying, because is uses sunrpc, and
requires the "security-compromise-waiting-to-happen" portmap daemon be
running. I wish they had implemented it with a unix socket instead, but it
appears to be aimed at handling remote (NFS) directory changes as well as
local ones. Something less server-heavy would seem more appropriate.

The Linux mechanism is DNotify, and you can get at most of the functionality
from the Python side. I have code in the BuildBot (buildbot.dnotify) which
does the necessary Twisted glue, and I'd be happy to contribute that if it
seems useable. Code is available from http://buildbot.sf.net .

One problem with that module is that DNotify uses SIGIO (or other signal of
your choice) to indicate the change, and Python's signal-delivery code
doesn't pass the siginfo_t argument to the Python handler, which means
multiple DNotify notifications for the same process all look the same.

That buildbot code also falls back to polling every 10 seconds if the DNotify
fcntl values aren't available (e.g. non-linux).


cheers,
 -Brian



From jon at totient.demon.co.uk  Wed Apr 30 16:28:31 2003
From: jon at totient.demon.co.uk (Jon Dyte)
Date: Wed, 30 Apr 2003 23:28:31 +0100
Subject: [Twisted-Python] adbapi question
Message-ID: <200304302328.31599.jon@totient.demon.co.uk>

Hi

Below is a small script. My question is what is the correct way to exit after using the adbapi stuff. The script as it stands just hangs the terminal
until I Ctrl-Z and kill it.
sample run

jon> python simpledb.py jon jon jon
Done
0
finished
{1026: <connection object at 0x8228048>}
0
[<_MainThread(MainThread, started)>, <Thread(PoolThread-136416140-1, started)>]


Jon


import sys
import threading
import pprint
from twisted.enterprise import adbapi
from twisted.internet import reactor

dbname,user,passwd = sys.argv[1:4]

class SomeTable(adbapi.Augmentation):
    def getSomeData(self):
        self.done = 1
        qry = "select * from SomeTable"
        return self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
    
    def operationDone(self, done):
        print "Done"
        self.done =0
        
    def operationError(self,err):
        print err
        

dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))

db1=SomeTable(dbpool)

db1.getSomeData()

while 1 == db1.done:
        reactor.iterate()

print db1.done
print "finished"
reactor.crash()
reactor.stop()
dbpool.close()
print dbpool.connections
print reactor.running
print threading.enumerate()




From dave at krondo.com  Wed Apr 30 16:48:46 2003
From: dave at krondo.com (Dave Peticolas)
Date: 30 Apr 2003 15:48:46 -0700
Subject: [Twisted-Python] Patch: row / reflectors / util
In-Reply-To: <3EAC1D31.7060107@gnubia.net>
References: <3EAC1D31.7060107@gnubia.net>
Message-ID: <1051742926.20769.8.camel@oneiros>

On Sun, 2003-04-27 at 11:10, Justin Ryan wrote:
> Attached is a patch to twisted.enterprise.row, the sqlreflector, and 
> util.py to allow mixed-case table/row names (and to double-quote them in 
> databases that require it, such as postgres).
> 
> I sent this a while back with a detailed explanation, but have now 
> developed some docs on the web at http://gnubia.net/Docs/Twisted.Gnubia/
> detailing some of my changes..
> 
> Oh yeh and.. erm.. Itamar told me to re-send on irc a few min ago..

Your patch looks reasonable to me.


> This stuff may need to be cleaned up, and I've considered separating 
> some of it out into a PGRow or somesuch, the way that I (and someone 
> else on the list) am using a PGSQLReflector to do some postgres-specific 
> stuff.

So you are thinking of factoring out the case sensitive relations code?

dave

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030430/023ccd0d/attachment.sig>

From pinard at iro.umontreal.ca  Wed Apr 30 18:03:18 2003
From: pinard at iro.umontreal.ca (=?iso-8859-1?q?Fran=E7ois_Pinard?=)
Date: 30 Apr 2003 20:03:18 -0400
Subject: [Twisted-Python] Twisted 1.0.4 - NameVirtualHost and isLeaf
Message-ID: <oqu1cfleih.fsf@titan.progiciels-bpi.ca>

Hi, people.

Thanks to the recent explanations about `isLeaf', I was able to figure out
that if, with Twisted 1.0.4, I was unable to get virtual hosts to work, this
was because the `isLeaf' attribute of an instance of `vhost.NameVirtualHost'
is not True.  At least with the setup I use.  the instance's `render' method
is not called then, and consequently, the dispatching to the proper resource
does not occur.

In what circumstance would it be useful that such an instance has `isLeaf'
set to False?  I presume this might help me better understand resources.

-- 
François Pinard   http://www.iro.umontreal.ca/~pinard



From justin at gnubia.net  Wed Apr 30 19:29:01 2003
From: justin at gnubia.net (Justin Ryan)
Date: 30 Apr 2003 20:29:01 -0500
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200304302328.31599.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
Message-ID: <1051752541.32738.206.camel@samadhi>

Someone will surely correct me if I'm wrong, but I ran into this same
dilemma when I began to use twisted.  It seems that as twisted is an
event-driven framework for asynchronous networked applications, it isn't
intended to be used in this way.

Twisted applications should generally sit around waiting for requests,
and respond to them in a timely, but non-blocking manner.  Starting up,
doing some stuff, and exiting, just doesn't seem to be the idiom at play
here.

YMMV..

On Wed, 2003-04-30 at 17:28, Jon Dyte wrote:
> Hi
> 
> Below is a small script. My question is what is the correct way to exit after using the adbapi stuff. The script as it stands just hangs the terminal
> until I Ctrl-Z and kill it.
> sample run
> 
> jon> python simpledb.py jon jon jon
> Done
> 0
> finished
> {1026: <connection object at 0x8228048>}
> 0
> [<_MainThread(MainThread, started)>, <Thread(PoolThread-136416140-1, started)>]
> 
> 
> Jon
> 
> 
> import sys
> import threading
> import pprint
> from twisted.enterprise import adbapi
> from twisted.internet import reactor
> 
> dbname,user,passwd = sys.argv[1:4]
> 
> class SomeTable(adbapi.Augmentation):
>     def getSomeData(self):
>         self.done = 1
>         qry = "select * from SomeTable"
>         return self.runQuery(qry).addCallbacks(self.operationDone,self.operationError)
>     
>     def operationDone(self, done):
>         print "Done"
>         self.done =0
>         
>     def operationError(self,err):
>         print err
>         
> 
> dbpool = adbapi.ConnectionPool("psycopg","dbname=%s user=%s" % (dbname,user))
> 
> db1=SomeTable(dbpool)
> 
> db1.getSomeData()
> 
> while 1 == db1.done:
>         reactor.iterate()
> 
> print db1.done
> print "finished"
> reactor.crash()
> reactor.stop()
> dbpool.close()
> print dbpool.connections
> print reactor.running
> print threading.enumerate()
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20030430/0b1471b7/attachment.sig>

From itamar at itamarst.org  Wed Apr 30 19:38:15 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 21:38:15 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <200304302328.31599.jon@totient.demon.co.uk>
References: <200304302328.31599.jon@totient.demon.co.uk>
Message-ID: <20030430213815.3fff4347.itamar@itamarst.org>

On Wed, 30 Apr 2003 23:28:31 +0100
Jon Dyte <jon at totient.demon.co.uk> wrote:

> Below is a small script. My question is what is the correct way to
> exit after using the adbapi stuff. The script as it stands just hangs
> the terminal until I Ctrl-Z and kill it.

You don't want a reactor.crash() and a reactor.stop(). Just do
reactor.stop().

Using threads can make your python program not exit if they hang around,
but reactor.stop() should shut down all threads in the thread pool.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr 30 19:39:30 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 30 Apr 2003 21:39:30 -0400
Subject: [Twisted-Python] adbapi question
In-Reply-To: <1051752541.32738.206.camel@samadhi>
References: <200304302328.31599.jon@totient.demon.co.uk>
	<1051752541.32738.206.camel@samadhi>
Message-ID: <20030430213930.542c81d9.itamar@itamarst.org>

On 30 Apr 2003 20:29:01 -0500
Justin Ryan <justin at gnubia.net> wrote:

> Someone will surely correct me if I'm wrong, but I ran into this same
> dilemma when I began to use twisted.  It seems that as twisted is an
> event-driven framework for asynchronous networked applications, it
> isn't intended to be used in this way.

Dunno what you mean by "this way". If you need to deal with a blocking
database operation you dispatch it to the thread pool, and that works
just fine.

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From anthony at interlink.com.au  Wed Apr 30 23:18:58 2003
From: anthony at interlink.com.au (Anthony Baxter)
Date: Thu, 01 May 2003 15:18:58 +1000
Subject: [Twisted-Python] twisted 30% slower than asyncore? 
In-Reply-To: <20030430124538.72ca4dc2.itamar@itamarst.org> 
Message-ID: <200305010519.h415J0809173@localhost.localdomain>

>>> Itamar Shtull-Trauring wrote
> We'll see what we can do to improve this (if we can, and when we have
> time :).

If it helps, I have slabs of hotshot data on this. The top 10 (from 20,000
small HTTP fetches:

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    20082   50.981    0.003  172.623    0.009 default.py:418(doSelect)
    60024   26.018    0.000   26.018    0.000 tcp.py:116(writeSomeData)
    40022   22.463    0.001   24.738    0.001 failure.py:91(__init__)
   488147   21.022    0.000   24.747    0.000 <string>:1(fileno)
    20010    4.160    0.000    4.932    0.000 tcp.py:209(createInternetSocket)
    60024    3.486    0.000    6.361    0.000 tcp.py:97(doRead)
    60030    2.795    0.000    2.795    0.000 default.py:489(addReader)
    40020    2.789    0.000    3.782    0.000 tcp.py:90(__init__)
    40020    2.746    0.000   47.347    0.001 tcp.py:232(doConnect)
    20010    2.573    0.000    4.484    0.000 abstract.py:87(doWrite)

That 'failure.py' is looking like some tasty low-hanging fruit to me,
but doSelect should be amenable to some speedups as well...

I should probably add that even though Twisted is slower than asyncore,
pythondirector using Twisted is still 10-15% faster than the written-in-C 
"Pound" load balancer, and about 5% slower than the "balance" load balancer
(also in C).

Anthony

-- 
Anthony Baxter     <anthony at interlink.com.au>   
It's never too late to have a happy childhood.




From exarkun at intarweb.us  Wed Apr 30 23:29:53 2003
From: exarkun at intarweb.us (Jp Calderone)
Date: Thu, 1 May 2003 01:29:53 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200305010519.h415J0809173@localhost.localdomain>
References: <20030430124538.72ca4dc2.itamar@itamarst.org> <200305010519.h415J0809173@localhost.localdomain>
Message-ID: <20030501052953.GA1360@meson.dyndns.org>

On Thu, May 01, 2003 at 03:18:58PM +1000, Anthony Baxter wrote:
> 
> >>> Itamar Shtull-Trauring wrote
> > We'll see what we can do to improve this (if we can, and when we have
> > time :).
> 
> If it helps, I have slabs of hotshot data on this. The top 10 (from 20,000
> small HTTP fetches:
> 
>    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
>     20082   50.981    0.003  172.623    0.009 default.py:418(doSelect)
>     60024   26.018    0.000   26.018    0.000 tcp.py:116(writeSomeData)
>     40022   22.463    0.001   24.738    0.001 failure.py:91(__init__)
>    488147   21.022    0.000   24.747    0.000 <string>:1(fileno)
>     20010    4.160    0.000    4.932    0.000 tcp.py:209(createInternetSocket)
>     60024    3.486    0.000    6.361    0.000 tcp.py:97(doRead)
>     60030    2.795    0.000    2.795    0.000 default.py:489(addReader)
>     40020    2.789    0.000    3.782    0.000 tcp.py:90(__init__)
>     40020    2.746    0.000   47.347    0.001 tcp.py:232(doConnect)
>     20010    2.573    0.000    4.484    0.000 abstract.py:87(doWrite)
> 
> That 'failure.py' is looking like some tasty low-hanging fruit to me,
> but doSelect should be amenable to some speedups as well...
> 

  Boy would it be great if Failures could be sped up some more, but it
doesn't seem likely without some mind-bending rework of the whole design. 
I think most, if not all, of the worthwhile local optimizations have been
made on it.

  What I learned from Twisted.names is to not write code that uses Failures
anywhere except where they are absolutely necessary.  Python exceptions
might be cheap enough to use as a kind of fancy flow control, but failures
definitely are not.


> I should probably add that even though Twisted is slower than asyncore,
> pythondirector using Twisted is still 10-15% faster than the written-in-C 
> "Pound" load balancer, and about 5% slower than the "balance" load balancer
> (also in C).

  Cool beans.

  Jp

-- 
"There is no reason for any individual to have a computer in their
home."
                -- Ken Olson, President of DEC, World Future Society
                   Convention, 1977
-- 
 up 42 days, 1:04, 5 users, load average: 0.00, 0.02, 0.02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20030501/31cc8897/attachment.sig>

From itamar at itamarst.org  Wed Apr 30 23:30:06 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 01:30:06 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <200305010519.h415J0809173@localhost.localdomain>
References: <20030430124538.72ca4dc2.itamar@itamarst.org>
	<200305010519.h415J0809173@localhost.localdomain>
Message-ID: <20030501013006.4df303bc.itamar@itamarst.org>

On Thu, 01 May 2003 15:18:58 +1000
Anthony Baxter <anthony at interlink.com.au> wrote:

> That 'failure.py' is looking like some tasty low-hanging fruit to me,

Indeed. Thanks for the info!

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



From itamar at itamarst.org  Wed Apr 30 23:48:01 2003
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 1 May 2003 01:48:01 -0400
Subject: [Twisted-Python] twisted 30% slower than asyncore?
In-Reply-To: <20030501052953.GA1360@meson.dyndns.org>
References: <20030430124538.72ca4dc2.itamar@itamarst.org>
	<200305010519.h415J0809173@localhost.localdomain>
	<20030501052953.GA1360@meson.dyndns.org>
Message-ID: <20030501014801.46ffdc92.itamar@itamarst.org>

On Thu, 1 May 2003 01:29:53 -0400
Jp Calderone <exarkun at intarweb.us> wrote:

>   What I learned from Twisted.names is to not write code that uses
>   Failures
> anywhere except where they are absolutely necessary.  Python
> exceptions might be cheap enough to use as a kind of fancy flow
> control, but failures definitely are not.

My soon to be checked in code changes Failures to be vastly less
expensive if you explicitly pass in an Exception (no pretty tracebacks
stored, but in this case you don't want them anyway.) 

-- 
Itamar Shtull-Trauring    http://itamarst.org/
http://www.zoteca.com -- Python & Twisted consulting



