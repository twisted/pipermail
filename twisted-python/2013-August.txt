From zipxing at hotmail.com  Thu Aug  1 02:49:25 2013
From: zipxing at hotmail.com (zipxing)
Date: Thu, 1 Aug 2013 16:49:25 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
Message-ID: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>

pypy+builtin_json performance < cpython+ultrajson
________________________________
> Date: Wed, 31 Jul 2013 09:22:53 +0200 
> From: _ at lvh.io 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> 
> On Jul 31, 2013 4:19 AM, "zipxing" 
> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote: 
>> 
>> Great! pypy take 20% cpu, 3x fast than cpython! 
>> Thanks! 
>> 
>> A little problem: cjson and ujson can't install to pypy... 
> 
> What's wrong with the builtin json module? 
> 
>> ZipXing 
>> 
>> ________________________________ 
>>> From: _ at lvh.io<http://lvh.io> 
>>> Date: Tue, 30 Jul 2013 13:09:33 +0200 
>>> To: 
> twisted-python at twistedmatrix.com<mailto:twisted-python at twistedmatrix.com> 
>>> Subject: Re: [Twisted-Python] transport.write performance. 
>>> 
>>> Hi zipxing, 
>>> 
>>> You don't mention the interpreter. Is it CPython? What kind of results 
>>> do you get trying it on PyPy? 
>>> 
>>> Also, you don't need to specify epollreactor. Recent versions of 
>>> twisted will automagically choose the appropriate backend. I fixed this 
>>> and some other cleanups and got: 
>>> 
>>> ---- 
>>> from time import clock 
>>> from twisted.internet import protocol, reactor 
>>> from twisted.protocols import basic 
>>> 
>>> class MeasuringEchoProtocol(basic.LineReceiver): 
>>> MEASUREMENT_INTERVAL = 1000 
>>> 
>>> def lineReceived(self, data): 
>>> self.factory.requests += 1 
>>> if self.factory.requests % self.MEASUREMENT_INTERVAL == 0: 
>>> print "RPS: {0}".format(self.factory.requests / clock()) 
>>> 
>>> self.transport.write(data) 
>>> 
>>> 
>>> 
>>> class ServerFactory(protocol.ServerFactory): 
>>> protocol = MeasuringEchoProtocol 
>>> 
>>> def __init__(self): 
>>> self.requests = 0 
>>> 
>>> 
>>> 
>>> def main(): 
>>> reactor.listenTCP(9976, ServerFactory()) 
>>> clock() 
>>> reactor.run() 
>>> 
>>> if __name__ == '__main__': 
>>> main() 
>>> ---- 
>>> 
>>> Keep in mind that due to setup time few requests get handled right when 
>>> it starts, so the server RPS will take some time to balance out. On my 
>>> wimpy laptop on battery power, that was around 420.274404782. 
>>> 
>>> cheers 
>>> lvh 
>>> 
>>> _______________________________________________ Twisted-Python mailing 
>>> list 
> Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com> 
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 
>> _______________________________________________ 
>> Twisted-Python mailing list 
>> Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com> 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From exarkun at twistedmatrix.com  Thu Aug  1 05:50:20 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 01 Aug 2013 11:50:20 -0000
Subject: [Twisted-Python] TestInternet2.testPickledTimer Failed
In-Reply-To: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
References: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
Message-ID: <20130801115020.26068.1995148687.divmod.xquotient.62@top>

On 05:46 am, kylerzhang11 at gmail.com wrote:
>Hi,
>
>I'm a Google Summer of Code intern working on "Deferred Cancellation"
>project. I'm recently working on adding cancellation support to
>twisted.internet.task.LoopingCall.
>
>However, after I added the canceller to LoopingCall.deferred,
>the twisted.test.test_application.TestInternet2.testPickledTimer failed 
>due
>to a PicklingError.
>
>My branch is loopingcall-deferred-cancellation-6656. Here is the diff 
>of my
>code: http://twistedmatrix.com/~diffresource.twistd/6656
>
>[snip]
  File "/usr/lib/python2.7/pickle.py", line 748, in save_global
>    (obj, module, name))
>pickle.PicklingError: Can't pickle <function <lambda> at 0x8f1fb8c>: 
>it's
>not found as twisted.internet.posixbase.<lambda>

Two things to notice about the previous line.  One, it is trying to 
pickle a function defined using a lambda expression.  Two, it is trying 
to pickle something from twisted.internet.posixbase - which probably 
means it's trying to pickle the reactor.

You can run trial with --debug and it will drop into pdb when it hits 
this error.  Then you can walk up and down the call stack and inspect 
the objects pickle is operating on.  You can get some idea of where 
things are going wrong this way.
>
>I thought the reason was the circular references. However I searched 
>about
>it and found that pickle could handle the circular reference cases. But 
>the
>only significant change is that after I added the canceller, there is a
>circular reference between LoopingCall and LoopingCall.deferred. So I 
>don't
>know what's the problem. How can I fix this?

There are two changes that seem like they could be relevant.

First, LoopingCall now keeps a reference to the Deferred returned by 
application code.  This means anything reachable from that Deferred is 
going to get pickled when LoopingCall is pickled.  This jumped out at me 
first, but I don't think it's actually causing the problem.

Second, there is now a reference from the Deferred returned by 
`LoopingCall` back to the `LoopingCall` instance - via the bound 
`_cancel` method.  `TimerService` holds on to a reference to this 
`Deferred`.

Of course, stepping back, it doesn't make any sense to pickle 
LoopingCall - it explicitly refers to the reactor, so it's never 
actually going to be pickleable.

I suggest you take a look at TimerService and figure out why pickling 
one of those ever tries to pickle a LoopingCall (take a look around 
`__getstate__` and `volatile`, I think that's where the problem is).  I 
think you'll find an existing bug that the unit test previously failed 
to reveal but which your changes have revealed.

Jean-Paul


From kylerzhang11 at gmail.com  Thu Aug  1 07:08:38 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 1 Aug 2013 21:08:38 +0800
Subject: [Twisted-Python] TestInternet2.testPickledTimer Failed
In-Reply-To: <20130801115020.26068.1995148687.divmod.xquotient.62@top>
References: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
 <20130801115020.26068.1995148687.divmod.xquotient.62@top>
Message-ID: <CAK_130SW6WC3q0TuBrK6SXHy5xtuBzimVvDhJEJT8N=2KYuBuw@mail.gmail.com>

On Thu, Aug 1, 2013 at 7:50 PM, <exarkun at twistedmatrix.com> wrote:

> I suggest you take a look at TimerService and figure out why pickling one
> of those ever tries to pickle a LoopingCall (take a look around
> `__getstate__` and `volatile`, I think that's where the problem is).  I
> think you'll find an existing bug that the unit test previously failed to
> reveal but which your changes have revealed.
>

Thanks for your help. I've found that the bug is due to a typo. The
"_loopFinshed" in `TimerService.volatile` should be "_loopFinished". So
when pickling a `TimerService` it will actually try to pickle
"_loopFinished"(the Deferred returned by `LoopingCall.start`). When the
Deferred has a reference to the `LoopingCall` instance it will then try to
pickle the `LoopingCall`, thus causes the problem.

I've searched and there is no ticket about this. So I will file a new
ticket and fix this.

-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130801/5026c946/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Aug  1 10:46:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 1 Aug 2013 09:46:54 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
Message-ID: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>


On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com> wrote:

> pypy+builtin_json performance < cpython+ultrajson

Do you have a reference to a benchmark confirming this?  I'm curious about it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130801/7d2629de/attachment.html>

From ldanielburr at me.com  Thu Aug  1 11:11:13 2013
From: ldanielburr at me.com (L. Daniel Burr)
Date: Thu, 01 Aug 2013 12:11:13 -0500
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
Message-ID: <51FA96B1.8000900@me.com>

Hi Glyph,

On 8/1/13 11:46 AM, Glyph wrote:
>
> On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com 
> <mailto:zipxing at hotmail.com>> wrote:
>
>> pypy+builtin_json performance < cpython+ultrajson
>
> Do you have a reference to a benchmark confirming this?  I'm curious 
> about it.
>
> -glyph

Here's one: 
http://liangnuren.wordpress.com/2012/08/13/python-json-performance/

- L. Daniel Burr

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130801/65a2b47e/attachment.html>

From beenje at gmail.com  Sun Aug  4 08:25:55 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sun, 4 Aug 2013 16:25:55 +0200
Subject: [Twisted-Python] Help with trial test failure
Message-ID: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>

Hi,

I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
I wrote a small example that seems to work.
But the small test I wrote fails:

$ trial gateway/test
gateway.test.test_example
  GatewayServiceTestCase
    test_messageReceived ...                                            [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.

gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
-------------------------------------------------------------------------------
Ran 1 tests in 0.007s


As I understand, the connection to the redis server is lost during the test.
I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
But I don't really understand why that would be needed.
Could someone explain what is happening?

Both version of the code can be found here: https://gist.github.com/beenje/6150400
(revision 1 with the problem and revision 2 with the inlineCallbacks)

Below is the original version with the problem:

Thanks

Benjamin

example.py
----------------------------------------------------------------------------------
import json
import time
from twisted.internet import defer
from twisted.internet.protocol import ServerFactory
from twisted.protocols.basic import LineReceiver
from twisted.python import log


class BasicProtocol(LineReceiver):

    def lineReceived(self, line):
        self.messageReceived(line)

    def messageReceived(self, message):
        try:
            self.factory.messageReceived(message)
        except AttributeError:
            pass


class BasicGatewayFactory(ServerFactory):

    protocol = BasicProtocol

    def __init__(self, service, channel):
        self.service = service
        self.channel = channel

    def messageReceived(self, message):
        self.service.publish(self.channel, message)


class RedisPublishService(object):

    def __init__(self, factory):
        """
        @param factory: redis client factory
        """
        self.factory = factory

    @defer.inlineCallbacks
    def publish(self, channel, message):
        log.msg("Publish message {} on {}".format(message, channel))
        yield self.factory.client.publish(channel, message)
        timestamp = int(time.time() * 1000)
        # Include the timestamp in the value to allow
        # duplicate message
        value = json.dumps({"timestamp": timestamp, "message": message})
        log.msg("Store message in {} sorted set with score {}".format(
                channel, timestamp))
        # Set the timestamp as score to easily fetch the values within a
        # time period using zrangebyscore
        yield self.factory.client.zadd(channel, timestamp, value)


if __name__ == '__main__':
    import sys
    from twisted.internet import reactor
    from txredis.client import RedisClientFactory
    log.startLogging(sys.stdout)
    redis_factory = RedisClientFactory()
    reactor.connectTCP('localhost', 6379, redis_factory)
    redis_pub_service = RedisPublishService(redis_factory)
    gw_factory = BasicGatewayFactory(redis_pub_service, "test")
    reactor.listenTCP(8000, gw_factory)
    reactor.run()
----------------------------------------------------------------------------------

test_example.py
----------------------------------------------------------------------------------
from twisted.internet import reactor, defer, protocol
from twisted.python import log
from twisted.test import proto_helpers
from twisted.trial.unittest import TestCase
from txredis.client import RedisSubscriber, RedisClientFactory
from txredis.testing import REDIS_HOST, REDIS_PORT
from gateway.example import BasicGatewayFactory, RedisPublishService


class GatewayServiceTestCase(TestCase):

    @defer.inlineCallbacks
    def setUp(self):
        self.redis_factory = RedisClientFactory()
        reactor.connectTCP(REDIS_HOST, REDIS_PORT, self.redis_factory)
        yield self.redis_factory.deferred
        self.redis_pub_service = RedisPublishService(self.redis_factory)
        self.factory = BasicGatewayFactory(self.redis_pub_service, "test")
        self.server = self.factory.buildProtocol(None)
        self.transport = proto_helpers.StringTransportWithDisconnection()
        self.transport.protocol = self.server
        self.server.makeConnection(self.transport)

        class MySubscriber(RedisSubscriber):
            def __init__(self, *args, **kwargs):
                RedisSubscriber.__init__(self, *args, **kwargs)
                self.msg_channel = None
                self.msg_message = None
                self.msg_received = defer.Deferred()

            def messageReceived(self, channel, message):
                log.msg("Message received!")
                self.msg_channel = channel
                self.msg_message = message
                self.msg_received.callback(None)
                self.msg_received = defer.Deferred()

        clientCreator = protocol.ClientCreator(reactor, MySubscriber)
        self.subscriber = yield clientCreator.connectTCP(REDIS_HOST,
                                                         REDIS_PORT)
        yield self.subscriber.subscribe("test")

    def tearDown(self):
        self.subscriber.transport.loseConnection()
        self.redis_factory.continueTrying = 0
        self.redis_factory.stopTrying()
        if self.redis_factory.client:
            self.redis_factory.client.setTimeout(None)
            self.redis_factory.client.transport.loseConnection()
        self.transport.loseConnection()

    @defer.inlineCallbacks
    def test_messageReceived(self):
        cb = self.subscriber.msg_received
        self.server.dataReceived('HELLO1\r\n')
        yield cb
        self.assertEqual(self.subscriber.msg_channel, "test")
        self.assertEqual(self.subscriber.msg_message, "HELLO1")



From piracy at teamspeakusa.com  Sun Aug  4 08:30:03 2013
From: piracy at teamspeakusa.com (TeamSpeak Piracy)
Date: Sun, 04 Aug 2013 14:30:03 +0000
Subject: [Twisted-Python] [#XSZ-691-39878]:  Help with trial test failure
Message-ID: <1375626603.51fe656bed5f0@support.teamspeakusa.com>

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130804/ddba3adf/attachment.html>

From itamar at itamarst.org  Sun Aug  4 13:55:25 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 04 Aug 2013 15:55:25 -0400
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
Message-ID: <51FEB1AD.7040000@itamarst.org>

On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
> Hi,
>
> I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
> I wrote a small example that seems to work.
> But the small test I wrote fails:
>
> $ trial gateway/test
> gateway.test.test_example
>    GatewayServiceTestCase
>      test_messageReceived ...                                            [ERROR]
>
> ===============================================================================
> [ERROR]
> Traceback (most recent call last):
> Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>
> gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.007s
>
>
> As I understand, the connection to the redis server is lost during the test.
> I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
> But I don't really understand why that would be needed.
> Could someone explain what is happening?
>
I suspect the inlineCallbacks is irrelevant (and not the way to solve this).

At a guess, what is happening is that something is logging the 
connection being lost (perhaps the redis library?). Logging errors in a 
unit test makes trial consider that test to have failed: logging an 
error suggests something has gone wrong. You can tell trial to expect a 
specific error to be logged in your test: 
https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11


From beenje at gmail.com  Sun Aug  4 15:19:27 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sun, 4 Aug 2013 23:19:27 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <51FEB1AD.7040000@itamarst.org>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
Message-ID: <71230B58-8C6C-46FD-A54E-F34EB89BC287@gmail.com>


Le 4 ao?t 2013 ? 21:55, Itamar Turner-Trauring <itamar at itamarst.org> a ?crit :

> On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
>> Hi,
>> 
>> I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
>> I wrote a small example that seems to work.
>> But the small test I wrote fails:
>> 
>> $ trial gateway/test
>> gateway.test.test_example
>>   GatewayServiceTestCase
>>     test_messageReceived ...                                            [ERROR]
>> 
>> ===============================================================================
>> [ERROR]
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>> 
>> gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
>> -------------------------------------------------------------------------------
>> Ran 1 tests in 0.007s
>> 
>> 
>> As I understand, the connection to the redis server is lost during the test.
>> I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
>> But I don't really understand why that would be needed.
>> Could someone explain what is happening?
>> 
> I suspect the inlineCallbacks is irrelevant (and not the way to solve this).
> 
> At a guess, what is happening is that something is logging the connection being lost (perhaps the redis library?). Logging errors in a unit test makes trial consider that test to have failed: logging an error suggests something has gone wrong. You can tell trial to expect a specific error to be logged in your test: https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11
> 

I tried to add self.flushLoggedErrors() at the end of the test_messageReceived, but it doesn't help.
What is strange is that if I remove the self.redis_factory.client.transport.loseConnection() in the tearDown method, the test is OK, but of course I get an error because the reactor was unclean:

gateway.test.test_example
  GatewayServiceTestCase
    test_messageReceived ...                                               [OK]
                                           [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('localhost', 6381) at 10d06de90>

gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
-------------------------------------------------------------------------------
Ran 1 tests in 0.008s

Could the logging come from the tearDown method??



From beenje at gmail.com  Mon Aug  5 03:09:56 2013
From: beenje at gmail.com (Benjamin Bertrand)
Date: Mon, 5 Aug 2013 09:09:56 +0000
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <51FEB1AD.7040000@itamarst.org>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
Message-ID: <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>

On Sun, Aug 4, 2013 at 7:55 PM, Itamar Turner-Trauring
<itamar at itamarst.org>wrote:

> On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
>
>> Hi,
>>
>> I'm trying to write a simple gateway to receive messages using a specific
>> protocol and publish/store them using txredis.
>> I wrote a small example that seems to work.
>> But the small test I wrote fails:
>>
>> $ trial gateway/test
>> gateway.test.test_example
>>    GatewayServiceTestCase
>>      test_messageReceived ...
>>  [ERROR]
>>
>> ==============================**==============================**
>> ===================
>> [ERROR]
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**ConnectionDone: Connection was closed
>> cleanly.
>>
>> gateway.test.test_example.**GatewayServiceTestCase.test_**messageReceived
>> ------------------------------**------------------------------**
>> -------------------
>> Ran 1 tests in 0.007s
>>
>>
>> As I understand, the connection to the redis server is lost during the
>> test.
>> I actually managed to get the test to pass by adding some inlineCallbacks
>> decorator to my messageReceived and lineReceived methods.
>> But I don't really understand why that would be needed.
>> Could someone explain what is happening?
>>
>>  I suspect the inlineCallbacks is irrelevant (and not the way to solve
> this).
>
> At a guess, what is happening is that something is logging the connection
> being lost (perhaps the redis library?). Logging errors in a unit test
> makes trial consider that test to have failed: logging an error suggests
> something has gone wrong. You can tell trial to expect a specific error to
> be logged in your test: https://twistedmatrix.com/**
> documents/current/core/howto/**trial.html#auto11<https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11>
>
>
I think I understand what is happening.
In my publish method, I call the redis publish and zadd methods.
My test checks the message received by the subscriber and closes the
connection just after. I don't wait for the deferred return by the zadd
method to fire (and get an error).

That's why the inlineCallbacks solves the problem. When I yield on
the self.server.dataReceived, I wait for the deferred in the publish
methods to fire and everything is clean when I close the connection.

Is there another way to do that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130805/cef0e3f9/attachment.html>

From zipxing at hotmail.com  Mon Aug  5 05:26:40 2013
From: zipxing at hotmail.com (zipxing)
Date: Mon, 5 Aug 2013 19:26:40 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>, ,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>, ,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>, ,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>,
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>,
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
Message-ID: <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>

tjson.py
--------------------------------------------------------------------------
import json ? ? ? ? ? ? ? ? ? ? ? #for pypy

#import ujson as json ? ? ? ? ? ? #for python

tdic = {"aaa":1, "bbb":2, "ccc":3, "ddd":['1','2','3','4','abcdefghijk'], "eee":{"aaaa":1, "bbbb":2, "cccc":[1,2,3,4,5,'aaa']}}

for x in xrange(1000000):
? ? ? ? a = json.dumps(tdic)
? ? ? ? b = json.loads(a)


On my computer, 1M dumps&loads, using 6s with cpython+ultrajson
30s with pypy+json


________________________________
> From: glyph at twistedmatrix.com 
> Date: Thu, 1 Aug 2013 09:46:54 -0700 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> 
> On Aug 1, 2013, at 1:49 AM, zipxing 
> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote: 
> 
> pypy+builtin_json performance < cpython+ultrajson 
> 
> Do you have a reference to a benchmark confirming this? I'm curious 
> about it. 
> 
> -glyph 
> 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From zipxing at hotmail.com  Mon Aug  5 05:31:51 2013
From: zipxing at hotmail.com (zipxing)
Date: Mon, 5 Aug 2013 19:31:51 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 ,,<CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 ,,<SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 , , <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>, ,
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>, ,
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>,
 <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>
Message-ID: <SNT147-W2AA75D630F71A2D99D9C0B45C0@phx.gbl>

cpython+ujson ? 6s
cpython+cjson ? 9s
pypy+json ? ? ? 30s

----------------------------------------
> From: zipxing at hotmail.com
> To: twisted-python at twistedmatrix.com
> Date: Mon, 5 Aug 2013 19:26:40 +0800
> Subject: Re: [Twisted-Python] transport.write performance.
>
> tjson.py
> --------------------------------------------------------------------------
> import json #for pypy
>
> #import ujson as json #for python
>
> tdic = {"aaa":1, "bbb":2, "ccc":3, "ddd":['1','2','3','4','abcdefghijk'], "eee":{"aaaa":1, "bbbb":2, "cccc":[1,2,3,4,5,'aaa']}}
>
> for x in xrange(1000000):
> a = json.dumps(tdic)
> b = json.loads(a)
>
>
> On my computer, 1M dumps&loads, using 6s with cpython+ultrajson
> 30s with pypy+json
>
>
> ________________________________
>> From: glyph at twistedmatrix.com
>> Date: Thu, 1 Aug 2013 09:46:54 -0700
>> To: twisted-python at twistedmatrix.com
>> Subject: Re: [Twisted-Python] transport.write performance.
>>
>>
>> On Aug 1, 2013, at 1:49 AM, zipxing
>> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote:
>>
>> pypy+builtin_json performance < cpython+ultrajson
>>
>> Do you have a reference to a benchmark confirming this? I'm curious
>> about it.
>>
>> -glyph
>>
>>
>> _______________________________________________ Twisted-Python mailing
>> list Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From _ at lvh.io  Mon Aug  5 11:49:24 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 Aug 2013 19:49:24 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
Message-ID: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>

Hi,

I'd like to do something akin to port forwarding using Conch.

Specifically, I want to be able to make connections to something listening
on a particular port on the client, and I want the client to be able to
make connections to some ClientFactory in the server.

Can I do this with regular SSH clients, or do I need to write those too?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130805/fd27851f/attachment.html>

From itamar at itamarst.org  Mon Aug  5 15:08:32 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 Aug 2013 17:08:32 -0400
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
Message-ID: <52001450.8020605@itamarst.org>

On 08/05/2013 01:49 PM, Laurens Van Houtven wrote:
> Hi,
>
> I'd like to do something akin to port forwarding using Conch.
>
> Specifically, I want to be able to make connections to something 
> listening on a particular port on the client, and I want the client to 
> be able to make connections to some ClientFactory in the server.

That doesn't sound like port forwarding, that sounds like a custom 
server-side protocol?

> Can I do this with regular SSH clients, or do I need to write those too?

Assuming it's what I said, yes: 
http://as.ynchrono.us/2011/08/twisted-conch-in-60-seconds-protocols.html 
may be useful.


From _ at lvh.io  Mon Aug  5 15:20:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 Aug 2013 23:20:59 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <52001450.8020605@itamarst.org>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
Message-ID: <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>

Hi,

Sorry, when editing and cutting my post I got rid of something important :-)

When you log in, you get greeted by some terminal app, say something
written with Urwid or so. In addition to that, on the client, you can start
accepting connections on some TCP port, and at some point the server will
connect to that. That stream should be multiplexed inside SSH. Also, The
client should be able to make connections on localhost, which are also
multiplexed and actually turn into transports inside the server.

Would that be possible?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130805/8c5236e3/attachment.html>

From gjorge at google.com  Mon Aug  5 17:20:30 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Mon, 5 Aug 2013 16:20:30 -0700
Subject: [Twisted-Python] asserting an exception wrapped in a
	defer.FirstError
Message-ID: <CAN9+jDYaph8hRR3j-bVr+4Z02rtgfVR=8U9wwhbkkXi9=3Nchg@mail.gmail.com>

In a trial test case like this:

-----------------------------------------------------------------------------------------------------------------------
*def testFailureFromDeferredList(self):*
*    d = defer.fail(ValueError('bad value'))*
*    return self.assertFailure(defer.gatherResults([d]), ValueError)*
-----------------------------------------------------------------------------------------------------------------------

I get the following FAIL and ERROR:

-----------------------------------------------------------------------------------------------------------------------
*[FAIL]
*
*Traceback (most recent call last):*
*  File "/home/gjorge/tmp/
buildbot.net/python_sandbox/local/lib/python2.7/site-packages/twisted/trial/_asynctest.py",
line 74, in _eb*
*    raise self.failureException(output)*
*twisted.trial.unittest.FailTest: *
*Expected: (<type 'exceptions.ValueError'>,)*
*Got:*
*[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.defer.FirstError'>: FirstError[#0, [Failure instance:
Traceback (failure with no frames): <type 'exceptions.ValueError'>: bad
value*
*]]*
*]*
*
*
*
===============================================================================
*
*[ERROR]*
*Traceback (most recent call last):*
*Failure: exceptions.ValueError: bad value*
-----------------------------------------------------------------------------------------------------------------------

If I try to remedy this by asserting I get a defer.FirstError instead of a
ValueError:
-----------------------------------------------------------------------------------------------------------------------
*def testFailureFromDeferredList(self):*
*    d = defer.fail(ValueError('bad value'))*
*    return self.assertFailure(defer.gatherResults([d]), defer.FirstError)*
-----------------------------------------------------------------------------------------------------------------------

 I still get an Error:
-----------------------------------------------------------------------------------------------------------------------
*[ERROR]*
*Traceback (most recent call last):*
*Failure: exceptions.ValueError: bad value*
-----------------------------------------------------------------------------------------------------------------------

Is there another way to assert ValueError was raised?

Thanks,
Jorge
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130805/1879016a/attachment.html>

From exarkun at twistedmatrix.com  Mon Aug  5 18:14:53 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 06 Aug 2013 00:14:53 -0000
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
 <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
Message-ID: <20130806001453.26068.1255706103.divmod.xquotient.171@top>

On 5 Aug, 09:20 pm, _ at lvh.io wrote:
>Hi,
>
>Sorry, when editing and cutting my post I got rid of something 
>important :-)
>
>When you log in, you get greeted by some terminal app, say something
>written with Urwid or so. In addition to that, on the client, you can 
>start
>accepting connections on some TCP port, and at some point the server 
>will
>connect to that. That stream should be multiplexed inside SSH. Also, 
>The
>client should be able to make connections on localhost, which are also
>multiplexed and actually turn into transports inside the server.
>
>Would that be possible?

This is still sort of incomprehensible to me.  For example, you haven't 
even said whether you're trying to develop the server side of this, the 
client side, both, or what.  And why would a server ever try to make a 
TCP connection to a port on the client?  Perhaps you can lay out your 
goals in a bit more detail, skipping over fewer of the other important 
details?

About the only part I understand is "multiplexing", to which the answer 
is "probably, SSH does support multiple logical channels over a single 
TCP connection".

Jean-Paul


From glyph at twistedmatrix.com  Tue Aug  6 00:28:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 Aug 2013 23:28:04 -0700
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
Message-ID: <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>


On Aug 5, 2013, at 2:09 AM, Benjamin BERTRAND <beenje at gmail.com> wrote:

> That's why the inlineCallbacks solves the problem. When I yield on the self.server.dataReceived, I wait for the deferred in the publish methods to fire and everything is clean when I close the connection.
> 
> Is there another way to do that?

Jonathan Lange wrote about this a long time ago:

http://blackjml.livejournal.com/23029.html

but better than doing that would be to avoid setting up and tearing down real TCP connections during your tests.  Those are slower than an in-memory thing (like you would get from twisted.test.proto_helpers, the one and only public module in our 'test' package) and also, as you have discovered, more unpredictable.

Is there any way to hand txredis a synthetic transport for testing?  If not, file a bug on it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130805/f5878ab9/attachment.html>

From _ at lvh.io  Tue Aug  6 02:31:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 6 Aug 2013 10:31:32 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <20130806001453.26068.1255706103.divmod.xquotient.171@top>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
 <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
 <20130806001453.26068.1255706103.divmod.xquotient.171@top>
Message-ID: <CAE_Hg6aDD02Khxh1QRweH-_knALA_UPUALXZD85EMnjz0LAyzQ@mail.gmail.com>

On Tue, Aug 6, 2013 at 2:14 AM, <exarkun at twistedmatrix.com> wrote:

> This is still sort of incomprehensible to me.  For example, you haven't
> even said whether you're trying to develop the server side of this, the
> client side, both, or what.


I'm definitely trying to write the server. I'm hoping to be able to get out
from writing the client, and have people use any common SSH client.

(That part was in the original mail: I'm asking if this would be possible
to do so with regular SSH clients, or if I'd have to write that side as
well, implying the part I'm definitely writing is the server :-))


> And why would a server ever try to make a TCP connection to a port on the
> client?  Perhaps you can lay out your goals in a bit more detail, skipping
> over fewer of the other important details?
>

Imagine a stream transport inside the server. It's a StringTransport, but
it's simulating a TCP transport between two hosts on a real network. I'd
like my client to be able to observe and modify the traffic on that
transport. To me, the obvious way to do that seemed to be to cut the
transport in half into two transports, and put the client on both of the
new ends:

fake host 1 <------------------> fake host 2

becomes

fake host 1 <--------> client <----> fake host 2

Since the client is a real machine and fake host 1 and fake host 2 are
simulated hosts that live in the server, each at an end of a
StringTransport, these new transports will have to be communicated between
the server and the client, so multiplexing streams seemed relevant.

This is obviously possible if I write both server and client (and if I did,
I probably wouldn't use Conch), but I was wondering if it'd be possible
using regular SSH clients.


> About the only part I understand is "multiplexing", to which the answer is
> "probably, SSH does support multiple logical channels over a single TCP
> connection".
>

Okay. I know conch also supports port forwarding, so I guess the command
line tool would be a good start there.


> Jean-Paul
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130806/44a1264f/attachment-0001.html>

From beenje at gmail.com  Tue Aug  6 14:33:44 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Tue, 6 Aug 2013 22:33:44 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
Message-ID: <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>


Le 6 ao?t 2013 ? 08:28, Glyph <glyph at twistedmatrix.com> a ?crit :

> 
> On Aug 5, 2013, at 2:09 AM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
>> That's why the inlineCallbacks solves the problem. When I yield on the self.server.dataReceived, I wait for the deferred in the publish methods to fire and everything is clean when I close the connection.
>> 
>> Is there another way to do that?
> 
> Jonathan Lange wrote about this a long time ago:
> 
> http://blackjml.livejournal.com/23029.html

Thanks for the link.
I added a deferred in my RedisPublishService class and fire it at the end of my publish method so that I can wait for it before to close the connection.

> 
> but better than doing that would be to avoid setting up and tearing down real TCP connections during your tests.  Those are slower than an in-memory thing (like you would get from twisted.test.proto_helpers, the one and only public module in our 'test' package) and also, as you have discovered, more unpredictable.
> 
> Is there any way to hand txredis a synthetic transport for testing?  If not, file a bug on it :).

I guess it's possible to use a synthetic transport, but that wouldn't help much without a "fake" redis server.
That would indeed be nice to have for testing.

I actually just found a dummy txredis client that implements everything internally for testing: https://github.com/williamsjj/dummy-txredis
Might be worth looking at.
But I wonder if implementing a basic redis server with twisted (for testing purpose) wouldn't be nicer?

Benjamin

> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130806/bdcc1004/attachment.html>

From piper.masden at gmail.com  Tue Aug  6 20:42:10 2013
From: piper.masden at gmail.com (Piper Masden)
Date: Tue, 6 Aug 2013 20:42:10 -0600
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
 <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
Message-ID: <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>

On Tue, Aug 6, 2013 at 2:33 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> I guess it's possible to use a synthetic transport, but that wouldn't help
> much without a "fake" redis server.
> That would indeed be nice to have for testing.
>
> I actually just found a dummy txredis client that implements everything
> internally for testing: https://github.com/williamsjj/dummy-txredis
> Might be worth looking at.
> But I wonder if implementing a basic redis server with twisted (for
> testing purpose) wouldn't be nicer?
>

What exactly are you testing? Are you testing communication with redis, or
are you testing how you handle the data from redis? If the latter, why not
just use a mock?

Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130806/8f2e1f37/attachment.html>

From glyph at twistedmatrix.com  Wed Aug  7 13:58:50 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 7 Aug 2013 12:58:50 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
Message-ID: <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>


On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com> wrote:

> pypy+builtin_json performance < cpython+ultrajson

Just curious here: what version of PyPy did you do your tests with?  From what I've heard, the somewhat recently-released 2.1 should have improved JSON parsing performance.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130807/897cc3ac/attachment.html>

From _ at lvh.io  Wed Aug  7 14:06:17 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 7 Aug 2013 22:06:17 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
Message-ID: <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>

On Wed, Aug 7, 2013 at 9:58 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Just curious here: what version of PyPy did you do your tests with?  From
> what I've heard, the somewhat recently-released 2.1 should have improved
> JSON parsing performance.
>

FWIW, Maciej commented that they don't expect to be *faster*, because they
actually care about the JSON spec or checking return values. Things which
ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing
fast, but that seems to be a common theme in this thread.

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130807/3738a085/attachment.html>

From glyph at twistedmatrix.com  Wed Aug  7 14:10:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 7 Aug 2013 13:10:43 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
Message-ID: <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>


On Aug 7, 2013, at 1:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> FWIW, Maciej commented that they don't expect to be *faster*, because they actually care about the JSON spec or checking return values. Things which ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing fast, but that seems to be a common theme in this thread.


I just said "improved", i.e. 2.1 ought to be faster than 2.0, no claims relative to anything else :).

I'm aware that ultrajson is pretty bad, but cjson had comparable (if slightly slower) performance.  Does it also have correctness and security problems?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130807/2fc4db84/attachment.html>

From beenje at gmail.com  Wed Aug  7 14:22:26 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Wed, 7 Aug 2013 22:22:26 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
 <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
 <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>
Message-ID: <D7B91FFC-CEA5-4174-8F03-0140BCC00F2C@gmail.com>


Le 7 ao?t 2013 ? 04:42, Piper Masden <piper.masden at gmail.com> a ?crit :

> On Tue, Aug 6, 2013 at 2:33 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> I guess it's possible to use a synthetic transport, but that wouldn't help much without a "fake" redis server.
> That would indeed be nice to have for testing.
> 
> I actually just found a dummy txredis client that implements everything internally for testing: https://github.com/williamsjj/dummy-txredis
> Might be worth looking at.
> But I wonder if implementing a basic redis server with twisted (for testing purpose) wouldn't be nicer?
> 
> What exactly are you testing? Are you testing communication with redis, or are you testing how you handle the data from redis? If the latter, why not just use a mock?
> 

It's the communication with redis I want to test (more an integration test).

Benjamin


> Piper
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130807/639cb8bf/attachment.html>

From avosirenfal at gmail.com  Wed Aug  7 18:08:57 2013
From: avosirenfal at gmail.com (Krysk)
Date: Wed, 07 Aug 2013 20:08:57 -0400
Subject: [Twisted-Python] Operating on metainformation in a distributed
	system
Message-ID: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>

Hello. I tried to ask this on StackOverflow, but Glyph advised me this
would probably be better. I've had trouble phrasing these questions
well, so please ask me if you need more information.

I'm working on a game server that needs to support 18,000+ players.
The game requires fairly intense resource use, and I'd like to have an
upper limit on the playercount much higher than I need. The solution
seems obvious: Design a server that can scale out and up as necessary.

Because distributed systems are hard, I tried to simplify the design
so that isn't a concern as much as possible. To that end, my
architecure is pretty simple. A player is always assigned to a
GameHandler instance. By default, a player is assigned to a
Lobby(GameHandler) instance. They can then queue for a match, and when
an appropriate match is found the server with the least load creates a
new handler, say, CaptureTheFlag(GameHandler). Then, the servers which
those players connected to serve as reverse proxies, forwarding all
data to the CaptureTheFlag handler. When that game ends, those players
are all returned to their Lobby(GameHandler) instances. Reverse
proxies are neccessary because I didn't write the game client and
modifying it is not an option. Connections cannot be renegotiated. I
can place all the servers in the same LAN, which should prevent any
major latency issues, and make bandwidth not a problem.

So far, all is good, I think this design will work well and be very
simple to work on. However, it raises the big, ugly question: How do I
share metadata across the distributed nodes?

That's necessary for the matchmaking itself. We might have 400 players
connected across 10 servers, and we want to make a match where there's
eight players on one, four on another, and four on another. I also
need to be able to figure out how many players are on the entire
network, syncronize bans and configuration data, etc.

I was thinking I could use MySQL to store the configuration data, and
use Redis for the transient data like who's online, who's in queue,
etc. Then I could have one server dedicated to operating on all that
data (such as arranging fair matches). I could use some kind of push
notification to let servers know when a match has started or ended, or
just have them query Redis periodically.

This doesn't seem very elegant, easy to work with, or easy to
implement, so naturally I don't like it very much. I'm sure it will
work, but I was hoping someone could suggest a more natural approach.

Thanks in advance,
Krysk


From mithrandi at mithrandi.net  Wed Aug  7 20:21:43 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 8 Aug 2013 04:21:43 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
 <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
Message-ID: <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>

On Wed, Aug 7, 2013 at 10:10 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Aug 7, 2013, at 1:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> FWIW, Maciej commented that they don't expect to be *faster*, because they
> actually care about the JSON spec or checking return values. Things which
> ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing
> fast, but that seems to be a common theme in this thread.
>
>
> I just said "improved", i.e. 2.1 ought to be faster than 2.0, no claims
> relative to anything else :).
>
> I'm aware that ultrajson is pretty bad, but cjson had comparable (if
> slightly slower) performance.  Does it also have correctness and security
> problems?
>

It's also important to note that in a microbenchmark, JIT warmup can be a
significant factor in PyPy. If you're interested in the performance of
short-running applications (eg. command-line tools) then this is very
relevant, but for a long-running server process you're unlikely to care
about the warmup overhead but rather the sustained performance thereafter.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130808/e31a3fc4/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Aug  8 04:27:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Aug 2013 10:27:59 -0000
Subject: [Twisted-Python] cjson/ujson/whatever performance.
In-Reply-To: <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
 <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
 <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>
Message-ID: <20130808102759.26068.1366994932.divmod.xquotient.228@top>

Perhaps it's time to move this thread to the PyPy or *json list?

Thanks,
Jean-Paul


From werner at thieprojects.ch  Thu Aug  8 19:38:02 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 08 Aug 2013 15:38:02 -1000
Subject: [Twisted-Python] Operating on metainformation in a distributed
 system
In-Reply-To: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
Message-ID: <520447FA.2070909@thieprojects.ch>

On 8/7/13 2:08 PM, Krysk wrote:
> Hello. I tried to ask this on StackOverflow, but Glyph advised me this
> would probably be better. I've had trouble phrasing these questions
> well, so please ask me if you need more information.
>
> I'm working on a game server that needs to support 18,000+ players.
> The game requires fairly intense resource use, and I'd like to have an
> upper limit on the playercount much higher than I need. The solution
> seems obvious: Design a server that can scale out and up as necessary.
>
> Because distributed systems are hard, I tried to simplify the design
> so that isn't a concern as much as possible. To that end, my
> architecure is pretty simple. A player is always assigned to a
> GameHandler instance. By default, a player is assigned to a
> Lobby(GameHandler) instance. They can then queue for a match, and when
> an appropriate match is found the server with the least load creates a
> new handler, say, CaptureTheFlag(GameHandler). Then, the servers which
> those players connected to serve as reverse proxies, forwarding all
> data to the CaptureTheFlag handler. When that game ends, those players
> are all returned to their Lobby(GameHandler) instances. Reverse
> proxies are neccessary because I didn't write the game client and
> modifying it is not an option. Connections cannot be renegotiated. I
> can place all the servers in the same LAN, which should prevent any
> major latency issues, and make bandwidth not a problem.
>
> So far, all is good, I think this design will work well and be very
> simple to work on. However, it raises the big, ugly question: How do I
> share metadata across the distributed nodes?
>
> That's necessary for the matchmaking itself. We might have 400 players
> connected across 10 servers, and we want to make a match where there's
> eight players on one, four on another, and four on another. I also
> need to be able to figure out how many players are on the entire
> network, syncronize bans and configuration data, etc.
>
> I was thinking I could use MySQL to store the configuration data, and
> use Redis for the transient data like who's online, who's in queue,
> etc. Then I could have one server dedicated to operating on all that
> data (such as arranging fair matches). I could use some kind of push
> notification to let servers know when a match has started or ended, or
> just have them query Redis periodically.
>
> This doesn't seem very elegant, easy to work with, or easy to
> implement, so naturally I don't like it very much. I'm sure it will
> work, but I was hoping someone could suggest a more natural approach.

Hi Krysk

I had similar design constraints when wanting to match up to four human 
players or computer players playing a card game. In the first monolithic 
approach I got a better feeling for how long match making actually 
takes, today we're seeing seldom more than ten tables being in the match 
make process, while there are up to two thousand user playing cards. The 
matchmaking for the game isn't the fun part, so users do away with it 
pretty fast.

After observing user behavior for more than a year, I spread out the 
game logic to separate game servers with a central matchmaking process, 
maintaining all the metadata, doing the load balancing for the game 
servers and handling the broadcasting of status and activity information 
to players. Metadata stored and passed around is the usual stuff like 
game skill level, likeability, friends, blocked users, number of games 
played, and some. The data is kept in a MySQL DB, is fetched at log in 
and passed around with the player instance.

This scheme so far balances very well and in case of needing to handle a 
lot more users, I would separate the matchmaking process to a dedicated 
machine.

The whole setup for more than 50k games played to the end per day (about 
13mins average play time per game) is handled by an 8 core single 
processor machine with 24GB of RAM, usually we do not run more than 5-6 
game logic server processes. The machine is well balanced, extremely 
stable, no runaway situation was observed since deploying the system two 
years ago.

The bottleneck I foresee in our case is the 100MB/s connection we have 
at the hosting center, currently we are only allowed one interface.

For me dodging the sharing of metadata for the matchmaking was crucial, 
I didn't fear the sharing so much as the latency induced by sharing 
metadata among processes or machines, because the added latency adds a 
lot more incongruous stuff happening to the user's experiences. Match 
making on screen with manually selecting partners puts quite a strain on 
the imagination of the average user, with added latency to clicks and 
and answers, the users shy away from match making and start playing 
alone or with the much easier selectable computer players.

HTH, Werner



From avosirenfal at gmail.com  Thu Aug  8 21:06:30 2013
From: avosirenfal at gmail.com (Krysk)
Date: Thu, 08 Aug 2013 23:06:30 -0400
Subject: [Twisted-Python] Operating on metainformation in a distributed
	system
In-Reply-To: <520447FA.2070909@thieprojects.ch>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
 <520447FA.2070909@thieprojects.ch>
Message-ID: <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>

>Hi Krysk
>
>I had similar design constraints when wanting to match up to four human 
>players or computer players playing a card game. In the first monolithic 
>approach I got a better feeling for how long match making actually 
>takes, today we're seeing seldom more than ten tables being in the match 
>make process, while there are up to two thousand user playing cards. The 
>matchmaking for the game isn't the fun part, so users do away with it 
>pretty fast.
>
>After observing user behavior for more than a year, I spread out the 
>game logic to separate game servers with a central matchmaking process, 
>maintaining all the metadata, doing the load balancing for the game 
>servers and handling the broadcasting of status and activity information 
>to players. Metadata stored and passed around is the usual stuff like 
>game skill level, likeability, friends, blocked users, number of games 
>played, and some. The data is kept in a MySQL DB, is fetched at log in 
>and passed around with the player instance.
>
>This scheme so far balances very well and in case of needing to handle a 
>lot more users, I would separate the matchmaking process to a dedicated 
>machine.
>
>The whole setup for more than 50k games played to the end per day (about 
>13mins average play time per game) is handled by an 8 core single 
>processor machine with 24GB of RAM, usually we do not run more than 5-6 
>game logic server processes. The machine is well balanced, extremely 
>stable, no runaway situation was observed since deploying the system two 
>years ago.
>
>The bottleneck I foresee in our case is the 100MB/s connection we have 
>at the hosting center, currently we are only allowed one interface.
>
>For me dodging the sharing of metadata for the matchmaking was crucial, 
>I didn't fear the sharing so much as the latency induced by sharing 
>metadata among processes or machines, because the added latency adds a 
>lot more incongruous stuff happening to the user's experiences. Match 
>making on screen with manually selecting partners puts quite a strain on 
>the imagination of the average user, with added latency to clicks and 
>and answers, the users shy away from match making and start playing 
>alone or with the much easier selectable computer players.
>
>HTH, Werner

That sounds similar to the approach I was planning on taking. That
does leave the question of how do you manage events? For instance,
when the central server figures out an appropriate match, how do you
pass the relevant data about the match (players, etc) to the game
server that's going to run it?

I imagine you either put that data in MySQL and have all servers poll
it periodically, or you have some kind of direct notification system
that are servers are listening to. Can you clarify?

Thanks,
Krysk


From werner at thieprojects.ch  Fri Aug  9 01:05:40 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 08 Aug 2013 21:05:40 -1000
Subject: [Twisted-Python] Operating on metainformation in a distributed
 system
In-Reply-To: <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
 <520447FA.2070909@thieprojects.ch>
 <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>
Message-ID: <520494C4.60800@thieprojects.ch>

On 8/8/13 5:06 PM, Krysk wrote:
>> Hi Krysk
>>
>> I had similar design constraints when wanting to match up to four human
>> players or computer players playing a card game. In the first monolithic
>> approach I got a better feeling for how long match making actually
>> takes, today we're seeing seldom more than ten tables being in the match
>> make process, while there are up to two thousand user playing cards. The
>> matchmaking for the game isn't the fun part, so users do away with it
>> pretty fast.
>>
>> After observing user behavior for more than a year, I spread out the
>> game logic to separate game servers with a central matchmaking process,
>> maintaining all the metadata, doing the load balancing for the game
>> servers and handling the broadcasting of status and activity information
>> to players. Metadata stored and passed around is the usual stuff like
>> game skill level, likeability, friends, blocked users, number of games
>> played, and some. The data is kept in a MySQL DB, is fetched at log in
>> and passed around with the player instance.
>>
>> This scheme so far balances very well and in case of needing to handle a
>> lot more users, I would separate the matchmaking process to a dedicated
>> machine.
>>
>> The whole setup for more than 50k games played to the end per day (about
>> 13mins average play time per game) is handled by an 8 core single
>> processor machine with 24GB of RAM, usually we do not run more than 5-6
>> game logic server processes. The machine is well balanced, extremely
>> stable, no runaway situation was observed since deploying the system two
>> years ago.
>>
>> The bottleneck I foresee in our case is the 100MB/s connection we have
>> at the hosting center, currently we are only allowed one interface.
>>
>> For me dodging the sharing of metadata for the matchmaking was crucial,
>> I didn't fear the sharing so much as the latency induced by sharing
>> metadata among processes or machines, because the added latency adds a
>> lot more incongruous stuff happening to the user's experiences. Match
>> making on screen with manually selecting partners puts quite a strain on
>> the imagination of the average user, with added latency to clicks and
>> and answers, the users shy away from match making and start playing
>> alone or with the much easier selectable computer players.
>>
>> HTH, Werner
>
> That sounds similar to the approach I was planning on taking. That
> does leave the question of how do you manage events? For instance,
> when the central server figures out an appropriate match, how do you
> pass the relevant data about the match (players, etc) to the game
> server that's going to run it?
>
> I imagine you either put that data in MySQL and have all servers poll
> it periodically, or you have some kind of direct notification system
> that are servers are listening to. Can you clarify?

Hi Krysk

nah, no storing of information in the DB and polling was out of 
question, the system is built around spread (pb), with the game servers 
being detached processes, allowing to kill/restart the matchmaking 
process with the game servers then reattaching to the freshly started 
matchmaking controller. With this it becomes possible to do hot 
upgrading while the system is running.

The match making controller has an observer interface which allows an 
user wanting to play to register itself to the general state change 
broadcasts. Besides that it also has an interface with which to gather 
more information about another particular user by using its player id 
for querying the DB when desired. Another interface allows the user to 
poke a table owner with a request to play, this request is then passed 
on to the table owner.

The sequence of match making is as follows:

- a table with a certain game type and rule set is created via the 
controller in the least used game server, the so called 'owner' of the 
table is seated at that table

- the controller keeps a reference to that particular table, with the 
game server informing the controller of state changes, like the owner 
leaving the table (in this case the human player gets replaced by a 
computer player, picking up the cards, be it in the match making or the 
game playing phase

- other users observing the 'open tables' are now able to ask for a seat

- this request can be honored or turned down by the table 'owner', the 
asking user gets the game server coordinates (IP, port, table id, seat 
position...) and has now a window of about 30 seconds to sit down at the 
table, if this does not happen, the seat is reopened again

- if the table is full (all four seats taken, with either computer or 
human players) the match making controller detaches the table from the 
'open tables' and moves it into the playing table list, with only 
minimal statistical information now available (table chat remains 
private among the four players), although it would be easy to tap into 
the chat. The table is now only under the control of the game server up 
until the users decide to leave the table. If a table has only computer 
players, it is automatically killed, the match making controller gets 
signaled

Great care was taken in the implementation of this system, that all 
information must be pushed to those in the need to know, there is no 
polling at all. All the information is kept in quite complex objects 
which can be passed via pb or kept in sync.

A single match making controller orchestrates the game setup, there can 
be any number of game servers on different machines.

The game servers itself are also offering a pb interface to the actual 
Livepage (Athena/Nevow) webservers, there can be any number of 
webservers on different machines

With all this in place, a dynamically scaling system becomes reality, 
with the additional advantage, that hot swapping of all the pieces of 
the system is possible

Hope this clarifies some corners, Werner







From burak at nehbit.net  Fri Aug  9 10:55:10 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Fri, 9 Aug 2013 19:55:10 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
Message-ID: <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>

I have been experimenting with porting qt4reactor to qt5, and I have some progress to share. It seems that the PyQt API that was being used in qt4reactor was deprecated, so I have converted the calls to the new version API and it seems it mostly works.. Except one thing: 

Traceback (most recent call last):
  File "sampleguiclient_twisted.py", line 132, in <module>
    from twisted.internet import reactor
AttributeError: 'function' object has no attribute '__pyqtSignature__'

I could not get past this error. I have prepared an example with a test case where you can see the error for yourself, and it can be reached here: 

https://dl.dropbox.com/s/4asklib8yuvm5ru/index.html 

This bunch of python files assume you have Qt5 installed, but otherwise free of dependencies. 

Any guesses on what's going on?

Best,
Burak




On Jul 23, 2013, at 12:43 AM, Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:
> 
>> Is there such a thing for Qt5? Is it planned?
> 
> Well, it sounds like you're planning it, so, I guess so :).
> 
> I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.
> 
> In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130809/2f48e71d/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130809/2f48e71d/attachment-0001.bin>

From burak at nehbit.net  Sat Aug 10 07:42:51 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 10 Aug 2013 16:42:51 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
Message-ID: <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>

More good news.

I have confirmed that the reason of this failure was my using of an unstable version of PyQt5. With the stable version of PyQt5, Qt 5.0.2 and the current Twisted stable, trial suite passes? or rather it fails with the same errors the default reactor fails:

FAILED (skips=2025, expectedFailures=11, errors=1, successes=6578)

The default twisted reactor goes through the suite in 61 seconds, qt5reactor in 66 seconds. Pretty good.

You can find the qt5 reactor here: https://dl.dropbox.com/s/r285g4bo8jb4of9/index.html

If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to?the only thing I did was to change four or five lines, after all. 

Mind that PySide does not yet support Qt5, so I have removed PySide imports. It seems that they have no plans to support Qt5 for at least through the next year.

Hope it helps someone!

Best,
Burak






On Aug 9, 2013, at 7:55 PM, Burak Nehbit <burak at nehbit.net> wrote:

> I have been experimenting with porting qt4reactor to qt5, and I have some progress to share. It seems that the PyQt API that was being used in qt4reactor was deprecated, so I have converted the calls to the new version API and it seems it mostly works.. Except one thing: 
> 
> Traceback (most recent call last):
>   File "sampleguiclient_twisted.py", line 132, in <module>
>     from twisted.internet import reactor
> AttributeError: 'function' object has no attribute '__pyqtSignature__'
> 
> I could not get past this error. I have prepared an example with a test case where you can see the error for yourself, and it can be reached here: 
> 
> https://dl.dropbox.com/s/4asklib8yuvm5ru/index.html 
> 
> This bunch of python files assume you have Qt5 installed, but otherwise free of dependencies. 
> 
> Any guesses on what's going on?
> 
> Best,
> Burak
> 
> 
> 
> 
> On Jul 23, 2013, at 12:43 AM, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:
>> 
>>> Is there such a thing for Qt5? Is it planned?
>> 
>> Well, it sounds like you're planning it, so, I guess so :).
>> 
>> I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.
>> 
>> In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.
>> 
>> -glyph
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130810/26b951bd/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130810/26b951bd/attachment.bin>

From cam.turn at gmail.com  Sat Aug 10 08:10:11 2013
From: cam.turn at gmail.com (Shell)
Date: Sat, 10 Aug 2013 15:10:11 +0100
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
Message-ID: <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>

> If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to?the only thing I did was to change four or five lines, after all.

You could instead put together a patch file - or even just document
the exact changes you made - and file an issue in the Twisted issue
tracker to have your changes included in Twisted proper.

Shell


From burak at nehbit.net  Sat Aug 10 08:14:39 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 10 Aug 2013 17:14:39 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
 <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
Message-ID: <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>

Qt4Reactor (my original file) is not a part of current Twisted due to licensing incompatibilities between Twisted and PyQt. The same licensing restrictions should also apply to my edited version, since I have no right to change the license on my own. I am using this as my base: https://github.com/ghtdak/qtreactor

Best,
Burak





On Aug 10, 2013, at 5:10 PM, Shell <cam.turn at gmail.com> wrote:

>> If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to?the only thing I did was to change four or five lines, after all.
> 
> You could instead put together a patch file - or even just document
> the exact changes you made - and file an issue in the Twisted issue
> tracker to have your changes included in Twisted proper.
> 
> Shell
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130810/66995ebe/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130810/66995ebe/attachment-0001.bin>

From termim at gmail.com  Sun Aug 11 10:08:42 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 11 Aug 2013 12:08:42 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
 <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
 <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>
Message-ID: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>

On Sat, Aug 10, 2013 at 10:14 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Qt4Reactor (my original file) is not a part of current Twisted due to
> licensing incompatibilities between Twisted and PyQt. The same licensing
> restrictions should also apply to my edited version, since I have no right
> to change the license on my own. I am using this as my base:
> https://github.com/ghtdak/qtreactor
>
>
>
> May be you could create a pull request to this repository?

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130811/86d1d784/attachment.html>

From burak at nehbit.net  Sun Aug 11 10:24:44 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 11 Aug 2013 09:24:44 -0700 (PDT)
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
References: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
Message-ID: <1376238283058.c548dcd2@Nodemailer>

These changes use the new API and may possibly prevent the current reactor in the repo from correctly functioning under Qt4. I have no Qt4 / PyQt / Twisted environment ready, so if anybody has that available I would love to hear the results.
?
Sent from my phone

On Sun, Aug 11, 2013 at 7:11 PM, Mikhail Terekhov <termim at gmail.com>
wrote:

> On Sat, Aug 10, 2013 at 10:14 AM, Burak Nehbit <burak at nehbit.net> wrote:
>> Qt4Reactor (my original file) is not a part of current Twisted due to
>> licensing incompatibilities between Twisted and PyQt. The same licensing
>> restrictions should also apply to my edited version, since I have no right
>> to change the license on my own. I am using this as my base:
>> https://github.com/ghtdak/qtreactor
>>
>>
>>
>> May be you could create a pull request to this repository?
> -- 
> Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130811/922f4e02/attachment.html>

From termim at gmail.com  Mon Aug 12 13:22:13 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Mon, 12 Aug 2013 15:22:13 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <1376238283058.c548dcd2@Nodemailer>
References: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
 <1376238283058.c548dcd2@Nodemailer>
Message-ID: <CALCsMPTqSNe4JKrT702qb8hLwu+=xzw0rQNxDXVh61TJMSwpug@mail.gmail.com>

On Sun, Aug 11, 2013 at 12:24 PM, Burak Nehbit <burak at nehbit.net> wrote:

> These changes use the new API and may possibly prevent the current reactor
> in the repo from correctly functioning under Qt4. I have no Qt4 / PyQt /
> Twisted environment ready, so if anybody has that available I would love to
> hear the results.
> ?
>

What about creating a branch?

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130812/d2989643/attachment.html>

From hs at ox.cx  Fri Aug 16 00:19:10 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 16 Aug 2013 08:19:10 +0200
Subject: [Twisted-Python] [Twisted] #6663: Allow CertificateOptions to
	set acceptable SSL ciphers
In-Reply-To: <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
References: <048.8e97c8f4809a368d1265cd9f0cd6e267@twistedmatrix.com>
 <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
Message-ID: <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>

>>  1. That there is a consent on high quality ciphers: for example right
> now there are roughly two fractions who agree what is the lesser evil: RC4
> or AES-CBC.
> 
> No, it is now clear that RC4 is the greater evil. The browsers have
> deployed defenses against the "BEAST" attack on CBC (the defense is "1/n-1
> record splitting"), and BEAST is an active attack which can only be used
> in some cases and which tends to leave evidence of the attempt. On the
> other hand, RC4 is apparently vulnerable to passive attacks, which are
> more serious.
> 
> (If I'm wrong and there actually *is* a faction who still prefers RC4
> despite the recent results against it, I'd like to read about it!)

I?m not going to argue ciphers with you because you?re obviously right and I already wrote elsewhere that I?m going to full defer to your judgement here.

To explain where the above came from and eg. Qualys is still somewhat for RC4 as a fallback cipher: to the best of my knowledge[1], Apple?s desktop Safari browser ''still'' hasn?t activated record splitting in its latest version and is thus still vulnerable to BEAST (and doesn?t support TLS>1).  But that?s probably a corner case enough to ignore in the defaults and will hopefully resolve itself in Mavericks.

[1]: Mostly from https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is-broken-now-what and I?m not aware of any changes.

From hs at ox.cx  Fri Aug 16 07:14:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 16 Aug 2013 15:14:03 +0200
Subject: [Twisted-Python] [Twisted] #6663: Allow CertificateOptions to
	set acceptable SSL ciphers
In-Reply-To: <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>
References: <048.8e97c8f4809a368d1265cd9f0cd6e267@twistedmatrix.com>
 <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
 <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>
Message-ID: <F7AA0D11-BDC8-43E9-873B-A80686311ABF@ox.cx>

please disregard this mail I mixed up the behavior of roundup and trac.

feel free to comment on ticket #6663 though.

Am 16.08.2013 um 08:19 schrieb Hynek Schlawack <hs at ox.cx>:

>>> 1. That there is a consent on high quality ciphers: for example right
>> now there are roughly two fractions who agree what is the lesser evil: RC4
>> or AES-CBC.
>> 
>> No, it is now clear that RC4 is the greater evil. The browsers have
>> deployed defenses against the "BEAST" attack on CBC (the defense is "1/n-1
>> record splitting"), and BEAST is an active attack which can only be used
>> in some cases and which tends to leave evidence of the attempt. On the
>> other hand, RC4 is apparently vulnerable to passive attacks, which are
>> more serious.
>> 
>> (If I'm wrong and there actually *is* a faction who still prefers RC4
>> despite the recent results against it, I'd like to read about it!)
> 
> I?m not going to argue ciphers with you because you?re obviously right and I already wrote elsewhere that I?m going to full defer to your judgement here.
> 
> To explain where the above came from and eg. Qualys is still somewhat for RC4 as a fallback cipher: to the best of my knowledge[1], Apple?s desktop Safari browser ''still'' hasn?t activated record splitting in its latest version and is thus still vulnerable to BEAST (and doesn?t support TLS>1).  But that?s probably a corner case enough to ignore in the defaults and will hopefully resolve itself in Mavericks.
> 
> [1]: Mostly from https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is-broken-now-what and I?m not aware of any changes.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130816/94effad8/attachment.pgp>

From haggardii at gmail.com  Mon Aug 19 11:38:24 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Mon, 19 Aug 2013 11:38:24 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
Message-ID: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>

Please indulge me -- my reasons are at the end.

Twisted as a House for Sale
===========================

You double check the listing printout to make sure you're not lost.
On the drive in, you didn't see many other cars on the road or people
out on the street -- the neighborhood seems kind of deserted.

"Nope, it's the right place," you say as you turn the key toward you.
The engine stops, and the resulting silence is immediate.  Ronnie, the
agent who's going to show you the place, said he'll meet you inside.

You first notice the yard.  The grass is a little yellowed, except
where it grows abundantly at the base of the waist-high, once-white
picket fence.  There are a bunch of signs on the fence and in the
yard.  Many of the signs have, "Attn Construction Workers" written in
big red letters at the top.  You walk toward one to see what it says,
and then... in the middle of the front yard, you notice a freestanding
door.  It looks new.  Fresh paint.  Shiny knob and knocker.  Standing
at an angle, right in the middle of the lawn.

"Weird."

Forgetting the signs for a minute you walk to the fence, open the gate
and make your way up the walkway toward the freestanding door.
Standing in front of the door you read, etched into the knocker,
"web2."

"Weird," you say again.  It almost feels like a tombstone.

You turn back toward the house.  There are lots of windows (way more
than at that other house on Amigofeed Drive).  And you notice for the
first time that there are three front doors.

"Umm...", you're beginning to doubt that this is really the house you want.

You step onto the porch and examine the doors.  From left to right,
they are labeled "reactor.listen," "TCP4ServerEndpoint" and
"serverFromString."  You reach for TCP4ServerEndpoint, but second
guess yourself and instead open the "reactor.listen" door.  You're
standing in a small entryway.  There's ample light coming from a
fluorescent fixture, though the light seems a bit sterile.  Kind of
like an old hospital.

"Oh man," you smile.  You just noticed the not-quite-lime-green shag
carpet.  Pretty sweet.

It still feels eriely quiet.  From how Ronnie described this place
over the phone, you were expecting a little more.  This dismal room
just seems so stagnant.  You glance at your watch, wondering when
Ronnie's gonna show.

"I guess I can poke around a little while I wait."

You build up a nice static charge shuffling toward the door at the
other side of the entry way.  Zap!  You get a short blue arc as you
grab the doorknob and turn.  You glance up and notice a small label on
the door as you push it open.  The label says "reactor.run()."

A huge wave of sound washes over you, startling you!  There are people
everywhere.  Some are running around, some are sitting and talking,
some are arguing loudly.  There's people on phones and on computers.
It's a madhouse of activity!  This room is huge!  It's cavernous.  It
feels like Grand Central.  The ceiling must be upwards of 30 feet
high!  The room is full of sunlight, streaming in through multiple
skylights and through the wall opposite you (perhaps 60 feet away)
which is made entirely of glass.  The glass wall looks out to a
beautiful garden, full of trees and flowers.

"Hi, I'm Ronnie!"

You swing around, surprised.

"This place is amazing!" you exclaim.

"Sure is.  Let me show you around!"

"But why is the front..." you start.

"This room is the event loop," he cuts you off.  "Everything goes
through here.  Well, not everything.  Deferreds don't, and some of the
other utilities" he continues, grabbing your arm and pulling you
through the room.

"De--whats?" you stammer.

He stops walking and turns toward you.  "Deferreds.  You know, like:
'I'm going to hit you'."  He pauses.

"You're going to wh... OWW!"  He slaps you hard across the face.

"Deferreds."  He grabs your hand and starts walking briskly through
the room again.  You rub your cheek wondering what just happened.

"Trap it next time.  Let me show you the library!"

"This place has a library?  Cool.  I hope it has one of those sliding
ladders," you think to yourself, still nursing your red cheek.

---

Ronnie takes you through a door at the side of the room.  It smells
like a library, but it seems awfully small.  For the asking price,
though, you can't complain.

"What do you want to know about?" he asks.

"Pardon?"

"What do you want to learn?  Fencing, cooking, horitculture, aviation,
rare-earth metal mining?  What do you want to know?" he asks again,
looking right at you and waiting.

"Uhh... cooking?"

"Alright, this way."  He grabs your arm and yanks you through a door
you hadn't realized was there.  You find yourself in a room no bigger
than a closet, smashed right up against Ronnie.

"Here you go."  He shoves a paper into your hands.

"Ye Olde Guide of Squirrels Cooking" reads the title.

"How old is thi..." you begin to ask.

Ronnie grabs the paper back, examining it with furrowed brow.

"Bah!"  He exclaims, "those kids keep messing with the index.  There's
not much we can do about that.  Let's go to the most recent version."
He leads you through a door to the right.

You're in another closet.  He shoves another paper into your hands.

"How to Cook a Squirrel" reads the title.  You start perusing it,
forgetting why, exactly, you are reading it in the first place.  And
it's a little uncomfortable being in these tight quarters with Ronnie.
 He's awkwardly silent and motionless standing there, smiling, staring
at you while you read.  After reading the first few paragraphs you
ask, "Is this the best thing you have on cooking?  I mean, squirrels
are nice, but..."

"We've got other stuff."  He pushes the opposite wall, which, it turns
out was a door, and you find yourself in yet another closet.  He
shoves another paper into your hands.

This one is "Proper Care of Cutlery."

"Umm...  so, anyway, this library is great.  But what else can you
show me in this house?"

"Oh, there's lots of things.  But you should really check out the
library some more.  It's full of great stuff.  And make sure you check
all the sources."

He pushes through to the door you came in, then through another door,
then another, and... you are not back in the first room, but another
closet.  Oblivious, Ronnie, pushes through another door leading to a
closet, then another, then another, then another.  You're not sure
you'll ever get back to where you were or that you'd have the
slightest chance of finding these rooms again.

"I think if I go with this house, I'll need to make myself a map of
this library," you think, as you follow Ronnie from closet to closet.

Finally, he pushes through a door and you walk back into the first
room of the library.

"Let me show you some more of the house,"  Ronnie smiles as you head
toward the event loop room.

---

Ronnie leads you on a tour of the home.  It's rather impressive.  And
expansive.  While in the basement, which is well lit and surprisingly
inviting, he points out the reinforced concrete foundation built
around massive steel beams which have been driven eighty feet into the
ground.  The foundation is incredibly strong.  You didn't realize it
from outside, but this house was designed to stand for years -- it's
commercial grade.

In the bathrooms and kitchen, Ronnie proudly shows you the plumbing.
It's solid stuff.  The craftsmanship is excellent, and it looks like
everything is built to last.

"But, just wait," he says, with a twinkle in his eye.  "We're getting
some new plumbing installed soon."

"Oh that's great.  Replacing plumbing is one of the best ways to..."

"I didn't say 'replacing.'  We're getting new tubes, but we'll still
have the old stuff, too."

"Oh..."

During your tour, you go up and down stairs (it feels like some of the
staircases have one too many steps).  And oddly, there are a lot of
rooms with two or three doors leading into them from the same hallway.
 You notice small manhole covers in many of the hallways.  After
passing the fourth or fifth one, you ask Ronnie what they are.

"Oh, those are manhole covers."  He casually responds, not stopping.

Still confused, you try again: "What are they for?"

"Anything you want."

Thanks, Ronnie.  "For example?"

Not quite sure what's so confusing, Ronnie explains "Oh, you know.
You can fix plumbing, add new walls or rooms, elevate the roof,
activate the alarm, lock all the doors, release the badgers.  Just...
whatever you want."

Badgers?  Intentionally sidestepping the badgers, you ask "Don't
people get upset when you turn off their water to fix the plumbing?"

"Why would we need to turn off the water just to fix the plumbing?"
Ronnie asks, puzzled.

You decide not to press it.

---

Eventually you end up back in the event loop room by the reactor.run()
door.  You've got another appointment, and it seems like you've seen
most of the house.

"Thanks for the tour, Ronnie," you say, "I'm really impressed with the
quality of work in this home.  There's a lot of hallways and doors to
remember, but it's very nice."  You hold out your hand to shake.

"Are you going already?" Ronnie asks, sadly, "I was just about to show
you the sails!"

"Sails?"

"Yeah, we're going to put out to sea any minute now."

"Sea?"

"Of course."

"The house comes with a boat?" you ask incredulously.

"No, that's ridiculous.  The house *is* a boat," he says, like it's
the most normal thing in the world.

"The house is a boat?"

"The house is a boat."

"I'm on a boat?"

"Yes."  He says, a little hesistantingly.  Then, a little worried and
not sure what to do with his hands, "Is it... uh... strange that the
house is a boat?"

"Um...  well...  yes.  I've never looked at a house that was also a boat."

Ronnie seems disappointed.  "Really?  That's too bad.  It's really
nice having a house that's also a boat."  Then, with the smile coming
back into his face, he says "but you don't have to use it as a boat!
And it being a boat doesn't get in the way of it being a house!"

"Err... great..." you begin, but he interrupts in his excitement.

"In fact," he goes on excitedly, "you'll probably be happy with just
the air travel."

"Air... travel?" you ask, reaching for the door.

"Of course!" he shouts in complete disbelief.

"You've got to be kidding me," you say.

"YOU'VE got to be kidding ME!" he says, in shock.  "What are those
other people trying to sell you out there!?  Don't tell me the other
houses just sit on the ground!  They don't fly?"  Ronnie slowly nods
his head as if to coax the answer out of you.  But you don't mirror
his motion.

"I don't believe it!" he continues.  "Next you're going to tell me
that when they make an addition to their flightless, floatless houses
that they don't even test to make sure that the addition will stand."

He's serious.  The house flies.  You're dumbfounded.  This house, with
the unkempt front yard and shag carpet, located in a seemingly
desolate part of town can fly.  Why isn't anyone talking about this!?

Bzeerrpp.  Your phone is ringing.  You're gonna be late for your appointment.

"I really need to go, Ronnie.  But I'll definitely be back.  Thanks
for everything.  This house is amazing."

You turn toward the reactor.run() door and start turning the doorknob.

"STOP!" A hundred voices yell.  Panic-stricken, you jump back from the
door and whip around, breathing heavily from the surprise.  Everyone
in the room including Ronnie is frozen, staring at you.

"That was close!" he says, "you only go through that door once."  He
seems relieved you didn't go through.

"Here, come this way."  He shows you to a door labeled
"reactor.stop()" and sends you on your way.
===========================

I wrote this because it's frustrating to see people make new, shiny
toys out to be amazing and revolutionary when they're not built on a
solid foundation, are not new, and are not even as good as existing
stuff (Twisted).  Twisted can fly!

I would love for more people to step inside the house and see what it
can do, instead of judging it based on incorrect facts or uninformed
opinions.  Or, more to my point, judging it based on the website
(geared toward people working on Twisted), documentation, examples, or
multitude of ways to do the same thing because of backward
compatibility.

I want to mow the lawn, so to speak.  I want to plant flowers and make
the One Front Door more prominent.  I'm considering making a site
dedicated to people learning Twisted.  It would be cool if it there
were things showcasing running Twisted services (websockets + ssh +
irc or something).

Is there interest in this?

Also, what do you think of the story? :)

Thanks,

(Sorry for the long email.)

Matt Haggard


From lauri at fnal.gov  Mon Aug 19 12:27:52 2013
From: lauri at fnal.gov (Laurelin of Middle Earth)
Date: Mon, 19 Aug 2013 13:27:52 -0500
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <521263A8.7070305@fnal.gov>

I thought the story was incredible, and a really really excellent
analogy to the feeling I have whenever I try to learn something
about twisted.  Especially the first time.

-- lauri

Thus spaketh Matt Haggard on 2013-08-19 12:38 PM:

> Please indulge me -- my reasons are at the end.
>
> Twisted as a House for Sale
> ===========================
 > [snip]


From justin.venus at gmail.com  Mon Aug 19 12:39:02 2013
From: justin.venus at gmail.com (Justin Venus)
Date: Mon, 19 Aug 2013 11:39:02 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <521263A8.7070305@fnal.gov>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <521263A8.7070305@fnal.gov>
Message-ID: <CACL=7at1rsZOhTiZWrWGad5coFWeAYTPcVSsX0Hd8o1W1NV_fw@mail.gmail.com>

I really enjoyed the story and it brought back early memories of learning
about twisted.

@jvenus


On Mon, Aug 19, 2013 at 11:27 AM, Laurelin of Middle Earth
<lauri at fnal.gov>wrote:

> I thought the story was incredible, and a really really excellent
> analogy to the feeling I have whenever I try to learn something
> about twisted.  Especially the first time.
>
> -- lauri
>
> Thus spaketh Matt Haggard on 2013-08-19 12:38 PM:
>
>
>  Please indulge me -- my reasons are at the end.
>>
>> Twisted as a House for Sale
>> ===========================
>>
> > [snip]
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>



-- 
Justin Venus
justin.venus at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130819/42ec981e/attachment.html>

From glyph at twistedmatrix.com  Mon Aug 19 18:34:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 19 Aug 2013 17:34:43 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>


On Aug 19, 2013, at 10:38 AM, Matt Haggard <haggardii at gmail.com> wrote:

> ... [a story] ...

Very entertaining :-).

My one disappointment with the narrative was that when you were lushly describing standing in an open field west of the white house, you neglected to mention that there was a mailbox there.

> I want to mow the lawn, so to speak.  I want to plant flowers and make
> the One Front Door more prominent.  I'm considering making a site
> dedicated to people learning Twisted.  It would be cool if it there
> were things showcasing running Twisted services (websockets + ssh +
> irc or something).
> 
> Is there interest in this?

Of course.

I'd be happy to see what you come up with in terms of a site specifically for beginners.  I think you might need to do more than one; after all, "do you want to make an IRC bot or a name server or an all-singing all-dancing website with IMAP and XMPP on the side?" is a tough counter-question to ask of someone who just asks "what is Twisted?".

But let's not neglect the existing site!  I can see a lot of value of having some alternate entry-points, but there are probably things that you'd like those entry-points to link to on the Twisted site proper, which may not exist.  If you'd like make them exist by doing some web site maintenance ("wiki gardening"), I'd be happy to give you the relevant credentials on https://twistedmatrix.com/trac/.  Patches to documentation are always welcome too, although (as always) we need help to get the review queue back to a manageable size so they can be landed in a timely manner.  Even little changes (like this update that I made to the Trial page a few years ago) can help a lot.

I'm pretty sure we can scare up some hosting resources for things if you want to have some kind of demo persistent Twisted services running.  twistedmatrix.com is no longer buckling under the pressure of its users - why, I just ssh'd in, and the load is less than 1.0!  By our historical standards that's practically idle! ;-)  And we have some other machines that we have not had the system administration bandwidth to make effective use of.

It's also worthwhile to periodically really review the state of things, so you don't fix problems that are already fixed, or at least you build on solutions that are already in progress.  Sometimes us old-timers who remember when the docs were _really_ bad and there were _big_ gaps (the mention of the "index" makes me think you are remembering when <http://twistedmatrix.com/documents/current/> was just a blank directory listing) don't always appreciate how much things have improved in the intervening years.

Not to say that the state of the documentation and particularly the "new user experience" doesn't still have a long, long way to go :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130819/f984b387/attachment.html>

From _ at lvh.io  Mon Aug 19 23:47:49 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 20 Aug 2013 07:47:49 +0200
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>

Hi Matt,


Loved the story, excited about the prospects. Just one nitpick: after one
of Glyph's rants on gender-neutral words, I got tripped up by Ronnie not
being referred to as "they" ;-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130820/f3e046c2/attachment.html>

From burak at nehbit.net  Tue Aug 20 04:21:35 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Tue, 20 Aug 2013 13:21:35 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances should I
	use AMP's Command Response field?
In-Reply-To: <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
Message-ID: <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>

Hi there,

I was meaning to ask you all about the 'proper' way to use AMP in regards to two?way communication. The problem I am facing is quite simple, I am building a simple peer?to?peer network in which the user:

a) When sent a handshake, returns a handshake,
b) When asked for fingerprints of posts in the local, returns it, and then asks for the same thing,
and finally, c) If any of the fingerprints do not match posts, request those posts with the fingerprint.

The only non?symmetric step I have in my protocol is the last one.

My question is, should I send my responses over the same AMP command as a response to the command requested, or should I just return an ACK (a boolean value of true, to confirm receipt) and then initiate a separate AMP request from local to the same remote? 

That would mean I would need to handle my open?connections pool by myself, to prevent posts from a non?initiated machine being accepted into the local machine, but I do need to implement that anyway due to the complexity of my business rules. At that point, it seems that I am (Am I?) just using AMP as a remote method header I don't strictly need, and I could just use LineReceiver?all my data is text?to do my bidding. 

Am I missing anything AMP is doing silently for me? Am I using it the correct way?

Thanks in advance,

Best,
Burak





On Aug 20, 2013, at 8:47 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Matt,
> 
> 
> Loved the story, excited about the prospects. Just one nitpick: after one of Glyph's rants on gender-neutral words, I got tripped up by Ronnie not being referred to as "they" ;-)
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130820/9105d270/attachment-0001.bin>

From _ at lvh.io  Tue Aug 20 06:06:51 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 20 Aug 2013 14:06:51 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
Message-ID: <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>

Hi Burak,

On Tue, Aug 20, 2013 at 12:21 PM, Burak Nehbit <burak at nehbit.net> wrote:

> Hi there,
>
> I was meaning to ask you all about the 'proper' way to use AMP in regards
> to two?way communication. The problem I am facing is quite simple, I am
> building a simple peer?to?peer network in which the user:
>
> a) When sent a handshake, returns a handshake,
> b) When asked for fingerprints of posts in the local, returns it, and then
> asks for the same thing,
> and finally, c) If any of the fingerprints do not match posts, request
> those posts with the fingerprint.
>
> The only non?symmetric step I have in my protocol is the last one.
>
> My question is, should I send my responses over the same AMP command as a
> response to the command requested, or should I just return an ACK (a
> boolean value of true, to confirm receipt) and then initiate a separate AMP
> request from local to the same remote?
>

Keep in mind that AMP commands are always ack'ed without you needing to
specify any kind of value, unless you set requiresResponse = False on the
Command class.

That would mean I would need to handle my open?connections pool by myself,
> to prevent posts from a non?initiated machine being accepted into the local
> machine, but I do need to implement that anyway due to the complexity of my
> business rules.


I don't understand this part. It sounds like an authentication problem, no?


> At that point, it seems that I am (Am I?) just using AMP as a remote
> method header I don't strictly need, and I could just use LineReceiver?all
> my data is text?to do my bidding.
>

It's usually correct that you can do things with LineReceiver, but it's
also usually true that AMP is doing stuff for you ;)

Some more information about your system would be useful. Are posts
append-only? Would it make sense to have a given serialization of them? If
so, a hash chain would allow you to sync with just one hash value. A
consensus protocol might help you figure out what that serialization is.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130820/04381f3a/attachment.html>

From haggardii at gmail.com  Tue Aug 20 09:15:47 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 20 Aug 2013 09:15:47 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
Message-ID: <CAL+xXwMjYCDp+JwLKXB2AMBZL2HshpPX=OZ9ze23ux5zzZ0zWA@mail.gmail.com>

On Mon, Aug 19, 2013 at 6:34 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 19, 2013, at 10:38 AM, Matt Haggard <haggardii at gmail.com> wrote:
>
> ... [a story] ...
>
>
> Very entertaining :-).
>
> My one disappointment with the narrative was that when you were lushly
> describing standing in an open field west of the white house, you neglected
> to mention that there was a mailbox there.

I missed a great opportunity. :)

> I'd be happy to see what you come up with in terms of a site specifically
> for beginners.  I think you might need to do more than one; after all, "do
> you want to make an IRC bot or a name server or an all-singing all-dancing
> website with IMAP and XMPP on the side?" is a tough counter-question to ask
> of someone who just asks "what is Twisted?".

Yes, there will need to be more than one thing (whether that means
different sites or different landing pages on the same site).

> But let's not neglect the existing site!  I can see a lot of value of having
> some alternate entry-points, but there are probably things that you'd like
> those entry-points to link to on the Twisted site proper, which may not
> exist.  If you'd like make them exist by doing some web site maintenance
> ("wiki gardening"), I'd be happy to give you the relevant credentials on
> https://twistedmatrix.com/trac/.  Patches to documentation are always
> welcome too, although (as always) we need help to get the review queue back
> to a manageable size so they can be landed in a timely manner.  Even little
> changes (like this update that I made to the Trial page a few years ago) can
> help a lot.

Agreed.  My goal is to get them into the existing house/library, not
to build and manage an entirely new one.  Really, I just want them to
have a few great experiences AND to realize that a webserver is just
_one_ kind of server.  For example, it made me giddy the first time I
got a netstring state machine working.  And everyone at work was blown
away when I replaced our existing WSGI-server with Twisted (it doesn't
drop connections anymore).

My goal is to make them giddy, then set them loose in the house.

I can also do some wiki gardening (I've noticed Tom Prince has done a
lot of great gardening).  I'm thinking I'll find weeds as I look for
pages to send people to after making them giddy.

> I'm pretty sure we can scare up some hosting resources for things if you
> want to have some kind of demo persistent Twisted services running.
> twistedmatrix.com is no longer buckling under the pressure of its users -
> why, I just ssh'd in, and the load is less than 1.0!  By our historical
> standards that's practically idle! ;-)  And we have some other machines that
> we have not had the system administration bandwidth to make effective use
> of.

Great!  I will start working on a demo.

> It's also worthwhile to periodically really review the state of things, so
> you don't fix problems that are already fixed, or at least you build on
> solutions that are already in progress.  Sometimes us old-timers who
> remember when the docs were _really_ bad and there were _big_ gaps (the
> mention of the "index" makes me think you are remembering when
> <http://twistedmatrix.com/documents/current/> was just a blank directory
> listing) don't always appreciate how much things have improved in the
> intervening years.

This is why I'm optimistic about Twisted.  Things _do_ improve, though
Google seems to think Twisted is still version 8.2.0 (it was to that
quirk of Google, the Indexer, that I referred in my story)

Here's what I've got already.  (I don't love it yet -- it already
feels too cluttered -- but it's a start):
http://iffy.github.io/twistedftw/


From zookog at gmail.com  Tue Aug 20 11:09:38 2013
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Tue, 20 Aug 2013 17:09:38 +0000
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>

I loved the story! Thanks.

I think the idea of a separate site for the newcomer audience has a
lot of promise. Also that site might have different (primary)
maintainers than the twistedmatrix.com site. I guess maybe one of the
values of the "front door site" is what it excludes. All the
documentation which is either incomplete or past its prime could be
kept off of the front door site.

http://iffy.github.io/twistedftw/ looks very promising!

Regards,

Zooko


From burak at nehbit.net  Tue Aug 20 16:11:47 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 01:11:47 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances
	should I use AMP's Command Response field?
In-Reply-To: <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
Message-ID: <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>

Hi Laurens,

> I don't understand this part. It sounds like an authentication problem, no?

It's an authentication problem, yes, but the authentication is a very simple one?that the remote should initiate the start of the process with a handshake. That way, the local user's program knows under who to file the incoming data. It's less of an authentication and more of preventing the remote from dumping to the local user unrequested text.

> Some more information about your system would be useful. Are posts append-only? Would it make sense to have a given serialization of them? If so, a hash chain would allow you to sync with just one hash value. A consensus protocol might help you figure out what that serialization is.

I seem to have been implicitly assuming more knowledge in my system than I have given, I apologise. To give a general overview, I am building a peer?to?peer network that is vaguely similar to reddit.com, but one that runs based on peer?to?peer exchanges rather than relying on a central server. My system sends posts across the wire from one computer to another, and all the sorting and other logic happens on the ends. The wire is rather dumb?I'm trying to follow the end to end principle as much as I can. 

The users handshake each other (by sending their node ids), exchange post fingerprints (of posts they have in their machines), request posts of fingerprints new to them, download posts from the remote, and then close the connection. This is the archetypal connection in my system. Posts are immutable, they cannot be deleted or edited, only pruned after six months, which is also enforced at endpoints. It should be rather simple to implement this with Twisted, barring some NAT Traversal pains, but that can be solved. 

The posts are JSON text. I do want to have a public?key implementation on top of this with a reliable ECC algorithm, but that's for future versions. For now, I am concerned with just getting it to work. 

Does this give you enough information? I am curious about the best or the most natural way to implement in it Twisted. I have been trying to work with Twisted on and off since March as ,y project progressed, but even after finishing the second edition Twisted book, I am still unable to fully wrap my head around it, hence these questions. 

Should I be using AMP? Am I doing something dumb?

Also, when I finally "get" Twisted, I'll be making a series of blog posts called "Twisted for Dumb People [Like Me]". Such a wonderful piece of code, it doesn't deserve the brick wall of a learning curve it currently has.

Thanks!

Best,
Burak






On Aug 20, 2013, at 3:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Burak,
> 
> On Tue, Aug 20, 2013 at 12:21 PM, Burak Nehbit <burak at nehbit.net> wrote:
> Hi there,
> 
> I was meaning to ask you all about the 'proper' way to use AMP in regards to two?way communication. The problem I am facing is quite simple, I am building a simple peer?to?peer network in which the user:
> 
> a) When sent a handshake, returns a handshake,
> b) When asked for fingerprints of posts in the local, returns it, and then asks for the same thing,
> and finally, c) If any of the fingerprints do not match posts, request those posts with the fingerprint.
> 
> The only non?symmetric step I have in my protocol is the last one.
> 
> My question is, should I send my responses over the same AMP command as a response to the command requested, or should I just return an ACK (a boolean value of true, to confirm receipt) and then initiate a separate AMP request from local to the same remote?
> 
> Keep in mind that AMP commands are always ack'ed without you needing to specify any kind of value, unless you set requiresResponse = False on the Command class.
> 
> That would mean I would need to handle my open?connections pool by myself, to prevent posts from a non?initiated machine being accepted into the local machine, but I do need to implement that anyway due to the complexity of my business rules.
> 
> I don't understand this part. It sounds like an authentication problem, no?
>  
> At that point, it seems that I am (Am I?) just using AMP as a remote method header I don't strictly need, and I could just use LineReceiver?all my data is text?to do my bidding.
> 
> It's usually correct that you can do things with LineReceiver, but it's also usually true that AMP is doing stuff for you ;)
> 
> Some more information about your system would be useful. Are posts append-only? Would it make sense to have a given serialization of them? If so, a hash chain would allow you to sync with just one hash value. A consensus protocol might help you figure out what that serialization is.
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/2cbc04b1/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/2cbc04b1/attachment.bin>

From _ at lvh.io  Wed Aug 21 06:28:34 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 21 Aug 2013 14:28:34 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
Message-ID: <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>

Hi Burak,


I think you're doing fine. Distributed systems are just kind of hard :-)

It sounds like your fundamentally building an eventually consistent
distributed database. We have a few of those already: it might be
significantly less work to just use one of them. I suppose it depends why
you're trying to make it distributed. Is this about reliability in the face
of e.g. hardware failure, or is this about being able to disseminate data
when someone tries to stop you from doing so? Are you trying to protect
against byzantine failures too?

That said, you might want to consider how you communicate posts. Six months
worth of posts is a lot. Even with ten posts per day, you'd end up with
~10*30*6 = 1800 hash values. The digest size of BLAKE2 is variable, but if
you're using 512 bit digests, that's 64 bytes, or 112.5 kibibytes for the
whole thing. That's probably more than you want to send in a single message.

While you can't rely on synchronized clocks (in the wall-clock time sense)
in a distributed system, you *can* rely on timestamps of your immutable
messages. You could send only message id's in the preceding time window,
for example. You can use hash chains to guarantee that the boards share the
same history.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/dde49069/attachment.html>

From haggardii at gmail.com  Wed Aug 21 11:02:47 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 21 Aug 2013 11:02:47 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
Message-ID: <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>

I've got the start of a demo multi-protocol chat server, if anyone's
interested in taking a look.  (Is this the right place for this
discussion?  Would IRC be better?)

Run it on your own machine by doing this:
# make a virtualenv if you want
git clone -b demo https://github.com/iffy/twistedftw.git
cd twistedftw
pip install -r demo_requirements.txt
twistd -n txftw
# go to http://127.0.0.1:8400

I'm thinking I'll add an SSH and SCP element, too.  So far, it seems
kind of boring.  Maybe a game of some kind would be a better demo?  I
appreciate any feedback.

Matt Haggard

On Tue, Aug 20, 2013 at 11:09 AM, Zooko O'Whielacronx <zookog at gmail.com> wrote:
> I loved the story! Thanks.
>
> I think the idea of a separate site for the newcomer audience has a
> lot of promise. Also that site might have different (primary)
> maintainers than the twistedmatrix.com site. I guess maybe one of the
> values of the "front door site" is what it excludes. All the
> documentation which is either incomplete or past its prime could be
> kept off of the front door site.
>
> http://iffy.github.io/twistedftw/ looks very promising!
>
> Regards,
>
> Zooko
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From twisted-python at 2xlp.com  Wed Aug 21 12:05:52 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 21 Aug 2013 14:05:52 -0400
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
Message-ID: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>


It would be really beneficial if this were something that fully works with twisted, but is not dependent on it.

For example, I have a "Project" that mostly uses SqlAlchemy.  It started out in Pylons, new development is on Pyramid and there are additional tasks in Celery + some more in Twisted.  Aside from a few manual db tasks in Twisted, they all share and re-use a common "Model" package.  

Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.

From burak at nehbit.net  Wed Aug 21 12:09:25 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 21:09:25 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances
	should I use AMP's Command Response field?
In-Reply-To: <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
Message-ID: <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>

(Only the latter part of this post is related to Twisted. I apologise in advance for the former, and you can skip to that half directly to read about the gist)

Hi Laurens,

> I think you're doing fine. Distributed systems are just kind of hard :-)

This is encouraging to hear!

> It sounds like your fundamentally building an eventually consistent distributed database. We have a few of those already: it might be significantly less work to just use one of them. I suppose it depends why you're trying to make it distributed. 

I have done a superficial research, so far it points to implementing my own solution. Or rather, what I am producing is not a full?fledged eventually consistent database at all, it's a loosely knit bunches of people. There is no 'database' in the classical sense.

> Is this about reliability in the face of e.g. hardware failure, or is this about being able to disseminate data when someone tries to stop you from doing so? Are you trying to protect against byzantine failures too?

It's about the right to free speech, so I would say the latter. I'm from Turkey and currently living in the United States, so while I am protected under First Amendment, my compatriots are not. This is significant: As you might have heard, we had a wave of peaceful protests two months ago against the last green space being demolished in the heart of Istanbul, the Gezi Park, to turn the space into a shopping mall. The riot police attacked unarmed, stationary people with tear gas canisters, which, led to a series of much larger protests (a few million large at its height) and an international outcry. Thousands arrested, five dead, state apparatus pressing charges for everyone from high schoolers to suburban moms. This country is not a banana republic and it's what made these so shocking: Turkey is the 15th largest economy in the world, larger than South Korea in terms of GDP, in the process of joining the European Union etc. 

The reason I'm telling this is what happened afterwards; after the govt. had to stop police violence after the EU / US pressure, they silently began a witch?hunt of Twitter, Facebook users and bloggers they deemed to be 'promoting armed insurgency against the state', and there are currently around 20-25 people currently under detention, waiting for trial. Of course, Twitter and Facebook does not give Turkish government any IP addresses: They just look at people's profiles, and just grab the most likely person having the same name. Our very broken legal system allows for up to five years (!) of contempt of court without pressing any charges, something which the Islamist government really loves to use against its people. 

I am building a tool that allows people to express their opinions without necessarily revealing their identities. It's called Aether, a distributed network that allows its users?all users are anonymous and unregistered by default? to exercise their right to free speech without being endangered by state violence. Everything within it is public, and everything posted on Aether is in public domain. (And please excuse the holier?than?thou sounding copywriting on the webpage?this was my thesis project and it was one of the requirements.)

The backend process of this application runs entirely on Twisted. The business rules are simple. Consider Alice the local node, Bob the remote node, and Carol another remote node. When Bob connects to Alice and gets a list of the posts Alice has, it will request the posts he does not have. The posts Alice has publicly available are the posts Alice has either a) created, or b) upvoted. If Bob, at some point, also likes the post he has gotten from Alice, Bob will also start to publicly distribute that post. At that point, it is impossible to determine whether Alice or Bob has created this post?Alice might as well have gotten the post from a third party which Bob is not aware of. The post, being distributed from two nodes, now has have a higher chance of being found by Carol. If you extrapolate it to a thousand people who all have upvoted the post, it becomes rather impossible to determine the origin. The act of 'liking' something is the exact same thing as sharing something, as is 'creating' something?there is absolutely no difference, and every node only has the IP address of the last ring of the chain. The nodes simply count how many times they encounter the same post digest to determine the amount of upvotes the post has gotten, and they use it to determine the lineup of posts the app shows to its user. Other than that, there is no global database, there is no global state, no people in the entire network is aware of all rest?I just strive to distribute the maximum amount of popular data to maximum amount of people possible. The client application pieces together all this information into a coherent whole of topics, subjects and posts. There is also distribution of user addresses through Aether to allow people to find new nodes to connect to.

There are also other details both in cryptography to defeat a global passive adversary, or detailed business rules to detect and hide abuses from the local user and many other things?this is a large project I have been working on alone for a very long time so some parts of it are rightly esoteric. And I have been off?topic already way longer than acceptable. I have the entire local application finished, and the only remaining part is networking, which is why I am trying to figure out Twisted so hard. Here are a bunch of screenshots for your perusal. Image 1  Image 2  Image 3  Image 4.

> While you can't rely on synchronized clocks (in the wall-clock time sense) in a distributed system, you *can* rely on timestamps of your immutable messages. You could send only message id's in the preceding time window, for example. You can use hash chains to guarantee that the boards share the same history.

I'm just discarding posts timestamped UNIX time that is ahead of the local UNIX time?for this specific purpose, it works well. 

All of those commands are handled through AMP protocol, and so far I am treating AMP like a local protocol with no chance of failure?that won't be the case under a real network. I can serve errors over AMP, but it starts to get very, very complex very fast when you do not have any guarantees on in which order things arrive. There are certain actions I want to forbid if a certain sequence has not been completed with that peer yet, but otherwise the protocol is remarkably flexible, and likewise remarkably pain?inflicting in its implementation. I guess I just want to know if I am using Twisted in this project the sanest way possible?I have enough insanity going on in my project to last a lifetime already!

Sorry about the semi off?topic wall of text, won't happen again.

Thanks,
Burak





On Aug 21, 2013, at 3:28 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Burak,
> 
> 
> I think you're doing fine. Distributed systems are just kind of hard :-)
> 
> It sounds like your fundamentally building an eventually consistent distributed database. We have a few of those already: it might be significantly less work to just use one of them. I suppose it depends why you're trying to make it distributed. Is this about reliability in the face of e.g. hardware failure, or is this about being able to disseminate data when someone tries to stop you from doing so? Are you trying to protect against byzantine failures too?
> 
> That said, you might want to consider how you communicate posts. Six months worth of posts is a lot. Even with ten posts per day, you'd end up with ~10*30*6 = 1800 hash values. The digest size of BLAKE2 is variable, but if you're using 512 bit digests, that's 64 bytes, or 112.5 kibibytes for the whole thing. That's probably more than you want to send in a single message.
> 
> While you can't rely on synchronized clocks (in the wall-clock time sense) in a distributed system, you *can* rely on timestamps of your immutable messages. You could send only message id's in the preceding time window, for example. You can use hash chains to guarantee that the boards share the same history.
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/9c0b7497/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/9c0b7497/attachment-0001.bin>

From burak at nehbit.net  Wed Aug 21 12:15:24 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 21:15:24 +0300
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
Message-ID: <7B6C9C40-4E37-46A4-AAD2-661AA5E2CE1D@nehbit.net>

I am currently using SQLAlchemy with Twisted with deferToThread and it works rather well, have you tried it? So long as you create a new session for each thread you spawn (which you should also do without Twisted) it works without any modification required.

Here's an example of using SQLAlchemy with Twisted? no guarantees on it's the best way to do things, but it works.

def checkIfNodeExists(nodeId):
    def threadFunction():
        s = Session()
        r =  s.query(Node).filter(Node.NodeId == nodeId).count()
        if r is not 0:
            return True
        else:
            return False

    return threads.deferToThread(threadFunction)



On Aug 21, 2013, at 9:05 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> 
> It would be really beneficial if this were something that fully works with twisted, but is not dependent on it.
> 
> For example, I have a "Project" that mostly uses SqlAlchemy.  It started out in Pylons, new development is on Pyramid and there are additional tasks in Celery + some more in Twisted.  Aside from a few manual db tasks in Twisted, they all share and re-use a common "Model" package.  
> 
> Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/63b057ec/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/63b057ec/attachment.bin>

From jeff at ocjtech.us  Wed Aug 21 12:16:21 2013
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Wed, 21 Aug 2013 13:16:21 -0500
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
 <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
Message-ID: <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>

Burak, what you're trying to do sounds a little like the Freenet
Project. https://freenetproject.org/  If you can't use their code
directly you can certainly get some inspiration or learn how they
solved similar problems.

-- 
Jeff Ollie


From glyph at twistedmatrix.com  Wed Aug 21 12:32:18 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 21 Aug 2013 11:32:18 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
 <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>
Message-ID: <46CD6032-DCE3-4A74-BEF3-26AB8A315D9A@twistedmatrix.com>


On Aug 21, 2013, at 10:02 AM, Matt Haggard <haggardii at gmail.com> wrote:

> I've got the start of a demo multi-protocol chat server, if anyone's
> interested in taking a look.  (Is this the right place for this
> discussion?  Would IRC be better?)

This is a fine place for discussion.  If you prefer IRC, by all means use it, but mailing lists create a more persistent artifact that is easier to reference later.

> Run it on your own machine by doing this:
> # make a virtualenv if you want
> git clone -b demo https://github.com/iffy/twistedftw.git
> cd twistedftw
> pip install -r demo_requirements.txt
> twistd -n txftw
> # go to http://127.0.0.1:8400

Cool.

> I'm thinking I'll add an SSH and SCP element, too.  So far, it seems
> kind of boring.  Maybe a game of some kind would be a better demo?  I
> appreciate any feedback.

I think that as long as you make it easy to hack it up, it's OK to be a bit boring at first; the real thrill comes from editing the code and watching it change.

If you really want to make it exciting though, there's always <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/files/head:/Imaginary/> if you're feeling adventurous ;-).

-g



From glyph at twistedmatrix.com  Wed Aug 21 12:35:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 21 Aug 2013 11:35:35 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
Message-ID: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>


On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.

Doing this is simple, although probably not easy: you just need to convince the SQLAlchemy folks to separate the process of generating SQL and executing SQL, and expose hooks for event-driven frameworks (which is an ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip) to schedule SQL execution with an event-driven backend rather than assuming it can block.

When I faced this problem, I wanted to use SQLAlchemy rather than write my own ORM, but I was unable to due the lack of a public API for generating cross-database SQL.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/cd56481f/attachment.html>

From miwinter at cisco.com  Wed Aug 21 12:41:44 2013
From: miwinter at cisco.com (Mike Winter (miwinter))
Date: Wed, 21 Aug 2013 18:41:44 +0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
Message-ID: <6BE1EFC84D6C174480C3D22E26E184AD16840F47@xmb-aln-x10.cisco.com>

This reminded me of something I read years ago from Doug Schmidt on a pattern half sync half async:

http://www.cs.wustl.edu/~schmidt/PDF/PLoP-95.pdf

I feel it is relevant but the picture may be upside down in relation to writing twisted wrappers which may want to wrap a blocking API.


On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com<mailto:twisted-python at 2xlp.com>> wrote:

Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.

Doing this is simple, although probably not easy: you just need to convince the SQLAlchemy folks to separate the process of generating SQL and executing SQL, and expose hooks for event-driven frameworks (which is an ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip) to schedule SQL execution with an event-driven backend rather than assuming it can block.

When I faced this problem, I wanted to use SQLAlchemy rather than write my own ORM, but I was unable to due the lack of a public API for generating cross-database SQL.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/b44b1ab7/attachment-0001.html>

From haggardii at gmail.com  Wed Aug 21 12:54:33 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 21 Aug 2013 12:54:33 -0600
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
 <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
Message-ID: <CAL+xXwPzApdG7eM2gqhvBY5NN++N+RgSA6r2NK9ChBupUFw2BQ@mail.gmail.com>

FWIW, the separation of generating SQL and executing SQL was my intent
in designing this: https://github.com/iffy/norm  Currently, it *only*
has asynchronous SQL execution, but it wouldn't be hard to add
synchronous execution.

Also, there's no subclassing of modeled classes.

Matt Haggard

On Wed, Aug 21, 2013 at 12:35 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com>
> wrote:
>
> Having a great ORM for twisted is wonderful , but its way less exciting and
> attractive if it's only for twisted.
>
>
> Doing this is simple, although probably not easy: you just need to convince
> the SQLAlchemy folks to separate the process of generating SQL and executing
> SQL, and expose hooks for event-driven frameworks (which is an
> ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip)
> to schedule SQL execution with an event-driven backend rather than assuming
> it can block.
>
> When I faced this problem, I wanted to use SQLAlchemy rather than write my
> own ORM, but I was unable to due the lack of a public API for generating
> cross-database SQL.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From _ at lvh.io  Wed Aug 21 14:47:55 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 21 Aug 2013 22:47:55 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
 <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
 <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>
Message-ID: <CAE_Hg6Zg3ahJNY_KFq6Syh3zqn-AF-L8fvqr6gP916Ru-pNTRA@mail.gmail.com>

Hi Burak,

I don't have time to write a more complete response right now, but you
might want to get in touch with Pete Fein (@wearpants). He was trying to do
this, but with the added restriction that it had to work on WinXP Tomato's
opinion of IE6.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130821/abe29402/attachment.html>

From tom.prince at ualberta.net  Wed Aug 21 19:51:24 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 21 Aug 2013 19:51:24 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
Message-ID: <87k3jetrvn.fsf@hermes.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:
> I'm pretty sure we can scare up some hosting resources for things if
> you want to have some kind of demo persistent Twisted services
> running.  twistedmatrix.com is no longer buckling under the pressure
> of its users - why, I just ssh'd in, and the load is less than 1.0!
> By our historical standards that's practically idle! ;-) And we have
> some other machines that we have not had the system administration
> bandwidth to make effective use of.

And we have access to various clouds, to deploy things on.


From jamesbroadhead at gmail.com  Thu Aug 22 07:54:41 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Thu, 22 Aug 2013 14:54:41 +0100
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>

This was hilarious, thank you for sharing it. Forwarded the link to my
whole team.



JB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130822/f3e1e682/attachment.html>

From ltaylor.volks at gmail.com  Fri Aug 23 11:39:16 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 23 Aug 2013 12:39:16 -0500
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry Pi
Message-ID: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>

I have written a simple serial-to-serial logging proxy in order to discover and document the protocol used by two hardware devices. The goal is to incrementally replace one of the devices with a Twisted application, but right now I'm just trying to gather data.

A RaspberryPi seemed ideal for this given its cost and ability to run python; however, I seem to be running into some kind of timing or data corruption issue that only occurs on the Pi, and only when I am logging data.  The application works well on my dev laptop (OSX), but falters on the Pi.

I can use socat to do raw data collection for this first stage (it works fine on the Pi as a logging proxy), but I was hoping to use Twisted with custom log observers to format the data in ways that might help illuminate the framing of the protocol. The idea was to have the protocol just log and proxy each byte and then I could experiment with a series of observers to identify the patterns (emphasize STX/ETX as possible delimiters, flag this sequence as an 'INIT' sequence, etc..)


The setup:
--------------

[CON-A]  <---->  [SerialSpy (Twisted)]  <----> [CON-B]

When CON-A is powered-on, it goes through an init sequence to establish communication with CON-B and if there are any issues, CON-A gives up and displays an error message. 

When run from my dev laptop (OSX), the data is logged and proxied between the 2 devices without any problems. 

When run on the Pi (Raspbian), back and forth comm is fine for the first 4-5 framed packets (STX...ETX+CKSUM), but then CON-B begins to NAK every packet after that and CON-A gives up.

The total amount of data transferred during a successful init sequence is < 1k:
CON-A: 537 bytes
CON-B: 290 bytes


The app:
------------

A minimal Protocol subclass logs each byte received and writes to its peer.

class ProxyLoggingProtocol(protocol.Protocol, object):
    peer = None

    def __init__(self, name):
        self.name = name

    def dataReceived(self, data):
        """
        Log data received and proxy to peer
        """
        for b in data:
            log.msg(b, system=self.name)

        # Passthrough data to "other" transport
        if self.peer is not None:
            self.peer.transport.write(data)
        else:
            err = ValueError('Peer protocol not set (nowhere to proxy this data)')
            log.err(err)


... setup the protocols and serial transports:

log.startLogging(sys.stdout)

conA = ProxyLoggingProtocol('CON-A-->')
conB = ProxyLoggingProtocol('<--CON-B')
conA.peer = conB
conB.peer = conA

SerialPort(conA,'/dev/ttyUSB0', reactor, ...)
SerialPort(conB, '/dev/ttyUSB1', reactor, ...)

reactor.run()


The Issue?
--------------
It seems that doing anything in dataReceived beyond just proxying bytes from A to B is enough to cause CON-B to interpret received data as either bad or delayed to the point where it returns a NAK. Oddly, the first few framed packets are logged, proxied, and ACKed successfully.

This occurs if I log.startLogging() to a file or stdout. If I never call startLogging(), the data proxies without error.  That is, CON-B replies with positive ACKs and everything works as expected.

I suppose the obvious answer may be that the Pi is underpowered for this task, but I am hoping to better understand why.  I may be able to defer logging to a queue or find other workarounds, but I'd like to figure out why basic usage of logging could be causing this.  Any thoughts as to what I could be looking at next would be appreciated.


Thanks,

Lucas





From p.mayers at imperial.ac.uk  Fri Aug 23 12:53:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 23 Aug 2013 19:53:36 +0100
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
 Pi
In-Reply-To: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
Message-ID: <5217AFB0.3090000@imperial.ac.uk>

On 08/23/2013 06:39 PM, Lucas Taylor wrote:

> I suppose the obvious answer may be that the Pi is underpowered for
> this task, but I am hoping to better understand why.  I may be able
> to defer logging to a queue or find other workarounds, but I'd like
> to figure out why basic usage of logging could be causing this.  Any
> thoughts as to what I could be looking at next would be appreciated.

What is the data rate, and the nature of the serial ports (e.g. UART or 
USB?)

Your suggestion of CPU rings a little bell for me; IIRC the Pi had some 
(ahem) sub-optimal behaviour w.r.t. the USB controller in some hardware 
versions. There was some mild controversy over this, with various 
accusations slung back and forth in the forums, people getting banned 
for "continuing to talk about it" and so on. But I seem to recall timely 
data delivery under CPU load was a symptom, and it might be the overhead 
of Twisted/Python/logging drives the Pi too hard.

Where is the logging directed - I'm assuming NV storage which is the SD 
card? - you might try logging to RAM and not touching the storage or bus.


From haggardii at gmail.com  Fri Aug 23 16:31:57 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Fri, 23 Aug 2013 16:31:57 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
Message-ID: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>

Thanks for positive response, everyone!

There are now two legitimate articles (yeah, they're small)
iffy.github.io/twistedftw  I'm planning next to write a hello world
for making a webserver using klein.  It will mostly be plagiarized
from the klein README and then drive them to klein's github page.

Then maybe on to:
 - threads
 - Deferreds

Feel free to fork the repo and send pull requests for other articles
or demos (or just suggest a topic/demo and maybe I'll tackle it).

Thanks,

Matt

On Thu, Aug 22, 2013 at 7:54 AM, James Broadhead
<jamesbroadhead at gmail.com> wrote:
> This was hilarious, thank you for sharing it. Forwarded the link to my whole
> team.
>
>
>
> JB
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From senthil at uthcode.com  Fri Aug 23 20:10:39 2013
From: senthil at uthcode.com (Senthil Kumaran)
Date: Fri, 23 Aug 2013 19:10:39 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
Message-ID: <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>

Hi Matt,

On Fri, Aug 23, 2013 at 3:31 PM, Matt Haggard <haggardii at gmail.com> wrote:

> Thanks for positive response, everyone!
>
> There are now two legitimate articles (yeah, they're small)
> iffy.github.io/twistedftw


This is great. It will be appealing to new audience, who value UI design
highly.

I hope you have come across Dave Peticola's twisted introduction. With
those docs, I think, this "house for sale"  story could have been a
 "disneyland trip".
:-)

-- 
Senthil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130823/303fbda4/attachment.html>

From orestis at orestis.gr  Sat Aug 24 02:12:05 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Sat, 24 Aug 2013 11:12:05 +0300
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
Message-ID: <91E8139F-F468-4DCA-A1A4-0EA2B7A7B656@orestis.gr>

I gave a 4-hour training on Twisted a couple of years ago, and tried to capture the essence of it in a written tutorial (as opposed to slides). I haven't touched those notes for ages now, but you can see the result here: 

https://github.com/orestis/twisted-tutorial

Hopefully it will find some use!

Orestis

On 24 ??? 2013, at 1:31 ?.?., Matt Haggard <haggardii at gmail.com> wrote:

> Thanks for positive response, everyone!
> 
> There are now two legitimate articles (yeah, they're small)
> iffy.github.io/twistedftw  I'm planning next to write a hello world
> for making a webserver using klein.  It will mostly be plagiarized
> from the klein README and then drive them to klein's github page.
> 
> Then maybe on to:
> - threads
> - Deferreds
> 
> Feel free to fork the repo and send pull requests for other articles
> or demos (or just suggest a topic/demo and maybe I'll tackle it).
> 
> Thanks,
> 
> Matt
> 
> On Thu, Aug 22, 2013 at 7:54 AM, James Broadhead
> <jamesbroadhead at gmail.com> wrote:
>> This was hilarious, thank you for sharing it. Forwarded the link to my whole
>> team.
>> 
>> 
>> 
>> JB
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From entrash at hotmail.com  Sat Aug 24 09:41:39 2013
From: entrash at hotmail.com (entrash hotmail)
Date: Sat, 24 Aug 2013 17:41:39 +0200
Subject: [Twisted-Python] Monitoring Application
Message-ID: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>

Hello,

just started using Twisted and don't know how to manage 
communications in a monitoring application I'm building for Windows 
environment.

I'm building an application where various client 
machines will be receiving real-time updates on the status of multiple 
servers (CPU/RAM usage, tasks running, ...). Clients should also be able
 to send commands to server machines (Start/Stop task, Shut down, 
Reboot, ...)

What protocol should I use? I managed to get 
something running from a simple Echo server sample, but I guess it's not
 the best curse of action as I could end up having 10 machines 
establishing a connection every few seconds to each of the 20 or so 
servers we have.

Is there a sample of a similar setup I could follow?

Regards  		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130824/65d77c47/attachment.html>

From ltaylor.volks at gmail.com  Sat Aug 24 11:37:04 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 24 Aug 2013 12:37:04 -0500
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
	Pi
In-Reply-To: <5217AFB0.3090000@imperial.ac.uk>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
 <5217AFB0.3090000@imperial.ac.uk>
Message-ID: <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>


On Aug 23, 2013, at 1:53 PM, Phil Mayers wrote:

> On 08/23/2013 06:39 PM, Lucas Taylor wrote:
> 
>> I suppose the obvious answer may be that the Pi is underpowered for
>> this task, but I am hoping to better understand why.  I may be able
>> to defer logging to a queue or find other workarounds, but I'd like
>> to figure out why basic usage of logging could be causing this.  Any
>> thoughts as to what I could be looking at next would be appreciated.
> 
> What is the data rate, and the nature of the serial ports (e.g. UART or USB?)
> 
> Your suggestion of CPU rings a little bell for me; IIRC the Pi had some (ahem) sub-optimal behaviour w.r.t. the USB controller in some hardware versions. There was some mild controversy over this, with various accusations slung back and forth in the forums, people getting banned for "continuing to talk about it" and so on. But I seem to recall timely data delivery under CPU load was a symptom, and it might be the overhead of Twisted/Python/logging drives the Pi too hard.
> 
> Where is the logging directed - I'm assuming NV storage which is the SD card? - you might try logging to RAM and not touching the storage or bus.
> 

9600bps, using USB-Serial adapters (tried 3 different supported chipsets). Logging to local storage and also to stdout.

Now that I have waded through many Pi forum posts about USB behavior trying to figure this out, it seems that most of the USB-Serial issues had to do with freezes when accessing the serial port, or hanging after some length of continuous use. Those issues appear to have been resolved (or at least I am not experiencing them), but it does seem there may still be lingering hardware issues in search of driver fixes according to the forums. Lots of folks are using the Pi w/ USB serial adapters to good effect, though, so who knows?

At any rate, I don't think there is much to be done on the Twisted side. I have a few minor things left to try, but I have a feeling my curiosity about the root cause of this is going to disappear in favor of ponying up for a more substantial piece of hardware... 


Thanks for your reply,

Lucas

From werner at thieprojects.ch  Sat Aug 24 13:14:15 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 24 Aug 2013 09:14:15 -1000
Subject: [Twisted-Python] Monitoring Application
In-Reply-To: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>
References: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>
Message-ID: <52190607.40604@thieprojects.ch>

On 8/24/13 5:41 AM, entrash hotmail wrote:
> Hello,
>
> just started using Twisted and don't know how to manage communications
> in a monitoring application I'm building for Windows environment.
>
> I'm building an application where various client machines will be
> receiving real-time updates on the status of multiple servers (CPU/RAM
> usage, tasks running, ...). Clients should also be able to send commands
> to server machines (Start/Stop task, Shut down, Reboot, ...)
>
> What protocol should I use? I managed to get something running from a
> simple Echo server sample, but I guess it's not the best curse of action
> as I could end up having 10 machines establishing a connection every few
> seconds to each of the 20 or so servers we have.
>
> Is there a sample of a similar setup I could follow?

Hi

In such situations I would have a go at it with twisted/spread. I don't 
have a sample for what you describe, but use spread for machine/process 
monitoring and control in a game server environment. (see thread on this 
list from some weeks ago)

Werner



From p.mayers at imperial.ac.uk  Sun Aug 25 05:00:45 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 25 Aug 2013 12:00:45 +0100
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
 Pi
In-Reply-To: <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
 <5217AFB0.3090000@imperial.ac.uk>
 <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>
Message-ID: <5219E3DD.6060708@imperial.ac.uk>

On 08/24/2013 06:37 PM, Lucas Taylor wrote:
>
> 9600bps, using USB-Serial adapters (tried 3 different supported
> chipsets). Logging to local storage and also to stdout.

But presumably stdout is going somewhere - either a local or network 
terminal or file redirect.

Could you try a simple RAM-based log observer ("append all log messages 
to python list")? Just out of curiosity ;o)

> At any rate, I don't think there is much to be done on the Twisted
> side. I have a few minor things left to try, but I have a feeling my
> curiosity about the root cause of this is going to disappear in favor
> of ponying up for a more substantial piece of hardware...

I hear good things about the beagleboard, but haven't used one myself.


From twisted at pivert.org  Sun Aug 25 05:58:21 2013
From: twisted at pivert.org (=?utf-8?Q?Fran=C3=A7ois?= Delpierre)
Date: Sun, 25 Aug 2013 13:58:21 +0200 (CEST)
Subject: [Twisted-Python] tac2deb
In-Reply-To: <1636447321.1191.1377429900724.JavaMail.zimbra@pivert.org>
Message-ID: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>

Hi, 

I'm having several problems with tac2deb: 


    * First, it seems that the documentation is wrong. Like described in: https://twistedmatrix.com/documents/current/core/howto/tutorial/configuration.html as any call to tap2deb as tap2deb --unsigned -m "Foo <foo at example.com>" --type=python finger.tac just ends with a /usr/bin/tap2deb: Wrong number of arguments. 
    * When using the -t option, it seems it works, but it always ends with this kind of error: 

dh_installdirs: No compatibility level specified in debian/compat dh_installdirs: This package will soon FTBFS; time to fix it! # Add here commands to install the package into debian/tmp. cp tap.py debian/tmp/etc/ cp: cannot create regular file `debian/tmp/etc/': No such file or directory make: *** [install-stamp] Error 1 dpkg-buildpackage: error: fakeroot debian/rules binary gave error exit status 2 

I tried to upgrade twisted to latest version (13.1), but it did not fix the problems. 

So, do we have a working example of using tap2deb with a recent twisted release (12-13)? 

Thanks, 

Fran?ois Delpierre 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130825/d9003fc7/attachment.html>

From lists at collab.nl  Sun Aug 25 09:51:05 2013
From: lists at collab.nl (Thijs Triemstra)
Date: Sun, 25 Aug 2013 17:51:05 +0200
Subject: [Twisted-Python] tac2deb
In-Reply-To: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>
References: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>
Message-ID: <521A27E9.6070605@collab.nl>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Francois,

I've been working on tap2deb fixes and test coverage, please check if
the branch on https://twistedmatrix.com/trac/ticket/5001 works for you.

Cheers,

Thijs

On 08/25/2013 01:58 PM, Fran?ois Delpierre wrote:
> Hi,
> 
> I'm having several problems with tac2deb:
> 
> * First, it seems that the documentation 
> <http://twistedmatrix.com/documents/12.0.0/core/howto/tutorial/configuration.html>
>
> 
is wrong.
> Like described in:
> https://twistedmatrix.com/documents/current/core/howto/tutorial/configuration.html
> as any call to tap2deb as tap2deb --unsigned -m "Foo
> <foo at example.com>" --type=python finger.tac just ends with a
> /usr/bin/tap2deb: Wrong number of arguments. * When using the -t
> option, it seems it works, but it always ends with this kind of
> error:
> 
> dh_installdirs: No compatibility level specified in debian/compat 
> dh_installdirs: This package will soon FTBFS; time to fix it! # Add
> here commands to install the package into debian/tmp. cp tap.py
> debian/tmp/etc/ cp: cannot create regular file `debian/tmp/etc/':
> No such file or directory make: *** [install-stamp] Error 1 
> dpkg-buildpackage: error: fakeroot debian/rules binary gave error 
> exit status 2
> 
> 
> I tried to upgrade twisted to latest version (13.1), but it did not
> fix the problems.
> 
> So, do we have a working example of using tap2deb with a recent
> twisted release (12-13)?
> 
> Thanks,
> 
> Fran?ois Delpierre
> 
> 
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iEYEARECAAYFAlIaJ+MACgkQBRbMGagbo3knFQCfc9dAHlb+sK+6rrDPZMhkB5t5
yLoAn1zBtOW4ESbEiP/CKlAD/Xv7JdwR
=g+6V
-----END PGP SIGNATURE-----


From entrash at hotmail.com  Sun Aug 25 13:07:39 2013
From: entrash at hotmail.com (entrash hotmail)
Date: Sun, 25 Aug 2013 21:07:39 +0200
Subject: [Twisted-Python] Monitoring Application
In-Reply-To: <52190607.40604@thieprojects.ch>
References: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>,
 <52190607.40604@thieprojects.ch>
Message-ID: <DUB122-W32C9E57F87AD68AD7F98F9B8480@phx.gbl>

Thanks for the pointer, seems that it can do what I need.

> Date: Sat, 24 Aug 2013 09:14:15 -1000
> From: werner at thieprojects.ch
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] Monitoring Application
> 
> On 8/24/13 5:41 AM, entrash hotmail wrote:
> > Hello,
> >
> > just started using Twisted and don't know how to manage communications
> > in a monitoring application I'm building for Windows environment.
> >
> > I'm building an application where various client machines will be
> > receiving real-time updates on the status of multiple servers (CPU/RAM
> > usage, tasks running, ...). Clients should also be able to send commands
> > to server machines (Start/Stop task, Shut down, Reboot, ...)
> >
> > What protocol should I use? I managed to get something running from a
> > simple Echo server sample, but I guess it's not the best curse of action
> > as I could end up having 10 machines establishing a connection every few
> > seconds to each of the 20 or so servers we have.
> >
> > Is there a sample of a similar setup I could follow?
> 
> Hi
> 
> In such situations I would have a go at it with twisted/spread. I don't 
> have a sample for what you describe, but use spread for machine/process 
> monitoring and control in a game server environment. (see thread on this 
> list from some weeks ago)
> 
> Werner
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130825/c584e8db/attachment.html>

From terry at jon.es  Mon Aug 26 10:08:29 2013
From: terry at jon.es (Terry Jones)
Date: Mon, 26 Aug 2013 17:08:29 +0100
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
Message-ID: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>

This doesn't prove anything, but I think the first plot at
http://jakevdp.github.io/blog/2012/09/20/why-python-is-the-last/ is quite
provocative.

Semi-related: I made a tiny optimization to jQuery a couple of months ago
as a completely unknown first-time contributor. The time from doing the git
clone to having the pull request merged into jQuery master was about an
hour, which included signing their contributor agreement.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130826/ded2018c/attachment.html>

From tobias.oberstein at tavendo.de  Mon Aug 26 10:24:16 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 26 Aug 2013 09:24:16 -0700
Subject: [Twisted-Python] Failure.getTraceback and Unicode
Message-ID: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>

Hi,

The code for "getTraceback"

http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L529

uses a native version of StringIO

http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L23

However, cStringIO:

"Unlike the StringIO<http://docs.python.org/2/library/stringio.html#module-StringIO> module, this module is not able to accept Unicode strings that cannot be encoded as plain ASCII strings."
http://docs.python.org/2/library/stringio.html#module-cStringIO

Above situation triggers an exception when the traceback includes non-ASCII Unicode strings:

"""
'unicode' does not have the buffer interface
"""

I have worked around this by implementing my own "getTraceback" that uses standard (non-native) StringIO. Works.

Should I file a bug?

/Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130826/f5ac6cdd/attachment.html>

From exarkun at twistedmatrix.com  Mon Aug 26 10:43:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 26 Aug 2013 16:43:11 -0000
Subject: [Twisted-Python] Failure.getTraceback and Unicode
In-Reply-To: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130826164311.26068.1702923771.divmod.xquotient.304@top>

On 04:24 pm, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>The code for "getTraceback"
>
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L529
>
>uses a native version of StringIO
>
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L23
>
>However, cStringIO:

`NativeStringIO` doesn't mean `cStringIO`.  On Python 2, it means 
`io.BytesIO` - which, as you observed, does not support unicode. :)
>
>Should I file a bug?

It seems unfortunate that trying to report an exception will fail 
because of encoding issues.  That seems like a bug worth fixing to me.

Jean-Paul


From m-lists at the-moon.net  Mon Aug 26 16:37:18 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 26 Aug 2013 23:37:18 +0100
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
Message-ID: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>

On 26/08/2013, Terry Jones <terry at jon.es> wrote:
> This doesn't prove anything, but I think the first plot at
> http://jakevdp.github.io/blog/2012/09/20/why-python-is-the-last/ is quite
> provocative.

Terry,

I don't think the problem is "too few contributors".

A big problem is that there are too few reviewers - especially while
Tom's away.

There are 52 branches currently awaiting review:
 * https://twistedmatrix.com/trac/report/15

Here are a few thoughts:

 1. Encourage new code reviewers -- various people have said they'd do
    code reviews but are unsure of the process or feel unqualified to
    comment on other people's code. So:

    1. Update the code review checklist
       * https://twistedmatrix.com/trac/wiki/CodeReview
       * https://www.ibm.com/developerworks/rational/library/11-proven-practices-for-peer-review/
         (via @zooko)
       * http://mumak.net/stuff/your-code-sucks.html

    2. Make the code review checklist and the highscores pages more
       prominent. Maybe via a new "Contribute" link on the top right
       of the homepage. (I think ashfall was working on a new wiki
       page for contributors).

    3. Less emphasis in report 15 on "By Order You Should Review Them
       In"
       * It's very difficult (for me at least) to review branches
         that I know nothing about.
       * Reviewers should be encouraged to review tickets for
         components that they are familiar with or tickets which they
         are interested in learning more about.
       * https://twistedmatrix.com/trac/report/15


 2. Encourage code review trading
    1. Contributors could be pointed to report 15 after submitting
       their patch or branch.
    2. Encourage contributors to make contact with another developer and
       agree to trade reviews.
    3. Modify report15 so that branches from contributors with highscores
       get moved higher up the list
       (http://twistedmatrix.com/highscores).


 3. Encourage self review -- It's frustrating when you come to review
    a patch and you have to point out obvious things. (merge
    conflicts, no tests, spelling mistakes, missing docstrings,
    missing documentation)

    1. Ask contributors to do a self review before submitting their
       patch or branch for peer review.

    2. Make it easier for contributors to run twistedchecker,
       pydoctor, pyflakes, lore locally before submitting code for
       review.

    3. Since buildbot is checking out code from Github now,
       perhaps there could be an interface for contributors to
       request it to build their own Github branch?

    4. Automatically detect merge conflicts in branches and patches
       awaiting review and notify the author.
       * This would prevent the frustrating situation of having waited
         for a month for a review only to have it pushed back to the
         bottom of the queue with a request to merge forward.


 4. Publicise upcoming features /  High priority tickets and branches

    1. For example, Twisted Web Sockets which people keep asking about
       on IRC.

    2. It's not obvious that there is a Web Sockets server branch
       which is almost ready to be
       merged. https://twistedmatrix.com/trac/ticket/4173

    3. It's been reviewed over ten times and is now back with therve
       who may or may not have time to address the latest code review
       comments.

    4. Maybe it would be nice to highlight tickets like this on the
       twistedmatrix.com front page. That might encourage new people
       to help push them through to completion.


> Semi-related: I made a tiny optimization to jQuery a couple of months ago
> as a completely unknown first-time contributor. The time from doing the git
> clone to having the pull request merged into jQuery master was about an
> hour, which included signing their contributor agreement.

You mean this one?
 * https://github.com/jquery/jquery/pull/1321

The turn-around time can be just as quick in Twisted. Here are a few
recent small changes that were merged within an hour or two:
 * https://twistedmatrix.com/trac/ticket/6674
 * https://twistedmatrix.com/trac/ticket/6525
 * https://twistedmatrix.com/trac/ticket/6403


One final thing. I hate to hear people beating up Trac. That article
follows the trend, stating that Github "replaced the clunky Trac
system of submitting static patches to projects". Well that's a gross
simplification. I for one am very fond of Trac. I find its UI
intuitive -- much more intuitive than Github, and from what I've seen
of the code it's quit well designed too. It's a flagship Python
application and we should be supporting it. It's just a shame it
wasn't built on top of Twisted.

Sorry for the long email.

-RichardW.


From mhumphrey at gmail.com  Mon Aug 26 21:06:03 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Mon, 26 Aug 2013 20:06:03 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
Message-ID: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>

I recently created a small automated, remote (via web) controlled pet
feeder using a Raspberry Pi single-board computer. The software is all in
Python, and uses the simple HTTP server that is part of the Python
libraries. I discovered Twisted about 2/3 of the way through the project,
and now that I am done I would like to port it to use Twisted. After
reading much of the documentation the Twisted web site, some aspects of
this are fairly obvious to me, while others are not. I could use some
advice on how best to design my app to fit in with the Twisted framework.

Here are the major components of the application:

1) A web site that hosts a combination of static content and some REST
APIs. REST apis are called from Javascript Ajax, and do things like
enable/disable the webcam, dispense a treat, etc. The static content
consists of a single HTML page, some javascript scripts, and a JPG that is
captured by #3 below.

2) A thread that runs a loop which manages the hardware. It does this with
a simple state machine composed of a base class and subclasses for all the
states that the hardware can be in (starting, idle, displaying status on
the lcd, dispensing a treat, recovering from treat dispense cycle, shutting
down). After initializing the hardware and the initial state, the thread
loops continuously calling a "timeTick" event to the current state. WIthin
the states, the code looks at various hardware status (like whether a
button is pressed) and decides to take action or to trigger transition to
another state.

3) A thread that runs continuously capturing images from a webcam. This
thread captures low resolution images continuously, and compares sucessive
frames to see if there is significant number of different pixels (motion
detect). If so, it captures a higher resolution image, updates a symbolic
link to point to the most recent image captured, and deletes any excessive
files from previous captures. The images captured for the motion detect are
handled by executing a process and capturing the stdout. The higher res
images captured by executing a process that writes directly to a file.

Porting #1 is very straightforward after going through the tutorial on
Twisted web. However, I am not sure how to handle #2 and #3. I would
appreciate some suggestions from those who are familiar with Twisted.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130826/9da2a403/attachment.html>

From glyph at twistedmatrix.com  Mon Aug 26 22:07:06 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 26 Aug 2013 21:07:06 -0700
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
	about Github,
	as all threads about fostering community now start on that subject)
In-Reply-To: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
Message-ID: <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>

On Aug 26, 2013, at 3:37 PM, Richard Wall <m-lists at the-moon.net> wrote:

> 1. Encourage new code reviewers -- various people have said they'd do
>    code reviews but are unsure of the process or feel unqualified to
>    comment on other people's code. So:

I find that there are three major impediments to encouraging new reviewers.

Most significantly, new reviewers do not actually know which code they can review.  New reviewers should be reviewing only patches by people who already have commit; otherwise, new contributors end up getting their code reviewed by another new contributor who might not know the ins and outs of the process.  In the best case they will get an incomplete review; in the worst case, they will be told "looks okay to me, merge" and then get kicked out of the review queue with no way to land it.

I think that's a fine rule, but it has one gigantic problem: we don't have a list of committers anywhere.  Making this list - and, critically, associating VCS handle (svn.twistedmatrix.com login) with Trac handle, for those cases where it differs - would really help new contributors figure out whether there's 

Best of all would be a separate report, "Review Tickets Submitted By Committers", which would be things that external contributors could review.  Of course, lots of these will be very confusing-looking to someone new to the Twisted codebase, but it's easy enough for people to skip things they don't understand :).

New reviewers don't know that it's OK to make a mistake.  So first let me say: it's okay to make a mistake.  Not every review is perfect.  If you missed something significant, there are several filters to catch problematic reviews.

First, if you're really new, and you're reviewing something for a committer, then it's their responsibility to make sure your review looks thorough enough.  They can always put it back into review if they think you *might* have missed something.  This is not a failure!  This means you got some valuable practice and feedback.

Second, plenty of people watch trunk commits.  If a dodgy commit gets through, someone will generally notice and revert it.  If you feel like your review needs a second look, feel free to pipe up in #twisted-dev on IRC and say "would someone please have another look at this just to make sure".

Third, this is why we have the pre-release cycle: it's a final chance for everybody with Twisted applications to make sure that nothing broke anything.

We don't have any mentorship in place; even with a comprehensive checklist, it can be intimidating to try to do a code review.  Really, we should set up a mentorship program where mentors do code reviews with people watching.  Unfortunately, our existing reviewers are generally overtaxed as it is, so for now it falls to (brave) newbies to ask for mentoring help.

I feel like if someone could hack up a Trac report, or an extension to the high scores page, that addressed the first point, it would be a lot easier to deal with the second and third ones.  So, if anyone reading this would like to do that, I would be forever in  your debt.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130826/9b1153f4/attachment.html>

From _ at lvh.io  Tue Aug 27 03:44:22 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 11:44:22 +0200
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
 about Github,
 as all threads about fostering community now start on that subject)
In-Reply-To: <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
Message-ID: <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>

On Tue, Aug 27, 2013 at 6:07 AM, Glyph <glyph at twistedmatrix.com> wrote:

> I think that's a fine rule, but it has one gigantic problem: we don't have
> a list of committers anywhere.  Making this list - and, critically,
> associating VCS handle (svn.twistedmatrix.com login) with Trac handle,
> for those cases where it differs - would really help new contributors
> figure out whether there's
>

You got cut off here.


> I feel like if someone could hack up a Trac report, or an extension to the
> high scores page, that addressed the first point, it would be a lot easier
> to deal with the second and third ones.  So, if anyone reading this would
> like to do that, I would be forever in  your debt.
>

What would be the extension to the score board?

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/b413be81/attachment-0001.html>

From _ at lvh.io  Tue Aug 27 03:54:35 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 11:54:35 +0200
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
Message-ID: <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>

IIUC, Tom does most of his contributing through Github. That probably means
that it's a well-supported process that has most of the kinks ironed out:
after all, if Tom hasn't caught them, I would guess a new contributor
probably wouldn't either :-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/bc550a12/attachment.html>

From exarkun at twistedmatrix.com  Tue Aug 27 06:14:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 27 Aug 2013 12:14:11 -0000
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
Message-ID: <20130827121411.26068.1094379411.divmod.xquotient.312@top>

On 09:54 am, _ at lvh.io wrote:
>IIUC, Tom does most of his contributing through Github. That probably 
>means
>that it's a well-supported process that has most of the kinks ironed 
>out:
>after all, if Tom hasn't caught them, I would guess a new contributor
>probably wouldn't either :-)

Or it means Tom's workflow is fine and he's learned all the issues he 
needs to avoid tripping over.

You didn't quote anything in the message you replied to, so I'll just 
guess that this is an email meant as a "+1 please switch to github". 
Please correct that impression if it is mistaken.

If it is not mistaken, then please let this sub-thread of the discussion 
die right here (reasons for doing so already given in near countless 
previous threads).  The ideas suggested elsewhere for encouraging more 
reviewers and other contributions seem more likely to bear fruit.  Let's 
follow through on those.

Thanks,
Jean-Paul


From _ at lvh.io  Tue Aug 27 07:06:46 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 15:06:46 +0200
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <20130827121411.26068.1094379411.divmod.xquotient.312@top>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
 <20130827121411.26068.1094379411.divmod.xquotient.312@top>
Message-ID: <CAE_Hg6Yqgmnc0FFGRuyD7fY1hWsrDciaurKS4uOSQeQ=Y7aJmg@mail.gmail.com>

On Tue, Aug 27, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:54 am, _ at lvh.io wrote:
>
>> IIUC, Tom does most of his contributing through Github. That probably
>> means
>> that it's a well-supported process that has most of the kinks ironed out:
>> after all, if Tom hasn't caught them, I would guess a new contributor
>> probably wouldn't either :-)
>>
>
> Or it means Tom's workflow is fine and he's learned all the issues he
> needs to avoid tripping over.
>

That sounds like what I mean. I don't understand the difference. I am
saying that Tom's workflow is fine and knows where the hard parts are.
Also, given the amount of time that he (usually) gets to spend on Twisted
and his responsiveness on the IRC channel, I think it counts as
"well-supported".


> You didn't quote anything in the message you replied to, so I'll just
> guess that this is an email meant as a "+1 please switch to github". Please
> correct that impression if it is mistaken.
>

No. I am suggesting that there is a way to contribute using Github that
isn't totally broken, and someone has already figured out what that way is,
and that someone is in a position to explain it to others. I'm saying we
don't need to switch to github, because apparently you can already use
github if you want to, everything else staying the same.

It's possible that this way of using github does not please the would-be
new reviewers sufficiently, but I'm saying that if someone suggests we move
to github, I'd like to make it clear to them that you can already use
github, and that they should probably at least formulate their arguments in
the shape of "the current way that I can use github is bad because ..." :)

Thanks,
> Jean-Paul


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/34f18b0d/attachment.html>

From haggardii at gmail.com  Tue Aug 27 10:31:24 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 27 Aug 2013 10:31:24 -0600
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
References: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
Message-ID: <CAL+xXwOxKQN2_iOHq=dFSGbi9RVY-imZtVsi4N762Hs3e-uWFw@mail.gmail.com>

On Mon, Aug 26, 2013 at 9:06 PM, Matthew Humphrey <mhumphrey at gmail.com> wrote:
> 2) A thread that runs a loop which manages the hardware. It does this with a
> simple state machine composed of a base class and subclasses for all the
> states that the hardware can be in (starting, idle, displaying status on the
> lcd, dispensing a treat, recovering from treat dispense cycle, shutting
> down). After initializing the hardware and the initial state, the thread
> loops continuously calling a "timeTick" event to the current state. WIthin
> the states, the code looks at various hardware status (like whether a button
> is pressed) and decides to take action or to trigger transition to another
> state.

I am not familiar with how you communicate with hardware on a
Raspberry PI.  Can you link to your existing code?  In my brief
reading this morning, I'm guessing you might be using the RPi.GPIO
library?  If so, I'm looking at
https://code.google.com/p/raspberry-gpio-python/wiki/Inputs which
indicates that wait_for_edge() or event_detected() might be useful
(instead of a "continuously called a 'timeTick' event").  But I'm not
sure what thread the callbacks to those functions are called in.

I've also come across
https://www.kernel.org/doc/Documentation/gpio.txt which makes me think
it would be possible to register the GPIO events with the Twisted
reactor (but I've never done that and don't have a Pi to test with).
Perhaps it's time to buy one.

> 3) A thread that runs continuously capturing images from a webcam. This
> thread captures low resolution images continuously, and compares sucessive
> frames to see if there is significant number of different pixels (motion
> detect). If so, it captures a higher resolution image, updates a symbolic
> link to point to the most recent image captured, and deletes any excessive
> files from previous captures. The images captured for the motion detect are
> handled by executing a process and capturing the stdout. The higher res
> images captured by executing a process that writes directly to a file.

Someone with more intelligence than me should answer this, but here's
my attempt:

You can do this without threads since you're just spawning processes
for the image captures.  I'm assuming you only want to capture as many
low res images as you can process. Here's one way to do it:

from twisted.internet import reactor, task, defer
from twisted.internet.utils import getProcessOutput
from twisted.python import log
from twisted.python.filepath import FilePath


class ImageCapturer:

    lowres_args = ('/path/to/lowres_args',)
    highres_args = ('/path/to/highres_args', ['/path/to/outpufile'])

    def __init__(self):
        self._last_image = None


    def getLowResImage(self):
        return getProcessOutput(*self.lowres_args)


    def getHighResImage(self):
        log.msg('getting high res image')
        d = getProcessOutput(*self.highres_args)
        d.addCallback(log.msg)
        return d


    def start(self):
        self.doCycle()


    def doCycle(self):
        d = self.getLowResImage()
        d.addCallback(self.processLowResImage)
        d.addCallback(self.finishCycle)
        return d


    def finishCycle(self, _ignored):
        self.doCycle()


    def processLowResImage(self, image):
        if self._last_image:
            if self.isDifferentEnough(self._last_image, image):
                # if it's bad for the lowres script and the highres script
                # to run at the same time, you may want to wait for the high
                # res script to finish (this code doesn't do that).
                self.getHighResImage()

        self._last_image = image


    def isDifferentEnough(self, image1, image2):
        """
        Compare the two images for differences.  Return True if it warrents
        a high res capture.

        If this is a long-running function, you could send it off to a thread
        with deferToThread.
        """
        return image1 != image2

def example(reactor):
    # for example
    capturer = ImageCapturer()

    # since I don't have an image capture script, I'll just list a directory.
    # low res directory capture :)
    capturer.lowres_args = ('/bin/ls', ['/tmp/'])

    # high res directory capture :)
    capturer.highres_args = ('/bin/ls', ['-al', '/tmp/'])
    capturer.start()

    # add and remove a file
    tmpfile = FilePath('/tmp/foo')
    reactor.callLater(1, tmpfile.setContent, 'foo')
    reactor.callLater(2, tmpfile.remove)
    return task.deferLater(reactor, 10, lambda:None)

if __name__ == '__main__':
    import sys
    log.startLogging(sys.stdout)
    task.react(example)


From haggardii at gmail.com  Tue Aug 27 17:40:42 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 27 Aug 2013 17:40:42 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
 <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
Message-ID: <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>

Senthil,

Thanks!  I don't think I realized Dave Peticola was the author of the
krondo series.  His series is great for learning how Twisted (and
asynchronous programming) works, but I've had mixed reviews from
newbies I've sent there -- mostly because they didn't know why they
would want to use Twisted.  They lacked the motivation to actually go
through the series.  With TwistedFTW I hope to get them excited enough
that when they're sent to his series they'll devour it.

Up to six articles now: http://iffy.github.io/twistedftw/

Matt

On Fri, Aug 23, 2013 at 8:10 PM, Senthil Kumaran <senthil at uthcode.com> wrote:
> Hi Matt,
>
> On Fri, Aug 23, 2013 at 3:31 PM, Matt Haggard <haggardii at gmail.com> wrote:
>>
>> Thanks for positive response, everyone!
>>
>> There are now two legitimate articles (yeah, they're small)
>> iffy.github.io/twistedftw
>
>
> This is great. It will be appealing to new audience, who value UI design
> highly.
>
> I hope you have come across Dave Peticola's twisted introduction. With those
> docs, I think, this "house for sale"  story could have been a  "disneyland
> trip".
> :-)
>
> --
> Senthil
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From z858570636 at gmail.com  Tue Aug 27 22:18:43 2013
From: z858570636 at gmail.com (yuyan zhang)
Date: Wed, 28 Aug 2013 12:18:43 +0800
Subject: [Twisted-Python] The tcp connection can't stop
Message-ID: <CA+ggLO+n3n9rCb3T69ABTU-9iXOA6=3OYGPYaR4TMWysoQfHNg@mail.gmail.com>

     I'm want to get the information of  25(smtp) port in the target ip ,so
i write the script smtp.py,and the mx.short.txt is the target ip list.You
can run the script like this :python smtp.py(the smtp.py and mx.short.txt
are in  the same directory).Then I find this script is  can't stop.
     Can you help me solution this problem?It's had troubled me about one
month.Grateful!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/916c24ac/attachment-0001.html>
-------------- next part --------------
203.188.197.111	     	
220.181.14.132 	     	
220.181.14.131 	     	
220.181.14.133 	     	
220.181.14.134 	     	
163.177.65.211 	     	
123.125.50.139 	     	
123.125.50.140 	     	
61.135.181.94  	     	
211.150.64.49  	     	
211.150.74.49  	     	
220.181.26.202 	     	
61.135.132.100 	     	
220.181.14.136 	     	
220.181.14.137 	     	
123.125.50.119 	     	
123.125.50.118 	     	
220.181.14.140 	     	
220.181.14.141 	     	
220.181.14.142 	     	
220.181.14.139 	     	
220.181.14.135 	     	
220.181.14.143 	     	
220.181.14.138 	     	
220.181.14.163 	     	
220.181.14.148 	     	
220.181.14.162 	     	
220.181.14.156 	     	
220.181.14.159 	     	
220.181.14.164 	     	
220.181.14.161 	     	
202.108.3.190  	     	
220.181.14.144 	     	
61.135.132.112 	     	
220.181.14.158 	     	
220.181.14.160 	     	
220.181.14.157 	     	
183.60.62.12   	     	
220.181.14.147 	     	
220.181.14.146 	     	
220.181.14.155 	     	
220.181.14.150 	     	
220.181.14.149 	     	
60.28.2.175    	     	
220.181.14.154 	     	
220.181.14.145 	     	
211.150.72.49  	     	
112.90.137.120 	     	
58.250.132.64  	     	
183.60.61.225  	     	
112.95.241.138 	     	
42.121.103.105 	     	
119.147.192.101	     	
59.36.102.50   	     	
59.36.102.51   	     	
113.108.18.210 	     	
113.108.64.240 	     	
119.147.6.81   	     	
202.108.35.225 	     	
183.62.125.200 	     	
113.108.77.23  	     	
119.147.192.199	     	
183.62.125.223 	     	
183.62.125.199 	     	
202.123.98.10  	     	
112.90.142.55  	     	
74.125.133.26  	     	
74.125.133.27  	     	
42.121.103.108 	     	
203.209.250.146	     	
192.168.95.236 	     	
121.14.53.136  	     	
202.108.3.153  	     	
123.125.50.213 	     	
211.150.64.59  	     	
139.175.54.239 	     	
123.125.50.214 	     	
123.125.50.217 	     	
202.108.255.210	     	
42.121.103.104 	     	
74.125.134.26  	     	
74.125.134.27  	     	
112.95.241.32  	     	
211.150.64.209 	     	
10.54.5.184    	     	
121.14.6.203   	     	
10.54.5.212    	     	
202.108.5.185  	     	
10.54.5.211    	     	
221.176.9.178  	     	
113.108.225.10 	     	
121.14.129.73  	     	
113.108.225.9  	     	
173.194.79.26  	     	
121.14.129.75  	     	
74.125.25.26   	     	
10.54.5.213    	     	
61.135.129.15  	     	
74.125.129.26  	     	
61.135.132.71  	     	
173.194.74.27  	     	
173.194.74.26  	     	
159.226.251.12 	     	
173.194.79.27  	     	
74.125.129.27  	     	
74.125.25.27   	     	
173.194.73.26  	     	
10.54.5.172    	     	
60.28.2.248    	     	
10.54.5.171    	     	
10.54.5.173    	     	
220.181.97.145 	     	
173.194.73.27  	     	
10.54.5.186    	     	
10.54.5.174    	     	
10.54.5.185    	     	
123.125.50.132 	     	
123.125.50.135 	     	
123.125.50.138 	     	
220.181.97.147 	     	
220.181.97.146 	     	
123.125.50.134 	     	
123.125.50.133 	     	
113.108.212.78 	     	
121.14.26.25   	     	
220.181.26.195 	     	
61.145.121.80  	     	
61.145.121.82  	     	
60.28.2.177    	     	
61.145.121.60  	     	
202.142.16.131 	     	
123.125.50.110 	     	
123.125.50.111 	     	
123.125.50.112 	     	
219.142.78.189 	     	
123.58.178.224 	     	
202.108.3.154  	     	
123.58.178.225 	     	
61.135.132.99  	     	
123.58.178.226 	     	
61.50.161.42   	     	
61.50.161.36   	     	
202.96.74.67   	     	
61.152.74.37   	     	
61.135.132.86  	     	
121.14.53.133  	     	
121.14.7.203   	     	
123.58.177.169 	     	
123.58.177.168 	     	
211.150.74.59  	     	
123.58.177.170 	     	
218.1.66.97    	     	
74.125.141.27  	     	
74.125.141.26  	     	
60.191.88.145  	     	
64.71.138.90   	     	
218.30.115.106 	     	
123.125.51.77  	     	
64.71.138.53   	     	
123.58.178.52  	     	
123.125.51.76  	     	
65.55.37.88    	     	
209.181.247.105	     	
65.55.37.104   	     	
123.58.178.203 	     	
220.181.26.14  	     	
123.58.178.60  	     	
123.58.178.204 	     	
123.58.178.105 	     	
202.108.3.193  	     	
65.55.37.72    	     	
65.55.37.120   	     	
65.54.188.94   	     	
58.250.132.68  	     	
65.54.188.72   	     	
65.55.92.184   	     	
65.54.188.110  	     	
61.135.158.109 	     	
65.55.92.168   	     	
65.55.92.136   	     	
123.58.178.51  	     	
65.55.92.152   	     	
65.54.188.126  	     	
61.135.132.154 	     	
61.136.58.184  	     	
211.100.41.112 	     	
211.100.41.121 	     	
202.165.102.205	     	
113.108.16.119 	     	
59.36.102.10   	     	
120.198.189.122	     	
220.181.12.13  	     	
220.181.12.11  	     	
220.181.12.15  	     	
218.1.66.91    	     	
220.181.15.111 	     	
220.181.15.112 	     	
220.181.12.14  	     	
220.181.12.12  	     	
220.181.12.18  	     	
220.181.15.114 	     	
220.181.12.17  	     	
60.191.88.156  	     	
220.181.12.16  	     	
10.54.5.142    	     	
113.108.225.7  	     	
203.69.82.2    	     	
113.108.225.8  	     	
118.145.23.137 	     	
220.181.15.113 	     	
211.100.47.36  	     	
218.57.22.44   	     	
61.128.99.61   	     	
64.18.6.10     	     	
59.151.125.157 	     	
220.181.97.136 	     	
220.181.97.134 	     	
220.181.97.135 	     	
216.163.188.57 	     	
38.113.116.194 	     	
121.14.7.199   	     	
64.191.223.42  	     	
119.145.14.94  	     	
211.100.21.180 	     	
114.247.0.100  	     	
66.196.118.33  	     	
66.196.118.34  	     	
66.196.118.37  	     	
98.136.217.202 	     	
98.136.216.26  	     	
202.108.255.224	     	
66.196.118.240 	     	
98.136.216.25  	     	
66.196.118.36  	     	
98.136.217.203 	     	
60.247.127.5   	     	
123.58.177.56  	     	
119.254.72.227 	     	
98.138.112.35  	     	
98.138.112.37  	     	
66.196.118.35  	     	
98.138.112.33  	     	
121.14.6.199   	     	
211.100.40.83  	     	
64.18.7.10     	     	
218.30.115.251 	     	
203.133.1.168  	     	
123.58.177.55  	     	
59.36.102.37   	     	
211.144.154.123	     	
113.108.212.80 	     	
98.138.112.34  	     	
98.138.112.32  	     	
98.138.112.38  	     	
74.125.148.10  	        	
64.18.4.10     	        	
202.108.3.203  	        	
61.136.62.79   	        	
74.125.137.27  	        	
202.105.134.117	        	
220.181.142.54 	        	
121.14.53.134  	        	
211.151.181.99 	        	
74.125.137.26  	        	
118.67.124.10  	        	
121.14.53.135  	        	
70.32.95.216   	        	
123.196.112.165	        	
211.100.21.184 	        	
211.20.188.150 	        	
114.247.0.97   	        	
202.105.134.119	        	
202.69.19.61   	        	
60.28.228.237  	        	
211.151.181.97 	        	
206.165.76.159 	        	
119.145.255.82 	        	
72.167.238.201 	        	
199.168.90.60  	        	
64.18.5.10     	        	
123.125.50.212 	        	
106.10.166.54  	        	
203.69.79.245  	        	
123.125.50.156 	        	
202.69.19.217  	        	
202.69.18.86   	        	
106.10.166.52  	        	
202.96.74.69   	        	
123.125.50.211 	        	
116.58.220.18  	        	
123.125.50.210 	        	
118.194.32.121 	        	
74.125.140.26  	        	
202.96.154.167 	        	
58.53.208.50   	        	
163.177.65.157 	        	
121.14.26.22   	        	
121.14.26.21   	        	
10.54.5.149    	        	
121.14.57.151  	        	
202.165.103.162	        	
61.135.132.140 	        	
121.14.57.159  	        	
121.14.26.23   	        	
64.71.138.85   	        	
202.108.145.47 	        	
94.100.177.1   	        	
123.100.7.71   	        	
64.71.138.86   	        	
121.14.129.71  	        	
121.14.57.160  	        	
121.14.129.72  	        	
64.71.138.87   	        	
125.35.5.132   	        	
219.142.78.190 	        	
98.129.184.131 	        	
123.58.177.181 	        	
74.125.140.27  	        	
123.58.177.180 	        	
216.163.188.58 	        	
123.58.178.201 	        	
123.58.178.202 	        	
210.82.57.35   	        	
211.100.40.174 	        	
202.108.67.232 	        	
207.126.147.10 	        	
220.181.130.176	        	
202.108.35.196 	        	
118.244.204.95 	        	
115.124.18.140 	        	
211.150.72.22  	        	
180.153.98.138 	        	
118.144.65.215 	        	
123.58.177.131 	        	
123.58.177.132 	        	
113.105.168.9  	        	
221.176.9.170  	        	
113.105.168.8  	        	
64.18.6.11     	        	
202.69.19.68   	        	
118.144.65.216 	        	
119.254.72.226 	        	
68.142.202.129 	        	
218.107.133.7  	        	
64.18.6.14     	        	
74.6.140.31    	        	
211.100.61.209 	        	
64.18.6.13     	        	
150.70.74.47   	        	
119.254.72.174 	        	
118.145.6.10   	        	
211.100.21.186 	        	
113.108.219.38 	        	
61.145.121.45  	        	
85.115.54.190  	        	
61.144.222.3   	        	
220.181.130.179	        	
61.145.121.43  	        	
125.35.4.85    	        	
211.100.61.208 	        	
61.145.121.75  	        	
220.181.130.172	        	
114.247.63.5   	        	
42.121.103.101 	        	
64.18.7.14     	        	
64.18.7.11     	        	
208.87.233.190 	        	
74.125.148.11  	        	
223.252.192.11 	        	
64.18.7.13     	        	
211.100.21.185 	        	
65.55.96.11    	        	
106.10.167.112 	        	
74.125.148.14  	        	
123.58.178.53  	        	
65.55.162.200  	        	
74.125.148.13  	        	
222.141.219.243	        	
64.18.4.14     	        	
64.18.4.11     	        	
123.58.178.59  	        	
64.18.4.13     	        	
121.14.129.34  	        	
218.204.255.116	        	
218.85.138.237 	        	
85.115.52.190  	        	
106.10.167.87  	        	
123.58.177.199 	        	
202.103.147.169	        	
123.58.178.124 	        	
216.200.145.235	        	
38.113.116.213 	        	
117.79.226.67  	        	
168.95.6.69    	        	
119.254.72.168 	        	
61.145.126.68  	        	
218.107.216.147	        	
218.107.63.213 	        	
218.107.63.214 	        	
72.167.238.29  	        	
173.194.76.27  	        	
202.96.171.125 	        	
216.163.188.54 	        	
61.135.152.205 	        	
218.78.214.57  	        	
54.248.217.80  	        	
211.100.21.182 	        	
118.244.235.30 	        	
42.121.103.100 	        	
38.113.116.218 	        	
211.100.21.183 	        	
211.157.0.7    	        	
116.213.70.115 	        	
122.225.97.245 	        	
85.115.60.190  	        	
220.181.130.173	        	
218.83.154.210 	        	
117.21.182.8   	        	
220.181.130.174	        	
117.121.30.32  	        	
208.87.234.190 	        	
114.247.63.6   	        	
98.136.217.192 	        	
216.32.180.190 	        	
59.40.182.169  	        	
216.69.186.201 	        	
211.100.21.181 	        	
168.95.6.70    	        	
64.191.223.39  	        	
210.71.187.212 	        	
119.254.72.162 	        	
60.247.104.230 	        	
168.95.6.68    	        	
119.254.72.144 	        	
207.46.163.30  	        	
173.194.76.26  	        	
206.165.76.160 	        	
220.181.26.193 	        	
123.100.1.139  	        	
206.165.76.161 	        	
118.194.32.67  	        	
98.138.206.39  	        	
122.225.97.227 	        	
206.165.76.158 	        	
202.104.30.99  	        	
216.32.181.178 	        	
208.65.144.12  	        	
114.251.253.227	        	
218.107.207.199	        	
74.125.131.27  	        	
218.77.130.133 	        	
180.153.98.132 	        	
202.103.147.162	        	
213.199.154.190	        	
125.88.6.222   	        	
168.95.6.53    	        	
219.143.213.7  	        	
219.151.9.152  	        	
208.65.145.12  	        	
168.95.6.52    	        	
173.203.2.32   	        	
74.125.131.26  	        	
168.95.6.61    	        	
123.58.178.125 	        	
64.18.5.11     	        	
168.95.6.67    	        	
219.143.202.166	        	
64.18.5.13     	        	
61.135.132.108 	        	
168.95.6.56    	        	
32.97.110.149  	        	
218.107.216.157	        	
220.181.130.177	        	
168.95.6.54    	        	
219.141.231.133	        	
220.112.47.149 	        	
119.254.72.164 	        	
114.251.217.10 	        	
168.95.6.57    	        	
64.18.5.14     	        	
61.146.178.233 	        	
113.108.225.5  	        	
32.97.182.141  	        	
203.158.21.1   	        	
113.108.225.6  	        	
61.128.128.115 	        	
219.133.59.236 	        	
123.124.208.100	        	
168.95.6.55    	        	
119.254.72.165 	        	
219.239.227.27 	        	
65.54.188.78   	        	
119.254.72.169 	        	
119.254.72.176 	        	
65.54.188.109  	        	
208.87.35.103  	        	
61.146.178.231 	        	
168.95.6.58    	        	
61.144.209.199 	        	
61.50.161.38   	        	
211.100.61.221 	        	
210.77.176.60  	        	
216.32.180.22  	        	
211.151.65.104 	        	
119.254.72.150 	        	
65.55.88.22    	        	
61.135.214.242 	        	
64.235.150.197 	        	
173.194.75.26  	        	
168.95.6.51    	        	
64.235.154.66  	        	
221.5.100.20   	        	
61.144.248.72  	        	
210.172.144.10 	        	
98.139.212.40  	        	
206.188.198.64 	        	
199.231.85.98  	        	
222.76.210.75  	        	
220.181.130.178	        	
119.254.72.160 	        	
168.95.6.62    	        	
119.254.72.170 	        	
60.191.40.107  	        	
202.141.160.8  	        	
211.94.93.140  	        	
211.152.37.206 	        	
123.100.7.68   	        	
168.95.6.64    	        	
119.254.72.161 	        	
218.107.216.149	        	
54.249.244.105 	        	
119.254.70.110 	        	
211.152.37.205 	        	
61.153.52.130  	        	
121.14.2.35    	        	
74.125.142.26  	        	
168.95.6.59    	        	
207.126.147.12 	        	
210.72.21.22   	        	
202.101.184.123	        	
211.157.0.4    	        	
173.194.75.27  	        	
123.100.1.135  	        	
117.53.114.15  	        	
219.135.157.151	        	
221.10.254.230 	        	
122.11.34.61   	        	
119.254.72.173 	        	
74.125.142.27  	        	
32.97.182.145  	        	
113.108.16.115 	        	
32.97.110.153  	        	
202.108.255.249	        	
32.97.182.143  	        	
211.136.253.190	        	
168.95.6.60    	        	
74.125.244.10  	        	
61.135.154.182 	        	
168.95.6.66    	        	
32.97.110.152  	        	
125.77.194.244 	        	
188.125.69.79  	        	
85.115.58.190  	        	
207.126.147.13 	        	
202.108.196.162	        	
119.254.72.148 	        	
77.238.177.9   	        	
207.126.147.14 	        	
188.125.69.78  	        	
168.95.6.65    	        	
202.108.57.114 	        	
118.244.204.109	        	
61.139.126.30  	        	
85.115.56.190  	        	
61.182.202.197 	        	
211.100.30.181 	        	
219.142.91.4   	        	
125.93.51.58   	        	
61.142.15.58   	        	
220.180.211.233	        	
98.136.185.211 	        	
119.254.72.159 	        	
32.97.182.144  	        	
202.103.147.161	        	
202.108.57.113 	        	
115.238.177.98 	        	
218.83.154.197 	        	
119.254.72.166 	        	
58.254.220.58  	        	
121.0.29.147   	        	
203.69.82.34   	        	
216.82.251.230 	        	
32.97.182.146  	        	
207.198.106.56 	        	
121.0.29.128   	        	
60.247.40.10   	        	
210.252.4.194  	        	
60.28.251.211  	        	
98.138.84.158  	        	
168.95.6.63    	        	
202.106.180.37 	        	
211.151.91.5   	        	
123.58.178.11  	        	
208.65.145.2   	        	
61.144.209.201 	        	
74.208.5.4     	        	
219.232.50.49  	        	
202.188.0.213  	        	
61.142.83.58   	        	
180.235.66.108 	        	
222.73.27.148  	        	
124.172.244.204	        	
61.152.91.52   	        	
119.254.72.179 	        	
119.254.72.157 	        	
119.254.72.147 	        	
211.95.77.39   	        	
67.231.144.184 	        	
202.108.255.246	        	
208.65.144.2   	        	
219.133.104.136	        	
222.73.173.98  	        	
119.205.212.220	        	
212.82.111.207 	        	
123.58.178.12  	        	
58.246.136.41  	        	
202.152.190.22 	        	
59.151.19.161  	        	
218.5.66.34    	        	
124.42.35.6    	        	
119.254.72.146 	        	
219.142.61.17  	        	
60.28.228.236  	        	
180.235.66.103 	        	
113.108.11.188 	        	
202.198.16.56  	        	
61.141.193.178 	        	
143.215.130.225	        	
114.80.210.69  	        	
202.96.11.69   	        	
203.188.201.253	        	
119.254.72.158 	        	
59.38.124.4    	        	
202.103.147.172	        	
118.145.2.158  	        	
12.233.228.10  	        	
119.254.72.152 	        	
119.254.72.236 	        	
114.251.228.216	        	
65.55.172.254  	        	
173.194.68.27  	        	
176.34.55.247  	        	
203.158.21.3   	        	
119.254.72.153 	        	
119.254.72.156 	        	
213.199.180.150	        	
119.254.72.155 	        	
119.254.72.149 	        	
218.16.124.66  	        	
218.104.28.38  	        	
67.231.152.184 	        	
211.100.47.38  	        	
94.100.176.20  	        	
210.242.46.179 	        	
119.254.72.151 	        	
58.68.145.89   	        	
119.254.72.180 	        	
119.254.72.145 	        	
219.142.78.250 	        	
173.194.68.26  	        	
175.102.6.141  	        	
218.85.138.54  	        	
218.30.85.220  	        	
219.151.9.153  	        	
5.10.67.27     	        	
118.145.5.6    	        	
74.125.133.14  	        	
123.100.1.214  	        	
202.112.26.50  	        	
61.144.235.4   	        	
66.36.236.47   	        	
210.83.25.69   	        	
116.228.52.134 	        	
58.61.142.13   	        	
118.244.194.3  	        	
118.244.154.41 	        	
118.145.5.10   	        	
118.145.5.12   	        	
74.208.5.27    	        	
119.254.72.175 	        	
119.120.94.65  	        	
203.118.250.45 	        	
114.247.160.228	        	
220.181.50.208 	        	
211.151.190.204	        	
118.145.2.185  	        	
123.100.1.212  	        	
17.151.224.10  	        	
202.99.20.231  	        	
202.96.122.91  	        	
218.85.138.52  	        	
211.100.47.39  	        	
221.204.249.137	        	
219.142.78.19  	        	
202.108.67.233 	        	
116.50.57.190  	        	
119.254.72.171 	        	
203.69.82.35   	        	
10.54.5.146    	        	
118.145.5.14   	        	
180.168.48.118 	        	
121.14.7.251   	        	
61.139.126.86  	        	
123.100.1.213  	        	
180.235.66.107 	        	
218.213.85.200 	        	
222.76.216.170 	        	
203.69.82.11   	        	
211.100.21.187 	        	
32.97.110.151  	        	
114.251.126.131	        	
218.107.207.116	        	
74.125.129.14  	        	
211.100.30.196 	        	
219.141.239.161	        	
210.74.107.1   	        	
118.244.234.106	        	
10.54.5.147    	        	
120.31.134.234 	        	
203.88.192.173 	        	
220.181.130.175	        	
163.177.76.251 	        	
218.85.138.186 	        	
119.254.72.154 	        	
59.38.124.16   	        	
218.107.207.73 	        	
123.100.1.211  	        	
124.172.244.202	        	
113.98.240.68  	        	
202.108.86.193 	        	
64.12.90.97    	        	
117.27.141.169 	        	
118.145.2.198  	        	
222.240.233.72 	        	
118.145.2.221  	        	
211.155.224.174	        	
118.244.194.11 	        	
124.127.106.3  	        	
64.191.223.38  	        	
218.5.77.18    	        	
118.145.2.150  	        	
222.66.26.11   	        	
180.235.66.102 	        	
119.254.72.172 	        	
211.154.136.149	        	
211.144.215.30 	        	
61.152.188.131 	        	
203.88.192.172 	        	
173.194.79.14  	        	
218.107.63.211 	        	
218.107.63.212 	        	
208.65.144.13  	        	
202.123.98.75  	        	
32.97.182.142  	        	
222.73.234.229 	        	
42.121.103.107 	        	
61.130.112.170 	        	
208.65.145.13  	        	
117.27.151.74  	        	
195.22.26.230  	        	
60.191.40.106  	        	
221.0.174.132  	        	
221.133.241.2  	        	
211.100.41.111 	        	
203.88.192.163 	        	
202.108.220.203	        	
202.207.177.2  	        	
113.105.139.88 	        	
202.96.17.48   	        	
89.104.217.10  	        	
211.88.2.46    	        	
74.125.134.14  	        	
202.99.64.72   	        	
119.147.192.210	        	
119.254.72.141 	        	
59.108.65.195  	        	
222.73.234.236 	        	
211.152.42.201 	        	
125.77.194.236 	        	
203.88.192.175 	        	
125.35.21.23   	        	
118.145.5.8    	        	
202.104.245.181	        	
221.192.237.139	        	
218.5.76.10    	        	
220.181.180.244	        	
218.85.139.208 	        	
61.139.126.68  	        	
166.111.204.8  	        	
208.43.37.100  	        	
210.51.180.141 	        	
202.102.197.123	        	
119.147.86.199 	        	
218.85.138.10  	        	
61.153.17.97   	        	
218.85.138.50  	        	
59.38.124.15   	        	
222.76.215.152 	        	
202.38.128.6   	        	
222.188.92.69  	        	
202.127.45.5   	        	
116.50.58.190  	        	
61.153.19.81   	        	
218.85.138.180 	        	
125.77.194.232 	        	
118.145.2.160  	        	
120.31.129.140 	        	
119.254.72.142 	        	
211.100.40.168 	        	
203.252.3.229  	        	
61.144.24.66   	        	
59.172.234.185 	        	
119.161.210.91 	        	
218.5.78.28    	        	
218.85.138.8   	        	
218.85.132.48  	        	
218.5.78.22    	        	
174.143.82.82  	        	
218.85.138.13  	        	
202.105.179.53 	        	
61.129.33.136  	        	
219.238.206.118	        	
119.254.72.178 	        	
203.156.254.202	        	
202.122.114.17 	        	
218.85.138.46  	        	
118.67.124.60  	        	
202.106.196.70 	        	
61.144.227.19  	        	
218.85.138.20  	        	
118.145.2.138  	        	
218.85.138.17  	        	
85.158.139.103 	        	
211.101.246.2  	        	
202.103.39.202 	        	
183.62.9.230   	        	
116.6.133.30   	        	
168.95.5.44    	        	
210.21.113.152 	        	
61.232.0.56    	        	
114.251.3.152  	        	
112.95.129.188 	        	
218.28.171.234 	        	
111.87.239.132 	        	
124.74.249.12  	        	
131.204.2.83   	        	
117.27.151.76  	        	
195.22.26.231  	        	
64.12.90.1     	        	
218.85.138.179 	        	
202.100.200.215	        	
221.4.151.14   	        	
222.76.215.154 	        	
211.151.189.164	        	
202.108.100.145	        	
219.133.59.58  	        	
117.27.141.167 	        	
218.107.207.27 	        	
202.113.16.25  	        	
61.137.93.118  	        	
112.122.11.133 	        	
32.97.110.150  	        	
219.141.230.18 	        	
61.152.91.23   	        	
59.57.251.221  	        	
202.117.1.28   	        	
203.148.6.130  	        	
218.85.138.12  	        	
211.167.104.33 	        	
211.144.147.219	        	
175.102.6.144  	        	
202.75.218.250 	        	
218.85.137.110 	        	
118.145.2.134  	        	
221.208.196.56 	        	
118.145.2.202  	        	
221.4.151.13   	        	
139.175.252.15 	        	
218.188.65.54  	        	
59.44.43.254   	        	
64.12.90.98    	        	
222.76.215.74  	        	
121.254.168.55 	        	
118.145.2.166  	        	
123.127.143.17 	        	
125.65.113.65  	        	
59.50.112.5    	        	
59.42.126.249  	        	
218.249.29.198 	        	
218.5.78.13    	        	
218.107.207.105	        	
123.125.51.73  	        	
204.232.236.134	        	
205.188.146.193	        	
98.136.59.15   	        	
216.172.154.34 	        	
205.164.24.44  	        	
202.106.90.140 	        	
110.208.2.86   	        	
116.6.21.38    	        	
174.143.82.76  	        	
216.218.133.196	        	
60.191.88.151  	        	
118.144.82.146 	        	
207.46.163.138 	        	
218.16.120.66  	        	
123.125.51.74  	        	
125.64.11.110  	        	
69.64.157.73   	        	
222.76.211.11  	        	
205.188.59.194 	        	
61.144.205.209 	        	
98.139.214.154 	        	
211.152.42.203 	        	
117.27.151.79  	        	
115.182.37.176 	        	
207.46.163.215 	        	
61.135.255.137 	        	
211.152.42.195 	        	
222.76.215.72  	        	
111.207.187.71 	        	
118.145.2.164  	        	
205.188.159.42 	        	
125.77.194.238 	        	
125.77.194.242 	        	
123.196.112.171	        	
211.151.93.247 	        	
180.235.66.104 	        	
114.251.217.13 	        	
68.87.26.147   	        	
114.113.239.241	        	
118.145.2.240  	        	
219.239.95.89  	        	
218.17.215.98  	        	
208.80.204.51  	        	
211.99.26.130  	        	
114.251.253.226	        	
218.85.138.168 	        	
98.139.239.160 	        	
218.85.138.184 	        	
220.194.56.210 	        	
218.5.78.25    	        	
118.145.2.181  	        	
210.34.0.4     	        	
218.85.138.170 	        	
211.95.77.45   	        	
59.36.102.36   	        	
206.46.232.11  	        	
204.232.236.234	        	
59.151.97.141  	        	
202.96.111.18  	        	
118.244.194.17 	        	
118.145.2.234  	        	
222.76.212.118 	        	
118.244.194.7  	        	
211.152.42.207 	        	
211.152.42.233 	        	
218.85.138.22  	        	
114.113.226.133	        	
202.108.252.161	        	
203.158.21.2   	        	
218.107.61.93  	        	
218.0.4.169    	        	
223.202.33.225 	        	
76.96.40.147   	        	
219.134.93.131 	        	
211.152.42.227 	        	
219.143.204.7  	        	
58.240.176.228 	        	
64.12.90.66    	        	
74.125.244.13  	        	
204.232.236.150	        	
118.145.2.152  	        	
124.172.244.201	        	
202.96.74.108  	        	
219.142.42.8   	        	
222.73.228.39  	        	
218.85.138.26  	        	
221.179.222.132	        	
218.85.138.24  	        	
211.144.83.129 	        	
200.45.191.16  	        	
168.160.200.18 	        	
61.175.197.139 	        	
59.151.112.132 	        	
205.188.156.193	        	
123.127.121.195	        	
202.96.57.14   	        	
211.155.27.23  	        	
196.28.76.18   	        	
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smtp.py
Type: application/octet-stream
Size: 2354 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/916c24ac/attachment-0001.obj>

From mhumphrey at gmail.com  Tue Aug 27 22:51:03 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Tue, 27 Aug 2013 21:51:03 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
References: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
Message-ID: <CAMYwhVmH-J7bD5-0bCqGX=oMgdJHonjua7bGOoKkaGgnHj9PSg@mail.gmail.com>

(Reply to Matt Haggard)

Matt - I was getting the emails delivered in digest form, so I am having to
reply to my original email instead of to your reply. I have added your
email directly to make sure you get it.

> I am not familiar with how you communicate with hardware on a
> Raspberry PI.  Can you link to your existing code?  In my brief
> reading this morning, I'm guessing you might be using the RPi.GPIO
> library?  If so, I'm looking at
> https://code.google.com/p/raspberry-gpio-python/wiki/Inputs which
> indicates that wait_for_edge() or event_detected() might be useful
> (instead of a "continuously called a 'timeTick' event").  But I'm not
> sure what thread the callbacks to those functions are called in.

> I've also come across
> https://www.kernel.org/doc/Documentation/gpio.txt which makes me think
> it would be possible to register the GPIO events with the Twisted
> reactor (but I've never done that and don't have a Pi to test with).

I wrote a small Python wrapper over the user-space GPIO driver. This uses
some special files under /sys/class/gpio. It is possible to configure a
GPIO input to be interrupt driven, and then using select() or poll() get an
asynchronous event when the configured condition occurs. I tested this out
manually from the Python console, however, my little wrapper class doesn't
support it currently. The other issue is that the simplest way to do button
debounce is to just poll the button once it's pressed and make sure it
stays pressed before some time before treating it as a "button pressed"
event. In my case, I also monitor the button to see if it is held down for
two seconds, as I treat that as an indicator to trigger the machine to
dispense the cat food. I suspect all that behavior could be duplicated in a
Twisted-friendly way, but I am not sure how to do that.

> Perhaps it's time to buy one.

They are a lot of fun for $35-$40.

>> 3) A thread that runs continuously capturing images from a webcam. This
>> ...(snip)

> Someone with more intelligence than me should answer this, but here's
> my attempt:

> You can do this without threads since you're just spawning processes
> for the image captures.  I'm assuming you only want to capture as many
> low res images as you can process. Here's one way to do it:

> from twisted.internet import reactor, task, defer
> (snip)

Thanks, I see the docs on spawning processes now that your example pointed
out their existance. I think I can also emulate the behavior of my polling
loop by using the scheduled callback feature. I will play around with it a
bit and check back if I can't figure it out.

Thanks much for your reply.




On Mon, Aug 26, 2013 at 8:06 PM, Matthew Humphrey <mhumphrey at gmail.com>wrote:

> I recently created a small automated, remote (via web) controlled pet
> feeder using a Raspberry Pi single-board computer. The software is all in
> Python, and uses the simple HTTP server that is part of the Python
> libraries. I discovered Twisted about 2/3 of the way through the project,
> and now that I am done I would like to port it to use Twisted. After
> reading much of the documentation the Twisted web site, some aspects of
> this are fairly obvious to me, while others are not. I could use some
> advice on how best to design my app to fit in with the Twisted framework.
>
> Here are the major components of the application:
>
> 1) A web site that hosts a combination of static content and some REST
> APIs. REST apis are called from Javascript Ajax, and do things like
> enable/disable the webcam, dispense a treat, etc. The static content
> consists of a single HTML page, some javascript scripts, and a JPG that is
> captured by #3 below.
>
> 2) A thread that runs a loop which manages the hardware. It does this with
> a simple state machine composed of a base class and subclasses for all the
> states that the hardware can be in (starting, idle, displaying status on
> the lcd, dispensing a treat, recovering from treat dispense cycle, shutting
> down). After initializing the hardware and the initial state, the thread
> loops continuously calling a "timeTick" event to the current state. WIthin
> the states, the code looks at various hardware status (like whether a
> button is pressed) and decides to take action or to trigger transition to
> another state.
>
> 3) A thread that runs continuously capturing images from a webcam. This
> thread captures low resolution images continuously, and compares sucessive
> frames to see if there is significant number of different pixels (motion
> detect). If so, it captures a higher resolution image, updates a symbolic
> link to point to the most recent image captured, and deletes any excessive
> files from previous captures. The images captured for the motion detect are
> handled by executing a process and capturing the stdout. The higher res
> images captured by executing a process that writes directly to a file.
>
> Porting #1 is very straightforward after going through the tutorial on
> Twisted web. However, I am not sure how to handle #2 and #3. I would
> appreciate some suggestions from those who are familiar with Twisted.
>
> Thanks
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/8b942c88/attachment.html>

From glyph at twistedmatrix.com  Wed Aug 28 00:14:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Aug 2013 23:14:07 -0700
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
	about Github,
	as all threads about fostering community now start on that subject)
In-Reply-To: <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
 <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>
Message-ID: <A7C0CAF8-3EB0-40E1-B47E-F12CE144D715@twistedmatrix.com>


On Aug 27, 2013, at 2:44 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Tue, Aug 27, 2013 at 6:07 AM, Glyph <glyph at twistedmatrix.com> wrote:
> I think that's a fine rule, but it has one gigantic problem: we don't have a list of committers anywhere.  Making this list - and, critically, associating VCS handle (svn.twistedmatrix.com login) with Trac handle, for those cases where it differs - would really help new contributors figure out whether there's 
> 
> You got cut off here.

... whether there's a ticket they can review or not.

> I feel like if someone could hack up a Trac report, or an extension to the high scores page, that addressed the first point, it would be a lot easier to deal with the second and third ones.  So, if anyone reading this would like to do that, I would be forever in  your debt.
> 
> What would be the extension to the score board?


A list of committers.  Perhaps a badge next to someone's name in the score list indicating whether they're a committer.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/b428a56d/attachment.html>

From glyph at twistedmatrix.com  Wed Aug 28 00:17:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Aug 2013 23:17:34 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
 <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
 <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>
Message-ID: <ADF09375-7688-46D4-B32E-606B32F1B8C0@twistedmatrix.com>


On Aug 27, 2013, at 4:40 PM, Matt Haggard <haggardii at gmail.com> wrote:

> Up to six articles now: http://iffy.github.io/twistedftw/

This now says 
"#{{ index+1 }} With Twisted you can {{ showing.ability }}"
for me.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130827/8b914800/attachment-0001.html>

From tobias.oberstein at tavendo.de  Wed Aug 28 05:03:33 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 28 Aug 2013 04:03:33 -0700
Subject: [Twisted-Python] Failure.getTraceback and Unicode
In-Reply-To: <20130826164311.26068.1702923771.divmod.xquotient.304@top>
References: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
 <20130826164311.26068.1702923771.divmod.xquotient.304@top>
Message-ID: <634914A010D0B943A035D226786325D4441C11A95D@EXVMBX020-12.exch020.serverdata.net>

Hi Jean-Paul,

> >Should I file a bug?
> 
> It seems unfortunate that trying to report an exception will fail because of
> encoding issues.  That seems like a bug worth fixing to me.

Alright.

https://twistedmatrix.com/trac/ticket/6708

/Tobias

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From tom.sheffler at gmail.com  Wed Aug 28 07:40:42 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 28 Aug 2013 06:40:42 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
Message-ID: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>

Hi Matthew -

I have a couple of idioms I use for #2 and #3 in your message.  Here they
are.

#2)

For timer events, I create a function that when called, continuously
schedules itself again in the reactor, does some work for the current
tick, and then exits.  I've used this down to 1-second intervals.  If
you're looking for sub-millisecond level timing, this may not be
appropriate for your application.

def timerFunction(reactor):

    reactor.callLater(1.0, timerFunction, reactor)

    # do the work for this time tick
    # etc etc

    return

# Somewhere in main do this to kick it off
from twisted.internet import reactor
timerFunction(reactor)


#3)

For subprocesses, I like to create a custom protocol for each type of
sub-command I am calling.  I also like to create an object to manage
the process, its arguments, its results and its temp files.  The idiom
below is suitable for calling a subprocess that accepts a small amount
of buffered data on stdin, produces some output on stdout, and logs its
stderr.

Be careful examining the value of reason.value.exitCode in
processExited.  The twisted docs show printing the exitCode as a "%d",
but sometimes the value is None --- if the process was terminated by a
signal.  The mere printing of the value with "%d" will then trigger an
exception!


Here's my idiom:

class FooprocProtocol(protocol.ProcessProtocol):

    def __init__(self, foomgr):
        # the object managing my subprocess
        self.foomgr = foomgr

        # my stdout data
        self.data = ""

    def connectionMade(self):
        # Pump input data in using this, and then close stdin
        log.msg("connectionMade!")
        # self.transport.write("...")  # if there is any data to shove into
stdin
        self.transport.closeStdin()

    def outReceived(self, data):
        # collect up our stdout
        log.msg("outReceived! with %d bytes!" % len(data))
        self.data = self.data + data

    def errReceived(self, data):
        # echo stderr messages to log with a marker
        log.msg(">%s" % data)

    def inConnectionLost(self):
        print "inConnectionLost! stdin is closed! (we probably did it)"

    def outConnectionLost(self):
        log.msg("outConnectionLost! The child closed their stdout!")

    def errConnectionLost(self):
        log.msg("errConnectionLost! The child closed their stderr.")

    def processExited(self, reason):
        log.msg("processExited:%s:" % reason)
        exitcode = reason.value.exitCode         # an integer or None

        # do some work upon processExit potentially make a decision on
exitcode ...

        log.msg("processExited:%s" % exitcode)

    def processEnded(self, reason):
        print "processEnded, status %s" % (reason.value.exitCode,)

        # process the data in the process manager
        exitcode = reason.value.exitCode         # might be non-numeric
        result = self.foomgr.processData(exitcode)



# The main job of the Process Manager is to build the command list and
# process the results.  It gives us a handy place to encapsulate this
# logic.

class FooprocManager(object):

    CMD = "/usr/local/foocmd"

    def __init__(self, arg1, arg2, arg3)

        # create a Deferred to fire when we succeed or fail
        self.d = Deferred()

        # build our command argument list as appropriate for our command
        self.cmdargs = self.build_cmd_args(arg1, arg2, arg3)

        # define places to store the transport, pid and other things
        self.ptransport = None
        self.pid = None

    def build_cmd_args(self, arg1, arg2, arg3):

        # in my projects, this method has become fairly involved as it
creates
        # tmp files and builds potentially complicated argument lists.

        arglist = [self.CMD, arg1, arg2, arg3]
        return arglist

    def run(self):

        # instantiate a protocol connected to this manager
        pp = FooprocProtocol(self)

        # spawn the process, save the PID
        self.ptransport = reactor.spawnProcess(pp, self.CMD, self.cmdargs,
{ })
        self.pid = self.ptransport.pid

    def processData(exitcode):

        # in my projects, this method opens up result files, parses results,
        # moves things around, deletes tmp files, etc.

        # return the result that we ran this subprocess for
        return result


# Instantiate a new process manager and run it this way.

mgr = FooprocManager(args ...)
d = mgr.run(args ...)


=================
T
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/dbe47b07/attachment.html>

From p.mayers at imperial.ac.uk  Wed Aug 28 07:54:20 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 28 Aug 2013 14:54:20 +0100
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
Message-ID: <521E010C.9020208@imperial.ac.uk>

On 28/08/13 14:40, Tom Sheffler wrote:
>
> Hi Matthew -
>
> I have a couple of idioms I use for #2 and #3 in your message.  Here
> they are.
>
> #2)
>
> For timer events, I create a function that when called, continuously
> schedules itself again in the reactor, does some work for the curren

Are you aware of t.i.task, specifically LoopingCall and cooperate/coiterate?


From jonas.lindmark at gmail.com  Wed Aug 28 09:20:54 2013
From: jonas.lindmark at gmail.com (Jonas Lindmark)
Date: Wed, 28 Aug 2013 17:20:54 +0200
Subject: [Twisted-Python] Graceful shutdown
Message-ID: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>

Hi!

I'm trying to implement graceful shutdown of a HTTP server and I am unsure
of the preferred way of implementing it.

I'm attempting to do this by adding a system event trigger for "before"
"shutdown" that should stop accepting new requests and wait for current
ones to finish.

My problem is that though my requests has fired their notifyFinish()
deferreds the data has not been written to the client. Calling
reactor.getWriters() shows me that there are active writers who are
probably writing/flushing data to the client.

What is the preferred way of waiting for the requests to finish and finish
writing the response to the client?

Here is example code for my own attempt:

from twisted.internet import reactor, defer
from twisted.application import internet, service
from twisted.web.server import Site, NOT_DONE_YET
from twisted.web.resource import Resource

class SlowResource(Resource):
    isLeaf = True
    waiting_requests = []


    def notify_no_more_waiting(self):
        if not self.waiting_requests:
            return defer.succeed(None)
        return defer.gatherResults(self.waiting_requests, consumeErrors=True) \
                .addBoth(lambda ign: None)

    def write_result(self, request):
        request.write('{}')
        request.finish()

    def render_GET(self, request):
        reactor.callLater(5, self.write_result, request)

        d = request.notifyFinish()
        self.waiting_requests.append(d)
        d.addBoth(lambda ign: self.waiting_requests.remove(d))

        return NOT_DONE_YET


slow_resource = SlowResource()
site = Site(slow_resource)
application = service.Application("MyApp")
server = internet.TCPServer(8080, site)
server.setServiceParent(application)

def wait_for_writers():
    d = defer.Deferred()

    def check_writers():
        if len(reactor.getWriters()) > 0:
            reactor.callLater(0.1, check_writers)
        else:
            d.callback(None)

    check_writers()

    return d

@defer.inlineCallbacks
def graceful_shutdown():
    yield server.stopService()
    yield slow_resource.notify_no_more_waiting()
    #yield wait_for_writers()


reactor.addSystemEventTrigger('before', 'shutdown', graceful_shutdown)


Uncommenting the yield in graceful_shutdown gives me my intended behaviour
but I don't like the solution since I have no idea if the writers there
have anything to do with writing the results. They could be any writer
writing anything I assume.

Running this code with twistd -ny graceful.tac and curling
http://localhost:8080 and then issuing a SIGINT to the twistd process
results in an curl: (52) Empty reply from server.

-- 
/Jonas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/1ddb9777/attachment-0001.html>

From _ at habnab.it  Wed Aug 28 10:09:43 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Wed, 28 Aug 2013 09:09:43 -0700
Subject: [Twisted-Python] Graceful shutdown
In-Reply-To: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
References: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
Message-ID: <m2txi9n6ew.fsf@ender.habnabit.org>

I didn't read over your code, but this is something that I've
independently implemented. You can see my implementation at
<https://github.com/habnabit/polecat/blob/master/polecat.py>. The Site
subclass does some other monitoring-related things, but you should be
able to tease out just the graceful shutdown parts if that's all you
want.

Polecat needs some work and a lot of documentation, but for now, the way
to do a graceful shutdown is to make a PolecatSite and then
addSystemEventTrigger('before', 'shutdown',
yourPolecatSite.gracefullyStopActiveClients).


From mhumphrey at gmail.com  Wed Aug 28 21:47:30 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:47:30 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <521E010C.9020208@imperial.ac.uk>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
Message-ID: <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>

Phil - Thanks so much. This is pretty much exactly what I was looking for.
I tried the approach you suggested for timer events, and it seems very
clean and works quite well. I was able to get it working very consistently
with intervals < 10ms (way more than I need).

I haven't tried the process management stuff yet, but it looks very
straightforward.

Thanks again.


On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 28/08/13 14:40, Tom Sheffler wrote:
>
>>
>> Hi Matthew -
>>
>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>> they are.
>>
>> #2)
>>
>> For timer events, I create a function that when called, continuously
>> schedules itself again in the reactor, does some work for the curren
>>
>
> Are you aware of t.i.task, specifically LoopingCall and
> cooperate/coiterate?
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/90a22bbf/attachment.html>

From mhumphrey at gmail.com  Wed Aug 28 21:48:13 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:48:13 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
 <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>
Message-ID: <CAMYwhVmJYnw2x9zmn0H65ZjemhWYzaKYR8Cfvkzec8+VB1ivNA@mail.gmail.com>

SOrry - last reply was meant for Tom!


On Wed, Aug 28, 2013 at 8:47 PM, Matthew Humphrey <mhumphrey at gmail.com>wrote:

> Phil - Thanks so much. This is pretty much exactly what I was looking for.
> I tried the approach you suggested for timer events, and it seems very
> clean and works quite well. I was able to get it working very consistently
> with intervals < 10ms (way more than I need).
>
> I haven't tried the process management stuff yet, but it looks very
> straightforward.
>
> Thanks again.
>
>
> On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> On 28/08/13 14:40, Tom Sheffler wrote:
>>
>>>
>>> Hi Matthew -
>>>
>>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>>> they are.
>>>
>>> #2)
>>>
>>> For timer events, I create a function that when called, continuously
>>> schedules itself again in the reactor, does some work for the curren
>>>
>>
>> Are you aware of t.i.task, specifically LoopingCall and
>> cooperate/coiterate?
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/460a07f4/attachment.html>

From mhumphrey at gmail.com  Wed Aug 28 21:51:15 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:51:15 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <521E010C.9020208@imperial.ac.uk>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
Message-ID: <CAMYwhVki20d_tQFu-CXLb90C=WUxr0SpLumkXRuCoj-8Y3sYMQ@mail.gmail.com>

Phil -

I am aware of LoopingCall. I saw the mention of cooperate/coiterate on some
page somewhere, and actually went off trying to find an explanation /
example but did not find anything. If you have a link with some details, I
would like to take a look.

Thanks


On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 28/08/13 14:40, Tom Sheffler wrote:
>
>>
>> Hi Matthew -
>>
>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>> they are.
>>
>> #2)
>>
>> For timer events, I create a function that when called, continuously
>> schedules itself again in the reactor, does some work for the curren
>>
>
> Are you aware of t.i.task, specifically LoopingCall and
> cooperate/coiterate?
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130828/143b1c76/attachment.html>

From jonas.lindmark at gmail.com  Thu Aug 29 01:20:57 2013
From: jonas.lindmark at gmail.com (Jonas Lindmark)
Date: Thu, 29 Aug 2013 09:20:57 +0200
Subject: [Twisted-Python] Graceful shutdown
In-Reply-To: <m2txi9n6ew.fsf@ender.habnabit.org>
References: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
 <m2txi9n6ew.fsf@ender.habnabit.org>
Message-ID: <CACoBDnOD0W7HH2EJ4zhjnzapkur5byS5KDZBEW_r57xd=aWuqg@mail.gmail.com>

Thanks for the link. Looking at your code I found the magic lines I was
missing.

Implementing my own HTTPChannel was the key to success. Now I don't have to
poll reactor.getWriters() to see if there are unfinished writers.

I ended up with something like this:
class ApiHTTPChannel(HTTPChannel):
    _connection_lost = None

    def notifyConnectionLost(self):
        if self._connection_lost is not None:
            return self._connection_lost
        return defer.succeed(None)

    def connectionMade(self):
        HTTPChannel.connectionMade(self)
        self._connection_lost = defer.Deferred()

    def connectionLost(self, reason):
        HTTPChannel.connectionLost(self, reason)
        self._connection_lost.callback(None)

Thanks


On 28 August 2013 18:09, Aaron Gallagher <_ at habnab.it> wrote:

> I didn't read over your code, but this is something that I've
> independently implemented. You can see my implementation at
> <https://github.com/habnabit/polecat/blob/master/polecat.py>. The Site
> subclass does some other monitoring-related things, but you should be
> able to tease out just the graceful shutdown parts if that's all you
> want.
>
> Polecat needs some work and a lot of documentation, but for now, the way
> to do a graceful shutdown is to make a PolecatSite and then
> addSystemEventTrigger('before', 'shutdown',
> yourPolecatSite.gracefullyStopActiveClients).
>



-- 
/Jonas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/5c0f995c/attachment.html>

From kylerzhang11 at gmail.com  Thu Aug 29 03:27:46 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 29 Aug 2013 17:27:46 +0800
Subject: [Twisted-Python]  Raising exception from a Deferred canceller.
Message-ID: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>

Hi,

As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a cancellation
function for a Deferred throws an exception(the cancel() method of
Deferred won?t
throw exceptions, but the canceller may), behavior is undefined. If the
cancellation function throws an exception it is currently not caught, and
cancellation does not occur.

We can catch the exception and log it, and fallback to just firing Deferred
 withCancelledError. This won?t break any old code. But an exception
raising from the cancellation function often means the cancellation is
failed.

Another option we have is taking this opportunity to make the cancellation
being able to fail. There is the motivation:

There are cases where a Deferred is uncancellable. For example, we can call
twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
operation is waiting in the queue, we can cancel it by removing it from the
queue. However, when the operation is already sent and is waiting for the
response, it becomes uncancellable.

If we allow the canceller(NOT the cancel() method of the Deferred) to raise
an exception, we can tell the user the cancellation is failed and the
Deferredwon?t be fired with a CancelledError.

Raising an exception from cancel() may break the old code. So we can catch
the exception raised by the canceller, then return a False without firing
theDeferred to tell the user that the cancellation is failed.

In order to avoid missing unexpected exceptions, we can create a
CancellationFailedError. When the canceller raises CancellationFailedError,
we catch it and return False. When the canceller raises others exceptions,
we catch it, log it then return False.

Something like this:

def cancel(self):
    if not self.called:
        canceller = self._canceller
        if canceller:
            try:
                canceller(self)
            except CancellationFailedError:
                return False
            except Exception:
                log.err(None, "Unexpected exception from canceller.")
                return False
        else:
            # Arrange to eat the callback that will eventually be fired
            # since there was no real canceller.
            self._suppressAlreadyCalled = True
        if not self.called:
            # There was no canceller, or the canceller didn't call
            # callback or errback.
            self.errback(failure.Failure(CancelledError()))
        return True
    elif isinstance(self.result, Deferred):
        # Waiting for another deferred -- cancel it instead.
        return self.result.cancel()
    else:
        return False

This won?t break any code by raising an exception from cancel(), although
some code may rely on cancel() not returning any value.

So, what?s your opinion on raising an exception from the canceller?


Regards,

-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/6f9a2d84/attachment-0001.html>

From terry at jon.es  Thu Aug 29 04:18:15 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 11:18:15 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>

Hi Kai

I think it's helpful to keep clear on two different things that cancelation
is intended to do: 1) to fire the original deferred so that things relying
on it can proceed, and 2) to try to terminate an ongoing action that the
deferred might be waiting on.

For 1, I think calling cancel() should *always* result in the deferred
being fired (with, as it currently stands, CancelledError being used if a
provided cancel function does not fire the deferred itself). Always firing
the deferred is very important because the caller of cancel may have set up
many deferreds that rely on each other and their entire program may not be
able to proceed at all until the offending deferred is actually fired. It's
also contractually simple, and easy to document & understand.

For 2, the question is: do we want to also return information to the caller
if 2a) the underlying cancel function detects that it cannot, or can no
longer, stop the operation, or 2b) there is some kind of exception when
cancel calls the cancellation function.  I don't think 2a) is really an
exception situation, so it makes sense, as you say, just to return False
from cancel in this case. It's basically the cancel function saying it was
too late to do anything about the underlying operation but not providing
more information than that. Internally raising and catching
CancellationFailedError (as in your code) in that case seems good to me.
 In the case of 2b) I would just let the exception bubble up to the calling
code. Agreed, it could break some existing code, but isn't that existing
code already subject to that exact failure? It's just currently
undefined/undocumented.

Terry



On Thu, Aug 29, 2013 at 10:27 AM, zhang kai <kylerzhang11 at gmail.com> wrote:

> Hi,
>
> As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a
> cancellation function for a Deferred throws an exception(the cancel() method
> of Deferred won?t throw exceptions, but the canceller may), behavior is
> undefined. If the cancellation function throws an exception it is currently
> not caught, and cancellation does not occur.
>
> We can catch the exception and log it, and fallback to just firing
> Deferred withCancelledError. This won?t break any old code. But an
> exception raising from the cancellation function often means the
> cancellation is failed.
>
> Another option we have is taking this opportunity to make the cancellation
> being able to fail. There is the motivation:
>
> There are cases where a Deferred is uncancellable. For example, we can
> call twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
> operation is waiting in the queue, we can cancel it by removing it from the
> queue. However, when the operation is already sent and is waiting for the
> response, it becomes uncancellable.
>
> If we allow the canceller(NOT the cancel() method of the Deferred) to
> raise an exception, we can tell the user the cancellation is failed and the
> Deferredwon?t be fired with a CancelledError.
>
> Raising an exception from cancel() may break the old code. So we can
> catch the exception raised by the canceller, then return a False without
> firing theDeferred to tell the user that the cancellation is failed.
>
> In order to avoid missing unexpected exceptions, we can create a
> CancellationFailedError. When the canceller raises CancellationFailedError,
> we catch it and return False. When the canceller raises others
> exceptions, we catch it, log it then return False.
>
> Something like this:
>
> def cancel(self):
>     if not self.called:
>         canceller = self._canceller
>         if canceller:
>             try:
>                 canceller(self)
>             except CancellationFailedError:
>                 return False
>             except Exception:
>                 log.err(None, "Unexpected exception from canceller.")
>                 return False
>         else:
>             # Arrange to eat the callback that will eventually be fired
>             # since there was no real canceller.
>             self._suppressAlreadyCalled = True
>         if not self.called:
>             # There was no canceller, or the canceller didn't call
>             # callback or errback.
>             self.errback(failure.Failure(CancelledError()))
>         return True
>     elif isinstance(self.result, Deferred):
>         # Waiting for another deferred -- cancel it instead.
>         return self.result.cancel()
>     else:
>         return False
>
> This won?t break any code by raising an exception from cancel(), although
> some code may rely on cancel() not returning any value.
>
> So, what?s your opinion on raising an exception from the canceller?
>
>
> Regards,
>
> -Kai
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/657cd96c/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Aug 29 06:00:33 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 Aug 2013 12:00:33 -0000
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <20130829120033.26068.1550902512.divmod.xquotient.328@top>

On 09:27 am, kylerzhang11 at gmail.com wrote:
>Hi,
>
>As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a 
>cancellation
>function for a Deferred throws an exception(the cancel() method of
>Deferred won?t
>throw exceptions, but the canceller may), behavior is undefined. If the
>cancellation function throws an exception it is currently not caught, 
>and
>cancellation does not occur.
>
>We can catch the exception and log it, and fallback to just firing 
>Deferred
>withCancelledError. This won?t break any old code. But an exception
>raising from the cancellation function often means the cancellation is
>failed.

Keep in mind that the Deferred cancellation API is a "best effort" API. 
There are no guarantees that anything can be cancelled.  Consider the 
fact that 90% or more of Deferreds out there don't even have 
cancellation implemented for them yet and that before Deferred 
cancellation was introduced, 100% of Deferreds were uncancellable. :)
>
>Another option we have is taking this opportunity to make the 
>cancellation
>being able to fail. There is the motivation:
>
>There are cases where a Deferred is uncancellable. For example, we can 
>call
>twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
>operation is waiting in the queue, we can cancel it by removing it from 
>the
>queue. However, when the operation is already sent and is waiting for 
>the
>response, it becomes uncancellable.
>
>If we allow the canceller(NOT the cancel() method of the Deferred) to 
>raise
>an exception, we can tell the user the cancellation is failed and the
>Deferredwon?t be fired with a CancelledError.
>
>Raising an exception from cancel() may break the old code. So we can 
>catch
>the exception raised by the canceller, then return a False without 
>firing
>theDeferred to tell the user that the cancellation is failed.

It's true that introducing an exception where previously there was no 
exception is likely to break things.

However, *hiding* the failure in a return code that has to be checked 
everywhere is not a solution to this problem.  The cancellation has 
still failed - the only difference returning False instead of raising an 
exception makes is that most code won't bother to check the return value 
and will miss out on the fact that cancellation has failed.

This mostly just breaks things differently (in a way that's much harder 
to track down than a missing exception handler).
>In order to avoid missing unexpected exceptions, we can create a
>CancellationFailedError. When the canceller raises 
>CancellationFailedError,
>we catch it and return False. When the canceller raises others 
>exceptions,
>we catch it, log it then return False.
>
>Something like this:
>
>def cancel(self):
>    if not self.called:
>        canceller = self._canceller
>        if canceller:
>            try:
>                canceller(self)
>            except CancellationFailedError:
>                return False
>            except Exception:
>                log.err(None, "Unexpected exception from canceller.")
>                return False
>        else:
>            # Arrange to eat the callback that will eventually be fired
>            # since there was no real canceller.
>            self._suppressAlreadyCalled = True
>        if not self.called:
>            # There was no canceller, or the canceller didn't call
>            # callback or errback.
>            self.errback(failure.Failure(CancelledError()))
>        return True
>    elif isinstance(self.result, Deferred):
>        # Waiting for another deferred -- cancel it instead.
>        return self.result.cancel()
>    else:
>        return False
>
>This won?t break any code by raising an exception from cancel(), 
>although
>some code may rely on cancel() not returning any value.
>
>So, what?s your opinion on raising an exception from the canceller?

What about a third option - if a cancellation function raises an 
exception, fail the Deferred with that exception.

This:

  1) avoids raising an exception from Deferred.cancel (and avoids 
encoding error information in the return value of that method, forcing 
application code to start checking for error return values)

  2) Satisfies the expectation of the application code that cancelling 
the Deferred will cause it to fire "soon" - with roughly the same 
quality as if the Deferred had no canceller implemented at all.

  3) Probably makes the implementation bug apparent by making the 
exception available to errbacks on the Deferred.

I'm not entirely convinced (3) is ideal - it may be that the Deferred 
should actually fire with CancelledError in this case, just as it would 
without a canceller, and the exception raised by the canceller should 
just be logged (somewhat like what your code above does - but after 
logging the error the Deferred should actually be cancelled).

This has the same benefits, but puts the information about the 
implementation into the application's log file rather than forcing 
application-supplied errbacks to handle it somehow.

Jean-Paul


From exarkun at twistedmatrix.com  Thu Aug 29 06:06:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 Aug 2013 12:06:59 -0000
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>
Message-ID: <20130829120659.26068.1975359856.divmod.xquotient.338@top>

On 10:18 am, terry at jon.es wrote:
>Hi Kai
>
>[snip]
>
>2b) there is some kind of exception when
>cancel calls the cancellation function.  I don't think 2a) is really an
>exception situation, so it makes sense, as you say, just to return 
>False
>from cancel in this case. It's basically the cancel function saying it 
>was
>too late to do anything about the underlying operation but not 
>providing
>more information than that. Internally raising and catching
>CancellationFailedError (as in your code) in that case seems good to 
>me.
>In the case of 2b) I would just let the exception bubble up to the 
>calling
>code. Agreed, it could break some existing code, but isn't that 
>existing
>code already subject to that exact failure? It's just currently
>undefined/undocumented.

This seems like a bad behavior that we should fix.  Allowing arbitrary 
exceptions from other application code here makes it a lot harder to 
write robust code that uses Deferred cancellation.

Beyond that, how much code has already been written that uses this 
feature?  If it was written based on the (admittedly, meager) 
documentation that exists for the feature, then it won't have exception 
handling.

We could leave the behavior as it is and document it and require all of 
that code be updated and all future code be written to handle arbitrary 
exceptions from a cancel call.  Or we could get rid of the undocumented 
exception case, make the existing code correct (if it was previously 
correct based on documented behavior) and avoid making things more 
difficult for all future users of Deferred cancellation.

In my experience, there are usually a lot of subtle concerns and tricky 
corner cases when fixing an inconsistency between documentation and 
implementation.  This case seems like a much more clear-cut win to just 
fix the implementation.

Jean-Paul


From siva82kb at gmail.com  Thu Aug 29 09:38:17 2013
From: siva82kb at gmail.com (Sivakumar Balasubramanian)
Date: Thu, 29 Aug 2013 15:38:17 +0000 (UTC)
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
	fragmented data
Message-ID: <loom.20130829T172912-619@post.gmane.org>

I am tyring to implement a python program, using Twisted, to communicate
witha bluetooth device. The following is a sample code of what I have
implemented:

from twisted.internet import protocol, reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols import basic

class DeviceBluetooth(basic.Int16StringReceiver):

    def connectionMade(self):
        print 'Connection made!'
        self.sendString('[01] help\n')

    def dataReceived(self, data):
        print"Response: {0}".format(data)

        print "-----"
        print "choose message to send: "
        print "1. Stim on"
        print "2. Stim off"
        print "3. Stim status"
        print "4. Help"
        # user input
        ch = input("Choose command :: ")
        if int(ch) == 1:
            self.sendString('[02] stim on\n')
        elif int(ch) == 2:
            self.sendString('[03] stim off\n')
        elif int(ch) == 3:
            self.sendString('[04] stim ?\n')
        elif int(ch) == 4:
            self.sendString('[05] help\n')
        else:
            reactor.stop()

SerialPort(DeviceBluetooth(), 'COM20', reactor, baudrate=115200)
reactor.run()

When I run the program, sometimes I get a response and other times I do not
receive anything. And most of the times long responses are fragmented appear
as part of the next message. I have through the hyperterminal to make sure
that I get the appropriate response from by bluetooth device. So, the
problem has to be with my code.

Is there something that I doing wrong in my code?



From p.mayers at imperial.ac.uk  Thu Aug 29 09:46:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 29 Aug 2013 16:46:06 +0100
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
 fragmented data
In-Reply-To: <loom.20130829T172912-619@post.gmane.org>
References: <loom.20130829T172912-619@post.gmane.org>
Message-ID: <521F6CBE.5040105@imperial.ac.uk>

On 29/08/13 16:38, Sivakumar Balasubramanian wrote:

> Is there something that I doing wrong in my code?

Yes. You are sub-classing Int16StringReceiver, but then breaking things 
by overriding dataReceived. You should be implementing stringReceived, 
and you'll get complete strings.

dataReceived does not get "messages" - a higher layer needs to buffer 
and reassemble them, which Int16StringReceiver does, and passes the 
messages to stringReceived.


From siva82kb at gmail.com  Thu Aug 29 10:15:15 2013
From: siva82kb at gmail.com (Sivakumar Balasubramanian)
Date: Thu, 29 Aug 2013 16:15:15 +0000 (UTC)
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
	fragmented data
References: <loom.20130829T172912-619@post.gmane.org>
 <521F6CBE.5040105@imperial.ac.uk>
Message-ID: <loom.20130829T181244-775@post.gmane.org>

Phil Mayers <p.mayers <at> imperial.ac.uk> writes:

> 
> On 29/08/13 16:38, Sivakumar Balasubramanian wrote:
> 
> > Is there something that I doing wrong in my code?
> 
> Yes. You are sub-classing Int16StringReceiver, but then breaking things 
> by overriding dataReceived. You should be implementing stringReceived, 
> and you'll get complete strings.
> 
> dataReceived does not get "messages" - a higher layer needs to buffer 
> and reassemble them, which Int16StringReceiver does, and passes the 
> messages to stringReceived.
> 


Dear Phil,
I replaced thye dataReceived function by stringReceived, and ran the code.
But when I do this, the program does not even enter the stringReceived function.

I also tried a modified version of the programs above with LineReceived
protcol, and here too I have the same problem of fragmented data from the
dataReceived function.

Thanks.

Siva.



From p.mayers at imperial.ac.uk  Thu Aug 29 11:26:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 29 Aug 2013 18:26:36 +0100
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
 fragmented data
In-Reply-To: <loom.20130829T181244-775@post.gmane.org>
References: <loom.20130829T172912-619@post.gmane.org>
 <521F6CBE.5040105@imperial.ac.uk> <loom.20130829T181244-775@post.gmane.org>
Message-ID: <521F844C.3050604@imperial.ac.uk>

On 29/08/13 17:15, Sivakumar Balasubramanian wrote:

> Dear Phil,
> I replaced thye dataReceived function by stringReceived, and ran the code.
> But when I do this, the program does not even enter the stringReceived function.

That implies your protocol isn't an int16string-prefixed one. I assumed 
it was, since you'd inherited from that class.

Obviously you will need to pick a base class that matches the actual 
structure of your protocol.

>
> I also tried a modified version of the programs above with LineReceived
> protcol, and here too I have the same problem of fragmented data from the
> dataReceived function.

Well, *again* you shouldn't be overriding dataReceived if you're 
inheriting from LineReceiver. You should be overriding lineReceived.

To be clear: dataReceived gets raw data. It can, and *will*, get 
incomplete messages, because it doesn't know anything about messages.

If you have a protocol with a message structure, you either need to:

  1. Inherit from an existing base-class which handles the message 
framing, and implement the "<msg>Received" handler specific to that 
protocol.

  2. Or, if there's no base-class matching your message framing, write 
your own - this will entail buffering the data, then extracting messages.

See here:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith


From terry at jon.es  Thu Aug 29 13:29:09 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 20:29:09 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <20130829120033.26068.1550902512.divmod.xquotient.328@top>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <20130829120033.26068.1550902512.divmod.xquotient.328@top>
Message-ID: <CACqnu4V9e4_cQEGkaW25XcAKoiKQLaDVbxp9mw6tsA8gHKndWg@mail.gmail.com>

JP writes:

On Thu, Aug 29, 2013 at 1:00 PM, <exarkun at twistedmatrix.com> wrote:

> What about a third option - if a cancellation function raises an
> exception, fail the Deferred with that exception.


I really like this idea, but it wont work if the cancel function has
already fired the deferred.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/070cab77/attachment.html>

From terry at jon.es  Thu Aug 29 13:33:42 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 20:33:42 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <20130829120033.26068.1550902512.divmod.xquotient.328@top>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <20130829120033.26068.1550902512.divmod.xquotient.328@top>
Message-ID: <CACqnu4UP+NybrxQjR_=-rMjmN5ri3e0bB0nArG_gXZEg2dJW8Q@mail.gmail.com>

JP writes:

On Thu, Aug 29, 2013 at 1:00 PM, <exarkun at twistedmatrix.com> wrote:

> Keep in mind that the Deferred cancellation API is a "best effort" API.
> There are no guarantees that anything can be cancelled.  Consider the fact
> that 90% or more of Deferreds out there don't even have cancellation
> implemented for them yet and that before Deferred cancellation was
> introduced, 100% of Deferreds were uncancellable. :)


I think this is (unintentionally) misleading. Although 90% (or more) of
deferreds don't have an explicit custom cancelation function, 100% of
deferreds can now be canceled.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/885300cf/attachment.html>

From glyph at twistedmatrix.com  Thu Aug 29 23:49:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 Aug 2013 22:49:31 -0700
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <7FE9F2EF-88ED-4642-A106-705C4CA1F12C@twistedmatrix.com>

Thank you, Kai, for a great post describing the issue in detail.

On Aug 29, 2013, at 2:27 AM, zhang kai <kylerzhang11 at gmail.com> wrote:

> So, what?s your opinion on raising an exception from the canceller?

I feel pretty strongly that it ought to be handled in this manner:

Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 39819)
+++ twisted/internet/defer.py	(working copy)
@@ -456,7 +456,10 @@
         if not self.called:
             canceller = self._canceller
             if canceller:
-                canceller(self)
+                try:
+                    canceller(self)
+                except:
+                    log.err(failure.Failure(), "Canceller raised exception.")
             else:
                 # Arrange to eat the callback that will eventually be fired
                 # since there was no real canceller.

Raising an exception from a canceller is a bug.  It was never really supposed to do anything.  I guess you could be relying on the behavior right now where raising an exception will allow you to avoid callbacking or errbacking the Deferred, but only at the cost of delivering some random exception to some unsuspecting application code.

As Jean-Paul already pointed out, turning this into a boolean flag is not useful to anybody.  The way that you tell a cancelled operation has been cancelled is to add a callback to a point in the chain and then observe that it has been cancelled.

So, separately from how to handle unhandled exceptions, there's the question of making a Deferred 'atomic', by which I mean, a Deferred whose .cancel() method has no apparent external effect; no result is obtained.  (I am using the term 'atomic' because it seems like half the uses in this thread use "uncancellable" to mean "doesn't have an explicit canceller" and the other half of the uses mean "cancellation has no effect").

Currently, it is, at least, possible to construct a Deferred that will continue waiting for a result after .cancel() has been invoked.  However, it's surprisingly challenging.  You have to do this, or something like it:

def atomize(deferred):
    def complete(result):
        complete.done = True
        complete.result = result
        public.cancel()
        return result
    complete.result = None
    complete.done = False
    def again():
        return (Deferred(lambda x: x.callback(complete.result))
                .addCallback(await))
    def await(result):
        if complete.done:
            return result
        else:
            return again()
    public = again()
    deferred.addBoth(complete)
    return public

This took *me* like an hour to construct again from memory, so I have to assume that ~75% of Twisted users will either never realize it's possible or not really figure it out.  And I'm still not quite sure what sort of resource consumption this involves; will each .cancel() stack up another Deferred or will they be tail-recursed out somehow (/me pours out a 40 for tm.tl/411)?

Asking all these questions to implement something apparently simple seems an undue burden.  So it does seem reasonable that a canceller have some way to communicate that it doesn't actually want to callback or errback a Deferred.

We didn't want to make this too easy, because a no-op canceller is a crummy default behavior, but I think that the current mechanism is too difficult to implement and has too many moving parts.

So then the question is: is raising a new kind of exception a good way to do this?  That raises the question: what are good criteria for raising an exception versus returning a value in an API?

The main distinction for when to return a value versus when to raise an exception is what the default behavior of the next stack frame up should be.  If an API calls another API that exhibits a certain behavior, does it make more sense to, by default, continue up the stack towards an error handler, or to move on to the next statement?  In other words, does the termination in the manner in question indicate the sort of error that one should not attempt to recover from unless one knows how?

In the example you gave in the original post, the caller always has to check the 'did cancellation work' flag, so that flag should be an exception.  Forgetting to check it is an error, so by default it makes sense to jump over the stack.

In this case though, "I didn't call .callback or .errback" is not a type of exception that should ever propagate through multiple stack frames.  It's just an API safety feature, to make sure that you really intended to do things that way.  Also, in terms of going through multiple frames, a canceller can't really meaningfully call another canceller, unless it's very explicitly implementing some kind of delegation pattern; with such a pattern, failing to propagate the result is quite likely the intentional behavior.  So I can't see a reason to use an exception to indicate this.

Instead, I think perhaps a new constant value would be useful, so a canceller could return a constant to indicate that it really meant to not invoke either a callback or an errback.  'return NOT_CANCELLED' would indicate that the canceller intentionally took no action to call .callback or .errback, and could be called again.

Sorry for the long email.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130829/70cbfa07/attachment.html>

From zipxing at hotmail.com  Thu Aug  1 02:49:25 2013
From: zipxing at hotmail.com (zipxing)
Date: Thu, 1 Aug 2013 16:49:25 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
Message-ID: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>

pypy+builtin_json performance < cpython+ultrajson
________________________________
> Date: Wed, 31 Jul 2013 09:22:53 +0200 
> From: _ at lvh.io 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> 
> On Jul 31, 2013 4:19 AM, "zipxing" 
> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote: 
>> 
>> Great! pypy take 20% cpu, 3x fast than cpython! 
>> Thanks! 
>> 
>> A little problem: cjson and ujson can't install to pypy... 
> 
> What's wrong with the builtin json module? 
> 
>> ZipXing 
>> 
>> ________________________________ 
>>> From: _ at lvh.io<http://lvh.io> 
>>> Date: Tue, 30 Jul 2013 13:09:33 +0200 
>>> To: 
> twisted-python at twistedmatrix.com<mailto:twisted-python at twistedmatrix.com> 
>>> Subject: Re: [Twisted-Python] transport.write performance. 
>>> 
>>> Hi zipxing, 
>>> 
>>> You don't mention the interpreter. Is it CPython? What kind of results 
>>> do you get trying it on PyPy? 
>>> 
>>> Also, you don't need to specify epollreactor. Recent versions of 
>>> twisted will automagically choose the appropriate backend. I fixed this 
>>> and some other cleanups and got: 
>>> 
>>> ---- 
>>> from time import clock 
>>> from twisted.internet import protocol, reactor 
>>> from twisted.protocols import basic 
>>> 
>>> class MeasuringEchoProtocol(basic.LineReceiver): 
>>> MEASUREMENT_INTERVAL = 1000 
>>> 
>>> def lineReceived(self, data): 
>>> self.factory.requests += 1 
>>> if self.factory.requests % self.MEASUREMENT_INTERVAL == 0: 
>>> print "RPS: {0}".format(self.factory.requests / clock()) 
>>> 
>>> self.transport.write(data) 
>>> 
>>> 
>>> 
>>> class ServerFactory(protocol.ServerFactory): 
>>> protocol = MeasuringEchoProtocol 
>>> 
>>> def __init__(self): 
>>> self.requests = 0 
>>> 
>>> 
>>> 
>>> def main(): 
>>> reactor.listenTCP(9976, ServerFactory()) 
>>> clock() 
>>> reactor.run() 
>>> 
>>> if __name__ == '__main__': 
>>> main() 
>>> ---- 
>>> 
>>> Keep in mind that due to setup time few requests get handled right when 
>>> it starts, so the server RPS will take some time to balance out. On my 
>>> wimpy laptop on battery power, that was around 420.274404782. 
>>> 
>>> cheers 
>>> lvh 
>>> 
>>> _______________________________________________ Twisted-Python mailing 
>>> list 
> Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com> 
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 
>> _______________________________________________ 
>> Twisted-Python mailing list 
>> Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com> 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  

From exarkun at twistedmatrix.com  Thu Aug  1 05:50:20 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 01 Aug 2013 11:50:20 -0000
Subject: [Twisted-Python] TestInternet2.testPickledTimer Failed
In-Reply-To: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
References: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
Message-ID: <20130801115020.26068.1995148687.divmod.xquotient.62@top>

On 05:46 am, kylerzhang11 at gmail.com wrote:
>Hi,
>
>I'm a Google Summer of Code intern working on "Deferred Cancellation"
>project. I'm recently working on adding cancellation support to
>twisted.internet.task.LoopingCall.
>
>However, after I added the canceller to LoopingCall.deferred,
>the twisted.test.test_application.TestInternet2.testPickledTimer failed 
>due
>to a PicklingError.
>
>My branch is loopingcall-deferred-cancellation-6656. Here is the diff 
>of my
>code: http://twistedmatrix.com/~diffresource.twistd/6656
>
>[snip]
  File "/usr/lib/python2.7/pickle.py", line 748, in save_global
>    (obj, module, name))
>pickle.PicklingError: Can't pickle <function <lambda> at 0x8f1fb8c>: 
>it's
>not found as twisted.internet.posixbase.<lambda>

Two things to notice about the previous line.  One, it is trying to 
pickle a function defined using a lambda expression.  Two, it is trying 
to pickle something from twisted.internet.posixbase - which probably 
means it's trying to pickle the reactor.

You can run trial with --debug and it will drop into pdb when it hits 
this error.  Then you can walk up and down the call stack and inspect 
the objects pickle is operating on.  You can get some idea of where 
things are going wrong this way.
>
>I thought the reason was the circular references. However I searched 
>about
>it and found that pickle could handle the circular reference cases. But 
>the
>only significant change is that after I added the canceller, there is a
>circular reference between LoopingCall and LoopingCall.deferred. So I 
>don't
>know what's the problem. How can I fix this?

There are two changes that seem like they could be relevant.

First, LoopingCall now keeps a reference to the Deferred returned by 
application code.  This means anything reachable from that Deferred is 
going to get pickled when LoopingCall is pickled.  This jumped out at me 
first, but I don't think it's actually causing the problem.

Second, there is now a reference from the Deferred returned by 
`LoopingCall` back to the `LoopingCall` instance - via the bound 
`_cancel` method.  `TimerService` holds on to a reference to this 
`Deferred`.

Of course, stepping back, it doesn't make any sense to pickle 
LoopingCall - it explicitly refers to the reactor, so it's never 
actually going to be pickleable.

I suggest you take a look at TimerService and figure out why pickling 
one of those ever tries to pickle a LoopingCall (take a look around 
`__getstate__` and `volatile`, I think that's where the problem is).  I 
think you'll find an existing bug that the unit test previously failed 
to reveal but which your changes have revealed.

Jean-Paul



From kylerzhang11 at gmail.com  Thu Aug  1 07:08:38 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 1 Aug 2013 21:08:38 +0800
Subject: [Twisted-Python] TestInternet2.testPickledTimer Failed
In-Reply-To: <20130801115020.26068.1995148687.divmod.xquotient.62@top>
References: <CAK_130QFSBeg54ovf6aWG8gJjd2hdjV5s15iDXi=37aWQH+g1Q@mail.gmail.com>
 <20130801115020.26068.1995148687.divmod.xquotient.62@top>
Message-ID: <CAK_130SW6WC3q0TuBrK6SXHy5xtuBzimVvDhJEJT8N=2KYuBuw@mail.gmail.com>

On Thu, Aug 1, 2013 at 7:50 PM, <exarkun at twistedmatrix.com> wrote:

> I suggest you take a look at TimerService and figure out why pickling one
> of those ever tries to pickle a LoopingCall (take a look around
> `__getstate__` and `volatile`, I think that's where the problem is).  I
> think you'll find an existing bug that the unit test previously failed to
> reveal but which your changes have revealed.
>

Thanks for your help. I've found that the bug is due to a typo. The
"_loopFinshed" in `TimerService.volatile` should be "_loopFinished". So
when pickling a `TimerService` it will actually try to pickle
"_loopFinished"(the Deferred returned by `LoopingCall.start`). When the
Deferred has a reference to the `LoopingCall` instance it will then try to
pickle the `LoopingCall`, thus causes the problem.

I've searched and there is no ticket about this. So I will file a new
ticket and fix this.

-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130801/5026c946/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Aug  1 10:46:54 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 1 Aug 2013 09:46:54 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
Message-ID: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>


On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com> wrote:

> pypy+builtin_json performance < cpython+ultrajson

Do you have a reference to a benchmark confirming this?  I'm curious about it.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130801/7d2629de/attachment-0002.html>

From ldanielburr at me.com  Thu Aug  1 11:11:13 2013
From: ldanielburr at me.com (L. Daniel Burr)
Date: Thu, 01 Aug 2013 12:11:13 -0500
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
Message-ID: <51FA96B1.8000900@me.com>

Hi Glyph,

On 8/1/13 11:46 AM, Glyph wrote:
>
> On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com 
> <mailto:zipxing at hotmail.com>> wrote:
>
>> pypy+builtin_json performance < cpython+ultrajson
>
> Do you have a reference to a benchmark confirming this?  I'm curious 
> about it.
>
> -glyph

Here's one: 
http://liangnuren.wordpress.com/2012/08/13/python-json-performance/

- L. Daniel Burr

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130801/65a2b47e/attachment-0002.html>

From beenje at gmail.com  Sun Aug  4 08:25:55 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sun, 4 Aug 2013 16:25:55 +0200
Subject: [Twisted-Python] Help with trial test failure
Message-ID: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>

Hi,

I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
I wrote a small example that seems to work.
But the small test I wrote fails:

$ trial gateway/test
gateway.test.test_example
  GatewayServiceTestCase
    test_messageReceived ...                                            [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.

gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
-------------------------------------------------------------------------------
Ran 1 tests in 0.007s


As I understand, the connection to the redis server is lost during the test.
I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
But I don't really understand why that would be needed.
Could someone explain what is happening?

Both version of the code can be found here: https://gist.github.com/beenje/6150400
(revision 1 with the problem and revision 2 with the inlineCallbacks)

Below is the original version with the problem:

Thanks

Benjamin

example.py
----------------------------------------------------------------------------------
import json
import time
from twisted.internet import defer
from twisted.internet.protocol import ServerFactory
from twisted.protocols.basic import LineReceiver
from twisted.python import log


class BasicProtocol(LineReceiver):

    def lineReceived(self, line):
        self.messageReceived(line)

    def messageReceived(self, message):
        try:
            self.factory.messageReceived(message)
        except AttributeError:
            pass


class BasicGatewayFactory(ServerFactory):

    protocol = BasicProtocol

    def __init__(self, service, channel):
        self.service = service
        self.channel = channel

    def messageReceived(self, message):
        self.service.publish(self.channel, message)


class RedisPublishService(object):

    def __init__(self, factory):
        """
        @param factory: redis client factory
        """
        self.factory = factory

    @defer.inlineCallbacks
    def publish(self, channel, message):
        log.msg("Publish message {} on {}".format(message, channel))
        yield self.factory.client.publish(channel, message)
        timestamp = int(time.time() * 1000)
        # Include the timestamp in the value to allow
        # duplicate message
        value = json.dumps({"timestamp": timestamp, "message": message})
        log.msg("Store message in {} sorted set with score {}".format(
                channel, timestamp))
        # Set the timestamp as score to easily fetch the values within a
        # time period using zrangebyscore
        yield self.factory.client.zadd(channel, timestamp, value)


if __name__ == '__main__':
    import sys
    from twisted.internet import reactor
    from txredis.client import RedisClientFactory
    log.startLogging(sys.stdout)
    redis_factory = RedisClientFactory()
    reactor.connectTCP('localhost', 6379, redis_factory)
    redis_pub_service = RedisPublishService(redis_factory)
    gw_factory = BasicGatewayFactory(redis_pub_service, "test")
    reactor.listenTCP(8000, gw_factory)
    reactor.run()
----------------------------------------------------------------------------------

test_example.py
----------------------------------------------------------------------------------
from twisted.internet import reactor, defer, protocol
from twisted.python import log
from twisted.test import proto_helpers
from twisted.trial.unittest import TestCase
from txredis.client import RedisSubscriber, RedisClientFactory
from txredis.testing import REDIS_HOST, REDIS_PORT
from gateway.example import BasicGatewayFactory, RedisPublishService


class GatewayServiceTestCase(TestCase):

    @defer.inlineCallbacks
    def setUp(self):
        self.redis_factory = RedisClientFactory()
        reactor.connectTCP(REDIS_HOST, REDIS_PORT, self.redis_factory)
        yield self.redis_factory.deferred
        self.redis_pub_service = RedisPublishService(self.redis_factory)
        self.factory = BasicGatewayFactory(self.redis_pub_service, "test")
        self.server = self.factory.buildProtocol(None)
        self.transport = proto_helpers.StringTransportWithDisconnection()
        self.transport.protocol = self.server
        self.server.makeConnection(self.transport)

        class MySubscriber(RedisSubscriber):
            def __init__(self, *args, **kwargs):
                RedisSubscriber.__init__(self, *args, **kwargs)
                self.msg_channel = None
                self.msg_message = None
                self.msg_received = defer.Deferred()

            def messageReceived(self, channel, message):
                log.msg("Message received!")
                self.msg_channel = channel
                self.msg_message = message
                self.msg_received.callback(None)
                self.msg_received = defer.Deferred()

        clientCreator = protocol.ClientCreator(reactor, MySubscriber)
        self.subscriber = yield clientCreator.connectTCP(REDIS_HOST,
                                                         REDIS_PORT)
        yield self.subscriber.subscribe("test")

    def tearDown(self):
        self.subscriber.transport.loseConnection()
        self.redis_factory.continueTrying = 0
        self.redis_factory.stopTrying()
        if self.redis_factory.client:
            self.redis_factory.client.setTimeout(None)
            self.redis_factory.client.transport.loseConnection()
        self.transport.loseConnection()

    @defer.inlineCallbacks
    def test_messageReceived(self):
        cb = self.subscriber.msg_received
        self.server.dataReceived('HELLO1\r\n')
        yield cb
        self.assertEqual(self.subscriber.msg_channel, "test")
        self.assertEqual(self.subscriber.msg_message, "HELLO1")




From piracy at teamspeakusa.com  Sun Aug  4 08:30:03 2013
From: piracy at teamspeakusa.com (TeamSpeak Piracy)
Date: Sun, 04 Aug 2013 14:30:03 +0000
Subject: [Twisted-Python] [#XSZ-691-39878]:  Help with trial test failure
Message-ID: <1375626603.51fe656bed5f0@support.teamspeakusa.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130804/ddba3adf/attachment-0002.html>

From itamar at itamarst.org  Sun Aug  4 13:55:25 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sun, 04 Aug 2013 15:55:25 -0400
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
Message-ID: <51FEB1AD.7040000@itamarst.org>

On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
> Hi,
>
> I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
> I wrote a small example that seems to work.
> But the small test I wrote fails:
>
> $ trial gateway/test
> gateway.test.test_example
>    GatewayServiceTestCase
>      test_messageReceived ...                                            [ERROR]
>
> ===============================================================================
> [ERROR]
> Traceback (most recent call last):
> Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>
> gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
> -------------------------------------------------------------------------------
> Ran 1 tests in 0.007s
>
>
> As I understand, the connection to the redis server is lost during the test.
> I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
> But I don't really understand why that would be needed.
> Could someone explain what is happening?
>
I suspect the inlineCallbacks is irrelevant (and not the way to solve this).

At a guess, what is happening is that something is logging the 
connection being lost (perhaps the redis library?). Logging errors in a 
unit test makes trial consider that test to have failed: logging an 
error suggests something has gone wrong. You can tell trial to expect a 
specific error to be logged in your test: 
https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11



From beenje at gmail.com  Sun Aug  4 15:19:27 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Sun, 4 Aug 2013 23:19:27 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <51FEB1AD.7040000@itamarst.org>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
Message-ID: <71230B58-8C6C-46FD-A54E-F34EB89BC287@gmail.com>


Le 4 août 2013 à 21:55, Itamar Turner-Trauring <itamar at itamarst.org> a écrit :

> On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
>> Hi,
>> 
>> I'm trying to write a simple gateway to receive messages using a specific protocol and publish/store them using txredis.
>> I wrote a small example that seems to work.
>> But the small test I wrote fails:
>> 
>> $ trial gateway/test
>> gateway.test.test_example
>>   GatewayServiceTestCase
>>     test_messageReceived ...                                            [ERROR]
>> 
>> ===============================================================================
>> [ERROR]
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>> 
>> gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
>> -------------------------------------------------------------------------------
>> Ran 1 tests in 0.007s
>> 
>> 
>> As I understand, the connection to the redis server is lost during the test.
>> I actually managed to get the test to pass by adding some inlineCallbacks decorator to my messageReceived and lineReceived methods.
>> But I don't really understand why that would be needed.
>> Could someone explain what is happening?
>> 
> I suspect the inlineCallbacks is irrelevant (and not the way to solve this).
> 
> At a guess, what is happening is that something is logging the connection being lost (perhaps the redis library?). Logging errors in a unit test makes trial consider that test to have failed: logging an error suggests something has gone wrong. You can tell trial to expect a specific error to be logged in your test: https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11
> 

I tried to add self.flushLoggedErrors() at the end of the test_messageReceived, but it doesn't help.
What is strange is that if I remove the self.redis_factory.client.transport.loseConnection() in the tearDown method, the test is OK, but of course I get an error because the reactor was unclean:

gateway.test.test_example
  GatewayServiceTestCase
    test_messageReceived ...                                               [OK]
                                           [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: twisted.trial.util.DirtyReactorAggregateError: Reactor was unclean.
Selectables:
<<class 'twisted.internet.tcp.Client'> to ('localhost', 6381) at 10d06de90>

gateway.test.test_example.GatewayServiceTestCase.test_messageReceived
-------------------------------------------------------------------------------
Ran 1 tests in 0.008s

Could the logging come from the tearDown method??




From beenje at gmail.com  Mon Aug  5 03:09:56 2013
From: beenje at gmail.com (Benjamin Bertrand)
Date: Mon, 5 Aug 2013 09:09:56 +0000
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <51FEB1AD.7040000@itamarst.org>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
Message-ID: <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>

On Sun, Aug 4, 2013 at 7:55 PM, Itamar Turner-Trauring
<itamar at itamarst.org>wrote:

> On 08/04/2013 10:25 AM, Benjamin BERTRAND wrote:
>
>> Hi,
>>
>> I'm trying to write a simple gateway to receive messages using a specific
>> protocol and publish/store them using txredis.
>> I wrote a small example that seems to work.
>> But the small test I wrote fails:
>>
>> $ trial gateway/test
>> gateway.test.test_example
>>    GatewayServiceTestCase
>>      test_messageReceived ...
>>  [ERROR]
>>
>> ==============================**==============================**
>> ===================
>> [ERROR]
>> Traceback (most recent call last):
>> Failure: twisted.internet.error.**ConnectionDone: Connection was closed
>> cleanly.
>>
>> gateway.test.test_example.**GatewayServiceTestCase.test_**messageReceived
>> ------------------------------**------------------------------**
>> -------------------
>> Ran 1 tests in 0.007s
>>
>>
>> As I understand, the connection to the redis server is lost during the
>> test.
>> I actually managed to get the test to pass by adding some inlineCallbacks
>> decorator to my messageReceived and lineReceived methods.
>> But I don't really understand why that would be needed.
>> Could someone explain what is happening?
>>
>>  I suspect the inlineCallbacks is irrelevant (and not the way to solve
> this).
>
> At a guess, what is happening is that something is logging the connection
> being lost (perhaps the redis library?). Logging errors in a unit test
> makes trial consider that test to have failed: logging an error suggests
> something has gone wrong. You can tell trial to expect a specific error to
> be logged in your test: https://twistedmatrix.com/**
> documents/current/core/howto/**trial.html#auto11<https://twistedmatrix.com/documents/current/core/howto/trial.html#auto11>
>
>
I think I understand what is happening.
In my publish method, I call the redis publish and zadd methods.
My test checks the message received by the subscriber and closes the
connection just after. I don't wait for the deferred return by the zadd
method to fire (and get an error).

That's why the inlineCallbacks solves the problem. When I yield on
the self.server.dataReceived, I wait for the deferred in the publish
methods to fire and everything is clean when I close the connection.

Is there another way to do that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130805/cef0e3f9/attachment-0002.html>

From zipxing at hotmail.com  Mon Aug  5 05:26:40 2013
From: zipxing at hotmail.com (zipxing)
Date: Mon, 5 Aug 2013 19:26:40 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>, ,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>, ,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>, ,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>,
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>,
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>
Message-ID: <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>

tjson.py
--------------------------------------------------------------------------
import json                       #for pypy

#import ujson as json             #for python

tdic = {"aaa":1, "bbb":2, "ccc":3, "ddd":['1','2','3','4','abcdefghijk'], "eee":{"aaaa":1, "bbbb":2, "cccc":[1,2,3,4,5,'aaa']}}

for x in xrange(1000000):
        a = json.dumps(tdic)
        b = json.loads(a)


On my computer, 1M dumps&loads, using 6s with cpython+ultrajson
30s with pypy+json


________________________________
> From: glyph at twistedmatrix.com 
> Date: Thu, 1 Aug 2013 09:46:54 -0700 
> To: twisted-python at twistedmatrix.com 
> Subject: Re: [Twisted-Python] transport.write performance. 
> 
> 
> On Aug 1, 2013, at 1:49 AM, zipxing 
> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote: 
> 
> pypy+builtin_json performance < cpython+ultrajson 
> 
> Do you have a reference to a benchmark confirming this? I'm curious 
> about it. 
> 
> -glyph 
> 
> 
> _______________________________________________ Twisted-Python mailing 
> list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  


From zipxing at hotmail.com  Mon Aug  5 05:31:51 2013
From: zipxing at hotmail.com (zipxing)
Date: Mon, 5 Aug 2013 19:31:51 +0800
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 ,,<CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 ,,<SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 , , <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>, ,
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>, ,
 <3C0B22A1-4C82-4446-931B-B5FA767F4F3B@twistedmatrix.com>,
 <SNT147-W2262623891FB24C517E6ACB45C0@phx.gbl>
Message-ID: <SNT147-W2AA75D630F71A2D99D9C0B45C0@phx.gbl>

cpython+ujson   6s
cpython+cjson   9s
pypy+json       30s

----------------------------------------
> From: zipxing at hotmail.com
> To: twisted-python at twistedmatrix.com
> Date: Mon, 5 Aug 2013 19:26:40 +0800
> Subject: Re: [Twisted-Python] transport.write performance.
>
> tjson.py
> --------------------------------------------------------------------------
> import json #for pypy
>
> #import ujson as json #for python
>
> tdic = {"aaa":1, "bbb":2, "ccc":3, "ddd":['1','2','3','4','abcdefghijk'], "eee":{"aaaa":1, "bbbb":2, "cccc":[1,2,3,4,5,'aaa']}}
>
> for x in xrange(1000000):
> a = json.dumps(tdic)
> b = json.loads(a)
>
>
> On my computer, 1M dumps&loads, using 6s with cpython+ultrajson
> 30s with pypy+json
>
>
> ________________________________
>> From: glyph at twistedmatrix.com
>> Date: Thu, 1 Aug 2013 09:46:54 -0700
>> To: twisted-python at twistedmatrix.com
>> Subject: Re: [Twisted-Python] transport.write performance.
>>
>>
>> On Aug 1, 2013, at 1:49 AM, zipxing
>> <zipxing at hotmail.com<mailto:zipxing at hotmail.com>> wrote:
>>
>> pypy+builtin_json performance < cpython+ultrajson
>>
>> Do you have a reference to a benchmark confirming this? I'm curious
>> about it.
>>
>> -glyph
>>
>>
>> _______________________________________________ Twisted-Python mailing
>> list Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 		 	   		  


From _ at lvh.io  Mon Aug  5 11:49:24 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 Aug 2013 19:49:24 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
Message-ID: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>

Hi,

I'd like to do something akin to port forwarding using Conch.

Specifically, I want to be able to make connections to something listening
on a particular port on the client, and I want the client to be able to
make connections to some ClientFactory in the server.

Can I do this with regular SSH clients, or do I need to write those too?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130805/fd27851f/attachment-0002.html>

From itamar at itamarst.org  Mon Aug  5 15:08:32 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 05 Aug 2013 17:08:32 -0400
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
Message-ID: <52001450.8020605@itamarst.org>

On 08/05/2013 01:49 PM, Laurens Van Houtven wrote:
> Hi,
>
> I'd like to do something akin to port forwarding using Conch.
>
> Specifically, I want to be able to make connections to something 
> listening on a particular port on the client, and I want the client to 
> be able to make connections to some ClientFactory in the server.

That doesn't sound like port forwarding, that sounds like a custom 
server-side protocol?

> Can I do this with regular SSH clients, or do I need to write those too?

Assuming it's what I said, yes: 
http://as.ynchrono.us/2011/08/twisted-conch-in-60-seconds-protocols.html 
may be useful.



From _ at lvh.io  Mon Aug  5 15:20:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 5 Aug 2013 23:20:59 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <52001450.8020605@itamarst.org>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
Message-ID: <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>

Hi,

Sorry, when editing and cutting my post I got rid of something important :-)

When you log in, you get greeted by some terminal app, say something
written with Urwid or so. In addition to that, on the client, you can start
accepting connections on some TCP port, and at some point the server will
connect to that. That stream should be multiplexed inside SSH. Also, The
client should be able to make connections on localhost, which are also
multiplexed and actually turn into transports inside the server.

Would that be possible?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130805/8c5236e3/attachment-0002.html>

From gjorge at google.com  Mon Aug  5 17:20:30 2013
From: gjorge at google.com (Jorge Gonzalez)
Date: Mon, 5 Aug 2013 16:20:30 -0700
Subject: [Twisted-Python] asserting an exception wrapped in a
	defer.FirstError
Message-ID: <CAN9+jDYaph8hRR3j-bVr+4Z02rtgfVR=8U9wwhbkkXi9=3Nchg@mail.gmail.com>

In a trial test case like this:

-----------------------------------------------------------------------------------------------------------------------
*def testFailureFromDeferredList(self):*
*    d = defer.fail(ValueError('bad value'))*
*    return self.assertFailure(defer.gatherResults([d]), ValueError)*
-----------------------------------------------------------------------------------------------------------------------

I get the following FAIL and ERROR:

-----------------------------------------------------------------------------------------------------------------------
*[FAIL]
*
*Traceback (most recent call last):*
*  File "/home/gjorge/tmp/
buildbot.net/python_sandbox/local/lib/python2.7/site-packages/twisted/trial/_asynctest.py",
line 74, in _eb*
*    raise self.failureException(output)*
*twisted.trial.unittest.FailTest: *
*Expected: (<type 'exceptions.ValueError'>,)*
*Got:*
*[Failure instance: Traceback (failure with no frames): <class
'twisted.internet.defer.FirstError'>: FirstError[#0, [Failure instance:
Traceback (failure with no frames): <type 'exceptions.ValueError'>: bad
value*
*]]*
*]*
*
*
*
===============================================================================
*
*[ERROR]*
*Traceback (most recent call last):*
*Failure: exceptions.ValueError: bad value*
-----------------------------------------------------------------------------------------------------------------------

If I try to remedy this by asserting I get a defer.FirstError instead of a
ValueError:
-----------------------------------------------------------------------------------------------------------------------
*def testFailureFromDeferredList(self):*
*    d = defer.fail(ValueError('bad value'))*
*    return self.assertFailure(defer.gatherResults([d]), defer.FirstError)*
-----------------------------------------------------------------------------------------------------------------------

 I still get an Error:
-----------------------------------------------------------------------------------------------------------------------
*[ERROR]*
*Traceback (most recent call last):*
*Failure: exceptions.ValueError: bad value*
-----------------------------------------------------------------------------------------------------------------------

Is there another way to assert ValueError was raised?

Thanks,
Jorge
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130805/1879016a/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Aug  5 18:14:53 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 06 Aug 2013 00:14:53 -0000
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
 <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
Message-ID: <20130806001453.26068.1255706103.divmod.xquotient.171@top>

On 5 Aug, 09:20 pm, _ at lvh.io wrote:
>Hi,
>
>Sorry, when editing and cutting my post I got rid of something 
>important :-)
>
>When you log in, you get greeted by some terminal app, say something
>written with Urwid or so. In addition to that, on the client, you can 
>start
>accepting connections on some TCP port, and at some point the server 
>will
>connect to that. That stream should be multiplexed inside SSH. Also, 
>The
>client should be able to make connections on localhost, which are also
>multiplexed and actually turn into transports inside the server.
>
>Would that be possible?

This is still sort of incomprehensible to me.  For example, you haven't 
even said whether you're trying to develop the server side of this, the 
client side, both, or what.  And why would a server ever try to make a 
TCP connection to a port on the client?  Perhaps you can lay out your 
goals in a bit more detail, skipping over fewer of the other important 
details?

About the only part I understand is "multiplexing", to which the answer 
is "probably, SSH does support multiple logical channels over a single 
TCP connection".

Jean-Paul



From glyph at twistedmatrix.com  Tue Aug  6 00:28:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 5 Aug 2013 23:28:04 -0700
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
Message-ID: <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>


On Aug 5, 2013, at 2:09 AM, Benjamin BERTRAND <beenje at gmail.com> wrote:

> That's why the inlineCallbacks solves the problem. When I yield on the self.server.dataReceived, I wait for the deferred in the publish methods to fire and everything is clean when I close the connection.
> 
> Is there another way to do that?

Jonathan Lange wrote about this a long time ago:

http://blackjml.livejournal.com/23029.html

but better than doing that would be to avoid setting up and tearing down real TCP connections during your tests.  Those are slower than an in-memory thing (like you would get from twisted.test.proto_helpers, the one and only public module in our 'test' package) and also, as you have discovered, more unpredictable.

Is there any way to hand txredis a synthetic transport for testing?  If not, file a bug on it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130805/f5878ab9/attachment-0002.html>

From _ at lvh.io  Tue Aug  6 02:31:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 6 Aug 2013 10:31:32 +0200
Subject: [Twisted-Python] Multiplexing streams with Conch
In-Reply-To: <20130806001453.26068.1255706103.divmod.xquotient.171@top>
References: <CAE_Hg6a5q2xOr9rNisbhzgi63sL+PaiCbLjsHcCr-aE-U1XPTQ@mail.gmail.com>
 <52001450.8020605@itamarst.org>
 <CAE_Hg6b9=PmBXQydMtt3O=RaEBR977_7Qxo=e38jdJ30fi4PgQ@mail.gmail.com>
 <20130806001453.26068.1255706103.divmod.xquotient.171@top>
Message-ID: <CAE_Hg6aDD02Khxh1QRweH-_knALA_UPUALXZD85EMnjz0LAyzQ@mail.gmail.com>

On Tue, Aug 6, 2013 at 2:14 AM, <exarkun at twistedmatrix.com> wrote:

> This is still sort of incomprehensible to me.  For example, you haven't
> even said whether you're trying to develop the server side of this, the
> client side, both, or what.


I'm definitely trying to write the server. I'm hoping to be able to get out
from writing the client, and have people use any common SSH client.

(That part was in the original mail: I'm asking if this would be possible
to do so with regular SSH clients, or if I'd have to write that side as
well, implying the part I'm definitely writing is the server :-))


> And why would a server ever try to make a TCP connection to a port on the
> client?  Perhaps you can lay out your goals in a bit more detail, skipping
> over fewer of the other important details?
>

Imagine a stream transport inside the server. It's a StringTransport, but
it's simulating a TCP transport between two hosts on a real network. I'd
like my client to be able to observe and modify the traffic on that
transport. To me, the obvious way to do that seemed to be to cut the
transport in half into two transports, and put the client on both of the
new ends:

fake host 1 <------------------> fake host 2

becomes

fake host 1 <--------> client <----> fake host 2

Since the client is a real machine and fake host 1 and fake host 2 are
simulated hosts that live in the server, each at an end of a
StringTransport, these new transports will have to be communicated between
the server and the client, so multiplexing streams seemed relevant.

This is obviously possible if I write both server and client (and if I did,
I probably wouldn't use Conch), but I was wondering if it'd be possible
using regular SSH clients.


> About the only part I understand is "multiplexing", to which the answer is
> "probably, SSH does support multiple logical channels over a single TCP
> connection".
>

Okay. I know conch also supports port forwarding, so I guess the command
line tool would be a good start there.


> Jean-Paul
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130806/44a1264f/attachment-0002.html>

From beenje at gmail.com  Tue Aug  6 14:33:44 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Tue, 6 Aug 2013 22:33:44 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
Message-ID: <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>


Le 6 août 2013 à 08:28, Glyph <glyph at twistedmatrix.com> a écrit :

> 
> On Aug 5, 2013, at 2:09 AM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
>> That's why the inlineCallbacks solves the problem. When I yield on the self.server.dataReceived, I wait for the deferred in the publish methods to fire and everything is clean when I close the connection.
>> 
>> Is there another way to do that?
> 
> Jonathan Lange wrote about this a long time ago:
> 
> http://blackjml.livejournal.com/23029.html

Thanks for the link.
I added a deferred in my RedisPublishService class and fire it at the end of my publish method so that I can wait for it before to close the connection.

> 
> but better than doing that would be to avoid setting up and tearing down real TCP connections during your tests.  Those are slower than an in-memory thing (like you would get from twisted.test.proto_helpers, the one and only public module in our 'test' package) and also, as you have discovered, more unpredictable.
> 
> Is there any way to hand txredis a synthetic transport for testing?  If not, file a bug on it :).

I guess it's possible to use a synthetic transport, but that wouldn't help much without a "fake" redis server.
That would indeed be nice to have for testing.

I actually just found a dummy txredis client that implements everything internally for testing: https://github.com/williamsjj/dummy-txredis
Might be worth looking at.
But I wonder if implementing a basic redis server with twisted (for testing purpose) wouldn't be nicer?

Benjamin

> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130806/bdcc1004/attachment-0002.html>

From piper.masden at gmail.com  Tue Aug  6 20:42:10 2013
From: piper.masden at gmail.com (Piper Masden)
Date: Tue, 6 Aug 2013 20:42:10 -0600
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
 <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
Message-ID: <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>

On Tue, Aug 6, 2013 at 2:33 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:

>
> I guess it's possible to use a synthetic transport, but that wouldn't help
> much without a "fake" redis server.
> That would indeed be nice to have for testing.
>
> I actually just found a dummy txredis client that implements everything
> internally for testing: https://github.com/williamsjj/dummy-txredis
> Might be worth looking at.
> But I wonder if implementing a basic redis server with twisted (for
> testing purpose) wouldn't be nicer?
>

What exactly are you testing? Are you testing communication with redis, or
are you testing how you handle the data from redis? If the latter, why not
just use a mock?

Piper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130806/8f2e1f37/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Aug  7 13:58:50 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 7 Aug 2013 12:58:50 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>,
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>,
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>,
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
Message-ID: <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>


On Aug 1, 2013, at 1:49 AM, zipxing <zipxing at hotmail.com> wrote:

> pypy+builtin_json performance < cpython+ultrajson

Just curious here: what version of PyPy did you do your tests with?  From what I've heard, the somewhat recently-released 2.1 should have improved JSON parsing performance.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130807/897cc3ac/attachment-0002.html>

From _ at lvh.io  Wed Aug  7 14:06:17 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 7 Aug 2013 22:06:17 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
Message-ID: <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>

On Wed, Aug 7, 2013 at 9:58 PM, Glyph <glyph at twistedmatrix.com> wrote:

> Just curious here: what version of PyPy did you do your tests with?  From
> what I've heard, the somewhat recently-released 2.1 should have improved
> JSON parsing performance.
>

FWIW, Maciej commented that they don't expect to be *faster*, because they
actually care about the JSON spec or checking return values. Things which
ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing
fast, but that seems to be a common theme in this thread.

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130807/3738a085/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Aug  7 14:10:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 7 Aug 2013 13:10:43 -0700
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
Message-ID: <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>


On Aug 7, 2013, at 1:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> FWIW, Maciej commented that they don't expect to be *faster*, because they actually care about the JSON spec or checking return values. Things which ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing fast, but that seems to be a common theme in this thread.


I just said "improved", i.e. 2.1 ought to be faster than 2.0, no claims relative to anything else :).

I'm aware that ultrajson is pretty bad, but cjson had comparable (if slightly slower) performance.  Does it also have correctness and security problems?

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130807/2fc4db84/attachment-0002.html>

From beenje at gmail.com  Wed Aug  7 14:22:26 2013
From: beenje at gmail.com (Benjamin BERTRAND)
Date: Wed, 7 Aug 2013 22:22:26 +0200
Subject: [Twisted-Python] Help with trial test failure
In-Reply-To: <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>
References: <3EDD4CE7-1D5C-4548-96EC-B7485A131A8D@gmail.com>
 <51FEB1AD.7040000@itamarst.org>
 <CAGC4ABcCxveWGYAGxZP5QjRRs8x82bVQD7WHN8FEogE1pdWXsg@mail.gmail.com>
 <87997C89-7BF4-4B1C-BCAE-591F82C547DD@twistedmatrix.com>
 <41375A38-FF23-4683-A95E-1052B2861EF9@gmail.com>
 <CAJjaOEON20ZFwEv_02nNextB7R-OV+FTH3MpBHs9UeJ83a+oJA@mail.gmail.com>
Message-ID: <D7B91FFC-CEA5-4174-8F03-0140BCC00F2C@gmail.com>


Le 7 août 2013 à 04:42, Piper Masden <piper.masden at gmail.com> a écrit :

> On Tue, Aug 6, 2013 at 2:33 PM, Benjamin BERTRAND <beenje at gmail.com> wrote:
> 
> I guess it's possible to use a synthetic transport, but that wouldn't help much without a "fake" redis server.
> That would indeed be nice to have for testing.
> 
> I actually just found a dummy txredis client that implements everything internally for testing: https://github.com/williamsjj/dummy-txredis
> Might be worth looking at.
> But I wonder if implementing a basic redis server with twisted (for testing purpose) wouldn't be nicer?
> 
> What exactly are you testing? Are you testing communication with redis, or are you testing how you handle the data from redis? If the latter, why not just use a mock?
> 

It's the communication with redis I want to test (more an integration test).

Benjamin


> Piper
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130807/639cb8bf/attachment-0002.html>

From avosirenfal at gmail.com  Wed Aug  7 18:08:57 2013
From: avosirenfal at gmail.com (Krysk)
Date: Wed, 07 Aug 2013 20:08:57 -0400
Subject: [Twisted-Python] Operating on metainformation in a distributed
	system
Message-ID: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>

Hello. I tried to ask this on StackOverflow, but Glyph advised me this
would probably be better. I've had trouble phrasing these questions
well, so please ask me if you need more information.

I'm working on a game server that needs to support 18,000+ players.
The game requires fairly intense resource use, and I'd like to have an
upper limit on the playercount much higher than I need. The solution
seems obvious: Design a server that can scale out and up as necessary.

Because distributed systems are hard, I tried to simplify the design
so that isn't a concern as much as possible. To that end, my
architecure is pretty simple. A player is always assigned to a
GameHandler instance. By default, a player is assigned to a
Lobby(GameHandler) instance. They can then queue for a match, and when
an appropriate match is found the server with the least load creates a
new handler, say, CaptureTheFlag(GameHandler). Then, the servers which
those players connected to serve as reverse proxies, forwarding all
data to the CaptureTheFlag handler. When that game ends, those players
are all returned to their Lobby(GameHandler) instances. Reverse
proxies are neccessary because I didn't write the game client and
modifying it is not an option. Connections cannot be renegotiated. I
can place all the servers in the same LAN, which should prevent any
major latency issues, and make bandwidth not a problem.

So far, all is good, I think this design will work well and be very
simple to work on. However, it raises the big, ugly question: How do I
share metadata across the distributed nodes?

That's necessary for the matchmaking itself. We might have 400 players
connected across 10 servers, and we want to make a match where there's
eight players on one, four on another, and four on another. I also
need to be able to figure out how many players are on the entire
network, syncronize bans and configuration data, etc.

I was thinking I could use MySQL to store the configuration data, and
use Redis for the transient data like who's online, who's in queue,
etc. Then I could have one server dedicated to operating on all that
data (such as arranging fair matches). I could use some kind of push
notification to let servers know when a match has started or ended, or
just have them query Redis periodically.

This doesn't seem very elegant, easy to work with, or easy to
implement, so naturally I don't like it very much. I'm sure it will
work, but I was hoping someone could suggest a more natural approach.

Thanks in advance,
Krysk



From mithrandi at mithrandi.net  Wed Aug  7 20:21:43 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 8 Aug 2013 04:21:43 +0200
Subject: [Twisted-Python] transport.write performance.
In-Reply-To: <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
 <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
Message-ID: <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>

On Wed, Aug 7, 2013 at 10:10 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
>
> On Aug 7, 2013, at 1:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> FWIW, Maciej commented that they don't expect to be *faster*, because they
> actually care about the JSON spec or checking return values. Things which
> ultrajson conveniently ignores :-) It's pretty easy to do the wrong thing
> fast, but that seems to be a common theme in this thread.
>
>
> I just said "improved", i.e. 2.1 ought to be faster than 2.0, no claims
> relative to anything else :).
>
> I'm aware that ultrajson is pretty bad, but cjson had comparable (if
> slightly slower) performance.  Does it also have correctness and security
> problems?
>

It's also important to note that in a microbenchmark, JIT warmup can be a
significant factor in PyPy. If you're interested in the performance of
short-running applications (eg. command-line tools) then this is very
relevant, but for a long-running server process you're unlikely to care
about the warmup overhead but rather the sustained performance thereafter.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130808/e31a3fc4/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Aug  8 04:27:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 08 Aug 2013 10:27:59 -0000
Subject: [Twisted-Python] cjson/ujson/whatever performance.
In-Reply-To: <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>
References: <SNT131-W3659AAEA308086439DC8A5B4560@phx.gbl>
 <CAE_Hg6ZCScAj_RkcZVJ3L3SKiKQ3tNL6DFG0Hzhj7RnfMJ44Yg@mail.gmail.com>
 <SNT147-W42CE88370905CE07E658C2B4570@phx.gbl>
 <CAE_Hg6bYUeHAqd7SjdRkPg8s_UXv9Qn5drxY6CbWanCBoLYdhA@mail.gmail.com>
 <SNT147-W76ED3EFE1642707DE59520B4500@phx.gbl>
 <4A82EC78-53C1-49AF-B706-39B028807B73@twistedmatrix.com>
 <CAE_Hg6bOrq6hmiZ=X8pBxYYPDKjZjxBV7YSgPO4pQ=C7GV7Sew@mail.gmail.com>
 <EDEE0FD7-71DB-4139-9FE0-5D80F7A50FCC@twistedmatrix.com>
 <CAMcKhMRctZz5rwcpEKp5rzxyp1KJu7Dfaq2uoungYT+xtecdvg@mail.gmail.com>
Message-ID: <20130808102759.26068.1366994932.divmod.xquotient.228@top>

Perhaps it's time to move this thread to the PyPy or *json list?

Thanks,
Jean-Paul



From werner at thieprojects.ch  Thu Aug  8 19:38:02 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 08 Aug 2013 15:38:02 -1000
Subject: [Twisted-Python] Operating on metainformation in a distributed
 system
In-Reply-To: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
Message-ID: <520447FA.2070909@thieprojects.ch>

On 8/7/13 2:08 PM, Krysk wrote:
> Hello. I tried to ask this on StackOverflow, but Glyph advised me this
> would probably be better. I've had trouble phrasing these questions
> well, so please ask me if you need more information.
>
> I'm working on a game server that needs to support 18,000+ players.
> The game requires fairly intense resource use, and I'd like to have an
> upper limit on the playercount much higher than I need. The solution
> seems obvious: Design a server that can scale out and up as necessary.
>
> Because distributed systems are hard, I tried to simplify the design
> so that isn't a concern as much as possible. To that end, my
> architecure is pretty simple. A player is always assigned to a
> GameHandler instance. By default, a player is assigned to a
> Lobby(GameHandler) instance. They can then queue for a match, and when
> an appropriate match is found the server with the least load creates a
> new handler, say, CaptureTheFlag(GameHandler). Then, the servers which
> those players connected to serve as reverse proxies, forwarding all
> data to the CaptureTheFlag handler. When that game ends, those players
> are all returned to their Lobby(GameHandler) instances. Reverse
> proxies are neccessary because I didn't write the game client and
> modifying it is not an option. Connections cannot be renegotiated. I
> can place all the servers in the same LAN, which should prevent any
> major latency issues, and make bandwidth not a problem.
>
> So far, all is good, I think this design will work well and be very
> simple to work on. However, it raises the big, ugly question: How do I
> share metadata across the distributed nodes?
>
> That's necessary for the matchmaking itself. We might have 400 players
> connected across 10 servers, and we want to make a match where there's
> eight players on one, four on another, and four on another. I also
> need to be able to figure out how many players are on the entire
> network, syncronize bans and configuration data, etc.
>
> I was thinking I could use MySQL to store the configuration data, and
> use Redis for the transient data like who's online, who's in queue,
> etc. Then I could have one server dedicated to operating on all that
> data (such as arranging fair matches). I could use some kind of push
> notification to let servers know when a match has started or ended, or
> just have them query Redis periodically.
>
> This doesn't seem very elegant, easy to work with, or easy to
> implement, so naturally I don't like it very much. I'm sure it will
> work, but I was hoping someone could suggest a more natural approach.

Hi Krysk

I had similar design constraints when wanting to match up to four human 
players or computer players playing a card game. In the first monolithic 
approach I got a better feeling for how long match making actually 
takes, today we're seeing seldom more than ten tables being in the match 
make process, while there are up to two thousand user playing cards. The 
matchmaking for the game isn't the fun part, so users do away with it 
pretty fast.

After observing user behavior for more than a year, I spread out the 
game logic to separate game servers with a central matchmaking process, 
maintaining all the metadata, doing the load balancing for the game 
servers and handling the broadcasting of status and activity information 
to players. Metadata stored and passed around is the usual stuff like 
game skill level, likeability, friends, blocked users, number of games 
played, and some. The data is kept in a MySQL DB, is fetched at log in 
and passed around with the player instance.

This scheme so far balances very well and in case of needing to handle a 
lot more users, I would separate the matchmaking process to a dedicated 
machine.

The whole setup for more than 50k games played to the end per day (about 
13mins average play time per game) is handled by an 8 core single 
processor machine with 24GB of RAM, usually we do not run more than 5-6 
game logic server processes. The machine is well balanced, extremely 
stable, no runaway situation was observed since deploying the system two 
years ago.

The bottleneck I foresee in our case is the 100MB/s connection we have 
at the hosting center, currently we are only allowed one interface.

For me dodging the sharing of metadata for the matchmaking was crucial, 
I didn't fear the sharing so much as the latency induced by sharing 
metadata among processes or machines, because the added latency adds a 
lot more incongruous stuff happening to the user's experiences. Match 
making on screen with manually selecting partners puts quite a strain on 
the imagination of the average user, with added latency to clicks and 
and answers, the users shy away from match making and start playing 
alone or with the much easier selectable computer players.

HTH, Werner




From avosirenfal at gmail.com  Thu Aug  8 21:06:30 2013
From: avosirenfal at gmail.com (Krysk)
Date: Thu, 08 Aug 2013 23:06:30 -0400
Subject: [Twisted-Python] Operating on metainformation in a distributed
	system
In-Reply-To: <520447FA.2070909@thieprojects.ch>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
 <520447FA.2070909@thieprojects.ch>
Message-ID: <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>

>Hi Krysk
>
>I had similar design constraints when wanting to match up to four human 
>players or computer players playing a card game. In the first monolithic 
>approach I got a better feeling for how long match making actually 
>takes, today we're seeing seldom more than ten tables being in the match 
>make process, while there are up to two thousand user playing cards. The 
>matchmaking for the game isn't the fun part, so users do away with it 
>pretty fast.
>
>After observing user behavior for more than a year, I spread out the 
>game logic to separate game servers with a central matchmaking process, 
>maintaining all the metadata, doing the load balancing for the game 
>servers and handling the broadcasting of status and activity information 
>to players. Metadata stored and passed around is the usual stuff like 
>game skill level, likeability, friends, blocked users, number of games 
>played, and some. The data is kept in a MySQL DB, is fetched at log in 
>and passed around with the player instance.
>
>This scheme so far balances very well and in case of needing to handle a 
>lot more users, I would separate the matchmaking process to a dedicated 
>machine.
>
>The whole setup for more than 50k games played to the end per day (about 
>13mins average play time per game) is handled by an 8 core single 
>processor machine with 24GB of RAM, usually we do not run more than 5-6 
>game logic server processes. The machine is well balanced, extremely 
>stable, no runaway situation was observed since deploying the system two 
>years ago.
>
>The bottleneck I foresee in our case is the 100MB/s connection we have 
>at the hosting center, currently we are only allowed one interface.
>
>For me dodging the sharing of metadata for the matchmaking was crucial, 
>I didn't fear the sharing so much as the latency induced by sharing 
>metadata among processes or machines, because the added latency adds a 
>lot more incongruous stuff happening to the user's experiences. Match 
>making on screen with manually selecting partners puts quite a strain on 
>the imagination of the average user, with added latency to clicks and 
>and answers, the users shy away from match making and start playing 
>alone or with the much easier selectable computer players.
>
>HTH, Werner

That sounds similar to the approach I was planning on taking. That
does leave the question of how do you manage events? For instance,
when the central server figures out an appropriate match, how do you
pass the relevant data about the match (players, etc) to the game
server that's going to run it?

I imagine you either put that data in MySQL and have all servers poll
it periodically, or you have some kind of direct notification system
that are servers are listening to. Can you clarify?

Thanks,
Krysk



From werner at thieprojects.ch  Fri Aug  9 01:05:40 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Thu, 08 Aug 2013 21:05:40 -1000
Subject: [Twisted-Python] Operating on metainformation in a distributed
 system
In-Reply-To: <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>
References: <p1n50959q9596gk5pbspt1sc0c945ent95@4ax.com>
 <520447FA.2070909@thieprojects.ch>
 <arm809p04ut37u4kqp17fai1v7f2510e8f@4ax.com>
Message-ID: <520494C4.60800@thieprojects.ch>

On 8/8/13 5:06 PM, Krysk wrote:
>> Hi Krysk
>>
>> I had similar design constraints when wanting to match up to four human
>> players or computer players playing a card game. In the first monolithic
>> approach I got a better feeling for how long match making actually
>> takes, today we're seeing seldom more than ten tables being in the match
>> make process, while there are up to two thousand user playing cards. The
>> matchmaking for the game isn't the fun part, so users do away with it
>> pretty fast.
>>
>> After observing user behavior for more than a year, I spread out the
>> game logic to separate game servers with a central matchmaking process,
>> maintaining all the metadata, doing the load balancing for the game
>> servers and handling the broadcasting of status and activity information
>> to players. Metadata stored and passed around is the usual stuff like
>> game skill level, likeability, friends, blocked users, number of games
>> played, and some. The data is kept in a MySQL DB, is fetched at log in
>> and passed around with the player instance.
>>
>> This scheme so far balances very well and in case of needing to handle a
>> lot more users, I would separate the matchmaking process to a dedicated
>> machine.
>>
>> The whole setup for more than 50k games played to the end per day (about
>> 13mins average play time per game) is handled by an 8 core single
>> processor machine with 24GB of RAM, usually we do not run more than 5-6
>> game logic server processes. The machine is well balanced, extremely
>> stable, no runaway situation was observed since deploying the system two
>> years ago.
>>
>> The bottleneck I foresee in our case is the 100MB/s connection we have
>> at the hosting center, currently we are only allowed one interface.
>>
>> For me dodging the sharing of metadata for the matchmaking was crucial,
>> I didn't fear the sharing so much as the latency induced by sharing
>> metadata among processes or machines, because the added latency adds a
>> lot more incongruous stuff happening to the user's experiences. Match
>> making on screen with manually selecting partners puts quite a strain on
>> the imagination of the average user, with added latency to clicks and
>> and answers, the users shy away from match making and start playing
>> alone or with the much easier selectable computer players.
>>
>> HTH, Werner
>
> That sounds similar to the approach I was planning on taking. That
> does leave the question of how do you manage events? For instance,
> when the central server figures out an appropriate match, how do you
> pass the relevant data about the match (players, etc) to the game
> server that's going to run it?
>
> I imagine you either put that data in MySQL and have all servers poll
> it periodically, or you have some kind of direct notification system
> that are servers are listening to. Can you clarify?

Hi Krysk

nah, no storing of information in the DB and polling was out of 
question, the system is built around spread (pb), with the game servers 
being detached processes, allowing to kill/restart the matchmaking 
process with the game servers then reattaching to the freshly started 
matchmaking controller. With this it becomes possible to do hot 
upgrading while the system is running.

The match making controller has an observer interface which allows an 
user wanting to play to register itself to the general state change 
broadcasts. Besides that it also has an interface with which to gather 
more information about another particular user by using its player id 
for querying the DB when desired. Another interface allows the user to 
poke a table owner with a request to play, this request is then passed 
on to the table owner.

The sequence of match making is as follows:

- a table with a certain game type and rule set is created via the 
controller in the least used game server, the so called 'owner' of the 
table is seated at that table

- the controller keeps a reference to that particular table, with the 
game server informing the controller of state changes, like the owner 
leaving the table (in this case the human player gets replaced by a 
computer player, picking up the cards, be it in the match making or the 
game playing phase

- other users observing the 'open tables' are now able to ask for a seat

- this request can be honored or turned down by the table 'owner', the 
asking user gets the game server coordinates (IP, port, table id, seat 
position...) and has now a window of about 30 seconds to sit down at the 
table, if this does not happen, the seat is reopened again

- if the table is full (all four seats taken, with either computer or 
human players) the match making controller detaches the table from the 
'open tables' and moves it into the playing table list, with only 
minimal statistical information now available (table chat remains 
private among the four players), although it would be easy to tap into 
the chat. The table is now only under the control of the game server up 
until the users decide to leave the table. If a table has only computer 
players, it is automatically killed, the match making controller gets 
signaled

Great care was taken in the implementation of this system, that all 
information must be pushed to those in the need to know, there is no 
polling at all. All the information is kept in quite complex objects 
which can be passed via pb or kept in sync.

A single match making controller orchestrates the game setup, there can 
be any number of game servers on different machines.

The game servers itself are also offering a pb interface to the actual 
Livepage (Athena/Nevow) webservers, there can be any number of 
webservers on different machines

With all this in place, a dynamically scaling system becomes reality, 
with the additional advantage, that hot swapping of all the pieces of 
the system is possible

Hope this clarifies some corners, Werner








From burak at nehbit.net  Fri Aug  9 10:55:10 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Fri, 9 Aug 2013 19:55:10 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
Message-ID: <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>

I have been experimenting with porting qt4reactor to qt5, and I have some progress to share. It seems that the PyQt API that was being used in qt4reactor was deprecated, so I have converted the calls to the new version API and it seems it mostly works.. Except one thing: 

Traceback (most recent call last):
  File "sampleguiclient_twisted.py", line 132, in <module>
    from twisted.internet import reactor
AttributeError: 'function' object has no attribute '__pyqtSignature__'

I could not get past this error. I have prepared an example with a test case where you can see the error for yourself, and it can be reached here: 

https://dl.dropbox.com/s/4asklib8yuvm5ru/index.html 

This bunch of python files assume you have Qt5 installed, but otherwise free of dependencies. 

Any guesses on what's going on?

Best,
Burak




On Jul 23, 2013, at 12:43 AM, Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:
> 
>> Is there such a thing for Qt5? Is it planned?
> 
> Well, it sounds like you're planning it, so, I guess so :).
> 
> I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.
> 
> In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130809/2f48e71d/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130809/2f48e71d/attachment-0002.bin>

From burak at nehbit.net  Sat Aug 10 07:42:51 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 10 Aug 2013 16:42:51 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
Message-ID: <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>

More good news.

I have confirmed that the reason of this failure was my using of an unstable version of PyQt5. With the stable version of PyQt5, Qt 5.0.2 and the current Twisted stable, trial suite passes— or rather it fails with the same errors the default reactor fails:

FAILED (skips=2025, expectedFailures=11, errors=1, successes=6578)

The default twisted reactor goes through the suite in 61 seconds, qt5reactor in 66 seconds. Pretty good.

You can find the qt5 reactor here: https://dl.dropbox.com/s/r285g4bo8jb4of9/index.html

If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to—the only thing I did was to change four or five lines, after all. 

Mind that PySide does not yet support Qt5, so I have removed PySide imports. It seems that they have no plans to support Qt5 for at least through the next year.

Hope it helps someone!

Best,
Burak






On Aug 9, 2013, at 7:55 PM, Burak Nehbit <burak at nehbit.net> wrote:

> I have been experimenting with porting qt4reactor to qt5, and I have some progress to share. It seems that the PyQt API that was being used in qt4reactor was deprecated, so I have converted the calls to the new version API and it seems it mostly works.. Except one thing: 
> 
> Traceback (most recent call last):
>   File "sampleguiclient_twisted.py", line 132, in <module>
>     from twisted.internet import reactor
> AttributeError: 'function' object has no attribute '__pyqtSignature__'
> 
> I could not get past this error. I have prepared an example with a test case where you can see the error for yourself, and it can be reached here: 
> 
> https://dl.dropbox.com/s/4asklib8yuvm5ru/index.html 
> 
> This bunch of python files assume you have Qt5 installed, but otherwise free of dependencies. 
> 
> Any guesses on what's going on?
> 
> Best,
> Burak
> 
> 
> 
> 
> On Jul 23, 2013, at 12:43 AM, Glyph <glyph at twistedmatrix.com> wrote:
> 
>> 
>> On Jul 20, 2013, at 5:04 AM, Burak Nehbit <burak at nehbit.net> wrote:
>> 
>>> Is there such a thing for Qt5? Is it planned?
>> 
>> Well, it sounds like you're planning it, so, I guess so :).
>> 
>> I doubt that anyone on this list has plans to do it (or there would already be work qt5 work done in the qt reactor repository) but there are plenty of people (myself included) who would be very happy to help you learn enough about Twisted to do it yourself.  And, honestly, if you're motivated to do it it's probably *not* a huge amount of effort to update the implementation.  Feel free to ask any questions you have on this list.
>> 
>> In the meanwhile though, maybe you could report a bug to Nokia or Trolltech or whoever runs Qt development right now that they should stop gratuitously breaking interfaces between versions?  We've had (at least one) major rewrite of the Qt reactor for every version of Qt, which seem to come out relatively frequently.  Nothing about the nature of event loops or sockets has changed sufficiently in the meanwhile to justify the constant re-work that Qt seems to require from us.
>> 
>> -glyph
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130810/26b951bd/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130810/26b951bd/attachment-0002.bin>

From cam.turn at gmail.com  Sat Aug 10 08:10:11 2013
From: cam.turn at gmail.com (Shell)
Date: Sat, 10 Aug 2013 15:10:11 +0100
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
Message-ID: <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>

> If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to—the only thing I did was to change four or five lines, after all.

You could instead put together a patch file - or even just document
the exact changes you made - and file an issue in the Twisted issue
tracker to have your changes included in Twisted proper.

Shell



From burak at nehbit.net  Sat Aug 10 08:14:39 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sat, 10 Aug 2013 17:14:39 +0300
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
 <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
Message-ID: <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>

Qt4Reactor (my original file) is not a part of current Twisted due to licensing incompatibilities between Twisted and PyQt. The same licensing restrictions should also apply to my edited version, since I have no right to change the license on my own. I am using this as my base: https://github.com/ghtdak/qtreactor

Best,
Burak





On Aug 10, 2013, at 5:10 PM, Shell <cam.turn at gmail.com> wrote:

>> If I have more time, I'll package this reactor and put it on GitHub, but I am not sure if I have the (moral) right to—the only thing I did was to change four or five lines, after all.
> 
> You could instead put together a patch file - or even just document
> the exact changes you made - and file an issue in the Twisted issue
> tracker to have your changes included in Twisted proper.
> 
> Shell
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130810/66995ebe/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130810/66995ebe/attachment-0002.bin>

From termim at gmail.com  Sun Aug 11 10:08:42 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Sun, 11 Aug 2013 12:08:42 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>
References: <56C3E30F-2268-4788-A1F3-10EB2AFDA1BA@nehbit.net>
 <3F8D63C2-81B5-4240-AB43-B30F5F75668E@twistedmatrix.com>
 <ED15E7C9-763C-4751-AC96-4B3F17CDF34D@nehbit.net>
 <651E48B5-20DD-4386-875E-5784ED861A6D@nehbit.net>
 <CANmrDMUGreEWfS4VL9s37Sz0-24Y4_Kx7wng1h4yEvsxwqHxUA@mail.gmail.com>
 <95859FE6-726E-4AC3-B552-DD522FCB7353@nehbit.net>
Message-ID: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>

On Sat, Aug 10, 2013 at 10:14 AM, Burak Nehbit <burak at nehbit.net> wrote:

> Qt4Reactor (my original file) is not a part of current Twisted due to
> licensing incompatibilities between Twisted and PyQt. The same licensing
> restrictions should also apply to my edited version, since I have no right
> to change the license on my own. I am using this as my base:
> https://github.com/ghtdak/qtreactor
>
>
>
> May be you could create a pull request to this repository?

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130811/86d1d784/attachment-0002.html>

From burak at nehbit.net  Sun Aug 11 10:24:44 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 11 Aug 2013 09:24:44 -0700 (PDT)
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
References: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
Message-ID: <1376238283058.c548dcd2@Nodemailer>

These changes use the new API and may possibly prevent the current reactor in the repo from correctly functioning under Qt4. I have no Qt4 / PyQt / Twisted environment ready, so if anybody has that available I would love to hear the results.
—
Sent from my phone

On Sun, Aug 11, 2013 at 7:11 PM, Mikhail Terekhov <termim at gmail.com>
wrote:

> On Sat, Aug 10, 2013 at 10:14 AM, Burak Nehbit <burak at nehbit.net> wrote:
>> Qt4Reactor (my original file) is not a part of current Twisted due to
>> licensing incompatibilities between Twisted and PyQt. The same licensing
>> restrictions should also apply to my edited version, since I have no right
>> to change the license on my own. I am using this as my base:
>> https://github.com/ghtdak/qtreactor
>>
>>
>>
>> May be you could create a pull request to this repository?
> -- 
> Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130811/922f4e02/attachment-0002.html>

From termim at gmail.com  Mon Aug 12 13:22:13 2013
From: termim at gmail.com (Mikhail Terekhov)
Date: Mon, 12 Aug 2013 15:22:13 -0400
Subject: [Twisted-Python] Twisted and Qt5
In-Reply-To: <1376238283058.c548dcd2@Nodemailer>
References: <CALCsMPQ1iWcP_FPuw_Yx=t1sAEgLYFTr+XgwjagK4dVjW8Ss5w@mail.gmail.com>
 <1376238283058.c548dcd2@Nodemailer>
Message-ID: <CALCsMPTqSNe4JKrT702qb8hLwu+=xzw0rQNxDXVh61TJMSwpug@mail.gmail.com>

On Sun, Aug 11, 2013 at 12:24 PM, Burak Nehbit <burak at nehbit.net> wrote:

> These changes use the new API and may possibly prevent the current reactor
> in the repo from correctly functioning under Qt4. I have no Qt4 / PyQt /
> Twisted environment ready, so if anybody has that available I would love to
> hear the results.
> —
>

What about creating a branch?

-- 
Mikhail Terekhov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130812/d2989643/attachment-0002.html>

From hs at ox.cx  Fri Aug 16 00:19:10 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 16 Aug 2013 08:19:10 +0200
Subject: [Twisted-Python] [Twisted] #6663: Allow CertificateOptions to
	set acceptable SSL ciphers
In-Reply-To: <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
References: <048.8e97c8f4809a368d1265cd9f0cd6e267@twistedmatrix.com>
 <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
Message-ID: <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>

>>  1. That there is a consent on high quality ciphers: for example right
> now there are roughly two fractions who agree what is the lesser evil: RC4
> or AES-CBC.
> 
> No, it is now clear that RC4 is the greater evil. The browsers have
> deployed defenses against the "BEAST" attack on CBC (the defense is "1/n-1
> record splitting"), and BEAST is an active attack which can only be used
> in some cases and which tends to leave evidence of the attempt. On the
> other hand, RC4 is apparently vulnerable to passive attacks, which are
> more serious.
> 
> (If I'm wrong and there actually *is* a faction who still prefers RC4
> despite the recent results against it, I'd like to read about it!)

I’m not going to argue ciphers with you because you’re obviously right and I already wrote elsewhere that I’m going to full defer to your judgement here.

To explain where the above came from and eg. Qualys is still somewhat for RC4 as a fallback cipher: to the best of my knowledge[1], Apple’s desktop Safari browser ''still'' hasn’t activated record splitting in its latest version and is thus still vulnerable to BEAST (and doesn’t support TLS>1).  But that’s probably a corner case enough to ignore in the defaults and will hopefully resolve itself in Mavericks.

[1]: Mostly from https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is-broken-now-what and I’m not aware of any changes.


From hs at ox.cx  Fri Aug 16 07:14:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Fri, 16 Aug 2013 15:14:03 +0200
Subject: [Twisted-Python] [Twisted] #6663: Allow CertificateOptions to
	set acceptable SSL ciphers
In-Reply-To: <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>
References: <048.8e97c8f4809a368d1265cd9f0cd6e267@twistedmatrix.com>
 <057.1e788f051a370281c25ade997f572368@twistedmatrix.com>
 <8508D3B2-918C-4FAD-9EC9-5D1C0F0AAD77@ox.cx>
Message-ID: <F7AA0D11-BDC8-43E9-873B-A80686311ABF@ox.cx>

please disregard this mail I mixed up the behavior of roundup and trac.

feel free to comment on ticket #6663 though.

Am 16.08.2013 um 08:19 schrieb Hynek Schlawack <hs at ox.cx>:

>>> 1. That there is a consent on high quality ciphers: for example right
>> now there are roughly two fractions who agree what is the lesser evil: RC4
>> or AES-CBC.
>> 
>> No, it is now clear that RC4 is the greater evil. The browsers have
>> deployed defenses against the "BEAST" attack on CBC (the defense is "1/n-1
>> record splitting"), and BEAST is an active attack which can only be used
>> in some cases and which tends to leave evidence of the attempt. On the
>> other hand, RC4 is apparently vulnerable to passive attacks, which are
>> more serious.
>> 
>> (If I'm wrong and there actually *is* a faction who still prefers RC4
>> despite the recent results against it, I'd like to read about it!)
> 
> I’m not going to argue ciphers with you because you’re obviously right and I already wrote elsewhere that I’m going to full defer to your judgement here.
> 
> To explain where the above came from and eg. Qualys is still somewhat for RC4 as a fallback cipher: to the best of my knowledge[1], Apple’s desktop Safari browser ''still'' hasn’t activated record splitting in its latest version and is thus still vulnerable to BEAST (and doesn’t support TLS>1).  But that’s probably a corner case enough to ignore in the defaults and will hopefully resolve itself in Mavericks.
> 
> [1]: Mostly from https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is-broken-now-what and I’m not aware of any changes.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130816/94effad8/attachment.sig>

From haggardii at gmail.com  Mon Aug 19 11:38:24 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Mon, 19 Aug 2013 11:38:24 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
Message-ID: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>

Please indulge me -- my reasons are at the end.

Twisted as a House for Sale
===========================

You double check the listing printout to make sure you're not lost.
On the drive in, you didn't see many other cars on the road or people
out on the street -- the neighborhood seems kind of deserted.

"Nope, it's the right place," you say as you turn the key toward you.
The engine stops, and the resulting silence is immediate.  Ronnie, the
agent who's going to show you the place, said he'll meet you inside.

You first notice the yard.  The grass is a little yellowed, except
where it grows abundantly at the base of the waist-high, once-white
picket fence.  There are a bunch of signs on the fence and in the
yard.  Many of the signs have, "Attn Construction Workers" written in
big red letters at the top.  You walk toward one to see what it says,
and then... in the middle of the front yard, you notice a freestanding
door.  It looks new.  Fresh paint.  Shiny knob and knocker.  Standing
at an angle, right in the middle of the lawn.

"Weird."

Forgetting the signs for a minute you walk to the fence, open the gate
and make your way up the walkway toward the freestanding door.
Standing in front of the door you read, etched into the knocker,
"web2."

"Weird," you say again.  It almost feels like a tombstone.

You turn back toward the house.  There are lots of windows (way more
than at that other house on Amigofeed Drive).  And you notice for the
first time that there are three front doors.

"Umm...", you're beginning to doubt that this is really the house you want.

You step onto the porch and examine the doors.  From left to right,
they are labeled "reactor.listen," "TCP4ServerEndpoint" and
"serverFromString."  You reach for TCP4ServerEndpoint, but second
guess yourself and instead open the "reactor.listen" door.  You're
standing in a small entryway.  There's ample light coming from a
fluorescent fixture, though the light seems a bit sterile.  Kind of
like an old hospital.

"Oh man," you smile.  You just noticed the not-quite-lime-green shag
carpet.  Pretty sweet.

It still feels eriely quiet.  From how Ronnie described this place
over the phone, you were expecting a little more.  This dismal room
just seems so stagnant.  You glance at your watch, wondering when
Ronnie's gonna show.

"I guess I can poke around a little while I wait."

You build up a nice static charge shuffling toward the door at the
other side of the entry way.  Zap!  You get a short blue arc as you
grab the doorknob and turn.  You glance up and notice a small label on
the door as you push it open.  The label says "reactor.run()."

A huge wave of sound washes over you, startling you!  There are people
everywhere.  Some are running around, some are sitting and talking,
some are arguing loudly.  There's people on phones and on computers.
It's a madhouse of activity!  This room is huge!  It's cavernous.  It
feels like Grand Central.  The ceiling must be upwards of 30 feet
high!  The room is full of sunlight, streaming in through multiple
skylights and through the wall opposite you (perhaps 60 feet away)
which is made entirely of glass.  The glass wall looks out to a
beautiful garden, full of trees and flowers.

"Hi, I'm Ronnie!"

You swing around, surprised.

"This place is amazing!" you exclaim.

"Sure is.  Let me show you around!"

"But why is the front..." you start.

"This room is the event loop," he cuts you off.  "Everything goes
through here.  Well, not everything.  Deferreds don't, and some of the
other utilities" he continues, grabbing your arm and pulling you
through the room.

"De--whats?" you stammer.

He stops walking and turns toward you.  "Deferreds.  You know, like:
'I'm going to hit you'."  He pauses.

"You're going to wh... OWW!"  He slaps you hard across the face.

"Deferreds."  He grabs your hand and starts walking briskly through
the room again.  You rub your cheek wondering what just happened.

"Trap it next time.  Let me show you the library!"

"This place has a library?  Cool.  I hope it has one of those sliding
ladders," you think to yourself, still nursing your red cheek.

---

Ronnie takes you through a door at the side of the room.  It smells
like a library, but it seems awfully small.  For the asking price,
though, you can't complain.

"What do you want to know about?" he asks.

"Pardon?"

"What do you want to learn?  Fencing, cooking, horitculture, aviation,
rare-earth metal mining?  What do you want to know?" he asks again,
looking right at you and waiting.

"Uhh... cooking?"

"Alright, this way."  He grabs your arm and yanks you through a door
you hadn't realized was there.  You find yourself in a room no bigger
than a closet, smashed right up against Ronnie.

"Here you go."  He shoves a paper into your hands.

"Ye Olde Guide of Squirrels Cooking" reads the title.

"How old is thi..." you begin to ask.

Ronnie grabs the paper back, examining it with furrowed brow.

"Bah!"  He exclaims, "those kids keep messing with the index.  There's
not much we can do about that.  Let's go to the most recent version."
He leads you through a door to the right.

You're in another closet.  He shoves another paper into your hands.

"How to Cook a Squirrel" reads the title.  You start perusing it,
forgetting why, exactly, you are reading it in the first place.  And
it's a little uncomfortable being in these tight quarters with Ronnie.
 He's awkwardly silent and motionless standing there, smiling, staring
at you while you read.  After reading the first few paragraphs you
ask, "Is this the best thing you have on cooking?  I mean, squirrels
are nice, but..."

"We've got other stuff."  He pushes the opposite wall, which, it turns
out was a door, and you find yourself in yet another closet.  He
shoves another paper into your hands.

This one is "Proper Care of Cutlery."

"Umm...  so, anyway, this library is great.  But what else can you
show me in this house?"

"Oh, there's lots of things.  But you should really check out the
library some more.  It's full of great stuff.  And make sure you check
all the sources."

He pushes through to the door you came in, then through another door,
then another, and... you are not back in the first room, but another
closet.  Oblivious, Ronnie, pushes through another door leading to a
closet, then another, then another, then another.  You're not sure
you'll ever get back to where you were or that you'd have the
slightest chance of finding these rooms again.

"I think if I go with this house, I'll need to make myself a map of
this library," you think, as you follow Ronnie from closet to closet.

Finally, he pushes through a door and you walk back into the first
room of the library.

"Let me show you some more of the house,"  Ronnie smiles as you head
toward the event loop room.

---

Ronnie leads you on a tour of the home.  It's rather impressive.  And
expansive.  While in the basement, which is well lit and surprisingly
inviting, he points out the reinforced concrete foundation built
around massive steel beams which have been driven eighty feet into the
ground.  The foundation is incredibly strong.  You didn't realize it
from outside, but this house was designed to stand for years -- it's
commercial grade.

In the bathrooms and kitchen, Ronnie proudly shows you the plumbing.
It's solid stuff.  The craftsmanship is excellent, and it looks like
everything is built to last.

"But, just wait," he says, with a twinkle in his eye.  "We're getting
some new plumbing installed soon."

"Oh that's great.  Replacing plumbing is one of the best ways to..."

"I didn't say 'replacing.'  We're getting new tubes, but we'll still
have the old stuff, too."

"Oh..."

During your tour, you go up and down stairs (it feels like some of the
staircases have one too many steps).  And oddly, there are a lot of
rooms with two or three doors leading into them from the same hallway.
 You notice small manhole covers in many of the hallways.  After
passing the fourth or fifth one, you ask Ronnie what they are.

"Oh, those are manhole covers."  He casually responds, not stopping.

Still confused, you try again: "What are they for?"

"Anything you want."

Thanks, Ronnie.  "For example?"

Not quite sure what's so confusing, Ronnie explains "Oh, you know.
You can fix plumbing, add new walls or rooms, elevate the roof,
activate the alarm, lock all the doors, release the badgers.  Just...
whatever you want."

Badgers?  Intentionally sidestepping the badgers, you ask "Don't
people get upset when you turn off their water to fix the plumbing?"

"Why would we need to turn off the water just to fix the plumbing?"
Ronnie asks, puzzled.

You decide not to press it.

---

Eventually you end up back in the event loop room by the reactor.run()
door.  You've got another appointment, and it seems like you've seen
most of the house.

"Thanks for the tour, Ronnie," you say, "I'm really impressed with the
quality of work in this home.  There's a lot of hallways and doors to
remember, but it's very nice."  You hold out your hand to shake.

"Are you going already?" Ronnie asks, sadly, "I was just about to show
you the sails!"

"Sails?"

"Yeah, we're going to put out to sea any minute now."

"Sea?"

"Of course."

"The house comes with a boat?" you ask incredulously.

"No, that's ridiculous.  The house *is* a boat," he says, like it's
the most normal thing in the world.

"The house is a boat?"

"The house is a boat."

"I'm on a boat?"

"Yes."  He says, a little hesistantingly.  Then, a little worried and
not sure what to do with his hands, "Is it... uh... strange that the
house is a boat?"

"Um...  well...  yes.  I've never looked at a house that was also a boat."

Ronnie seems disappointed.  "Really?  That's too bad.  It's really
nice having a house that's also a boat."  Then, with the smile coming
back into his face, he says "but you don't have to use it as a boat!
And it being a boat doesn't get in the way of it being a house!"

"Err... great..." you begin, but he interrupts in his excitement.

"In fact," he goes on excitedly, "you'll probably be happy with just
the air travel."

"Air... travel?" you ask, reaching for the door.

"Of course!" he shouts in complete disbelief.

"You've got to be kidding me," you say.

"YOU'VE got to be kidding ME!" he says, in shock.  "What are those
other people trying to sell you out there!?  Don't tell me the other
houses just sit on the ground!  They don't fly?"  Ronnie slowly nods
his head as if to coax the answer out of you.  But you don't mirror
his motion.

"I don't believe it!" he continues.  "Next you're going to tell me
that when they make an addition to their flightless, floatless houses
that they don't even test to make sure that the addition will stand."

He's serious.  The house flies.  You're dumbfounded.  This house, with
the unkempt front yard and shag carpet, located in a seemingly
desolate part of town can fly.  Why isn't anyone talking about this!?

Bzeerrpp.  Your phone is ringing.  You're gonna be late for your appointment.

"I really need to go, Ronnie.  But I'll definitely be back.  Thanks
for everything.  This house is amazing."

You turn toward the reactor.run() door and start turning the doorknob.

"STOP!" A hundred voices yell.  Panic-stricken, you jump back from the
door and whip around, breathing heavily from the surprise.  Everyone
in the room including Ronnie is frozen, staring at you.

"That was close!" he says, "you only go through that door once."  He
seems relieved you didn't go through.

"Here, come this way."  He shows you to a door labeled
"reactor.stop()" and sends you on your way.
===========================

I wrote this because it's frustrating to see people make new, shiny
toys out to be amazing and revolutionary when they're not built on a
solid foundation, are not new, and are not even as good as existing
stuff (Twisted).  Twisted can fly!

I would love for more people to step inside the house and see what it
can do, instead of judging it based on incorrect facts or uninformed
opinions.  Or, more to my point, judging it based on the website
(geared toward people working on Twisted), documentation, examples, or
multitude of ways to do the same thing because of backward
compatibility.

I want to mow the lawn, so to speak.  I want to plant flowers and make
the One Front Door more prominent.  I'm considering making a site
dedicated to people learning Twisted.  It would be cool if it there
were things showcasing running Twisted services (websockets + ssh +
irc or something).

Is there interest in this?

Also, what do you think of the story? :)

Thanks,

(Sorry for the long email.)

Matt Haggard



From lauri at fnal.gov  Mon Aug 19 12:27:52 2013
From: lauri at fnal.gov (Laurelin of Middle Earth)
Date: Mon, 19 Aug 2013 13:27:52 -0500
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <521263A8.7070305@fnal.gov>

I thought the story was incredible, and a really really excellent
analogy to the feeling I have whenever I try to learn something
about twisted.  Especially the first time.

-- lauri

Thus spaketh Matt Haggard on 2013-08-19 12:38 PM:

> Please indulge me -- my reasons are at the end.
>
> Twisted as a House for Sale
> ===========================
 > [snip]



From justin.venus at gmail.com  Mon Aug 19 12:39:02 2013
From: justin.venus at gmail.com (Justin Venus)
Date: Mon, 19 Aug 2013 11:39:02 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <521263A8.7070305@fnal.gov>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <521263A8.7070305@fnal.gov>
Message-ID: <CACL=7at1rsZOhTiZWrWGad5coFWeAYTPcVSsX0Hd8o1W1NV_fw@mail.gmail.com>

I really enjoyed the story and it brought back early memories of learning
about twisted.

@jvenus


On Mon, Aug 19, 2013 at 11:27 AM, Laurelin of Middle Earth
<lauri at fnal.gov>wrote:

> I thought the story was incredible, and a really really excellent
> analogy to the feeling I have whenever I try to learn something
> about twisted.  Especially the first time.
>
> -- lauri
>
> Thus spaketh Matt Haggard on 2013-08-19 12:38 PM:
>
>
>  Please indulge me -- my reasons are at the end.
>>
>> Twisted as a House for Sale
>> ===========================
>>
> > [snip]
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>



-- 
Justin Venus
justin.venus at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130819/42ec981e/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug 19 18:34:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 19 Aug 2013 17:34:43 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>


On Aug 19, 2013, at 10:38 AM, Matt Haggard <haggardii at gmail.com> wrote:

> ... [a story] ...

Very entertaining :-).

My one disappointment with the narrative was that when you were lushly describing standing in an open field west of the white house, you neglected to mention that there was a mailbox there.

> I want to mow the lawn, so to speak.  I want to plant flowers and make
> the One Front Door more prominent.  I'm considering making a site
> dedicated to people learning Twisted.  It would be cool if it there
> were things showcasing running Twisted services (websockets + ssh +
> irc or something).
> 
> Is there interest in this?

Of course.

I'd be happy to see what you come up with in terms of a site specifically for beginners.  I think you might need to do more than one; after all, "do you want to make an IRC bot or a name server or an all-singing all-dancing website with IMAP and XMPP on the side?" is a tough counter-question to ask of someone who just asks "what is Twisted?".

But let's not neglect the existing site!  I can see a lot of value of having some alternate entry-points, but there are probably things that you'd like those entry-points to link to on the Twisted site proper, which may not exist.  If you'd like make them exist by doing some web site maintenance ("wiki gardening"), I'd be happy to give you the relevant credentials on https://twistedmatrix.com/trac/.  Patches to documentation are always welcome too, although (as always) we need help to get the review queue back to a manageable size so they can be landed in a timely manner.  Even little changes (like this update that I made to the Trial page a few years ago) can help a lot.

I'm pretty sure we can scare up some hosting resources for things if you want to have some kind of demo persistent Twisted services running.  twistedmatrix.com is no longer buckling under the pressure of its users - why, I just ssh'd in, and the load is less than 1.0!  By our historical standards that's practically idle! ;-)  And we have some other machines that we have not had the system administration bandwidth to make effective use of.

It's also worthwhile to periodically really review the state of things, so you don't fix problems that are already fixed, or at least you build on solutions that are already in progress.  Sometimes us old-timers who remember when the docs were _really_ bad and there were _big_ gaps (the mention of the "index" makes me think you are remembering when <http://twistedmatrix.com/documents/current/> was just a blank directory listing) don't always appreciate how much things have improved in the intervening years.

Not to say that the state of the documentation and particularly the "new user experience" doesn't still have a long, long way to go :-).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130819/f984b387/attachment-0002.html>

From _ at lvh.io  Mon Aug 19 23:47:49 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 20 Aug 2013 07:47:49 +0200
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>

Hi Matt,


Loved the story, excited about the prospects. Just one nitpick: after one
of Glyph's rants on gender-neutral words, I got tripped up by Ronnie not
being referred to as "they" ;-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130820/f3e046c2/attachment-0002.html>

From burak at nehbit.net  Tue Aug 20 04:21:35 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Tue, 20 Aug 2013 13:21:35 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances should I
	use AMP's Command Response field?
In-Reply-To: <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
Message-ID: <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>

Hi there,

I was meaning to ask you all about the 'proper' way to use AMP in regards to two–way communication. The problem I am facing is quite simple, I am building a simple peer–to–peer network in which the user:

a) When sent a handshake, returns a handshake,
b) When asked for fingerprints of posts in the local, returns it, and then asks for the same thing,
and finally, c) If any of the fingerprints do not match posts, request those posts with the fingerprint.

The only non–symmetric step I have in my protocol is the last one.

My question is, should I send my responses over the same AMP command as a response to the command requested, or should I just return an ACK (a boolean value of true, to confirm receipt) and then initiate a separate AMP request from local to the same remote? 

That would mean I would need to handle my open–connections pool by myself, to prevent posts from a non–initiated machine being accepted into the local machine, but I do need to implement that anyway due to the complexity of my business rules. At that point, it seems that I am (Am I?) just using AMP as a remote method header I don't strictly need, and I could just use LineReceiver—all my data is text—to do my bidding. 

Am I missing anything AMP is doing silently for me? Am I using it the correct way?

Thanks in advance,

Best,
Burak





On Aug 20, 2013, at 8:47 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Matt,
> 
> 
> Loved the story, excited about the prospects. Just one nitpick: after one of Glyph's rants on gender-neutral words, I got tripped up by Ronnie not being referred to as "they" ;-)
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130820/9105d270/attachment-0002.bin>

From _ at lvh.io  Tue Aug 20 06:06:51 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 20 Aug 2013 14:06:51 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
Message-ID: <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>

Hi Burak,

On Tue, Aug 20, 2013 at 12:21 PM, Burak Nehbit <burak at nehbit.net> wrote:

> Hi there,
>
> I was meaning to ask you all about the 'proper' way to use AMP in regards
> to two–way communication. The problem I am facing is quite simple, I am
> building a simple peer–to–peer network in which the user:
>
> a) When sent a handshake, returns a handshake,
> b) When asked for fingerprints of posts in the local, returns it, and then
> asks for the same thing,
> and finally, c) If any of the fingerprints do not match posts, request
> those posts with the fingerprint.
>
> The only non–symmetric step I have in my protocol is the last one.
>
> My question is, should I send my responses over the same AMP command as a
> response to the command requested, or should I just return an ACK (a
> boolean value of true, to confirm receipt) and then initiate a separate AMP
> request from local to the same remote?
>

Keep in mind that AMP commands are always ack'ed without you needing to
specify any kind of value, unless you set requiresResponse = False on the
Command class.

That would mean I would need to handle my open–connections pool by myself,
> to prevent posts from a non–initiated machine being accepted into the local
> machine, but I do need to implement that anyway due to the complexity of my
> business rules.


I don't understand this part. It sounds like an authentication problem, no?


> At that point, it seems that I am (Am I?) just using AMP as a remote
> method header I don't strictly need, and I could just use LineReceiver—all
> my data is text—to do my bidding.
>

It's usually correct that you can do things with LineReceiver, but it's
also usually true that AMP is doing stuff for you ;)

Some more information about your system would be useful. Are posts
append-only? Would it make sense to have a given serialization of them? If
so, a hash chain would allow you to sync with just one hash value. A
consensus protocol might help you figure out what that serialization is.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130820/04381f3a/attachment-0002.html>

From haggardii at gmail.com  Tue Aug 20 09:15:47 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 20 Aug 2013 09:15:47 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
Message-ID: <CAL+xXwMjYCDp+JwLKXB2AMBZL2HshpPX=OZ9ze23ux5zzZ0zWA@mail.gmail.com>

On Mon, Aug 19, 2013 at 6:34 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 19, 2013, at 10:38 AM, Matt Haggard <haggardii at gmail.com> wrote:
>
> ... [a story] ...
>
>
> Very entertaining :-).
>
> My one disappointment with the narrative was that when you were lushly
> describing standing in an open field west of the white house, you neglected
> to mention that there was a mailbox there.

I missed a great opportunity. :)

> I'd be happy to see what you come up with in terms of a site specifically
> for beginners.  I think you might need to do more than one; after all, "do
> you want to make an IRC bot or a name server or an all-singing all-dancing
> website with IMAP and XMPP on the side?" is a tough counter-question to ask
> of someone who just asks "what is Twisted?".

Yes, there will need to be more than one thing (whether that means
different sites or different landing pages on the same site).

> But let's not neglect the existing site!  I can see a lot of value of having
> some alternate entry-points, but there are probably things that you'd like
> those entry-points to link to on the Twisted site proper, which may not
> exist.  If you'd like make them exist by doing some web site maintenance
> ("wiki gardening"), I'd be happy to give you the relevant credentials on
> https://twistedmatrix.com/trac/.  Patches to documentation are always
> welcome too, although (as always) we need help to get the review queue back
> to a manageable size so they can be landed in a timely manner.  Even little
> changes (like this update that I made to the Trial page a few years ago) can
> help a lot.

Agreed.  My goal is to get them into the existing house/library, not
to build and manage an entirely new one.  Really, I just want them to
have a few great experiences AND to realize that a webserver is just
_one_ kind of server.  For example, it made me giddy the first time I
got a netstring state machine working.  And everyone at work was blown
away when I replaced our existing WSGI-server with Twisted (it doesn't
drop connections anymore).

My goal is to make them giddy, then set them loose in the house.

I can also do some wiki gardening (I've noticed Tom Prince has done a
lot of great gardening).  I'm thinking I'll find weeds as I look for
pages to send people to after making them giddy.

> I'm pretty sure we can scare up some hosting resources for things if you
> want to have some kind of demo persistent Twisted services running.
> twistedmatrix.com is no longer buckling under the pressure of its users -
> why, I just ssh'd in, and the load is less than 1.0!  By our historical
> standards that's practically idle! ;-)  And we have some other machines that
> we have not had the system administration bandwidth to make effective use
> of.

Great!  I will start working on a demo.

> It's also worthwhile to periodically really review the state of things, so
> you don't fix problems that are already fixed, or at least you build on
> solutions that are already in progress.  Sometimes us old-timers who
> remember when the docs were _really_ bad and there were _big_ gaps (the
> mention of the "index" makes me think you are remembering when
> <http://twistedmatrix.com/documents/current/> was just a blank directory
> listing) don't always appreciate how much things have improved in the
> intervening years.

This is why I'm optimistic about Twisted.  Things _do_ improve, though
Google seems to think Twisted is still version 8.2.0 (it was to that
quirk of Google, the Indexer, that I referred in my story)

Here's what I've got already.  (I don't love it yet -- it already
feels too cluttered -- but it's a start):
http://iffy.github.io/twistedftw/



From zookog at gmail.com  Tue Aug 20 11:09:38 2013
From: zookog at gmail.com (Zooko O'Whielacronx)
Date: Tue, 20 Aug 2013 17:09:38 +0000
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>

I loved the story! Thanks.

I think the idea of a separate site for the newcomer audience has a
lot of promise. Also that site might have different (primary)
maintainers than the twistedmatrix.com site. I guess maybe one of the
values of the "front door site" is what it excludes. All the
documentation which is either incomplete or past its prime could be
kept off of the front door site.

http://iffy.github.io/twistedftw/ looks very promising!

Regards,

Zooko



From burak at nehbit.net  Tue Aug 20 16:11:47 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 01:11:47 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances
	should I use AMP's Command Response field?
In-Reply-To: <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
Message-ID: <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>

Hi Laurens,

> I don't understand this part. It sounds like an authentication problem, no?

It's an authentication problem, yes, but the authentication is a very simple one—that the remote should initiate the start of the process with a handshake. That way, the local user's program knows under who to file the incoming data. It's less of an authentication and more of preventing the remote from dumping to the local user unrequested text.

> Some more information about your system would be useful. Are posts append-only? Would it make sense to have a given serialization of them? If so, a hash chain would allow you to sync with just one hash value. A consensus protocol might help you figure out what that serialization is.

I seem to have been implicitly assuming more knowledge in my system than I have given, I apologise. To give a general overview, I am building a peer–to–peer network that is vaguely similar to reddit.com, but one that runs based on peer–to–peer exchanges rather than relying on a central server. My system sends posts across the wire from one computer to another, and all the sorting and other logic happens on the ends. The wire is rather dumb—I'm trying to follow the end to end principle as much as I can. 

The users handshake each other (by sending their node ids), exchange post fingerprints (of posts they have in their machines), request posts of fingerprints new to them, download posts from the remote, and then close the connection. This is the archetypal connection in my system. Posts are immutable, they cannot be deleted or edited, only pruned after six months, which is also enforced at endpoints. It should be rather simple to implement this with Twisted, barring some NAT Traversal pains, but that can be solved. 

The posts are JSON text. I do want to have a public–key implementation on top of this with a reliable ECC algorithm, but that's for future versions. For now, I am concerned with just getting it to work. 

Does this give you enough information? I am curious about the best or the most natural way to implement in it Twisted. I have been trying to work with Twisted on and off since March as ,y project progressed, but even after finishing the second edition Twisted book, I am still unable to fully wrap my head around it, hence these questions. 

Should I be using AMP? Am I doing something dumb?

Also, when I finally "get" Twisted, I'll be making a series of blog posts called "Twisted for Dumb People [Like Me]". Such a wonderful piece of code, it doesn't deserve the brick wall of a learning curve it currently has.

Thanks!

Best,
Burak






On Aug 20, 2013, at 3:06 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Burak,
> 
> On Tue, Aug 20, 2013 at 12:21 PM, Burak Nehbit <burak at nehbit.net> wrote:
> Hi there,
> 
> I was meaning to ask you all about the 'proper' way to use AMP in regards to two–way communication. The problem I am facing is quite simple, I am building a simple peer–to–peer network in which the user:
> 
> a) When sent a handshake, returns a handshake,
> b) When asked for fingerprints of posts in the local, returns it, and then asks for the same thing,
> and finally, c) If any of the fingerprints do not match posts, request those posts with the fingerprint.
> 
> The only non–symmetric step I have in my protocol is the last one.
> 
> My question is, should I send my responses over the same AMP command as a response to the command requested, or should I just return an ACK (a boolean value of true, to confirm receipt) and then initiate a separate AMP request from local to the same remote?
> 
> Keep in mind that AMP commands are always ack'ed without you needing to specify any kind of value, unless you set requiresResponse = False on the Command class.
> 
> That would mean I would need to handle my open–connections pool by myself, to prevent posts from a non–initiated machine being accepted into the local machine, but I do need to implement that anyway due to the complexity of my business rules.
> 
> I don't understand this part. It sounds like an authentication problem, no?
>  
> At that point, it seems that I am (Am I?) just using AMP as a remote method header I don't strictly need, and I could just use LineReceiver—all my data is text—to do my bidding.
> 
> It's usually correct that you can do things with LineReceiver, but it's also usually true that AMP is doing stuff for you ;)
> 
> Some more information about your system would be useful. Are posts append-only? Would it make sense to have a given serialization of them? If so, a hash chain would allow you to sync with just one hash value. A consensus protocol might help you figure out what that serialization is.
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/2cbc04b1/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130821/2cbc04b1/attachment-0002.bin>

From _ at lvh.io  Wed Aug 21 06:28:34 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 21 Aug 2013 14:28:34 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
Message-ID: <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>

Hi Burak,


I think you're doing fine. Distributed systems are just kind of hard :-)

It sounds like your fundamentally building an eventually consistent
distributed database. We have a few of those already: it might be
significantly less work to just use one of them. I suppose it depends why
you're trying to make it distributed. Is this about reliability in the face
of e.g. hardware failure, or is this about being able to disseminate data
when someone tries to stop you from doing so? Are you trying to protect
against byzantine failures too?

That said, you might want to consider how you communicate posts. Six months
worth of posts is a lot. Even with ten posts per day, you'd end up with
~10*30*6 = 1800 hash values. The digest size of BLAKE2 is variable, but if
you're using 512 bit digests, that's 64 bytes, or 112.5 kibibytes for the
whole thing. That's probably more than you want to send in a single message.

While you can't rely on synchronized clocks (in the wall-clock time sense)
in a distributed system, you *can* rely on timestamps of your immutable
messages. You could send only message id's in the preceding time window,
for example. You can use hash chains to guarantee that the boards share the
same history.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/dde49069/attachment-0002.html>

From haggardii at gmail.com  Wed Aug 21 11:02:47 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 21 Aug 2013 11:02:47 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
Message-ID: <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>

I've got the start of a demo multi-protocol chat server, if anyone's
interested in taking a look.  (Is this the right place for this
discussion?  Would IRC be better?)

Run it on your own machine by doing this:
# make a virtualenv if you want
git clone -b demo https://github.com/iffy/twistedftw.git
cd twistedftw
pip install -r demo_requirements.txt
twistd -n txftw
# go to http://127.0.0.1:8400

I'm thinking I'll add an SSH and SCP element, too.  So far, it seems
kind of boring.  Maybe a game of some kind would be a better demo?  I
appreciate any feedback.

Matt Haggard

On Tue, Aug 20, 2013 at 11:09 AM, Zooko O'Whielacronx <zookog at gmail.com> wrote:
> I loved the story! Thanks.
>
> I think the idea of a separate site for the newcomer audience has a
> lot of promise. Also that site might have different (primary)
> maintainers than the twistedmatrix.com site. I guess maybe one of the
> values of the "front door site" is what it excludes. All the
> documentation which is either incomplete or past its prime could be
> kept off of the front door site.
>
> http://iffy.github.io/twistedftw/ looks very promising!
>
> Regards,
>
> Zooko
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From twisted-python at 2xlp.com  Wed Aug 21 12:05:52 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 21 Aug 2013 14:05:52 -0400
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
Message-ID: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>


It would be really beneficial if this were something that fully works with twisted, but is not dependent on it.

For example, I have a "Project" that mostly uses SqlAlchemy.  It started out in Pylons, new development is on Pyramid and there are additional tasks in Celery + some more in Twisted.  Aside from a few manual db tasks in Twisted, they all share and re-use a common "Model" package.  

Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.


From burak at nehbit.net  Wed Aug 21 12:09:25 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 21:09:25 +0300
Subject: [Twisted-Python] Advice Request: Under what circumstances
	should I use AMP's Command Response field?
In-Reply-To: <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
Message-ID: <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>

(Only the latter part of this post is related to Twisted. I apologise in advance for the former, and you can skip to that half directly to read about the gist)

Hi Laurens,

> I think you're doing fine. Distributed systems are just kind of hard :-)

This is encouraging to hear!

> It sounds like your fundamentally building an eventually consistent distributed database. We have a few of those already: it might be significantly less work to just use one of them. I suppose it depends why you're trying to make it distributed. 

I have done a superficial research, so far it points to implementing my own solution. Or rather, what I am producing is not a full–fledged eventually consistent database at all, it's a loosely knit bunches of people. There is no 'database' in the classical sense.

> Is this about reliability in the face of e.g. hardware failure, or is this about being able to disseminate data when someone tries to stop you from doing so? Are you trying to protect against byzantine failures too?

It's about the right to free speech, so I would say the latter. I'm from Turkey and currently living in the United States, so while I am protected under First Amendment, my compatriots are not. This is significant: As you might have heard, we had a wave of peaceful protests two months ago against the last green space being demolished in the heart of Istanbul, the Gezi Park, to turn the space into a shopping mall. The riot police attacked unarmed, stationary people with tear gas canisters, which, led to a series of much larger protests (a few million large at its height) and an international outcry. Thousands arrested, five dead, state apparatus pressing charges for everyone from high schoolers to suburban moms. This country is not a banana republic and it's what made these so shocking: Turkey is the 15th largest economy in the world, larger than South Korea in terms of GDP, in the process of joining the European Union etc. 

The reason I'm telling this is what happened afterwards; after the govt. had to stop police violence after the EU / US pressure, they silently began a witch–hunt of Twitter, Facebook users and bloggers they deemed to be 'promoting armed insurgency against the state', and there are currently around 20-25 people currently under detention, waiting for trial. Of course, Twitter and Facebook does not give Turkish government any IP addresses: They just look at people's profiles, and just grab the most likely person having the same name. Our very broken legal system allows for up to five years (!) of contempt of court without pressing any charges, something which the Islamist government really loves to use against its people. 

I am building a tool that allows people to express their opinions without necessarily revealing their identities. It's called Aether, a distributed network that allows its users—all users are anonymous and unregistered by default— to exercise their right to free speech without being endangered by state violence. Everything within it is public, and everything posted on Aether is in public domain. (And please excuse the holier–than–thou sounding copywriting on the webpage—this was my thesis project and it was one of the requirements.)

The backend process of this application runs entirely on Twisted. The business rules are simple. Consider Alice the local node, Bob the remote node, and Carol another remote node. When Bob connects to Alice and gets a list of the posts Alice has, it will request the posts he does not have. The posts Alice has publicly available are the posts Alice has either a) created, or b) upvoted. If Bob, at some point, also likes the post he has gotten from Alice, Bob will also start to publicly distribute that post. At that point, it is impossible to determine whether Alice or Bob has created this post—Alice might as well have gotten the post from a third party which Bob is not aware of. The post, being distributed from two nodes, now has have a higher chance of being found by Carol. If you extrapolate it to a thousand people who all have upvoted the post, it becomes rather impossible to determine the origin. The act of 'liking' something is the exact same thing as sharing something, as is 'creating' something—there is absolutely no difference, and every node only has the IP address of the last ring of the chain. The nodes simply count how many times they encounter the same post digest to determine the amount of upvotes the post has gotten, and they use it to determine the lineup of posts the app shows to its user. Other than that, there is no global database, there is no global state, no people in the entire network is aware of all rest—I just strive to distribute the maximum amount of popular data to maximum amount of people possible. The client application pieces together all this information into a coherent whole of topics, subjects and posts. There is also distribution of user addresses through Aether to allow people to find new nodes to connect to.

There are also other details both in cryptography to defeat a global passive adversary, or detailed business rules to detect and hide abuses from the local user and many other things—this is a large project I have been working on alone for a very long time so some parts of it are rightly esoteric. And I have been off–topic already way longer than acceptable. I have the entire local application finished, and the only remaining part is networking, which is why I am trying to figure out Twisted so hard. Here are a bunch of screenshots for your perusal. Image 1  Image 2  Image 3  Image 4.

> While you can't rely on synchronized clocks (in the wall-clock time sense) in a distributed system, you *can* rely on timestamps of your immutable messages. You could send only message id's in the preceding time window, for example. You can use hash chains to guarantee that the boards share the same history.

I'm just discarding posts timestamped UNIX time that is ahead of the local UNIX time—for this specific purpose, it works well. 

All of those commands are handled through AMP protocol, and so far I am treating AMP like a local protocol with no chance of failure—that won't be the case under a real network. I can serve errors over AMP, but it starts to get very, very complex very fast when you do not have any guarantees on in which order things arrive. There are certain actions I want to forbid if a certain sequence has not been completed with that peer yet, but otherwise the protocol is remarkably flexible, and likewise remarkably pain–inflicting in its implementation. I guess I just want to know if I am using Twisted in this project the sanest way possible—I have enough insanity going on in my project to last a lifetime already!

Sorry about the semi off–topic wall of text, won't happen again.

Thanks,
Burak





On Aug 21, 2013, at 3:28 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Burak,
> 
> 
> I think you're doing fine. Distributed systems are just kind of hard :-)
> 
> It sounds like your fundamentally building an eventually consistent distributed database. We have a few of those already: it might be significantly less work to just use one of them. I suppose it depends why you're trying to make it distributed. Is this about reliability in the face of e.g. hardware failure, or is this about being able to disseminate data when someone tries to stop you from doing so? Are you trying to protect against byzantine failures too?
> 
> That said, you might want to consider how you communicate posts. Six months worth of posts is a lot. Even with ten posts per day, you'd end up with ~10*30*6 = 1800 hash values. The digest size of BLAKE2 is variable, but if you're using 512 bit digests, that's 64 bytes, or 112.5 kibibytes for the whole thing. That's probably more than you want to send in a single message.
> 
> While you can't rely on synchronized clocks (in the wall-clock time sense) in a distributed system, you *can* rely on timestamps of your immutable messages. You could send only message id's in the preceding time window, for example. You can use hash chains to guarantee that the boards share the same history.
> 
> cheers
> lvh
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/9c0b7497/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130821/9c0b7497/attachment-0002.bin>

From burak at nehbit.net  Wed Aug 21 12:15:24 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 21 Aug 2013 21:15:24 +0300
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
Message-ID: <7B6C9C40-4E37-46A4-AAD2-661AA5E2CE1D@nehbit.net>

I am currently using SQLAlchemy with Twisted with deferToThread and it works rather well, have you tried it? So long as you create a new session for each thread you spawn (which you should also do without Twisted) it works without any modification required.

Here's an example of using SQLAlchemy with Twisted— no guarantees on it's the best way to do things, but it works.

def checkIfNodeExists(nodeId):
    def threadFunction():
        s = Session()
        r =  s.query(Node).filter(Node.NodeId == nodeId).count()
        if r is not 0:
            return True
        else:
            return False

    return threads.deferToThread(threadFunction)



On Aug 21, 2013, at 9:05 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> 
> It would be really beneficial if this were something that fully works with twisted, but is not dependent on it.
> 
> For example, I have a "Project" that mostly uses SqlAlchemy.  It started out in Pylons, new development is on Pyramid and there are additional tasks in Celery + some more in Twisted.  Aside from a few manual db tasks in Twisted, they all share and re-use a common "Model" package.  
> 
> Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/63b057ec/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4343 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130821/63b057ec/attachment-0002.bin>

From jeff at ocjtech.us  Wed Aug 21 12:16:21 2013
From: jeff at ocjtech.us (Jeffrey Ollie)
Date: Wed, 21 Aug 2013 13:16:21 -0500
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
 <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
Message-ID: <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>

Burak, what you're trying to do sounds a little like the Freenet
Project. https://freenetproject.org/  If you can't use their code
directly you can certainly get some inspiration or learn how they
solved similar problems.

-- 
Jeff Ollie



From glyph at twistedmatrix.com  Wed Aug 21 12:32:18 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 21 Aug 2013 11:32:18 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CANdZDc5CjCC6c=w-oCbUmXSgntzEbrPE-fvB5shxsGQnp11aVw@mail.gmail.com>
 <CAL+xXwOJVqnJTVhH0=TETKr_rY8LA9Ggf7q9ndFELjGOCB8KbQ@mail.gmail.com>
Message-ID: <46CD6032-DCE3-4A74-BEF3-26AB8A315D9A@twistedmatrix.com>


On Aug 21, 2013, at 10:02 AM, Matt Haggard <haggardii at gmail.com> wrote:

> I've got the start of a demo multi-protocol chat server, if anyone's
> interested in taking a look.  (Is this the right place for this
> discussion?  Would IRC be better?)

This is a fine place for discussion.  If you prefer IRC, by all means use it, but mailing lists create a more persistent artifact that is easier to reference later.

> Run it on your own machine by doing this:
> # make a virtualenv if you want
> git clone -b demo https://github.com/iffy/twistedftw.git
> cd twistedftw
> pip install -r demo_requirements.txt
> twistd -n txftw
> # go to http://127.0.0.1:8400

Cool.

> I'm thinking I'll add an SSH and SCP element, too.  So far, it seems
> kind of boring.  Maybe a game of some kind would be a better demo?  I
> appreciate any feedback.

I think that as long as you make it easy to hack it up, it's OK to be a bit boring at first; the real thrill comes from editing the code and watching it change.

If you really want to make it exciting though, there's always <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/files/head:/Imaginary/> if you're feeling adventurous ;-).

-g




From glyph at twistedmatrix.com  Wed Aug 21 12:35:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 21 Aug 2013 11:35:35 -0700
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
Message-ID: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>


On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.

Doing this is simple, although probably not easy: you just need to convince the SQLAlchemy folks to separate the process of generating SQL and executing SQL, and expose hooks for event-driven frameworks (which is an ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip) to schedule SQL execution with an event-driven backend rather than assuming it can block.

When I faced this problem, I wanted to use SQLAlchemy rather than write my own ORM, but I was unable to due the lack of a public API for generating cross-database SQL.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/cd56481f/attachment-0002.html>

From miwinter at cisco.com  Wed Aug 21 12:41:44 2013
From: miwinter at cisco.com (Mike Winter (miwinter))
Date: Wed, 21 Aug 2013 18:41:44 +0000
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
Message-ID: <6BE1EFC84D6C174480C3D22E26E184AD16840F47@xmb-aln-x10.cisco.com>

This reminded me of something I read years ago from Doug Schmidt on a pattern half sync half async:

http://www.cs.wustl.edu/~schmidt/PDF/PLoP-95.pdf

I feel it is relevant but the picture may be upside down in relation to writing twisted wrappers which may want to wrap a blocking API.


On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com<mailto:twisted-python at 2xlp.com>> wrote:

Having a great ORM for twisted is wonderful , but its way less exciting and attractive if it's only for twisted.

Doing this is simple, although probably not easy: you just need to convince the SQLAlchemy folks to separate the process of generating SQL and executing SQL, and expose hooks for event-driven frameworks (which is an ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip) to schedule SQL execution with an event-driven backend rather than assuming it can block.

When I faced this problem, I wanted to use SQLAlchemy rather than write my own ORM, but I was unable to due the lack of a public API for generating cross-database SQL.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/b44b1ab7/attachment-0002.html>

From haggardii at gmail.com  Wed Aug 21 12:54:33 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Wed, 21 Aug 2013 12:54:33 -0600
Subject: [Twisted-Python] SQL ORM for Twisted & PostgreSQL?
In-Reply-To: <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
References: <CAD-DQxQZd2kdQVRZ5HbfM4eNi786BL5n-uQzbrKGFRr16a95rg@mail.gmail.com>
 <42112E0A-B0D5-4D09-9641-C1CAA10B5914@twistedmatrix.com>
 <FFE6201C-4ECB-41D6-9052-CF396EA9CB03@ox.cx>
 <CAE_Hg6ZiDWKtM0Duh0RKHROVHbTWMXja_HDVLDkq6t0niAWcZw@mail.gmail.com>
 <5AF6C57C-90F9-4132-97CE-5E9D407320E8@twistedmatrix.com>
 <2EEB7BA2-7ED9-45DF-A60F-176D548718B2@ox.cx>
 <F5DDB964-4DA8-4807-8C62-25A2073E5BE8@twistedmatrix.com>
 <20130724180531.28793.341867463.divmod.xquotient.736@top>
 <CC60714F-E3FA-4034-A0DE-115AF4881A80@ox.cx>
 <1D10CB8B-754F-43B4-B7C1-BCF01BB184DE@2xlp.com>
 <D42185CA-3069-4B39-BC27-8EDCE5EC7B49@twistedmatrix.com>
Message-ID: <CAL+xXwPzApdG7eM2gqhvBY5NN++N+RgSA6r2NK9ChBupUFw2BQ@mail.gmail.com>

FWIW, the separation of generating SQL and executing SQL was my intent
in designing this: https://github.com/iffy/norm  Currently, it *only*
has asynchronous SQL execution, but it wouldn't be hard to add
synchronous execution.

Also, there's no subclassing of modeled classes.

Matt Haggard

On Wed, Aug 21, 2013 at 12:35 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Aug 21, 2013, at 11:05 AM, Jonathan Vanasco <twisted-python at 2xlp.com>
> wrote:
>
> Having a great ORM for twisted is wonderful , but its way less exciting and
> attractive if it's only for twisted.
>
>
> Doing this is simple, although probably not easy: you just need to convince
> the SQLAlchemy folks to separate the process of generating SQL and executing
> SQL, and expose hooks for event-driven frameworks (which is an
> ever-expanding circle now, encompassing Twisted, Tornado, Pulsar, and Tulip)
> to schedule SQL execution with an event-driven backend rather than assuming
> it can block.
>
> When I faced this problem, I wanted to use SQLAlchemy rather than write my
> own ORM, but I was unable to due the lack of a public API for generating
> cross-database SQL.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From _ at lvh.io  Wed Aug 21 14:47:55 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 21 Aug 2013 22:47:55 +0200
Subject: [Twisted-Python] Advice Request: Under what circumstances
 should I use AMP's Command Response field?
In-Reply-To: <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CAE_Hg6ZUJLfU7t3rP6sUv=7uiiyBn0j3xTz7v9a67R+DjpjZVw@mail.gmail.com>
 <63B2B6C7-06A9-45A5-BF26-87BE08BC0110@nehbit.net>
 <CAE_Hg6Y5_xdxDF8zwcEH5f1OG8dZwQBZryMNXExSx=SoXwz=6A@mail.gmail.com>
 <9C24B2B1-DE21-44C4-BC0F-9BEEB3204EDF@nehbit.net>
 <CAE_Hg6bjnRJcOun+AkB7850mtV-ahqG24YRmXmd_2ZiVjmoNqQ@mail.gmail.com>
 <0E9F2BCF-32B7-4E1A-B8B1-3B7B0A25F6FD@nehbit.net>
 <CAD-DQxSHDPLYPeJzokAmhH4LweQsT6rRa9TYZPYNzMgQAZ+d=w@mail.gmail.com>
Message-ID: <CAE_Hg6Zg3ahJNY_KFq6Syh3zqn-AF-L8fvqr6gP916Ru-pNTRA@mail.gmail.com>

Hi Burak,

I don't have time to write a more complete response right now, but you
might want to get in touch with Pete Fein (@wearpants). He was trying to do
this, but with the added restriction that it had to work on WinXP Tomato's
opinion of IE6.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130821/abe29402/attachment-0002.html>

From tom.prince at ualberta.net  Wed Aug 21 19:51:24 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 21 Aug 2013 19:51:24 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <13848E06-8C34-4EF3-B0D0-AEBDAB9779A5@twistedmatrix.com>
Message-ID: <87k3jetrvn.fsf@hermes.hocat.ca>

Glyph <glyph at twistedmatrix.com> writes:
> I'm pretty sure we can scare up some hosting resources for things if
> you want to have some kind of demo persistent Twisted services
> running.  twistedmatrix.com is no longer buckling under the pressure
> of its users - why, I just ssh'd in, and the load is less than 1.0!
> By our historical standards that's practically idle! ;-) And we have
> some other machines that we have not had the system administration
> bandwidth to make effective use of.

And we have access to various clouds, to deploy things on.



From jamesbroadhead at gmail.com  Thu Aug 22 07:54:41 2013
From: jamesbroadhead at gmail.com (James Broadhead)
Date: Thu, 22 Aug 2013 14:54:41 +0100
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
Message-ID: <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>

This was hilarious, thank you for sharing it. Forwarded the link to my
whole team.



JB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130822/f3e1e682/attachment-0002.html>

From ltaylor.volks at gmail.com  Fri Aug 23 11:39:16 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Fri, 23 Aug 2013 12:39:16 -0500
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry Pi
Message-ID: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>

I have written a simple serial-to-serial logging proxy in order to discover and document the protocol used by two hardware devices. The goal is to incrementally replace one of the devices with a Twisted application, but right now I'm just trying to gather data.

A RaspberryPi seemed ideal for this given its cost and ability to run python; however, I seem to be running into some kind of timing or data corruption issue that only occurs on the Pi, and only when I am logging data.  The application works well on my dev laptop (OSX), but falters on the Pi.

I can use socat to do raw data collection for this first stage (it works fine on the Pi as a logging proxy), but I was hoping to use Twisted with custom log observers to format the data in ways that might help illuminate the framing of the protocol. The idea was to have the protocol just log and proxy each byte and then I could experiment with a series of observers to identify the patterns (emphasize STX/ETX as possible delimiters, flag this sequence as an 'INIT' sequence, etc..)


The setup:
--------------

[CON-A]  <---->  [SerialSpy (Twisted)]  <----> [CON-B]

When CON-A is powered-on, it goes through an init sequence to establish communication with CON-B and if there are any issues, CON-A gives up and displays an error message. 

When run from my dev laptop (OSX), the data is logged and proxied between the 2 devices without any problems. 

When run on the Pi (Raspbian), back and forth comm is fine for the first 4-5 framed packets (STX...ETX+CKSUM), but then CON-B begins to NAK every packet after that and CON-A gives up.

The total amount of data transferred during a successful init sequence is < 1k:
CON-A: 537 bytes
CON-B: 290 bytes


The app:
------------

A minimal Protocol subclass logs each byte received and writes to its peer.

class ProxyLoggingProtocol(protocol.Protocol, object):
    peer = None

    def __init__(self, name):
        self.name = name

    def dataReceived(self, data):
        """
        Log data received and proxy to peer
        """
        for b in data:
            log.msg(b, system=self.name)

        # Passthrough data to "other" transport
        if self.peer is not None:
            self.peer.transport.write(data)
        else:
            err = ValueError('Peer protocol not set (nowhere to proxy this data)')
            log.err(err)


... setup the protocols and serial transports:

log.startLogging(sys.stdout)

conA = ProxyLoggingProtocol('CON-A-->')
conB = ProxyLoggingProtocol('<--CON-B')
conA.peer = conB
conB.peer = conA

SerialPort(conA,'/dev/ttyUSB0', reactor, ...)
SerialPort(conB, '/dev/ttyUSB1', reactor, ...)

reactor.run()


The Issue?
--------------
It seems that doing anything in dataReceived beyond just proxying bytes from A to B is enough to cause CON-B to interpret received data as either bad or delayed to the point where it returns a NAK. Oddly, the first few framed packets are logged, proxied, and ACKed successfully.

This occurs if I log.startLogging() to a file or stdout. If I never call startLogging(), the data proxies without error.  That is, CON-B replies with positive ACKs and everything works as expected.

I suppose the obvious answer may be that the Pi is underpowered for this task, but I am hoping to better understand why.  I may be able to defer logging to a queue or find other workarounds, but I'd like to figure out why basic usage of logging could be causing this.  Any thoughts as to what I could be looking at next would be appreciated.


Thanks,

Lucas






From p.mayers at imperial.ac.uk  Fri Aug 23 12:53:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 23 Aug 2013 19:53:36 +0100
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
 Pi
In-Reply-To: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
Message-ID: <5217AFB0.3090000@imperial.ac.uk>

On 08/23/2013 06:39 PM, Lucas Taylor wrote:

> I suppose the obvious answer may be that the Pi is underpowered for
> this task, but I am hoping to better understand why.  I may be able
> to defer logging to a queue or find other workarounds, but I'd like
> to figure out why basic usage of logging could be causing this.  Any
> thoughts as to what I could be looking at next would be appreciated.

What is the data rate, and the nature of the serial ports (e.g. UART or 
USB?)

Your suggestion of CPU rings a little bell for me; IIRC the Pi had some 
(ahem) sub-optimal behaviour w.r.t. the USB controller in some hardware 
versions. There was some mild controversy over this, with various 
accusations slung back and forth in the forums, people getting banned 
for "continuing to talk about it" and so on. But I seem to recall timely 
data delivery under CPU load was a symptom, and it might be the overhead 
of Twisted/Python/logging drives the Pi too hard.

Where is the logging directed - I'm assuming NV storage which is the SD 
card? - you might try logging to RAM and not touching the storage or bus.



From haggardii at gmail.com  Fri Aug 23 16:31:57 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Fri, 23 Aug 2013 16:31:57 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
Message-ID: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>

Thanks for positive response, everyone!

There are now two legitimate articles (yeah, they're small)
iffy.github.io/twistedftw  I'm planning next to write a hello world
for making a webserver using klein.  It will mostly be plagiarized
from the klein README and then drive them to klein's github page.

Then maybe on to:
 - threads
 - Deferreds

Feel free to fork the repo and send pull requests for other articles
or demos (or just suggest a topic/demo and maybe I'll tackle it).

Thanks,

Matt

On Thu, Aug 22, 2013 at 7:54 AM, James Broadhead
<jamesbroadhead at gmail.com> wrote:
> This was hilarious, thank you for sharing it. Forwarded the link to my whole
> team.
>
>
>
> JB
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From senthil at uthcode.com  Fri Aug 23 20:10:39 2013
From: senthil at uthcode.com (Senthil Kumaran)
Date: Fri, 23 Aug 2013 19:10:39 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
Message-ID: <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>

Hi Matt,

On Fri, Aug 23, 2013 at 3:31 PM, Matt Haggard <haggardii at gmail.com> wrote:

> Thanks for positive response, everyone!
>
> There are now two legitimate articles (yeah, they're small)
> iffy.github.io/twistedftw


This is great. It will be appealing to new audience, who value UI design
highly.

I hope you have come across Dave Peticola's twisted introduction. With
those docs, I think, this "house for sale"  story could have been a
 "disneyland trip".
:-)

-- 
Senthil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130823/303fbda4/attachment-0002.html>

From orestis at orestis.gr  Sat Aug 24 02:12:05 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Sat, 24 Aug 2013 11:12:05 +0300
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
Message-ID: <91E8139F-F468-4DCA-A1A4-0EA2B7A7B656@orestis.gr>

I gave a 4-hour training on Twisted a couple of years ago, and tried to capture the essence of it in a written tutorial (as opposed to slides). I haven't touched those notes for ages now, but you can see the result here: 

https://github.com/orestis/twisted-tutorial

Hopefully it will find some use!

Orestis

On 24 Αυγ 2013, at 1:31 π.μ., Matt Haggard <haggardii at gmail.com> wrote:

> Thanks for positive response, everyone!
> 
> There are now two legitimate articles (yeah, they're small)
> iffy.github.io/twistedftw  I'm planning next to write a hello world
> for making a webserver using klein.  It will mostly be plagiarized
> from the klein README and then drive them to klein's github page.
> 
> Then maybe on to:
> - threads
> - Deferreds
> 
> Feel free to fork the repo and send pull requests for other articles
> or demos (or just suggest a topic/demo and maybe I'll tackle it).
> 
> Thanks,
> 
> Matt
> 
> On Thu, Aug 22, 2013 at 7:54 AM, James Broadhead
> <jamesbroadhead at gmail.com> wrote:
>> This was hilarious, thank you for sharing it. Forwarded the link to my whole
>> team.
>> 
>> 
>> 
>> JB
>> 
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From entrash at hotmail.com  Sat Aug 24 09:41:39 2013
From: entrash at hotmail.com (entrash hotmail)
Date: Sat, 24 Aug 2013 17:41:39 +0200
Subject: [Twisted-Python] Monitoring Application
Message-ID: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>

Hello,

just started using Twisted and don't know how to manage 
communications in a monitoring application I'm building for Windows 
environment.

I'm building an application where various client 
machines will be receiving real-time updates on the status of multiple 
servers (CPU/RAM usage, tasks running, ...). Clients should also be able
 to send commands to server machines (Start/Stop task, Shut down, 
Reboot, ...)

What protocol should I use? I managed to get 
something running from a simple Echo server sample, but I guess it's not
 the best curse of action as I could end up having 10 machines 
establishing a connection every few seconds to each of the 20 or so 
servers we have.

Is there a sample of a similar setup I could follow?

Regards  		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130824/65d77c47/attachment-0002.html>

From ltaylor.volks at gmail.com  Sat Aug 24 11:37:04 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Sat, 24 Aug 2013 12:37:04 -0500
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
	Pi
In-Reply-To: <5217AFB0.3090000@imperial.ac.uk>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
 <5217AFB0.3090000@imperial.ac.uk>
Message-ID: <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>


On Aug 23, 2013, at 1:53 PM, Phil Mayers wrote:

> On 08/23/2013 06:39 PM, Lucas Taylor wrote:
> 
>> I suppose the obvious answer may be that the Pi is underpowered for
>> this task, but I am hoping to better understand why.  I may be able
>> to defer logging to a queue or find other workarounds, but I'd like
>> to figure out why basic usage of logging could be causing this.  Any
>> thoughts as to what I could be looking at next would be appreciated.
> 
> What is the data rate, and the nature of the serial ports (e.g. UART or USB?)
> 
> Your suggestion of CPU rings a little bell for me; IIRC the Pi had some (ahem) sub-optimal behaviour w.r.t. the USB controller in some hardware versions. There was some mild controversy over this, with various accusations slung back and forth in the forums, people getting banned for "continuing to talk about it" and so on. But I seem to recall timely data delivery under CPU load was a symptom, and it might be the overhead of Twisted/Python/logging drives the Pi too hard.
> 
> Where is the logging directed - I'm assuming NV storage which is the SD card? - you might try logging to RAM and not touching the storage or bus.
> 

9600bps, using USB-Serial adapters (tried 3 different supported chipsets). Logging to local storage and also to stdout.

Now that I have waded through many Pi forum posts about USB behavior trying to figure this out, it seems that most of the USB-Serial issues had to do with freezes when accessing the serial port, or hanging after some length of continuous use. Those issues appear to have been resolved (or at least I am not experiencing them), but it does seem there may still be lingering hardware issues in search of driver fixes according to the forums. Lots of folks are using the Pi w/ USB serial adapters to good effect, though, so who knows?

At any rate, I don't think there is much to be done on the Twisted side. I have a few minor things left to try, but I have a feeling my curiosity about the root cause of this is going to disappear in favor of ponying up for a more substantial piece of hardware... 


Thanks for your reply,

Lucas


From werner at thieprojects.ch  Sat Aug 24 13:14:15 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Sat, 24 Aug 2013 09:14:15 -1000
Subject: [Twisted-Python] Monitoring Application
In-Reply-To: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>
References: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>
Message-ID: <52190607.40604@thieprojects.ch>

On 8/24/13 5:41 AM, entrash hotmail wrote:
> Hello,
>
> just started using Twisted and don't know how to manage communications
> in a monitoring application I'm building for Windows environment.
>
> I'm building an application where various client machines will be
> receiving real-time updates on the status of multiple servers (CPU/RAM
> usage, tasks running, ...). Clients should also be able to send commands
> to server machines (Start/Stop task, Shut down, Reboot, ...)
>
> What protocol should I use? I managed to get something running from a
> simple Echo server sample, but I guess it's not the best curse of action
> as I could end up having 10 machines establishing a connection every few
> seconds to each of the 20 or so servers we have.
>
> Is there a sample of a similar setup I could follow?

Hi

In such situations I would have a go at it with twisted/spread. I don't 
have a sample for what you describe, but use spread for machine/process 
monitoring and control in a game server environment. (see thread on this 
list from some weeks ago)

Werner




From p.mayers at imperial.ac.uk  Sun Aug 25 05:00:45 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 25 Aug 2013 12:00:45 +0100
Subject: [Twisted-Python] Serial transport protocol logging on Raspberry
 Pi
In-Reply-To: <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>
References: <1056D3E3-3C3A-4C07-A292-3CB628A35335@gmail.com>
 <5217AFB0.3090000@imperial.ac.uk>
 <D00EB5B7-C70D-4A2B-8536-6FE03F043743@gmail.com>
Message-ID: <5219E3DD.6060708@imperial.ac.uk>

On 08/24/2013 06:37 PM, Lucas Taylor wrote:
>
> 9600bps, using USB-Serial adapters (tried 3 different supported
> chipsets). Logging to local storage and also to stdout.

But presumably stdout is going somewhere - either a local or network 
terminal or file redirect.

Could you try a simple RAM-based log observer ("append all log messages 
to python list")? Just out of curiosity ;o)

> At any rate, I don't think there is much to be done on the Twisted
> side. I have a few minor things left to try, but I have a feeling my
> curiosity about the root cause of this is going to disappear in favor
> of ponying up for a more substantial piece of hardware...

I hear good things about the beagleboard, but haven't used one myself.



From twisted at pivert.org  Sun Aug 25 05:58:21 2013
From: twisted at pivert.org (=?utf-8?Q?Fran=C3=A7ois?= Delpierre)
Date: Sun, 25 Aug 2013 13:58:21 +0200 (CEST)
Subject: [Twisted-Python] tac2deb
In-Reply-To: <1636447321.1191.1377429900724.JavaMail.zimbra@pivert.org>
Message-ID: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>

Hi, 

I'm having several problems with tac2deb: 


    * First, it seems that the documentation is wrong. Like described in: https://twistedmatrix.com/documents/current/core/howto/tutorial/configuration.html as any call to tap2deb as tap2deb --unsigned -m "Foo <foo at example.com>" --type=python finger.tac just ends with a /usr/bin/tap2deb: Wrong number of arguments. 
    * When using the -t option, it seems it works, but it always ends with this kind of error: 

dh_installdirs: No compatibility level specified in debian/compat dh_installdirs: This package will soon FTBFS; time to fix it! # Add here commands to install the package into debian/tmp. cp tap.py debian/tmp/etc/ cp: cannot create regular file `debian/tmp/etc/': No such file or directory make: *** [install-stamp] Error 1 dpkg-buildpackage: error: fakeroot debian/rules binary gave error exit status 2 

I tried to upgrade twisted to latest version (13.1), but it did not fix the problems. 

So, do we have a working example of using tap2deb with a recent twisted release (12-13)? 

Thanks, 

François Delpierre 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130825/d9003fc7/attachment-0002.html>

From lists at collab.nl  Sun Aug 25 09:51:05 2013
From: lists at collab.nl (Thijs Triemstra)
Date: Sun, 25 Aug 2013 17:51:05 +0200
Subject: [Twisted-Python] tac2deb
In-Reply-To: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>
References: <1248658716.1208.1377431901035.JavaMail.zimbra@pivert.org>
Message-ID: <521A27E9.6070605@collab.nl>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Francois,

I've been working on tap2deb fixes and test coverage, please check if
the branch on https://twistedmatrix.com/trac/ticket/5001 works for you.

Cheers,

Thijs

On 08/25/2013 01:58 PM, François Delpierre wrote:
> Hi,
> 
> I'm having several problems with tac2deb:
> 
> * First, it seems that the documentation 
> <http://twistedmatrix.com/documents/12.0.0/core/howto/tutorial/configuration.html>
>
> 
is wrong.
> Like described in:
> https://twistedmatrix.com/documents/current/core/howto/tutorial/configuration.html
> as any call to tap2deb as tap2deb --unsigned -m "Foo
> <foo at example.com>" --type=python finger.tac just ends with a
> /usr/bin/tap2deb: Wrong number of arguments. * When using the -t
> option, it seems it works, but it always ends with this kind of
> error:
> 
> dh_installdirs: No compatibility level specified in debian/compat 
> dh_installdirs: This package will soon FTBFS; time to fix it! # Add
> here commands to install the package into debian/tmp. cp tap.py
> debian/tmp/etc/ cp: cannot create regular file `debian/tmp/etc/':
> No such file or directory make: *** [install-stamp] Error 1 
> dpkg-buildpackage: error: fakeroot debian/rules binary gave error 
> exit status 2
> 
> 
> I tried to upgrade twisted to latest version (13.1), but it did not
> fix the problems.
> 
> So, do we have a working example of using tap2deb with a recent
> twisted release (12-13)?
> 
> Thanks,
> 
> François Delpierre
> 
> 
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iEYEARECAAYFAlIaJ+MACgkQBRbMGagbo3knFQCfc9dAHlb+sK+6rrDPZMhkB5t5
yLoAn1zBtOW4ESbEiP/CKlAD/Xv7JdwR
=g+6V
-----END PGP SIGNATURE-----



From entrash at hotmail.com  Sun Aug 25 13:07:39 2013
From: entrash at hotmail.com (entrash hotmail)
Date: Sun, 25 Aug 2013 21:07:39 +0200
Subject: [Twisted-Python] Monitoring Application
In-Reply-To: <52190607.40604@thieprojects.ch>
References: <DUB122-W11317A3C62C35339C4C9B3B84F0@phx.gbl>,
 <52190607.40604@thieprojects.ch>
Message-ID: <DUB122-W32C9E57F87AD68AD7F98F9B8480@phx.gbl>

Thanks for the pointer, seems that it can do what I need.

> Date: Sat, 24 Aug 2013 09:14:15 -1000
> From: werner at thieprojects.ch
> To: twisted-python at twistedmatrix.com
> Subject: Re: [Twisted-Python] Monitoring Application
> 
> On 8/24/13 5:41 AM, entrash hotmail wrote:
> > Hello,
> >
> > just started using Twisted and don't know how to manage communications
> > in a monitoring application I'm building for Windows environment.
> >
> > I'm building an application where various client machines will be
> > receiving real-time updates on the status of multiple servers (CPU/RAM
> > usage, tasks running, ...). Clients should also be able to send commands
> > to server machines (Start/Stop task, Shut down, Reboot, ...)
> >
> > What protocol should I use? I managed to get something running from a
> > simple Echo server sample, but I guess it's not the best curse of action
> > as I could end up having 10 machines establishing a connection every few
> > seconds to each of the 20 or so servers we have.
> >
> > Is there a sample of a similar setup I could follow?
> 
> Hi
> 
> In such situations I would have a go at it with twisted/spread. I don't 
> have a sample for what you describe, but use spread for machine/process 
> monitoring and control in a game server environment. (see thread on this 
> list from some weeks ago)
> 
> Werner
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130825/c584e8db/attachment-0002.html>

From terry at jon.es  Mon Aug 26 10:08:29 2013
From: terry at jon.es (Terry Jones)
Date: Mon, 26 Aug 2013 17:08:29 +0100
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
Message-ID: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>

This doesn't prove anything, but I think the first plot at
http://jakevdp.github.io/blog/2012/09/20/why-python-is-the-last/ is quite
provocative.

Semi-related: I made a tiny optimization to jQuery a couple of months ago
as a completely unknown first-time contributor. The time from doing the git
clone to having the pull request merged into jQuery master was about an
hour, which included signing their contributor agreement.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130826/ded2018c/attachment-0002.html>

From tobias.oberstein at tavendo.de  Mon Aug 26 10:24:16 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 26 Aug 2013 09:24:16 -0700
Subject: [Twisted-Python] Failure.getTraceback and Unicode
Message-ID: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>

Hi,

The code for "getTraceback"

http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L529

uses a native version of StringIO

http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L23

However, cStringIO:

"Unlike the StringIO<http://docs.python.org/2/library/stringio.html#module-StringIO> module, this module is not able to accept Unicode strings that cannot be encoded as plain ASCII strings."
http://docs.python.org/2/library/stringio.html#module-cStringIO

Above situation triggers an exception when the traceback includes non-ASCII Unicode strings:

"""
'unicode' does not have the buffer interface
"""

I have worked around this by implementing my own "getTraceback" that uses standard (non-native) StringIO. Works.

Should I file a bug?

/Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130826/f5ac6cdd/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Aug 26 10:43:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 26 Aug 2013 16:43:11 -0000
Subject: [Twisted-Python] Failure.getTraceback and Unicode
In-Reply-To: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20130826164311.26068.1702923771.divmod.xquotient.304@top>

On 04:24 pm, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>The code for "getTraceback"
>
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L529
>
>uses a native version of StringIO
>
>http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/python/failure.py#L23
>
>However, cStringIO:

`NativeStringIO` doesn't mean `cStringIO`.  On Python 2, it means 
`io.BytesIO` - which, as you observed, does not support unicode. :)
>
>Should I file a bug?

It seems unfortunate that trying to report an exception will fail 
because of encoding issues.  That seems like a bug worth fixing to me.

Jean-Paul



From m-lists at the-moon.net  Mon Aug 26 16:37:18 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 26 Aug 2013 23:37:18 +0100
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
Message-ID: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>

On 26/08/2013, Terry Jones <terry at jon.es> wrote:
> This doesn't prove anything, but I think the first plot at
> http://jakevdp.github.io/blog/2012/09/20/why-python-is-the-last/ is quite
> provocative.

Terry,

I don't think the problem is "too few contributors".

A big problem is that there are too few reviewers - especially while
Tom's away.

There are 52 branches currently awaiting review:
 * https://twistedmatrix.com/trac/report/15

Here are a few thoughts:

 1. Encourage new code reviewers -- various people have said they'd do
    code reviews but are unsure of the process or feel unqualified to
    comment on other people's code. So:

    1. Update the code review checklist
       * https://twistedmatrix.com/trac/wiki/CodeReview
       * https://www.ibm.com/developerworks/rational/library/11-proven-practices-for-peer-review/
         (via @zooko)
       * http://mumak.net/stuff/your-code-sucks.html

    2. Make the code review checklist and the highscores pages more
       prominent. Maybe via a new "Contribute" link on the top right
       of the homepage. (I think ashfall was working on a new wiki
       page for contributors).

    3. Less emphasis in report 15 on "By Order You Should Review Them
       In"
       * It's very difficult (for me at least) to review branches
         that I know nothing about.
       * Reviewers should be encouraged to review tickets for
         components that they are familiar with or tickets which they
         are interested in learning more about.
       * https://twistedmatrix.com/trac/report/15


 2. Encourage code review trading
    1. Contributors could be pointed to report 15 after submitting
       their patch or branch.
    2. Encourage contributors to make contact with another developer and
       agree to trade reviews.
    3. Modify report15 so that branches from contributors with highscores
       get moved higher up the list
       (http://twistedmatrix.com/highscores).


 3. Encourage self review -- It's frustrating when you come to review
    a patch and you have to point out obvious things. (merge
    conflicts, no tests, spelling mistakes, missing docstrings,
    missing documentation)

    1. Ask contributors to do a self review before submitting their
       patch or branch for peer review.

    2. Make it easier for contributors to run twistedchecker,
       pydoctor, pyflakes, lore locally before submitting code for
       review.

    3. Since buildbot is checking out code from Github now,
       perhaps there could be an interface for contributors to
       request it to build their own Github branch?

    4. Automatically detect merge conflicts in branches and patches
       awaiting review and notify the author.
       * This would prevent the frustrating situation of having waited
         for a month for a review only to have it pushed back to the
         bottom of the queue with a request to merge forward.


 4. Publicise upcoming features /  High priority tickets and branches

    1. For example, Twisted Web Sockets which people keep asking about
       on IRC.

    2. It's not obvious that there is a Web Sockets server branch
       which is almost ready to be
       merged. https://twistedmatrix.com/trac/ticket/4173

    3. It's been reviewed over ten times and is now back with therve
       who may or may not have time to address the latest code review
       comments.

    4. Maybe it would be nice to highlight tickets like this on the
       twistedmatrix.com front page. That might encourage new people
       to help push them through to completion.


> Semi-related: I made a tiny optimization to jQuery a couple of months ago
> as a completely unknown first-time contributor. The time from doing the git
> clone to having the pull request merged into jQuery master was about an
> hour, which included signing their contributor agreement.

You mean this one?
 * https://github.com/jquery/jquery/pull/1321

The turn-around time can be just as quick in Twisted. Here are a few
recent small changes that were merged within an hour or two:
 * https://twistedmatrix.com/trac/ticket/6674
 * https://twistedmatrix.com/trac/ticket/6525
 * https://twistedmatrix.com/trac/ticket/6403


One final thing. I hate to hear people beating up Trac. That article
follows the trend, stating that Github "replaced the clunky Trac
system of submitting static patches to projects". Well that's a gross
simplification. I for one am very fond of Trac. I find its UI
intuitive -- much more intuitive than Github, and from what I've seen
of the code it's quit well designed too. It's a flagship Python
application and we should be supporting it. It's just a shame it
wasn't built on top of Twisted.

Sorry for the long email.

-RichardW.



From mhumphrey at gmail.com  Mon Aug 26 21:06:03 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Mon, 26 Aug 2013 20:06:03 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
Message-ID: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>

I recently created a small automated, remote (via web) controlled pet
feeder using a Raspberry Pi single-board computer. The software is all in
Python, and uses the simple HTTP server that is part of the Python
libraries. I discovered Twisted about 2/3 of the way through the project,
and now that I am done I would like to port it to use Twisted. After
reading much of the documentation the Twisted web site, some aspects of
this are fairly obvious to me, while others are not. I could use some
advice on how best to design my app to fit in with the Twisted framework.

Here are the major components of the application:

1) A web site that hosts a combination of static content and some REST
APIs. REST apis are called from Javascript Ajax, and do things like
enable/disable the webcam, dispense a treat, etc. The static content
consists of a single HTML page, some javascript scripts, and a JPG that is
captured by #3 below.

2) A thread that runs a loop which manages the hardware. It does this with
a simple state machine composed of a base class and subclasses for all the
states that the hardware can be in (starting, idle, displaying status on
the lcd, dispensing a treat, recovering from treat dispense cycle, shutting
down). After initializing the hardware and the initial state, the thread
loops continuously calling a "timeTick" event to the current state. WIthin
the states, the code looks at various hardware status (like whether a
button is pressed) and decides to take action or to trigger transition to
another state.

3) A thread that runs continuously capturing images from a webcam. This
thread captures low resolution images continuously, and compares sucessive
frames to see if there is significant number of different pixels (motion
detect). If so, it captures a higher resolution image, updates a symbolic
link to point to the most recent image captured, and deletes any excessive
files from previous captures. The images captured for the motion detect are
handled by executing a process and capturing the stdout. The higher res
images captured by executing a process that writes directly to a file.

Porting #1 is very straightforward after going through the tutorial on
Twisted web. However, I am not sure how to handle #2 and #3. I would
appreciate some suggestions from those who are familiar with Twisted.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130826/9da2a403/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Aug 26 22:07:06 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 26 Aug 2013 21:07:06 -0700
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
	about Github,
	as all threads about fostering community now start on that subject)
In-Reply-To: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
Message-ID: <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>

On Aug 26, 2013, at 3:37 PM, Richard Wall <m-lists at the-moon.net> wrote:

> 1. Encourage new code reviewers -- various people have said they'd do
>    code reviews but are unsure of the process or feel unqualified to
>    comment on other people's code. So:

I find that there are three major impediments to encouraging new reviewers.

Most significantly, new reviewers do not actually know which code they can review.  New reviewers should be reviewing only patches by people who already have commit; otherwise, new contributors end up getting their code reviewed by another new contributor who might not know the ins and outs of the process.  In the best case they will get an incomplete review; in the worst case, they will be told "looks okay to me, merge" and then get kicked out of the review queue with no way to land it.

I think that's a fine rule, but it has one gigantic problem: we don't have a list of committers anywhere.  Making this list - and, critically, associating VCS handle (svn.twistedmatrix.com login) with Trac handle, for those cases where it differs - would really help new contributors figure out whether there's 

Best of all would be a separate report, "Review Tickets Submitted By Committers", which would be things that external contributors could review.  Of course, lots of these will be very confusing-looking to someone new to the Twisted codebase, but it's easy enough for people to skip things they don't understand :).

New reviewers don't know that it's OK to make a mistake.  So first let me say: it's okay to make a mistake.  Not every review is perfect.  If you missed something significant, there are several filters to catch problematic reviews.

First, if you're really new, and you're reviewing something for a committer, then it's their responsibility to make sure your review looks thorough enough.  They can always put it back into review if they think you *might* have missed something.  This is not a failure!  This means you got some valuable practice and feedback.

Second, plenty of people watch trunk commits.  If a dodgy commit gets through, someone will generally notice and revert it.  If you feel like your review needs a second look, feel free to pipe up in #twisted-dev on IRC and say "would someone please have another look at this just to make sure".

Third, this is why we have the pre-release cycle: it's a final chance for everybody with Twisted applications to make sure that nothing broke anything.

We don't have any mentorship in place; even with a comprehensive checklist, it can be intimidating to try to do a code review.  Really, we should set up a mentorship program where mentors do code reviews with people watching.  Unfortunately, our existing reviewers are generally overtaxed as it is, so for now it falls to (brave) newbies to ask for mentoring help.

I feel like if someone could hack up a Trac report, or an extension to the high scores page, that addressed the first point, it would be a lot easier to deal with the second and third ones.  So, if anyone reading this would like to do that, I would be forever in  your debt.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130826/9b1153f4/attachment-0002.html>

From _ at lvh.io  Tue Aug 27 03:44:22 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 11:44:22 +0200
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
 about Github,
 as all threads about fostering community now start on that subject)
In-Reply-To: <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
Message-ID: <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>

On Tue, Aug 27, 2013 at 6:07 AM, Glyph <glyph at twistedmatrix.com> wrote:

> I think that's a fine rule, but it has one gigantic problem: we don't have
> a list of committers anywhere.  Making this list - and, critically,
> associating VCS handle (svn.twistedmatrix.com login) with Trac handle,
> for those cases where it differs - would really help new contributors
> figure out whether there's
>

You got cut off here.


> I feel like if someone could hack up a Trac report, or an extension to the
> high scores page, that addressed the first point, it would be a lot easier
> to deal with the second and third ones.  So, if anyone reading this would
> like to do that, I would be forever in  your debt.
>

What would be the extension to the score board?

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/b413be81/attachment-0002.html>

From _ at lvh.io  Tue Aug 27 03:54:35 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 11:54:35 +0200
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
Message-ID: <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>

IIUC, Tom does most of his contributing through Github. That probably means
that it's a well-supported process that has most of the kinks ironed out:
after all, if Tom hasn't caught them, I would guess a new contributor
probably wouldn't either :-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/bc550a12/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Aug 27 06:14:11 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 27 Aug 2013 12:14:11 -0000
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
Message-ID: <20130827121411.26068.1094379411.divmod.xquotient.312@top>

On 09:54 am, _ at lvh.io wrote:
>IIUC, Tom does most of his contributing through Github. That probably 
>means
>that it's a well-supported process that has most of the kinks ironed 
>out:
>after all, if Tom hasn't caught them, I would guess a new contributor
>probably wouldn't either :-)

Or it means Tom's workflow is fine and he's learned all the issues he 
needs to avoid tripping over.

You didn't quote anything in the message you replied to, so I'll just 
guess that this is an email meant as a "+1 please switch to github". 
Please correct that impression if it is mistaken.

If it is not mistaken, then please let this sub-thread of the discussion 
die right here (reasons for doing so already given in near countless 
previous threads).  The ideas suggested elsewhere for encouraging more 
reviewers and other contributions seem more likely to bear fruit.  Let's 
follow through on those.

Thanks,
Jean-Paul



From _ at lvh.io  Tue Aug 27 07:06:46 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 27 Aug 2013 15:06:46 +0200
Subject: [Twisted-Python] Interesting plot on new author contributions
 post-Github for several Python packages
In-Reply-To: <20130827121411.26068.1094379411.divmod.xquotient.312@top>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <CAE_Hg6YnG9pM7+ogik5DHKQi+QKHLW40h06YnhLAgLM9gqD7wg@mail.gmail.com>
 <20130827121411.26068.1094379411.divmod.xquotient.312@top>
Message-ID: <CAE_Hg6Yqgmnc0FFGRuyD7fY1hWsrDciaurKS4uOSQeQ=Y7aJmg@mail.gmail.com>

On Tue, Aug 27, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:

> On 09:54 am, _ at lvh.io wrote:
>
>> IIUC, Tom does most of his contributing through Github. That probably
>> means
>> that it's a well-supported process that has most of the kinks ironed out:
>> after all, if Tom hasn't caught them, I would guess a new contributor
>> probably wouldn't either :-)
>>
>
> Or it means Tom's workflow is fine and he's learned all the issues he
> needs to avoid tripping over.
>

That sounds like what I mean. I don't understand the difference. I am
saying that Tom's workflow is fine and knows where the hard parts are.
Also, given the amount of time that he (usually) gets to spend on Twisted
and his responsiveness on the IRC channel, I think it counts as
"well-supported".


> You didn't quote anything in the message you replied to, so I'll just
> guess that this is an email meant as a "+1 please switch to github". Please
> correct that impression if it is mistaken.
>

No. I am suggesting that there is a way to contribute using Github that
isn't totally broken, and someone has already figured out what that way is,
and that someone is in a position to explain it to others. I'm saying we
don't need to switch to github, because apparently you can already use
github if you want to, everything else staying the same.

It's possible that this way of using github does not please the would-be
new reviewers sufficiently, but I'm saying that if someone suggests we move
to github, I'd like to make it clear to them that you can already use
github, and that they should probably at least formulate their arguments in
the shape of "the current way that I can use github is bad because ..." :)

Thanks,
> Jean-Paul


cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/34f18b0d/attachment-0002.html>

From haggardii at gmail.com  Tue Aug 27 10:31:24 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 27 Aug 2013 10:31:24 -0600
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
References: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
Message-ID: <CAL+xXwOxKQN2_iOHq=dFSGbi9RVY-imZtVsi4N762Hs3e-uWFw@mail.gmail.com>

On Mon, Aug 26, 2013 at 9:06 PM, Matthew Humphrey <mhumphrey at gmail.com> wrote:
> 2) A thread that runs a loop which manages the hardware. It does this with a
> simple state machine composed of a base class and subclasses for all the
> states that the hardware can be in (starting, idle, displaying status on the
> lcd, dispensing a treat, recovering from treat dispense cycle, shutting
> down). After initializing the hardware and the initial state, the thread
> loops continuously calling a "timeTick" event to the current state. WIthin
> the states, the code looks at various hardware status (like whether a button
> is pressed) and decides to take action or to trigger transition to another
> state.

I am not familiar with how you communicate with hardware on a
Raspberry PI.  Can you link to your existing code?  In my brief
reading this morning, I'm guessing you might be using the RPi.GPIO
library?  If so, I'm looking at
https://code.google.com/p/raspberry-gpio-python/wiki/Inputs which
indicates that wait_for_edge() or event_detected() might be useful
(instead of a "continuously called a 'timeTick' event").  But I'm not
sure what thread the callbacks to those functions are called in.

I've also come across
https://www.kernel.org/doc/Documentation/gpio.txt which makes me think
it would be possible to register the GPIO events with the Twisted
reactor (but I've never done that and don't have a Pi to test with).
Perhaps it's time to buy one.

> 3) A thread that runs continuously capturing images from a webcam. This
> thread captures low resolution images continuously, and compares sucessive
> frames to see if there is significant number of different pixels (motion
> detect). If so, it captures a higher resolution image, updates a symbolic
> link to point to the most recent image captured, and deletes any excessive
> files from previous captures. The images captured for the motion detect are
> handled by executing a process and capturing the stdout. The higher res
> images captured by executing a process that writes directly to a file.

Someone with more intelligence than me should answer this, but here's
my attempt:

You can do this without threads since you're just spawning processes
for the image captures.  I'm assuming you only want to capture as many
low res images as you can process. Here's one way to do it:

from twisted.internet import reactor, task, defer
from twisted.internet.utils import getProcessOutput
from twisted.python import log
from twisted.python.filepath import FilePath


class ImageCapturer:

    lowres_args = ('/path/to/lowres_args',)
    highres_args = ('/path/to/highres_args', ['/path/to/outpufile'])

    def __init__(self):
        self._last_image = None


    def getLowResImage(self):
        return getProcessOutput(*self.lowres_args)


    def getHighResImage(self):
        log.msg('getting high res image')
        d = getProcessOutput(*self.highres_args)
        d.addCallback(log.msg)
        return d


    def start(self):
        self.doCycle()


    def doCycle(self):
        d = self.getLowResImage()
        d.addCallback(self.processLowResImage)
        d.addCallback(self.finishCycle)
        return d


    def finishCycle(self, _ignored):
        self.doCycle()


    def processLowResImage(self, image):
        if self._last_image:
            if self.isDifferentEnough(self._last_image, image):
                # if it's bad for the lowres script and the highres script
                # to run at the same time, you may want to wait for the high
                # res script to finish (this code doesn't do that).
                self.getHighResImage()

        self._last_image = image


    def isDifferentEnough(self, image1, image2):
        """
        Compare the two images for differences.  Return True if it warrents
        a high res capture.

        If this is a long-running function, you could send it off to a thread
        with deferToThread.
        """
        return image1 != image2

def example(reactor):
    # for example
    capturer = ImageCapturer()

    # since I don't have an image capture script, I'll just list a directory.
    # low res directory capture :)
    capturer.lowres_args = ('/bin/ls', ['/tmp/'])

    # high res directory capture :)
    capturer.highres_args = ('/bin/ls', ['-al', '/tmp/'])
    capturer.start()

    # add and remove a file
    tmpfile = FilePath('/tmp/foo')
    reactor.callLater(1, tmpfile.setContent, 'foo')
    reactor.callLater(2, tmpfile.remove)
    return task.deferLater(reactor, 10, lambda:None)

if __name__ == '__main__':
    import sys
    log.startLogging(sys.stdout)
    task.react(example)



From haggardii at gmail.com  Tue Aug 27 17:40:42 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 27 Aug 2013 17:40:42 -0600
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
 <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
Message-ID: <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>

Senthil,

Thanks!  I don't think I realized Dave Peticola was the author of the
krondo series.  His series is great for learning how Twisted (and
asynchronous programming) works, but I've had mixed reviews from
newbies I've sent there -- mostly because they didn't know why they
would want to use Twisted.  They lacked the motivation to actually go
through the series.  With TwistedFTW I hope to get them excited enough
that when they're sent to his series they'll devour it.

Up to six articles now: http://iffy.github.io/twistedftw/

Matt

On Fri, Aug 23, 2013 at 8:10 PM, Senthil Kumaran <senthil at uthcode.com> wrote:
> Hi Matt,
>
> On Fri, Aug 23, 2013 at 3:31 PM, Matt Haggard <haggardii at gmail.com> wrote:
>>
>> Thanks for positive response, everyone!
>>
>> There are now two legitimate articles (yeah, they're small)
>> iffy.github.io/twistedftw
>
>
> This is great. It will be appealing to new audience, who value UI design
> highly.
>
> I hope you have come across Dave Peticola's twisted introduction. With those
> docs, I think, this "house for sale"  story could have been a  "disneyland
> trip".
> :-)
>
> --
> Senthil
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From z858570636 at gmail.com  Tue Aug 27 22:18:43 2013
From: z858570636 at gmail.com (yuyan zhang)
Date: Wed, 28 Aug 2013 12:18:43 +0800
Subject: [Twisted-Python] The tcp connection can't stop
Message-ID: <CA+ggLO+n3n9rCb3T69ABTU-9iXOA6=3OYGPYaR4TMWysoQfHNg@mail.gmail.com>

     I'm want to get the information of  25(smtp) port in the target ip ,so
i write the script smtp.py,and the mx.short.txt is the target ip list.You
can run the script like this :python smtp.py(the smtp.py and mx.short.txt
are in  the same directory).Then I find this script is  can't stop.
     Can you help me solution this problem?It's had troubled me about one
month.Grateful!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/916c24ac/attachment-0002.html>
-------------- next part --------------
203.188.197.111	     	
220.181.14.132 	     	
220.181.14.131 	     	
220.181.14.133 	     	
220.181.14.134 	     	
163.177.65.211 	     	
123.125.50.139 	     	
123.125.50.140 	     	
61.135.181.94  	     	
211.150.64.49  	     	
211.150.74.49  	     	
220.181.26.202 	     	
61.135.132.100 	     	
220.181.14.136 	     	
220.181.14.137 	     	
123.125.50.119 	     	
123.125.50.118 	     	
220.181.14.140 	     	
220.181.14.141 	     	
220.181.14.142 	     	
220.181.14.139 	     	
220.181.14.135 	     	
220.181.14.143 	     	
220.181.14.138 	     	
220.181.14.163 	     	
220.181.14.148 	     	
220.181.14.162 	     	
220.181.14.156 	     	
220.181.14.159 	     	
220.181.14.164 	     	
220.181.14.161 	     	
202.108.3.190  	     	
220.181.14.144 	     	
61.135.132.112 	     	
220.181.14.158 	     	
220.181.14.160 	     	
220.181.14.157 	     	
183.60.62.12   	     	
220.181.14.147 	     	
220.181.14.146 	     	
220.181.14.155 	     	
220.181.14.150 	     	
220.181.14.149 	     	
60.28.2.175    	     	
220.181.14.154 	     	
220.181.14.145 	     	
211.150.72.49  	     	
112.90.137.120 	     	
58.250.132.64  	     	
183.60.61.225  	     	
112.95.241.138 	     	
42.121.103.105 	     	
119.147.192.101	     	
59.36.102.50   	     	
59.36.102.51   	     	
113.108.18.210 	     	
113.108.64.240 	     	
119.147.6.81   	     	
202.108.35.225 	     	
183.62.125.200 	     	
113.108.77.23  	     	
119.147.192.199	     	
183.62.125.223 	     	
183.62.125.199 	     	
202.123.98.10  	     	
112.90.142.55  	     	
74.125.133.26  	     	
74.125.133.27  	     	
42.121.103.108 	     	
203.209.250.146	     	
192.168.95.236 	     	
121.14.53.136  	     	
202.108.3.153  	     	
123.125.50.213 	     	
211.150.64.59  	     	
139.175.54.239 	     	
123.125.50.214 	     	
123.125.50.217 	     	
202.108.255.210	     	
42.121.103.104 	     	
74.125.134.26  	     	
74.125.134.27  	     	
112.95.241.32  	     	
211.150.64.209 	     	
10.54.5.184    	     	
121.14.6.203   	     	
10.54.5.212    	     	
202.108.5.185  	     	
10.54.5.211    	     	
221.176.9.178  	     	
113.108.225.10 	     	
121.14.129.73  	     	
113.108.225.9  	     	
173.194.79.26  	     	
121.14.129.75  	     	
74.125.25.26   	     	
10.54.5.213    	     	
61.135.129.15  	     	
74.125.129.26  	     	
61.135.132.71  	     	
173.194.74.27  	     	
173.194.74.26  	     	
159.226.251.12 	     	
173.194.79.27  	     	
74.125.129.27  	     	
74.125.25.27   	     	
173.194.73.26  	     	
10.54.5.172    	     	
60.28.2.248    	     	
10.54.5.171    	     	
10.54.5.173    	     	
220.181.97.145 	     	
173.194.73.27  	     	
10.54.5.186    	     	
10.54.5.174    	     	
10.54.5.185    	     	
123.125.50.132 	     	
123.125.50.135 	     	
123.125.50.138 	     	
220.181.97.147 	     	
220.181.97.146 	     	
123.125.50.134 	     	
123.125.50.133 	     	
113.108.212.78 	     	
121.14.26.25   	     	
220.181.26.195 	     	
61.145.121.80  	     	
61.145.121.82  	     	
60.28.2.177    	     	
61.145.121.60  	     	
202.142.16.131 	     	
123.125.50.110 	     	
123.125.50.111 	     	
123.125.50.112 	     	
219.142.78.189 	     	
123.58.178.224 	     	
202.108.3.154  	     	
123.58.178.225 	     	
61.135.132.99  	     	
123.58.178.226 	     	
61.50.161.42   	     	
61.50.161.36   	     	
202.96.74.67   	     	
61.152.74.37   	     	
61.135.132.86  	     	
121.14.53.133  	     	
121.14.7.203   	     	
123.58.177.169 	     	
123.58.177.168 	     	
211.150.74.59  	     	
123.58.177.170 	     	
218.1.66.97    	     	
74.125.141.27  	     	
74.125.141.26  	     	
60.191.88.145  	     	
64.71.138.90   	     	
218.30.115.106 	     	
123.125.51.77  	     	
64.71.138.53   	     	
123.58.178.52  	     	
123.125.51.76  	     	
65.55.37.88    	     	
209.181.247.105	     	
65.55.37.104   	     	
123.58.178.203 	     	
220.181.26.14  	     	
123.58.178.60  	     	
123.58.178.204 	     	
123.58.178.105 	     	
202.108.3.193  	     	
65.55.37.72    	     	
65.55.37.120   	     	
65.54.188.94   	     	
58.250.132.68  	     	
65.54.188.72   	     	
65.55.92.184   	     	
65.54.188.110  	     	
61.135.158.109 	     	
65.55.92.168   	     	
65.55.92.136   	     	
123.58.178.51  	     	
65.55.92.152   	     	
65.54.188.126  	     	
61.135.132.154 	     	
61.136.58.184  	     	
211.100.41.112 	     	
211.100.41.121 	     	
202.165.102.205	     	
113.108.16.119 	     	
59.36.102.10   	     	
120.198.189.122	     	
220.181.12.13  	     	
220.181.12.11  	     	
220.181.12.15  	     	
218.1.66.91    	     	
220.181.15.111 	     	
220.181.15.112 	     	
220.181.12.14  	     	
220.181.12.12  	     	
220.181.12.18  	     	
220.181.15.114 	     	
220.181.12.17  	     	
60.191.88.156  	     	
220.181.12.16  	     	
10.54.5.142    	     	
113.108.225.7  	     	
203.69.82.2    	     	
113.108.225.8  	     	
118.145.23.137 	     	
220.181.15.113 	     	
211.100.47.36  	     	
218.57.22.44   	     	
61.128.99.61   	     	
64.18.6.10     	     	
59.151.125.157 	     	
220.181.97.136 	     	
220.181.97.134 	     	
220.181.97.135 	     	
216.163.188.57 	     	
38.113.116.194 	     	
121.14.7.199   	     	
64.191.223.42  	     	
119.145.14.94  	     	
211.100.21.180 	     	
114.247.0.100  	     	
66.196.118.33  	     	
66.196.118.34  	     	
66.196.118.37  	     	
98.136.217.202 	     	
98.136.216.26  	     	
202.108.255.224	     	
66.196.118.240 	     	
98.136.216.25  	     	
66.196.118.36  	     	
98.136.217.203 	     	
60.247.127.5   	     	
123.58.177.56  	     	
119.254.72.227 	     	
98.138.112.35  	     	
98.138.112.37  	     	
66.196.118.35  	     	
98.138.112.33  	     	
121.14.6.199   	     	
211.100.40.83  	     	
64.18.7.10     	     	
218.30.115.251 	     	
203.133.1.168  	     	
123.58.177.55  	     	
59.36.102.37   	     	
211.144.154.123	     	
113.108.212.80 	     	
98.138.112.34  	     	
98.138.112.32  	     	
98.138.112.38  	     	
74.125.148.10  	        	
64.18.4.10     	        	
202.108.3.203  	        	
61.136.62.79   	        	
74.125.137.27  	        	
202.105.134.117	        	
220.181.142.54 	        	
121.14.53.134  	        	
211.151.181.99 	        	
74.125.137.26  	        	
118.67.124.10  	        	
121.14.53.135  	        	
70.32.95.216   	        	
123.196.112.165	        	
211.100.21.184 	        	
211.20.188.150 	        	
114.247.0.97   	        	
202.105.134.119	        	
202.69.19.61   	        	
60.28.228.237  	        	
211.151.181.97 	        	
206.165.76.159 	        	
119.145.255.82 	        	
72.167.238.201 	        	
199.168.90.60  	        	
64.18.5.10     	        	
123.125.50.212 	        	
106.10.166.54  	        	
203.69.79.245  	        	
123.125.50.156 	        	
202.69.19.217  	        	
202.69.18.86   	        	
106.10.166.52  	        	
202.96.74.69   	        	
123.125.50.211 	        	
116.58.220.18  	        	
123.125.50.210 	        	
118.194.32.121 	        	
74.125.140.26  	        	
202.96.154.167 	        	
58.53.208.50   	        	
163.177.65.157 	        	
121.14.26.22   	        	
121.14.26.21   	        	
10.54.5.149    	        	
121.14.57.151  	        	
202.165.103.162	        	
61.135.132.140 	        	
121.14.57.159  	        	
121.14.26.23   	        	
64.71.138.85   	        	
202.108.145.47 	        	
94.100.177.1   	        	
123.100.7.71   	        	
64.71.138.86   	        	
121.14.129.71  	        	
121.14.57.160  	        	
121.14.129.72  	        	
64.71.138.87   	        	
125.35.5.132   	        	
219.142.78.190 	        	
98.129.184.131 	        	
123.58.177.181 	        	
74.125.140.27  	        	
123.58.177.180 	        	
216.163.188.58 	        	
123.58.178.201 	        	
123.58.178.202 	        	
210.82.57.35   	        	
211.100.40.174 	        	
202.108.67.232 	        	
207.126.147.10 	        	
220.181.130.176	        	
202.108.35.196 	        	
118.244.204.95 	        	
115.124.18.140 	        	
211.150.72.22  	        	
180.153.98.138 	        	
118.144.65.215 	        	
123.58.177.131 	        	
123.58.177.132 	        	
113.105.168.9  	        	
221.176.9.170  	        	
113.105.168.8  	        	
64.18.6.11     	        	
202.69.19.68   	        	
118.144.65.216 	        	
119.254.72.226 	        	
68.142.202.129 	        	
218.107.133.7  	        	
64.18.6.14     	        	
74.6.140.31    	        	
211.100.61.209 	        	
64.18.6.13     	        	
150.70.74.47   	        	
119.254.72.174 	        	
118.145.6.10   	        	
211.100.21.186 	        	
113.108.219.38 	        	
61.145.121.45  	        	
85.115.54.190  	        	
61.144.222.3   	        	
220.181.130.179	        	
61.145.121.43  	        	
125.35.4.85    	        	
211.100.61.208 	        	
61.145.121.75  	        	
220.181.130.172	        	
114.247.63.5   	        	
42.121.103.101 	        	
64.18.7.14     	        	
64.18.7.11     	        	
208.87.233.190 	        	
74.125.148.11  	        	
223.252.192.11 	        	
64.18.7.13     	        	
211.100.21.185 	        	
65.55.96.11    	        	
106.10.167.112 	        	
74.125.148.14  	        	
123.58.178.53  	        	
65.55.162.200  	        	
74.125.148.13  	        	
222.141.219.243	        	
64.18.4.14     	        	
64.18.4.11     	        	
123.58.178.59  	        	
64.18.4.13     	        	
121.14.129.34  	        	
218.204.255.116	        	
218.85.138.237 	        	
85.115.52.190  	        	
106.10.167.87  	        	
123.58.177.199 	        	
202.103.147.169	        	
123.58.178.124 	        	
216.200.145.235	        	
38.113.116.213 	        	
117.79.226.67  	        	
168.95.6.69    	        	
119.254.72.168 	        	
61.145.126.68  	        	
218.107.216.147	        	
218.107.63.213 	        	
218.107.63.214 	        	
72.167.238.29  	        	
173.194.76.27  	        	
202.96.171.125 	        	
216.163.188.54 	        	
61.135.152.205 	        	
218.78.214.57  	        	
54.248.217.80  	        	
211.100.21.182 	        	
118.244.235.30 	        	
42.121.103.100 	        	
38.113.116.218 	        	
211.100.21.183 	        	
211.157.0.7    	        	
116.213.70.115 	        	
122.225.97.245 	        	
85.115.60.190  	        	
220.181.130.173	        	
218.83.154.210 	        	
117.21.182.8   	        	
220.181.130.174	        	
117.121.30.32  	        	
208.87.234.190 	        	
114.247.63.6   	        	
98.136.217.192 	        	
216.32.180.190 	        	
59.40.182.169  	        	
216.69.186.201 	        	
211.100.21.181 	        	
168.95.6.70    	        	
64.191.223.39  	        	
210.71.187.212 	        	
119.254.72.162 	        	
60.247.104.230 	        	
168.95.6.68    	        	
119.254.72.144 	        	
207.46.163.30  	        	
173.194.76.26  	        	
206.165.76.160 	        	
220.181.26.193 	        	
123.100.1.139  	        	
206.165.76.161 	        	
118.194.32.67  	        	
98.138.206.39  	        	
122.225.97.227 	        	
206.165.76.158 	        	
202.104.30.99  	        	
216.32.181.178 	        	
208.65.144.12  	        	
114.251.253.227	        	
218.107.207.199	        	
74.125.131.27  	        	
218.77.130.133 	        	
180.153.98.132 	        	
202.103.147.162	        	
213.199.154.190	        	
125.88.6.222   	        	
168.95.6.53    	        	
219.143.213.7  	        	
219.151.9.152  	        	
208.65.145.12  	        	
168.95.6.52    	        	
173.203.2.32   	        	
74.125.131.26  	        	
168.95.6.61    	        	
123.58.178.125 	        	
64.18.5.11     	        	
168.95.6.67    	        	
219.143.202.166	        	
64.18.5.13     	        	
61.135.132.108 	        	
168.95.6.56    	        	
32.97.110.149  	        	
218.107.216.157	        	
220.181.130.177	        	
168.95.6.54    	        	
219.141.231.133	        	
220.112.47.149 	        	
119.254.72.164 	        	
114.251.217.10 	        	
168.95.6.57    	        	
64.18.5.14     	        	
61.146.178.233 	        	
113.108.225.5  	        	
32.97.182.141  	        	
203.158.21.1   	        	
113.108.225.6  	        	
61.128.128.115 	        	
219.133.59.236 	        	
123.124.208.100	        	
168.95.6.55    	        	
119.254.72.165 	        	
219.239.227.27 	        	
65.54.188.78   	        	
119.254.72.169 	        	
119.254.72.176 	        	
65.54.188.109  	        	
208.87.35.103  	        	
61.146.178.231 	        	
168.95.6.58    	        	
61.144.209.199 	        	
61.50.161.38   	        	
211.100.61.221 	        	
210.77.176.60  	        	
216.32.180.22  	        	
211.151.65.104 	        	
119.254.72.150 	        	
65.55.88.22    	        	
61.135.214.242 	        	
64.235.150.197 	        	
173.194.75.26  	        	
168.95.6.51    	        	
64.235.154.66  	        	
221.5.100.20   	        	
61.144.248.72  	        	
210.172.144.10 	        	
98.139.212.40  	        	
206.188.198.64 	        	
199.231.85.98  	        	
222.76.210.75  	        	
220.181.130.178	        	
119.254.72.160 	        	
168.95.6.62    	        	
119.254.72.170 	        	
60.191.40.107  	        	
202.141.160.8  	        	
211.94.93.140  	        	
211.152.37.206 	        	
123.100.7.68   	        	
168.95.6.64    	        	
119.254.72.161 	        	
218.107.216.149	        	
54.249.244.105 	        	
119.254.70.110 	        	
211.152.37.205 	        	
61.153.52.130  	        	
121.14.2.35    	        	
74.125.142.26  	        	
168.95.6.59    	        	
207.126.147.12 	        	
210.72.21.22   	        	
202.101.184.123	        	
211.157.0.4    	        	
173.194.75.27  	        	
123.100.1.135  	        	
117.53.114.15  	        	
219.135.157.151	        	
221.10.254.230 	        	
122.11.34.61   	        	
119.254.72.173 	        	
74.125.142.27  	        	
32.97.182.145  	        	
113.108.16.115 	        	
32.97.110.153  	        	
202.108.255.249	        	
32.97.182.143  	        	
211.136.253.190	        	
168.95.6.60    	        	
74.125.244.10  	        	
61.135.154.182 	        	
168.95.6.66    	        	
32.97.110.152  	        	
125.77.194.244 	        	
188.125.69.79  	        	
85.115.58.190  	        	
207.126.147.13 	        	
202.108.196.162	        	
119.254.72.148 	        	
77.238.177.9   	        	
207.126.147.14 	        	
188.125.69.78  	        	
168.95.6.65    	        	
202.108.57.114 	        	
118.244.204.109	        	
61.139.126.30  	        	
85.115.56.190  	        	
61.182.202.197 	        	
211.100.30.181 	        	
219.142.91.4   	        	
125.93.51.58   	        	
61.142.15.58   	        	
220.180.211.233	        	
98.136.185.211 	        	
119.254.72.159 	        	
32.97.182.144  	        	
202.103.147.161	        	
202.108.57.113 	        	
115.238.177.98 	        	
218.83.154.197 	        	
119.254.72.166 	        	
58.254.220.58  	        	
121.0.29.147   	        	
203.69.82.34   	        	
216.82.251.230 	        	
32.97.182.146  	        	
207.198.106.56 	        	
121.0.29.128   	        	
60.247.40.10   	        	
210.252.4.194  	        	
60.28.251.211  	        	
98.138.84.158  	        	
168.95.6.63    	        	
202.106.180.37 	        	
211.151.91.5   	        	
123.58.178.11  	        	
208.65.145.2   	        	
61.144.209.201 	        	
74.208.5.4     	        	
219.232.50.49  	        	
202.188.0.213  	        	
61.142.83.58   	        	
180.235.66.108 	        	
222.73.27.148  	        	
124.172.244.204	        	
61.152.91.52   	        	
119.254.72.179 	        	
119.254.72.157 	        	
119.254.72.147 	        	
211.95.77.39   	        	
67.231.144.184 	        	
202.108.255.246	        	
208.65.144.2   	        	
219.133.104.136	        	
222.73.173.98  	        	
119.205.212.220	        	
212.82.111.207 	        	
123.58.178.12  	        	
58.246.136.41  	        	
202.152.190.22 	        	
59.151.19.161  	        	
218.5.66.34    	        	
124.42.35.6    	        	
119.254.72.146 	        	
219.142.61.17  	        	
60.28.228.236  	        	
180.235.66.103 	        	
113.108.11.188 	        	
202.198.16.56  	        	
61.141.193.178 	        	
143.215.130.225	        	
114.80.210.69  	        	
202.96.11.69   	        	
203.188.201.253	        	
119.254.72.158 	        	
59.38.124.4    	        	
202.103.147.172	        	
118.145.2.158  	        	
12.233.228.10  	        	
119.254.72.152 	        	
119.254.72.236 	        	
114.251.228.216	        	
65.55.172.254  	        	
173.194.68.27  	        	
176.34.55.247  	        	
203.158.21.3   	        	
119.254.72.153 	        	
119.254.72.156 	        	
213.199.180.150	        	
119.254.72.155 	        	
119.254.72.149 	        	
218.16.124.66  	        	
218.104.28.38  	        	
67.231.152.184 	        	
211.100.47.38  	        	
94.100.176.20  	        	
210.242.46.179 	        	
119.254.72.151 	        	
58.68.145.89   	        	
119.254.72.180 	        	
119.254.72.145 	        	
219.142.78.250 	        	
173.194.68.26  	        	
175.102.6.141  	        	
218.85.138.54  	        	
218.30.85.220  	        	
219.151.9.153  	        	
5.10.67.27     	        	
118.145.5.6    	        	
74.125.133.14  	        	
123.100.1.214  	        	
202.112.26.50  	        	
61.144.235.4   	        	
66.36.236.47   	        	
210.83.25.69   	        	
116.228.52.134 	        	
58.61.142.13   	        	
118.244.194.3  	        	
118.244.154.41 	        	
118.145.5.10   	        	
118.145.5.12   	        	
74.208.5.27    	        	
119.254.72.175 	        	
119.120.94.65  	        	
203.118.250.45 	        	
114.247.160.228	        	
220.181.50.208 	        	
211.151.190.204	        	
118.145.2.185  	        	
123.100.1.212  	        	
17.151.224.10  	        	
202.99.20.231  	        	
202.96.122.91  	        	
218.85.138.52  	        	
211.100.47.39  	        	
221.204.249.137	        	
219.142.78.19  	        	
202.108.67.233 	        	
116.50.57.190  	        	
119.254.72.171 	        	
203.69.82.35   	        	
10.54.5.146    	        	
118.145.5.14   	        	
180.168.48.118 	        	
121.14.7.251   	        	
61.139.126.86  	        	
123.100.1.213  	        	
180.235.66.107 	        	
218.213.85.200 	        	
222.76.216.170 	        	
203.69.82.11   	        	
211.100.21.187 	        	
32.97.110.151  	        	
114.251.126.131	        	
218.107.207.116	        	
74.125.129.14  	        	
211.100.30.196 	        	
219.141.239.161	        	
210.74.107.1   	        	
118.244.234.106	        	
10.54.5.147    	        	
120.31.134.234 	        	
203.88.192.173 	        	
220.181.130.175	        	
163.177.76.251 	        	
218.85.138.186 	        	
119.254.72.154 	        	
59.38.124.16   	        	
218.107.207.73 	        	
123.100.1.211  	        	
124.172.244.202	        	
113.98.240.68  	        	
202.108.86.193 	        	
64.12.90.97    	        	
117.27.141.169 	        	
118.145.2.198  	        	
222.240.233.72 	        	
118.145.2.221  	        	
211.155.224.174	        	
118.244.194.11 	        	
124.127.106.3  	        	
64.191.223.38  	        	
218.5.77.18    	        	
118.145.2.150  	        	
222.66.26.11   	        	
180.235.66.102 	        	
119.254.72.172 	        	
211.154.136.149	        	
211.144.215.30 	        	
61.152.188.131 	        	
203.88.192.172 	        	
173.194.79.14  	        	
218.107.63.211 	        	
218.107.63.212 	        	
208.65.144.13  	        	
202.123.98.75  	        	
32.97.182.142  	        	
222.73.234.229 	        	
42.121.103.107 	        	
61.130.112.170 	        	
208.65.145.13  	        	
117.27.151.74  	        	
195.22.26.230  	        	
60.191.40.106  	        	
221.0.174.132  	        	
221.133.241.2  	        	
211.100.41.111 	        	
203.88.192.163 	        	
202.108.220.203	        	
202.207.177.2  	        	
113.105.139.88 	        	
202.96.17.48   	        	
89.104.217.10  	        	
211.88.2.46    	        	
74.125.134.14  	        	
202.99.64.72   	        	
119.147.192.210	        	
119.254.72.141 	        	
59.108.65.195  	        	
222.73.234.236 	        	
211.152.42.201 	        	
125.77.194.236 	        	
203.88.192.175 	        	
125.35.21.23   	        	
118.145.5.8    	        	
202.104.245.181	        	
221.192.237.139	        	
218.5.76.10    	        	
220.181.180.244	        	
218.85.139.208 	        	
61.139.126.68  	        	
166.111.204.8  	        	
208.43.37.100  	        	
210.51.180.141 	        	
202.102.197.123	        	
119.147.86.199 	        	
218.85.138.10  	        	
61.153.17.97   	        	
218.85.138.50  	        	
59.38.124.15   	        	
222.76.215.152 	        	
202.38.128.6   	        	
222.188.92.69  	        	
202.127.45.5   	        	
116.50.58.190  	        	
61.153.19.81   	        	
218.85.138.180 	        	
125.77.194.232 	        	
118.145.2.160  	        	
120.31.129.140 	        	
119.254.72.142 	        	
211.100.40.168 	        	
203.252.3.229  	        	
61.144.24.66   	        	
59.172.234.185 	        	
119.161.210.91 	        	
218.5.78.28    	        	
218.85.138.8   	        	
218.85.132.48  	        	
218.5.78.22    	        	
174.143.82.82  	        	
218.85.138.13  	        	
202.105.179.53 	        	
61.129.33.136  	        	
219.238.206.118	        	
119.254.72.178 	        	
203.156.254.202	        	
202.122.114.17 	        	
218.85.138.46  	        	
118.67.124.60  	        	
202.106.196.70 	        	
61.144.227.19  	        	
218.85.138.20  	        	
118.145.2.138  	        	
218.85.138.17  	        	
85.158.139.103 	        	
211.101.246.2  	        	
202.103.39.202 	        	
183.62.9.230   	        	
116.6.133.30   	        	
168.95.5.44    	        	
210.21.113.152 	        	
61.232.0.56    	        	
114.251.3.152  	        	
112.95.129.188 	        	
218.28.171.234 	        	
111.87.239.132 	        	
124.74.249.12  	        	
131.204.2.83   	        	
117.27.151.76  	        	
195.22.26.231  	        	
64.12.90.1     	        	
218.85.138.179 	        	
202.100.200.215	        	
221.4.151.14   	        	
222.76.215.154 	        	
211.151.189.164	        	
202.108.100.145	        	
219.133.59.58  	        	
117.27.141.167 	        	
218.107.207.27 	        	
202.113.16.25  	        	
61.137.93.118  	        	
112.122.11.133 	        	
32.97.110.150  	        	
219.141.230.18 	        	
61.152.91.23   	        	
59.57.251.221  	        	
202.117.1.28   	        	
203.148.6.130  	        	
218.85.138.12  	        	
211.167.104.33 	        	
211.144.147.219	        	
175.102.6.144  	        	
202.75.218.250 	        	
218.85.137.110 	        	
118.145.2.134  	        	
221.208.196.56 	        	
118.145.2.202  	        	
221.4.151.13   	        	
139.175.252.15 	        	
218.188.65.54  	        	
59.44.43.254   	        	
64.12.90.98    	        	
222.76.215.74  	        	
121.254.168.55 	        	
118.145.2.166  	        	
123.127.143.17 	        	
125.65.113.65  	        	
59.50.112.5    	        	
59.42.126.249  	        	
218.249.29.198 	        	
218.5.78.13    	        	
218.107.207.105	        	
123.125.51.73  	        	
204.232.236.134	        	
205.188.146.193	        	
98.136.59.15   	        	
216.172.154.34 	        	
205.164.24.44  	        	
202.106.90.140 	        	
110.208.2.86   	        	
116.6.21.38    	        	
174.143.82.76  	        	
216.218.133.196	        	
60.191.88.151  	        	
118.144.82.146 	        	
207.46.163.138 	        	
218.16.120.66  	        	
123.125.51.74  	        	
125.64.11.110  	        	
69.64.157.73   	        	
222.76.211.11  	        	
205.188.59.194 	        	
61.144.205.209 	        	
98.139.214.154 	        	
211.152.42.203 	        	
117.27.151.79  	        	
115.182.37.176 	        	
207.46.163.215 	        	
61.135.255.137 	        	
211.152.42.195 	        	
222.76.215.72  	        	
111.207.187.71 	        	
118.145.2.164  	        	
205.188.159.42 	        	
125.77.194.238 	        	
125.77.194.242 	        	
123.196.112.171	        	
211.151.93.247 	        	
180.235.66.104 	        	
114.251.217.13 	        	
68.87.26.147   	        	
114.113.239.241	        	
118.145.2.240  	        	
219.239.95.89  	        	
218.17.215.98  	        	
208.80.204.51  	        	
211.99.26.130  	        	
114.251.253.226	        	
218.85.138.168 	        	
98.139.239.160 	        	
218.85.138.184 	        	
220.194.56.210 	        	
218.5.78.25    	        	
118.145.2.181  	        	
210.34.0.4     	        	
218.85.138.170 	        	
211.95.77.45   	        	
59.36.102.36   	        	
206.46.232.11  	        	
204.232.236.234	        	
59.151.97.141  	        	
202.96.111.18  	        	
118.244.194.17 	        	
118.145.2.234  	        	
222.76.212.118 	        	
118.244.194.7  	        	
211.152.42.207 	        	
211.152.42.233 	        	
218.85.138.22  	        	
114.113.226.133	        	
202.108.252.161	        	
203.158.21.2   	        	
218.107.61.93  	        	
218.0.4.169    	        	
223.202.33.225 	        	
76.96.40.147   	        	
219.134.93.131 	        	
211.152.42.227 	        	
219.143.204.7  	        	
58.240.176.228 	        	
64.12.90.66    	        	
74.125.244.13  	        	
204.232.236.150	        	
118.145.2.152  	        	
124.172.244.201	        	
202.96.74.108  	        	
219.142.42.8   	        	
222.73.228.39  	        	
218.85.138.26  	        	
221.179.222.132	        	
218.85.138.24  	        	
211.144.83.129 	        	
200.45.191.16  	        	
168.160.200.18 	        	
61.175.197.139 	        	
59.151.112.132 	        	
205.188.156.193	        	
123.127.121.195	        	
202.96.57.14   	        	
211.155.27.23  	        	
196.28.76.18   	        	
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smtp.py
Type: application/octet-stream
Size: 2354 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130828/916c24ac/attachment-0002.obj>

From mhumphrey at gmail.com  Tue Aug 27 22:51:03 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Tue, 27 Aug 2013 21:51:03 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
References: <CAMYwhVnAKovHGav89EwD4cBKn9dYGJnSZvAZbpR+9CdBWeDVbw@mail.gmail.com>
Message-ID: <CAMYwhVmH-J7bD5-0bCqGX=oMgdJHonjua7bGOoKkaGgnHj9PSg@mail.gmail.com>

(Reply to Matt Haggard)

Matt - I was getting the emails delivered in digest form, so I am having to
reply to my original email instead of to your reply. I have added your
email directly to make sure you get it.

> I am not familiar with how you communicate with hardware on a
> Raspberry PI.  Can you link to your existing code?  In my brief
> reading this morning, I'm guessing you might be using the RPi.GPIO
> library?  If so, I'm looking at
> https://code.google.com/p/raspberry-gpio-python/wiki/Inputs which
> indicates that wait_for_edge() or event_detected() might be useful
> (instead of a "continuously called a 'timeTick' event").  But I'm not
> sure what thread the callbacks to those functions are called in.

> I've also come across
> https://www.kernel.org/doc/Documentation/gpio.txt which makes me think
> it would be possible to register the GPIO events with the Twisted
> reactor (but I've never done that and don't have a Pi to test with).

I wrote a small Python wrapper over the user-space GPIO driver. This uses
some special files under /sys/class/gpio. It is possible to configure a
GPIO input to be interrupt driven, and then using select() or poll() get an
asynchronous event when the configured condition occurs. I tested this out
manually from the Python console, however, my little wrapper class doesn't
support it currently. The other issue is that the simplest way to do button
debounce is to just poll the button once it's pressed and make sure it
stays pressed before some time before treating it as a "button pressed"
event. In my case, I also monitor the button to see if it is held down for
two seconds, as I treat that as an indicator to trigger the machine to
dispense the cat food. I suspect all that behavior could be duplicated in a
Twisted-friendly way, but I am not sure how to do that.

> Perhaps it's time to buy one.

They are a lot of fun for $35-$40.

>> 3) A thread that runs continuously capturing images from a webcam. This
>> ...(snip)

> Someone with more intelligence than me should answer this, but here's
> my attempt:

> You can do this without threads since you're just spawning processes
> for the image captures.  I'm assuming you only want to capture as many
> low res images as you can process. Here's one way to do it:

> from twisted.internet import reactor, task, defer
> (snip)

Thanks, I see the docs on spawning processes now that your example pointed
out their existance. I think I can also emulate the behavior of my polling
loop by using the scheduled callback feature. I will play around with it a
bit and check back if I can't figure it out.

Thanks much for your reply.




On Mon, Aug 26, 2013 at 8:06 PM, Matthew Humphrey <mhumphrey at gmail.com>wrote:

> I recently created a small automated, remote (via web) controlled pet
> feeder using a Raspberry Pi single-board computer. The software is all in
> Python, and uses the simple HTTP server that is part of the Python
> libraries. I discovered Twisted about 2/3 of the way through the project,
> and now that I am done I would like to port it to use Twisted. After
> reading much of the documentation the Twisted web site, some aspects of
> this are fairly obvious to me, while others are not. I could use some
> advice on how best to design my app to fit in with the Twisted framework.
>
> Here are the major components of the application:
>
> 1) A web site that hosts a combination of static content and some REST
> APIs. REST apis are called from Javascript Ajax, and do things like
> enable/disable the webcam, dispense a treat, etc. The static content
> consists of a single HTML page, some javascript scripts, and a JPG that is
> captured by #3 below.
>
> 2) A thread that runs a loop which manages the hardware. It does this with
> a simple state machine composed of a base class and subclasses for all the
> states that the hardware can be in (starting, idle, displaying status on
> the lcd, dispensing a treat, recovering from treat dispense cycle, shutting
> down). After initializing the hardware and the initial state, the thread
> loops continuously calling a "timeTick" event to the current state. WIthin
> the states, the code looks at various hardware status (like whether a
> button is pressed) and decides to take action or to trigger transition to
> another state.
>
> 3) A thread that runs continuously capturing images from a webcam. This
> thread captures low resolution images continuously, and compares sucessive
> frames to see if there is significant number of different pixels (motion
> detect). If so, it captures a higher resolution image, updates a symbolic
> link to point to the most recent image captured, and deletes any excessive
> files from previous captures. The images captured for the motion detect are
> handled by executing a process and capturing the stdout. The higher res
> images captured by executing a process that writes directly to a file.
>
> Porting #1 is very straightforward after going through the tutorial on
> Twisted web. However, I am not sure how to handle #2 and #3. I would
> appreciate some suggestions from those who are familiar with Twisted.
>
> Thanks
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/8b942c88/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Aug 28 00:14:07 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Aug 2013 23:14:07 -0700
Subject: [Twisted-Python] Encouraging New Reviewers (was: Re: something
	about Github,
	as all threads about fostering community now start on that subject)
In-Reply-To: <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>
References: <CACqnu4W=-V_oMWrp3Zwvrtj4AARGYY0mY3ruhfKRCziNH8vngQ@mail.gmail.com>
 <CABefbUoVd49GZN-P_nqoXrWR9oeO-=Defh_6utXudc5=Vq7ugQ@mail.gmail.com>
 <EEDA39FA-B1A6-4C6B-BAA1-D26892E85BAA@twistedmatrix.com>
 <CAE_Hg6aihTcPr_K5fYi9h6YmQdFYnGSd3HYwBObmZ3LSOCeU2g@mail.gmail.com>
Message-ID: <A7C0CAF8-3EB0-40E1-B47E-F12CE144D715@twistedmatrix.com>


On Aug 27, 2013, at 2:44 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> On Tue, Aug 27, 2013 at 6:07 AM, Glyph <glyph at twistedmatrix.com> wrote:
> I think that's a fine rule, but it has one gigantic problem: we don't have a list of committers anywhere.  Making this list - and, critically, associating VCS handle (svn.twistedmatrix.com login) with Trac handle, for those cases where it differs - would really help new contributors figure out whether there's 
> 
> You got cut off here.

... whether there's a ticket they can review or not.

> I feel like if someone could hack up a Trac report, or an extension to the high scores page, that addressed the first point, it would be a lot easier to deal with the second and third ones.  So, if anyone reading this would like to do that, I would be forever in  your debt.
> 
> What would be the extension to the score board?


A list of committers.  Perhaps a badge next to someone's name in the score list indicating whether they're a committer.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/b428a56d/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Aug 28 00:17:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 27 Aug 2013 23:17:34 -0700
Subject: [Twisted-Python] Twisted as a House for Sale
In-Reply-To: <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>
References: <CAL+xXwMuv4TVY2v-UyQhjqkkX4QwVZUovbKz_RGXajB5s_Q0FA@mail.gmail.com>
 <CA+hid6GFcFYAj4ud0O5y3i_59b5JpD_6C=mR8y0AC+619gpGhQ@mail.gmail.com>
 <CAL+xXwMuWT2geO7=QGEn3VR=pdV-wqbD8WWhTPTT0_vu7ew1VQ@mail.gmail.com>
 <CAPOVWORAkQqy8MHcy5gg0qtu=7Z+QBW_Lhaj2tLGCw9e3TrFvQ@mail.gmail.com>
 <CAL+xXwPGAM=tf6oikLQGOK_h-H34KC7nAnD3HnJBkX4y-H3Bsg@mail.gmail.com>
Message-ID: <ADF09375-7688-46D4-B32E-606B32F1B8C0@twistedmatrix.com>


On Aug 27, 2013, at 4:40 PM, Matt Haggard <haggardii at gmail.com> wrote:

> Up to six articles now: http://iffy.github.io/twistedftw/

This now says 
"#{{ index+1 }} With Twisted you can {{ showing.ability }}"
for me.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130827/8b914800/attachment-0002.html>

From tobias.oberstein at tavendo.de  Wed Aug 28 05:03:33 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 28 Aug 2013 04:03:33 -0700
Subject: [Twisted-Python] Failure.getTraceback and Unicode
In-Reply-To: <20130826164311.26068.1702923771.divmod.xquotient.304@top>
References: <634914A010D0B943A035D226786325D4441C11A235@EXVMBX020-12.exch020.serverdata.net>
 <20130826164311.26068.1702923771.divmod.xquotient.304@top>
Message-ID: <634914A010D0B943A035D226786325D4441C11A95D@EXVMBX020-12.exch020.serverdata.net>

Hi Jean-Paul,

> >Should I file a bug?
> 
> It seems unfortunate that trying to report an exception will fail because of
> encoding issues.  That seems like a bug worth fixing to me.

Alright.

https://twistedmatrix.com/trac/ticket/6708

/Tobias

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From tom.sheffler at gmail.com  Wed Aug 28 07:40:42 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 28 Aug 2013 06:40:42 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
Message-ID: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>

Hi Matthew -

I have a couple of idioms I use for #2 and #3 in your message.  Here they
are.

#2)

For timer events, I create a function that when called, continuously
schedules itself again in the reactor, does some work for the current
tick, and then exits.  I've used this down to 1-second intervals.  If
you're looking for sub-millisecond level timing, this may not be
appropriate for your application.

def timerFunction(reactor):

    reactor.callLater(1.0, timerFunction, reactor)

    # do the work for this time tick
    # etc etc

    return

# Somewhere in main do this to kick it off
from twisted.internet import reactor
timerFunction(reactor)


#3)

For subprocesses, I like to create a custom protocol for each type of
sub-command I am calling.  I also like to create an object to manage
the process, its arguments, its results and its temp files.  The idiom
below is suitable for calling a subprocess that accepts a small amount
of buffered data on stdin, produces some output on stdout, and logs its
stderr.

Be careful examining the value of reason.value.exitCode in
processExited.  The twisted docs show printing the exitCode as a "%d",
but sometimes the value is None --- if the process was terminated by a
signal.  The mere printing of the value with "%d" will then trigger an
exception!


Here's my idiom:

class FooprocProtocol(protocol.ProcessProtocol):

    def __init__(self, foomgr):
        # the object managing my subprocess
        self.foomgr = foomgr

        # my stdout data
        self.data = ""

    def connectionMade(self):
        # Pump input data in using this, and then close stdin
        log.msg("connectionMade!")
        # self.transport.write("...")  # if there is any data to shove into
stdin
        self.transport.closeStdin()

    def outReceived(self, data):
        # collect up our stdout
        log.msg("outReceived! with %d bytes!" % len(data))
        self.data = self.data + data

    def errReceived(self, data):
        # echo stderr messages to log with a marker
        log.msg(">%s" % data)

    def inConnectionLost(self):
        print "inConnectionLost! stdin is closed! (we probably did it)"

    def outConnectionLost(self):
        log.msg("outConnectionLost! The child closed their stdout!")

    def errConnectionLost(self):
        log.msg("errConnectionLost! The child closed their stderr.")

    def processExited(self, reason):
        log.msg("processExited:%s:" % reason)
        exitcode = reason.value.exitCode         # an integer or None

        # do some work upon processExit potentially make a decision on
exitcode ...

        log.msg("processExited:%s" % exitcode)

    def processEnded(self, reason):
        print "processEnded, status %s" % (reason.value.exitCode,)

        # process the data in the process manager
        exitcode = reason.value.exitCode         # might be non-numeric
        result = self.foomgr.processData(exitcode)



# The main job of the Process Manager is to build the command list and
# process the results.  It gives us a handy place to encapsulate this
# logic.

class FooprocManager(object):

    CMD = "/usr/local/foocmd"

    def __init__(self, arg1, arg2, arg3)

        # create a Deferred to fire when we succeed or fail
        self.d = Deferred()

        # build our command argument list as appropriate for our command
        self.cmdargs = self.build_cmd_args(arg1, arg2, arg3)

        # define places to store the transport, pid and other things
        self.ptransport = None
        self.pid = None

    def build_cmd_args(self, arg1, arg2, arg3):

        # in my projects, this method has become fairly involved as it
creates
        # tmp files and builds potentially complicated argument lists.

        arglist = [self.CMD, arg1, arg2, arg3]
        return arglist

    def run(self):

        # instantiate a protocol connected to this manager
        pp = FooprocProtocol(self)

        # spawn the process, save the PID
        self.ptransport = reactor.spawnProcess(pp, self.CMD, self.cmdargs,
{ })
        self.pid = self.ptransport.pid

    def processData(exitcode):

        # in my projects, this method opens up result files, parses results,
        # moves things around, deletes tmp files, etc.

        # return the result that we ran this subprocess for
        return result


# Instantiate a new process manager and run it this way.

mgr = FooprocManager(args ...)
d = mgr.run(args ...)


=================
T
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/dbe47b07/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Aug 28 07:54:20 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 28 Aug 2013 14:54:20 +0100
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
Message-ID: <521E010C.9020208@imperial.ac.uk>

On 28/08/13 14:40, Tom Sheffler wrote:
>
> Hi Matthew -
>
> I have a couple of idioms I use for #2 and #3 in your message.  Here
> they are.
>
> #2)
>
> For timer events, I create a function that when called, continuously
> schedules itself again in the reactor, does some work for the curren

Are you aware of t.i.task, specifically LoopingCall and cooperate/coiterate?



From jonas.lindmark at gmail.com  Wed Aug 28 09:20:54 2013
From: jonas.lindmark at gmail.com (Jonas Lindmark)
Date: Wed, 28 Aug 2013 17:20:54 +0200
Subject: [Twisted-Python] Graceful shutdown
Message-ID: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>

Hi!

I'm trying to implement graceful shutdown of a HTTP server and I am unsure
of the preferred way of implementing it.

I'm attempting to do this by adding a system event trigger for "before"
"shutdown" that should stop accepting new requests and wait for current
ones to finish.

My problem is that though my requests has fired their notifyFinish()
deferreds the data has not been written to the client. Calling
reactor.getWriters() shows me that there are active writers who are
probably writing/flushing data to the client.

What is the preferred way of waiting for the requests to finish and finish
writing the response to the client?

Here is example code for my own attempt:

from twisted.internet import reactor, defer
from twisted.application import internet, service
from twisted.web.server import Site, NOT_DONE_YET
from twisted.web.resource import Resource

class SlowResource(Resource):
    isLeaf = True
    waiting_requests = []


    def notify_no_more_waiting(self):
        if not self.waiting_requests:
            return defer.succeed(None)
        return defer.gatherResults(self.waiting_requests, consumeErrors=True) \
                .addBoth(lambda ign: None)

    def write_result(self, request):
        request.write('{}')
        request.finish()

    def render_GET(self, request):
        reactor.callLater(5, self.write_result, request)

        d = request.notifyFinish()
        self.waiting_requests.append(d)
        d.addBoth(lambda ign: self.waiting_requests.remove(d))

        return NOT_DONE_YET


slow_resource = SlowResource()
site = Site(slow_resource)
application = service.Application("MyApp")
server = internet.TCPServer(8080, site)
server.setServiceParent(application)

def wait_for_writers():
    d = defer.Deferred()

    def check_writers():
        if len(reactor.getWriters()) > 0:
            reactor.callLater(0.1, check_writers)
        else:
            d.callback(None)

    check_writers()

    return d

@defer.inlineCallbacks
def graceful_shutdown():
    yield server.stopService()
    yield slow_resource.notify_no_more_waiting()
    #yield wait_for_writers()


reactor.addSystemEventTrigger('before', 'shutdown', graceful_shutdown)


Uncommenting the yield in graceful_shutdown gives me my intended behaviour
but I don't like the solution since I have no idea if the writers there
have anything to do with writing the results. They could be any writer
writing anything I assume.

Running this code with twistd -ny graceful.tac and curling
http://localhost:8080 and then issuing a SIGINT to the twistd process
results in an curl: (52) Empty reply from server.

-- 
/Jonas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/1ddb9777/attachment-0002.html>

From _ at habnab.it  Wed Aug 28 10:09:43 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Wed, 28 Aug 2013 09:09:43 -0700
Subject: [Twisted-Python] Graceful shutdown
In-Reply-To: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
References: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
Message-ID: <m2txi9n6ew.fsf@ender.habnabit.org>

I didn't read over your code, but this is something that I've
independently implemented. You can see my implementation at
<https://github.com/habnabit/polecat/blob/master/polecat.py>. The Site
subclass does some other monitoring-related things, but you should be
able to tease out just the graceful shutdown parts if that's all you
want.

Polecat needs some work and a lot of documentation, but for now, the way
to do a graceful shutdown is to make a PolecatSite and then
addSystemEventTrigger('before', 'shutdown',
yourPolecatSite.gracefullyStopActiveClients).



From mhumphrey at gmail.com  Wed Aug 28 21:47:30 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:47:30 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <521E010C.9020208@imperial.ac.uk>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
Message-ID: <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>

Phil - Thanks so much. This is pretty much exactly what I was looking for.
I tried the approach you suggested for timer events, and it seems very
clean and works quite well. I was able to get it working very consistently
with intervals < 10ms (way more than I need).

I haven't tried the process management stuff yet, but it looks very
straightforward.

Thanks again.


On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 28/08/13 14:40, Tom Sheffler wrote:
>
>>
>> Hi Matthew -
>>
>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>> they are.
>>
>> #2)
>>
>> For timer events, I create a function that when called, continuously
>> schedules itself again in the reactor, does some work for the curren
>>
>
> Are you aware of t.i.task, specifically LoopingCall and
> cooperate/coiterate?
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/90a22bbf/attachment-0002.html>

From mhumphrey at gmail.com  Wed Aug 28 21:48:13 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:48:13 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
 <CAMYwhV=WfG_-5OrdmHWykcRQR4_rm5=9eOsaZbSUMWoPgyO=2g@mail.gmail.com>
Message-ID: <CAMYwhVmJYnw2x9zmn0H65ZjemhWYzaKYR8Cfvkzec8+VB1ivNA@mail.gmail.com>

SOrry - last reply was meant for Tom!


On Wed, Aug 28, 2013 at 8:47 PM, Matthew Humphrey <mhumphrey at gmail.com>wrote:

> Phil - Thanks so much. This is pretty much exactly what I was looking for.
> I tried the approach you suggested for timer events, and it seems very
> clean and works quite well. I was able to get it working very consistently
> with intervals < 10ms (way more than I need).
>
> I haven't tried the process management stuff yet, but it looks very
> straightforward.
>
> Thanks again.
>
>
> On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> On 28/08/13 14:40, Tom Sheffler wrote:
>>
>>>
>>> Hi Matthew -
>>>
>>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>>> they are.
>>>
>>> #2)
>>>
>>> For timer events, I create a function that when called, continuously
>>> schedules itself again in the reactor, does some work for the curren
>>>
>>
>> Are you aware of t.i.task, specifically LoopingCall and
>> cooperate/coiterate?
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/460a07f4/attachment-0002.html>

From mhumphrey at gmail.com  Wed Aug 28 21:51:15 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Wed, 28 Aug 2013 20:51:15 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <521E010C.9020208@imperial.ac.uk>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
 <521E010C.9020208@imperial.ac.uk>
Message-ID: <CAMYwhVki20d_tQFu-CXLb90C=WUxr0SpLumkXRuCoj-8Y3sYMQ@mail.gmail.com>

Phil -

I am aware of LoopingCall. I saw the mention of cooperate/coiterate on some
page somewhere, and actually went off trying to find an explanation /
example but did not find anything. If you have a link with some details, I
would like to take a look.

Thanks


On Wed, Aug 28, 2013 at 6:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 28/08/13 14:40, Tom Sheffler wrote:
>
>>
>> Hi Matthew -
>>
>> I have a couple of idioms I use for #2 and #3 in your message.  Here
>> they are.
>>
>> #2)
>>
>> For timer events, I create a function that when called, continuously
>> schedules itself again in the reactor, does some work for the curren
>>
>
> Are you aware of t.i.task, specifically LoopingCall and
> cooperate/coiterate?
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130828/143b1c76/attachment-0002.html>

From jonas.lindmark at gmail.com  Thu Aug 29 01:20:57 2013
From: jonas.lindmark at gmail.com (Jonas Lindmark)
Date: Thu, 29 Aug 2013 09:20:57 +0200
Subject: [Twisted-Python] Graceful shutdown
In-Reply-To: <m2txi9n6ew.fsf@ender.habnabit.org>
References: <CACoBDnO4YhGyFLfA064B9KLL88BstmDR86eCs1o0bCqZx6BgTQ@mail.gmail.com>
 <m2txi9n6ew.fsf@ender.habnabit.org>
Message-ID: <CACoBDnOD0W7HH2EJ4zhjnzapkur5byS5KDZBEW_r57xd=aWuqg@mail.gmail.com>

Thanks for the link. Looking at your code I found the magic lines I was
missing.

Implementing my own HTTPChannel was the key to success. Now I don't have to
poll reactor.getWriters() to see if there are unfinished writers.

I ended up with something like this:
class ApiHTTPChannel(HTTPChannel):
    _connection_lost = None

    def notifyConnectionLost(self):
        if self._connection_lost is not None:
            return self._connection_lost
        return defer.succeed(None)

    def connectionMade(self):
        HTTPChannel.connectionMade(self)
        self._connection_lost = defer.Deferred()

    def connectionLost(self, reason):
        HTTPChannel.connectionLost(self, reason)
        self._connection_lost.callback(None)

Thanks


On 28 August 2013 18:09, Aaron Gallagher <_ at habnab.it> wrote:

> I didn't read over your code, but this is something that I've
> independently implemented. You can see my implementation at
> <https://github.com/habnabit/polecat/blob/master/polecat.py>. The Site
> subclass does some other monitoring-related things, but you should be
> able to tease out just the graceful shutdown parts if that's all you
> want.
>
> Polecat needs some work and a lot of documentation, but for now, the way
> to do a graceful shutdown is to make a PolecatSite and then
> addSystemEventTrigger('before', 'shutdown',
> yourPolecatSite.gracefullyStopActiveClients).
>



-- 
/Jonas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/5c0f995c/attachment-0002.html>

From kylerzhang11 at gmail.com  Thu Aug 29 03:27:46 2013
From: kylerzhang11 at gmail.com (zhang kai)
Date: Thu, 29 Aug 2013 17:27:46 +0800
Subject: [Twisted-Python]  Raising exception from a Deferred canceller.
Message-ID: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>

Hi,

As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a cancellation
function for a Deferred throws an exception(the cancel() method of
Deferred won’t
throw exceptions, but the canceller may), behavior is undefined. If the
cancellation function throws an exception it is currently not caught, and
cancellation does not occur.

We can catch the exception and log it, and fallback to just firing Deferred
 withCancelledError. This won’t break any old code. But an exception
raising from the cancellation function often means the cancellation is
failed.

Another option we have is taking this opportunity to make the cancellation
being able to fail. There is the motivation:

There are cases where a Deferred is uncancellable. For example, we can call
twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
operation is waiting in the queue, we can cancel it by removing it from the
queue. However, when the operation is already sent and is waiting for the
response, it becomes uncancellable.

If we allow the canceller(NOT the cancel() method of the Deferred) to raise
an exception, we can tell the user the cancellation is failed and the
Deferredwon’t be fired with a CancelledError.

Raising an exception from cancel() may break the old code. So we can catch
the exception raised by the canceller, then return a False without firing
theDeferred to tell the user that the cancellation is failed.

In order to avoid missing unexpected exceptions, we can create a
CancellationFailedError. When the canceller raises CancellationFailedError,
we catch it and return False. When the canceller raises others exceptions,
we catch it, log it then return False.

Something like this:

def cancel(self):
    if not self.called:
        canceller = self._canceller
        if canceller:
            try:
                canceller(self)
            except CancellationFailedError:
                return False
            except Exception:
                log.err(None, "Unexpected exception from canceller.")
                return False
        else:
            # Arrange to eat the callback that will eventually be fired
            # since there was no real canceller.
            self._suppressAlreadyCalled = True
        if not self.called:
            # There was no canceller, or the canceller didn't call
            # callback or errback.
            self.errback(failure.Failure(CancelledError()))
        return True
    elif isinstance(self.result, Deferred):
        # Waiting for another deferred -- cancel it instead.
        return self.result.cancel()
    else:
        return False

This won’t break any code by raising an exception from cancel(), although
some code may rely on cancel() not returning any value.

So, what’s your opinion on raising an exception from the canceller?


Regards,

-Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/6f9a2d84/attachment-0002.html>

From terry at jon.es  Thu Aug 29 04:18:15 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 11:18:15 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>

Hi Kai

I think it's helpful to keep clear on two different things that cancelation
is intended to do: 1) to fire the original deferred so that things relying
on it can proceed, and 2) to try to terminate an ongoing action that the
deferred might be waiting on.

For 1, I think calling cancel() should *always* result in the deferred
being fired (with, as it currently stands, CancelledError being used if a
provided cancel function does not fire the deferred itself). Always firing
the deferred is very important because the caller of cancel may have set up
many deferreds that rely on each other and their entire program may not be
able to proceed at all until the offending deferred is actually fired. It's
also contractually simple, and easy to document & understand.

For 2, the question is: do we want to also return information to the caller
if 2a) the underlying cancel function detects that it cannot, or can no
longer, stop the operation, or 2b) there is some kind of exception when
cancel calls the cancellation function.  I don't think 2a) is really an
exception situation, so it makes sense, as you say, just to return False
from cancel in this case. It's basically the cancel function saying it was
too late to do anything about the underlying operation but not providing
more information than that. Internally raising and catching
CancellationFailedError (as in your code) in that case seems good to me.
 In the case of 2b) I would just let the exception bubble up to the calling
code. Agreed, it could break some existing code, but isn't that existing
code already subject to that exact failure? It's just currently
undefined/undocumented.

Terry



On Thu, Aug 29, 2013 at 10:27 AM, zhang kai <kylerzhang11 at gmail.com> wrote:

> Hi,
>
> As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a
> cancellation function for a Deferred throws an exception(the cancel() method
> of Deferred won’t throw exceptions, but the canceller may), behavior is
> undefined. If the cancellation function throws an exception it is currently
> not caught, and cancellation does not occur.
>
> We can catch the exception and log it, and fallback to just firing
> Deferred withCancelledError. This won’t break any old code. But an
> exception raising from the cancellation function often means the
> cancellation is failed.
>
> Another option we have is taking this opportunity to make the cancellation
> being able to fail. There is the motivation:
>
> There are cases where a Deferred is uncancellable. For example, we can
> call twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
> operation is waiting in the queue, we can cancel it by removing it from the
> queue. However, when the operation is already sent and is waiting for the
> response, it becomes uncancellable.
>
> If we allow the canceller(NOT the cancel() method of the Deferred) to
> raise an exception, we can tell the user the cancellation is failed and the
> Deferredwon’t be fired with a CancelledError.
>
> Raising an exception from cancel() may break the old code. So we can
> catch the exception raised by the canceller, then return a False without
> firing theDeferred to tell the user that the cancellation is failed.
>
> In order to avoid missing unexpected exceptions, we can create a
> CancellationFailedError. When the canceller raises CancellationFailedError,
> we catch it and return False. When the canceller raises others
> exceptions, we catch it, log it then return False.
>
> Something like this:
>
> def cancel(self):
>     if not self.called:
>         canceller = self._canceller
>         if canceller:
>             try:
>                 canceller(self)
>             except CancellationFailedError:
>                 return False
>             except Exception:
>                 log.err(None, "Unexpected exception from canceller.")
>                 return False
>         else:
>             # Arrange to eat the callback that will eventually be fired
>             # since there was no real canceller.
>             self._suppressAlreadyCalled = True
>         if not self.called:
>             # There was no canceller, or the canceller didn't call
>             # callback or errback.
>             self.errback(failure.Failure(CancelledError()))
>         return True
>     elif isinstance(self.result, Deferred):
>         # Waiting for another deferred -- cancel it instead.
>         return self.result.cancel()
>     else:
>         return False
>
> This won’t break any code by raising an exception from cancel(), although
> some code may rely on cancel() not returning any value.
>
> So, what’s your opinion on raising an exception from the canceller?
>
>
> Regards,
>
> -Kai
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/657cd96c/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Aug 29 06:00:33 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 Aug 2013 12:00:33 -0000
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <20130829120033.26068.1550902512.divmod.xquotient.328@top>

On 09:27 am, kylerzhang11 at gmail.com wrote:
>Hi,
>
>As itamar mentioned in ticket #6676 <http://tm.tl/#6676>, If a 
>cancellation
>function for a Deferred throws an exception(the cancel() method of
>Deferred won’t
>throw exceptions, but the canceller may), behavior is undefined. If the
>cancellation function throws an exception it is currently not caught, 
>and
>cancellation does not occur.
>
>We can catch the exception and log it, and fallback to just firing 
>Deferred
>withCancelledError. This won’t break any old code. But an exception
>raising from the cancellation function often means the cancellation is
>failed.

Keep in mind that the Deferred cancellation API is a "best effort" API. 
There are no guarantees that anything can be cancelled.  Consider the 
fact that 90% or more of Deferreds out there don't even have 
cancellation implemented for them yet and that before Deferred 
cancellation was introduced, 100% of Deferreds were uncancellable. :)
>
>Another option we have is taking this opportunity to make the 
>cancellation
>being able to fail. There is the motivation:
>
>There are cases where a Deferred is uncancellable. For example, we can 
>call
>twisted.mail.imap4.IMAP4Client.delete to delete a mailbox. When the
>operation is waiting in the queue, we can cancel it by removing it from 
>the
>queue. However, when the operation is already sent and is waiting for 
>the
>response, it becomes uncancellable.
>
>If we allow the canceller(NOT the cancel() method of the Deferred) to 
>raise
>an exception, we can tell the user the cancellation is failed and the
>Deferredwon’t be fired with a CancelledError.
>
>Raising an exception from cancel() may break the old code. So we can 
>catch
>the exception raised by the canceller, then return a False without 
>firing
>theDeferred to tell the user that the cancellation is failed.

It's true that introducing an exception where previously there was no 
exception is likely to break things.

However, *hiding* the failure in a return code that has to be checked 
everywhere is not a solution to this problem.  The cancellation has 
still failed - the only difference returning False instead of raising an 
exception makes is that most code won't bother to check the return value 
and will miss out on the fact that cancellation has failed.

This mostly just breaks things differently (in a way that's much harder 
to track down than a missing exception handler).
>In order to avoid missing unexpected exceptions, we can create a
>CancellationFailedError. When the canceller raises 
>CancellationFailedError,
>we catch it and return False. When the canceller raises others 
>exceptions,
>we catch it, log it then return False.
>
>Something like this:
>
>def cancel(self):
>    if not self.called:
>        canceller = self._canceller
>        if canceller:
>            try:
>                canceller(self)
>            except CancellationFailedError:
>                return False
>            except Exception:
>                log.err(None, "Unexpected exception from canceller.")
>                return False
>        else:
>            # Arrange to eat the callback that will eventually be fired
>            # since there was no real canceller.
>            self._suppressAlreadyCalled = True
>        if not self.called:
>            # There was no canceller, or the canceller didn't call
>            # callback or errback.
>            self.errback(failure.Failure(CancelledError()))
>        return True
>    elif isinstance(self.result, Deferred):
>        # Waiting for another deferred -- cancel it instead.
>        return self.result.cancel()
>    else:
>        return False
>
>This won’t break any code by raising an exception from cancel(), 
>although
>some code may rely on cancel() not returning any value.
>
>So, what’s your opinion on raising an exception from the canceller?

What about a third option - if a cancellation function raises an 
exception, fail the Deferred with that exception.

This:

  1) avoids raising an exception from Deferred.cancel (and avoids 
encoding error information in the return value of that method, forcing 
application code to start checking for error return values)

  2) Satisfies the expectation of the application code that cancelling 
the Deferred will cause it to fire "soon" - with roughly the same 
quality as if the Deferred had no canceller implemented at all.

  3) Probably makes the implementation bug apparent by making the 
exception available to errbacks on the Deferred.

I'm not entirely convinced (3) is ideal - it may be that the Deferred 
should actually fire with CancelledError in this case, just as it would 
without a canceller, and the exception raised by the canceller should 
just be logged (somewhat like what your code above does - but after 
logging the error the Deferred should actually be cancelled).

This has the same benefits, but puts the information about the 
implementation into the application's log file rather than forcing 
application-supplied errbacks to handle it somehow.

Jean-Paul



From exarkun at twistedmatrix.com  Thu Aug 29 06:06:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 29 Aug 2013 12:06:59 -0000
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <CACqnu4XiwTqfUH9QW+pjSvxL2x4nt8C2gzXYXyhKxoYoPxuJfg@mail.gmail.com>
Message-ID: <20130829120659.26068.1975359856.divmod.xquotient.338@top>

On 10:18 am, terry at jon.es wrote:
>Hi Kai
>
>[snip]
>
>2b) there is some kind of exception when
>cancel calls the cancellation function.  I don't think 2a) is really an
>exception situation, so it makes sense, as you say, just to return 
>False
>from cancel in this case. It's basically the cancel function saying it 
>was
>too late to do anything about the underlying operation but not 
>providing
>more information than that. Internally raising and catching
>CancellationFailedError (as in your code) in that case seems good to 
>me.
>In the case of 2b) I would just let the exception bubble up to the 
>calling
>code. Agreed, it could break some existing code, but isn't that 
>existing
>code already subject to that exact failure? It's just currently
>undefined/undocumented.

This seems like a bad behavior that we should fix.  Allowing arbitrary 
exceptions from other application code here makes it a lot harder to 
write robust code that uses Deferred cancellation.

Beyond that, how much code has already been written that uses this 
feature?  If it was written based on the (admittedly, meager) 
documentation that exists for the feature, then it won't have exception 
handling.

We could leave the behavior as it is and document it and require all of 
that code be updated and all future code be written to handle arbitrary 
exceptions from a cancel call.  Or we could get rid of the undocumented 
exception case, make the existing code correct (if it was previously 
correct based on documented behavior) and avoid making things more 
difficult for all future users of Deferred cancellation.

In my experience, there are usually a lot of subtle concerns and tricky 
corner cases when fixing an inconsistency between documentation and 
implementation.  This case seems like a much more clear-cut win to just 
fix the implementation.

Jean-Paul



From siva82kb at gmail.com  Thu Aug 29 09:38:17 2013
From: siva82kb at gmail.com (Sivakumar Balasubramanian)
Date: Thu, 29 Aug 2013 15:38:17 +0000 (UTC)
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
	fragmented data
Message-ID: <loom.20130829T172912-619@post.gmane.org>

I am tyring to implement a python program, using Twisted, to communicate
witha bluetooth device. The following is a sample code of what I have
implemented:

from twisted.internet import protocol, reactor
from twisted.internet.serialport import SerialPort
from twisted.protocols import basic

class DeviceBluetooth(basic.Int16StringReceiver):

    def connectionMade(self):
        print 'Connection made!'
        self.sendString('[01] help\n')

    def dataReceived(self, data):
        print"Response: {0}".format(data)

        print "-----"
        print "choose message to send: "
        print "1. Stim on"
        print "2. Stim off"
        print "3. Stim status"
        print "4. Help"
        # user input
        ch = input("Choose command :: ")
        if int(ch) == 1:
            self.sendString('[02] stim on\n')
        elif int(ch) == 2:
            self.sendString('[03] stim off\n')
        elif int(ch) == 3:
            self.sendString('[04] stim ?\n')
        elif int(ch) == 4:
            self.sendString('[05] help\n')
        else:
            reactor.stop()

SerialPort(DeviceBluetooth(), 'COM20', reactor, baudrate=115200)
reactor.run()

When I run the program, sometimes I get a response and other times I do not
receive anything. And most of the times long responses are fragmented appear
as part of the next message. I have through the hyperterminal to make sure
that I get the appropriate response from by bluetooth device. So, the
problem has to be with my code.

Is there something that I doing wrong in my code?




From p.mayers at imperial.ac.uk  Thu Aug 29 09:46:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 29 Aug 2013 16:46:06 +0100
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
 fragmented data
In-Reply-To: <loom.20130829T172912-619@post.gmane.org>
References: <loom.20130829T172912-619@post.gmane.org>
Message-ID: <521F6CBE.5040105@imperial.ac.uk>

On 29/08/13 16:38, Sivakumar Balasubramanian wrote:

> Is there something that I doing wrong in my code?

Yes. You are sub-classing Int16StringReceiver, but then breaking things 
by overriding dataReceived. You should be implementing stringReceived, 
and you'll get complete strings.

dataReceived does not get "messages" - a higher layer needs to buffer 
and reassemble them, which Int16StringReceiver does, and passes the 
messages to stringReceived.



From siva82kb at gmail.com  Thu Aug 29 10:15:15 2013
From: siva82kb at gmail.com (Sivakumar Balasubramanian)
Date: Thu, 29 Aug 2013 16:15:15 +0000 (UTC)
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
	fragmented data
References: <loom.20130829T172912-619@post.gmane.org>
 <521F6CBE.5040105@imperial.ac.uk>
Message-ID: <loom.20130829T181244-775@post.gmane.org>

Phil Mayers <p.mayers <at> imperial.ac.uk> writes:

> 
> On 29/08/13 16:38, Sivakumar Balasubramanian wrote:
> 
> > Is there something that I doing wrong in my code?
> 
> Yes. You are sub-classing Int16StringReceiver, but then breaking things 
> by overriding dataReceived. You should be implementing stringReceived, 
> and you'll get complete strings.
> 
> dataReceived does not get "messages" - a higher layer needs to buffer 
> and reassemble them, which Int16StringReceiver does, and passes the 
> messages to stringReceived.
> 


Dear Phil,
I replaced thye dataReceived function by stringReceived, and ran the code.
But when I do this, the program does not even enter the stringReceived function.

I also tried a modified version of the programs above with LineReceived
protcol, and here too I have the same problem of fragmented data from the
dataReceived function.

Thanks.

Siva.




From p.mayers at imperial.ac.uk  Thu Aug 29 11:26:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 29 Aug 2013 18:26:36 +0100
Subject: [Twisted-Python] Twisted serialport dataReceived() provides
 fragmented data
In-Reply-To: <loom.20130829T181244-775@post.gmane.org>
References: <loom.20130829T172912-619@post.gmane.org>
 <521F6CBE.5040105@imperial.ac.uk> <loom.20130829T181244-775@post.gmane.org>
Message-ID: <521F844C.3050604@imperial.ac.uk>

On 29/08/13 17:15, Sivakumar Balasubramanian wrote:

> Dear Phil,
> I replaced thye dataReceived function by stringReceived, and ran the code.
> But when I do this, the program does not even enter the stringReceived function.

That implies your protocol isn't an int16string-prefixed one. I assumed 
it was, since you'd inherited from that class.

Obviously you will need to pick a base class that matches the actual 
structure of your protocol.

>
> I also tried a modified version of the programs above with LineReceived
> protcol, and here too I have the same problem of fragmented data from the
> dataReceived function.

Well, *again* you shouldn't be overriding dataReceived if you're 
inheriting from LineReceiver. You should be overriding lineReceived.

To be clear: dataReceived gets raw data. It can, and *will*, get 
incomplete messages, because it doesn't know anything about messages.

If you have a protocol with a message structure, you either need to:

  1. Inherit from an existing base-class which handles the message 
framing, and implement the "<msg>Received" handler specific to that 
protocol.

  2. Or, if there's no base-class matching your message framing, write 
your own - this will entail buffering the data, then extracting messages.

See here:

http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions#Whyisprotocol.dataReceivedcalledwithonlypartofthedataIcalledtransport.writewith



From terry at jon.es  Thu Aug 29 13:29:09 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 20:29:09 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <20130829120033.26068.1550902512.divmod.xquotient.328@top>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <20130829120033.26068.1550902512.divmod.xquotient.328@top>
Message-ID: <CACqnu4V9e4_cQEGkaW25XcAKoiKQLaDVbxp9mw6tsA8gHKndWg@mail.gmail.com>

JP writes:

On Thu, Aug 29, 2013 at 1:00 PM, <exarkun at twistedmatrix.com> wrote:

> What about a third option - if a cancellation function raises an
> exception, fail the Deferred with that exception.


I really like this idea, but it wont work if the cancel function has
already fired the deferred.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/070cab77/attachment-0002.html>

From terry at jon.es  Thu Aug 29 13:33:42 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 29 Aug 2013 20:33:42 +0100
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <20130829120033.26068.1550902512.divmod.xquotient.328@top>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
 <20130829120033.26068.1550902512.divmod.xquotient.328@top>
Message-ID: <CACqnu4UP+NybrxQjR_=-rMjmN5ri3e0bB0nArG_gXZEg2dJW8Q@mail.gmail.com>

JP writes:

On Thu, Aug 29, 2013 at 1:00 PM, <exarkun at twistedmatrix.com> wrote:

> Keep in mind that the Deferred cancellation API is a "best effort" API.
> There are no guarantees that anything can be cancelled.  Consider the fact
> that 90% or more of Deferreds out there don't even have cancellation
> implemented for them yet and that before Deferred cancellation was
> introduced, 100% of Deferreds were uncancellable. :)


I think this is (unintentionally) misleading. Although 90% (or more) of
deferreds don't have an explicit custom cancelation function, 100% of
deferreds can now be canceled.

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/885300cf/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Aug 29 23:49:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 29 Aug 2013 22:49:31 -0700
Subject: [Twisted-Python] Raising exception from a Deferred canceller.
In-Reply-To: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
References: <CAK_130SBGydUrCiDTV8srqcYq7KNCFP6MuN_b5s4scG5sMSzNw@mail.gmail.com>
Message-ID: <7FE9F2EF-88ED-4642-A106-705C4CA1F12C@twistedmatrix.com>

Thank you, Kai, for a great post describing the issue in detail.

On Aug 29, 2013, at 2:27 AM, zhang kai <kylerzhang11 at gmail.com> wrote:

> So, what’s your opinion on raising an exception from the canceller?

I feel pretty strongly that it ought to be handled in this manner:

Index: twisted/internet/defer.py
===================================================================
--- twisted/internet/defer.py	(revision 39819)
+++ twisted/internet/defer.py	(working copy)
@@ -456,7 +456,10 @@
         if not self.called:
             canceller = self._canceller
             if canceller:
-                canceller(self)
+                try:
+                    canceller(self)
+                except:
+                    log.err(failure.Failure(), "Canceller raised exception.")
             else:
                 # Arrange to eat the callback that will eventually be fired
                 # since there was no real canceller.

Raising an exception from a canceller is a bug.  It was never really supposed to do anything.  I guess you could be relying on the behavior right now where raising an exception will allow you to avoid callbacking or errbacking the Deferred, but only at the cost of delivering some random exception to some unsuspecting application code.

As Jean-Paul already pointed out, turning this into a boolean flag is not useful to anybody.  The way that you tell a cancelled operation has been cancelled is to add a callback to a point in the chain and then observe that it has been cancelled.

So, separately from how to handle unhandled exceptions, there's the question of making a Deferred 'atomic', by which I mean, a Deferred whose .cancel() method has no apparent external effect; no result is obtained.  (I am using the term 'atomic' because it seems like half the uses in this thread use "uncancellable" to mean "doesn't have an explicit canceller" and the other half of the uses mean "cancellation has no effect").

Currently, it is, at least, possible to construct a Deferred that will continue waiting for a result after .cancel() has been invoked.  However, it's surprisingly challenging.  You have to do this, or something like it:

def atomize(deferred):
    def complete(result):
        complete.done = True
        complete.result = result
        public.cancel()
        return result
    complete.result = None
    complete.done = False
    def again():
        return (Deferred(lambda x: x.callback(complete.result))
                .addCallback(await))
    def await(result):
        if complete.done:
            return result
        else:
            return again()
    public = again()
    deferred.addBoth(complete)
    return public

This took *me* like an hour to construct again from memory, so I have to assume that ~75% of Twisted users will either never realize it's possible or not really figure it out.  And I'm still not quite sure what sort of resource consumption this involves; will each .cancel() stack up another Deferred or will they be tail-recursed out somehow (/me pours out a 40 for tm.tl/411)?

Asking all these questions to implement something apparently simple seems an undue burden.  So it does seem reasonable that a canceller have some way to communicate that it doesn't actually want to callback or errback a Deferred.

We didn't want to make this too easy, because a no-op canceller is a crummy default behavior, but I think that the current mechanism is too difficult to implement and has too many moving parts.

So then the question is: is raising a new kind of exception a good way to do this?  That raises the question: what are good criteria for raising an exception versus returning a value in an API?

The main distinction for when to return a value versus when to raise an exception is what the default behavior of the next stack frame up should be.  If an API calls another API that exhibits a certain behavior, does it make more sense to, by default, continue up the stack towards an error handler, or to move on to the next statement?  In other words, does the termination in the manner in question indicate the sort of error that one should not attempt to recover from unless one knows how?

In the example you gave in the original post, the caller always has to check the 'did cancellation work' flag, so that flag should be an exception.  Forgetting to check it is an error, so by default it makes sense to jump over the stack.

In this case though, "I didn't call .callback or .errback" is not a type of exception that should ever propagate through multiple stack frames.  It's just an API safety feature, to make sure that you really intended to do things that way.  Also, in terms of going through multiple frames, a canceller can't really meaningfully call another canceller, unless it's very explicitly implementing some kind of delegation pattern; with such a pattern, failing to propagate the result is quite likely the intentional behavior.  So I can't see a reason to use an exception to indicate this.

Instead, I think perhaps a new constant value would be useful, so a canceller could return a constant to indicate that it really meant to not invoke either a callback or an errback.  'return NOT_CANCELLED' would indicate that the canceller intentionally took no action to call .callback or .errback, and could be called again.

Sorry for the long email.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130829/70cbfa07/attachment-0002.html>

