From bret.curtis at amplidata.com  Tue Jul  1 04:14:37 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Tue, 1 Jul 2014 12:14:37 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
Message-ID: <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>

Hello Twistrons,

I admit to being "that guy" who pushed this project forward and see
Ldaptor find a new home (and focus) in Twisted and I'm glad that Tommi
and Glyph are on board. I'm also glad that AntonG has also re-licensed
his changes as MIT and has written consent from another developer as
well.

With that said, lets get this ball rolling.

Firstly, we'll need a repo to get started with. My company (Amplidata)
has it's own fork, but I think it is best we start with a clone, not a
direct fork as github would have us do, of tv42s repo. I've had
experience with a popular fork was 2 years further along than the
original, yet this fork would only be on the second page of search
results.

We can either:
1) Move (donate) tv42's repo to Twisted, this means that all links to
tv42/Ldaptor would automatically be forwarded to Twisted/Ldaptor.
2) Twisted creates it's own Ldaptor repo, I or someone else clones
this and then merge TV42's repo in, commit/push and file a merge
request with Twisted/Ldaptor.

We're, of course, open to other suggestions, but those two above seem
the best options. From there, we can start dealing with other issues
such as:

A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
it? Do we trim it out or just mark it as deprecated since it relies on
old versions of twisted and nevow.
B) Pull in downstream patches from Redhat, SuSE and Debian.
C) Replace remaining bits of non-MIT code.
D) Get back to tv42's Todo list. :)

Cheers,
Bret

On 28 June 2014 00:27, Glyph <glyph at twistedmatrix.com> wrote:
> Hello fellow Twistrons,
>
> A long time ago, for reasons we need not discuss here, the pure-python LDAP
> implementation within Twisted was pulled out into a separate package under a
> different license.
>
> Recently however, the authors of this LDAP code have generously re-licensed
> the code under a Twisted-compatible MIT license, both the original code at
> <https://github.com/tv42/ldaptor/commit/7e249b1586789a5c588f662ce74ee9f4338666e0>
> and the more recent fork (which I believe has more users) at
> <https://github.com/antong/ldaptor/issues/10>.  It seems as though there's
> even a solution for the problematic MD4 implementation here
> <https://github.com/tv42/ldaptor/pull/2>.
>
> Since there's no active, central hub for ldaptor development, I think we
> should pull it into the Twisted org on Github, and some of the folks on the
> Cc: line have volunteered to help with that.
>
> Does that sound good to everybody?  (Are you excited!!!?)
>
> It's also a possibility that we could distribute a for-real SSO back-end
> with Cred using this, which I'm pretty excited about.
>
> -glyph


From hs at ox.cx  Tue Jul  1 04:56:24 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 01 Jul 2014 12:56:24 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>
Message-ID: <6A191475-9285-4121-A486-D6421C0FB4FD@ox.cx>

On 1 Jul 2014, at 12:14, Bret Curtis wrote:

> With that said, lets get this ball rolling.
>
> Firstly, we'll need a repo to get started with. My company (Amplidata)
> has it's own fork, but I think it is best we start with a clone, not a
> direct fork as github would have us do, of tv42s repo.

Agreed.

> We can either:
> 1) Move (donate) tv42's repo to Twisted, this means that all links to
> tv42/Ldaptor would automatically be forwarded to Twisted/Ldaptor.
> 2) Twisted creates it's own Ldaptor repo, I or someone else clones
> this and then merge TV42's repo in, commit/push and file a merge
> request with Twisted/Ldaptor.

Depends entirely on Tommi (cc?ed), I don?t care which route we take.

> We're, of course, open to other suggestions, but those two above seem
> the best options. From there, we can start dealing with other issues
> such as:

0) Do the fixes to setup.py that everyone has in their private repos and 
put it on PyPI.

> A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
> it? Do we trim it out or just mark it as deprecated since it relies on
> old versions of twisted and nevow.

I wish we could just rip it out.  If there?s really a significant 
amount of people that use this, they build an ldaptor-ui package.

> B) Pull in downstream patches from Redhat, SuSE and Debian.
> C) Replace remaining bits of non-MIT code.
> D) Get back to tv42's Todo list. :)

E) Start writing documentation. :(  *Something*. Currently there is only 
some slides and examples and it?s up to the user to read the source 
code and figure out what ldaptor actually can do (which is kind of *a 
lot*).

Cheers, I?m very glad we have some movement here,
?h


From glyph at twistedmatrix.com  Tue Jul  1 12:49:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 11:49:30 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
Message-ID: <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>


On Jul 1, 2014, at 10:40 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:

> On Tue, Jul 1, 2014 at 2:41 AM, Bret Curtis <bret.curtis at amplidata.com> wrote:
>> 2) Twisted creates it's own Ldaptor repo, I or someone else clones
>> this and then merge TV42's repo in, commit/push and file a merge
>> request with Twisted/Ldaptor.
> 
> This, please. Create a new repo (not Github-fork), call it
> twisted/ldaptor, fetch tv42/ldaptor and push the commits to the
> twisted/ldaptor. Then start the work toward fixing things.

OK.  At this point I think the one task *I* need to do is to make some people members of the Twisted org on github.  Can I have a list of all the relevant github handles?

(Also, please be careful, and don't push to the main Twisted repo if you work on Twisted.  Github is super obnoxious about mirroring; we can't turn off pull requests and we can't turn off pushes even though it's really supposed to be a read-only mirror right now, and pushes to that repository break our SVN integration.)

>> A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
>> it? Do we trim it out or just mark it as deprecated since it relies on
>> old versions of twisted and nevow.
> 
> I'd say just make a single commit that removes ldaptor/apps,
> bin/ldaptor-webui, test-webui.tac, po/ldaptor-webui*,
> doc/examples.webui, admin/run-twill, ldaptor/test/test_webui.py, and
> mentions of it from setup.py.

Sounds good to me.

> As long as that happens in a single commit, it'll be easy to restore
> in e.g. a new twisted/ldaptor-webui repository, if wanted.

If there's going to be a web UI it should probably use twisted.web.template and not nevow, given that it doesn't use Athena or any JS.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140701/d9b5e9bc/attachment.html>

From glyph at twistedmatrix.com  Tue Jul  1 13:06:00 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 12:06:00 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
Message-ID: <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>


On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:

> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> (Also, please be careful, and don't push to the main Twisted repo if you
>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>> off pull requests and we can't turn off pushes even though it's really
>> supposed to be a read-only mirror right now, and pushes to that repository
>> break our SVN integration.)
> 
> I'm no Github expert, but you should be able to just make people be in
> a non-"Owners" team, and then selectively give that team push access
> to only the repos you want.
> 
> The "Owners" team probably gives non-admin contributors too much power
> in the first place.

This is indeed a better idea.

I'll still need the list of names for that team though ;)

-g


From bret.curtis at amplidata.com  Tue Jul  1 15:19:24 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Tue, 1 Jul 2014 23:19:24 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
Message-ID: <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>

On 1 July 2014 21:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:
>
>> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> (Also, please be careful, and don't push to the main Twisted repo if you
>>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>>> off pull requests and we can't turn off pushes even though it's really
>>> supposed to be a read-only mirror right now, and pushes to that repository
>>> break our SVN integration.)
>>
>> I'm no Github expert, but you should be able to just make people be in
>> a non-"Owners" team, and then selectively give that team push access
>> to only the repos you want.
>>

Not only this, I still like the idea of forking from Twisted/ldaptor
in my own repo and working on my own branch. When finished, I usually
send a merge request upstream, in this case to Twisted/ldaptor. I
assume that it would either be accepted or rejected with comments.  If
this is too much overhead for you, then the below is a good idea and
give make us contributors.

>> The "Owners" team probably gives non-admin contributors too much power
>> in the first place.
>

This works by creating a team with 'write access' to twisted/ldaptor.
This would make you (Glyph) the gatekeeper (admin access by default)
in adding and kicking members out of the group. The rest of the world
is technically in the 'read access'  team as is the nature of open
organizations on github.

> This is indeed a better idea.
>
> I'll still need the list of names for that team though ;)

psi29a
https://github.com/psi29a

>
> -g

Cheers! :)


From glyph at twistedmatrix.com  Tue Jul  1 16:45:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 15:45:42 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
Message-ID: <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>


On Jul 1, 2014, at 2:19 PM, Bret Curtis <bret.curtis at amplidata.com> wrote:

> On 1 July 2014 21:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:
>> 
>>> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
>>> <glyph at twistedmatrix.com> wrote:
>>>> (Also, please be careful, and don't push to the main Twisted repo if you
>>>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>>>> off pull requests and we can't turn off pushes even though it's really
>>>> supposed to be a read-only mirror right now, and pushes to that repository
>>>> break our SVN integration.)
>>> 
>>> I'm no Github expert, but you should be able to just make people be in
>>> a non-"Owners" team, and then selectively give that team push access
>>> to only the repos you want.
>>> 
> 
> Not only this, I still like the idea of forking from Twisted/ldaptor
> in my own repo and working on my own branch. When finished, I usually
> send a merge request upstream, in this case to Twisted/ldaptor. I
> assume that it would either be accepted or rejected with comments.  If
> this is too much overhead for you, then the below is a good idea and
> give make us contributors.

I've made you a contributor to that repository, but I recommend that you do this anyway, and (for now) just merge your own PRs after a little while if nobody steps forward to review them.  Hopefully some more interested parties will arrive and allow for a nice review-driven process early though :-).

>>> The "Owners" team probably gives non-admin contributors too much power
>>> in the first place.
>> 
> 
> This works by creating a team with 'write access' to twisted/ldaptor.
> This would make you (Glyph) the gatekeeper (admin access by default)
> in adding and kicking members out of the group. The rest of the world
> is technically in the 'read access'  team as is the nature of open
> organizations on github.
> 
>> This is indeed a better idea.
>> 
>> I'll still need the list of names for that team though ;)
> 
> psi29a
> https://github.com/psi29a

Let me know if I did this right:

https://github.com/twisted/ldaptor

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140701/0d213f91/attachment.html>

From pratik.prajapati12 at gmail.com  Wed Jul  2 07:10:42 2014
From: pratik.prajapati12 at gmail.com (Pratik Prajapati)
Date: Wed, 2 Jul 2014 18:40:42 +0530
Subject: [Twisted-Python] question on twisted
Message-ID: <CAHNg1SquLoS7xsDj797_f6uE524TDE6sPJ6CH71Ss7JCEGz_qw@mail.gmail.com>

Hi,

I have posted a question about twisted udp on stackoverflow
http://stackoverflow.com/questions/24531442/get-media-renderer-devices-from-all-networks-connected-to-a-machine-using-twiste

Please reply.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140702/9cfe9aad/attachment.html>

From exarkun at twistedmatrix.com  Wed Jul  2 10:26:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Jul 2014 16:26:28 -0000
Subject: [Twisted-Python] Request.getClient
Message-ID: <20140702162628.6611.1178746883.divmod.xquotient.163@top>

Hello all,

twisted.web.http.Request.getClient has a terrible implementation.  It 
does blocking network I/O (DNS).  Fortunately it is only used in one 
place in Twisted - the CGI implementation.  Unfortunately this makes the 
CGI implementation somewhat unsuited for real-world use.

`Request.getClient` has always been allowed to return `None` under 
certain circumstances.  I propose making it always return `None` and 
deprecating it.

This is implemented in the branch linked to <https://tm.tl/2252>.

Chris Armstrong suggested that this change might not be strictly keeping 
with our backwards compatibility policy.

I suggest that either it is - because `None` was always a possible 
return value - or that removing the possibility of blocking I/O from 
applications that are mistakenly using this API makes it worth the not- 
strictly-compatible change.

A minor adjustment might be to make it always return the IP address 
instead, as this was another behavior it previously had.

Please comment.  Thanks.

Jean-Paul


From dustin at v.igoro.us  Wed Jul  2 12:26:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Wed, 2 Jul 2014 14:26:32 -0400
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
Message-ID: <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>

Actually, the apidocs say "Undocumented", so I think you could make it
return u"The ? is made of green ? " and still be in spec.

  http://twistedmatrix.com/documents/14.0.0/api/twisted.web.http.Request.html#getClient

Dustin

On Wed, Jul 2, 2014 at 12:26 PM,  <exarkun at twistedmatrix.com> wrote:
> Hello all,
>
> twisted.web.http.Request.getClient has a terrible implementation.  It does
> blocking network I/O (DNS).  Fortunately it is only used in one place in
> Twisted - the CGI implementation.  Unfortunately this makes the CGI
> implementation somewhat unsuited for real-world use.
>
> `Request.getClient` has always been allowed to return `None` under certain
> circumstances.  I propose making it always return `None` and deprecating it.
>
> This is implemented in the branch linked to <https://tm.tl/2252>.
>
> Chris Armstrong suggested that this change might not be strictly keeping
> with our backwards compatibility policy.
>
> I suggest that either it is - because `None` was always a possible return
> value - or that removing the possibility of blocking I/O from applications
> that are mistakenly using this API makes it worth the not-
> strictly-compatible change.
>
> A minor adjustment might be to make it always return the IP address instead,
> as this was another behavior it previously had.
>
> Please comment.  Thanks.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From exarkun at twistedmatrix.com  Wed Jul  2 12:55:24 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Jul 2014 18:55:24 -0000
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
 <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>
Message-ID: <20140702185524.6611.52220651.divmod.xquotient.171@top>

On 06:26 pm, dustin at v.igoro.us wrote:
>Actually, the apidocs say "Undocumented", so I think you could make it
>return u"The ? is made of green ? " and still be in spec.
>
>http://twistedmatrix.com/documents/14.0.0/api/twisted.web.http.Request.html#getClient

The interface is documented:

https://twistedmatrix.com/documents/14.0.0/api/twisted.web.iweb.IRequest.html#getClient

(as deprecated, already).

Also, we generally give some weight to how an implementation actually 
behaves - even if the documentation is lacking or contradictory.

If you ignore incorrect docs and figure out how to use an API so it 
works, you could conceivably have working software.  Twisted tries not 
to break such code.

If you ignore how the implementation actually behaves and blindly trust 
the documentation (sorry, wish you could do that) then your software 
probably doesn't work.  Since it's probably already broken, Twisted 
isn't as concerned making changes that might break it more or 
differently.

Jean-Paul
>Dustin
>
>On Wed, Jul 2, 2014 at 12:26 PM,  <exarkun at twistedmatrix.com> wrote:
>>Hello all,
>>
>>twisted.web.http.Request.getClient has a terrible implementation.  It 
>>does
>>blocking network I/O (DNS).  Fortunately it is only used in one place 
>>in
>>Twisted - the CGI implementation.  Unfortunately this makes the CGI
>>implementation somewhat unsuited for real-world use.
>>
>>`Request.getClient` has always been allowed to return `None` under 
>>certain
>>circumstances.  I propose making it always return `None` and 
>>deprecating it.
>>
>>This is implemented in the branch linked to <https://tm.tl/2252>.
>>
>>Chris Armstrong suggested that this change might not be strictly 
>>keeping
>>with our backwards compatibility policy.
>>
>>I suggest that either it is - because `None` was always a possible 
>>return
>>value - or that removing the possibility of blocking I/O from 
>>applications
>>that are mistakenly using this API makes it worth the not-
>>strictly-compatible change.
>>
>>A minor adjustment might be to make it always return the IP address 
>>instead,
>>as this was another behavior it previously had.
>>
>>Please comment.  Thanks.
>>
>>Jean-Paul
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Wed Jul  2 15:02:45 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Jul 2014 14:02:45 -0700
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
Message-ID: <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>

On Jul 2, 2014, at 9:26 AM, exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> twisted.web.http.Request.getClient has a terrible implementation.  It does blocking network I/O (DNS).  Fortunately it is only used in one place in Twisted - the CGI implementation.  Unfortunately this makes the CGI implementation somewhat unsuited for real-world use.
> 
> `Request.getClient` has always been allowed to return `None` under certain circumstances.  I propose making it always return `None` and deprecating it.
> 
> This is implemented in the branch linked to <https://tm.tl/2252>.
> 
> Chris Armstrong suggested that this change might not be strictly keeping with our backwards compatibility policy.

I agree that this is a troubling area but in general I tend to believe that changes like this are in keeping with our compatibility policy.  Changing the signature or the allowed return type of a value ("type" speaking in terms of public features of its interface) should not be allowed.  If we already returned None sometimes, then a correct program would already have to deal with None sometimes, so making this change wouldn't break it, per se.

Bringing up such a change on the list is always a good policy, since it gives people a chance to audit their code and look for places where they might have been depending too intimately on accidental features, so by no means take my belief that this is in-policy to mean that we shouldn't broadly discuss changes like this in the future :-).  Real, actual, broken code is what the policy strives to prevent, so real world code that broke should usually take precedence.

> I suggest that either it is - because `None` was always a possible return value - or that removing the possibility of blocking I/O from applications that are mistakenly using this API makes it worth the not- strictly-compatible change.
> 
> A minor adjustment might be to make it always return the IP address instead, as this was another behavior it previously had.

I think that this adjustment is the best option.  IP addresses are mostly interchangeable with hostnames, so during the transition period while it's being deprecated, even an application relying on this API heavily would at least have an opportunity to keep functionality equivalent during an upgrade.  Making it always return None means that a correct application (one which dealt with the None return value), while not becoming crash-with-an-exception buggy, might lose functionality (logging a source IP of "None" all the time, for example, and losing track of an audit log of who is making what changes).

Unbidden, I have some ideas about how we might preserve even _more_ of the functionality involving DNS lookups, but more effort than just giving back the IP is probably wasted, so I won't mention them.  Let's deprecate the API and move on.

Thanks for bringing this up,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140702/472badae/attachment.html>

From radix at twistedmatrix.com  Wed Jul  2 15:09:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Jul 2014 16:09:33 -0500
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
 <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>
Message-ID: <etPan.53b4750d.66334873.83b@densetsu>

On July 2, 2014 at 4:04:59 PM, Glyph Lefkowitz (glyph at twistedmatrix.com) wrote:
On Jul 2, 2014, at 9:26 AM, exarkun at twistedmatrix.com wrote:

Hello all,

twisted.web.http.Request.getClient has a terrible implementation. ?It does blocking network I/O (DNS). ?Fortunately it is only used in one place in Twisted - the CGI implementation. ?Unfortunately this makes the CGI implementation somewhat unsuited for real-world use.

`Request.getClient` has always been allowed to return `None` under certain circumstances. ?I propose making it always return `None` and deprecating it.

This is implemented in the branch linked to <https://tm.tl/2252>.

Chris Armstrong suggested that this change might not be strictly keeping with our backwards compatibility policy.

I agree that this is a troubling area but in general I tend to believe that changes like this are in keeping with our compatibility policy. ?Changing the signature or the allowed return type of a value ("type" speaking in terms of public features of its interface) should not be allowed. ?If we already returned None sometimes, then a correct program would already have to deal with None sometimes, so making this change wouldn't break it, per se.

Bringing up such a change on the list is always a good policy, since it gives people a chance to audit their code and look for places where they might have been depending too intimately on accidental features, so by no means take my belief that this is in-policy to mean that we shouldn't broadly discuss changes like this in the future :-). ?Real, actual, broken code is what the policy strives to prevent, so real world code that broke should usually take precedence.

I suggest that either it is - because `None` was always a possible return value - or that removing the possibility of blocking I/O from applications that are mistakenly using this API makes it worth the not- strictly-compatible change.

A minor adjustment might be to make it always return the IP address instead, as this was another behavior it previously had.

I think that this adjustment is the best option. ?IP addresses are mostly interchangeable with hostnames, so during the transition period while it's being deprecated, even an application relying on this API heavily would at least have an opportunity to keep functionality equivalent during an upgrade. ?Making it always return None means that a correct application (one which dealt with the None return value), while not becoming crash-with-an-exception buggy, might lose functionality (logging a source IP of "None" all the time, for example, and losing track of an audit log of who is making what changes).

Unbidden, I have some ideas about how we might preserve even _more_ of the functionality involving DNS lookups, but more effort than just giving back the IP is probably wasted, so I won't mention them. ?Let's deprecate the API and move on.

Thanks for bringing this up,



I, too, like the idea of returning the IP address.



--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140702/8e85b0b9/attachment.html>

From dstainton415 at gmail.com  Thu Jul  3 02:16:25 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Thu, 3 Jul 2014 08:16:25 +0000
Subject: [Twisted-Python] "serialization" of ListeningPort
Message-ID: <20140703081625.GA20098@googlemail.com>



Greetings,

I wanted to see what people think of this before attempting to open a
Twisted trac ticket and submitting code patches.

I think Twisted servers need a way to derive a client endpoint
descriptor string from a listeningPort. This approximates an idiom
commonly used in Tahoe-LAFS/Foolscap:

"""
serverEndpoint = serverFromString("tcp:interface=127.0.0.1:0")
listeningPortDeferred = serverEndpoint.listen(myFactory)

def doStuffWithPort(listeningPort):
    address = listeningPort.getHost()

    myHost = address.host
    myPort = address.port
    clientEndpointString = "tcp:%s:%s" % (myHost, myPort)

    # announce clientEndpointString to various clients
    # ...

listeningPortDeferred.addCallback(doStuffWithPort)
"""

In this case the server needs to announce a client endpoint string
to various clients... the server has enough information to construct
the endpoint string after the listening port has been created. However
the construction of the endpoint string is not done in an endpoint
agnostic manner... and this code will therefore break when used with
Unix domain socket endpoints for instance.

One way to accomplish endpoint agnosticism would be to have a global function called
"getClientEndpointStringFromPort" or something like that. This
function would take an IListeningPort object as it's only argument and
return a client endpoint string which can be used to connect to that very 
listening port.

Under the hood it should find a plugin that can
serialize the listening port objects into a client endpoint
string. This plugin can be the same class as the client endpoint
parser, since it has the correct "prefix" attribute with which to
construct the client endpoint string.

I am basically saying that each server endpoint type needs a
small amount of unique code in order to serialize into a client
endpoint descriptor string... because there are various IAddress
implementations with different attributes.

Cheers,

David

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140703/55b8b6c6/attachment-0001.pgp>

From bret.curtis at amplidata.com  Fri Jul  4 07:54:55 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Fri, 4 Jul 2014 15:54:55 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
Message-ID: <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>

On 2 July 2014 00:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> I've made you a contributor to that repository, but I recommend that you do
> this anyway, and (for now) just merge your own PRs after a little while if
> nobody steps forward to review them.  Hopefully some more interested parties
> will arrive and allow for a nice review-driven process early though :-).
>

I've initialized the new repo with tv42's repo. It isn't a github
fork, but a mirror. I also tagged it with the 0.43 release since that
is the last known official release build.

>
>
>
> Let me know if I did this right:
>
> https://github.com/twisted/ldaptor
>
> -glyph

You've done is right and I've already github forked it (after I did
the above) and started to get down to business.

Whenever someone gets the chance, please check this out:
https://github.com/twisted/ldaptor/pull/1

The summary/comment pretty much sums up what we've talked about in the
list so far. I think once it is merged, it is a pretty good starting
place.

This has been tested against our project at Amplidata and with only 3
failing tests out of 337, we're doing really so far.

Going forward, here are some things I want to tackle:
1) Get those remaining 3 tests (or code it tests) fixed.
2) Follow up with Pypi about the semi-dead Ldaptor 0.53 release
3) Start the PEP8 process on the codebase
4) Help existing debian maintainer to transition to twisted's ldaptor
5) ?
... additional input from you guys would be awesome. :)

Cheers,
Bret


From kebin70 at gmail.com  Sat Jul  5 14:35:01 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 5 Jul 2014 13:35:01 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
Message-ID: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>

calling reactor.callLater within qt4reactor in an attempt to async non
webkit work but not seeing expected behavior.  Webkit locks while the
callLater function executes.

Any insight appreciated.

Should I move real work into separate reactor and "broker" calls into
qt4reactor/webkit.  I have xmlrpc and websocket  hooks into browser...but
looking for guidance as to most direct method of brokering calls between
reactors.

Any insight appreciated.

Having a blast using QT browser as a back-end, see demo site
www.athleets.com.

See below for amazon S3 upload worker that I expected to async, but in
qt4reactor does not appear to work as planned.

from pyscewpt import fixed
from pyscewpt.s3 import bucket_util
import boto
from boto.s3.bucket import Bucket
from boto.s3.key import Key

from twisted.internet import defer, reactor

bucket_queue = defer.DeferredQueue()

def upload_worker(data):
    print 'macth upload_worker', data
    save_match( data['league'], data['twitter'], data['local_file'],
data['meta'], data['profile'])
    return len(bucket_queue.pending)
def match_queue(ign=None):
    print 'match_queue:', len(bucket_queue.pending),
len(bucket_queue.waiting)
    if ign is None or ign >= 2:
        print 'requeue:', len(bucket_queue.pending) ,
len(bucket_queue.waiting)
        d = bucket_queue.get()
        d.addCallback(upload_worker)
        d.addBoth(match_queue)
        return d
    else:
        return None
def queue_save_match(queue_dic):
    bucket_queue.put(queue_dic)
    print 'queue_save_match', len(bucket_queue.pending),
len(bucket_queue.waiting), queue_dic['twitter']    #
    if len(bucket_queue.pending) >= 5 and len(bucket_queue.waiting) == 0:
        print 'queue drop worker'
        reactor.callLater(0,match_queue,None)

def save_match(league, twitter, systemfile, meta, profile):
    print 'save_match:', twitter, profile
    s3_filename = league + '/' + twitter + '.png'
    bucket_util.save_s3(
        boto.connect_s3().get_bucket('~bucket'),
        s3_filename,
        None,
        systemfile,
        'image/png',
        'public-read',
        meta + [('yes', False), ('no', False), ('maybe', False),
('profile', profile)]
    )
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140705/e43bad14/attachment.html>

From exarkun at twistedmatrix.com  Sat Jul  5 18:24:56 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jul 2014 00:24:56 -0000
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
Message-ID: <20140706002456.6611.327452863.divmod.xquotient.271@top>

On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>calling reactor.callLater within qt4reactor in an attempt to async non
>webkit work but not seeing expected behavior.  Webkit locks while the
>callLater function executes.

`callLater` does not make a blocking function into a non-blocking one. 
It just calls a function after a specified delay.  If the function 
blocks, then the reactor will block when it gets around to calling it.

If you need to call blocking APIs you may need to call them in a 
separate thread (Twisted includes a threadpool that can help you with 
this) or a separate process (Twisted has some APIs for launching and 
interacting with other processes, too).  Of course, the ideal solution 
is often to find a non-blocking equivalent to the blocking API and use 
that instead (for example, I know that txaws is a project that exists - 
perhaps it can do the things to S3 that you want to do).

Jean-Paul


From bret.curtis at amplidata.com  Mon Jul  7 04:23:29 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Mon, 7 Jul 2014 12:23:29 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
Message-ID: <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>

Hello again,

I sent another pull request, this takes care of the last 3 failing
tests and opens up an additional 50 tests that also pass now. We're
now at 387 tests!

https://github.com/twisted/ldaptor/pull/3

It is my recommendation that after this is reviewed and hopfully
commited that we make a branch and tag the release as 0.54.0. The
reason for the large jump is that antong's last semi-offical release
was 0.53 on PyPI. At this point we (myself and anyone else that wants
to help) should reach out to downstream projects (PyPI, Debian, and
etc.) to make them aware that Ldaptor development is again active.

I would also like to (ab)use github's issue tracker and milestones to
sort issues into queues. For example, the next milestone would be 0.55
with: https://github.com/twisted/ldaptor/issues/2  as the first real
issue to be tracked there. Another issue I'll file shortly will be
that we go through the code and start refactoring deprecated code like
I did for test_ldiftree.py.

Would you mind if I did this or would you rather someone else handle this?

Another question is that of documentation.  We could use sphinx to
handle this to autodoc our API and also include howtos and examples.
This can readily be used for html, pdf and man page generation which
would be handy for downstream.

What does everyone think?

Cheers,
Bret


From hs at ox.cx  Mon Jul  7 04:50:16 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 07 Jul 2014 12:50:16 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
Message-ID: <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>

On 7 Jul 2014, at 12:23, Bret Curtis wrote:

> It is my recommendation that after this is reviewed and hopfully
> commited that we make a branch and tag the release as 0.54.0. The
> reason for the large jump is that antong's last semi-offical release
> was 0.53 on PyPI. At this point we (myself and anyone else that wants
> to help) should reach out to downstream projects (PyPI, Debian, and
> etc.) to make them aware that Ldaptor development is again active.

Since ldaptor is a Twisted project now, may I suggest you copy its 
time-based version numbers? 14.0 has more meaning to itself than 0.54.0.


From hawkowl at atleastfornow.net  Mon Jul  7 05:13:56 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 7 Jul 2014 19:13:56 +0800
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
Message-ID: <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>


On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:

> On 7 Jul 2014, at 12:23, Bret Curtis wrote:
> 
>> It is my recommendation that after this is reviewed and hopfully
>> commited that we make a branch and tag the release as 0.54.0. The
>> reason for the large jump is that antong's last semi-offical release
>> was 0.53 on PyPI. At this point we (myself and anyone else that wants
>> to help) should reach out to downstream projects (PyPI, Debian, and
>> etc.) to make them aware that Ldaptor development is again active.
> 
> Since ldaptor is a Twisted project now, may I suggest you copy its time-based version numbers? 14.0 has more meaning to itself than 0.54.0.

Well, Nevow is a ?Twisted Project? and it doesn?t ? but I agree that it has more meaning.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140707/ff06123b/attachment.pgp>

From trac at twistedmatrix.com  Mon Jul  7 06:06:41 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Mon, 07 Jul 2014 12:06:41 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1404734801.77.3551245895661464883@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140707/5f188111/attachment.html>

From exarkun at twistedmatrix.com  Mon Jul  7 06:32:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jul 2014 12:32:28 -0000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1404734801.77.3551245895661464883@twistedmatrix.com
References: 1404734801.77.3551245895661464883@twistedmatrix.com
Message-ID: <20140707123228.7498.1078214828.divmod.xquotient.2@top>

These stats are incorrect due to buggy interactions between the stats 
script and the new version of trac.  Correct trac stats will return once 
https://code.launchpad.net/~twisted-dev/twisted-trac-integration/fix- 
summary-with-new-trac/+merge/225813 is merged and deployed.

Jean-Paul


From glyph at twistedmatrix.com  Mon Jul  7 15:02:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jul 2014 14:02:29 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
Message-ID: <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>


On Jul 7, 2014, at 4:13 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> 
> On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:
> 
>> On 7 Jul 2014, at 12:23, Bret Curtis wrote:
>> 
>>> It is my recommendation that after this is reviewed and hopfully
>>> commited that we make a branch and tag the release as 0.54.0. The
>>> reason for the large jump is that antong's last semi-offical release
>>> was 0.53 on PyPI. At this point we (myself and anyone else that wants
>>> to help) should reach out to downstream projects (PyPI, Debian, and
>>> etc.) to make them aware that Ldaptor development is again active.
>> 
>> Since ldaptor is a Twisted project now, may I suggest you copy its time-based version numbers? 14.0 has more meaning to itself than 0.54.0.
> 
> Well, Nevow is a ?Twisted Project? and it doesn?t ? but I agree that it has more meaning.

It might not be a bad idea to do this for Nevow too, for that matter.

-glyph



From exarkun at twistedmatrix.com  Mon Jul  7 15:21:25 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jul 2014 21:21:25 -0000
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
Message-ID: <20140707212125.7498.960267665.divmod.xquotient.4@top>

On 09:02 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 7, 2014, at 4:13 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
>>
>>On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:
>>>On 7 Jul 2014, at 12:23, Bret Curtis wrote:
>>>>It is my recommendation that after this is reviewed and hopfully
>>>>commited that we make a branch and tag the release as 0.54.0. The
>>>>reason for the large jump is that antong's last semi-offical release
>>>>was 0.53 on PyPI. At this point we (myself and anyone else that 
>>>>wants
>>>>to help) should reach out to downstream projects (PyPI, Debian, and
>>>>etc.) to make them aware that Ldaptor development is again active.
>>>
>>>Since ldaptor is a Twisted project now, may I suggest you copy its 
>>>time-based version numbers? 14.0 has more meaning to itself than 
>>>0.54.0.
>>
>>Well, Nevow is a ?Twisted Project? and it doesn?t ? but I agree that 
>>it has more meaning.
>
>It might not be a bad idea to do this for Nevow too, for that matter.

It might not be.  Now that so many new projects are being added to the 
github Twisted repository (and particularly, projects that have new 
contributors), perhaps it is (slightly past) time to set down some of 
these things officially?

Jean-Paul


From glyph at twistedmatrix.com  Mon Jul  7 15:26:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jul 2014 14:26:29 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <20140707212125.7498.960267665.divmod.xquotient.4@top>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
Message-ID: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>

On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:

> It might not be.  Now that so many new projects are being added to the github Twisted repository (and particularly, projects that have new contributors), perhaps it is (slightly past) time to set down some of these things officially?

I think we should make a list of some suggestions before we try to make that list into an official policy.  Date-based version numbers is a good suggestion to start that list with :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140707/8482db88/attachment.html>

From kevin.horn at gmail.com  Tue Jul  8 00:43:56 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 8 Jul 2014 01:43:56 -0500
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <CA+U=zK3w+sBDJHPP4b52sME2g-mNrJv__9gDXqU_HunksK6tZw@mail.gmail.com>

I haven't used ldaptor in years, but I have to say I'm really glad to see
this happening.

Kudos to all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140708/46b5f411/attachment.html>

From hawkowl at atleastfornow.net  Tue Jul  8 05:30:14 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 8 Jul 2014 19:30:14 +0800
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>

On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
> 
>> It might not be.  Now that so many new projects are being added to the github Twisted repository (and particularly, projects that have new contributors), perhaps it is (slightly past) time to set down some of these things officially?
> 
> I think we should make a list of some suggestions before we try to make that list into an official policy.  Date-based version numbers is a good suggestion to start that list with :).
>  

Maybe we need a Request For Comment/PEP-style way of formalising/proposing policy? Django?s doing it as well, and it seems like a nice way of doing it.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140708/c683c18e/attachment.pgp>

From exarkun at twistedmatrix.com  Tue Jul  8 06:06:21 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jul 2014 12:06:21 -0000
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
 <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>
Message-ID: <20140708120621.7498.1913368590.divmod.xquotient.11@top>




On 11:30 am, hawkowl at atleastfornow.net wrote:
>On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> 
>wrote:
>>On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>>>It might not be.  Now that so many new projects are being added to 
>>>the github Twisted repository (and particularly, projects that have 
>>>new contributors), perhaps it is (slightly past) time to set down 
>>>some of these things officially?
>>
>>I think we should make a list of some suggestions before we try to 
>>make that list into an official policy.  Date-based version numbers is 
>>a good suggestion to start that list with :).
>
>Maybe we need a Request For Comment/PEP-style way of 
>formalising/proposing policy? Django?s doing it as well, and it seems 
>like a nice way of doing it.

I don't see this as the necessary conclusion.  We're not arguing about 
what the policy should be yet.  I'm just saying it should be written 
down in one place - not smeared out across 10 years of mailing list 
archives.

Jean-Paul


From poalman at gmail.com  Tue Jul  8 08:45:42 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 8 Jul 2014 15:45:42 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
Message-ID: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>

Hey,

This is a bit of a stab in the dark, but I'm really not sure what to try next.

Basically I've got a custom twisted FTP server, recently (not sure
when it started) I've noticed that connections to it seem to
disconnect after 60 seconds if they haven't completed. This could be a
slow LIST response, or a large file being transferred in a RETR
download. It doesn't seem to matter if the connection is idle or not,
but after 60 seconds it seems to get closed.

I can't recreate this locally, nor if I clone the live box. I've even
set up a new box which didn't exhibit the behaviour, then switched the
current live box to the new box and then the behaviour started to
occur, only when it went live.

So the only thing I can think of is that it happens when multiple
users are on the box which makes it very difficult to pin point /
recreate.

I'm a bit of a loss as to how to try and move this forward and try and
work out what the issue is.

I just thought I'd ask here incase it sounds like anything someone has
run into before? or if anyone has any ideas of where to start looking
(it disconnects at 60/61 seconds)? Maybe a timeout value somewhere
perhaps?

Thanks!

Paul


From p.mayers at imperial.ac.uk  Tue Jul  8 09:26:59 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 08 Jul 2014 16:26:59 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
Message-ID: <53BC0DC3.3090203@imperial.ac.uk>

On 08/07/14 15:45, Paul Wiseman wrote:
> Hey,
>
> This is a bit of a stab in the dark, but I'm really not sure what to try next.
>
> Basically I've got a custom twisted FTP server, recently (not sure
> when it started) I've noticed that connections to it seem to
> disconnect after 60 seconds if they haven't completed. This could be a

Are there any middlebox devices (firewall, NAT) in the path?


From poalman at gmail.com  Tue Jul  8 10:30:31 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 8 Jul 2014 17:30:31 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <53BC0DC3.3090203@imperial.ac.uk>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
Message-ID: <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>

This is a google compute instance, so there is there firewall on
there. I did at first think it could be a hidden firewall rule google
have.

I think I can rule anything like that out though. I tried to recreate
the problem on another box, and got to the point where i'd set up the
entire working environment without the issue (same firewall etc.). A
bit puzzled and thinking I'd somehow fixed the issue, I swapped the
new box for the live one and once I'd done that I then started to see
the exact same problem on the new box. (And the problem had gone away
on the ex-live box). So the only thing I can think of is it is somehow
being triggered by the traffic.


On 8 July 2014 16:26, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 08/07/14 15:45, Paul Wiseman wrote:
>>
>> Hey,
>>
>> This is a bit of a stab in the dark, but I'm really not sure what to try
>> next.
>>
>> Basically I've got a custom twisted FTP server, recently (not sure
>> when it started) I've noticed that connections to it seem to
>> disconnect after 60 seconds if they haven't completed. This could be a
>
>
> Are there any middlebox devices (firewall, NAT) in the path?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From werner at thieprojects.ch  Tue Jul  8 19:34:22 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 08 Jul 2014 15:34:22 -1000
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
 <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
Message-ID: <53BC9C1E.3050907@thieprojects.ch>

On 7/8/14 6:30 AM, Paul Wiseman wrote:
> This is a google compute instance, so there is there firewall on
> there. I did at first think it could be a hidden firewall rule google
> have.
>
> I think I can rule anything like that out though. I tried to recreate
> the problem on another box, and got to the point where i'd set up the
> entire working environment without the issue (same firewall etc.). A
> bit puzzled and thinking I'd somehow fixed the issue, I swapped the
> new box for the live one and once I'd done that I then started to see
> the exact same problem on the new box. (And the problem had gone away
> on the ex-live box). So the only thing I can think of is it is somehow
> being triggered by the traffic.

What's the number of connections when this is occuring?

Werner



From bret.curtis at amplidata.com  Wed Jul  9 01:25:09 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Wed, 9 Jul 2014 09:25:09 +0200
Subject: [Twisted-Python] standard practices, was (bringing LDAP back)
Message-ID: <CALonyaguL1eCnYuetLPBxF37v63ADOPxDmiXKbO2cw+CrUECHw@mail.gmail.com>

On 8 July 2014 14:06,  <exarkun at twistedmatrix.com> wrote:
>
>
>
> On 11:30 am, hawkowl at atleastfornow.net wrote:
>>
>> On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>>
>>> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>>>>
>>>> It might not be.  Now that so many new projects are being added to the
>>>> github Twisted repository (and particularly, projects that have new
>>>> contributors), perhaps it is (slightly past) time to set down some of these
>>>> things officially?
>>>
>>>
>>> I think we should make a list of some suggestions before we try to make
>>> that list into an official policy.  Date-based version numbers is a good
>>> suggestion to start that list with :).
>>
>>
>> Maybe we need a Request For Comment/PEP-style way of formalising/proposing
>> policy? Django?s doing it as well, and it seems like a nice way of doing it.
>
>
> I don't see this as the necessary conclusion.  We're not arguing about what
> the policy should be yet.  I'm just saying it should be written down in one
> place - not smeared out across 10 years of mailing list archives.
>

Thankfully we're just just discussing it and not arguing about it,
hopefully in another thread. :)

Cheers,
Bret


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From bret.curtis at amplidata.com  Wed Jul  9 01:27:16 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Wed, 9 Jul 2014 09:27:16 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>

Right, so from what I read here then our official release to the world
will be 14.0, provided that Travis is green before 2015. ;)

Sound good?

Cheers,
Bret

On 7 July 2014 23:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>
> It might not be.  Now that so many new projects are being added to the
> github Twisted repository (and particularly, projects that have new
> contributors), perhaps it is (slightly past) time to set down some of these
> things officially?
>
>
> I think we should make a list of some suggestions before we try to make that
> list into an official policy.  Date-based version numbers is a good
> suggestion to start that list with :).
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From kebin70 at gmail.com  Wed Jul  9 11:11:36 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 9 Jul 2014 10:11:36 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <20140706002456.6611.327452863.divmod.xquotient.271@top>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
Message-ID: <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>

Another "Oh right" twisted moment.  callInThread instead of callLater?

This is a case where I've been laying tracks for 2 years without totally
understanding the train that was eventually coming down the tracks.  I
guess I implicitly understood by wanting to move to a separate reactor as a
separate thread, and in the past when I've used callLater it's encapsulated
non-blocking code.

In this sense is callLater ever utilized as a pseudo asynchronous method?



On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:

> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>
>> calling reactor.callLater within qt4reactor in an attempt to async non
>> webkit work but not seeing expected behavior.  Webkit locks while the
>> callLater function executes.
>>
>
> `callLater` does not make a blocking function into a non-blocking one. It
> just calls a function after a specified delay.  If the function blocks,
> then the reactor will block when it gets around to calling it.
>
> If you need to call blocking APIs you may need to call them in a separate
> thread (Twisted includes a threadpool that can help you with this) or a
> separate process (Twisted has some APIs for launching and interacting with
> other processes, too).  Of course, the ideal solution is often to find a
> non-blocking equivalent to the blocking API and use that instead (for
> example, I know that txaws is a project that exists - perhaps it can do the
> things to S3 that you want to do).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140709/03c18de4/attachment.html>

From kevin.horn at gmail.com  Wed Jul  9 11:51:47 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jul 2014 12:51:47 -0500
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
 <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
Message-ID: <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>

It might be, but I can't think of a reason off hand why it ever _should_
be.  I can kind of see how it might work, but if your "async" process ever
takes longer than your callLater delay it will break, and probably quite
horribly.


On Wed, Jul 9, 2014 at 12:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> Another "Oh right" twisted moment.  callInThread instead of callLater?
>
> This is a case where I've been laying tracks for 2 years without totally
> understanding the train that was eventually coming down the tracks.  I
> guess I implicitly understood by wanting to move to a separate reactor as a
> separate thread, and in the past when I've used callLater it's encapsulated
> non-blocking code.
>
> In this sense is callLater ever utilized as a pseudo asynchronous method?
>
>
>
> On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:
>
>> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>>
>>> calling reactor.callLater within qt4reactor in an attempt to async non
>>> webkit work but not seeing expected behavior.  Webkit locks while the
>>> callLater function executes.
>>>
>>
>> `callLater` does not make a blocking function into a non-blocking one. It
>> just calls a function after a specified delay.  If the function blocks,
>> then the reactor will block when it gets around to calling it.
>>
>> If you need to call blocking APIs you may need to call them in a separate
>> thread (Twisted includes a threadpool that can help you with this) or a
>> separate process (Twisted has some APIs for launching and interacting with
>> other processes, too).  Of course, the ideal solution is often to find a
>> non-blocking equivalent to the blocking API and use that instead (for
>> example, I know that txaws is a project that exists - perhaps it can do the
>> things to S3 that you want to do).
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140709/9b334006/attachment.html>

From glyph at twistedmatrix.com  Wed Jul  9 21:08:09 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 9 Jul 2014 20:08:09 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
 <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>
Message-ID: <35F88AD0-CCD4-4315-A244-D02452286086@twistedmatrix.com>


On Jul 9, 2014, at 12:27 AM, Bret Curtis <bret.curtis at amplidata.com> wrote:

> Travis is green before 2015

This sounds like an excellent campaign slogan.

(Also I just merged the PR to turn Travis green.  Lots of missing entries from the build matrix now though: good hunting to you all.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140709/ced19e25/attachment.html>

From poalman at gmail.com  Thu Jul 10 04:16:31 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 10 Jul 2014 11:16:31 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <53BC9C1E.3050907@thieprojects.ch>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
 <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
 <53BC9C1E.3050907@thieprojects.ch>
Message-ID: <CACgdh2gCxyE_B_r3m4CJbir-V90_sTExtn_KBT1zP26wUE9Hsg@mail.gmail.com>

On 9 July 2014 02:34, Werner Thie <werner at thieprojects.ch> wrote:
> On 7/8/14 6:30 AM, Paul Wiseman wrote:
>>
>> This is a google compute instance, so there is there firewall on
>> there. I did at first think it could be a hidden firewall rule google
>> have.
>>
>> I think I can rule anything like that out though. I tried to recreate
>> the problem on another box, and got to the point where i'd set up the
>> entire working environment without the issue (same firewall etc.). A
>> bit puzzled and thinking I'd somehow fixed the issue, I swapped the
>> new box for the live one and once I'd done that I then started to see
>> the exact same problem on the new box. (And the problem had gone away
>> on the ex-live box). So the only thing I can think of is it is somehow
>> being triggered by the traffic.
>
>
> What's the number of connections when this is occuring?
>
> Werner
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Thank you for the suggestions on this.

I did locate the issue in the end - it was unrelated to twisted so
sorry about the post!

Just incase it could help anyone in the future, the issue was the live
traffic did have an extra step of going though a load balancer, which
had an idle connection timeout of 60 seconds on it. I was kind of
surprised that this closed the data connection as the PASV connection
is established directly between the server and client, but I guess
when the load balancer kills the initial connection it also stops the
data connection some how too.


From exarkun at twistedmatrix.com  Thu Jul 10 13:32:53 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Jul 2014 19:32:53 -0000
Subject: [Twisted-Python] Tubes!
Message-ID: <20140710193253.7498.1641870942.divmod.xquotient.115@top>

Hello all,

Some of you may have heard rumors of some work in progress on a 
replacement for Twisted's IConsumer/IProducer interfaces.

Tubes have been largely Glyph's effort (though a lot of people have 
contributed in one way or another).  And a large effort it's been. 
Development is proceeding in a Twisted branch and comes to over three 
thousand lines of additions so far.

Given the large size of the implementation and the long time that this 
effort has been underway (I remember the Twisted meetup at the Rackspace 
offices that *I* attended when I was visiting SF... a year and a half 
ago... at which point tubes wasn't exactly a brand new project) I'd like 
to re-raise the idea that the best next step for the project is to see 
some distribution in its *current* state.

Specifically, I think it would be beneficial to set up a tubes project 
on Github under the Twisted organization and try for a release in the 
very near future.

I think this has several advantages over the status quo:

  1) As an independent project, tubes will attract more attention than it 
presently gets as a relatively unknown ticket & branch of Twisted.

  2) As a separate Python package, the logistics of actually using tubes 
are simpler (just consider how you might declare a dependency on a 
branch of Twisted - keeping in mind you may want to use tubes in a 
project that already depends on some version of Twisted).  It may not 
make sense to say that it is the same quality as Twisted proper right 
off the bat (on the other hand, it may well - I suspect tubes in its 
current form actually is a lot higher quality than large sections of 
Twisted) but that doesn't mean people (not to mention the tubes project) 
can't benefit from being able to experiment with it.

  3) Decoupling tubes from Twisted frees tubes from certain of Twisted's 
policies which are more challenging to follow for the kind of non- 
trivial, brand new code base that tubes is.  Technically we could just 
say that these policies don't apply to a tubes package *in* Twisted but 
this kind of subtle distinction is often lost on users (ie application 
developers).

    a) Twisted's compatibility policy need not apply.  It could either be 
sped up or abandoned more thoroughly.  I'm generally a fan of being 
backwards compatible even when you have few users because it actually 
makes development easier, but loosening the policy to say things might 
break if it's just really inconvenient to keep them working (whereas 
Twisted goes to the inconvenience to keep them working) seems 
reasonable.

    b) tubes can undergo a faster release cycle to benefit more from user 
feedback.

  4) At this point, a normal review of the tubes branch is going to be a 
problem.  We do not have good tools or mechanisms for dealing with 
branches this large.  The code in the current tubes branch can just 
become master of a new project.  Development going forward from this 
point should continue to follow the feature-branch, small-changes, pre- 
commit-peer-review process.  But those 3k lines are written already. 
Short of an extremely expensive effort to break the work up into 
smaller, self-contained pieces there's simply never going to be a *good* 
review in the typical style.

Additionally, it may turn out that tubes can remain independent 
indefinitely.  Someday perhaps Twisted would come to depend on it to 
allow the various protocols and applications implemented in Twisted to 
benefit from the superior abstractions it provides.  Or maybe once it 
has undergone a few iterations it will make sense to bring it back to 
Twisted.  I don't think this needs to be decided now.

There are downsides, of course.  All of the boring maintenance involved 
with having a separate project - setting up CI, actually doing the 
releases, etc.  Perhaps we could find some volunteers to help out with 
these tasks, though, in exchange for getting some great code out there?

I'm curious what the folks out there who develop applications using 
Twisted would find to be the easiest path forward.  I'm also curious to 
hear what Glyph thinks about all this. ;)

Jean-Paul


From glyph at twistedmatrix.com  Thu Jul 10 14:37:37 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Jul 2014 13:37:37 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>


On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> Some of you may have heard rumors of some work in progress on a replacement for Twisted's IConsumer/IProducer interfaces.
> 
> Tubes have been largely Glyph's effort (though a lot of people have contributed in one way or another).  And a large effort it's been. Development is proceeding in a Twisted branch and comes to over three thousand lines of additions so far.
> 
> Given the large size of the implementation and the long time that this effort has been underway (I remember the Twisted meetup at the Rackspace offices that *I* attended when I was visiting SF... a year and a half ago... at which point tubes wasn't exactly a brand new project) I'd like to re-raise the idea that the best next step for the project is to see some distribution in its *current* state.

Unfortunately, while I can see a lot of hypothetical benefit to what you're describing, I don't think this is appropriate in this specific case.  With other, superficially similar projects (large new features within Twisted), this might be the right thing to do, with some caveats about how we do new-feature integration that I discuss below.  Some of the aspects of tubes make it extra hard to split out though, despite the fact that it has few immediate dependencies.

The Tubes package implements a new primitive, which means that everything that uses it is going to be very tightly coupled to its precise semantics, and it has very little wiggle-room in terms of evolution once it's been released.

In its current state, Tubes is basically a research project.  Every focused burst of activity on it has resulted in a complete, 100% break in backwards compatibility, on the level of its API, its terminology, and its semantics.  Having a separate release might not imply that there will be a compatibility policy on par with the strictness of Twisted's current one, but it does usually imply some level of support or continued development.  If anyone had written an application against a previous revision of the Tubes branch, it would probably have been broken in the first place and it would definitely not still be working today (nor would it really be possible to port it or evolve it to use the new version without a complete rewrite).

While I currently believe that Tubes's API has firmed up and its current API is suitable for general purpose use, I have believed that at various points in the past as well when it was completely wrong.  This sentiment is very much of the "this time for sure!" variety, and I will not have confidence that it's actually complete until we have made it all the way through the documentation, examples, and testing of a full proof of concept - at which point I believe it would be suitable to include in a Twisted release anyway.

> Specifically, I think it would be beneficial to set up a tubes project on Github under the Twisted organization and try for a release in the very near future.
> 
> I think this has several advantages over the status quo:
> 
> 1) As an independent project, tubes will attract more attention than it presently gets as a relatively unknown ticket & branch of Twisted.

I would appreciate attention in the form of code review, commentary, and experimentation.  I would not appreciate attention in the form of actual users, though.  At least, not right now.  Maybe quite soon, though, depending on how the next few development sessions go.

> 2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted).  It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.

I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it.  Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero?  I will bet a significant amount of money that it's not 0% :-).

As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.

> 3) Decoupling tubes from Twisted frees tubes from certain of Twisted's policies which are more challenging to follow for the kind of non- trivial, brand new code base that tubes is.  Technically we could just say that these policies don't apply to a tubes package *in* Twisted but this kind of subtle distinction is often lost on users (ie application developers).

In this case, I actually want the twisted compatibility policy to apply.

> 4) At this point, a normal review of the tubes branch is going to be a problem.  We do not have good tools or mechanisms for dealing with branches this large.  The code in the current tubes branch can just become master of a new project.  Development going forward from this point should continue to follow the feature-branch, small-changes, pre- commit-peer-review process.  But those 3k lines are written already. Short of an extremely expensive effort to break the work up into smaller, self-contained pieces there's simply never going to be a *good* review in the typical style.

This is an issue either way, though.  And I believe that developing outside of Twisted just exacerbates the issue because it provides an opportunity for faster-paced development, which means more development, which means more addition of more lines of code, which means even more stuff to review eventually.

For example, the recently-landed logging branch was developed in Calendar Server first since we didn't want to develop something so central without experimenting with it in a real application first.  But that meant that by the time it landed it was a pretty substantial amount of code with many different features, rather than landing changes incrementally.  This created a massive code review problem, especially since we had no takers on my alternate code-review strategy proposals.  Since the branch evolved somewhat in response to feedback during its transplantation to Twisted and during the code review, we couldn't even plausibly say "this has been used in production" any more, since what landed ended up being different in some important details.  Don't get me wrong; it ended up being better in those details, the code review was totally worthwhile, but it nevertheless substantially lengthened development time.  (While I _very_ much appreciate Ralph heroically reviewing the whole branch by himself at PyCon, that doesn't really point to a scalable strategy for future feature development.)

So I am keenly interested in ways to address this problem rather than to work around it.  If we are going to try to develop new big Twisted features outside of Twisted,  maybe that's a good idea, but then we need a modified code-review policy for accepting those projects back in where they going to be subjected to code-review standards during development rather than in one giant burst at the end.

> Additionally, it may turn out that tubes can remain independent indefinitely.  Someday perhaps Twisted would come to depend on it to allow the various protocols and applications implemented in Twisted to benefit from the superior abstractions it provides.  Or maybe once it has undergone a few iterations it will make sense to bring it back to Twisted.  I don't think this needs to be decided now.

Again, for this specific case, I also don't think this would make a lot of sense.  The real benefit of Tubes will not be realized until all the protocols implemented within Twisted have at least a mechanism for integrating with them, if not being implemented using them entirely.  If you are writing a protocol that does websockets on one end and database traffic on the other, and you have a tube for processing something, if your inputs aren't founts and your outputs aren't drains, all the fancy flow-control features just won't work and you'll have minimal performance and robustness benefits.  (You might get some nice architectural benefits internally in your code, but you could get those with any kind of good composition idiom.)

> There are downsides, of course.  All of the boring maintenance involved with having a separate project - setting up CI, actually doing the releases, etc.  Perhaps we could find some volunteers to help out with these tasks, though, in exchange for getting some great code out there?

Even if my opinion were inverted on all of the points above, I really want to avoid doing this - I especially want to avoid the part where it somehow doesn't work on Twisted's heterogenous CI system when we try to reintegrate it after apparently working on some other one-version-of-linux CI infrastructure for some time :).

> I'm curious what the folks out there who develop applications using Twisted would find to be the easiest path forward.  I'm also curious to hear what Glyph thinks about all this. ;)

Thanks for the reminder that I need to be putting more time into this.  Hopefully I can put as much time into developing it this week as I put into writing this email ;-).

If you're writing this message because you want to use Tubes then the best way to do that would be to help finish developing it.  I'm happy to make some pair-programming appointments during the week - just let me know.  (Although this shrinks the pool of qualified reviewers even further, I'm sure if it's ready and we all start yelling about it, we can find someone to do it.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140710/8c551f88/attachment-0001.html>

From radix at twistedmatrix.com  Thu Jul 10 14:47:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 10 Jul 2014 15:47:33 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <etPan.53befbe6.46e87ccd.183@densetsu>


On July 10, 2014 at 3:40:26 PM, Glyph Lefkowitz (glyph at twistedmatrix.com) wrote:


On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:


2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted). ?It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.

I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it. ?Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero? ?I will bet a significant amount of money that it's not 0% :-).

As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.


For what it?s worth, if you add an ?a%n? to the end of a version, pip won?t install it unless you specify the version exactly. e.g., ?tubes? version ?0.1a1? won?t be found if you type ?pip install tubes?, only ?pip install tubes==0.1a1?.



--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140710/d06552f8/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 10 15:19:14 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Jul 2014 14:19:14 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <etPan.53befbe6.46e87ccd.183@densetsu>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <etPan.53befbe6.46e87ccd.183@densetsu>
Message-ID: <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>


On Jul 10, 2014, at 1:47 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> For what it?s worth, if you add an ?a%n? to the end of a version, pip won?t install it unless you specify the version exactly. e.g., ?tubes? version ?0.1a1? won?t be found if you type ?pip install tubes?, only ?pip install tubes==0.1a1?.


Also "pip install --pre tubes", I believe.  Nevertheless, people put that into a config file somewhere and forget about it forever ;).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140710/464e80a2/attachment.html>

From donald at stufft.io  Thu Jul 10 16:04:08 2014
From: donald at stufft.io (Donald Stufft)
Date: Thu, 10 Jul 2014 18:04:08 -0400
Subject: [Twisted-Python] Tubes!
In-Reply-To: <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <etPan.53befbe6.46e87ccd.183@densetsu>
 <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>
Message-ID: <9733EAF3-F67C-4782-BD7D-48DAE5CABB66@stufft.io>

Hmm, perhaps ?pre shouldn?t be allowed in config files :V

On Jul 10, 2014, at 5:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> 
> On Jul 10, 2014, at 1:47 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
>> For what it?s worth, if you add an ?a%n? to the end of a version, pip won?t install it unless you specify the version exactly. e.g., ?tubes? version ?0.1a1? won?t be found if you type ?pip install tubes?, only ?pip install tubes==0.1a1?.
> 
> 
> Also "pip install --pre tubes", I believe.  Nevertheless, people put that into a config file somewhere and forget about it forever ;).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140710/43dce8a7/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140710/43dce8a7/attachment.pgp>

From exarkun at twistedmatrix.com  Thu Jul 10 18:23:04 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 11 Jul 2014 00:23:04 -0000
Subject: [Twisted-Python] Tubes! (package metadata and version
	constraints)
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <20140711002304.7498.1425758629.divmod.xquotient.124@top>

On 10 Jul, 08:37 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:
>>2) As a separate Python package, the logistics of actually using tubes 
>>are simpler (just consider how you might declare a dependency on a 
>>branch of Twisted - keeping in mind you may want to use tubes in a 
>>project that already depends on some version of Twisted).  It may not 
>>make sense to say that it is the same quality as Twisted proper right 
>>off the bat (on the other hand, it may well - I suspect tubes in its 
>>current form actually is a lot higher quality than large sections of 
>>Twisted) but that doesn't mean people (not to mention the tubes 
>>project) can't benefit from being able to experiment with it.
>
>I would love it if there were a way to release a package in an actually 
>experimental state, and not just have the release of a package 
>implicitly tell people that it's time to put it into production and 
>demand long-term support for it.  Quick sanity check: go run 'pip 
>freeze' in a production virtualenv you're running - what percentage of 
>the version numbers that come back start with a zero?  I will bet a 
>significant amount of money that it's not 0% :-).
>
>As it stands, if you're not willing to use a random outdated branch of 
>Twisted with unknown bugs that may change without warning, you're 
>probably not willing to adopt Tubes yet.

I think you missed part of my point here.

I want to try tubes and see if they make my application simpler or 
better or faster or whatever.  My application depends on Twisted >= 
14.0.0.  It doesn't matter how or why: that's what the metadata says and 
I can't use an older version of Twisted unless I do a bunch of stupid 
package/distribution related hacking that I don't want to do.  *So* much 
of the Python tooling has now moved to requiring and respecting explicit 
dependency declarations that trying to side-step these now is a 
significant hassle.  Separating tubes from Twisted solves this problem.

It's not at all a question of whether the code is stable or production 
ready or even works at all, it's a matter of packaging constraints.

Jean-Paul


From glyph at twistedmatrix.com  Fri Jul 11 00:39:22 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 10 Jul 2014 23:39:22 -0700
Subject: [Twisted-Python] Tubes! (package metadata and version
	constraints)
In-Reply-To: <20140711002304.7498.1425758629.divmod.xquotient.124@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <20140711002304.7498.1425758629.divmod.xquotient.124@top>
Message-ID: <E255B306-32D2-421C-8805-16F6B9F13882@twistedmatrix.com>


On Jul 10, 2014, at 5:23 PM, exarkun at twistedmatrix.com wrote:

> On 10 Jul, 08:37 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:
>>> 2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted).  It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.
>> 
>> I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it.  Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero?  I will bet a significant amount of money that it's not 0% :-).
>> 
>> As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.
> 
> I think you missed part of my point here.
> 
> I want to try tubes and see if they make my application simpler or better or faster or whatever.  My application depends on Twisted >= 14.0.0.  It doesn't matter how or why: that's what the metadata says and I can't use an older version of Twisted unless I do a bunch of stupid package/distribution related hacking that I don't want to do.  *So* much of the Python tooling has now moved to requiring and respecting explicit dependency declarations that trying to side-step these now is a significant hassle.  Separating tubes from Twisted solves this problem.
> 
> It's not at all a question of whether the code is stable or production ready or even works at all, it's a matter of packaging constraints.

If you want to set up a development environment to work on this and try it out, I think you can do it right now.  I believe this simple and intuitive incantation will work:

pip install -e 'git+git at github.com:/twisted/twisted at 3c10ad3323f86d7194a3a4c9fd4e2e1bcd441fec#egg=Twisted-tubes-1956-7'

That's a post-14.0.0 package with the appropriate metadata (and I didn't cheat and merge forward first or anything, this is the most recent branch as of several weeks now).  Doing exactly that in a mktmpenv and then doing 'pip install twisted==14.0.0' results in a 'requirement already satisfied' for me, and everything imports as expected.

I think there's still probably stuff to talk about regarding the rest of your message but if this can get you past your immediate hurdle that would be great :).

-glyph



From tobias.oberstein at tavendo.de  Fri Jul 11 11:16:32 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 11 Jul 2014 10:16:32 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <634914A010D0B943A035D226786325D44479074C61@EXVMBX020-12.exch020.serverdata.net>

> Specifically, I think it would be beneficial to set up a tubes project on Github
> under the Twisted organization and try for a release in the very near future.
> 
> I think this has several advantages over the status quo:

+1 for splitting into a separate project.

even if Tubes would be considered experimental / mostly unusable right now.

the best thing that could happen: people actually start playing around with it. which provides real-world feedback.

"finishing" it in the backroom and only later release something "ready" without gathering real-world feedback: that's a risk IMO, rather than good practice.

I guess I am a proponent of the "release early release often" mantra.

better release something unfinished and gain feedback, than release something "finished" not meeting user expectations.

just my 2cts,

cheers,
/Tobias 


From tom.prince at ualberta.net  Sat Jul 12 14:34:09 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 12 Jul 2014 14:34:09 -0600
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <87wqbico5a.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> While I currently believe that Tubes's API has firmed up and its 
> current API is suitable for general purpose use, I have believed 
> that at various points in the past as well when it was 
> completely wrong. This sentiment is very much of the "this time 
> for sure!" variety, and I will 
> [...]
> In this case, I actually want the twisted compatibility policy 
> to apply.

These two points seem to be somewhat conflicting.

> So I am keenly interested in ways to address this problem rather 
> than to work around it.  If we are going to try to develop new 
> big Twisted features outside of Twisted,  maybe that's a good 
> idea, but then we need a modified code-review policy for 
> accepting those projects back in where they going to be 
> subjected to code-review standards during development rather 
> than in one giant burst at the end.

This seems like a reasonable thing to do. If all the code has been 
subject to review according to twisteds procedure, then it would 
seem to be reasonable to require that the changes needed to move 
the code in to twisted would need to be reviewed (so moving files 
around and adjusting imports and the like).

> Even if my opinion were inverted on all of the points above, I 
> really want to avoid doing this - I especially want to avoid the 
> part where it somehow doesn't work on Twisted's heterogenous CI 
> system when we try to reintegrate it after apparently working on 
> some other one-version-of-linux CI infrastructure for some time 
> :).

It would certainly be possible to hook twisted's CI system to 
additional projects.


From trac at twistedmatrix.com  Sun Jul 13 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Jul 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1405231515.72.8984990429861400467@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140713/5a427695/attachment.html>

From therve at twistedmatrix.com  Sun Jul 13 07:18:40 2014
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Sun, 13 Jul 2014 15:18:40 +0200
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <CA+G4quj_DrFoDrCuVeazJD3LxY7vM1LtOyw0pRrjX4+S8VN8XQ@mail.gmail.com>

On Thu, Jul 10, 2014 at 10:37 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> While I currently believe that Tubes's API has firmed up and its current API
> is suitable for general purpose use, I have believed that at various points
> in the past as well when it was completely wrong.  This sentiment is very
> much of the "this time for sure!" variety, and I will not have confidence
> that it's actually complete until we have made it all the way through the
> documentation, examples, and testing of a full proof of concept - at which
> point I believe it would be suitable to include in a Twisted release anyway.

I think this is a wrong approach. When people say "You never get it
right the first time", I don't think they mean the first time they
write it, but rather the first time somebody else uses it. You'll
never be able to release something perfect.

> So I am keenly interested in ways to address this problem rather than to
> work around it.  If we are going to try to develop new big Twisted features
> outside of Twisted,  maybe that's a good idea, but then we need a modified
> code-review policy for accepting those projects back in where they going to
> be subjected to code-review standards during development rather than in one
> giant burst at the end.

Now you're talking about the real issue. It's almost impossible to
write anything non-trivial in Twisted nowadays. One part is the
compatibility policy, with the whole "Who knows who may subclass that
thing. Don't ever change an attribute!". Overall we have a development
process averses to change. That's why tubes isn't released yet: you
know that if we put it out there we won't be able to fix it. For the
same reasons we haven't been able to fix Web or Conch.

If the answer is to put more stuff outside, I think it's rather sad.
I'd hope it would be to make the development process more lightweight.

--
Thomas


From rutt.4 at osu.edu  Sun Jul 13 08:16:05 2014
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Sun, 13 Jul 2014 10:16:05 -0400
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
	reactor.resolve()
Message-ID: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>

Hi,

I need to do a DNS resolution of a hostname to an IPv4 address in order to
then send out a UDP packet via twisted?s APIs.  There appears to be 2 ways
to do this.  Is it better to use twisted.names.client.getHostByName(), or
is it better to use reactor.resolve()?  Is there a bias for one over the
other?  Is one deprecated and the other isn?t?

BTW they appear to behave differently; at work, I have a hostname that the
one (getHostByName) resolves to None in the callback, and the other
(reactor.resolve) resolves to a valid IP address in the callback.  That
analysis is based on twisted 12.3.0 on linux.  Naturally I'm preferring
reactor.resolve at this point, as it works better for the hostname in
question (it happens to be a hostname that uses a CNAME record to alias to
another hostname).

Thanks,


-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140713/c0485e88/attachment.html>

From exarkun at twistedmatrix.com  Sun Jul 13 11:47:22 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jul 2014 17:47:22 -0000
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
 reactor.resolve()
In-Reply-To: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
References: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
Message-ID: <20140713174722.7498.531797607.divmod.xquotient.137@top>

On 02:16 pm, rutt.4 at osu.edu wrote:
>Hi,
>
>I need to do a DNS resolution of a hostname to an IPv4 address in order 
>to
>then send out a UDP packet via twisted?s APIs.  There appears to be 2 
>ways
>to do this.  Is it better to use twisted.names.client.getHostByName(), 
>or
>is it better to use reactor.resolve()?  Is there a bias for one over 
>the
>other?  Is one deprecated and the other isn?t?

`reactor.resolve` is "do something, who knows what really, to turn a 
name into an IPv4 address".

`twisted.names.client.getHostByName` is "use Twisted's DNS client 
implementation to issue the necessary DNS queries to resolve a name into 
an IPv4 or IPv6 address".

If you definitely only care about IPv4 then `reactor.resolve` is going 
to work correctly in more situations.  By default it will use the system 
resolver.  Therefore, by default, you will get whatever weird 
configuration the system resolver has been given (for example: use 
/etc/hosts or use mDNS or use NIS or YP or whatever.

Note that `reactor.resolve` is a pluggable interface and application 
code is allowed to substitute an alternate resolver implementation which 
may work in some other way.

If you care specifically about DNS or you need IPv6 or you have a reason 
to want to avoid threads (which, by default, `reactor.resolve` uses), 
you might prefer to use `twisted.names.client` directly.

Most applications will probably be okay with `reactor.resolve` but I 
imagine this could change as IPv6 use gradually becomes more widespread.

Jean-Paul


From kebin70 at gmail.com  Mon Jul 14 15:11:21 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Mon, 14 Jul 2014 14:11:21 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
 <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
 <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>
Message-ID: <CAA-sNEZg3wQanJu7qSfG2oxy3yPHF-70Zabui_xYJMJSSs7cFA@mail.gmail.com>

finalizing - maybe I'm not describing my usage correctly.  I've used
reactor.callLater(0,blah) as a means of starting a unit of work the
by-product of which the caller didn't need.

this is really a case of laying tracks for 2 years not fully comprehending
the train coming down the tracks behind me!  I sorta refused to learn/use
inlinecallbacks or generators and I've never used callInThread until now.
I inserted that into my S3 upload pipeline and it works, simplifying my
code but detaches the caller from reactive failure.

The mechanism you've described is different ~ a callLater to an estimated
point of work completion, maybe a holding pattern if work isn't completed
after the delay, and maybe not a bad means of observation (?)...but yes
disastrous if the callLater function is wired poorly.  Unless I'm
misreading.

Anyway I'm sure my code is illogical since I've was left to my own devices
to solve problems of my own choosing.

The by-product you can see here www.pokertalon.com - a single connection
html5 app.


On Wed, Jul 9, 2014 at 10:51 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> It might be, but I can't think of a reason off hand why it ever _should_
> be.  I can kind of see how it might work, but if your "async" process ever
> takes longer than your callLater delay it will break, and probably quite
> horribly.
>
>
> On Wed, Jul 9, 2014 at 12:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> Another "Oh right" twisted moment.  callInThread instead of callLater?
>>
>> This is a case where I've been laying tracks for 2 years without totally
>> understanding the train that was eventually coming down the tracks.  I
>> guess I implicitly understood by wanting to move to a separate reactor as a
>> separate thread, and in the past when I've used callLater it's encapsulated
>> non-blocking code.
>>
>> In this sense is callLater ever utilized as a pseudo asynchronous method?
>>
>>
>>
>> On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:
>>
>>> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>>>
>>>> calling reactor.callLater within qt4reactor in an attempt to async non
>>>> webkit work but not seeing expected behavior.  Webkit locks while the
>>>> callLater function executes.
>>>>
>>>
>>> `callLater` does not make a blocking function into a non-blocking one.
>>> It just calls a function after a specified delay.  If the function blocks,
>>> then the reactor will block when it gets around to calling it.
>>>
>>> If you need to call blocking APIs you may need to call them in a
>>> separate thread (Twisted includes a threadpool that can help you with this)
>>> or a separate process (Twisted has some APIs for launching and interacting
>>> with other processes, too).  Of course, the ideal solution is often to find
>>> a non-blocking equivalent to the blocking API and use that instead (for
>>> example, I know that txaws is a project that exists - perhaps it can do the
>>> things to S3 that you want to do).
>>>
>>> Jean-Paul
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> --
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140714/a33c2235/attachment.html>

From alex.gaynor at gmail.com  Wed Jul 16 12:02:07 2014
From: alex.gaynor at gmail.com (Alex Gaynor)
Date: Wed, 16 Jul 2014 18:02:07 +0000 (UTC)
Subject: [Twisted-Python] Twisted Trac
Message-ID: <loom.20140716T200054-866@post.gmane.org>

Hi all,

A short while ago Twisted's trac installation was changed to reject new tickets
from anyone except a special white listed group.

As of yesterday I have reverted this change, (and turned the spam filter back
on). If you experience any issues trying to post, or notice and spam, please
feel free to reach out to me.

Alex



From glyph at twistedmatrix.com  Wed Jul 16 15:40:48 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Jul 2014 14:40:48 -0700
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
Message-ID: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>

There's a new Python-based asynchronous SSH client and server in town:

<http://asyncssh.timeheart.net/#>

This looks to have a much more straightforward API and way better documentation than Conch, although it's of course python 3.4+ only and lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal handling features.

I hope that this project will spur a little friendly competition from Conch's maintainers, such as we are :-).

(Just a thought, it would be great if <https://twistedmatrix.com/documents/current/conch/howto/index.html> looked more like that web page, in terms of how long the examples are, what is demonstrated, and what is documented...)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140716/8dd71041/attachment.html>

From adi at roiban.ro  Thu Jul 17 03:34:10 2014
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 17 Jul 2014 12:34:10 +0300
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
In-Reply-To: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
Message-ID: <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>

Hi,

On 17 July 2014 00:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> There's a new Python-based asynchronous SSH client and server in town:
>
> <http://asyncssh.timeheart.net/#>
>
>
> This looks to have a much more straightforward API and *way* better
> documentation than Conch, although it's of course python 3.4+ only and
> lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal
> handling features.
>
> I hope that this project will spur a little friendly competition from
> Conch's maintainers, such as we are :-).
>
>
How did you found this project? I could not find it on PyPi and I failed to
find any information about how to contribute to the project... I did sent
an email to the author.

I could not find a suite of automated tests.  I hope that asyncssh is
willing to compete with Twisted Conch SSH and improve on this :)

I only looked quickly over the server examples but I am a bit worried about
the SSH key auth example and how SSH key validation is done .. or not done.

I prefer Conch API. For example I don't know what to say about asyncssh
begin_auth()  method, which when it returns True, it cause the
authentication to be skipped... I would prefer a name like
should_ignore_authentication... or something which describes better why and
how it should be used.

http://asyncssh.timeheart.net/api.html#asyncssh.SSHServer.begin_auth

Conch source code is very readable (for it's size and age) and I manage to
put it into use just by reading the code and docstrings/API docs.

I started to learn Conch with examples from Stack Overflow and I remember
that Jean-Paul was very active there.... so mabye conch documentation can
be improved by importing some of those examples.

Contributing to Twisted is a PITA so I guess that for some people
(companies) this is a good reason to start a new (single protocol targeted)
project.( ex Tornado).

At this stage, asyncssh does not have a better public development process.


Cheers,

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140717/31463c6c/attachment.html>

From glyph at twistedmatrix.com  Thu Jul 17 04:17:38 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jul 2014 03:17:38 -0700
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
In-Reply-To: <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
 <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>
Message-ID: <509F35FA-BB99-4CF0-BAB8-580EBB02F65E@twistedmatrix.com>


On Jul 17, 2014, at 2:34 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
> 
> On 17 July 2014 00:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> There's a new Python-based asynchronous SSH client and server in town:
> 
> <http://asyncssh.timeheart.net/#>
> 
> This looks to have a much more straightforward API and way better documentation than Conch, although it's of course python 3.4+ only and lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal handling features.
> 
> I hope that this project will spur a little friendly competition from Conch's maintainers, such as we are :-).
> 
>  
> How did you found this project?

The author announced it on the Tulip list.  Why do you ask?

> I could not find it on PyPi and I failed to find any information about how to contribute to the project... I did sent an email to the author.

It's on Github.  There's a link on the author's page.

> I could not find a suite of automated tests.  I hope that asyncssh is willing to compete with Twisted Conch SSH and improve on this :)

Huh, I hadn't gotten that far :-).

> (...) I prefer Conch API. (...)

Glad to hear it :).

> Conch source code is very readable (for it's size and age) and I manage to put it into use just by reading the code and docstrings/API docs.

I'm definitely glad that people can figure out how to use Conch, even given the state of its documentation :).  But it's definitely more of a struggle than it could be.  I think asyncssh's documentation style is one to aspire to: it's very straightforward, and tells you how to do useful things with very minimal examples.  I think there are some clunky bits of the Conch API which could be cleaned up, but even totally as-is we could probably asyncssh's their documentation outline, and possibly toss in a few more goodies as well.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140717/4d717a71/attachment.html>

From p.mayers at imperial.ac.uk  Thu Jul 17 05:01:07 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Jul 2014 12:01:07 +0100
Subject: [Twisted-Python] some competition and hopefully inspiration for
 conch
In-Reply-To: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
Message-ID: <53C7ACF3.4070009@imperial.ac.uk>

On 16/07/14 22:40, Glyph Lefkowitz wrote:
> There's a new Python-based asynchronous SSH client and server in town:
>
>     <http://asyncssh.timeheart.net/#>
>
>
> This looks to have a much more straightforward API and /way/ better

The client endpoint API is great. It is what Conch should always have 
been and is a pleasure to work with, so congrats to the authors of that. 
It'll be even better when #6617 lands!

It would be great to have a conch server endpoint API.


From jonas.brunsgaard at gmail.com  Fri Jul 18 03:26:54 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Fri, 18 Jul 2014 11:26:54 +0200
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
	reactor.resolve()
In-Reply-To: <20140713174722.7498.531797607.divmod.xquotient.137@top>
References: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
 <20140713174722.7498.531797607.divmod.xquotient.137@top>
Message-ID: <CACVXvXow1vhS66iE9e=K79vUwcqUp71nCGDMqPTzP=NtC+4vuQ@mail.gmail.com>

Jean-Paul, you knowledge about twisted and your willingness to help is just
amazing for the framework ;)

http://www.ihighfive.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140718/4b0bd13e/attachment.html>

From tgutu at ml.sun.ac.za  Fri Jul 18 08:24:08 2014
From: tgutu at ml.sun.ac.za (Tapiwa Gutu)
Date: Fri, 18 Jul 2014 16:24:08 +0200
Subject: [Twisted-Python] Bug in DeferredLock?
Message-ID: <CAP9j8O6SBfcbUO6KAW4U-WPci7Zq4+CSK+SBWrPe44-PqVrvvQ@mail.gmail.com>

We recently started experiencing the following error: *RuntimeError:
maximum recursion depth exceeded while calling a Python object*

After a fair bit of debugging we eventually found the problem and
implemented a fix for it in our codebase. We found that if a waiting
queue on a DeferredLock is ~125 (depending on call  depth) the error can
error. I recommend releasing the lock in a callLater.

The offending line is here:
https://twistedmatrix.com/trac/browser/trunk/twisted/internet/defer.py#L1360
And the script below can be used to reproduce the issue.

#!/usr/bin/env python
from twisted.internet import defer, reactor

LOCK = defer.DeferredLock()
FIRST_RUN = True

def deferred_sleep(delay):
    d = defer.Deferred()
    delay = reactor.callLater(delay, d.callback, True)
    d.delay = delay
    return d

@defer.inlineCallbacks
def synchronized_call():
    global FIRST_RUN
    yield LOCK.acquire()
    try:
        if FIRST_RUN:
            FIRST_RUN = False
            yield deferred_sleep(2)
            print "Queue length: %s" % len(LOCK.waiting)
    finally:
        LOCK.release()
        #reactor.callLater(0, lambda: LOCK.release())


if __name__ == '__main__':
    count = 125
    def start_test():
        for i in xrange(count):
            synchronized_call()

    reactor.callWhenRunning(start_test)
    reactor.run()

<http://www.ml.sun.ac.za/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140718/8342cb9e/attachment.html>

From trac at twistedmatrix.com  Sun Jul 20 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Jul 2014 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1405836317.14.920189098687040198@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140720/efe3447e/attachment.html>

From eburus at gmail.com  Sun Jul 20 01:20:53 2014
From: eburus at gmail.com (Alexander Burtsev)
Date: Sun, 20 Jul 2014 11:20:53 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
 <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
 <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
 <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
 <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
Message-ID: <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>

Congrats bro! stick to your course.

? ?????????, ????????? ??????

Skype: eburus
FB: www.facebook.com/eburus
http://bramabrama.com


On 28 Apr 2011, at 16:53, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:

> Yes, I'll drop it as soon as I won't need it anymore (probably in one week).
> 
> 2011/4/28 Laurens Van Houtven <_ at lvh.cc>
> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to ignore your pyzmq fork, right?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> Andrey Smirnov,
> Qik Web Team Lead
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140720/ce3277f3/attachment.html>

From meejah at meejah.ca  Sun Jul 20 16:27:37 2014
From: meejah at meejah.ca (meejah)
Date: Mon, 21 Jul 2014 02:27:37 +0400
Subject: [Twisted-Python] ANN: txtorcon 0.10.1
Message-ID: <868unnsm1y.fsf@atlantis.meejah.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

A new minor release of txtorcon exists, fixing a couple bugs
introduced along with the endpoints feature in 0.10.0:

 * issue #78: Add tox tests and fix for Twisted 12.0.0 (and prior), as
   this is what Debian squeeze ships

 * issue #77: properly expand relative and tilde paths for
   hiddenServiceDir via endpoints

 * fix bug incorrectly issuing RuntimeError in brief window of time on
   event-listeners

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.10.1
   https://github.com/meejah/txtorcon/releases/tag/v0.10.1

sha256sum reports:

33f04523329b14accb2054b81c5da887c28b402c797ba895dc1ee58824e107f1  txtorcon-0.10.1-py2-none-any.whl
7a6e8fab71fd05c223d866b60b998cf308661ef1fc87d94e06c3b51f4ada4a6a  txtorcon-0.10.1.tar.gz

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEbBAEBAgAGBQJTzD25AAoJEMJgKAMSgGmnB8IH+MnRyCCKMgPJ2GjV01K+PVaU
UgvUXhaqLdQUbViKeYy7KNst9d8Dm3ejHr21kedE8oeY/ztHlLdvtJtgWWvTOrTI
qqh4wWfBVHeibSgsEzwNVdeJ3MtERPWuCrIkIWnathbVjfnkRW+cLPOtJUWtSi/d
pdN4ZC+K1jBvSeHPCDhf8sXSqdzsOxXOWn/9SUaa70c7kMrbxjMxO1Jw/miqftMq
/wo0vyXn4EeEdURa9hYFpUqgUbUFl6C1KiELNeHWtwGbGWku17bNgQn5HH7uY4/6
RODYBaAT327062m81ig7zQ6MmxKcngIG4Ic3qvJYeLerO/EnnNvzSs3Q+EGQeg==
=nsEx
-----END PGP SIGNATURE-----


From jonas.brunsgaard at gmail.com  Mon Jul 21 03:09:30 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 21 Jul 2014 11:09:30 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
 <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
 <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
 <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
 <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
 <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>
Message-ID: <CACVXvXqgMM=Yp8t3xg6R=vLdQswzahLw_1u9gfaL-OGYyoy3NA@mail.gmail.com>

Thank you Andrey for making this release possible ;)


On Sun, Jul 20, 2014 at 9:20 AM, Alexander Burtsev <eburus at gmail.com> wrote:

> Congrats bro! stick to your course.
>
> ? ?????????, ????????? ??????
>
> Skype: eburus
> FB: www.facebook.com/eburus
> http://bramabrama.com
>
>
> On 28 Apr 2011, at 16:53, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:
>
> Yes, I'll drop it as soon as I won't need it anymore (probably in one
> week).
>
> 2011/4/28 Laurens Van Houtven <_ at lvh.cc>
>
>> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
>> ignore your pyzmq fork, right?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Andrey Smirnov,
> Qik Web Team Lead
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140721/ddc632ab/attachment.html>

From jonas.brunsgaard at gmail.com  Mon Jul 21 03:11:14 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 21 Jul 2014 11:11:14 +0200
Subject: [Twisted-Python] EuroPython2014
Message-ID: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>

Any of your guys at Euro Python in Berlin, right now? If so, I would like
to invite other Twisted users/dev for a beer later.. ;)

--
Jonas Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140721/5a1be2d8/attachment.html>

From m-lists at the-moon.net  Mon Jul 21 05:25:26 2014
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 21 Jul 2014 12:25:26 +0100
Subject: [Twisted-Python] EuroPython2014
In-Reply-To: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
References: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
Message-ID: <CABefbUrkw8rquRfUksw6KuhqUYWb3dki4dfiPT5bT9HjZdTJ8A@mail.gmail.com>

On 21 July 2014 10:11, Jonas Brunsgaard <jonas.brunsgaard at gmail.com> wrote:
> Any of your guys at Euro Python in Berlin, right now? If so, I would like to
> invite other Twisted users/dev for a beer later.. ;)

Hi Jonas,

I'm currently trying to work on my Twisted Names talk and hoping to do
a Berlin cycle tour this afternoon. But I'd be up for a beer later
this evening. Around 8.30pm?

Maybe post on https://duckling.us/events/ep2014/ and Twitter (#ep14) too.

Otherwise we should definitely meet up during the conference and try
and organise a sprint for the weekend.

-RichardW.
@wallrj


From m-lists at the-moon.net  Fri Jul 25 11:13:28 2014
From: m-lists at the-moon.net (Richard Wall)
Date: Fri, 25 Jul 2014 19:13:28 +0200
Subject: [Twisted-Python] EuroPython2014
In-Reply-To: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
References: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
Message-ID: <CABefbUoxqB8ry0K3v4hzXfDJZ6XegKX4Tjc9i1V+E-xomiRYWg@mail.gmail.com>

On 21 July 2014 11:11, Jonas Brunsgaard <jonas.brunsgaard at gmail.com> wrote:
> Any of your guys at Euro Python in Berlin, right now? If so, I would like to
> invite other Twisted users/dev for a beer later.. ;)

Hey Jonas,

You were asking me about which tickets we can work on at the sprint tomorrow.

I created a page with some links to the existing list of "easy"
tickets. But I've found before that these are not all as easy as they
first seem; and some are actually already partially addressed. I'll
try and do some filtering before we start tomorrow.

 * https://twistedmatrix.com/trac/wiki/EuroPython2014

I've also linked to some of the development process documentation.

If anyone else has ideas about good tickets for beginners or high
urgency tickets please edit that wiki page.

Here's a link to the PyconUK sprint report to give you an idea of the
sort of things people worked on there:
 * https://twistedmatrix.com/pipermail/twisted-python/2013-September/027457.html

-RichardW.


From trac at twistedmatrix.com  Sun Jul 27 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Jul 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1406441115.86.6255079885658001875@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140727/8f4222c6/attachment.html>

From sank.daniel at gmail.com  Sun Jul 27 20:26:02 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 27 Jul 2014 19:26:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
Message-ID: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>

I've been trying to address ticket 7274

https://twistedmatrix.com/trac/ticket/7274

To do this, I am trying to understand the PB protocol. While I found a spec
for banana in twisted-daniel/docs/core/specifications/banana.rst, I have
not found anything similar for pb. I've been piecing it together by writing
little test scripts, but it is slow going. In particular, it is very
difficult to understand the meaning of verbs like "cook" and "preserve" and
nouns like "persistent store" without some global picture of what's going
on.

1. Is there some kind of narrative documentation on how pb works under the
hood?

2. Is there a specification for the pb dialect of banana?

3. Is there anyone else out there interested enough in pb to want to work
with me to figure things out and produce documentation if there isn't any
currently?

Sincerely,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140727/5a0b0f4b/attachment.html>

From _ at lvh.io  Mon Jul 28 02:54:54 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 28 Jul 2014 10:54:54 +0200
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
Message-ID: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>

Honored twistedeers,


Consider the following (blocking) decorator, which runs a function in a transaction:

def _with_transaction(f):
    def decorated(self, *args, **kwargs):
        conn = self.engine.connect()
        txn = conn.begin()

        try:
            result = f(self, conn, *args, **kwargs)
        except:
            txn.rollback()
            raise
        else:
            txn.commit()
            return

    return decorated

Where I to translate this logic verbatim to @inlineCallbacks, I get:

def _with_transaction(f):
    @inlineCallbacks
    def decorated(self, *args, **kwargs):
        conn = yield self.engine.connect()
        txn = yield conn.begin()

        try:
            result = yield f(self, conn, *args, **kwargs)
        except:
            yield txn.rollback()
            raise
        else:
            yield txn.commit()
            returnValue(result)

    return decorated

However, there?s a bug here! In the except clause: there?s an (implicit) current exception, to be re-raised by the bare raise statement. Unfortunately, when doing yield txn.rollback(), that conveniently eats said exception.

Of course, there?s a fairly simple workaround involving catching BaseException and capturing the exception instance explicitly.

I?m wondering if this is just a leaky abstraction, or if I should report it as a bug in @inlineCallbacks?


cheers
lvh



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140728/0e78902c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140728/0e78902c/attachment.pgp>

From glyph at twistedmatrix.com  Mon Jul 28 16:56:04 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Jul 2014 15:56:04 -0700
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
In-Reply-To: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
Message-ID: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>


On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Honored twistedeers,

Seriously, we need to come up with a good collective noun for ourselves one day.  We should have a referendum or something.

> Consider the following (blocking) decorator, which runs a function in a transaction:
> 
> def _with_transaction(f):
>     def decorated(self, *args, **kwargs):
> ...
>        try:
>             result = f(self, conn, *args, **kwargs)
>         except:
>             txn.rollback()
>             raise
> ...
> Where I to translate this logic verbatim to @inlineCallbacks, I get:
> 
> def _with_transaction(f):
>     @inlineCallbacks
>     def decorated(self, *args, **kwargs):
> ...
>         try:
>             result = yield f(self, conn, *args, **kwargs)
>         except:
>             yield txn.rollback()
>             raise
> ...
> 
> However, there?s a bug here! In the except clause: there?s an (implicit) current exception, to be re-raised by the bare raise statement. Unfortunately, when doing yield txn.rollback(), that conveniently eats said exception.

This is actually true of _with_transaction as well.  Any code, anywhere, might call sys.exc_clear(), or do some interpreter shenanigans that accidentally make the equivalent happen.  So when you are calling "rollback" on your transaction and perhaps running application code in a post-rollback hook (because your database has that, right?  you totally need it for some things).

And of course rollback can *itself* fail which wipes out the exception anyway - is that what you want to happen in that condition?

> Of course, there?s a fairly simple workaround involving catching BaseException and capturing the exception instance explicitly.
> 
> I?m wondering if this is just a leaky abstraction, or if I should report it as a bug in @inlineCallbacks?

I don't think there's any such thing as "just" a leaky abstraction :-).  If an abstraction leaks in an unspecified way, it's a bug.  Report away.

Personally, I'd do something like this:

try:
    ...
except:
    captured = Failure()
    yield txn.rollback()
    yield captured

because I find that it's more readable - rather than relying on ephemeral, manipulable state which should (but doesn't necessarily) follow conventions related to indentation, I explicitly capture the implicit state, on the only line of code where it's guaranteed to be the right thing.

Also worth noting that yielding the Failure will fail the Deferred returned by your inlineCallbacks function, implicitly terminating the execution of that function.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140728/9ae7b091/attachment.html>

From waterbug at pangalactic.us  Mon Jul 28 17:44:43 2014
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Mon, 28 Jul 2014 19:44:43 -0400
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
 abstraction or bug?
In-Reply-To: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
Message-ID: <53D6E06B.3020404@pangalactic.us>

On 07/28/2014 06:56 PM, Glyph Lefkowitz wrote:
>
> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
>> Honored twistedeers,
>
> Seriously, we need to come up with a good collective noun for ourselves
> one day.  We should have a referendum or something.

I vote for "minions" ... :)

Steve



From p.mayers at imperial.ac.uk  Tue Jul 29 03:23:11 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 29 Jul 2014 10:23:11 +0100
Subject: [Twisted-Python] Process pools and logging
Message-ID: <53D767FF.6070603@imperial.ac.uk>

Before I re-invent the wheel, is there a twisted library that will let me:

  1. Fire up child worker processes
  2. That log to a logObserver coming out in the parent
  3. Manage the whole lot as a .tac file

Note I *don't* need deferToProcess or similar in this situation. I just 
need to fire up N processes but have them managed by and logging "to" a 
single parent controlled by twistd.

(FWIW, they're stateless workers that pull from a work queue).


From burak at nehbit.net  Tue Jul 29 03:30:07 2014
From: burak at nehbit.net (burak at nehbit.net)
Date: Tue, 29 Jul 2014 12:30:07 +0300
Subject: [Twisted-Python] Process pools and logging
In-Reply-To: <53D767FF.6070603@imperial.ac.uk>
References: <53D767FF.6070603@imperial.ac.uk>
Message-ID: <44369EDE-6719-4B4A-B839-7DFC0A7C03CF@nehbit.net>

Hey Phil,

If I am understanding you correctly, you should be able to do some of these with Ampoule. I am doing all but the last (tac) on my app. (Aether)

Ampoule definitely needs some love, though. If I had time I'd possibly be taking care of it, since it seems to be abandoned.

Burak
   
Sent from my phone 

> On Jul 29, 2014, at 12:23, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> Before I re-invent the wheel, is there a twisted library that will let me:
> 
> 1. Fire up child worker processes
> 2. That log to a logObserver coming out in the parent
> 3. Manage the whole lot as a .tac file
> 
> Note I *don't* need deferToProcess or similar in this situation. I just need to fire up N processes but have them managed by and logging "to" a single parent controlled by twistd.
> 
> (FWIW, they're stateless workers that pull from a work queue).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140729/a04d87de/attachment.html>

From dustin at v.igoro.us  Tue Jul 29 08:10:08 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Tue, 29 Jul 2014 10:10:08 -0400
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
 abstraction or bug?
In-Reply-To: <53D6E06B.3020404@pangalactic.us>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
 <53D6E06B.3020404@pangalactic.us>
Message-ID: <CAJtE5vRsNqHb5RkG35vvNs2SC-AzLMbkLuDLvESe-fYvotFUqA@mail.gmail.com>

Bare except and bare raise are both bad Python style in general, for
exactly the reasons that lvh and glyph have identified.  That
inlineCallbacks (might?) turn "bad style as it might fail when you
least expect it" into "always fails" doesn't seem like a bug to me --
in fact, by removing some nondeterminism[1] I think it's a feature!

Dustin

[1] Of the worst kind: based on deployment details, library versions,
configuration, and DB server behavior, rather than truly random

On Mon, Jul 28, 2014 at 7:44 PM, Steve Waterbury
<waterbug at pangalactic.us> wrote:
> On 07/28/2014 06:56 PM, Glyph Lefkowitz wrote:
>>
>>
>> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>>
>>> Honored twistedeers,
>>
>>
>> Seriously, we need to come up with a good collective noun for ourselves
>> one day.  We should have a referendum or something.
>
>
> I vote for "minions" ... :)
>
> Steve
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From hawkowl at atleastfornow.net  Tue Jul 29 08:15:45 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 29 Jul 2014 22:15:45 +0800
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
In-Reply-To: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
Message-ID: <7B174CF9-1082-4499-BCCE-574B6D7B476E@atleastfornow.net>

On 29 Jul 2014, at 6:56, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> Honored twistedeers,
> 
> Seriously, we need to come up with a good collective noun for ourselves one day.  We should have a referendum or something.

I?ve used the term ?twistedgeers? before (rhymes with engineers), which sounds much nicer said than when it is typed.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140729/bdf7fb1b/attachment.pgp>

From lacrima.maxim at gmail.com  Thu Jul 31 04:03:31 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 31 Jul 2014 13:03:31 +0300
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
Message-ID: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>

Hello!

When size of terminal window of ssh client is changed, then twisted ssh
server throws an exception:

exceptions.AttributeError: TerminalSession instance has no attribute
'windowChanged'

`manhole_ssh.TerminalSession` doesn't implement this method, but according
to ISession interface it should.

Is this a bug?

I use insults to create some curses-like ui and I need widgets to be
redrawn when the size of window is changed.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140731/f388713c/attachment.html>

From bret.curtis at amplidata.com  Tue Jul  1 04:14:37 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Tue, 1 Jul 2014 12:14:37 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
Message-ID: <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>

Hello Twistrons,

I admit to being "that guy" who pushed this project forward and see
Ldaptor find a new home (and focus) in Twisted and I'm glad that Tommi
and Glyph are on board. I'm also glad that AntonG has also re-licensed
his changes as MIT and has written consent from another developer as
well.

With that said, lets get this ball rolling.

Firstly, we'll need a repo to get started with. My company (Amplidata)
has it's own fork, but I think it is best we start with a clone, not a
direct fork as github would have us do, of tv42s repo. I've had
experience with a popular fork was 2 years further along than the
original, yet this fork would only be on the second page of search
results.

We can either:
1) Move (donate) tv42's repo to Twisted, this means that all links to
tv42/Ldaptor would automatically be forwarded to Twisted/Ldaptor.
2) Twisted creates it's own Ldaptor repo, I or someone else clones
this and then merge TV42's repo in, commit/push and file a merge
request with Twisted/Ldaptor.

We're, of course, open to other suggestions, but those two above seem
the best options. From there, we can start dealing with other issues
such as:

A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
it? Do we trim it out or just mark it as deprecated since it relies on
old versions of twisted and nevow.
B) Pull in downstream patches from Redhat, SuSE and Debian.
C) Replace remaining bits of non-MIT code.
D) Get back to tv42's Todo list. :)

Cheers,
Bret

On 28 June 2014 00:27, Glyph <glyph at twistedmatrix.com> wrote:
> Hello fellow Twistrons,
>
> A long time ago, for reasons we need not discuss here, the pure-python LDAP
> implementation within Twisted was pulled out into a separate package under a
> different license.
>
> Recently however, the authors of this LDAP code have generously re-licensed
> the code under a Twisted-compatible MIT license, both the original code at
> <https://github.com/tv42/ldaptor/commit/7e249b1586789a5c588f662ce74ee9f4338666e0>
> and the more recent fork (which I believe has more users) at
> <https://github.com/antong/ldaptor/issues/10>.  It seems as though there's
> even a solution for the problematic MD4 implementation here
> <https://github.com/tv42/ldaptor/pull/2>.
>
> Since there's no active, central hub for ldaptor development, I think we
> should pull it into the Twisted org on Github, and some of the folks on the
> Cc: line have volunteered to help with that.
>
> Does that sound good to everybody?  (Are you excited!!!?)
>
> It's also a possibility that we could distribute a for-real SSO back-end
> with Cred using this, which I'm pretty excited about.
>
> -glyph



From hs at ox.cx  Tue Jul  1 04:56:24 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 01 Jul 2014 12:56:24 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai6ZRGwUwkEQisGzTOw6HQgjudoTszYRDt5pFh+wJsbow@mail.gmail.com>
Message-ID: <6A191475-9285-4121-A486-D6421C0FB4FD@ox.cx>

On 1 Jul 2014, at 12:14, Bret Curtis wrote:

> With that said, lets get this ball rolling.
>
> Firstly, we'll need a repo to get started with. My company (Amplidata)
> has it's own fork, but I think it is best we start with a clone, not a
> direct fork as github would have us do, of tv42s repo.

Agreed.

> We can either:
> 1) Move (donate) tv42's repo to Twisted, this means that all links to
> tv42/Ldaptor would automatically be forwarded to Twisted/Ldaptor.
> 2) Twisted creates it's own Ldaptor repo, I or someone else clones
> this and then merge TV42's repo in, commit/push and file a merge
> request with Twisted/Ldaptor.

Depends entirely on Tommi (cc’ed), I don’t care which route we take.

> We're, of course, open to other suggestions, but those two above seem
> the best options. From there, we can start dealing with other issues
> such as:

0) Do the fixes to setup.py that everyone has in their private repos and 
put it on PyPI.

> A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
> it? Do we trim it out or just mark it as deprecated since it relies on
> old versions of twisted and nevow.

I wish we could just rip it out.  If there’s really a significant 
amount of people that use this, they build an ldaptor-ui package.

> B) Pull in downstream patches from Redhat, SuSE and Debian.
> C) Replace remaining bits of non-MIT code.
> D) Get back to tv42's Todo list. :)

E) Start writing documentation. :(  *Something*. Currently there is only 
some slides and examples and it’s up to the user to read the source 
code and figure out what ldaptor actually can do (which is kind of *a 
lot*).

Cheers, I’m very glad we have some movement here,
—h



From glyph at twistedmatrix.com  Tue Jul  1 12:49:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 11:49:30 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
Message-ID: <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>


On Jul 1, 2014, at 10:40 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:

> On Tue, Jul 1, 2014 at 2:41 AM, Bret Curtis <bret.curtis at amplidata.com> wrote:
>> 2) Twisted creates it's own Ldaptor repo, I or someone else clones
>> this and then merge TV42's repo in, commit/push and file a merge
>> request with Twisted/Ldaptor.
> 
> This, please. Create a new repo (not Github-fork), call it
> twisted/ldaptor, fetch tv42/ldaptor and push the commits to the
> twisted/ldaptor. Then start the work toward fixing things.

OK.  At this point I think the one task *I* need to do is to make some people members of the Twisted org on github.  Can I have a list of all the relevant github handles?

(Also, please be careful, and don't push to the main Twisted repo if you work on Twisted.  Github is super obnoxious about mirroring; we can't turn off pull requests and we can't turn off pushes even though it's really supposed to be a read-only mirror right now, and pushes to that repository break our SVN integration.)

>> A) What to do with the UI part of Ldaptor. Who, if anyone, still uses
>> it? Do we trim it out or just mark it as deprecated since it relies on
>> old versions of twisted and nevow.
> 
> I'd say just make a single commit that removes ldaptor/apps,
> bin/ldaptor-webui, test-webui.tac, po/ldaptor-webui*,
> doc/examples.webui, admin/run-twill, ldaptor/test/test_webui.py, and
> mentions of it from setup.py.

Sounds good to me.

> As long as that happens in a single commit, it'll be easy to restore
> in e.g. a new twisted/ldaptor-webui repository, if wanted.

If there's going to be a web UI it should probably use twisted.web.template and not nevow, given that it doesn't use Athena or any JS.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140701/d9b5e9bc/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Jul  1 13:06:00 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 12:06:00 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
Message-ID: <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>


On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:

> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
> <glyph at twistedmatrix.com> wrote:
>> (Also, please be careful, and don't push to the main Twisted repo if you
>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>> off pull requests and we can't turn off pushes even though it's really
>> supposed to be a read-only mirror right now, and pushes to that repository
>> break our SVN integration.)
> 
> I'm no Github expert, but you should be able to just make people be in
> a non-"Owners" team, and then selectively give that team push access
> to only the repos you want.
> 
> The "Owners" team probably gives non-admin contributors too much power
> in the first place.

This is indeed a better idea.

I'll still need the list of names for that team though ;)

-g



From bret.curtis at amplidata.com  Tue Jul  1 15:19:24 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Tue, 1 Jul 2014 23:19:24 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
Message-ID: <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>

On 1 July 2014 21:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:
>
>> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
>> <glyph at twistedmatrix.com> wrote:
>>> (Also, please be careful, and don't push to the main Twisted repo if you
>>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>>> off pull requests and we can't turn off pushes even though it's really
>>> supposed to be a read-only mirror right now, and pushes to that repository
>>> break our SVN integration.)
>>
>> I'm no Github expert, but you should be able to just make people be in
>> a non-"Owners" team, and then selectively give that team push access
>> to only the repos you want.
>>

Not only this, I still like the idea of forking from Twisted/ldaptor
in my own repo and working on my own branch. When finished, I usually
send a merge request upstream, in this case to Twisted/ldaptor. I
assume that it would either be accepted or rejected with comments.  If
this is too much overhead for you, then the below is a good idea and
give make us contributors.

>> The "Owners" team probably gives non-admin contributors too much power
>> in the first place.
>

This works by creating a team with 'write access' to twisted/ldaptor.
This would make you (Glyph) the gatekeeper (admin access by default)
in adding and kicking members out of the group. The rest of the world
is technically in the 'read access'  team as is the nature of open
organizations on github.

> This is indeed a better idea.
>
> I'll still need the list of names for that team though ;)

psi29a
https://github.com/psi29a

>
> -g

Cheers! :)



From glyph at twistedmatrix.com  Tue Jul  1 16:45:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 1 Jul 2014 15:45:42 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
Message-ID: <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>


On Jul 1, 2014, at 2:19 PM, Bret Curtis <bret.curtis at amplidata.com> wrote:

> On 1 July 2014 21:06, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>> 
>> On Jul 1, 2014, at 11:57 AM, Tommi Virtanen <tommi.virtanen at gmail.com> wrote:
>> 
>>> On Tue, Jul 1, 2014 at 11:49 AM, Glyph Lefkowitz
>>> <glyph at twistedmatrix.com> wrote:
>>>> (Also, please be careful, and don't push to the main Twisted repo if you
>>>> work on Twisted.  Github is super obnoxious about mirroring; we can't turn
>>>> off pull requests and we can't turn off pushes even though it's really
>>>> supposed to be a read-only mirror right now, and pushes to that repository
>>>> break our SVN integration.)
>>> 
>>> I'm no Github expert, but you should be able to just make people be in
>>> a non-"Owners" team, and then selectively give that team push access
>>> to only the repos you want.
>>> 
> 
> Not only this, I still like the idea of forking from Twisted/ldaptor
> in my own repo and working on my own branch. When finished, I usually
> send a merge request upstream, in this case to Twisted/ldaptor. I
> assume that it would either be accepted or rejected with comments.  If
> this is too much overhead for you, then the below is a good idea and
> give make us contributors.

I've made you a contributor to that repository, but I recommend that you do this anyway, and (for now) just merge your own PRs after a little while if nobody steps forward to review them.  Hopefully some more interested parties will arrive and allow for a nice review-driven process early though :-).

>>> The "Owners" team probably gives non-admin contributors too much power
>>> in the first place.
>> 
> 
> This works by creating a team with 'write access' to twisted/ldaptor.
> This would make you (Glyph) the gatekeeper (admin access by default)
> in adding and kicking members out of the group. The rest of the world
> is technically in the 'read access'  team as is the nature of open
> organizations on github.
> 
>> This is indeed a better idea.
>> 
>> I'll still need the list of names for that team though ;)
> 
> psi29a
> https://github.com/psi29a

Let me know if I did this right:

https://github.com/twisted/ldaptor

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140701/0d213f91/attachment-0002.html>

From pratik.prajapati12 at gmail.com  Wed Jul  2 07:10:42 2014
From: pratik.prajapati12 at gmail.com (Pratik Prajapati)
Date: Wed, 2 Jul 2014 18:40:42 +0530
Subject: [Twisted-Python] question on twisted
Message-ID: <CAHNg1SquLoS7xsDj797_f6uE524TDE6sPJ6CH71Ss7JCEGz_qw@mail.gmail.com>

Hi,

I have posted a question about twisted udp on stackoverflow
http://stackoverflow.com/questions/24531442/get-media-renderer-devices-from-all-networks-connected-to-a-machine-using-twiste

Please reply.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140702/9cfe9aad/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Jul  2 10:26:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Jul 2014 16:26:28 -0000
Subject: [Twisted-Python] Request.getClient
Message-ID: <20140702162628.6611.1178746883.divmod.xquotient.163@top>

Hello all,

twisted.web.http.Request.getClient has a terrible implementation.  It 
does blocking network I/O (DNS).  Fortunately it is only used in one 
place in Twisted - the CGI implementation.  Unfortunately this makes the 
CGI implementation somewhat unsuited for real-world use.

`Request.getClient` has always been allowed to return `None` under 
certain circumstances.  I propose making it always return `None` and 
deprecating it.

This is implemented in the branch linked to <https://tm.tl/2252>.

Chris Armstrong suggested that this change might not be strictly keeping 
with our backwards compatibility policy.

I suggest that either it is - because `None` was always a possible 
return value - or that removing the possibility of blocking I/O from 
applications that are mistakenly using this API makes it worth the not- 
strictly-compatible change.

A minor adjustment might be to make it always return the IP address 
instead, as this was another behavior it previously had.

Please comment.  Thanks.

Jean-Paul



From dustin at v.igoro.us  Wed Jul  2 12:26:32 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Wed, 2 Jul 2014 14:26:32 -0400
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
Message-ID: <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>

Actually, the apidocs say "Undocumented", so I think you could make it
return u"The 🌕 is made of green 酪 " and still be in spec.

  http://twistedmatrix.com/documents/14.0.0/api/twisted.web.http.Request.html#getClient

Dustin

On Wed, Jul 2, 2014 at 12:26 PM,  <exarkun at twistedmatrix.com> wrote:
> Hello all,
>
> twisted.web.http.Request.getClient has a terrible implementation.  It does
> blocking network I/O (DNS).  Fortunately it is only used in one place in
> Twisted - the CGI implementation.  Unfortunately this makes the CGI
> implementation somewhat unsuited for real-world use.
>
> `Request.getClient` has always been allowed to return `None` under certain
> circumstances.  I propose making it always return `None` and deprecating it.
>
> This is implemented in the branch linked to <https://tm.tl/2252>.
>
> Chris Armstrong suggested that this change might not be strictly keeping
> with our backwards compatibility policy.
>
> I suggest that either it is - because `None` was always a possible return
> value - or that removing the possibility of blocking I/O from applications
> that are mistakenly using this API makes it worth the not-
> strictly-compatible change.
>
> A minor adjustment might be to make it always return the IP address instead,
> as this was another behavior it previously had.
>
> Please comment.  Thanks.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Wed Jul  2 12:55:24 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Jul 2014 18:55:24 -0000
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
 <CAJtE5vTSsHP9CQbbdfrwd+qPo=qbLhXKhKJBTyFMsJpBe8MaYg@mail.gmail.com>
Message-ID: <20140702185524.6611.52220651.divmod.xquotient.171@top>

On 06:26 pm, dustin at v.igoro.us wrote:
>Actually, the apidocs say "Undocumented", so I think you could make it
>return u"The 🌕 is made of green 酪 " and still be in spec.
>
>http://twistedmatrix.com/documents/14.0.0/api/twisted.web.http.Request.html#getClient

The interface is documented:

https://twistedmatrix.com/documents/14.0.0/api/twisted.web.iweb.IRequest.html#getClient

(as deprecated, already).

Also, we generally give some weight to how an implementation actually 
behaves - even if the documentation is lacking or contradictory.

If you ignore incorrect docs and figure out how to use an API so it 
works, you could conceivably have working software.  Twisted tries not 
to break such code.

If you ignore how the implementation actually behaves and blindly trust 
the documentation (sorry, wish you could do that) then your software 
probably doesn't work.  Since it's probably already broken, Twisted 
isn't as concerned making changes that might break it more or 
differently.

Jean-Paul
>Dustin
>
>On Wed, Jul 2, 2014 at 12:26 PM,  <exarkun at twistedmatrix.com> wrote:
>>Hello all,
>>
>>twisted.web.http.Request.getClient has a terrible implementation.  It 
>>does
>>blocking network I/O (DNS).  Fortunately it is only used in one place 
>>in
>>Twisted - the CGI implementation.  Unfortunately this makes the CGI
>>implementation somewhat unsuited for real-world use.
>>
>>`Request.getClient` has always been allowed to return `None` under 
>>certain
>>circumstances.  I propose making it always return `None` and 
>>deprecating it.
>>
>>This is implemented in the branch linked to <https://tm.tl/2252>.
>>
>>Chris Armstrong suggested that this change might not be strictly 
>>keeping
>>with our backwards compatibility policy.
>>
>>I suggest that either it is - because `None` was always a possible 
>>return
>>value - or that removing the possibility of blocking I/O from 
>>applications
>>that are mistakenly using this API makes it worth the not-
>>strictly-compatible change.
>>
>>A minor adjustment might be to make it always return the IP address 
>>instead,
>>as this was another behavior it previously had.
>>
>>Please comment.  Thanks.
>>
>>Jean-Paul
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Wed Jul  2 15:02:45 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 2 Jul 2014 14:02:45 -0700
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
Message-ID: <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>

On Jul 2, 2014, at 9:26 AM, exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> twisted.web.http.Request.getClient has a terrible implementation.  It does blocking network I/O (DNS).  Fortunately it is only used in one place in Twisted - the CGI implementation.  Unfortunately this makes the CGI implementation somewhat unsuited for real-world use.
> 
> `Request.getClient` has always been allowed to return `None` under certain circumstances.  I propose making it always return `None` and deprecating it.
> 
> This is implemented in the branch linked to <https://tm.tl/2252>.
> 
> Chris Armstrong suggested that this change might not be strictly keeping with our backwards compatibility policy.

I agree that this is a troubling area but in general I tend to believe that changes like this are in keeping with our compatibility policy.  Changing the signature or the allowed return type of a value ("type" speaking in terms of public features of its interface) should not be allowed.  If we already returned None sometimes, then a correct program would already have to deal with None sometimes, so making this change wouldn't break it, per se.

Bringing up such a change on the list is always a good policy, since it gives people a chance to audit their code and look for places where they might have been depending too intimately on accidental features, so by no means take my belief that this is in-policy to mean that we shouldn't broadly discuss changes like this in the future :-).  Real, actual, broken code is what the policy strives to prevent, so real world code that broke should usually take precedence.

> I suggest that either it is - because `None` was always a possible return value - or that removing the possibility of blocking I/O from applications that are mistakenly using this API makes it worth the not- strictly-compatible change.
> 
> A minor adjustment might be to make it always return the IP address instead, as this was another behavior it previously had.

I think that this adjustment is the best option.  IP addresses are mostly interchangeable with hostnames, so during the transition period while it's being deprecated, even an application relying on this API heavily would at least have an opportunity to keep functionality equivalent during an upgrade.  Making it always return None means that a correct application (one which dealt with the None return value), while not becoming crash-with-an-exception buggy, might lose functionality (logging a source IP of "None" all the time, for example, and losing track of an audit log of who is making what changes).

Unbidden, I have some ideas about how we might preserve even _more_ of the functionality involving DNS lookups, but more effort than just giving back the IP is probably wasted, so I won't mention them.  Let's deprecate the API and move on.

Thanks for bringing this up,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140702/472badae/attachment-0002.html>

From radix at twistedmatrix.com  Wed Jul  2 15:09:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 2 Jul 2014 16:09:33 -0500
Subject: [Twisted-Python] Request.getClient
In-Reply-To: <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>
References: <20140702162628.6611.1178746883.divmod.xquotient.163@top>
 <E2F94EEA-DA64-4FE3-8A54-5382102304CF@twistedmatrix.com>
Message-ID: <etPan.53b4750d.66334873.83b@densetsu>

On July 2, 2014 at 4:04:59 PM, Glyph Lefkowitz (glyph at twistedmatrix.com) wrote:
On Jul 2, 2014, at 9:26 AM, exarkun at twistedmatrix.com wrote:

Hello all,

twisted.web.http.Request.getClient has a terrible implementation.  It does blocking network I/O (DNS).  Fortunately it is only used in one place in Twisted - the CGI implementation.  Unfortunately this makes the CGI implementation somewhat unsuited for real-world use.

`Request.getClient` has always been allowed to return `None` under certain circumstances.  I propose making it always return `None` and deprecating it.

This is implemented in the branch linked to <https://tm.tl/2252>.

Chris Armstrong suggested that this change might not be strictly keeping with our backwards compatibility policy.

I agree that this is a troubling area but in general I tend to believe that changes like this are in keeping with our compatibility policy.  Changing the signature or the allowed return type of a value ("type" speaking in terms of public features of its interface) should not be allowed.  If we already returned None sometimes, then a correct program would already have to deal with None sometimes, so making this change wouldn't break it, per se.

Bringing up such a change on the list is always a good policy, since it gives people a chance to audit their code and look for places where they might have been depending too intimately on accidental features, so by no means take my belief that this is in-policy to mean that we shouldn't broadly discuss changes like this in the future :-).  Real, actual, broken code is what the policy strives to prevent, so real world code that broke should usually take precedence.

I suggest that either it is - because `None` was always a possible return value - or that removing the possibility of blocking I/O from applications that are mistakenly using this API makes it worth the not- strictly-compatible change.

A minor adjustment might be to make it always return the IP address instead, as this was another behavior it previously had.

I think that this adjustment is the best option.  IP addresses are mostly interchangeable with hostnames, so during the transition period while it's being deprecated, even an application relying on this API heavily would at least have an opportunity to keep functionality equivalent during an upgrade.  Making it always return None means that a correct application (one which dealt with the None return value), while not becoming crash-with-an-exception buggy, might lose functionality (logging a source IP of "None" all the time, for example, and losing track of an audit log of who is making what changes).

Unbidden, I have some ideas about how we might preserve even _more_ of the functionality involving DNS lookups, but more effort than just giving back the IP is probably wasted, so I won't mention them.  Let's deprecate the API and move on.

Thanks for bringing this up,



I, too, like the idea of returning the IP address.



-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140702/8e85b0b9/attachment-0002.html>

From dstainton415 at gmail.com  Thu Jul  3 02:16:25 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Thu, 3 Jul 2014 08:16:25 +0000
Subject: [Twisted-Python] "serialization" of ListeningPort
Message-ID: <20140703081625.GA20098@googlemail.com>



Greetings,

I wanted to see what people think of this before attempting to open a
Twisted trac ticket and submitting code patches.

I think Twisted servers need a way to derive a client endpoint
descriptor string from a listeningPort. This approximates an idiom
commonly used in Tahoe-LAFS/Foolscap:

"""
serverEndpoint = serverFromString("tcp:interface=127.0.0.1:0")
listeningPortDeferred = serverEndpoint.listen(myFactory)

def doStuffWithPort(listeningPort):
    address = listeningPort.getHost()

    myHost = address.host
    myPort = address.port
    clientEndpointString = "tcp:%s:%s" % (myHost, myPort)

    # announce clientEndpointString to various clients
    # ...

listeningPortDeferred.addCallback(doStuffWithPort)
"""

In this case the server needs to announce a client endpoint string
to various clients... the server has enough information to construct
the endpoint string after the listening port has been created. However
the construction of the endpoint string is not done in an endpoint
agnostic manner... and this code will therefore break when used with
Unix domain socket endpoints for instance.

One way to accomplish endpoint agnosticism would be to have a global function called
"getClientEndpointStringFromPort" or something like that. This
function would take an IListeningPort object as it's only argument and
return a client endpoint string which can be used to connect to that very 
listening port.

Under the hood it should find a plugin that can
serialize the listening port objects into a client endpoint
string. This plugin can be the same class as the client endpoint
parser, since it has the correct "prefix" attribute with which to
construct the client endpoint string.

I am basically saying that each server endpoint type needs a
small amount of unique code in order to serialize into a client
endpoint descriptor string... because there are various IAddress
implementations with different attributes.

Cheers,

David

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20140703/55b8b6c6/attachment.sig>

From bret.curtis at amplidata.com  Fri Jul  4 07:54:55 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Fri, 4 Jul 2014 15:54:55 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
Message-ID: <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>

On 2 July 2014 00:45, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>
> I've made you a contributor to that repository, but I recommend that you do
> this anyway, and (for now) just merge your own PRs after a little while if
> nobody steps forward to review them.  Hopefully some more interested parties
> will arrive and allow for a nice review-driven process early though :-).
>

I've initialized the new repo with tv42's repo. It isn't a github
fork, but a mirror. I also tagged it with the 0.43 release since that
is the last known official release build.

>
>
>
> Let me know if I did this right:
>
> https://github.com/twisted/ldaptor
>
> -glyph

You've done is right and I've already github forked it (after I did
the above) and started to get down to business.

Whenever someone gets the chance, please check this out:
https://github.com/twisted/ldaptor/pull/1

The summary/comment pretty much sums up what we've talked about in the
list so far. I think once it is merged, it is a pretty good starting
place.

This has been tested against our project at Amplidata and with only 3
failing tests out of 337, we're doing really so far.

Going forward, here are some things I want to tackle:
1) Get those remaining 3 tests (or code it tests) fixed.
2) Follow up with Pypi about the semi-dead Ldaptor 0.53 release
3) Start the PEP8 process on the codebase
4) Help existing debian maintainer to transition to twisted's ldaptor
5) ?
... additional input from you guys would be awesome. :)

Cheers,
Bret



From kebin70 at gmail.com  Sat Jul  5 14:35:01 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Sat, 5 Jul 2014 13:35:01 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
Message-ID: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>

calling reactor.callLater within qt4reactor in an attempt to async non
webkit work but not seeing expected behavior.  Webkit locks while the
callLater function executes.

Any insight appreciated.

Should I move real work into separate reactor and "broker" calls into
qt4reactor/webkit.  I have xmlrpc and websocket  hooks into browser...but
looking for guidance as to most direct method of brokering calls between
reactors.

Any insight appreciated.

Having a blast using QT browser as a back-end, see demo site
www.athleets.com.

See below for amazon S3 upload worker that I expected to async, but in
qt4reactor does not appear to work as planned.

from pyscewpt import fixed
from pyscewpt.s3 import bucket_util
import boto
from boto.s3.bucket import Bucket
from boto.s3.key import Key

from twisted.internet import defer, reactor

bucket_queue = defer.DeferredQueue()

def upload_worker(data):
    print 'macth upload_worker', data
    save_match( data['league'], data['twitter'], data['local_file'],
data['meta'], data['profile'])
    return len(bucket_queue.pending)
def match_queue(ign=None):
    print 'match_queue:', len(bucket_queue.pending),
len(bucket_queue.waiting)
    if ign is None or ign >= 2:
        print 'requeue:', len(bucket_queue.pending) ,
len(bucket_queue.waiting)
        d = bucket_queue.get()
        d.addCallback(upload_worker)
        d.addBoth(match_queue)
        return d
    else:
        return None
def queue_save_match(queue_dic):
    bucket_queue.put(queue_dic)
    print 'queue_save_match', len(bucket_queue.pending),
len(bucket_queue.waiting), queue_dic['twitter']    #
    if len(bucket_queue.pending) >= 5 and len(bucket_queue.waiting) == 0:
        print 'queue drop worker'
        reactor.callLater(0,match_queue,None)

def save_match(league, twitter, systemfile, meta, profile):
    print 'save_match:', twitter, profile
    s3_filename = league + '/' + twitter + '.png'
    bucket_util.save_s3(
        boto.connect_s3().get_bucket('~bucket'),
        s3_filename,
        None,
        systemfile,
        'image/png',
        'public-read',
        meta + [('yes', False), ('no', False), ('maybe', False),
('profile', profile)]
    )
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140705/e43bad14/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Jul  5 18:24:56 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Jul 2014 00:24:56 -0000
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
Message-ID: <20140706002456.6611.327452863.divmod.xquotient.271@top>

On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>calling reactor.callLater within qt4reactor in an attempt to async non
>webkit work but not seeing expected behavior.  Webkit locks while the
>callLater function executes.

`callLater` does not make a blocking function into a non-blocking one. 
It just calls a function after a specified delay.  If the function 
blocks, then the reactor will block when it gets around to calling it.

If you need to call blocking APIs you may need to call them in a 
separate thread (Twisted includes a threadpool that can help you with 
this) or a separate process (Twisted has some APIs for launching and 
interacting with other processes, too).  Of course, the ideal solution 
is often to find a non-blocking equivalent to the blocking API and use 
that instead (for example, I know that txaws is a project that exists - 
perhaps it can do the things to S3 that you want to do).

Jean-Paul



From bret.curtis at amplidata.com  Mon Jul  7 04:23:29 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Mon, 7 Jul 2014 12:23:29 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
Message-ID: <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>

Hello again,

I sent another pull request, this takes care of the last 3 failing
tests and opens up an additional 50 tests that also pass now. We're
now at 387 tests!

https://github.com/twisted/ldaptor/pull/3

It is my recommendation that after this is reviewed and hopfully
commited that we make a branch and tag the release as 0.54.0. The
reason for the large jump is that antong's last semi-offical release
was 0.53 on PyPI. At this point we (myself and anyone else that wants
to help) should reach out to downstream projects (PyPI, Debian, and
etc.) to make them aware that Ldaptor development is again active.

I would also like to (ab)use github's issue tracker and milestones to
sort issues into queues. For example, the next milestone would be 0.55
with: https://github.com/twisted/ldaptor/issues/2  as the first real
issue to be tracked there. Another issue I'll file shortly will be
that we go through the code and start refactoring deprecated code like
I did for test_ldiftree.py.

Would you mind if I did this or would you rather someone else handle this?

Another question is that of documentation.  We could use sphinx to
handle this to autodoc our API and also include howtos and examples.
This can readily be used for html, pdf and man page generation which
would be handy for downstream.

What does everyone think?

Cheers,
Bret



From hs at ox.cx  Mon Jul  7 04:50:16 2014
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 07 Jul 2014 12:50:16 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
Message-ID: <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>

On 7 Jul 2014, at 12:23, Bret Curtis wrote:

> It is my recommendation that after this is reviewed and hopfully
> commited that we make a branch and tag the release as 0.54.0. The
> reason for the large jump is that antong's last semi-offical release
> was 0.53 on PyPI. At this point we (myself and anyone else that wants
> to help) should reach out to downstream projects (PyPI, Debian, and
> etc.) to make them aware that Ldaptor development is again active.

Since ldaptor is a Twisted project now, may I suggest you copy its 
time-based version numbers? 14.0 has more meaning to itself than 0.54.0.



From hawkowl at atleastfornow.net  Mon Jul  7 05:13:56 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 7 Jul 2014 19:13:56 +0800
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
Message-ID: <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>


On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:

> On 7 Jul 2014, at 12:23, Bret Curtis wrote:
> 
>> It is my recommendation that after this is reviewed and hopfully
>> commited that we make a branch and tag the release as 0.54.0. The
>> reason for the large jump is that antong's last semi-offical release
>> was 0.53 on PyPI. At this point we (myself and anyone else that wants
>> to help) should reach out to downstream projects (PyPI, Debian, and
>> etc.) to make them aware that Ldaptor development is again active.
> 
> Since ldaptor is a Twisted project now, may I suggest you copy its time-based version numbers? 14.0 has more meaning to itself than 0.54.0.

Well, Nevow is a “Twisted Project” and it doesn’t — but I agree that it has more meaning.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140707/ff06123b/attachment.sig>

From trac at twistedmatrix.com  Mon Jul  7 06:06:41 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Mon, 07 Jul 2014 12:06:41 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1404734801.77.3551245895661464883@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140707/5f188111/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Jul  7 06:32:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jul 2014 12:32:28 -0000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1404734801.77.3551245895661464883@twistedmatrix.com
References: 1404734801.77.3551245895661464883@twistedmatrix.com
Message-ID: <20140707123228.7498.1078214828.divmod.xquotient.2@top>

These stats are incorrect due to buggy interactions between the stats 
script and the new version of trac.  Correct trac stats will return once 
https://code.launchpad.net/~twisted-dev/twisted-trac-integration/fix- 
summary-with-new-trac/+merge/225813 is merged and deployed.

Jean-Paul



From glyph at twistedmatrix.com  Mon Jul  7 15:02:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jul 2014 14:02:29 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
Message-ID: <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>


On Jul 7, 2014, at 4:13 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> 
> On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:
> 
>> On 7 Jul 2014, at 12:23, Bret Curtis wrote:
>> 
>>> It is my recommendation that after this is reviewed and hopfully
>>> commited that we make a branch and tag the release as 0.54.0. The
>>> reason for the large jump is that antong's last semi-offical release
>>> was 0.53 on PyPI. At this point we (myself and anyone else that wants
>>> to help) should reach out to downstream projects (PyPI, Debian, and
>>> etc.) to make them aware that Ldaptor development is again active.
>> 
>> Since ldaptor is a Twisted project now, may I suggest you copy its time-based version numbers? 14.0 has more meaning to itself than 0.54.0.
> 
> Well, Nevow is a “Twisted Project” and it doesn’t — but I agree that it has more meaning.

It might not be a bad idea to do this for Nevow too, for that matter.

-glyph




From exarkun at twistedmatrix.com  Mon Jul  7 15:21:25 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Jul 2014 21:21:25 -0000
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
Message-ID: <20140707212125.7498.960267665.divmod.xquotient.4@top>

On 09:02 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 7, 2014, at 4:13 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
>>
>>On 7 Jul 2014, at 18:50, Hynek Schlawack <hs at ox.cx> wrote:
>>>On 7 Jul 2014, at 12:23, Bret Curtis wrote:
>>>>It is my recommendation that after this is reviewed and hopfully
>>>>commited that we make a branch and tag the release as 0.54.0. The
>>>>reason for the large jump is that antong's last semi-offical release
>>>>was 0.53 on PyPI. At this point we (myself and anyone else that 
>>>>wants
>>>>to help) should reach out to downstream projects (PyPI, Debian, and
>>>>etc.) to make them aware that Ldaptor development is again active.
>>>
>>>Since ldaptor is a Twisted project now, may I suggest you copy its 
>>>time-based version numbers? 14.0 has more meaning to itself than 
>>>0.54.0.
>>
>>Well, Nevow is a “Twisted Project” and it doesn’t — but I agree that 
>>it has more meaning.
>
>It might not be a bad idea to do this for Nevow too, for that matter.

It might not be.  Now that so many new projects are being added to the 
github Twisted repository (and particularly, projects that have new 
contributors), perhaps it is (slightly past) time to set down some of 
these things officially?

Jean-Paul



From glyph at twistedmatrix.com  Mon Jul  7 15:26:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 7 Jul 2014 14:26:29 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <20140707212125.7498.960267665.divmod.xquotient.4@top>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
Message-ID: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>

On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:

> It might not be.  Now that so many new projects are being added to the github Twisted repository (and particularly, projects that have new contributors), perhaps it is (slightly past) time to set down some of these things officially?

I think we should make a list of some suggestions before we try to make that list into an official policy.  Date-based version numbers is a good suggestion to start that list with :).

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140707/8482db88/attachment-0002.html>

From kevin.horn at gmail.com  Tue Jul  8 00:43:56 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Tue, 8 Jul 2014 01:43:56 -0500
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <CA+U=zK3w+sBDJHPP4b52sME2g-mNrJv__9gDXqU_HunksK6tZw@mail.gmail.com>

I haven't used ldaptor in years, but I have to say I'm really glad to see
this happening.

Kudos to all.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140708/46b5f411/attachment-0002.html>

From hawkowl at atleastfornow.net  Tue Jul  8 05:30:14 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 8 Jul 2014 19:30:14 +0800
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>

On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
> 
>> It might not be.  Now that so many new projects are being added to the github Twisted repository (and particularly, projects that have new contributors), perhaps it is (slightly past) time to set down some of these things officially?
> 
> I think we should make a list of some suggestions before we try to make that list into an official policy.  Date-based version numbers is a good suggestion to start that list with :).
>  

Maybe we need a Request For Comment/PEP-style way of formalising/proposing policy? Django’s doing it as well, and it seems like a nice way of doing it.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140708/c683c18e/attachment.sig>

From exarkun at twistedmatrix.com  Tue Jul  8 06:06:21 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 08 Jul 2014 12:06:21 -0000
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
 <9693339D-925B-4BD2-A395-4E5801B16423@atleastfornow.net>
Message-ID: <20140708120621.7498.1913368590.divmod.xquotient.11@top>




On 11:30 am, hawkowl at atleastfornow.net wrote:
>On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> 
>wrote:
>>On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>>>It might not be.  Now that so many new projects are being added to 
>>>the github Twisted repository (and particularly, projects that have 
>>>new contributors), perhaps it is (slightly past) time to set down 
>>>some of these things officially?
>>
>>I think we should make a list of some suggestions before we try to 
>>make that list into an official policy.  Date-based version numbers is 
>>a good suggestion to start that list with :).
>
>Maybe we need a Request For Comment/PEP-style way of 
>formalising/proposing policy? Django’s doing it as well, and it seems 
>like a nice way of doing it.

I don't see this as the necessary conclusion.  We're not arguing about 
what the policy should be yet.  I'm just saying it should be written 
down in one place - not smeared out across 10 years of mailing list 
archives.

Jean-Paul



From poalman at gmail.com  Tue Jul  8 08:45:42 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 8 Jul 2014 15:45:42 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
Message-ID: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>

Hey,

This is a bit of a stab in the dark, but I'm really not sure what to try next.

Basically I've got a custom twisted FTP server, recently (not sure
when it started) I've noticed that connections to it seem to
disconnect after 60 seconds if they haven't completed. This could be a
slow LIST response, or a large file being transferred in a RETR
download. It doesn't seem to matter if the connection is idle or not,
but after 60 seconds it seems to get closed.

I can't recreate this locally, nor if I clone the live box. I've even
set up a new box which didn't exhibit the behaviour, then switched the
current live box to the new box and then the behaviour started to
occur, only when it went live.

So the only thing I can think of is that it happens when multiple
users are on the box which makes it very difficult to pin point /
recreate.

I'm a bit of a loss as to how to try and move this forward and try and
work out what the issue is.

I just thought I'd ask here incase it sounds like anything someone has
run into before? or if anyone has any ideas of where to start looking
(it disconnects at 60/61 seconds)? Maybe a timeout value somewhere
perhaps?

Thanks!

Paul



From p.mayers at imperial.ac.uk  Tue Jul  8 09:26:59 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 08 Jul 2014 16:26:59 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
Message-ID: <53BC0DC3.3090203@imperial.ac.uk>

On 08/07/14 15:45, Paul Wiseman wrote:
> Hey,
>
> This is a bit of a stab in the dark, but I'm really not sure what to try next.
>
> Basically I've got a custom twisted FTP server, recently (not sure
> when it started) I've noticed that connections to it seem to
> disconnect after 60 seconds if they haven't completed. This could be a

Are there any middlebox devices (firewall, NAT) in the path?



From poalman at gmail.com  Tue Jul  8 10:30:31 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Tue, 8 Jul 2014 17:30:31 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <53BC0DC3.3090203@imperial.ac.uk>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
Message-ID: <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>

This is a google compute instance, so there is there firewall on
there. I did at first think it could be a hidden firewall rule google
have.

I think I can rule anything like that out though. I tried to recreate
the problem on another box, and got to the point where i'd set up the
entire working environment without the issue (same firewall etc.). A
bit puzzled and thinking I'd somehow fixed the issue, I swapped the
new box for the live one and once I'd done that I then started to see
the exact same problem on the new box. (And the problem had gone away
on the ex-live box). So the only thing I can think of is it is somehow
being triggered by the traffic.


On 8 July 2014 16:26, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 08/07/14 15:45, Paul Wiseman wrote:
>>
>> Hey,
>>
>> This is a bit of a stab in the dark, but I'm really not sure what to try
>> next.
>>
>> Basically I've got a custom twisted FTP server, recently (not sure
>> when it started) I've noticed that connections to it seem to
>> disconnect after 60 seconds if they haven't completed. This could be a
>
>
> Are there any middlebox devices (firewall, NAT) in the path?
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From werner at thieprojects.ch  Tue Jul  8 19:34:22 2014
From: werner at thieprojects.ch (Werner Thie)
Date: Tue, 08 Jul 2014 15:34:22 -1000
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
 <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
Message-ID: <53BC9C1E.3050907@thieprojects.ch>

On 7/8/14 6:30 AM, Paul Wiseman wrote:
> This is a google compute instance, so there is there firewall on
> there. I did at first think it could be a hidden firewall rule google
> have.
>
> I think I can rule anything like that out though. I tried to recreate
> the problem on another box, and got to the point where i'd set up the
> entire working environment without the issue (same firewall etc.). A
> bit puzzled and thinking I'd somehow fixed the issue, I swapped the
> new box for the live one and once I'd done that I then started to see
> the exact same problem on the new box. (And the problem had gone away
> on the ex-live box). So the only thing I can think of is it is somehow
> being triggered by the traffic.

What's the number of connections when this is occuring?

Werner




From bret.curtis at amplidata.com  Wed Jul  9 01:25:09 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Wed, 9 Jul 2014 09:25:09 +0200
Subject: [Twisted-Python] standard practices, was (bringing LDAP back)
Message-ID: <CALonyaguL1eCnYuetLPBxF37v63ADOPxDmiXKbO2cw+CrUECHw@mail.gmail.com>

On 8 July 2014 14:06,  <exarkun at twistedmatrix.com> wrote:
>
>
>
> On 11:30 am, hawkowl at atleastfornow.net wrote:
>>
>> On 8 Jul 2014, at 5:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
>>>
>>> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>>>>
>>>> It might not be.  Now that so many new projects are being added to the
>>>> github Twisted repository (and particularly, projects that have new
>>>> contributors), perhaps it is (slightly past) time to set down some of these
>>>> things officially?
>>>
>>>
>>> I think we should make a list of some suggestions before we try to make
>>> that list into an official policy.  Date-based version numbers is a good
>>> suggestion to start that list with :).
>>
>>
>> Maybe we need a Request For Comment/PEP-style way of formalising/proposing
>> policy? Django’s doing it as well, and it seems like a nice way of doing it.
>
>
> I don't see this as the necessary conclusion.  We're not arguing about what
> the policy should be yet.  I'm just saying it should be written down in one
> place - not smeared out across 10 years of mailing list archives.
>

Thankfully we're just just discussing it and not arguing about it,
hopefully in another thread. :)

Cheers,
Bret


>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From bret.curtis at amplidata.com  Wed Jul  9 01:27:16 2014
From: bret.curtis at amplidata.com (Bret Curtis)
Date: Wed, 9 Jul 2014 09:27:16 +0200
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
Message-ID: <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>

Right, so from what I read here then our official release to the world
will be 14.0, provided that Travis is green before 2015. ;)

Sound good?

Cheers,
Bret

On 7 July 2014 23:26, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> On Jul 7, 2014, at 2:21 PM, exarkun at twistedmatrix.com wrote:
>
> It might not be.  Now that so many new projects are being added to the
> github Twisted repository (and particularly, projects that have new
> contributors), perhaps it is (slightly past) time to set down some of these
> things officially?
>
>
> I think we should make a list of some suggestions before we try to make that
> list into an official policy.  Date-based version numbers is a good
> suggestion to start that list with :).
>
> -g
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From kebin70 at gmail.com  Wed Jul  9 11:11:36 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Wed, 9 Jul 2014 10:11:36 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <20140706002456.6611.327452863.divmod.xquotient.271@top>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
Message-ID: <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>

Another "Oh right" twisted moment.  callInThread instead of callLater?

This is a case where I've been laying tracks for 2 years without totally
understanding the train that was eventually coming down the tracks.  I
guess I implicitly understood by wanting to move to a separate reactor as a
separate thread, and in the past when I've used callLater it's encapsulated
non-blocking code.

In this sense is callLater ever utilized as a pseudo asynchronous method?



On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:

> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>
>> calling reactor.callLater within qt4reactor in an attempt to async non
>> webkit work but not seeing expected behavior.  Webkit locks while the
>> callLater function executes.
>>
>
> `callLater` does not make a blocking function into a non-blocking one. It
> just calls a function after a specified delay.  If the function blocks,
> then the reactor will block when it gets around to calling it.
>
> If you need to call blocking APIs you may need to call them in a separate
> thread (Twisted includes a threadpool that can help you with this) or a
> separate process (Twisted has some APIs for launching and interacting with
> other processes, too).  Of course, the ideal solution is often to find a
> non-blocking equivalent to the blocking API and use that instead (for
> example, I know that txaws is a project that exists - perhaps it can do the
> things to S3 that you want to do).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140709/03c18de4/attachment-0002.html>

From kevin.horn at gmail.com  Wed Jul  9 11:51:47 2014
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 9 Jul 2014 12:51:47 -0500
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
 <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
Message-ID: <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>

It might be, but I can't think of a reason off hand why it ever _should_
be.  I can kind of see how it might work, but if your "async" process ever
takes longer than your callLater delay it will break, and probably quite
horribly.


On Wed, Jul 9, 2014 at 12:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:

> Another "Oh right" twisted moment.  callInThread instead of callLater?
>
> This is a case where I've been laying tracks for 2 years without totally
> understanding the train that was eventually coming down the tracks.  I
> guess I implicitly understood by wanting to move to a separate reactor as a
> separate thread, and in the past when I've used callLater it's encapsulated
> non-blocking code.
>
> In this sense is callLater ever utilized as a pseudo asynchronous method?
>
>
>
> On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:
>
>> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>>
>>> calling reactor.callLater within qt4reactor in an attempt to async non
>>> webkit work but not seeing expected behavior.  Webkit locks while the
>>> callLater function executes.
>>>
>>
>> `callLater` does not make a blocking function into a non-blocking one. It
>> just calls a function after a specified delay.  If the function blocks,
>> then the reactor will block when it gets around to calling it.
>>
>> If you need to call blocking APIs you may need to call them in a separate
>> thread (Twisted includes a threadpool that can help you with this) or a
>> separate process (Twisted has some APIs for launching and interacting with
>> other processes, too).  Of course, the ideal solution is often to find a
>> non-blocking equivalent to the blocking API and use that instead (for
>> example, I know that txaws is a project that exists - perhaps it can do the
>> things to S3 that you want to do).
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140709/9b334006/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Jul  9 21:08:09 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 9 Jul 2014 20:08:09 -0700
Subject: [Twisted-Python] bringing LDAP back
In-Reply-To: <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>
References: <4334D648-53A6-4198-BE25-09E79CB8041E@twistedmatrix.com>
 <CALonyai=_TfqW6oDT3xTss+GoXXj7o17aBBUP-oOdAhM0=sTbg@mail.gmail.com>
 <CABWibQmbC-j7RH+EkYcsEoDTnRmHOiiUoB=K=9tYH_VvneiPVw@mail.gmail.com>
 <5199C179-08CC-41A3-B106-5DFACF272059@twistedmatrix.com>
 <CABWibQmiVsE2RepoxNK_YcBekMu6gAHisxoo3zpiG-O=F8XLLw@mail.gmail.com>
 <400C3707-1F1D-45D0-85DA-488CD5D0595B@twistedmatrix.com>
 <CALonyaheJUv30foG4NXVRPnVCMeUYtL1=zDsCwywC027hBHgGw@mail.gmail.com>
 <50A5B797-D80C-4833-893F-F1FDB39F5AA2@twistedmatrix.com>
 <CALonyahwEzjWmCb4dM6+wVEq9NvqSyX0768sBAP7P5EO4znusg@mail.gmail.com>
 <CALonyagFbs04vSTskVHrUEncQ=MfyjZ_Kj_Ax120+q3RGf2UFw@mail.gmail.com>
 <DD9606D7-EE88-49CC-8E20-ED870C3FB51B@ox.cx>
 <FEAB20E6-5C59-4095-B384-7247CCC93592@atleastfornow.net>
 <0A842CA5-4358-4FA6-902B-DE8B029E1515@twistedmatrix.com>
 <20140707212125.7498.960267665.divmod.xquotient.4@top>
 <29751BC6-1092-4B16-A3A8-667E407CF9EF@twistedmatrix.com>
 <CALonyagkXDcU4D9wA0rGG5TVF7COZs4exU8VZG6SA-CPKxGFDg@mail.gmail.com>
Message-ID: <35F88AD0-CCD4-4315-A244-D02452286086@twistedmatrix.com>


On Jul 9, 2014, at 12:27 AM, Bret Curtis <bret.curtis at amplidata.com> wrote:

> Travis is green before 2015

This sounds like an excellent campaign slogan.

(Also I just merged the PR to turn Travis green.  Lots of missing entries from the build matrix now though: good hunting to you all.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140709/ced19e25/attachment-0002.html>

From poalman at gmail.com  Thu Jul 10 04:16:31 2014
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 10 Jul 2014 11:16:31 +0100
Subject: [Twisted-Python] FTP box disconnecting after 60 seconds
In-Reply-To: <53BC9C1E.3050907@thieprojects.ch>
References: <CACgdh2go84P6gqg1V55NvHXp-WoJhBZiWk7SCLWEBaf8uiLN5g@mail.gmail.com>
 <53BC0DC3.3090203@imperial.ac.uk>
 <CACgdh2gbXCjzDd24okTxp=RXG3DhY9N7NgDHY734HTjn=uCDgg@mail.gmail.com>
 <53BC9C1E.3050907@thieprojects.ch>
Message-ID: <CACgdh2gCxyE_B_r3m4CJbir-V90_sTExtn_KBT1zP26wUE9Hsg@mail.gmail.com>

On 9 July 2014 02:34, Werner Thie <werner at thieprojects.ch> wrote:
> On 7/8/14 6:30 AM, Paul Wiseman wrote:
>>
>> This is a google compute instance, so there is there firewall on
>> there. I did at first think it could be a hidden firewall rule google
>> have.
>>
>> I think I can rule anything like that out though. I tried to recreate
>> the problem on another box, and got to the point where i'd set up the
>> entire working environment without the issue (same firewall etc.). A
>> bit puzzled and thinking I'd somehow fixed the issue, I swapped the
>> new box for the live one and once I'd done that I then started to see
>> the exact same problem on the new box. (And the problem had gone away
>> on the ex-live box). So the only thing I can think of is it is somehow
>> being triggered by the traffic.
>
>
> What's the number of connections when this is occuring?
>
> Werner
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

Thank you for the suggestions on this.

I did locate the issue in the end - it was unrelated to twisted so
sorry about the post!

Just incase it could help anyone in the future, the issue was the live
traffic did have an extra step of going though a load balancer, which
had an idle connection timeout of 60 seconds on it. I was kind of
surprised that this closed the data connection as the PASV connection
is established directly between the server and client, but I guess
when the load balancer kills the initial connection it also stops the
data connection some how too.



From exarkun at twistedmatrix.com  Thu Jul 10 13:32:53 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 10 Jul 2014 19:32:53 -0000
Subject: [Twisted-Python] Tubes!
Message-ID: <20140710193253.7498.1641870942.divmod.xquotient.115@top>

Hello all,

Some of you may have heard rumors of some work in progress on a 
replacement for Twisted's IConsumer/IProducer interfaces.

Tubes have been largely Glyph's effort (though a lot of people have 
contributed in one way or another).  And a large effort it's been. 
Development is proceeding in a Twisted branch and comes to over three 
thousand lines of additions so far.

Given the large size of the implementation and the long time that this 
effort has been underway (I remember the Twisted meetup at the Rackspace 
offices that *I* attended when I was visiting SF... a year and a half 
ago... at which point tubes wasn't exactly a brand new project) I'd like 
to re-raise the idea that the best next step for the project is to see 
some distribution in its *current* state.

Specifically, I think it would be beneficial to set up a tubes project 
on Github under the Twisted organization and try for a release in the 
very near future.

I think this has several advantages over the status quo:

  1) As an independent project, tubes will attract more attention than it 
presently gets as a relatively unknown ticket & branch of Twisted.

  2) As a separate Python package, the logistics of actually using tubes 
are simpler (just consider how you might declare a dependency on a 
branch of Twisted - keeping in mind you may want to use tubes in a 
project that already depends on some version of Twisted).  It may not 
make sense to say that it is the same quality as Twisted proper right 
off the bat (on the other hand, it may well - I suspect tubes in its 
current form actually is a lot higher quality than large sections of 
Twisted) but that doesn't mean people (not to mention the tubes project) 
can't benefit from being able to experiment with it.

  3) Decoupling tubes from Twisted frees tubes from certain of Twisted's 
policies which are more challenging to follow for the kind of non- 
trivial, brand new code base that tubes is.  Technically we could just 
say that these policies don't apply to a tubes package *in* Twisted but 
this kind of subtle distinction is often lost on users (ie application 
developers).

    a) Twisted's compatibility policy need not apply.  It could either be 
sped up or abandoned more thoroughly.  I'm generally a fan of being 
backwards compatible even when you have few users because it actually 
makes development easier, but loosening the policy to say things might 
break if it's just really inconvenient to keep them working (whereas 
Twisted goes to the inconvenience to keep them working) seems 
reasonable.

    b) tubes can undergo a faster release cycle to benefit more from user 
feedback.

  4) At this point, a normal review of the tubes branch is going to be a 
problem.  We do not have good tools or mechanisms for dealing with 
branches this large.  The code in the current tubes branch can just 
become master of a new project.  Development going forward from this 
point should continue to follow the feature-branch, small-changes, pre- 
commit-peer-review process.  But those 3k lines are written already. 
Short of an extremely expensive effort to break the work up into 
smaller, self-contained pieces there's simply never going to be a *good* 
review in the typical style.

Additionally, it may turn out that tubes can remain independent 
indefinitely.  Someday perhaps Twisted would come to depend on it to 
allow the various protocols and applications implemented in Twisted to 
benefit from the superior abstractions it provides.  Or maybe once it 
has undergone a few iterations it will make sense to bring it back to 
Twisted.  I don't think this needs to be decided now.

There are downsides, of course.  All of the boring maintenance involved 
with having a separate project - setting up CI, actually doing the 
releases, etc.  Perhaps we could find some volunteers to help out with 
these tasks, though, in exchange for getting some great code out there?

I'm curious what the folks out there who develop applications using 
Twisted would find to be the easiest path forward.  I'm also curious to 
hear what Glyph thinks about all this. ;)

Jean-Paul



From glyph at twistedmatrix.com  Thu Jul 10 14:37:37 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Jul 2014 13:37:37 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>


On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:

> Hello all,
> 
> Some of you may have heard rumors of some work in progress on a replacement for Twisted's IConsumer/IProducer interfaces.
> 
> Tubes have been largely Glyph's effort (though a lot of people have contributed in one way or another).  And a large effort it's been. Development is proceeding in a Twisted branch and comes to over three thousand lines of additions so far.
> 
> Given the large size of the implementation and the long time that this effort has been underway (I remember the Twisted meetup at the Rackspace offices that *I* attended when I was visiting SF... a year and a half ago... at which point tubes wasn't exactly a brand new project) I'd like to re-raise the idea that the best next step for the project is to see some distribution in its *current* state.

Unfortunately, while I can see a lot of hypothetical benefit to what you're describing, I don't think this is appropriate in this specific case.  With other, superficially similar projects (large new features within Twisted), this might be the right thing to do, with some caveats about how we do new-feature integration that I discuss below.  Some of the aspects of tubes make it extra hard to split out though, despite the fact that it has few immediate dependencies.

The Tubes package implements a new primitive, which means that everything that uses it is going to be very tightly coupled to its precise semantics, and it has very little wiggle-room in terms of evolution once it's been released.

In its current state, Tubes is basically a research project.  Every focused burst of activity on it has resulted in a complete, 100% break in backwards compatibility, on the level of its API, its terminology, and its semantics.  Having a separate release might not imply that there will be a compatibility policy on par with the strictness of Twisted's current one, but it does usually imply some level of support or continued development.  If anyone had written an application against a previous revision of the Tubes branch, it would probably have been broken in the first place and it would definitely not still be working today (nor would it really be possible to port it or evolve it to use the new version without a complete rewrite).

While I currently believe that Tubes's API has firmed up and its current API is suitable for general purpose use, I have believed that at various points in the past as well when it was completely wrong.  This sentiment is very much of the "this time for sure!" variety, and I will not have confidence that it's actually complete until we have made it all the way through the documentation, examples, and testing of a full proof of concept - at which point I believe it would be suitable to include in a Twisted release anyway.

> Specifically, I think it would be beneficial to set up a tubes project on Github under the Twisted organization and try for a release in the very near future.
> 
> I think this has several advantages over the status quo:
> 
> 1) As an independent project, tubes will attract more attention than it presently gets as a relatively unknown ticket & branch of Twisted.

I would appreciate attention in the form of code review, commentary, and experimentation.  I would not appreciate attention in the form of actual users, though.  At least, not right now.  Maybe quite soon, though, depending on how the next few development sessions go.

> 2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted).  It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.

I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it.  Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero?  I will bet a significant amount of money that it's not 0% :-).

As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.

> 3) Decoupling tubes from Twisted frees tubes from certain of Twisted's policies which are more challenging to follow for the kind of non- trivial, brand new code base that tubes is.  Technically we could just say that these policies don't apply to a tubes package *in* Twisted but this kind of subtle distinction is often lost on users (ie application developers).

In this case, I actually want the twisted compatibility policy to apply.

> 4) At this point, a normal review of the tubes branch is going to be a problem.  We do not have good tools or mechanisms for dealing with branches this large.  The code in the current tubes branch can just become master of a new project.  Development going forward from this point should continue to follow the feature-branch, small-changes, pre- commit-peer-review process.  But those 3k lines are written already. Short of an extremely expensive effort to break the work up into smaller, self-contained pieces there's simply never going to be a *good* review in the typical style.

This is an issue either way, though.  And I believe that developing outside of Twisted just exacerbates the issue because it provides an opportunity for faster-paced development, which means more development, which means more addition of more lines of code, which means even more stuff to review eventually.

For example, the recently-landed logging branch was developed in Calendar Server first since we didn't want to develop something so central without experimenting with it in a real application first.  But that meant that by the time it landed it was a pretty substantial amount of code with many different features, rather than landing changes incrementally.  This created a massive code review problem, especially since we had no takers on my alternate code-review strategy proposals.  Since the branch evolved somewhat in response to feedback during its transplantation to Twisted and during the code review, we couldn't even plausibly say "this has been used in production" any more, since what landed ended up being different in some important details.  Don't get me wrong; it ended up being better in those details, the code review was totally worthwhile, but it nevertheless substantially lengthened development time.  (While I _very_ much appreciate Ralph heroically reviewing the whole branch by himself at PyCon, that doesn't really point to a scalable strategy for future feature development.)

So I am keenly interested in ways to address this problem rather than to work around it.  If we are going to try to develop new big Twisted features outside of Twisted,  maybe that's a good idea, but then we need a modified code-review policy for accepting those projects back in where they going to be subjected to code-review standards during development rather than in one giant burst at the end.

> Additionally, it may turn out that tubes can remain independent indefinitely.  Someday perhaps Twisted would come to depend on it to allow the various protocols and applications implemented in Twisted to benefit from the superior abstractions it provides.  Or maybe once it has undergone a few iterations it will make sense to bring it back to Twisted.  I don't think this needs to be decided now.

Again, for this specific case, I also don't think this would make a lot of sense.  The real benefit of Tubes will not be realized until all the protocols implemented within Twisted have at least a mechanism for integrating with them, if not being implemented using them entirely.  If you are writing a protocol that does websockets on one end and database traffic on the other, and you have a tube for processing something, if your inputs aren't founts and your outputs aren't drains, all the fancy flow-control features just won't work and you'll have minimal performance and robustness benefits.  (You might get some nice architectural benefits internally in your code, but you could get those with any kind of good composition idiom.)

> There are downsides, of course.  All of the boring maintenance involved with having a separate project - setting up CI, actually doing the releases, etc.  Perhaps we could find some volunteers to help out with these tasks, though, in exchange for getting some great code out there?

Even if my opinion were inverted on all of the points above, I really want to avoid doing this - I especially want to avoid the part where it somehow doesn't work on Twisted's heterogenous CI system when we try to reintegrate it after apparently working on some other one-version-of-linux CI infrastructure for some time :).

> I'm curious what the folks out there who develop applications using Twisted would find to be the easiest path forward.  I'm also curious to hear what Glyph thinks about all this. ;)

Thanks for the reminder that I need to be putting more time into this.  Hopefully I can put as much time into developing it this week as I put into writing this email ;-).

If you're writing this message because you want to use Tubes then the best way to do that would be to help finish developing it.  I'm happy to make some pair-programming appointments during the week - just let me know.  (Although this shrinks the pool of qualified reviewers even further, I'm sure if it's ready and we all start yelling about it, we can find someone to do it.)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140710/8c551f88/attachment-0002.html>

From radix at twistedmatrix.com  Thu Jul 10 14:47:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Thu, 10 Jul 2014 15:47:33 -0500
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <etPan.53befbe6.46e87ccd.183@densetsu>


On July 10, 2014 at 3:40:26 PM, Glyph Lefkowitz (glyph at twistedmatrix.com) wrote:


On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:


2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted).  It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.

I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it.  Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero?  I will bet a significant amount of money that it's not 0% :-).

As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.


For what it’s worth, if you add an “a%n” to the end of a version, pip won’t install it unless you specify the version exactly. e.g., “tubes” version “0.1a1” won’t be found if you type “pip install tubes”, only “pip install tubes==0.1a1”.



-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140710/d06552f8/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 10 15:19:14 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 10 Jul 2014 14:19:14 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <etPan.53befbe6.46e87ccd.183@densetsu>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <etPan.53befbe6.46e87ccd.183@densetsu>
Message-ID: <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>


On Jul 10, 2014, at 1:47 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> For what it’s worth, if you add an “a%n” to the end of a version, pip won’t install it unless you specify the version exactly. e.g., “tubes” version “0.1a1” won’t be found if you type “pip install tubes”, only “pip install tubes==0.1a1”.


Also "pip install --pre tubes", I believe.  Nevertheless, people put that into a config file somewhere and forget about it forever ;).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140710/464e80a2/attachment-0002.html>

From donald at stufft.io  Thu Jul 10 16:04:08 2014
From: donald at stufft.io (Donald Stufft)
Date: Thu, 10 Jul 2014 18:04:08 -0400
Subject: [Twisted-Python] Tubes!
In-Reply-To: <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <etPan.53befbe6.46e87ccd.183@densetsu>
 <6254FCFF-155B-4B95-A8A8-A3F75B9A7B00@twistedmatrix.com>
Message-ID: <9733EAF3-F67C-4782-BD7D-48DAE5CABB66@stufft.io>

Hmm, perhaps —pre shouldn’t be allowed in config files :V

On Jul 10, 2014, at 5:19 PM, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> 
> On Jul 10, 2014, at 1:47 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> 
>> For what it’s worth, if you add an “a%n” to the end of a version, pip won’t install it unless you specify the version exactly. e.g., “tubes” version “0.1a1” won’t be found if you type “pip install tubes”, only “pip install tubes==0.1a1”.
> 
> 
> Also "pip install --pre tubes", I believe.  Nevertheless, people put that into a config file somewhere and forget about it forever ;).
> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140710/43dce8a7/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140710/43dce8a7/attachment.sig>

From exarkun at twistedmatrix.com  Thu Jul 10 18:23:04 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 11 Jul 2014 00:23:04 -0000
Subject: [Twisted-Python] Tubes! (package metadata and version
	constraints)
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <20140711002304.7498.1425758629.divmod.xquotient.124@top>

On 10 Jul, 08:37 pm, glyph at twistedmatrix.com wrote:
>
>On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:
>>2) As a separate Python package, the logistics of actually using tubes 
>>are simpler (just consider how you might declare a dependency on a 
>>branch of Twisted - keeping in mind you may want to use tubes in a 
>>project that already depends on some version of Twisted).  It may not 
>>make sense to say that it is the same quality as Twisted proper right 
>>off the bat (on the other hand, it may well - I suspect tubes in its 
>>current form actually is a lot higher quality than large sections of 
>>Twisted) but that doesn't mean people (not to mention the tubes 
>>project) can't benefit from being able to experiment with it.
>
>I would love it if there were a way to release a package in an actually 
>experimental state, and not just have the release of a package 
>implicitly tell people that it's time to put it into production and 
>demand long-term support for it.  Quick sanity check: go run 'pip 
>freeze' in a production virtualenv you're running - what percentage of 
>the version numbers that come back start with a zero?  I will bet a 
>significant amount of money that it's not 0% :-).
>
>As it stands, if you're not willing to use a random outdated branch of 
>Twisted with unknown bugs that may change without warning, you're 
>probably not willing to adopt Tubes yet.

I think you missed part of my point here.

I want to try tubes and see if they make my application simpler or 
better or faster or whatever.  My application depends on Twisted >= 
14.0.0.  It doesn't matter how or why: that's what the metadata says and 
I can't use an older version of Twisted unless I do a bunch of stupid 
package/distribution related hacking that I don't want to do.  *So* much 
of the Python tooling has now moved to requiring and respecting explicit 
dependency declarations that trying to side-step these now is a 
significant hassle.  Separating tubes from Twisted solves this problem.

It's not at all a question of whether the code is stable or production 
ready or even works at all, it's a matter of packaging constraints.

Jean-Paul



From glyph at twistedmatrix.com  Fri Jul 11 00:39:22 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 10 Jul 2014 23:39:22 -0700
Subject: [Twisted-Python] Tubes! (package metadata and version
	constraints)
In-Reply-To: <20140711002304.7498.1425758629.divmod.xquotient.124@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
 <20140711002304.7498.1425758629.divmod.xquotient.124@top>
Message-ID: <E255B306-32D2-421C-8805-16F6B9F13882@twistedmatrix.com>


On Jul 10, 2014, at 5:23 PM, exarkun at twistedmatrix.com wrote:

> On 10 Jul, 08:37 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Jul 10, 2014, at 12:32 PM, exarkun at twistedmatrix.com wrote:
>>> 2) As a separate Python package, the logistics of actually using tubes are simpler (just consider how you might declare a dependency on a branch of Twisted - keeping in mind you may want to use tubes in a project that already depends on some version of Twisted).  It may not make sense to say that it is the same quality as Twisted proper right off the bat (on the other hand, it may well - I suspect tubes in its current form actually is a lot higher quality than large sections of Twisted) but that doesn't mean people (not to mention the tubes project) can't benefit from being able to experiment with it.
>> 
>> I would love it if there were a way to release a package in an actually experimental state, and not just have the release of a package implicitly tell people that it's time to put it into production and demand long-term support for it.  Quick sanity check: go run 'pip freeze' in a production virtualenv you're running - what percentage of the version numbers that come back start with a zero?  I will bet a significant amount of money that it's not 0% :-).
>> 
>> As it stands, if you're not willing to use a random outdated branch of Twisted with unknown bugs that may change without warning, you're probably not willing to adopt Tubes yet.
> 
> I think you missed part of my point here.
> 
> I want to try tubes and see if they make my application simpler or better or faster or whatever.  My application depends on Twisted >= 14.0.0.  It doesn't matter how or why: that's what the metadata says and I can't use an older version of Twisted unless I do a bunch of stupid package/distribution related hacking that I don't want to do.  *So* much of the Python tooling has now moved to requiring and respecting explicit dependency declarations that trying to side-step these now is a significant hassle.  Separating tubes from Twisted solves this problem.
> 
> It's not at all a question of whether the code is stable or production ready or even works at all, it's a matter of packaging constraints.

If you want to set up a development environment to work on this and try it out, I think you can do it right now.  I believe this simple and intuitive incantation will work:

pip install -e 'git+git at github.com:/twisted/twisted at 3c10ad3323f86d7194a3a4c9fd4e2e1bcd441fec#egg=Twisted-tubes-1956-7'

That's a post-14.0.0 package with the appropriate metadata (and I didn't cheat and merge forward first or anything, this is the most recent branch as of several weeks now).  Doing exactly that in a mktmpenv and then doing 'pip install twisted==14.0.0' results in a 'requirement already satisfied' for me, and everything imports as expected.

I think there's still probably stuff to talk about regarding the rest of your message but if this can get you past your immediate hurdle that would be great :).

-glyph




From tobias.oberstein at tavendo.de  Fri Jul 11 11:16:32 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 11 Jul 2014 10:16:32 -0700
Subject: [Twisted-Python] Tubes!
In-Reply-To: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
Message-ID: <634914A010D0B943A035D226786325D44479074C61@EXVMBX020-12.exch020.serverdata.net>

> Specifically, I think it would be beneficial to set up a tubes project on Github
> under the Twisted organization and try for a release in the very near future.
> 
> I think this has several advantages over the status quo:

+1 for splitting into a separate project.

even if Tubes would be considered experimental / mostly unusable right now.

the best thing that could happen: people actually start playing around with it. which provides real-world feedback.

"finishing" it in the backroom and only later release something "ready" without gathering real-world feedback: that's a risk IMO, rather than good practice.

I guess I am a proponent of the "release early release often" mantra.

better release something unfinished and gain feedback, than release something "finished" not meeting user expectations.

just my 2cts,

cheers,
/Tobias 



From tom.prince at ualberta.net  Sat Jul 12 14:34:09 2014
From: tom.prince at ualberta.net (Tom Prince)
Date: Sat, 12 Jul 2014 14:34:09 -0600
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <87wqbico5a.fsf@hermes.hocat.ca>

Glyph Lefkowitz <glyph at twistedmatrix.com> writes:

> While I currently believe that Tubes's API has firmed up and its 
> current API is suitable for general purpose use, I have believed 
> that at various points in the past as well when it was 
> completely wrong. This sentiment is very much of the "this time 
> for sure!" variety, and I will 
> [...]
> In this case, I actually want the twisted compatibility policy 
> to apply.

These two points seem to be somewhat conflicting.

> So I am keenly interested in ways to address this problem rather 
> than to work around it.  If we are going to try to develop new 
> big Twisted features outside of Twisted,  maybe that's a good 
> idea, but then we need a modified code-review policy for 
> accepting those projects back in where they going to be 
> subjected to code-review standards during development rather 
> than in one giant burst at the end.

This seems like a reasonable thing to do. If all the code has been 
subject to review according to twisteds procedure, then it would 
seem to be reasonable to require that the changes needed to move 
the code in to twisted would need to be reviewed (so moving files 
around and adjusting imports and the like).

> Even if my opinion were inverted on all of the points above, I 
> really want to avoid doing this - I especially want to avoid the 
> part where it somehow doesn't work on Twisted's heterogenous CI 
> system when we try to reintegrate it after apparently working on 
> some other one-version-of-linux CI infrastructure for some time 
> :).

It would certainly be possible to hook twisted's CI system to 
additional projects.



From trac at twistedmatrix.com  Sun Jul 13 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Jul 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1405231515.72.8984990429861400467@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140713/5a427695/attachment-0002.html>

From therve at twistedmatrix.com  Sun Jul 13 07:18:40 2014
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Sun, 13 Jul 2014 15:18:40 +0200
Subject: [Twisted-Python] Tubes!
In-Reply-To: <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
References: <20140710193253.7498.1641870942.divmod.xquotient.115@top>
 <0CB5A2D3-8249-449C-BC11-945856685B6A@twistedmatrix.com>
Message-ID: <CA+G4quj_DrFoDrCuVeazJD3LxY7vM1LtOyw0pRrjX4+S8VN8XQ@mail.gmail.com>

On Thu, Jul 10, 2014 at 10:37 PM, Glyph Lefkowitz
<glyph at twistedmatrix.com> wrote:
> While I currently believe that Tubes's API has firmed up and its current API
> is suitable for general purpose use, I have believed that at various points
> in the past as well when it was completely wrong.  This sentiment is very
> much of the "this time for sure!" variety, and I will not have confidence
> that it's actually complete until we have made it all the way through the
> documentation, examples, and testing of a full proof of concept - at which
> point I believe it would be suitable to include in a Twisted release anyway.

I think this is a wrong approach. When people say "You never get it
right the first time", I don't think they mean the first time they
write it, but rather the first time somebody else uses it. You'll
never be able to release something perfect.

> So I am keenly interested in ways to address this problem rather than to
> work around it.  If we are going to try to develop new big Twisted features
> outside of Twisted,  maybe that's a good idea, but then we need a modified
> code-review policy for accepting those projects back in where they going to
> be subjected to code-review standards during development rather than in one
> giant burst at the end.

Now you're talking about the real issue. It's almost impossible to
write anything non-trivial in Twisted nowadays. One part is the
compatibility policy, with the whole "Who knows who may subclass that
thing. Don't ever change an attribute!". Overall we have a development
process averses to change. That's why tubes isn't released yet: you
know that if we put it out there we won't be able to fix it. For the
same reasons we haven't been able to fix Web or Conch.

If the answer is to put more stuff outside, I think it's rather sad.
I'd hope it would be to make the development process more lightweight.

--
Thomas



From rutt.4 at osu.edu  Sun Jul 13 08:16:05 2014
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Sun, 13 Jul 2014 10:16:05 -0400
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
	reactor.resolve()
Message-ID: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>

Hi,

I need to do a DNS resolution of a hostname to an IPv4 address in order to
then send out a UDP packet via twisted’s APIs.  There appears to be 2 ways
to do this.  Is it better to use twisted.names.client.getHostByName(), or
is it better to use reactor.resolve()?  Is there a bias for one over the
other?  Is one deprecated and the other isn’t?

BTW they appear to behave differently; at work, I have a hostname that the
one (getHostByName) resolves to None in the callback, and the other
(reactor.resolve) resolves to a valid IP address in the callback.  That
analysis is based on twisted 12.3.0 on linux.  Naturally I'm preferring
reactor.resolve at this point, as it works better for the hostname in
question (it happens to be a hostname that uses a CNAME record to alias to
another hostname).

Thanks,


-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140713/c0485e88/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Jul 13 11:47:22 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Jul 2014 17:47:22 -0000
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
 reactor.resolve()
In-Reply-To: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
References: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
Message-ID: <20140713174722.7498.531797607.divmod.xquotient.137@top>

On 02:16 pm, rutt.4 at osu.edu wrote:
>Hi,
>
>I need to do a DNS resolution of a hostname to an IPv4 address in order 
>to
>then send out a UDP packet via twisted’s APIs.  There appears to be 2 
>ways
>to do this.  Is it better to use twisted.names.client.getHostByName(), 
>or
>is it better to use reactor.resolve()?  Is there a bias for one over 
>the
>other?  Is one deprecated and the other isn’t?

`reactor.resolve` is "do something, who knows what really, to turn a 
name into an IPv4 address".

`twisted.names.client.getHostByName` is "use Twisted's DNS client 
implementation to issue the necessary DNS queries to resolve a name into 
an IPv4 or IPv6 address".

If you definitely only care about IPv4 then `reactor.resolve` is going 
to work correctly in more situations.  By default it will use the system 
resolver.  Therefore, by default, you will get whatever weird 
configuration the system resolver has been given (for example: use 
/etc/hosts or use mDNS or use NIS or YP or whatever.

Note that `reactor.resolve` is a pluggable interface and application 
code is allowed to substitute an alternate resolver implementation which 
may work in some other way.

If you care specifically about DNS or you need IPv6 or you have a reason 
to want to avoid threads (which, by default, `reactor.resolve` uses), 
you might prefer to use `twisted.names.client` directly.

Most applications will probably be okay with `reactor.resolve` but I 
imagine this could change as IPv6 use gradually becomes more widespread.

Jean-Paul



From kebin70 at gmail.com  Mon Jul 14 15:11:21 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Mon, 14 Jul 2014 14:11:21 -0700
Subject: [Twisted-Python] dumb question on qt4reactor
In-Reply-To: <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>
References: <CAA-sNEagN1Uw2eR8ccaGmYddk5NpCrbR14vskVXj7Gw=VUbK7g@mail.gmail.com>
 <20140706002456.6611.327452863.divmod.xquotient.271@top>
 <CAA-sNEYW3Hnuef+ONMC3s-d_u42nNW+9fWzYLEYZ9M8GmiG=zQ@mail.gmail.com>
 <CA+U=zK2KhShOEH+_GY_ydCs7z7j1R+MU0jyRpCXTVTMX6E8Ceg@mail.gmail.com>
Message-ID: <CAA-sNEZg3wQanJu7qSfG2oxy3yPHF-70Zabui_xYJMJSSs7cFA@mail.gmail.com>

finalizing - maybe I'm not describing my usage correctly.  I've used
reactor.callLater(0,blah) as a means of starting a unit of work the
by-product of which the caller didn't need.

this is really a case of laying tracks for 2 years not fully comprehending
the train coming down the tracks behind me!  I sorta refused to learn/use
inlinecallbacks or generators and I've never used callInThread until now.
I inserted that into my S3 upload pipeline and it works, simplifying my
code but detaches the caller from reactive failure.

The mechanism you've described is different ~ a callLater to an estimated
point of work completion, maybe a holding pattern if work isn't completed
after the delay, and maybe not a bad means of observation (?)...but yes
disastrous if the callLater function is wired poorly.  Unless I'm
misreading.

Anyway I'm sure my code is illogical since I've was left to my own devices
to solve problems of my own choosing.

The by-product you can see here www.pokertalon.com - a single connection
html5 app.


On Wed, Jul 9, 2014 at 10:51 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> It might be, but I can't think of a reason off hand why it ever _should_
> be.  I can kind of see how it might work, but if your "async" process ever
> takes longer than your callLater delay it will break, and probably quite
> horribly.
>
>
> On Wed, Jul 9, 2014 at 12:11 PM, Kevin Mcintyre <kebin70 at gmail.com> wrote:
>
>> Another "Oh right" twisted moment.  callInThread instead of callLater?
>>
>> This is a case where I've been laying tracks for 2 years without totally
>> understanding the train that was eventually coming down the tracks.  I
>> guess I implicitly understood by wanting to move to a separate reactor as a
>> separate thread, and in the past when I've used callLater it's encapsulated
>> non-blocking code.
>>
>> In this sense is callLater ever utilized as a pseudo asynchronous method?
>>
>>
>>
>> On Sat, Jul 5, 2014 at 5:24 PM, <exarkun at twistedmatrix.com> wrote:
>>
>>> On 5 Jul, 08:35 pm, kebin70 at gmail.com wrote:
>>>
>>>> calling reactor.callLater within qt4reactor in an attempt to async non
>>>> webkit work but not seeing expected behavior.  Webkit locks while the
>>>> callLater function executes.
>>>>
>>>
>>> `callLater` does not make a blocking function into a non-blocking one.
>>> It just calls a function after a specified delay.  If the function blocks,
>>> then the reactor will block when it gets around to calling it.
>>>
>>> If you need to call blocking APIs you may need to call them in a
>>> separate thread (Twisted includes a threadpool that can help you with this)
>>> or a separate process (Twisted has some APIs for launching and interacting
>>> with other processes, too).  Of course, the ideal solution is often to find
>>> a non-blocking equivalent to the blocking API and use that instead (for
>>> example, I know that txaws is a project that exists - perhaps it can do the
>>> things to S3 that you want to do).
>>>
>>> Jean-Paul
>>>
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> --
> Kevin Horn
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140714/a33c2235/attachment-0002.html>

From alex.gaynor at gmail.com  Wed Jul 16 12:02:07 2014
From: alex.gaynor at gmail.com (Alex Gaynor)
Date: Wed, 16 Jul 2014 18:02:07 +0000 (UTC)
Subject: [Twisted-Python] Twisted Trac
Message-ID: <loom.20140716T200054-866@post.gmane.org>

Hi all,

A short while ago Twisted's trac installation was changed to reject new tickets
from anyone except a special white listed group.

As of yesterday I have reverted this change, (and turned the spam filter back
on). If you experience any issues trying to post, or notice and spam, please
feel free to reach out to me.

Alex




From glyph at twistedmatrix.com  Wed Jul 16 15:40:48 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 16 Jul 2014 14:40:48 -0700
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
Message-ID: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>

There's a new Python-based asynchronous SSH client and server in town:

<http://asyncssh.timeheart.net/#>

This looks to have a much more straightforward API and way better documentation than Conch, although it's of course python 3.4+ only and lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal handling features.

I hope that this project will spur a little friendly competition from Conch's maintainers, such as we are :-).

(Just a thought, it would be great if <https://twistedmatrix.com/documents/current/conch/howto/index.html> looked more like that web page, in terms of how long the examples are, what is demonstrated, and what is documented...)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140716/8dd71041/attachment-0002.html>

From adi at roiban.ro  Thu Jul 17 03:34:10 2014
From: adi at roiban.ro (Adi Roiban)
Date: Thu, 17 Jul 2014 12:34:10 +0300
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
In-Reply-To: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
Message-ID: <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>

Hi,

On 17 July 2014 00:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> There's a new Python-based asynchronous SSH client and server in town:
>
> <http://asyncssh.timeheart.net/#>
>
>
> This looks to have a much more straightforward API and *way* better
> documentation than Conch, although it's of course python 3.4+ only and
> lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal
> handling features.
>
> I hope that this project will spur a little friendly competition from
> Conch's maintainers, such as we are :-).
>
>
How did you found this project? I could not find it on PyPi and I failed to
find any information about how to contribute to the project... I did sent
an email to the author.

I could not find a suite of automated tests.  I hope that asyncssh is
willing to compete with Twisted Conch SSH and improve on this :)

I only looked quickly over the server examples but I am a bit worried about
the SSH key auth example and how SSH key validation is done .. or not done.

I prefer Conch API. For example I don't know what to say about asyncssh
begin_auth()  method, which when it returns True, it cause the
authentication to be skipped... I would prefer a name like
should_ignore_authentication... or something which describes better why and
how it should be used.

http://asyncssh.timeheart.net/api.html#asyncssh.SSHServer.begin_auth

Conch source code is very readable (for it's size and age) and I manage to
put it into use just by reading the code and docstrings/API docs.

I started to learn Conch with examples from Stack Overflow and I remember
that Jean-Paul was very active there.... so mabye conch documentation can
be improved by importing some of those examples.

Contributing to Twisted is a PITA so I guess that for some people
(companies) this is a good reason to start a new (single protocol targeted)
project.( ex Tornado).

At this stage, asyncssh does not have a better public development process.


Cheers,

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140717/31463c6c/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Jul 17 04:17:38 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Jul 2014 03:17:38 -0700
Subject: [Twisted-Python] some competition and hopefully inspiration for
	conch
In-Reply-To: <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
 <CAFycZ9d6Q0nFg5M6TS4mc3F-kevPKSc66dwxRd07nfhmYE_EJw@mail.gmail.com>
Message-ID: <509F35FA-BB99-4CF0-BAB8-580EBB02F65E@twistedmatrix.com>


On Jul 17, 2014, at 2:34 AM, Adi Roiban <adi at roiban.ro> wrote:

> Hi,
> 
> On 17 July 2014 00:40, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
> There's a new Python-based asynchronous SSH client and server in town:
> 
> <http://asyncssh.timeheart.net/#>
> 
> This looks to have a much more straightforward API and way better documentation than Conch, although it's of course python 3.4+ only and lacks many of Conch's sophisticated (if somewhat idiosyncratic) terminal handling features.
> 
> I hope that this project will spur a little friendly competition from Conch's maintainers, such as we are :-).
> 
>  
> How did you found this project?

The author announced it on the Tulip list.  Why do you ask?

> I could not find it on PyPi and I failed to find any information about how to contribute to the project... I did sent an email to the author.

It's on Github.  There's a link on the author's page.

> I could not find a suite of automated tests.  I hope that asyncssh is willing to compete with Twisted Conch SSH and improve on this :)

Huh, I hadn't gotten that far :-).

> (...) I prefer Conch API. (...)

Glad to hear it :).

> Conch source code is very readable (for it's size and age) and I manage to put it into use just by reading the code and docstrings/API docs.

I'm definitely glad that people can figure out how to use Conch, even given the state of its documentation :).  But it's definitely more of a struggle than it could be.  I think asyncssh's documentation style is one to aspire to: it's very straightforward, and tells you how to do useful things with very minimal examples.  I think there are some clunky bits of the Conch API which could be cleaned up, but even totally as-is we could probably asyncssh's their documentation outline, and possibly toss in a few more goodies as well.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140717/4d717a71/attachment-0002.html>

From p.mayers at imperial.ac.uk  Thu Jul 17 05:01:07 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Jul 2014 12:01:07 +0100
Subject: [Twisted-Python] some competition and hopefully inspiration for
 conch
In-Reply-To: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
References: <46CF1363-015D-421F-A6AA-AC5AFB112821@twistedmatrix.com>
Message-ID: <53C7ACF3.4070009@imperial.ac.uk>

On 16/07/14 22:40, Glyph Lefkowitz wrote:
> There's a new Python-based asynchronous SSH client and server in town:
>
>     <http://asyncssh.timeheart.net/#>
>
>
> This looks to have a much more straightforward API and /way/ better

The client endpoint API is great. It is what Conch should always have 
been and is a pleasure to work with, so congrats to the authors of that. 
It'll be even better when #6617 lands!

It would be great to have a conch server endpoint API.



From jonas.brunsgaard at gmail.com  Fri Jul 18 03:26:54 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Fri, 18 Jul 2014 11:26:54 +0200
Subject: [Twisted-Python] twisted.names.client.getHostByName() vs.
	reactor.resolve()
In-Reply-To: <20140713174722.7498.531797607.divmod.xquotient.137@top>
References: <CAMWA1_p578xZn-0GtNnbE1E_bc8-3_0uDi_fEWBF9DqTg+L-QA@mail.gmail.com>
 <20140713174722.7498.531797607.divmod.xquotient.137@top>
Message-ID: <CACVXvXow1vhS66iE9e=K79vUwcqUp71nCGDMqPTzP=NtC+4vuQ@mail.gmail.com>

Jean-Paul, you knowledge about twisted and your willingness to help is just
amazing for the framework ;)

http://www.ihighfive.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140718/4b0bd13e/attachment-0002.html>

From tgutu at ml.sun.ac.za  Fri Jul 18 08:24:08 2014
From: tgutu at ml.sun.ac.za (Tapiwa Gutu)
Date: Fri, 18 Jul 2014 16:24:08 +0200
Subject: [Twisted-Python] Bug in DeferredLock?
Message-ID: <CAP9j8O6SBfcbUO6KAW4U-WPci7Zq4+CSK+SBWrPe44-PqVrvvQ@mail.gmail.com>

We recently started experiencing the following error: *RuntimeError:
maximum recursion depth exceeded while calling a Python object*

After a fair bit of debugging we eventually found the problem and
implemented a fix for it in our codebase. We found that if a waiting
queue on a DeferredLock is ~125 (depending on call  depth) the error can
error. I recommend releasing the lock in a callLater.

The offending line is here:
https://twistedmatrix.com/trac/browser/trunk/twisted/internet/defer.py#L1360
And the script below can be used to reproduce the issue.

#!/usr/bin/env python
from twisted.internet import defer, reactor

LOCK = defer.DeferredLock()
FIRST_RUN = True

def deferred_sleep(delay):
    d = defer.Deferred()
    delay = reactor.callLater(delay, d.callback, True)
    d.delay = delay
    return d

@defer.inlineCallbacks
def synchronized_call():
    global FIRST_RUN
    yield LOCK.acquire()
    try:
        if FIRST_RUN:
            FIRST_RUN = False
            yield deferred_sleep(2)
            print "Queue length: %s" % len(LOCK.waiting)
    finally:
        LOCK.release()
        #reactor.callLater(0, lambda: LOCK.release())


if __name__ == '__main__':
    count = 125
    def start_test():
        for i in xrange(count):
            synchronized_call()

    reactor.callWhenRunning(start_test)
    reactor.run()

<http://www.ml.sun.ac.za/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140718/8342cb9e/attachment-0002.html>

From trac at twistedmatrix.com  Sun Jul 20 00:05:17 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Jul 2014 06:05:17 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1405836317.14.920189098687040198@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140720/efe3447e/attachment-0002.html>

From eburus at gmail.com  Sun Jul 20 01:20:53 2014
From: eburus at gmail.com (Alexander Burtsev)
Date: Sun, 20 Jul 2014 11:20:53 +0400
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
 <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
 <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
 <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
 <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
Message-ID: <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>

Congrats bro! stick to your course.

С уважением, Александр Бурцев

Skype: eburus
FB: www.facebook.com/eburus
http://bramabrama.com


On 28 Apr 2011, at 16:53, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:

> Yes, I'll drop it as soon as I won't need it anymore (probably in one week).
> 
> 2011/4/28 Laurens Van Houtven <_ at lvh.cc>
> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to ignore your pyzmq fork, right?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> 
> -- 
> Andrey Smirnov,
> Qik Web Team Lead
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140720/ce3277f3/attachment-0002.html>

From meejah at meejah.ca  Sun Jul 20 16:27:37 2014
From: meejah at meejah.ca (meejah)
Date: Mon, 21 Jul 2014 02:27:37 +0400
Subject: [Twisted-Python] ANN: txtorcon 0.10.1
Message-ID: <868unnsm1y.fsf@atlantis.meejah.ca>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,

A new minor release of txtorcon exists, fixing a couple bugs
introduced along with the endpoints feature in 0.10.0:

 * issue #78: Add tox tests and fix for Twisted 12.0.0 (and prior), as
   this is what Debian squeeze ships

 * issue #77: properly expand relative and tilde paths for
   hiddenServiceDir via endpoints

 * fix bug incorrectly issuing RuntimeError in brief window of time on
   event-listeners

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.10.1
   https://github.com/meejah/txtorcon/releases/tag/v0.10.1

sha256sum reports:

33f04523329b14accb2054b81c5da887c28b402c797ba895dc1ee58824e107f1  txtorcon-0.10.1-py2-none-any.whl
7a6e8fab71fd05c223d866b60b998cf308661ef1fc87d94e06c3b51f4ada4a6a  txtorcon-0.10.1.tar.gz

thanks,
meejah
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQEbBAEBAgAGBQJTzD25AAoJEMJgKAMSgGmnB8IH+MnRyCCKMgPJ2GjV01K+PVaU
UgvUXhaqLdQUbViKeYy7KNst9d8Dm3ejHr21kedE8oeY/ztHlLdvtJtgWWvTOrTI
qqh4wWfBVHeibSgsEzwNVdeJ3MtERPWuCrIkIWnathbVjfnkRW+cLPOtJUWtSi/d
pdN4ZC+K1jBvSeHPCDhf8sXSqdzsOxXOWn/9SUaa70c7kMrbxjMxO1Jw/miqftMq
/wo0vyXn4EeEdURa9hYFpUqgUbUFl6C1KiELNeHWtwGbGWku17bNgQn5HH7uY4/6
RODYBaAT327062m81ig7zQ6MmxKcngIG4Ic3qvJYeLerO/EnnNvzSs3Q+EGQeg==
=nsEx
-----END PGP SIGNATURE-----



From jonas.brunsgaard at gmail.com  Mon Jul 21 03:09:30 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 21 Jul 2014 11:09:30 +0200
Subject: [Twisted-Python] [ANN] txZMQ released
In-Reply-To: <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>
References: <BANLkTimbFwM1XnUd413iHe9FnCHFwKyoLw@mail.gmail.com>
 <BANLkTi=n=m=15sxLDru5ywM_gPhjfLEDug@mail.gmail.com>
 <BANLkTinpiAw1eQoLCTd5KD6_=K0Us_4BDQ@mail.gmail.com>
 <BANLkTi=nh89QAP9gEHhhBYwpc6gYdNZAsA@mail.gmail.com>
 <BANLkTikOYFHB3OdswoZpTU6C-aNo-G0MkQ@mail.gmail.com>
 <E7D88A73-8624-49EE-9F3B-DCDBFCF8CB2D@gmail.com>
Message-ID: <CACVXvXqgMM=Yp8t3xg6R=vLdQswzahLw_1u9gfaL-OGYyoy3NA@mail.gmail.com>

Thank you Andrey for making this release possible ;)


On Sun, Jul 20, 2014 at 9:20 AM, Alexander Burtsev <eburus at gmail.com> wrote:

> Congrats bro! stick to your course.
>
> С уважением, Александр Бурцев
>
> Skype: eburus
> FB: www.facebook.com/eburus
> http://bramabrama.com
>
>
> On 28 Apr 2011, at 16:53, Andrey Smirnov <smirnov.andrey at gmail.com> wrote:
>
> Yes, I'll drop it as soon as I won't need it anymore (probably in one
> week).
>
> 2011/4/28 Laurens Van Houtven <_ at lvh.cc>
>
>> Yeah, I saw that one and got confused. Just to be clear, I'm supposed to
>> ignore your pyzmq fork, right?
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> --
> Andrey Smirnov,
> Qik Web Team Lead
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140721/ddc632ab/attachment-0002.html>

From jonas.brunsgaard at gmail.com  Mon Jul 21 03:11:14 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 21 Jul 2014 11:11:14 +0200
Subject: [Twisted-Python] EuroPython2014
Message-ID: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>

Any of your guys at Euro Python in Berlin, right now? If so, I would like
to invite other Twisted users/dev for a beer later.. ;)

--
Jonas Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140721/5a1be2d8/attachment-0002.html>

From m-lists at the-moon.net  Mon Jul 21 05:25:26 2014
From: m-lists at the-moon.net (Richard Wall)
Date: Mon, 21 Jul 2014 12:25:26 +0100
Subject: [Twisted-Python] EuroPython2014
In-Reply-To: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
References: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
Message-ID: <CABefbUrkw8rquRfUksw6KuhqUYWb3dki4dfiPT5bT9HjZdTJ8A@mail.gmail.com>

On 21 July 2014 10:11, Jonas Brunsgaard <jonas.brunsgaard at gmail.com> wrote:
> Any of your guys at Euro Python in Berlin, right now? If so, I would like to
> invite other Twisted users/dev for a beer later.. ;)

Hi Jonas,

I'm currently trying to work on my Twisted Names talk and hoping to do
a Berlin cycle tour this afternoon. But I'd be up for a beer later
this evening. Around 8.30pm?

Maybe post on https://duckling.us/events/ep2014/ and Twitter (#ep14) too.

Otherwise we should definitely meet up during the conference and try
and organise a sprint for the weekend.

-RichardW.
@wallrj



From m-lists at the-moon.net  Fri Jul 25 11:13:28 2014
From: m-lists at the-moon.net (Richard Wall)
Date: Fri, 25 Jul 2014 19:13:28 +0200
Subject: [Twisted-Python] EuroPython2014
In-Reply-To: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
References: <CACVXvXr1GY8bE6vJ9xuOCSDOr_05VPqLjFPNdzwH=5zvmpvOeA@mail.gmail.com>
Message-ID: <CABefbUoxqB8ry0K3v4hzXfDJZ6XegKX4Tjc9i1V+E-xomiRYWg@mail.gmail.com>

On 21 July 2014 11:11, Jonas Brunsgaard <jonas.brunsgaard at gmail.com> wrote:
> Any of your guys at Euro Python in Berlin, right now? If so, I would like to
> invite other Twisted users/dev for a beer later.. ;)

Hey Jonas,

You were asking me about which tickets we can work on at the sprint tomorrow.

I created a page with some links to the existing list of "easy"
tickets. But I've found before that these are not all as easy as they
first seem; and some are actually already partially addressed. I'll
try and do some filtering before we start tomorrow.

 * https://twistedmatrix.com/trac/wiki/EuroPython2014

I've also linked to some of the development process documentation.

If anyone else has ideas about good tickets for beginners or high
urgency tickets please edit that wiki page.

Here's a link to the PyconUK sprint report to give you an idea of the
sort of things people worked on there:
 * https://twistedmatrix.com/pipermail/twisted-python/2013-September/027457.html

-RichardW.



From trac at twistedmatrix.com  Sun Jul 27 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Jul 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1406441115.86.6255079885658001875@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140727/8f4222c6/attachment-0002.html>

From sank.daniel at gmail.com  Sun Jul 27 20:26:02 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Sun, 27 Jul 2014 19:26:02 -0700
Subject: [Twisted-Python] Is there pb documentation somewhere?
Message-ID: <CAKN9TDLpVsqo15cADy0v1wPwDwMoBPFVQ_b3Jw37YuC-b0CMcw@mail.gmail.com>

I've been trying to address ticket 7274

https://twistedmatrix.com/trac/ticket/7274

To do this, I am trying to understand the PB protocol. While I found a spec
for banana in twisted-daniel/docs/core/specifications/banana.rst, I have
not found anything similar for pb. I've been piecing it together by writing
little test scripts, but it is slow going. In particular, it is very
difficult to understand the meaning of verbs like "cook" and "preserve" and
nouns like "persistent store" without some global picture of what's going
on.

1. Is there some kind of narrative documentation on how pb works under the
hood?

2. Is there a specification for the pb dialect of banana?

3. Is there anyone else out there interested enough in pb to want to work
with me to figure things out and produce documentation if there isn't any
currently?

Sincerely,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140727/5a0b0f4b/attachment-0002.html>

From _ at lvh.io  Mon Jul 28 02:54:54 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 28 Jul 2014 10:54:54 +0200
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
Message-ID: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>

Honored twistedeers,


Consider the following (blocking) decorator, which runs a function in a transaction:

def _with_transaction(f):
    def decorated(self, *args, **kwargs):
        conn = self.engine.connect()
        txn = conn.begin()

        try:
            result = f(self, conn, *args, **kwargs)
        except:
            txn.rollback()
            raise
        else:
            txn.commit()
            return

    return decorated

Where I to translate this logic verbatim to @inlineCallbacks, I get:

def _with_transaction(f):
    @inlineCallbacks
    def decorated(self, *args, **kwargs):
        conn = yield self.engine.connect()
        txn = yield conn.begin()

        try:
            result = yield f(self, conn, *args, **kwargs)
        except:
            yield txn.rollback()
            raise
        else:
            yield txn.commit()
            returnValue(result)

    return decorated

However, there’s a bug here! In the except clause: there’s an (implicit) current exception, to be re-raised by the bare raise statement. Unfortunately, when doing yield txn.rollback(), that conveniently eats said exception.

Of course, there’s a fairly simple workaround involving catching BaseException and capturing the exception instance explicitly.

I’m wondering if this is just a leaky abstraction, or if I should report it as a bug in @inlineCallbacks?


cheers
lvh



-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140728/0e78902c/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140728/0e78902c/attachment.sig>

From glyph at twistedmatrix.com  Mon Jul 28 16:56:04 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 28 Jul 2014 15:56:04 -0700
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
In-Reply-To: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
Message-ID: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>


On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Honored twistedeers,

Seriously, we need to come up with a good collective noun for ourselves one day.  We should have a referendum or something.

> Consider the following (blocking) decorator, which runs a function in a transaction:
> 
> def _with_transaction(f):
>     def decorated(self, *args, **kwargs):
> ...
>        try:
>             result = f(self, conn, *args, **kwargs)
>         except:
>             txn.rollback()
>             raise
> ...
> Where I to translate this logic verbatim to @inlineCallbacks, I get:
> 
> def _with_transaction(f):
>     @inlineCallbacks
>     def decorated(self, *args, **kwargs):
> ...
>         try:
>             result = yield f(self, conn, *args, **kwargs)
>         except:
>             yield txn.rollback()
>             raise
> ...
> 
> However, there’s a bug here! In the except clause: there’s an (implicit) current exception, to be re-raised by the bare raise statement. Unfortunately, when doing yield txn.rollback(), that conveniently eats said exception.

This is actually true of _with_transaction as well.  Any code, anywhere, might call sys.exc_clear(), or do some interpreter shenanigans that accidentally make the equivalent happen.  So when you are calling "rollback" on your transaction and perhaps running application code in a post-rollback hook (because your database has that, right?  you totally need it for some things).

And of course rollback can *itself* fail which wipes out the exception anyway - is that what you want to happen in that condition?

> Of course, there’s a fairly simple workaround involving catching BaseException and capturing the exception instance explicitly.
> 
> I’m wondering if this is just a leaky abstraction, or if I should report it as a bug in @inlineCallbacks?

I don't think there's any such thing as "just" a leaky abstraction :-).  If an abstraction leaks in an unspecified way, it's a bug.  Report away.

Personally, I'd do something like this:

try:
    ...
except:
    captured = Failure()
    yield txn.rollback()
    yield captured

because I find that it's more readable - rather than relying on ephemeral, manipulable state which should (but doesn't necessarily) follow conventions related to indentation, I explicitly capture the implicit state, on the only line of code where it's guaranteed to be the right thing.

Also worth noting that yielding the Failure will fail the Deferred returned by your inlineCallbacks function, implicitly terminating the execution of that function.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140728/9ae7b091/attachment-0002.html>

From waterbug at pangalactic.us  Mon Jul 28 17:44:43 2014
From: waterbug at pangalactic.us (Steve Waterbury)
Date: Mon, 28 Jul 2014 19:44:43 -0400
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
 abstraction or bug?
In-Reply-To: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
Message-ID: <53D6E06B.3020404@pangalactic.us>

On 07/28/2014 06:56 PM, Glyph Lefkowitz wrote:
>
> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
>> Honored twistedeers,
>
> Seriously, we need to come up with a good collective noun for ourselves
> one day.  We should have a referendum or something.

I vote for "minions" ... :)

Steve




From p.mayers at imperial.ac.uk  Tue Jul 29 03:23:11 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 29 Jul 2014 10:23:11 +0100
Subject: [Twisted-Python] Process pools and logging
Message-ID: <53D767FF.6070603@imperial.ac.uk>

Before I re-invent the wheel, is there a twisted library that will let me:

  1. Fire up child worker processes
  2. That log to a logObserver coming out in the parent
  3. Manage the whole lot as a .tac file

Note I *don't* need deferToProcess or similar in this situation. I just 
need to fire up N processes but have them managed by and logging "to" a 
single parent controlled by twistd.

(FWIW, they're stateless workers that pull from a work queue).



From burak at nehbit.net  Tue Jul 29 03:30:07 2014
From: burak at nehbit.net (burak at nehbit.net)
Date: Tue, 29 Jul 2014 12:30:07 +0300
Subject: [Twisted-Python] Process pools and logging
In-Reply-To: <53D767FF.6070603@imperial.ac.uk>
References: <53D767FF.6070603@imperial.ac.uk>
Message-ID: <44369EDE-6719-4B4A-B839-7DFC0A7C03CF@nehbit.net>

Hey Phil,

If I am understanding you correctly, you should be able to do some of these with Ampoule. I am doing all but the last (tac) on my app. (Aether)

Ampoule definitely needs some love, though. If I had time I'd possibly be taking care of it, since it seems to be abandoned.

Burak
   
Sent from my phone 

> On Jul 29, 2014, at 12:23, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> Before I re-invent the wheel, is there a twisted library that will let me:
> 
> 1. Fire up child worker processes
> 2. That log to a logObserver coming out in the parent
> 3. Manage the whole lot as a .tac file
> 
> Note I *don't* need deferToProcess or similar in this situation. I just need to fire up N processes but have them managed by and logging "to" a single parent controlled by twistd.
> 
> (FWIW, they're stateless workers that pull from a work queue).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140729/a04d87de/attachment-0002.html>

From dustin at v.igoro.us  Tue Jul 29 08:10:08 2014
From: dustin at v.igoro.us (Dustin J. Mitchell)
Date: Tue, 29 Jul 2014 10:10:08 -0400
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
 abstraction or bug?
In-Reply-To: <53D6E06B.3020404@pangalactic.us>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
 <53D6E06B.3020404@pangalactic.us>
Message-ID: <CAJtE5vRsNqHb5RkG35vvNs2SC-AzLMbkLuDLvESe-fYvotFUqA@mail.gmail.com>

Bare except and bare raise are both bad Python style in general, for
exactly the reasons that lvh and glyph have identified.  That
inlineCallbacks (might?) turn "bad style as it might fail when you
least expect it" into "always fails" doesn't seem like a bug to me --
in fact, by removing some nondeterminism[1] I think it's a feature!

Dustin

[1] Of the worst kind: based on deployment details, library versions,
configuration, and DB server behavior, rather than truly random

On Mon, Jul 28, 2014 at 7:44 PM, Steve Waterbury
<waterbug at pangalactic.us> wrote:
> On 07/28/2014 06:56 PM, Glyph Lefkowitz wrote:
>>
>>
>> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>>
>>> Honored twistedeers,
>>
>>
>> Seriously, we need to come up with a good collective noun for ourselves
>> one day.  We should have a referendum or something.
>
>
> I vote for "minions" ... :)
>
> Steve
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From hawkowl at atleastfornow.net  Tue Jul 29 08:15:45 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 29 Jul 2014 22:15:45 +0800
Subject: [Twisted-Python] inlineCallbacks and current exceptions: leaky
	abstraction or bug?
In-Reply-To: <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
References: <7E78305B-DDFC-40A6-B2B5-4BBCCEB7CA5B@lvh.io>
 <64E51A7D-763D-4932-A540-8F054C7D5C75@twistedmatrix.com>
Message-ID: <7B174CF9-1082-4499-BCCE-574B6D7B476E@atleastfornow.net>

On 29 Jul 2014, at 6:56, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:

> On Jul 28, 2014, at 1:54 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> Honored twistedeers,
> 
> Seriously, we need to come up with a good collective noun for ourselves one day.  We should have a referendum or something.

I’ve used the term “twistedgeers” before (rhymes with engineers), which sounds much nicer said than when it is typed.

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140729/bdf7fb1b/attachment.sig>

From lacrima.maxim at gmail.com  Thu Jul 31 04:03:31 2014
From: lacrima.maxim at gmail.com (Maxim Lacrima)
Date: Thu, 31 Jul 2014 13:03:31 +0300
Subject: [Twisted-Python] TerminalSession instance has no attribute
	'windowChanged'
Message-ID: <CAKef57Pmz7wJ2-g2SNeMpym7v3r_Z4j3AgDY5OfMCvtObbjs6Q@mail.gmail.com>

Hello!

When size of terminal window of ssh client is changed, then twisted ssh
server throws an exception:

exceptions.AttributeError: TerminalSession instance has no attribute
'windowChanged'

`manhole_ssh.TerminalSession` doesn't implement this method, but according
to ISession interface it should.

Is this a bug?

I use insults to create some curses-like ui and I need widgets to be
redrawn when the size of window is changed.

-- 
Regards,
Maxim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140731/f388713c/attachment-0002.html>

