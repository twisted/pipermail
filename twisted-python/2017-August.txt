From mrw at enotuniq.org  Tue Aug  1 01:06:31 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Tue, 01 Aug 2017 00:06:31 -0700
Subject: [Twisted-Python] [ANN] treq 17.7.0
Message-ID: <1501571191.34051.1059225208.666036FD@webmail.messagingengine.com>

Hello,

Treq 17.7.0 has been released!  

Treq is a high-level HTTP client library built on top of Twisted.

It's available on PyPI: https://pypi.org/project/treq/17.7.0/

You can read its documentation on Read The Docs:
http://treq.readthedocs.io/en/latest/

This release introduces a `json` argument to treq's request functions,
the value of which treq serializes to JSON and sends as the request's
body: http://treq.readthedocs.io/en/latest/api.html#treq.request

Please file GitHub issues if you encounter any problems: 
https://github.com/twisted/treq/issues

Thanks to everyone who contributed to this release!

-- 
  Mark Williams
  mrw at enotuniq.org


From dansut at gmail.com  Fri Aug  4 16:44:08 2017
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 4 Aug 2017 18:44:08 -0400
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
Message-ID: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>

During the PyPy2.7 5.8.0 testsuite run (actually happens under PyPy3.5
5.8.0 too) there always seems to be a group of 12 ERROR due to:
  twisted.internet.defer.TimeoutError

For the buildbot: https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
they seem to pretty much consistently happen during:
  twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
but running in my own environment(s) I also always see the 12
TimoutError but they can occur in a variety of different tests, I've
seen them in these as well as the above:
   twisted.news.test.test_news.NewsTests.testArticleRequest
   twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
   twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
and a bunch of others.

Always exactly 12 and always during same test for a single test run.
I've not been able to reproduce running anything but the full
testsuite - but they have always occured for me during full run.

Just wondered if anybody with more experience had a clue/idea as to
why this could happen (why 12), and how I could go about tracking down
the root cause.

Getting close to having PyPy be able to run twisted tests with no
FAILs but I have no idea what might be causing this.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From mithrandi at mithrandi.net  Fri Aug  4 21:22:14 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 05 Aug 2017 03:22:14 +0000
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
In-Reply-To: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
References: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
Message-ID: <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>

On Sat, 5 Aug 2017 at 00:44 Daniel Sutcliffe <dansut at gmail.com> wrote:

> For the buildbot:
> https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
> they seem to pretty much consistently happen during:
>   twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
> but running in my own environment(s) I also always see the 12
> TimoutError but they can occur in a variety of different tests, I've
> seen them in these as well as the above:
>    twisted.news.test.test_news.NewsTests.testArticleRequest
>    twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
>
>  twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
> and a bunch of others.
>

This kind of timeout usually means that the test is waiting for some event,
and due to an event ordering that wasn't expected, the event never happens;
for example, it might have already happened before you start waiting for
it, or it might not happen at all due to an error.

Sometimes this means that the test is really stuck, but often it means that
an error has occurred but was not handled by the test, so you get an error
(maybe logged, maybe not) but also the test never ends.

Always exactly 12 and always during same test for a single test run.
> I've not been able to reproduce running anything but the full
> testsuite - but they have always occured for me during full run.
>
> Just wondered if anybody with more experience had a clue/idea as to
> why this could happen (why 12), and how I could go about tracking down
> the root cause.
>

Look for missing error handling in the test to see if an error is occurring
that the test does not notice; if you're lucky, these errors may have been
logged (check test.log). If not, you may need to improve the error handling
and / or play around in a debugger.

If the test really is stuck, a common cause of PyPy vs CPython issues is
garbage collection or weakref callbacks happening in an unpredictable
ordering of events. I haven't looked at the tests in question but I would
check for things like __del__ methods (eg. files not being closed
explicitly) or weakref use in the vicinity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170805/ae2040ad/attachment.html>

From trac at twistedmatrix.com  Sun Aug  6 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 06 Aug 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1501999520.75.3727462532941149247@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170806/8532a99a/attachment.html>

From dansut at gmail.com  Mon Aug  7 15:45:44 2017
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 7 Aug 2017 17:45:44 -0400
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
In-Reply-To: <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>
References: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
 <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>
Message-ID: <CADzPF4v7nyvJVk4p2So7=aqEvjoH_3Bb=1nJmv=e_5YrGj=wyg@mail.gmail.com>

Many thanks Tristan for sharing your experiences here, I'm sure
they'll get me a little closer to finding the root cause of these test
result peculiarities.

On Sat, 5 Aug 2017 at 00:44 Daniel Sutcliffe <dansut at gmail.com> wrote:
>> For the buildbot:
>>   https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
>> they seem to pretty much consistently happen during:
>>   twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
>> but running in my own environment(s) I also always see the 12
>> TimoutError but they can occur in a variety of different tests, I've
>> seen them in these as well as the above:
>>   twisted.news.test.test_news.NewsTests.testArticleRequest
>>   twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
>>   twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
>> and a bunch of others.

On Fri, Aug 4, 2017 at 11:22 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> This kind of timeout usually means that the test is waiting for some event,
> and due to an event ordering that wasn't expected, the event never happens;
> for example, it might have already happened before you start waiting for it,
> or it might not happen at all due to an error.
>
> Sometimes this means that the test is really stuck, but often it means that
> an error has occurred but was not handled by the test, so you get an error
> (maybe logged, maybe not) but also the test never ends.

Having now looked deeper into the other tests I have had the ERROR
occur in I can confidently say there seems to little in common with
the tests I have seen get stuck in the TimeoutError. The last two in
list specifically seem like very unlikely culprits...

>From this my gut is that this is nothing to do with the tests
themselves and more to do with something in the long running trial
that is having issues when run under PyPy

>> Always exactly 12 and always during same test for a single test run.
>> I've not been able to reproduce running anything but the full
>> testsuite - but they have always occurred for me during full run.
>>
>> Just wondered if anybody with more experience had a clue/idea as to
>> why this could happen (why 12), and how I could go about tracking down
>> the root cause.
>
> Look for missing error handling in the test to see if an error is occurring
> that the test does not notice; if you're lucky, these errors may have been
> logged (check test.log). If not, you may need to improve the error handling
> and / or play around in a debugger.

Nothing in test.log when this happens, and I've yet to work out a way
of getting a debugger to cooperate by dropping me out of execution
when these TimeoutError occur so I can get an idea of what is being
waited for, where.

> If the test really is stuck, a common cause of PyPy vs CPython issues is
> garbage collection or weakref callbacks happening in an unpredictable
> ordering of events. I haven't looked at the tests in question but I would
> check for things like __del__ methods (eg. files not being closed
> explicitly) or weakref use in the vicinity.

I've certainly noticed differences with weakref and GC under PyPy, I think:
  twisted.test.test_threadpool.ThreadPoolTests.test_threadCreationArgumentsCallInThreadWithCallback
specifically shows as a FAIL under PyPy because the test relies on a
weakref being collected, when this can't be relied on under PyPy.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>


From itamar at itamarst.org  Wed Aug  9 14:57:54 2017
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 09 Aug 2017 16:57:54 -0400
Subject: [Twisted-Python] ANN: Crochet 1.8.0,
	now with unmangled function signatures
Message-ID: <1502312274.3742757.1068521384.305E21ED@webmail.messagingengine.com>

Crochet lets you use Twisted in any blocking Python program: Django,
Flask, wherever you want.

Another use case: if your Twisted program uses threads, it also has some
utilities that make it easier to call back into Twisted from threads.

Crochet 1.8.0 makes decorated function signatures match the original
signatures, for better IDE and doc-generation support. It also has fix
for AWS Lambda, and improved documentation.

https://github.com/itamarst/crochet for source, docs at
https://crochet.readthedocs.io/en/stable/, pip install crochet to get
it.

--
Itamar Turner-Trauring


From warner at lothar.com  Thu Aug 10 14:52:51 2017
From: warner at lothar.com (Brian Warner)
Date: Thu, 10 Aug 2017 13:52:51 -0700
Subject: [Twisted-Python] need a name for an endpoint forwarder
	(twist/twistd plugin)
Message-ID: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>

Hey, so I had a need the other day for something like Twisted's built-in
"twist portforward" module (which takes a TCP port to listen on, and
when someone connects, it proxies that connection to a TCP port on some
other host). Except I wanted something more general: portfoward can
listen on any endpoint, but it can only connect to TCP targets (it takes
a host+port, rather than a generic endpoint description, and there's a
hard-coded reactor.connectTCP inside).

You can add new types of endpoints by installing packages that include
plugins that implement IStreamClientEndpointStringParserWithReactor. For
example, a plugin that knew how to speak SRV (which is TCP except you
have to do a DNS lookup for the port number first) would enable an
endpoint like "srv:example.org:smtp".

With a generic portforwarder, this would let you leave a twist/twistd
process running, and then point your (non-SRV-aware) applications at a
local TCP port, but they'd really connect to the right SRV-mediated
target service. Which might be a lot easier than rewriting the
application, or finding some shared-library tricks that let you modify
the way it does the connect() call.

It was pretty easy to write, and the code is in
https://github.com/warner/tx-endpointforward .

But before I publish it, I wanted to see if anyone had a better idea for
a name. Or whether something like this exists already and I just didn't
find it.

I've seen projects with names like "tx-foo" and "txfoo" and "txFOO", and
I wasn't sure what the current consensus is.

Also, the twist/twistd plugin name could be better, running "twistd
endpointforward" is kind of verbose. "epfwd"? "epforward"?

Or, should this just be a patch to the built-in portforward.py module?
Maybe enhance it to take either a single endpoint argument, or a pair of
HOST,PORT args (which it turns into an endpoint descriptor with
"tcp:%s:%d").

Any thoughts?
 -Brian


From glyph at twistedmatrix.com  Thu Aug 10 15:30:15 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 10 Aug 2017 14:30:15 -0700
Subject: [Twisted-Python] need a name for an endpoint forwarder
 (twist/twistd plugin)
In-Reply-To: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>
References: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>
Message-ID: <0E590BC0-2EE5-4BEB-9350-51816AC43F81@twistedmatrix.com>


> On Aug 10, 2017, at 1:52 PM, Brian Warner <warner at lothar.com> wrote:
> 
> Or, should this just be a patch to the built-in portforward.py module?

Yup :).

https://twistedmatrix.com/trac/ticket/7057

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170810/cae263d1/attachment.html>

From barry.scott at forcepoint.com  Fri Aug 11 04:46:16 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 11 Aug 2017 11:46:16 +0100
Subject: [Twisted-Python] 17.5.0 _newtls.pu:207 loseConnection signature
	problem
Message-ID: <9053067.OpVeugPNUp@barry-scott-desktop>

I porting some code to latest twisted and I;m seeing the old code expects to 
call loseConenction with a reason.

But loseConnection in class ConnectionMixin does not have the parameter.

Is this an oversight or deliberate?

Barry


From exarkun at twistedmatrix.com  Fri Aug 11 06:12:32 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 11 Aug 2017 08:12:32 -0400
Subject: [Twisted-Python] 17.5.0 _newtls.pu:207 loseConnection signature
	problem
In-Reply-To: <9053067.OpVeugPNUp@barry-scott-desktop>
References: <9053067.OpVeugPNUp@barry-scott-desktop>
Message-ID: <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>

On Fri, Aug 11, 2017 at 6:46 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I porting some code to latest twisted and I;m seeing the old code expects
> to
> call loseConenction with a reason.
>

This code makes the mistake of treating a peculiarity of a particular
implementation of an interface as the interface itself.


>
> But loseConnection in class ConnectionMixin does not have the parameter.
>

Nor does the definition of loseConnection on the interface:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html#loseConnection


>
> Is this an oversight or deliberate?
>

Code that goes beyond the guarantees of the interface is limiting itself to
working with a particular implementation.  Sometimes it is less than clear
whether some behavior is intended to be guaranteed by the interface or not
- but in this case, it's pretty clear.  loseConnection accepts no
arguments.  Code that passes an argument may work with a specific
implementation but there's no guarantee it will work with other
implementations.  And "other implementations" includes "future versions of
a specific implementation".

So, it's deliberate.  If you want to make the application code in question
more portable across implementations, it should stop passing an argument.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170811/57b964e5/attachment.html>

From trac at twistedmatrix.com  Sun Aug 13 00:05:18 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Aug 2017 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1502604318.73.7635931929002632583@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170813/5d077ada/attachment.html>

From glyph at twistedmatrix.com  Sun Aug 13 00:48:27 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Aug 2017 23:48:27 -0700
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1502604318.73.7635931929002632583@twistedmatrix.com>
References: <1502604318.73.7635931929002632583@twistedmatrix.com>
Message-ID: <060FDB38-2E29-4906-850F-208F6DDF12FF@twistedmatrix.com>


> On Aug 12, 2017, at 11:05 PM, trac at twistedmatrix.com wrote:
> 
> Total:                 1          7       2400         -6
> 

Every week I look at this number, and usually it's positive - very happy to see it so negative this week! :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170812/084c1abc/attachment.html>

From barry.scott at forcepoint.com  Mon Aug 14 03:12:03 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 14 Aug 2017 10:12:03 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: 17.5.0 _newtls.pu:207
	loseConnection signatureproblem
In-Reply-To: <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>
References: <9053067.OpVeugPNUp@barry-scott-desktop>
 <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>
Message-ID: <2811051.SVuBOf4KfU@barry-scott-desktop>

On Friday, 11 August 2017 13:12:32 BST Jean-Paul Calderone wrote:
> On Fri, Aug 11, 2017 at 6:46 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > I porting some code to latest twisted and I;m seeing the old code expects
> > to
> > call loseConenction with a reason.
> 
> This code makes the mistake of treating a peculiarity of a particular
> implementation of an interface as the interface itself.
> 
> > But loseConnection in class ConnectionMixin does not have the parameter.
> 
> Nor does the definition of loseConnection on the interface:
> 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.I
> Transport.html#loseConnection
> > Is this an oversight or deliberate?
> 
> Code that goes beyond the guarantees of the interface is limiting itself to
> working with a particular implementation.  Sometimes it is less than clear
> whether some behavior is intended to be guaranteed by the interface or not
> - but in this case, it's pretty clear.  loseConnection accepts no
> arguments.  Code that passes an argument may work with a specific
> implementation but there's no guarantee it will work with other
> implementations.  And "other implementations" includes "future versions of
> a specific implementation".
> 
> So, it's deliberate.  If you want to make the application code in question
> more portable across implementations, it should stop passing an argument.

Thanks for the clarification.

That begs the question of why any implementation of loseConnection has
extended beyond the interface.

Barry


From jaroslaw.fedewicz at gmail.com  Mon Aug 14 18:22:36 2017
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Tue, 15 Aug 2017 02:22:36 +0200
Subject: [Twisted-Python] Is there a nice way to write transport-agnostic
	protocols and servers/clients?
Message-ID: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>

Recently, I needed to write a client for a server which can listen on one
of these:

1) TCP
2) UDP
3) Unix stream sockets
4) Unix datagram sockets

And pain it was, as a matter of fact. The only thing that was easy was the
streaming protocols part. In the datagram land, it was all different:

1) I had to cope with a fact that transport.connect() only really works
with UDP, and employ a workaround which allowed me to use the same protocol
class for both UDP and Unix datagrams
2) setting up client for UDP and datagram is a wildly different procedure:
for Unix datagram sockets, I use reactor.connectUNIXDatagram(), for UDP I
need to use reactor.listenUDP(0, ...) which is fairly confusing to say the
least
3) endpoints, for some reason, with connection parameters as strings, and
unified connection routine do not exist for datagram protocols at all
4) it seems either impossible or really hard to create a transport-agnostic
protocol (with the bulk of logic defined on an upper layer, and
framing/messaging defined at the transport level protocol classes), which
could be connected to any endpoint it supports, using clientFromString() or
serverToString().

The number of protocols that use TCP or UDP interchangeably is quite high.
Some applications where Twisted would be an appropriate choice, could even
work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc.

(I haven't even looked at the issue of lower layers or other address
families yet, there be dragons.)

My question is: does anyone share my pain? Is there some kind of ongoing
effort to design an API or anything else? What can I do to help?

-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170815/a108cb59/attachment.html>

From barry.scott at forcepoint.com  Tue Aug 15 06:43:45 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 15 Aug 2017 13:43:45 +0100
Subject: [Twisted-Python] Chunked decoding missing from HTTPClient?
Message-ID: <4358208.IFeyFRxXzr@barry-scott-desktop>

I see that HTTPChannel knows about chunking and indeed works well.

However shouldn't HTTPClient also support chunking?
Or Am I missing something to get chunking working for the response from a 
server?

Barry


From exarkun at twistedmatrix.com  Tue Aug 15 07:12:21 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 15 Aug 2017 09:12:21 -0400
Subject: [Twisted-Python] Chunked decoding missing from HTTPClient?
In-Reply-To: <4358208.IFeyFRxXzr@barry-scott-desktop>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
Message-ID: <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>

On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I see that HTTPChannel knows about chunking and indeed works well.
>
> However shouldn't HTTPClient also support chunking?
> Or Am I missing something to get chunking working for the response from a
> server?
>
>
Take a look at
http://twistedmatrix.com/documents/current/web/howto/client.html which
documents the newer HTTP client API in Twisted.  You may also want to have
a look at https://treq.readthedocs.io/en/latest/ which provides another
layer on top of that which may be even easier to use for your purposes.

HTTPClient is old, implements HTTP/1.0, and will probably be deprecated and
removed before too much longer.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170815/a04f0311/attachment.html>

From cory at lukasa.co.uk  Wed Aug 16 02:07:12 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 16 Aug 2017 09:07:12 +0100
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
Message-ID: <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>



> On 15 Aug 2017, at 01:22, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com> wrote:
> 
> The number of protocols that use TCP or UDP interchangeably is quite high. Some applications where Twisted would be an appropriate choice, could even work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc. 

Is it? TCP and UDP behave *very* differently: what protocols can safely use them interchangeably?

As to QUIC/DCCP/STCP and friends, ultimately the natural thing to do is to use composition of protocols, the same way TLSMemoryBIOProtocol does in Twisted. Essentially, you write a class (or collection of classes) that present themselves as both a protocol and a transport, and then you create a pipeline. For HTTP/2, for example, we have the following series of objects: reactor <-> TCP transport <-> TLSMemoryBIOProtocol <-> H2Connection <-> H2Stream <-> Request body handler protocol (provided by the user).

In each case, the intermediary objects provide both a transport and protocol interface. For example, from the TCP transport’s perspective, TLSMemoryBIOProtocol is a protocol. But from H2Connection’s perspective, it’s a transport. Similarly, H2Connection and H2Stream together provide both a protocol and transport interface: H2Connection is a protocol, H2Stream is a transport, and they communicate together.

For QUIC, ultimately it’s a protocol that runs over UDP. So you’d want to compose again: QUIC should be a protocol from the perspective of the UDP transport, and a transport from the perspective of its inner protocol (which would probably want to be something like HTTP, though there are some thorns here).

The only thing you can’t paste over is the difference between a streaming and non-streaming transport, which is as it should be: you cannot treat these two as identical. If *your specific protocol* can, then that’s ok: define an extra object that does the mapping. For example, imagine we’re using CorytextTransferProtocol, which can run over UDP and TCP equally well. Let’s not worry about how it does this (probably it has to reinvent TCP over UDP, but let’s not care). The way you’d do it is to define your core protocol logic in terms of, say, the stream transport interface (`class CorytextTransferProtocol` will call transport.write). Then, you write a shim class: `class UDPtoTCPforCTTPMapping`, say. This class does nothing if its transport is a stream transport, but does some appropriate transformation for datagram transports. Then, when you instantiate your protocol you set the mapping class as the protocol for the underlying transport, and then make the CorytextTransferProtocol class the protocol for the mapping. Essentially you get: underlying transport <-> UDPtoTCPforCTTPMapping <-> CorytextTransferProtocol.

The great advantage of this is that your two classes can be decoupled, so if the strategy of mapping streaming to datagram transport is general it can be re-used by other protocols that want a streaming interface.

Does this make sense?


From jaroslaw.fedewicz at gmail.com  Wed Aug 16 05:53:07 2017
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Wed, 16 Aug 2017 13:53:07 +0200
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
Message-ID: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>

This makes a perfect sense. (I ended up implementing it in this sorta way,
but the other way around: it was a primarily-datagram protocol that could
use TCP as a transport, provided there is appropriate framing.)

However, while there is really a need for a shim to make use of
polytransport protocols (DNS, syslog, SIP, NFS are a few), it looks like
every Twisted user should bring their own. This bothers me, but just a
little bit.

Also, your reply does not address the little discrepancies that exist in
Twisted between two kinds of datagram protocols (namely, Unix datagram
sockets and UDP): seems like UDP APIs progressed while Unix datagram socket
support was "left behind". I don't know if this is deliberate or not.

One thing that is also notably missing from the puzzle is that there is no
support for datagram endpoints. With stream sockets, I can now use strings
and clientFromString()/serverFromString() and be blissfully ignorant if
it's TCP or a Unix socket. I cannot do the same with datagram sockets, I
need to be actively aware if what I'm dealing with is a UDP socket or a
Unix datagram socket.

I'd gladly implement something to fill the gap, but I fear my contribution
would be rejected because, say, it doesn't conform to the general direction
Twisted is heading, whatever that may be. Or because datagram protocols are
somehow inferior as a class. Or because Unix datagram sockets in particular
should die and burn in hell.



On Wed, Aug 16, 2017 at 10:07 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
>
> > On 15 Aug 2017, at 01:22, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
> wrote:
> >
> > The number of protocols that use TCP or UDP interchangeably is quite
> high. Some applications where Twisted would be an appropriate choice, could
> even work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc.
>
> Is it? TCP and UDP behave *very* differently: what protocols can safely
> use them interchangeably?
>
> As to QUIC/DCCP/STCP and friends, ultimately the natural thing to do is to
> use composition of protocols, the same way TLSMemoryBIOProtocol does in
> Twisted. Essentially, you write a class (or collection of classes) that
> present themselves as both a protocol and a transport, and then you create
> a pipeline. For HTTP/2, for example, we have the following series of
> objects: reactor <-> TCP transport <-> TLSMemoryBIOProtocol <->
> H2Connection <-> H2Stream <-> Request body handler protocol (provided by
> the user).
>
> In each case, the intermediary objects provide both a transport and
> protocol interface. For example, from the TCP transport’s perspective,
> TLSMemoryBIOProtocol is a protocol. But from H2Connection’s perspective,
> it’s a transport. Similarly, H2Connection and H2Stream together provide
> both a protocol and transport interface: H2Connection is a protocol,
> H2Stream is a transport, and they communicate together.
>
> For QUIC, ultimately it’s a protocol that runs over UDP. So you’d want to
> compose again: QUIC should be a protocol from the perspective of the UDP
> transport, and a transport from the perspective of its inner protocol
> (which would probably want to be something like HTTP, though there are some
> thorns here).
>
> The only thing you can’t paste over is the difference between a streaming
> and non-streaming transport, which is as it should be: you cannot treat
> these two as identical. If *your specific protocol* can, then that’s ok:
> define an extra object that does the mapping. For example, imagine we’re
> using CorytextTransferProtocol, which can run over UDP and TCP equally
> well. Let’s not worry about how it does this (probably it has to reinvent
> TCP over UDP, but let’s not care). The way you’d do it is to define your
> core protocol logic in terms of, say, the stream transport interface
> (`class CorytextTransferProtocol` will call transport.write). Then, you
> write a shim class: `class UDPtoTCPforCTTPMapping`, say. This class does
> nothing if its transport is a stream transport, but does some appropriate
> transformation for datagram transports. Then, when you instantiate your
> protocol you set the mapping class as the protocol for the underlying
> transport, and then make the CorytextTransferProtocol class the protocol
> for the mapping. Essentially you get: underlying transport <->
> UDPtoTCPforCTTPMapping <-> CorytextTransferProtocol.
>
> The great advantage of this is that your two classes can be decoupled, so
> if the strategy of mapping streaming to datagram transport is general it
> can be re-used by other protocols that want a streaming interface.
>
> Does this make sense?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/5ed73914/attachment.html>

From mithrandi at mithrandi.net  Wed Aug 16 06:09:11 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 16 Aug 2017 12:09:11 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
Message-ID: <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>

On Wed, 16 Aug 2017 at 13:53 Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
wrote:

> One thing that is also notably missing from the puzzle is that there is no
> support for datagram endpoints.
>

The lack of datagram endpoint abstractions is definitely just a "we haven't
gotten around to it yet"; stream endpoints were the initial focus mainly
because stream protocols are a lot more common than datagram protocols. The
ticket covering datagram endpoints is here, I believe:
https://twistedmatrix.com/trac/ticket/4471 There seems to be some old work
that was never completed, so picking this up again might be a good starting
point if you're keen on contributing in this area.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/ba73208a/attachment-0001.html>

From exarkun at twistedmatrix.com  Wed Aug 16 06:13:43 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 16 Aug 2017 08:13:43 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
Message-ID: <CAEeXt4NmZ9nh+NQM++rMhj_0H9Eb_YGE33wnRYD0TTD61A+JOg@mail.gmail.com>

On Wed, Aug 16, 2017 at 7:53 AM, Jarosław Fedewicz <
jaroslaw.fedewicz at gmail.com> wrote:

> This makes a perfect sense. (I ended up implementing it in this sorta way,
> but the other way around: it was a primarily-datagram protocol that could
> use TCP as a transport, provided there is appropriate framing.)
>
> However, while there is really a need for a shim to make use of
> polytransport protocols (DNS, syslog, SIP, NFS are a few), it looks like
> every Twisted user should bring their own. This bothers me, but just a
> little bit.
>

I don't think anyone working on Twisted has yet looked closely at these
various protocols to try to understand if there is a unifying abstraction
that would make a stream/datagram adapter possible.  There are differences
between the protocols that you mention that need to be accounted for and so
far everyone who has worked on implementations for Twisted has implemented
a custom solution for a particular protocol.  If you want to work on
figuring out what the abstraction might be, that seems useful.  I'd also
recommend you take a look at tubes <https://github.com/twisted/tubes> as a
potentially useful direction for solving this problem.


>
> Also, your reply does not address the little discrepancies that exist in
> Twisted between two kinds of datagram protocols (namely, Unix datagram
> sockets and UDP): seems like UDP APIs progressed while Unix datagram socket
> support was "left behind". I don't know if this is deliberate or not.
>

There's not as much interest in UNIX datagrams as there is in UDP.  There's
no particular reason why the UNIX datagram support shouldn't be brought up
to be on par with the UDP support.


>
> One thing that is also notably missing from the puzzle is that there is no
> support for datagram endpoints. With stream sockets, I can now use strings
> and clientFromString()/serverFromString() and be blissfully ignorant if
> it's TCP or a Unix socket. I cannot do the same with datagram sockets, I
> need to be actively aware if what I'm dealing with is a UDP socket or a
> Unix datagram socket.
>
> I'd gladly implement something to fill the gap, but I fear my contribution
> would be rejected because, say, it doesn't conform to the general direction
> Twisted is heading, whatever that may be. Or because datagram protocols are
> somehow inferior as a class. Or because Unix datagram sockets in particular
> should die and burn in hell.
>
>
Likewise, there's not as much interest in datagram transports as stream
transports.  There's no particular reason not to introduce datagram
endpoints  - someone just needs to do the work.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/a344d5ef/attachment.html>

From kevinjacobconway at gmail.com  Wed Aug 16 07:27:37 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 16 Aug 2017 13:27:37 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
Message-ID: <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>

Maybe I misunderstand the issue, but I believe the Endpoints API solves for
this. https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html

This abstracts the transport and allows you to focus on only interpreting
the bytes transmitted over that transport by defining a Protocol and a
Factory that plug into strports. This should allow you to have the business
logic defined in only one location while listening/requesting over
different transports.

On Wed, Aug 16, 2017, 07:15 Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> On Wed, 16 Aug 2017 at 13:53 Jarosław Fedewicz <
> jaroslaw.fedewicz at gmail.com> wrote:
>
>> One thing that is also notably missing from the puzzle is that there is
>> no support for datagram endpoints.
>>
>
> The lack of datagram endpoint abstractions is definitely just a "we
> haven't gotten around to it yet"; stream endpoints were the initial focus
> mainly because stream protocols are a lot more common than datagram
> protocols. The ticket covering datagram endpoints is here, I believe:
> https://twistedmatrix.com/trac/ticket/4471 There seems to be some old
> work that was never completed, so picking this up again might be a good
> starting point if you're keen on contributing in this area.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/abebdf6d/attachment.html>

From mithrandi at mithrandi.net  Wed Aug 16 07:59:33 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 16 Aug 2017 13:59:33 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
Message-ID: <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>

On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> for this.
> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>
> This abstracts the transport and allows you to focus on only interpreting
> the bytes transmitted over that transport by defining a Protocol and a
> Factory that plug into strports. This should allow you to have the business
> logic defined in only one location while listening/requesting over
> different transports.
>
There is no datagram endpoints API as yet, though (see #4471), only stream
endpoints.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/6b21462c/attachment.html>

From ceeborraa at gmx.de  Wed Aug 16 14:15:32 2017
From: ceeborraa at gmx.de (ceeborraa)
Date: Wed, 16 Aug 2017 22:15:32 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
Message-ID: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>

Hi,

I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS
server with Twisted. I strictly sticked to the example of
echoserv_ssl.py on
http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS
server is not running properly.

Despite the server starts correctly, it doesn't offer any cipher suites
to the client, no matter what kind of client is trying to connect. Any
time a client connects, the connection is immediately aborted by server
with the error message of:

<class 'OpenSSL.SSL.Error'>: [('SSL
routines','tls_post_process_client_hello',no shared cipher')]

I tried to connect to server with the TLS echo client example of
echoclient_ssl.py, with openssl s_client command and with nmap by using
the --ssl-enum-ciphers script. Each time it failed with the above error
message.

If I do not use the options offered by ssl.CertificateOptions() as
suggested in the example, but instead create a
ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and
Certificate as filename-strings, the server works correctly and offers
the intended cipher suites.

But I need to create the SSLContext from a OpenSSL PKey-Object (private
Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server
code of the TLS server example to:

certificate = ssl.Certificate(cert_obj)
privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
prkey_and_cert =
ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)

factory = protocol.Factory.forProtocol(Echo)
reactor.listenSSL(7498,factory,prkey_and_cert.options())

Again, the server starts, but it does not provide cipher suites so that
no client can connect. Same as above!

Appreciate any help!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/681adcab/attachment.html>

From exarkun at twistedmatrix.com  Wed Aug 16 15:24:38 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 16 Aug 2017 17:24:38 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
Message-ID: <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>

On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>> for this. https://twistedmatrix.com/documents/16.4.1/core/howto/
>> endpoints.html
>>
>> This abstracts the transport and allows you to focus on only interpreting
>> the bytes transmitted over that transport by defining a Protocol and a
>> Factory that plug into strports. This should allow you to have the business
>> logic defined in only one location while listening/requesting over
>> different transports.
>>
> There is no datagram endpoints API as yet, though (see #4471), only stream
> endpoints.
>
>
Also, when there are datagram endpoints, they won't be compatible with
stream endpoints.  Endpoints don't abstract the transport, they abstract
*creating* the transport.

Twisted provides a uniform abstraction over stream-based transports like
TCP and gives you *ITransport* to implement an *IProtocol* against.  It
also provides a uniform abstraction over datagram-based transports like UDP
and gives you *IUDPTransport* (oops; should have been *IDatagramTransport* and
some other things about it should probably be changed too) to implement a
*DatagramProtocol* (oops; no interface for this one, just subclass: see,
this should change) against.  But it doesn't provide a uniform abstraction
over both stream-based and datagram-based transports.

Implementing such a thing may be possible and even a good idea but no one
has yet done it for Twisted (as far as I know).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/85223c55/attachment.html>

From kevinjacobconway at gmail.com  Wed Aug 16 20:03:41 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 02:03:41 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
Message-ID: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>

> There is no datagram endpoints API as yet, though (see #4471), only
stream endpoints.

I'm not sure I understand the distinction. Endpoints supports UDP which is
a datagram based transport. From a Protocol perspective, you only care
about which bytes are received. If you have a framing concept I'm your data
format then it should be handled there.

What am I not understanding about this particular use case?

On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
wrote:

> On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
>> wrote:
>>
>>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>>> for this.
>>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>>>
>>> This abstracts the transport and allows you to focus on only
>>> interpreting the bytes transmitted over that transport by defining a
>>> Protocol and a Factory that plug into strports. This should allow you to
>>> have the business logic defined in only one location while
>>> listening/requesting over different transports.
>>>
>> There is no datagram endpoints API as yet, though (see #4471), only
>> stream endpoints.
>>
>>
> Also, when there are datagram endpoints, they won't be compatible with
> stream endpoints.  Endpoints don't abstract the transport, they abstract
> *creating* the transport.
>
> Twisted provides a uniform abstraction over stream-based transports like
> TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> also provides a uniform abstraction over datagram-based transports like UDP
> and gives you *IUDPTransport* (oops; should have been *IDatagramTransport* and
> some other things about it should probably be changed too) to implement a
> *DatagramProtocol* (oops; no interface for this one, just subclass: see,
> this should change) against.  But it doesn't provide a uniform abstraction
> over both stream-based and datagram-based transports.
>
> Implementing such a thing may be possible and even a good idea but no one
> has yet done it for Twisted (as far as I know).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/f1af3aa3/attachment.html>

From kevinjacobconway at gmail.com  Wed Aug 16 23:35:33 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 05:35:33 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>

> There is no datagram endpoints API as yet, though (see #4471), only
stream endpoints.

I've read through the ticket. What I still don't understand is the
significance of this of this? Other than some irrelevant callbacks, what
prevents anyone from using the existing UDP endpoint? It's not clear from
this thread why the specific transport abstraction is critically
important to the data protocol.

If you are building a Protocol then you use the 'dataReceived' callback to
parse the data. Can someone elaborate on why it matters if the bytes get
here via a datagram or TCP stream?

> But it doesn't provide a uniform abstraction over both stream-based and
datagram-based transports.

Again, why does this matter? If you run a service with multiple listening
transports, why does it matter which one is active? What differs in the way
you interpret the bytes received?

On Wed, Aug 16, 2017 at 9:03 PM Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > There is no datagram endpoints API as yet, though (see #4471), only
> stream endpoints.
>
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.
>
> What am I not understanding about this particular use case?
>
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
>> On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
>> mithrandi at mithrandi.net> wrote:
>>
>>> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
>>> wrote:
>>>
>>>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>>>> for this.
>>>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>>>>
>>>> This abstracts the transport and allows you to focus on only
>>>> interpreting the bytes transmitted over that transport by defining a
>>>> Protocol and a Factory that plug into strports. This should allow you to
>>>> have the business logic defined in only one location while
>>>> listening/requesting over different transports.
>>>>
>>> There is no datagram endpoints API as yet, though (see #4471), only
>>> stream endpoints.
>>>
>>>
>> Also, when there are datagram endpoints, they won't be compatible with
>> stream endpoints.  Endpoints don't abstract the transport, they abstract
>> *creating* the transport.
>>
>> Twisted provides a uniform abstraction over stream-based transports like
>> TCP and gives you *ITransport* to implement an *IProtocol* against.  It
>> also provides a uniform abstraction over datagram-based transports like UDP
>> and gives you *IUDPTransport* (oops; should have been
>> *IDatagramTransport* and some other things about it should probably be
>> changed too) to implement a *DatagramProtocol* (oops; no interface for
>> this one, just subclass: see, this should change) against.  But it doesn't
>> provide a uniform abstraction over both stream-based and datagram-based
>> transports.
>>
>> Implementing such a thing may be possible and even a good idea but no one
>> has yet done it for Twisted (as far as I know).
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/5e3a6da4/attachment-0001.html>

From barry.scott at forcepoint.com  Thu Aug 17 03:01:59 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 17 Aug 2017 10:01:59 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Is there a nice way to
	writetransport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <7554828.1IiCzkikFO@barry-scott-desktop>

On Thursday, 17 August 2017 03:03:41 BST Kevin Conway wrote:
> > There is no datagram endpoints API as yet, though (see #4471), only
> 
> stream endpoints.
> 
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.

streams like TCP will reliably deliver what you send.
but UDP makes no gareentee 

> 
> What am I not understanding about this particular use case?
> 
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> 
> wrote:
> > On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> > 
> > mithrandi at mithrandi.net> wrote:
> >> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> >> 
> >> wrote:
> >>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> >>> for this.
> >>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
> >>> 
> >>> This abstracts the transport and allows you to focus on only
> >>> interpreting the bytes transmitted over that transport by defining a
> >>> Protocol and a Factory that plug into strports. This should allow you to
> >>> have the business logic defined in only one location while
> >>> listening/requesting over different transports.
> >> 
> >> There is no datagram endpoints API as yet, though (see #4471), only
> >> stream endpoints.
> > 
> > Also, when there are datagram endpoints, they won't be compatible with
> > stream endpoints.  Endpoints don't abstract the transport, they abstract
> > *creating* the transport.
> > 
> > Twisted provides a uniform abstraction over stream-based transports like
> > TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> > also provides a uniform abstraction over datagram-based transports like
> > UDP
> > and gives you *IUDPTransport* (oops; should have been *IDatagramTransport*
> > and some other things about it should probably be changed too) to
> > implement a *DatagramProtocol* (oops; no interface for this one, just
> > subclass: see, this should change) against.  But it doesn't provide a
> > uniform abstraction over both stream-based and datagram-based transports.
> > 
> > Implementing such a thing may be possible and even a good idea but no one
> > has yet done it for Twisted (as far as I know).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From barry.scott at forcepoint.com  Thu Aug 17 03:10:01 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 17 Aug 2017 10:10:01 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Is there a nice way to
	writetransport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <2149350.gWhUNXtBod@barry-scott-desktop>

On Thursday, 17 August 2017 03:03:41 BST Kevin Conway wrote:
> > There is no datagram endpoints API as yet, though (see #4471), only
> 
> stream endpoints.
> 
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.

Oppss. last message escaped before being finished.

What I was trying to say is that trying to plug in UDP in place of TCP is not 
going to work. datagrams sent with UDP can be dropped and reorder, where
as TCP will always deliver in order and not drop data.

Protocols that use UDP understand these differences and exploit them.
For example DNS and media streaming.

Barry

> 
> What am I not understanding about this particular use case?
> 
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> 
> wrote:
> > On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> > 
> > mithrandi at mithrandi.net> wrote:
> >> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> >> 
> >> wrote:
> >>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> >>> for this.
> >>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
> >>> 
> >>> This abstracts the transport and allows you to focus on only
> >>> interpreting the bytes transmitted over that transport by defining a
> >>> Protocol and a Factory that plug into strports. This should allow you to
> >>> have the business logic defined in only one location while
> >>> listening/requesting over different transports.
> >> 
> >> There is no datagram endpoints API as yet, though (see #4471), only
> >> stream endpoints.
> > 
> > Also, when there are datagram endpoints, they won't be compatible with
> > stream endpoints.  Endpoints don't abstract the transport, they abstract
> > *creating* the transport.
> > 
> > Twisted provides a uniform abstraction over stream-based transports like
> > TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> > also provides a uniform abstraction over datagram-based transports like
> > UDP
> > and gives you *IUDPTransport* (oops; should have been *IDatagramTransport*
> > and some other things about it should probably be changed too) to
> > implement a *DatagramProtocol* (oops; no interface for this one, just
> > subclass: see, this should change) against.  But it doesn't provide a
> > uniform abstraction over both stream-based and datagram-based transports.
> > 
> > Implementing such a thing may be possible and even a good idea but no one
> > has yet done it for Twisted (as far as I know).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From exarkun at twistedmatrix.com  Thu Aug 17 04:13:45 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2017 06:13:45 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
Message-ID: <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>

On Thu, Aug 17, 2017 at 1:35 AM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > There is no datagram endpoints API as yet, though (see #4471), only
> stream endpoints.
>
> I've read through the ticket. What I still don't understand is the
> significance of this of this? Other than some irrelevant callbacks, what
> prevents anyone from using the existing UDP endpoint? It's not clear from
> this thread why the specific transport abstraction is critically
> important to the data protocol.
>

What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
about the Twisted API collection that centers around
*twisted.internet.endpoints*.  Is that what you're talking about?


>
> If you are building a Protocol then you use the 'dataReceived' callback
> to parse the data. Can someone elaborate on why it matters if the bytes get
> here via a datagram or TCP stream?
>

Often, protocols which have a TCP variation and a UDP variation use
different framing depending on which one they're running over.  Therefore,
you cannot have a transport-neutral  parser.  Parsing depends on the
transport.

Also, in Twisted, if you use UDP, you must implement a *DatagramProtocol* and
the *datagramReceived* method.  If you use TCP, you must implement a
*Protocol* and the *dataReceived* method.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/23e04286/attachment.html>

From kevinjacobconway at gmail.com  Thu Aug 17 06:52:03 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 12:52:03 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
 <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
Message-ID: <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>

> What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
about the Twisted API collection that centers around
*twisted.internet.endpoints*.  Is that what you're talking about?

Oh... Yes, that is true. I think I was reading UNIX and saying UDP in my
head. I'm really sorry for the confusion I'm causing. On the bright side, I
now understand the problem. Sorry, folks.

On Thu, Aug 17, 2017 at 5:14 AM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Aug 17, 2017 at 1:35 AM, Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
>> > There is no datagram endpoints API as yet, though (see #4471), only
>> stream endpoints.
>>
>> I've read through the ticket. What I still don't understand is the
>> significance of this of this? Other than some irrelevant callbacks, what
>> prevents anyone from using the existing UDP endpoint? It's not clear from
>> this thread why the specific transport abstraction is critically
>> important to the data protocol.
>>
>
> What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
> about the Twisted API collection that centers around
> *twisted.internet.endpoints*.  Is that what you're talking about?
>
>
>>
>> If you are building a Protocol then you use the 'dataReceived' callback
>> to parse the data. Can someone elaborate on why it matters if the bytes get
>> here via a datagram or TCP stream?
>>
>
> Often, protocols which have a TCP variation and a UDP variation use
> different framing depending on which one they're running over.  Therefore,
> you cannot have a transport-neutral  parser.  Parsing depends on the
> transport.
>
> Also, in Twisted, if you use UDP, you must implement a *DatagramProtocol* and
> the *datagramReceived* method.  If you use TCP, you must implement a
> *Protocol* and the *dataReceived* method.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/fe7722ee/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Aug 17 07:23:12 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2017 09:23:12 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
 <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
 <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>
Message-ID: <CAEeXt4M_w8EbZJ+avcnmtZknrUgUqRxwZ8iGktXyLH1FpuZHAA@mail.gmail.com>

On Thu, Aug 17, 2017 at 8:52 AM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
> about the Twisted API collection that centers around
> *twisted.internet.endpoints*.  Is that what you're talking about?
>
> Oh... Yes, that is true. I think I was reading UNIX and saying UDP in my
> head. I'm really sorry for the confusion I'm causing. On the bright side, I
> now understand the problem. Sorry, folks.
>

Aha!  Yes, re-reading what you wrote and substituting UNIX for UDP,
everything makes much more sense.  Thanks for clarifying. :)

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/69a6d863/attachment.html>

From p.mayers at imperial.ac.uk  Thu Aug 17 16:47:16 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Aug 2017 23:47:16 +0100
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
Message-ID: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>

This is an odd one; I have a simple test using the incremental xmlfile() 
feature of lxml, that crashes *only* if the test case inherits from 
trial.unittest.TestCase; it works if inheriting from unittest.TestCase.

SSCCE - well, hopefully correct - here:

https://gist.github.com/philmayers/387597c7407ab98f159426cea5f44a69

With lxml 3.8.0 (tried both manylinux1 wheel from PyPI and 
locally-compiled) and a debug python, I get:

$ bin/python2-debug -m twisted.trial test_repro.py
test_repro
   Test
     test_one ...    [OK]
     test_two ...    [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.032s

PASSED (successes=2)
python2-debug: /builddir/build/BUILD/Python-2.7.13/Python/getargs.c:229: 
vgetargs1: Assertion `compat || (args != (PyObject*)NULL)' failed.
Aborted (core dumped)

Obviously lxml is a pretty big chunk of Cython, but the trial-specific 
nature of the crash has me curious which of the two is at fault.

I have tried to debug it, and it basically seems to end up somewhere 
inside the Cython-generated code with an argument to a python function 
that is NULL when it shouldn't be.

Any ideas?


From glyph at twistedmatrix.com  Thu Aug 17 23:23:40 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Aug 2017 22:23:40 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
Message-ID: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>


> On Aug 16, 2017, at 1:15 PM, ceeborraa <ceeborraa at gmx.de> wrote:
> 
> Hi,
> 
> I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly. 
> 
> Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of: 
> 
> <class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
> 
> I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
> 
> If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
> 
> But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to: 
> 
> certificate = ssl.Certificate(cert_obj)
> privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
> prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
> 
> factory = protocol.Factory.forProtocol(Echo)
> reactor.listenSSL(7498,factory,prkey_and_cert.options())
> 
> Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
> 
> Appreciate any help!

This sounds like it might be a configuration problem with your build of OpenSSL.  Can you post the most detailed explanation of what versions of everything you're using that you can?  Particularly: your operating system, any installed version of OpenSSL, cryptography?  (If you know how to check which OpenSSL cryptography is linked to, that would be great too.)  What attributes does the private key have?

Thanks for using Twisted,

-g


From mithrandi at mithrandi.net  Fri Aug 18 00:05:58 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 18 Aug 2017 06:05:58 +0000
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
In-Reply-To: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
References: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
Message-ID: <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>

On Fri, 18 Aug 2017 at 00:47 Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> SSCCE - well, hopefully correct - here:
>
> https://gist.github.com/philmayers/387597c7407ab98f159426cea5f44a69
>

Note that I don't think you're allowed to catch GeneratorExit like this;
normally doing so will crash your program with a RuntimeError after the
generator fails to exit (possibly masked here by the generator living until
the end of the program). However, I was able to reproduce the crash even
after removing the try/except, so I don't think this issue is related.

Given that the crash only occurs at exit, I suspect this has something to
do with finalizers running at a bad time during interpreter shutdown, but I
don't have time at the moment to look into this deeply (I just spotted the
GeneratorExit issue and wanted to check if that was the problem).

I suspect this is an lxml or Cython bug, ultimately, but changing the test
base class changes some ordering of events arbitrarily resulting in this
heisencrash. Alternatively, it might have something to do with logging.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170818/7ce6a6fe/attachment.html>

From p.mayers at imperial.ac.uk  Fri Aug 18 00:51:59 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Aug 2017 07:51:59 +0100
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
In-Reply-To: <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>
References: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
 <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>
Message-ID: <26295a4f-1410-8642-b8f5-85bea36c5eeb@imperial.ac.uk>

On 18/08/2017 07:05, Tristan Seligmann wrote:

> Note that I don't think you're allowed to catch GeneratorExit like this; 

Interesting, I cribbed that from the lxml docs. Will look into it, 
thanks for the pointer.

> Given that the crash only occurs at exit, I suspect this has something 
> to do with finalizers running at a bad time during interpreter shutdown, 
> but I don't have time at the moment to look into this deeply (I just 
> spotted the GeneratorExit issue and wanted to check if that was the 
> problem).
> 
> I suspect this is an lxml or Cython bug, ultimately, but changing the 
> test base class changes some ordering of events arbitrarily resulting in 
> this heisencrash. Alternatively, it might have something to do with logging.

You're spot on - I have managed to trim the test-case down to a plain 
python script, no twisted/trial. It seems to crash the interpreter on 
exit any time >1 xmlfile is live at that point, but it does not crash if 
you del the objects in certain orders - trial was obviously just 
revealing it.

Thanks for the attention and apologies for the noise, seems this is 
nothing to do with Twisted.

Regards,
Phil


From rodrigc at crodrigues.org  Sat Aug 19 08:18:37 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 19 Aug 2017 07:18:37 -0700
Subject: [Twisted-Python] Appveyor build problems
Message-ID: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>

Hi,

A few of the Appveyor builds have been failing
intermittently due to networking problems
at Appveyor.  This was due to Appveyor moving
to a new datacenter:

http://help.appveyor.com/discussions/problems/7409-chocolatey-timeout-when-installing-openssh

Things seem OK now, but if there are problems we
can let Appveyor know.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/1ffabaf8/attachment.html>

From ceeborraa at gmx.de  Sat Aug 19 10:53:03 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sat, 19 Aug 2017 18:53:03 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
Message-ID: <trinity-7469527f-7c11-472a-97c3-c975ede5f882-1503161583330@3c-app-gmx-bs07>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/a13a63b5/attachment.html>

From ceeborraa at gmx.de  Sat Aug 19 10:55:16 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sat, 19 Aug 2017 18:55:16 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
Message-ID: <trinity-4276b276-ae40-4b6e-a494-4450be2f772f-1503161716687@3c-app-gmx-bs07>

Again as text mail... sorry!

Ok, let me try to provide some detailled information, hope it helps:
 
> openssl version -a:
OpenSSL 1.1.0f  25 May 2017
built on: reproducible build, date unspecified
platform: linux-x86_64
compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DOPENSSLDIR="\"/usr/local/ssl\"" -DENGINESDIR="\"/usr/local/lib/engines-1.1\""  -Wa,--noexecstack
OPENSSLDIR: "/usr/local/ssl"
ENGINESDIR: "/usr/local/lib/engines-1.1"
 
> uname -vr
4.9.0-3-amd64 #1 SMP Debian 4.9.30-2+deb9u2 (2017-06-26)
 
 
> Installed python3 (3.5.3) packages via pip:
cryptography 2.0.3
pyopenssl 17.2.0
Twisted 17.5.0
 
I linked cryptography with the following flags:
CFLAGS="-I/usr/local/include"
LDFLAGS="-L/usr/local/lib"
 
I think I know where the problem is. It's obviously not Twisted. I'm using an ECC private key from curve secp521r1 and as far as I understand, pyOpenSSL still has some problems with supporting this type of private keys.
 
Its some kind of strange behaviour. I can parse the ECC key from file and do some operations with it (e.g. signing a file) which works well.
But if I just call the check() method of the pkey object, I get the error: "Unsupported key type" from pyOpenSSL. I think this is the reason why Twisted cannot get the TLS options from it.
A similar situation is being described here: https://github.com/pyca/pyopenssl/issues/291
 
I tried to follow the workaround being described in the issue from the link above, namely to serialise the private key to cryptography and later to convert it to a pyOpenSSL pkey object, but it still does not support the key type.
 
Maybe you have an idea of how to get those things work?
 
Thank you 
 

Gesendet: Freitag, 18. August 2017 um 07:23 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> On Aug 16, 2017, at 1:15 PM, ceeborraa <ceeborraa at gmx.de> wrote:
>
> Hi,
>
> I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly.
>
> Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of:
>
> <class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
>
> I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
>
> If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
>
> But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to:
>
> certificate = ssl.Certificate(cert_obj)
> privkey = ssl.KeyPair(pkey) # pkey is the OpenSSL PKey object
> prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
>
> factory = protocol.Factory.forProtocol(Echo)
> reactor.listenSSL(7498,factory,prkey_and_cert.options())
>
> Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
>
> Appreciate any help!

This sounds like it might be a configuration problem with your build of OpenSSL. Can you post the most detailed explanation of what versions of everything you're using that you can? Particularly: your operating system, any installed version of OpenSSL, cryptography? (If you know how to check which OpenSSL cryptography is linked to, that would be great too.) What attributes does the private key have?

Thanks for using Twisted,

-g

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]


From mithrandi at mithrandi.net  Sat Aug 19 11:53:09 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 19 Aug 2017 17:53:09 +0000
Subject: [Twisted-Python] Nevow 0.14.3rc1 released
In-Reply-To: <CAMcKhMR3fD0a0YmDLq9ekzjjRkLpmuZnmVBz-TyOFn+p2m7EMw@mail.gmail.com>
References: <CAMcKhMR3fD0a0YmDLq9ekzjjRkLpmuZnmVBz-TyOFn+p2m7EMw@mail.gmail.com>
Message-ID: <CAMcKhMSpbj+UEwo+=2_yR0-QPW3gsZO4rVMqZSg-HAF1xRvknA@mail.gmail.com>

On Wed, 26 Jul 2017 at 20:46 Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> I've uploaded a prerelease of Nevow 0.14.3 to PyPI[1]. This contains a fix
> for some Athena client-side timeout behaviour (or more specifically, the
> lack of one) and removes use of FilePath.getmtime.
>

I've uploaded the final release of Nevow 0.14.3[1]; the only changes since
the prerelease relate to some issues around versioning and the __version__
attribute.

[1] https://pypi.python.org/pypi/Nevow/0.14.3

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/f9b8e977/attachment-0001.html>

From trac at twistedmatrix.com  Sun Aug 20 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Aug 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1503209120.52.1339088729534287156@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170820/ae7dfe3c/attachment.html>

From ceeborraa at gmx.de  Sun Aug 20 10:30:31 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sun, 20 Aug 2017 18:30:31 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
Message-ID: <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>


 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem:

class MySSLContext(ssl.ContextFactory):
    
    _context = None
    
    def __init__(self,privateKey, certificate, sslmethod=SSL.TLSv1_2_METHOD, _contextFactory=SSL.Context):
        
        self.privateKey = privateKey
        self.certificate = certificate
        self._contextFactory = _contextFactory
        self.sslmethod = sslmethod
        
        self.cacheContext()
        
    def cacheContext(self):
        
        if(self._context is None):
            
            ctx = self._contextFactory(self.sslmethod)
            
            ctx.set_options(SSL.OP_NO_SSLv2)
            ctx.set_options(SSL.OP_NO_SSLv3)
            ctx.use_privatekey(self.privateKey)
            ctx.use_certificate(self.certificate)
            
            self._context = ctx
            
    def getContext(self):
        
        return self._context

This context can now work with the EC private key from secp521r1!
 

Gesendet: Mittwoch, 16. August 2017 um 22:15 Uhr
Von: ceeborraa <ceeborraa at gmx.de>
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] SSLContext not valid for TLS Server

Hi,
I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly.
Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of:
<class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to:
certificate = ssl.Certificate(cert_obj)
privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
factory = protocol.Factory.forProtocol(Echo)
reactor.listenSSL(7498,factory,prkey_and_cert.options())
Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
Appreciate any help!
_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]


From glyph at twistedmatrix.com  Sun Aug 20 14:36:58 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 20 Aug 2017 13:36:58 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
Message-ID: <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>


> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem:

Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.

DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html> ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170820/7b5443e5/attachment.html>

From barry.scott at forcepoint.com  Mon Aug 21 03:52:54 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 21 Aug 2017 10:52:54 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Chunked decoding missing from
	HTTPClient?
In-Reply-To: <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
Message-ID: <2260631.PGH0HxWAjT@barry-scott-desktop>

On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > I see that HTTPChannel knows about chunking and indeed works well.
> > 
> > However shouldn't HTTPClient also support chunking?
> > Or Am I missing something to get chunking working for the response from a
> > server?
> 
> Take a look at
> http://twistedmatrix.com/documents/current/web/howto/client.html which
> documents the newer HTTP client API in Twisted.

I'm interested in using a subclass of HTTPClientParser with Agent.
It does not seem that I can do this simply and have Agent use my class.

I see that its hardwired in HTTP11ClientProtocol.request().

Is this possible?

> You may also want to have
> a look at https://treq.readthedocs.io/en/latest/ which provides another
> layer on top of that which may be even easier to use for your purposes.

Looks nice, but too high level for our use.

> 
> HTTPClient is old, implements HTTP/1.0, and will probably be deprecated and
> removed before too much longer.

Got it.

> 
> Jean-Paul

Barry


From exarkun at twistedmatrix.com  Mon Aug 21 04:27:53 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 21 Aug 2017 06:27:53 -0400
Subject: [Twisted-Python] COMMERCIAL:Re: Chunked decoding missing from
	HTTPClient?
In-Reply-To: <2260631.PGH0HxWAjT@barry-scott-desktop>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
 <2260631.PGH0HxWAjT@barry-scott-desktop>
Message-ID: <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>

On Mon, Aug 21, 2017 at 5:52 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> > On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com
> >
> >
> > wrote:
> > > I see that HTTPChannel knows about chunking and indeed works well.
> > >
> > > However shouldn't HTTPClient also support chunking?
> > > Or Am I missing something to get chunking working for the response
> from a
> > > server?
> >
> > Take a look at
> > http://twistedmatrix.com/documents/current/web/howto/client.html which
> > documents the newer HTTP client API in Twisted.
>
> I'm interested in using a subclass of HTTPClientParser with Agent.
> It does not seem that I can do this simply and have Agent use my class.
>
> I see that its hardwired in HTTP11ClientProtocol.request().
>
>
Yep, seems to be.


> Is this possible?
>

If you can convince folks there's a good reason to want to do this, you can
probably get a patch accepted that allows it.

Why do you want to do this?

Jean-Paul


>
> > You may also want to have
> > a look at https://treq.readthedocs.io/en/latest/ which provides another
> > layer on top of that which may be even easier to use for your purposes.
>
> Looks nice, but too high level for our use.
>
> >
> > HTTPClient is old, implements HTTP/1.0, and will probably be deprecated
> and
> > removed before too much longer.
>
> Got it.
>
> >
> > Jean-Paul
>
> Barry
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170821/7655ca12/attachment.html>

From barry.scott at forcepoint.com  Mon Aug 21 08:10:10 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 21 Aug 2017 15:10:10 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: COMMERCIAL:Re: Chunked decoding
	missing fromHTTPClient?
In-Reply-To: <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <2260631.PGH0HxWAjT@barry-scott-desktop>
 <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>
Message-ID: <25483489.JNdSSEalkj@barry-scott-desktop>

On Monday, 21 August 2017 11:27:53 BST Jean-Paul Calderone wrote:
> On Mon, Aug 21, 2017 at 5:52 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> > > On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com
> > > 
> > > wrote:
> > > > I see that HTTPChannel knows about chunking and indeed works well.
> > > > 
> > > > However shouldn't HTTPClient also support chunking?
> > > > Or Am I missing something to get chunking working for the response
> > 
> > from a
> > 
> > > > server?
> > > 
> > > Take a look at
> > > http://twistedmatrix.com/documents/current/web/howto/client.html which
> > > documents the newer HTTP client API in Twisted.
> > 
> > I'm interested in using a subclass of HTTPClientParser with Agent.
> > It does not seem that I can do this simply and have Agent use my class.
> > 
> > I see that its hardwired in HTTP11ClientProtocol.request().
> 
> Yep, seems to be.
> 
> > Is this possible?
> 
> If you can convince folks there's a good reason to want to do this, you can
> probably get a patch accepted that allows it.
> 
> Why do you want to do this?

There are places in twisted where we hardened it against malformed headers 
etc. Thoses changes might be something you want to take as a patch or we might 
need to keep subclassing pieces of the twisted stack.

I've got a long way with moving to twisted 17.5 from 2.0, the last piece,
I hope, is figuring out how to allow us to add code to the processing
without maintaining out of tree patches to twisted itself.

Barry

> 
> Jean-Paul
> 
> > > You may also want to have
> > > a look at https://treq.readthedocs.io/en/latest/ which provides another
> > > layer on top of that which may be even easier to use for your purposes.
> > 
> > Looks nice, but too high level for our use.
> > 
> > > HTTPClient is old, implements HTTP/1.0, and will probably be deprecated
> > 
> > and
> > 
> > > removed before too much longer.
> > 
> > Got it.
> > 
> > > Jean-Paul
> > 
> > Barry



From ceeborraa at gmx.de  Tue Aug 22 10:16:44 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Tue, 22 Aug 2017 18:16:44 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
Message-ID: <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>

Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):

co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)

Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().

Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?

Thank you!
 

Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem: 
Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
 
DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
 
-glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]


From glyph at twistedmatrix.com  Tue Aug 22 22:21:56 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 22 Aug 2017 21:21:56 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
Message-ID: <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>


> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
> 
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)

Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html>
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
> 
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?

You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).

https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html> is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.

-glyph

> Thank you!
>  
> 
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem: 
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>  
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>  
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170822/3bc8db85/attachment.html>

From ceeborraa at gmx.de  Thu Aug 24 13:40:18 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Thu, 24 Aug 2017 21:40:18 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
Message-ID: <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>

I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)

In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.

But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?

Thank you!
 

Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 

Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):

co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
 
Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html] 

Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().

Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
 
You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
 
https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
 
-glyph 

Thank you!
 

Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote: 
 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem: 
Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
 
DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
 
-glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]


From cory at lukasa.co.uk  Fri Aug 25 02:19:28 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 25 Aug 2017 09:19:28 +0100
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
Message-ID: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>

This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.

The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.

Cory


[1]: https://github.com/pyca/pyopenssl/blob/master/src/OpenSSL/SSL.py#L632-L636

> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
> 
> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
> 
> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
> 
> Thank you!
>  
> 
> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
> 
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
> 
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>  
> Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html] 
> 
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
> 
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>  
> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>  
> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>  
> -glyph 
> 
> Thank you!
>  
> 
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote: 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem: 
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>  
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>  
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From hawkowl at atleastfornow.net  Fri Aug 25 02:24:47 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Fri, 25 Aug 2017 18:24:47 +1000
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
Message-ID: <D1592730-EB55-4349-B782-46FAB42AF457@atleastfornow.net>

A quick git blame says that it landed in https://github.com/pyca/pyopenssl/commit/6c6bf865acdd3c5ca5f47b1dbc2903023fd286b6 <https://github.com/pyca/pyopenssl/commit/6c6bf865acdd3c5ca5f47b1dbc2903023fd286b6>, which exists in 17.0.0+. We require 16.0.0+, so it ought to be a relatively simple version check.

- Amber


> On 25 Aug 2017, at 18:19, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.
> 
> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> 
> Cory
> 
> 
> [1]: https://github.com/pyca/pyopenssl/blob/master/src/OpenSSL/SSL.py#L632-L636
> 
>> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>> 
>> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
>> 
>> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
>> 
>> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
>> 
>> Thank you!
>> 
>> 
>> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
>> Von: Glyph <glyph at twistedmatrix.com>
>> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>> 
>> 
>> 
>> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote:
>> 
>> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
>> 
>> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>> 
>> Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html]
>> 
>> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
>> 
>> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>> 
>> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>> 
>> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>> 
>> -glyph
>> 
>> Thank you!
>> 
>> 
>> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
>> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
>> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
>> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>> 
>> 
>> 
>> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote:
>> Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
>> 
>> For anybody who has the same problem:
>> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>> 
>> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>> 
>> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170825/bd4cdfa7/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170825/bd4cdfa7/attachment-0001.sig>

From lkurisaki at yahoo.com  Fri Aug 25 15:50:51 2017
From: lkurisaki at yahoo.com (Lance Kurisaki)
Date: Fri, 25 Aug 2017 21:50:51 +0000 (UTC)
Subject: [Twisted-Python] HTTP/2 and getPeerCertificate
References: <1331718667.2573658.1503697851807.ref@mail.yahoo.com>
Message-ID: <1331718667.2573658.1503697851807@mail.yahoo.com>

With HTTP/1.1, I used to be able to call request.transport.getPeerCertificate(). When the client uses HTTP/2, however, it seems that request.transport is None. How does one access the transport with HTTP/2? Thank you...            Lance
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170825/ea310d79/attachment.html>

From jlitzingerdev at gmail.com  Sat Aug 26 22:17:13 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Sat, 26 Aug 2017 22:17:13 -0600
Subject: [Twisted-Python] Python 2.7.5 support
Message-ID: <20170827041713.GA17542@arch-tinker.localdomain>

Hello,
I've done some preliminary digging into ticket 8037 and added my
findings to the comments.  One question that came from that
investigation is whether python 2.7.5 is still officially supported by
Twisted?

Per [1] I'm assuming yes as there appears to be a buildbot job that uses
this version (RHEL7, [2]) but I did want to confirm before I looked into any
kind of fix.

Thanks!
-Jason

[1] https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#supporting-and-de-supporting-python-versions
[2] https://buildbot.twistedmatrix.com/builders/rhel7-py2.7/builds/826/steps/select/logs/stdio


From glyph at twistedmatrix.com  Sat Aug 26 22:35:29 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 26 Aug 2017 21:35:29 -0700
Subject: [Twisted-Python] HTTP/2 and getPeerCertificate
In-Reply-To: <1331718667.2573658.1503697851807@mail.yahoo.com>
References: <1331718667.2573658.1503697851807.ref@mail.yahoo.com>
 <1331718667.2573658.1503697851807@mail.yahoo.com>
Message-ID: <8EE5F61D-CFBA-47D8-92D6-FE2072EDCCDB@twistedmatrix.com>


> On Aug 25, 2017, at 2:50 PM, Lance Kurisaki <lkurisaki at yahoo.com> wrote:
> 
> With HTTP/1.1, I used to be able to call request.transport.getPeerCertificate(). When the client uses HTTP/2, however, it seems that request.transport is None. How does one access the transport with HTTP/2? Thank you...
>             Lance

I think this is just a bug; the `transport`.  I filed it here: https://twistedmatrix.com/trac/ticket/9270 <https://twistedmatrix.com/trac/ticket/9270>

Please consider submitting a patch to Twisted so that this can be fixed in a useful way for everyone!

In the meanwhile, with the usual caveats about using private interfaces <https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html> you can retrieve the transport via "request.channel._conn.transport" in http/2, and the "clientproto" attribute of the request will tell you which kind of request it is.

Thanks for using Twisted; sorry for this bug,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170826/626b793d/attachment.html>

From glyph at twistedmatrix.com  Sat Aug 26 22:40:26 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 26 Aug 2017 21:40:26 -0700
Subject: [Twisted-Python] Python 2.7.5 support
In-Reply-To: <20170827041713.GA17542@arch-tinker.localdomain>
References: <20170827041713.GA17542@arch-tinker.localdomain>
Message-ID: <90F47058-2D53-49D8-AD3E-55CAD68BBB6D@twistedmatrix.com>


> On Aug 26, 2017, at 9:17 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> I've done some preliminary digging into ticket 8037 and added my
> findings to the comments.  One question that came from that
> investigation is whether python 2.7.5 is still officially supported by
> Twisted?
> 
> Per [1] I'm assuming yes as there appears to be a buildbot job that uses
> this version (RHEL7, [2]) but I did want to confirm before I looked into any
> kind of fix.

I already replied on the ticket, but: only the latest 2.7.x is technically supported at any given time; our users are expected to install security updates :).

-g

From trac at twistedmatrix.com  Sun Aug 27 00:05:22 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Aug 2017 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1503813922.83.2261686716824852066@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/6963e923/attachment-0001.html>

From ceeborraa at gmx.de  Sun Aug 27 02:44:26 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sun, 27 Aug 2017 10:44:26 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
Message-ID: <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>

Thank you for your reply. 

> This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.
This, I understand so far.

> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?

I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

Thank you!


> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>
> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
>
> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
>
> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
>
> Thank you!
>
>
> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>
>
>
> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote:
>
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
>
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>
> Please note that importing names with "._" in them is relying on private API :). The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html]]
>
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
>
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>
> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>
> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>
> -glyph
>
> Thank you!
>
>
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>
>
>
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote:
> Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
>
> For anybody who has the same problem:
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python][https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]]
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python][https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]]
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]


From twotonespirit at gmail.com  Sun Aug 27 12:06:01 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 11:06:01 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
Message-ID: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>

Hey friends.

I'm in a position that is probably increasingly common.  I'm working on a
project that has a dependency that uses asyncio (kademlia).

However, I much prefer to use Twisted.

What's are some best practices for this at the moment?

-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/d58e8076/attachment.html>

From rodrigc at crodrigues.org  Sun Aug 27 12:35:37 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 27 Aug 2017 11:35:37 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
Message-ID: <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>

Twisted 17.5.0 has new code to interoperate between Python's asyncio and
"async def":

https://twistedmatrix.com/documents/current/core/howto/defer-intro.html#coroutines-with-async-await

One example of where this is used is in Klein, a web microframework built
on top of Twisted:

https://klein.readthedocs.io/en/latest/examples/await.html


Also, over 93% of Twisted's tests pass on Python 3:

https://www.slideshare.net/CraigRodrigues1/the-onward-journey-porting-twisted-to-python-3

So I think that it is quite possible to look at using Twisted in a project
which is using Python asyncio.

--
Craig

On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
twotonespirit at gmail.com> wrote:

> Hey friends.
>
> I'm in a position that is probably increasingly common.  I'm working on a
> project that has a dependency that uses asyncio (kademlia).
>
> However, I much prefer to use Twisted.
>
> What's are some best practices for this at the moment?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/be2d38cb/attachment.html>

From twotonespirit at gmail.com  Sun Aug 27 12:36:55 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 11:36:55 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
Message-ID: <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>

Sure, syntactically it seems pretty close to gravy.

But I'm wondering about flow control: if a project like kademlia is using
the ayncio event loop, is it still practical to use twisted?

On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
> "async def":
>
> https://twistedmatrix.com/documents/current/core/howto/
> defer-intro.html#coroutines-with-async-await
>
> One example of where this is used is in Klein, a web microframework built
> on top of Twisted:
>
> https://klein.readthedocs.io/en/latest/examples/await.html
>
>
> Also, over 93% of Twisted's tests pass on Python 3:
>
> https://www.slideshare.net/CraigRodrigues1/the-onward-
> journey-porting-twisted-to-python-3
>
> So I think that it is quite possible to look at using Twisted in a project
> which is using Python asyncio.
>
> --
> Craig
>
> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
> twotonespirit at gmail.com> wrote:
>
>> Hey friends.
>>
>> I'm in a position that is probably increasingly common.  I'm working on a
>> project that has a dependency that uses asyncio (kademlia).
>>
>> However, I much prefer to use Twisted.
>>
>> What's are some best practices for this at the moment?
>>
>>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/a3371c7e/attachment.html>

From rodrigc at crodrigues.org  Sun Aug 27 13:35:45 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 27 Aug 2017 12:35:45 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
Message-ID: <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>

You can use this class to interoperate with the Python asyncio reactor and
Twisted:


https://twistedmatrix.com/documents/current/api/twisted.internet.asyncioreactor.html

So you can do something like:

import asyncio
from twisted.internet import asyncioreactor, reactor
loop = asyncio.get_event_loop()

asyncioreactor.install(eventloop=loop)
reactor.run()


Here is a fancy example which uses Python asyncio, uvloop, and twisted.web
combined:

https://gist.github.com/ldjebran/4febf298232a6fd86871df25d4dc00dd


--
Craig

On Sun, Aug 27, 2017 at 11:36 AM, Justin Myles Holmes <
twotonespirit at gmail.com> wrote:

> Sure, syntactically it seems pretty close to gravy.
>
> But I'm wondering about flow control: if a project like kademlia is using
> the ayncio event loop, is it still practical to use twisted?
>
> On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
>> "async def":
>>
>> https://twistedmatrix.com/documents/current/core/howto/defer
>> -intro.html#coroutines-with-async-await
>>
>> One example of where this is used is in Klein, a web microframework built
>> on top of Twisted:
>>
>> https://klein.readthedocs.io/en/latest/examples/await.html
>>
>>
>> Also, over 93% of Twisted's tests pass on Python 3:
>>
>> https://www.slideshare.net/CraigRodrigues1/the-onward-journe
>> y-porting-twisted-to-python-3
>>
>> So I think that it is quite possible to look at using Twisted in a
>> project which is using Python asyncio.
>>
>> --
>> Craig
>>
>> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
>> twotonespirit at gmail.com> wrote:
>>
>>> Hey friends.
>>>
>>> I'm in a position that is probably increasingly common.  I'm working on
>>> a project that has a dependency that uses asyncio (kademlia).
>>>
>>> However, I much prefer to use Twisted.
>>>
>>> What's are some best practices for this at the moment?
>>>
>>>
>
>
> --
> Justin Myles Holmes
> justinholmes.com
> thisisthebus.com
> github.com/jMyles/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/26ec965d/attachment-0001.html>

From twotonespirit at gmail.com  Sun Aug 27 13:48:20 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 12:48:20 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
 <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
Message-ID: <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>

Why are you all so awesome?  What is your nefarious intention?  Are you
trying to make other open source projects look bad or what?

Thanks so much Craig.

On Sun, Aug 27, 2017 at 12:35 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> You can use this class to interoperate with the Python asyncio reactor and
> Twisted:
>
>  https://twistedmatrix.com/documents/current/api/twisted.
> internet.asyncioreactor.html
>
> So you can do something like:
>
> import asyncio
> from twisted.internet import asyncioreactor, reactor
> loop = asyncio.get_event_loop()
>
> asyncioreactor.install(eventloop=loop)
> reactor.run()
>
>
> Here is a fancy example which uses Python asyncio, uvloop, and twisted.web
> combined:
>
> https://gist.github.com/ldjebran/4febf298232a6fd86871df25d4dc00dd
>
>
> --
> Craig
>
> On Sun, Aug 27, 2017 at 11:36 AM, Justin Myles Holmes <
> twotonespirit at gmail.com> wrote:
>
>> Sure, syntactically it seems pretty close to gravy.
>>
>> But I'm wondering about flow control: if a project like kademlia is using
>> the ayncio event loop, is it still practical to use twisted?
>>
>> On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org
>> > wrote:
>>
>>> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
>>> "async def":
>>>
>>> https://twistedmatrix.com/documents/current/core/howto/defer
>>> -intro.html#coroutines-with-async-await
>>>
>>> One example of where this is used is in Klein, a web microframework
>>> built on top of Twisted:
>>>
>>> https://klein.readthedocs.io/en/latest/examples/await.html
>>>
>>>
>>> Also, over 93% of Twisted's tests pass on Python 3:
>>>
>>> https://www.slideshare.net/CraigRodrigues1/the-onward-journe
>>> y-porting-twisted-to-python-3
>>>
>>> So I think that it is quite possible to look at using Twisted in a
>>> project which is using Python asyncio.
>>>
>>> --
>>> Craig
>>>
>>> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
>>> twotonespirit at gmail.com> wrote:
>>>
>>>> Hey friends.
>>>>
>>>> I'm in a position that is probably increasingly common.  I'm working on
>>>> a project that has a dependency that uses asyncio (kademlia).
>>>>
>>>> However, I much prefer to use Twisted.
>>>>
>>>> What's are some best practices for this at the moment?
>>>>
>>>>
>>
>>
>> --
>> Justin Myles Holmes
>> justinholmes.com
>> thisisthebus.com
>> github.com/jMyles/
>>
>
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/24a9e93c/attachment.html>

From hs at ox.cx  Mon Aug 28 00:04:59 2017
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 28 Aug 2017 08:04:59 +0200
Subject: [Twisted-Python] Wanting to use Twisted,
 but a dependency uses asyncio
In-Reply-To: <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
 <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
 <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>
Message-ID: <B3B4EA54-B37E-4A80-B747-0BBEA04C7E8F@ox.cx>


> What is your nefarious intention?

http://twistedmatrix.com/trac/ticket/5000 <http://twistedmatrix.com/trac/ticket/5000> duh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170828/b9f45098/attachment.html>

From cory at lukasa.co.uk  Mon Aug 28 01:02:47 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 28 Aug 2017 08:02:47 +0100
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
 <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
Message-ID: <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>



> On 27 Aug 2017, at 09:44, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> =
>> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?
> 
> I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

You cannot, at least not using public APIs. This was a suggestion of an update to Twisted, not something you should be doing from your own code.

Cory


From ceeborraa at gmx.de  Mon Aug 28 02:04:42 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Mon, 28 Aug 2017 10:04:42 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
 <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
 <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>
Message-ID: <trinity-87d98a95-2399-4c93-a954-6895639de617-1503907482507@3c-app-gmx-bs32>


Ok thank you! I gonna use the old version with DefaultOpenSSLContextFactory as long as Twisted hasn't been updated.

Thomas
 

Gesendet: Montag, 28. August 2017 um 09:02 Uhr
Von: "Cory Benfield" <cory at lukasa.co.uk>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

> On 27 Aug 2017, at 09:44, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>
> =
>> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?
>
> I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

You cannot, at least not using public APIs. This was a suggestion of an update to Twisted, not something you should be doing from your own code.

Cory

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From rodrigc at crodrigues.org  Mon Aug 28 17:09:01 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 28 Aug 2017 16:09:01 -0700
Subject: [Twisted-Python] Appveyor build problems
In-Reply-To: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>
References: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>
Message-ID: <CAG=rPVdDXv6-swe_rSxhLfF4W2NCjEgRdbx6DKK+Najcg4mdNw@mail.gmail.com>

Looks like Appveyor had a problem with their datacenter which they solved
on Aug. 28, 2017:

https://appveyor.statuspage.io/

We'll keep an eye on things to see if this is still a problem for the
Twisted Appveyor builds.
--
Craig



On Sat, Aug 19, 2017 at 7:18 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> A few of the Appveyor builds have been failing
> intermittently due to networking problems
> at Appveyor.  This was due to Appveyor moving
> to a new datacenter:
>
> http://help.appveyor.com/discussions/problems/7409-
> chocolatey-timeout-when-installing-openssh
>
> Things seem OK now, but if there are problems we
> can let Appveyor know.
>
> --
> Craig
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170828/fcd53d19/attachment.html>

From exarkun at twistedmatrix.com  Wed Aug 30 06:05:48 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 08:05:48 -0400
Subject: [Twisted-Python] Twisted 17.5 vs txkube
Message-ID: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>

Hello,

Sadly the txkube test suite is still pretty busted against Twisted 17.5.
It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
these are exactly the same problems or not but they look somewhat related.

https://travis-ci.org/LeastAuthority/txkube/builds/269920984

If anyone feels like getting to the bottom of this, I'd appreciate it.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/01af800c/attachment.html>

From hawkowl at atleastfornow.net  Wed Aug 30 06:09:01 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Wed, 30 Aug 2017 22:09:01 +1000
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
Message-ID: <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>


> On 30 Aug 2017, at 22:05, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Hello,
> 
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.  It was broken for a long time with Twisted 17.1 as well.  I'm not sure if these are exactly the same problems or not but they look somewhat related.
> 
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984 <https://travis-ci.org/LeastAuthority/txkube/builds/269920984>
> 
> If anyone feels like getting to the bottom of this, I'd appreciate it.
> 
> Jean-Paul

I took a stab at some fixes a while ago in https://github.com/LeastAuthority/txkube/pull/135 <https://github.com/LeastAuthority/txkube/pull/135> -- some using private APIs, if I remember, sadly -- but I don't have the time at the moment to get it in a mergable state. But it might be a good start for others.

- Amber
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/e074b67c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170830/e074b67c/attachment.sig>

From exarkun at twistedmatrix.com  Wed Aug 30 06:19:16 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 08:19:16 -0400
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
 <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>
Message-ID: <CAEeXt4OTppq=t7NSvqKCNQT0DO3-taH+-MA7KWrb=b15h3VhXQ@mail.gmail.com>

I hope that won't discourage anyone else from taking a look.

On Wed, Aug 30, 2017 at 8:09 AM, Amber Hawkie Brown <
hawkowl at atleastfornow.net> wrote:

>
> On 30 Aug 2017, at 22:05, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Hello,
>
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.
> It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
> these are exactly the same problems or not but they look somewhat related.
>
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984
>
> If anyone feels like getting to the bottom of this, I'd appreciate it.
>
> Jean-Paul
>
>
> I took a stab at some fixes a while ago in https://github.com/
> LeastAuthority/txkube/pull/135 -- some using private APIs, if I remember,
> sadly -- but I don't have the time at the moment to get it in a mergable
> state. But it might be a good start for others.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/b6a11818/attachment.html>

From chris.norman2 at googlemail.com  Wed Aug 30 09:36:40 2017
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Wed, 30 Aug 2017 16:36:40 +0100
Subject: [Twisted-Python] Forcing Twisted / Klein to use HTTPS
Message-ID: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>

Hi all,

I'm trying to force Klein to use HTTPS, and so far I have a custom error 
handler which redirects the user to the HTTPs version of the page via a 
check_secure function which takes the request object and raises the 
right error if request.isSecure() is False.


Is there a better global way to enforce HTTPS with any part of Klein or 
Twisted?


Cheers,


Chris


From exarkun at twistedmatrix.com  Wed Aug 30 09:42:30 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 11:42:30 -0400
Subject: [Twisted-Python] Forcing Twisted / Klein to use HTTPS
In-Reply-To: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>
References: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>
Message-ID: <CAEeXt4MXHv8sK+MZVd0+Q9UcTvLcxoDNZYnJKVqpi-j_b=JXCQ@mail.gmail.com>

On Wed, Aug 30, 2017 at 11:36 AM, Chris Norman <chris.norman2 at googlemail.com
> wrote:

> Hi all,
>
> I'm trying to force Klein to use HTTPS, and so far I have a custom error
> handler which redirects the user to the HTTPs version of the page via a
> check_secure function which takes the request object and raises the right
> error if request.isSecure() is False.
>
>
> Is there a better global way to enforce HTTPS with any part of Klein or
> Twisted?
>
>
The way I do this is to make one Site that listens on HTTP and does nothing
except redirect to HTTPS.  The real site only listens on HTTPS.


>
> Cheers,
>
>
> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/038b0ac7/attachment-0001.html>

From mrw at enotuniq.org  Tue Aug  1 01:06:31 2017
From: mrw at enotuniq.org (Mark Williams)
Date: Tue, 01 Aug 2017 00:06:31 -0700
Subject: [Twisted-Python] [ANN] treq 17.7.0
Message-ID: <1501571191.34051.1059225208.666036FD@webmail.messagingengine.com>

Hello,

Treq 17.7.0 has been released!  

Treq is a high-level HTTP client library built on top of Twisted.

It's available on PyPI: https://pypi.org/project/treq/17.7.0/

You can read its documentation on Read The Docs:
http://treq.readthedocs.io/en/latest/

This release introduces a `json` argument to treq's request functions,
the value of which treq serializes to JSON and sends as the request's
body: http://treq.readthedocs.io/en/latest/api.html#treq.request

Please file GitHub issues if you encounter any problems: 
https://github.com/twisted/treq/issues

Thanks to everyone who contributed to this release!

-- 
  Mark Williams
  mrw at enotuniq.org



From dansut at gmail.com  Fri Aug  4 16:44:08 2017
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Fri, 4 Aug 2017 18:44:08 -0400
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
Message-ID: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>

During the PyPy2.7 5.8.0 testsuite run (actually happens under PyPy3.5
5.8.0 too) there always seems to be a group of 12 ERROR due to:
  twisted.internet.defer.TimeoutError

For the buildbot: https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
they seem to pretty much consistently happen during:
  twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
but running in my own environment(s) I also always see the 12
TimoutError but they can occur in a variety of different tests, I've
seen them in these as well as the above:
   twisted.news.test.test_news.NewsTests.testArticleRequest
   twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
   twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
and a bunch of others.

Always exactly 12 and always during same test for a single test run.
I've not been able to reproduce running anything but the full
testsuite - but they have always occured for me during full run.

Just wondered if anybody with more experience had a clue/idea as to
why this could happen (why 12), and how I could go about tracking down
the root cause.

Getting close to having PyPy be able to run twisted tests with no
FAILs but I have no idea what might be causing this.
Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From mithrandi at mithrandi.net  Fri Aug  4 21:22:14 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 05 Aug 2017 03:22:14 +0000
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
In-Reply-To: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
References: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
Message-ID: <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>

On Sat, 5 Aug 2017 at 00:44 Daniel Sutcliffe <dansut at gmail.com> wrote:

> For the buildbot:
> https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
> they seem to pretty much consistently happen during:
>   twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
> but running in my own environment(s) I also always see the 12
> TimoutError but they can occur in a variety of different tests, I've
> seen them in these as well as the above:
>    twisted.news.test.test_news.NewsTests.testArticleRequest
>    twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
>
>  twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
> and a bunch of others.
>

This kind of timeout usually means that the test is waiting for some event,
and due to an event ordering that wasn't expected, the event never happens;
for example, it might have already happened before you start waiting for
it, or it might not happen at all due to an error.

Sometimes this means that the test is really stuck, but often it means that
an error has occurred but was not handled by the test, so you get an error
(maybe logged, maybe not) but also the test never ends.

Always exactly 12 and always during same test for a single test run.
> I've not been able to reproduce running anything but the full
> testsuite - but they have always occured for me during full run.
>
> Just wondered if anybody with more experience had a clue/idea as to
> why this could happen (why 12), and how I could go about tracking down
> the root cause.
>

Look for missing error handling in the test to see if an error is occurring
that the test does not notice; if you're lucky, these errors may have been
logged (check test.log). If not, you may need to improve the error handling
and / or play around in a debugger.

If the test really is stuck, a common cause of PyPy vs CPython issues is
garbage collection or weakref callbacks happening in an unpredictable
ordering of events. I haven't looked at the tests in question but I would
check for things like __del__ methods (eg. files not being closed
explicitly) or weakref use in the vicinity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170805/ae2040ad/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug  6 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 06 Aug 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1501999520.75.3727462532941149247@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170806/8532a99a/attachment-0002.html>

From dansut at gmail.com  Mon Aug  7 15:45:44 2017
From: dansut at gmail.com (Daniel Sutcliffe)
Date: Mon, 7 Aug 2017 17:45:44 -0400
Subject: [Twisted-Python] Weird PyPY twisted.internet.defer.TimeoutError
 ERROR*12 during full test run
In-Reply-To: <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>
References: <CADzPF4sfFOABiUA0Bw3wvsZ-sZE1532PSiWeORsmpkp+y3utRQ@mail.gmail.com>
 <CAMcKhMSoBALGPnLtoeP6CiO3Gkfs7AZfaXJRS2E28mKjiEGSvQ@mail.gmail.com>
Message-ID: <CADzPF4v7nyvJVk4p2So7=aqEvjoH_3Bb=1nJmv=e_5YrGj=wyg@mail.gmail.com>

Many thanks Tristan for sharing your experiences here, I'm sure
they'll get me a little closer to finding the root cause of these test
result peculiarities.

On Sat, 5 Aug 2017 at 00:44 Daniel Sutcliffe <dansut at gmail.com> wrote:
>> For the buildbot:
>>   https://buildbot.twistedmatrix.com/builders/ubuntu16.04-pypy5/
>> they seem to pretty much consistently happen during:
>>   twisted.protocols.test.test_tls.TLSMemoryBIOTests.test_hugeWrite_TLSv1_1
>> but running in my own environment(s) I also always see the 12
>> TimoutError but they can occur in a variety of different tests, I've
>> seen them in these as well as the above:
>>   twisted.news.test.test_news.NewsTests.testArticleRequest
>>   twisted.names.test.test_server.DNSServerFactoryTests.test_verboseDefault
>>   twisted.positioning.test.test_nmea.BrokenSentenceCallbackTests.test_dontSwallowCallbackException
>> and a bunch of others.

On Fri, Aug 4, 2017 at 11:22 PM, Tristan Seligmann
<mithrandi at mithrandi.net> wrote:
> This kind of timeout usually means that the test is waiting for some event,
> and due to an event ordering that wasn't expected, the event never happens;
> for example, it might have already happened before you start waiting for it,
> or it might not happen at all due to an error.
>
> Sometimes this means that the test is really stuck, but often it means that
> an error has occurred but was not handled by the test, so you get an error
> (maybe logged, maybe not) but also the test never ends.

Having now looked deeper into the other tests I have had the ERROR
occur in I can confidently say there seems to little in common with
the tests I have seen get stuck in the TimeoutError. The last two in
list specifically seem like very unlikely culprits...

>From this my gut is that this is nothing to do with the tests
themselves and more to do with something in the long running trial
that is having issues when run under PyPy

>> Always exactly 12 and always during same test for a single test run.
>> I've not been able to reproduce running anything but the full
>> testsuite - but they have always occurred for me during full run.
>>
>> Just wondered if anybody with more experience had a clue/idea as to
>> why this could happen (why 12), and how I could go about tracking down
>> the root cause.
>
> Look for missing error handling in the test to see if an error is occurring
> that the test does not notice; if you're lucky, these errors may have been
> logged (check test.log). If not, you may need to improve the error handling
> and / or play around in a debugger.

Nothing in test.log when this happens, and I've yet to work out a way
of getting a debugger to cooperate by dropping me out of execution
when these TimeoutError occur so I can get an idea of what is being
waited for, where.

> If the test really is stuck, a common cause of PyPy vs CPython issues is
> garbage collection or weakref callbacks happening in an unpredictable
> ordering of events. I haven't looked at the tests in question but I would
> check for things like __del__ methods (eg. files not being closed
> explicitly) or weakref use in the vicinity.

I've certainly noticed differences with weakref and GC under PyPy, I think:
  twisted.test.test_threadpool.ThreadPoolTests.test_threadCreationArgumentsCallInThreadWithCallback
specifically shows as a FAIL under PyPy because the test relies on a
weakref being collected, when this can't be relied on under PyPy.

Cheers
/dan
-- 
Daniel Sutcliffe <dansut at gmail.com>



From itamar at itamarst.org  Wed Aug  9 14:57:54 2017
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 09 Aug 2017 16:57:54 -0400
Subject: [Twisted-Python] ANN: Crochet 1.8.0,
	now with unmangled function signatures
Message-ID: <1502312274.3742757.1068521384.305E21ED@webmail.messagingengine.com>

Crochet lets you use Twisted in any blocking Python program: Django,
Flask, wherever you want.

Another use case: if your Twisted program uses threads, it also has some
utilities that make it easier to call back into Twisted from threads.

Crochet 1.8.0 makes decorated function signatures match the original
signatures, for better IDE and doc-generation support. It also has fix
for AWS Lambda, and improved documentation.

https://github.com/itamarst/crochet for source, docs at
https://crochet.readthedocs.io/en/stable/, pip install crochet to get
it.

--
Itamar Turner-Trauring



From warner at lothar.com  Thu Aug 10 14:52:51 2017
From: warner at lothar.com (Brian Warner)
Date: Thu, 10 Aug 2017 13:52:51 -0700
Subject: [Twisted-Python] need a name for an endpoint forwarder
	(twist/twistd plugin)
Message-ID: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>

Hey, so I had a need the other day for something like Twisted's built-in
"twist portforward" module (which takes a TCP port to listen on, and
when someone connects, it proxies that connection to a TCP port on some
other host). Except I wanted something more general: portfoward can
listen on any endpoint, but it can only connect to TCP targets (it takes
a host+port, rather than a generic endpoint description, and there's a
hard-coded reactor.connectTCP inside).

You can add new types of endpoints by installing packages that include
plugins that implement IStreamClientEndpointStringParserWithReactor. For
example, a plugin that knew how to speak SRV (which is TCP except you
have to do a DNS lookup for the port number first) would enable an
endpoint like "srv:example.org:smtp".

With a generic portforwarder, this would let you leave a twist/twistd
process running, and then point your (non-SRV-aware) applications at a
local TCP port, but they'd really connect to the right SRV-mediated
target service. Which might be a lot easier than rewriting the
application, or finding some shared-library tricks that let you modify
the way it does the connect() call.

It was pretty easy to write, and the code is in
https://github.com/warner/tx-endpointforward .

But before I publish it, I wanted to see if anyone had a better idea for
a name. Or whether something like this exists already and I just didn't
find it.

I've seen projects with names like "tx-foo" and "txfoo" and "txFOO", and
I wasn't sure what the current consensus is.

Also, the twist/twistd plugin name could be better, running "twistd
endpointforward" is kind of verbose. "epfwd"? "epforward"?

Or, should this just be a patch to the built-in portforward.py module?
Maybe enhance it to take either a single endpoint argument, or a pair of
HOST,PORT args (which it turns into an endpoint descriptor with
"tcp:%s:%d").

Any thoughts?
 -Brian



From glyph at twistedmatrix.com  Thu Aug 10 15:30:15 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 10 Aug 2017 14:30:15 -0700
Subject: [Twisted-Python] need a name for an endpoint forwarder
 (twist/twistd plugin)
In-Reply-To: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>
References: <9ebd100a-5d1c-7a3f-2515-50dac11c03e3@lothar.com>
Message-ID: <0E590BC0-2EE5-4BEB-9350-51816AC43F81@twistedmatrix.com>


> On Aug 10, 2017, at 1:52 PM, Brian Warner <warner at lothar.com> wrote:
> 
> Or, should this just be a patch to the built-in portforward.py module?

Yup :).

https://twistedmatrix.com/trac/ticket/7057

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170810/cae263d1/attachment-0002.html>

From barry.scott at forcepoint.com  Fri Aug 11 04:46:16 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Fri, 11 Aug 2017 11:46:16 +0100
Subject: [Twisted-Python] 17.5.0 _newtls.pu:207 loseConnection signature
	problem
Message-ID: <9053067.OpVeugPNUp@barry-scott-desktop>

I porting some code to latest twisted and I;m seeing the old code expects to 
call loseConenction with a reason.

But loseConnection in class ConnectionMixin does not have the parameter.

Is this an oversight or deliberate?

Barry



From exarkun at twistedmatrix.com  Fri Aug 11 06:12:32 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Fri, 11 Aug 2017 08:12:32 -0400
Subject: [Twisted-Python] 17.5.0 _newtls.pu:207 loseConnection signature
	problem
In-Reply-To: <9053067.OpVeugPNUp@barry-scott-desktop>
References: <9053067.OpVeugPNUp@barry-scott-desktop>
Message-ID: <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>

On Fri, Aug 11, 2017 at 6:46 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I porting some code to latest twisted and I;m seeing the old code expects
> to
> call loseConenction with a reason.
>

This code makes the mistake of treating a peculiarity of a particular
implementation of an interface as the interface itself.


>
> But loseConnection in class ConnectionMixin does not have the parameter.
>

Nor does the definition of loseConnection on the interface:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.ITransport.html#loseConnection


>
> Is this an oversight or deliberate?
>

Code that goes beyond the guarantees of the interface is limiting itself to
working with a particular implementation.  Sometimes it is less than clear
whether some behavior is intended to be guaranteed by the interface or not
- but in this case, it's pretty clear.  loseConnection accepts no
arguments.  Code that passes an argument may work with a specific
implementation but there's no guarantee it will work with other
implementations.  And "other implementations" includes "future versions of
a specific implementation".

So, it's deliberate.  If you want to make the application code in question
more portable across implementations, it should stop passing an argument.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170811/57b964e5/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 13 00:05:18 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Aug 2017 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1502604318.73.7635931929002632583@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170813/5d077ada/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Aug 13 00:48:27 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Aug 2017 23:48:27 -0700
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: <1502604318.73.7635931929002632583@twistedmatrix.com>
References: <1502604318.73.7635931929002632583@twistedmatrix.com>
Message-ID: <060FDB38-2E29-4906-850F-208F6DDF12FF@twistedmatrix.com>


> On Aug 12, 2017, at 11:05 PM, trac at twistedmatrix.com wrote:
> 
> Total:                 1          7       2400         -6
> 

Every week I look at this number, and usually it's positive - very happy to see it so negative this week! :)

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170812/084c1abc/attachment-0002.html>

From barry.scott at forcepoint.com  Mon Aug 14 03:12:03 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 14 Aug 2017 10:12:03 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: 17.5.0 _newtls.pu:207
	loseConnection signatureproblem
In-Reply-To: <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>
References: <9053067.OpVeugPNUp@barry-scott-desktop>
 <CAEeXt4O8U1n5JPZ8_LC4YBrXr3-Yt778RvGcWQccJuyW6NGUxQ@mail.gmail.com>
Message-ID: <2811051.SVuBOf4KfU@barry-scott-desktop>

On Friday, 11 August 2017 13:12:32 BST Jean-Paul Calderone wrote:
> On Fri, Aug 11, 2017 at 6:46 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > I porting some code to latest twisted and I;m seeing the old code expects
> > to
> > call loseConenction with a reason.
> 
> This code makes the mistake of treating a peculiarity of a particular
> implementation of an interface as the interface itself.
> 
> > But loseConnection in class ConnectionMixin does not have the parameter.
> 
> Nor does the definition of loseConnection on the interface:
> 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.I
> Transport.html#loseConnection
> > Is this an oversight or deliberate?
> 
> Code that goes beyond the guarantees of the interface is limiting itself to
> working with a particular implementation.  Sometimes it is less than clear
> whether some behavior is intended to be guaranteed by the interface or not
> - but in this case, it's pretty clear.  loseConnection accepts no
> arguments.  Code that passes an argument may work with a specific
> implementation but there's no guarantee it will work with other
> implementations.  And "other implementations" includes "future versions of
> a specific implementation".
> 
> So, it's deliberate.  If you want to make the application code in question
> more portable across implementations, it should stop passing an argument.

Thanks for the clarification.

That begs the question of why any implementation of loseConnection has
extended beyond the interface.

Barry



From jaroslaw.fedewicz at gmail.com  Mon Aug 14 18:22:36 2017
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Tue, 15 Aug 2017 02:22:36 +0200
Subject: [Twisted-Python] Is there a nice way to write transport-agnostic
	protocols and servers/clients?
Message-ID: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>

Recently, I needed to write a client for a server which can listen on one
of these:

1) TCP
2) UDP
3) Unix stream sockets
4) Unix datagram sockets

And pain it was, as a matter of fact. The only thing that was easy was the
streaming protocols part. In the datagram land, it was all different:

1) I had to cope with a fact that transport.connect() only really works
with UDP, and employ a workaround which allowed me to use the same protocol
class for both UDP and Unix datagrams
2) setting up client for UDP and datagram is a wildly different procedure:
for Unix datagram sockets, I use reactor.connectUNIXDatagram(), for UDP I
need to use reactor.listenUDP(0, ...) which is fairly confusing to say the
least
3) endpoints, for some reason, with connection parameters as strings, and
unified connection routine do not exist for datagram protocols at all
4) it seems either impossible or really hard to create a transport-agnostic
protocol (with the bulk of logic defined on an upper layer, and
framing/messaging defined at the transport level protocol classes), which
could be connected to any endpoint it supports, using clientFromString() or
serverToString().

The number of protocols that use TCP or UDP interchangeably is quite high.
Some applications where Twisted would be an appropriate choice, could even
work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc.

(I haven't even looked at the issue of lower layers or other address
families yet, there be dragons.)

My question is: does anyone share my pain? Is there some kind of ongoing
effort to design an API or anything else? What can I do to help?

-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170815/a108cb59/attachment-0002.html>

From barry.scott at forcepoint.com  Tue Aug 15 06:43:45 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Tue, 15 Aug 2017 13:43:45 +0100
Subject: [Twisted-Python] Chunked decoding missing from HTTPClient?
Message-ID: <4358208.IFeyFRxXzr@barry-scott-desktop>

I see that HTTPChannel knows about chunking and indeed works well.

However shouldn't HTTPClient also support chunking?
Or Am I missing something to get chunking working for the response from a 
server?

Barry



From exarkun at twistedmatrix.com  Tue Aug 15 07:12:21 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Tue, 15 Aug 2017 09:12:21 -0400
Subject: [Twisted-Python] Chunked decoding missing from HTTPClient?
In-Reply-To: <4358208.IFeyFRxXzr@barry-scott-desktop>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
Message-ID: <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>

On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> I see that HTTPChannel knows about chunking and indeed works well.
>
> However shouldn't HTTPClient also support chunking?
> Or Am I missing something to get chunking working for the response from a
> server?
>
>
Take a look at
http://twistedmatrix.com/documents/current/web/howto/client.html which
documents the newer HTTP client API in Twisted.  You may also want to have
a look at https://treq.readthedocs.io/en/latest/ which provides another
layer on top of that which may be even easier to use for your purposes.

HTTPClient is old, implements HTTP/1.0, and will probably be deprecated and
removed before too much longer.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170815/a04f0311/attachment-0002.html>

From cory at lukasa.co.uk  Wed Aug 16 02:07:12 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Wed, 16 Aug 2017 09:07:12 +0100
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
Message-ID: <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>



> On 15 Aug 2017, at 01:22, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com> wrote:
> 
> The number of protocols that use TCP or UDP interchangeably is quite high. Some applications where Twisted would be an appropriate choice, could even work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc. 

Is it? TCP and UDP behave *very* differently: what protocols can safely use them interchangeably?

As to QUIC/DCCP/STCP and friends, ultimately the natural thing to do is to use composition of protocols, the same way TLSMemoryBIOProtocol does in Twisted. Essentially, you write a class (or collection of classes) that present themselves as both a protocol and a transport, and then you create a pipeline. For HTTP/2, for example, we have the following series of objects: reactor <-> TCP transport <-> TLSMemoryBIOProtocol <-> H2Connection <-> H2Stream <-> Request body handler protocol (provided by the user).

In each case, the intermediary objects provide both a transport and protocol interface. For example, from the TCP transport’s perspective, TLSMemoryBIOProtocol is a protocol. But from H2Connection’s perspective, it’s a transport. Similarly, H2Connection and H2Stream together provide both a protocol and transport interface: H2Connection is a protocol, H2Stream is a transport, and they communicate together.

For QUIC, ultimately it’s a protocol that runs over UDP. So you’d want to compose again: QUIC should be a protocol from the perspective of the UDP transport, and a transport from the perspective of its inner protocol (which would probably want to be something like HTTP, though there are some thorns here).

The only thing you can’t paste over is the difference between a streaming and non-streaming transport, which is as it should be: you cannot treat these two as identical. If *your specific protocol* can, then that’s ok: define an extra object that does the mapping. For example, imagine we’re using CorytextTransferProtocol, which can run over UDP and TCP equally well. Let’s not worry about how it does this (probably it has to reinvent TCP over UDP, but let’s not care). The way you’d do it is to define your core protocol logic in terms of, say, the stream transport interface (`class CorytextTransferProtocol` will call transport.write). Then, you write a shim class: `class UDPtoTCPforCTTPMapping`, say. This class does nothing if its transport is a stream transport, but does some appropriate transformation for datagram transports. Then, when you instantiate your protocol you set the mapping class as the protocol for the underlying transport, and then make the CorytextTransferProtocol class the protocol for the mapping. Essentially you get: underlying transport <-> UDPtoTCPforCTTPMapping <-> CorytextTransferProtocol.

The great advantage of this is that your two classes can be decoupled, so if the strategy of mapping streaming to datagram transport is general it can be re-used by other protocols that want a streaming interface.

Does this make sense?



From jaroslaw.fedewicz at gmail.com  Wed Aug 16 05:53:07 2017
From: jaroslaw.fedewicz at gmail.com (=?UTF-8?Q?Jaros=C5=82aw_Fedewicz?=)
Date: Wed, 16 Aug 2017 13:53:07 +0200
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
Message-ID: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>

This makes a perfect sense. (I ended up implementing it in this sorta way,
but the other way around: it was a primarily-datagram protocol that could
use TCP as a transport, provided there is appropriate framing.)

However, while there is really a need for a shim to make use of
polytransport protocols (DNS, syslog, SIP, NFS are a few), it looks like
every Twisted user should bring their own. This bothers me, but just a
little bit.

Also, your reply does not address the little discrepancies that exist in
Twisted between two kinds of datagram protocols (namely, Unix datagram
sockets and UDP): seems like UDP APIs progressed while Unix datagram socket
support was "left behind". I don't know if this is deliberate or not.

One thing that is also notably missing from the puzzle is that there is no
support for datagram endpoints. With stream sockets, I can now use strings
and clientFromString()/serverFromString() and be blissfully ignorant if
it's TCP or a Unix socket. I cannot do the same with datagram sockets, I
need to be actively aware if what I'm dealing with is a UDP socket or a
Unix datagram socket.

I'd gladly implement something to fill the gap, but I fear my contribution
would be rejected because, say, it doesn't conform to the general direction
Twisted is heading, whatever that may be. Or because datagram protocols are
somehow inferior as a class. Or because Unix datagram sockets in particular
should die and burn in hell.



On Wed, Aug 16, 2017 at 10:07 AM, Cory Benfield <cory at lukasa.co.uk> wrote:

>
>
> > On 15 Aug 2017, at 01:22, Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
> wrote:
> >
> > The number of protocols that use TCP or UDP interchangeably is quite
> high. Some applications where Twisted would be an appropriate choice, could
> even work with non-TCP/UDP transports, like QUIC, DCCP, STCP, etc.
>
> Is it? TCP and UDP behave *very* differently: what protocols can safely
> use them interchangeably?
>
> As to QUIC/DCCP/STCP and friends, ultimately the natural thing to do is to
> use composition of protocols, the same way TLSMemoryBIOProtocol does in
> Twisted. Essentially, you write a class (or collection of classes) that
> present themselves as both a protocol and a transport, and then you create
> a pipeline. For HTTP/2, for example, we have the following series of
> objects: reactor <-> TCP transport <-> TLSMemoryBIOProtocol <->
> H2Connection <-> H2Stream <-> Request body handler protocol (provided by
> the user).
>
> In each case, the intermediary objects provide both a transport and
> protocol interface. For example, from the TCP transport’s perspective,
> TLSMemoryBIOProtocol is a protocol. But from H2Connection’s perspective,
> it’s a transport. Similarly, H2Connection and H2Stream together provide
> both a protocol and transport interface: H2Connection is a protocol,
> H2Stream is a transport, and they communicate together.
>
> For QUIC, ultimately it’s a protocol that runs over UDP. So you’d want to
> compose again: QUIC should be a protocol from the perspective of the UDP
> transport, and a transport from the perspective of its inner protocol
> (which would probably want to be something like HTTP, though there are some
> thorns here).
>
> The only thing you can’t paste over is the difference between a streaming
> and non-streaming transport, which is as it should be: you cannot treat
> these two as identical. If *your specific protocol* can, then that’s ok:
> define an extra object that does the mapping. For example, imagine we’re
> using CorytextTransferProtocol, which can run over UDP and TCP equally
> well. Let’s not worry about how it does this (probably it has to reinvent
> TCP over UDP, but let’s not care). The way you’d do it is to define your
> core protocol logic in terms of, say, the stream transport interface
> (`class CorytextTransferProtocol` will call transport.write). Then, you
> write a shim class: `class UDPtoTCPforCTTPMapping`, say. This class does
> nothing if its transport is a stream transport, but does some appropriate
> transformation for datagram transports. Then, when you instantiate your
> protocol you set the mapping class as the protocol for the underlying
> transport, and then make the CorytextTransferProtocol class the protocol
> for the mapping. Essentially you get: underlying transport <->
> UDPtoTCPforCTTPMapping <-> CorytextTransferProtocol.
>
> The great advantage of this is that your two classes can be decoupled, so
> if the strategy of mapping streaming to datagram transport is general it
> can be re-used by other protocols that want a streaming interface.
>
> Does this make sense?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
Yaroslav Fedevych
IT Philosopher
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/5ed73914/attachment-0002.html>

From mithrandi at mithrandi.net  Wed Aug 16 06:09:11 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 16 Aug 2017 12:09:11 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
Message-ID: <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>

On Wed, 16 Aug 2017 at 13:53 Jarosław Fedewicz <jaroslaw.fedewicz at gmail.com>
wrote:

> One thing that is also notably missing from the puzzle is that there is no
> support for datagram endpoints.
>

The lack of datagram endpoint abstractions is definitely just a "we haven't
gotten around to it yet"; stream endpoints were the initial focus mainly
because stream protocols are a lot more common than datagram protocols. The
ticket covering datagram endpoints is here, I believe:
https://twistedmatrix.com/trac/ticket/4471 There seems to be some old work
that was never completed, so picking this up again might be a good starting
point if you're keen on contributing in this area.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/ba73208a/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Aug 16 06:13:43 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 16 Aug 2017 08:13:43 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
Message-ID: <CAEeXt4NmZ9nh+NQM++rMhj_0H9Eb_YGE33wnRYD0TTD61A+JOg@mail.gmail.com>

On Wed, Aug 16, 2017 at 7:53 AM, Jarosław Fedewicz <
jaroslaw.fedewicz at gmail.com> wrote:

> This makes a perfect sense. (I ended up implementing it in this sorta way,
> but the other way around: it was a primarily-datagram protocol that could
> use TCP as a transport, provided there is appropriate framing.)
>
> However, while there is really a need for a shim to make use of
> polytransport protocols (DNS, syslog, SIP, NFS are a few), it looks like
> every Twisted user should bring their own. This bothers me, but just a
> little bit.
>

I don't think anyone working on Twisted has yet looked closely at these
various protocols to try to understand if there is a unifying abstraction
that would make a stream/datagram adapter possible.  There are differences
between the protocols that you mention that need to be accounted for and so
far everyone who has worked on implementations for Twisted has implemented
a custom solution for a particular protocol.  If you want to work on
figuring out what the abstraction might be, that seems useful.  I'd also
recommend you take a look at tubes <https://github.com/twisted/tubes> as a
potentially useful direction for solving this problem.


>
> Also, your reply does not address the little discrepancies that exist in
> Twisted between two kinds of datagram protocols (namely, Unix datagram
> sockets and UDP): seems like UDP APIs progressed while Unix datagram socket
> support was "left behind". I don't know if this is deliberate or not.
>

There's not as much interest in UNIX datagrams as there is in UDP.  There's
no particular reason why the UNIX datagram support shouldn't be brought up
to be on par with the UDP support.


>
> One thing that is also notably missing from the puzzle is that there is no
> support for datagram endpoints. With stream sockets, I can now use strings
> and clientFromString()/serverFromString() and be blissfully ignorant if
> it's TCP or a Unix socket. I cannot do the same with datagram sockets, I
> need to be actively aware if what I'm dealing with is a UDP socket or a
> Unix datagram socket.
>
> I'd gladly implement something to fill the gap, but I fear my contribution
> would be rejected because, say, it doesn't conform to the general direction
> Twisted is heading, whatever that may be. Or because datagram protocols are
> somehow inferior as a class. Or because Unix datagram sockets in particular
> should die and burn in hell.
>
>
Likewise, there's not as much interest in datagram transports as stream
transports.  There's no particular reason not to introduce datagram
endpoints  - someone just needs to do the work.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/a344d5ef/attachment-0002.html>

From kevinjacobconway at gmail.com  Wed Aug 16 07:27:37 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Wed, 16 Aug 2017 13:27:37 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
Message-ID: <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>

Maybe I misunderstand the issue, but I believe the Endpoints API solves for
this. https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html

This abstracts the transport and allows you to focus on only interpreting
the bytes transmitted over that transport by defining a Protocol and a
Factory that plug into strports. This should allow you to have the business
logic defined in only one location while listening/requesting over
different transports.

On Wed, Aug 16, 2017, 07:15 Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> On Wed, 16 Aug 2017 at 13:53 Jarosław Fedewicz <
> jaroslaw.fedewicz at gmail.com> wrote:
>
>> One thing that is also notably missing from the puzzle is that there is
>> no support for datagram endpoints.
>>
>
> The lack of datagram endpoint abstractions is definitely just a "we
> haven't gotten around to it yet"; stream endpoints were the initial focus
> mainly because stream protocols are a lot more common than datagram
> protocols. The ticket covering datagram endpoints is here, I believe:
> https://twistedmatrix.com/trac/ticket/4471 There seems to be some old
> work that was never completed, so picking this up again might be a good
> starting point if you're keen on contributing in this area.
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/abebdf6d/attachment-0002.html>

From mithrandi at mithrandi.net  Wed Aug 16 07:59:33 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 16 Aug 2017 13:59:33 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
Message-ID: <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>

On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> for this.
> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>
> This abstracts the transport and allows you to focus on only interpreting
> the bytes transmitted over that transport by defining a Protocol and a
> Factory that plug into strports. This should allow you to have the business
> logic defined in only one location while listening/requesting over
> different transports.
>
There is no datagram endpoints API as yet, though (see #4471), only stream
endpoints.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/6b21462c/attachment-0002.html>

From ceeborraa at gmx.de  Wed Aug 16 14:15:32 2017
From: ceeborraa at gmx.de (ceeborraa)
Date: Wed, 16 Aug 2017 22:15:32 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
Message-ID: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>

Hi,

I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS
server with Twisted. I strictly sticked to the example of
echoserv_ssl.py on
http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS
server is not running properly.

Despite the server starts correctly, it doesn't offer any cipher suites
to the client, no matter what kind of client is trying to connect. Any
time a client connects, the connection is immediately aborted by server
with the error message of:

<class 'OpenSSL.SSL.Error'>: [('SSL
routines','tls_post_process_client_hello',no shared cipher')]

I tried to connect to server with the TLS echo client example of
echoclient_ssl.py, with openssl s_client command and with nmap by using
the --ssl-enum-ciphers script. Each time it failed with the above error
message.

If I do not use the options offered by ssl.CertificateOptions() as
suggested in the example, but instead create a
ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and
Certificate as filename-strings, the server works correctly and offers
the intended cipher suites.

But I need to create the SSLContext from a OpenSSL PKey-Object (private
Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server
code of the TLS server example to:

certificate = ssl.Certificate(cert_obj)
privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
prkey_and_cert =
ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)

factory = protocol.Factory.forProtocol(Echo)
reactor.listenSSL(7498,factory,prkey_and_cert.options())

Again, the server starts, but it does not provide cipher suites so that
no client can connect. Same as above!

Appreciate any help!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/681adcab/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Aug 16 15:24:38 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 16 Aug 2017 17:24:38 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
Message-ID: <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>

On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>> for this. https://twistedmatrix.com/documents/16.4.1/core/howto/
>> endpoints.html
>>
>> This abstracts the transport and allows you to focus on only interpreting
>> the bytes transmitted over that transport by defining a Protocol and a
>> Factory that plug into strports. This should allow you to have the business
>> logic defined in only one location while listening/requesting over
>> different transports.
>>
> There is no datagram endpoints API as yet, though (see #4471), only stream
> endpoints.
>
>
Also, when there are datagram endpoints, they won't be compatible with
stream endpoints.  Endpoints don't abstract the transport, they abstract
*creating* the transport.

Twisted provides a uniform abstraction over stream-based transports like
TCP and gives you *ITransport* to implement an *IProtocol* against.  It
also provides a uniform abstraction over datagram-based transports like UDP
and gives you *IUDPTransport* (oops; should have been *IDatagramTransport* and
some other things about it should probably be changed too) to implement a
*DatagramProtocol* (oops; no interface for this one, just subclass: see,
this should change) against.  But it doesn't provide a uniform abstraction
over both stream-based and datagram-based transports.

Implementing such a thing may be possible and even a good idea but no one
has yet done it for Twisted (as far as I know).

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170816/85223c55/attachment-0002.html>

From kevinjacobconway at gmail.com  Wed Aug 16 20:03:41 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 02:03:41 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
Message-ID: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>

> There is no datagram endpoints API as yet, though (see #4471), only
stream endpoints.

I'm not sure I understand the distinction. Endpoints supports UDP which is
a datagram based transport. From a Protocol perspective, you only care
about which bytes are received. If you have a framing concept I'm your data
format then it should be handled there.

What am I not understanding about this particular use case?

On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
wrote:

> On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> mithrandi at mithrandi.net> wrote:
>
>> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
>> wrote:
>>
>>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>>> for this.
>>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>>>
>>> This abstracts the transport and allows you to focus on only
>>> interpreting the bytes transmitted over that transport by defining a
>>> Protocol and a Factory that plug into strports. This should allow you to
>>> have the business logic defined in only one location while
>>> listening/requesting over different transports.
>>>
>> There is no datagram endpoints API as yet, though (see #4471), only
>> stream endpoints.
>>
>>
> Also, when there are datagram endpoints, they won't be compatible with
> stream endpoints.  Endpoints don't abstract the transport, they abstract
> *creating* the transport.
>
> Twisted provides a uniform abstraction over stream-based transports like
> TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> also provides a uniform abstraction over datagram-based transports like UDP
> and gives you *IUDPTransport* (oops; should have been *IDatagramTransport* and
> some other things about it should probably be changed too) to implement a
> *DatagramProtocol* (oops; no interface for this one, just subclass: see,
> this should change) against.  But it doesn't provide a uniform abstraction
> over both stream-based and datagram-based transports.
>
> Implementing such a thing may be possible and even a good idea but no one
> has yet done it for Twisted (as far as I know).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/f1af3aa3/attachment-0002.html>

From kevinjacobconway at gmail.com  Wed Aug 16 23:35:33 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 05:35:33 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>

> There is no datagram endpoints API as yet, though (see #4471), only
stream endpoints.

I've read through the ticket. What I still don't understand is the
significance of this of this? Other than some irrelevant callbacks, what
prevents anyone from using the existing UDP endpoint? It's not clear from
this thread why the specific transport abstraction is critically
important to the data protocol.

If you are building a Protocol then you use the 'dataReceived' callback to
parse the data. Can someone elaborate on why it matters if the bytes get
here via a datagram or TCP stream?

> But it doesn't provide a uniform abstraction over both stream-based and
datagram-based transports.

Again, why does this matter? If you run a service with multiple listening
transports, why does it matter which one is active? What differs in the way
you interpret the bytes received?

On Wed, Aug 16, 2017 at 9:03 PM Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > There is no datagram endpoints API as yet, though (see #4471), only
> stream endpoints.
>
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.
>
> What am I not understanding about this particular use case?
>
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
>> On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
>> mithrandi at mithrandi.net> wrote:
>>
>>> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
>>> wrote:
>>>
>>>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
>>>> for this.
>>>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
>>>>
>>>> This abstracts the transport and allows you to focus on only
>>>> interpreting the bytes transmitted over that transport by defining a
>>>> Protocol and a Factory that plug into strports. This should allow you to
>>>> have the business logic defined in only one location while
>>>> listening/requesting over different transports.
>>>>
>>> There is no datagram endpoints API as yet, though (see #4471), only
>>> stream endpoints.
>>>
>>>
>> Also, when there are datagram endpoints, they won't be compatible with
>> stream endpoints.  Endpoints don't abstract the transport, they abstract
>> *creating* the transport.
>>
>> Twisted provides a uniform abstraction over stream-based transports like
>> TCP and gives you *ITransport* to implement an *IProtocol* against.  It
>> also provides a uniform abstraction over datagram-based transports like UDP
>> and gives you *IUDPTransport* (oops; should have been
>> *IDatagramTransport* and some other things about it should probably be
>> changed too) to implement a *DatagramProtocol* (oops; no interface for
>> this one, just subclass: see, this should change) against.  But it doesn't
>> provide a uniform abstraction over both stream-based and datagram-based
>> transports.
>>
>> Implementing such a thing may be possible and even a good idea but no one
>> has yet done it for Twisted (as far as I know).
>>
>> Jean-Paul
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/5e3a6da4/attachment-0002.html>

From barry.scott at forcepoint.com  Thu Aug 17 03:01:59 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 17 Aug 2017 10:01:59 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Is there a nice way to
	writetransport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <7554828.1IiCzkikFO@barry-scott-desktop>

On Thursday, 17 August 2017 03:03:41 BST Kevin Conway wrote:
> > There is no datagram endpoints API as yet, though (see #4471), only
> 
> stream endpoints.
> 
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.

streams like TCP will reliably deliver what you send.
but UDP makes no gareentee 

> 
> What am I not understanding about this particular use case?
> 
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> 
> wrote:
> > On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> > 
> > mithrandi at mithrandi.net> wrote:
> >> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> >> 
> >> wrote:
> >>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> >>> for this.
> >>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
> >>> 
> >>> This abstracts the transport and allows you to focus on only
> >>> interpreting the bytes transmitted over that transport by defining a
> >>> Protocol and a Factory that plug into strports. This should allow you to
> >>> have the business logic defined in only one location while
> >>> listening/requesting over different transports.
> >> 
> >> There is no datagram endpoints API as yet, though (see #4471), only
> >> stream endpoints.
> > 
> > Also, when there are datagram endpoints, they won't be compatible with
> > stream endpoints.  Endpoints don't abstract the transport, they abstract
> > *creating* the transport.
> > 
> > Twisted provides a uniform abstraction over stream-based transports like
> > TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> > also provides a uniform abstraction over datagram-based transports like
> > UDP
> > and gives you *IUDPTransport* (oops; should have been *IDatagramTransport*
> > and some other things about it should probably be changed too) to
> > implement a *DatagramProtocol* (oops; no interface for this one, just
> > subclass: see, this should change) against.  But it doesn't provide a
> > uniform abstraction over both stream-based and datagram-based transports.
> > 
> > Implementing such a thing may be possible and even a good idea but no one
> > has yet done it for Twisted (as far as I know).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From barry.scott at forcepoint.com  Thu Aug 17 03:10:01 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Thu, 17 Aug 2017 10:10:01 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Is there a nice way to
	writetransport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
Message-ID: <2149350.gWhUNXtBod@barry-scott-desktop>

On Thursday, 17 August 2017 03:03:41 BST Kevin Conway wrote:
> > There is no datagram endpoints API as yet, though (see #4471), only
> 
> stream endpoints.
> 
> I'm not sure I understand the distinction. Endpoints supports UDP which is
> a datagram based transport. From a Protocol perspective, you only care
> about which bytes are received. If you have a framing concept I'm your data
> format then it should be handled there.

Oppss. last message escaped before being finished.

What I was trying to say is that trying to plug in UDP in place of TCP is not 
going to work. datagrams sent with UDP can be dropped and reorder, where
as TCP will always deliver in order and not drop data.

Protocols that use UDP understand these differences and exploit them.
For example DNS and media streaming.

Barry

> 
> What am I not understanding about this particular use case?
> 
> On Wed, Aug 16, 2017, 16:25 Jean-Paul Calderone <exarkun at twistedmatrix.com>
> 
> wrote:
> > On Wed, Aug 16, 2017 at 9:59 AM, Tristan Seligmann <
> > 
> > mithrandi at mithrandi.net> wrote:
> >> On Wed, 16 Aug 2017 at 15:28 Kevin Conway <kevinjacobconway at gmail.com>
> >> 
> >> wrote:
> >>> Maybe I misunderstand the issue, but I believe the Endpoints API solves
> >>> for this.
> >>> https://twistedmatrix.com/documents/16.4.1/core/howto/endpoints.html
> >>> 
> >>> This abstracts the transport and allows you to focus on only
> >>> interpreting the bytes transmitted over that transport by defining a
> >>> Protocol and a Factory that plug into strports. This should allow you to
> >>> have the business logic defined in only one location while
> >>> listening/requesting over different transports.
> >> 
> >> There is no datagram endpoints API as yet, though (see #4471), only
> >> stream endpoints.
> > 
> > Also, when there are datagram endpoints, they won't be compatible with
> > stream endpoints.  Endpoints don't abstract the transport, they abstract
> > *creating* the transport.
> > 
> > Twisted provides a uniform abstraction over stream-based transports like
> > TCP and gives you *ITransport* to implement an *IProtocol* against.  It
> > also provides a uniform abstraction over datagram-based transports like
> > UDP
> > and gives you *IUDPTransport* (oops; should have been *IDatagramTransport*
> > and some other things about it should probably be changed too) to
> > implement a *DatagramProtocol* (oops; no interface for this one, just
> > subclass: see, this should change) against.  But it doesn't provide a
> > uniform abstraction over both stream-based and datagram-based transports.
> > 
> > Implementing such a thing may be possible and even a good idea but no one
> > has yet done it for Twisted (as far as I know).
> > 
> > Jean-Paul
> > 
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From exarkun at twistedmatrix.com  Thu Aug 17 04:13:45 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2017 06:13:45 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
Message-ID: <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>

On Thu, Aug 17, 2017 at 1:35 AM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > There is no datagram endpoints API as yet, though (see #4471), only
> stream endpoints.
>
> I've read through the ticket. What I still don't understand is the
> significance of this of this? Other than some irrelevant callbacks, what
> prevents anyone from using the existing UDP endpoint? It's not clear from
> this thread why the specific transport abstraction is critically
> important to the data protocol.
>

What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
about the Twisted API collection that centers around
*twisted.internet.endpoints*.  Is that what you're talking about?


>
> If you are building a Protocol then you use the 'dataReceived' callback
> to parse the data. Can someone elaborate on why it matters if the bytes get
> here via a datagram or TCP stream?
>

Often, protocols which have a TCP variation and a UDP variation use
different framing depending on which one they're running over.  Therefore,
you cannot have a transport-neutral  parser.  Parsing depends on the
transport.

Also, in Twisted, if you use UDP, you must implement a *DatagramProtocol* and
the *datagramReceived* method.  If you use TCP, you must implement a
*Protocol* and the *dataReceived* method.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/23e04286/attachment-0002.html>

From kevinjacobconway at gmail.com  Thu Aug 17 06:52:03 2017
From: kevinjacobconway at gmail.com (Kevin Conway)
Date: Thu, 17 Aug 2017 12:52:03 +0000
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
 <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
Message-ID: <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>

> What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
about the Twisted API collection that centers around
*twisted.internet.endpoints*.  Is that what you're talking about?

Oh... Yes, that is true. I think I was reading UNIX and saying UDP in my
head. I'm really sorry for the confusion I'm causing. On the bright side, I
now understand the problem. Sorry, folks.

On Thu, Aug 17, 2017 at 5:14 AM Jean-Paul Calderone <
exarkun at twistedmatrix.com> wrote:

> On Thu, Aug 17, 2017 at 1:35 AM, Kevin Conway <kevinjacobconway at gmail.com>
> wrote:
>
>> > There is no datagram endpoints API as yet, though (see #4471), only
>> stream endpoints.
>>
>> I've read through the ticket. What I still don't understand is the
>> significance of this of this? Other than some irrelevant callbacks, what
>> prevents anyone from using the existing UDP endpoint? It's not clear from
>> this thread why the specific transport abstraction is critically
>> important to the data protocol.
>>
>
> What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
> about the Twisted API collection that centers around
> *twisted.internet.endpoints*.  Is that what you're talking about?
>
>
>>
>> If you are building a Protocol then you use the 'dataReceived' callback
>> to parse the data. Can someone elaborate on why it matters if the bytes get
>> here via a datagram or TCP stream?
>>
>
> Often, protocols which have a TCP variation and a UDP variation use
> different framing depending on which one they're running over.  Therefore,
> you cannot have a transport-neutral  parser.  Parsing depends on the
> transport.
>
> Also, in Twisted, if you use UDP, you must implement a *DatagramProtocol* and
> the *datagramReceived* method.  If you use TCP, you must implement a
> *Protocol* and the *dataReceived* method.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/fe7722ee/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Aug 17 07:23:12 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2017 09:23:12 -0400
Subject: [Twisted-Python] Is there a nice way to write
 transport-agnostic protocols and servers/clients?
In-Reply-To: <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>
References: <CA+HdgOU4OWuhbXmczPR8YoX50CTkA-G5N7-EewPSLH2WzkiZ8g@mail.gmail.com>
 <63A6A25F-3237-4C23-B9FC-6983E6ECF2BC@lukasa.co.uk>
 <CA+HdgOVrsHiyFdT_OoAZbo15O_43if_pKvuEvcZ_kHgwCwvEMg@mail.gmail.com>
 <CAMcKhMS2DdT3k7Ac0Q5Jg8YKTBS5K+ni--B_uxUc7ZPfXYZWkw@mail.gmail.com>
 <CAKF=+djxY2fBGom15xELGD1fQZjp5mGumM7GjT+DZvhtFReCcA@mail.gmail.com>
 <CAMcKhMS9XHT5De8R8_8BAb77Nwg7_wd8WL7U=nbqwSuDOhRuUA@mail.gmail.com>
 <CAEeXt4NcEqcAPFi-vjC6eTEw56sMi14y6w4UhLtUW_Qe+qpxrA@mail.gmail.com>
 <CAKF=+diYTVwetXrLrQuUa5Aa=6GHeDJKpPF0q--uCup4QhTJWw@mail.gmail.com>
 <CAKF=+di2V=ovvc_=pXpULEaJgZskFQbJUwGN7iwczNQtEJGeRQ@mail.gmail.com>
 <CAEeXt4PWRU-XxboL3KkN-dyD2UZf7+mmsXHjZq4TPYrW=jOdYw@mail.gmail.com>
 <CAKF=+djttBCtBTjRj39Metg9EYuoNJkeakMdF0Tv9HPKgMmsDA@mail.gmail.com>
Message-ID: <CAEeXt4M_w8EbZJ+avcnmtZknrUgUqRxwZ8iGktXyLH1FpuZHAA@mail.gmail.com>

On Thu, Aug 17, 2017 at 8:52 AM, Kevin Conway <kevinjacobconway at gmail.com>
wrote:

> > What UDP endpoint?  There isn't one.  When I say "endpoint" I'm talking
> about the Twisted API collection that centers around
> *twisted.internet.endpoints*.  Is that what you're talking about?
>
> Oh... Yes, that is true. I think I was reading UNIX and saying UDP in my
> head. I'm really sorry for the confusion I'm causing. On the bright side, I
> now understand the problem. Sorry, folks.
>

Aha!  Yes, re-reading what you wrote and substituting UNIX for UDP,
everything makes much more sense.  Thanks for clarifying. :)

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170817/69a6d863/attachment-0002.html>

From p.mayers at imperial.ac.uk  Thu Aug 17 16:47:16 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 17 Aug 2017 23:47:16 +0100
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
Message-ID: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>

This is an odd one; I have a simple test using the incremental xmlfile() 
feature of lxml, that crashes *only* if the test case inherits from 
trial.unittest.TestCase; it works if inheriting from unittest.TestCase.

SSCCE - well, hopefully correct - here:

https://gist.github.com/philmayers/387597c7407ab98f159426cea5f44a69

With lxml 3.8.0 (tried both manylinux1 wheel from PyPI and 
locally-compiled) and a debug python, I get:

$ bin/python2-debug -m twisted.trial test_repro.py
test_repro
   Test
     test_one ...    [OK]
     test_two ...    [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.032s

PASSED (successes=2)
python2-debug: /builddir/build/BUILD/Python-2.7.13/Python/getargs.c:229: 
vgetargs1: Assertion `compat || (args != (PyObject*)NULL)' failed.
Aborted (core dumped)

Obviously lxml is a pretty big chunk of Cython, but the trial-specific 
nature of the crash has me curious which of the two is at fault.

I have tried to debug it, and it basically seems to end up somewhere 
inside the Cython-generated code with an argument to a python function 
that is NULL when it shouldn't be.

Any ideas?



From glyph at twistedmatrix.com  Thu Aug 17 23:23:40 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 17 Aug 2017 22:23:40 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
Message-ID: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>


> On Aug 16, 2017, at 1:15 PM, ceeborraa <ceeborraa at gmx.de> wrote:
> 
> Hi,
> 
> I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly. 
> 
> Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of: 
> 
> <class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
> 
> I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
> 
> If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
> 
> But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to: 
> 
> certificate = ssl.Certificate(cert_obj)
> privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
> prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
> 
> factory = protocol.Factory.forProtocol(Echo)
> reactor.listenSSL(7498,factory,prkey_and_cert.options())
> 
> Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
> 
> Appreciate any help!

This sounds like it might be a configuration problem with your build of OpenSSL.  Can you post the most detailed explanation of what versions of everything you're using that you can?  Particularly: your operating system, any installed version of OpenSSL, cryptography?  (If you know how to check which OpenSSL cryptography is linked to, that would be great too.)  What attributes does the private key have?

Thanks for using Twisted,

-g



From mithrandi at mithrandi.net  Fri Aug 18 00:05:58 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Fri, 18 Aug 2017 06:05:58 +0000
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
In-Reply-To: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
References: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
Message-ID: <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>

On Fri, 18 Aug 2017 at 00:47 Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> SSCCE - well, hopefully correct - here:
>
> https://gist.github.com/philmayers/387597c7407ab98f159426cea5f44a69
>

Note that I don't think you're allowed to catch GeneratorExit like this;
normally doing so will crash your program with a RuntimeError after the
generator fails to exit (possibly masked here by the generator living until
the end of the program). However, I was able to reproduce the crash even
after removing the try/except, so I don't think this issue is related.

Given that the crash only occurs at exit, I suspect this has something to
do with finalizers running at a bad time during interpreter shutdown, but I
don't have time at the moment to look into this deeply (I just spotted the
GeneratorExit issue and wanted to check if that was the problem).

I suspect this is an lxml or Cython bug, ultimately, but changing the test
base class changes some ordering of events arbitrarily resulting in this
heisencrash. Alternatively, it might have something to do with logging.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170818/7ce6a6fe/attachment-0002.html>

From p.mayers at imperial.ac.uk  Fri Aug 18 00:51:59 2017
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 18 Aug 2017 07:51:59 +0100
Subject: [Twisted-Python] trial.unitest-specific segfault with lxml
In-Reply-To: <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>
References: <9dbd0c83-6b0c-fb9b-c223-3e1121b2caca@imperial.ac.uk>
 <CAMcKhMTL91=UTYw8aWDcRF9rn_dcFqFT_n+TduvWWPxOfkvpPQ@mail.gmail.com>
Message-ID: <26295a4f-1410-8642-b8f5-85bea36c5eeb@imperial.ac.uk>

On 18/08/2017 07:05, Tristan Seligmann wrote:

> Note that I don't think you're allowed to catch GeneratorExit like this; 

Interesting, I cribbed that from the lxml docs. Will look into it, 
thanks for the pointer.

> Given that the crash only occurs at exit, I suspect this has something 
> to do with finalizers running at a bad time during interpreter shutdown, 
> but I don't have time at the moment to look into this deeply (I just 
> spotted the GeneratorExit issue and wanted to check if that was the 
> problem).
> 
> I suspect this is an lxml or Cython bug, ultimately, but changing the 
> test base class changes some ordering of events arbitrarily resulting in 
> this heisencrash. Alternatively, it might have something to do with logging.

You're spot on - I have managed to trim the test-case down to a plain 
python script, no twisted/trial. It seems to crash the interpreter on 
exit any time >1 xmlfile is live at that point, but it does not crash if 
you del the objects in certain orders - trial was obviously just 
revealing it.

Thanks for the attention and apologies for the noise, seems this is 
nothing to do with Twisted.

Regards,
Phil



From rodrigc at crodrigues.org  Sat Aug 19 08:18:37 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sat, 19 Aug 2017 07:18:37 -0700
Subject: [Twisted-Python] Appveyor build problems
Message-ID: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>

Hi,

A few of the Appveyor builds have been failing
intermittently due to networking problems
at Appveyor.  This was due to Appveyor moving
to a new datacenter:

http://help.appveyor.com/discussions/problems/7409-chocolatey-timeout-when-installing-openssh

Things seem OK now, but if there are problems we
can let Appveyor know.

--
Craig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/1ffabaf8/attachment-0002.html>

From ceeborraa at gmx.de  Sat Aug 19 10:53:03 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sat, 19 Aug 2017 18:53:03 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
Message-ID: <trinity-7469527f-7c11-472a-97c3-c975ede5f882-1503161583330@3c-app-gmx-bs07>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/a13a63b5/attachment-0002.html>

From ceeborraa at gmx.de  Sat Aug 19 10:55:16 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sat, 19 Aug 2017 18:55:16 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <6819A214-D65B-41BE-B371-4BA23773DC58@twistedmatrix.com>
Message-ID: <trinity-4276b276-ae40-4b6e-a494-4450be2f772f-1503161716687@3c-app-gmx-bs07>

Again as text mail... sorry!

Ok, let me try to provide some detailled information, hope it helps:
 
> openssl version -a:
OpenSSL 1.1.0f  25 May 2017
built on: reproducible build, date unspecified
platform: linux-x86_64
compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DOPENSSLDIR="\"/usr/local/ssl\"" -DENGINESDIR="\"/usr/local/lib/engines-1.1\""  -Wa,--noexecstack
OPENSSLDIR: "/usr/local/ssl"
ENGINESDIR: "/usr/local/lib/engines-1.1"
 
> uname -vr
4.9.0-3-amd64 #1 SMP Debian 4.9.30-2+deb9u2 (2017-06-26)
 
 
> Installed python3 (3.5.3) packages via pip:
cryptography 2.0.3
pyopenssl 17.2.0
Twisted 17.5.0
 
I linked cryptography with the following flags:
CFLAGS="-I/usr/local/include"
LDFLAGS="-L/usr/local/lib"
 
I think I know where the problem is. It's obviously not Twisted. I'm using an ECC private key from curve secp521r1 and as far as I understand, pyOpenSSL still has some problems with supporting this type of private keys.
 
Its some kind of strange behaviour. I can parse the ECC key from file and do some operations with it (e.g. signing a file) which works well.
But if I just call the check() method of the pkey object, I get the error: "Unsupported key type" from pyOpenSSL. I think this is the reason why Twisted cannot get the TLS options from it.
A similar situation is being described here: https://github.com/pyca/pyopenssl/issues/291
 
I tried to follow the workaround being described in the issue from the link above, namely to serialise the private key to cryptography and later to convert it to a pyOpenSSL pkey object, but it still does not support the key type.
 
Maybe you have an idea of how to get those things work?
 
Thank you 
 

Gesendet: Freitag, 18. August 2017 um 07:23 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> On Aug 16, 2017, at 1:15 PM, ceeborraa <ceeborraa at gmx.de> wrote:
>
> Hi,
>
> I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly.
>
> Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of:
>
> <class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
>
> I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
>
> If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
>
> But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to:
>
> certificate = ssl.Certificate(cert_obj)
> privkey = ssl.KeyPair(pkey) # pkey is the OpenSSL PKey object
> prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
>
> factory = protocol.Factory.forProtocol(Echo)
> reactor.listenSSL(7498,factory,prkey_and_cert.options())
>
> Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
>
> Appreciate any help!

This sounds like it might be a configuration problem with your build of OpenSSL. Can you post the most detailed explanation of what versions of everything you're using that you can? Particularly: your operating system, any installed version of OpenSSL, cryptography? (If you know how to check which OpenSSL cryptography is linked to, that would be great too.) What attributes does the private key have?

Thanks for using Twisted,

-g

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]



From mithrandi at mithrandi.net  Sat Aug 19 11:53:09 2017
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Sat, 19 Aug 2017 17:53:09 +0000
Subject: [Twisted-Python] Nevow 0.14.3rc1 released
In-Reply-To: <CAMcKhMR3fD0a0YmDLq9ekzjjRkLpmuZnmVBz-TyOFn+p2m7EMw@mail.gmail.com>
References: <CAMcKhMR3fD0a0YmDLq9ekzjjRkLpmuZnmVBz-TyOFn+p2m7EMw@mail.gmail.com>
Message-ID: <CAMcKhMSpbj+UEwo+=2_yR0-QPW3gsZO4rVMqZSg-HAF1xRvknA@mail.gmail.com>

On Wed, 26 Jul 2017 at 20:46 Tristan Seligmann <mithrandi at mithrandi.net>
wrote:

> I've uploaded a prerelease of Nevow 0.14.3 to PyPI[1]. This contains a fix
> for some Athena client-side timeout behaviour (or more specifically, the
> lack of one) and removes use of FilePath.getmtime.
>

I've uploaded the final release of Nevow 0.14.3[1]; the only changes since
the prerelease relate to some issues around versioning and the __version__
attribute.

[1] https://pypi.python.org/pypi/Nevow/0.14.3

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170819/f9b8e977/attachment-0002.html>

From trac at twistedmatrix.com  Sun Aug 20 00:05:20 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Aug 2017 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1503209120.52.1339088729534287156@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170820/ae7dfe3c/attachment-0002.html>

From ceeborraa at gmx.de  Sun Aug 20 10:30:31 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sun, 20 Aug 2017 18:30:31 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
Message-ID: <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>


 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem:

class MySSLContext(ssl.ContextFactory):
    
    _context = None
    
    def __init__(self,privateKey, certificate, sslmethod=SSL.TLSv1_2_METHOD, _contextFactory=SSL.Context):
        
        self.privateKey = privateKey
        self.certificate = certificate
        self._contextFactory = _contextFactory
        self.sslmethod = sslmethod
        
        self.cacheContext()
        
    def cacheContext(self):
        
        if(self._context is None):
            
            ctx = self._contextFactory(self.sslmethod)
            
            ctx.set_options(SSL.OP_NO_SSLv2)
            ctx.set_options(SSL.OP_NO_SSLv3)
            ctx.use_privatekey(self.privateKey)
            ctx.use_certificate(self.certificate)
            
            self._context = ctx
            
    def getContext(self):
        
        return self._context

This context can now work with the EC private key from secp521r1!
 

Gesendet: Mittwoch, 16. August 2017 um 22:15 Uhr
Von: ceeborraa <ceeborraa at gmx.de>
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] SSLContext not valid for TLS Server

Hi,
I'm running Twisted 17.5.0 on Python 3.5.3 and want to create a TLS server with Twisted. I strictly sticked to the example of echoserv_ssl.py on http://twistedmatrix.com/documents/current/core/howto/ssl.html, but TLS server is not running properly.
Despite the server starts correctly, it doesn't offer any cipher suites to the client, no matter what kind of client is trying to connect. Any time a client connects, the connection is immediately aborted by server with the error message of:
<class 'OpenSSL.SSL.Error'>: [('SSL routines','tls_post_process_client_hello',no shared cipher')]
I tried to connect to server with the TLS echo client example of echoclient_ssl.py, with openssl s_client command and with nmap by using the --ssl-enum-ciphers script. Each time it failed with the above error message.
If I do not use the options offered by ssl.CertificateOptions() as suggested in the example, but instead create a ssl.DefaultOpenSSLContextFactory() where I provide the privateKey and Certificate as filename-strings, the server works correctly and offers the intended cipher suites.
But I need to create the SSLContext from a OpenSSL PKey-Object (private Key) and a OpenSSL Certificate-Object. Therefore I adjusted the server code of the TLS server example to:
certificate = ssl.Certificate(cert_obj)
privkey = ssl.KeyPair(pkey)    # pkey is the OpenSSL PKey object
prkey_and_cert = ssl.PrivateCertificate.fromCertificateAndKeyPair(certificate,privkey)
factory = protocol.Factory.forProtocol(Echo)
reactor.listenSSL(7498,factory,prkey_and_cert.options())
Again, the server starts, but it does not provide cipher suites so that no client can connect. Same as above!
Appreciate any help!
_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]



From glyph at twistedmatrix.com  Sun Aug 20 14:36:58 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 20 Aug 2017 13:36:58 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
Message-ID: <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>


> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem:

Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.

DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html> ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170820/7b5443e5/attachment-0002.html>

From barry.scott at forcepoint.com  Mon Aug 21 03:52:54 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 21 Aug 2017 10:52:54 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: Chunked decoding missing from
	HTTPClient?
In-Reply-To: <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
Message-ID: <2260631.PGH0HxWAjT@barry-scott-desktop>

On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > I see that HTTPChannel knows about chunking and indeed works well.
> > 
> > However shouldn't HTTPClient also support chunking?
> > Or Am I missing something to get chunking working for the response from a
> > server?
> 
> Take a look at
> http://twistedmatrix.com/documents/current/web/howto/client.html which
> documents the newer HTTP client API in Twisted.

I'm interested in using a subclass of HTTPClientParser with Agent.
It does not seem that I can do this simply and have Agent use my class.

I see that its hardwired in HTTP11ClientProtocol.request().

Is this possible?

> You may also want to have
> a look at https://treq.readthedocs.io/en/latest/ which provides another
> layer on top of that which may be even easier to use for your purposes.

Looks nice, but too high level for our use.

> 
> HTTPClient is old, implements HTTP/1.0, and will probably be deprecated and
> removed before too much longer.

Got it.

> 
> Jean-Paul

Barry



From exarkun at twistedmatrix.com  Mon Aug 21 04:27:53 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Mon, 21 Aug 2017 06:27:53 -0400
Subject: [Twisted-Python] COMMERCIAL:Re: Chunked decoding missing from
	HTTPClient?
In-Reply-To: <2260631.PGH0HxWAjT@barry-scott-desktop>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <CAEeXt4NY2pdsDMDt5Nw03zn4YVoYC=QceDFMGGzUku6qnGEq=A@mail.gmail.com>
 <2260631.PGH0HxWAjT@barry-scott-desktop>
Message-ID: <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>

On Mon, Aug 21, 2017 at 5:52 AM, Barry Scott <barry.scott at forcepoint.com>
wrote:

> On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> > On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com
> >
> >
> > wrote:
> > > I see that HTTPChannel knows about chunking and indeed works well.
> > >
> > > However shouldn't HTTPClient also support chunking?
> > > Or Am I missing something to get chunking working for the response
> from a
> > > server?
> >
> > Take a look at
> > http://twistedmatrix.com/documents/current/web/howto/client.html which
> > documents the newer HTTP client API in Twisted.
>
> I'm interested in using a subclass of HTTPClientParser with Agent.
> It does not seem that I can do this simply and have Agent use my class.
>
> I see that its hardwired in HTTP11ClientProtocol.request().
>
>
Yep, seems to be.


> Is this possible?
>

If you can convince folks there's a good reason to want to do this, you can
probably get a patch accepted that allows it.

Why do you want to do this?

Jean-Paul


>
> > You may also want to have
> > a look at https://treq.readthedocs.io/en/latest/ which provides another
> > layer on top of that which may be even easier to use for your purposes.
>
> Looks nice, but too high level for our use.
>
> >
> > HTTPClient is old, implements HTTP/1.0, and will probably be deprecated
> and
> > removed before too much longer.
>
> Got it.
>
> >
> > Jean-Paul
>
> Barry
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170821/7655ca12/attachment-0002.html>

From barry.scott at forcepoint.com  Mon Aug 21 08:10:10 2017
From: barry.scott at forcepoint.com (Barry Scott)
Date: Mon, 21 Aug 2017 15:10:10 +0100
Subject: [Twisted-Python] COMMERCIAL:Re: COMMERCIAL:Re: Chunked decoding
	missing fromHTTPClient?
In-Reply-To: <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>
References: <4358208.IFeyFRxXzr@barry-scott-desktop>
 <2260631.PGH0HxWAjT@barry-scott-desktop>
 <CAEeXt4PXan1RKUdD8hmXiwnU2oO0sYFeDjEH4p0n406wGybqNQ@mail.gmail.com>
Message-ID: <25483489.JNdSSEalkj@barry-scott-desktop>

On Monday, 21 August 2017 11:27:53 BST Jean-Paul Calderone wrote:
> On Mon, Aug 21, 2017 at 5:52 AM, Barry Scott <barry.scott at forcepoint.com>
> 
> wrote:
> > On Tuesday, 15 August 2017 14:12:21 BST Jean-Paul Calderone wrote:
> > > On Tue, Aug 15, 2017 at 8:43 AM, Barry Scott <barry.scott at forcepoint.com
> > > 
> > > wrote:
> > > > I see that HTTPChannel knows about chunking and indeed works well.
> > > > 
> > > > However shouldn't HTTPClient also support chunking?
> > > > Or Am I missing something to get chunking working for the response
> > 
> > from a
> > 
> > > > server?
> > > 
> > > Take a look at
> > > http://twistedmatrix.com/documents/current/web/howto/client.html which
> > > documents the newer HTTP client API in Twisted.
> > 
> > I'm interested in using a subclass of HTTPClientParser with Agent.
> > It does not seem that I can do this simply and have Agent use my class.
> > 
> > I see that its hardwired in HTTP11ClientProtocol.request().
> 
> Yep, seems to be.
> 
> > Is this possible?
> 
> If you can convince folks there's a good reason to want to do this, you can
> probably get a patch accepted that allows it.
> 
> Why do you want to do this?

There are places in twisted where we hardened it against malformed headers 
etc. Thoses changes might be something you want to take as a patch or we might 
need to keep subclassing pieces of the twisted stack.

I've got a long way with moving to twisted 17.5 from 2.0, the last piece,
I hope, is figuring out how to allow us to add code to the processing
without maintaining out of tree patches to twisted itself.

Barry

> 
> Jean-Paul
> 
> > > You may also want to have
> > > a look at https://treq.readthedocs.io/en/latest/ which provides another
> > > layer on top of that which may be even easier to use for your purposes.
> > 
> > Looks nice, but too high level for our use.
> > 
> > > HTTPClient is old, implements HTTP/1.0, and will probably be deprecated
> > 
> > and
> > 
> > > removed before too much longer.
> > 
> > Got it.
> > 
> > > Jean-Paul
> > 
> > Barry




From ceeborraa at gmx.de  Tue Aug 22 10:16:44 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Tue, 22 Aug 2017 18:16:44 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
Message-ID: <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>

Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):

co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)

Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().

Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?

Thank you!
 

Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem: 
Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
 
DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
 
-glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]



From glyph at twistedmatrix.com  Tue Aug 22 22:21:56 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 22 Aug 2017 21:21:56 -0700
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
Message-ID: <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>


> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
> 
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)

Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html>
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
> 
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?

You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).

https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html <https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html> is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.

-glyph

> Thank you!
>  
> 
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem: 
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>  
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>  
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170822/3bc8db85/attachment-0002.html>

From ceeborraa at gmx.de  Thu Aug 24 13:40:18 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Thu, 24 Aug 2017 21:40:18 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
Message-ID: <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>

I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)

In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.

But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?

Thank you!
 

Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
Von: Glyph <glyph at twistedmatrix.com>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 

Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):

co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
 
Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html] 

Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().

Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
 
You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
 
https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
 
-glyph 

Thank you!
 

Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

 

On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote: 
 Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.

For anybody who has the same problem: 
Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
 
DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
 
-glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]



From cory at lukasa.co.uk  Fri Aug 25 02:19:28 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Fri, 25 Aug 2017 09:19:28 +0100
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
Message-ID: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>

This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.

The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.

Cory


[1]: https://github.com/pyca/pyopenssl/blob/master/src/OpenSSL/SSL.py#L632-L636

> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
> 
> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
> 
> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
> 
> Thank you!
>  
> 
> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote: 
> 
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
> 
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>  
> Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html] 
> 
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
> 
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>  
> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>  
> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>  
> -glyph 
> 
> Thank you!
>  
> 
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
> 
>  
> 
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote: 
>  Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
> 
> For anybody who has the same problem: 
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>  
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>  
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From hawkowl at atleastfornow.net  Fri Aug 25 02:24:47 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Fri, 25 Aug 2017 18:24:47 +1000
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
Message-ID: <D1592730-EB55-4349-B782-46FAB42AF457@atleastfornow.net>

A quick git blame says that it landed in https://github.com/pyca/pyopenssl/commit/6c6bf865acdd3c5ca5f47b1dbc2903023fd286b6 <https://github.com/pyca/pyopenssl/commit/6c6bf865acdd3c5ca5f47b1dbc2903023fd286b6>, which exists in 17.0.0+. We require 16.0.0+, so it ought to be a relatively simple version check.

- Amber


> On 25 Aug 2017, at 18:19, Cory Benfield <cory at lukasa.co.uk> wrote:
> 
> This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.
> 
> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> 
> Cory
> 
> 
> [1]: https://github.com/pyca/pyopenssl/blob/master/src/OpenSSL/SSL.py#L632-L636
> 
>> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>> 
>> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
>> 
>> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
>> 
>> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
>> 
>> Thank you!
>> 
>> 
>> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
>> Von: Glyph <glyph at twistedmatrix.com>
>> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>> 
>> 
>> 
>> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote:
>> 
>> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
>> 
>> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>> 
>> Please note that importing names with "._" in them is relying on private API :).  The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html]
>> 
>> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
>> 
>> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>> 
>> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>> 
>> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>> 
>> -glyph
>> 
>> Thank you!
>> 
>> 
>> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
>> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
>> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
>> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>> 
>> 
>> 
>> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote:
>> Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
>> 
>> For anybody who has the same problem:
>> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>> 
>> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>> 
>> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170825/bd4cdfa7/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170825/bd4cdfa7/attachment-0002.sig>

From lkurisaki at yahoo.com  Fri Aug 25 15:50:51 2017
From: lkurisaki at yahoo.com (Lance Kurisaki)
Date: Fri, 25 Aug 2017 21:50:51 +0000 (UTC)
Subject: [Twisted-Python] HTTP/2 and getPeerCertificate
References: <1331718667.2573658.1503697851807.ref@mail.yahoo.com>
Message-ID: <1331718667.2573658.1503697851807@mail.yahoo.com>

With HTTP/1.1, I used to be able to call request.transport.getPeerCertificate(). When the client uses HTTP/2, however, it seems that request.transport is None. How does one access the transport with HTTP/2? Thank you...            Lance
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170825/ea310d79/attachment-0002.html>

From jlitzingerdev at gmail.com  Sat Aug 26 22:17:13 2017
From: jlitzingerdev at gmail.com (Jason Litzinger)
Date: Sat, 26 Aug 2017 22:17:13 -0600
Subject: [Twisted-Python] Python 2.7.5 support
Message-ID: <20170827041713.GA17542@arch-tinker.localdomain>

Hello,
I've done some preliminary digging into ticket 8037 and added my
findings to the comments.  One question that came from that
investigation is whether python 2.7.5 is still officially supported by
Twisted?

Per [1] I'm assuming yes as there appears to be a buildbot job that uses
this version (RHEL7, [2]) but I did want to confirm before I looked into any
kind of fix.

Thanks!
-Jason

[1] https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html#supporting-and-de-supporting-python-versions
[2] https://buildbot.twistedmatrix.com/builders/rhel7-py2.7/builds/826/steps/select/logs/stdio



From glyph at twistedmatrix.com  Sat Aug 26 22:35:29 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 26 Aug 2017 21:35:29 -0700
Subject: [Twisted-Python] HTTP/2 and getPeerCertificate
In-Reply-To: <1331718667.2573658.1503697851807@mail.yahoo.com>
References: <1331718667.2573658.1503697851807.ref@mail.yahoo.com>
 <1331718667.2573658.1503697851807@mail.yahoo.com>
Message-ID: <8EE5F61D-CFBA-47D8-92D6-FE2072EDCCDB@twistedmatrix.com>


> On Aug 25, 2017, at 2:50 PM, Lance Kurisaki <lkurisaki at yahoo.com> wrote:
> 
> With HTTP/1.1, I used to be able to call request.transport.getPeerCertificate(). When the client uses HTTP/2, however, it seems that request.transport is None. How does one access the transport with HTTP/2? Thank you...
>             Lance

I think this is just a bug; the `transport`.  I filed it here: https://twistedmatrix.com/trac/ticket/9270 <https://twistedmatrix.com/trac/ticket/9270>

Please consider submitting a patch to Twisted so that this can be fixed in a useful way for everyone!

In the meanwhile, with the usual caveats about using private interfaces <https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html> you can retrieve the transport via "request.channel._conn.transport" in http/2, and the "clientproto" attribute of the request will tell you which kind of request it is.

Thanks for using Twisted; sorry for this bug,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170826/626b793d/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Aug 26 22:40:26 2017
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 26 Aug 2017 21:40:26 -0700
Subject: [Twisted-Python] Python 2.7.5 support
In-Reply-To: <20170827041713.GA17542@arch-tinker.localdomain>
References: <20170827041713.GA17542@arch-tinker.localdomain>
Message-ID: <90F47058-2D53-49D8-AD3E-55CAD68BBB6D@twistedmatrix.com>


> On Aug 26, 2017, at 9:17 PM, Jason Litzinger <jlitzingerdev at gmail.com> wrote:
> 
> Hello,
> I've done some preliminary digging into ticket 8037 and added my
> findings to the comments.  One question that came from that
> investigation is whether python 2.7.5 is still officially supported by
> Twisted?
> 
> Per [1] I'm assuming yes as there appears to be a buildbot job that uses
> this version (RHEL7, [2]) but I did want to confirm before I looked into any
> kind of fix.

I already replied on the ticket, but: only the latest 2.7.x is technically supported at any given time; our users are expected to install security updates :).

-g


From trac at twistedmatrix.com  Sun Aug 27 00:05:22 2017
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Aug 2017 06:05:22 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1503813922.83.2261686716824852066@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/6963e923/attachment-0002.html>

From ceeborraa at gmx.de  Sun Aug 27 02:44:26 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Sun, 27 Aug 2017 10:44:26 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
Message-ID: <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>

Thank you for your reply. 

> This is a somewhat-known issue that I’ve had bubbling on the backburner for some time. For a long time PyOpenSSL didn’t automatically load all EC curves and didn’t provide any API to do so, so Twisted told OpenSSL which curve to use. Some time ago PyOpenSSL changed this behaviour to automatically load all curves, which would resolve this issue.
This, I understand so far.

> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?

I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

Thank you!


> On 24 Aug 2017, at 20:40, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>
> I think I now know why it is not working. As I initially suspected that ECC could be the reasons, it seems to have come true. No matter what kind of ECC curve I use, the current implementation of Twisted always uses prime256v1 curve. Maybe because pyOpenSSL hasn't got full ECC support currently!? (got it from some comments in _sslverify.py)
>
> In my setting I use secp521r1 curve and for testing purpose I created a key pair of prime256v1 and this works with CertificateOptions. If you have a look at the implementations of twisted.internet._sslverify you will see that prime256v1 is always used as default curve and it seems that no other curve is being accepted. This should be the reason why CertificateOptions does not work for my ECC key.
>
> But somehow it works even with secp521r1, if I use the DefaultOpenSSLContextFactory. So do you know any workaround how it can be fixed that twisted accepts other curves than prime256v1?
>
> Thank you!
>
>
> Gesendet: Mittwoch, 23. August 2017 um 06:21 Uhr
> Von: Glyph <glyph at twistedmatrix.com>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>
>
>
> On Aug 22, 2017, at 9:16 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]> wrote:
>
> Yes, you're right for sure. As an alternative I tried to instantiate an object from twisted.internet._sslverify.OpenSSLCertificateOptions (as it is used by PrivateCertificate e.g.):
>
> co = OpenSSLCertificateOptions(privateKey=pkey,certificate=cert_obj)
>
> Please note that importing names with "._" in them is relying on private API :). The public alias for this is `twisted.internet.ssl.CertificateOptions` https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.ssl.CertificateOptions.html]]
>
> Despite it provides a SSL-context, it does not work similarly to the options() method I tried before from PrivateCertificate().
>
> Can you tell me how I can make use of IOpenSSLServerConnectionCreator to create a valid SSL-Context for the TLS server in my case?
>
> You should probably just use CertificateOptions - I still would like to understand why it doesn't work ;-).
>
> https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]] is documented here; this is just the interface you should implement (rather than subclassing ContextFactory and implementing getContext) if you want to do something totally custom with the OpenSSL API rather than Twisted's API; I'd still rather understand why Twisted's API, i.e. CertificateOptions, doesn't work for you.
>
> -glyph
>
> Thank you!
>
>
> Gesendet: Sonntag, 20. August 2017 um 22:36 Uhr
> Von: Glyph <glyph at twistedmatrix.com[mailto:glyph at twistedmatrix.com]>
> An: "Twisted general discussion" <twisted-python at twistedmatrix.com[mailto:twisted-python at twistedmatrix.com]>
> Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server
>
>
>
> On Aug 20, 2017, at 9:30 AM, Thomas Hartwich <ceeborraa at gmx.de[mailto:ceeborraa at gmx.de][mailto:ceeborraa at gmx.de[mailto:ceeborraa at gmx.de]]> wrote:
> Ok, I finally got a solution for my problem. As I know, the TLS server was working with DefaultOpenSSLContextFactory but this only takes file paths to private key/certificate, I created my own SSL-Context file.
>
> For anybody who has the same problem:
> Please note that this solution will prevent the use of TLS 1.3 when it is available, among other problems.
>
> DefaultOpenSSLContextFactory should be deprecated (I hope someone has the time to do it soon), as is the 'getContext' interface that you're using (you should be using https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html][https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html[https://twistedmatrix.com/documents/17.5.0/api/twisted.internet.interfaces.IOpenSSLServerConnectionCreator.html]]] ) so it would be really good to understand what part of the non-deprecated TLS stack is broken for you.
>
> -glyph_______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com] https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python][https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]]
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com[mailto:Twisted-Python at twistedmatrix.com]
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]
> _______________________________________________ Twisted-Python mailing list Twisted-Python at twistedmatrix.com https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python][https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]]
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python[https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python]



From twotonespirit at gmail.com  Sun Aug 27 12:06:01 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 11:06:01 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
Message-ID: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>

Hey friends.

I'm in a position that is probably increasingly common.  I'm working on a
project that has a dependency that uses asyncio (kademlia).

However, I much prefer to use Twisted.

What's are some best practices for this at the moment?

-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/d58e8076/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Aug 27 12:35:37 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 27 Aug 2017 11:35:37 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
Message-ID: <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>

Twisted 17.5.0 has new code to interoperate between Python's asyncio and
"async def":

https://twistedmatrix.com/documents/current/core/howto/defer-intro.html#coroutines-with-async-await

One example of where this is used is in Klein, a web microframework built
on top of Twisted:

https://klein.readthedocs.io/en/latest/examples/await.html


Also, over 93% of Twisted's tests pass on Python 3:

https://www.slideshare.net/CraigRodrigues1/the-onward-journey-porting-twisted-to-python-3

So I think that it is quite possible to look at using Twisted in a project
which is using Python asyncio.

--
Craig

On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
twotonespirit at gmail.com> wrote:

> Hey friends.
>
> I'm in a position that is probably increasingly common.  I'm working on a
> project that has a dependency that uses asyncio (kademlia).
>
> However, I much prefer to use Twisted.
>
> What's are some best practices for this at the moment?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/be2d38cb/attachment-0002.html>

From twotonespirit at gmail.com  Sun Aug 27 12:36:55 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 11:36:55 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
Message-ID: <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>

Sure, syntactically it seems pretty close to gravy.

But I'm wondering about flow control: if a project like kademlia is using
the ayncio event loop, is it still practical to use twisted?

On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
> "async def":
>
> https://twistedmatrix.com/documents/current/core/howto/
> defer-intro.html#coroutines-with-async-await
>
> One example of where this is used is in Klein, a web microframework built
> on top of Twisted:
>
> https://klein.readthedocs.io/en/latest/examples/await.html
>
>
> Also, over 93% of Twisted's tests pass on Python 3:
>
> https://www.slideshare.net/CraigRodrigues1/the-onward-
> journey-porting-twisted-to-python-3
>
> So I think that it is quite possible to look at using Twisted in a project
> which is using Python asyncio.
>
> --
> Craig
>
> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
> twotonespirit at gmail.com> wrote:
>
>> Hey friends.
>>
>> I'm in a position that is probably increasingly common.  I'm working on a
>> project that has a dependency that uses asyncio (kademlia).
>>
>> However, I much prefer to use Twisted.
>>
>> What's are some best practices for this at the moment?
>>
>>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/a3371c7e/attachment-0002.html>

From rodrigc at crodrigues.org  Sun Aug 27 13:35:45 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Sun, 27 Aug 2017 12:35:45 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
Message-ID: <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>

You can use this class to interoperate with the Python asyncio reactor and
Twisted:


https://twistedmatrix.com/documents/current/api/twisted.internet.asyncioreactor.html

So you can do something like:

import asyncio
from twisted.internet import asyncioreactor, reactor
loop = asyncio.get_event_loop()

asyncioreactor.install(eventloop=loop)
reactor.run()


Here is a fancy example which uses Python asyncio, uvloop, and twisted.web
combined:

https://gist.github.com/ldjebran/4febf298232a6fd86871df25d4dc00dd


--
Craig

On Sun, Aug 27, 2017 at 11:36 AM, Justin Myles Holmes <
twotonespirit at gmail.com> wrote:

> Sure, syntactically it seems pretty close to gravy.
>
> But I'm wondering about flow control: if a project like kademlia is using
> the ayncio event loop, is it still practical to use twisted?
>
> On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org>
> wrote:
>
>> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
>> "async def":
>>
>> https://twistedmatrix.com/documents/current/core/howto/defer
>> -intro.html#coroutines-with-async-await
>>
>> One example of where this is used is in Klein, a web microframework built
>> on top of Twisted:
>>
>> https://klein.readthedocs.io/en/latest/examples/await.html
>>
>>
>> Also, over 93% of Twisted's tests pass on Python 3:
>>
>> https://www.slideshare.net/CraigRodrigues1/the-onward-journe
>> y-porting-twisted-to-python-3
>>
>> So I think that it is quite possible to look at using Twisted in a
>> project which is using Python asyncio.
>>
>> --
>> Craig
>>
>> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
>> twotonespirit at gmail.com> wrote:
>>
>>> Hey friends.
>>>
>>> I'm in a position that is probably increasingly common.  I'm working on
>>> a project that has a dependency that uses asyncio (kademlia).
>>>
>>> However, I much prefer to use Twisted.
>>>
>>> What's are some best practices for this at the moment?
>>>
>>>
>
>
> --
> Justin Myles Holmes
> justinholmes.com
> thisisthebus.com
> github.com/jMyles/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/26ec965d/attachment-0002.html>

From twotonespirit at gmail.com  Sun Aug 27 13:48:20 2017
From: twotonespirit at gmail.com (Justin Myles Holmes)
Date: Sun, 27 Aug 2017 12:48:20 -0700
Subject: [Twisted-Python] Wanting to use Twisted,
	but a dependency uses asyncio
In-Reply-To: <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
 <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
Message-ID: <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>

Why are you all so awesome?  What is your nefarious intention?  Are you
trying to make other open source projects look bad or what?

Thanks so much Craig.

On Sun, Aug 27, 2017 at 12:35 PM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> You can use this class to interoperate with the Python asyncio reactor and
> Twisted:
>
>  https://twistedmatrix.com/documents/current/api/twisted.
> internet.asyncioreactor.html
>
> So you can do something like:
>
> import asyncio
> from twisted.internet import asyncioreactor, reactor
> loop = asyncio.get_event_loop()
>
> asyncioreactor.install(eventloop=loop)
> reactor.run()
>
>
> Here is a fancy example which uses Python asyncio, uvloop, and twisted.web
> combined:
>
> https://gist.github.com/ldjebran/4febf298232a6fd86871df25d4dc00dd
>
>
> --
> Craig
>
> On Sun, Aug 27, 2017 at 11:36 AM, Justin Myles Holmes <
> twotonespirit at gmail.com> wrote:
>
>> Sure, syntactically it seems pretty close to gravy.
>>
>> But I'm wondering about flow control: if a project like kademlia is using
>> the ayncio event loop, is it still practical to use twisted?
>>
>> On Sun, Aug 27, 2017 at 11:35 AM, Craig Rodrigues <rodrigc at crodrigues.org
>> > wrote:
>>
>>> Twisted 17.5.0 has new code to interoperate between Python's asyncio and
>>> "async def":
>>>
>>> https://twistedmatrix.com/documents/current/core/howto/defer
>>> -intro.html#coroutines-with-async-await
>>>
>>> One example of where this is used is in Klein, a web microframework
>>> built on top of Twisted:
>>>
>>> https://klein.readthedocs.io/en/latest/examples/await.html
>>>
>>>
>>> Also, over 93% of Twisted's tests pass on Python 3:
>>>
>>> https://www.slideshare.net/CraigRodrigues1/the-onward-journe
>>> y-porting-twisted-to-python-3
>>>
>>> So I think that it is quite possible to look at using Twisted in a
>>> project which is using Python asyncio.
>>>
>>> --
>>> Craig
>>>
>>> On Sun, Aug 27, 2017 at 11:06 AM, Justin Myles Holmes <
>>> twotonespirit at gmail.com> wrote:
>>>
>>>> Hey friends.
>>>>
>>>> I'm in a position that is probably increasingly common.  I'm working on
>>>> a project that has a dependency that uses asyncio (kademlia).
>>>>
>>>> However, I much prefer to use Twisted.
>>>>
>>>> What's are some best practices for this at the moment?
>>>>
>>>>
>>
>>
>> --
>> Justin Myles Holmes
>> justinholmes.com
>> thisisthebus.com
>> github.com/jMyles/
>>
>
>


-- 
Justin Myles Holmes
justinholmes.com
thisisthebus.com
github.com/jMyles/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170827/24a9e93c/attachment-0002.html>

From hs at ox.cx  Mon Aug 28 00:04:59 2017
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 28 Aug 2017 08:04:59 +0200
Subject: [Twisted-Python] Wanting to use Twisted,
 but a dependency uses asyncio
In-Reply-To: <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>
References: <CAMGywB6_OnFb-T_oo=sJexf3QpYukY2LxnJrPb-cONQPah_PuA@mail.gmail.com>
 <CAG=rPVckLTEagQ9sJtZy5B1PfU9-ETEPSw=H1vjU+gjxw5hXfA@mail.gmail.com>
 <CAMGywB7ydcu-+YjC_sXMN1gbgzjr-v4s_T6wRhebxiTK3nu9zQ@mail.gmail.com>
 <CAG=rPVdaGX_R15sWkigAprDx=3_USkLuvkryyeRySff5x2Fw1A@mail.gmail.com>
 <CAMGywB4efK3GTThoAWQQx7h6i9zm_94QPwvbur5WuZwzmEtdbg@mail.gmail.com>
Message-ID: <B3B4EA54-B37E-4A80-B747-0BBEA04C7E8F@ox.cx>


> What is your nefarious intention?

http://twistedmatrix.com/trac/ticket/5000 <http://twistedmatrix.com/trac/ticket/5000> duh

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170828/b9f45098/attachment-0002.html>

From cory at lukasa.co.uk  Mon Aug 28 01:02:47 2017
From: cory at lukasa.co.uk (Cory Benfield)
Date: Mon, 28 Aug 2017 08:02:47 +0100
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
 <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
Message-ID: <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>



> On 27 Aug 2017, at 09:44, Thomas Hartwich <ceeborraa at gmx.de> wrote:
> 
> =
>> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?
> 
> I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

You cannot, at least not using public APIs. This was a suggestion of an update to Twisted, not something you should be doing from your own code.

Cory



From ceeborraa at gmx.de  Mon Aug 28 02:04:42 2017
From: ceeborraa at gmx.de (Thomas Hartwich)
Date: Mon, 28 Aug 2017 10:04:42 +0200
Subject: [Twisted-Python] SSLContext not valid for TLS Server
In-Reply-To: <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>
References: <bc54bba4-afea-dd33-850d-d26bef911034@gmx.de>
 <trinity-c9078d03-40a8-4298-8b9d-744772f6b778-1503246631367@3c-app-gmx-bs47>
 <C8776893-8F01-485F-8CC6-9BFB24492ABD@twistedmatrix.com>
 <trinity-a6ce4b1b-31c8-4611-8e0e-391673d8423c-1503418604947@3c-app-gmx-bs75>
 <B9B0B5CD-CB50-45C0-8EEA-4A488CFBD542@twistedmatrix.com>
 <trinity-a30fd728-e2bd-44bc-bc3f-ba168e55dc34-1503603618836@3c-app-gmx-bs72>
 <EEAC0770-F47F-4FC9-BA73-19D8131A9271@lukasa.co.uk>
 <trinity-cc9f30de-b6ed-44f4-8993-b64c328379e1-1503823466848@3c-app-gmx-bs07>
 <AEC3F93A-34E9-4266-BA80-9153943B5FF7@lukasa.co.uk>
Message-ID: <trinity-87d98a95-2399-4c93-a954-6895639de617-1503907482507@3c-app-gmx-bs32>


Ok thank you! I gonna use the old version with DefaultOpenSSLContextFactory as long as Twisted hasn't been updated.

Thomas
 

Gesendet: Montag, 28. August 2017 um 09:02 Uhr
Von: "Cory Benfield" <cory at lukasa.co.uk>
An: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Betreff: Re: [Twisted-Python] SSLContext not valid for TLS Server

> On 27 Aug 2017, at 09:44, Thomas Hartwich <ceeborraa at gmx.de> wrote:
>
> =
>> The most comprehensive fix here is to do some history spelunking in PyOpenSSL to find out what the lowest version is that has this code block[1] in it, and then only execute the current ecCurve logic if that code block doesn’t appear to have worked.
> I don't really get what implies this to me and how I can come around with this issue. What do you mean with "only execute the current ecCurve logic..."? How can this be done?
>
> I have the current versions of Twisted and pyOpenSSL running, so how can I make sure that the latter loads the right curve properly?

You cannot, at least not using public APIs. This was a suggestion of an update to Twisted, not something you should be doing from your own code.

Cory

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From rodrigc at crodrigues.org  Mon Aug 28 17:09:01 2017
From: rodrigc at crodrigues.org (Craig Rodrigues)
Date: Mon, 28 Aug 2017 16:09:01 -0700
Subject: [Twisted-Python] Appveyor build problems
In-Reply-To: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>
References: <CAG=rPVfv+2qPfXtFfmiL4ifcwEg0HJ65dpH_LExwHbPRkS-FBQ@mail.gmail.com>
Message-ID: <CAG=rPVdDXv6-swe_rSxhLfF4W2NCjEgRdbx6DKK+Najcg4mdNw@mail.gmail.com>

Looks like Appveyor had a problem with their datacenter which they solved
on Aug. 28, 2017:

https://appveyor.statuspage.io/

We'll keep an eye on things to see if this is still a problem for the
Twisted Appveyor builds.
--
Craig



On Sat, Aug 19, 2017 at 7:18 AM, Craig Rodrigues <rodrigc at crodrigues.org>
wrote:

> Hi,
>
> A few of the Appveyor builds have been failing
> intermittently due to networking problems
> at Appveyor.  This was due to Appveyor moving
> to a new datacenter:
>
> http://help.appveyor.com/discussions/problems/7409-
> chocolatey-timeout-when-installing-openssh
>
> Things seem OK now, but if there are problems we
> can let Appveyor know.
>
> --
> Craig
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170828/fcd53d19/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Aug 30 06:05:48 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 08:05:48 -0400
Subject: [Twisted-Python] Twisted 17.5 vs txkube
Message-ID: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>

Hello,

Sadly the txkube test suite is still pretty busted against Twisted 17.5.
It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
these are exactly the same problems or not but they look somewhat related.

https://travis-ci.org/LeastAuthority/txkube/builds/269920984

If anyone feels like getting to the bottom of this, I'd appreciate it.

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/01af800c/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Aug 30 06:09:01 2017
From: hawkowl at atleastfornow.net (Amber Hawkie Brown)
Date: Wed, 30 Aug 2017 22:09:01 +1000
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
Message-ID: <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>


> On 30 Aug 2017, at 22:05, Jean-Paul Calderone <exarkun at twistedmatrix.com> wrote:
> 
> Hello,
> 
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.  It was broken for a long time with Twisted 17.1 as well.  I'm not sure if these are exactly the same problems or not but they look somewhat related.
> 
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984 <https://travis-ci.org/LeastAuthority/txkube/builds/269920984>
> 
> If anyone feels like getting to the bottom of this, I'd appreciate it.
> 
> Jean-Paul

I took a stab at some fixes a while ago in https://github.com/LeastAuthority/txkube/pull/135 <https://github.com/LeastAuthority/txkube/pull/135> -- some using private APIs, if I remember, sadly -- but I don't have the time at the moment to get it in a mergable state. But it might be a good start for others.

- Amber
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/e074b67c/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP
URL: </pipermail/twisted-python/attachments/20170830/e074b67c/attachment-0002.sig>

From exarkun at twistedmatrix.com  Wed Aug 30 06:19:16 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 08:19:16 -0400
Subject: [Twisted-Python] Twisted 17.5 vs txkube
In-Reply-To: <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>
References: <CAEeXt4OXoSUzEmXU-TGrD=iqTuy7goKqp2J2b8vPJi1Mamc4Aw@mail.gmail.com>
 <DBBFF567-11F4-45C6-84B3-4C239C994A17@atleastfornow.net>
Message-ID: <CAEeXt4OTppq=t7NSvqKCNQT0DO3-taH+-MA7KWrb=b15h3VhXQ@mail.gmail.com>

I hope that won't discourage anyone else from taking a look.

On Wed, Aug 30, 2017 at 8:09 AM, Amber Hawkie Brown <
hawkowl at atleastfornow.net> wrote:

>
> On 30 Aug 2017, at 22:05, Jean-Paul Calderone <exarkun at twistedmatrix.com>
> wrote:
>
> Hello,
>
> Sadly the txkube test suite is still pretty busted against Twisted 17.5.
> It was broken for a long time with Twisted 17.1 as well.  I'm not sure if
> these are exactly the same problems or not but they look somewhat related.
>
> https://travis-ci.org/LeastAuthority/txkube/builds/269920984
>
> If anyone feels like getting to the bottom of this, I'd appreciate it.
>
> Jean-Paul
>
>
> I took a stab at some fixes a while ago in https://github.com/
> LeastAuthority/txkube/pull/135 -- some using private APIs, if I remember,
> sadly -- but I don't have the time at the moment to get it in a mergable
> state. But it might be a good start for others.
>
> - Amber
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/b6a11818/attachment-0002.html>

From chris.norman2 at googlemail.com  Wed Aug 30 09:36:40 2017
From: chris.norman2 at googlemail.com (Chris Norman)
Date: Wed, 30 Aug 2017 16:36:40 +0100
Subject: [Twisted-Python] Forcing Twisted / Klein to use HTTPS
Message-ID: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>

Hi all,

I'm trying to force Klein to use HTTPS, and so far I have a custom error 
handler which redirects the user to the HTTPs version of the page via a 
check_secure function which takes the request object and raises the 
right error if request.isSecure() is False.


Is there a better global way to enforce HTTPS with any part of Klein or 
Twisted?


Cheers,


Chris



From exarkun at twistedmatrix.com  Wed Aug 30 09:42:30 2017
From: exarkun at twistedmatrix.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2017 11:42:30 -0400
Subject: [Twisted-Python] Forcing Twisted / Klein to use HTTPS
In-Reply-To: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>
References: <592718a7-5ac0-3f8e-cf5f-8bd988867d21@googlemail.com>
Message-ID: <CAEeXt4MXHv8sK+MZVd0+Q9UcTvLcxoDNZYnJKVqpi-j_b=JXCQ@mail.gmail.com>

On Wed, Aug 30, 2017 at 11:36 AM, Chris Norman <chris.norman2 at googlemail.com
> wrote:

> Hi all,
>
> I'm trying to force Klein to use HTTPS, and so far I have a custom error
> handler which redirects the user to the HTTPs version of the page via a
> check_secure function which takes the request object and raises the right
> error if request.isSecure() is False.
>
>
> Is there a better global way to enforce HTTPS with any part of Klein or
> Twisted?
>
>
The way I do this is to make one Site that listens on HTTP and does nothing
except redirect to HTTPS.  The real site only listens on HTTPS.


>
> Cheers,
>
>
> Chris
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20170830/038b0ac7/attachment-0002.html>

