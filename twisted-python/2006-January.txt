From phil at bubblehouse.org  Sun Jan  1 18:29:54 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 01 Jan 2006 18:29:54 -0500
Subject: [Twisted-Python] ssh manhole
Message-ID: <D81390FC-6DB8-4388-BFC1-B2447620CDC6@bubblehouse.org>

folks-

so, i've read over a number of threads in the archives, and the docs  
on tm.com, and i think i'm missing a few pieces of info, so i'd  
appreciate any help.

for the moment i have a multiservice application that i've added a  
telnet manhole interface to. however, due to the deprecation of the  
twisted.manhole.telnet module, and my disinterest in sending  
passwords in plaintext, i'd like to update this to use ssl.

this much i know how to do, but then i would assume the only way to  
connect to this interface would be with the openssl binary (i think  
i've done this before), as it would still be using the manhole- 
specific login system.

what i'd really like is to be able to use a regular ssh client to  
connect, ideally by implementing a Portal on the back end to  
authenticate users against an existing database. if it could use that  
nifty manhole syntax coloring, so much the better.

is this actually possible? i have to admit i have a great deal of  
ignorance about the difference between a terminal connection through  
openssl and an actual ssh login, and I've never gotten my feet wet  
with conch before.

i guess what i'm asking is what modules should i look at, and what  
classes should i expect to have to implement to make this happen? (of  
course, providing it is actually possible to do this)...

i know there's the PB interface into manhole that could be easily  
encrypted, but i am enthusiastic about using this kind of feature on  
several projects, and i'd like to end up with something that's easily  
plugged into "any" server...

thanks in advance,

-phil



From exarkun at divmod.com  Sun Jan  1 19:12:42 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 1 Jan 2006 19:12:42 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <D81390FC-6DB8-4388-BFC1-B2447620CDC6@bubblehouse.org>
Message-ID: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>

On Sun, 01 Jan 2006 18:29:54 -0500, Phil Christensen <phil at bubblehouse.org> wrote:
>folks-
>
>so, i've read over a number of threads in the archives, and the docs  on 
>tm.com, and i think i'm missing a few pieces of info, so i'd  appreciate any 
>help.
>
>for the moment i have a multiservice application that i've added a  telnet 
>manhole interface to. however, due to the deprecation of the 
>twisted.manhole.telnet module, and my disinterest in sending  passwords in 
>plaintext, i'd like to update this to use ssl.
>
>this much i know how to do, but then i would assume the only way to  connect 
>to this interface would be with the openssl binary (i think  i've done this 
>before), as it would still be using the manhole- specific login system.
>
>what i'd really like is to be able to use a regular ssh client to  connect, 
>ideally by implementing a Portal on the back end to  authenticate users 
>against an existing database. if it could use that  nifty manhole syntax 
>coloring, so much the better.
>
>is this actually possible? i have to admit i have a great deal of  ignorance 
>about the difference between a terminal connection through  openssl and an 
>actual ssh login, and I've never gotten my feet wet  with conch before.
>
>i guess what i'm asking is what modules should i look at, and what  classes 
>should i expect to have to implement to make this happen? (of  course, 
>providing it is actually possible to do this)...
>
>i know there's the PB interface into manhole that could be easily 
>encrypted, but i am enthusiastic about using this kind of feature on 
>several projects, and i'd like to end up with something that's easily 
>plugged into "any" server...
>
>thanks in advance,

I'm confused.  Do you want an SSL server or an SSH server?

Jean-Paul



From phil at bubblehouse.org  Sun Jan  1 19:55:04 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 01 Jan 2006 19:55:04 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>
References: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>
Message-ID: <60992D50-484C-4D83-B37B-C606495A6F54@bubblehouse.org>

On Jan 1, 2006, at 7:12 PM, Jean-Paul Calderone wrote:

> On Sun, 01 Jan 2006 18:29:54 -0500, Phil Christensen  
> <phil at bubblehouse.org> wrote:
>
>> folks-
[snip snip snip]
>> i guess what i'm asking is what modules should i look at, and  
>> what  classes should i expect to have to implement to make this  
>> happen? (of  course, providing it is actually possible to do this)...
>>
>> i know there's the PB interface into manhole that could be easily  
>> encrypted, but i am enthusiastic about using this kind of feature  
>> on several projects, and i'd like to end up with something that's  
>> easily plugged into "any" server...
>>
>> thanks in advance,
>>
>
> I'm confused.  Do you want an SSL server or an SSH server?
>
> Jean-Paul

i would like an ssh server, so that i can ssh into manhole from a  
regular terminal, essentially so that i can use the ssh interactive  
password prompts to authenticate against some arbitrary backend.

-phil



From exarkun at divmod.com  Sun Jan  1 21:40:13 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 1 Jan 2006 21:40:13 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <60992D50-484C-4D83-B37B-C606495A6F54@bubblehouse.org>
Message-ID: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>

On Sun, 01 Jan 2006 19:55:04 -0500, Phil Christensen <phil at bubblehouse.org> wrote:
>On Jan 1, 2006, at 7:12 PM, Jean-Paul Calderone wrote:
> [snip]
>>
>>I'm confused.  Do you want an SSL server or an SSH server?
>>
>>Jean-Paul
>
>i would like an ssh server, so that i can ssh into manhole from a  regular 
>terminal, essentially so that i can use the ssh interactive  password 
>prompts to authenticate against some arbitrary backend.

Okay.  You just need to implement a checker for IUsernamePassword, then.  Add this to a portal wrapped around a realm that knows about IConchUsers and you should be set, as far as authentication goes.

Take a look at twisted/conch/manhole_ssh.py for an idea of what needs to happen to hook manhole up to a conch server.

Jean-Paul



From jml at mumak.net  Sun Jan  1 22:48:05 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 2 Jan 2006 14:48:05 +1100
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>
References: <43B45572.9020405@gmail.com>
	<d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
	<271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>
Message-ID: <d06a5cd30601011948v18a53e54ued7bce80c566a24f@mail.gmail.com>

On 1/1/06, James Y Knight <foom at fuhm.net> wrote:
>
> On Dec 31, 2005, at 5:16 AM, Jonathan Lange wrote:
>
> > On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
> >
> >> I'm not sure if Conch is the only project that did this, but it
> >> used the
> >> trial.unittest.* functions instead of methods on TestCases.  I
> >> used them
> >> to avoid having to pass TestCase instances around all over the
> >> places,
> >> or using a global variable.  To avoid the depreciation warnings, I've
> >> starting using the unittest._inst global variable, but I doubt
> >> that this
> >> is the appropriate way to change my code.  Is this just not a
> >> supported
> >> way of using Trial, or is there something else I should be doing?
> >>
> >>
> >
> > This is just not a supported way of using Trial.
>
> Given that the methods don't use self at all (and at least I can't
> forsee any need to in the future), is there a reason they can't be
> class methods, so that unittest.TestCase.assertEquals(a, b) would work?
>

I'm not sure that there is a good reason for doing so.  From what I
can gather, the assertions in the conch tests are part of extensions
to conch's application code.  I think that this a Bad Thing.

If Trial's assertions remain instance methods only, then the natural
way of using Trial will be to put assertions in the actual test_
methods.  I think that this is a Good Thing[1].

cheers,
jml

[1]. I think that to do otherwise is to dilute the meaning of the
phrase 'unit test'.



From phil at bubblehouse.org  Mon Jan  2 00:54:16 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 02 Jan 2006 00:54:16 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>
References: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>
Message-ID: <A816CD92-98CB-4255-B7D7-83A41CD009D6@bubblehouse.org>

On Jan 1, 2006, at 9:40 PM, Jean-Paul Calderone wrote:

> Okay.  You just need to implement a checker for IUsernamePassword,  
> then.  Add this to a portal wrapped around a realm that knows about  
> IConchUsers and you should be set, as far as authentication goes.
>
> Take a look at twisted/conch/manhole_ssh.py for an idea of what  
> needs to happen to hook manhole up to a conch server.

that was amazingly easy...not that i should be surprised. however,  
i'm running into one little snafu. my realm creates a TerminalUser  
instance like this:

     def _getSSHAvatar(self, avatarId):
         comp = components.Componentized()
         user = manhole_ssh.TerminalUser(comp, avatarId)
         sess = manhole_ssh.TerminalSession(comp)

         sess.transportFactory = manhole_ssh.TerminalSessionTransport
         sess.chainedProtocolFactory = insults.ServerProtocol

         comp.setComponent(conch_interfaces.IConchUser, user)
         comp.setComponent(conch_interfaces.ISession, sess)

         return user

and returns it from requestAvatar with:

         return conch_interfaces.IConchUser, self._getSSHAvatar 
(avatarId), lambda: None

however, shortly thereafter i an exception, attached below. also, i  
did find this comment in manhole_ssh.TerminalSessionTransport that i  
was a bit confused by:

         # XXX TODO
         # chainedProtocol is supposed to be an ITerminalTransport,
         # maybe.  That means perhaps its terminalProtocol attribute is
         # an ITerminalProtocol, it could be.  So calling terminalSize
         # on that should do the right thing But it'd be nice to clean
         # this bit up.
         self.chainedProtocol.terminalProtocol.terminalSize(width,  
height)

I am running the latest svn-trunk as of this email. Any help would be  
appreciated.

-phil

00:41 EST [SSHServerTransport,0,127.0.0.1] kex alg, key alg: diffie- 
hellman-group1-sha1 ssh-rsa
00:41 EST [SSHServerTransport,0,127.0.0.1] server->client: aes128-cbc  
hmac-md5 none
00:41 EST [SSHServerTransport,0,127.0.0.1] client->server: aes128-cbc  
hmac-md5 none
00:41 EST [SSHServerTransport,0,127.0.0.1] starting service ssh-userauth
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard trying auth none
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard trying auth password
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard authenticated with password
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
starting service ssh-connection
00:41 EST [SSHService ssh-connection on SSHServerTransport, 
0,127.0.0.1] got channel session request
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] channel open
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] pty request: ansi (48L, 80L, 480L, 672L)
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] getting shell
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] Traceback (most recent call last):
    File "/[python home snipped]/twisted/python/log.py", line 38, in  
callWithContext
      return context.call({ILogContext: newCtx}, func, *args, **kw)
    File "/[python home snipped]/twisted/python/context.py", line 59,  
in callWithContext
      return self.currentContext().callWithContext(ctx, func, *args,  
**kw)
    File "/[python home snipped]/twisted/python/context.py", line 37,  
in callWithContext
      return func(*args,**kw)
    File "/[python home snipped]/twisted/conch/ssh/channel.py", line  
97, in requestReceived
      return f(data)
--- <exception caught here> ---
    File "/[python home snipped]/twisted/conch/ssh/session.py", line  
52, in request_shell
      self.session.openShell(pp)
    File "/[python home snipped]/twisted/conch/manhole_ssh.py", line  
75, in openShell
      self.width, self.height)
    File "/[python home snipped]/twisted/conch/manhole_ssh.py", line  
60, in __init__
      self.chainedProtocol.terminalProtocol.terminalSize(width, height)
exceptions.AttributeError: 'NoneType' object has no attribute  
'terminalSize'




From tv at twistedmatrix.com  Mon Jan  2 04:19:45 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 02 Jan 2006 11:19:45 +0200
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows
	by	changing the eventual-send operation to
In-Reply-To: <0b6701c60e4a$35c01f70$6402a8c0@dcore>
References: <20051231.105721.17570930.warner@lothar.com>
	<0b6701c60e4a$35c01f70$6402a8c0@dcore>
Message-ID: <43B8F031.4090604@twistedmatrix.com>

Paul G wrote:
> full ordering/sorting hit on inserts. if you think a little harder, this
> can be made fairly efficient with a sparse circular list of event
> buckets, with each bucket being a fifo queue of events to be fired at
> that time. whether it's worth bothering with the additional complexity
> is up for discussion.

Sounds like a not-yet-polished version of what the kernel does.

http://lwn.net/Articles/156329/

(note I'm not really convinced twisted should implement a similar thing,
atleast right now)



From paul-lists at perforge.com  Mon Jan  2 08:37:49 2006
From: paul-lists at perforge.com (Paul G)
Date: Mon, 2 Jan 2006 08:37:49 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under
	windowsby	changing the eventual-send operation to
References: <20051231.105721.17570930.warner@lothar.com><0b6701c60e4a$35c01f70$6402a8c0@dcore>
	<43B8F031.4090604@twistedmatrix.com>
Message-ID: <0d8901c60fa1$bb111cd0$6402a8c0@dcore>


----- Original Message ----- 
From: "Tommi Virtanen" <tv at twistedmatrix.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Monday, January 02, 2006 4:19 AM
Subject: Re: [Twisted-Python] Re: r15451 - Fix test failures under windowsby 
changing the eventual-send operation to


> Paul G wrote:
>> full ordering/sorting hit on inserts. if you think a little harder, this
>> can be made fairly efficient with a sparse circular list of event
>> buckets, with each bucket being a fifo queue of events to be fired at
>> that time. whether it's worth bothering with the additional complexity
>> is up for discussion.
>
> Sounds like a not-yet-polished version of what the kernel does.
>
> http://lwn.net/Articles/156329/
>
> (note I'm not really convinced twisted should implement a similar thing,
> atleast right now)

yep, the kernel implementation is another (similar) way to skin the same 
cat. please note that the kenel implementation makes a certain tradeoff 
because: 1) it expects most timers to be deleted before expiring 2) it has a 
bounded jiffies range. in the context of twisted, i'd rather take the hits 
piecemeal on inserts/deletes with a sparse circular array rather than all at 
once as with their logarithmic bucket scheme. i have some of this 
implemented in some scheduling code i wrote a while back, but it'd need some 
massaging. if there's any interest, i may produce a patch, but i don't want 
to do the work if it's not gonna get accepted (i'm lazy ;).

with that said, the specific issue warner is having could be fixed at the 
source if the current implementation is deemed sufficient. this can be 
accomplished by finding a better time source to use under windows and/or 
implementing a crude version of lagrange timestamps to use as indices.

-p 




From foom at fuhm.net  Wed Jan  4 01:00:12 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 04 Jan 2006 00:00:12 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1Eu1gy-0005XG-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-28 06:00:02.200000:
 Bugs opened: 20   Bugs closed: 8   Total open bugs: 518 (+12)
  Urgent: 8 (+7)
  Bug: 244 (+3)
  Feature: 181 (+1)
  Wish: 85 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE, TRIAL] trial -u fills working directory with old _trial_temp directories  (2 days ago)
       http://twistedmatrix.com/bugs/issue1393 opened by exarkun

[TESTS, WEB2] Intermitent failure in web2 unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1391 opened by exarkun

[newpb] implement a correct eventually(), use callLater rather than callFromThread  (yesterday)
       http://twistedmatrix.com/bugs/issue1398 opened by glyph

[TRIAL, WIN32] Trial bombs on Wndows when attempting to move/delete temp directories  (3 days ago)
       http://twistedmatrix.com/bugs/issue1387 opened by moof

[TRIAL] trial no longer supports multiple test-case-name targets  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1388 opened by warner

[CORE, TESTS] Intermitent failure in tcp unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1392 opened by exarkun

[CORE, PB] Stray print statement in twisted.pb.remoteinterface.RemoteInterfaceClass.__init__  (2 days ago)
       http://twistedmatrix.com/bugs/issue1394 opened by exarkun

[CORE, PB] Intermitent failure in newpb unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1390 opened by exarkun

                    ==== Bug ====
[DOCUMENTATION, PB] Difference between twisted.spread.jelly and twisted.spread.newjelly undocumented  (11 hours ago)
       http://twistedmatrix.com/bugs/issue1401 opened by moof

[DOCUMENTATION, TRIAL] unittest special attributes not well documented  (yesterday)
       http://twistedmatrix.com/bugs/issue1400 opened by ml.flex

[TRIAL] log.err() and raising an exception cause double-counted [ERROR]  (4 days ago)
       http://twistedmatrix.com/bugs/issue1384 opened by warner

[CORE] cannot exit script before activating reactor if using threadpool  (4 days ago)
       http://twistedmatrix.com/bugs/issue1385 opened by antony

[WEB] test_distrib sets DelayedCall.debug=True and doesn't set it back  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1383 opened by warner

[TRIAL] Trial reports SUCCESS!?! and ERROR for the same test  (2 days ago)
       http://twistedmatrix.com/bugs/issue1397 opened by jknight

[TRIAL] trial.util._Janitor.do_cleanPending causes spinWhile warning to be emitted.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1395 opened by jknight

[CORE, TRIAL] trial's warning suppression code is misfactored  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1389 opened by exarkun

[TESTS, TRIAL] test_paths failing because 'plus' mode is insane on windows  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1386 opened by moonfallen

[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
CLOSED http://twistedmatrix.com/bugs/issue1186 opened by exarkun

                    ==== Feature ====
log.msg('why I failed'); log.err(failureObj); idiom is really stupid, should be replaced  (yesterday)
       http://twistedmatrix.com/bugs/issue1399 opened by glyph

                    ==== Wish ====
[CORE] callLater(0) does not guarantee relative ordering of calls  (2 days ago)
       http://twistedmatrix.com/bugs/issue1396 opened by jknight

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] trial no longer supports multiple test-case-name targets  (3 days ago)
       http://twistedmatrix.com/bugs/issue1388 opened by warner, closed by jml

                    ==== Bug ====
[NEWS, TESTS] twisted.news.test.test_news calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1187 opened by exarkun, closed by exarkun

[WEB] test_distrib sets DelayedCall.debug=True and doesn't set it back  (4 days ago)
       http://twistedmatrix.com/bugs/issue1383 opened by warner, closed by exarkun

[CORE, TRIAL] If setUp returns an unfired Deferred, test methods cannot use wait()  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1367 opened by exarkun, closed by jml

[CORE, TRIAL] trial's warning suppression code is misfactored  (3 days ago)
       http://twistedmatrix.com/bugs/issue1389 opened by exarkun, closed by exarkun

[TESTS, TRIAL] test_paths failing because 'plus' mode is insane on windows  (3 days ago)
       http://twistedmatrix.com/bugs/issue1386 opened by moonfallen, closed by exarkun

[CORE, WIN32] strange behaviours when writing large amount of data on stdout  (2 months ago)
       http://twistedmatrix.com/bugs/issue1305 opened by manlio, closed by justinj

[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun, closed by jknight




From itamar at itamarst.org  Wed Jan  4 10:34:47 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 Jan 2006 10:34:47 -0500
Subject: [Twisted-Python] Securing a custom protocol
In-Reply-To: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
References: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
Message-ID: <1136388887.12591.2.camel@localhost.localdomain>

On Tue, 2005-12-27 at 09:36 -0800, Brian Granger wrote:
> Hi,
> 
> I have written a custom line based protocol using twisted.  I need to  
> add authentication and encryption to my protocol and I am wondering  
> what the best route is.  Here are some options that I see:
> 
> 1.  Use SSL for encryption and cred for user authentication
> 
> 2.  Use SSH through conch
> 
> As I understand it, both of these approaches can do authentication  
> and encryption of any protocol.  What are the advantages and  
> disadvantages or each?  Which is more robust and supported in  
> twisted?  Are there other approaches in twisted that I am missing?

Stick to SSL (or really TLS, improved SSL). It gives you better
interoperability (since you can support TLS more easily in other
implementations), is easier to setup (just connectSSL or listenSSL), and
it's what TLS was designed for.

Authentication is a whole 'nother topic; you can use SSL certificates,
or pass usernames/passwords in the protocol (look up the SRP
authentication protocol for that if you intend to support non-encrypted
connections). Cred just gives you twisted-side infrastructure, it
doesn't have protocol-level support.




From TimothyFitz at gmail.com  Fri Jan  6 12:47:54 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Fri, 6 Jan 2006 12:47:54 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
Message-ID: <972ec5bd0601060947u4fbc46e1pe5a64108882e6f84@mail.gmail.com>

On 12/26/05, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 26 Dec 2005 17:07:35 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> >I'd also like to know how other languages like ruby and java behave in
> >terms of self-references of objects. Can't the language understand it's
> >a self reference, and in turn it's the same as an integer or a string,
> >like it already does when the member is initialized statically?
>
> I don't know Ruby well enough to comment directly, but I believe Ruby's
> GC is much simpler (and less capable) than Python's.  Java doesn't have
> bound methods (or unbound methods, or heck, functions): the obvious way
> in which you would construct them on top of the primitives the language
> does offer seems to me as though it would introduce the same "problem"
> you are seeing in Python, but that may just be due to the influence
> Python has had on my thinking.

(A little late jumping into this discussion) C# (and the CLR in
genral), being the better Java that it is, has dynamic functions in
the form of delegates, which can be "bound methods" in the sense that
Python has them. In addition, it has destructors which are very
similar to python's __del__. The CLR's garbage collector will collect
cycles with destructors, unlike Python. This means that destructors in
C# don't always have access to all of their members (some may
"mysteriously" be null, and no order is guaranteed so it will appear
random) because they've already been collected. To complexify the
matter even more, the CLR's garbage collector may (and in windows
does) run in a seperate thread, making safe robust CLR deconstructors
a fine art.



From exarkun at divmod.com  Fri Jan  6 22:14:48 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Jan 2006 22:14:48 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15537 - PROPFIND works now
In-Reply-To: <E1Euwnk-0006gZ-00@wolfwood>
Message-ID: <20060107031448.1217.744280671.divmod.quotient.10531@ohm>

On Fri, 06 Jan 2006 11:59:00 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Fri Jan  6 11:59:00 2006
>New Revision: 15537
>
>Modified:
>   trunk/twisted/web2/dav/test/test_prop.py
>Log:
>PROPFIND works now

The test for it fails consistently on the OS X slave, though.  I've 
set this test as todo again.

Here's the current failure:

Failure: twisted.trial.unittest.FailTest: Incorrect content-type for PROPFIND response (MimeType('text', 'xml', {}) not in (MimeType('text', 'xml', {}), MimeType('application', 'xml', {})))

Jean-Paul



From dkarbott at comcast.net  Sat Jan  7 11:37:27 2006
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Sat, 07 Jan 2006 16:37:27 +0000
Subject: [Twisted-Python] SSL client authentication example
Message-ID: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>

I modified the echoserv_ssl.py / echoclient_ssl.py examples to do client authtentication while I was trying to learn about using SSL with twisted.

My code is in the attached .tgz.

It uses self-signed certificates so it doesn't depend on (or require) a CA.

I hope that someone else might find it useful.  The  documentation that I was able to google seems kind of sparse.

I'm admittedly neither a crypto expert nor very experienced with OpenSSL, so if you find bugs let me know.

-- Darrell



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/x-tar
Size: 3194 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060107/baea85bf/attachment.tar 

From bgranger at scu.edu  Sat Jan  7 13:02:46 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 10:02:46 -0800
Subject: [Twisted-Python] Securing a custom protocol
In-Reply-To: <1136388887.12591.2.camel@localhost.localdomain>
References: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
	<1136388887.12591.2.camel@localhost.localdomain>
Message-ID: <DE6F2D88-06EB-40E3-9F5F-359C3DCC0044@scu.edu>


On Jan 4, 2006, at 7:34 AM, Itamar Shtull-Trauring wrote:

> On Tue, 2005-12-27 at 09:36 -0800, Brian Granger wrote:
>> Hi,
>>
>> I have written a custom line based protocol using twisted.  I need to
>> add authentication and encryption to my protocol and I am wondering
>> what the best route is.  Here are some options that I see:
>>
>> 1.  Use SSL for encryption and cred for user authentication
>>
>> 2.  Use SSH through conch
>>
>> As I understand it, both of these approaches can do authentication
>> and encryption of any protocol.  What are the advantages and
>> disadvantages or each?  Which is more robust and supported in
>> twisted?  Are there other approaches in twisted that I am missing?
>
> Stick to SSL (or really TLS, improved SSL). It gives you better
> interoperability (since you can support TLS more easily in other
> implementations), is easier to setup (just connectSSL or  
> listenSSL), and
> it's what TLS was designed for.
>
> Authentication is a whole 'nother topic; you can use SSL certificates,
> or pass usernames/passwords in the protocol (look up the SRP
> authentication protocol for that if you intend to support non- 
> encrypted
> connections). Cred just gives you twisted-side infrastructure, it
> doesn't have protocol-level support.
>

Thanks, I was hoping it was that simple.

I will definitely look into SRP for non-encrypted connections.




>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bgranger at scu.edu  Sat Jan  7 13:14:26 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 10:14:26 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
Message-ID: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>

Hi,

I am trying to integrate an external networking library that is  
asynchronous into a Twisted app (Apple's Bonjour for those  
interested).  The library is setup for use in a select loop.  The  
library is responsible for all the actual network things (like  
creating the connection, reading and writing to it.  The only thing I  
need to do is register the socket's file descriptor with the twisted  
reactor and have some callback triggered when it is _ready_ for  
reading/writing.

Digging around the source code, it looks like the FileDescriptor that  
Port inherits from would be a good starting point.  But as I  
understand it FileDescriptor is abstract.  Is it as simple as  
inheriting from FileDescriptor and providing the fd that I get from  
Bonjour?  How do I specify callbacks to trigger when the fd is  
readable/writable?

Anything I am missing in this picture.

I will gladly share my code if I get Apple's Bonjour implementation  
working with twisted.

Cheers,

Brian	



From itamar at itamarst.org  Sat Jan  7 13:46:48 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 07 Jan 2006 13:46:48 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>
References: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>
Message-ID: <1136659608.9115.1.camel@localhost.localdomain>

On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:

> Digging around the source code, it looks like the FileDescriptor that  
> Port inherits from would be a good starting point.  But as I  
> understand it FileDescriptor is abstract.  Is it as simple as  
> inheriting from FileDescriptor and providing the fd that I get from  
> Bonjour?  How do I specify callbacks to trigger when the fd is  
> readable/writable?

Yep.

You just need a fileno() method that returns the file descriptor you are
wrapping, and doRead and doWrite methods that they do the appropriate
thing (they will get called by the reactor on those events.)




From exarkun at divmod.com  Sat Jan  7 14:04:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 7 Jan 2006 14:04:09 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <1136659608.9115.1.camel@localhost.localdomain>
Message-ID: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>

On Sat, 07 Jan 2006 13:46:48 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:
>
>> Digging around the source code, it looks like the FileDescriptor that
>> Port inherits from would be a good starting point.  But as I
>> understand it FileDescriptor is abstract.  Is it as simple as
>> inheriting from FileDescriptor and providing the fd that I get from
>> Bonjour?  How do I specify callbacks to trigger when the fd is
>> readable/writable?
>
>Yep.
>
>You just need a fileno() method that returns the file descriptor you are
>wrapping, and doRead and doWrite methods that they do the appropriate
>thing (they will get called by the reactor on those events.)
>

Given the simplicity of the interface, it hardly even makes sense 
to use FileDescriptor.  What you want can be achieved using:

class BonjourThingo(object):
    def __init__(self, fd, doRead, doWrite):
        self.fileno = lambda: fd
        self.doRead = doRead
        self.doWrite = doWrite

And then adding it as a reader or a writer to a reactor which 
supports IReactorFDSet.

Jean-Paul



From Brendan at BrendanSimon.com  Sat Jan  7 21:59:12 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Sun, 08 Jan 2006 13:59:12 +1100
Subject: [Twisted-Python] Up to date Debian packages
Message-ID: <43C08000.7080805@BrendanSimon.com>

I'm running Debian Sarge (ie. stable release).  The default installation 
of python-twisted is 1.3.0-8.  I would like the latest version, 
preferable 2.1.0.

 From the twisted web pages, I was lead to believe that the following 
site has the latest Debian snapshots, release-candidates and releases, 
but the latest version I could find there was 1.2.0+1.3.0-1 (whatever 
that means).
    http://twisted.sourceforge.net/debian

I've also checked http://backports.org/ but nobody has backported the 
Sid version to Sarge.  I don't even know what the Sid version is as the 
Debian packages page is not working at the moment.

Is there an easy way to get precompiled versions of Twisted for Debian 
Sarge?

Thanks,
Brendan.




From johann.borck at densedata.com  Sun Jan  8 00:40:53 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 08 Jan 2006 06:40:53 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C08000.7080805@BrendanSimon.com>
References: <43C08000.7080805@BrendanSimon.com>
Message-ID: <43C0A5E5.2030905@densedata.com>

Brendan Simon wrote:

> I'm running Debian Sarge (ie. stable release).  The default
> installation of python-twisted is 1.3.0-8.  I would like the latest
> version, preferable 2.1.0.
>
> From the twisted web pages, I was lead to believe that the following
> site has the latest Debian snapshots, release-candidates and releases,
> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
> that means).
>    http://twisted.sourceforge.net/debian
>
> I've also checked http://backports.org/ but nobody has backported the
> Sid version to Sarge.  I don't even know what the Sid version is as
> the Debian packages page is not working at the moment.
>
> Is there an easy way to get precompiled versions of Twisted for Debian
> Sarge?

Hi, Brendan,
sorry, but this question is cute somehow - twisted is python - there's
nothing to compile  - if you need *.deb sooo much, the latest version in
unstable is 2.0.1-something, but it just can't be easier than
downloading the latest 2.1 tarball and just setting the 
PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
distutils ie. python setup.py install from the base dir should work,
another possible way is to copy the /twisted dir into the site-packages
one of your python installation manually. Please, do that, there's no
need for debs, really !! :)
Johann

>
> Thanks,
> Brendan.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From exarkun at divmod.com  Sun Jan  8 01:15:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Jan 2006 01:15:29 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C08000.7080805@BrendanSimon.com>
Message-ID: <20060108061529.1217.1631521208.divmod.quotient.10817@ohm>

On Sun, 08 Jan 2006 13:59:12 +1100, Brendan Simon <brendan at brendansimon.com> wrote:
>I'm running Debian Sarge (ie. stable release).  The default installation of 
>python-twisted is 1.3.0-8.  I would like the latest version, preferable 
>2.1.0.
>
> From the twisted web pages, I was lead to believe that the following site 
>has the latest Debian snapshots, release-candidates and releases, but the 
>latest version I could find there was 1.2.0+1.3.0-1 (whatever that means).
>    http://twisted.sourceforge.net/debian
>
>I've also checked http://backports.org/ but nobody has backported the Sid 
>version to Sarge.  I don't even know what the Sid version is as the Debian 
>packages page is not working at the moment.
>
>Is there an easy way to get precompiled versions of Twisted for Debian 
>Sarge?

There are some slightly less out of date debs here:

  http://twistedmatrix.com/users/tv/2.0-BEWARE/

I sure wish there were some actual up to date debs, or some actual up 
to date debs in the pipeline, or some plans to create some actual up 
to date debs.

Jean-Paul



From Brendan at BrendanSimon.com  Sun Jan  8 01:42:09 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Sun, 08 Jan 2006 17:42:09 +1100
Subject: [Twisted-Python] conch sshsimpleclient example and password
Message-ID: <43C0B441.1000408@BrendanSimon.com>

I'm new to Twisted and I am using 1.3.0-8 on Debian Sarge.  I'm playing 
with the sshsimpleclient in the example directory.  I changed USER to 
'brendan' and HOST to 'localhost'.  The script continually asks me for 
the password even though I have entered it correctly.

I changed the script to use id_rsa instead of id_dsa, and put my 
id_rsa.pub in my ~/.ssh/autorhized_keys file.  Now when I run the script 
I get the expected result of :
    got data from cat: 'hello conch\n'

If I comment out the key in autorized_keys file, the script just 
repeatedly asks for my password even know I know I have entered it 
correctly.

Any ideas about what I am doing wrong, or is it a bug ???

Thanks,
Brendan.




From bgranger at scu.edu  Sun Jan  8 01:46:59 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 22:46:59 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
Message-ID: <52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>

I tried this later approach, and it worked.  I need to clean up my  
code to make it more general, but there was one problem.  I am using  
the default reactor and defined a BonjourDescriptor as follows:

class BonjourDescriptor(object):
     implements(IReadDescriptor)

     def __init__(self, fd, serviceRef):
         self.fd = fd
         self.serviceRef = serviceRef

     def fileno(self):
         return self.fd

     def doRead(self):
         ret = bonjour.DNSServiceProcessResult(self.serviceRef)


When I killed the reactor, I got an exception:

exceptions.AttributeError: 'BonjourDescriptor' object has no  
attribute 'connectionLost'

It looks like the disconnectAll method on the reactor is calling  
reader.connectionLost on each reader.  Why is this so?
I thought I only needed to implement the IReadDescriptor interface  
for my reader, but the connectionLost method is not a part of that  
interface.  Hmmm.  Should I implement it?  What interface is that  
method in?  This seems confusing.

Thanks

But the good news is that It looks like with a little work, Apple's  
zeroconf implementation can be integrated with twisted.

Brian


On Jan 7, 2006, at 11:04 AM, Jean-Paul Calderone wrote:

> On Sat, 07 Jan 2006 13:46:48 -0500, Itamar Shtull-Trauring  
> <itamar at itamarst.org> wrote:
>> On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:
>>
>>> Digging around the source code, it looks like the FileDescriptor  
>>> that
>>> Port inherits from would be a good starting point.  But as I
>>> understand it FileDescriptor is abstract.  Is it as simple as
>>> inheriting from FileDescriptor and providing the fd that I get from
>>> Bonjour?  How do I specify callbacks to trigger when the fd is
>>> readable/writable?
>>
>> Yep.
>>
>> You just need a fileno() method that returns the file descriptor  
>> you are
>> wrapping, and doRead and doWrite methods that they do the appropriate
>> thing (they will get called by the reactor on those events.)
>>
>
> Given the simplicity of the interface, it hardly even makes sense  
> to use FileDescriptor.  What you want can be achieved using:
>
> class BonjourThingo(object):
>    def __init__(self, fd, doRead, doWrite):
>        self.fileno = lambda: fd
>        self.doRead = doRead
>        self.doWrite = doWrite
>
> And then adding it as a reader or a writer to a reactor which  
> supports IReactorFDSet.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From mary-twisted at puzzling.org  Sun Jan  8 05:40:14 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 8 Jan 2006 21:40:14 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
Message-ID: <20060108104014.GA12891@sourdust.home.puzzling.org>

Hi all,

A reminder to interested parties that I set the date for this to this
coming Saturday: 14th January. What follows is a reminder about what I
want to do.

I'll set up something more specific for this in a day or two. I envisage
I'll have a worklist of some kind on a wiki, and that participants will
also be chatting on #twisted as usual to resolve anything else.

-Mary

----- Forwarded message from Mary Gardiner <mary-twisted at puzzling.org> -----

I'd like to run a one day Twisted documentation sprint. Please note that
while I want and need input from both Twisted experts and Twisted
newbies, I won't have much tolerance for general whining about the state
of Twisted documentation. (Not that I've ever exhibited much tolerance
of this kind.) We need highly specific whining!

This sprint will hopefully be the first in a series, and it will be
focussed on *reading* the documentation, rather than writing it. We
would therefore especially welcome the input of people who are either
users of the documentation, or want the documentation improved but don't
want to write it.

We will focus on reviewing present documentation against the following
criteria:

 - does it reflect best practices for Twisted coders?
 - is it up-to-date?
 - is it complete?

For people who are newer to Twisted, reviews on the general useability
of any particular piece of Twisted documentation as per my post at
http://twistedmatrix.com/pipermail/twisted-python/2005-May/010386.html

----- End forwarded message -----

-- 
<dash> your RDF is massive and unstoppable.  [to glyph -ed]



From walkah at walkah.net  Sun Jan  8 10:08:39 2006
From: walkah at walkah.net (James Walker)
Date: Sun, 08 Jan 2006 10:08:39 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C0A5E5.2030905@densedata.com>
References: <43C08000.7080805@BrendanSimon.com>
	<43C0A5E5.2030905@densedata.com>
Message-ID: <43C12AF7.9090201@walkah.net>

On 1/8/06 12:40 AM, Johann Borck wrote:
> Brendan Simon wrote:
> 
>> I'm running Debian Sarge (ie. stable release).  The default
>> installation of python-twisted is 1.3.0-8.  I would like the latest
>> version, preferable 2.1.0.
>>
>> From the twisted web pages, I was lead to believe that the following
>> site has the latest Debian snapshots, release-candidates and releases,
>> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
>> that means).
>>    http://twisted.sourceforge.net/debian
>>
>> I've also checked http://backports.org/ but nobody has backported the
>> Sid version to Sarge.  I don't even know what the Sid version is as
>> the Debian packages page is not working at the moment.
>>
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
> 
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)

I'm new here, and don't want to offend anybody .. but I too use debian 
stable on my servers and would like to see some up to date debs for 
twisted. Having .debs is not about ease of installation. Yes, twisted 
(and most python apps) are dead easy to install. The point of having 
debs is about maintenance. If twisted (or any other application / 
library you use) is not using your package management system, then the 
onus is on you to check that vendor for updates and installing them by 
hand. If you've ever tried to maintain any reasonable number of 
production systems this is a real hassle.

My $0.02 (CAD even) ... and a +1 for twisted .debs :P
-- 
James Walker :: http://walkah.net/ :: xmpp:walkah at walkah.net



From bgranger at scu.edu  Sun Jan  8 14:45:00 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sun, 08 Jan 2006 11:45:00 -0800
Subject: [Twisted-Python] SSL client authentication example
In-Reply-To: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>
References: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>
Message-ID: <B2C92D09-D9CB-457B-88E0-CD48BDA67A8F@scu.edu>


On Jan 7, 2006, at 8:37 AM, dkarbott at comcast.net wrote:

> I modified the echoserv_ssl.py / echoclient_ssl.py examples to do  
> client authtentication while I was trying to learn about using SSL  
> with twisted.
>
> My code is in the attached .tgz.
>
> It uses self-signed certificates so it doesn't depend on (or  
> require) a CA.
>
> I hope that someone else might find it useful.  The  documentation  
> that I was able to google seems kind of sparse.
>

I agree on the documentation.  Thanks for posting this, I will  
definitely be needing this functionality and I will let you know if I  
find any bugs.

Brian


> I'm admittedly neither a crypto expert nor very experienced with  
> OpenSSL, so if you find bugs let me know.
>
> -- Darrell
>
>
>
> <twisted_client_auth.tgz>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Sun Jan  8 15:05:04 2006
From: therve at free.fr (Thomas HERVE)
Date: Sun, 08 Jan 2006 21:05:04 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C12AF7.9090201@walkah.net>
References: <43C08000.7080805@BrendanSimon.com>
	<43C0A5E5.2030905@densedata.com> <43C12AF7.9090201@walkah.net>
Message-ID: <20060108210504.fh0x8twr48wokw44@itchy.wasabout.net>

Quoting James Walker <walkah at walkah.net>:

> I'm new here, and don't want to offend anybody .. but I too use 
> debian stable on my servers and would like to see some up to date 
> debs for twisted.

Your problem is here : Twisted 2 is not part of Sarge release, so you 
won't see
it in a Sarge upgrade (purpose of Sarge is not to provide up to date 
packages).
But Twisted 2 is in Testing/Unstable.

If you want to have Twisted 2 on Sarge, you can either:
- Add testing/unstable URL in sources.list and make appropriate pin/selections
to have latest versions (as python2.3-twisted only depends on python2.3 and
python2.3-zopeinterface, I don't think it will cause problems).
- Simply download testing .deb's and install them.

-- 
Thomas




From exarkun at divmod.com  Sun Jan  8 15:38:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Jan 2006 15:38:50 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <20060108210504.fh0x8twr48wokw44@itchy.wasabout.net>
Message-ID: <20060108203850.1217.846258387.divmod.quotient.10902@ohm>

On Sun, 08 Jan 2006 21:05:04 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting James Walker <walkah at walkah.net>:
>>I'm new here, and don't want to offend anybody .. but I too use debian 
>>stable on my servers and would like to see some up to date debs for 
>>twisted.
>
>Your problem is here : Twisted 2 is not part of Sarge release, so you won't 
>see
>it in a Sarge upgrade (purpose of Sarge is not to provide up to date 
>packages).
>But Twisted 2 is in Testing/Unstable.
>
>If you want to have Twisted 2 on Sarge, you can either:
>- Add testing/unstable URL in sources.list and make appropriate 
>pin/selections
>to have latest versions (as python2.3-twisted only depends on python2.3 and
>python2.3-zopeinterface, I don't think it will cause problems).
>- Simply download testing .deb's and install them.

I see 2.0.  Where's 2.1?

Jean-Paul



From johann.borck at densedata.com  Sun Jan  8 16:21:58 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 08 Jan 2006 22:21:58 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C12AF7.9090201@walkah.net>
References: <43C08000.7080805@BrendanSimon.com>	<43C0A5E5.2030905@densedata.com>
	<43C12AF7.9090201@walkah.net>
Message-ID: <43C18276.1050805@densedata.com>

James Walker wrote:

> On 1/8/06 12:40 AM, Johann Borck wrote:
>
>> Brendan Simon wrote:
>>
>>> I'm running Debian Sarge (ie. stable release).  The default
>>> installation of python-twisted is 1.3.0-8.  I would like the latest
>>> version, preferable 2.1.0.
>>>
>>> From the twisted web pages, I was lead to believe that the following
>>> site has the latest Debian snapshots, release-candidates and releases,
>>> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
>>> that means).
>>>    http://twisted.sourceforge.net/debian
>>>
>>> I've also checked http://backports.org/ but nobody has backported the
>>> Sid version to Sarge.  I don't even know what the Sid version is as
>>> the Debian packages page is not working at the moment.
>>>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>
>
> I'm new here, and don't want to offend anybody .. but I too use debian
> stable on my servers and would like to see some up to date debs for
> twisted. Having .debs is not about ease of installation. Yes, twisted
> (and most python apps) are dead easy to install. The point of having
> debs is about maintenance. If twisted (or any other application /
> library you use) is not using your package management system, then the
> onus is on you to check that vendor for updates and installing them by
> hand. If you've ever tried to maintain any reasonable number of
> production systems this is a real hassle.
>
> My $0.02 (CAD even) ... and a +1 for twisted .debs :P

Yes, good point, agreed and everything, i appreciate people using
twisted on production systems! The more, the better! Spread it! Great!

regards, Johann



From glyph at divmod.com  Sun Jan  8 16:46:35 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 8 Jan 2006 16:46:35 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C0A5E5.2030905@densedata.com>
Message-ID: <20060108214635.1217.1561303750.divmod.quotient.10919@ohm>

On Sun, 08 Jan 2006 06:40:53 +0100, Johann Borck <johann.borck at densedata.com> wrote:

>Hi, Brendan,
>sorry, but this question is cute somehow - twisted is python - there's
>nothing to compile  - if you need *.deb sooo much, the latest version in
>unstable is 2.0.1-something, but it just can't be easier than
>downloading the latest 2.1 tarball and (...)

It is certainly not *too* hard to install Twisted without debs, but it sure would be nice if we had up-to-date support from Debian so that users could simply do "apt-get install twisted" without knowing about all this stuff.  I mean, hey, ./configure; make; make install isn't so hard - why should we have debs of anything at all? :)



From Brendan at BrendanSimon.com  Sun Jan  8 18:43:05 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Mon, 09 Jan 2006 10:43:05 +1100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
Message-ID: <43C1A389.3030809@BrendanSimon.com>

twisted-python-request at twistedmatrix.com wrote:
> Brendan Simon wrote:
>   
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
>>     
>
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)
>   
Thanks for that.  I will do as you suggest.
Yes, I used the phrase "precompiled" out of habit.  It should have read 
"pre-packaged" :)

Debs (and possibly rpms) are still useful.  For instance, if I want to 
uninstall a package I just type:
    aptitude remove python-twisted

Or once my /etc/apt/sources.list is pointing to the right place:
    aptitude update ; aptitude upgrade
will keep my packages up to date with the latest security fixes and 
updated packages, etc.  Things are stored in the "right" place for all 
users.

Since no compilation is involved, it should be easy to modify the build 
system to generate .deb and .rpm files.  The deb and rpm maintainers 
(are they on this list?) would already have the infrastructure in place 
so it would be easy to port.  To me it makes some sense if the upstream 
package vendors generate the debs and rpms, but I can see they would 
not, and could not, generate packages for every OS and architecture.  
Maybe just the source packages, then the OS vendors could generate the 
binary packages for each arch.

Cheers,
Brendan.




From paul-lists at perforge.com  Sun Jan  8 19:07:18 2006
From: paul-lists at perforge.com (Paul G)
Date: Sun, 8 Jan 2006 19:07:18 -0500
Subject: [Twisted-Python] Up to date Debian packages
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C1A389.3030809@BrendanSimon.com>
Message-ID: <01f301c614b0$c4f5f1d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Brendan Simon" <Brendan at BrendanSimon.com>
To: <twisted-python at twistedmatrix.com>
Sent: Sunday, January 08, 2006 6:43 PM
Subject: Re: [Twisted-Python] Up to date Debian packages


> twisted-python-request at twistedmatrix.com wrote:
>> Brendan Simon wrote:
>>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>>
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the 
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>>
> Thanks for that.  I will do as you suggest.
> Yes, I used the phrase "precompiled" out of habit.  It should have read 
> "pre-packaged" :)
>
> Debs (and possibly rpms) are still useful.  For instance, if I want to 
> uninstall a package I just type:
>    aptitude remove python-twisted
>
> Or once my /etc/apt/sources.list is pointing to the right place:
>    aptitude update ; aptitude upgrade
> will keep my packages up to date with the latest security fixes and 
> updated packages, etc.  Things are stored in the "right" place for all 
> users.
>
> Since no compilation is involved, it should be easy to modify the build 
> system to generate .deb and .rpm files.  The deb and rpm maintainers (are 
> they on this list?) would already have the infrastructure in place so it 
> would be easy to port.  To me it makes some sense if the upstream package 
> vendors generate the debs and rpms, but I can see they would not, and 
> could not, generate packages for every OS and architecture.  Maybe just 
> the source packages, then the OS vendors could generate the binary 
> packages for each arch.

i'm not sure about debs, since i don't do debian (no stone throwing before 
midday, please), but there are tools out there which will analyze the 
configure/make stage (or, in this case, the python setup.py install stage) 
and produce an rpm. this could be useful both in generating packages as part 
of the build process *and* for folks who prefer not to have hand-installed 
software on their production systems. this is what we use to manage software 
deployed in production on our redhat-derived boxen but for which there are 
no official rpms. i am also aware of tools which do this for slackware 
packages.

-p 




From foom at fuhm.net  Mon Jan  9 00:41:58 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 00:41:58 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
Message-ID: <082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>

On Jan 8, 2006, at 1:46 AM, Brian Granger wrote:
> When I killed the reactor, I got an exception:
>
> exceptions.AttributeError: 'BonjourDescriptor' object has no  
> attribute 'connectionLost'
>
> It looks like the disconnectAll method on the reactor is calling  
> reader.connectionLost on each reader.  Why is this so?
> I thought I only needed to implement the IReadDescriptor interface  
> for my reader, but the connectionLost method is not a part of that  
> interface.  Hmmm.  Should I implement it?  What interface is that  
> method in?  This seems confusing.

connectionLost should have been on IFileDescriptor, the superclass of  
IReadDescriptor. I just added it:
>     def connectionLost(self, reason):
>         """Called when the connection was lost.
>
>         This is called when the connection on a selectable object  
> has been
>         lost.  It will be called whether the connection was closed  
> explicitly,
>         an exception occurred in an event handler, or the other end  
> of the
>         connection closed it first.
>
>         See also L{IHalfCloseableDescriptor} if your descriptor  
> wants to be
>         notified separately of the two halves of the connection  
> being closed.
>
>         @param reason: A failure instance indicating the reason why  
> the
>          connection was lost.  L 
> {twisted.internet.error.ConnectionLost} and
>          L{twisted.internet.error.ConnectionDone} are of special  
> note, but
>          the failure may be of other classes as well.
>         """

Hope that helps.

JP seems to disagree that it _should_ be part of the interface  
(http://twistedmatrix.com/bugs/issue1408), but it _is_ currently (and  
was previously, just undocumentedly so).

James



From Brendan at BrendanSimon.com  Mon Jan  9 06:36:54 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Mon, 09 Jan 2006 22:36:54 +1100
Subject: [Twisted-Python] TwistedSumo-2005-11-06 on Debian Sarge
In-Reply-To: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
Message-ID: <43C24AD6.3070501@BrendanSimon.com>

twisted-python-request at twistedmatrix.com wrote:
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
>>     
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)
> Johann
>   
I tried that but it doesn't seem to work.  I must be doing something wrong.
I uncompressed TwistedSumo-2005-11-06.tar.bz2 to /tmp.
Export PYTHONPATH=/tmp/TwistedSumo-2005-11-06
cd /tmp/TwistedSumo-2005-11-06/TwistedConch-0.6.0/doc/examples ; python 
sshsimpleclient.py

It does not work :(  I got an error saying SimpleUserAuth instance has 
no attribute 'llastPublicKey'.  I edited thd script to not worry about 
the lastPublicKey and at least it runs.  I get the hostkey printed but 
that's it.  It does not ask me for a password or anything.

The same thing happens if I don't export the PYTHONPATH which makes me 
think I haven't done it correctly.  I even tried setting PYTHONPATH to 
each of the subdirectories within the TwistedSumo-2005-11-06 directory.

So, I was hoping someone could give me a quickset of instructions to 
unpack the archive, set the PYTHONPATH, and run the sshsimpleclient.py 
script connecting to the localhost.  I'm running python 2.3.5 on Debian 
Sarge.

Thanks,
Brendan.






From johann.borck at densedata.com  Mon Jan  9 10:56:46 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Mon, 09 Jan 2006 16:56:46 +0100
Subject: [Twisted-Python] TwistedSumo-2005-11-06 on Debian Sarge
In-Reply-To: <43C24AD6.3070501@BrendanSimon.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C24AD6.3070501@BrendanSimon.com>
Message-ID: <43C287BE.2010009@densedata.com>

Brendan Simon wrote:

> twisted-python-request at twistedmatrix.com wrote:
>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>>     
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>> Johann
>>   
>
> I tried that but it doesn't seem to work.  I must be doing something
> wrong.
> I uncompressed TwistedSumo-2005-11-06.tar.bz2 to /tmp.
> Export PYTHONPATH=/tmp/TwistedSumo-2005-11-06
> cd /tmp/TwistedSumo-2005-11-06/TwistedConch-0.6.0/doc/examples ;
> python sshsimpleclient.py
>
> It does not work :(  I got an error saying SimpleUserAuth instance has
> no attribute 'llastPublicKey'.  I edited thd script to not worry about
> the lastPublicKey and at least it runs.  I get the hostkey printed but
> that's it.  It does not ask me for a password or anything.
>
> The same thing happens if I don't export the PYTHONPATH which makes me
> think I haven't done it correctly.  I even tried setting PYTHONPATH to
> each of the subdirectories within the TwistedSumo-2005-11-06 directory.
>
No, this error comes out of twisted, so if you have no other twisted
install, the PYTHONPATH thing works as it should, otherwise you'd get
import errors.  Are you shure that it works without exporting the path?
that'd be very strange, you can check with  env if  the dir  is on your
path..   regarding sshsimpleclient, i don't know, for me the example
works, but in the code it's lastPublicKey, not llastPublicKey.. maybe
one 'l' too much there? try some other examples, twisted works, the
simpleclient-problem is independent from that.
Johann

> So, I was hoping someone could give me a quickset of instructions to
> unpack the archive, set the PYTHONPATH, and run the sshsimpleclient.py
> script connecting to the localhost.  I'm running python 2.3.5 on
> Debian Sarge.
>
> Thanks,
> Brendan.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From bgranger at scu.edu  Mon Jan  9 11:51:20 2006
From: bgranger at scu.edu (Brian Granger)
Date: Mon, 09 Jan 2006 08:51:20 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
	<082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
Message-ID: <577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>


On Jan 8, 2006, at 9:41 PM, James Y Knight wrote:

> On Jan 8, 2006, at 1:46 AM, Brian Granger wrote:
>> When I killed the reactor, I got an exception:
>>
>> exceptions.AttributeError: 'BonjourDescriptor' object has no  
>> attribute 'connectionLost'
>>
>> It looks like the disconnectAll method on the reactor is calling  
>> reader.connectionLost on each reader.  Why is this so?
>> I thought I only needed to implement the IReadDescriptor interface  
>> for my reader, but the connectionLost method is not a part of that  
>> interface.  Hmmm.  Should I implement it?  What interface is that  
>> method in?  This seems confusing.
>
> connectionLost should have been on IFileDescriptor, the superclass  
> of IReadDescriptor. I just added it:
>>     def connectionLost(self, reason):
>>         """Called when the connection was lost.
>>
>>         This is called when the connection on a selectable object  
>> has been
>>         lost.  It will be called whether the connection was closed  
>> explicitly,
>>         an exception occurred in an event handler, or the other  
>> end of the
>>         connection closed it first.
>>
>>         See also L{IHalfCloseableDescriptor} if your descriptor  
>> wants to be
>>         notified separately of the two halves of the connection  
>> being closed.
>>
>>         @param reason: A failure instance indicating the reason  
>> why the
>>          connection was lost.  L 
>> {twisted.internet.error.ConnectionLost} and
>>          L{twisted.internet.error.ConnectionDone} are of special  
>> note, but
>>          the failure may be of other classes as well.
>>         """
>
> Hope that helps.

>
> JP seems to disagree that it _should_ be part of the interface  
> (http://twistedmatrix.com/bugs/issue1408), but it _is_ currently  
> (and was previously, just undocumentedly so).
>

Adding connectionLost to the IFileDescriptor interface does solve the  
problem.  But the situation is more complicated than that - and that  
makes me a little hesitant to just have connectionLost in  
IFileDescriptor as you have done.  Here is why:

The IReactorFDSet interface, specifies that any class that implements  
the IReadDescriptor can be used as a reader.  But, currently, the  
reactor's, which supposedly IReactorFDSet implements also call the  
following on the readers:

logPrefix -- part of twisted.python.log.Logger which FileDescriptor  
(the class) inherits from
connectionLost -- now part of IFileDescriptor

Thus is looks like readers are actually required to also be a  
subclass of the Logger class (the FileDescriptor class, which is used  
for Port does this).  The problem seems to be with the IReactorFDSset  
interface which doesn't actually specify acccurately which interfaces  
(and subclasses) the  readers/writers must implement.  Is there a  
ILogger interface as well?

Also, this makes me worry that developers have been asusming that  
readers are actually a subclass of FileDescriptor.  Is that the case?

I am not that experienced with this part of twisted, so I am not sure  
what is the best solution.

Thanks for looking into this.

Brian


> James
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From foom at fuhm.net  Mon Jan  9 12:24:47 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 12:24:47 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
	<082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
	<577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>
Message-ID: <C4CD2AC1-0A2D-4EDF-9FDD-03C7F4301247@fuhm.net>


On Jan 9, 2006, at 11:51 AM, Brian Granger wrote:
> Adding connectionLost to the IFileDescriptor interface does solve  
> the problem.  But the situation is more complicated than that - and  
> that makes me a little hesitant to just have connectionLost in  
> IFileDescriptor as you have done.  Here is why:
>
> The IReactorFDSet interface, specifies that any class that  
> implements the IReadDescriptor can be used as a reader.  But,  
> currently, the reactor's, which supposedly IReactorFDSet implements  
> also call the following on the readers:
>
> logPrefix -- part of twisted.python.log.Logger which FileDescriptor  
> (the class) inherits from
> connectionLost -- now part of IFileDescriptor
>
> Thus is looks like readers are actually required to also be a  
> subclass of the Logger class (the FileDescriptor class, which is  
> used for Port does this).  The problem seems to be with the  
> IReactorFDSset interface which doesn't actually specify acccurately  
> which interfaces (and subclasses) the  readers/writers must  
> implement.  Is there a ILogger interface as well?
>
> Also, this makes me worry that developers have been asusming that  
> readers are actually a subclass of FileDescriptor.  Is that the case?

This is most likely true and unfortunate. Thanks for helping to track  
down these issues. What we really need is some test coverage of the  
reactor being used with alternative IFileDescriptors that only  
implement the minimal advertised interfaces.

> I am not that experienced with this part of twisted, so I am not  
> sure what is the best solution.

The right solution is to fix this part of the spec. I do think that  
connectionLost is a fundemental part of the interface. However, I do  
not think logPrefix ought to be. That should be fixed to be optional.

James



From itamar at itamarst.org  Mon Jan  9 12:48:27 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 09 Jan 2006 12:48:27 -0500
Subject: [Twisted-Python] Switch to tempfile.mkstemp?
In-Reply-To: <E1Evp72-0001la-00@wolfwood>
References: <E1Evp72-0001la-00@wolfwood>
Message-ID: <1136828908.8968.1.camel@localhost.localdomain>

On Sun, 2006-01-08 at 21:58 -0700, James Knight wrote:
> Author: foom
> Date: Sun Jan  8 21:58:32 2006
> New Revision: 15544
> 
> Modified:
>    trunk/twisted/web2/static.py
> Log:
> Use tempfile.mktemp instead of custom filename making.
> Fixes issue1391.

Now that we're using 2.3, can we switch to the more secure mkstemp?




From foom at fuhm.net  Mon Jan  9 13:27:08 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 13:27:08 -0500
Subject: [Twisted-Python] Switch to tempfile.mkstemp?
In-Reply-To: <1136828908.8968.1.camel@localhost.localdomain>
References: <E1Evp72-0001la-00@wolfwood>
	<1136828908.8968.1.camel@localhost.localdomain>
Message-ID: <29B8112E-57B2-4DC4-854A-B94C0E89C2C0@fuhm.net>

On Jan 9, 2006, at 12:48 PM, Itamar Shtull-Trauring wrote:

> On Sun, 2006-01-08 at 21:58 -0700, James Knight wrote:
>
>> Author: foom
>> Date: Sun Jan  8 21:58:32 2006
>> New Revision: 15544
>>
>> Modified:
>>    trunk/twisted/web2/static.py
>> Log:
>> Use tempfile.mktemp instead of custom filename making.
>> Fixes issue1391.
>>
>
> Now that we're using 2.3, can we switch to the more secure mkstemp?

AFAIK it is secure to use mktemp + open(.., O_EXCL|O_CREAT).

James



From jason at mobarak.name  Mon Jan  9 20:55:48 2006
From: jason at mobarak.name (Jason Mobarak)
Date: Mon, 9 Jan 2006 18:55:48 -0700
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <01f301c614b0$c4f5f1d0$6402a8c0@dcore>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C1A389.3030809@BrendanSimon.com>
	<01f301c614b0$c4f5f1d0$6402a8c0@dcore>
Message-ID: <b194c9190601091755v5cdfe973k67815ca1c7767f34@mail.gmail.com>

On 1/8/06, Paul G <paul-lists at perforge.com> wrote:
[...]
> i'm not sure about debs, since i don't do debian (no stone throwing before
> midday, please), but there are tools out there which will analyze the
> configure/make stage (or, in this case, the python setup.py install stage)
> and produce an rpm. this could be useful both in generating packages as part
> of the build process *and* for folks who prefer not to have hand-installed
> software on their production systems. this is what we use to manage software
> deployed in production on our redhat-derived boxen but for which there are
> no official rpms. i am also aware of tools which do this for slackware
> packages.

I'll mention one of these tools:

http://asic-linux.com.mx/~izto/checkinstall/ (google for checkinstall,
or it's underlying hardware "installwatch")

(which is in Debian).  This generates rpms/debs/slackpacks from most
any software "install" phase.  However, the point of packages is more
finely defined with compiled code, even if you have a tool like this
you're still hand installing it, which can lead a host of problems
that are side stepped by packages.

,,Jason



From zooko at zooko.com  Tue Jan 10 01:47:01 2006
From: zooko at zooko.com (zooko at zooko.com)
Date: Tue, 10 Jan 2006 02:47:01 -0400
Subject: [Twisted-Python] slightly silly hack
Message-ID: <20060110064701.690501913@yumyum.zooko.com>


Ever wanted to execute your trial tests as though they were commands?  You can
use tab completion in bash, for example:

$ ./amdlib/storage/test/test_storefile.py -s

It's easy!  Give your file executable permission and at the top of the file
type this line: "#!/usr/bin/env python".  At the bottom type: """
if __name__ == "__main__":
    import os, sys
    mods = []
    fullname = os.path.realpath(os.path.abspath(__file__))
    for pathel in sys.path:
        fullnameofpathel = os.path.realpath(os.path.abspath(pathel))
        if fullname.startswith(fullnameofpathel):
            relname = fullname[len(fullnameofpathel):]
            mod = (os.path.splitext(relname)[0]).replace(os.sep, '.').strip('.')
            mods.append(mod)

    mods.sort(cmp=lambda x, y: cmp(len(x), len(y)))
    mods.reverse()
    for mod in mods:
        cmdstr = "trial %s %s" % (' '.join(sys.argv[1:]), mod,)
        print cmdstr
        if os.system(cmdstr) == 0:
            break
"""

Regards,

Zooko



From fdarling at gmail.com  Tue Jan 10 15:35:43 2006
From: fdarling at gmail.com (Forest Darling)
Date: Tue, 10 Jan 2006 15:35:43 -0500
Subject: [Twisted-Python] mixing a Cacheable and a Viewable
Message-ID: <5d5395960601101235v1ed8f6dfm8fe7f0acdc2df213@mail.gmail.com>

I want to make a server side object that the client can access via a
RemoteCache, but also access view_ functions from the Cacheable via
.callRemote() This way a player can see an object based on its
perpective (like fog of war) and a player can also call server-side
methods for game actions (like to move a hero.)

from the server and remote classes trying to inherit both doesn't
work, so how do I do this? This kind of problem must have come up
before...

Heres the link to my non-working partially done code, the Game,
Player, and Hero classes need to behave this way.

Heres a copy of my source, it needs Numeric, PyQt, and of course Twisted

http://behemoth.binarypimpin.com/~forest/pyhomm/files/PyHoMM-broken.zip



From maillists at ivsn.com  Tue Jan 10 15:57:17 2006
From: maillists at ivsn.com (Paul Reznicek)
Date: Tue, 10 Jan 2006 21:57:17 +0100
Subject: [Twisted-Python] Defect in twisted/persisted/sob.py
Message-ID: <43C41FAD.8060003@ivsn.com>

After update to trunk, twistd do not start as a daemon with following error:

    Starting my-app: twistd
    Failed to load application: global name 'mainMod' is not defined

Following patch helped, please consider to apply to trunk:

Index: sob.py
===================================================================
--- sob.py    (Revision 15568)
+++ sob.py    (Arbeitskopie)
@@ -157,6 +157,7 @@
      @param style: string (one of 'source', 'xml' or 'pickle')
      @param passphrase: string
      """
+    global mainMod
      mode = 'r'
      if style=='source':
          from twisted.persisted.aot import unjellyFromSource as load



From exarkun at divmod.com  Tue Jan 10 16:25:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Jan 2006 16:25:51 -0500
Subject: [Twisted-Python] Defect in twisted/persisted/sob.py
In-Reply-To: <43C41FAD.8060003@ivsn.com>
Message-ID: <20060110212551.31401.1430204259.divmod.quotient.28@ohm>

On Tue, 10 Jan 2006 21:57:17 +0100, Paul Reznicek <maillists at ivsn.com> wrote:
>After update to trunk, twistd do not start as a daemon with following error:
>
>    Starting my-app: twistd
>    Failed to load application: global name 'mainMod' is not defined
>
>Following patch helped, please consider to apply to trunk:

This looks like issue 491: http://twistedmatrix.com/bugs/issue491

The hold up in applying it is probably the lack of a unit test.

Jean-Paul



From foom at fuhm.net  Wed Jan 11 01:00:10 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 11 Jan 2006 00:00:10 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EwZ1m-0000IK-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-04 06:00:02.200000:
 Bugs opened: 13   Bugs closed: 7   Total open bugs: 524 (+6)
  Urgent: 7 (-1)
  Bug: 249 (+5)
  Feature: 181 (+0)
  Wish: 87 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] Trial temp directory behavior is a little off  (4 hours ago)
       http://twistedmatrix.com/bugs/issue1413 opened by jml

[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1408 opened by exarkun

                    ==== Bug ====
[WEB] ExpatError on xmlrpc client connection close  (5 hours ago)
       http://twistedmatrix.com/bugs/issue1412 opened by kkinder

[CORE] spawnProcess on unix doesn't handle case where os.fork fails cleanly  (yesterday)
       http://twistedmatrix.com/bugs/issue1410 opened by itamarst

IMAP4Client.authenticate()/login() need to quote arguments  (yesterday)
       http://twistedmatrix.com/bugs/issue1411 opened by jojo

[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1407 opened by exarkun

[TRIAL] Trial should handle logged errors using an observer.  (yesterday)
       http://twistedmatrix.com/bugs/issue1409 opened by jml

Worries about copyTo/moveTo additions to filepath  (2 days ago)
       http://twistedmatrix.com/bugs/issue1406 opened by jknight

[CORE, DOCUMENTATION] Bad link in twisted web documentation.  (5 days ago)
       http://twistedmatrix.com/bugs/issue1404 opened by Tekhne

[CORE, WIN32] iocpreactor - initiateOp [Errno 2] The system cannot find the file specified  (5 days ago)
       http://twistedmatrix.com/bugs/issue1403 opened by ghazel

[CORE, WIN32] strange behaviours when writing large amount of data on stdout  (2 months ago)
       http://twistedmatrix.com/bugs/issue1305 opened by manlio

                    ==== Wish ====
[CORE] twisted callFromThread raises IndexError  (3 days ago)
       http://twistedmatrix.com/bugs/issue1405 opened by ghazel

[DEFERRED] Make deferred callback chains debuggable  (5 days ago)
       http://twistedmatrix.com/bugs/issue1402 opened by moof

Bugs Closed
______________________
                    ==== Urgent ====
[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
       http://twistedmatrix.com/bugs/issue1408 opened by exarkun, closed by exarkun

[TESTS, WEB2] Intermitent failure in web2 unit tests  (1 week ago)
       http://twistedmatrix.com/bugs/issue1391 opened by exarkun, closed by jknight

[newpb] implement a correct eventually(), use callLater rather than callFromThread  (1 week ago)
       http://twistedmatrix.com/bugs/issue1398 opened by glyph, closed by warner

                    ==== Bug ====
[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
       http://twistedmatrix.com/bugs/issue1407 opened by exarkun, closed by exarkun

[TRIAL] trial.util._Janitor.do_cleanPending causes spinWhile warning to be emitted.  (1 week ago)
       http://twistedmatrix.com/bugs/issue1395 opened by jknight, closed by jml

[CORE] cannot exit script before activating reactor if using threadpool  (1 week ago)
       http://twistedmatrix.com/bugs/issue1385 opened by antony, closed by exarkun

[TRIAL] Implementing setUpClass should not require ClassSuite  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1379 opened by jml, closed by jml




From bgranger at scu.edu  Wed Jan 11 23:52:02 2006
From: bgranger at scu.edu (Brian Granger)
Date: Wed, 11 Jan 2006 20:52:02 -0800
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
Message-ID: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>

Hi,

Are Deferred objects designed to have their callback method called  
multiple times it there are a multiple (discrete) results that arrive  
asynchronously?  If not, what is the proper construct in Twisted for  
returning multiple asynchronous results from a single method?

Thanks

Brian



From exarkun at divmod.com  Thu Jan 12 00:15:19 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 12 Jan 2006 00:15:19 -0500
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
Message-ID: <20060112051519.26200.1056948200.divmod.quotient.126@ohm>

On Wed, 11 Jan 2006 20:52:02 -0800, Brian Granger <bgranger at scu.edu> wrote:
>Hi,
>
>Are Deferred objects designed to have their callback method called  multiple 
>times it there are a multiple (discrete) results that arrive 
>asynchronously?  If not, what is the proper construct in Twisted for 
>returning multiple asynchronous results from a single method?

Nope, they're not.  Twisted generally reverts to named method callbacks or explicit listener registration for cases where multiple results are possible.  I've played with support code for simplifying this in the past, but it has never really resulting in something that was easier to use.

Jean-Paul



From andrew-twisted at puzzling.org  Thu Jan 12 00:25:41 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Jan 2006 16:25:41 +1100
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
Message-ID: <20060112052541.GD4555@home.puzzling.org>

On Wed, Jan 11, 2006 at 08:52:02PM -0800, Brian Granger wrote:
> Hi,
> 
> Are Deferred objects designed to have their callback method called  
> multiple times it there are a multiple (discrete) results that arrive  
> asynchronously?  If not, what is the proper construct in Twisted for  
> returning multiple asynchronous results from a single method?

Deferred objects are one-shot by design, so they are not by themselves suitable
for multiple asynchronous results.

If you have a fixed number of asynchronous operations that want to return
results, you could just return a Deferred per expected result.  Callers that
wish to aggregate those can use a DeferredList.

If you have something that's more like an event source -- you don't know how
many results to expect in advance, you are probably better off with callable
that is invoked each time, and dispatches the result to whatever code is
appropriate at the time.  Quite possibly a state machine written as a class with
different methods that will be invoked for the different kinds of events/results
you expect is appropriate.

If you have something that's conceptually one operation, but the results trickle
in in parts, then perhaps a hybrid approach is suitable.  e.g. consider
downloading a large web-page: somewhere a dataReceived handler is getting
invoked many times, and this can be used to e.g. update a progress bar in a UI
somewhere, but once the entire page has been downloaded then a complete result
can be passed to a Deferred for code that only cares about the final result.

There are probably lots of other variations as well, depending on exactly what
you need.

I hope this helps,

-Andrew.




From bgranger at scu.edu  Thu Jan 12 00:29:05 2006
From: bgranger at scu.edu (Brian Granger)
Date: Wed, 11 Jan 2006 21:29:05 -0800
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <20060112052541.GD4555@home.puzzling.org>
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
	<20060112052541.GD4555@home.puzzling.org>
Message-ID: <94B370EC-8B25-49CC-8B0F-F5075C92F40F@scu.edu>


On Jan 11, 2006, at 9:25 PM, Andrew Bennetts wrote:

> On Wed, Jan 11, 2006 at 08:52:02PM -0800, Brian Granger wrote:
>> Hi,
>>
>> Are Deferred objects designed to have their callback method called
>> multiple times it there are a multiple (discrete) results that arrive
>> asynchronously?  If not, what is the proper construct in Twisted for
>> returning multiple asynchronous results from a single method?
>
> Deferred objects are one-shot by design, so they are not by  
> themselves suitable
> for multiple asynchronous results.
>
> If you have a fixed number of asynchronous operations that want to  
> return
> results, you could just return a Deferred per expected result.   
> Callers that
> wish to aggregate those can use a DeferredList.
>
> If you have something that's more like an event source -- you don't  
> know how
> many results to expect in advance, you are probably better off with  
> callable
> that is invoked each time, and dispatches the result to whatever  
> code is
> appropriate at the time.  Quite possibly a state machine written as  
> a class with
> different methods that will be invoked for the different kinds of  
> events/results
> you expect is appropriate.
>

This is the case that I have.  This is what I did originally, but  
then I wanted to be fancy and use Deferred's.  Guess I will go back  
to using some version of a callable.

Thanks.

> If you have something that's conceptually one operation, but the  
> results trickle
> in in parts, then perhaps a hybrid approach is suitable.  e.g.  
> consider
> downloading a large web-page: somewhere a dataReceived handler is  
> getting
> invoked many times, and this can be used to e.g. update a progress  
> bar in a UI
> somewhere, but once the entire page has been downloaded then a  
> complete result
> can be passed to a Deferred for code that only cares about the  
> final result.
>
> There are probably lots of other variations as well, depending on  
> exactly what
> you need.
>
> I hope this helps,
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From radeex at gmail.com  Thu Jan 12 00:47:11 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 12 Jan 2006 16:47:11 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
In-Reply-To: <20060108104014.GA12891@sourdust.home.puzzling.org>
References: <20060108104014.GA12891@sourdust.home.puzzling.org>
Message-ID: <60ed19d40601112147tdbe99d6w1e5d23dc21ca3fef@mail.gmail.com>

On 1/8/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> A reminder to interested parties that I set the date for this to this
> coming Saturday: 14th January. What follows is a reminder about what I
> want to do.
>
> I'll set up something more specific for this in a day or two. I envisage
> I'll have a worklist of some kind on a wiki, and that participants will
> also be chatting on #twisted as usual to resolve anything else.

I don't know about everyone else, but _I'm_ gonna be there. So if
others think they are anywhere near as cool as radix (or want to be),
please come along.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Fri Jan 13 02:59:34 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 13 Jan 2006 18:59:34 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
In-Reply-To: <20060108104014.GA12891@sourdust.home.puzzling.org>
References: <20060108104014.GA12891@sourdust.home.puzzling.org>
Message-ID: <20060113075934.GE6454@sourdust.home.puzzling.org>

Yep, there's still a virtual sprint tomorrow! I'll be setting up a todo
list in the morning Australian time which should be done by about 0100
UTC and which will be posted here so that people can work on it when I'm
not online.

I'll spend sometime online between 0400 - 0700 UTC if there are any
people in Australian timezones or US nightowls wanting to do stuff. I'll
be back around 2100 UTC (that's late Saturday afternoon in the US) for
some more work.

-Mary

-- 
<exarkun> rt: we could do with an out of control suicide rate
<rt> unless you're willing to lead the way, I wouldn't go making that
     recommendation.
<exarkun> rt: I would, but if I hurl people off a cliff, it's murder, not 
          suicide.



From smurf at smurf.noris.de  Fri Jan 13 06:09:50 2006
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Fri, 13 Jan 2006 12:09:50 +0100
Subject: [Twisted-Python] Re: Repeatedly calling Deferred.callback()
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
	<20060112052541.GD4555@home.puzzling.org>
	<94B370EC-8B25-49CC-8B0F-F5075C92F40F@scu.edu>
Message-ID: <pan.2006.01.13.11.09.49.308986@smurf.noris.de>

Hi, Brian Granger wrote:

> This is the case that I have.  This is what I did originally, but then I
> wanted to be fancy and use Deferred's.  Guess I will go back to using some
> version of a callable.

When in doubt, do both -- use a callback for each result, and then fire
the Deferred when you're done.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
 - -
Exercise care in the abuse of oppressed peoples. Many farm implements
make effective weapons in the hands of a skilled opponent. Some of those
little old men can teach you a thing or two about hand-to-hand, too.
		-- The Legion Of Doom Troop Member's List





From y.glodt at sitasoftware.lu  Fri Jan 13 07:49:17 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Fri, 13 Jan 2006 13:49:17 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
Message-ID: <43C7A1CD.60003@sitasoftware.lu>

Hi,

I have read about twisted.names and I guess it can help me in what I 
have to achieve..

I have a database which contains a list of ip-addresses and 
corresponding hostnames.

Now, how could I do to, e.g., write a daemon which would, on dns 
queries, query the database to resolve the name?

best regards,
Yves




From natester at gmail.com  Fri Jan 13 11:27:23 2006
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 13 Jan 2006 09:27:23 -0700
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <43C7A1CD.60003@sitasoftware.lu>
References: <43C7A1CD.60003@sitasoftware.lu>
Message-ID: <4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>

On 1/13/06, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>
> Hi,
>
> I have read about twisted.names and I guess it can help me in what I
> have to achieve..
>
> I have a database which contains a list of ip-addresses and
> corresponding hostnames.
>
> Now, how could I do to, e.g., write a daemon which would, on dns
> queries, query the database to resolve the name?


You could subclass twisted.names.client.Resolver to lookup the names from
the db or from some structure generated from the db.

best regards,
> Yves
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060113/7a12fa96/attachment.htm 

From exarkun at divmod.com  Fri Jan 13 11:59:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 13 Jan 2006 11:59:00 -0500
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <43C7A1CD.60003@sitasoftware.lu>
Message-ID: <20060113165900.26200.777039052.divmod.quotient.538@ohm>

On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>Hi,
>
>I have read about twisted.names and I guess it can help me in what I have to 
>achieve..
>
>I have a database which contains a list of ip-addresses and corresponding 
>hostnames.
>
>Now, how could I do to, e.g., write a daemon which would, on dns queries, 
>query the database to resolve the name?
>

Twisted Names isn't exactly done, as far as pleasant pluggable backend support goes.  Take a look at twisted/names/authority.py and twisted/names/common.py.  The hook you are probably interested in is the _lookup method

Jean-Paul



From jcea at argo.es  Fri Jan 13 13:31:29 2006
From: jcea at argo.es (Jesus Cea)
Date: Fri, 13 Jan 2006 19:31:29 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <20060113165900.26200.777039052.divmod.quotient.538@ohm>
References: <20060113165900.26200.777039052.divmod.quotient.538@ohm>
Message-ID: <43C7F201.2050909@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> Twisted Names isn't exactly done, as far as pleasant pluggable backend
> support goes.

A little digression from the thread. Excuse me.

Sorry to bother you, Jean-Paul. Have you had some time to look at my
pre-Christmas issue with "twisted.names.dns.DNSDatagramProtocol"?. Seems
a twisted bug with the reactor stopping. I need some help.

=====

2006/01/13 19:27 CET [twisted.names.dns.DNSDatagramProtocol (UDP)]
Traceback (most recent call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ8fyAJlgi5GaxT1NAQJmOQP9F2n/uRJ70pw3XXEgbqAanG+IsfXd95Zb
XTgXkvrgnkfb4GLjwwYHwfDHdzl30MoSHBgAlRt/xqaaa2BS07m0jxoTayIQ8kSr
e2V5noWURIeu6XEG2f9AshZg7veUt/swEWFKFpMkFOU7iUIFIWnlJ1zPBcbGY2i4
bKviYdgEiWg=
=RS8A
-----END PGP SIGNATURE-----



From mary-twisted at puzzling.org  Fri Jan 13 19:24:34 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 Jan 2006 11:24:34 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
Message-ID: <20060114002434.GJ6454@sourdust.home.puzzling.org>

Hi all,

Today (well, soon for non-Australians) is of course the day of the
documentation virtual sprint.

What are we doing? We're reviewing the existing Twisted documentation
from both user and expert points of view to highlight obvious areas of
improvement.

How can you help? Read Twisted documentation and make suggestions for
improvement. We need reviews from both Twisted users (the intended
audience of the documentation) and Twisted experts (who are the people
who, if the docs aren't good, have to fill in the gaps in their spare
time in email and IRC).

The sprint participants will be on IRC on the irc.freenode.net network.
I've created a dedicated sprint channel #twisted-sprint but I expect
there will be discussion also in #twisted. (I am less likely to be
following it closely.) Anyone wanting my attention personally should ask
for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
keep Australian east coast daylight hours ;)

The reviews will be coordinated on a wiki: if you need assistance
working out how to create and edit pages on the wiki, please ask on IRC.

For more details, see instructions at
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis and
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis/DocumentList
to get a good idea of what you need to do: for anything missing ask me
on IRC.

As I wrote yesterday I will be online between 0400 - 0700 UTC if there
are any people in Australian timezones or US nightowls wanting to do
stuff. I'll be back around 2100 UTC (that's late Saturday afternoon in
the US) for some more work. Others will be around at other times.

-Mary

-- 
<radix> uh oh.
<radix> 'destroy here' isn't a good idea. :)



From mary-twisted at puzzling.org  Fri Jan 13 19:42:52 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 Jan 2006 11:42:52 +1100
Subject: [Twisted-Python] Re: Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060114004252.GL6454@sourdust.home.puzzling.org>

On Sat, Jan 14, 2006, Mary Gardiner wrote:
> The sprint participants will be on IRC on the irc.freenode.net network.
> I've created a dedicated sprint channel #twisted-sprint but I expect
> there will be discussion also in #twisted. (I am less likely to be
> following it closely.) Anyone wanting my attention personally should ask
> for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
> keep Australian east coast daylight hours ;)

Oh, and if anyone wants to participate in the sprint and won't, for
whatever reason, be on IRC, you're welcome to. Just follow the
directions at the link I gave and ask sprint questions on whichever of
twisted-python at twistedmatrix.com or twisted-web at twistedmatrix.com seems
appropriate (don't cross-post).

-Mary



From y.glodt at sitasoftware.lu  Sun Jan 15 10:45:42 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Sun, 15 Jan 2006 16:45:42 +0100
Subject: [Twisted-Python] Re: simple dns server with twisted.names
Message-ID: <43CA6E26.3070509@sitasoftware.lu>

On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at
sitasoftware.lu> wrote:
> On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at
> sitasoftware.lu> wrote:
>> Hi,
>> 
>> I have read about twisted.names and I guess it can help me in what
>> I have to achieve..
>> 
>> I have a database which contains a list of ip-addresses and
>> corresponding hostnames.
>> 
>> Now, how could I do to, e.g., write a daemon which would, on dns
>> queries, query the database to resolve the name?
>> 
> 
> Twisted Names isn't exactly done, as far as pleasant pluggable
> backend support goes.  Take a look at twisted/names/authority.py and
> twisted/names/common.py.  The hook you are probably interested in is
> the _lookup method

Ok.

I have to admit I am completely new to twisted...

I am also not sure whether I explained myself good in what I want to do...

Basically, I need a replacement for /etc/hosts.

I have a daemon running on my box, and was thinking about adding a 
thread to it which could serve as a simple local dns server.

Right now, my /etc/hosts gets updated by a cronjob every now and then. 
The cronjob fetches IP-addresses and hostnames from a firebird DB and 
writes them to the hosts file.

What I was thinking to do with my daemon is, having in memory a 
list/hashtable of hosts with their IPs. If an IP changes I get a 
firebird event and I can updated it in my list.

Now twisted.names would only have to listen to dns requests (I have e.g. 
wget and openvpn which want to resolve names from my hosts right now 
periodically), lookup the IPs of the requested names in my in-memory 
list of hosts/ips, and answer as a normal dns server.

isn't twisted/names/server what I need for that?

thanks and best regards,
Yves

p.s.
Is there any more documentation available apart of this:
http://twistedmatrix.com/projects/names/
http://twistedmatrix.com/projects/names/documentation/howto/names.html


> Jean-Paul




From tjstebbing at gmail.com  Sun Jan 15 21:55:10 2006
From: tjstebbing at gmail.com (Tim Stebbing)
Date: Mon, 16 Jan 2006 13:55:10 +1100
Subject: [Twisted-Python] hobart meatspace sprint - the final hurrah
Message-ID: <972281650601151855g3035e65ge42c2c2933c9a0c6@mail.gmail.com>

We're looking at having a final Hobart AU sprint this Feb, before we
Hobartians go our separate ways. This would be on the weekend of the
11th-12th and perhaps a day either side if people are interested.
Sprint topics suggested are currently:

* Fix VFS (deferred support, move the protocol specific bits into the
various parts of twisted, integrate dav)
* Trial GUI ?

Current meatbag attendees:

tjs, radix, cablehead, teratorn, jml?

Current virtual attendees:
lifeless?

Currently thinking about it:
spiv, jerub

People I have not spoken with yet but would rock if they came:
hypatia, elspeth

-tjs



From pokerface at tacticalgamer.com  Mon Jan 16 07:36:19 2006
From: pokerface at tacticalgamer.com (pokerface)
Date: Mon, 16 Jan 2006 07:36:19 -0500 (EST)
Subject: [Twisted-Python] Simple OSCAR Bot
Message-ID: <4585.69.143.69.240.1137414979.squirrel@webmail.tacticalgamer.com>

Greetings, list.

I'm attempting to wrap my brain around Twisted for the purposes of
creating a simple OSCAR bot.  The purpose of this bot will be to send a
broadcast announcement to a mutable list of screennames to help with
admining gaming servers.

Every example I've seen of OSCAR bots has the bot log in and respond to
all sorts of messages that it gets sent, staying logeed in the entire
time.  My needs are simpler; the bot need only log in, send its messages,
and log right back out.  From what I can suss out, this would still
necessitate a connectTCP() call, but it doesn't need a reactor.run().  My
trouble is that I don't know exactly what it WOULD require beyond
connection (IE, where to put the sendMessage, whether to create callbacks,
etc. etc.).  I also don't quite know how I would pass different lists to
the bot class for the broadcast, but that's a secondary concern that I can
work around inefficiently if I have to (I think).

If someone knows of some keywords I'm missing for my google search, or if
they can otherwise point me in the direction of an example of what I'm
attempting to do, I would be most appreciative.

Thank you all for your time.

Sean




From itamar at itamarst.org  Mon Jan 16 10:25:17 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 16 Jan 2006 10:25:17 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15582 - I meant change it
	like this, not like that.
In-Reply-To: <E1ExsKe-0007mh-00@wolfwood>
References: <E1ExsKe-0007mh-00@wolfwood>
Message-ID: <1137425118.9231.3.camel@localhost.localdomain>

On Sat, 2006-01-14 at 13:49 -0700, James Knight wrote:

> +from twisted.web2 import 

That module name violates the coding standard, btw.




From y.glodt at sitasoftware.lu  Tue Jan 17 03:24:19 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 17 Jan 2006 09:24:19 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>
References: <43C7A1CD.60003@sitasoftware.lu>
	<4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>
Message-ID: <43CCA9B3.7080206@sitasoftware.lu>

Nathaniel Haggard wrote:
> On 1/13/06, *Yves Glodt* <y.glodt at sitasoftware.lu 
> <mailto:y.glodt at sitasoftware.lu>> wrote:
> 
>     Hi,
> 
>     I have read about twisted.names and I guess it can help me in what I
>     have to achieve..
> 
>     I have a database which contains a list of ip-addresses and
>     corresponding hostnames.
> 
>     Now, how could I do to, e.g., write a daemon which would, on dns
>     queries, query the database to resolve the name?
> 
> 
> You could subclass twisted.names.client.Resolver to lookup the names 
> from the db or from some structure generated from the db.

I went through the available documentation and I have to say that I did 
not advance... is there a list of classes and methods available somewhere?

Otherwise, I guess I could advance if I could have some examplecode 
which does only 1 thing:

in my python program I have a variable myhost = '1.2.3.4'

Now, I would be perfectly happy if I launch my python program, and if 
the following would work:

dig myhost @127.0.0.1


thanks in advance,
Yves



From mary-twisted at puzzling.org  Tue Jan 17 06:57:53 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 Jan 2006 22:57:53 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060117115753.GD6785@sourdust.home.puzzling.org>

Unfortunately, the sprint involved less people than I'd hoped. I'd like
to thank Andrew Bennetts and David Blewett for their documentation
revies at
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
though, and Chris Armstrong and Jean-Paul Calderone for being around to
help out people who showed up. And also anyone who poked their head in
while I was out.

Where to from here?

Well, first of all I still think the idea of documentation reviews is a
reasonably good way to improve the documentation, because it forces
people to think about who the intended audience of the document is and
what the purpose of the document will be. This is surprisingly hard to
do when you just sit down and write something -- really! Also, Andrew
assures me that writing an expert review is easier than writing a
document.

So while I know that only a small percentage of users have the time or
inclination to be project contributors, I'd like to encourage anyone who
finds an eager but disappointed documentation user to go through the
process of
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
I intend this to be an ongoing project.

At some point I will also do a template for 'reviewing' non-existant
documents -- David's valiant review of non-existant documentation shows
that I could improve the template for this task.

Next up will be another sprint in a month or two to *act* on the
reviews. I am hoping that improving a document based on a review will be
far easier than improving it based on scattered one-shot bug reports or
our gut instincts. Dates and times soon.

Further discussion of documentation improvement ideas welcome on
twisted-python at twistedmatrix.com

-Mary

-- 
<ilikewine> that mp3 sounds like that band is from williamsburg
<ilikewine> its an awful place
<ilikewine> where everybody wears stripes



From moof at metamoof.net  Tue Jan 17 07:30:28 2006
From: moof at metamoof.net (Moof)
Date: Tue, 17 Jan 2006 13:30:28 +0100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117115753.GD6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
Message-ID: <bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>

[Removed twisted-web from To: list]

On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>
> Unfortunately, the sprint involved less people than I'd hoped.


I'm sorry I couldn't join in. The Real World interefered with me at the last
minute and left me mostly offline durign the weekend, or I would have dived
in considerably. I'll try and have a read through the wiki this week and see
if I can add any contributions.

So while I know that only a small percentage of users have the time or
> inclination to be project contributors, I'd like to encourage anyone who
> finds an eager but disappointed documentation user to go through the
> process of
>
> http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
> I intend this to be an ongoing project.


How about adding a links to "Don't like this document? Can't work it out
what you need to know? Review it" liberally throughout the documentation. It
may encourage people to keep critiquing, and thus help improve it.

At some point I will also do a template for 'reviewing' non-existant
> documents -- David's valiant review of non-existant documentation shows
> that I could improve the template for this task.


How about adding links in strategic places to "Request Documentation". I
don't know if you'd want to integrate this with the twisted roundup somehow.

In fact, a document on "what to do if you can't find the documentation you
want" might be helpful, and possibly stop the complaints about lack of
documentation. Include things like where to find the IRC Channel, how the
bug system works, and so on.

On another note, a wealth of explanations, normally for small areas of
twisted, are given out on the IRC channel and the mailing lists. Maybe
making it easy to post snippets from IRC that are searchable might be a good
idea to make "pseudo-documentation". Ditto a way of referring to particular
threads on the main mailing lists. For example, I've seen several threads on
IRC and on the mailing lists about how the twisted logging system works in
much more detail than the documentation on the site. Making it easy to link
to the various discussions we've had might be a big help to first-time
readers of the docs.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060117/2b7d7542/attachment.htm 

From david at dawninglight.net  Tue Jan 17 08:14:12 2006
From: david at dawninglight.net (David Blewett)
Date: Tue, 17 Jan 2006 08:14:12 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
Message-ID: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>

I was reading through the enterprise module in twisted, and then I came 
across this website:

http://www.penguin.cz/~ondrap/sqlabstr.php

It makes using SQL in Python much more readable. I was thinking that it 
would be nice to incorporate some of the functionality of this module. 
It has more than would probably be necessary (creating classes 
dynamically from the schema in the underlying database for example), 
but I think it would make a nice addition to the enterprise module.

Any thoughts?

David Blewett

----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From glyph at divmod.com  Tue Jan 17 08:35:52 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 17 Jan 2006 08:35:52 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>
Message-ID: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>



On Tue, 17 Jan 2006 08:14:12 -0500, David Blewett <david at dawninglight.net> wrote:

>Any thoughts?

The main thought I have is

"No"

If anything, we should be moving towards *removing* some functionality like this (twisted.enterprise.row) which is unmaintained, poorly documented, poorly tested...

It's perfectly possible to use Twisted with an ORM or SQL sweetener of your choice.  If one is to become "officially" supported, it would probably be Axiom <http://divmod.org/trac/wiki/DivmodAxiom>, just due to the familiarity that several of the core Twisted developers have with it - but that's not really sufficiently general for inclusion in Twisted at this point.  Look for it in the next 5 years, maybe.



From paul-lists at perforge.com  Tue Jan 17 08:44:31 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 08:44:31 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>
Message-ID: <150a01c61b6c$257f8590$6402a8c0@dcore>


----- Original Message ----- 
From: "David Blewett" <david at dawninglight.net>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 8:14 AM
Subject: [Twisted-Python] SQL Abstraction Layer


>I was reading through the enterprise module in twisted, and then I came 
>across this website:
>
> http://www.penguin.cz/~ondrap/sqlabstr.php
>
> It makes using SQL in Python much more readable. I was thinking that it 
> would be nice to incorporate some of the functionality of this module. It 
> has more than would probably be necessary (creating classes dynamically 
> from the schema in the underlying database for example), but I think it 
> would make a nice addition to the enterprise module.
>
> Any thoughts?

sqlalchemy's 'query building' looks to be doing the same job better, imo. it 
also supports more than just postgres. there was an example of integrating 
it with twisted earlier in the thread for this type of usage.

-p 




From paul-lists at perforge.com  Tue Jan 17 08:58:36 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 08:58:36 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
Message-ID: <151c01c61b6e$1e3acb80$6402a8c0@dcore>


----- Original Message ----- 
From: <glyph at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 8:35 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer

> It's perfectly possible to use Twisted with an ORM or SQL sweetener of 
> your choice.

what would help, i think, is some documentation/examples describing how this 
can be achieved with specific implementations. there's no reason this has to 
be in the official twisted documentation or written by twisted folks, 
necessarily, it would be good for it to just exist ;) dialtone's italian 
post shows the minimalistic example, but as he (through the translation) 
states, it probably won't be anywhere near as simple to use sqlalchemy's ORM 
features.

i am unsure whether i'll be using a fullblown ORM for the stuff i'm working 
on or just some query building facilities, but if nothing happens 
documentation-wise before i cross that bridge, i'll put up some examples of 
what i ended up doing.

alternatively, does someone have experience/insights to share but has been 
keeping it on the down low? now's the time to come on out with it ;)

-p 




From tvansteenburgh at gmail.com  Tue Jan 17 09:21:28 2006
From: tvansteenburgh at gmail.com (Tim Van Steenburgh)
Date: Tue, 17 Jan 2006 09:21:28 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <776bdcd30601170621l57a7cbf7mb639d6350d13f0b5@mail.gmail.com>

Worth looking at: http://www.sqlobject.org

I've only been tinkering for a few days, and I haven't done anything
complicated with it (yet), but so far I am pleased.

On 1/17/06, Paul G <paul-lists at perforge.com> wrote:
>
>
> ----- Original Message -----
> From: <glyph at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Tuesday, January 17, 2006 8:35 AM
> Subject: Re: [Twisted-Python] SQL Abstraction Layer
>
> > It's perfectly possible to use Twisted with an ORM or SQL sweetener of
> > your choice.
>
> what would help, i think, is some documentation/examples describing how
> this
> can be achieved with specific implementations. there's no reason this has
> to
> be in the official twisted documentation or written by twisted folks,
> necessarily, it would be good for it to just exist ;) dialtone's italian
> post shows the minimalistic example, but as he (through the translation)
> states, it probably won't be anywhere near as simple to use sqlalchemy's
> ORM
> features.
>
> i am unsure whether i'll be using a fullblown ORM for the stuff i'm
> working
> on or just some query building facilities, but if nothing happens
> documentation-wise before i cross that bridge, i'll put up some examples
> of
> what i ended up doing.
>
> alternatively, does someone have experience/insights to share but has been
> keeping it on the down low? now's the time to come on out with it ;)
>
> -p
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060117/4cf4ad7d/attachment.htm 

From golux at comcast.net  Tue Jan 17 11:38:22 2006
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 17 Jan 2006 11:38:22 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <43CD1D7E.2030005@comcast.net>

Paul G wrote:
> i am unsure whether i'll be using a fullblown ORM for the stuff i'm 
> working on or just some query building facilities, but if nothing 
> happens documentation-wise before i cross that bridge, i'll put up some 
> examples of what i ended up doing.
> 
> alternatively, does someone have experience/insights to share but has 
> been keeping it on the down low? now's the time to come on out with it ;)

My twisted app uses both query-building and an ORM.
If anyone wants a look, a nightly tarball can be downloaded from
http://ned.gsfc.nasa.gov/PanGalactic.tar.gz.

Query-mapping is in pangalactic.utils.sql
ORM is in pangalactic.repo.chronosynclastic

The sql.py module is easily usable outside of pangalactic,
and is just a way of building SQL statements from functions
-- pretty rudimentary, and only tested with postgresql.

The ORM is simple but is heavily dependent on the somewhat
unorthodox way pangalactic does metaobjects, so probably not
usable outside of pangalactic, but there might be some
ideas that could be used.

Docs (such as they are):  PanGalactic/doc/PgefManual.html
Comments welcome!

Cheers,
Steve



From dialtone at divmod.com  Tue Jan 17 11:47:04 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue, 17 Jan 2006 17:47:04 +0100
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <20060117164704.GA335@divmod.com>

On Tue, Jan 17, 2006 at 08:58:36AM -0500, Paul G wrote:
> what would help, i think, is some documentation/examples describing how 
> this can be achieved with specific implementations. there's no reason this 
> has to be in the official twisted documentation or written by twisted 
> folks, necessarily, it would be good for it to just exist ;) dialtone's 
> italian post shows the minimalistic example, but as he (through the 
> translation) states, it probably won't be anywhere near as simple to use 
> sqlalchemy's ORM features.

ORM features should work without problems but you'll have to use the 'eager'
query mode everytime since retrieving stuff lazily means running queries for
attribute access and this is what you want to avoid for blocking reasons.

If you use fetchall() and the eager query mode for the ORM then SQLAlchemy
works as well (if not better) than other solutions. I save Axiom from this
because it has a particular attention to integration with Twisted (like
powerups and so on).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060117/feb8deb1/attachment.pgp 

From mary-twisted at puzzling.org  Tue Jan 17 15:51:23 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 18 Jan 2006 07:51:23 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
Message-ID: <20060117205123.GF6785@sourdust.home.puzzling.org>

On Tue, Jan 17, 2006, Moof wrote:
> On another note, a wealth of explanations, normally for small areas of
> twisted, are given out on the IRC channel and the mailing lists. Maybe
> making it easy to post snippets from IRC that are searchable might be
> a good idea to make "pseudo-documentation". Ditto a way of referring
> to particular threads on the main mailing lists. For example, I've
> seen several threads on IRC and on the mailing lists about how the
> twisted logging system works in much more detail than the
> documentation on the site. Making it easy to link to the various
> discussions we've had might be a big help to first-time readers of the
> docs.

My immediate reaction to this was to worry about maintainability in that
these conversations, just like our docs, will likely eventually stop
being "the right way" to do things.

Repeated experience has shown that we've got very few people (at a
guess, somewhere between 2 and 5 people, comprising about 0.05% in total
of a fulltime worker by time expenditure) who are worried enough about
maintaining the docs to actually do anything about it (and some more who
are willing to point out problems). This kind of thing is hard for
editors to work with -- they have to read through a whole conversation
to find out if any bit of it is out of date, and if so, they're
essentially forced to either turn it into a document or nuke the whole
thing.

Essentially what I'm trying to do here is find a balance between:

 - having lots of up-to-date documentation, even if it's not in a hugely
   friendly form (IRC conversations, for linguistic and social reasons,
   are low bandwidth even when there's meat to the discussion), which is
   a good thing

 - having lots of documentation in an incredible array of hard-to-edit
   forms which is constantly mostly out-of-date, which is a bad thing

For various reasons, mostly idiosyncratic, I tend to be biased towards
having a smaller set of well-maintained well-edited documentation than a
larger set of poorly maintained randomed documentation. But what are
other people's experiences with projects that have particularly good or
particularly bad documentation?

-Mary



From bgranger at scu.edu  Tue Jan 17 16:04:38 2006
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 17 Jan 2006 13:04:38 -0800
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117205123.GF6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
	<20060117205123.GF6785@sourdust.home.puzzling.org>
Message-ID: <28018DD4-1B5E-4313-A4EA-0D9C1C8DE5F0@scu.edu>


On Jan 17, 2006, at 12:51 PM, Mary Gardiner wrote:

> On Tue, Jan 17, 2006, Moof wrote:
>> On another note, a wealth of explanations, normally for small  
>> areas of
>> twisted, are given out on the IRC channel and the mailing lists.  
>> Maybe
>> making it easy to post snippets from IRC that are searchable might be
>> a good idea to make "pseudo-documentation". Ditto a way of referring
>> to particular threads on the main mailing lists. For example, I've
>> seen several threads on IRC and on the mailing lists about how the
>> twisted logging system works in much more detail than the
>> documentation on the site. Making it easy to link to the various
>> discussions we've had might be a big help to first-time readers of  
>> the
>> docs.
>
> My immediate reaction to this was to worry about maintainability in  
> that
> these conversations, just like our docs, will likely eventually stop
> being "the right way" to do things.
>
> Repeated experience has shown that we've got very few people (at a
> guess, somewhere between 2 and 5 people, comprising about 0.05% in  
> total
> of a fulltime worker by time expenditure) who are worried enough about
> maintaining the docs to actually do anything about it (and some  
> more who
> are willing to point out problems). This kind of thing is hard for
> editors to work with -- they have to read through a whole conversation
> to find out if any bit of it is out of date, and if so, they're
> essentially forced to either turn it into a document or nuke the whole
> thing.
>
> Essentially what I'm trying to do here is find a balance between:
>
>  - having lots of up-to-date documentation, even if it's not in a  
> hugely
>    friendly form (IRC conversations, for linguistic and social  
> reasons,
>    are low bandwidth even when there's meat to the discussion),  
> which is
>    a good thing
>
>  - having lots of documentation in an incredible array of hard-to-edit
>    forms which is constantly mostly out-of-date, which is a bad thing
>
> For various reasons, mostly idiosyncratic, I tend to be biased towards
> having a smaller set of well-maintained well-edited documentation  
> than a
> larger set of poorly maintained randomed documentation. But what are
> other people's experiences with projects that have particularly  
> good or
> particularly bad documentation?
>

I think having a small core of well-maintained and well-edited  
documentation is most important.  Without this, users have no clear  
starting point that is reliable.  But there could also be another  
larger documentation set that is available but isn't as up to date or  
particularly well written.  But to have the larger, less reliable set  
with _no_ small set of high quality docs is really silly.

But with all that said, once someone has gotten into Twisted, they  
will end up using the source code as their documentation.  To me,  
this means that doc strings (and the API docs) should always be  
verbose, well-written and up to date.

Thanks for organizing this effort!

Brian

> -Mary
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From grimmtooth at gmail.com  Tue Jan 17 19:42:35 2006
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Tue, 17 Jan 2006 19:42:35 -0500
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117115753.GD6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
Message-ID: <8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>

On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:

Unfortunately, the sprint involved less people than I'd hoped. I'd like


:: cringe ::

Out of (virtual) office on the 14th, and pretty annoyed about it, too.

I'm glad to see it's going to be an ongoing thing, though. I've looked over
the wilki and am trying to wrap my brain around the daunting subject of
"where to start?"  So much to do.  Feel free to whack me over the head with
helpful hints on where to start; lacking that, I'll figure something out :-)

--
"I never gave anybody hell. I just told the truth and the Republicans
thought it was hell."
                  - Harry S. Truman.

Best,

    Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060117/8a23f478/attachment.htm 

From radeex at gmail.com  Tue Jan 17 21:23:55 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 18 Jan 2006 13:23:55 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
Message-ID: <60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>

On 1/18/06, Jeff Grimmett <grimmtooth at gmail.com> wrote:
> On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>
>
> > Unfortunately, the sprint involved less people than I'd hoped. I'd like
>
> :: cringe ::
>

Braindump:

I think that "Doc Reviews" wasn't a very good topic for a sprint. It's
something that you basically do by yourself, and sprints are all about
collaboration. I think we should constantly be encouraging
documentation reviews, and then act on them for sprints.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From paul-lists at perforge.com  Tue Jan 17 21:34:11 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 21:34:11 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm><151c01c61b6e$1e3acb80$6402a8c0@dcore>
	<20060117164704.GA335@divmod.com>
Message-ID: <174e01c61bd7$b0fb36d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Valentino Volonghi aka Dialtone" <dialtone at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 11:47 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer


On Tue, Jan 17, 2006 at 08:58:36AM -0500, Paul G wrote:
>> what would help, i think, is some documentation/examples describing how
>> this can be achieved with specific implementations. there's no reason 
>> this
>> has to be in the official twisted documentation or written by twisted
>> folks, necessarily, it would be good for it to just exist ;) dialtone's
>> italian post shows the minimalistic example, but as he (through the
>> translation) states, it probably won't be anywhere near as simple to use
>> sqlalchemy's ORM features.

> ORM features should work without problems but you'll have to use the 
> 'eager'
> query mode everytime since retrieving stuff lazily means running queries 
> for
> attribute access and this is what you want to avoid for blocking reasons.

correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy accessors 
which implement this lazy load when attributes are accessed to run their 
queries with deferToThread() would remove this problem, would it not? more 
generally speaking, if you're not going to do explicit deferToThread()s in 
your code (and avoid all attribute access), but rather, say, insert them 
into the appropriate point in sqlalchemy (sqlengine seems ro tbe the right 
place, or just a wrapper around the dbapi module), would this not handle the 
issue as well? am i asking the wrong person/on the wrong list? ;]

-p 




From mary-twisted at puzzling.org  Tue Jan 17 22:27:35 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 18 Jan 2006 14:27:35 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
	<60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>
Message-ID: <20060118032735.GH17972@home.puzzling.org>

On Wed, Jan 18, 2006, Christopher Armstrong wrote:
> I think that "Doc Reviews" wasn't a very good topic for a sprint. It's
> something that you basically do by yourself, and sprints are all about
> collaboration. I think we should constantly be encouraging
> documentation reviews, and then act on them for sprints.

I'm not totally sure whether there's any kind of magic bullet when it
comes to working on the docs -- even collaboration! And I'm not sure
that people are any more likely to do the reviews when there's not even
a sprint to prompt them.

However, whereever possible people who want to promote this should
encourage reviews, and we'll see if they've built up in number enough
for a sprint in a month or two.

-Mary



From foom at fuhm.net  Wed Jan 18 01:00:05 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 18 Jan 2006 00:00:05 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1Ez6MX-0002hN-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-11 06:00:01.820000:
 Bugs opened: 12   Bugs closed: 3   Total open bugs: 533 (+9)
  Urgent: 9 (+2)
  Bug: 254 (+5)
  Feature: 182 (+1)
  Wish: 88 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial misreports pyunit test names  (6 hours ago)
       http://twistedmatrix.com/bugs/issue1425 opened by itamarst

[CORE] Running 'setup.py all install' inside TwistedSumo-2005-11-06 fails to install subprojects  (5 days ago)
       http://twistedmatrix.com/bugs/issue1418 opened by bdash

                    ==== Bug ====
File inherrits from Resource class, which exports too much API  (yesterday)
       http://twistedmatrix.com/bugs/issue1423 opened by wsanchez

[TRIAL] TypeError in trial  (yesterday)
       http://twistedmatrix.com/bugs/issue1422 opened by zooko

[WEBSITE] 404 from Main Page  (5 days ago)
       http://twistedmatrix.com/bugs/issue1419 opened by TimothyFitz

[MAIL] [imap4] Literals need not to be preceeded by space  (5 days ago)
       http://twistedmatrix.com/bugs/issue1417 opened by jojo

[CORE, DOCUMENTATION, TRIAL] trial docs suggest obsolete timeout idiom  (yesterday)
       http://twistedmatrix.com/bugs/issue1420 opened by zooko

                    ==== Feature ====
[WORDS] Enhanced lineRate throttling in twisted.words.protocols.irc.IRCClient  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1424 opened by Tuxedo

[DEFERRED] patch: more detailed Defer.__str__()  (yesterday)
       http://twistedmatrix.com/bugs/issue1421 opened by zooko

                    ==== Wish ====
IRCClient callbacks suggestion  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1416 opened by urago

IRCClient callbacks suggestion  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1415 opened by urago

[WORDS] IRCClient.userJoined() argument list  (6 days ago)
       http://twistedmatrix.com/bugs/issue1414 opened by urago

Bugs Closed
______________________
                    ==== Feature ====
[WORDS] Enhanced lineRate throttling in twisted.words.protocols.irc.IRCClient  (yesterday)
       http://twistedmatrix.com/bugs/issue1424 opened by Tuxedo, closed by exarkun

                    ==== Wish ====
IRCClient callbacks suggestion  (6 days ago)
       http://twistedmatrix.com/bugs/issue1416 opened by urago, closed by exarkun

IRCClient callbacks suggestion  (6 days ago)
       http://twistedmatrix.com/bugs/issue1415 opened by urago, closed by exarkun




From dialtone at divmod.com  Wed Jan 18 05:28:35 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed, 18 Jan 2006 11:28:35 +0100
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <174e01c61bd7$b0fb36d0$6402a8c0@dcore>
References: <20060117164704.GA335@divmod.com>
	<174e01c61bd7$b0fb36d0$6402a8c0@dcore>
Message-ID: <20060118102835.GF335@divmod.com>

On Tue, Jan 17, 2006 at 09:34:11PM -0500, Paul G wrote:
> correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy 
> accessors which implement this lazy load when attributes are accessed to 
> run their queries with deferToThread() would remove this problem, would it 
> not? more generally speaking, if you're not going to do explicit 
> deferToThread()s in your code (and avoid all attribute access), but rather, 
> say, insert them into the appropriate point in sqlalchemy (sqlengine seems 
> ro tbe the right place, or just a wrapper around the dbapi module), would 
> this not handle the issue as well? am i asking the wrong person/on the 
> wrong list? ;]

I don't think it's the right approach to patch sqlalchemy to run attribute
access in a thread. You would still get a deferred from an attribute access
and this is pretty hugly to handle.

Just using the eager mode would be perfect, the reason why I don't believe
that much in lazy queries is that you will end up using all the information,
otherwise it's better to query without using the ORM.

Currently SQLAlchemy is so good because it doesn't try to be clever but rather
only exposes the primitives and tries hard to be thread safe so that people
will be free to use it in the best way they want.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060118/cbba7346/attachment.pgp 

From paul-lists at perforge.com  Wed Jan 18 18:25:17 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 18:25:17 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python] SQL
	Abstraction Layer_
References: <20060117164704.GA335@divmod.com><174e01c61bd7$b0fb36d0$6402a8c0@dcore>
	<20060118102835.GF335@divmod.com>
Message-ID: <190701c61c86$820a0d10$6402a8c0@dcore>


----- Original Message ----- 
From: "Valentino Volonghi aka Dialtone" <dialtone at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 5:28 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer


On Tue, Jan 17, 2006 at 09:34:11PM -0500, Paul G wrote:
>> correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy
>> accessors which implement this lazy load when attributes are accessed to
>> run their queries with deferToThread() would remove this problem, would 
>> it
>> not? more generally speaking, if you're not going to do explicit
>> deferToThread()s in your code (and avoid all attribute access), but 
>> rather,
>> say, insert them into the appropriate point in sqlalchemy (sqlengine 
>> seems
>> ro tbe the right place, or just a wrapper around the dbapi module), would
>> this not handle the issue as well? am i asking the wrong person/on the
>> wrong list? ;]

>I don't think it's the right approach to patch sqlalchemy to run attribute
>access in a thread. You would still get a deferred from an attribute access
>and this is pretty hugly to handle.

i'm not sure we're on the same page here. alternatively, i don't agree with 
your reasoning. if we use eager mode, objects get created when we call the 
mapper. in lazy mode, they can appear as a result of attribute access. to 
me, the fact that the two are different are a language syntax issue - 
semantically, i see both as a message to a slot on an object.  this is, 
iirc, how python allows sqlalchemy to intercept with attribute accessors as 
well ;)

to me, integrating sqlalchemy into twisted would ideally work in a way where 
all sqlalchemy api access is async. as i stated in my original mail, i 
currently believe that this could be possible to achieve by making all of 
sqlalchemy's calls into the dbapi module async with deferToThread(). if one 
does this, and it doesn't break something arcane in sqlalchemy, we shouldn't 
have to worry about deferreds in the client code. is there a reason why this 
wouldn't work or why it shouldn't be done that i am missing?

you could advance the argument that not having a deferToThread() in the 
client code would obscure the fact that the current 'cooperative thread' is 
yielding execution at that point, but that can be elucidated in the comments 
should one have a need to do that, while keeping the code much cleaner.

> Just using the eager mode would be perfect, the reason why I don't believe
> that much in lazy queries is that you will end up using all the 
> information,
> otherwise it's better to query without using the ORM.

there are plenty of examples where lazy loading is useful in an ORM context 
and where you wouldn't want to do your own queries. in fact, i don't see why 
wanting to control loading behaviour would make the advantages of an ORM 
suddenly go away - to me, the principal advantage is making the code cleaner 
and, in the common case, masking the stuff that's going on under the hood. 
this becomes even more important, imho, when you want to lazy load things - 
not less.

>Currently SQLAlchemy is so good because it doesn't try to be clever but 
>rather
>only exposes the primitives and tries hard to be thread safe so that people
>will be free to use it in the best way they want.

full agreement here. i love the way it's designed - simple, gives you access 
to the various levels of functionality independent of the others and leaves 
you free to use it however works best for you at any given point in 
time/code. it's one of the best ORMs, design-wise, that i've seen; the only 
thing that's missing is some docs for the UnitOfWork stuff.

-p 




From exarkun at divmod.com  Wed Jan 18 19:10:54 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 19:10:54 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]
	SQL Abstraction Layer_
In-Reply-To: <190701c61c86$820a0d10$6402a8c0@dcore>
Message-ID: <20060119001054.2697.677692258.divmod.quotient.82@ohm>

On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>to me, integrating sqlalchemy into twisted would ideally work in a way where 
>all sqlalchemy api access is async. as i stated in my original mail, i 
>currently believe that this could be possible to achieve by making all of 
>sqlalchemy's calls into the dbapi module async with deferToThread(). if one 
>does this, and it doesn't break something arcane in sqlalchemy, we shouldn't 
>have to worry about deferreds in the client code. is there a reason why this 
>wouldn't work or why it shouldn't be done that i am missing?

I think you are missing the fact that if you do this, attribute access 
will result in a Deferred, not the value of the attribute from the 
database, which is not available yet. 

So client code will have to deal with Deferreds, and in an extremely 
unusual manner - every attribute lookup will return a new Deferred.

Jean-Paul



From paul-lists at perforge.com  Wed Jan 18 19:31:20 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 19:31:20 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
References: <20060119001054.2697.677692258.divmod.quotient.82@ohm>
Message-ID: <198c01c61c8f$c6d35ec0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 7:10 PM
Subject: Re: making sqlalchemy work with twisted (was Re: 
[Twisted-Python]SQL Abstraction Layer_


> On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>where all sqlalchemy api access is async. as i stated in my original mail, 
>>i currently believe that this could be possible to achieve by making all 
>>of sqlalchemy's calls into the dbapi module async with deferToThread(). if 
>>one does this, and it doesn't break something arcane in sqlalchemy, we 
>>shouldn't have to worry about deferreds in the client code. is there a 
>>reason why this wouldn't work or why it shouldn't be done that i am 
>>missing?
>
> I think you are missing the fact that if you do this, attribute access 
> will result in a Deferred, not the value of the attribute from the 
> database, which is not available yet.
> So client code will have to deal with Deferreds, and in an extremely 
> unusual manner - every attribute lookup will return a new Deferred.

this would be very much like the 'future' in the actor-based concurrency 
model, so nothing terribly unusual. however, no, this is not what i want to 
do. maybe my (bad) ascii art will help:

normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
synchronous db query to dbapi -> return to sqlengine -> return to 
accessor -> return attribute

new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
async call into dbapi with deferToThread-> control returned to reactor -> 
another coop thread gets control

... async dbapi result handler ->  return to sqlengine -> return to 
accessor -> return attribute

did i explain what i mean well?

-p 




From exarkun at divmod.com  Wed Jan 18 19:55:32 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 19:55:32 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
In-Reply-To: <198c01c61c8f$c6d35ec0$6402a8c0@dcore>
Message-ID: <20060119005532.2697.703138415.divmod.quotient.95@ohm>

On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>----- Original Message ----- From: "Jean-Paul Calderone" 
><exarkun at divmod.com>
>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>Sent: Wednesday, January 18, 2006 7:10 PM
>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>Python]SQL Abstraction Layer_
>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> wrote:
>>>
>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>where all sqlalchemy api access is async. as i stated in my original mail, 
>>>i currently believe that this could be possible to achieve by making all 
>>>of sqlalchemy's calls into the dbapi module async with deferToThread(). if 
>>>one does this, and it doesn't break something arcane in sqlalchemy, we 
>>>shouldn't have to worry about deferreds in the client code. is there a 
>>>reason why this wouldn't work or why it shouldn't be done that i am 
>>>missing?
>>
>>I think you are missing the fact that if you do this, attribute access will 
>>result in a Deferred, not the value of the attribute from the database, 
>>which is not available yet.
>>So client code will have to deal with Deferreds, and in an extremely 
>>unusual manner - every attribute lookup will return a new Deferred.
>
>this would be very much like the 'future' in the actor-based concurrency 
>model, so nothing terribly unusual. however, no, this is not what i want to 
>do. maybe my (bad) ascii art will help:
>
>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>synchronous db query to dbapi -> return to sqlengine -> return to accessor 
>-> return attribute
>
>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>async call into dbapi with deferToThread-> control returned to reactor -> 
>another coop thread gets control
>
>... async dbapi result handler ->  return to sqlengine -> return to accessor 
>-> return attribute
>
>did i explain what i mean well?

Yes.  Unfortunately, this cannot be implemented in CPython without going to extreme lengths.  Also, there is some discussion among the core Twisted developers whether it even represents a good idea at all.  I think the split is currently something like 4 to 1 against.  If you look in either my blog or glyph's blog for "concurrency" you will find some exposition on the matter.

Jean-Paul



From glyph at divmod.com  Wed Jan 18 20:59:58 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 18 Jan 2006 20:59:58 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
In-Reply-To: <20060119005532.2697.703138415.divmod.quotient.95@ohm>
Message-ID: <20060119015958.2697.883242103.divmod.quotient.113@ohm>



On Wed, 18 Jan 2006 19:55:32 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Yes.  Unfortunately, this cannot be implemented in CPython without going to 
>extreme lengths.  Also, there is some discussion among the core Twisted 
>developers whether it even represents a good idea at all.  I think the split 
>is currently something like 4 to 1 against.  If you look in either my blog 
>or glyph's blog for "concurrency" you will find some exposition on the 
>matter.

Actually the thing you want to look for in my blog is "Santa Claus".  The best post on this topic is "Knowing Santa Claus is Fake Doesn't Ruin Christmas", at http://www.livejournal.com/users/glyf/40037.html

It should probably be on twistedmatrix.com's front page or something.



From paul-lists at perforge.com  Wed Jan 18 21:15:28 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 21:15:28 -0500
Subject: making sqlalchemy work with twisted (was Re:
	[Twisted-Python]SQLAbstraction Layer_
References: <20060119005532.2697.703138415.divmod.quotient.95@ohm>
Message-ID: <19cf01c61c9e$519c3500$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 7:55 PM
Subject: Re: making sqlalchemy work with twisted (was Re: 
[Twisted-Python]SQLAbstraction Layer_


> On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>----- Original Message ----- From: "Jean-Paul Calderone" 
>><exarkun at divmod.com>
>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>Sent: Wednesday, January 18, 2006 7:10 PM
>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>Python]SQL Abstraction Layer_
>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>wrote:
>>>>
>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>mail, i currently believe that this could be possible to achieve by 
>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>deferToThread(). if one does this, and it doesn't break something arcane 
>>>>in sqlalchemy, we shouldn't have to worry about deferreds in the client 
>>>>code. is there a reason why this wouldn't work or why it shouldn't be 
>>>>done that i am missing?
>>>
>>>I think you are missing the fact that if you do this, attribute access 
>>>will result in a Deferred, not the value of the attribute from the 
>>>database, which is not available yet.
>>>So client code will have to deal with Deferreds, and in an extremely 
>>>unusual manner - every attribute lookup will return a new Deferred.
>>
>>this would be very much like the 'future' in the actor-based concurrency 
>>model, so nothing terribly unusual. however, no, this is not what i want 
>>to do. maybe my (bad) ascii art will help:
>>
>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>synchronous db query to dbapi -> return to sqlengine -> return to 
>>accessor -> return attribute
>>
>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>async call into dbapi with deferToThread-> control returned to reactor -> 
>>another coop thread gets control
>>
>>... async dbapi result handler ->  return to sqlengine -> return to 
>>accessor -> return attribute
>>
>>did i explain what i mean well?
>
> Yes.  Unfortunately, this cannot be implemented in CPython without going 
> to extreme lengths.

it just occurred to me what i was missing. namely, while the dbapi wrapper 
can deferToThread() for calls into the real dbapi module, there's no 
good/obvious way to yield control to the reactor and have the deferred's 
callback return execution to the callsite which invoked the dbapi wrapper in 
the first place. is this what you are alluding to?

if so, i suspect there might be some generator magic which can make this 
work. is this what you meant by 'extreme lengths'?

>  Also, there is some discussion among the core Twisted developers whether 
> it even represents a good idea at all.  I think the split is currently 
> something like 4 to 1 against.  If you look in either my blog or glyph's 
> blog for "concurrency" you will find some exposition on the matter.

there are indeed very good arguments for not doing this in the general case. 
i believe the decision to make pb users be aware that the objects are remote 
follows from that. i've found that this makes using pb easier and apps using 
it easier to design (from a performance risk perspective) and easier to 
debug, as well as more robust. i wouldn't argue for making attribute access 
implicitly do asynchronous things in the general case, or in most cases 
even.

however, in the sqlalchemy case, at least for my purposes, it would make 
sense to do it to make the integration more seamless.

-p 




From exarkun at divmod.com  Wed Jan 18 22:32:28 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 22:32:28 -0500
Subject: making sqlalchemy work with twisted (was Re:
	[Twisted-Python]SQLAbstraction Layer_
In-Reply-To: <19cf01c61c9e$519c3500$6402a8c0@dcore>
Message-ID: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>

On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>----- Original Message ----- From: "Jean-Paul Calderone" 
><exarkun at divmod.com>
>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>Sent: Wednesday, January 18, 2006 7:55 PM
>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>Python]SQLAbstraction Layer_
>>On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> wrote:
>>>
>>>----- Original Message ----- From: "Jean-Paul Calderone" 
>>><exarkun at divmod.com>
>>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>>Sent: Wednesday, January 18, 2006 7:10 PM
>>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>>Python]SQL Abstraction Layer_
>>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>>wrote:
>>>>>
>>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>>mail, i currently believe that this could be possible to achieve by 
>>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>>deferToThread(). if one does this, and it doesn't break something arcane 
>>>>>in sqlalchemy, we shouldn't have to worry about deferreds in the client 
>>>>>code. is there a reason why this wouldn't work or why it shouldn't be 
>>>>>done that i am missing?
>>>>
>>>>I think you are missing the fact that if you do this, attribute access 
>>>>will result in a Deferred, not the value of the attribute from the 
>>>>database, which is not available yet.
>>>>So client code will have to deal with Deferreds, and in an extremely 
>>>>unusual manner - every attribute lookup will return a new Deferred.
>>>
>>>this would be very much like the 'future' in the actor-based concurrency 
>>>model, so nothing terribly unusual. however, no, this is not what i want 
>>>to do. maybe my (bad) ascii art will help:
>>>
>>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>synchronous db query to dbapi -> return to sqlengine -> return to accessor 
>>>-> return attribute
>>>
>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>async call into dbapi with deferToThread-> control returned to reactor -> 
>>>another coop thread gets control
>>>
>>>... async dbapi result handler ->  return to sqlengine -> return to 
>>>accessor -> return attribute
>>>
>>>did i explain what i mean well?
>>
>>Yes.  Unfortunately, this cannot be implemented in CPython without going to 
>>extreme lengths.
>
>it just occurred to me what i was missing. namely, while the dbapi wrapper 
>can deferToThread() for calls into the real dbapi module, there's no 
>good/obvious way to yield control to the reactor and have the deferred's 
>callback return execution to the callsite which invoked the dbapi wrapper in 
>the first place. is this what you are alluding to?
>
>if so, i suspect there might be some generator magic which can make this 
>work. is this what you meant by 'extreme lengths'?

No, generators are easy.  Extreme lengths are extension modules that move pieces of the C call stack around.  See Stackless Python and the greenlets module.

>>  Also, there is some discussion among the core Twisted developers whether 
>>it even represents a good idea at all.  I think the split is currently 
>>something like 4 to 1 against.  If you look in either my blog or glyph's 
>>blog for "concurrency" you will find some exposition on the matter.
>
>there are indeed very good arguments for not doing this in the general case. 
>i believe the decision to make pb users be aware that the objects are remote 
>follows from that. i've found that this makes using pb easier and apps using 
>it easier to design (from a performance risk perspective) and easier to 
>debug, as well as more robust. i wouldn't argue for making attribute access 
>implicitly do asynchronous things in the general case, or in most cases 
>even.
>
>however, in the sqlalchemy case, at least for my purposes, it would make 
>sense to do it to make the integration more seamless.
>

You may have more reasons to claim this than you have presented, but what you have presented reduces to "it is a good idea in this case because I think it is a good idea".

I still think it's a bad idea :)

Jean-Paul



From paul-lists at perforge.com  Wed Jan 18 22:55:43 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 22:55:43 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
References: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>
Message-ID: <19eb01c61cac$398b7030$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 10:32 PM
Subject: Re: making sqlalchemy work with twisted (was 
Re:[Twisted-Python]SQLAbstraction Layer_


> On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>----- Original Message ----- From: "Jean-Paul Calderone" 
>><exarkun at divmod.com>
>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>Sent: Wednesday, January 18, 2006 7:55 PM
>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>Python]SQLAbstraction Layer_
>>>On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> 
>>>wrote:
>>>>
>>>>----- Original Message ----- From: "Jean-Paul Calderone" 
>>>><exarkun at divmod.com>
>>>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>>>Sent: Wednesday, January 18, 2006 7:10 PM
>>>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>>>Python]SQL Abstraction Layer_
>>>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>>>wrote:
>>>>>>
>>>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>>>mail, i currently believe that this could be possible to achieve by 
>>>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>>>deferToThread(). if one does this, and it doesn't break something 
>>>>>>arcane in sqlalchemy, we shouldn't have to worry about deferreds in 
>>>>>>the client code. is there a reason why this wouldn't work or why it 
>>>>>>shouldn't be done that i am missing?
>>>>>
>>>>>I think you are missing the fact that if you do this, attribute access 
>>>>>will result in a Deferred, not the value of the attribute from the 
>>>>>database, which is not available yet.
>>>>>So client code will have to deal with Deferreds, and in an extremely 
>>>>>unusual manner - every attribute lookup will return a new Deferred.
>>>>
>>>>this would be very much like the 'future' in the actor-based concurrency 
>>>>model, so nothing terribly unusual. however, no, this is not what i want 
>>>>to do. maybe my (bad) ascii art will help:
>>>>
>>>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy 
>>>>sqlengine -> synchronous db query to dbapi -> return to sqlengine -> 
>>>>return to accessor -> return attribute
>>>>
>>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>>async call into dbapi with deferToThread-> control returned to 
>>>>reactor -> another coop thread gets control
>>>>
>>>>... async dbapi result handler ->  return to sqlengine -> return to 
>>>>accessor -> return attribute
>>>>
>>>>did i explain what i mean well?
>>>
>>>Yes.  Unfortunately, this cannot be implemented in CPython without going 
>>>to extreme lengths.
>>
>>it just occurred to me what i was missing. namely, while the dbapi wrapper 
>>can deferToThread() for calls into the real dbapi module, there's no 
>>good/obvious way to yield control to the reactor and have the deferred's 
>>callback return execution to the callsite which invoked the dbapi wrapper 
>>in the first place. is this what you are alluding to?
>>
>>if so, i suspect there might be some generator magic which can make this 
>>work. is this what you meant by 'extreme lengths'?
>
> No, generators are easy.  Extreme lengths are extension modules that move 
> pieces of the C call stack around.  See Stackless Python and the > 
> greenlets module.

yeah, i've looked at those in the past. are you saying they are the only way 
to do this and generators won't work?

>
>>>  Also, there is some discussion among the core Twisted developers 
>>> whether it even represents a good idea at all.  I think the split is 
>>> currently something like 4 to 1 against.  If you look in either my blog 
>>> or glyph's blog for "concurrency" you will find some exposition on the 
>>> matter.
>>
>>there are indeed very good arguments for not doing this in the general 
>>case. i believe the decision to make pb users be aware that the objects 
>>are remote follows from that. i've found that this makes using pb easier 
>>and apps using it easier to design (from a performance risk perspective) 
>>and easier to debug, as well as more robust. i wouldn't argue for making 
>>attribute access implicitly do asynchronous things in the general case, or 
>>in most cases even.
>>
>>however, in the sqlalchemy case, at least for my purposes, it would make 
>>sense to do it to make the integration more seamless.
>>
>
> You may have more reasons to claim this than you have presented, but what 
> you have presented reduces to "it is a good idea in this case > because I 
> think it is a good idea".

nail. head. ;] in short, i trust myself to know that in those cases, an 
async call happens. this wouldn't be good in a general use framework, but 
for an internal product, the cleanliness of the code (and ability to do lazy 
loading) tip the scale, imo.

so, outside of greenlets (reportedly, they make weird things happen from 
time to time, which isn't acceptable) and stackless (sexy, but 
unsupported/not actively developed/does it still work/will it stop 
working?), is there a way to get this done?

-p 




From exarkun at divmod.com  Thu Jan 19 00:03:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 19 Jan 2006 00:03:53 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
In-Reply-To: <19eb01c61cac$398b7030$6402a8c0@dcore>
Message-ID: <20060119050353.2697.1030108747.divmod.quotient.157@ohm>

On Wed, 18 Jan 2006 22:55:43 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>so, outside of greenlets (reportedly, they make weird things happen from 
>time to time, which isn't acceptable) and stackless (sexy, but 
>unsupported/not actively developed/does it still work/will it stop 
>working?), is there a way to get this done?

Weird things, you say?  I can't imagine...

I'm sure you could find or write a solution which is isomorphic to greenlets, but that isn't greenlets.  Or, wait, could you?  I think the conclusion to this thread belongs in alt.coding.philosophy.

Jean-Paul



From matt at pollenation.net  Thu Jan 19 07:56:53 2006
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 19 Jan 2006 12:56:53 +0000
Subject: [Twisted-Python] Service dependencies
Message-ID: <43CF8C95.4070008@pollenation.net>

Hi,

I have a couple of services. The second is dependent on the first being
fully initialised before the second gets set up.

I thought that the order of Service startup was typically handled by
organising services in a hierarchy, and that the startup of the
hierarchy understood deferreds. I was wrong - service.Application is a
MultiService and only understands deferreds in stopService.

There's a DependentMultiService class in twisted.internet.app but that
entire module has been deprecated.

Is there a reason why the MultiService does not support deferreds in
startService?

Is there a reason that DependentMultiService was not moved across to the
twisted.application package?

In other words, what is the recommended way of starting services in the
correct order, including waiting for them to get initialised fully,
these days?

Thanks.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From eric.faurot at gmail.com  Thu Jan 19 08:32:13 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 19 Jan 2006 14:32:13 +0100
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <43CF8C95.4070008@pollenation.net>
References: <43CF8C95.4070008@pollenation.net>
Message-ID: <e012d6b50601190532t1a248630l9be8979bd4205e85@mail.gmail.com>

On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
> Hi,

> In other words, what is the recommended way of starting services in the
> correct order, including waiting for them to get initialised fully,
> these days?

I'd say if service B relies on servcie A, then B.startService
must explicitely call A.startService(). Of course, it requires that
A.startService
must be a noop if called more than once. Now for deferred, I'm not 100% sure,
but I don't think there is something very wrong returning a deferred in
startService.

Eric.

From paul-lists at perforge.com  Thu Jan 19 08:48:49 2006
From: paul-lists at perforge.com (Paul G)
Date: Thu, 19 Jan 2006 08:48:49 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
References: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>
	<19eb01c61cac$398b7030$6402a8c0@dcore>
	<200601191301.34396.Michaels@rd.bbc.co.uk>
Message-ID: <1aea01c61cff$15483610$6402a8c0@dcore>


----- Original Message ----- 
From: "Michael Sparks" <Michaels at rd.bbc.co.uk>
To: <twisted-python at twistedmatrix.com>
Cc: "Paul G" <paul-lists at perforge.com>
Sent: Thursday, January 19, 2006 8:01 AM
Subject: Re: making sqlalchemy work with twisted (was 
Re:[Twisted-Python]SQLAbstraction Layer_


> On Thursday 19 Jan 2006 03:55, Paul G wrote:
>> ----- Original Message -----
>> From: "Jean-Paul Calderone" <exarkun at divmod.com>
>> > On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com>
>> >><exarkun at divmod.com>
>> >>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy 
>> >>>>sqlengine ->
>> >>>>async call into dbapi with deferToThread-> control returned to
>> >>>>reactor -> another coop thread gets control
>> >>>>... async dbapi result handler ->  return to sqlengine -> return to
>> >>>>accessor -> return attribute
> ...
>> >>>Unfortunately, this cannot be implemented in CPython without going
>> >>>to extreme lengths.
> ...
>> > Extreme lengths are extension modules that move
>> > pieces of the C call stack around.  See Stackless Python and the >
>> > greenlets module.
>>
>> yeah, i've looked at those in the past. are you saying they are the only
>> way to do this and generators won't work?
>
> Generators are really only single layer, unless you start manually 
> chaining
> them which requires changing all the other bits of code.

i'm familiar with what generators are/do ;) my question was really meant to 
ask: have you already tried/thought in detail about something similar with 
generators and found that it can be done, can't be done or can't be done 
cleanly enough to make any sense.

> You want to suspend
> execution deeper in the call stack which means you'd need Greenlets or
> Stackless (or *really* sod about nastily with threads...).

well, the problem with generators is that there's no way to yield several 
frames up/down (depending on your arch ;) the stack. so you're talking 
trampolines and possibly nasty stack growth if you have to recurse too much 
before you can unwind etc. i've started hacking this up, but it's giving me 
a headache.

> At that point
> you're into whether you think that's a good idea or not.
>
> I don't know other people's feelings on the matter, but to me it just 
> feels
> wrong in a system that has clear handoff generally speaking to have some
> very hidden handoff as well. At minimum it implies an understanding burden
> on the maintainer. At worst you now have the potential to *really* screw
> things up.

i'm not arguing for this to be done in twisted, merely seeing if it makes 
sense to do locally.

-p 




From exarkun at divmod.com  Thu Jan 19 10:29:31 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 19 Jan 2006 10:29:31 -0500
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <e012d6b50601190532t1a248630l9be8979bd4205e85@mail.gmail.com>
Message-ID: <20060119152931.2697.2120353815.divmod.quotient.238@ohm>

On Thu, 19 Jan 2006 14:32:13 +0100, Eric Faurot <eric.faurot at gmail.com> wrote:
>On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
>> Hi,
>
>> In other words, what is the recommended way of starting services in the
>> correct order, including waiting for them to get initialised fully,
>> these days?
>
>I'd say if service B relies on servcie A, then B.startService
>must explicitely call A.startService().

Why?

>Of course, it requires that A.startService must be a noop if called more 
>than once.

Not a very common property of startService().  Few, if any, of the services Twisted provides offer this property.

>Now for deferred, I'm not 100% sure, but I don't think there is something 
>very wrong returning a deferred in startService.

Well, you won't get a spanking for it.  Nothing pays any attention to the return value of startService, though.

privilegedStartService is run before the reactor has started, so there's no way it could support Deferreds.

startService could probably be modified to support Deferreds.  MultiService is pretty lax about.... everything.  I think this is just one of many possible improvements that could be made.

Jean-Paul



From leszczynscy at yahoo.com  Thu Jan 19 11:25:07 2006
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 19 Jan 2006 08:25:07 -0800 (PST)
Subject: [Twisted-Python] twisted.protocols.dns NAPTR extension question
Message-ID: <20060119162507.41275.qmail@web30012.mail.mud.yahoo.com>

Hi,

I have a question regarding extension
twisted.protocols.dns by NAPTR DNS Resource Record
(RFC 2915). Adding the new class Record_NAPTR and the
NAPTR (35) constant is trivial however when it comes
to decoding the names "flags", "service", "regexp" and
"replacement" I realized that "class Name" attempts to
read all the names in the byte stream and concatenate
them together with "." used as a separator.

I work on my copy of dns.py so I hacked it up a little
and the code looks like here:

    def decode(self,strio,length=None):
       
self.order=struct.unpack('!H',readPrecisely(strio,2))[0]
       
self.preference=struct.unpack('!H',readPrecisely(strio,2))[0]
        self.flags=Name()
        self.flags.decode(strio,concatenate=False)
        self.service=Name()
        self.service.decode(strio,concatenate=False)
        self.regexp=Name()
        self.regexp.decode(strio,concatenate=False)
        self.replacement=Name()
       
self.replacement.decode(strio,concatenate=False)

The new function "Name.decode" argument was added and
defaulted to True in the definition. I wanted to avoid
of using Name and then doing the split on its value
because there are many cases that "." is in the
content of those four names: "flags", "service",
"regexp" and "replacement". 

And the questions:
	-what is the reason in the "Name.decode" to
concatenate names, does any of RRs actually uses that
feature?
	-what would be recommended why to implement NAPTR?
	-I wish to avoid maintaining my own copy of dns.py,
is there any chance/plans that NAPTR would be
supported?


Thanks in advance,
AndyL

In theory, practice and theory are the same. In
practice, they are not.





From moof at metamoof.net  Thu Jan 19 18:16:19 2006
From: moof at metamoof.net (Moof)
Date: Fri, 20 Jan 2006 00:16:19 +0100
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <43CF8C95.4070008@pollenation.net>
References: <43CF8C95.4070008@pollenation.net>
Message-ID: <bff8eeef0601191516t52c8960cy451da7dd0fefa30c@mail.gmail.com>

On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
>
> Hi,
>
> I have a couple of services. The second is dependent on the first being
> fully initialised before the second gets set up.


><snip>

In other words, what is the recommended way of starting services in the
> correct order, including waiting for them to get initialised fully,
> these days?


I actually wrote something like this today, a subclass of MultiService,
because my main service was dependant on there being no other services
running on the same machine, and I had to implement a PB client/server to
ask the other instance to shut down. This is mostly because Windows sucks,
and doesn't allow me to just do a "kill <pid>" on the old one, but gave me
an excuse to start the PB integration of my app. I just subclassed
MultiService and reimplemented startService and stopService appropriately,
not chaining my sub-service starts until I was certain I had managed to
start my own service, and not stopping my service until my sub-services had
stopped.

It's a fairly simple idiom, so it's probably pretty easy to implement
yourself, but I'm surprised a generic one hasn't been written yet. Similarly
I've had to write a new LoopingService that runs a "setup" callable before
looping the main service, and also has a "minimum wait between calls" timer
going on it. None of these have been particulalrly difficult.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060120/5a34eefe/attachment.htm 

From jchiesa at cavtel.net  Thu Jan 19 23:12:11 2006
From: jchiesa at cavtel.net (Alfred Chiesa)
Date: Thu, 19 Jan 2006 23:12:11 -0500
Subject: [Twisted-Python] Twisted and SMTP Footer
Message-ID: <43D0631B.30205@cavtel.net>

Hello All! Quick question:

Can I use Twisted with an existing sendmail server to add a footer to 
every Email going through said SMTP server? Should regular old python be 
the best route?

Thanks!



From dreid at dreid.org  Fri Jan 20 02:27:12 2006
From: dreid at dreid.org (David Reid)
Date: Thu, 19 Jan 2006 23:27:12 -0800
Subject: [Twisted-Python] All night Twisted sprint @SuperHappyDevHouse.
Message-ID: <43D090D0.3010700@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

After attending several (read: all of them) SuperHappyDevHouse[1]
events, with several other Twisted developers, I've decided to organize
an official Twisted sprint for the January 28th event.  In case you're
not aware SuperHappyDevHouse is an all night Hack-a-thon organized by
Jeff Lindsay[2] and David E. Weekly[3] (of the Community Colo[4]) in the
Bay Area, CA.  It's typically filled with a lot of Web2.0 startups, (and
the companies that buy them (read: Yahoo and Google))  I'm hoping to
have a large portion of this sprint take place in meat space, but as
with all past Twisted sprints IRC and Mailing List traffic is always
appreciated.

The SuperHappyDevHouse is located at 2735 Skyfarm Drive, Hillsborough,
CA.  It's easy enough to find, Google Maps[5] knows right where it is.
Parking is kind of sparse so carpool if you can, or if you'd like to
take CalTrain we'll find someone to pick you up.  The most important
thing is to get as many Twisted developers and Fan Boys[6] in the same
place as possible.

Sprint attendees and topics will include Brian Warner working on newpb,
and David Reid (Me) working on twisted.web2 including the unreleased
client branch, and cleaning up trunk for a potential 0.2 release.

So I guess I'm really bad at this, but _anyone_ on the West Coast should
show up.  It'll be great it's a wonderful friendly atmosphere with
wonderfully smart people some great new ideas.</plug>

[1] http://superhappydevhouse.com/
[2] http://blogrium.com/
[3] http://david.weekly.org/
[4] http://communitycolo.net/
[5] http://maps.google.com/maps?q=2735+Skyfarm+Drive,+Hillsborough,+CA
[6] http://www.urbandictionary.com/define.php?term=fanboy

- -David Reid

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0JDGrsrO6aeULcgRAkYeAJ9pvjXPLHfgMW0WIV43RtCou6E7zQCeMLb1
3hdgkTL6LGK64bCxQeuKi5o=
=v1nJ
-----END PGP SIGNATURE-----



From duncan.mcgreggor at gmail.com  Sat Jan 21 00:32:36 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 20 Jan 2006 22:32:36 -0700
Subject: [Twisted-Python] Deferred Groups?
Message-ID: <139eed6a6d819d1383153b3f1d55598c@gmail.com>

I have a question about an approach I used... I'm worried that I've 
over-worked it and have over-looked a more elegant and standard 
solution.

I have the need to fire off network connections in groups. Deferreds 
added to a DeferredList don't fit the bill (because there's no control 
over all the deferreds in the list). As an example, if you wanted to 
make a whole batch of concurrent connections, but didn't want to incur 
the overhead of firing off more than 20 simultaneous connections, you'd 
split your destination hosts up into groups of 20. As a group was 
completed, a callback could fire off the next group, etc.

What's more, I didn't want to put this kind of control in a factory or 
a protocol. In my mind, that didn't seem the proper place for it...

I have some test code that generates the following output. I created a 
class that instantiates a ClientFactory instance and then manages a set 
of deferreds and deferred lists. Here's some sample output:

Entered main run() loop.
deferred #1 is connecting to adytum.us...
deferred #2 is connecting to del.icio.us...
deferred #3 is connecting to google.com...
Left main run() loop.
deferred #1 connected!
deferred #2 connected!
deferred #3 connected!
Finished with Group 1
deferred #4 is connecting to last.fm...
deferred #5 is connecting to washingtonpost.com...
deferred #6 is connecting to yahoo.com...
deferred #5 connected!
deferred #6 connected!
deferred #4 connected!
Finished with Group 2
deferred #7 is connecting to microsoft.com...
deferred #8 is connecting to amazon.com...
deferred #7 connected!
deferred #8 connected!
Finished with Group 3
Finished all groups.

Here are some pertinent parts of the code (full pasting: 
http://pastebin.adytum.us/39/1 ):

class DeferredsByGroup(object):
[...]
     def initiate(self):
         self.groups = self.splitLoad(self.hosts, self.hosts_per_group)
         # get the first group and let the callback handle the next one
         host_group = self.groups.next()
         dl = self.setupGroupDeferred(host_group)
         dl.addCallback(self.getNextGroup)
         dl.addErrback(self.noMoreGroups)

     def splitLoad(self, host_list, per_group):
         group_count, remainder = divmod(len(host_list), per_group)
         if remainder: group_count += 1
         for i in xrange(group_count):
             yield host_list[i*per_group:i*per_group+per_group]
[...]
     def getNextGroup(self, null):
         group = self.groups.next()
         dl = self.setupGroupDeferred(group)
         dl.addCallback(self.getNextGroup)
         dl.addErrback(self.noMoreGroups)

     def setupHostDeferred(self, host):
         self.host_counter += 1
         name = "deferred #%s" % self.host_counter
         f = Factory(host, name)
         d = f.deferred
         d.addCallback(self.updateData)
         return d

     def setupGroupDeferred(self, group):
         self.group_counter += 1
         # iterate through each host in the group
         deferreds = [ self.setupHostDeferred(host) for host in group ]
         # set up this group as a deferred list
         dl = defer.DeferredList(deferreds)
         dl.addCallback(self.handleGroup)
         dl.addErrback(self.handleFailure)
         return dl
[...]

And this is instantiated in the following manner:

hosts = [
         'adytum.us',
         'del.icio.us',
         'google.com',
         'last.fm',
         'washingtonpost.com',
         'yahoo.com',
         'microsoft.com',
         'amazon.com',
]
hosts_per_group = 3
runner = DeferredsByGroup(hosts, hosts_per_group)
runner.initiate()
reactor.run()




From mcfletch at rogers.com  Sat Jan 21 08:55:01 2006
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Sat, 21 Jan 2006 08:55:01 -0500
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
Message-ID: <43D23D35.2080104@rogers.com>

Duncan McGreggor wrote:

> I have a question about an approach I used... I'm worried that I've 
> over-worked it and have over-looked a more elegant and standard solution.
>
> I have the need to fire off network connections in groups. Deferreds 
> added to a DeferredList don't fit the bill (because there's no control 
> over all the deferreds in the list). As an example, if you wanted to 
> make a whole batch of concurrent connections, but didn't want to incur 
> the overhead of firing off more than 20 simultaneous connections, 
> you'd split your destination hosts up into groups of 20. As a group 
> was completed, a callback could fire off the next group, etc.

This functionality (or, something very close) is in the deferred module 
already, it's just non-obvious how you use it:

sem = defer.DeferredSemaphore(count)
dl = [sem.run(callable, item, *args, **named) for item in iterable]
return defer.DeferredList(dl, consumeErrors=True)

which, rather than "batching" (which means that you have 3, then 2, then 
1 in play, then 3, then 2, then 1), keeps "count" items in play at any 
time (as long as there are available items), replacing each item that 
completes with one pending item.  I wrap that bit of code with a little 
function called parallel in my code so I don't have to remember the 
trick every time.

HTH,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From moof at metamoof.net  Sat Jan 21 09:01:03 2006
From: moof at metamoof.net (Moof)
Date: Sat, 21 Jan 2006 15:01:03 +0100
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
Message-ID: <bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>

On 1/21/06, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>
> I have a question about an approach I used... I'm worried that I've
> over-worked it and have over-looked a more elegant and standard
> solution.
>
> I have the need to fire off network connections in groups. Deferreds
> added to a DeferredList don't fit the bill (because there's no control
> over all the deferreds in the list). As an example, if you wanted to
> make a whole batch of concurrent connections, but didn't want to incur
> the overhead of firing off more than 20 simultaneous connections, you'd
> split your destination hosts up into groups of 20. As a group was
> completed, a callback could fire off the next group, etc.
>
> What's more, I didn't want to put this kind of control in a factory or
> a protocol. In my mind, that didn't seem the proper place for it...


This is one approach. It has the characteristic that if one site in your
group is considerably slower than the others, you will wait till all the
sites in your group are finished before firing off the next group. This may
or may not be  good thing for your particular app.

An alternative is to create a "pool" of connections that will consume from a
queue of potential connections. you feed your list into a DeferredQueue, and
create as many concurrent connection handlers as you want, that will all
consume from that same queue. this has the characteristic that as long as
you keep the queue full you are constantly running 20 connections. This may
or may nto be an advantage in the case of your application.

Or if you want to use the built-in twisted magic, take a look at
twisted.protocols.policies.ThrottlingFactory and other similar things int he
same package see if one can be adapted to your use.

Keep in mind that twisted is not *actually* concurrent, so you may not need
to throttle your connections that much, you might be able to let the reactor
handle the connection load itself.

Actually, given that the reactor handles a thread pool size, is there an
equivalent "connection pool size" that can be manipulated from inside the
programme? Does such a concept have any use or meaning?

Moof - not a reactor expert, as you can see.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060121/0a08c428/attachment.htm 

From rabs at dimension-virtual.com  Sat Jan 21 15:20:50 2006
From: rabs at dimension-virtual.com (=?iso-8859-1?Q?Ra=FAl_Alexis_Betancort_Santana?=)
Date: Sat, 21 Jan 2006 19:20:50 -0100
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
Message-ID: <00c101c61ec8$2c223690$fd011aac@SALMA>

Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...

c:\python24\lib\site-packages\twisted\python\context.py:74: DeprecationWarning: threadable.whenThreaded is deprecated. Use application-level logic instead.
  threadable.whenThreaded(initThreads)
Traceback (most recent call last):
  File "prueba.py", line 11, in ?
    from twisted.internet import reactor
  File "c:\python24\lib\site-packages\twisted\internet\reactor.py", line 11, in ?
    from twisted.internet import selectreactor
  File "c:\python24\lib\site-packages\twisted\internet\selectreactor.py", line 22, in ?
    from twisted.internet import posixbase
  File "c:\python24\lib\site-packages\twisted\internet\posixbase.py", line 25, in ?
    from twisted.internet import tcp, udp
  File "c:\python24\lib\site-packages\twisted\internet\tcp.py", line 65, in ?
    from twisted.internet import protocol, defer, base, address
  File "c:\python24\lib\site-packages\twisted\internet\base.py", line 239, in ?
    class ReactorBase:
  File "c:\python24\lib\site-packages\twisted\internet\base.py", line 244, in ReactorBase
    if platform.supportsThreads():
AttributeError: Platform instance has no attribute 'supportsThreads'


Any help would be appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060121/971eb9c4/attachment.htm 

From exarkun at divmod.com  Sat Jan 21 15:23:18 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 21 Jan 2006 15:23:18 -0500
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
In-Reply-To: <00c101c61ec8$2c223690$fd011aac@SALMA>
Message-ID: <20060121202318.2697.125639135.divmod.quotient.671@ohm>

On Sat, 21 Jan 2006 19:20:50 -0100, Ra?l Alexis Betancort Santana <rabs at dimension-virtual.com> wrote:
>Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...
>
>c:\python24\lib\site-packages\twisted\python\context.py:74: DeprecationWarning: threadable.whenThreaded is deprecated. Use application-level logic instead.
>  threadable.whenThreaded(initThreads)
> [snip]
>    if platform.supportsThreads():
>AttributeError: Platform instance has no attribute 'supportsThreads'
>

You seem to have managed to combine a pre-2.1.0 version of context.py with a 2.1.0 version of runtime.py.  How did you install Twisted?  You might try deleting the entire twisted directory out of your site-packages and re-installing.

Jean-Paul



From duncan.mcgreggor at gmail.com  Sat Jan 21 18:04:08 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 16:04:08 -0700
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <43D23D35.2080104@rogers.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<43D23D35.2080104@rogers.com>
Message-ID: <e79243816f71bdc4beb0ebe3214cccc1@gmail.com>


On Jan 21, 2006, at 6:55 AM, Mike C. Fletcher wrote:

> Duncan McGreggor wrote:
>
>> I have a question about an approach I used... I'm worried that I've 
>> over-worked it and have over-looked a more elegant and standard 
>> solution.
>>
>> I have the need to fire off network connections in groups. Deferreds 
>> added to a DeferredList don't fit the bill (because there's no 
>> control over all the deferreds in the list). As an example, if you 
>> wanted to make a whole batch of concurrent connections, but didn't 
>> want to incur the overhead of firing off more than 20 simultaneous 
>> connections, you'd split your destination hosts up into groups of 20. 
>> As a group was completed, a callback could fire off the next group, 
>> etc.
>
> This functionality (or, something very close) is in the deferred 
> module already, it's just non-obvious how you use it:
>
> sem = defer.DeferredSemaphore(count)
> dl = [sem.run(callable, item, *args, **named) for item in iterable]
> return defer.DeferredList(dl, consumeErrors=True)
>
> which, rather than "batching" (which means that you have 3, then 2, 
> then 1 in play, then 3, then 2, then 1), keeps "count" items in play 
> at any time (as long as there are available items), replacing each 
> item that completes with one pending item.  I wrap that bit of code 
> with a little function called parallel in my code so I don't have to 
> remember the trick every time.

Ah, this is fantastic! Thanks for the heads up. I've been buried in the 
deferred file for the paste few days and have no idea how I missed 
this... I'm now reading through the entire file to see what other 
goodies I might have missed...

I've replaced almost all of that test code, and it works like a charm. 
Your usage example was a huge time-saver -- thanks!

d




From duncan.mcgreggor at gmail.com  Sat Jan 21 18:06:51 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 16:06:51 -0700
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>
Message-ID: <fe3ea0b8d89365e4e5b088285426aa5c@gmail.com>


On Jan 21, 2006, at 7:01 AM, Moof wrote:

> On 1/21/06, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>
>> over-worked it and have over-looked a more elegant and standard
>> solution.
>>
>> I have the need to fire off network connections in groups. Deferreds
>> added to a DeferredList don't fit the bill (because there's no control
>> over all the deferreds in the list). As an example, if you wanted to
>> make a whole batch of concurrent connections, but didn't want to incur
>>  the overhead of firing off more than 20 simultaneous connections, 
>> you'd
>> split your destination hosts up into groups of 20. As a group was
>> completed, a callback could fire off the next group, etc.
>>
>> What's more, I didn't want to put this kind of control in a factory or
>> a protocol. In my mind, that didn't seem the proper place for it...
>
> An alternative is to create a "pool" of connections that will consume 
> from a queue of potential connections. you feed your list into a 
> DeferredQueue, and create as many concurrent connection handlers as 
> you want, that will all consume from that same queue. this has the 
> characteristic that as long as you keep the queue full you are 
> constantly running 20 connections. This may or may nto be an advantage 
> in the case of your application.
>
> Or if you want to use the built-in twisted magic, take a look at 
> twisted.protocols.policies.ThrottlingFactory and other similar things 
> int he same package see if one can be adapted to your use.
>
> Keep in mind that twisted is not *actually* concurrent, so you may not 
> need to throttle your connections that much, you might be able to let 
> the reactor handle the connection load itself.
>
> Actually, given that the reactor handles a thread pool size, is there 
> an equivalent "connection pool size" that can be manipulated from 
> inside the programme? Does such a concept have any use or meaning?
>
> Moof - not a reactor expert, as you can see.

But very cool ideas and some great things to explore -- thanks!

d




From rabs at dimension-virtual.com  Sat Jan 21 20:24:40 2006
From: rabs at dimension-virtual.com (=?UTF-8?Q?Ra=C3=BAl_Alexis_Betancort_Santana?=)
Date: Sun, 22 Jan 2006 00:24:40 -0100
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
References: <20060121202318.2697.125639135.divmod.quotient.671@ohm>
Message-ID: <020901c61ef2$9e191280$fd011aac@SALMA>

You was ok, it's apears that there was and old version of twisted sitting 
around, solved, thx for you help

----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, January 21, 2006 7:23 PM
Subject: Re: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP


> On Sat, 21 Jan 2006 19:20:50 -0100, Ra?l Alexis Betancort Santana 
> <rabs at dimension-virtual.com> wrote:
>>Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with 
>>python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and 
>>TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...
>>
>>c:\python24\lib\site-packages\twisted\python\context.py:74: 
>>DeprecationWarning: threadable.whenThreaded is deprecated. Use 
>>application-level logic instead.
>>  threadable.whenThreaded(initThreads)
>> [snip]
>>    if platform.supportsThreads():
>>AttributeError: Platform instance has no attribute 'supportsThreads'
>>
>
> You seem to have managed to combine a pre-2.1.0 version of context.py with 
> a 2.1.0 version of runtime.py.  How did you install Twisted?  You might 
> try deleting the entire twisted directory out of your site-packages and 
> re-installing.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> !DSPAM:43d29b0720208818784833!
>
> 





From duncan.mcgreggor at gmail.com  Sat Jan 21 20:09:56 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 18:09:56 -0700
Subject: [Twisted-Python] TimeoutError in BaseConnector
Message-ID: <da13e8c984ac86675637bef6a090f912@gmail.com>

Hey all,

I have an issue with the following in t.i.base.BaseConnector:

if self.timeout is not None:
     self.timeoutID = self.reactor.callLater(self.timeout,
         transport.failIfNotConnected, error.TimeoutError())


Might it be more useful and less misleading to describe this a little 
more? I was quite perplexed at an unexpected timeout error, until I 
realized it was being generated by the connector. I kept getting this 
message:

   User timeout caused connection failure.

While technically true, I was mislead but the "User timeout" bit, and 
it took me a while to get my bearings, quit futzing with the factory 
and protocol settings, and track this down. I made the following change 
in my local t.i.base:

if self.timeout is not None:
     self.timeoutID = self.reactor.callLater(self.timeout,
         transport.failIfNotConnected,
         error.TimeoutError("Could not connect after %s seconds" % 
self.timeout))

This results in the less cryptic:

"User timeout caused connection failure: Could not connect after 30 
seconds."

Shall I submit a patch in trac?

Thanks,

d




From duncan.mcgreggor at gmail.com  Sat Jan 21 20:32:59 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 18:32:59 -0700
Subject: [Twisted-Python] Re: TimeoutError in BaseConnector
In-Reply-To: <da13e8c984ac86675637bef6a090f912@gmail.com>
References: <da13e8c984ac86675637bef6a090f912@gmail.com>
Message-ID: <17394b85b00b92bcf8a3f064b9fbe771@gmail.com>


On Jan 21, 2006, at 6:09 PM, Duncan McGreggor wrote:

> While technically true, I was mislead but the "User timeout" bit, and 
> it took me a while to get my bearings, quit futzing with the factory 
> and protocol settings, and track this down. I made the following 
> change in my local t.i.base:

Hmm. The more I think about this, the more I'm willing to quibble about 
"User timeout" being used here. It may be a matter of semantics, but I 
have always perceived the "user end" to be with 
factories/clients/protocols. This isn't that end at all... it's the 
reactor/connector end. Should this be called a "User timeout"? What 
about "Connector timeout"?




From exarkun at divmod.com  Sat Jan 21 20:46:48 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 21 Jan 2006 20:46:48 -0500
Subject: [Twisted-Python] TimeoutError in BaseConnector
In-Reply-To: <da13e8c984ac86675637bef6a090f912@gmail.com>
Message-ID: <20060122014648.2697.1102324432.divmod.quotient.674@ohm>

On Sat, 21 Jan 2006 18:09:56 -0700, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
> [snip]
>
>Shall I submit a patch in trac?

In any event, bugs should not be filed in trac.  They should be filed at <http://twistedmatrix.com/bugs/>.

Jean-Paul



From andrea at cpushare.com  Sat Jan 21 20:53:12 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 02:53:12 +0100
Subject: [Twisted-Python] CPUShare-Twisted
Message-ID: <20060122015312.GC20603@opteron.random>

Hello everyone,

if you've pending patches that have not been applied or you've
no time for unittests until your project works, you can consider
switching to CPUShare-Twisted. Mercurial allows distributed development
so we can merge our branches against each other with very little effort.

If you've suggestion for betters names you're welcome. I could have done
it over sourceforge but they lack mercurial AFIK and since I've the
setup on cpushare.com I was quick to add Twisted to it. We can move it
elsewhere later if needed (especially if it consumes too much network
bandwidth ;).

I have no interest to maintain twisted except for the fact I'm using it
in semi-production and I plan to use it in production, and so I need it
to be stable, and with all possible bugfixes and features applied
without formalities. I assume other business usages of twisted may have
the same needs, so perhaps we can join our efforts with this project.

My choice was to either dump twisted or to maintain it locally, and so I
clearly have an interest to make the CPUShare-Twisted branch public and
to include other people fixes and features (I was already maintaining it
over the last year except it was just a patch with fixes that I failed
to push in SVN, and not a real fork).

You can find the quickstart, basic objectives (including the not trying
to reinvent the wheel) and mailing list details on the project page:

	http://www.cpushare.com/twisted

I'll keep tracking SVN. I'll also keep submitting patches upstream since
one can always hope for the best.

Also note, over the last year I've fixed at least one bug in core
twisted basic protocols that would have never been found with any
unittest out there. Careful auditing and reading code and filtering of
the patches, and thinking deeply about the design before writing code
(to write the code in a way that won't break easily over time), is much
more important than spending time on unittests. Unittests still makes
perfect sense after stuff is included and works in basic testing, but
they should be separated from the logic of committing valid patches to
the tree.

NOTE: before clicking on that page you may want to also answer these
questions:

1) is python much better than ruby and all other language on earth?
2) is twisted much better than any other framework to write network apps?
3) are twisted and python fast and scalable enough for all applications?
4) is the single threaded model scalable enough for all applications in
   smp?
5) is async programming using deferreds simpler to code for a webserver
   that is stateless and that only does sql queries over the network?
6) would you rather prefer to go broke than to use code
   "not-invented-here" or not written with python and twisted?
   (of course the python interpreter the c compiler and the underlying
   operative system are magically excluded from the not-invented-here
   clause for whatever unknown reason)

I'm welcome anybody who wants to join cpushare-twisted, but if the
answer of _any_ of the above questions is "yes", I think you may be
better off ignoring this email.



From glyph at divmod.com  Sat Jan 21 23:55:44 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 21 Jan 2006 23:55:44 -0500
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
Message-ID: <20060122045544.2697.96381428.divmod.quotient.702@ohm>

On Sun, 22 Jan 2006 02:53:12 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

>if you've pending patches that have not been applied or you've
>no time for unittests until your project works, you can consider
>switching to CPUShare-Twisted. Mercurial allows distributed development
>so we can merge our branches against each other with very little effort.

If you've pending patches that have not been applied, would you please consider instead to agitate for those patches on the mailing lists, and add information to them in the tracker?  Discussing an abandoned patch can cast some light where it is needed.  Putting it into the CPUShare fork rather than the bugtracker virtually guarantees that no core Twisted developer will ever look at it.  Not that you can't do both - I just want to make it clear that we're going to keep working off the bugtracker and SVN, not off of random mercurial (or git or bzr or monotone - not to pick on hg) repositories run by users.

Also, Andrea, would you mind making sure that your codebase is visually distinct from Twisted in some way that is identifiable when it is run?  My main concern here is that if CPUShare-Twisted is to become popular, it seems likely that users might confuse it with the actual Twisted.  Since you have loudly declared your animosity towards filing bugs, I assume CPUShare-Twisted will not have its own bugtracker, and since you are opposed to test-driven development, I am sure that it will be full of bugs.  I would prefer it if we could avoid asking the Twisted team to deal with those bugs as well as actual bugs in Twisted, when users discover the only Twisted bugtracker is on twistedmatrix.com.

The best option would be to avoid using the same module name, but I understand that tracking trunk would be made more difficult with a diff that touched every import.  Perhaps instead you could change the version from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is visible at the beginning of any logs, and change the names of the command line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save time since developers could reject bugs immediately upon seeing one of those commands or the telltale log message rather than having to identify that the line numbers are all wrong before doing so.



From andrea at cpushare.com  Sun Jan 22 01:52:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 07:52:18 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122045544.2697.96381428.divmod.quotient.702@ohm>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
Message-ID: <20060122065218.GI20603@opteron.random>

On Sat, Jan 21, 2006 at 11:55:44PM -0500, glyph at divmod.com wrote:
> If you've pending patches that have not been applied, would you please 
> consider instead to agitate for those patches on the mailing lists, and add 

These are the very old ones (ignore the web2 part that is recent).

http://www.cpushare.com/hg/Twisted/?cs=400da64bd5a6

IIRC you said that disconnecting isn't present in all protocols, not sure if
you added disconnecting to all protocols. There was a discussion to add
more names, but I didn't see any fix going into SVN trunk. I need it in
tcp and these fixes are good enough for my usage (call it dirty fix but
it works for me). The other is a fundamental feature I need from the
proxy, it's backwards compatible so it doesn't add up any risk but I
never received feedback on it. Without it, it's impossible to safely
stack one server on top of the other without losing the client info.

I'm in discussion how to add it to web2 with headers instead of path
mangling.

> information to them in the tracker?  Discussing an abandoned patch can cast 
> some light where it is needed.  Putting it into the CPUShare fork rather 

I agree, but I always needed the fix since day zero. I had to maintain
it for so long. The fact I'm exporting the tree in a public way can't make
things worse as far as SVN integration is concerned. If something it can
make things better, since with a public tree there may be more interest
from your part in reducing the diff to nothing ;).

> than the bugtracker virtually guarantees that no core Twisted developer 
> will ever look at it.  Not that you can't do both - I just want to make it 
> clear that we're going to keep working off the bugtracker and SVN, not off 
> of random mercurial (or git or bzr or monotone - not to pick on hg) 
> repositories run by users.

Sure I understand that.

> Also, Andrea, would you mind making sure that your codebase is visually 
> distinct from Twisted in some way that is identifiable when it is run?  My 
> main concern here is that if CPUShare-Twisted is to become popular, it 
> seems likely that users might confuse it with the actual Twisted.  Since 
> you have loudly declared your animosity towards filing bugs, I assume 
> CPUShare-Twisted will not have its own bugtracker, and since you are 
> opposed to test-driven development, [..]

My developmnt is generally test-driven. I'm only opposed to unit-test
mandatory development to fix bugs or add new features. Writing unit-test
isn't the only way to test code. It's nice to have a unit test, even a
simple one, but it shouldn't be mandatory.

> [..] I am sure that it will be full of bugs. 

Time will tell. Since you made your prediction I'll make mine. I'm sure
axiom is wasted time in its current API (at least as far as twisted is
concerned).

I don't see how you can advertize axiom saying "We do plan to add some
later, and perhaps also support other databases in the future.". Sure
you can add it, but if you do it, the whole axiom api will fall apart
unless you want to make synchronous queries over the network. The only
two deferreds you have are during startup and in the testsuite, just
grep for the word Deferred. Making synchronous sql queries in the
twisted async model is unacceptable for anything serious.  Infact even
sqllite queries are obviously unacceptable once the db grows beyond the
size of the cache (and for sure you can't scale the queries over
different servers to have more ram-cache when using sqllite).

Ironically axiom current api would have a chance to work well with
threads, with twisted single threaded async model not.

There are good python storage packages to use with twisted and threads
(heck there is even pgasync if you're religious about not using
threads, why do you think people like me, Valentino and the pgasync
author care about using non-blocking solutions while doing queries to
the db?). I can't imagine why you insist on making your inferior
solution with a design that can't work well with twisted.

I'm feeling guilty for risking hitting the harddisk for a few msec when
people clicks on the mailing list archives, and infact I keep two
webservers exactly to avoid hurting the scalability of the ssl one.

> I would prefer it if we could avoid asking the Twisted team to deal with 
> those bugs as well as actual bugs in Twisted, when users discover the only 
> Twisted bugtracker is on twistedmatrix.com.

Sure.

> The best option would be to avoid using the same module name, but I 
> understand that tracking trunk would be made more difficult with a diff 
> that touched every import.  Perhaps instead you could change the version 
> from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is 

Ok, I'll make this change right away. I already did that for the web2 side.

> visible at the beginning of any logs, and change the names of the command 
> line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save 
> time since developers could reject bugs immediately upon seeing one of 
> those commands or the telltale log message rather than having to identify 
> that the line numbers are all wrong before doing so.

This is a very fair requirement (changing the version is trivial).
However I don't see much point in changing the commands if the module
name is the same. Either I change both, or none. I mean, changing
cpushare-twistd won't prevent a python app importing the reactor to get
mine instead of the official one, so you would still risk to get bogus
bugreports unless I rename both. I think I can rename the module later
if some people uses it, right now I've no idea if people will use it, or
if I'll remain the only user (clearly as long as I'm the only user I
don't need to rename the module ;).



From glyph at divmod.com  Sun Jan 22 04:59:12 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 22 Jan 2006 04:59:12 -0500
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: 0
Message-ID: <20060122095912.2697.1307843016.divmod.quotient.768@ohm>

On Sun, 22 Jan 2006 07:52:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Sat, Jan 21, 2006 at 11:55:44PM -0500, glyph at divmod.com wrote:
>> If you've pending patches that have not been applied, would you please
>> consider instead to agitate for those patches on the mailing lists, and add
>
>These are the very old ones (ignore the web2 part that is recent).
>
>http://www.cpushare.com/hg/Twisted/?cs=400da64bd5a6

>IIRC you said that (some stuff)

I'm sorry I was unclear, and you typed all that stuff to no effect.  Discussions that draw attention to unapplied patches should really refer to bug URLs in the tracker.

If they don't, nobody can tell how long the patches have been languishing, who was supposed to apply them, or why they weren't applied, unless there are links to dozens of previous mailing list messages in each post.  Also, summaries of these discussions should be attached to the ticket by the reporter or the maintainer, if they advance the issue at all.  Overall, without some support from the tracker, we just don't know whether the issues are really stuck on a serious problem, or whether someone has just become confused about what is required to make progress on the bug.

Even the absence of information on a bug can be useful.  "Why hasn't anybody replied to this for 6 months?  Was there some discussion on IRC?" can lead someone to post a helpful summary of current status if they have a recollection of where it did end up... sometimes, the bugs have even been fixed, and nobody has noted that fact.

>Sure I understand (twisted devs will work from bugtracker)

Thank you.

>My developmnt is generally test-driven.

Maybe, but it sure doesn't sound like it.  If your development is test-driven that means you are used to writing unit-tests *first*, not hacking in a fix and testing *later*, which is what you have repeatedly suggested.  "TDD" is not the same thing as "unit testing".

FWIW Twisted does not require TDD.  I do not personally do TDD much of the time.  I think tests need to be added before a feature is added, but I don't always have a clear enough picture of what the code will look like to write tests, before I've tried to write the code.

>I'm only opposed to unit-test
>mandatory development to fix bugs or add new features. Writing unit-test
>isn't the only way to test code. It's nice to have a unit test, even a
>simple one, but it shouldn't be mandatory.

Hmm.  "Unit Test Mandatory Development" - UTMD.  That sounds like a good acronym.  I think I will use it in the future.

One productive use of this set of threads is that I've repeated our testing policy - UTMD - in a few different ways.  I'm not sure that I can explain it to you (you seem to have some resistance to understanding) but maybe this will be useful to others.

Whether unit tests *should* be required is a discussion that requires some kind of value system.  What's good, what's bad, etc.  Right now unit testing *is* required.  There is a reason.  Unit testing is not the objective here, rather, requiring unit tests provides a mechanism to satisfy a greater requirement.  If you can suggest a better way to achieve that requirement then perhaps we can discuss other strategies.

Twisted is used by lots of different people in lots of different ways.  Before test requirements were adopted, it was quite common for a developer who fixed a bug in one system on one platform broke another system on another platform.  We are trying to improve Twisted, and such changes are not improvements.  Such changes simply muddle around the set of places and times where Twisted works correctly, they don't enlarge it.

Conceptually this makes sense.  Software is extremely complex, etc.  If you want to fix a bug, you need a way to verify that it doesn't introduce a new bug, or at least a way to verify that *previously*-verified behavior is still working as expected, in previously-verified environments.

That is the goal that unit tests serve.  Without unit tests, *we do not know* whether a particular change will continue to work in the face of future changes, or if it broke past changes.  We can reason about the breakage on past changes, at least, but to think that we can actually understand the impact of the patch on a system the size of even something modest like Twisted is hubris.  Every software project has embarrassing releases that break obvious frequently-used functionality - even projects with *better* testing track-records than Twisted has.  I believe Linus coined the term "brown paper release", for the brown paper bag you have to wear on your head to prevent being recognized after such an event.

However, we can't even attempt to reason about future changes, because we can't possibly consider them when reviewing a current change.  Is it likely that other things might break this later?  How could we possibly know, without a way to accurately predict the future?

Consider that different people review different patches to Twisted at different times, and they have different skill levels.  I have written and read a LOT of Twisted code, and I doubt that even I understand 90% of it.  This partial ignorance makes reviewing past changes a lot like reviewing future changes - a change might break something in a Twisted subsystem the reviewer didn't even know about.

Of course, unit tests are imperfect too; we don't have 100% coverage, and even if we did, we wouldn't have 100% coverage in combination.  Still, they are the best option that we know about.

Can you suggest an alternative to unit tests that would accomplish this goal of providing some level of knowledge as to whether Twisted is probably improving or just changing randomly between releases?

Here are some objections which don't really address the question, just so I can head these off before they are asked.  Andrea - some of these are quite silly and I don't mean to imply that you are necessarily going to ask all of these questions, but I am now writing this for a general audience, and these *are* questions others have asked me.

"but, my changes are so simple, what could they break"

There is a story about a butterfly and a hurricaine that you need to read.  Simple changes can have complex effects that break things horribly.

"not EVERYTHING in Twisted has to be tested.  some easy stuff could break, it's not likely since it doesn't change too often, and you could just do another release"

This leads to a game of whack-a-mole.  One bug pops up, you smash it down.  That makes another bug pop up.  You smash it down.  The whole time, you feel like you are being very productive, because you are fixing all these bugs! Really though, you're just making the same two motions over and over again between different releases.  'back and forth' is an oversimplification, of course.  In reality the cycle probably takes hundreds of releases and goes through dozens of features in various combinations.  Nevertheless, things get fixed, and other things break.

"you can just test it manually"

No, you can't.  There is a HUGE combinatorial explosion of work involved - did you test it with every revision?  Did you test it on Windows?  Did you test it on a slow machine?  Did you test it with Python2.3?  Did you test it with Python 2.3 - on Windows?  Did you test the OTHER thing with Python 2.3 on Windows?  Did you test the other thing with Python 2.4 on Windows?  What about FreeBSD?  What about QNX?  What about AIX?!??!?  What about Linux 2.4?

Right now this matrix has over 20,000 units of work in it, just based on the current buildbots and the tests they're supposed to be running (and as you can see on the buildbot page, we are still trying to get the EXISTING features into shape, it is no wonder we don't want to rush to accept new ones quickly).

Every unit test that is added does the work of manual testing on 9 configurations on 4 platforms every time someone does a commit, which is several times a day.  Do the math.  Even replicating our *current* automated testing with a manual replacement would take something like a million dollars a week in tester salaries, if we were to pay them.  Open source does produce some really good free labor, but not NEARLY that much, and Twisted is a small project besides.

"other projects release untested code, why can't you"

Didn't your mother ever tell you "If Billy jumped off a bridge, would you jump off a bridge too?"  (Wait, am I being "Mommist" now? ;-))

"Some projects separate testing from development, such as the LTP"

Forgetting any flames about Linux's stability for a moment (let's be fair: for such a large piece of software that changes so fast, it's amazingly robust), this is the brute force approach.

LTP is sponsored by IBM and SGI.  It is a HUGE project - at one point, I visited the LTP booth at LinuxWorld.  Twisted does not have a booth at any conference.  Just the test project on linux has ten times as many people as Twisted.  With fewer resources, we have to have a better strategy, otherwise we will not find any bugs.  And by the way, even with all that testing that the LTP does, sometimes Twisted finds even regressions in Linux, remember? :)

>> [..] I am sure that it will be full of bugs.
>
>Time will tell.

Code that has passing tests almost by definition has fewer bugs than code which does not have passing tests.  At the very least, it has more bugs in an unresolved quantum state, because you haven't observed them - so the probability of actual bugs is higher.

They whole point of this fork is that you want to put more bugs in and don't want to take the effort to verify that they won't be introduced.  I am not making a prediction about your skill, I am making an observation on the nature of the project.

>Since you made your prediction I'll make mine. I'm sure
>axiom is wasted time in its current API (at least as far as twisted is
>concerned).

Axiom was developed for a specific application.  It is not appropriate for everyone.  Some people like it, some people don't.  The ones who like it can go ahead and use it.

>I don't see how you can advertize axiom saying "We do plan to add some
>later, and perhaps also support other databases in the future.".

>Sure you can add it, but if you do it, the whole axiom api will fall apart
>unless you want to make synchronous queries over the network. The only
>two deferreds you have are during startup and in the testsuite, just
>grep for the word Deferred.

I think you mean we are going to add more Deferreds later?  There will be a different operational mode for 'transact' which returns a Deferred; the exact spelling hasn't been determined yet, but surely the semantics for that mode will be different and it will not work with all existing axiom code.  (Of course, existing axiom code will not invoke that mode, so it will continue to work side-by-side code which does use it happily enough.)

>Making synchronous sql queries in the
>twisted async model is unacceptable for anything serious.

Everyone is welcome to think that Axiom is not very serious.  I am not a serious person.  Twisted, in fact, is not serious, as you yourself pointed out - Twisted.Quotes proves it.

>Infact even
>sqllite queries are obviously unacceptable once the db grows beyond the
>size of the cache

Only if you're not using an index.  An implication of the current axiom model is that you had better be damn sure that you've got indexes in the right place.

>(and for sure you can't scale the queries over
>different servers to have more ram-cache when using sqllite).

Who says your application has to scale by doing multi-machine queries within a single database?  Google's search team doesn't (at least according to the papers they've published), and I think they know something about scale.  You could apply their same general technique, or the one Netezza uses, to Axiom: either (google style) segment your application data into logical groups, and have high-level queries only talk to appropriate nodes, or (netezza) make null queries really fast (netezza has crazy stuff for this, I think, but Axiom would just use indexes), then run every query on every node in parallel, return results to an aggregating node.  It currently requires extra work, but in our application at least, you rarely want to query the whole universe.  At some point I imagine we will add support for that.

Anyway, I hope that indicates that I have considered the issue of scale a little bit.  Right now scale is not my biggest concern but I am confident we can handle it.  If Divmod were to have a potential customer approach us and say, "we want Axiom to scale to a hundred million node cluster, and we have a very complex application, and we want to get to that scale within a month.  can we do that?"  I'd say no.

That doesn't mean it will never scale.  If a potential client were instead to say, "we have a six month timeframe, and such-and-such budget, can we launch something and eventually scale to a billion users with axiom?"  I'd say yes, probably.  Depends on our allocation in the budget, of course ;-).  The application would have to be aware of scaling issues in its own code.

It turns out that you always do anyway.  The "sufficiently parallel cluster" of RDBMS machines is like the "sufficiently smart compiler" that LISP people talk about.  The existence of projects like memcached indicates that there is a general problem with the idea that you can just use one giant database and scale it up and up and up.

>Ironically axiom current api would have a chance to work well with
>threads, with twisted single threaded async model not.

Database-managed concurrency is not the same thing as shared-state threading.    You might superficially implement database-managed concurrency with shared-state threads for convenience, but the whole programming model is different - most importantly, you don't touch locking from application code, ever.  I need to write a blog post about that or something, but I doubt I will do it justice.  There are easily 3 CS Ph.D dissertations in that topic and I am not the person to write them.

In fact, you can use the current Axiom API with threads, mostly, and it works about as well as most other Python ORMs.  There are some concurrency issues (also present in several other systems) which I'd like to fix before that is a suggested use though.

>There are good python storage packages to use with twisted and threads
           ^
That word right there is debatable.  I've used, and even even written, a few of those and I'm not happy with them.  Again - for a particular application.  Divmod's application is very ambitious and it is not clear that Axiom is the best possible approach for it.  But it seems to be working out OK.

>I can't imagine why you insist on making your inferior
>solution with a design that can't work well with twisted.

Your point: Axiom does not work well with Twisted.

Your evidence: you do not think Axiom works well with Twisted.

This is a rhetorical fallacy.  It is called a "circular" argument.

I have a favorite rhetorical fallacy too, but it's not this one.

My point: Axiom works great with Twisted!

My evidence: There are about 30 people in #divmod who think Axiom works great with Twisted.

This rhetorical fallacy is called an "ad populum" argument, and it's still wrong, but it has a bit more heft to it.

>I'm feeling guilty for risking hitting the harddisk for a few msec when

Hard disk?  You mean "filesystem", surely.  Linux decides to put things which are in RAM onto disk and which are on disk into RAM all the time.

>people clicks on the mailing list archives, and infact I keep two
>webservers exactly to avoid hurting the scalability of the ssl one.

Aah.  And how do you do that?  Inter-process communication.

Divmod does have problems that require extremely low-latency response and concurrency, but it turns out that these are the exception, not the rule.  Allen Short is currently putting Voice-over-IP audio playback into a subprocess so that performance does not suffer from delays which are perfectly acceptable for the interactive web app (everybody has to hit the database to display these web pages anyway, and there is only one disk, so the performance is not going to change if it's in parallel) but are excruciatingly long for delays between sound samples.

We also have plans to scale our service up amongst large groups of commodity machines, with separate, small axiom databases running on each one.  Axiom databases do scale up in size better than you have suggested (I have tested very responsive query and insert performance up to ~5G databases so far, and there is no indication it would slow down significantly anywhere up to a terabyte) but you are definitely not going to be able to run a million-subscriber service out of a single Axiom database.

You make spawning a second webserver sound like a really serious problem.  It's not.  When your application need parallelism, to maximize utilization, spawn a process.  Sometimes it's OK to block.

At the beginning of the project, I thought very much like you are suggesting, absolutely terrified of blocking for any reason, reasoning about what the kenel would do, about what my program would do, but without any solid performance numbers.  I got over it and wrote some simple code that stored and retrieved objects with SQLite, then did some basic measurements and discovered that it was actually adequately fast.

>> Perhaps instead you could change the version
>> from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is
>
>Ok, I'll make this change right away. I already did that for the web2 side.

and thanks again for that.

>This is a very fair requirement (changing the version is trivial).
>However I don't see much point in changing the commands if the module
>name is the same. Either I change both, or none.

Definitely the version is the most important thing.  I suggested the command-names because that way pasted shell output without tracebacks would also be visibly identifiable without having to say 'please run xxx --version'.  If you don't think that would be appropriate, I don't mind.



From l.oluyede at gmail.com  Sun Jan 22 05:33:56 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun, 22 Jan 2006 11:33:56 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
Message-ID: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>

> Also note, over the last year I've fixed at least one bug in core
> twisted basic protocols that would have never been found with any
> unittest out there. Careful auditing and reading code and filtering of
> the patches, and thinking deeply about the design before writing code
> (to write the code in a way that won't break easily over time), is much
> more important than spending time on unittests. Unittests still makes
> perfect sense after stuff is included and works in basic testing, but
> they should be separated from the logic of committing valid patches to
> the tree.

I think nobody here is claiming that you're not a useful to the
Twisted effort. Mr. Lefkowitz has already apologized for the delays of
applying patches (mostly due to lack of unit tests and manpower) but
stating that a great eye on code is better than automatic testing I
think it's wron and I don't know where one excludes the other. You can
can write test, use your experience to read through it and find if
it's correct and submit to the Twisted folks. It's very normal to
apply a pending patch on your local Twisted tree while waiting that
they apply it on the trunk. Delays? Why you don't join the project?

> NOTE: before clicking on that page you may want to also answer these
> questions:

Let me say that reading those kind of question I'm starting to think
that Twisted it's not what you need in first place, so why bother
rewriting your app N times or wasting your time here if Twisted is not
what you need? I specifically refer to the question #5

> 1) is python much better than ruby and all other language on earth?

Than Ruby? The answer is no. It's a matter of tastes. Than all the
languages? Who knows them all?

> 2) is twisted much better than any other framework to write network apps?

Which other framework do you know? I'm aware of ACE for C++ and
another for Perl. Full stop. There are languages like E, like Oz
having concurrency support builtin but they aren't "frameworks"

> 3) are twisted and python fast and scalable enough for all applications?

Twisted and Python are scalable enough for all applications that uses
them. If you need something powerful why using them? I don't
understand your kind of questions.

> 4) is the single threaded model scalable enough for all applications in
>    smp?

The same as above.

> 5) is async programming using deferreds simpler to code for a webserver
>    that is stateless and that only does sql queries over the network?

That's my main concern. If you have stateless stuff and you do only
sql queries, do you really need all the twisted power?

> 6) would you rather prefer to go broke than to use code
>    "not-invented-here" or not written with python and twisted?
>    (of course the python interpreter the c compiler and the underlying
>    operative system are magically excluded from the not-invented-here
>    clause for whatever unknown reason)

What's the meaning of such a question?

> I'm welcome anybody who wants to join cpushare-twisted, but if the
> answer of _any_ of the above questions is "yes", I think you may be
> better off ignoring this email.

I wish you luck but this clause terrifies me:
"If the CPUShare-Twisted fork fails to be successful, CPUShare will
stop using Twisted, so the use of this fork is at your own risk."

If you have find time to write countless emails on this mailing list,
to say that Nevow is ugly and slow, to whatever... why didn't write
unit tests for patches and stop?

I don't understand the real point to your argues.

--
Lawrence
http://www.oluyede.org/blog

From moof at metamoof.net  Sun Jan 22 06:52:51 2006
From: moof at metamoof.net (Moof)
Date: Sun, 22 Jan 2006 12:52:51 +0100
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <43D23D35.2080104@rogers.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<43D23D35.2080104@rogers.com>
Message-ID: <bff8eeef0601220352o18c36fday29a0979fd9659c5f@mail.gmail.com>

On 1/21/06, Mike C. Fletcher <mcfletch at rogers.com> wrote:
>
> This functionality (or, something very close) is in the deferred module
> already, it's just non-obvious how you use it:
>
> sem = defer.DeferredSemaphore(count)
> dl = [sem.run(callable, item, *args, **named) for item in iterable]
> return defer.DeferredList(dl, consumeErrors=True)


Oh good God, you mean twisted had this all the time?  Would have saved me a
(small) number of headches about 6 months back, though given how much my
beast has grown since then, I'd probably  have ended up replacing it anyway.


I've added a documentation bug (1432), and I might see if I get some time to
write some docs for it this afternoon.


Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060122/dd2c617b/attachment.htm 

From andrea at cpushare.com  Sun Jan 22 12:04:40 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 18:04:40 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
Message-ID: <20060122170440.GK20603@opteron.random>

On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> think it's wron and I don't know where one excludes the other. You can

I've never said one excludes the other, I say that unit-test should not
be mandatory, and if you should write the unit-test _after_ reviewing
the code, not before.

> Let me say that reading those kind of question I'm starting to think
> that Twisted it's not what you need in first place, so why bother
> rewriting your app N times or wasting your time here if Twisted is not
> what you need? I specifically refer to the question #5

I started to think the same indeed, especially the more time I spend
answering email like this one ;). However I still feel that it's quicker
to get things working with twisted in the short term, and given all my
founding are my savings I've to be dirty and quick (I can't pretend to
debug memory corruption or memory leaks with so little resources, so an
interpreter is a sane choice), but if I had more resources I could
afford not using it and it would be a lot faster and it would scale to a
larger number of users using the same hardware resources.

> That's my main concern. If you have stateless stuff and you do only
> sql queries, do you really need all the twisted power?

No my app isn't stateless, or I would be using the thread model too.
The very cpushare protocol is complex in the way it handles race
conditions and async event like disconnects, twisted makes life easy at
the expense of scalability. This helps getting things working quick. And
I use pb to attach the webserver to the cpushare server, this is why
it's confortable for me to use twisted on the web side too (I'm not
making queries to the db only).

But most people with simpler projects would be better off with threads
to write web apps. Infact twisted web already provides a model like
this, my mercurial export already use it, moinmoin also uses it. the
webserver it's twisted.web for both and they're threaded.

> I wish you luck but this clause terrifies me:
> "If the CPUShare-Twisted fork fails to be successful, CPUShare will
> stop using Twisted, so the use of this fork is at your own risk."

I wrote it to scare people indeed, I'm careful not to generate any hype,
you know what you get when you work with me. If you get on the
CPUShare-Twisted project it probably means you already had to maintain
your own set of patches for over one year, so joining efforts won't make
thing worse even if I decide to dump twisted from my proejct (I can
only tell that my twisted branch has solid backups and I can guarantee
an export will remain availble if things go wrong).

> If you have find time to write countless emails on this mailing list,
> to say that Nevow is ugly and slow, to whatever... why didn't write
> unit tests for patches and stop?

Even before you write the unittest you should fix nevow, and that's not
going to happen, it didn't happen in one year after I sent the first
performance bottleneck reports, it sure can't happen in the few hours I
spent writing these emails.

Plus it'd be terrible to waste time on nevow when Cheetah is already an
order of magnitude better and faster (IMHO of course).

> I don't understand the real point to your argues.

The point is: if you think the same way I think, if you've similar needs
to mine, switch to CPUShare-Twisted.



From l.oluyede at gmail.com  Sun Jan 22 14:06:42 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun, 22 Jan 2006 20:06:42 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122170440.GK20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
	<20060122170440.GK20603@opteron.random>
Message-ID: <9eebf5740601221106r26783955wf6a0e923a67b76d1@mail.gmail.com>

On 1/22/06, Andrea Arcangeli <andrea at cpushare.com> wrote:
> On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> > think it's wron and I don't know where one excludes the other. You can
>
> I've never said one excludes the other, I say that unit-test should not
> be mandatory, and if you should write the unit-test _after_ reviewing
> the code, not before.

I think that tests MUST BE mandatory in every project used and/or
developed from more than 1 people.

As Mr. Lefkowitz said in the other message Twisted is not test driven,
requires only test for submitted code and I think it's the right way
to go if you won't break older or future code.

> No my app isn't stateless, or I would be using the thread model too.
> The very cpushare protocol is complex in the way it handles race
> conditions and async event like disconnects, twisted makes life easy at
> the expense of scalability. This helps getting things working quick. And
> I use pb to attach the webserver to the cpushare server, this is why
> it's confortable for me to use twisted on the web side too (I'm not
> making queries to the db only).

Ok so you need Twisted, no question about that.

> Even before you write the unittest you should fix nevow, and that's not
> going to happen, it didn't happen in one year after I sent the first
> performance bottleneck reports, it sure can't happen in the few hours I
> spent writing these emails.

Why didn't you ask to join the project?

> Plus it'd be terrible to waste time on nevow when Cheetah is already an
> order of magnitude better and faster (IMHO of course).

Ok we are in the tastes domain :)

> The point is: if you think the same way I think, if you've similar needs
> to mine, switch to CPUShare-Twisted.

Understood.

--
Lawrence
http://www.oluyede.org/blog

From exarkun at divmod.com  Sun Jan 22 14:13:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Jan 2006 14:13:06 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15665 - Rewritten endpoints
 (TCP and UNIX) with unittests
In-Reply-To: <E1F0boi-0005We-00@wolfwood>
Message-ID: <20060122191306.2697.388560981.divmod.quotient.835@ohm>

On Sun, 22 Jan 2006 02:47:24 -0700, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
>Author: dreid
>Date: Sun Jan 22 02:47:23 2006
>New Revision: 15665
>
>Added:
>   branches/dreid/endpoints/twisted/test/test_endpoints.py
>Modified:
>   branches/dreid/endpoints/twisted/internet/endpoints.py
>Log:
>Rewritten endpoints (TCP and UNIX) with unittests

This branch seems to have no ticket number, so I'm commenting here.

twisted/test/test_endpoints.py:

Several test methods of TestEndpoints define nested functions which discard the Deferred returned by a Port's stopListening method.  These need to be waiting on that Deferred.

Why do some tests bind to 127.0.0.1 and some to 127.0.0.2?

None of the tests assert that the protocol/port is hooked up to the right address, either on the local or remote side.

None of the tests exercise client-side binding.

The TCP and UNIX tests are basically identical, except for the endpoint class being used.  This is a lot of unnecessary code duplication.  Implement the tests with the endpoint class parameterized and then call them all twice, once with TCPEndpoint, once with UNIXEndpoint.

Lots of trailing whitespace throughout the file.

twisted/internet/endpoint.py:

Interface definitions have docstrings - they don't need "pass" (pass is only required to satisfy grammar requirements for /some/ statement, and the docstrings do just fine for that).

The docstrings of neither IClientEndpoint.connect nor IServerEndpoint.listen define the error type which the Deferred may fail with.  Is it really true that IServerEndpoint.listen will never callback its Deferred?  The tests seem to think otherwise.

Typo in IServerEndpoint.listen's docstring - "incomfing".

Also, these interfaces belong in twisted.internet.interfaces.

_EndpointClientFactory.buildProtocol should not be using callLater(0).  There is no guarantee that will be the correct time to deliver notification, and it is unnecessarily inefficient.  Instead, you probably want something like a ProtocolWrapper from twisted.protocols.policies.

self.callable(addr) in the same buildProtocol is user-code.  It would probably be useful for exceptions it raises to cause the Deferred associated with the factory to errback.  Currently, errors it causes will be logged and the Deferred passed back to the application will never fire or errback.

Similar comment for _EndpointServerFactory.buildProtocol's invocation of self.callable().

TCPEndpoint.listen - try/bareword except?  Why?  This looks like a perfect place for twisted.internet.defer.execute().

AddressToEndpoint looks like it should just be a function that returns either a TCPEndpoint or a UNIXEndpoint.

Trailing whitespace *and tabs* throughout.

Jean-Paul



From dreid at dreid.org  Sun Jan 22 16:21:19 2006
From: dreid at dreid.org (David Reid)
Date: Sun, 22 Jan 2006 13:21:19 -0800
Subject: [Twisted-Python] Re: [Twisted-commits] r15665 - Rewritten
	endpoints (TCP and UNIX) with unittests
In-Reply-To: <20060122191306.2697.388560981.divmod.quotient.835@ohm>
References: <20060122191306.2697.388560981.divmod.quotient.835@ohm>
Message-ID: <43D3F74F.1020506@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> This branch seems to have no ticket number, so I'm commenting here.

Thanks for the comments, I'll create a ticket for it.

> twisted/test/test_endpoints.py:
> 
> Several test methods of TestEndpoints define nested functions which
> discard the Deferred returned by a Port's stopListening method.  These
> need to be waiting on that Deferred.
> 
> Why do some tests bind to 127.0.0.1 and some to 127.0.0.2?

The client connection attempts to 127.0.0.2 are there to make sure that
the connection fails.  It seemed logical at the time, but the time was
very late.

> None of the tests assert that the protocol/port is hooked up to the
> right address, either on the local or remote side.

I'll add these.

> None of the tests exercise client-side binding.

I'm not sure what you mean by this, but there is a test for each of the
endpoint classes that tests that the client can connect to a "normally
established server" Perhaps I didn't do this very well.

> The TCP and UNIX tests are basically identical, except for the endpoint
> class being used.  This is a lot of unnecessary code duplication. 
> Implement the tests with the endpoint class parameterized and then call
> them all twice, once with TCPEndpoint, once with UNIXEndpoint.

I wanted to get something that actually worked before I tried to factor
out duplicate, code.  But thanks for the note anyway.

> twisted/internet/endpoint.py:
> 
> Interface definitions have docstrings - they don't need "pass" (pass is
> only required to satisfy grammar requirements for /some/ statement, and
> the docstrings do just fine for that).

Noted.

> The docstrings of neither IClientEndpoint.connect nor
> IServerEndpoint.listen define the error type which the Deferred may fail
> with.  Is it really true that IServerEndpoint.listen will never callback
> its Deferred?  The tests seem to think otherwise.

I made comments about a deferred never callbacking at the end of the
day, because I didn't realize that obviously IServerEndpoint.listen will
call back with the IListeningPort, I forgot to adjust the docstrings.

> Typo in IServerEndpoint.listen's docstring - "incomfing".
> 
> Also, these interfaces belong in twisted.internet.interfaces.

I'll move them there.

> _EndpointClientFactory.buildProtocol should not be using callLater(0). 
> There is no guarantee that will be the correct time to deliver
> notification, and it is unnecessarily inefficient.  Instead, you
> probably want something like a ProtocolWrapper from
> twisted.protocols.policies.

I'll look into ProtocolWrapper.

> self.callable(addr) in the same buildProtocol is user-code.  It would
> probably be useful for exceptions it raises to cause the Deferred
> associated with the factory to errback.  Currently, errors it causes
> will be logged and the Deferred passed back to the application will
> never fire or errback.
>
> Similar comment for _EndpointServerFactory.buildProtocol's invocation of
> self.callable().

Oops

> TCPEndpoint.listen - try/bareword except?  Why?  This looks like a
> perfect place for twisted.internet.defer.execute().

I didn't know about defer.execute(), but thanks, I'll use it.

> AddressToEndpoint looks like it should just be a function that returns
> either a TCPEndpoint or a UNIXEndpoint.

I figured that out as I woke up this morning.

> Trailing whitespace *and tabs* throughout.

*grumble* *grumble* Yet-Another-Carbon-Emacs *grumble*

Thanks for the input JP.

- -David
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0/dLrsrO6aeULcgRAl8WAJ9YSYusZfZ7d+1T4WvyGWYPnIMTBACfXr/V
NTCZJGY+Q/1zsbWEqNWrkhg=
=EORJ
-----END PGP SIGNATURE-----



From sam at SpinwardStars.com  Sun Jan 22 20:10:24 2006
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sun, 22 Jan 2006 18:10:24 -0700
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122065218.GI20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
Message-ID: <6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>

At 2006-01-22 07:52 AM +0100, you wrote:
>My developmnt is generally test-driven. I'm only opposed to unit-test
>mandatory development to fix bugs or add new features.

Just my 2 cents worth:

It might help if you think of it not as a unit test,
but as a simplified test program that demonstrates
the failure. If you understand the problem, it's
generally possible to create a simplified program
that captures its essence for others to understand.

>Writing unit-test
>isn't the only way to test code. It's nice to have a unit test, even a
>simple one, but it shouldn't be mandatory.

Automated unit testing *is* the only way to *effectively*
test code. It's also the only way to ensure that someone
doesn't make a change at some later date that re-introduces
a bug; the unit test will point the finger at the guilty
party and the (newly-)broken code.

In fact, even if you don't write a unit test case or
program, you are doing unit testing when you duplicate
and report a bug.

You're either unit testing using automatic testing
methods (i.e., a test program) or you're unit testing
manually. Guess which tests will actually be run?

You're either unit testing a constrained chunk of code
with a limited, reasonably-well-defined range of behavior,
or you're unit testing a larger system with a wide range
of behavior and trying to determine, from the aggregate
behavior, whether a small change somewhere has changed
the system's behavior in an undesired fashion.
Guess which test will efficiently catch problems?

*Without* automated tests, you're testing the system
instead of the module--which is far less effective--
AND you're doing it manually--which means the test will
probably never be repeated to verify behavior after
some *other* change is made.

If you want stable, dependable code, WRITE THE TEST CASES.

Further IMO:

As a *user* of a variety of development tools and libraries
who *knows* how difficult it can be to duplicate a bug,
I always try to create a test program that demonstrates
the bug, and which can either become a test case or be
used, in whole or in part, to create a test case.

As a professional software developer, I automatically
reject any bug report (from the QA folks) that doesn't
provide sufficient information to duplicate a bug.
QA personnel are paid to find and document bugs; if
they don't, it's their problem, not mine. On the other
hand, I know that "users" of an open-source module
generally don't think they signed up to do QA (though
it's implicit in the open-source development model).

As someone who has released open-source software in the
past, and plans to do so again soon, the presence or
absence of a test program (AKA unit test) that demonstrates
a bug is often the deciding factor when I devote some of
my limited time to fixing bugs. Practical considerations
(mainly available time, but interest as well) tend to
result in the issue going to the end of the queue, and
therefore never being addressed (without a specific
need on my part).

So I see no reason why a unit test or test program
should not be required. Twisted, like most open-source
development projects, is a *cooperative* development
effort. And, as find myself telling my coworkers *far*
too often, if the code isn't tested, there's no
assurance that it works as intended or designed.

FINALLY (I sincerly hope!):

More generally, I think everyone on the list is now
well aware of both the range of opinions and the
Twisted requirements WRT test cases for reported bugs.
The project is Twisted, and has guidelines for
participation; it's to everyone's benefit to follow
the guidelines.

Now...
Can we PLEASE agree to disagree, stop sniping,
and devote mailing list bandwidth to "real" issues?!

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From andrea at cpushare.com  Sun Jan 22 20:50:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 23 Jan 2006 02:50:06 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
	<6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
Message-ID: <20060123015006.GV20603@opteron.random>

On Sun, Jan 22, 2006 at 06:10:24PM -0700, Samuel Reynolds wrote:
> As a professional software developer, I automatically
> reject any bug report (from the QA folks) that doesn't
> provide sufficient information to duplicate a bug.

This is just a dream for me, the bug I've fixed this month as a
professional software developer (in my real job, nothing that has to do
with twisted) were not reproducible, not just by me, but by the
customers too. I found it after nailing in the crash dump for several
hours and there's no way I could ever hope to write a testcase to
reproduce it reliably even after I've fixed it (furthermore not all
hardware can reproduce it at all).

> So I see no reason why a unit test or test program
> should not be required. Twisted, like most open-source

We may argue about new features, but for bugfixes it makes no sense to
require them, and my mind isn't going to change about that.

> Can we PLEASE agree to disagree, stop sniping,
> and devote mailing list bandwidth to "real" issues?!

Yep.



From andrew-twisted at puzzling.org  Sun Jan 22 22:24:03 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 23 Jan 2006 14:24:03 +1100
Subject: [Twisted-Python] Bugfixes and tests [was: CPUShare-Twisted]
In-Reply-To: <20060123015006.GV20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
	<6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
	<20060123015006.GV20603@opteron.random>
Message-ID: <20060123032403.GB383@home.puzzling.org>

On Mon, Jan 23, 2006 at 02:50:06AM +0100, Andrea Arcangeli wrote:
[...]
> 
> > So I see no reason why a unit test or test program
> > should not be required. Twisted, like most open-source
> 
> We may argue about new features, but for bugfixes it makes no sense to
> require them, and my mind isn't going to change about that.

Tests for bugfixes help ensure the bug remains fixed, just like how tests for
features help ensure the feature keeps working.  The difference is minimal,
except that bugs are usually much easier to specify and thus write tests for.

An anecdote: at one point, the FTP code in Twisted got rewritten, and as part of
that the person doing the rewrite decided it would be easiest to just remove
some tests rather than figure out how to update them[1].  Some time later, a bug
report got filed and I thought "I remember fixing this already" -- sure enough I
had, but the test that would have detected it had been thrown away in the
rewrite, so no-one noticed when the bug was reintroduced until after it had been
released.

Tests being thrown away almost never happens -- it was clearly a mistake that
time.  Based on the fact that our range of automated tests is always increasing
(aside from the rare hiccup like that one), I speculate that the number of bugs
prevented from recurring is probably quite high.  It's hard to measure;
generally code that breaks tests isn't committed.

Anyway, my point is this: the reason why Twisted is of such good quality (even
though there's still room to do much better) is because of the tests.   That's
why we're so fussy about having them.

-Andrew.

[1] To be fair the original tests weren't particularly well written, but neither
    was the rest of the FTP code...




From mail at david-watson.net  Mon Jan 23 04:39:10 2006
From: mail at david-watson.net (David Watson)
Date: Mon, 23 Jan 2006 09:39:10 -0000
Subject: [Twisted-Python] IMAP4 plain authentication
Message-ID: <001401c62000$dd864190$640ba8c0@hostile>

Hi,

My first post to this list, so apologies in advance if this has already been
discussed. I`ve been experimenting with some of the sample code from Abe
Fetting?s (very good) Twisted book and I`m a little stuck with one IMAP
authentication method.

The code is:

from twisted.protocols import imap4
from twisted.internet import protocol, defer

class IMAPFolderListProtocol(imap4.IMAP4Client):

??? def serverGreeting(self, capabilities):
??????? self.registerAuthenticator(
??????????? imap4.CramMD5ClientAuthenticator(self.factory.username))
??????? self.registerAuthenticator(
??????????? imap4.LOGINAuthenticator(self.factory.username))
??????? authenticating = self.authenticate(self.factory.password)
??????? authenticating.addCallback(self.__loggedIn)
??????? authenticating.chainDeferred(self.factory.deferred)

??? def __loggedIn(self, results):
??????? return self.list("", "*").addCallback(self.__gotMailboxList)

??? def __gotMailboxList(self, list):
??????? return [boxInfo[2] for boxInfo in list]

??? def connectionLost(self, reason):
??????? if not self.factory.deferred.called:
??????????? # connection was lost unexpectedly!
??????????? self.factory.deferred.errback(reason)

class IMAPFolderListFactory(protocol.ClientFactory):
??? protocol = IMAPFolderListProtocol
??? 
??? def __init__(self, username, password):
??????? self.username = username
??????? self.password = password
??????? self.deferred = defer.Deferred()
??????? 
??? def clientConnectionFailed(self, connection, reason):
??????? self.deferred.errback(reason)

if __name__ == "__main__":
??? from twisted.internet import reactor
??? import sys, getpass
??? 
??? def printMailboxList(list):
??????? list.sort()
??????? for box in list:
??????????? print box
??????? reactor.stop()

??? def handleError(error):
??????? print >> sys.stderr, "Error:", error.getErrorMessage()
??????? reactor.stop()

??? if not len(sys.argv) == 3:
??????? print "Usage: %s server login" % sys.argv[0]
??????? sys.exit(1)
??????? 
??? server = sys.argv[1]
??? user = sys.argv[2]
??? password = getpass.getpass("Password: ")
??? factory = IMAPFolderListFactory(user, password)
??? factory.deferred.addCallback(
??????? printMailboxList).addErrback(
??????? handleError)
??? reactor.connectTCP(server, 143, factory)
??? reactor.run()

However, when I try to connect to my IMAP4 server using this code, I get:

Error: No supported authentication schemes available: Server supports
['PLAIN'], client supports ['CRAM-MD5', 'LOGIN']

I can`t seem to find a suitable PLAIN method in IMAP4client, so before I
re-invent the wheel, is there a standard Twisted way to handle this
situation (or am I simply missing something obvious)?

Thanks,

David




From therve at free.fr  Mon Jan 23 06:00:38 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 23 Jan 2006 12:00:38 +0100
Subject: [Twisted-Python] IMAP4 plain authentication
In-Reply-To: <001401c62000$dd864190$640ba8c0@hostile>
References: <001401c62000$dd864190$640ba8c0@hostile>
Message-ID: <20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>

Quoting David Watson <mail at david-watson.net>:

> I can`t seem to find a suitable PLAIN method in IMAP4client, so before I
> re-invent the wheel, is there a standard Twisted way to handle this
> situation (or am I simply missing something obvious)?

You may want to look at imap4.PLAINAuthenticator (and register it the same way
as CramMD5ClientAuthenticator and LOGINAuthenticator).

-- 
Thomas




From phil at bubblehouse.org  Mon Jan 23 09:08:16 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 23 Jan 2006 09:08:16 -0500
Subject: [Twisted-Python] IMAP4 plain authentication
In-Reply-To: <20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>
References: <001401c62000$dd864190$640ba8c0@hostile>
	<20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>
Message-ID: <26D8FB16-99F9-451E-963A-23D732D04212@bubblehouse.org>

On Jan 23, 2006, at 6:00 AM, Thomas HERVE wrote:

> Quoting David Watson <mail at david-watson.net>:
>
>
>> I can`t seem to find a suitable PLAIN method in IMAP4client, so  
>> before I
>> re-invent the wheel, is there a standard Twisted way to handle this
>> situation (or am I simply missing something obvious)?
>>
>
> You may want to look at imap4.PLAINAuthenticator (and register it  
> the same way
> as CramMD5ClientAuthenticator and LOGINAuthenticator).

If you're just working through a tutorial you can disregard this, but  
you might consider the fact that the IMAPrev4 spec doesn't allow  
plaintext authentication over a non-SSL connection.

Of course, no server I know of implements the spec to the letter (I  
believe there's a reason for this I'm forgetting), but changing a  
reactor.connectTCP() call to a reactor.connectSSL() call (with the  
requisite arguments) is always something I find amazing (due to its  
simplicity)...

Hrm, that was a lot of parentheses....well, it's still early...

-phil



From andrew-twisted at puzzling.org  Mon Jan 23 10:28:19 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Jan 2006 02:28:19 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2mwtgrmde0.fsf@starship.python.net>
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
Message-ID: <20060123152819.GJ383@home.puzzling.org>

[moving this to twisted-python, where it clearly belongs]

Michael Hudson wrote:
[...]
> 
> Well, I've had a quick pop at the interesting bit of this task while
> travelling over the weekend: using the compiler module I can extract
> the docstrings and class hierachy of all the stuff in the Twisted
> source.  It's a touch fragile, but seems to work for all the
> constructions used by Twisted.
> 
> One issue is classes that are defined in one file but generally used
> from another, for example twisted.spread.jelly.Serializable is often
> (always?) imported as twisted.spread.pb.Serializable.  Where should it
> be documented it?

See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
suggestion of using __all__ to determine where an aliased thing should be
documented.

Another option is some sort of explicit hint to the doc extractor, e.g. a define
no-op call like "alias('Serializable')" in the relevant module that the doc
extractor could notice.  Or keep an explicit list of overrides in a file...

-Andrew.




From sbaush at gmail.com  Mon Jan 23 11:05:55 2006
From: sbaush at gmail.com (Sbaush)
Date: Mon, 23 Jan 2006 17:05:55 +0100
Subject: [Twisted-Python] Send/Receive UDP Packet
Message-ID: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>

Hi all.
In my application I have to do implement a lot of networking in python
My application can create with a GUI a XML file in a string.
This string has to be sended to another host. i need a python application
that send this string via UDP.
The packet of this communication is |int|payload|  where payload is the XML
string and int is an integer(size of packet).
After the send my application has to wait for a response from the other host
and has to receive response.
This should be implemented with separated thread. A thread send/receive
while another indipendent thread do same.

Is it possible with Twisted?
How is it possible with Twisted?
Is there any examples to learn twisted for this objective?

Thanks all.

Sorry for the big question but i don't know twisted very much, and sorry for
my english but i'm italian!

Regards.
--
Sbaush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060123/45e89da4/attachment.htm 

From itamar at itamarst.org  Mon Jan 23 11:31:31 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Jan 2006 11:31:31 -0500
Subject: [Twisted-Python] Send/Receive UDP Packet
In-Reply-To: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>
References: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>
Message-ID: <1138033891.9365.1.camel@localhost.localdomain>

On Mon, 2006-01-23 at 17:05 +0100, Sbaush wrote:

> After the send my application has to wait for a response from the
> other host and has to receive response. 
> This should be implemented with separated thread. A thread
> send/receive while another indipendent thread do same. 

You don't need to use threads for this.

> Is it possible with Twisted?
> How is it possible with Twisted?
> Is there any examples to learn twisted for this objective?

http://twistedmatrix.com/projects/core/documentation/howto/udp.html is
one starting point.




From mwh at python.net  Mon Jan 23 12:14:32 2006
From: mwh at python.net (Michael Hudson)
Date: Mon, 23 Jan 2006 17:14:32 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
	<20060123152819.GJ383@home.puzzling.org>
Message-ID: <2mbqy2n9xj.fsf@starship.python.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> [moving this to twisted-python, where it clearly belongs]
>
> Michael Hudson wrote:
> [...]
>> 
>> Well, I've had a quick pop at the interesting bit of this task while
>> travelling over the weekend: using the compiler module I can extract
>> the docstrings and class hierachy of all the stuff in the Twisted
>> source.  It's a touch fragile, but seems to work for all the
>> constructions used by Twisted.
>> 
>> One issue is classes that are defined in one file but generally used
>> from another, for example twisted.spread.jelly.Serializable is often
>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>> be documented it?
>
> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
> suggestion of using __all__ to determine where an aliased thing should be
> documented.

Hmm, that could work.  Although having the "official" name for a class
different from its __name__ is fairly horrible :)

> Another option is some sort of explicit hint to the doc extractor, e.g. a define
> no-op call like "alias('Serializable')" in the relevant module that the doc
> extractor could notice.  Or keep an explicit list of overrides in a file...

These also could work, as could magic comments (though that would be
marginally harder).

Cheers,
mwh

-- 
  What the semicolon's anxious supporters fret about is the tendency
  of contemporary writers to use a dash instead of a semicolon and
  thus precipitate the end of the world.
                               -- Lynne Truss, "Eats, Shoots & Leaves"




From exarkun at divmod.com  Mon Jan 23 12:45:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 23 Jan 2006 12:45:09 -0500
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2mbqy2n9xj.fsf@starship.python.net>
Message-ID: <20060123174509.2697.1768642920.divmod.quotient.1079@ohm>

On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>
>> [moving this to twisted-python, where it clearly belongs]
>>
>> Michael Hudson wrote:
>> [...]
>>>
>>> Well, I've had a quick pop at the interesting bit of this task while
>>> travelling over the weekend: using the compiler module I can extract
>>> the docstrings and class hierachy of all the stuff in the Twisted
>>> source.  It's a touch fragile, but seems to work for all the
>>> constructions used by Twisted.
>>>
>>> One issue is classes that are defined in one file but generally used
>>> from another, for example twisted.spread.jelly.Serializable is often
>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>> be documented it?
>>
>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>> suggestion of using __all__ to determine where an aliased thing should be
>> documented.

+1 for using a mechanism associated with an existing Python idiom

>
>Hmm, that could work.  Although having the "official" name for a class
>different from its __name__ is fairly horrible :)
>
>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>> no-op call like "alias('Serializable')" in the relevant module that the doc
>> extractor could notice.  Or keep an explicit list of overrides in a file...
>
>These also could work, as could magic comments (though that would be
>marginally harder).

-1 for magic markup embedded in source files

Jean-Paul



From william.lewis at uk.bnpparibas.com  Mon Jan 23 13:27:19 2006
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Mon, 23 Jan 2006 18:27:19 +0000
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a Win32
	Service.
Message-ID: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>

Hi

I am attempting to run a PBServer as a win32 service using the following 
code:

        import win32serviceutil
        import win32service
        import win32event
        from twisted.spread import pb
        from twisted.internet import reactor
        import node

        class NodeService(win32serviceutil.ServiceFramework):
                _svc_name_ = 'NodeService'
                _svc_display_name_ = 'Node Server'

                def __init__(self, args):
                        win32serviceutil.ServiceFramework.__init__(self, 
args)

                def SvcDoRun(self):
                        n = node.Node()
                        reactor.listenTCP(node.port, 
pb.PBServerFactory(n))
                        reactor.run()

                def SvcStop(self):
 self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
                        reactor.stop()

        if __name__ == '__main__':
                win32serviceutil.HandleCommandLine(NodeService)

where my class "node.Node" inherits from pb.Root

When I try to start the service it just exits quickly without actually 
starting, but without any error.
I have implemented other python TCP servers (e.g. a simple xml-rpc server 
using  xmlrpclib.py) as win32 services and so am
not sure why I am getting this behaviour. Any help would be appreciated.

Regards

William Lewis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060123/01f64fbb/attachment.htm 

From ralf at brainbot.com  Mon Jan 23 13:43:43 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Mon, 23 Jan 2006 19:43:43 +0100
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a Win32
	Service.
In-Reply-To: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
Message-ID: <43D523DF.5050609@brainbot.com>

william.lewis at uk.bnpparibas.com schrieb:
>
> Hi
>
> I am attempting to run a PBServer as a win32 service using the 
> following code:
> When I try to start the service it just exits quickly without actually 
> starting, but without any error.
No errors in the event log?





From itamar at itamarst.org  Mon Jan 23 14:16:40 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Jan 2006 14:16:40 -0500
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a
	Win32 Service.
In-Reply-To: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
Message-ID: <1138043800.9365.8.camel@localhost.localdomain>

On Mon, 2006-01-23 at 18:27 +0000, william.lewis at uk.bnpparibas.com
wrote:
> 
> Hi 
> 
> I am attempting to run a PBServer as a win32 service using the
> following code: 
> 
>         import win32serviceutil 
>         import win32service 
>         import win32event 
>         from twisted.spread import pb 
>         from twisted.internet import reactor 
>         import node 
> 
>         class NodeService(win32serviceutil.ServiceFramework): 
>                 _svc_name_ = 'NodeService' 
>                 _svc_display_name_ = 'Node Server' 
> 
>                 def __init__(self, args): 
> 
> win32serviceutil.ServiceFramework.__init__(self, args) 
> 
>                 def SvcDoRun(self): 
>                         n = node.Node() 
>                         reactor.listenTCP(node.port,
> pb.PBServerFactory(n)) 
>                         reactor.run() 
> 
>                 def SvcStop(self): 
> 
> self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING) 
>                         reactor.stop() 
> 
>         if __name__ == '__main__': 
>                 win32serviceutil.HandleCommandLine(NodeService) 
> 
> where my class "node.Node" inherits from pb.Root 
> 
> When I try to start the service it just exits quickly without actually
> starting, but without any error. 

There are a number of issues with this code, e.g. SvcDoRun and SvcStop
are going to be called from a different thread, plus errors will
probably get lost as you are logging to stderr.

Here's some sample code that deals with these issues:
http://svn.twistedmatrix.com/cvs/sandbox/moonfallen/ntsvc/runner.py?view=auto&rev=12804

With one minor bug, it ought to do reactor.callFromThread(reactor.stop)
instead of reactor.stop().





From mike at stamen.com  Mon Jan 23 17:01:17 2006
From: mike at stamen.com (Michal Migurski)
Date: Mon, 23 Jan 2006 14:01:17 -0800
Subject: [Twisted-Python] Twisted n00b question
Message-ID: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>

Hello -

I'm completely new to Twisted and moderately (~1 year) experienced  
with Python, and I'm here because I need some help understanding how  
to set up a web proxy.

My goal: an HTTP proxy living on my local machine (OS X) that will  
transparently serve up web pages  to myself, while allowing me to  
snoop & log connections I make to remote servers. I want the  
equivalent of an Attention Trust recorder (http:// 
www.attentiontrust.org/services) without having to use Firefox.

My first attempt: using the demonstration service.tac as a starting  
point, I wrote a new Resource that can view the request. I got far  
enough to look inside the request object passed to my resource's  
render() method, and return a meaningful response showing that I was  
seeing accurate request information. So in that render() method, I  
generate a new HTTPClientFactory object which *should* be able to  
make a request the intended server and return the results. I stopped  
when I realized the documentation showed examples using reactor.run 
(), while advising that I should never actually use reactor.run() in  
a real app. So I'm stuck trying to  generate a new http client  
request while inside an http server.

My second attempt: I found the Proxy class in the twisted.web docs,  
which has this code snippet:

    from twisted.protocols import http
    f = http.HTTPFactory()
    f.protocol = Proxy

...which is great, but I'm now I'm not sure what I need to do with  
the "f" object to make it work in a .tac/twistd context. It seems  
like should be able to add a callback in there someplace to intercept  
the proxied requests and pick them apart, but I'm a little stuck.

Thanks in advance for any pointers or examples that may help.

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060123/27b3a2d0/attachment.htm 

From neuzhoundxx at yahoo.com  Mon Jan 23 18:52:09 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Mon, 23 Jan 2006 15:52:09 -0800 (PST)
Subject: [Twisted-Python] newbie question
Message-ID: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>

 i tried to run the simpleserv.py and  simpleclient.py examples in windows xp, but i keep getting the below  trace back. could somebody please give me a hand and tell me what i  might be doing wrong? thanks!
  
  >>> Server said: hello, world!
  connection lost
  Connection lost - goodbye!
  Traceback (most recent call last):
    File "C:\pythonWork\simpleclient.py", line 52, in ?
      main()
    File "C:\pythonWork\simpleclient.py", line 48, in main
      reactor.run()
    File "C:\Python24\lib\site-packages\twisted\internet\posixbase.py", line 206, in run
      self.mainLoop()
    File "C:\Python24\lib\site-packages\twisted\internet\posixbase.py", line 214, in mainLoop
      self.runUntilCurrent()
  --- <exception caught here> ---
    File "C:\Python24\lib\site-packages\twisted\internet\base.py", line 541, in runUntilCurrent
      call.func(*call.args, **call.kw)
    File "C:\Python24\lib\site-packages\twisted\internet\base.py", line 397, in _continueSystemEvent
      for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
  exceptions.TypeError: unsubscriptable object
  

		
---------------------------------
 Yahoo! Autos. Looking for a sweet ride? Get pricing, reviews, & more on new and used cars.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060123/0196b1e4/attachment.htm 

From matt at pollenation.net  Mon Jan 23 18:55:40 2006
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 23 Jan 2006 23:55:40 -0000 (GMT)
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>

> Hello -
>
> I'm completely new to Twisted and moderately (~1 year) experienced
> with Python, and I'm here because I need some help understanding how
> to set up a web proxy.
>
> My goal: an HTTP proxy living on my local machine (OS X) that will
> transparently serve up web pages  to myself, while allowing me to
> snoop & log connections I make to remote servers. I want the
> equivalent of an Attention Trust recorder (http://
> www.attentiontrust.org/services) without having to use Firefox.
>
> My first attempt: using the demonstration service.tac as a starting
> point, I wrote a new Resource that can view the request. I got far
> enough to look inside the request object passed to my resource's
> render() method, and return a meaningful response showing that I was
> seeing accurate request information. So in that render() method, I
> generate a new HTTPClientFactory object which *should* be able to
> make a request the intended server and return the results. I stopped
> when I realized the documentation showed examples using reactor.run
> (), while advising that I should never actually use reactor.run() in
> a real app. So I'm stuck trying to  generate a new http client
> request while inside an http server.
>
> My second attempt: I found the Proxy class in the twisted.web docs,
> which has this code snippet:
>
>     from twisted.protocols import http
>     f = http.HTTPFactory()
>     f.protocol = Proxy
>
> ...which is great, but I'm now I'm not sure what I need to do with
> the "f" object to make it work in a .tac/twistd context. It seems
> like should be able to add a callback in there someplace to intercept
> the proxied requests and pick them apart, but I'm a little stuck.

'f' is a protocol factory. It exists to create protocol instances
(proxy.Proxy) when something connects to a listening socket, typically a
TCP server.

Here's a complete .tac file that runs a proxy on port 8080.

{{{
from twisted.application import internet, service
from twisted.web import http, proxy

application = service.Application('proxy')

f = http.HTTPFactory()
f.protocol = proxy.Proxy
proxyService = internet.TCPServer(8080, f)
proxyService.setServiceParent(application)
}}}

Hope that helps.

- Matt




From corydodt at twistedmatrix.com  Mon Jan 23 19:19:50 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 23 Jan 2006 16:19:50 -0800
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a	Win32
	Service.
In-Reply-To: <1138043800.9365.8.camel@localhost.localdomain>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
	<1138043800.9365.8.camel@localhost.localdomain>
Message-ID: <43D572A6.70307@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Itamar Shtull-Trauring wrote:
> With one minor bug, it ought to do reactor.callFromThread(reactor.stop)
> instead of reactor.stop().

Fixed.


william.lewis at uk.bnpparibas.com wrote:
> When I try to start the service it just exits quickly without actually starting, but without any error.
> I have implemented other python TCP servers (e.g. a simple xml-rpc server using  xmlrpclib.py) as win32 services and so am
> not sure why I am getting this behaviour. Any help would be appreciated.
> 

BTW, errors are logged to the event log:Control Panel > Administrative Tools >
Event Viewer, then Application log, i think.  You can find python exceptions
there.


C



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFD1XKm3A5SrXAiHQcRAuJfAJ9QVVNAQCYEVOjNKiWtRPulX64VYgCfRG+6
WTb0TrP1LHbFyaarGNfqfek=
=0TkC
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Mon Jan 23 19:22:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 23 Jan 2006 19:22:01 -0500
Subject: [Twisted-Python] newbie question
In-Reply-To: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>
Message-ID: <20060124002201.2697.945027472.divmod.quotient.1094@ohm>

On Mon, 23 Jan 2006 15:52:09 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
> i tried to run the simpleserv.py and  simpleclient.py examples in windows xp, but i keep getting the below  trace back. could somebody please give me a hand and tell me what i  might be doing wrong? thanks!

This was a bug in the example: <http://twistedmatrix.com/bugs/issue1299>

Jean-Paul



From andrew-twisted at puzzling.org  Mon Jan 23 19:35:08 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Jan 2006 11:35:08 +1100
Subject: [Twisted-Python] newbie question
In-Reply-To: <20060124002201.2697.945027472.divmod.quotient.1094@ohm>
References: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>
	<20060124002201.2697.945027472.divmod.quotient.1094@ohm>
Message-ID: <20060124003508.GL383@home.puzzling.org>

On Mon, Jan 23, 2006 at 07:22:01PM -0500, Jean-Paul Calderone wrote:
> On Mon, 23 Jan 2006 15:52:09 -0800 (PST), john peter 
> <neuzhoundxx at yahoo.com> wrote:
> >i tried to run the simpleserv.py and  simpleclient.py examples in windows 
> >xp, but i keep getting the below  trace back. could somebody please give 
> >me a hand and tell me what i  might be doing wrong? thanks!
> 
> This was a bug in the example: <http://twistedmatrix.com/bugs/issue1299>

You can find the updated simpleclient.py here:
<http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/simpleclient.py?view=auto&rev=14968>

-Andrew.




From mike at stamen.com  Tue Jan 24 02:26:13 2006
From: mike at stamen.com (Michal Migurski)
Date: Mon, 23 Jan 2006 23:26:13 -0800
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
	<51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>
Message-ID: <0FBCD39A-4124-43CF-8852-3F4FD3EFB3F4@stamen.com>

>> My second attempt: I found the Proxy class in the twisted.web docs,
>> which has this code snippet:
>>
>>     from twisted.protocols import http
>>     f = http.HTTPFactory()
>>     f.protocol = Proxy
>>
>> ...which is great, but I'm now I'm not sure what I need to do with
>> the "f" object to make it work in a .tac/twistd context. It seems
>> like should be able to add a callback in there someplace to intercept
>> the proxied requests and pick them apart, but I'm a little stuck.
>
> 'f' is a protocol factory. It exists to create protocol instances
> (proxy.Proxy) when something connects to a listening socket,  
> typically a
> TCP server.
>
> Here's a complete .tac file that runs a proxy on port 8080.
>
> {{{
> from twisted.application import internet, service
> from twisted.web import http, proxy
>
> application = service.Application('proxy')
>
> f = http.HTTPFactory()
> f.protocol = proxy.Proxy
> proxyService = internet.TCPServer(8080, f)
> proxyService.setServiceParent(application)
> }}}
>
> Hope that helps.

This is perfect.
I'm now subclassing Proxy, ProxyRequest, ProxyClientFactory and  
ProxyClient to get the results I want.

Thanks!

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610





From jdahlin at async.com.br  Tue Jan 24 08:24:07 2006
From: jdahlin at async.com.br (Johan Dahlin)
Date: Tue, 24 Jan 2006 11:24:07 -0200
Subject: [Twisted-Python] Re: Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <43D62A77.2080906@async.com.br>

> My goal: an HTTP proxy living on my local machine (OS X) that will 
> transparently serve up web pages  to myself, while allowing me to snoop 
> & log connections I make to remote servers. I want the equivalent of an 
> Attention Trust recorder (http://www.attentiontrust.org/services) 
> without having to use Firefox.

I wrote a little http proxy in twisted to help me debugging xmlrpc 
connections a while ago. It's just a tiny proof of concept and would require 
considerable improvements before getting really useful. For example it opens 
up a new connection for every request, let alone any error handling.

Hope you'll find it useful.

Johan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: proxy.py
Type: text/x-python
Size: 1180 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060124/0a04ced2/attachment.py 

From jcea at argo.es  Tue Jan 24 11:50:55 2006
From: jcea at argo.es (Jesus Cea)
Date: Tue, 24 Jan 2006 17:50:55 +0100
Subject: [Twisted-Python] Still fighting "twisted.names.client"
Message-ID: <43D65AEF.8050704@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I started a thread a month ago, with no luck yet.
<http://twistedmatrix.com/pipermail/twisted-python/2005-December/012162.html>

I have a reduced test case, for ease diagnosis. I hope Jean-Paul
Calderone can have a look at the issue.

My current "simple" code (not the real application, of course) is:

===== File "dns4.tac" =====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path

from dns4 import DomainResolver
DomainResolver().setServiceParent(application)

====================

===== File "dns4.py" =====

class resolution(object) :
  def __init__(self,domain) :
    global myResolver
    d = myResolver.lookupMailExchange(domain,timeout=(5,))
    d.addCallbacks(self._cbMailExchange, None)

  def _cbMailExchange(self,results):
    # Callback for MX query
    print "XX",repr(results)
    from twisted.internet import reactor
    reactor.stop()
    return

from twisted.application import service

class DomainResolver(service.Service):
  def startService(self) :
    global myResolver

    from twisted.names import client
    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])

    resolution("argo.es")
    #resolution("argo.es")

====================

I launch the application with "twistd -n -y dns4.tac".

I get the following error: "twisted.names.dns.DNSDatagramProtocol (UDP)]
Unexpected message (32863) received from ('127.0.0.1', 53)". Apparently
Twisted is sending the DNS request (and getting the DNS answer) before
setting up the handling object.

If I uncomment the last line, to do two resolutions, the reactor is not
stoped, but an infinite loop is created, with the following (infinite)
error:

=====

2006/01/24 17:39 CET [twisted.names.dns.DNSDatagramProtocol (UDP)]
Traceback (most recent call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

Somebody could help me?. This issue is a showstopper in my twisted
learning :(.

Thanks in advance for your time.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ9Za75lgi5GaxT1NAQLNogQAhsMS+inrIuVGuOg+QuP/6qyYMPMg6GRJ
f3s9zUONp9YaPD03uysNA0UfzR4SO4BN5h40mciQUUx4YnxZl1MpSwqf8jHNYnWh
wgJ7FsY6rjYeYNke7exBteMt2eNSdffATv6hpNqPVYx8KpJGDMyN+pkxRN+cJbfy
i0lmC5EXQj8=
=LWe7
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Jan 24 12:34:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Jan 2006 12:34:59 -0500
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <43D65AEF.8050704@argo.es>
Message-ID: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>

On Tue, 24 Jan 2006 17:50:55 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>I started a thread a month ago, with no luck yet.
><http://twistedmatrix.com/pipermail/twisted-python/2005-December/012162.html>
>
>I have a reduced test case, for ease diagnosis. I hope Jean-Paul
>Calderone can have a look at the issue.

Thanks for following up on this.  I couldn't reproduce the problem before, but with your new example I can.

>===== File "dns4.py" =====
>
>class resolution(object) :
>  def __init__(self,domain) :
>    global myResolver
>    d = myResolver.lookupMailExchange(domain,timeout=(5,))

Here, you're specifying that the lookup should use no retransmits, and should fail if no response is received after 5 seconds.  This isn't generally a good way to do DNS lookups, but IIRC you had a particular reason for wanting this.  In any case, the first bug you hit was one that caused the first message received in response to the first query made on a resolver object to be spuriously dropped.  Since most applications do re-transmits, this usually didn't cause anything more problematic than one extra DNS request/response.  I've fixed this in current trunk.

>    d.addCallbacks(self._cbMailExchange, None)
>
>  def _cbMailExchange(self,results):
>    # Callback for MX query
>    print "XX",repr(results)
>    from twisted.internet import reactor
>    reactor.stop()
>    return

It turns out there is a bug in Twisted's UDP support.  Calling reactor.stop() from beneath datagramReceived() triggers an infinite exception loop.  I've created a ticket in the tracker (1448) for this.  Until it's resolved, or if you want this to work on a previous release of Twisted, you can use "reactor.callLater(0, reactor.stop)" to avoid the problem.

>
>from twisted.application import service
>
>class DomainResolver(service.Service):
>  def startService(self) :
>    global myResolver
>
>    from twisted.names import client
>    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])
>
>    resolution("argo.es")
>    #resolution("argo.es")
>
> [snip]
>
>Thanks in advance for your time.

Thanks for the minimal example :)

Jean-Paul



From ross at sourcelabs.com  Tue Jan 24 13:19:27 2006
From: ross at sourcelabs.com (Ross Jekel)
Date: Tue, 24 Jan 2006 10:19:27 -0800
Subject: [Twisted-Python] twistd question
Message-ID: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>

Hello, I have a small design problem I'm trying to get my head around 
regarding twistd with respect to lauching worker subprocesses. 

I have a requirement for every process on my server to be able to 
communicate to an existing message queuing system. The interface to this 
message queuing system requires that all processes be a "server" so that 
they can receive async messages. I have that all working fine and have the 
interface to the external system wrapped up in a nice service, as it us 
helpful to get the startService and stopService calls for properly 
initializing and shutting down the session to the message queuing system. 

As I have a mixture of a few long running requests and many short running 
requests that could be sent to the main server process, I would like to 
design my main service such that it can handle the short requests directly 
and spawn other subprocessing to handle the long-running requests. 

Since each of those subprocessing needs to be connected to the message 
queue, I'd like to use twistd to run them and benefit from the application 
level abstractions for setting up the service. But I'm not entirely sure how 
to use twistd property when I may have multiple instances of the same .tac 
file running. Basically, I need to spawn worker subprocessing that during 
the time they are doing work are services so that they can communicate with 
the messaging subsystem. 

Does this make sense? Any thoughts on how it can be accomplished? 

Ross



From ross at sourcelabs.com  Tue Jan 24 15:15:05 2006
From: ross at sourcelabs.com (Ross Jekel)
Date: Tue, 24 Jan 2006 12:15:05 -0800
Subject: [Twisted-Python] twistd question
In-Reply-To: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
References: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
Message-ID: <courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>

I forgot to mention one other item. The worker subprocesses are not involved 
in generating a network reponse to the request. Basically, the request sent 
to the main service process is, "Please do this at your earliest 
convenience", the request is validated and the server response with "okay," 
then launches the subprocess. 

Ross Jekel writes: 

> Hello, I have a small design problem I'm trying to get my head around 
> regarding twistd with respect to lauching worker subprocesses.  
> 
> I have a requirement for every process on my server to be able to 
> communicate to an existing message queuing system. The interface to this 
> message queuing system requires that all processes be a "server" so that 
> they can receive async messages. I have that all working fine and have the 
> interface to the external system wrapped up in a nice service, as it us 
> helpful to get the startService and stopService calls for properly 
> initializing and shutting down the session to the message queuing system.  
> 
> As I have a mixture of a few long running requests and many short running 
> requests that could be sent to the main server process, I would like to 
> design my main service such that it can handle the short requests directly 
> and spawn other subprocessing to handle the long-running requests.  
> 
> Since each of those subprocessing needs to be connected to the message 
> queue, I'd like to use twistd to run them and benefit from the application 
> level abstractions for setting up the service. But I'm not entirely sure 
> how to use twistd property when I may have multiple instances of the same 
> .tac file running. Basically, I need to spawn worker subprocessing that 
> during the time they are doing work are services so that they can 
> communicate with the messaging subsystem.  
> 
> Does this make sense? Any thoughts on how it can be accomplished?  
> 
> Ross 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
 




From jcea at argo.es  Tue Jan 24 19:09:13 2006
From: jcea at argo.es (Jesus Cea)
Date: Wed, 25 Jan 2006 01:09:13 +0100
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>
References: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>
Message-ID: <43D6C1A9.7040203@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks for taking the time to look at the issue :).


Jean-Paul Calderone wrote:
> Here, you're specifying that the lookup should use no retransmits, and
> should fail if no response is received after 5 seconds.  This isn't
> generally a good way to do DNS lookups, but IIRC you had a particular
> reason for wanting this.

Basically, I'm running a real DNS caching server in tha same machine :),
so I don't need retrying.

> In any case, the first bug you hit was one
> that caused the first message received in response to the first query
> made on a resolver object to be spuriously dropped.  Since most
> applications do re-transmits, this usually didn't cause anything more
> problematic than one extra DNS request/response.  I've fixed this in
> current trunk.

How nice. Could you possibly send me the patch?.

> It turns out there is a bug in Twisted's UDP support.  Calling
> reactor.stop() from beneath datagramReceived() triggers an infinite
> exception loop.  I've created a ticket in the tracker (1448) for this. 
> Until it's resolved, or if you want this to work on a previous release
> of Twisted, you can use "reactor.callLater(0, reactor.stop)" to avoid
> the problem.

Good workaround. Thank you for the suggestion.

>> Thanks in advance for your time.
> 
> Thanks for the minimal example :)

Thanks to Ralph for suggesting that to me on Jabber/XMPP :).

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ9bBqZlgi5GaxT1NAQLPEwQAhOnfFbfEGqC7Rl4eMlMx273OFukJK7oK
YzMVAvl6ykEzVQ9MarM7kM9A5mYw1pVJctSLCEcEBmTtGpWUWmMFRv1lGCM4kniQ
QAWtv7gz/6zQhv6MVU6uTrzJCjU/1VOxVhMudSBxYUu12StIBqLAJIyfOSfA9a9z
+QcSWnVePjo=
=7utn
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Jan 24 19:48:04 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Jan 2006 19:48:04 -0500
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <43D6C1A9.7040203@argo.es>
Message-ID: <20060125004804.2697.16185941.divmod.quotient.1384@ohm>

On Wed, 25 Jan 2006 01:09:13 +0100, Jesus Cea <jcea at argo.es> wrote:
>>
>> In any case, the first bug you hit was one
>> that caused the first message received in response to the first query
>> made on a resolver object to be spuriously dropped.  Since most
>> applications do re-transmits, this usually didn't cause anything more
>> problematic than one extra DNS request/response.  I've fixed this in
>> current trunk.
>
>How nice. Could you possibly send me the patch?.
>

http://cvs.twistedmatrix.com/cvs/trunk/twisted/names/dns.py?view=diff&r2=15721&r1=15722&p1=trunk%2Ftwisted%2Fnames%2Fdns.py&p2=%2Ftrunk%2Ftwisted%2Fnames%2Fdns.py&diff_format=u

Jean-Paul



From foom at fuhm.net  Wed Jan 25 01:00:11 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 25 Jan 2006 00:00:11 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1F1dhT-0002qr-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-18 06:00:01.870000:
 Bugs opened: 25   Bugs closed: 8   Total open bugs: 550 (+17)
  Urgent: 9 (+0)
  Bug: 264 (+10)
  Feature: 187 (+5)
  Wish: 90 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial's minimal reporter is broken  (6 days ago)
       http://twistedmatrix.com/bugs/issue1426 opened by itamarst

                    ==== Bug ====
[TRIAL, WIN32] trial hangs indefinitely on win32er  (11 hours ago)
       http://twistedmatrix.com/bugs/issue1449 opened by exarkun

[NAMES] DNSDatagramProtocol.startProtocol can clobber important state  (12 hours ago)
CLOSED http://twistedmatrix.com/bugs/issue1447 opened by exarkun

[CORE] twisted.internet.udp.Port doesn't notice being disconnected  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1448 opened by exarkun

[CORE] twisted doesn't pass tests on FreeBSD  (2 days ago)
       http://twistedmatrix.com/bugs/issue1434 opened by titty

twisted.plugin.getCache fails on Windows  (yesterday)
       http://twistedmatrix.com/bugs/issue1445 opened by amberite

[WORDS, XISH] twisted.words.xish.domish doesn't deal with namespaces properly  (yesterday)
       http://twistedmatrix.com/bugs/issue1444 opened by ralphm

[WEB2] avoid exception in logbytecounter  (2 days ago)
       http://twistedmatrix.com/bugs/issue1437 opened by andrea

[WEB2] main.CONNECTION_LOST is not error.ConnectionLost().  (2 days ago)
       http://twistedmatrix.com/bugs/issue1435 opened by andrea

[MAIL] [imap4] mismatched quoting spuriously raised  (yesterday)
       http://twistedmatrix.com/bugs/issue1443 opened by jojo

[DEFERRED, DOCUMENTATION] Document DeferredSemaphore in "Using Deferreds"  (2 days ago)
       http://twistedmatrix.com/bugs/issue1432 opened by moof

proxy-authorization is a hop by hop header  (3 days ago)
       http://twistedmatrix.com/bugs/issue1431 opened by robertc

[CORE] Uninstalling tksupport is not working  (2 days ago)
       http://twistedmatrix.com/bugs/issue1433 opened by toledo

[TRIAL] trial reporter doesn't write to streams properly  (5 days ago)
       http://twistedmatrix.com/bugs/issue1430 opened by exarkun

web page left pane layout is broken (patch included)  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1429 opened by ghazel

z.i.Interface interfaces should not have "self" in method signatures  (6 days ago)
       http://twistedmatrix.com/bugs/issue1428 opened by marienz

[CORE] win32 process' signalProcess() should differentiate between clean and extreme-prejudice kills  (6 days ago)
       http://twistedmatrix.com/bugs/issue1427 opened by itamarst

                    ==== Feature ====
fastcgi client support in twisted.web2  (yesterday)
       http://twistedmatrix.com/bugs/issue1446 opened by PenguinOfDoom

[WEB2] add getCookie/setCookie to web2.http_headers.Headers  (2 days ago)
       http://twistedmatrix.com/bugs/issue1436 opened by andrea

[CORE] Endpoints a flexible high level connection API.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1442 opened by dreid

[CORE] Support registering adapters by the fully qualified python name of objects involved  (2 days ago)
       http://twistedmatrix.com/bugs/issue1441 opened by exarkun

[CHAT] [PATCH] msnsupport/oscarsupport, t.w.im update  (2 days ago)
       http://twistedmatrix.com/bugs/issue1438 opened by moea

Implement spawnProcess for default reactor on Windows  (21 months ago)
CLOSED http://twistedmatrix.com/bugs/issue591 opened by justinj

                    ==== Wish ====
[CORE] Remove old cred  (2 days ago)
       http://twistedmatrix.com/bugs/issue1440 opened by exarkun

[CONCH] Manhole should support logging transcripts somehow  (2 days ago)
       http://twistedmatrix.com/bugs/issue1439 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, PB] Stray print statement in twisted.pb.remoteinterface.RemoteInterfaceClass.__init__  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1394 opened by exarkun, closed by radix

[TRIAL] trial misreports pyunit test names  (7 days ago)
       http://twistedmatrix.com/bugs/issue1425 opened by itamarst, closed by jml

                    ==== Bug ====
[NAMES] DNSDatagramProtocol.startProtocol can clobber important state  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1447 opened by exarkun, closed by exarkun

[CORE] posixbase win32 waker problem  (1 month ago)
       http://twistedmatrix.com/bugs/issue1344 opened by antony, closed by exarkun

[TRIAL] Trial temp directory behavior is a little off  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1413 opened by jml, closed by jml

web page left pane layout is broken (patch included)  (6 days ago)
       http://twistedmatrix.com/bugs/issue1429 opened by ghazel, closed by exarkun

[WEB] File inherrits from Resource class, which exports too much API  (1 week ago)
       http://twistedmatrix.com/bugs/issue1423 opened by wsanchez, closed by wsanchez

                    ==== Feature ====
Implement spawnProcess for default reactor on Windows  (21 months ago)
       http://twistedmatrix.com/bugs/issue591 opened by justinj, closed by glyph




From radeex at gmail.com  Wed Jan 25 04:01:51 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 20:01:51 +1100
Subject: [Twisted-Python] twistd question
In-Reply-To: <courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>
References: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
	<courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>
Message-ID: <60ed19d40601250101t29d18254x6faf49165677547d@mail.gmail.com>

On 1/25/06, Ross Jekel <ross at sourcelabs.com> wrote:
> > Since each of those subprocessing needs to be connected to the message
> > queue, I'd like to use twistd to run them and benefit from the application
> > level abstractions for setting up the service. But I'm not entirely sure
> > how to use twistd property when I may have multiple instances of the same
> > .tac file running. Basically, I need to spawn worker subprocessing that
> > during the time they are doing work are services so that they can
> > communicate with the messaging subsystem.

I don't really see why you want the subprocesses to be run with
twistd. If all they do is do some computations that aren't given back
to the client, they might as well just be blocking code that you kick
off with a spawnProcess. Maybe you could shed a bit more light on what
these subprocesses will actually be doing, and what sort of data they
need to pass back to the main server, if any.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mwh at python.net  Wed Jan 25 05:13:06 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 10:13:06 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
Message-ID: <2md5igliod.fsf@starship.python.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>>Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>>
>>> [moving this to twisted-python, where it clearly belongs]
>>>
>>> Michael Hudson wrote:
>>> [...]
>>>>
>>>> Well, I've had a quick pop at the interesting bit of this task while
>>>> travelling over the weekend: using the compiler module I can extract
>>>> the docstrings and class hierachy of all the stuff in the Twisted
>>>> source.  It's a touch fragile, but seems to work for all the
>>>> constructions used by Twisted.
>>>>
>>>> One issue is classes that are defined in one file but generally used
>>>> from another, for example twisted.spread.jelly.Serializable is often
>>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>>> be documented it?
>>>
>>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>>> suggestion of using __all__ to determine where an aliased thing should be
>>> documented.
>
> +1 for using a mechanism associated with an existing Python idiom

The pb classes are not in an __all__ currently.  I also think that
__all__ is an abomination, but I'll try to suppress that :)

>>
>>Hmm, that could work.  Although having the "official" name for a class
>>different from its __name__ is fairly horrible :)
>>
>>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>>> no-op call like "alias('Serializable')" in the relevant module that the doc
>>> extractor could notice.  Or keep an explicit list of overrides in a file...
>>
>>These also could work, as could magic comments (though that would be
>>marginally harder).
>
> -1 for magic markup embedded in source files

There's going to need to be some magic/special casing at some level,
to deal with twisted.python.components.Interface.

Cheers,
mwh

-- 
  Screaming 14-year-old boys attempting to prove to each other that
  they are more 3133t than j00.
         -- Reason #8 for quitting slashdot today, from
            http://www.cs.washington.edu/homes/klee/misc/slashdot.html




From radeex at gmail.com  Wed Jan 25 05:35:13 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 21:35:13 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2md5igliod.fsf@starship.python.net>
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
Message-ID: <60ed19d40601250235k59f2b8b1v3007f8e7cbea0c81@mail.gmail.com>

On 1/25/06, Michael Hudson <mwh at python.net> wrote:
> Jean-Paul Calderone <exarkun at divmod.com> writes:
> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
> >>>> One issue is classes that are defined in one file but generally used
> >>>> from another, for example twisted.spread.jelly.Serializable is often
> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
> >>>> be documented it?
> >>>
> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
> >>> suggestion of using __all__ to determine where an aliased thing should be
> >>> documented.
> >
> > +1 for using a mechanism associated with an existing Python idiom
>
> The pb classes are not in an __all__ currently.  I also think that
> __all__ is an abomination, but I'll try to suppress that :)

I agree about __all__ being an abomination.  I also don't see how we
can use __all__ to determine where they're documented without doing
something weird or hard. For example,

from foo import bar
__all__ == 'bar'

with static analysis of Python code it is impossible to know what
source 'bar' is from. Ok, we can at least have a best try at finding
the source by trawling PYTHONPATH or something. Don't forget, we
should *also* either prevent the object from being documented at its
definition-source, or perhaps put a reference from there to the
"official" name in the docs.

Hence, I think it's better to have something more explicit to mark
"official FQPNs", like aliases =
{'twisted.spread.flavors.Referenceable':
'twisted.spread.pb.Referenceable'}.

> >>Hmm, that could work.  Although having the "official" name for a class
> >>different from its __name__ is fairly horrible :)

Is that a suggestion to hack the __name__ attribute, or to not do this
kind of interface-different-from-implementation stuff?

> >>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
> >>> no-op call like "alias('Serializable')" in the relevant module that the doc
> >>> extractor could notice.  Or keep an explicit list of overrides in a file...
> >>
> >>These also could work, as could magic comments (though that would be
> >>marginally harder).
> >
> > -1 for magic markup embedded in source files
>
> There's going to need to be some magic/special casing at some level,
> to deal with twisted.python.components.Interface.

I prefer something like __doc_alias__ = ... to alias(). It's faster! ;-)
I also wouldn't mind just putting this in some file *outside* of the
Python code, but I think I prefer slightly to have it next to where
it's relevant (and easier to maintain).

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Wed Jan 25 05:39:09 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 21:39:09 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2md5igliod.fsf@starship.python.net>
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
Message-ID: <60ed19d40601250239g32ebffebh50151d6799cf67f5@mail.gmail.com>

On 1/25/06, Michael Hudson <mwh at python.net> wrote:
> There's going to need to be some magic/special casing at some level,
> to deal with twisted.python.components.Interface.

Oh right, I forgot to ask: what do you mean about this? extracting the
docs from an Interface should really be the same as extracting it from
a class... of course, it'd also be *hella* useful for the doc
extractor to find implements() lines in the *implementations* of those
Interfaces.. Is that what you're referring to?


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mwh at python.net  Wed Jan 25 07:12:13 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 12:12:13 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
	<60ed19d40601250239g32ebffebh50151d6799cf67f5@mail.gmail.com>
Message-ID: <2m8xt4ld5u.fsf@starship.python.net>

Christopher Armstrong <radeex at gmail.com> writes:

> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>> There's going to need to be some magic/special casing at some level,
>> to deal with twisted.python.components.Interface.
>
> Oh right, I forgot to ask: what do you mean about this? extracting the
> docs from an Interface should really be the same as extracting it from
> a class...

Well, I'm not entirely sure what I meant :) I was somewhat assuming
that you'd want to document interfaces differently from classes and
that specifically you'd want to document t.p.c.Interface *somehow* and
it's currently defined like this:

Interface = MetaInterface("Interface", __module__="twisted.python.components")

which doesn't look much like a class to my code.

> of course, it'd also be *hella* useful for the doc extractor to find
> implements() lines in the *implementations* of those Interfaces.. Is
> that what you're referring to?

No, but that could be done too.

Cheers,
mwh

-- 
  Well, you pretty much need Microsoft stuff to get misbehaviours
  bad enough to actually tear the time-space continuum.  Luckily 
  for you, MS Internet Explorer is available for Solaris.
                              -- Calle Dybedahl, alt.sysadmin.recovery




From mwh at python.net  Wed Jan 25 07:17:12 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 12:17:12 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
	<60ed19d40601250235k59f2b8b1v3007f8e7cbea0c81@mail.gmail.com>
Message-ID: <2m4q3slcxj.fsf@starship.python.net>

Christopher Armstrong <radeex at gmail.com> writes:

> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>> Jean-Paul Calderone <exarkun at divmod.com> writes:
>> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>> >>>> One issue is classes that are defined in one file but generally used
>> >>>> from another, for example twisted.spread.jelly.Serializable is often
>> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>> >>>> be documented it?
>> >>>
>> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>> >>> suggestion of using __all__ to determine where an aliased thing should be
>> >>> documented.
>> >
>> > +1 for using a mechanism associated with an existing Python idiom
>>
>> The pb classes are not in an __all__ currently.  I also think that
>> __all__ is an abomination, but I'll try to suppress that :)
>
> I agree about __all__ being an abomination.  I also don't see how we
> can use __all__ to determine where they're documented without doing
> something weird or hard. For example,
>
> from foo import bar
> __all__ == 'bar'
>
> with static analysis of Python code it is impossible to know what
> source 'bar' is from.

Not really, no: this is part of the reason my code defines a "System"
and shoves all the data into it.  So long as 'foo' is one of the
modules that gets fed to the extractor, you can resolve this kind of
thing (I've done it before).

> Ok, we can at least have a best try at finding the source by
> trawling PYTHONPATH or something. Don't forget, we should *also*
> either prevent the object from being documented at its
> definition-source, or perhaps put a reference from there to the
> "official" name in the docs.

Yes, absolutely.

> Hence, I think it's better to have something more explicit to mark
> "official FQPNs", like aliases =
> {'twisted.spread.flavors.Referenceable':
> 'twisted.spread.pb.Referenceable'}.

>> >>Hmm, that could work.  Although having the "official" name for a class
>> >>different from its __name__ is fairly horrible :)
>
> Is that a suggestion to hack the __name__ attribute, or to not do this
> kind of interface-different-from-implementation stuff?

Well, it just strikes me that

from twisted.mail.pop3client import POP3Client as AdvancedPOP3Client

is a little weird.  It will show up in reprs and so on as
"POP3Client", which seems likely to confuse the poor user if it's
"really" AdvancedPOP3Client.

>> >>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>> >>> no-op call like "alias('Serializable')" in the relevant module that the doc
>> >>> extractor could notice.  Or keep an explicit list of overrides in a file...
>> >>
>> >>These also could work, as could magic comments (though that would be
>> >>marginally harder).
>> >
>> > -1 for magic markup embedded in source files
>>
>> There's going to need to be some magic/special casing at some level,
>> to deal with twisted.python.components.Interface.
>
> I prefer something like __doc_alias__ = ... to alias(). It's faster! ;-)
> I also wouldn't mind just putting this in some file *outside* of the
> Python code, but I think I prefer slightly to have it next to where
> it's relevant (and easier to maintain).

Anything is possible :)

Cheers,
mwh

-- 
  The gripping hand is really that there are morons everywhere, it's
  just that the Americon morons are funnier than average.
                              -- Pim van Riezen, alt.sysadmin.recovery




From exarkun at divmod.com  Wed Jan 25 10:21:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 10:21:00 -0500
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2m4q3slcxj.fsf@starship.python.net>
Message-ID: <20060125152100.2697.1575957623.divmod.quotient.1554@ohm>

On Wed, 25 Jan 2006 12:17:12 +0000, Michael Hudson <mwh at python.net> wrote:
>Christopher Armstrong <radeex at gmail.com> writes:
>
>> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>>> Jean-Paul Calderone <exarkun at divmod.com> writes:
>>> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>>> >>>> One issue is classes that are defined in one file but generally used
>>> >>>> from another, for example twisted.spread.jelly.Serializable is often
>>> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>> >>>> be documented it?
>>> >>>
>>> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>>> >>> suggestion of using __all__ to determine where an aliased thing should be
>>> >>> documented.
>>> >
>>> > +1 for using a mechanism associated with an existing Python idiom
>>>
>>> The pb classes are not in an __all__ currently.  I also think that
>>> __all__ is an abomination, but I'll try to suppress that :)
>>
>> I agree about __all__ being an abomination.  I also don't see how we
>> can use __all__ to determine where they're documented without doing
>> something weird or hard. For example,
>>
>> from foo import bar
>> __all__ == 'bar'
>>
>> with static analysis of Python code it is impossible to know what
>> source 'bar' is from.
>
>Not really, no: this is part of the reason my code defines a "System"
>and shoves all the data into it.  So long as 'foo' is one of the
>modules that gets fed to the extractor, you can resolve this kind of
>thing (I've done it before).

Besides, you *have* to do this anyway:

    from foo import bar

    def baz():
        """
        See L{bar}.
        """

Jean-Paul



From leszczynscy at yahoo.com  Wed Jan 25 13:13:22 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Wed, 25 Jan 2006 10:13:22 -0800 (PST)
Subject: [Twisted-Python] reacting for bsddb changes
Message-ID: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>

Hi,

Short question. Is there any way to have an object
associates somehow with the reactor's main loop, so
the application can react for the changes in the
databases. I just want to avoid to have a timer which
would poll the Berkley db table periodically.

The application runs on Linux and M$ Windex.

Thanks, AndyL




From leszczynscy at yahoo.com  Wed Jan 25 16:37:35 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Wed, 25 Jan 2006 13:37:35 -0800 (PST)
Subject: [Twisted-Python] Performance footprint of the twisted.internet.task
Message-ID: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>

Hi,

I have three programs which do nothing besides a
certain function/code line is executed approximately
100 times a second. Not big deal it would seem.

1:
from twisted.internet import task
from twisted.internet import reactor

def runEverySecond():
    pass

l=task.LoopingCall(runEverySecond)
l.start(0.01)
reactor.run()


2:
import time

while 1:
    #f()
    time.sleep(0.01)

3:
from twisted.internet import reactor

def f(p):
    reactor.callLater(0.01,f,0)

f(0)

reactor.run()


* * *

I use version 1.3 of twisted on to of the python 2.3
and run it on Windows XP. Interestingly when executing
second and third snippet the CPU utilization is not
impacted while the first program leaves python taking
minimal but visible 1-2% of CPU.

Does anybody have any idea why it would take place?

Thx,
AndyL





From itamar at itamarst.org  Wed Jan 25 17:43:58 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 25 Jan 2006 17:43:58 -0500
Subject: [Twisted-Python] Performance footprint of the
	twisted.internet.task
In-Reply-To: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
References: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
Message-ID: <1138229038.9890.12.camel@localhost.localdomain>

On Wed, 2006-01-25 at 13:37 -0800, Andy Leszczynski wrote:

> I use version 1.3 of twisted on to of the python 2.3
> and run it on Windows XP. Interestingly when executing
> second and third snippet the CPU utilization is not
> impacted while the first program leaves python taking
> minimal but visible 1-2% of CPU.

What do you get with Twisted 2.1?




From exarkun at divmod.com  Wed Jan 25 23:54:40 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 23:54:40 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15740 - Add tests for
	TodoTest.
In-Reply-To: <E1F1uIH-00087e-00@wolfwood>
Message-ID: <20060126045440.2697.1730851462.divmod.quotient.1748@ohm>

On Wed, 25 Jan 2006 16:43:17 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Wed Jan 25 16:43:17 2006
>New Revision: 15740
>
>Modified:
>   trunk/twisted/trial/test/test_tests.py
>   trunk/twisted/trial/unittest.py
>Log:
>Add tests for TodoTest.
>Fix makeTodo(failure).
>
> [snip]
>@@ -65,7 +66,7 @@
>             errors = [errors]
>         return Todo(reason=reason, errors=errors)
>     if isinstance(value, failure.Failure):
>-        return Todo(reason=str(value))
>+        return Todo(reason=str(value.value))

How about value.getErrorMessage() here?

Jean-Paul



From exarkun at divmod.com  Wed Jan 25 23:55:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 23:55:50 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15739 - Add TodoTest;
	peer to SkipTest
In-Reply-To: <E1F1u8G-00086T-00@wolfwood>
Message-ID: <20060126045550.2697.1091573788.divmod.quotient.1749@ohm>

On Wed, 25 Jan 2006 16:32:57 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Wed Jan 25 16:32:56 2006
>New Revision: 15739
>
>Modified:
>   trunk/twisted/trial/unittest.py
>Log:
>Add TodoTest; peer to SkipTest
>
> [snip]
>@@ -467,8 +483,9 @@
>         if len(f.value.args) > 0:
>             reason = f.value.args[0]
>         else:
>-            warnings.warn(("Do not raise unittest.SkipTest with no "
>-                           "arguments! Give a reason for skipping tests!"),
>+            warnings.warn(("Do not raise unittest.SkipTest or "
>+                           "unittest.TodoTest with no arguments! Give a reason "
>+                           "for skipping tests!"),
>                           stacklevel=2)
>             reason = f
>         return reason

There's no reason to allow no arguments for this new feature.  The warning is in place for SkipTest because at one point it was allowed to raise a SkipTest with no reason, but this was never the case for TodoTest.

Jean-Paul



From glyph at divmod.com  Wed Jan 25 23:59:25 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 25 Jan 2006 23:59:25 -0500
Subject: [Twisted-Python] cleaning up unit test failures
In-Reply-To: 0
Message-ID: <20060126045925.2697.514573524.divmod.quotient.1751@ohm>

I just wanted to let everyone know that the recent buildbot failures on win32 (the process-related ones) are about half my fault.  At the time that I wrote the offending code, I couldn't get a full test run for the win32 reactor due to a problem which James Knight has since fixed (THANK YOU) and the process tests were passing.

I already have an issue in my queue which describes the problem <http://twistedmatrix.com/bugs/issue654> and I should be fixing it at the latest this weekend.

Anybody know how to fix the other half (mostly _setUpTestdir)?  The problems log for a recent win32select build is here: <http://twistedmatrix.com/buildbot/win32-select/builds/173/step-default/2>

There also seem to be some timing related issues which seem like they should just be todo'd until someone writes a version that has a fake timer rather than a real clock in them.



From exarkun at divmod.com  Thu Jan 26 01:04:19 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Jan 2006 01:04:19 -0500
Subject: [Twisted-Python] cleaning up unit test failures
In-Reply-To: <20060126045925.2697.514573524.divmod.quotient.1751@ohm>
Message-ID: <20060126060419.2697.847879699.divmod.quotient.1765@ohm>

On Wed, 25 Jan 2006 23:59:25 -0500, glyph at divmod.com wrote:
>I just wanted to let everyone know that the recent buildbot failures on 
>win32 (the process-related ones) are about half my fault.  At the time that 
>I wrote the offending code, I couldn't get a full test run for the win32 
>reactor due to a problem which James Knight has since fixed (THANK YOU) and 
>the process tests were passing.
>
>I already have an issue in my queue which describes the problem 
><http://twistedmatrix.com/bugs/issue654> and I should be fixing it at the 
>latest this weekend.
>
>Anybody know how to fix the other half (mostly _setUpTestdir)?  The problems 
>log for a recent win32select build is here: 
><http://twistedmatrix.com/buildbot/win32-select/builds/173/step-default/2>
>
>There also seem to be some timing related issues which seem like they should 
>just be todo'd until someone writes a version that has a fake timer rather 
>than a real clock in them.

If you're referring to the newpb failures, I think we need some other way to deal with them.  I've been trying to catch Warner online, but haven't succeeded so far.

Should this code go back into a branch?  Should buildbot just not run the newpb tests?  Neither of these seems really satisfactory to me, but these failures shouldn't be failing builds: they never passed reliably in the first place.

Jean-Paul



From tv at twistedmatrix.com  Thu Jan 26 03:54:07 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 26 Jan 2006 10:54:07 +0200
Subject: [Twisted-Python] reacting for bsddb changes
In-Reply-To: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>
References: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>
Message-ID: <43D88E2F.7030900@twistedmatrix.com>

Andy Leszczynski wrote:
> Short question. Is there any way to have an object
> associates somehow with the reactor's main loop, so
> the application can react for the changes in the
> databases. I just want to avoid to have a timer which
> would poll the Berkley db table periodically.
> 
> The application runs on Linux and M$ Windex.

How would you do that without twisted?



From leszczynscy at yahoo.com  Thu Jan 26 21:14:05 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Thu, 26 Jan 2006 21:14:05 -0500
Subject: [Twisted-Python] Performance footprint of
	the	twisted.internet.task
In-Reply-To: <1138229038.9890.12.camel@localhost.localdomain>
References: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
	<1138229038.9890.12.camel@localhost.localdomain>
Message-ID: <43D981ED.2080409@yahoo.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2006-01-25 at 13:37 -0800, Andy Leszczynski wrote:
>
>  
>
>>I use version 1.3 of twisted on to of the python 2.3
>>and run it on Windows XP. Interestingly when executing
>>second and third snippet the CPU utilization is not
>>impacted while the first program leaves python taking
>>minimal but visible 1-2% of CPU.
>>    
>>
>
>What do you get with Twisted 2.1?
>  
>
With python2.4 and twisted2.1 I do not observe that phenomena any more. 
I guess it is time to upgrade :-). Thx for the hint.

A.



From neuzhoundxx at yahoo.com  Thu Jan 26 23:27:34 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Thu, 26 Jan 2006 20:27:34 -0800 (PST)
Subject: [Twisted-Python] is it possible to have a (single) twisted client
	that
Message-ID: <20060127042734.89998.qmail@web90203.mail.scd.yahoo.com>

 makes more than one (say, three) connections to the same server instance?
  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests.  All three connections share DATA ID  information,  but should otherwise have "independent" existence so  that they can be configured to have different "behavioral" attributes;  that is, the ADD connection saves the data ids for items successfully  persisted to an 'in-memory' table for later lookups, and UPDATE and  DELETE requests can only be issued for DATA IDs known to be valid for  the "current" session (thus, the "in-memory" table lookups) and each  connection may have attributes such as "send" rates, etc.
  
  If this is possible, could someone please give me some pointers on what  twisted code to study/ look at?  thank you very much for your help!
  

		
---------------------------------
Do you Yahoo!?
 With a free 1 GB, there's more in store with Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060126/1ca005ad/attachment.htm 

From exarkun at divmod.com  Thu Jan 26 23:44:03 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Jan 2006 23:44:03 -0500
Subject: [Twisted-Python] is it possible to have a (single) twisted
	client that
In-Reply-To: <20060127042734.89998.qmail@web90203.mail.scd.yahoo.com>
Message-ID: <20060127044403.2697.206981496.divmod.quotient.1936@ohm>

On Thu, 26 Jan 2006 20:27:34 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
> makes more than one (say, three) connections to the same server instance?
>  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests.  All three connections share DATA ID  information,  but should otherwise have "independent" existence so  that they can be configured to have different "behavioral" attributes;  that is, the ADD connection saves the data ids for items successfully  persisted to an 'in-memory' table for later lookups, and UPDATE and  DELETE requests can only be issued for DATA IDs known to be valid for  the "current" session (thus, the "in-memory" table lookups) and each  connection may have attributes such as "send" rates, etc.
>
>  If this is possible, could someone please give me some pointers on what  twisted code to study/ look at?  thank you very much for your help!
>

This is as easy as calling reactor.connectTCP() three times.  There's nothing special about the first call, or the second call, or the third call.  Each one just sets up a connection attempt.

Try taking echoclient.py from the core examples and adding some more connectTCP calls to it, see what happens.

Jean-Paul



From mwh at python.net  Fri Jan 27 07:13:18 2006
From: mwh at python.net (Michael Hudson)
Date: Fri, 27 Jan 2006 12:13:18 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2m4q3slcxj.fsf@starship.python.net>
	<20060125152100.2697.1575957623.divmod.quotient.1554@ohm>
Message-ID: <2mvew5j2ch.fsf@starship.python.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> Besides, you *have* to do this anyway:
>
>     from foo import bar
>
>     def baz():
>         """
>         See L{bar}.

This is really easy if bar really is "foo.bar".  If foo is a local
import, or if foo.py does

from baz import quux as bar

then it's harder, but still possible -- I wrote code last night to
handle the latter case and will check it in soon-ish.

Cheers,
mwh

-- 
  I can't see a conspicuous evolutionary advantage in being good
  at higher mathematics.                           -- James Riden, asr




From mike at stamen.com  Fri Jan 27 13:51:22 2006
From: mike at stamen.com (Michal Migurski)
Date: Fri, 27 Jan 2006 10:51:22 -0800
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <738A7B99-A5C3-40BC-9E0C-84A26F6717E4@stamen.com>

> My goal: an HTTP proxy living on my local machine (OS X) that will  
> transparently serve up web pages  to myself, while allowing me to  
> snoop & log connections I make to remote servers. I want the  
> equivalent of an Attention Trust recorder (http:// 
> www.attentiontrust.org/services) without having to use Firefox.

I finished the proof-of-concept I needed, it's available at http:// 
mike.teczno.com/notes/attention-proxy.html if anyone is interested in  
recording their browsing history. =)

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060127/6c6d2752/attachment.htm 

From alengarbage at yahoo.com  Fri Jan 27 22:23:50 2006
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Fri, 27 Jan 2006 19:23:50 -0800 (PST)
Subject: [Twisted-Python] parallel callbacks? Or inserting into the callback
	chain?
Message-ID: <20060128032350.53467.qmail@web31513.mail.mud.yahoo.com>

Is there any way to make a deferred call its callbacks
'in parallel,' or to insert a callback into the
callback chain at a point further up than the end?  Or
maybe there is some other pattern for doing what I
need to accomplish, which is getting the result from a
deferred before it gets modified by the return of
other callbacks that have already been added, but
before it is fired.

Here is an example that illustrates why I need
something like this.  It is almost identical to the
first example in the deferred howto
(http://twistedmatrix.com/projects/core/documentation/howto/defer.html):

from twisted.internet import reactor, defer

pending = {}

def getDummyData(queryName, x):
    if pending.has_key(x):
        print "%s piggybacking on pending big
expensive query" 
            % queryName
        return pending[x]

    d = defer.Deferred()
    # simulate a delayed result by asking the reactor
to fire the
    # Deferred in 2 seconds time with the result x*3
    print "%s about to do some big expensive query" %
queryName
    reactor.callLater(2, d.callback, x*3)
    pending[x] = d
    return d

def printData(d, queryName):
    """
    Data handling function to be added as a callback:
handles the
    data by printing the result
    """
    print "%s received: %s" % (queryName, d)

# simulate two calls (originating from some client[s])
at roughly the same
# time for the same query.
d = getDummyData('query1',3)
d.addCallback(printData,'query1')
d = getDummyData('query2',3)
d.addCallback(printData,'query2')

# manually set up the end of the process by asking the
reactor to
# stop itself in 13 seconds time
reactor.callLater(4, reactor.stop)
# start up the Twisted reactor (event loop handler)
manually
reactor.run()


The output, as you might expect, looks like this:

query1 about to do some big expensive query thing
query2 piggybacking on pending big expensive query
thing
query1 received: 9
query2 received: None

I'd like the output for query2 to match that of
query1.

Of course, this could be accomplished by adding a
'return d' to the end of printData(), but this is not
feasible in this case, because the caller of
getDummyData() might have added his own callbacks (in
addition to printData()) that do whatever it is that
he desires, including changing the return result or
not propogating it up the chain.

In the scenario I am designing for, getDummyData()
will be invoked by client(s), and we don't want to
open up new "big expensive" queries to the source if
one is already pending that matches.  Thus, I'd love
for getDummyData() to return a deferred that
piggybacks on an existing query, if one that matches
is still pending.

Can this be done?  Is there a way to modify the above
[simple] example so that it performs this behavior? 
Is there some other way to approach the problem that
I'm missing?

Thanks,
Lenny G.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From neuzhoundxx at yahoo.com  Fri Jan 27 23:16:49 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Fri, 27 Jan 2006 20:16:49 -0800 (PST)
Subject: [Twisted-Python] is it possible to have a (single) twisted client
	that
In-Reply-To: <20060127044403.2697.206981496.divmod.quotient.1936@ohm>
Message-ID: <20060128041649.64035.qmail@web90206.mail.scd.yahoo.com>

Thank you. I wonder if I could ask a follow-on question.
  Below is a version of echoclient that seems to work.
  I overrode EchoFactory's __init__ method to initialize the client id
  "generator" to zero and the buildProtocol method to create a protocol
  instance and give that instance its own unique id.  I stop the reactor when the last connection "signs off".
  
  I'm now wondering: what's the best way to enable the protocol instances  to have different behaviors? Here's my current thinking:  Maybe I  can have EchoFactory pass an appropriate "delegate" object to each  protocol instance so that the implementation of methods such as  connectionMade would be something like this:
  
  def connectionMade(self):
        self.delegate.connectionMade()
  
  The approach I was thinking of using to pass this delegate from  EchoFactory to a protocol instance was something "hokey" like if  next_client_id = 1, then pass to the protocol instance the delegate  object associated with a key of 1 in the dictionary { 1:delegate1,  2:delegate2, ...}.  Are there better approaches available? Again,  thanks for any help or advice!
  
  
  sample code for a multi-connect client:
  -----------------------------------------------------------------------------------------------------------
  from twisted.internet import reactor, protocol
  
  
  # a client protocol
  
  class EchoClient(protocol.Protocol):
      """Once connected, send a message, then print the result."""
      
      def __init__(self, id):
          self.id = id
  
      def connectionMade(self):
          self.transport.write("sender# %d says: hello, world!" % self.id)
      
      def dataReceived(self, data):
          "As soon as any data is received, write it back."
          print "Server said:", data
          self.transport.loseConnection()
      
      def connectionLost(self, reason):
          print "connection lost"
          from twisted.internet import reactor
          #reactor.stop()
  
  
  class EchoFactory(protocol.ClientFactory):
      protocol = EchoClient
  
      def __init__(self):
          self.next_client_id = 0
  
      def buildProtocol(self, addr):
          print "buildProtocol called"
          self.next_client_id += 1
          p = self.protocol(self.next_client_id)
          p.factory = self
          return p
  
      def clientConnectionFailed(self, connector, reason):
          print "Connection failed - goodbye!"
          reactor.stop()
      
      def clientConnectionLost(self, connector, reason):
          print "Connection lost - goodbye!"
          print "numPorts= %d" % self.numPorts
          if self.numPorts == 1:
              reactor.stop()
  
  
  # this connects the protocol to a server runing on port 8000
  def main():
      f = EchoFactory()
      reactor.connectTCP("localhost", 8000, f)
      reactor.connectTCP("localhost", 8000, f)
      reactor.connectTCP("localhost", 8000, f)
      reactor.run()
  
  # this only runs if the module was *not* imported
  if __name__ == '__main__':
      main()
  
  

Jean-Paul Calderone <exarkun at divmod.com> wrote:  On Thu, 26 Jan 2006 20:27:34 -0800 (PST), john peter  wrote:
> makes more than one (say, three) connections to the same server instance?
>  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests. All three connections share DATA ID information, but  should otherwise have "independent" existence so that they can be  configured to have different "behavioral" attributes; that is, the ADD  connection saves the data ids for items successfully persisted to an  'in-memory' table for later lookups, and UPDATE and DELETE requests can  only be issued for DATA IDs known to be valid for the "current" session  (thus, the "in-memory" table lookups) and each connection may have  attributes such as "send" rates, etc.
>
> If this is  possible, could someone please give me some pointers on what twisted  code to study/ look at? thank you very much for your help!
>

This  is as easy as calling reactor.connectTCP() three times. There's nothing  special about the first call, or the second call, or the third call.  Each one just sets up a connection attempt.

Try taking echoclient.py from the core examples and adding some more connectTCP calls to it, see what happens.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



		
---------------------------------
 
 What are the most popular cars? Find out at Yahoo! Autos 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060127/182254d4/attachment.htm 

From leszczynscy at yahoo.com  Fri Jan 27 23:27:20 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Fri, 27 Jan 2006 20:27:20 -0800 (PST)
Subject: [Twisted-Python] Deferred ownership and the Protocols
Message-ID: <20060128042720.48877.qmail@web30012.mail.mud.yahoo.com>

Hi,

I am in the process of designing the custom Protocol
and will use Deferred-s in order to pass the
asynchronous results. I try to learn from the current
Twisted code base.

For instance there are two modules smtp.py and
web/client.py:

def getPage(url, contextFactory=None, *args,
**kwargs):
[
]
    factory = HTTPClientFactory(url, *args, **kwargs)
[
]
        reactor.connectTCP(host, port, factory)
[
]
    return factory.deferred




def sendEmail(smtphost, fromEmail, toEmail, content,
headers = None, attachments = None, multipartbody =
"mixed"):
[
]
    d = defer.Deferred()
    factory = SMTPSenderFactory(fromEmail, toEmail, f,
d)
    reactor.connectTCP(smtphost, 25, factory)
    return d


In the first case the deferred is owned/created by the
Factory, in the second by the sendEmail helper. Is
there any reason behind those, what is the
recommendation? If my question is not clear :-), let
me know.

Thx,
Andy



From exarkun at divmod.com  Fri Jan 27 23:36:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 27 Jan 2006 23:36:15 -0500
Subject: [Twisted-Python] is it possible to have a (single) twisted
	client that
In-Reply-To: <20060128041649.64035.qmail@web90206.mail.scd.yahoo.com>
Message-ID: <20060128043615.2697.1834581128.divmod.quotient.2108@ohm>

On Fri, 27 Jan 2006 20:16:49 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
>Thank you. I wonder if I could ask a follow-on question.
>  Below is a version of echoclient that seems to work.
>  I overrode EchoFactory's __init__ method to initialize the client id
>  "generator" to zero and the buildProtocol method to create a protocol
>  instance and give that instance its own unique id.  I stop the reactor when the last connection "signs off".
>
>  I'm now wondering: what's the best way to enable the protocol instances  to have different behaviors? Here's my current thinking:  Maybe I  can have EchoFactory pass an appropriate "delegate" object to each  protocol instance so that the implementation of methods such as  connectionMade would be something like this:
>
>  def connectionMade(self):
>        self.delegate.connectionMade()
>
>  The approach I was thinking of using to pass this delegate from  EchoFactory to a protocol instance was something "hokey" like if  next_client_id = 1, then pass to the protocol instance the delegate  object associated with a key of 1 in the dictionary { 1:delegate1,  2:delegate2, ...}.  Are there better approaches available? Again,  thanks for any help or advice!
>

You could make the "delegates" into the actual protocols:

    from twisted.internet import protocol

    class ClientOne(protocol.Protocol):
        # Stuff for the first client to do

    class ClientTwo(protocol.Protocol):
        # Stuff for the second client to do

    # etc
    for protoClass in ClientOne, ClientTwo:
        f = protocol.ClientFactory()
        f.protocol = protoClass
        reactor.connectTCP("host", 8000, f)

Jean-Paul



From alengarbage at yahoo.com  Sat Jan 28 00:54:54 2006
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Fri, 27 Jan 2006 21:54:54 -0800 (PST)
Subject: [Twisted-Python] Re: parallel callbacks? Or inserting into the
	callback chain?
Message-ID: <20060128055454.3204.qmail@web31513.mail.mud.yahoo.com>

Okay, I think I figured it out.  The idea is to create
new Deferreds for each call, but keep the 'matching'
ones in a list.  Then, when the first fires, use it to
fire callbacks for each of those:

from twisted.internet import reactor, defer

pending = {}
waiting = {}

def getDummyData(queryName, x):

    def serviceWaiting(res, x):
        #print "in saveResult"
        if waiting.has_key(x):
            #print "waiting has_key"
            for i in waiting[x]:
                #print "calling back with %s on %s" %
(res, i)
                i.callback(res)
            waiting.pop(x)
        pending.pop(x)
        #print "pending now: %s" % pending
        #print "waiting now: %s" % waiting
        return res

    if pending.has_key(x):
        print "%s piggybacking on pending big
expensive query" % queryName
        d = defer.Deferred()
        if not waiting.has_key(x):
            waiting[x] = []
        waiting[x].append(d)
        #print "returning %s" % d
        return d

    d = defer.Deferred()
    # simulate a delayed result by asking the reactor
to fire the
    # Deferred in 2 seconds time with the result x*3
    print "%s about to do some big expensive query" %
queryName
    reactor.callLater(2, d.callback, x*3)
    pending[x] = d
    d.addCallback(serviceWaiting, x)   # addBoth() may
be a better choice
    return d

def printData(d, queryName):
    """
    Data handling function to be added as a callback:
handles the
    data by printing the result
    """
    print "%s received: %s" % (queryName, d)

d = getDummyData('query1',3)
d.addCallback(printData,'query1')
d = getDummyData('query2',3)
d.addCallback(printData,'query2')

# manually set up the end of the process by asking the
reactor to
# stop itself in 13 seconds time
reactor.callLater(4, reactor.stop)
# start up the Twisted reactor (event loop handler)
manually
reactor.run()


I was making it harder than it needed to be.

Lenny G.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From emlprime at yahoo.com  Sun Jan 29 18:51:25 2006
From: emlprime at yahoo.com (Peter Stradinger)
Date: Sun, 29 Jan 2006 15:51:25 -0800 (PST)
Subject: [Twisted-Python] Perspective Broker example broken
Message-ID: <20060129235125.57838.qmail@web52704.mail.yahoo.com>

Hi,

I'm trying to get the Authentication with Perspective Broker examples to work, and I'm getting a
Failure:

http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatserver.py
http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatclient.py

The server returns this error when you run the client:

Unhandled error in Deferred:
Traceback (most recent call last):
Failure: twisted.spread.pb.PBConnectionLost: [Failure instance: Traceback (failure with no
frames): twisted.internet.error.ConnectionDone: Connection was closed cleanly.
]

What does this mean?  It doesn't occur if I don't call reactor.stop() from the client.  Is there
some other cleanup I have to do when shutting down the reactor from the client side?

Peter


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From rob.mason at ammeon.com  Tue Jan 31 06:43:02 2006
From: rob.mason at ammeon.com (Rob Mason)
Date: Tue, 31 Jan 2006 11:43:02 +0000
Subject: [Twisted-Python] How to do cleanup to server on sigint
Message-ID: <43DF4D46.3090407@ammeon.com>

Hi ,
I am using twisted to write a test client to interface with a server 
running a bespoke protocol.
The server expects interactions from the client something like:
 attach
        sendMessage
        sendMessage
          .
          .
          .
  unattach

If the server does not receive a specific unattach from the client , it 
will maintain a resource open for the client even though there is no 
connection.
Eventually the server will refuse additional connections (once it's 
number of 'open' connections exceeds some limit).

I want my client to be able to send an 'unattach' message before closing.

Is there a way I can override the default reactor behaviour in handling 
e.g. SIGINT so that I can force my client to send the unattach message 
before proceeding with normal reactor sigint handling?


Rgds
Rob Mason



From exarkun at divmod.com  Tue Jan 31 09:23:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:23:30 -0500
Subject: [Twisted-Python] How to do cleanup to server on sigint
In-Reply-To: <43DF4D46.3090407@ammeon.com>
Message-ID: <20060131142330.2697.79538061.divmod.quotient.2798@ohm>

On Tue, 31 Jan 2006 11:43:02 +0000, Rob Mason <rob.mason at ammeon.com> wrote:
>Hi ,
>I am using twisted to write a test client to interface with a server running 
>a bespoke protocol.
>The server expects interactions from the client something like:
>attach
>        sendMessage
>        sendMessage
>          .
>          .
>          .
>  unattach
>
>If the server does not receive a specific unattach from the client , it will 
>maintain a resource open for the client even though there is no connection.
>Eventually the server will refuse additional connections (once it's number 
>of 'open' connections exceeds some limit).

  Is it intentional that resource allocation is independent of actual TCP connections?  If not, perhaps you just want to clean things up when a connection is lost.  You may also want to use a TCP or app-level keep alive so as to notice connections lost due to network problems.

>
>I want my client to be able to send an 'unattach' message before closing.
>
>Is there a way I can override the default reactor behaviour in handling e.g. 
>SIGINT so that I can force my client to send the unattach message before 
>proceeding with normal reactor sigint handling?

You don't actually care about SIGINT, just shutdown.  The lowest level hook available for this is the shutdown system event, which can receive notification of via:

    reactor.addSystemEventTrigger('before', 'shutdown', f)

Twisted includes a service system which takes advantage of this feature, which you may want to use instead.  See <http://twistedmatrix.com/projects/core/documentation/howto/application.html>, which mostly talks about servers, but clients are approximately the same.

Jean-Paul



From exarkun at divmod.com  Tue Jan 31 09:29:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:29:15 -0500
Subject: [Twisted-Python] Perspective Broker example broken
In-Reply-To: <20060129235125.57838.qmail@web52704.mail.yahoo.com>
Message-ID: <20060131142915.2697.1734694629.divmod.quotient.2801@ohm>

On Sun, 29 Jan 2006 15:51:25 -0800 (PST), Peter Stradinger <emlprime at yahoo.com> wrote:
>Hi,
>
>I'm trying to get the Authentication with Perspective Broker examples to work, and I'm getting a
>Failure:
>
>http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatserver.py
>http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatclient.py
>
>The server returns this error when you run the client:
>
>Unhandled error in Deferred:
>Traceback (most recent call last):
>Failure: twisted.spread.pb.PBConnectionLost: [Failure instance: Traceback (failure with no
>frames): twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>]
>
>What does this mean?

PB was doing something, and had possibly exposed a Deferred to application-level code, but suddenly the connection was lost, before a result with which to fire that Deferred could be constructed from bytes received from the network.

>It doesn't occur if I don't call reactor.stop() from the client.  Is there
>some other cleanup I have to do when shutting down the reactor from the 
>client side?

Most likely, the server's send() call has not had a chance to complete fully when the client decided to exit.  This prevents the client from sending its reply to the send() call.  The server reports exactly what happened.

You can avoid this by only disconnecting (ie, stopping the reactor) when receiving a response to a call (as opposed to doing so when you receive a call but before you respond), although this can be difficult if you have more than one thing happening at a time.

More likely, you just want to handle PBConnectionLost on the server.  In many cases, it is probably appropriate just to trap and ignore it.

Jean-Paul



From exarkun at divmod.com  Tue Jan 31 09:32:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:32:29 -0500
Subject: [Twisted-Python] Deferred ownership and the Protocols
In-Reply-To: <20060128042720.48877.qmail@web30012.mail.mud.yahoo.com>
Message-ID: <20060131143229.2697.1995070941.divmod.quotient.2803@ohm>

On Fri, 27 Jan 2006 20:27:20 -0800 (PST), Andy Leszczynski <leszczynscy at yahoo.com> wrote:
>Hi,
>
>I am in the process of designing the custom Protocol
>and will use Deferred-s in order to pass the
>asynchronous results. I try to learn from the current
>Twisted code base.
>
>For instance there are two modules smtp.py and
>web/client.py:
>
>def getPage(url, contextFactory=None, *args,
>**kwargs):
>[
]
>    factory = HTTPClientFactory(url, *args, **kwargs)
>[
]
>        reactor.connectTCP(host, port, factory)
>[
]
>    return factory.deferred
>
>
>
>
>def sendEmail(smtphost, fromEmail, toEmail, content,
>headers = None, attachments = None, multipartbody =
>"mixed"):
>[
]
>    d = defer.Deferred()
>    factory = SMTPSenderFactory(fromEmail, toEmail, f,
>d)
>    reactor.connectTCP(smtphost, 25, factory)
>    return d
>
>
>In the first case the deferred is owned/created by the
>Factory, in the second by the sendEmail helper. Is
>there any reason behind those, what is the
>recommendation? If my question is not clear :-), let
>me know.

It doesn't really make a difference.  I think I slightly prefer the former, but even in the latter case, sendMail and SMTPSenderFactory are basically agents of the same intent.

Jean-Paul



From rob.mason at ammeon.com  Tue Jan 31 11:02:00 2006
From: rob.mason at ammeon.com (Rob Mason)
Date: Tue, 31 Jan 2006 16:02:00 +0000
Subject: [Twisted-Python] How to do cleanup to server on sigint
Message-ID: <43DF89F8.2040207@ammeon.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060131/3e5e9e0a/attachment.htm 

From mw44106 at gmail.com  Tue Jan 31 21:06:06 2006
From: mw44106 at gmail.com (Matthew Wilson)
Date: Tue, 31 Jan 2006 21:06:06 -0500
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
Message-ID: <8e97d5be0601311806i595d789boc9993c25ed13043c@mail.gmail.com>

I want to write a chat bot that signs into MSN IM, then waits
passively for users to send it messages.  When the bot gets a message,
it should just reply back to the sender.

Here's where I'm struggling: it appears that I need to maintain a
connection to a notification server AND a switchboard server. How to
do this with only one reactor running?

I'm new to twisted.

TIA

Matt



From exarkun at divmod.com  Tue Jan 31 21:32:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 21:32:51 -0500
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
In-Reply-To: <8e97d5be0601311806i595d789boc9993c25ed13043c@mail.gmail.com>
Message-ID: <20060201023251.2697.776481818.divmod.quotient.2929@ohm>

On Tue, 31 Jan 2006 21:06:06 -0500, Matthew Wilson <mw44106 at gmail.com> wrote:
>I want to write a chat bot that signs into MSN IM, then waits
>passively for users to send it messages.  When the bot gets a message,
>it should just reply back to the sender.
>
>Here's where I'm struggling: it appears that I need to maintain a
>connection to a notification server AND a switchboard server. How to
>do this with only one reactor running?
>
>I'm new to twisted.

There is always one reactor.  Nothing you can do has any bearing on this.  It supports two connections as easily as any other number of connections.

Jean-Paul



From moe at divmod.com  Tue Jan 31 22:00:40 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Wed, 1 Feb 2006 05:00:40 +0200
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
In-Reply-To: <20060201023251.2697.776481818.divmod.quotient.2929@ohm>
Message-ID: <20060201030040.2697.387847070.divmod.quotient.2955@ohm>

http://twistedmatrix.com/projects/words/documentation/examples/msn_example.py



From phil at bubblehouse.org  Sun Jan  1 16:29:54 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 01 Jan 2006 18:29:54 -0500
Subject: [Twisted-Python] ssh manhole
Message-ID: <D81390FC-6DB8-4388-BFC1-B2447620CDC6@bubblehouse.org>

folks-

so, i've read over a number of threads in the archives, and the docs  
on tm.com, and i think i'm missing a few pieces of info, so i'd  
appreciate any help.

for the moment i have a multiservice application that i've added a  
telnet manhole interface to. however, due to the deprecation of the  
twisted.manhole.telnet module, and my disinterest in sending  
passwords in plaintext, i'd like to update this to use ssl.

this much i know how to do, but then i would assume the only way to  
connect to this interface would be with the openssl binary (i think  
i've done this before), as it would still be using the manhole- 
specific login system.

what i'd really like is to be able to use a regular ssh client to  
connect, ideally by implementing a Portal on the back end to  
authenticate users against an existing database. if it could use that  
nifty manhole syntax coloring, so much the better.

is this actually possible? i have to admit i have a great deal of  
ignorance about the difference between a terminal connection through  
openssl and an actual ssh login, and I've never gotten my feet wet  
with conch before.

i guess what i'm asking is what modules should i look at, and what  
classes should i expect to have to implement to make this happen? (of  
course, providing it is actually possible to do this)...

i know there's the PB interface into manhole that could be easily  
encrypted, but i am enthusiastic about using this kind of feature on  
several projects, and i'd like to end up with something that's easily  
plugged into "any" server...

thanks in advance,

-phil



From exarkun at divmod.com  Sun Jan  1 17:12:42 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 1 Jan 2006 19:12:42 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <D81390FC-6DB8-4388-BFC1-B2447620CDC6@bubblehouse.org>
Message-ID: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>

On Sun, 01 Jan 2006 18:29:54 -0500, Phil Christensen <phil at bubblehouse.org> wrote:
>folks-
>
>so, i've read over a number of threads in the archives, and the docs  on 
>tm.com, and i think i'm missing a few pieces of info, so i'd  appreciate any 
>help.
>
>for the moment i have a multiservice application that i've added a  telnet 
>manhole interface to. however, due to the deprecation of the 
>twisted.manhole.telnet module, and my disinterest in sending  passwords in 
>plaintext, i'd like to update this to use ssl.
>
>this much i know how to do, but then i would assume the only way to  connect 
>to this interface would be with the openssl binary (i think  i've done this 
>before), as it would still be using the manhole- specific login system.
>
>what i'd really like is to be able to use a regular ssh client to  connect, 
>ideally by implementing a Portal on the back end to  authenticate users 
>against an existing database. if it could use that  nifty manhole syntax 
>coloring, so much the better.
>
>is this actually possible? i have to admit i have a great deal of  ignorance 
>about the difference between a terminal connection through  openssl and an 
>actual ssh login, and I've never gotten my feet wet  with conch before.
>
>i guess what i'm asking is what modules should i look at, and what  classes 
>should i expect to have to implement to make this happen? (of  course, 
>providing it is actually possible to do this)...
>
>i know there's the PB interface into manhole that could be easily 
>encrypted, but i am enthusiastic about using this kind of feature on 
>several projects, and i'd like to end up with something that's easily 
>plugged into "any" server...
>
>thanks in advance,

I'm confused.  Do you want an SSL server or an SSH server?

Jean-Paul



From phil at bubblehouse.org  Sun Jan  1 17:55:04 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Sun, 01 Jan 2006 19:55:04 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>
References: <20060102001242.1217.778228141.divmod.quotient.9502@ohm>
Message-ID: <60992D50-484C-4D83-B37B-C606495A6F54@bubblehouse.org>

On Jan 1, 2006, at 7:12 PM, Jean-Paul Calderone wrote:

> On Sun, 01 Jan 2006 18:29:54 -0500, Phil Christensen  
> <phil at bubblehouse.org> wrote:
>
>> folks-
[snip snip snip]
>> i guess what i'm asking is what modules should i look at, and  
>> what  classes should i expect to have to implement to make this  
>> happen? (of  course, providing it is actually possible to do this)...
>>
>> i know there's the PB interface into manhole that could be easily  
>> encrypted, but i am enthusiastic about using this kind of feature  
>> on several projects, and i'd like to end up with something that's  
>> easily plugged into "any" server...
>>
>> thanks in advance,
>>
>
> I'm confused.  Do you want an SSL server or an SSH server?
>
> Jean-Paul

i would like an ssh server, so that i can ssh into manhole from a  
regular terminal, essentially so that i can use the ssh interactive  
password prompts to authenticate against some arbitrary backend.

-phil



From exarkun at divmod.com  Sun Jan  1 19:40:13 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 1 Jan 2006 21:40:13 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <60992D50-484C-4D83-B37B-C606495A6F54@bubblehouse.org>
Message-ID: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>

On Sun, 01 Jan 2006 19:55:04 -0500, Phil Christensen <phil at bubblehouse.org> wrote:
>On Jan 1, 2006, at 7:12 PM, Jean-Paul Calderone wrote:
> [snip]
>>
>>I'm confused.  Do you want an SSL server or an SSH server?
>>
>>Jean-Paul
>
>i would like an ssh server, so that i can ssh into manhole from a  regular 
>terminal, essentially so that i can use the ssh interactive  password 
>prompts to authenticate against some arbitrary backend.

Okay.  You just need to implement a checker for IUsernamePassword, then.  Add this to a portal wrapped around a realm that knows about IConchUsers and you should be set, as far as authentication goes.

Take a look at twisted/conch/manhole_ssh.py for an idea of what needs to happen to hook manhole up to a conch server.

Jean-Paul



From jml at mumak.net  Sun Jan  1 20:48:05 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 2 Jan 2006 14:48:05 +1100
Subject: [Twisted-Python] Depreciation of trial.unittest functions?
In-Reply-To: <271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>
References: <43B45572.9020405@gmail.com>
	<d06a5cd30512310216o781c740j5c678c42cf854f68@mail.gmail.com>
	<271E232A-9316-4471-96BC-B196D3DB4FA9@fuhm.net>
Message-ID: <d06a5cd30601011948v18a53e54ued7bce80c566a24f@mail.gmail.com>

On 1/1/06, James Y Knight <foom at fuhm.net> wrote:
>
> On Dec 31, 2005, at 5:16 AM, Jonathan Lange wrote:
>
> > On 12/30/05, Paul Swartz <paulswartz at gmail.com> wrote:
> >
> >> I'm not sure if Conch is the only project that did this, but it
> >> used the
> >> trial.unittest.* functions instead of methods on TestCases.  I
> >> used them
> >> to avoid having to pass TestCase instances around all over the
> >> places,
> >> or using a global variable.  To avoid the depreciation warnings, I've
> >> starting using the unittest._inst global variable, but I doubt
> >> that this
> >> is the appropriate way to change my code.  Is this just not a
> >> supported
> >> way of using Trial, or is there something else I should be doing?
> >>
> >>
> >
> > This is just not a supported way of using Trial.
>
> Given that the methods don't use self at all (and at least I can't
> forsee any need to in the future), is there a reason they can't be
> class methods, so that unittest.TestCase.assertEquals(a, b) would work?
>

I'm not sure that there is a good reason for doing so.  From what I
can gather, the assertions in the conch tests are part of extensions
to conch's application code.  I think that this a Bad Thing.

If Trial's assertions remain instance methods only, then the natural
way of using Trial will be to put assertions in the actual test_
methods.  I think that this is a Good Thing[1].

cheers,
jml

[1]. I think that to do otherwise is to dilute the meaning of the
phrase 'unit test'.



From phil at bubblehouse.org  Sun Jan  1 22:54:16 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 02 Jan 2006 00:54:16 -0500
Subject: [Twisted-Python] ssh manhole
In-Reply-To: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>
References: <20060102024013.1217.1553833640.divmod.quotient.9504@ohm>
Message-ID: <A816CD92-98CB-4255-B7D7-83A41CD009D6@bubblehouse.org>

On Jan 1, 2006, at 9:40 PM, Jean-Paul Calderone wrote:

> Okay.  You just need to implement a checker for IUsernamePassword,  
> then.  Add this to a portal wrapped around a realm that knows about  
> IConchUsers and you should be set, as far as authentication goes.
>
> Take a look at twisted/conch/manhole_ssh.py for an idea of what  
> needs to happen to hook manhole up to a conch server.

that was amazingly easy...not that i should be surprised. however,  
i'm running into one little snafu. my realm creates a TerminalUser  
instance like this:

     def _getSSHAvatar(self, avatarId):
         comp = components.Componentized()
         user = manhole_ssh.TerminalUser(comp, avatarId)
         sess = manhole_ssh.TerminalSession(comp)

         sess.transportFactory = manhole_ssh.TerminalSessionTransport
         sess.chainedProtocolFactory = insults.ServerProtocol

         comp.setComponent(conch_interfaces.IConchUser, user)
         comp.setComponent(conch_interfaces.ISession, sess)

         return user

and returns it from requestAvatar with:

         return conch_interfaces.IConchUser, self._getSSHAvatar 
(avatarId), lambda: None

however, shortly thereafter i an exception, attached below. also, i  
did find this comment in manhole_ssh.TerminalSessionTransport that i  
was a bit confused by:

         # XXX TODO
         # chainedProtocol is supposed to be an ITerminalTransport,
         # maybe.  That means perhaps its terminalProtocol attribute is
         # an ITerminalProtocol, it could be.  So calling terminalSize
         # on that should do the right thing But it'd be nice to clean
         # this bit up.
         self.chainedProtocol.terminalProtocol.terminalSize(width,  
height)

I am running the latest svn-trunk as of this email. Any help would be  
appreciated.

-phil

00:41 EST [SSHServerTransport,0,127.0.0.1] kex alg, key alg: diffie- 
hellman-group1-sha1 ssh-rsa
00:41 EST [SSHServerTransport,0,127.0.0.1] server->client: aes128-cbc  
hmac-md5 none
00:41 EST [SSHServerTransport,0,127.0.0.1] client->server: aes128-cbc  
hmac-md5 none
00:41 EST [SSHServerTransport,0,127.0.0.1] starting service ssh-userauth
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard trying auth none
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard trying auth password
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
wizard authenticated with password
00:41 EST [SSHService ssh-userauth on SSHServerTransport,0,127.0.0.1]  
starting service ssh-connection
00:41 EST [SSHService ssh-connection on SSHServerTransport, 
0,127.0.0.1] got channel session request
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] channel open
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] pty request: ansi (48L, 80L, 480L, 672L)
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] getting shell
00:41 EST [SSHChannel session (0) on SSHService ssh-connection on  
SSHServerTransport,0,127.0.0.1] Traceback (most recent call last):
    File "/[python home snipped]/twisted/python/log.py", line 38, in  
callWithContext
      return context.call({ILogContext: newCtx}, func, *args, **kw)
    File "/[python home snipped]/twisted/python/context.py", line 59,  
in callWithContext
      return self.currentContext().callWithContext(ctx, func, *args,  
**kw)
    File "/[python home snipped]/twisted/python/context.py", line 37,  
in callWithContext
      return func(*args,**kw)
    File "/[python home snipped]/twisted/conch/ssh/channel.py", line  
97, in requestReceived
      return f(data)
--- <exception caught here> ---
    File "/[python home snipped]/twisted/conch/ssh/session.py", line  
52, in request_shell
      self.session.openShell(pp)
    File "/[python home snipped]/twisted/conch/manhole_ssh.py", line  
75, in openShell
      self.width, self.height)
    File "/[python home snipped]/twisted/conch/manhole_ssh.py", line  
60, in __init__
      self.chainedProtocol.terminalProtocol.terminalSize(width, height)
exceptions.AttributeError: 'NoneType' object has no attribute  
'terminalSize'




From tv at twistedmatrix.com  Mon Jan  2 02:19:45 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Mon, 02 Jan 2006 11:19:45 +0200
Subject: [Twisted-Python] Re: r15451 - Fix test failures under windows
	by	changing the eventual-send operation to
In-Reply-To: <0b6701c60e4a$35c01f70$6402a8c0@dcore>
References: <20051231.105721.17570930.warner@lothar.com>
	<0b6701c60e4a$35c01f70$6402a8c0@dcore>
Message-ID: <43B8F031.4090604@twistedmatrix.com>

Paul G wrote:
> full ordering/sorting hit on inserts. if you think a little harder, this
> can be made fairly efficient with a sparse circular list of event
> buckets, with each bucket being a fifo queue of events to be fired at
> that time. whether it's worth bothering with the additional complexity
> is up for discussion.

Sounds like a not-yet-polished version of what the kernel does.

http://lwn.net/Articles/156329/

(note I'm not really convinced twisted should implement a similar thing,
atleast right now)



From paul-lists at perforge.com  Mon Jan  2 06:37:49 2006
From: paul-lists at perforge.com (Paul G)
Date: Mon, 2 Jan 2006 08:37:49 -0500
Subject: [Twisted-Python] Re: r15451 - Fix test failures under
	windowsby	changing the eventual-send operation to
References: <20051231.105721.17570930.warner@lothar.com><0b6701c60e4a$35c01f70$6402a8c0@dcore>
	<43B8F031.4090604@twistedmatrix.com>
Message-ID: <0d8901c60fa1$bb111cd0$6402a8c0@dcore>


----- Original Message ----- 
From: "Tommi Virtanen" <tv at twistedmatrix.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Monday, January 02, 2006 4:19 AM
Subject: Re: [Twisted-Python] Re: r15451 - Fix test failures under windowsby 
changing the eventual-send operation to


> Paul G wrote:
>> full ordering/sorting hit on inserts. if you think a little harder, this
>> can be made fairly efficient with a sparse circular list of event
>> buckets, with each bucket being a fifo queue of events to be fired at
>> that time. whether it's worth bothering with the additional complexity
>> is up for discussion.
>
> Sounds like a not-yet-polished version of what the kernel does.
>
> http://lwn.net/Articles/156329/
>
> (note I'm not really convinced twisted should implement a similar thing,
> atleast right now)

yep, the kernel implementation is another (similar) way to skin the same 
cat. please note that the kenel implementation makes a certain tradeoff 
because: 1) it expects most timers to be deleted before expiring 2) it has a 
bounded jiffies range. in the context of twisted, i'd rather take the hits 
piecemeal on inserts/deletes with a sparse circular array rather than all at 
once as with their logarithmic bucket scheme. i have some of this 
implemented in some scheduling code i wrote a while back, but it'd need some 
massaging. if there's any interest, i may produce a patch, but i don't want 
to do the work if it's not gonna get accepted (i'm lazy ;).

with that said, the specific issue warner is having could be fixed at the 
source if the current implementation is deemed sufficient. this can be 
accomplished by finding a better time source to use under windows and/or 
implementing a crude version of lagrange timestamps to use as indices.

-p 




From foom at fuhm.net  Tue Jan  3 23:00:12 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 04 Jan 2006 00:00:12 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1Eu1gy-0005XG-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2005-12-28 06:00:02.200000:
 Bugs opened: 20   Bugs closed: 8   Total open bugs: 518 (+12)
  Urgent: 8 (+7)
  Bug: 244 (+3)
  Feature: 181 (+1)
  Wish: 85 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[CORE, TRIAL] trial -u fills working directory with old _trial_temp directories  (2 days ago)
       http://twistedmatrix.com/bugs/issue1393 opened by exarkun

[TESTS, WEB2] Intermitent failure in web2 unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1391 opened by exarkun

[newpb] implement a correct eventually(), use callLater rather than callFromThread  (yesterday)
       http://twistedmatrix.com/bugs/issue1398 opened by glyph

[TRIAL, WIN32] Trial bombs on Wndows when attempting to move/delete temp directories  (3 days ago)
       http://twistedmatrix.com/bugs/issue1387 opened by moof

[TRIAL] trial no longer supports multiple test-case-name targets  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1388 opened by warner

[CORE, TESTS] Intermitent failure in tcp unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1392 opened by exarkun

[CORE, PB] Stray print statement in twisted.pb.remoteinterface.RemoteInterfaceClass.__init__  (2 days ago)
       http://twistedmatrix.com/bugs/issue1394 opened by exarkun

[CORE, PB] Intermitent failure in newpb unit tests  (2 days ago)
       http://twistedmatrix.com/bugs/issue1390 opened by exarkun

                    ==== Bug ====
[DOCUMENTATION, PB] Difference between twisted.spread.jelly and twisted.spread.newjelly undocumented  (11 hours ago)
       http://twistedmatrix.com/bugs/issue1401 opened by moof

[DOCUMENTATION, TRIAL] unittest special attributes not well documented  (yesterday)
       http://twistedmatrix.com/bugs/issue1400 opened by ml.flex

[TRIAL] log.err() and raising an exception cause double-counted [ERROR]  (4 days ago)
       http://twistedmatrix.com/bugs/issue1384 opened by warner

[CORE] cannot exit script before activating reactor if using threadpool  (4 days ago)
       http://twistedmatrix.com/bugs/issue1385 opened by antony

[WEB] test_distrib sets DelayedCall.debug=True and doesn't set it back  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1383 opened by warner

[TRIAL] Trial reports SUCCESS!?! and ERROR for the same test  (2 days ago)
       http://twistedmatrix.com/bugs/issue1397 opened by jknight

[TRIAL] trial.util._Janitor.do_cleanPending causes spinWhile warning to be emitted.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1395 opened by jknight

[CORE, TRIAL] trial's warning suppression code is misfactored  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1389 opened by exarkun

[TESTS, TRIAL] test_paths failing because 'plus' mode is insane on windows  (3 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1386 opened by moonfallen

[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
CLOSED http://twistedmatrix.com/bugs/issue1186 opened by exarkun

                    ==== Feature ====
log.msg('why I failed'); log.err(failureObj); idiom is really stupid, should be replaced  (yesterday)
       http://twistedmatrix.com/bugs/issue1399 opened by glyph

                    ==== Wish ====
[CORE] callLater(0) does not guarantee relative ordering of calls  (2 days ago)
       http://twistedmatrix.com/bugs/issue1396 opened by jknight

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] trial no longer supports multiple test-case-name targets  (3 days ago)
       http://twistedmatrix.com/bugs/issue1388 opened by warner, closed by jml

                    ==== Bug ====
[NEWS, TESTS] twisted.news.test.test_news calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1187 opened by exarkun, closed by exarkun

[WEB] test_distrib sets DelayedCall.debug=True and doesn't set it back  (4 days ago)
       http://twistedmatrix.com/bugs/issue1383 opened by warner, closed by exarkun

[CORE, TRIAL] If setUp returns an unfired Deferred, test methods cannot use wait()  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1367 opened by exarkun, closed by jml

[CORE, TRIAL] trial's warning suppression code is misfactored  (3 days ago)
       http://twistedmatrix.com/bugs/issue1389 opened by exarkun, closed by exarkun

[TESTS, TRIAL] test_paths failing because 'plus' mode is insane on windows  (3 days ago)
       http://twistedmatrix.com/bugs/issue1386 opened by moonfallen, closed by exarkun

[CORE, WIN32] strange behaviours when writing large amount of data on stdout  (2 months ago)
       http://twistedmatrix.com/bugs/issue1305 opened by manlio, closed by justinj

[TESTS, WEB] twisted.web2.test.test_http calls reactor.iterate()  (3 months ago)
       http://twistedmatrix.com/bugs/issue1186 opened by exarkun, closed by jknight




From itamar at itamarst.org  Wed Jan  4 08:34:47 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 04 Jan 2006 10:34:47 -0500
Subject: [Twisted-Python] Securing a custom protocol
In-Reply-To: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
References: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
Message-ID: <1136388887.12591.2.camel@localhost.localdomain>

On Tue, 2005-12-27 at 09:36 -0800, Brian Granger wrote:
> Hi,
> 
> I have written a custom line based protocol using twisted.  I need to  
> add authentication and encryption to my protocol and I am wondering  
> what the best route is.  Here are some options that I see:
> 
> 1.  Use SSL for encryption and cred for user authentication
> 
> 2.  Use SSH through conch
> 
> As I understand it, both of these approaches can do authentication  
> and encryption of any protocol.  What are the advantages and  
> disadvantages or each?  Which is more robust and supported in  
> twisted?  Are there other approaches in twisted that I am missing?

Stick to SSL (or really TLS, improved SSL). It gives you better
interoperability (since you can support TLS more easily in other
implementations), is easier to setup (just connectSSL or listenSSL), and
it's what TLS was designed for.

Authentication is a whole 'nother topic; you can use SSL certificates,
or pass usernames/passwords in the protocol (look up the SRP
authentication protocol for that if you intend to support non-encrypted
connections). Cred just gives you twisted-side infrastructure, it
doesn't have protocol-level support.




From TimothyFitz at gmail.com  Fri Jan  6 10:47:54 2006
From: TimothyFitz at gmail.com (Timothy Fitz)
Date: Fri, 6 Jan 2006 12:47:54 -0500
Subject: [Twisted-Python] help with refcounts and memleaks
In-Reply-To: <20051226172129.1217.36853620.divmod.quotient.8236@ohm>
References: <20051226160735.GP9576@opteron.random>
	<20051226172129.1217.36853620.divmod.quotient.8236@ohm>
Message-ID: <972ec5bd0601060947u4fbc46e1pe5a64108882e6f84@mail.gmail.com>

On 12/26/05, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 26 Dec 2005 17:07:35 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
> >I'd also like to know how other languages like ruby and java behave in
> >terms of self-references of objects. Can't the language understand it's
> >a self reference, and in turn it's the same as an integer or a string,
> >like it already does when the member is initialized statically?
>
> I don't know Ruby well enough to comment directly, but I believe Ruby's
> GC is much simpler (and less capable) than Python's.  Java doesn't have
> bound methods (or unbound methods, or heck, functions): the obvious way
> in which you would construct them on top of the primitives the language
> does offer seems to me as though it would introduce the same "problem"
> you are seeing in Python, but that may just be due to the influence
> Python has had on my thinking.

(A little late jumping into this discussion) C# (and the CLR in
genral), being the better Java that it is, has dynamic functions in
the form of delegates, which can be "bound methods" in the sense that
Python has them. In addition, it has destructors which are very
similar to python's __del__. The CLR's garbage collector will collect
cycles with destructors, unlike Python. This means that destructors in
C# don't always have access to all of their members (some may
"mysteriously" be null, and no order is guaranteed so it will appear
random) because they've already been collected. To complexify the
matter even more, the CLR's garbage collector may (and in windows
does) run in a seperate thread, making safe robust CLR deconstructors
a fine art.



From exarkun at divmod.com  Fri Jan  6 20:14:48 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 6 Jan 2006 22:14:48 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15537 - PROPFIND works now
In-Reply-To: <E1Euwnk-0006gZ-00@wolfwood>
Message-ID: <20060107031448.1217.744280671.divmod.quotient.10531@ohm>

On Fri, 06 Jan 2006 11:59:00 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Fri Jan  6 11:59:00 2006
>New Revision: 15537
>
>Modified:
>   trunk/twisted/web2/dav/test/test_prop.py
>Log:
>PROPFIND works now

The test for it fails consistently on the OS X slave, though.  I've 
set this test as todo again.

Here's the current failure:

Failure: twisted.trial.unittest.FailTest: Incorrect content-type for PROPFIND response (MimeType('text', 'xml', {}) not in (MimeType('text', 'xml', {}), MimeType('application', 'xml', {})))

Jean-Paul



From dkarbott at comcast.net  Sat Jan  7 09:37:27 2006
From: dkarbott at comcast.net (dkarbott at comcast.net)
Date: Sat, 07 Jan 2006 16:37:27 +0000
Subject: [Twisted-Python] SSL client authentication example
Message-ID: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>

I modified the echoserv_ssl.py / echoclient_ssl.py examples to do client authtentication while I was trying to learn about using SSL with twisted.

My code is in the attached .tgz.

It uses self-signed certificates so it doesn't depend on (or require) a CA.

I hope that someone else might find it useful.  The  documentation that I was able to google seems kind of sparse.

I'm admittedly neither a crypto expert nor very experienced with OpenSSL, so if you find bugs let me know.

-- Darrell



-------------- next part --------------
A non-text attachment was scrubbed...
Name: twisted_client_auth.tgz
Type: application/x-tar
Size: 3194 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060107/baea85bf/attachment-0002.tar>

From bgranger at scu.edu  Sat Jan  7 11:02:46 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 10:02:46 -0800
Subject: [Twisted-Python] Securing a custom protocol
In-Reply-To: <1136388887.12591.2.camel@localhost.localdomain>
References: <23206A12-219B-4357-BEAE-396B706D1BFF@scu.edu>
	<1136388887.12591.2.camel@localhost.localdomain>
Message-ID: <DE6F2D88-06EB-40E3-9F5F-359C3DCC0044@scu.edu>


On Jan 4, 2006, at 7:34 AM, Itamar Shtull-Trauring wrote:

> On Tue, 2005-12-27 at 09:36 -0800, Brian Granger wrote:
>> Hi,
>>
>> I have written a custom line based protocol using twisted.  I need to
>> add authentication and encryption to my protocol and I am wondering
>> what the best route is.  Here are some options that I see:
>>
>> 1.  Use SSL for encryption and cred for user authentication
>>
>> 2.  Use SSH through conch
>>
>> As I understand it, both of these approaches can do authentication
>> and encryption of any protocol.  What are the advantages and
>> disadvantages or each?  Which is more robust and supported in
>> twisted?  Are there other approaches in twisted that I am missing?
>
> Stick to SSL (or really TLS, improved SSL). It gives you better
> interoperability (since you can support TLS more easily in other
> implementations), is easier to setup (just connectSSL or  
> listenSSL), and
> it's what TLS was designed for.
>
> Authentication is a whole 'nother topic; you can use SSL certificates,
> or pass usernames/passwords in the protocol (look up the SRP
> authentication protocol for that if you intend to support non- 
> encrypted
> connections). Cred just gives you twisted-side infrastructure, it
> doesn't have protocol-level support.
>

Thanks, I was hoping it was that simple.

I will definitely look into SRP for non-encrypted connections.




>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bgranger at scu.edu  Sat Jan  7 11:14:26 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 10:14:26 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
Message-ID: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>

Hi,

I am trying to integrate an external networking library that is  
asynchronous into a Twisted app (Apple's Bonjour for those  
interested).  The library is setup for use in a select loop.  The  
library is responsible for all the actual network things (like  
creating the connection, reading and writing to it.  The only thing I  
need to do is register the socket's file descriptor with the twisted  
reactor and have some callback triggered when it is _ready_ for  
reading/writing.

Digging around the source code, it looks like the FileDescriptor that  
Port inherits from would be a good starting point.  But as I  
understand it FileDescriptor is abstract.  Is it as simple as  
inheriting from FileDescriptor and providing the fd that I get from  
Bonjour?  How do I specify callbacks to trigger when the fd is  
readable/writable?

Anything I am missing in this picture.

I will gladly share my code if I get Apple's Bonjour implementation  
working with twisted.

Cheers,

Brian	



From itamar at itamarst.org  Sat Jan  7 11:46:48 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 07 Jan 2006 13:46:48 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>
References: <9F5FEFDB-6B8C-4D52-BC67-7D645F770397@scu.edu>
Message-ID: <1136659608.9115.1.camel@localhost.localdomain>

On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:

> Digging around the source code, it looks like the FileDescriptor that  
> Port inherits from would be a good starting point.  But as I  
> understand it FileDescriptor is abstract.  Is it as simple as  
> inheriting from FileDescriptor and providing the fd that I get from  
> Bonjour?  How do I specify callbacks to trigger when the fd is  
> readable/writable?

Yep.

You just need a fileno() method that returns the file descriptor you are
wrapping, and doRead and doWrite methods that they do the appropriate
thing (they will get called by the reactor on those events.)




From exarkun at divmod.com  Sat Jan  7 12:04:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 7 Jan 2006 14:04:09 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <1136659608.9115.1.camel@localhost.localdomain>
Message-ID: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>

On Sat, 07 Jan 2006 13:46:48 -0500, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:
>
>> Digging around the source code, it looks like the FileDescriptor that
>> Port inherits from would be a good starting point.  But as I
>> understand it FileDescriptor is abstract.  Is it as simple as
>> inheriting from FileDescriptor and providing the fd that I get from
>> Bonjour?  How do I specify callbacks to trigger when the fd is
>> readable/writable?
>
>Yep.
>
>You just need a fileno() method that returns the file descriptor you are
>wrapping, and doRead and doWrite methods that they do the appropriate
>thing (they will get called by the reactor on those events.)
>

Given the simplicity of the interface, it hardly even makes sense 
to use FileDescriptor.  What you want can be achieved using:

class BonjourThingo(object):
    def __init__(self, fd, doRead, doWrite):
        self.fileno = lambda: fd
        self.doRead = doRead
        self.doWrite = doWrite

And then adding it as a reader or a writer to a reactor which 
supports IReactorFDSet.

Jean-Paul



From Brendan at BrendanSimon.com  Sat Jan  7 19:59:12 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Sun, 08 Jan 2006 13:59:12 +1100
Subject: [Twisted-Python] Up to date Debian packages
Message-ID: <43C08000.7080805@BrendanSimon.com>

I'm running Debian Sarge (ie. stable release).  The default installation 
of python-twisted is 1.3.0-8.  I would like the latest version, 
preferable 2.1.0.

 From the twisted web pages, I was lead to believe that the following 
site has the latest Debian snapshots, release-candidates and releases, 
but the latest version I could find there was 1.2.0+1.3.0-1 (whatever 
that means).
    http://twisted.sourceforge.net/debian

I've also checked http://backports.org/ but nobody has backported the 
Sid version to Sarge.  I don't even know what the Sid version is as the 
Debian packages page is not working at the moment.

Is there an easy way to get precompiled versions of Twisted for Debian 
Sarge?

Thanks,
Brendan.




From johann.borck at densedata.com  Sat Jan  7 22:40:53 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 08 Jan 2006 06:40:53 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C08000.7080805@BrendanSimon.com>
References: <43C08000.7080805@BrendanSimon.com>
Message-ID: <43C0A5E5.2030905@densedata.com>

Brendan Simon wrote:

> I'm running Debian Sarge (ie. stable release).  The default
> installation of python-twisted is 1.3.0-8.  I would like the latest
> version, preferable 2.1.0.
>
> From the twisted web pages, I was lead to believe that the following
> site has the latest Debian snapshots, release-candidates and releases,
> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
> that means).
>    http://twisted.sourceforge.net/debian
>
> I've also checked http://backports.org/ but nobody has backported the
> Sid version to Sarge.  I don't even know what the Sid version is as
> the Debian packages page is not working at the moment.
>
> Is there an easy way to get precompiled versions of Twisted for Debian
> Sarge?

Hi, Brendan,
sorry, but this question is cute somehow - twisted is python - there's
nothing to compile  - if you need *.deb sooo much, the latest version in
unstable is 2.0.1-something, but it just can't be easier than
downloading the latest 2.1 tarball and just setting the 
PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
distutils ie. python setup.py install from the base dir should work,
another possible way is to copy the /twisted dir into the site-packages
one of your python installation manually. Please, do that, there's no
need for debs, really !! :)
Johann

>
> Thanks,
> Brendan.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From exarkun at divmod.com  Sat Jan  7 23:15:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Jan 2006 01:15:29 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C08000.7080805@BrendanSimon.com>
Message-ID: <20060108061529.1217.1631521208.divmod.quotient.10817@ohm>

On Sun, 08 Jan 2006 13:59:12 +1100, Brendan Simon <brendan at brendansimon.com> wrote:
>I'm running Debian Sarge (ie. stable release).  The default installation of 
>python-twisted is 1.3.0-8.  I would like the latest version, preferable 
>2.1.0.
>
> From the twisted web pages, I was lead to believe that the following site 
>has the latest Debian snapshots, release-candidates and releases, but the 
>latest version I could find there was 1.2.0+1.3.0-1 (whatever that means).
>    http://twisted.sourceforge.net/debian
>
>I've also checked http://backports.org/ but nobody has backported the Sid 
>version to Sarge.  I don't even know what the Sid version is as the Debian 
>packages page is not working at the moment.
>
>Is there an easy way to get precompiled versions of Twisted for Debian 
>Sarge?

There are some slightly less out of date debs here:

  http://twistedmatrix.com/users/tv/2.0-BEWARE/

I sure wish there were some actual up to date debs, or some actual up 
to date debs in the pipeline, or some plans to create some actual up 
to date debs.

Jean-Paul



From Brendan at BrendanSimon.com  Sat Jan  7 23:42:09 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Sun, 08 Jan 2006 17:42:09 +1100
Subject: [Twisted-Python] conch sshsimpleclient example and password
Message-ID: <43C0B441.1000408@BrendanSimon.com>

I'm new to Twisted and I am using 1.3.0-8 on Debian Sarge.  I'm playing 
with the sshsimpleclient in the example directory.  I changed USER to 
'brendan' and HOST to 'localhost'.  The script continually asks me for 
the password even though I have entered it correctly.

I changed the script to use id_rsa instead of id_dsa, and put my 
id_rsa.pub in my ~/.ssh/autorhized_keys file.  Now when I run the script 
I get the expected result of :
    got data from cat: 'hello conch\n'

If I comment out the key in autorized_keys file, the script just 
repeatedly asks for my password even know I know I have entered it 
correctly.

Any ideas about what I am doing wrong, or is it a bug ???

Thanks,
Brendan.




From bgranger at scu.edu  Sat Jan  7 23:46:59 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sat, 07 Jan 2006 22:46:59 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
Message-ID: <52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>

I tried this later approach, and it worked.  I need to clean up my  
code to make it more general, but there was one problem.  I am using  
the default reactor and defined a BonjourDescriptor as follows:

class BonjourDescriptor(object):
     implements(IReadDescriptor)

     def __init__(self, fd, serviceRef):
         self.fd = fd
         self.serviceRef = serviceRef

     def fileno(self):
         return self.fd

     def doRead(self):
         ret = bonjour.DNSServiceProcessResult(self.serviceRef)


When I killed the reactor, I got an exception:

exceptions.AttributeError: 'BonjourDescriptor' object has no  
attribute 'connectionLost'

It looks like the disconnectAll method on the reactor is calling  
reader.connectionLost on each reader.  Why is this so?
I thought I only needed to implement the IReadDescriptor interface  
for my reader, but the connectionLost method is not a part of that  
interface.  Hmmm.  Should I implement it?  What interface is that  
method in?  This seems confusing.

Thanks

But the good news is that It looks like with a little work, Apple's  
zeroconf implementation can be integrated with twisted.

Brian


On Jan 7, 2006, at 11:04 AM, Jean-Paul Calderone wrote:

> On Sat, 07 Jan 2006 13:46:48 -0500, Itamar Shtull-Trauring  
> <itamar at itamarst.org> wrote:
>> On Sat, 2006-01-07 at 10:14 -0800, Brian Granger wrote:
>>
>>> Digging around the source code, it looks like the FileDescriptor  
>>> that
>>> Port inherits from would be a good starting point.  But as I
>>> understand it FileDescriptor is abstract.  Is it as simple as
>>> inheriting from FileDescriptor and providing the fd that I get from
>>> Bonjour?  How do I specify callbacks to trigger when the fd is
>>> readable/writable?
>>
>> Yep.
>>
>> You just need a fileno() method that returns the file descriptor  
>> you are
>> wrapping, and doRead and doWrite methods that they do the appropriate
>> thing (they will get called by the reactor on those events.)
>>
>
> Given the simplicity of the interface, it hardly even makes sense  
> to use FileDescriptor.  What you want can be achieved using:
>
> class BonjourThingo(object):
>    def __init__(self, fd, doRead, doWrite):
>        self.fileno = lambda: fd
>        self.doRead = doRead
>        self.doWrite = doWrite
>
> And then adding it as a reader or a writer to a reactor which  
> supports IReactorFDSet.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From mary-twisted at puzzling.org  Sun Jan  8 03:40:14 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sun, 8 Jan 2006 21:40:14 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
Message-ID: <20060108104014.GA12891@sourdust.home.puzzling.org>

Hi all,

A reminder to interested parties that I set the date for this to this
coming Saturday: 14th January. What follows is a reminder about what I
want to do.

I'll set up something more specific for this in a day or two. I envisage
I'll have a worklist of some kind on a wiki, and that participants will
also be chatting on #twisted as usual to resolve anything else.

-Mary

----- Forwarded message from Mary Gardiner <mary-twisted at puzzling.org> -----

I'd like to run a one day Twisted documentation sprint. Please note that
while I want and need input from both Twisted experts and Twisted
newbies, I won't have much tolerance for general whining about the state
of Twisted documentation. (Not that I've ever exhibited much tolerance
of this kind.) We need highly specific whining!

This sprint will hopefully be the first in a series, and it will be
focussed on *reading* the documentation, rather than writing it. We
would therefore especially welcome the input of people who are either
users of the documentation, or want the documentation improved but don't
want to write it.

We will focus on reviewing present documentation against the following
criteria:

 - does it reflect best practices for Twisted coders?
 - is it up-to-date?
 - is it complete?

For people who are newer to Twisted, reviews on the general useability
of any particular piece of Twisted documentation as per my post at
http://twistedmatrix.com/pipermail/twisted-python/2005-May/010386.html

----- End forwarded message -----

-- 
<dash> your RDF is massive and unstoppable.  [to glyph -ed]



From walkah at walkah.net  Sun Jan  8 08:08:39 2006
From: walkah at walkah.net (James Walker)
Date: Sun, 08 Jan 2006 10:08:39 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C0A5E5.2030905@densedata.com>
References: <43C08000.7080805@BrendanSimon.com>
	<43C0A5E5.2030905@densedata.com>
Message-ID: <43C12AF7.9090201@walkah.net>

On 1/8/06 12:40 AM, Johann Borck wrote:
> Brendan Simon wrote:
> 
>> I'm running Debian Sarge (ie. stable release).  The default
>> installation of python-twisted is 1.3.0-8.  I would like the latest
>> version, preferable 2.1.0.
>>
>> From the twisted web pages, I was lead to believe that the following
>> site has the latest Debian snapshots, release-candidates and releases,
>> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
>> that means).
>>    http://twisted.sourceforge.net/debian
>>
>> I've also checked http://backports.org/ but nobody has backported the
>> Sid version to Sarge.  I don't even know what the Sid version is as
>> the Debian packages page is not working at the moment.
>>
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
> 
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)

I'm new here, and don't want to offend anybody .. but I too use debian 
stable on my servers and would like to see some up to date debs for 
twisted. Having .debs is not about ease of installation. Yes, twisted 
(and most python apps) are dead easy to install. The point of having 
debs is about maintenance. If twisted (or any other application / 
library you use) is not using your package management system, then the 
onus is on you to check that vendor for updates and installing them by 
hand. If you've ever tried to maintain any reasonable number of 
production systems this is a real hassle.

My $0.02 (CAD even) ... and a +1 for twisted .debs :P
-- 
James Walker :: http://walkah.net/ :: xmpp:walkah at walkah.net



From bgranger at scu.edu  Sun Jan  8 12:45:00 2006
From: bgranger at scu.edu (Brian Granger)
Date: Sun, 08 Jan 2006 11:45:00 -0800
Subject: [Twisted-Python] SSL client authentication example
In-Reply-To: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>
References: <010720061637.20071.43BFEE470000120000004E6722070029539B9B010D9D0E050B@comcast.net>
Message-ID: <B2C92D09-D9CB-457B-88E0-CD48BDA67A8F@scu.edu>


On Jan 7, 2006, at 8:37 AM, dkarbott at comcast.net wrote:

> I modified the echoserv_ssl.py / echoclient_ssl.py examples to do  
> client authtentication while I was trying to learn about using SSL  
> with twisted.
>
> My code is in the attached .tgz.
>
> It uses self-signed certificates so it doesn't depend on (or  
> require) a CA.
>
> I hope that someone else might find it useful.  The  documentation  
> that I was able to google seems kind of sparse.
>

I agree on the documentation.  Thanks for posting this, I will  
definitely be needing this functionality and I will let you know if I  
find any bugs.

Brian


> I'm admittedly neither a crypto expert nor very experienced with  
> OpenSSL, so if you find bugs let me know.
>
> -- Darrell
>
>
>
> <twisted_client_auth.tgz>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From therve at free.fr  Sun Jan  8 13:05:04 2006
From: therve at free.fr (Thomas HERVE)
Date: Sun, 08 Jan 2006 21:05:04 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C12AF7.9090201@walkah.net>
References: <43C08000.7080805@BrendanSimon.com>
	<43C0A5E5.2030905@densedata.com> <43C12AF7.9090201@walkah.net>
Message-ID: <20060108210504.fh0x8twr48wokw44@itchy.wasabout.net>

Quoting James Walker <walkah at walkah.net>:

> I'm new here, and don't want to offend anybody .. but I too use 
> debian stable on my servers and would like to see some up to date 
> debs for twisted.

Your problem is here : Twisted 2 is not part of Sarge release, so you 
won't see
it in a Sarge upgrade (purpose of Sarge is not to provide up to date 
packages).
But Twisted 2 is in Testing/Unstable.

If you want to have Twisted 2 on Sarge, you can either:
- Add testing/unstable URL in sources.list and make appropriate pin/selections
to have latest versions (as python2.3-twisted only depends on python2.3 and
python2.3-zopeinterface, I don't think it will cause problems).
- Simply download testing .deb's and install them.

-- 
Thomas




From exarkun at divmod.com  Sun Jan  8 13:38:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 8 Jan 2006 15:38:50 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <20060108210504.fh0x8twr48wokw44@itchy.wasabout.net>
Message-ID: <20060108203850.1217.846258387.divmod.quotient.10902@ohm>

On Sun, 08 Jan 2006 21:05:04 +0100, Thomas HERVE <therve at free.fr> wrote:
>Quoting James Walker <walkah at walkah.net>:
>>I'm new here, and don't want to offend anybody .. but I too use debian 
>>stable on my servers and would like to see some up to date debs for 
>>twisted.
>
>Your problem is here : Twisted 2 is not part of Sarge release, so you won't 
>see
>it in a Sarge upgrade (purpose of Sarge is not to provide up to date 
>packages).
>But Twisted 2 is in Testing/Unstable.
>
>If you want to have Twisted 2 on Sarge, you can either:
>- Add testing/unstable URL in sources.list and make appropriate 
>pin/selections
>to have latest versions (as python2.3-twisted only depends on python2.3 and
>python2.3-zopeinterface, I don't think it will cause problems).
>- Simply download testing .deb's and install them.

I see 2.0.  Where's 2.1?

Jean-Paul



From johann.borck at densedata.com  Sun Jan  8 14:21:58 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sun, 08 Jan 2006 22:21:58 +0100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C12AF7.9090201@walkah.net>
References: <43C08000.7080805@BrendanSimon.com>	<43C0A5E5.2030905@densedata.com>
	<43C12AF7.9090201@walkah.net>
Message-ID: <43C18276.1050805@densedata.com>

James Walker wrote:

> On 1/8/06 12:40 AM, Johann Borck wrote:
>
>> Brendan Simon wrote:
>>
>>> I'm running Debian Sarge (ie. stable release).  The default
>>> installation of python-twisted is 1.3.0-8.  I would like the latest
>>> version, preferable 2.1.0.
>>>
>>> From the twisted web pages, I was lead to believe that the following
>>> site has the latest Debian snapshots, release-candidates and releases,
>>> but the latest version I could find there was 1.2.0+1.3.0-1 (whatever
>>> that means).
>>>    http://twisted.sourceforge.net/debian
>>>
>>> I've also checked http://backports.org/ but nobody has backported the
>>> Sid version to Sarge.  I don't even know what the Sid version is as
>>> the Debian packages page is not working at the moment.
>>>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>
>
> I'm new here, and don't want to offend anybody .. but I too use debian
> stable on my servers and would like to see some up to date debs for
> twisted. Having .debs is not about ease of installation. Yes, twisted
> (and most python apps) are dead easy to install. The point of having
> debs is about maintenance. If twisted (or any other application /
> library you use) is not using your package management system, then the
> onus is on you to check that vendor for updates and installing them by
> hand. If you've ever tried to maintain any reasonable number of
> production systems this is a real hassle.
>
> My $0.02 (CAD even) ... and a +1 for twisted .debs :P

Yes, good point, agreed and everything, i appreciate people using
twisted on production systems! The more, the better! Spread it! Great!

regards, Johann



From glyph at divmod.com  Sun Jan  8 14:46:35 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 8 Jan 2006 16:46:35 -0500
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <43C0A5E5.2030905@densedata.com>
Message-ID: <20060108214635.1217.1561303750.divmod.quotient.10919@ohm>

On Sun, 08 Jan 2006 06:40:53 +0100, Johann Borck <johann.borck at densedata.com> wrote:

>Hi, Brendan,
>sorry, but this question is cute somehow - twisted is python - there's
>nothing to compile  - if you need *.deb sooo much, the latest version in
>unstable is 2.0.1-something, but it just can't be easier than
>downloading the latest 2.1 tarball and (...)

It is certainly not *too* hard to install Twisted without debs, but it sure would be nice if we had up-to-date support from Debian so that users could simply do "apt-get install twisted" without knowing about all this stuff.  I mean, hey, ./configure; make; make install isn't so hard - why should we have debs of anything at all? :)



From Brendan at BrendanSimon.com  Sun Jan  8 16:43:05 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Mon, 09 Jan 2006 10:43:05 +1100
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
Message-ID: <43C1A389.3030809@BrendanSimon.com>

twisted-python-request at twistedmatrix.com wrote:
> Brendan Simon wrote:
>   
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
>>     
>
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)
>   
Thanks for that.  I will do as you suggest.
Yes, I used the phrase "precompiled" out of habit.  It should have read 
"pre-packaged" :)

Debs (and possibly rpms) are still useful.  For instance, if I want to 
uninstall a package I just type:
    aptitude remove python-twisted

Or once my /etc/apt/sources.list is pointing to the right place:
    aptitude update ; aptitude upgrade
will keep my packages up to date with the latest security fixes and 
updated packages, etc.  Things are stored in the "right" place for all 
users.

Since no compilation is involved, it should be easy to modify the build 
system to generate .deb and .rpm files.  The deb and rpm maintainers 
(are they on this list?) would already have the infrastructure in place 
so it would be easy to port.  To me it makes some sense if the upstream 
package vendors generate the debs and rpms, but I can see they would 
not, and could not, generate packages for every OS and architecture.  
Maybe just the source packages, then the OS vendors could generate the 
binary packages for each arch.

Cheers,
Brendan.




From paul-lists at perforge.com  Sun Jan  8 17:07:18 2006
From: paul-lists at perforge.com (Paul G)
Date: Sun, 8 Jan 2006 19:07:18 -0500
Subject: [Twisted-Python] Up to date Debian packages
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C1A389.3030809@BrendanSimon.com>
Message-ID: <01f301c614b0$c4f5f1d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Brendan Simon" <Brendan at BrendanSimon.com>
To: <twisted-python at twistedmatrix.com>
Sent: Sunday, January 08, 2006 6:43 PM
Subject: Re: [Twisted-Python] Up to date Debian packages


> twisted-python-request at twistedmatrix.com wrote:
>> Brendan Simon wrote:
>>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>>
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the 
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>>
> Thanks for that.  I will do as you suggest.
> Yes, I used the phrase "precompiled" out of habit.  It should have read 
> "pre-packaged" :)
>
> Debs (and possibly rpms) are still useful.  For instance, if I want to 
> uninstall a package I just type:
>    aptitude remove python-twisted
>
> Or once my /etc/apt/sources.list is pointing to the right place:
>    aptitude update ; aptitude upgrade
> will keep my packages up to date with the latest security fixes and 
> updated packages, etc.  Things are stored in the "right" place for all 
> users.
>
> Since no compilation is involved, it should be easy to modify the build 
> system to generate .deb and .rpm files.  The deb and rpm maintainers (are 
> they on this list?) would already have the infrastructure in place so it 
> would be easy to port.  To me it makes some sense if the upstream package 
> vendors generate the debs and rpms, but I can see they would not, and 
> could not, generate packages for every OS and architecture.  Maybe just 
> the source packages, then the OS vendors could generate the binary 
> packages for each arch.

i'm not sure about debs, since i don't do debian (no stone throwing before 
midday, please), but there are tools out there which will analyze the 
configure/make stage (or, in this case, the python setup.py install stage) 
and produce an rpm. this could be useful both in generating packages as part 
of the build process *and* for folks who prefer not to have hand-installed 
software on their production systems. this is what we use to manage software 
deployed in production on our redhat-derived boxen but for which there are 
no official rpms. i am also aware of tools which do this for slackware 
packages.

-p 




From foom at fuhm.net  Sun Jan  8 22:41:58 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 00:41:58 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
Message-ID: <082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>

On Jan 8, 2006, at 1:46 AM, Brian Granger wrote:
> When I killed the reactor, I got an exception:
>
> exceptions.AttributeError: 'BonjourDescriptor' object has no  
> attribute 'connectionLost'
>
> It looks like the disconnectAll method on the reactor is calling  
> reader.connectionLost on each reader.  Why is this so?
> I thought I only needed to implement the IReadDescriptor interface  
> for my reader, but the connectionLost method is not a part of that  
> interface.  Hmmm.  Should I implement it?  What interface is that  
> method in?  This seems confusing.

connectionLost should have been on IFileDescriptor, the superclass of  
IReadDescriptor. I just added it:
>     def connectionLost(self, reason):
>         """Called when the connection was lost.
>
>         This is called when the connection on a selectable object  
> has been
>         lost.  It will be called whether the connection was closed  
> explicitly,
>         an exception occurred in an event handler, or the other end  
> of the
>         connection closed it first.
>
>         See also L{IHalfCloseableDescriptor} if your descriptor  
> wants to be
>         notified separately of the two halves of the connection  
> being closed.
>
>         @param reason: A failure instance indicating the reason why  
> the
>          connection was lost.  L 
> {twisted.internet.error.ConnectionLost} and
>          L{twisted.internet.error.ConnectionDone} are of special  
> note, but
>          the failure may be of other classes as well.
>         """

Hope that helps.

JP seems to disagree that it _should_ be part of the interface  
(http://twistedmatrix.com/bugs/issue1408), but it _is_ currently (and  
was previously, just undocumentedly so).

James



From Brendan at BrendanSimon.com  Mon Jan  9 04:36:54 2006
From: Brendan at BrendanSimon.com (Brendan Simon)
Date: Mon, 09 Jan 2006 22:36:54 +1100
Subject: [Twisted-Python] TwistedSumo-2005-11-06 on Debian Sarge
In-Reply-To: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
Message-ID: <43C24AD6.3070501@BrendanSimon.com>

twisted-python-request at twistedmatrix.com wrote:
>> Is there an easy way to get precompiled versions of Twisted for Debian
>> Sarge?
>>     
> Hi, Brendan,
> sorry, but this question is cute somehow - twisted is python - there's
> nothing to compile  - if you need *.deb sooo much, the latest version in
> unstable is 2.0.1-something, but it just can't be easier than
> downloading the latest 2.1 tarball and just setting the 
> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
> distutils ie. python setup.py install from the base dir should work,
> another possible way is to copy the /twisted dir into the site-packages
> one of your python installation manually. Please, do that, there's no
> need for debs, really !! :)
> Johann
>   
I tried that but it doesn't seem to work.  I must be doing something wrong.
I uncompressed TwistedSumo-2005-11-06.tar.bz2 to /tmp.
Export PYTHONPATH=/tmp/TwistedSumo-2005-11-06
cd /tmp/TwistedSumo-2005-11-06/TwistedConch-0.6.0/doc/examples ; python 
sshsimpleclient.py

It does not work :(  I got an error saying SimpleUserAuth instance has 
no attribute 'llastPublicKey'.  I edited thd script to not worry about 
the lastPublicKey and at least it runs.  I get the hostkey printed but 
that's it.  It does not ask me for a password or anything.

The same thing happens if I don't export the PYTHONPATH which makes me 
think I haven't done it correctly.  I even tried setting PYTHONPATH to 
each of the subdirectories within the TwistedSumo-2005-11-06 directory.

So, I was hoping someone could give me a quickset of instructions to 
unpack the archive, set the PYTHONPATH, and run the sshsimpleclient.py 
script connecting to the localhost.  I'm running python 2.3.5 on Debian 
Sarge.

Thanks,
Brendan.






From johann.borck at densedata.com  Mon Jan  9 08:56:46 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Mon, 09 Jan 2006 16:56:46 +0100
Subject: [Twisted-Python] TwistedSumo-2005-11-06 on Debian Sarge
In-Reply-To: <43C24AD6.3070501@BrendanSimon.com>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C24AD6.3070501@BrendanSimon.com>
Message-ID: <43C287BE.2010009@densedata.com>

Brendan Simon wrote:

> twisted-python-request at twistedmatrix.com wrote:
>
>>> Is there an easy way to get precompiled versions of Twisted for Debian
>>> Sarge?
>>>     
>>
>> Hi, Brendan,
>> sorry, but this question is cute somehow - twisted is python - there's
>> nothing to compile  - if you need *.deb sooo much, the latest version in
>> unstable is 2.0.1-something, but it just can't be easier than
>> downloading the latest 2.1 tarball and just setting the
>> PYTHONPATH=/path/to/twisted, i don't know exactly, but i think even the
>> distutils ie. python setup.py install from the base dir should work,
>> another possible way is to copy the /twisted dir into the site-packages
>> one of your python installation manually. Please, do that, there's no
>> need for debs, really !! :)
>> Johann
>>   
>
> I tried that but it doesn't seem to work.  I must be doing something
> wrong.
> I uncompressed TwistedSumo-2005-11-06.tar.bz2 to /tmp.
> Export PYTHONPATH=/tmp/TwistedSumo-2005-11-06
> cd /tmp/TwistedSumo-2005-11-06/TwistedConch-0.6.0/doc/examples ;
> python sshsimpleclient.py
>
> It does not work :(  I got an error saying SimpleUserAuth instance has
> no attribute 'llastPublicKey'.  I edited thd script to not worry about
> the lastPublicKey and at least it runs.  I get the hostkey printed but
> that's it.  It does not ask me for a password or anything.
>
> The same thing happens if I don't export the PYTHONPATH which makes me
> think I haven't done it correctly.  I even tried setting PYTHONPATH to
> each of the subdirectories within the TwistedSumo-2005-11-06 directory.
>
No, this error comes out of twisted, so if you have no other twisted
install, the PYTHONPATH thing works as it should, otherwise you'd get
import errors.  Are you shure that it works without exporting the path?
that'd be very strange, you can check with  env if  the dir  is on your
path..   regarding sshsimpleclient, i don't know, for me the example
works, but in the code it's lastPublicKey, not llastPublicKey.. maybe
one 'l' too much there? try some other examples, twisted works, the
simpleclient-problem is independent from that.
Johann

> So, I was hoping someone could give me a quickset of instructions to
> unpack the archive, set the PYTHONPATH, and run the sshsimpleclient.py
> script connecting to the localhost.  I'm running python 2.3.5 on
> Debian Sarge.
>
> Thanks,
> Brendan.
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From bgranger at scu.edu  Mon Jan  9 09:51:20 2006
From: bgranger at scu.edu (Brian Granger)
Date: Mon, 09 Jan 2006 08:51:20 -0800
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
	<082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
Message-ID: <577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>


On Jan 8, 2006, at 9:41 PM, James Y Knight wrote:

> On Jan 8, 2006, at 1:46 AM, Brian Granger wrote:
>> When I killed the reactor, I got an exception:
>>
>> exceptions.AttributeError: 'BonjourDescriptor' object has no  
>> attribute 'connectionLost'
>>
>> It looks like the disconnectAll method on the reactor is calling  
>> reader.connectionLost on each reader.  Why is this so?
>> I thought I only needed to implement the IReadDescriptor interface  
>> for my reader, but the connectionLost method is not a part of that  
>> interface.  Hmmm.  Should I implement it?  What interface is that  
>> method in?  This seems confusing.
>
> connectionLost should have been on IFileDescriptor, the superclass  
> of IReadDescriptor. I just added it:
>>     def connectionLost(self, reason):
>>         """Called when the connection was lost.
>>
>>         This is called when the connection on a selectable object  
>> has been
>>         lost.  It will be called whether the connection was closed  
>> explicitly,
>>         an exception occurred in an event handler, or the other  
>> end of the
>>         connection closed it first.
>>
>>         See also L{IHalfCloseableDescriptor} if your descriptor  
>> wants to be
>>         notified separately of the two halves of the connection  
>> being closed.
>>
>>         @param reason: A failure instance indicating the reason  
>> why the
>>          connection was lost.  L 
>> {twisted.internet.error.ConnectionLost} and
>>          L{twisted.internet.error.ConnectionDone} are of special  
>> note, but
>>          the failure may be of other classes as well.
>>         """
>
> Hope that helps.

>
> JP seems to disagree that it _should_ be part of the interface  
> (http://twistedmatrix.com/bugs/issue1408), but it _is_ currently  
> (and was previously, just undocumentedly so).
>

Adding connectionLost to the IFileDescriptor interface does solve the  
problem.  But the situation is more complicated than that - and that  
makes me a little hesitant to just have connectionLost in  
IFileDescriptor as you have done.  Here is why:

The IReactorFDSet interface, specifies that any class that implements  
the IReadDescriptor can be used as a reader.  But, currently, the  
reactor's, which supposedly IReactorFDSet implements also call the  
following on the readers:

logPrefix -- part of twisted.python.log.Logger which FileDescriptor  
(the class) inherits from
connectionLost -- now part of IFileDescriptor

Thus is looks like readers are actually required to also be a  
subclass of the Logger class (the FileDescriptor class, which is used  
for Port does this).  The problem seems to be with the IReactorFDSset  
interface which doesn't actually specify acccurately which interfaces  
(and subclasses) the  readers/writers must implement.  Is there a  
ILogger interface as well?

Also, this makes me worry that developers have been asusming that  
readers are actually a subclass of FileDescriptor.  Is that the case?

I am not that experienced with this part of twisted, so I am not sure  
what is the best solution.

Thanks for looking into this.

Brian


> James
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From foom at fuhm.net  Mon Jan  9 10:24:47 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 12:24:47 -0500
Subject: [Twisted-Python] Triggering callbacks on raw file descriptors
In-Reply-To: <577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>
References: <20060107190409.1217.1278046386.divmod.quotient.10732@ohm>
	<52F63E0E-4FD2-49E7-9652-FB918FD3DB21@scu.edu>
	<082D9F52-C4A9-422A-B759-8A98A894E041@fuhm.net>
	<577F2EE5-13F4-4E02-BF87-E5282E404EEB@scu.edu>
Message-ID: <C4CD2AC1-0A2D-4EDF-9FDD-03C7F4301247@fuhm.net>


On Jan 9, 2006, at 11:51 AM, Brian Granger wrote:
> Adding connectionLost to the IFileDescriptor interface does solve  
> the problem.  But the situation is more complicated than that - and  
> that makes me a little hesitant to just have connectionLost in  
> IFileDescriptor as you have done.  Here is why:
>
> The IReactorFDSet interface, specifies that any class that  
> implements the IReadDescriptor can be used as a reader.  But,  
> currently, the reactor's, which supposedly IReactorFDSet implements  
> also call the following on the readers:
>
> logPrefix -- part of twisted.python.log.Logger which FileDescriptor  
> (the class) inherits from
> connectionLost -- now part of IFileDescriptor
>
> Thus is looks like readers are actually required to also be a  
> subclass of the Logger class (the FileDescriptor class, which is  
> used for Port does this).  The problem seems to be with the  
> IReactorFDSset interface which doesn't actually specify acccurately  
> which interfaces (and subclasses) the  readers/writers must  
> implement.  Is there a ILogger interface as well?
>
> Also, this makes me worry that developers have been asusming that  
> readers are actually a subclass of FileDescriptor.  Is that the case?

This is most likely true and unfortunate. Thanks for helping to track  
down these issues. What we really need is some test coverage of the  
reactor being used with alternative IFileDescriptors that only  
implement the minimal advertised interfaces.

> I am not that experienced with this part of twisted, so I am not  
> sure what is the best solution.

The right solution is to fix this part of the spec. I do think that  
connectionLost is a fundemental part of the interface. However, I do  
not think logPrefix ought to be. That should be fixed to be optional.

James



From itamar at itamarst.org  Mon Jan  9 10:48:27 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 09 Jan 2006 12:48:27 -0500
Subject: [Twisted-Python] Switch to tempfile.mkstemp?
In-Reply-To: <E1Evp72-0001la-00@wolfwood>
References: <E1Evp72-0001la-00@wolfwood>
Message-ID: <1136828908.8968.1.camel@localhost.localdomain>

On Sun, 2006-01-08 at 21:58 -0700, James Knight wrote:
> Author: foom
> Date: Sun Jan  8 21:58:32 2006
> New Revision: 15544
> 
> Modified:
>    trunk/twisted/web2/static.py
> Log:
> Use tempfile.mktemp instead of custom filename making.
> Fixes issue1391.

Now that we're using 2.3, can we switch to the more secure mkstemp?




From foom at fuhm.net  Mon Jan  9 11:27:08 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 9 Jan 2006 13:27:08 -0500
Subject: [Twisted-Python] Switch to tempfile.mkstemp?
In-Reply-To: <1136828908.8968.1.camel@localhost.localdomain>
References: <E1Evp72-0001la-00@wolfwood>
	<1136828908.8968.1.camel@localhost.localdomain>
Message-ID: <29B8112E-57B2-4DC4-854A-B94C0E89C2C0@fuhm.net>

On Jan 9, 2006, at 12:48 PM, Itamar Shtull-Trauring wrote:

> On Sun, 2006-01-08 at 21:58 -0700, James Knight wrote:
>
>> Author: foom
>> Date: Sun Jan  8 21:58:32 2006
>> New Revision: 15544
>>
>> Modified:
>>    trunk/twisted/web2/static.py
>> Log:
>> Use tempfile.mktemp instead of custom filename making.
>> Fixes issue1391.
>>
>
> Now that we're using 2.3, can we switch to the more secure mkstemp?

AFAIK it is secure to use mktemp + open(.., O_EXCL|O_CREAT).

James



From jason at mobarak.name  Mon Jan  9 18:55:48 2006
From: jason at mobarak.name (Jason Mobarak)
Date: Mon, 9 Jan 2006 18:55:48 -0700
Subject: [Twisted-Python] Up to date Debian packages
In-Reply-To: <01f301c614b0$c4f5f1d0$6402a8c0@dcore>
References: <E1EvXyI-0001eb-02@pyramid.twistedmatrix.com>
	<43C1A389.3030809@BrendanSimon.com>
	<01f301c614b0$c4f5f1d0$6402a8c0@dcore>
Message-ID: <b194c9190601091755v5cdfe973k67815ca1c7767f34@mail.gmail.com>

On 1/8/06, Paul G <paul-lists at perforge.com> wrote:
[...]
> i'm not sure about debs, since i don't do debian (no stone throwing before
> midday, please), but there are tools out there which will analyze the
> configure/make stage (or, in this case, the python setup.py install stage)
> and produce an rpm. this could be useful both in generating packages as part
> of the build process *and* for folks who prefer not to have hand-installed
> software on their production systems. this is what we use to manage software
> deployed in production on our redhat-derived boxen but for which there are
> no official rpms. i am also aware of tools which do this for slackware
> packages.

I'll mention one of these tools:

http://asic-linux.com.mx/~izto/checkinstall/ (google for checkinstall,
or it's underlying hardware "installwatch")

(which is in Debian).  This generates rpms/debs/slackpacks from most
any software "install" phase.  However, the point of packages is more
finely defined with compiled code, even if you have a tool like this
you're still hand installing it, which can lead a host of problems
that are side stepped by packages.

,,Jason



From zooko at zooko.com  Mon Jan  9 23:47:01 2006
From: zooko at zooko.com (zooko at zooko.com)
Date: Tue, 10 Jan 2006 02:47:01 -0400
Subject: [Twisted-Python] slightly silly hack
Message-ID: <20060110064701.690501913@yumyum.zooko.com>


Ever wanted to execute your trial tests as though they were commands?  You can
use tab completion in bash, for example:

$ ./amdlib/storage/test/test_storefile.py -s

It's easy!  Give your file executable permission and at the top of the file
type this line: "#!/usr/bin/env python".  At the bottom type: """
if __name__ == "__main__":
    import os, sys
    mods = []
    fullname = os.path.realpath(os.path.abspath(__file__))
    for pathel in sys.path:
        fullnameofpathel = os.path.realpath(os.path.abspath(pathel))
        if fullname.startswith(fullnameofpathel):
            relname = fullname[len(fullnameofpathel):]
            mod = (os.path.splitext(relname)[0]).replace(os.sep, '.').strip('.')
            mods.append(mod)

    mods.sort(cmp=lambda x, y: cmp(len(x), len(y)))
    mods.reverse()
    for mod in mods:
        cmdstr = "trial %s %s" % (' '.join(sys.argv[1:]), mod,)
        print cmdstr
        if os.system(cmdstr) == 0:
            break
"""

Regards,

Zooko



From fdarling at gmail.com  Tue Jan 10 13:35:43 2006
From: fdarling at gmail.com (Forest Darling)
Date: Tue, 10 Jan 2006 15:35:43 -0500
Subject: [Twisted-Python] mixing a Cacheable and a Viewable
Message-ID: <5d5395960601101235v1ed8f6dfm8fe7f0acdc2df213@mail.gmail.com>

I want to make a server side object that the client can access via a
RemoteCache, but also access view_ functions from the Cacheable via
.callRemote() This way a player can see an object based on its
perpective (like fog of war) and a player can also call server-side
methods for game actions (like to move a hero.)

from the server and remote classes trying to inherit both doesn't
work, so how do I do this? This kind of problem must have come up
before...

Heres the link to my non-working partially done code, the Game,
Player, and Hero classes need to behave this way.

Heres a copy of my source, it needs Numeric, PyQt, and of course Twisted

http://behemoth.binarypimpin.com/~forest/pyhomm/files/PyHoMM-broken.zip



From maillists at ivsn.com  Tue Jan 10 13:57:17 2006
From: maillists at ivsn.com (Paul Reznicek)
Date: Tue, 10 Jan 2006 21:57:17 +0100
Subject: [Twisted-Python] Defect in twisted/persisted/sob.py
Message-ID: <43C41FAD.8060003@ivsn.com>

After update to trunk, twistd do not start as a daemon with following error:

    Starting my-app: twistd
    Failed to load application: global name 'mainMod' is not defined

Following patch helped, please consider to apply to trunk:

Index: sob.py
===================================================================
--- sob.py    (Revision 15568)
+++ sob.py    (Arbeitskopie)
@@ -157,6 +157,7 @@
      @param style: string (one of 'source', 'xml' or 'pickle')
      @param passphrase: string
      """
+    global mainMod
      mode = 'r'
      if style=='source':
          from twisted.persisted.aot import unjellyFromSource as load



From exarkun at divmod.com  Tue Jan 10 14:25:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 10 Jan 2006 16:25:51 -0500
Subject: [Twisted-Python] Defect in twisted/persisted/sob.py
In-Reply-To: <43C41FAD.8060003@ivsn.com>
Message-ID: <20060110212551.31401.1430204259.divmod.quotient.28@ohm>

On Tue, 10 Jan 2006 21:57:17 +0100, Paul Reznicek <maillists at ivsn.com> wrote:
>After update to trunk, twistd do not start as a daemon with following error:
>
>    Starting my-app: twistd
>    Failed to load application: global name 'mainMod' is not defined
>
>Following patch helped, please consider to apply to trunk:

This looks like issue 491: http://twistedmatrix.com/bugs/issue491

The hold up in applying it is probably the lack of a unit test.

Jean-Paul



From foom at fuhm.net  Tue Jan 10 23:00:10 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 11 Jan 2006 00:00:10 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1EwZ1m-0000IK-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-04 06:00:02.200000:
 Bugs opened: 13   Bugs closed: 7   Total open bugs: 524 (+6)
  Urgent: 7 (-1)
  Bug: 249 (+5)
  Feature: 181 (+0)
  Wish: 87 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] Trial temp directory behavior is a little off  (4 hours ago)
       http://twistedmatrix.com/bugs/issue1413 opened by jml

[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1408 opened by exarkun

                    ==== Bug ====
[WEB] ExpatError on xmlrpc client connection close  (5 hours ago)
       http://twistedmatrix.com/bugs/issue1412 opened by kkinder

[CORE] spawnProcess on unix doesn't handle case where os.fork fails cleanly  (yesterday)
       http://twistedmatrix.com/bugs/issue1410 opened by itamarst

IMAP4Client.authenticate()/login() need to quote arguments  (yesterday)
       http://twistedmatrix.com/bugs/issue1411 opened by jojo

[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1407 opened by exarkun

[TRIAL] Trial should handle logged errors using an observer.  (yesterday)
       http://twistedmatrix.com/bugs/issue1409 opened by jml

Worries about copyTo/moveTo additions to filepath  (2 days ago)
       http://twistedmatrix.com/bugs/issue1406 opened by jknight

[CORE, DOCUMENTATION] Bad link in twisted web documentation.  (5 days ago)
       http://twistedmatrix.com/bugs/issue1404 opened by Tekhne

[CORE, WIN32] iocpreactor - initiateOp [Errno 2] The system cannot find the file specified  (5 days ago)
       http://twistedmatrix.com/bugs/issue1403 opened by ghazel

[CORE, WIN32] strange behaviours when writing large amount of data on stdout  (2 months ago)
       http://twistedmatrix.com/bugs/issue1305 opened by manlio

                    ==== Wish ====
[CORE] twisted callFromThread raises IndexError  (3 days ago)
       http://twistedmatrix.com/bugs/issue1405 opened by ghazel

[DEFERRED] Make deferred callback chains debuggable  (5 days ago)
       http://twistedmatrix.com/bugs/issue1402 opened by moof

Bugs Closed
______________________
                    ==== Urgent ====
[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
       http://twistedmatrix.com/bugs/issue1408 opened by exarkun, closed by exarkun

[TESTS, WEB2] Intermitent failure in web2 unit tests  (1 week ago)
       http://twistedmatrix.com/bugs/issue1391 opened by exarkun, closed by jknight

[newpb] implement a correct eventually(), use callLater rather than callFromThread  (1 week ago)
       http://twistedmatrix.com/bugs/issue1398 opened by glyph, closed by warner

                    ==== Bug ====
[CORE] Does connectionLost belong in IFileDescriptor?  (2 days ago)
       http://twistedmatrix.com/bugs/issue1407 opened by exarkun, closed by exarkun

[TRIAL] trial.util._Janitor.do_cleanPending causes spinWhile warning to be emitted.  (1 week ago)
       http://twistedmatrix.com/bugs/issue1395 opened by jknight, closed by jml

[CORE] cannot exit script before activating reactor if using threadpool  (1 week ago)
       http://twistedmatrix.com/bugs/issue1385 opened by antony, closed by exarkun

[TRIAL] Implementing setUpClass should not require ClassSuite  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1379 opened by jml, closed by jml




From bgranger at scu.edu  Wed Jan 11 21:52:02 2006
From: bgranger at scu.edu (Brian Granger)
Date: Wed, 11 Jan 2006 20:52:02 -0800
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
Message-ID: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>

Hi,

Are Deferred objects designed to have their callback method called  
multiple times it there are a multiple (discrete) results that arrive  
asynchronously?  If not, what is the proper construct in Twisted for  
returning multiple asynchronous results from a single method?

Thanks

Brian



From exarkun at divmod.com  Wed Jan 11 22:15:19 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 12 Jan 2006 00:15:19 -0500
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
Message-ID: <20060112051519.26200.1056948200.divmod.quotient.126@ohm>

On Wed, 11 Jan 2006 20:52:02 -0800, Brian Granger <bgranger at scu.edu> wrote:
>Hi,
>
>Are Deferred objects designed to have their callback method called  multiple 
>times it there are a multiple (discrete) results that arrive 
>asynchronously?  If not, what is the proper construct in Twisted for 
>returning multiple asynchronous results from a single method?

Nope, they're not.  Twisted generally reverts to named method callbacks or explicit listener registration for cases where multiple results are possible.  I've played with support code for simplifying this in the past, but it has never really resulting in something that was easier to use.

Jean-Paul



From andrew-twisted at puzzling.org  Wed Jan 11 22:25:41 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Thu, 12 Jan 2006 16:25:41 +1100
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
Message-ID: <20060112052541.GD4555@home.puzzling.org>

On Wed, Jan 11, 2006 at 08:52:02PM -0800, Brian Granger wrote:
> Hi,
> 
> Are Deferred objects designed to have their callback method called  
> multiple times it there are a multiple (discrete) results that arrive  
> asynchronously?  If not, what is the proper construct in Twisted for  
> returning multiple asynchronous results from a single method?

Deferred objects are one-shot by design, so they are not by themselves suitable
for multiple asynchronous results.

If you have a fixed number of asynchronous operations that want to return
results, you could just return a Deferred per expected result.  Callers that
wish to aggregate those can use a DeferredList.

If you have something that's more like an event source -- you don't know how
many results to expect in advance, you are probably better off with callable
that is invoked each time, and dispatches the result to whatever code is
appropriate at the time.  Quite possibly a state machine written as a class with
different methods that will be invoked for the different kinds of events/results
you expect is appropriate.

If you have something that's conceptually one operation, but the results trickle
in in parts, then perhaps a hybrid approach is suitable.  e.g. consider
downloading a large web-page: somewhere a dataReceived handler is getting
invoked many times, and this can be used to e.g. update a progress bar in a UI
somewhere, but once the entire page has been downloaded then a complete result
can be passed to a Deferred for code that only cares about the final result.

There are probably lots of other variations as well, depending on exactly what
you need.

I hope this helps,

-Andrew.




From bgranger at scu.edu  Wed Jan 11 22:29:05 2006
From: bgranger at scu.edu (Brian Granger)
Date: Wed, 11 Jan 2006 21:29:05 -0800
Subject: [Twisted-Python] Repeatedly calling Deferred.callback()
In-Reply-To: <20060112052541.GD4555@home.puzzling.org>
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
	<20060112052541.GD4555@home.puzzling.org>
Message-ID: <94B370EC-8B25-49CC-8B0F-F5075C92F40F@scu.edu>


On Jan 11, 2006, at 9:25 PM, Andrew Bennetts wrote:

> On Wed, Jan 11, 2006 at 08:52:02PM -0800, Brian Granger wrote:
>> Hi,
>>
>> Are Deferred objects designed to have their callback method called
>> multiple times it there are a multiple (discrete) results that arrive
>> asynchronously?  If not, what is the proper construct in Twisted for
>> returning multiple asynchronous results from a single method?
>
> Deferred objects are one-shot by design, so they are not by  
> themselves suitable
> for multiple asynchronous results.
>
> If you have a fixed number of asynchronous operations that want to  
> return
> results, you could just return a Deferred per expected result.   
> Callers that
> wish to aggregate those can use a DeferredList.
>
> If you have something that's more like an event source -- you don't  
> know how
> many results to expect in advance, you are probably better off with  
> callable
> that is invoked each time, and dispatches the result to whatever  
> code is
> appropriate at the time.  Quite possibly a state machine written as  
> a class with
> different methods that will be invoked for the different kinds of  
> events/results
> you expect is appropriate.
>

This is the case that I have.  This is what I did originally, but  
then I wanted to be fancy and use Deferred's.  Guess I will go back  
to using some version of a callable.

Thanks.

> If you have something that's conceptually one operation, but the  
> results trickle
> in in parts, then perhaps a hybrid approach is suitable.  e.g.  
> consider
> downloading a large web-page: somewhere a dataReceived handler is  
> getting
> invoked many times, and this can be used to e.g. update a progress  
> bar in a UI
> somewhere, but once the entire page has been downloaded then a  
> complete result
> can be passed to a Deferred for code that only cares about the  
> final result.
>
> There are probably lots of other variations as well, depending on  
> exactly what
> you need.
>
> I hope this helps,
>
> -Andrew.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From radeex at gmail.com  Wed Jan 11 22:47:11 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Thu, 12 Jan 2006 16:47:11 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
In-Reply-To: <20060108104014.GA12891@sourdust.home.puzzling.org>
References: <20060108104014.GA12891@sourdust.home.puzzling.org>
Message-ID: <60ed19d40601112147tdbe99d6w1e5d23dc21ca3fef@mail.gmail.com>

On 1/8/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
> A reminder to interested parties that I set the date for this to this
> coming Saturday: 14th January. What follows is a reminder about what I
> want to do.
>
> I'll set up something more specific for this in a day or two. I envisage
> I'll have a worklist of some kind on a wiki, and that participants will
> also be chatting on #twisted as usual to resolve anything else.

I don't know about everyone else, but _I'm_ gonna be there. So if
others think they are anywhere near as cool as radix (or want to be),
please come along.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mary-twisted at puzzling.org  Fri Jan 13 00:59:34 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Fri, 13 Jan 2006 18:59:34 +1100
Subject: [Twisted-Python] Documentation virtual sprint: 14th January
In-Reply-To: <20060108104014.GA12891@sourdust.home.puzzling.org>
References: <20060108104014.GA12891@sourdust.home.puzzling.org>
Message-ID: <20060113075934.GE6454@sourdust.home.puzzling.org>

Yep, there's still a virtual sprint tomorrow! I'll be setting up a todo
list in the morning Australian time which should be done by about 0100
UTC and which will be posted here so that people can work on it when I'm
not online.

I'll spend sometime online between 0400 - 0700 UTC if there are any
people in Australian timezones or US nightowls wanting to do stuff. I'll
be back around 2100 UTC (that's late Saturday afternoon in the US) for
some more work.

-Mary

-- 
<exarkun> rt: we could do with an out of control suicide rate
<rt> unless you're willing to lead the way, I wouldn't go making that
     recommendation.
<exarkun> rt: I would, but if I hurl people off a cliff, it's murder, not 
          suicide.



From smurf at smurf.noris.de  Fri Jan 13 04:09:50 2006
From: smurf at smurf.noris.de (Matthias Urlichs)
Date: Fri, 13 Jan 2006 12:09:50 +0100
Subject: [Twisted-Python] Re: Repeatedly calling Deferred.callback()
References: <BE4ACCEB-EFF5-4AC9-9F30-B6DFF4858CE9@scu.edu>
	<20060112052541.GD4555@home.puzzling.org>
	<94B370EC-8B25-49CC-8B0F-F5075C92F40F@scu.edu>
Message-ID: <pan.2006.01.13.11.09.49.308986@smurf.noris.de>

Hi, Brian Granger wrote:

> This is the case that I have.  This is what I did originally, but then I
> wanted to be fancy and use Deferred's.  Guess I will go back to using some
> version of a callable.

When in doubt, do both -- use a callback for each result, and then fire
the Deferred when you're done.

-- 
Matthias Urlichs   |   {M:U} IT Design @ m-u-it.de   |  smurf at smurf.noris.de
Disclaimer: The quote was selected randomly. Really. | http://smurf.noris.de
 - -
Exercise care in the abuse of oppressed peoples. Many farm implements
make effective weapons in the hands of a skilled opponent. Some of those
little old men can teach you a thing or two about hand-to-hand, too.
		-- The Legion Of Doom Troop Member's List





From y.glodt at sitasoftware.lu  Fri Jan 13 05:49:17 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Fri, 13 Jan 2006 13:49:17 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
Message-ID: <43C7A1CD.60003@sitasoftware.lu>

Hi,

I have read about twisted.names and I guess it can help me in what I 
have to achieve..

I have a database which contains a list of ip-addresses and 
corresponding hostnames.

Now, how could I do to, e.g., write a daemon which would, on dns 
queries, query the database to resolve the name?

best regards,
Yves




From natester at gmail.com  Fri Jan 13 09:27:23 2006
From: natester at gmail.com (Nathaniel Haggard)
Date: Fri, 13 Jan 2006 09:27:23 -0700
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <43C7A1CD.60003@sitasoftware.lu>
References: <43C7A1CD.60003@sitasoftware.lu>
Message-ID: <4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>

On 1/13/06, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>
> Hi,
>
> I have read about twisted.names and I guess it can help me in what I
> have to achieve..
>
> I have a database which contains a list of ip-addresses and
> corresponding hostnames.
>
> Now, how could I do to, e.g., write a daemon which would, on dns
> queries, query the database to resolve the name?


You could subclass twisted.names.client.Resolver to lookup the names from
the db or from some structure generated from the db.

best regards,
> Yves
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060113/7a12fa96/attachment.html>

From exarkun at divmod.com  Fri Jan 13 09:59:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 13 Jan 2006 11:59:00 -0500
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <43C7A1CD.60003@sitasoftware.lu>
Message-ID: <20060113165900.26200.777039052.divmod.quotient.538@ohm>

On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>Hi,
>
>I have read about twisted.names and I guess it can help me in what I have to 
>achieve..
>
>I have a database which contains a list of ip-addresses and corresponding 
>hostnames.
>
>Now, how could I do to, e.g., write a daemon which would, on dns queries, 
>query the database to resolve the name?
>

Twisted Names isn't exactly done, as far as pleasant pluggable backend support goes.  Take a look at twisted/names/authority.py and twisted/names/common.py.  The hook you are probably interested in is the _lookup method

Jean-Paul



From jcea at argo.es  Fri Jan 13 11:31:29 2006
From: jcea at argo.es (Jesus Cea)
Date: Fri, 13 Jan 2006 19:31:29 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <20060113165900.26200.777039052.divmod.quotient.538@ohm>
References: <20060113165900.26200.777039052.divmod.quotient.538@ohm>
Message-ID: <43C7F201.2050909@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> Twisted Names isn't exactly done, as far as pleasant pluggable backend
> support goes.

A little digression from the thread. Excuse me.

Sorry to bother you, Jean-Paul. Have you had some time to look at my
pre-Christmas issue with "twisted.names.dns.DNSDatagramProtocol"?. Seems
a twisted bug with the reactor stopping. I need some help.

=====

2006/01/13 19:27 CET [twisted.names.dns.DNSDatagramProtocol (UDP)]
Traceback (most recent call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ8fyAJlgi5GaxT1NAQJmOQP9F2n/uRJ70pw3XXEgbqAanG+IsfXd95Zb
XTgXkvrgnkfb4GLjwwYHwfDHdzl30MoSHBgAlRt/xqaaa2BS07m0jxoTayIQ8kSr
e2V5noWURIeu6XEG2f9AshZg7veUt/swEWFKFpMkFOU7iUIFIWnlJ1zPBcbGY2i4
bKviYdgEiWg=
=RS8A
-----END PGP SIGNATURE-----



From mary-twisted at puzzling.org  Fri Jan 13 17:24:34 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 Jan 2006 11:24:34 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
Message-ID: <20060114002434.GJ6454@sourdust.home.puzzling.org>

Hi all,

Today (well, soon for non-Australians) is of course the day of the
documentation virtual sprint.

What are we doing? We're reviewing the existing Twisted documentation
from both user and expert points of view to highlight obvious areas of
improvement.

How can you help? Read Twisted documentation and make suggestions for
improvement. We need reviews from both Twisted users (the intended
audience of the documentation) and Twisted experts (who are the people
who, if the docs aren't good, have to fill in the gaps in their spare
time in email and IRC).

The sprint participants will be on IRC on the irc.freenode.net network.
I've created a dedicated sprint channel #twisted-sprint but I expect
there will be discussion also in #twisted. (I am less likely to be
following it closely.) Anyone wanting my attention personally should ask
for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
keep Australian east coast daylight hours ;)

The reviews will be coordinated on a wiki: if you need assistance
working out how to create and edit pages on the wiki, please ask on IRC.

For more details, see instructions at
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis and
http://twistedmatrix.com/trac/register/wiki/DocumentationAnalysis/DocumentList
to get a good idea of what you need to do: for anything missing ask me
on IRC.

As I wrote yesterday I will be online between 0400 - 0700 UTC if there
are any people in Australian timezones or US nightowls wanting to do
stuff. I'll be back around 2100 UTC (that's late Saturday afternoon in
the US) for some more work. Others will be around at other times.

-Mary

-- 
<radix> uh oh.
<radix> 'destroy here' isn't a good idea. :)



From mary-twisted at puzzling.org  Fri Jan 13 17:42:52 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Sat, 14 Jan 2006 11:42:52 +1100
Subject: [Twisted-Python] Re: Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060114004252.GL6454@sourdust.home.puzzling.org>

On Sat, Jan 14, 2006, Mary Gardiner wrote:
> The sprint participants will be on IRC on the irc.freenode.net network.
> I've created a dedicated sprint channel #twisted-sprint but I expect
> there will be discussion also in #twisted. (I am less likely to be
> following it closely.) Anyone wanting my attention personally should ask
> for me in #twisted-sprint (I am user "hypatia") and keep in mind that I
> keep Australian east coast daylight hours ;)

Oh, and if anyone wants to participate in the sprint and won't, for
whatever reason, be on IRC, you're welcome to. Just follow the
directions at the link I gave and ask sprint questions on whichever of
twisted-python at twistedmatrix.com or twisted-web at twistedmatrix.com seems
appropriate (don't cross-post).

-Mary



From y.glodt at sitasoftware.lu  Sun Jan 15 08:45:42 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Sun, 15 Jan 2006 16:45:42 +0100
Subject: [Twisted-Python] Re: simple dns server with twisted.names
Message-ID: <43CA6E26.3070509@sitasoftware.lu>

On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at
sitasoftware.lu> wrote:
> On Fri, 13 Jan 2006 13:49:17 +0100, Yves Glodt <y.glodt at
> sitasoftware.lu> wrote:
>> Hi,
>> 
>> I have read about twisted.names and I guess it can help me in what
>> I have to achieve..
>> 
>> I have a database which contains a list of ip-addresses and
>> corresponding hostnames.
>> 
>> Now, how could I do to, e.g., write a daemon which would, on dns
>> queries, query the database to resolve the name?
>> 
> 
> Twisted Names isn't exactly done, as far as pleasant pluggable
> backend support goes.  Take a look at twisted/names/authority.py and
> twisted/names/common.py.  The hook you are probably interested in is
> the _lookup method

Ok.

I have to admit I am completely new to twisted...

I am also not sure whether I explained myself good in what I want to do...

Basically, I need a replacement for /etc/hosts.

I have a daemon running on my box, and was thinking about adding a 
thread to it which could serve as a simple local dns server.

Right now, my /etc/hosts gets updated by a cronjob every now and then. 
The cronjob fetches IP-addresses and hostnames from a firebird DB and 
writes them to the hosts file.

What I was thinking to do with my daemon is, having in memory a 
list/hashtable of hosts with their IPs. If an IP changes I get a 
firebird event and I can updated it in my list.

Now twisted.names would only have to listen to dns requests (I have e.g. 
wget and openvpn which want to resolve names from my hosts right now 
periodically), lookup the IPs of the requested names in my in-memory 
list of hosts/ips, and answer as a normal dns server.

isn't twisted/names/server what I need for that?

thanks and best regards,
Yves

p.s.
Is there any more documentation available apart of this:
http://twistedmatrix.com/projects/names/
http://twistedmatrix.com/projects/names/documentation/howto/names.html


> Jean-Paul




From tjstebbing at gmail.com  Sun Jan 15 19:55:10 2006
From: tjstebbing at gmail.com (Tim Stebbing)
Date: Mon, 16 Jan 2006 13:55:10 +1100
Subject: [Twisted-Python] hobart meatspace sprint - the final hurrah
Message-ID: <972281650601151855g3035e65ge42c2c2933c9a0c6@mail.gmail.com>

We're looking at having a final Hobart AU sprint this Feb, before we
Hobartians go our separate ways. This would be on the weekend of the
11th-12th and perhaps a day either side if people are interested.
Sprint topics suggested are currently:

* Fix VFS (deferred support, move the protocol specific bits into the
various parts of twisted, integrate dav)
* Trial GUI ?

Current meatbag attendees:

tjs, radix, cablehead, teratorn, jml?

Current virtual attendees:
lifeless?

Currently thinking about it:
spiv, jerub

People I have not spoken with yet but would rock if they came:
hypatia, elspeth

-tjs



From pokerface at tacticalgamer.com  Mon Jan 16 05:36:19 2006
From: pokerface at tacticalgamer.com (pokerface)
Date: Mon, 16 Jan 2006 07:36:19 -0500 (EST)
Subject: [Twisted-Python] Simple OSCAR Bot
Message-ID: <4585.69.143.69.240.1137414979.squirrel@webmail.tacticalgamer.com>

Greetings, list.

I'm attempting to wrap my brain around Twisted for the purposes of
creating a simple OSCAR bot.  The purpose of this bot will be to send a
broadcast announcement to a mutable list of screennames to help with
admining gaming servers.

Every example I've seen of OSCAR bots has the bot log in and respond to
all sorts of messages that it gets sent, staying logeed in the entire
time.  My needs are simpler; the bot need only log in, send its messages,
and log right back out.  From what I can suss out, this would still
necessitate a connectTCP() call, but it doesn't need a reactor.run().  My
trouble is that I don't know exactly what it WOULD require beyond
connection (IE, where to put the sendMessage, whether to create callbacks,
etc. etc.).  I also don't quite know how I would pass different lists to
the bot class for the broadcast, but that's a secondary concern that I can
work around inefficiently if I have to (I think).

If someone knows of some keywords I'm missing for my google search, or if
they can otherwise point me in the direction of an example of what I'm
attempting to do, I would be most appreciative.

Thank you all for your time.

Sean




From itamar at itamarst.org  Mon Jan 16 08:25:17 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 16 Jan 2006 10:25:17 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15582 - I meant change it
	like this, not like that.
In-Reply-To: <E1ExsKe-0007mh-00@wolfwood>
References: <E1ExsKe-0007mh-00@wolfwood>
Message-ID: <1137425118.9231.3.camel@localhost.localdomain>

On Sat, 2006-01-14 at 13:49 -0700, James Knight wrote:

> +from twisted.web2 import 

That module name violates the coding standard, btw.




From y.glodt at sitasoftware.lu  Tue Jan 17 01:24:19 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Tue, 17 Jan 2006 09:24:19 +0100
Subject: [Twisted-Python] simple dns server with twisted.names
In-Reply-To: <4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>
References: <43C7A1CD.60003@sitasoftware.lu>
	<4adac7a30601130827y437bec2fq18825f49e448dfb5@mail.gmail.com>
Message-ID: <43CCA9B3.7080206@sitasoftware.lu>

Nathaniel Haggard wrote:
> On 1/13/06, *Yves Glodt* <y.glodt at sitasoftware.lu 
> <mailto:y.glodt at sitasoftware.lu>> wrote:
> 
>     Hi,
> 
>     I have read about twisted.names and I guess it can help me in what I
>     have to achieve..
> 
>     I have a database which contains a list of ip-addresses and
>     corresponding hostnames.
> 
>     Now, how could I do to, e.g., write a daemon which would, on dns
>     queries, query the database to resolve the name?
> 
> 
> You could subclass twisted.names.client.Resolver to lookup the names 
> from the db or from some structure generated from the db.

I went through the available documentation and I have to say that I did 
not advance... is there a list of classes and methods available somewhere?

Otherwise, I guess I could advance if I could have some examplecode 
which does only 1 thing:

in my python program I have a variable myhost = '1.2.3.4'

Now, I would be perfectly happy if I launch my python program, and if 
the following would work:

dig myhost @127.0.0.1


thanks in advance,
Yves



From mary-twisted at puzzling.org  Tue Jan 17 04:57:53 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 17 Jan 2006 22:57:53 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060114002434.GJ6454@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
Message-ID: <20060117115753.GD6785@sourdust.home.puzzling.org>

Unfortunately, the sprint involved less people than I'd hoped. I'd like
to thank Andrew Bennetts and David Blewett for their documentation
revies at
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
though, and Chris Armstrong and Jean-Paul Calderone for being around to
help out people who showed up. And also anyone who poked their head in
while I was out.

Where to from here?

Well, first of all I still think the idea of documentation reviews is a
reasonably good way to improve the documentation, because it forces
people to think about who the intended audience of the document is and
what the purpose of the document will be. This is surprisingly hard to
do when you just sit down and write something -- really! Also, Andrew
assures me that writing an expert review is easier than writing a
document.

So while I know that only a small percentage of users have the time or
inclination to be project contributors, I'd like to encourage anyone who
finds an eager but disappointed documentation user to go through the
process of
http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
I intend this to be an ongoing project.

At some point I will also do a template for 'reviewing' non-existant
documents -- David's valiant review of non-existant documentation shows
that I could improve the template for this task.

Next up will be another sprint in a month or two to *act* on the
reviews. I am hoping that improving a document based on a review will be
far easier than improving it based on scattered one-shot bug reports or
our gut instincts. Dates and times soon.

Further discussion of documentation improvement ideas welcome on
twisted-python at twistedmatrix.com

-Mary

-- 
<ilikewine> that mp3 sounds like that band is from williamsburg
<ilikewine> its an awful place
<ilikewine> where everybody wears stripes



From moof at metamoof.net  Tue Jan 17 05:30:28 2006
From: moof at metamoof.net (Moof)
Date: Tue, 17 Jan 2006 13:30:28 +0100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117115753.GD6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
Message-ID: <bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>

[Removed twisted-web from To: list]

On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>
> Unfortunately, the sprint involved less people than I'd hoped.


I'm sorry I couldn't join in. The Real World interefered with me at the last
minute and left me mostly offline durign the weekend, or I would have dived
in considerably. I'll try and have a read through the wiki this week and see
if I can add any contributions.

So while I know that only a small percentage of users have the time or
> inclination to be project contributors, I'd like to encourage anyone who
> finds an eager but disappointed documentation user to go through the
> process of
>
> http://twistedmatrix.com:8080/twisted/wiki/DocumentationAnalysis/DocumentList
> I intend this to be an ongoing project.


How about adding a links to "Don't like this document? Can't work it out
what you need to know? Review it" liberally throughout the documentation. It
may encourage people to keep critiquing, and thus help improve it.

At some point I will also do a template for 'reviewing' non-existant
> documents -- David's valiant review of non-existant documentation shows
> that I could improve the template for this task.


How about adding links in strategic places to "Request Documentation". I
don't know if you'd want to integrate this with the twisted roundup somehow.

In fact, a document on "what to do if you can't find the documentation you
want" might be helpful, and possibly stop the complaints about lack of
documentation. Include things like where to find the IRC Channel, how the
bug system works, and so on.

On another note, a wealth of explanations, normally for small areas of
twisted, are given out on the IRC channel and the mailing lists. Maybe
making it easy to post snippets from IRC that are searchable might be a good
idea to make "pseudo-documentation". Ditto a way of referring to particular
threads on the main mailing lists. For example, I've seen several threads on
IRC and on the mailing lists about how the twisted logging system works in
much more detail than the documentation on the site. Making it easy to link
to the various discussions we've had might be a big help to first-time
readers of the docs.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060117/2b7d7542/attachment.html>

From david at dawninglight.net  Tue Jan 17 06:14:12 2006
From: david at dawninglight.net (David Blewett)
Date: Tue, 17 Jan 2006 08:14:12 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
Message-ID: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>

I was reading through the enterprise module in twisted, and then I came 
across this website:

http://www.penguin.cz/~ondrap/sqlabstr.php

It makes using SQL in Python much more readable. I was thinking that it 
would be nice to incorporate some of the functionality of this module. 
It has more than would probably be necessary (creating classes 
dynamically from the schema in the underlying database for example), 
but I think it would make a nice addition to the enterprise module.

Any thoughts?

David Blewett

----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.




From glyph at divmod.com  Tue Jan 17 06:35:52 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 17 Jan 2006 08:35:52 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>
Message-ID: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>



On Tue, 17 Jan 2006 08:14:12 -0500, David Blewett <david at dawninglight.net> wrote:

>Any thoughts?

The main thought I have is

"No"

If anything, we should be moving towards *removing* some functionality like this (twisted.enterprise.row) which is unmaintained, poorly documented, poorly tested...

It's perfectly possible to use Twisted with an ORM or SQL sweetener of your choice.  If one is to become "officially" supported, it would probably be Axiom <http://divmod.org/trac/wiki/DivmodAxiom>, just due to the familiarity that several of the core Twisted developers have with it - but that's not really sufficiently general for inclusion in Twisted at this point.  Look for it in the next 5 years, maybe.



From paul-lists at perforge.com  Tue Jan 17 06:44:31 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 08:44:31 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117081412.3wjpwa7oqkzookgc@mail.dawninglight.net>
Message-ID: <150a01c61b6c$257f8590$6402a8c0@dcore>


----- Original Message ----- 
From: "David Blewett" <david at dawninglight.net>
To: <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 8:14 AM
Subject: [Twisted-Python] SQL Abstraction Layer


>I was reading through the enterprise module in twisted, and then I came 
>across this website:
>
> http://www.penguin.cz/~ondrap/sqlabstr.php
>
> It makes using SQL in Python much more readable. I was thinking that it 
> would be nice to incorporate some of the functionality of this module. It 
> has more than would probably be necessary (creating classes dynamically 
> from the schema in the underlying database for example), but I think it 
> would make a nice addition to the enterprise module.
>
> Any thoughts?

sqlalchemy's 'query building' looks to be doing the same job better, imo. it 
also supports more than just postgres. there was an example of integrating 
it with twisted earlier in the thread for this type of usage.

-p 




From paul-lists at perforge.com  Tue Jan 17 06:58:36 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 08:58:36 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
Message-ID: <151c01c61b6e$1e3acb80$6402a8c0@dcore>


----- Original Message ----- 
From: <glyph at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 8:35 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer

> It's perfectly possible to use Twisted with an ORM or SQL sweetener of 
> your choice.

what would help, i think, is some documentation/examples describing how this 
can be achieved with specific implementations. there's no reason this has to 
be in the official twisted documentation or written by twisted folks, 
necessarily, it would be good for it to just exist ;) dialtone's italian 
post shows the minimalistic example, but as he (through the translation) 
states, it probably won't be anywhere near as simple to use sqlalchemy's ORM 
features.

i am unsure whether i'll be using a fullblown ORM for the stuff i'm working 
on or just some query building facilities, but if nothing happens 
documentation-wise before i cross that bridge, i'll put up some examples of 
what i ended up doing.

alternatively, does someone have experience/insights to share but has been 
keeping it on the down low? now's the time to come on out with it ;)

-p 




From tvansteenburgh at gmail.com  Tue Jan 17 07:21:28 2006
From: tvansteenburgh at gmail.com (Tim Van Steenburgh)
Date: Tue, 17 Jan 2006 09:21:28 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <776bdcd30601170621l57a7cbf7mb639d6350d13f0b5@mail.gmail.com>

Worth looking at: http://www.sqlobject.org

I've only been tinkering for a few days, and I haven't done anything
complicated with it (yet), but so far I am pleased.

On 1/17/06, Paul G <paul-lists at perforge.com> wrote:
>
>
> ----- Original Message -----
> From: <glyph at divmod.com>
> To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
> Sent: Tuesday, January 17, 2006 8:35 AM
> Subject: Re: [Twisted-Python] SQL Abstraction Layer
>
> > It's perfectly possible to use Twisted with an ORM or SQL sweetener of
> > your choice.
>
> what would help, i think, is some documentation/examples describing how
> this
> can be achieved with specific implementations. there's no reason this has
> to
> be in the official twisted documentation or written by twisted folks,
> necessarily, it would be good for it to just exist ;) dialtone's italian
> post shows the minimalistic example, but as he (through the translation)
> states, it probably won't be anywhere near as simple to use sqlalchemy's
> ORM
> features.
>
> i am unsure whether i'll be using a fullblown ORM for the stuff i'm
> working
> on or just some query building facilities, but if nothing happens
> documentation-wise before i cross that bridge, i'll put up some examples
> of
> what i ended up doing.
>
> alternatively, does someone have experience/insights to share but has been
> keeping it on the down low? now's the time to come on out with it ;)
>
> -p
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060117/4cf4ad7d/attachment.html>

From golux at comcast.net  Tue Jan 17 09:38:22 2006
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 17 Jan 2006 11:38:22 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <43CD1D7E.2030005@comcast.net>

Paul G wrote:
> i am unsure whether i'll be using a fullblown ORM for the stuff i'm 
> working on or just some query building facilities, but if nothing 
> happens documentation-wise before i cross that bridge, i'll put up some 
> examples of what i ended up doing.
> 
> alternatively, does someone have experience/insights to share but has 
> been keeping it on the down low? now's the time to come on out with it ;)

My twisted app uses both query-building and an ORM.
If anyone wants a look, a nightly tarball can be downloaded from
http://ned.gsfc.nasa.gov/PanGalactic.tar.gz.

Query-mapping is in pangalactic.utils.sql
ORM is in pangalactic.repo.chronosynclastic

The sql.py module is easily usable outside of pangalactic,
and is just a way of building SQL statements from functions
-- pretty rudimentary, and only tested with postgresql.

The ORM is simple but is heavily dependent on the somewhat
unorthodox way pangalactic does metaobjects, so probably not
usable outside of pangalactic, but there might be some
ideas that could be used.

Docs (such as they are):  PanGalactic/doc/PgefManual.html
Comments welcome!

Cheers,
Steve



From dialtone at divmod.com  Tue Jan 17 09:47:04 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Tue, 17 Jan 2006 17:47:04 +0100
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <151c01c61b6e$1e3acb80$6402a8c0@dcore>
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm>
	<151c01c61b6e$1e3acb80$6402a8c0@dcore>
Message-ID: <20060117164704.GA335@divmod.com>

On Tue, Jan 17, 2006 at 08:58:36AM -0500, Paul G wrote:
> what would help, i think, is some documentation/examples describing how 
> this can be achieved with specific implementations. there's no reason this 
> has to be in the official twisted documentation or written by twisted 
> folks, necessarily, it would be good for it to just exist ;) dialtone's 
> italian post shows the minimalistic example, but as he (through the 
> translation) states, it probably won't be anywhere near as simple to use 
> sqlalchemy's ORM features.

ORM features should work without problems but you'll have to use the 'eager'
query mode everytime since retrieving stuff lazily means running queries for
attribute access and this is what you want to avoid for blocking reasons.

If you use fetchall() and the eager query mode for the ORM then SQLAlchemy
works as well (if not better) than other solutions. I save Axiom from this
because it has a particular attention to integration with Twisted (like
powerups and so on).

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060117/feb8deb1/attachment.sig>

From mary-twisted at puzzling.org  Tue Jan 17 13:51:23 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 18 Jan 2006 07:51:23 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
Message-ID: <20060117205123.GF6785@sourdust.home.puzzling.org>

On Tue, Jan 17, 2006, Moof wrote:
> On another note, a wealth of explanations, normally for small areas of
> twisted, are given out on the IRC channel and the mailing lists. Maybe
> making it easy to post snippets from IRC that are searchable might be
> a good idea to make "pseudo-documentation". Ditto a way of referring
> to particular threads on the main mailing lists. For example, I've
> seen several threads on IRC and on the mailing lists about how the
> twisted logging system works in much more detail than the
> documentation on the site. Making it easy to link to the various
> discussions we've had might be a big help to first-time readers of the
> docs.

My immediate reaction to this was to worry about maintainability in that
these conversations, just like our docs, will likely eventually stop
being "the right way" to do things.

Repeated experience has shown that we've got very few people (at a
guess, somewhere between 2 and 5 people, comprising about 0.05% in total
of a fulltime worker by time expenditure) who are worried enough about
maintaining the docs to actually do anything about it (and some more who
are willing to point out problems). This kind of thing is hard for
editors to work with -- they have to read through a whole conversation
to find out if any bit of it is out of date, and if so, they're
essentially forced to either turn it into a document or nuke the whole
thing.

Essentially what I'm trying to do here is find a balance between:

 - having lots of up-to-date documentation, even if it's not in a hugely
   friendly form (IRC conversations, for linguistic and social reasons,
   are low bandwidth even when there's meat to the discussion), which is
   a good thing

 - having lots of documentation in an incredible array of hard-to-edit
   forms which is constantly mostly out-of-date, which is a bad thing

For various reasons, mostly idiosyncratic, I tend to be biased towards
having a smaller set of well-maintained well-edited documentation than a
larger set of poorly maintained randomed documentation. But what are
other people's experiences with projects that have particularly good or
particularly bad documentation?

-Mary



From bgranger at scu.edu  Tue Jan 17 14:04:38 2006
From: bgranger at scu.edu (Brian Granger)
Date: Tue, 17 Jan 2006 13:04:38 -0800
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117205123.GF6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<bff8eeef0601170430t5807b47dj250488c92a542b4f@mail.gmail.com>
	<20060117205123.GF6785@sourdust.home.puzzling.org>
Message-ID: <28018DD4-1B5E-4313-A4EA-0D9C1C8DE5F0@scu.edu>


On Jan 17, 2006, at 12:51 PM, Mary Gardiner wrote:

> On Tue, Jan 17, 2006, Moof wrote:
>> On another note, a wealth of explanations, normally for small  
>> areas of
>> twisted, are given out on the IRC channel and the mailing lists.  
>> Maybe
>> making it easy to post snippets from IRC that are searchable might be
>> a good idea to make "pseudo-documentation". Ditto a way of referring
>> to particular threads on the main mailing lists. For example, I've
>> seen several threads on IRC and on the mailing lists about how the
>> twisted logging system works in much more detail than the
>> documentation on the site. Making it easy to link to the various
>> discussions we've had might be a big help to first-time readers of  
>> the
>> docs.
>
> My immediate reaction to this was to worry about maintainability in  
> that
> these conversations, just like our docs, will likely eventually stop
> being "the right way" to do things.
>
> Repeated experience has shown that we've got very few people (at a
> guess, somewhere between 2 and 5 people, comprising about 0.05% in  
> total
> of a fulltime worker by time expenditure) who are worried enough about
> maintaining the docs to actually do anything about it (and some  
> more who
> are willing to point out problems). This kind of thing is hard for
> editors to work with -- they have to read through a whole conversation
> to find out if any bit of it is out of date, and if so, they're
> essentially forced to either turn it into a document or nuke the whole
> thing.
>
> Essentially what I'm trying to do here is find a balance between:
>
>  - having lots of up-to-date documentation, even if it's not in a  
> hugely
>    friendly form (IRC conversations, for linguistic and social  
> reasons,
>    are low bandwidth even when there's meat to the discussion),  
> which is
>    a good thing
>
>  - having lots of documentation in an incredible array of hard-to-edit
>    forms which is constantly mostly out-of-date, which is a bad thing
>
> For various reasons, mostly idiosyncratic, I tend to be biased towards
> having a smaller set of well-maintained well-edited documentation  
> than a
> larger set of poorly maintained randomed documentation. But what are
> other people's experiences with projects that have particularly  
> good or
> particularly bad documentation?
>

I think having a small core of well-maintained and well-edited  
documentation is most important.  Without this, users have no clear  
starting point that is reliable.  But there could also be another  
larger documentation set that is available but isn't as up to date or  
particularly well written.  But to have the larger, less reliable set  
with _no_ small set of high quality docs is really silly.

But with all that said, once someone has gotten into Twisted, they  
will end up using the source code as their documentation.  To me,  
this means that doc strings (and the API docs) should always be  
verbose, well-written and up to date.

Thanks for organizing this effort!

Brian

> -Mary
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From grimmtooth at gmail.com  Tue Jan 17 17:42:35 2006
From: grimmtooth at gmail.com (Jeff Grimmett)
Date: Tue, 17 Jan 2006 19:42:35 -0500
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <20060117115753.GD6785@sourdust.home.puzzling.org>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
Message-ID: <8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>

On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:

Unfortunately, the sprint involved less people than I'd hoped. I'd like


:: cringe ::

Out of (virtual) office on the 14th, and pretty annoyed about it, too.

I'm glad to see it's going to be an ongoing thing, though. I've looked over
the wilki and am trying to wrap my brain around the daunting subject of
"where to start?"  So much to do.  Feel free to whack me over the head with
helpful hints on where to start; lacking that, I'll figure something out :-)

--
"I never gave anybody hell. I just told the truth and the Republicans
thought it was hell."
                  - Harry S. Truman.

Best,

    Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060117/8a23f478/attachment.html>

From radeex at gmail.com  Tue Jan 17 19:23:55 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 18 Jan 2006 13:23:55 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
Message-ID: <60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>

On 1/18/06, Jeff Grimmett <grimmtooth at gmail.com> wrote:
> On 1/17/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>
>
> > Unfortunately, the sprint involved less people than I'd hoped. I'd like
>
> :: cringe ::
>

Braindump:

I think that "Doc Reviews" wasn't a very good topic for a sprint. It's
something that you basically do by yourself, and sprints are all about
collaboration. I think we should constantly be encouraging
documentation reviews, and then act on them for sprints.

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From paul-lists at perforge.com  Tue Jan 17 19:34:11 2006
From: paul-lists at perforge.com (Paul G)
Date: Tue, 17 Jan 2006 21:34:11 -0500
Subject: [Twisted-Python] SQL Abstraction Layer
References: <20060117133552.26200.1054923465.divmod.quotient.1423@ohm><151c01c61b6e$1e3acb80$6402a8c0@dcore>
	<20060117164704.GA335@divmod.com>
Message-ID: <174e01c61bd7$b0fb36d0$6402a8c0@dcore>


----- Original Message ----- 
From: "Valentino Volonghi aka Dialtone" <dialtone at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Tuesday, January 17, 2006 11:47 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer


On Tue, Jan 17, 2006 at 08:58:36AM -0500, Paul G wrote:
>> what would help, i think, is some documentation/examples describing how
>> this can be achieved with specific implementations. there's no reason 
>> this
>> has to be in the official twisted documentation or written by twisted
>> folks, necessarily, it would be good for it to just exist ;) dialtone's
>> italian post shows the minimalistic example, but as he (through the
>> translation) states, it probably won't be anywhere near as simple to use
>> sqlalchemy's ORM features.

> ORM features should work without problems but you'll have to use the 
> 'eager'
> query mode everytime since retrieving stuff lazily means running queries 
> for
> attribute access and this is what you want to avoid for blocking reasons.

correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy accessors 
which implement this lazy load when attributes are accessed to run their 
queries with deferToThread() would remove this problem, would it not? more 
generally speaking, if you're not going to do explicit deferToThread()s in 
your code (and avoid all attribute access), but rather, say, insert them 
into the appropriate point in sqlalchemy (sqlengine seems ro tbe the right 
place, or just a wrapper around the dbapi module), would this not handle the 
issue as well? am i asking the wrong person/on the wrong list? ;]

-p 




From mary-twisted at puzzling.org  Tue Jan 17 20:27:35 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Wed, 18 Jan 2006 14:27:35 +1100
Subject: [Twisted-Python] Documentation virtual sprint, TODAY,
	Sat 14th January
In-Reply-To: <60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>
References: <20060114002434.GJ6454@sourdust.home.puzzling.org>
	<20060117115753.GD6785@sourdust.home.puzzling.org>
	<8f4623fb0601171642s354cd429s64da2b95f47c2d5e@mail.gmail.com>
	<60ed19d40601171823q44cbe212g46ec657c71c20f08@mail.gmail.com>
Message-ID: <20060118032735.GH17972@home.puzzling.org>

On Wed, Jan 18, 2006, Christopher Armstrong wrote:
> I think that "Doc Reviews" wasn't a very good topic for a sprint. It's
> something that you basically do by yourself, and sprints are all about
> collaboration. I think we should constantly be encouraging
> documentation reviews, and then act on them for sprints.

I'm not totally sure whether there's any kind of magic bullet when it
comes to working on the docs -- even collaboration! And I'm not sure
that people are any more likely to do the reviews when there's not even
a sprint to prompt them.

However, whereever possible people who want to promote this should
encourage reviews, and we'll see if they've built up in number enough
for a sprint in a month or two.

-Mary



From foom at fuhm.net  Tue Jan 17 23:00:05 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 18 Jan 2006 00:00:05 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1Ez6MX-0002hN-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-11 06:00:01.820000:
 Bugs opened: 12   Bugs closed: 3   Total open bugs: 533 (+9)
  Urgent: 9 (+2)
  Bug: 254 (+5)
  Feature: 182 (+1)
  Wish: 88 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial misreports pyunit test names  (6 hours ago)
       http://twistedmatrix.com/bugs/issue1425 opened by itamarst

[CORE] Running 'setup.py all install' inside TwistedSumo-2005-11-06 fails to install subprojects  (5 days ago)
       http://twistedmatrix.com/bugs/issue1418 opened by bdash

                    ==== Bug ====
File inherrits from Resource class, which exports too much API  (yesterday)
       http://twistedmatrix.com/bugs/issue1423 opened by wsanchez

[TRIAL] TypeError in trial  (yesterday)
       http://twistedmatrix.com/bugs/issue1422 opened by zooko

[WEBSITE] 404 from Main Page  (5 days ago)
       http://twistedmatrix.com/bugs/issue1419 opened by TimothyFitz

[MAIL] [imap4] Literals need not to be preceeded by space  (5 days ago)
       http://twistedmatrix.com/bugs/issue1417 opened by jojo

[CORE, DOCUMENTATION, TRIAL] trial docs suggest obsolete timeout idiom  (yesterday)
       http://twistedmatrix.com/bugs/issue1420 opened by zooko

                    ==== Feature ====
[WORDS] Enhanced lineRate throttling in twisted.words.protocols.irc.IRCClient  (yesterday)
CLOSED http://twistedmatrix.com/bugs/issue1424 opened by Tuxedo

[DEFERRED] patch: more detailed Defer.__str__()  (yesterday)
       http://twistedmatrix.com/bugs/issue1421 opened by zooko

                    ==== Wish ====
IRCClient callbacks suggestion  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1416 opened by urago

IRCClient callbacks suggestion  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1415 opened by urago

[WORDS] IRCClient.userJoined() argument list  (6 days ago)
       http://twistedmatrix.com/bugs/issue1414 opened by urago

Bugs Closed
______________________
                    ==== Feature ====
[WORDS] Enhanced lineRate throttling in twisted.words.protocols.irc.IRCClient  (yesterday)
       http://twistedmatrix.com/bugs/issue1424 opened by Tuxedo, closed by exarkun

                    ==== Wish ====
IRCClient callbacks suggestion  (6 days ago)
       http://twistedmatrix.com/bugs/issue1416 opened by urago, closed by exarkun

IRCClient callbacks suggestion  (6 days ago)
       http://twistedmatrix.com/bugs/issue1415 opened by urago, closed by exarkun




From dialtone at divmod.com  Wed Jan 18 03:28:35 2006
From: dialtone at divmod.com (Valentino Volonghi aka Dialtone)
Date: Wed, 18 Jan 2006 11:28:35 +0100
Subject: [Twisted-Python] SQL Abstraction Layer
In-Reply-To: <174e01c61bd7$b0fb36d0$6402a8c0@dcore>
References: <20060117164704.GA335@divmod.com>
	<174e01c61bd7$b0fb36d0$6402a8c0@dcore>
Message-ID: <20060118102835.GF335@divmod.com>

On Tue, Jan 17, 2006 at 09:34:11PM -0500, Paul G wrote:
> correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy 
> accessors which implement this lazy load when attributes are accessed to 
> run their queries with deferToThread() would remove this problem, would it 
> not? more generally speaking, if you're not going to do explicit 
> deferToThread()s in your code (and avoid all attribute access), but rather, 
> say, insert them into the appropriate point in sqlalchemy (sqlengine seems 
> ro tbe the right place, or just a wrapper around the dbapi module), would 
> this not handle the issue as well? am i asking the wrong person/on the 
> wrong list? ;]

I don't think it's the right approach to patch sqlalchemy to run attribute
access in a thread. You would still get a deferred from an attribute access
and this is pretty hugly to handle.

Just using the eager mode would be perfect, the reason why I don't believe
that much in lazy queries is that you will end up using all the information,
otherwise it's better to query without using the ORM.

Currently SQLAlchemy is so good because it doesn't try to be clever but rather
only exposes the primitives and tries hard to be thread safe so that people
will be free to use it in the best way they want.

-- 
Valentino Volonghi aka Dialtone
Now Running MacOSX 10.4
Blog: http://vvolonghi.blogspot.com
http://weever.berlios.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 186 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060118/cbba7346/attachment.sig>

From paul-lists at perforge.com  Wed Jan 18 16:25:17 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 18:25:17 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python] SQL
	Abstraction Layer_
References: <20060117164704.GA335@divmod.com><174e01c61bd7$b0fb36d0$6402a8c0@dcore>
	<20060118102835.GF335@divmod.com>
Message-ID: <190701c61c86$820a0d10$6402a8c0@dcore>


----- Original Message ----- 
From: "Valentino Volonghi aka Dialtone" <dialtone at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 5:28 AM
Subject: Re: [Twisted-Python] SQL Abstraction Layer


On Tue, Jan 17, 2006 at 09:34:11PM -0500, Paul G wrote:
>> correct me if i'm wrong, but hacking/monkeypatching the sqlalchemy
>> accessors which implement this lazy load when attributes are accessed to
>> run their queries with deferToThread() would remove this problem, would 
>> it
>> not? more generally speaking, if you're not going to do explicit
>> deferToThread()s in your code (and avoid all attribute access), but 
>> rather,
>> say, insert them into the appropriate point in sqlalchemy (sqlengine 
>> seems
>> ro tbe the right place, or just a wrapper around the dbapi module), would
>> this not handle the issue as well? am i asking the wrong person/on the
>> wrong list? ;]

>I don't think it's the right approach to patch sqlalchemy to run attribute
>access in a thread. You would still get a deferred from an attribute access
>and this is pretty hugly to handle.

i'm not sure we're on the same page here. alternatively, i don't agree with 
your reasoning. if we use eager mode, objects get created when we call the 
mapper. in lazy mode, they can appear as a result of attribute access. to 
me, the fact that the two are different are a language syntax issue - 
semantically, i see both as a message to a slot on an object.  this is, 
iirc, how python allows sqlalchemy to intercept with attribute accessors as 
well ;)

to me, integrating sqlalchemy into twisted would ideally work in a way where 
all sqlalchemy api access is async. as i stated in my original mail, i 
currently believe that this could be possible to achieve by making all of 
sqlalchemy's calls into the dbapi module async with deferToThread(). if one 
does this, and it doesn't break something arcane in sqlalchemy, we shouldn't 
have to worry about deferreds in the client code. is there a reason why this 
wouldn't work or why it shouldn't be done that i am missing?

you could advance the argument that not having a deferToThread() in the 
client code would obscure the fact that the current 'cooperative thread' is 
yielding execution at that point, but that can be elucidated in the comments 
should one have a need to do that, while keeping the code much cleaner.

> Just using the eager mode would be perfect, the reason why I don't believe
> that much in lazy queries is that you will end up using all the 
> information,
> otherwise it's better to query without using the ORM.

there are plenty of examples where lazy loading is useful in an ORM context 
and where you wouldn't want to do your own queries. in fact, i don't see why 
wanting to control loading behaviour would make the advantages of an ORM 
suddenly go away - to me, the principal advantage is making the code cleaner 
and, in the common case, masking the stuff that's going on under the hood. 
this becomes even more important, imho, when you want to lazy load things - 
not less.

>Currently SQLAlchemy is so good because it doesn't try to be clever but 
>rather
>only exposes the primitives and tries hard to be thread safe so that people
>will be free to use it in the best way they want.

full agreement here. i love the way it's designed - simple, gives you access 
to the various levels of functionality independent of the others and leaves 
you free to use it however works best for you at any given point in 
time/code. it's one of the best ORMs, design-wise, that i've seen; the only 
thing that's missing is some docs for the UnitOfWork stuff.

-p 




From exarkun at divmod.com  Wed Jan 18 17:10:54 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 19:10:54 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]
	SQL Abstraction Layer_
In-Reply-To: <190701c61c86$820a0d10$6402a8c0@dcore>
Message-ID: <20060119001054.2697.677692258.divmod.quotient.82@ohm>

On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>to me, integrating sqlalchemy into twisted would ideally work in a way where 
>all sqlalchemy api access is async. as i stated in my original mail, i 
>currently believe that this could be possible to achieve by making all of 
>sqlalchemy's calls into the dbapi module async with deferToThread(). if one 
>does this, and it doesn't break something arcane in sqlalchemy, we shouldn't 
>have to worry about deferreds in the client code. is there a reason why this 
>wouldn't work or why it shouldn't be done that i am missing?

I think you are missing the fact that if you do this, attribute access 
will result in a Deferred, not the value of the attribute from the 
database, which is not available yet. 

So client code will have to deal with Deferreds, and in an extremely 
unusual manner - every attribute lookup will return a new Deferred.

Jean-Paul



From paul-lists at perforge.com  Wed Jan 18 17:31:20 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 19:31:20 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
References: <20060119001054.2697.677692258.divmod.quotient.82@ohm>
Message-ID: <198c01c61c8f$c6d35ec0$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 7:10 PM
Subject: Re: making sqlalchemy work with twisted (was Re: 
[Twisted-Python]SQL Abstraction Layer_


> On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>where all sqlalchemy api access is async. as i stated in my original mail, 
>>i currently believe that this could be possible to achieve by making all 
>>of sqlalchemy's calls into the dbapi module async with deferToThread(). if 
>>one does this, and it doesn't break something arcane in sqlalchemy, we 
>>shouldn't have to worry about deferreds in the client code. is there a 
>>reason why this wouldn't work or why it shouldn't be done that i am 
>>missing?
>
> I think you are missing the fact that if you do this, attribute access 
> will result in a Deferred, not the value of the attribute from the 
> database, which is not available yet.
> So client code will have to deal with Deferreds, and in an extremely 
> unusual manner - every attribute lookup will return a new Deferred.

this would be very much like the 'future' in the actor-based concurrency 
model, so nothing terribly unusual. however, no, this is not what i want to 
do. maybe my (bad) ascii art will help:

normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
synchronous db query to dbapi -> return to sqlengine -> return to 
accessor -> return attribute

new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
async call into dbapi with deferToThread-> control returned to reactor -> 
another coop thread gets control

... async dbapi result handler ->  return to sqlengine -> return to 
accessor -> return attribute

did i explain what i mean well?

-p 




From exarkun at divmod.com  Wed Jan 18 17:55:32 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 19:55:32 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
In-Reply-To: <198c01c61c8f$c6d35ec0$6402a8c0@dcore>
Message-ID: <20060119005532.2697.703138415.divmod.quotient.95@ohm>

On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>----- Original Message ----- From: "Jean-Paul Calderone" 
><exarkun at divmod.com>
>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>Sent: Wednesday, January 18, 2006 7:10 PM
>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>Python]SQL Abstraction Layer_
>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> wrote:
>>>
>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>where all sqlalchemy api access is async. as i stated in my original mail, 
>>>i currently believe that this could be possible to achieve by making all 
>>>of sqlalchemy's calls into the dbapi module async with deferToThread(). if 
>>>one does this, and it doesn't break something arcane in sqlalchemy, we 
>>>shouldn't have to worry about deferreds in the client code. is there a 
>>>reason why this wouldn't work or why it shouldn't be done that i am 
>>>missing?
>>
>>I think you are missing the fact that if you do this, attribute access will 
>>result in a Deferred, not the value of the attribute from the database, 
>>which is not available yet.
>>So client code will have to deal with Deferreds, and in an extremely 
>>unusual manner - every attribute lookup will return a new Deferred.
>
>this would be very much like the 'future' in the actor-based concurrency 
>model, so nothing terribly unusual. however, no, this is not what i want to 
>do. maybe my (bad) ascii art will help:
>
>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>synchronous db query to dbapi -> return to sqlengine -> return to accessor 
>-> return attribute
>
>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>async call into dbapi with deferToThread-> control returned to reactor -> 
>another coop thread gets control
>
>... async dbapi result handler ->  return to sqlengine -> return to accessor 
>-> return attribute
>
>did i explain what i mean well?

Yes.  Unfortunately, this cannot be implemented in CPython without going to extreme lengths.  Also, there is some discussion among the core Twisted developers whether it even represents a good idea at all.  I think the split is currently something like 4 to 1 against.  If you look in either my blog or glyph's blog for "concurrency" you will find some exposition on the matter.

Jean-Paul



From glyph at divmod.com  Wed Jan 18 18:59:58 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 18 Jan 2006 20:59:58 -0500
Subject: making sqlalchemy work with twisted (was Re: [Twisted-Python]SQL
	Abstraction Layer_
In-Reply-To: <20060119005532.2697.703138415.divmod.quotient.95@ohm>
Message-ID: <20060119015958.2697.883242103.divmod.quotient.113@ohm>



On Wed, 18 Jan 2006 19:55:32 -0500, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Yes.  Unfortunately, this cannot be implemented in CPython without going to 
>extreme lengths.  Also, there is some discussion among the core Twisted 
>developers whether it even represents a good idea at all.  I think the split 
>is currently something like 4 to 1 against.  If you look in either my blog 
>or glyph's blog for "concurrency" you will find some exposition on the 
>matter.

Actually the thing you want to look for in my blog is "Santa Claus".  The best post on this topic is "Knowing Santa Claus is Fake Doesn't Ruin Christmas", at http://www.livejournal.com/users/glyf/40037.html

It should probably be on twistedmatrix.com's front page or something.



From paul-lists at perforge.com  Wed Jan 18 19:15:28 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 21:15:28 -0500
Subject: making sqlalchemy work with twisted (was Re:
	[Twisted-Python]SQLAbstraction Layer_
References: <20060119005532.2697.703138415.divmod.quotient.95@ohm>
Message-ID: <19cf01c61c9e$519c3500$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 7:55 PM
Subject: Re: making sqlalchemy work with twisted (was Re: 
[Twisted-Python]SQLAbstraction Layer_


> On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>----- Original Message ----- From: "Jean-Paul Calderone" 
>><exarkun at divmod.com>
>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>Sent: Wednesday, January 18, 2006 7:10 PM
>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>Python]SQL Abstraction Layer_
>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>wrote:
>>>>
>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>mail, i currently believe that this could be possible to achieve by 
>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>deferToThread(). if one does this, and it doesn't break something arcane 
>>>>in sqlalchemy, we shouldn't have to worry about deferreds in the client 
>>>>code. is there a reason why this wouldn't work or why it shouldn't be 
>>>>done that i am missing?
>>>
>>>I think you are missing the fact that if you do this, attribute access 
>>>will result in a Deferred, not the value of the attribute from the 
>>>database, which is not available yet.
>>>So client code will have to deal with Deferreds, and in an extremely 
>>>unusual manner - every attribute lookup will return a new Deferred.
>>
>>this would be very much like the 'future' in the actor-based concurrency 
>>model, so nothing terribly unusual. however, no, this is not what i want 
>>to do. maybe my (bad) ascii art will help:
>>
>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>synchronous db query to dbapi -> return to sqlengine -> return to 
>>accessor -> return attribute
>>
>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>async call into dbapi with deferToThread-> control returned to reactor -> 
>>another coop thread gets control
>>
>>... async dbapi result handler ->  return to sqlengine -> return to 
>>accessor -> return attribute
>>
>>did i explain what i mean well?
>
> Yes.  Unfortunately, this cannot be implemented in CPython without going 
> to extreme lengths.

it just occurred to me what i was missing. namely, while the dbapi wrapper 
can deferToThread() for calls into the real dbapi module, there's no 
good/obvious way to yield control to the reactor and have the deferred's 
callback return execution to the callsite which invoked the dbapi wrapper in 
the first place. is this what you are alluding to?

if so, i suspect there might be some generator magic which can make this 
work. is this what you meant by 'extreme lengths'?

>  Also, there is some discussion among the core Twisted developers whether 
> it even represents a good idea at all.  I think the split is currently 
> something like 4 to 1 against.  If you look in either my blog or glyph's 
> blog for "concurrency" you will find some exposition on the matter.

there are indeed very good arguments for not doing this in the general case. 
i believe the decision to make pb users be aware that the objects are remote 
follows from that. i've found that this makes using pb easier and apps using 
it easier to design (from a performance risk perspective) and easier to 
debug, as well as more robust. i wouldn't argue for making attribute access 
implicitly do asynchronous things in the general case, or in most cases 
even.

however, in the sqlalchemy case, at least for my purposes, it would make 
sense to do it to make the integration more seamless.

-p 




From exarkun at divmod.com  Wed Jan 18 20:32:28 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 18 Jan 2006 22:32:28 -0500
Subject: making sqlalchemy work with twisted (was Re:
	[Twisted-Python]SQLAbstraction Layer_
In-Reply-To: <19cf01c61c9e$519c3500$6402a8c0@dcore>
Message-ID: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>

On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>----- Original Message ----- From: "Jean-Paul Calderone" 
><exarkun at divmod.com>
>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>Sent: Wednesday, January 18, 2006 7:55 PM
>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>Python]SQLAbstraction Layer_
>>On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> wrote:
>>>
>>>----- Original Message ----- From: "Jean-Paul Calderone" 
>>><exarkun at divmod.com>
>>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>>Sent: Wednesday, January 18, 2006 7:10 PM
>>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>>Python]SQL Abstraction Layer_
>>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>>wrote:
>>>>>
>>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>>mail, i currently believe that this could be possible to achieve by 
>>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>>deferToThread(). if one does this, and it doesn't break something arcane 
>>>>>in sqlalchemy, we shouldn't have to worry about deferreds in the client 
>>>>>code. is there a reason why this wouldn't work or why it shouldn't be 
>>>>>done that i am missing?
>>>>
>>>>I think you are missing the fact that if you do this, attribute access 
>>>>will result in a Deferred, not the value of the attribute from the 
>>>>database, which is not available yet.
>>>>So client code will have to deal with Deferreds, and in an extremely 
>>>>unusual manner - every attribute lookup will return a new Deferred.
>>>
>>>this would be very much like the 'future' in the actor-based concurrency 
>>>model, so nothing terribly unusual. however, no, this is not what i want 
>>>to do. maybe my (bad) ascii art will help:
>>>
>>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>synchronous db query to dbapi -> return to sqlengine -> return to accessor 
>>>-> return attribute
>>>
>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>async call into dbapi with deferToThread-> control returned to reactor -> 
>>>another coop thread gets control
>>>
>>>... async dbapi result handler ->  return to sqlengine -> return to 
>>>accessor -> return attribute
>>>
>>>did i explain what i mean well?
>>
>>Yes.  Unfortunately, this cannot be implemented in CPython without going to 
>>extreme lengths.
>
>it just occurred to me what i was missing. namely, while the dbapi wrapper 
>can deferToThread() for calls into the real dbapi module, there's no 
>good/obvious way to yield control to the reactor and have the deferred's 
>callback return execution to the callsite which invoked the dbapi wrapper in 
>the first place. is this what you are alluding to?
>
>if so, i suspect there might be some generator magic which can make this 
>work. is this what you meant by 'extreme lengths'?

No, generators are easy.  Extreme lengths are extension modules that move pieces of the C call stack around.  See Stackless Python and the greenlets module.

>>  Also, there is some discussion among the core Twisted developers whether 
>>it even represents a good idea at all.  I think the split is currently 
>>something like 4 to 1 against.  If you look in either my blog or glyph's 
>>blog for "concurrency" you will find some exposition on the matter.
>
>there are indeed very good arguments for not doing this in the general case. 
>i believe the decision to make pb users be aware that the objects are remote 
>follows from that. i've found that this makes using pb easier and apps using 
>it easier to design (from a performance risk perspective) and easier to 
>debug, as well as more robust. i wouldn't argue for making attribute access 
>implicitly do asynchronous things in the general case, or in most cases 
>even.
>
>however, in the sqlalchemy case, at least for my purposes, it would make 
>sense to do it to make the integration more seamless.
>

You may have more reasons to claim this than you have presented, but what you have presented reduces to "it is a good idea in this case because I think it is a good idea".

I still think it's a bad idea :)

Jean-Paul



From paul-lists at perforge.com  Wed Jan 18 20:55:43 2006
From: paul-lists at perforge.com (Paul G)
Date: Wed, 18 Jan 2006 22:55:43 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
References: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>
Message-ID: <19eb01c61cac$398b7030$6402a8c0@dcore>


----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Wednesday, January 18, 2006 10:32 PM
Subject: Re: making sqlalchemy work with twisted (was 
Re:[Twisted-Python]SQLAbstraction Layer_


> On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com> 
> wrote:
>>
>>----- Original Message ----- From: "Jean-Paul Calderone" 
>><exarkun at divmod.com>
>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>Sent: Wednesday, January 18, 2006 7:55 PM
>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>Python]SQLAbstraction Layer_
>>>On Wed, 18 Jan 2006 19:31:20 -0500, Paul G <paul-lists at perforge.com> 
>>>wrote:
>>>>
>>>>----- Original Message ----- From: "Jean-Paul Calderone" 
>>>><exarkun at divmod.com>
>>>>To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
>>>>Sent: Wednesday, January 18, 2006 7:10 PM
>>>>Subject: Re: making sqlalchemy work with twisted (was Re: [Twisted- 
>>>>Python]SQL Abstraction Layer_
>>>>>On Wed, 18 Jan 2006 18:25:17 -0500, Paul G <paul-lists at perforge.com> 
>>>>>wrote:
>>>>>>
>>>>>>to me, integrating sqlalchemy into twisted would ideally work in a way 
>>>>>>where all sqlalchemy api access is async. as i stated in my original 
>>>>>>mail, i currently believe that this could be possible to achieve by 
>>>>>>making all of sqlalchemy's calls into the dbapi module async with 
>>>>>>deferToThread(). if one does this, and it doesn't break something 
>>>>>>arcane in sqlalchemy, we shouldn't have to worry about deferreds in 
>>>>>>the client code. is there a reason why this wouldn't work or why it 
>>>>>>shouldn't be done that i am missing?
>>>>>
>>>>>I think you are missing the fact that if you do this, attribute access 
>>>>>will result in a Deferred, not the value of the attribute from the 
>>>>>database, which is not available yet.
>>>>>So client code will have to deal with Deferreds, and in an extremely 
>>>>>unusual manner - every attribute lookup will return a new Deferred.
>>>>
>>>>this would be very much like the 'future' in the actor-based concurrency 
>>>>model, so nothing terribly unusual. however, no, this is not what i want 
>>>>to do. maybe my (bad) ascii art will help:
>>>>
>>>>normal: attribute access -> sqlalchemy accessor -> sqlalchemy 
>>>>sqlengine -> synchronous db query to dbapi -> return to sqlengine -> 
>>>>return to accessor -> return attribute
>>>>
>>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy sqlengine -> 
>>>>async call into dbapi with deferToThread-> control returned to 
>>>>reactor -> another coop thread gets control
>>>>
>>>>... async dbapi result handler ->  return to sqlengine -> return to 
>>>>accessor -> return attribute
>>>>
>>>>did i explain what i mean well?
>>>
>>>Yes.  Unfortunately, this cannot be implemented in CPython without going 
>>>to extreme lengths.
>>
>>it just occurred to me what i was missing. namely, while the dbapi wrapper 
>>can deferToThread() for calls into the real dbapi module, there's no 
>>good/obvious way to yield control to the reactor and have the deferred's 
>>callback return execution to the callsite which invoked the dbapi wrapper 
>>in the first place. is this what you are alluding to?
>>
>>if so, i suspect there might be some generator magic which can make this 
>>work. is this what you meant by 'extreme lengths'?
>
> No, generators are easy.  Extreme lengths are extension modules that move 
> pieces of the C call stack around.  See Stackless Python and the > 
> greenlets module.

yeah, i've looked at those in the past. are you saying they are the only way 
to do this and generators won't work?

>
>>>  Also, there is some discussion among the core Twisted developers 
>>> whether it even represents a good idea at all.  I think the split is 
>>> currently something like 4 to 1 against.  If you look in either my blog 
>>> or glyph's blog for "concurrency" you will find some exposition on the 
>>> matter.
>>
>>there are indeed very good arguments for not doing this in the general 
>>case. i believe the decision to make pb users be aware that the objects 
>>are remote follows from that. i've found that this makes using pb easier 
>>and apps using it easier to design (from a performance risk perspective) 
>>and easier to debug, as well as more robust. i wouldn't argue for making 
>>attribute access implicitly do asynchronous things in the general case, or 
>>in most cases even.
>>
>>however, in the sqlalchemy case, at least for my purposes, it would make 
>>sense to do it to make the integration more seamless.
>>
>
> You may have more reasons to claim this than you have presented, but what 
> you have presented reduces to "it is a good idea in this case > because I 
> think it is a good idea".

nail. head. ;] in short, i trust myself to know that in those cases, an 
async call happens. this wouldn't be good in a general use framework, but 
for an internal product, the cleanliness of the code (and ability to do lazy 
loading) tip the scale, imo.

so, outside of greenlets (reportedly, they make weird things happen from 
time to time, which isn't acceptable) and stackless (sexy, but 
unsupported/not actively developed/does it still work/will it stop 
working?), is there a way to get this done?

-p 




From exarkun at divmod.com  Wed Jan 18 22:03:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 19 Jan 2006 00:03:53 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
In-Reply-To: <19eb01c61cac$398b7030$6402a8c0@dcore>
Message-ID: <20060119050353.2697.1030108747.divmod.quotient.157@ohm>

On Wed, 18 Jan 2006 22:55:43 -0500, Paul G <paul-lists at perforge.com> wrote:
>
>so, outside of greenlets (reportedly, they make weird things happen from 
>time to time, which isn't acceptable) and stackless (sexy, but 
>unsupported/not actively developed/does it still work/will it stop 
>working?), is there a way to get this done?

Weird things, you say?  I can't imagine...

I'm sure you could find or write a solution which is isomorphic to greenlets, but that isn't greenlets.  Or, wait, could you?  I think the conclusion to this thread belongs in alt.coding.philosophy.

Jean-Paul



From matt at pollenation.net  Thu Jan 19 05:56:53 2006
From: matt at pollenation.net (Matt Goodall)
Date: Thu, 19 Jan 2006 12:56:53 +0000
Subject: [Twisted-Python] Service dependencies
Message-ID: <43CF8C95.4070008@pollenation.net>

Hi,

I have a couple of services. The second is dependent on the first being
fully initialised before the second gets set up.

I thought that the order of Service startup was typically handled by
organising services in a hierarchy, and that the startup of the
hierarchy understood deferreds. I was wrong - service.Application is a
MultiService and only understands deferreds in stopService.

There's a DependentMultiService class in twisted.internet.app but that
entire module has been deprecated.

Is there a reason why the MultiService does not support deferreds in
startService?

Is there a reason that DependentMultiService was not moved across to the
twisted.application package?

In other words, what is the recommended way of starting services in the
correct order, including waiting for them to get initialised fully,
these days?

Thanks.

- Matt

-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From eric.faurot at gmail.com  Thu Jan 19 06:32:13 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 19 Jan 2006 14:32:13 +0100
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <43CF8C95.4070008@pollenation.net>
References: <43CF8C95.4070008@pollenation.net>
Message-ID: <e012d6b50601190532t1a248630l9be8979bd4205e85@mail.gmail.com>

On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
> Hi,

> In other words, what is the recommended way of starting services in the
> correct order, including waiting for them to get initialised fully,
> these days?

I'd say if service B relies on servcie A, then B.startService
must explicitely call A.startService(). Of course, it requires that
A.startService
must be a noop if called more than once. Now for deferred, I'm not 100% sure,
but I don't think there is something very wrong returning a deferred in
startService.

Eric.

From paul-lists at perforge.com  Thu Jan 19 06:48:49 2006
From: paul-lists at perforge.com (Paul G)
Date: Thu, 19 Jan 2006 08:48:49 -0500
Subject: making sqlalchemy work with twisted (was
	Re:[Twisted-Python]SQLAbstraction Layer_
References: <20060119033228.2697.1477714784.divmod.quotient.136@ohm>
	<19eb01c61cac$398b7030$6402a8c0@dcore>
	<200601191301.34396.Michaels@rd.bbc.co.uk>
Message-ID: <1aea01c61cff$15483610$6402a8c0@dcore>


----- Original Message ----- 
From: "Michael Sparks" <Michaels at rd.bbc.co.uk>
To: <twisted-python at twistedmatrix.com>
Cc: "Paul G" <paul-lists at perforge.com>
Sent: Thursday, January 19, 2006 8:01 AM
Subject: Re: making sqlalchemy work with twisted (was 
Re:[Twisted-Python]SQLAbstraction Layer_


> On Thursday 19 Jan 2006 03:55, Paul G wrote:
>> ----- Original Message -----
>> From: "Jean-Paul Calderone" <exarkun at divmod.com>
>> > On Wed, 18 Jan 2006 21:15:28 -0500, Paul G <paul-lists at perforge.com>
>> >><exarkun at divmod.com>
>> >>>>new: attribute access -> sqlalchemy accessor -> sqlalchemy 
>> >>>>sqlengine ->
>> >>>>async call into dbapi with deferToThread-> control returned to
>> >>>>reactor -> another coop thread gets control
>> >>>>... async dbapi result handler ->  return to sqlengine -> return to
>> >>>>accessor -> return attribute
> ...
>> >>>Unfortunately, this cannot be implemented in CPython without going
>> >>>to extreme lengths.
> ...
>> > Extreme lengths are extension modules that move
>> > pieces of the C call stack around.  See Stackless Python and the >
>> > greenlets module.
>>
>> yeah, i've looked at those in the past. are you saying they are the only
>> way to do this and generators won't work?
>
> Generators are really only single layer, unless you start manually 
> chaining
> them which requires changing all the other bits of code.

i'm familiar with what generators are/do ;) my question was really meant to 
ask: have you already tried/thought in detail about something similar with 
generators and found that it can be done, can't be done or can't be done 
cleanly enough to make any sense.

> You want to suspend
> execution deeper in the call stack which means you'd need Greenlets or
> Stackless (or *really* sod about nastily with threads...).

well, the problem with generators is that there's no way to yield several 
frames up/down (depending on your arch ;) the stack. so you're talking 
trampolines and possibly nasty stack growth if you have to recurse too much 
before you can unwind etc. i've started hacking this up, but it's giving me 
a headache.

> At that point
> you're into whether you think that's a good idea or not.
>
> I don't know other people's feelings on the matter, but to me it just 
> feels
> wrong in a system that has clear handoff generally speaking to have some
> very hidden handoff as well. At minimum it implies an understanding burden
> on the maintainer. At worst you now have the potential to *really* screw
> things up.

i'm not arguing for this to be done in twisted, merely seeing if it makes 
sense to do locally.

-p 




From exarkun at divmod.com  Thu Jan 19 08:29:31 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 19 Jan 2006 10:29:31 -0500
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <e012d6b50601190532t1a248630l9be8979bd4205e85@mail.gmail.com>
Message-ID: <20060119152931.2697.2120353815.divmod.quotient.238@ohm>

On Thu, 19 Jan 2006 14:32:13 +0100, Eric Faurot <eric.faurot at gmail.com> wrote:
>On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
>> Hi,
>
>> In other words, what is the recommended way of starting services in the
>> correct order, including waiting for them to get initialised fully,
>> these days?
>
>I'd say if service B relies on servcie A, then B.startService
>must explicitely call A.startService().

Why?

>Of course, it requires that A.startService must be a noop if called more 
>than once.

Not a very common property of startService().  Few, if any, of the services Twisted provides offer this property.

>Now for deferred, I'm not 100% sure, but I don't think there is something 
>very wrong returning a deferred in startService.

Well, you won't get a spanking for it.  Nothing pays any attention to the return value of startService, though.

privilegedStartService is run before the reactor has started, so there's no way it could support Deferreds.

startService could probably be modified to support Deferreds.  MultiService is pretty lax about.... everything.  I think this is just one of many possible improvements that could be made.

Jean-Paul



From leszczynscy at yahoo.com  Thu Jan 19 09:25:07 2006
From: leszczynscy at yahoo.com (Andrzej Leszczynski)
Date: Thu, 19 Jan 2006 08:25:07 -0800 (PST)
Subject: [Twisted-Python] twisted.protocols.dns NAPTR extension question
Message-ID: <20060119162507.41275.qmail@web30012.mail.mud.yahoo.com>

Hi,

I have a question regarding extension
twisted.protocols.dns by NAPTR DNS Resource Record
(RFC 2915). Adding the new class Record_NAPTR and the
NAPTR (35) constant is trivial however when it comes
to decoding the names "flags", "service", "regexp" and
"replacement" I realized that "class Name" attempts to
read all the names in the byte stream and concatenate
them together with "." used as a separator.

I work on my copy of dns.py so I hacked it up a little
and the code looks like here:

    def decode(self,strio,length=None):
       
self.order=struct.unpack('!H',readPrecisely(strio,2))[0]
       
self.preference=struct.unpack('!H',readPrecisely(strio,2))[0]
        self.flags=Name()
        self.flags.decode(strio,concatenate=False)
        self.service=Name()
        self.service.decode(strio,concatenate=False)
        self.regexp=Name()
        self.regexp.decode(strio,concatenate=False)
        self.replacement=Name()
       
self.replacement.decode(strio,concatenate=False)

The new function "Name.decode" argument was added and
defaulted to True in the definition. I wanted to avoid
of using Name and then doing the split on its value
because there are many cases that "." is in the
content of those four names: "flags", "service",
"regexp" and "replacement". 

And the questions:
	-what is the reason in the "Name.decode" to
concatenate names, does any of RRs actually uses that
feature?
	-what would be recommended why to implement NAPTR?
	-I wish to avoid maintaining my own copy of dns.py,
is there any chance/plans that NAPTR would be
supported?


Thanks in advance,
AndyL

In theory, practice and theory are the same. In
practice, they are not.





From moof at metamoof.net  Thu Jan 19 16:16:19 2006
From: moof at metamoof.net (Moof)
Date: Fri, 20 Jan 2006 00:16:19 +0100
Subject: [Twisted-Python] Service dependencies
In-Reply-To: <43CF8C95.4070008@pollenation.net>
References: <43CF8C95.4070008@pollenation.net>
Message-ID: <bff8eeef0601191516t52c8960cy451da7dd0fefa30c@mail.gmail.com>

On 1/19/06, Matt Goodall <matt at pollenation.net> wrote:
>
> Hi,
>
> I have a couple of services. The second is dependent on the first being
> fully initialised before the second gets set up.


><snip>

In other words, what is the recommended way of starting services in the
> correct order, including waiting for them to get initialised fully,
> these days?


I actually wrote something like this today, a subclass of MultiService,
because my main service was dependant on there being no other services
running on the same machine, and I had to implement a PB client/server to
ask the other instance to shut down. This is mostly because Windows sucks,
and doesn't allow me to just do a "kill <pid>" on the old one, but gave me
an excuse to start the PB integration of my app. I just subclassed
MultiService and reimplemented startService and stopService appropriately,
not chaining my sub-service starts until I was certain I had managed to
start my own service, and not stopping my service until my sub-services had
stopped.

It's a fairly simple idiom, so it's probably pretty easy to implement
yourself, but I'm surprised a generic one hasn't been written yet. Similarly
I've had to write a new LoopingService that runs a "setup" callable before
looping the main service, and also has a "minimum wait between calls" timer
going on it. None of these have been particulalrly difficult.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060120/5a34eefe/attachment.html>

From jchiesa at cavtel.net  Thu Jan 19 21:12:11 2006
From: jchiesa at cavtel.net (Alfred Chiesa)
Date: Thu, 19 Jan 2006 23:12:11 -0500
Subject: [Twisted-Python] Twisted and SMTP Footer
Message-ID: <43D0631B.30205@cavtel.net>

Hello All! Quick question:

Can I use Twisted with an existing sendmail server to add a footer to 
every Email going through said SMTP server? Should regular old python be 
the best route?

Thanks!



From dreid at dreid.org  Fri Jan 20 00:27:12 2006
From: dreid at dreid.org (David Reid)
Date: Thu, 19 Jan 2006 23:27:12 -0800
Subject: [Twisted-Python] All night Twisted sprint @SuperHappyDevHouse.
Message-ID: <43D090D0.3010700@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

After attending several (read: all of them) SuperHappyDevHouse[1]
events, with several other Twisted developers, I've decided to organize
an official Twisted sprint for the January 28th event.  In case you're
not aware SuperHappyDevHouse is an all night Hack-a-thon organized by
Jeff Lindsay[2] and David E. Weekly[3] (of the Community Colo[4]) in the
Bay Area, CA.  It's typically filled with a lot of Web2.0 startups, (and
the companies that buy them (read: Yahoo and Google))  I'm hoping to
have a large portion of this sprint take place in meat space, but as
with all past Twisted sprints IRC and Mailing List traffic is always
appreciated.

The SuperHappyDevHouse is located at 2735 Skyfarm Drive, Hillsborough,
CA.  It's easy enough to find, Google Maps[5] knows right where it is.
Parking is kind of sparse so carpool if you can, or if you'd like to
take CalTrain we'll find someone to pick you up.  The most important
thing is to get as many Twisted developers and Fan Boys[6] in the same
place as possible.

Sprint attendees and topics will include Brian Warner working on newpb,
and David Reid (Me) working on twisted.web2 including the unreleased
client branch, and cleaning up trunk for a potential 0.2 release.

So I guess I'm really bad at this, but _anyone_ on the West Coast should
show up.  It'll be great it's a wonderful friendly atmosphere with
wonderfully smart people some great new ideas.</plug>

[1] http://superhappydevhouse.com/
[2] http://blogrium.com/
[3] http://david.weekly.org/
[4] http://communitycolo.net/
[5] http://maps.google.com/maps?q=2735+Skyfarm+Drive,+Hillsborough,+CA
[6] http://www.urbandictionary.com/define.php?term=fanboy

- -David Reid

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0JDGrsrO6aeULcgRAkYeAJ9pvjXPLHfgMW0WIV43RtCou6E7zQCeMLb1
3hdgkTL6LGK64bCxQeuKi5o=
=v1nJ
-----END PGP SIGNATURE-----



From duncan.mcgreggor at gmail.com  Fri Jan 20 22:32:36 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Fri, 20 Jan 2006 22:32:36 -0700
Subject: [Twisted-Python] Deferred Groups?
Message-ID: <139eed6a6d819d1383153b3f1d55598c@gmail.com>

I have a question about an approach I used... I'm worried that I've 
over-worked it and have over-looked a more elegant and standard 
solution.

I have the need to fire off network connections in groups. Deferreds 
added to a DeferredList don't fit the bill (because there's no control 
over all the deferreds in the list). As an example, if you wanted to 
make a whole batch of concurrent connections, but didn't want to incur 
the overhead of firing off more than 20 simultaneous connections, you'd 
split your destination hosts up into groups of 20. As a group was 
completed, a callback could fire off the next group, etc.

What's more, I didn't want to put this kind of control in a factory or 
a protocol. In my mind, that didn't seem the proper place for it...

I have some test code that generates the following output. I created a 
class that instantiates a ClientFactory instance and then manages a set 
of deferreds and deferred lists. Here's some sample output:

Entered main run() loop.
deferred #1 is connecting to adytum.us...
deferred #2 is connecting to del.icio.us...
deferred #3 is connecting to google.com...
Left main run() loop.
deferred #1 connected!
deferred #2 connected!
deferred #3 connected!
Finished with Group 1
deferred #4 is connecting to last.fm...
deferred #5 is connecting to washingtonpost.com...
deferred #6 is connecting to yahoo.com...
deferred #5 connected!
deferred #6 connected!
deferred #4 connected!
Finished with Group 2
deferred #7 is connecting to microsoft.com...
deferred #8 is connecting to amazon.com...
deferred #7 connected!
deferred #8 connected!
Finished with Group 3
Finished all groups.

Here are some pertinent parts of the code (full pasting: 
http://pastebin.adytum.us/39/1 ):

class DeferredsByGroup(object):
[...]
     def initiate(self):
         self.groups = self.splitLoad(self.hosts, self.hosts_per_group)
         # get the first group and let the callback handle the next one
         host_group = self.groups.next()
         dl = self.setupGroupDeferred(host_group)
         dl.addCallback(self.getNextGroup)
         dl.addErrback(self.noMoreGroups)

     def splitLoad(self, host_list, per_group):
         group_count, remainder = divmod(len(host_list), per_group)
         if remainder: group_count += 1
         for i in xrange(group_count):
             yield host_list[i*per_group:i*per_group+per_group]
[...]
     def getNextGroup(self, null):
         group = self.groups.next()
         dl = self.setupGroupDeferred(group)
         dl.addCallback(self.getNextGroup)
         dl.addErrback(self.noMoreGroups)

     def setupHostDeferred(self, host):
         self.host_counter += 1
         name = "deferred #%s" % self.host_counter
         f = Factory(host, name)
         d = f.deferred
         d.addCallback(self.updateData)
         return d

     def setupGroupDeferred(self, group):
         self.group_counter += 1
         # iterate through each host in the group
         deferreds = [ self.setupHostDeferred(host) for host in group ]
         # set up this group as a deferred list
         dl = defer.DeferredList(deferreds)
         dl.addCallback(self.handleGroup)
         dl.addErrback(self.handleFailure)
         return dl
[...]

And this is instantiated in the following manner:

hosts = [
         'adytum.us',
         'del.icio.us',
         'google.com',
         'last.fm',
         'washingtonpost.com',
         'yahoo.com',
         'microsoft.com',
         'amazon.com',
]
hosts_per_group = 3
runner = DeferredsByGroup(hosts, hosts_per_group)
runner.initiate()
reactor.run()




From mcfletch at rogers.com  Sat Jan 21 06:55:01 2006
From: mcfletch at rogers.com (Mike C. Fletcher)
Date: Sat, 21 Jan 2006 08:55:01 -0500
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
Message-ID: <43D23D35.2080104@rogers.com>

Duncan McGreggor wrote:

> I have a question about an approach I used... I'm worried that I've 
> over-worked it and have over-looked a more elegant and standard solution.
>
> I have the need to fire off network connections in groups. Deferreds 
> added to a DeferredList don't fit the bill (because there's no control 
> over all the deferreds in the list). As an example, if you wanted to 
> make a whole batch of concurrent connections, but didn't want to incur 
> the overhead of firing off more than 20 simultaneous connections, 
> you'd split your destination hosts up into groups of 20. As a group 
> was completed, a callback could fire off the next group, etc.

This functionality (or, something very close) is in the deferred module 
already, it's just non-obvious how you use it:

sem = defer.DeferredSemaphore(count)
dl = [sem.run(callable, item, *args, **named) for item in iterable]
return defer.DeferredList(dl, consumeErrors=True)

which, rather than "batching" (which means that you have 3, then 2, then 
1 in play, then 3, then 2, then 1), keeps "count" items in play at any 
time (as long as there are available items), replacing each item that 
completes with one pending item.  I wrap that bit of code with a little 
function called parallel in my code so I don't have to remember the 
trick every time.

HTH,
Mike

-- 
________________________________________________
  Mike C. Fletcher
  Designer, VR Plumber, Coder
  http://www.vrplumber.com
  http://blog.vrplumber.com




From moof at metamoof.net  Sat Jan 21 07:01:03 2006
From: moof at metamoof.net (Moof)
Date: Sat, 21 Jan 2006 15:01:03 +0100
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
Message-ID: <bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>

On 1/21/06, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>
> I have a question about an approach I used... I'm worried that I've
> over-worked it and have over-looked a more elegant and standard
> solution.
>
> I have the need to fire off network connections in groups. Deferreds
> added to a DeferredList don't fit the bill (because there's no control
> over all the deferreds in the list). As an example, if you wanted to
> make a whole batch of concurrent connections, but didn't want to incur
> the overhead of firing off more than 20 simultaneous connections, you'd
> split your destination hosts up into groups of 20. As a group was
> completed, a callback could fire off the next group, etc.
>
> What's more, I didn't want to put this kind of control in a factory or
> a protocol. In my mind, that didn't seem the proper place for it...


This is one approach. It has the characteristic that if one site in your
group is considerably slower than the others, you will wait till all the
sites in your group are finished before firing off the next group. This may
or may not be  good thing for your particular app.

An alternative is to create a "pool" of connections that will consume from a
queue of potential connections. you feed your list into a DeferredQueue, and
create as many concurrent connection handlers as you want, that will all
consume from that same queue. this has the characteristic that as long as
you keep the queue full you are constantly running 20 connections. This may
or may nto be an advantage in the case of your application.

Or if you want to use the built-in twisted magic, take a look at
twisted.protocols.policies.ThrottlingFactory and other similar things int he
same package see if one can be adapted to your use.

Keep in mind that twisted is not *actually* concurrent, so you may not need
to throttle your connections that much, you might be able to let the reactor
handle the connection load itself.

Actually, given that the reactor handles a thread pool size, is there an
equivalent "connection pool size" that can be manipulated from inside the
programme? Does such a concept have any use or meaning?

Moof - not a reactor expert, as you can see.

Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060121/0a08c428/attachment.html>

From rabs at dimension-virtual.com  Sat Jan 21 13:20:50 2006
From: rabs at dimension-virtual.com (=?iso-8859-1?Q?Ra=FAl_Alexis_Betancort_Santana?=)
Date: Sat, 21 Jan 2006 19:20:50 -0100
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
Message-ID: <00c101c61ec8$2c223690$fd011aac@SALMA>

Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...

c:\python24\lib\site-packages\twisted\python\context.py:74: DeprecationWarning: threadable.whenThreaded is deprecated. Use application-level logic instead.
  threadable.whenThreaded(initThreads)
Traceback (most recent call last):
  File "prueba.py", line 11, in ?
    from twisted.internet import reactor
  File "c:\python24\lib\site-packages\twisted\internet\reactor.py", line 11, in ?
    from twisted.internet import selectreactor
  File "c:\python24\lib\site-packages\twisted\internet\selectreactor.py", line 22, in ?
    from twisted.internet import posixbase
  File "c:\python24\lib\site-packages\twisted\internet\posixbase.py", line 25, in ?
    from twisted.internet import tcp, udp
  File "c:\python24\lib\site-packages\twisted\internet\tcp.py", line 65, in ?
    from twisted.internet import protocol, defer, base, address
  File "c:\python24\lib\site-packages\twisted\internet\base.py", line 239, in ?
    class ReactorBase:
  File "c:\python24\lib\site-packages\twisted\internet\base.py", line 244, in ReactorBase
    if platform.supportsThreads():
AttributeError: Platform instance has no attribute 'supportsThreads'


Any help would be appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060121/971eb9c4/attachment.html>

From exarkun at divmod.com  Sat Jan 21 13:23:18 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 21 Jan 2006 15:23:18 -0500
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
In-Reply-To: <00c101c61ec8$2c223690$fd011aac@SALMA>
Message-ID: <20060121202318.2697.125639135.divmod.quotient.671@ohm>

On Sat, 21 Jan 2006 19:20:50 -0100, Raúl Alexis Betancort Santana <rabs at dimension-virtual.com> wrote:
>Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...
>
>c:\python24\lib\site-packages\twisted\python\context.py:74: DeprecationWarning: threadable.whenThreaded is deprecated. Use application-level logic instead.
>  threadable.whenThreaded(initThreads)
> [snip]
>    if platform.supportsThreads():
>AttributeError: Platform instance has no attribute 'supportsThreads'
>

You seem to have managed to combine a pre-2.1.0 version of context.py with a 2.1.0 version of runtime.py.  How did you install Twisted?  You might try deleting the entire twisted directory out of your site-packages and re-installing.

Jean-Paul



From duncan.mcgreggor at gmail.com  Sat Jan 21 16:04:08 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 16:04:08 -0700
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <43D23D35.2080104@rogers.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<43D23D35.2080104@rogers.com>
Message-ID: <e79243816f71bdc4beb0ebe3214cccc1@gmail.com>


On Jan 21, 2006, at 6:55 AM, Mike C. Fletcher wrote:

> Duncan McGreggor wrote:
>
>> I have a question about an approach I used... I'm worried that I've 
>> over-worked it and have over-looked a more elegant and standard 
>> solution.
>>
>> I have the need to fire off network connections in groups. Deferreds 
>> added to a DeferredList don't fit the bill (because there's no 
>> control over all the deferreds in the list). As an example, if you 
>> wanted to make a whole batch of concurrent connections, but didn't 
>> want to incur the overhead of firing off more than 20 simultaneous 
>> connections, you'd split your destination hosts up into groups of 20. 
>> As a group was completed, a callback could fire off the next group, 
>> etc.
>
> This functionality (or, something very close) is in the deferred 
> module already, it's just non-obvious how you use it:
>
> sem = defer.DeferredSemaphore(count)
> dl = [sem.run(callable, item, *args, **named) for item in iterable]
> return defer.DeferredList(dl, consumeErrors=True)
>
> which, rather than "batching" (which means that you have 3, then 2, 
> then 1 in play, then 3, then 2, then 1), keeps "count" items in play 
> at any time (as long as there are available items), replacing each 
> item that completes with one pending item.  I wrap that bit of code 
> with a little function called parallel in my code so I don't have to 
> remember the trick every time.

Ah, this is fantastic! Thanks for the heads up. I've been buried in the 
deferred file for the paste few days and have no idea how I missed 
this... I'm now reading through the entire file to see what other 
goodies I might have missed...

I've replaced almost all of that test code, and it works like a charm. 
Your usage example was a huge time-saver -- thanks!

d




From duncan.mcgreggor at gmail.com  Sat Jan 21 16:06:51 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 16:06:51 -0700
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<bff8eeef0601210601q70541444s69b5aba467423b26@mail.gmail.com>
Message-ID: <fe3ea0b8d89365e4e5b088285426aa5c@gmail.com>


On Jan 21, 2006, at 7:01 AM, Moof wrote:

> On 1/21/06, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>
>> over-worked it and have over-looked a more elegant and standard
>> solution.
>>
>> I have the need to fire off network connections in groups. Deferreds
>> added to a DeferredList don't fit the bill (because there's no control
>> over all the deferreds in the list). As an example, if you wanted to
>> make a whole batch of concurrent connections, but didn't want to incur
>>  the overhead of firing off more than 20 simultaneous connections, 
>> you'd
>> split your destination hosts up into groups of 20. As a group was
>> completed, a callback could fire off the next group, etc.
>>
>> What's more, I didn't want to put this kind of control in a factory or
>> a protocol. In my mind, that didn't seem the proper place for it...
>
> An alternative is to create a "pool" of connections that will consume 
> from a queue of potential connections. you feed your list into a 
> DeferredQueue, and create as many concurrent connection handlers as 
> you want, that will all consume from that same queue. this has the 
> characteristic that as long as you keep the queue full you are 
> constantly running 20 connections. This may or may nto be an advantage 
> in the case of your application.
>
> Or if you want to use the built-in twisted magic, take a look at 
> twisted.protocols.policies.ThrottlingFactory and other similar things 
> int he same package see if one can be adapted to your use.
>
> Keep in mind that twisted is not *actually* concurrent, so you may not 
> need to throttle your connections that much, you might be able to let 
> the reactor handle the connection load itself.
>
> Actually, given that the reactor handles a thread pool size, is there 
> an equivalent "connection pool size" that can be manipulated from 
> inside the programme? Does such a concept have any use or meaning?
>
> Moof - not a reactor expert, as you can see.

But very cool ideas and some great things to explore -- thanks!

d




From rabs at dimension-virtual.com  Sat Jan 21 18:24:40 2006
From: rabs at dimension-virtual.com (=?UTF-8?Q?Ra=C3=BAl_Alexis_Betancort_Santana?=)
Date: Sun, 22 Jan 2006 00:24:40 -0100
Subject: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP
References: <20060121202318.2697.125639135.divmod.quotient.671@ohm>
Message-ID: <020901c61ef2$9e191280$fd011aac@SALMA>

You was ok, it's apears that there was and old version of twisted sitting 
around, solved, thx for you help

----- Original Message ----- 
From: "Jean-Paul Calderone" <exarkun at divmod.com>
To: "Twisted general discussion" <twisted-python at twistedmatrix.com>
Sent: Saturday, January 21, 2006 7:23 PM
Subject: Re: [Twisted-Python] Problems with TwistedSumo-2005-11-06 on WinXP


> On Sat, 21 Jan 2006 19:20:50 -0100, Raúl Alexis Betancort Santana 
> <rabs at dimension-virtual.com> wrote:
>>Hi all, I'm trying to run an app developed on Linux Debian 3.1r1, with 
>>python 2.4 and twisted 2.1.0 on windows XP with python 2.4 and 
>>TwistedSumo-2005-11-06 (Twisted 2.1.0), and I get the followin error ...
>>
>>c:\python24\lib\site-packages\twisted\python\context.py:74: 
>>DeprecationWarning: threadable.whenThreaded is deprecated. Use 
>>application-level logic instead.
>>  threadable.whenThreaded(initThreads)
>> [snip]
>>    if platform.supportsThreads():
>>AttributeError: Platform instance has no attribute 'supportsThreads'
>>
>
> You seem to have managed to combine a pre-2.1.0 version of context.py with 
> a 2.1.0 version of runtime.py.  How did you install Twisted?  You might 
> try deleting the entire twisted directory out of your site-packages and 
> re-installing.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> !DSPAM:43d29b0720208818784833!
>
> 





From duncan.mcgreggor at gmail.com  Sat Jan 21 18:09:56 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 18:09:56 -0700
Subject: [Twisted-Python] TimeoutError in BaseConnector
Message-ID: <da13e8c984ac86675637bef6a090f912@gmail.com>

Hey all,

I have an issue with the following in t.i.base.BaseConnector:

if self.timeout is not None:
     self.timeoutID = self.reactor.callLater(self.timeout,
         transport.failIfNotConnected, error.TimeoutError())


Might it be more useful and less misleading to describe this a little 
more? I was quite perplexed at an unexpected timeout error, until I 
realized it was being generated by the connector. I kept getting this 
message:

   User timeout caused connection failure.

While technically true, I was mislead but the "User timeout" bit, and 
it took me a while to get my bearings, quit futzing with the factory 
and protocol settings, and track this down. I made the following change 
in my local t.i.base:

if self.timeout is not None:
     self.timeoutID = self.reactor.callLater(self.timeout,
         transport.failIfNotConnected,
         error.TimeoutError("Could not connect after %s seconds" % 
self.timeout))

This results in the less cryptic:

"User timeout caused connection failure: Could not connect after 30 
seconds."

Shall I submit a patch in trac?

Thanks,

d




From duncan.mcgreggor at gmail.com  Sat Jan 21 18:32:59 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Sat, 21 Jan 2006 18:32:59 -0700
Subject: [Twisted-Python] Re: TimeoutError in BaseConnector
In-Reply-To: <da13e8c984ac86675637bef6a090f912@gmail.com>
References: <da13e8c984ac86675637bef6a090f912@gmail.com>
Message-ID: <17394b85b00b92bcf8a3f064b9fbe771@gmail.com>


On Jan 21, 2006, at 6:09 PM, Duncan McGreggor wrote:

> While technically true, I was mislead but the "User timeout" bit, and 
> it took me a while to get my bearings, quit futzing with the factory 
> and protocol settings, and track this down. I made the following 
> change in my local t.i.base:

Hmm. The more I think about this, the more I'm willing to quibble about 
"User timeout" being used here. It may be a matter of semantics, but I 
have always perceived the "user end" to be with 
factories/clients/protocols. This isn't that end at all... it's the 
reactor/connector end. Should this be called a "User timeout"? What 
about "Connector timeout"?




From exarkun at divmod.com  Sat Jan 21 18:46:48 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 21 Jan 2006 20:46:48 -0500
Subject: [Twisted-Python] TimeoutError in BaseConnector
In-Reply-To: <da13e8c984ac86675637bef6a090f912@gmail.com>
Message-ID: <20060122014648.2697.1102324432.divmod.quotient.674@ohm>

On Sat, 21 Jan 2006 18:09:56 -0700, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
> [snip]
>
>Shall I submit a patch in trac?

In any event, bugs should not be filed in trac.  They should be filed at <http://twistedmatrix.com/bugs/>.

Jean-Paul



From andrea at cpushare.com  Sat Jan 21 18:53:12 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 02:53:12 +0100
Subject: [Twisted-Python] CPUShare-Twisted
Message-ID: <20060122015312.GC20603@opteron.random>

Hello everyone,

if you've pending patches that have not been applied or you've
no time for unittests until your project works, you can consider
switching to CPUShare-Twisted. Mercurial allows distributed development
so we can merge our branches against each other with very little effort.

If you've suggestion for betters names you're welcome. I could have done
it over sourceforge but they lack mercurial AFIK and since I've the
setup on cpushare.com I was quick to add Twisted to it. We can move it
elsewhere later if needed (especially if it consumes too much network
bandwidth ;).

I have no interest to maintain twisted except for the fact I'm using it
in semi-production and I plan to use it in production, and so I need it
to be stable, and with all possible bugfixes and features applied
without formalities. I assume other business usages of twisted may have
the same needs, so perhaps we can join our efforts with this project.

My choice was to either dump twisted or to maintain it locally, and so I
clearly have an interest to make the CPUShare-Twisted branch public and
to include other people fixes and features (I was already maintaining it
over the last year except it was just a patch with fixes that I failed
to push in SVN, and not a real fork).

You can find the quickstart, basic objectives (including the not trying
to reinvent the wheel) and mailing list details on the project page:

	http://www.cpushare.com/twisted

I'll keep tracking SVN. I'll also keep submitting patches upstream since
one can always hope for the best.

Also note, over the last year I've fixed at least one bug in core
twisted basic protocols that would have never been found with any
unittest out there. Careful auditing and reading code and filtering of
the patches, and thinking deeply about the design before writing code
(to write the code in a way that won't break easily over time), is much
more important than spending time on unittests. Unittests still makes
perfect sense after stuff is included and works in basic testing, but
they should be separated from the logic of committing valid patches to
the tree.

NOTE: before clicking on that page you may want to also answer these
questions:

1) is python much better than ruby and all other language on earth?
2) is twisted much better than any other framework to write network apps?
3) are twisted and python fast and scalable enough for all applications?
4) is the single threaded model scalable enough for all applications in
   smp?
5) is async programming using deferreds simpler to code for a webserver
   that is stateless and that only does sql queries over the network?
6) would you rather prefer to go broke than to use code
   "not-invented-here" or not written with python and twisted?
   (of course the python interpreter the c compiler and the underlying
   operative system are magically excluded from the not-invented-here
   clause for whatever unknown reason)

I'm welcome anybody who wants to join cpushare-twisted, but if the
answer of _any_ of the above questions is "yes", I think you may be
better off ignoring this email.



From glyph at divmod.com  Sat Jan 21 21:55:44 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 21 Jan 2006 23:55:44 -0500
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
Message-ID: <20060122045544.2697.96381428.divmod.quotient.702@ohm>

On Sun, 22 Jan 2006 02:53:12 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:

>if you've pending patches that have not been applied or you've
>no time for unittests until your project works, you can consider
>switching to CPUShare-Twisted. Mercurial allows distributed development
>so we can merge our branches against each other with very little effort.

If you've pending patches that have not been applied, would you please consider instead to agitate for those patches on the mailing lists, and add information to them in the tracker?  Discussing an abandoned patch can cast some light where it is needed.  Putting it into the CPUShare fork rather than the bugtracker virtually guarantees that no core Twisted developer will ever look at it.  Not that you can't do both - I just want to make it clear that we're going to keep working off the bugtracker and SVN, not off of random mercurial (or git or bzr or monotone - not to pick on hg) repositories run by users.

Also, Andrea, would you mind making sure that your codebase is visually distinct from Twisted in some way that is identifiable when it is run?  My main concern here is that if CPUShare-Twisted is to become popular, it seems likely that users might confuse it with the actual Twisted.  Since you have loudly declared your animosity towards filing bugs, I assume CPUShare-Twisted will not have its own bugtracker, and since you are opposed to test-driven development, I am sure that it will be full of bugs.  I would prefer it if we could avoid asking the Twisted team to deal with those bugs as well as actual bugs in Twisted, when users discover the only Twisted bugtracker is on twistedmatrix.com.

The best option would be to avoid using the same module name, but I understand that tracking trunk would be made more difficult with a diff that touched every import.  Perhaps instead you could change the version from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is visible at the beginning of any logs, and change the names of the command line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save time since developers could reject bugs immediately upon seeing one of those commands or the telltale log message rather than having to identify that the line numbers are all wrong before doing so.



From andrea at cpushare.com  Sat Jan 21 23:52:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 07:52:18 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122045544.2697.96381428.divmod.quotient.702@ohm>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
Message-ID: <20060122065218.GI20603@opteron.random>

On Sat, Jan 21, 2006 at 11:55:44PM -0500, glyph at divmod.com wrote:
> If you've pending patches that have not been applied, would you please 
> consider instead to agitate for those patches on the mailing lists, and add 

These are the very old ones (ignore the web2 part that is recent).

http://www.cpushare.com/hg/Twisted/?cs=400da64bd5a6

IIRC you said that disconnecting isn't present in all protocols, not sure if
you added disconnecting to all protocols. There was a discussion to add
more names, but I didn't see any fix going into SVN trunk. I need it in
tcp and these fixes are good enough for my usage (call it dirty fix but
it works for me). The other is a fundamental feature I need from the
proxy, it's backwards compatible so it doesn't add up any risk but I
never received feedback on it. Without it, it's impossible to safely
stack one server on top of the other without losing the client info.

I'm in discussion how to add it to web2 with headers instead of path
mangling.

> information to them in the tracker?  Discussing an abandoned patch can cast 
> some light where it is needed.  Putting it into the CPUShare fork rather 

I agree, but I always needed the fix since day zero. I had to maintain
it for so long. The fact I'm exporting the tree in a public way can't make
things worse as far as SVN integration is concerned. If something it can
make things better, since with a public tree there may be more interest
from your part in reducing the diff to nothing ;).

> than the bugtracker virtually guarantees that no core Twisted developer 
> will ever look at it.  Not that you can't do both - I just want to make it 
> clear that we're going to keep working off the bugtracker and SVN, not off 
> of random mercurial (or git or bzr or monotone - not to pick on hg) 
> repositories run by users.

Sure I understand that.

> Also, Andrea, would you mind making sure that your codebase is visually 
> distinct from Twisted in some way that is identifiable when it is run?  My 
> main concern here is that if CPUShare-Twisted is to become popular, it 
> seems likely that users might confuse it with the actual Twisted.  Since 
> you have loudly declared your animosity towards filing bugs, I assume 
> CPUShare-Twisted will not have its own bugtracker, and since you are 
> opposed to test-driven development, [..]

My developmnt is generally test-driven. I'm only opposed to unit-test
mandatory development to fix bugs or add new features. Writing unit-test
isn't the only way to test code. It's nice to have a unit test, even a
simple one, but it shouldn't be mandatory.

> [..] I am sure that it will be full of bugs. 

Time will tell. Since you made your prediction I'll make mine. I'm sure
axiom is wasted time in its current API (at least as far as twisted is
concerned).

I don't see how you can advertize axiom saying "We do plan to add some
later, and perhaps also support other databases in the future.". Sure
you can add it, but if you do it, the whole axiom api will fall apart
unless you want to make synchronous queries over the network. The only
two deferreds you have are during startup and in the testsuite, just
grep for the word Deferred. Making synchronous sql queries in the
twisted async model is unacceptable for anything serious.  Infact even
sqllite queries are obviously unacceptable once the db grows beyond the
size of the cache (and for sure you can't scale the queries over
different servers to have more ram-cache when using sqllite).

Ironically axiom current api would have a chance to work well with
threads, with twisted single threaded async model not.

There are good python storage packages to use with twisted and threads
(heck there is even pgasync if you're religious about not using
threads, why do you think people like me, Valentino and the pgasync
author care about using non-blocking solutions while doing queries to
the db?). I can't imagine why you insist on making your inferior
solution with a design that can't work well with twisted.

I'm feeling guilty for risking hitting the harddisk for a few msec when
people clicks on the mailing list archives, and infact I keep two
webservers exactly to avoid hurting the scalability of the ssl one.

> I would prefer it if we could avoid asking the Twisted team to deal with 
> those bugs as well as actual bugs in Twisted, when users discover the only 
> Twisted bugtracker is on twistedmatrix.com.

Sure.

> The best option would be to avoid using the same module name, but I 
> understand that tracking trunk would be made more difficult with a diff 
> that touched every import.  Perhaps instead you could change the version 
> from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is 

Ok, I'll make this change right away. I already did that for the web2 side.

> visible at the beginning of any logs, and change the names of the command 
> line tools to e.g. cpushare-twistd and cpushare-mktap?  This would save 
> time since developers could reject bugs immediately upon seeing one of 
> those commands or the telltale log message rather than having to identify 
> that the line numbers are all wrong before doing so.

This is a very fair requirement (changing the version is trivial).
However I don't see much point in changing the commands if the module
name is the same. Either I change both, or none. I mean, changing
cpushare-twistd won't prevent a python app importing the reactor to get
mine instead of the official one, so you would still risk to get bogus
bugreports unless I rename both. I think I can rename the module later
if some people uses it, right now I've no idea if people will use it, or
if I'll remain the only user (clearly as long as I'm the only user I
don't need to rename the module ;).



From glyph at divmod.com  Sun Jan 22 02:59:12 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sun, 22 Jan 2006 04:59:12 -0500
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: 0
Message-ID: <20060122095912.2697.1307843016.divmod.quotient.768@ohm>

On Sun, 22 Jan 2006 07:52:18 +0100, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Sat, Jan 21, 2006 at 11:55:44PM -0500, glyph at divmod.com wrote:
>> If you've pending patches that have not been applied, would you please
>> consider instead to agitate for those patches on the mailing lists, and add
>
>These are the very old ones (ignore the web2 part that is recent).
>
>http://www.cpushare.com/hg/Twisted/?cs=400da64bd5a6

>IIRC you said that (some stuff)

I'm sorry I was unclear, and you typed all that stuff to no effect.  Discussions that draw attention to unapplied patches should really refer to bug URLs in the tracker.

If they don't, nobody can tell how long the patches have been languishing, who was supposed to apply them, or why they weren't applied, unless there are links to dozens of previous mailing list messages in each post.  Also, summaries of these discussions should be attached to the ticket by the reporter or the maintainer, if they advance the issue at all.  Overall, without some support from the tracker, we just don't know whether the issues are really stuck on a serious problem, or whether someone has just become confused about what is required to make progress on the bug.

Even the absence of information on a bug can be useful.  "Why hasn't anybody replied to this for 6 months?  Was there some discussion on IRC?" can lead someone to post a helpful summary of current status if they have a recollection of where it did end up... sometimes, the bugs have even been fixed, and nobody has noted that fact.

>Sure I understand (twisted devs will work from bugtracker)

Thank you.

>My developmnt is generally test-driven.

Maybe, but it sure doesn't sound like it.  If your development is test-driven that means you are used to writing unit-tests *first*, not hacking in a fix and testing *later*, which is what you have repeatedly suggested.  "TDD" is not the same thing as "unit testing".

FWIW Twisted does not require TDD.  I do not personally do TDD much of the time.  I think tests need to be added before a feature is added, but I don't always have a clear enough picture of what the code will look like to write tests, before I've tried to write the code.

>I'm only opposed to unit-test
>mandatory development to fix bugs or add new features. Writing unit-test
>isn't the only way to test code. It's nice to have a unit test, even a
>simple one, but it shouldn't be mandatory.

Hmm.  "Unit Test Mandatory Development" - UTMD.  That sounds like a good acronym.  I think I will use it in the future.

One productive use of this set of threads is that I've repeated our testing policy - UTMD - in a few different ways.  I'm not sure that I can explain it to you (you seem to have some resistance to understanding) but maybe this will be useful to others.

Whether unit tests *should* be required is a discussion that requires some kind of value system.  What's good, what's bad, etc.  Right now unit testing *is* required.  There is a reason.  Unit testing is not the objective here, rather, requiring unit tests provides a mechanism to satisfy a greater requirement.  If you can suggest a better way to achieve that requirement then perhaps we can discuss other strategies.

Twisted is used by lots of different people in lots of different ways.  Before test requirements were adopted, it was quite common for a developer who fixed a bug in one system on one platform broke another system on another platform.  We are trying to improve Twisted, and such changes are not improvements.  Such changes simply muddle around the set of places and times where Twisted works correctly, they don't enlarge it.

Conceptually this makes sense.  Software is extremely complex, etc.  If you want to fix a bug, you need a way to verify that it doesn't introduce a new bug, or at least a way to verify that *previously*-verified behavior is still working as expected, in previously-verified environments.

That is the goal that unit tests serve.  Without unit tests, *we do not know* whether a particular change will continue to work in the face of future changes, or if it broke past changes.  We can reason about the breakage on past changes, at least, but to think that we can actually understand the impact of the patch on a system the size of even something modest like Twisted is hubris.  Every software project has embarrassing releases that break obvious frequently-used functionality - even projects with *better* testing track-records than Twisted has.  I believe Linus coined the term "brown paper release", for the brown paper bag you have to wear on your head to prevent being recognized after such an event.

However, we can't even attempt to reason about future changes, because we can't possibly consider them when reviewing a current change.  Is it likely that other things might break this later?  How could we possibly know, without a way to accurately predict the future?

Consider that different people review different patches to Twisted at different times, and they have different skill levels.  I have written and read a LOT of Twisted code, and I doubt that even I understand 90% of it.  This partial ignorance makes reviewing past changes a lot like reviewing future changes - a change might break something in a Twisted subsystem the reviewer didn't even know about.

Of course, unit tests are imperfect too; we don't have 100% coverage, and even if we did, we wouldn't have 100% coverage in combination.  Still, they are the best option that we know about.

Can you suggest an alternative to unit tests that would accomplish this goal of providing some level of knowledge as to whether Twisted is probably improving or just changing randomly between releases?

Here are some objections which don't really address the question, just so I can head these off before they are asked.  Andrea - some of these are quite silly and I don't mean to imply that you are necessarily going to ask all of these questions, but I am now writing this for a general audience, and these *are* questions others have asked me.

"but, my changes are so simple, what could they break"

There is a story about a butterfly and a hurricaine that you need to read.  Simple changes can have complex effects that break things horribly.

"not EVERYTHING in Twisted has to be tested.  some easy stuff could break, it's not likely since it doesn't change too often, and you could just do another release"

This leads to a game of whack-a-mole.  One bug pops up, you smash it down.  That makes another bug pop up.  You smash it down.  The whole time, you feel like you are being very productive, because you are fixing all these bugs! Really though, you're just making the same two motions over and over again between different releases.  'back and forth' is an oversimplification, of course.  In reality the cycle probably takes hundreds of releases and goes through dozens of features in various combinations.  Nevertheless, things get fixed, and other things break.

"you can just test it manually"

No, you can't.  There is a HUGE combinatorial explosion of work involved - did you test it with every revision?  Did you test it on Windows?  Did you test it on a slow machine?  Did you test it with Python2.3?  Did you test it with Python 2.3 - on Windows?  Did you test the OTHER thing with Python 2.3 on Windows?  Did you test the other thing with Python 2.4 on Windows?  What about FreeBSD?  What about QNX?  What about AIX?!??!?  What about Linux 2.4?

Right now this matrix has over 20,000 units of work in it, just based on the current buildbots and the tests they're supposed to be running (and as you can see on the buildbot page, we are still trying to get the EXISTING features into shape, it is no wonder we don't want to rush to accept new ones quickly).

Every unit test that is added does the work of manual testing on 9 configurations on 4 platforms every time someone does a commit, which is several times a day.  Do the math.  Even replicating our *current* automated testing with a manual replacement would take something like a million dollars a week in tester salaries, if we were to pay them.  Open source does produce some really good free labor, but not NEARLY that much, and Twisted is a small project besides.

"other projects release untested code, why can't you"

Didn't your mother ever tell you "If Billy jumped off a bridge, would you jump off a bridge too?"  (Wait, am I being "Mommist" now? ;-))

"Some projects separate testing from development, such as the LTP"

Forgetting any flames about Linux's stability for a moment (let's be fair: for such a large piece of software that changes so fast, it's amazingly robust), this is the brute force approach.

LTP is sponsored by IBM and SGI.  It is a HUGE project - at one point, I visited the LTP booth at LinuxWorld.  Twisted does not have a booth at any conference.  Just the test project on linux has ten times as many people as Twisted.  With fewer resources, we have to have a better strategy, otherwise we will not find any bugs.  And by the way, even with all that testing that the LTP does, sometimes Twisted finds even regressions in Linux, remember? :)

>> [..] I am sure that it will be full of bugs.
>
>Time will tell.

Code that has passing tests almost by definition has fewer bugs than code which does not have passing tests.  At the very least, it has more bugs in an unresolved quantum state, because you haven't observed them - so the probability of actual bugs is higher.

They whole point of this fork is that you want to put more bugs in and don't want to take the effort to verify that they won't be introduced.  I am not making a prediction about your skill, I am making an observation on the nature of the project.

>Since you made your prediction I'll make mine. I'm sure
>axiom is wasted time in its current API (at least as far as twisted is
>concerned).

Axiom was developed for a specific application.  It is not appropriate for everyone.  Some people like it, some people don't.  The ones who like it can go ahead and use it.

>I don't see how you can advertize axiom saying "We do plan to add some
>later, and perhaps also support other databases in the future.".

>Sure you can add it, but if you do it, the whole axiom api will fall apart
>unless you want to make synchronous queries over the network. The only
>two deferreds you have are during startup and in the testsuite, just
>grep for the word Deferred.

I think you mean we are going to add more Deferreds later?  There will be a different operational mode for 'transact' which returns a Deferred; the exact spelling hasn't been determined yet, but surely the semantics for that mode will be different and it will not work with all existing axiom code.  (Of course, existing axiom code will not invoke that mode, so it will continue to work side-by-side code which does use it happily enough.)

>Making synchronous sql queries in the
>twisted async model is unacceptable for anything serious.

Everyone is welcome to think that Axiom is not very serious.  I am not a serious person.  Twisted, in fact, is not serious, as you yourself pointed out - Twisted.Quotes proves it.

>Infact even
>sqllite queries are obviously unacceptable once the db grows beyond the
>size of the cache

Only if you're not using an index.  An implication of the current axiom model is that you had better be damn sure that you've got indexes in the right place.

>(and for sure you can't scale the queries over
>different servers to have more ram-cache when using sqllite).

Who says your application has to scale by doing multi-machine queries within a single database?  Google's search team doesn't (at least according to the papers they've published), and I think they know something about scale.  You could apply their same general technique, or the one Netezza uses, to Axiom: either (google style) segment your application data into logical groups, and have high-level queries only talk to appropriate nodes, or (netezza) make null queries really fast (netezza has crazy stuff for this, I think, but Axiom would just use indexes), then run every query on every node in parallel, return results to an aggregating node.  It currently requires extra work, but in our application at least, you rarely want to query the whole universe.  At some point I imagine we will add support for that.

Anyway, I hope that indicates that I have considered the issue of scale a little bit.  Right now scale is not my biggest concern but I am confident we can handle it.  If Divmod were to have a potential customer approach us and say, "we want Axiom to scale to a hundred million node cluster, and we have a very complex application, and we want to get to that scale within a month.  can we do that?"  I'd say no.

That doesn't mean it will never scale.  If a potential client were instead to say, "we have a six month timeframe, and such-and-such budget, can we launch something and eventually scale to a billion users with axiom?"  I'd say yes, probably.  Depends on our allocation in the budget, of course ;-).  The application would have to be aware of scaling issues in its own code.

It turns out that you always do anyway.  The "sufficiently parallel cluster" of RDBMS machines is like the "sufficiently smart compiler" that LISP people talk about.  The existence of projects like memcached indicates that there is a general problem with the idea that you can just use one giant database and scale it up and up and up.

>Ironically axiom current api would have a chance to work well with
>threads, with twisted single threaded async model not.

Database-managed concurrency is not the same thing as shared-state threading.    You might superficially implement database-managed concurrency with shared-state threads for convenience, but the whole programming model is different - most importantly, you don't touch locking from application code, ever.  I need to write a blog post about that or something, but I doubt I will do it justice.  There are easily 3 CS Ph.D dissertations in that topic and I am not the person to write them.

In fact, you can use the current Axiom API with threads, mostly, and it works about as well as most other Python ORMs.  There are some concurrency issues (also present in several other systems) which I'd like to fix before that is a suggested use though.

>There are good python storage packages to use with twisted and threads
           ^
That word right there is debatable.  I've used, and even even written, a few of those and I'm not happy with them.  Again - for a particular application.  Divmod's application is very ambitious and it is not clear that Axiom is the best possible approach for it.  But it seems to be working out OK.

>I can't imagine why you insist on making your inferior
>solution with a design that can't work well with twisted.

Your point: Axiom does not work well with Twisted.

Your evidence: you do not think Axiom works well with Twisted.

This is a rhetorical fallacy.  It is called a "circular" argument.

I have a favorite rhetorical fallacy too, but it's not this one.

My point: Axiom works great with Twisted!

My evidence: There are about 30 people in #divmod who think Axiom works great with Twisted.

This rhetorical fallacy is called an "ad populum" argument, and it's still wrong, but it has a bit more heft to it.

>I'm feeling guilty for risking hitting the harddisk for a few msec when

Hard disk?  You mean "filesystem", surely.  Linux decides to put things which are in RAM onto disk and which are on disk into RAM all the time.

>people clicks on the mailing list archives, and infact I keep two
>webservers exactly to avoid hurting the scalability of the ssl one.

Aah.  And how do you do that?  Inter-process communication.

Divmod does have problems that require extremely low-latency response and concurrency, but it turns out that these are the exception, not the rule.  Allen Short is currently putting Voice-over-IP audio playback into a subprocess so that performance does not suffer from delays which are perfectly acceptable for the interactive web app (everybody has to hit the database to display these web pages anyway, and there is only one disk, so the performance is not going to change if it's in parallel) but are excruciatingly long for delays between sound samples.

We also have plans to scale our service up amongst large groups of commodity machines, with separate, small axiom databases running on each one.  Axiom databases do scale up in size better than you have suggested (I have tested very responsive query and insert performance up to ~5G databases so far, and there is no indication it would slow down significantly anywhere up to a terabyte) but you are definitely not going to be able to run a million-subscriber service out of a single Axiom database.

You make spawning a second webserver sound like a really serious problem.  It's not.  When your application need parallelism, to maximize utilization, spawn a process.  Sometimes it's OK to block.

At the beginning of the project, I thought very much like you are suggesting, absolutely terrified of blocking for any reason, reasoning about what the kenel would do, about what my program would do, but without any solid performance numbers.  I got over it and wrote some simple code that stored and retrieved objects with SQLite, then did some basic measurements and discovered that it was actually adequately fast.

>> Perhaps instead you could change the version
>> from SVN-Trunk to 'HG-CPUShare', so that the CPUShare-ness of the code is
>
>Ok, I'll make this change right away. I already did that for the web2 side.

and thanks again for that.

>This is a very fair requirement (changing the version is trivial).
>However I don't see much point in changing the commands if the module
>name is the same. Either I change both, or none.

Definitely the version is the most important thing.  I suggested the command-names because that way pasted shell output without tracebacks would also be visibly identifiable without having to say 'please run xxx --version'.  If you don't think that would be appropriate, I don't mind.



From l.oluyede at gmail.com  Sun Jan 22 03:33:56 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun, 22 Jan 2006 11:33:56 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122015312.GC20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
Message-ID: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>

> Also note, over the last year I've fixed at least one bug in core
> twisted basic protocols that would have never been found with any
> unittest out there. Careful auditing and reading code and filtering of
> the patches, and thinking deeply about the design before writing code
> (to write the code in a way that won't break easily over time), is much
> more important than spending time on unittests. Unittests still makes
> perfect sense after stuff is included and works in basic testing, but
> they should be separated from the logic of committing valid patches to
> the tree.

I think nobody here is claiming that you're not a useful to the
Twisted effort. Mr. Lefkowitz has already apologized for the delays of
applying patches (mostly due to lack of unit tests and manpower) but
stating that a great eye on code is better than automatic testing I
think it's wron and I don't know where one excludes the other. You can
can write test, use your experience to read through it and find if
it's correct and submit to the Twisted folks. It's very normal to
apply a pending patch on your local Twisted tree while waiting that
they apply it on the trunk. Delays? Why you don't join the project?

> NOTE: before clicking on that page you may want to also answer these
> questions:

Let me say that reading those kind of question I'm starting to think
that Twisted it's not what you need in first place, so why bother
rewriting your app N times or wasting your time here if Twisted is not
what you need? I specifically refer to the question #5

> 1) is python much better than ruby and all other language on earth?

Than Ruby? The answer is no. It's a matter of tastes. Than all the
languages? Who knows them all?

> 2) is twisted much better than any other framework to write network apps?

Which other framework do you know? I'm aware of ACE for C++ and
another for Perl. Full stop. There are languages like E, like Oz
having concurrency support builtin but they aren't "frameworks"

> 3) are twisted and python fast and scalable enough for all applications?

Twisted and Python are scalable enough for all applications that uses
them. If you need something powerful why using them? I don't
understand your kind of questions.

> 4) is the single threaded model scalable enough for all applications in
>    smp?

The same as above.

> 5) is async programming using deferreds simpler to code for a webserver
>    that is stateless and that only does sql queries over the network?

That's my main concern. If you have stateless stuff and you do only
sql queries, do you really need all the twisted power?

> 6) would you rather prefer to go broke than to use code
>    "not-invented-here" or not written with python and twisted?
>    (of course the python interpreter the c compiler and the underlying
>    operative system are magically excluded from the not-invented-here
>    clause for whatever unknown reason)

What's the meaning of such a question?

> I'm welcome anybody who wants to join cpushare-twisted, but if the
> answer of _any_ of the above questions is "yes", I think you may be
> better off ignoring this email.

I wish you luck but this clause terrifies me:
"If the CPUShare-Twisted fork fails to be successful, CPUShare will
stop using Twisted, so the use of this fork is at your own risk."

If you have find time to write countless emails on this mailing list,
to say that Nevow is ugly and slow, to whatever... why didn't write
unit tests for patches and stop?

I don't understand the real point to your argues.

--
Lawrence
http://www.oluyede.org/blog

From moof at metamoof.net  Sun Jan 22 04:52:51 2006
From: moof at metamoof.net (Moof)
Date: Sun, 22 Jan 2006 12:52:51 +0100
Subject: [Twisted-Python] Deferred Groups?
In-Reply-To: <43D23D35.2080104@rogers.com>
References: <139eed6a6d819d1383153b3f1d55598c@gmail.com>
	<43D23D35.2080104@rogers.com>
Message-ID: <bff8eeef0601220352o18c36fday29a0979fd9659c5f@mail.gmail.com>

On 1/21/06, Mike C. Fletcher <mcfletch at rogers.com> wrote:
>
> This functionality (or, something very close) is in the deferred module
> already, it's just non-obvious how you use it:
>
> sem = defer.DeferredSemaphore(count)
> dl = [sem.run(callable, item, *args, **named) for item in iterable]
> return defer.DeferredList(dl, consumeErrors=True)


Oh good God, you mean twisted had this all the time?  Would have saved me a
(small) number of headches about 6 months back, though given how much my
beast has grown since then, I'd probably  have ended up replacing it anyway.


I've added a documentation bug (1432), and I might see if I get some time to
write some docs for it this afternoon.


Moof
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060122/dd2c617b/attachment.html>

From andrea at cpushare.com  Sun Jan 22 10:04:40 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Sun, 22 Jan 2006 18:04:40 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
Message-ID: <20060122170440.GK20603@opteron.random>

On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> think it's wron and I don't know where one excludes the other. You can

I've never said one excludes the other, I say that unit-test should not
be mandatory, and if you should write the unit-test _after_ reviewing
the code, not before.

> Let me say that reading those kind of question I'm starting to think
> that Twisted it's not what you need in first place, so why bother
> rewriting your app N times or wasting your time here if Twisted is not
> what you need? I specifically refer to the question #5

I started to think the same indeed, especially the more time I spend
answering email like this one ;). However I still feel that it's quicker
to get things working with twisted in the short term, and given all my
founding are my savings I've to be dirty and quick (I can't pretend to
debug memory corruption or memory leaks with so little resources, so an
interpreter is a sane choice), but if I had more resources I could
afford not using it and it would be a lot faster and it would scale to a
larger number of users using the same hardware resources.

> That's my main concern. If you have stateless stuff and you do only
> sql queries, do you really need all the twisted power?

No my app isn't stateless, or I would be using the thread model too.
The very cpushare protocol is complex in the way it handles race
conditions and async event like disconnects, twisted makes life easy at
the expense of scalability. This helps getting things working quick. And
I use pb to attach the webserver to the cpushare server, this is why
it's confortable for me to use twisted on the web side too (I'm not
making queries to the db only).

But most people with simpler projects would be better off with threads
to write web apps. Infact twisted web already provides a model like
this, my mercurial export already use it, moinmoin also uses it. the
webserver it's twisted.web for both and they're threaded.

> I wish you luck but this clause terrifies me:
> "If the CPUShare-Twisted fork fails to be successful, CPUShare will
> stop using Twisted, so the use of this fork is at your own risk."

I wrote it to scare people indeed, I'm careful not to generate any hype,
you know what you get when you work with me. If you get on the
CPUShare-Twisted project it probably means you already had to maintain
your own set of patches for over one year, so joining efforts won't make
thing worse even if I decide to dump twisted from my proejct (I can
only tell that my twisted branch has solid backups and I can guarantee
an export will remain availble if things go wrong).

> If you have find time to write countless emails on this mailing list,
> to say that Nevow is ugly and slow, to whatever... why didn't write
> unit tests for patches and stop?

Even before you write the unittest you should fix nevow, and that's not
going to happen, it didn't happen in one year after I sent the first
performance bottleneck reports, it sure can't happen in the few hours I
spent writing these emails.

Plus it'd be terrible to waste time on nevow when Cheetah is already an
order of magnitude better and faster (IMHO of course).

> I don't understand the real point to your argues.

The point is: if you think the same way I think, if you've similar needs
to mine, switch to CPUShare-Twisted.



From l.oluyede at gmail.com  Sun Jan 22 12:06:42 2006
From: l.oluyede at gmail.com (Lawrence Oluyede)
Date: Sun, 22 Jan 2006 20:06:42 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122170440.GK20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<9eebf5740601220233j42000bdboa5ad983281336272@mail.gmail.com>
	<20060122170440.GK20603@opteron.random>
Message-ID: <9eebf5740601221106r26783955wf6a0e923a67b76d1@mail.gmail.com>

On 1/22/06, Andrea Arcangeli <andrea at cpushare.com> wrote:
> On Sun, Jan 22, 2006 at 11:33:56AM +0100, Lawrence Oluyede wrote:
> > think it's wron and I don't know where one excludes the other. You can
>
> I've never said one excludes the other, I say that unit-test should not
> be mandatory, and if you should write the unit-test _after_ reviewing
> the code, not before.

I think that tests MUST BE mandatory in every project used and/or
developed from more than 1 people.

As Mr. Lefkowitz said in the other message Twisted is not test driven,
requires only test for submitted code and I think it's the right way
to go if you won't break older or future code.

> No my app isn't stateless, or I would be using the thread model too.
> The very cpushare protocol is complex in the way it handles race
> conditions and async event like disconnects, twisted makes life easy at
> the expense of scalability. This helps getting things working quick. And
> I use pb to attach the webserver to the cpushare server, this is why
> it's confortable for me to use twisted on the web side too (I'm not
> making queries to the db only).

Ok so you need Twisted, no question about that.

> Even before you write the unittest you should fix nevow, and that's not
> going to happen, it didn't happen in one year after I sent the first
> performance bottleneck reports, it sure can't happen in the few hours I
> spent writing these emails.

Why didn't you ask to join the project?

> Plus it'd be terrible to waste time on nevow when Cheetah is already an
> order of magnitude better and faster (IMHO of course).

Ok we are in the tastes domain :)

> The point is: if you think the same way I think, if you've similar needs
> to mine, switch to CPUShare-Twisted.

Understood.

--
Lawrence
http://www.oluyede.org/blog

From exarkun at divmod.com  Sun Jan 22 12:13:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 22 Jan 2006 14:13:06 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15665 - Rewritten endpoints
 (TCP and UNIX) with unittests
In-Reply-To: <E1F0boi-0005We-00@wolfwood>
Message-ID: <20060122191306.2697.388560981.divmod.quotient.835@ohm>

On Sun, 22 Jan 2006 02:47:24 -0700, David Reid <dreid at wolfwood.twistedmatrix.com> wrote:
>Author: dreid
>Date: Sun Jan 22 02:47:23 2006
>New Revision: 15665
>
>Added:
>   branches/dreid/endpoints/twisted/test/test_endpoints.py
>Modified:
>   branches/dreid/endpoints/twisted/internet/endpoints.py
>Log:
>Rewritten endpoints (TCP and UNIX) with unittests

This branch seems to have no ticket number, so I'm commenting here.

twisted/test/test_endpoints.py:

Several test methods of TestEndpoints define nested functions which discard the Deferred returned by a Port's stopListening method.  These need to be waiting on that Deferred.

Why do some tests bind to 127.0.0.1 and some to 127.0.0.2?

None of the tests assert that the protocol/port is hooked up to the right address, either on the local or remote side.

None of the tests exercise client-side binding.

The TCP and UNIX tests are basically identical, except for the endpoint class being used.  This is a lot of unnecessary code duplication.  Implement the tests with the endpoint class parameterized and then call them all twice, once with TCPEndpoint, once with UNIXEndpoint.

Lots of trailing whitespace throughout the file.

twisted/internet/endpoint.py:

Interface definitions have docstrings - they don't need "pass" (pass is only required to satisfy grammar requirements for /some/ statement, and the docstrings do just fine for that).

The docstrings of neither IClientEndpoint.connect nor IServerEndpoint.listen define the error type which the Deferred may fail with.  Is it really true that IServerEndpoint.listen will never callback its Deferred?  The tests seem to think otherwise.

Typo in IServerEndpoint.listen's docstring - "incomfing".

Also, these interfaces belong in twisted.internet.interfaces.

_EndpointClientFactory.buildProtocol should not be using callLater(0).  There is no guarantee that will be the correct time to deliver notification, and it is unnecessarily inefficient.  Instead, you probably want something like a ProtocolWrapper from twisted.protocols.policies.

self.callable(addr) in the same buildProtocol is user-code.  It would probably be useful for exceptions it raises to cause the Deferred associated with the factory to errback.  Currently, errors it causes will be logged and the Deferred passed back to the application will never fire or errback.

Similar comment for _EndpointServerFactory.buildProtocol's invocation of self.callable().

TCPEndpoint.listen - try/bareword except?  Why?  This looks like a perfect place for twisted.internet.defer.execute().

AddressToEndpoint looks like it should just be a function that returns either a TCPEndpoint or a UNIXEndpoint.

Trailing whitespace *and tabs* throughout.

Jean-Paul



From dreid at dreid.org  Sun Jan 22 14:21:19 2006
From: dreid at dreid.org (David Reid)
Date: Sun, 22 Jan 2006 13:21:19 -0800
Subject: [Twisted-Python] Re: [Twisted-commits] r15665 - Rewritten
	endpoints (TCP and UNIX) with unittests
In-Reply-To: <20060122191306.2697.388560981.divmod.quotient.835@ohm>
References: <20060122191306.2697.388560981.divmod.quotient.835@ohm>
Message-ID: <43D3F74F.1020506@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jean-Paul Calderone wrote:
> This branch seems to have no ticket number, so I'm commenting here.

Thanks for the comments, I'll create a ticket for it.

> twisted/test/test_endpoints.py:
> 
> Several test methods of TestEndpoints define nested functions which
> discard the Deferred returned by a Port's stopListening method.  These
> need to be waiting on that Deferred.
> 
> Why do some tests bind to 127.0.0.1 and some to 127.0.0.2?

The client connection attempts to 127.0.0.2 are there to make sure that
the connection fails.  It seemed logical at the time, but the time was
very late.

> None of the tests assert that the protocol/port is hooked up to the
> right address, either on the local or remote side.

I'll add these.

> None of the tests exercise client-side binding.

I'm not sure what you mean by this, but there is a test for each of the
endpoint classes that tests that the client can connect to a "normally
established server" Perhaps I didn't do this very well.

> The TCP and UNIX tests are basically identical, except for the endpoint
> class being used.  This is a lot of unnecessary code duplication. 
> Implement the tests with the endpoint class parameterized and then call
> them all twice, once with TCPEndpoint, once with UNIXEndpoint.

I wanted to get something that actually worked before I tried to factor
out duplicate, code.  But thanks for the note anyway.

> twisted/internet/endpoint.py:
> 
> Interface definitions have docstrings - they don't need "pass" (pass is
> only required to satisfy grammar requirements for /some/ statement, and
> the docstrings do just fine for that).

Noted.

> The docstrings of neither IClientEndpoint.connect nor
> IServerEndpoint.listen define the error type which the Deferred may fail
> with.  Is it really true that IServerEndpoint.listen will never callback
> its Deferred?  The tests seem to think otherwise.

I made comments about a deferred never callbacking at the end of the
day, because I didn't realize that obviously IServerEndpoint.listen will
call back with the IListeningPort, I forgot to adjust the docstrings.

> Typo in IServerEndpoint.listen's docstring - "incomfing".
> 
> Also, these interfaces belong in twisted.internet.interfaces.

I'll move them there.

> _EndpointClientFactory.buildProtocol should not be using callLater(0). 
> There is no guarantee that will be the correct time to deliver
> notification, and it is unnecessarily inefficient.  Instead, you
> probably want something like a ProtocolWrapper from
> twisted.protocols.policies.

I'll look into ProtocolWrapper.

> self.callable(addr) in the same buildProtocol is user-code.  It would
> probably be useful for exceptions it raises to cause the Deferred
> associated with the factory to errback.  Currently, errors it causes
> will be logged and the Deferred passed back to the application will
> never fire or errback.
>
> Similar comment for _EndpointServerFactory.buildProtocol's invocation of
> self.callable().

Oops

> TCPEndpoint.listen - try/bareword except?  Why?  This looks like a
> perfect place for twisted.internet.defer.execute().

I didn't know about defer.execute(), but thanks, I'll use it.

> AddressToEndpoint looks like it should just be a function that returns
> either a TCPEndpoint or a UNIXEndpoint.

I figured that out as I woke up this morning.

> Trailing whitespace *and tabs* throughout.

*grumble* *grumble* Yet-Another-Carbon-Emacs *grumble*

Thanks for the input JP.

- -David
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)

iD8DBQFD0/dLrsrO6aeULcgRAl8WAJ9YSYusZfZ7d+1T4WvyGWYPnIMTBACfXr/V
NTCZJGY+Q/1zsbWEqNWrkhg=
=EORJ
-----END PGP SIGNATURE-----



From sam at SpinwardStars.com  Sun Jan 22 18:10:24 2006
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Sun, 22 Jan 2006 18:10:24 -0700
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <20060122065218.GI20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
Message-ID: <6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>

At 2006-01-22 07:52 AM +0100, you wrote:
>My developmnt is generally test-driven. I'm only opposed to unit-test
>mandatory development to fix bugs or add new features.

Just my 2 cents worth:

It might help if you think of it not as a unit test,
but as a simplified test program that demonstrates
the failure. If you understand the problem, it's
generally possible to create a simplified program
that captures its essence for others to understand.

>Writing unit-test
>isn't the only way to test code. It's nice to have a unit test, even a
>simple one, but it shouldn't be mandatory.

Automated unit testing *is* the only way to *effectively*
test code. It's also the only way to ensure that someone
doesn't make a change at some later date that re-introduces
a bug; the unit test will point the finger at the guilty
party and the (newly-)broken code.

In fact, even if you don't write a unit test case or
program, you are doing unit testing when you duplicate
and report a bug.

You're either unit testing using automatic testing
methods (i.e., a test program) or you're unit testing
manually. Guess which tests will actually be run?

You're either unit testing a constrained chunk of code
with a limited, reasonably-well-defined range of behavior,
or you're unit testing a larger system with a wide range
of behavior and trying to determine, from the aggregate
behavior, whether a small change somewhere has changed
the system's behavior in an undesired fashion.
Guess which test will efficiently catch problems?

*Without* automated tests, you're testing the system
instead of the module--which is far less effective--
AND you're doing it manually--which means the test will
probably never be repeated to verify behavior after
some *other* change is made.

If you want stable, dependable code, WRITE THE TEST CASES.

Further IMO:

As a *user* of a variety of development tools and libraries
who *knows* how difficult it can be to duplicate a bug,
I always try to create a test program that demonstrates
the bug, and which can either become a test case or be
used, in whole or in part, to create a test case.

As a professional software developer, I automatically
reject any bug report (from the QA folks) that doesn't
provide sufficient information to duplicate a bug.
QA personnel are paid to find and document bugs; if
they don't, it's their problem, not mine. On the other
hand, I know that "users" of an open-source module
generally don't think they signed up to do QA (though
it's implicit in the open-source development model).

As someone who has released open-source software in the
past, and plans to do so again soon, the presence or
absence of a test program (AKA unit test) that demonstrates
a bug is often the deciding factor when I devote some of
my limited time to fixing bugs. Practical considerations
(mainly available time, but interest as well) tend to
result in the issue going to the end of the queue, and
therefore never being addressed (without a specific
need on my part).

So I see no reason why a unit test or test program
should not be required. Twisted, like most open-source
development projects, is a *cooperative* development
effort. And, as find myself telling my coworkers *far*
too often, if the code isn't tested, there's no
assurance that it works as intended or designed.

FINALLY (I sincerly hope!):

More generally, I think everyone on the list is now
well aware of both the range of opinions and the
Twisted requirements WRT test cases for reported bugs.
The project is Twisted, and has guidelines for
participation; it's to everyone's benefit to follow
the guidelines.

Now...
Can we PLEASE agree to disagree, stop sniping,
and devote mailing list bandwidth to "real" issues?!

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From andrea at cpushare.com  Sun Jan 22 18:50:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Mon, 23 Jan 2006 02:50:06 +0100
Subject: [Twisted-Python] Re: [Twisted-web] CPUShare-Twisted
In-Reply-To: <6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
	<6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
Message-ID: <20060123015006.GV20603@opteron.random>

On Sun, Jan 22, 2006 at 06:10:24PM -0700, Samuel Reynolds wrote:
> As a professional software developer, I automatically
> reject any bug report (from the QA folks) that doesn't
> provide sufficient information to duplicate a bug.

This is just a dream for me, the bug I've fixed this month as a
professional software developer (in my real job, nothing that has to do
with twisted) were not reproducible, not just by me, but by the
customers too. I found it after nailing in the crash dump for several
hours and there's no way I could ever hope to write a testcase to
reproduce it reliably even after I've fixed it (furthermore not all
hardware can reproduce it at all).

> So I see no reason why a unit test or test program
> should not be required. Twisted, like most open-source

We may argue about new features, but for bugfixes it makes no sense to
require them, and my mind isn't going to change about that.

> Can we PLEASE agree to disagree, stop sniping,
> and devote mailing list bandwidth to "real" issues?!

Yep.



From andrew-twisted at puzzling.org  Sun Jan 22 20:24:03 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 23 Jan 2006 14:24:03 +1100
Subject: [Twisted-Python] Bugfixes and tests [was: CPUShare-Twisted]
In-Reply-To: <20060123015006.GV20603@opteron.random>
References: <20060122015312.GC20603@opteron.random>
	<20060122045544.2697.96381428.divmod.quotient.702@ohm>
	<20060122065218.GI20603@opteron.random>
	<6.1.2.0.0.20060122173855.0273aea8@mail.myedl.com>
	<20060123015006.GV20603@opteron.random>
Message-ID: <20060123032403.GB383@home.puzzling.org>

On Mon, Jan 23, 2006 at 02:50:06AM +0100, Andrea Arcangeli wrote:
[...]
> 
> > So I see no reason why a unit test or test program
> > should not be required. Twisted, like most open-source
> 
> We may argue about new features, but for bugfixes it makes no sense to
> require them, and my mind isn't going to change about that.

Tests for bugfixes help ensure the bug remains fixed, just like how tests for
features help ensure the feature keeps working.  The difference is minimal,
except that bugs are usually much easier to specify and thus write tests for.

An anecdote: at one point, the FTP code in Twisted got rewritten, and as part of
that the person doing the rewrite decided it would be easiest to just remove
some tests rather than figure out how to update them[1].  Some time later, a bug
report got filed and I thought "I remember fixing this already" -- sure enough I
had, but the test that would have detected it had been thrown away in the
rewrite, so no-one noticed when the bug was reintroduced until after it had been
released.

Tests being thrown away almost never happens -- it was clearly a mistake that
time.  Based on the fact that our range of automated tests is always increasing
(aside from the rare hiccup like that one), I speculate that the number of bugs
prevented from recurring is probably quite high.  It's hard to measure;
generally code that breaks tests isn't committed.

Anyway, my point is this: the reason why Twisted is of such good quality (even
though there's still room to do much better) is because of the tests.   That's
why we're so fussy about having them.

-Andrew.

[1] To be fair the original tests weren't particularly well written, but neither
    was the rest of the FTP code...




From mail at david-watson.net  Mon Jan 23 02:39:10 2006
From: mail at david-watson.net (David Watson)
Date: Mon, 23 Jan 2006 09:39:10 -0000
Subject: [Twisted-Python] IMAP4 plain authentication
Message-ID: <001401c62000$dd864190$640ba8c0@hostile>

Hi,

My first post to this list, so apologies in advance if this has already been
discussed. I`ve been experimenting with some of the sample code from Abe
Fettings (very good) Twisted book and I`m a little stuck with one IMAP
authentication method.

The code is:

from twisted.protocols import imap4
from twisted.internet import protocol, defer

class IMAPFolderListProtocol(imap4.IMAP4Client):

    def serverGreeting(self, capabilities):
        self.registerAuthenticator(
            imap4.CramMD5ClientAuthenticator(self.factory.username))
        self.registerAuthenticator(
            imap4.LOGINAuthenticator(self.factory.username))
        authenticating = self.authenticate(self.factory.password)
        authenticating.addCallback(self.__loggedIn)
        authenticating.chainDeferred(self.factory.deferred)

    def __loggedIn(self, results):
        return self.list("", "*").addCallback(self.__gotMailboxList)

    def __gotMailboxList(self, list):
        return [boxInfo[2] for boxInfo in list]

    def connectionLost(self, reason):
        if not self.factory.deferred.called:
            # connection was lost unexpectedly!
            self.factory.deferred.errback(reason)

class IMAPFolderListFactory(protocol.ClientFactory):
    protocol = IMAPFolderListProtocol
    
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.deferred = defer.Deferred()
        
    def clientConnectionFailed(self, connection, reason):
        self.deferred.errback(reason)

if __name__ == "__main__":
    from twisted.internet import reactor
    import sys, getpass
    
    def printMailboxList(list):
        list.sort()
        for box in list:
            print box
        reactor.stop()

    def handleError(error):
        print >> sys.stderr, "Error:", error.getErrorMessage()
        reactor.stop()

    if not len(sys.argv) == 3:
        print "Usage: %s server login" % sys.argv[0]
        sys.exit(1)
        
    server = sys.argv[1]
    user = sys.argv[2]
    password = getpass.getpass("Password: ")
    factory = IMAPFolderListFactory(user, password)
    factory.deferred.addCallback(
        printMailboxList).addErrback(
        handleError)
    reactor.connectTCP(server, 143, factory)
    reactor.run()

However, when I try to connect to my IMAP4 server using this code, I get:

Error: No supported authentication schemes available: Server supports
['PLAIN'], client supports ['CRAM-MD5', 'LOGIN']

I can`t seem to find a suitable PLAIN method in IMAP4client, so before I
re-invent the wheel, is there a standard Twisted way to handle this
situation (or am I simply missing something obvious)?

Thanks,

David




From therve at free.fr  Mon Jan 23 04:00:38 2006
From: therve at free.fr (Thomas HERVE)
Date: Mon, 23 Jan 2006 12:00:38 +0100
Subject: [Twisted-Python] IMAP4 plain authentication
In-Reply-To: <001401c62000$dd864190$640ba8c0@hostile>
References: <001401c62000$dd864190$640ba8c0@hostile>
Message-ID: <20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>

Quoting David Watson <mail at david-watson.net>:

> I can`t seem to find a suitable PLAIN method in IMAP4client, so before I
> re-invent the wheel, is there a standard Twisted way to handle this
> situation (or am I simply missing something obvious)?

You may want to look at imap4.PLAINAuthenticator (and register it the same way
as CramMD5ClientAuthenticator and LOGINAuthenticator).

-- 
Thomas




From phil at bubblehouse.org  Mon Jan 23 07:08:16 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Mon, 23 Jan 2006 09:08:16 -0500
Subject: [Twisted-Python] IMAP4 plain authentication
In-Reply-To: <20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>
References: <001401c62000$dd864190$640ba8c0@hostile>
	<20060123120038.z4ex0we0bokkgows@itchy.wasabout.net>
Message-ID: <26D8FB16-99F9-451E-963A-23D732D04212@bubblehouse.org>

On Jan 23, 2006, at 6:00 AM, Thomas HERVE wrote:

> Quoting David Watson <mail at david-watson.net>:
>
>
>> I can`t seem to find a suitable PLAIN method in IMAP4client, so  
>> before I
>> re-invent the wheel, is there a standard Twisted way to handle this
>> situation (or am I simply missing something obvious)?
>>
>
> You may want to look at imap4.PLAINAuthenticator (and register it  
> the same way
> as CramMD5ClientAuthenticator and LOGINAuthenticator).

If you're just working through a tutorial you can disregard this, but  
you might consider the fact that the IMAPrev4 spec doesn't allow  
plaintext authentication over a non-SSL connection.

Of course, no server I know of implements the spec to the letter (I  
believe there's a reason for this I'm forgetting), but changing a  
reactor.connectTCP() call to a reactor.connectSSL() call (with the  
requisite arguments) is always something I find amazing (due to its  
simplicity)...

Hrm, that was a lot of parentheses....well, it's still early...

-phil



From andrew-twisted at puzzling.org  Mon Jan 23 08:28:19 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Jan 2006 02:28:19 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2mwtgrmde0.fsf@starship.python.net>
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
Message-ID: <20060123152819.GJ383@home.puzzling.org>

[moving this to twisted-python, where it clearly belongs]

Michael Hudson wrote:
[...]
> 
> Well, I've had a quick pop at the interesting bit of this task while
> travelling over the weekend: using the compiler module I can extract
> the docstrings and class hierachy of all the stuff in the Twisted
> source.  It's a touch fragile, but seems to work for all the
> constructions used by Twisted.
> 
> One issue is classes that are defined in one file but generally used
> from another, for example twisted.spread.jelly.Serializable is often
> (always?) imported as twisted.spread.pb.Serializable.  Where should it
> be documented it?

See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
suggestion of using __all__ to determine where an aliased thing should be
documented.

Another option is some sort of explicit hint to the doc extractor, e.g. a define
no-op call like "alias('Serializable')" in the relevant module that the doc
extractor could notice.  Or keep an explicit list of overrides in a file...

-Andrew.




From sbaush at gmail.com  Mon Jan 23 09:05:55 2006
From: sbaush at gmail.com (Sbaush)
Date: Mon, 23 Jan 2006 17:05:55 +0100
Subject: [Twisted-Python] Send/Receive UDP Packet
Message-ID: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>

Hi all.
In my application I have to do implement a lot of networking in python
My application can create with a GUI a XML file in a string.
This string has to be sended to another host. i need a python application
that send this string via UDP.
The packet of this communication is |int|payload|  where payload is the XML
string and int is an integer(size of packet).
After the send my application has to wait for a response from the other host
and has to receive response.
This should be implemented with separated thread. A thread send/receive
while another indipendent thread do same.

Is it possible with Twisted?
How is it possible with Twisted?
Is there any examples to learn twisted for this objective?

Thanks all.

Sorry for the big question but i don't know twisted very much, and sorry for
my english but i'm italian!

Regards.
--
Sbaush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060123/45e89da4/attachment.html>

From itamar at itamarst.org  Mon Jan 23 09:31:31 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Jan 2006 11:31:31 -0500
Subject: [Twisted-Python] Send/Receive UDP Packet
In-Reply-To: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>
References: <fc5d4c490601230805s1c16dc4eq@mail.gmail.com>
Message-ID: <1138033891.9365.1.camel@localhost.localdomain>

On Mon, 2006-01-23 at 17:05 +0100, Sbaush wrote:

> After the send my application has to wait for a response from the
> other host and has to receive response. 
> This should be implemented with separated thread. A thread
> send/receive while another indipendent thread do same. 

You don't need to use threads for this.

> Is it possible with Twisted?
> How is it possible with Twisted?
> Is there any examples to learn twisted for this objective?

http://twistedmatrix.com/projects/core/documentation/howto/udp.html is
one starting point.




From mwh at python.net  Mon Jan 23 10:14:32 2006
From: mwh at python.net (Michael Hudson)
Date: Mon, 23 Jan 2006 17:14:32 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <20060121050944.2697.434668864.divmod.quotient.497@ohm>
	<60ed19d40601202145m243be34cid30099645d93fa1d@mail.gmail.com>
	<2mwtgrmde0.fsf@starship.python.net>
	<20060123152819.GJ383@home.puzzling.org>
Message-ID: <2mbqy2n9xj.fsf@starship.python.net>

Andrew Bennetts <andrew-twisted at puzzling.org> writes:

> [moving this to twisted-python, where it clearly belongs]
>
> Michael Hudson wrote:
> [...]
>> 
>> Well, I've had a quick pop at the interesting bit of this task while
>> travelling over the weekend: using the compiler module I can extract
>> the docstrings and class hierachy of all the stuff in the Twisted
>> source.  It's a touch fragile, but seems to work for all the
>> constructions used by Twisted.
>> 
>> One issue is classes that are defined in one file but generally used
>> from another, for example twisted.spread.jelly.Serializable is often
>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>> be documented it?
>
> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
> suggestion of using __all__ to determine where an aliased thing should be
> documented.

Hmm, that could work.  Although having the "official" name for a class
different from its __name__ is fairly horrible :)

> Another option is some sort of explicit hint to the doc extractor, e.g. a define
> no-op call like "alias('Serializable')" in the relevant module that the doc
> extractor could notice.  Or keep an explicit list of overrides in a file...

These also could work, as could magic comments (though that would be
marginally harder).

Cheers,
mwh

-- 
  What the semicolon's anxious supporters fret about is the tendency
  of contemporary writers to use a dash instead of a semicolon and
  thus precipitate the end of the world.
                               -- Lynne Truss, "Eats, Shoots & Leaves"




From exarkun at divmod.com  Mon Jan 23 10:45:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 23 Jan 2006 12:45:09 -0500
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2mbqy2n9xj.fsf@starship.python.net>
Message-ID: <20060123174509.2697.1768642920.divmod.quotient.1079@ohm>

On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>
>> [moving this to twisted-python, where it clearly belongs]
>>
>> Michael Hudson wrote:
>> [...]
>>>
>>> Well, I've had a quick pop at the interesting bit of this task while
>>> travelling over the weekend: using the compiler module I can extract
>>> the docstrings and class hierachy of all the stuff in the Twisted
>>> source.  It's a touch fragile, but seems to work for all the
>>> constructions used by Twisted.
>>>
>>> One issue is classes that are defined in one file but generally used
>>> from another, for example twisted.spread.jelly.Serializable is often
>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>> be documented it?
>>
>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>> suggestion of using __all__ to determine where an aliased thing should be
>> documented.

+1 for using a mechanism associated with an existing Python idiom

>
>Hmm, that could work.  Although having the "official" name for a class
>different from its __name__ is fairly horrible :)
>
>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>> no-op call like "alias('Serializable')" in the relevant module that the doc
>> extractor could notice.  Or keep an explicit list of overrides in a file...
>
>These also could work, as could magic comments (though that would be
>marginally harder).

-1 for magic markup embedded in source files

Jean-Paul



From william.lewis at uk.bnpparibas.com  Mon Jan 23 11:27:19 2006
From: william.lewis at uk.bnpparibas.com (william.lewis at uk.bnpparibas.com)
Date: Mon, 23 Jan 2006 18:27:19 +0000
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a Win32
	Service.
Message-ID: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>

Hi

I am attempting to run a PBServer as a win32 service using the following 
code:

        import win32serviceutil
        import win32service
        import win32event
        from twisted.spread import pb
        from twisted.internet import reactor
        import node

        class NodeService(win32serviceutil.ServiceFramework):
                _svc_name_ = 'NodeService'
                _svc_display_name_ = 'Node Server'

                def __init__(self, args):
                        win32serviceutil.ServiceFramework.__init__(self, 
args)

                def SvcDoRun(self):
                        n = node.Node()
                        reactor.listenTCP(node.port, 
pb.PBServerFactory(n))
                        reactor.run()

                def SvcStop(self):
 self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
                        reactor.stop()

        if __name__ == '__main__':
                win32serviceutil.HandleCommandLine(NodeService)

where my class "node.Node" inherits from pb.Root

When I try to start the service it just exits quickly without actually 
starting, but without any error.
I have implemented other python TCP servers (e.g. a simple xml-rpc server 
using  xmlrpclib.py) as win32 services and so am
not sure why I am getting this behaviour. Any help would be appreciated.

Regards

William Lewis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060123/01f64fbb/attachment.html>

From ralf at brainbot.com  Mon Jan 23 11:43:43 2006
From: ralf at brainbot.com (Ralf Schmitt)
Date: Mon, 23 Jan 2006 19:43:43 +0100
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a Win32
	Service.
In-Reply-To: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
Message-ID: <43D523DF.5050609@brainbot.com>

william.lewis at uk.bnpparibas.com schrieb:
>
> Hi
>
> I am attempting to run a PBServer as a win32 service using the 
> following code:
> When I try to start the service it just exits quickly without actually 
> starting, but without any error.
No errors in the event log?





From itamar at itamarst.org  Mon Jan 23 12:16:40 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 23 Jan 2006 14:16:40 -0500
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a
	Win32 Service.
In-Reply-To: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
Message-ID: <1138043800.9365.8.camel@localhost.localdomain>

On Mon, 2006-01-23 at 18:27 +0000, william.lewis at uk.bnpparibas.com
wrote:
> 
> Hi 
> 
> I am attempting to run a PBServer as a win32 service using the
> following code: 
> 
>         import win32serviceutil 
>         import win32service 
>         import win32event 
>         from twisted.spread import pb 
>         from twisted.internet import reactor 
>         import node 
> 
>         class NodeService(win32serviceutil.ServiceFramework): 
>                 _svc_name_ = 'NodeService' 
>                 _svc_display_name_ = 'Node Server' 
> 
>                 def __init__(self, args): 
> 
> win32serviceutil.ServiceFramework.__init__(self, args) 
> 
>                 def SvcDoRun(self): 
>                         n = node.Node() 
>                         reactor.listenTCP(node.port,
> pb.PBServerFactory(n)) 
>                         reactor.run() 
> 
>                 def SvcStop(self): 
> 
> self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING) 
>                         reactor.stop() 
> 
>         if __name__ == '__main__': 
>                 win32serviceutil.HandleCommandLine(NodeService) 
> 
> where my class "node.Node" inherits from pb.Root 
> 
> When I try to start the service it just exits quickly without actually
> starting, but without any error. 

There are a number of issues with this code, e.g. SvcDoRun and SvcStop
are going to be called from a different thread, plus errors will
probably get lost as you are logging to stderr.

Here's some sample code that deals with these issues:
http://svn.twistedmatrix.com/cvs/sandbox/moonfallen/ntsvc/runner.py?view=auto&rev=12804

With one minor bug, it ought to do reactor.callFromThread(reactor.stop)
instead of reactor.stop().





From mike at stamen.com  Mon Jan 23 15:01:17 2006
From: mike at stamen.com (Michal Migurski)
Date: Mon, 23 Jan 2006 14:01:17 -0800
Subject: [Twisted-Python] Twisted n00b question
Message-ID: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>

Hello -

I'm completely new to Twisted and moderately (~1 year) experienced  
with Python, and I'm here because I need some help understanding how  
to set up a web proxy.

My goal: an HTTP proxy living on my local machine (OS X) that will  
transparently serve up web pages  to myself, while allowing me to  
snoop & log connections I make to remote servers. I want the  
equivalent of an Attention Trust recorder (http:// 
www.attentiontrust.org/services) without having to use Firefox.

My first attempt: using the demonstration service.tac as a starting  
point, I wrote a new Resource that can view the request. I got far  
enough to look inside the request object passed to my resource's  
render() method, and return a meaningful response showing that I was  
seeing accurate request information. So in that render() method, I  
generate a new HTTPClientFactory object which *should* be able to  
make a request the intended server and return the results. I stopped  
when I realized the documentation showed examples using reactor.run 
(), while advising that I should never actually use reactor.run() in  
a real app. So I'm stuck trying to  generate a new http client  
request while inside an http server.

My second attempt: I found the Proxy class in the twisted.web docs,  
which has this code snippet:

    from twisted.protocols import http
    f = http.HTTPFactory()
    f.protocol = Proxy

...which is great, but I'm now I'm not sure what I need to do with  
the "f" object to make it work in a .tac/twistd context. It seems  
like should be able to add a callback in there someplace to intercept  
the proxied requests and pick them apart, but I'm a little stuck.

Thanks in advance for any pointers or examples that may help.

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060123/27b3a2d0/attachment.html>

From neuzhoundxx at yahoo.com  Mon Jan 23 16:52:09 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Mon, 23 Jan 2006 15:52:09 -0800 (PST)
Subject: [Twisted-Python] newbie question
Message-ID: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>

 i tried to run the simpleserv.py and  simpleclient.py examples in windows xp, but i keep getting the below  trace back. could somebody please give me a hand and tell me what i  might be doing wrong? thanks!
  
  >>> Server said: hello, world!
  connection lost
  Connection lost - goodbye!
  Traceback (most recent call last):
    File "C:\pythonWork\simpleclient.py", line 52, in ?
      main()
    File "C:\pythonWork\simpleclient.py", line 48, in main
      reactor.run()
    File "C:\Python24\lib\site-packages\twisted\internet\posixbase.py", line 206, in run
      self.mainLoop()
    File "C:\Python24\lib\site-packages\twisted\internet\posixbase.py", line 214, in mainLoop
      self.runUntilCurrent()
  --- <exception caught here> ---
    File "C:\Python24\lib\site-packages\twisted\internet\base.py", line 541, in runUntilCurrent
      call.func(*call.args, **call.kw)
    File "C:\Python24\lib\site-packages\twisted\internet\base.py", line 397, in _continueSystemEvent
      for callList in sysEvtTriggers[1], sysEvtTriggers[2]:
  exceptions.TypeError: unsubscriptable object
  

		
---------------------------------
 Yahoo! Autos. Looking for a sweet ride? Get pricing, reviews, & more on new and used cars.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060123/0196b1e4/attachment.html>

From matt at pollenation.net  Mon Jan 23 16:55:40 2006
From: matt at pollenation.net (Matt Goodall)
Date: Mon, 23 Jan 2006 23:55:40 -0000 (GMT)
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>

> Hello -
>
> I'm completely new to Twisted and moderately (~1 year) experienced
> with Python, and I'm here because I need some help understanding how
> to set up a web proxy.
>
> My goal: an HTTP proxy living on my local machine (OS X) that will
> transparently serve up web pages  to myself, while allowing me to
> snoop & log connections I make to remote servers. I want the
> equivalent of an Attention Trust recorder (http://
> www.attentiontrust.org/services) without having to use Firefox.
>
> My first attempt: using the demonstration service.tac as a starting
> point, I wrote a new Resource that can view the request. I got far
> enough to look inside the request object passed to my resource's
> render() method, and return a meaningful response showing that I was
> seeing accurate request information. So in that render() method, I
> generate a new HTTPClientFactory object which *should* be able to
> make a request the intended server and return the results. I stopped
> when I realized the documentation showed examples using reactor.run
> (), while advising that I should never actually use reactor.run() in
> a real app. So I'm stuck trying to  generate a new http client
> request while inside an http server.
>
> My second attempt: I found the Proxy class in the twisted.web docs,
> which has this code snippet:
>
>     from twisted.protocols import http
>     f = http.HTTPFactory()
>     f.protocol = Proxy
>
> ...which is great, but I'm now I'm not sure what I need to do with
> the "f" object to make it work in a .tac/twistd context. It seems
> like should be able to add a callback in there someplace to intercept
> the proxied requests and pick them apart, but I'm a little stuck.

'f' is a protocol factory. It exists to create protocol instances
(proxy.Proxy) when something connects to a listening socket, typically a
TCP server.

Here's a complete .tac file that runs a proxy on port 8080.

{{{
from twisted.application import internet, service
from twisted.web import http, proxy

application = service.Application('proxy')

f = http.HTTPFactory()
f.protocol = proxy.Proxy
proxyService = internet.TCPServer(8080, f)
proxyService.setServiceParent(application)
}}}

Hope that helps.

- Matt




From corydodt at twistedmatrix.com  Mon Jan 23 17:19:50 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Mon, 23 Jan 2006 16:19:50 -0800
Subject: [Twisted-Python] Running a PBServerFactory TCP Server as a	Win32
	Service.
In-Reply-To: <1138043800.9365.8.camel@localhost.localdomain>
References: <OFAD140DA0.A4F70F51-ON802570FF.006337D4-802570FF.006560DB@bnpparibas.com>
	<1138043800.9365.8.camel@localhost.localdomain>
Message-ID: <43D572A6.70307@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Itamar Shtull-Trauring wrote:
> With one minor bug, it ought to do reactor.callFromThread(reactor.stop)
> instead of reactor.stop().

Fixed.


william.lewis at uk.bnpparibas.com wrote:
> When I try to start the service it just exits quickly without actually starting, but without any error.
> I have implemented other python TCP servers (e.g. a simple xml-rpc server using  xmlrpclib.py) as win32 services and so am
> not sure why I am getting this behaviour. Any help would be appreciated.
> 

BTW, errors are logged to the event log:Control Panel > Administrative Tools >
Event Viewer, then Application log, i think.  You can find python exceptions
there.


C



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFD1XKm3A5SrXAiHQcRAuJfAJ9QVVNAQCYEVOjNKiWtRPulX64VYgCfRG+6
WTb0TrP1LHbFyaarGNfqfek=
=0TkC
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Mon Jan 23 17:22:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 23 Jan 2006 19:22:01 -0500
Subject: [Twisted-Python] newbie question
In-Reply-To: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>
Message-ID: <20060124002201.2697.945027472.divmod.quotient.1094@ohm>

On Mon, 23 Jan 2006 15:52:09 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
> i tried to run the simpleserv.py and  simpleclient.py examples in windows xp, but i keep getting the below  trace back. could somebody please give me a hand and tell me what i  might be doing wrong? thanks!

This was a bug in the example: <http://twistedmatrix.com/bugs/issue1299>

Jean-Paul



From andrew-twisted at puzzling.org  Mon Jan 23 17:35:08 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 24 Jan 2006 11:35:08 +1100
Subject: [Twisted-Python] newbie question
In-Reply-To: <20060124002201.2697.945027472.divmod.quotient.1094@ohm>
References: <20060123235209.25856.qmail@web90202.mail.scd.yahoo.com>
	<20060124002201.2697.945027472.divmod.quotient.1094@ohm>
Message-ID: <20060124003508.GL383@home.puzzling.org>

On Mon, Jan 23, 2006 at 07:22:01PM -0500, Jean-Paul Calderone wrote:
> On Mon, 23 Jan 2006 15:52:09 -0800 (PST), john peter 
> <neuzhoundxx at yahoo.com> wrote:
> >i tried to run the simpleserv.py and  simpleclient.py examples in windows 
> >xp, but i keep getting the below  trace back. could somebody please give 
> >me a hand and tell me what i  might be doing wrong? thanks!
> 
> This was a bug in the example: <http://twistedmatrix.com/bugs/issue1299>

You can find the updated simpleclient.py here:
<http://svn.twistedmatrix.com/cvs/trunk/doc/core/examples/simpleclient.py?view=auto&rev=14968>

-Andrew.




From mike at stamen.com  Tue Jan 24 00:26:13 2006
From: mike at stamen.com (Michal Migurski)
Date: Mon, 23 Jan 2006 23:26:13 -0800
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
	<51343.82.0.168.223.1138060540.squirrel@webmail.pollenation.net>
Message-ID: <0FBCD39A-4124-43CF-8852-3F4FD3EFB3F4@stamen.com>

>> My second attempt: I found the Proxy class in the twisted.web docs,
>> which has this code snippet:
>>
>>     from twisted.protocols import http
>>     f = http.HTTPFactory()
>>     f.protocol = Proxy
>>
>> ...which is great, but I'm now I'm not sure what I need to do with
>> the "f" object to make it work in a .tac/twistd context. It seems
>> like should be able to add a callback in there someplace to intercept
>> the proxied requests and pick them apart, but I'm a little stuck.
>
> 'f' is a protocol factory. It exists to create protocol instances
> (proxy.Proxy) when something connects to a listening socket,  
> typically a
> TCP server.
>
> Here's a complete .tac file that runs a proxy on port 8080.
>
> {{{
> from twisted.application import internet, service
> from twisted.web import http, proxy
>
> application = service.Application('proxy')
>
> f = http.HTTPFactory()
> f.protocol = proxy.Proxy
> proxyService = internet.TCPServer(8080, f)
> proxyService.setServiceParent(application)
> }}}
>
> Hope that helps.

This is perfect.
I'm now subclassing Proxy, ProxyRequest, ProxyClientFactory and  
ProxyClient to get the results I want.

Thanks!

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610





From jdahlin at async.com.br  Tue Jan 24 06:24:07 2006
From: jdahlin at async.com.br (Johan Dahlin)
Date: Tue, 24 Jan 2006 11:24:07 -0200
Subject: [Twisted-Python] Re: Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <43D62A77.2080906@async.com.br>

> My goal: an HTTP proxy living on my local machine (OS X) that will 
> transparently serve up web pages  to myself, while allowing me to snoop 
> & log connections I make to remote servers. I want the equivalent of an 
> Attention Trust recorder (http://www.attentiontrust.org/services) 
> without having to use Firefox.

I wrote a little http proxy in twisted to help me debugging xmlrpc 
connections a while ago. It's just a tiny proof of concept and would require 
considerable improvements before getting really useful. For example it opens 
up a new connection for every request, let alone any error handling.

Hope you'll find it useful.

Johan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: proxy.py
Type: text/x-python
Size: 1180 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060124/0a04ced2/attachment-0002.py>

From jcea at argo.es  Tue Jan 24 09:50:55 2006
From: jcea at argo.es (Jesus Cea)
Date: Tue, 24 Jan 2006 17:50:55 +0100
Subject: [Twisted-Python] Still fighting "twisted.names.client"
Message-ID: <43D65AEF.8050704@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I started a thread a month ago, with no luck yet.
<http://twistedmatrix.com/pipermail/twisted-python/2005-December/012162.html>

I have a reduced test case, for ease diagnosis. I hope Jean-Paul
Calderone can have a look at the issue.

My current "simple" code (not the real application, of course) is:

===== File "dns4.tac" =====

from twisted.application import service

application = service.Application("DNS test")

import sys
sys.path=["."]+sys.path

from dns4 import DomainResolver
DomainResolver().setServiceParent(application)

====================

===== File "dns4.py" =====

class resolution(object) :
  def __init__(self,domain) :
    global myResolver
    d = myResolver.lookupMailExchange(domain,timeout=(5,))
    d.addCallbacks(self._cbMailExchange, None)

  def _cbMailExchange(self,results):
    # Callback for MX query
    print "XX",repr(results)
    from twisted.internet import reactor
    reactor.stop()
    return

from twisted.application import service

class DomainResolver(service.Service):
  def startService(self) :
    global myResolver

    from twisted.names import client
    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])

    resolution("argo.es")
    #resolution("argo.es")

====================

I launch the application with "twistd -n -y dns4.tac".

I get the following error: "twisted.names.dns.DNSDatagramProtocol (UDP)]
Unexpected message (32863) received from ('127.0.0.1', 53)". Apparently
Twisted is sending the DNS request (and getting the DNS answer) before
setting up the handling object.

If I uncomment the last line, to do two resolutions, the reactor is not
stoped, but an infinite loop is created, with the following (infinite)
error:

=====

2006/01/24 17:39 CET [twisted.names.dns.DNSDatagramProtocol (UDP)]
Traceback (most recent call last):
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/log.py", line 43,
in callWithContext
            return context.call({ILogContext: newCtx}, func, *args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
59, in callWithContext
            return self.currentContext().callWithContext(ctx, func,
*args, **kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/python/context.py", line
37, in callWithContext
            return func(*args,**kw)
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/selectreactor.py",
line 139, in _doReadOrWrite
            why = getattr(selectable, method)()
        --- <exception caught here> ---
          File
"/usr/local/lib/python2.4/site-packages/twisted/internet/udp.py", line
113, in doRead
            data, addr = self.socket.recvfrom(self.maxPacketSize)
        exceptions.AttributeError: 'Port' object has no attribute 'socket'

=====

Somebody could help me?. This issue is a showstopper in my twisted
learning :(.

Thanks in advance for your time.

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ9Za75lgi5GaxT1NAQLNogQAhsMS+inrIuVGuOg+QuP/6qyYMPMg6GRJ
f3s9zUONp9YaPD03uysNA0UfzR4SO4BN5h40mciQUUx4YnxZl1MpSwqf8jHNYnWh
wgJ7FsY6rjYeYNke7exBteMt2eNSdffATv6hpNqPVYx8KpJGDMyN+pkxRN+cJbfy
i0lmC5EXQj8=
=LWe7
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Jan 24 10:34:59 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Jan 2006 12:34:59 -0500
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <43D65AEF.8050704@argo.es>
Message-ID: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>

On Tue, 24 Jan 2006 17:50:55 +0100, Jesus Cea <jcea at argo.es> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA1
>
>I started a thread a month ago, with no luck yet.
><http://twistedmatrix.com/pipermail/twisted-python/2005-December/012162.html>
>
>I have a reduced test case, for ease diagnosis. I hope Jean-Paul
>Calderone can have a look at the issue.

Thanks for following up on this.  I couldn't reproduce the problem before, but with your new example I can.

>===== File "dns4.py" =====
>
>class resolution(object) :
>  def __init__(self,domain) :
>    global myResolver
>    d = myResolver.lookupMailExchange(domain,timeout=(5,))

Here, you're specifying that the lookup should use no retransmits, and should fail if no response is received after 5 seconds.  This isn't generally a good way to do DNS lookups, but IIRC you had a particular reason for wanting this.  In any case, the first bug you hit was one that caused the first message received in response to the first query made on a resolver object to be spuriously dropped.  Since most applications do re-transmits, this usually didn't cause anything more problematic than one extra DNS request/response.  I've fixed this in current trunk.

>    d.addCallbacks(self._cbMailExchange, None)
>
>  def _cbMailExchange(self,results):
>    # Callback for MX query
>    print "XX",repr(results)
>    from twisted.internet import reactor
>    reactor.stop()
>    return

It turns out there is a bug in Twisted's UDP support.  Calling reactor.stop() from beneath datagramReceived() triggers an infinite exception loop.  I've created a ticket in the tracker (1448) for this.  Until it's resolved, or if you want this to work on a previous release of Twisted, you can use "reactor.callLater(0, reactor.stop)" to avoid the problem.

>
>from twisted.application import service
>
>class DomainResolver(service.Service):
>  def startService(self) :
>    global myResolver
>
>    from twisted.names import client
>    myResolver=client.Resolver(servers=[('127.0.0.1', 53)])
>
>    resolution("argo.es")
>    #resolution("argo.es")
>
> [snip]
>
>Thanks in advance for your time.

Thanks for the minimal example :)

Jean-Paul



From ross at sourcelabs.com  Tue Jan 24 11:19:27 2006
From: ross at sourcelabs.com (Ross Jekel)
Date: Tue, 24 Jan 2006 10:19:27 -0800
Subject: [Twisted-Python] twistd question
Message-ID: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>

Hello, I have a small design problem I'm trying to get my head around 
regarding twistd with respect to lauching worker subprocesses. 

I have a requirement for every process on my server to be able to 
communicate to an existing message queuing system. The interface to this 
message queuing system requires that all processes be a "server" so that 
they can receive async messages. I have that all working fine and have the 
interface to the external system wrapped up in a nice service, as it us 
helpful to get the startService and stopService calls for properly 
initializing and shutting down the session to the message queuing system. 

As I have a mixture of a few long running requests and many short running 
requests that could be sent to the main server process, I would like to 
design my main service such that it can handle the short requests directly 
and spawn other subprocessing to handle the long-running requests. 

Since each of those subprocessing needs to be connected to the message 
queue, I'd like to use twistd to run them and benefit from the application 
level abstractions for setting up the service. But I'm not entirely sure how 
to use twistd property when I may have multiple instances of the same .tac 
file running. Basically, I need to spawn worker subprocessing that during 
the time they are doing work are services so that they can communicate with 
the messaging subsystem. 

Does this make sense? Any thoughts on how it can be accomplished? 

Ross



From ross at sourcelabs.com  Tue Jan 24 13:15:05 2006
From: ross at sourcelabs.com (Ross Jekel)
Date: Tue, 24 Jan 2006 12:15:05 -0800
Subject: [Twisted-Python] twistd question
In-Reply-To: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
References: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
Message-ID: <courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>

I forgot to mention one other item. The worker subprocesses are not involved 
in generating a network reponse to the request. Basically, the request sent 
to the main service process is, "Please do this at your earliest 
convenience", the request is validated and the server response with "okay," 
then launches the subprocess. 

Ross Jekel writes: 

> Hello, I have a small design problem I'm trying to get my head around 
> regarding twistd with respect to lauching worker subprocesses.  
> 
> I have a requirement for every process on my server to be able to 
> communicate to an existing message queuing system. The interface to this 
> message queuing system requires that all processes be a "server" so that 
> they can receive async messages. I have that all working fine and have the 
> interface to the external system wrapped up in a nice service, as it us 
> helpful to get the startService and stopService calls for properly 
> initializing and shutting down the session to the message queuing system.  
> 
> As I have a mixture of a few long running requests and many short running 
> requests that could be sent to the main server process, I would like to 
> design my main service such that it can handle the short requests directly 
> and spawn other subprocessing to handle the long-running requests.  
> 
> Since each of those subprocessing needs to be connected to the message 
> queue, I'd like to use twistd to run them and benefit from the application 
> level abstractions for setting up the service. But I'm not entirely sure 
> how to use twistd property when I may have multiple instances of the same 
> .tac file running. Basically, I need to spawn worker subprocessing that 
> during the time they are doing work are services so that they can 
> communicate with the messaging subsystem.  
> 
> Does this make sense? Any thoughts on how it can be accomplished?  
> 
> Ross 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
 




From jcea at argo.es  Tue Jan 24 17:09:13 2006
From: jcea at argo.es (Jesus Cea)
Date: Wed, 25 Jan 2006 01:09:13 +0100
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>
References: <20060124173459.2697.276202741.divmod.quotient.1334@ohm>
Message-ID: <43D6C1A9.7040203@argo.es>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Thanks for taking the time to look at the issue :).


Jean-Paul Calderone wrote:
> Here, you're specifying that the lookup should use no retransmits, and
> should fail if no response is received after 5 seconds.  This isn't
> generally a good way to do DNS lookups, but IIRC you had a particular
> reason for wanting this.

Basically, I'm running a real DNS caching server in tha same machine :),
so I don't need retrying.

> In any case, the first bug you hit was one
> that caused the first message received in response to the first query
> made on a resolver object to be spuriously dropped.  Since most
> applications do re-transmits, this usually didn't cause anything more
> problematic than one extra DNS request/response.  I've fixed this in
> current trunk.

How nice. Could you possibly send me the patch?.

> It turns out there is a bug in Twisted's UDP support.  Calling
> reactor.stop() from beneath datagramReceived() triggers an infinite
> exception loop.  I've created a ticket in the tracker (1448) for this. 
> Until it's resolved, or if you want this to work on a previous release
> of Twisted, you can use "reactor.callLater(0, reactor.stop)" to avoid
> the problem.

Good workaround. Thank you for the suggestion.

>> Thanks in advance for your time.
> 
> Thanks for the minimal example :)

Thanks to Ralph for suggesting that to me on Jabber/XMPP :).

- --
Jesus Cea Avion                         _/_/      _/_/_/        _/_/_/
jcea at argo.es http://www.argo.es/~jcea/ _/_/    _/_/  _/_/    _/_/  _/_/
                                      _/_/    _/_/          _/_/_/_/_/
PGP Key Available at KeyServ   _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iQCVAwUBQ9bBqZlgi5GaxT1NAQLPEwQAhOnfFbfEGqC7Rl4eMlMx273OFukJK7oK
YzMVAvl6ykEzVQ9MarM7kM9A5mYw1pVJctSLCEcEBmTtGpWUWmMFRv1lGCM4kniQ
QAWtv7gz/6zQhv6MVU6uTrzJCjU/1VOxVhMudSBxYUu12StIBqLAJIyfOSfA9a9z
+QcSWnVePjo=
=7utn
-----END PGP SIGNATURE-----



From exarkun at divmod.com  Tue Jan 24 17:48:04 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 24 Jan 2006 19:48:04 -0500
Subject: [Twisted-Python] Still fighting "twisted.names.client"
In-Reply-To: <43D6C1A9.7040203@argo.es>
Message-ID: <20060125004804.2697.16185941.divmod.quotient.1384@ohm>

On Wed, 25 Jan 2006 01:09:13 +0100, Jesus Cea <jcea at argo.es> wrote:
>>
>> In any case, the first bug you hit was one
>> that caused the first message received in response to the first query
>> made on a resolver object to be spuriously dropped.  Since most
>> applications do re-transmits, this usually didn't cause anything more
>> problematic than one extra DNS request/response.  I've fixed this in
>> current trunk.
>
>How nice. Could you possibly send me the patch?.
>

http://cvs.twistedmatrix.com/cvs/trunk/twisted/names/dns.py?view=diff&r2=15721&r1=15722&p1=trunk%2Ftwisted%2Fnames%2Fdns.py&p2=%2Ftrunk%2Ftwisted%2Fnames%2Fdns.py&diff_format=u

Jean-Paul



From foom at fuhm.net  Tue Jan 24 23:00:11 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 25 Jan 2006 00:00:11 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1F1dhT-0002qr-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-18 06:00:01.870000:
 Bugs opened: 25   Bugs closed: 8   Total open bugs: 550 (+17)
  Urgent: 9 (+0)
  Bug: 264 (+10)
  Feature: 187 (+5)
  Wish: 90 (+2)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[TRIAL] trial's minimal reporter is broken  (6 days ago)
       http://twistedmatrix.com/bugs/issue1426 opened by itamarst

                    ==== Bug ====
[TRIAL, WIN32] trial hangs indefinitely on win32er  (11 hours ago)
       http://twistedmatrix.com/bugs/issue1449 opened by exarkun

[NAMES] DNSDatagramProtocol.startProtocol can clobber important state  (12 hours ago)
CLOSED http://twistedmatrix.com/bugs/issue1447 opened by exarkun

[CORE] twisted.internet.udp.Port doesn't notice being disconnected  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1448 opened by exarkun

[CORE] twisted doesn't pass tests on FreeBSD  (2 days ago)
       http://twistedmatrix.com/bugs/issue1434 opened by titty

twisted.plugin.getCache fails on Windows  (yesterday)
       http://twistedmatrix.com/bugs/issue1445 opened by amberite

[WORDS, XISH] twisted.words.xish.domish doesn't deal with namespaces properly  (yesterday)
       http://twistedmatrix.com/bugs/issue1444 opened by ralphm

[WEB2] avoid exception in logbytecounter  (2 days ago)
       http://twistedmatrix.com/bugs/issue1437 opened by andrea

[WEB2] main.CONNECTION_LOST is not error.ConnectionLost().  (2 days ago)
       http://twistedmatrix.com/bugs/issue1435 opened by andrea

[MAIL] [imap4] mismatched quoting spuriously raised  (yesterday)
       http://twistedmatrix.com/bugs/issue1443 opened by jojo

[DEFERRED, DOCUMENTATION] Document DeferredSemaphore in "Using Deferreds"  (2 days ago)
       http://twistedmatrix.com/bugs/issue1432 opened by moof

proxy-authorization is a hop by hop header  (3 days ago)
       http://twistedmatrix.com/bugs/issue1431 opened by robertc

[CORE] Uninstalling tksupport is not working  (2 days ago)
       http://twistedmatrix.com/bugs/issue1433 opened by toledo

[TRIAL] trial reporter doesn't write to streams properly  (5 days ago)
       http://twistedmatrix.com/bugs/issue1430 opened by exarkun

web page left pane layout is broken (patch included)  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1429 opened by ghazel

z.i.Interface interfaces should not have "self" in method signatures  (6 days ago)
       http://twistedmatrix.com/bugs/issue1428 opened by marienz

[CORE] win32 process' signalProcess() should differentiate between clean and extreme-prejudice kills  (6 days ago)
       http://twistedmatrix.com/bugs/issue1427 opened by itamarst

                    ==== Feature ====
fastcgi client support in twisted.web2  (yesterday)
       http://twistedmatrix.com/bugs/issue1446 opened by PenguinOfDoom

[WEB2] add getCookie/setCookie to web2.http_headers.Headers  (2 days ago)
       http://twistedmatrix.com/bugs/issue1436 opened by andrea

[CORE] Endpoints a flexible high level connection API.  (2 days ago)
       http://twistedmatrix.com/bugs/issue1442 opened by dreid

[CORE] Support registering adapters by the fully qualified python name of objects involved  (2 days ago)
       http://twistedmatrix.com/bugs/issue1441 opened by exarkun

[CHAT] [PATCH] msnsupport/oscarsupport, t.w.im update  (2 days ago)
       http://twistedmatrix.com/bugs/issue1438 opened by moea

Implement spawnProcess for default reactor on Windows  (21 months ago)
CLOSED http://twistedmatrix.com/bugs/issue591 opened by justinj

                    ==== Wish ====
[CORE] Remove old cred  (2 days ago)
       http://twistedmatrix.com/bugs/issue1440 opened by exarkun

[CONCH] Manhole should support logging transcripts somehow  (2 days ago)
       http://twistedmatrix.com/bugs/issue1439 opened by exarkun

Bugs Closed
______________________
                    ==== Urgent ====
[CORE, PB] Stray print statement in twisted.pb.remoteinterface.RemoteInterfaceClass.__init__  (3 weeks ago)
       http://twistedmatrix.com/bugs/issue1394 opened by exarkun, closed by radix

[TRIAL] trial misreports pyunit test names  (7 days ago)
       http://twistedmatrix.com/bugs/issue1425 opened by itamarst, closed by jml

                    ==== Bug ====
[NAMES] DNSDatagramProtocol.startProtocol can clobber important state  (12 hours ago)
       http://twistedmatrix.com/bugs/issue1447 opened by exarkun, closed by exarkun

[CORE] posixbase win32 waker problem  (1 month ago)
       http://twistedmatrix.com/bugs/issue1344 opened by antony, closed by exarkun

[TRIAL] Trial temp directory behavior is a little off  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1413 opened by jml, closed by jml

web page left pane layout is broken (patch included)  (6 days ago)
       http://twistedmatrix.com/bugs/issue1429 opened by ghazel, closed by exarkun

[WEB] File inherrits from Resource class, which exports too much API  (1 week ago)
       http://twistedmatrix.com/bugs/issue1423 opened by wsanchez, closed by wsanchez

                    ==== Feature ====
Implement spawnProcess for default reactor on Windows  (21 months ago)
       http://twistedmatrix.com/bugs/issue591 opened by justinj, closed by glyph




From radeex at gmail.com  Wed Jan 25 02:01:51 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 20:01:51 +1100
Subject: [Twisted-Python] twistd question
In-Reply-To: <courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>
References: <courier.0000000043D66FB0.00001B33@mail-1.colo.sourcelabs.com>
	<courier.0000000043D68ACB.0000286E@mail-1.colo.sourcelabs.com>
Message-ID: <60ed19d40601250101t29d18254x6faf49165677547d@mail.gmail.com>

On 1/25/06, Ross Jekel <ross at sourcelabs.com> wrote:
> > Since each of those subprocessing needs to be connected to the message
> > queue, I'd like to use twistd to run them and benefit from the application
> > level abstractions for setting up the service. But I'm not entirely sure
> > how to use twistd property when I may have multiple instances of the same
> > .tac file running. Basically, I need to spawn worker subprocessing that
> > during the time they are doing work are services so that they can
> > communicate with the messaging subsystem.

I don't really see why you want the subprocesses to be run with
twistd. If all they do is do some computations that aren't given back
to the client, they might as well just be blocking code that you kick
off with a spawnProcess. Maybe you could shed a bit more light on what
these subprocesses will actually be doing, and what sort of data they
need to pass back to the main server, if any.


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mwh at python.net  Wed Jan 25 03:13:06 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 10:13:06 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
Message-ID: <2md5igliod.fsf@starship.python.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>>Andrew Bennetts <andrew-twisted at puzzling.org> writes:
>>
>>> [moving this to twisted-python, where it clearly belongs]
>>>
>>> Michael Hudson wrote:
>>> [...]
>>>>
>>>> Well, I've had a quick pop at the interesting bit of this task while
>>>> travelling over the weekend: using the compiler module I can extract
>>>> the docstrings and class hierachy of all the stuff in the Twisted
>>>> source.  It's a touch fragile, but seems to work for all the
>>>> constructions used by Twisted.
>>>>
>>>> One issue is classes that are defined in one file but generally used
>>>> from another, for example twisted.spread.jelly.Serializable is often
>>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>>> be documented it?
>>>
>>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>>> suggestion of using __all__ to determine where an aliased thing should be
>>> documented.
>
> +1 for using a mechanism associated with an existing Python idiom

The pb classes are not in an __all__ currently.  I also think that
__all__ is an abomination, but I'll try to suppress that :)

>>
>>Hmm, that could work.  Although having the "official" name for a class
>>different from its __name__ is fairly horrible :)
>>
>>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>>> no-op call like "alias('Serializable')" in the relevant module that the doc
>>> extractor could notice.  Or keep an explicit list of overrides in a file...
>>
>>These also could work, as could magic comments (though that would be
>>marginally harder).
>
> -1 for magic markup embedded in source files

There's going to need to be some magic/special casing at some level,
to deal with twisted.python.components.Interface.

Cheers,
mwh

-- 
  Screaming 14-year-old boys attempting to prove to each other that
  they are more 3133t than j00.
         -- Reason #8 for quitting slashdot today, from
            http://www.cs.washington.edu/homes/klee/misc/slashdot.html




From radeex at gmail.com  Wed Jan 25 03:35:13 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 21:35:13 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2md5igliod.fsf@starship.python.net>
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
Message-ID: <60ed19d40601250235k59f2b8b1v3007f8e7cbea0c81@mail.gmail.com>

On 1/25/06, Michael Hudson <mwh at python.net> wrote:
> Jean-Paul Calderone <exarkun at divmod.com> writes:
> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
> >>>> One issue is classes that are defined in one file but generally used
> >>>> from another, for example twisted.spread.jelly.Serializable is often
> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
> >>>> be documented it?
> >>>
> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
> >>> suggestion of using __all__ to determine where an aliased thing should be
> >>> documented.
> >
> > +1 for using a mechanism associated with an existing Python idiom
>
> The pb classes are not in an __all__ currently.  I also think that
> __all__ is an abomination, but I'll try to suppress that :)

I agree about __all__ being an abomination.  I also don't see how we
can use __all__ to determine where they're documented without doing
something weird or hard. For example,

from foo import bar
__all__ == 'bar'

with static analysis of Python code it is impossible to know what
source 'bar' is from. Ok, we can at least have a best try at finding
the source by trawling PYTHONPATH or something. Don't forget, we
should *also* either prevent the object from being documented at its
definition-source, or perhaps put a reference from there to the
"official" name in the docs.

Hence, I think it's better to have something more explicit to mark
"official FQPNs", like aliases =
{'twisted.spread.flavors.Referenceable':
'twisted.spread.pb.Referenceable'}.

> >>Hmm, that could work.  Although having the "official" name for a class
> >>different from its __name__ is fairly horrible :)

Is that a suggestion to hack the __name__ attribute, or to not do this
kind of interface-different-from-implementation stuff?

> >>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
> >>> no-op call like "alias('Serializable')" in the relevant module that the doc
> >>> extractor could notice.  Or keep an explicit list of overrides in a file...
> >>
> >>These also could work, as could magic comments (though that would be
> >>marginally harder).
> >
> > -1 for magic markup embedded in source files
>
> There's going to need to be some magic/special casing at some level,
> to deal with twisted.python.components.Interface.

I prefer something like __doc_alias__ = ... to alias(). It's faster! ;-)
I also wouldn't mind just putting this in some file *outside* of the
Python code, but I think I prefer slightly to have it next to where
it's relevant (and easier to maintain).

--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From radeex at gmail.com  Wed Jan 25 03:39:09 2006
From: radeex at gmail.com (Christopher Armstrong)
Date: Wed, 25 Jan 2006 21:39:09 +1100
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2md5igliod.fsf@starship.python.net>
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
Message-ID: <60ed19d40601250239g32ebffebh50151d6799cf67f5@mail.gmail.com>

On 1/25/06, Michael Hudson <mwh at python.net> wrote:
> There's going to need to be some magic/special casing at some level,
> to deal with twisted.python.components.Interface.

Oh right, I forgot to ask: what do you mean about this? extracting the
docs from an Interface should really be the same as extracting it from
a class... of course, it'd also be *hella* useful for the doc
extractor to find implements() lines in the *implementations* of those
Interfaces.. Is that what you're referring to?


--
  Twisted   |  Christopher Armstrong: International Man of Twistery
   Radix    |    -- http://radix.twistedmatrix.com
            |  Release Manager, Twisted Project
  \\\V///   |    -- http://twistedmatrix.com
   |o O|    |
w----v----w-+



From mwh at python.net  Wed Jan 25 05:12:13 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 12:12:13 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
	<60ed19d40601250239g32ebffebh50151d6799cf67f5@mail.gmail.com>
Message-ID: <2m8xt4ld5u.fsf@starship.python.net>

Christopher Armstrong <radeex at gmail.com> writes:

> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>> There's going to need to be some magic/special casing at some level,
>> to deal with twisted.python.components.Interface.
>
> Oh right, I forgot to ask: what do you mean about this? extracting the
> docs from an Interface should really be the same as extracting it from
> a class...

Well, I'm not entirely sure what I meant :) I was somewhat assuming
that you'd want to document interfaces differently from classes and
that specifically you'd want to document t.p.c.Interface *somehow* and
it's currently defined like this:

Interface = MetaInterface("Interface", __module__="twisted.python.components")

which doesn't look much like a class to my code.

> of course, it'd also be *hella* useful for the doc extractor to find
> implements() lines in the *implementations* of those Interfaces.. Is
> that what you're referring to?

No, but that could be done too.

Cheers,
mwh

-- 
  Well, you pretty much need Microsoft stuff to get misbehaviours
  bad enough to actually tear the time-space continuum.  Luckily 
  for you, MS Internet Explorer is available for Solaris.
                              -- Calle Dybedahl, alt.sysadmin.recovery




From mwh at python.net  Wed Jan 25 05:17:12 2006
From: mwh at python.net (Michael Hudson)
Date: Wed, 25 Jan 2006 12:17:12 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2mbqy2n9xj.fsf@starship.python.net>
	<20060123174509.2697.1768642920.divmod.quotient.1079@ohm>
	<2md5igliod.fsf@starship.python.net>
	<60ed19d40601250235k59f2b8b1v3007f8e7cbea0c81@mail.gmail.com>
Message-ID: <2m4q3slcxj.fsf@starship.python.net>

Christopher Armstrong <radeex at gmail.com> writes:

> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>> Jean-Paul Calderone <exarkun at divmod.com> writes:
>> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>> >>>> One issue is classes that are defined in one file but generally used
>> >>>> from another, for example twisted.spread.jelly.Serializable is often
>> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>> >>>> be documented it?
>> >>>
>> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>> >>> suggestion of using __all__ to determine where an aliased thing should be
>> >>> documented.
>> >
>> > +1 for using a mechanism associated with an existing Python idiom
>>
>> The pb classes are not in an __all__ currently.  I also think that
>> __all__ is an abomination, but I'll try to suppress that :)
>
> I agree about __all__ being an abomination.  I also don't see how we
> can use __all__ to determine where they're documented without doing
> something weird or hard. For example,
>
> from foo import bar
> __all__ == 'bar'
>
> with static analysis of Python code it is impossible to know what
> source 'bar' is from.

Not really, no: this is part of the reason my code defines a "System"
and shoves all the data into it.  So long as 'foo' is one of the
modules that gets fed to the extractor, you can resolve this kind of
thing (I've done it before).

> Ok, we can at least have a best try at finding the source by
> trawling PYTHONPATH or something. Don't forget, we should *also*
> either prevent the object from being documented at its
> definition-source, or perhaps put a reference from there to the
> "official" name in the docs.

Yes, absolutely.

> Hence, I think it's better to have something more explicit to mark
> "official FQPNs", like aliases =
> {'twisted.spread.flavors.Referenceable':
> 'twisted.spread.pb.Referenceable'}.

>> >>Hmm, that could work.  Although having the "official" name for a class
>> >>different from its __name__ is fairly horrible :)
>
> Is that a suggestion to hack the __name__ attribute, or to not do this
> kind of interface-different-from-implementation stuff?

Well, it just strikes me that

from twisted.mail.pop3client import POP3Client as AdvancedPOP3Client

is a little weird.  It will show up in reprs and so on as
"POP3Client", which seems likely to confuse the poor user if it's
"really" AdvancedPOP3Client.

>> >>> Another option is some sort of explicit hint to the doc extractor, e.g. a define
>> >>> no-op call like "alias('Serializable')" in the relevant module that the doc
>> >>> extractor could notice.  Or keep an explicit list of overrides in a file...
>> >>
>> >>These also could work, as could magic comments (though that would be
>> >>marginally harder).
>> >
>> > -1 for magic markup embedded in source files
>>
>> There's going to need to be some magic/special casing at some level,
>> to deal with twisted.python.components.Interface.
>
> I prefer something like __doc_alias__ = ... to alias(). It's faster! ;-)
> I also wouldn't mind just putting this in some file *outside* of the
> Python code, but I think I prefer slightly to have it next to where
> it's relevant (and easier to maintain).

Anything is possible :)

Cheers,
mwh

-- 
  The gripping hand is really that there are morons everywhere, it's
  just that the Americon morons are funnier than average.
                              -- Pim van Riezen, alt.sysadmin.recovery




From exarkun at divmod.com  Wed Jan 25 08:21:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 10:21:00 -0500
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
In-Reply-To: <2m4q3slcxj.fsf@starship.python.net>
Message-ID: <20060125152100.2697.1575957623.divmod.quotient.1554@ohm>

On Wed, 25 Jan 2006 12:17:12 +0000, Michael Hudson <mwh at python.net> wrote:
>Christopher Armstrong <radeex at gmail.com> writes:
>
>> On 1/25/06, Michael Hudson <mwh at python.net> wrote:
>>> Jean-Paul Calderone <exarkun at divmod.com> writes:
>>> > On Mon, 23 Jan 2006 17:14:32 +0000, Michael Hudson <mwh at python.net> wrote:
>>> >>>> One issue is classes that are defined in one file but generally used
>>> >>>> from another, for example twisted.spread.jelly.Serializable is often
>>> >>>> (always?) imported as twisted.spread.pb.Serializable.  Where should it
>>> >>>> be documented it?
>>> >>>
>>> >>> See http://twistedmatrix.com/bugs/issue1143.  It has the possibly useful
>>> >>> suggestion of using __all__ to determine where an aliased thing should be
>>> >>> documented.
>>> >
>>> > +1 for using a mechanism associated with an existing Python idiom
>>>
>>> The pb classes are not in an __all__ currently.  I also think that
>>> __all__ is an abomination, but I'll try to suppress that :)
>>
>> I agree about __all__ being an abomination.  I also don't see how we
>> can use __all__ to determine where they're documented without doing
>> something weird or hard. For example,
>>
>> from foo import bar
>> __all__ == 'bar'
>>
>> with static analysis of Python code it is impossible to know what
>> source 'bar' is from.
>
>Not really, no: this is part of the reason my code defines a "System"
>and shoves all the data into it.  So long as 'foo' is one of the
>modules that gets fed to the extractor, you can resolve this kind of
>thing (I've done it before).

Besides, you *have* to do this anyway:

    from foo import bar

    def baz():
        """
        See L{bar}.
        """

Jean-Paul



From leszczynscy at yahoo.com  Wed Jan 25 11:13:22 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Wed, 25 Jan 2006 10:13:22 -0800 (PST)
Subject: [Twisted-Python] reacting for bsddb changes
Message-ID: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>

Hi,

Short question. Is there any way to have an object
associates somehow with the reactor's main loop, so
the application can react for the changes in the
databases. I just want to avoid to have a timer which
would poll the Berkley db table periodically.

The application runs on Linux and M$ Windex.

Thanks, AndyL




From leszczynscy at yahoo.com  Wed Jan 25 14:37:35 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Wed, 25 Jan 2006 13:37:35 -0800 (PST)
Subject: [Twisted-Python] Performance footprint of the twisted.internet.task
Message-ID: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>

Hi,

I have three programs which do nothing besides a
certain function/code line is executed approximately
100 times a second. Not big deal it would seem.

1:
from twisted.internet import task
from twisted.internet import reactor

def runEverySecond():
    pass

l=task.LoopingCall(runEverySecond)
l.start(0.01)
reactor.run()


2:
import time

while 1:
    #f()
    time.sleep(0.01)

3:
from twisted.internet import reactor

def f(p):
    reactor.callLater(0.01,f,0)

f(0)

reactor.run()


* * *

I use version 1.3 of twisted on to of the python 2.3
and run it on Windows XP. Interestingly when executing
second and third snippet the CPU utilization is not
impacted while the first program leaves python taking
minimal but visible 1-2% of CPU.

Does anybody have any idea why it would take place?

Thx,
AndyL





From itamar at itamarst.org  Wed Jan 25 15:43:58 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 25 Jan 2006 17:43:58 -0500
Subject: [Twisted-Python] Performance footprint of the
	twisted.internet.task
In-Reply-To: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
References: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
Message-ID: <1138229038.9890.12.camel@localhost.localdomain>

On Wed, 2006-01-25 at 13:37 -0800, Andy Leszczynski wrote:

> I use version 1.3 of twisted on to of the python 2.3
> and run it on Windows XP. Interestingly when executing
> second and third snippet the CPU utilization is not
> impacted while the first program leaves python taking
> minimal but visible 1-2% of CPU.

What do you get with Twisted 2.1?




From exarkun at divmod.com  Wed Jan 25 21:54:40 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 23:54:40 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15740 - Add tests for
	TodoTest.
In-Reply-To: <E1F1uIH-00087e-00@wolfwood>
Message-ID: <20060126045440.2697.1730851462.divmod.quotient.1748@ohm>

On Wed, 25 Jan 2006 16:43:17 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Wed Jan 25 16:43:17 2006
>New Revision: 15740
>
>Modified:
>   trunk/twisted/trial/test/test_tests.py
>   trunk/twisted/trial/unittest.py
>Log:
>Add tests for TodoTest.
>Fix makeTodo(failure).
>
> [snip]
>@@ -65,7 +66,7 @@
>             errors = [errors]
>         return Todo(reason=reason, errors=errors)
>     if isinstance(value, failure.Failure):
>-        return Todo(reason=str(value))
>+        return Todo(reason=str(value.value))

How about value.getErrorMessage() here?

Jean-Paul



From exarkun at divmod.com  Wed Jan 25 21:55:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 25 Jan 2006 23:55:50 -0500
Subject: [Twisted-Python] Re: [Twisted-commits] r15739 - Add TodoTest;
	peer to SkipTest
In-Reply-To: <E1F1u8G-00086T-00@wolfwood>
Message-ID: <20060126045550.2697.1091573788.divmod.quotient.1749@ohm>

On Wed, 25 Jan 2006 16:32:57 -0700, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Wed Jan 25 16:32:56 2006
>New Revision: 15739
>
>Modified:
>   trunk/twisted/trial/unittest.py
>Log:
>Add TodoTest; peer to SkipTest
>
> [snip]
>@@ -467,8 +483,9 @@
>         if len(f.value.args) > 0:
>             reason = f.value.args[0]
>         else:
>-            warnings.warn(("Do not raise unittest.SkipTest with no "
>-                           "arguments! Give a reason for skipping tests!"),
>+            warnings.warn(("Do not raise unittest.SkipTest or "
>+                           "unittest.TodoTest with no arguments! Give a reason "
>+                           "for skipping tests!"),
>                           stacklevel=2)
>             reason = f
>         return reason

There's no reason to allow no arguments for this new feature.  The warning is in place for SkipTest because at one point it was allowed to raise a SkipTest with no reason, but this was never the case for TodoTest.

Jean-Paul



From glyph at divmod.com  Wed Jan 25 21:59:25 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 25 Jan 2006 23:59:25 -0500
Subject: [Twisted-Python] cleaning up unit test failures
In-Reply-To: 0
Message-ID: <20060126045925.2697.514573524.divmod.quotient.1751@ohm>

I just wanted to let everyone know that the recent buildbot failures on win32 (the process-related ones) are about half my fault.  At the time that I wrote the offending code, I couldn't get a full test run for the win32 reactor due to a problem which James Knight has since fixed (THANK YOU) and the process tests were passing.

I already have an issue in my queue which describes the problem <http://twistedmatrix.com/bugs/issue654> and I should be fixing it at the latest this weekend.

Anybody know how to fix the other half (mostly _setUpTestdir)?  The problems log for a recent win32select build is here: <http://twistedmatrix.com/buildbot/win32-select/builds/173/step-default/2>

There also seem to be some timing related issues which seem like they should just be todo'd until someone writes a version that has a fake timer rather than a real clock in them.



From exarkun at divmod.com  Wed Jan 25 23:04:19 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Jan 2006 01:04:19 -0500
Subject: [Twisted-Python] cleaning up unit test failures
In-Reply-To: <20060126045925.2697.514573524.divmod.quotient.1751@ohm>
Message-ID: <20060126060419.2697.847879699.divmod.quotient.1765@ohm>

On Wed, 25 Jan 2006 23:59:25 -0500, glyph at divmod.com wrote:
>I just wanted to let everyone know that the recent buildbot failures on 
>win32 (the process-related ones) are about half my fault.  At the time that 
>I wrote the offending code, I couldn't get a full test run for the win32 
>reactor due to a problem which James Knight has since fixed (THANK YOU) and 
>the process tests were passing.
>
>I already have an issue in my queue which describes the problem 
><http://twistedmatrix.com/bugs/issue654> and I should be fixing it at the 
>latest this weekend.
>
>Anybody know how to fix the other half (mostly _setUpTestdir)?  The problems 
>log for a recent win32select build is here: 
><http://twistedmatrix.com/buildbot/win32-select/builds/173/step-default/2>
>
>There also seem to be some timing related issues which seem like they should 
>just be todo'd until someone writes a version that has a fake timer rather 
>than a real clock in them.

If you're referring to the newpb failures, I think we need some other way to deal with them.  I've been trying to catch Warner online, but haven't succeeded so far.

Should this code go back into a branch?  Should buildbot just not run the newpb tests?  Neither of these seems really satisfactory to me, but these failures shouldn't be failing builds: they never passed reliably in the first place.

Jean-Paul



From tv at twistedmatrix.com  Thu Jan 26 01:54:07 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Thu, 26 Jan 2006 10:54:07 +0200
Subject: [Twisted-Python] reacting for bsddb changes
In-Reply-To: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>
References: <20060125181322.78929.qmail@web30009.mail.mud.yahoo.com>
Message-ID: <43D88E2F.7030900@twistedmatrix.com>

Andy Leszczynski wrote:
> Short question. Is there any way to have an object
> associates somehow with the reactor's main loop, so
> the application can react for the changes in the
> databases. I just want to avoid to have a timer which
> would poll the Berkley db table periodically.
> 
> The application runs on Linux and M$ Windex.

How would you do that without twisted?



From leszczynscy at yahoo.com  Thu Jan 26 19:14:05 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Thu, 26 Jan 2006 21:14:05 -0500
Subject: [Twisted-Python] Performance footprint of
	the	twisted.internet.task
In-Reply-To: <1138229038.9890.12.camel@localhost.localdomain>
References: <20060125213735.16109.qmail@web30011.mail.mud.yahoo.com>
	<1138229038.9890.12.camel@localhost.localdomain>
Message-ID: <43D981ED.2080409@yahoo.com>

Itamar Shtull-Trauring wrote:

>On Wed, 2006-01-25 at 13:37 -0800, Andy Leszczynski wrote:
>
>  
>
>>I use version 1.3 of twisted on to of the python 2.3
>>and run it on Windows XP. Interestingly when executing
>>second and third snippet the CPU utilization is not
>>impacted while the first program leaves python taking
>>minimal but visible 1-2% of CPU.
>>    
>>
>
>What do you get with Twisted 2.1?
>  
>
With python2.4 and twisted2.1 I do not observe that phenomena any more. 
I guess it is time to upgrade :-). Thx for the hint.

A.



From neuzhoundxx at yahoo.com  Thu Jan 26 21:27:34 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Thu, 26 Jan 2006 20:27:34 -0800 (PST)
Subject: [Twisted-Python] is it possible to have a (single) twisted client
	that
Message-ID: <20060127042734.89998.qmail@web90203.mail.scd.yahoo.com>

 makes more than one (say, three) connections to the same server instance?
  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests.  All three connections share DATA ID  information,  but should otherwise have "independent" existence so  that they can be configured to have different "behavioral" attributes;  that is, the ADD connection saves the data ids for items successfully  persisted to an 'in-memory' table for later lookups, and UPDATE and  DELETE requests can only be issued for DATA IDs known to be valid for  the "current" session (thus, the "in-memory" table lookups) and each  connection may have attributes such as "send" rates, etc.
  
  If this is possible, could someone please give me some pointers on what  twisted code to study/ look at?  thank you very much for your help!
  

		
---------------------------------
Do you Yahoo!?
 With a free 1 GB, there's more in store with Yahoo! Mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060126/1ca005ad/attachment.html>

From exarkun at divmod.com  Thu Jan 26 21:44:03 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 26 Jan 2006 23:44:03 -0500
Subject: [Twisted-Python] is it possible to have a (single) twisted
	client that
In-Reply-To: <20060127042734.89998.qmail@web90203.mail.scd.yahoo.com>
Message-ID: <20060127044403.2697.206981496.divmod.quotient.1936@ohm>

On Thu, 26 Jan 2006 20:27:34 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
> makes more than one (say, three) connections to the same server instance?
>  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests.  All three connections share DATA ID  information,  but should otherwise have "independent" existence so  that they can be configured to have different "behavioral" attributes;  that is, the ADD connection saves the data ids for items successfully  persisted to an 'in-memory' table for later lookups, and UPDATE and  DELETE requests can only be issued for DATA IDs known to be valid for  the "current" session (thus, the "in-memory" table lookups) and each  connection may have attributes such as "send" rates, etc.
>
>  If this is possible, could someone please give me some pointers on what  twisted code to study/ look at?  thank you very much for your help!
>

This is as easy as calling reactor.connectTCP() three times.  There's nothing special about the first call, or the second call, or the third call.  Each one just sets up a connection attempt.

Try taking echoclient.py from the core examples and adding some more connectTCP calls to it, see what happens.

Jean-Paul



From mwh at python.net  Fri Jan 27 05:13:18 2006
From: mwh at python.net (Michael Hudson)
Date: Fri, 27 Jan 2006 12:13:18 +0000
Subject: [Twisted-Python] Re: [Twisted-web] Re: Actual Useful Post
References: <2m4q3slcxj.fsf@starship.python.net>
	<20060125152100.2697.1575957623.divmod.quotient.1554@ohm>
Message-ID: <2mvew5j2ch.fsf@starship.python.net>

Jean-Paul Calderone <exarkun at divmod.com> writes:

> Besides, you *have* to do this anyway:
>
>     from foo import bar
>
>     def baz():
>         """
>         See L{bar}.

This is really easy if bar really is "foo.bar".  If foo is a local
import, or if foo.py does

from baz import quux as bar

then it's harder, but still possible -- I wrote code last night to
handle the latter case and will check it in soon-ish.

Cheers,
mwh

-- 
  I can't see a conspicuous evolutionary advantage in being good
  at higher mathematics.                           -- James Riden, asr




From mike at stamen.com  Fri Jan 27 11:51:22 2006
From: mike at stamen.com (Michal Migurski)
Date: Fri, 27 Jan 2006 10:51:22 -0800
Subject: [Twisted-Python] Twisted n00b question
In-Reply-To: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
References: <92F6B501-CE0D-44BA-86FD-B91313FF24D8@stamen.com>
Message-ID: <738A7B99-A5C3-40BC-9E0C-84A26F6717E4@stamen.com>

> My goal: an HTTP proxy living on my local machine (OS X) that will  
> transparently serve up web pages  to myself, while allowing me to  
> snoop & log connections I make to remote servers. I want the  
> equivalent of an Attention Trust recorder (http:// 
> www.attentiontrust.org/services) without having to use Firefox.

I finished the proof-of-concept I needed, it's available at http:// 
mike.teczno.com/notes/attention-proxy.html if anyone is interested in  
recording their browsing history. =)

-mike.

----------------------------------------------------------------
michal migurski- mike at stamen.com
                  415.558.1610


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060127/6c6d2752/attachment.html>

From alengarbage at yahoo.com  Fri Jan 27 20:23:50 2006
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Fri, 27 Jan 2006 19:23:50 -0800 (PST)
Subject: [Twisted-Python] parallel callbacks? Or inserting into the callback
	chain?
Message-ID: <20060128032350.53467.qmail@web31513.mail.mud.yahoo.com>

Is there any way to make a deferred call its callbacks
'in parallel,' or to insert a callback into the
callback chain at a point further up than the end?  Or
maybe there is some other pattern for doing what I
need to accomplish, which is getting the result from a
deferred before it gets modified by the return of
other callbacks that have already been added, but
before it is fired.

Here is an example that illustrates why I need
something like this.  It is almost identical to the
first example in the deferred howto
(http://twistedmatrix.com/projects/core/documentation/howto/defer.html):

from twisted.internet import reactor, defer

pending = {}

def getDummyData(queryName, x):
    if pending.has_key(x):
        print "%s piggybacking on pending big
expensive query" 
            % queryName
        return pending[x]

    d = defer.Deferred()
    # simulate a delayed result by asking the reactor
to fire the
    # Deferred in 2 seconds time with the result x*3
    print "%s about to do some big expensive query" %
queryName
    reactor.callLater(2, d.callback, x*3)
    pending[x] = d
    return d

def printData(d, queryName):
    """
    Data handling function to be added as a callback:
handles the
    data by printing the result
    """
    print "%s received: %s" % (queryName, d)

# simulate two calls (originating from some client[s])
at roughly the same
# time for the same query.
d = getDummyData('query1',3)
d.addCallback(printData,'query1')
d = getDummyData('query2',3)
d.addCallback(printData,'query2')

# manually set up the end of the process by asking the
reactor to
# stop itself in 13 seconds time
reactor.callLater(4, reactor.stop)
# start up the Twisted reactor (event loop handler)
manually
reactor.run()


The output, as you might expect, looks like this:

query1 about to do some big expensive query thing
query2 piggybacking on pending big expensive query
thing
query1 received: 9
query2 received: None

I'd like the output for query2 to match that of
query1.

Of course, this could be accomplished by adding a
'return d' to the end of printData(), but this is not
feasible in this case, because the caller of
getDummyData() might have added his own callbacks (in
addition to printData()) that do whatever it is that
he desires, including changing the return result or
not propogating it up the chain.

In the scenario I am designing for, getDummyData()
will be invoked by client(s), and we don't want to
open up new "big expensive" queries to the source if
one is already pending that matches.  Thus, I'd love
for getDummyData() to return a deferred that
piggybacks on an existing query, if one that matches
is still pending.

Can this be done?  Is there a way to modify the above
[simple] example so that it performs this behavior? 
Is there some other way to approach the problem that
I'm missing?

Thanks,
Lenny G.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From neuzhoundxx at yahoo.com  Fri Jan 27 21:16:49 2006
From: neuzhoundxx at yahoo.com (john peter)
Date: Fri, 27 Jan 2006 20:16:49 -0800 (PST)
Subject: [Twisted-Python] is it possible to have a (single) twisted client
	that
In-Reply-To: <20060127044403.2697.206981496.divmod.quotient.1936@ohm>
Message-ID: <20060128041649.64035.qmail@web90206.mail.scd.yahoo.com>

Thank you. I wonder if I could ask a follow-on question.
  Below is a version of echoclient that seems to work.
  I overrode EchoFactory's __init__ method to initialize the client id
  "generator" to zero and the buildProtocol method to create a protocol
  instance and give that instance its own unique id.  I stop the reactor when the last connection "signs off".
  
  I'm now wondering: what's the best way to enable the protocol instances  to have different behaviors? Here's my current thinking:  Maybe I  can have EchoFactory pass an appropriate "delegate" object to each  protocol instance so that the implementation of methods such as  connectionMade would be something like this:
  
  def connectionMade(self):
        self.delegate.connectionMade()
  
  The approach I was thinking of using to pass this delegate from  EchoFactory to a protocol instance was something "hokey" like if  next_client_id = 1, then pass to the protocol instance the delegate  object associated with a key of 1 in the dictionary { 1:delegate1,  2:delegate2, ...}.  Are there better approaches available? Again,  thanks for any help or advice!
  
  
  sample code for a multi-connect client:
  -----------------------------------------------------------------------------------------------------------
  from twisted.internet import reactor, protocol
  
  
  # a client protocol
  
  class EchoClient(protocol.Protocol):
      """Once connected, send a message, then print the result."""
      
      def __init__(self, id):
          self.id = id
  
      def connectionMade(self):
          self.transport.write("sender# %d says: hello, world!" % self.id)
      
      def dataReceived(self, data):
          "As soon as any data is received, write it back."
          print "Server said:", data
          self.transport.loseConnection()
      
      def connectionLost(self, reason):
          print "connection lost"
          from twisted.internet import reactor
          #reactor.stop()
  
  
  class EchoFactory(protocol.ClientFactory):
      protocol = EchoClient
  
      def __init__(self):
          self.next_client_id = 0
  
      def buildProtocol(self, addr):
          print "buildProtocol called"
          self.next_client_id += 1
          p = self.protocol(self.next_client_id)
          p.factory = self
          return p
  
      def clientConnectionFailed(self, connector, reason):
          print "Connection failed - goodbye!"
          reactor.stop()
      
      def clientConnectionLost(self, connector, reason):
          print "Connection lost - goodbye!"
          print "numPorts= %d" % self.numPorts
          if self.numPorts == 1:
              reactor.stop()
  
  
  # this connects the protocol to a server runing on port 8000
  def main():
      f = EchoFactory()
      reactor.connectTCP("localhost", 8000, f)
      reactor.connectTCP("localhost", 8000, f)
      reactor.connectTCP("localhost", 8000, f)
      reactor.run()
  
  # this only runs if the module was *not* imported
  if __name__ == '__main__':
      main()
  
  

Jean-Paul Calderone <exarkun at divmod.com> wrote:  On Thu, 26 Jan 2006 20:27:34 -0800 (PST), john peter  wrote:
> makes more than one (say, three) connections to the same server instance?
>  i was thinking of something like this: an 'ADD' connection that sends  new data items to the server for saving, an 'UPDATE' connection that  sends data update requests, and a 'DELETE' connection that sends data  deletion requests. All three connections share DATA ID information, but  should otherwise have "independent" existence so that they can be  configured to have different "behavioral" attributes; that is, the ADD  connection saves the data ids for items successfully persisted to an  'in-memory' table for later lookups, and UPDATE and DELETE requests can  only be issued for DATA IDs known to be valid for the "current" session  (thus, the "in-memory" table lookups) and each connection may have  attributes such as "send" rates, etc.
>
> If this is  possible, could someone please give me some pointers on what twisted  code to study/ look at? thank you very much for your help!
>

This  is as easy as calling reactor.connectTCP() three times. There's nothing  special about the first call, or the second call, or the third call.  Each one just sets up a connection attempt.

Try taking echoclient.py from the core examples and adding some more connectTCP calls to it, see what happens.

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



		
---------------------------------
 
 What are the most popular cars? Find out at Yahoo! Autos 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060127/182254d4/attachment.html>

From leszczynscy at yahoo.com  Fri Jan 27 21:27:20 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Fri, 27 Jan 2006 20:27:20 -0800 (PST)
Subject: [Twisted-Python] Deferred ownership and the Protocols
Message-ID: <20060128042720.48877.qmail@web30012.mail.mud.yahoo.com>

Hi,

I am in the process of designing the custom Protocol
and will use Deferred-s in order to pass the
asynchronous results. I try to learn from the current
Twisted code base.

For instance there are two modules smtp.py and
web/client.py:

def getPage(url, contextFactory=None, *args,
**kwargs):
[
]
    factory = HTTPClientFactory(url, *args, **kwargs)
[
]
        reactor.connectTCP(host, port, factory)
[
]
    return factory.deferred




def sendEmail(smtphost, fromEmail, toEmail, content,
headers = None, attachments = None, multipartbody =
"mixed"):
[
]
    d = defer.Deferred()
    factory = SMTPSenderFactory(fromEmail, toEmail, f,
d)
    reactor.connectTCP(smtphost, 25, factory)
    return d


In the first case the deferred is owned/created by the
Factory, in the second by the sendEmail helper. Is
there any reason behind those, what is the
recommendation? If my question is not clear :-), let
me know.

Thx,
Andy



From exarkun at divmod.com  Fri Jan 27 21:36:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 27 Jan 2006 23:36:15 -0500
Subject: [Twisted-Python] is it possible to have a (single) twisted
	client that
In-Reply-To: <20060128041649.64035.qmail@web90206.mail.scd.yahoo.com>
Message-ID: <20060128043615.2697.1834581128.divmod.quotient.2108@ohm>

On Fri, 27 Jan 2006 20:16:49 -0800 (PST), john peter <neuzhoundxx at yahoo.com> wrote:
>Thank you. I wonder if I could ask a follow-on question.
>  Below is a version of echoclient that seems to work.
>  I overrode EchoFactory's __init__ method to initialize the client id
>  "generator" to zero and the buildProtocol method to create a protocol
>  instance and give that instance its own unique id.  I stop the reactor when the last connection "signs off".
>
>  I'm now wondering: what's the best way to enable the protocol instances  to have different behaviors? Here's my current thinking:  Maybe I  can have EchoFactory pass an appropriate "delegate" object to each  protocol instance so that the implementation of methods such as  connectionMade would be something like this:
>
>  def connectionMade(self):
>        self.delegate.connectionMade()
>
>  The approach I was thinking of using to pass this delegate from  EchoFactory to a protocol instance was something "hokey" like if  next_client_id = 1, then pass to the protocol instance the delegate  object associated with a key of 1 in the dictionary { 1:delegate1,  2:delegate2, ...}.  Are there better approaches available? Again,  thanks for any help or advice!
>

You could make the "delegates" into the actual protocols:

    from twisted.internet import protocol

    class ClientOne(protocol.Protocol):
        # Stuff for the first client to do

    class ClientTwo(protocol.Protocol):
        # Stuff for the second client to do

    # etc
    for protoClass in ClientOne, ClientTwo:
        f = protocol.ClientFactory()
        f.protocol = protoClass
        reactor.connectTCP("host", 8000, f)

Jean-Paul



From alengarbage at yahoo.com  Fri Jan 27 22:54:54 2006
From: alengarbage at yahoo.com (Lenny G Arbage)
Date: Fri, 27 Jan 2006 21:54:54 -0800 (PST)
Subject: [Twisted-Python] Re: parallel callbacks? Or inserting into the
	callback chain?
Message-ID: <20060128055454.3204.qmail@web31513.mail.mud.yahoo.com>

Okay, I think I figured it out.  The idea is to create
new Deferreds for each call, but keep the 'matching'
ones in a list.  Then, when the first fires, use it to
fire callbacks for each of those:

from twisted.internet import reactor, defer

pending = {}
waiting = {}

def getDummyData(queryName, x):

    def serviceWaiting(res, x):
        #print "in saveResult"
        if waiting.has_key(x):
            #print "waiting has_key"
            for i in waiting[x]:
                #print "calling back with %s on %s" %
(res, i)
                i.callback(res)
            waiting.pop(x)
        pending.pop(x)
        #print "pending now: %s" % pending
        #print "waiting now: %s" % waiting
        return res

    if pending.has_key(x):
        print "%s piggybacking on pending big
expensive query" % queryName
        d = defer.Deferred()
        if not waiting.has_key(x):
            waiting[x] = []
        waiting[x].append(d)
        #print "returning %s" % d
        return d

    d = defer.Deferred()
    # simulate a delayed result by asking the reactor
to fire the
    # Deferred in 2 seconds time with the result x*3
    print "%s about to do some big expensive query" %
queryName
    reactor.callLater(2, d.callback, x*3)
    pending[x] = d
    d.addCallback(serviceWaiting, x)   # addBoth() may
be a better choice
    return d

def printData(d, queryName):
    """
    Data handling function to be added as a callback:
handles the
    data by printing the result
    """
    print "%s received: %s" % (queryName, d)

d = getDummyData('query1',3)
d.addCallback(printData,'query1')
d = getDummyData('query2',3)
d.addCallback(printData,'query2')

# manually set up the end of the process by asking the
reactor to
# stop itself in 13 seconds time
reactor.callLater(4, reactor.stop)
# start up the Twisted reactor (event loop handler)
manually
reactor.run()


I was making it harder than it needed to be.

Lenny G.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From emlprime at yahoo.com  Sun Jan 29 16:51:25 2006
From: emlprime at yahoo.com (Peter Stradinger)
Date: Sun, 29 Jan 2006 15:51:25 -0800 (PST)
Subject: [Twisted-Python] Perspective Broker example broken
Message-ID: <20060129235125.57838.qmail@web52704.mail.yahoo.com>

Hi,

I'm trying to get the Authentication with Perspective Broker examples to work, and I'm getting a
Failure:

http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatserver.py
http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatclient.py

The server returns this error when you run the client:

Unhandled error in Deferred:
Traceback (most recent call last):
Failure: twisted.spread.pb.PBConnectionLost: [Failure instance: Traceback (failure with no
frames): twisted.internet.error.ConnectionDone: Connection was closed cleanly.
]

What does this mean?  It doesn't occur if I don't call reactor.stop() from the client.  Is there
some other cleanup I have to do when shutting down the reactor from the client side?

Peter


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From rob.mason at ammeon.com  Tue Jan 31 04:43:02 2006
From: rob.mason at ammeon.com (Rob Mason)
Date: Tue, 31 Jan 2006 11:43:02 +0000
Subject: [Twisted-Python] How to do cleanup to server on sigint
Message-ID: <43DF4D46.3090407@ammeon.com>

Hi ,
I am using twisted to write a test client to interface with a server 
running a bespoke protocol.
The server expects interactions from the client something like:
 attach
        sendMessage
        sendMessage
          .
          .
          .
  unattach

If the server does not receive a specific unattach from the client , it 
will maintain a resource open for the client even though there is no 
connection.
Eventually the server will refuse additional connections (once it's 
number of 'open' connections exceeds some limit).

I want my client to be able to send an 'unattach' message before closing.

Is there a way I can override the default reactor behaviour in handling 
e.g. SIGINT so that I can force my client to send the unattach message 
before proceeding with normal reactor sigint handling?


Rgds
Rob Mason



From exarkun at divmod.com  Tue Jan 31 07:23:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:23:30 -0500
Subject: [Twisted-Python] How to do cleanup to server on sigint
In-Reply-To: <43DF4D46.3090407@ammeon.com>
Message-ID: <20060131142330.2697.79538061.divmod.quotient.2798@ohm>

On Tue, 31 Jan 2006 11:43:02 +0000, Rob Mason <rob.mason at ammeon.com> wrote:
>Hi ,
>I am using twisted to write a test client to interface with a server running 
>a bespoke protocol.
>The server expects interactions from the client something like:
>attach
>        sendMessage
>        sendMessage
>          .
>          .
>          .
>  unattach
>
>If the server does not receive a specific unattach from the client , it will 
>maintain a resource open for the client even though there is no connection.
>Eventually the server will refuse additional connections (once it's number 
>of 'open' connections exceeds some limit).

  Is it intentional that resource allocation is independent of actual TCP connections?  If not, perhaps you just want to clean things up when a connection is lost.  You may also want to use a TCP or app-level keep alive so as to notice connections lost due to network problems.

>
>I want my client to be able to send an 'unattach' message before closing.
>
>Is there a way I can override the default reactor behaviour in handling e.g. 
>SIGINT so that I can force my client to send the unattach message before 
>proceeding with normal reactor sigint handling?

You don't actually care about SIGINT, just shutdown.  The lowest level hook available for this is the shutdown system event, which can receive notification of via:

    reactor.addSystemEventTrigger('before', 'shutdown', f)

Twisted includes a service system which takes advantage of this feature, which you may want to use instead.  See <http://twistedmatrix.com/projects/core/documentation/howto/application.html>, which mostly talks about servers, but clients are approximately the same.

Jean-Paul



From exarkun at divmod.com  Tue Jan 31 07:29:15 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:29:15 -0500
Subject: [Twisted-Python] Perspective Broker example broken
In-Reply-To: <20060129235125.57838.qmail@web52704.mail.yahoo.com>
Message-ID: <20060131142915.2697.1734694629.divmod.quotient.2801@ohm>

On Sun, 29 Jan 2006 15:51:25 -0800 (PST), Peter Stradinger <emlprime at yahoo.com> wrote:
>Hi,
>
>I'm trying to get the Authentication with Perspective Broker examples to work, and I'm getting a
>Failure:
>
>http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatserver.py
>http://twistedmatrix.com/projects/core/documentation/howto/listings/pb/chatclient.py
>
>The server returns this error when you run the client:
>
>Unhandled error in Deferred:
>Traceback (most recent call last):
>Failure: twisted.spread.pb.PBConnectionLost: [Failure instance: Traceback (failure with no
>frames): twisted.internet.error.ConnectionDone: Connection was closed cleanly.
>]
>
>What does this mean?

PB was doing something, and had possibly exposed a Deferred to application-level code, but suddenly the connection was lost, before a result with which to fire that Deferred could be constructed from bytes received from the network.

>It doesn't occur if I don't call reactor.stop() from the client.  Is there
>some other cleanup I have to do when shutting down the reactor from the 
>client side?

Most likely, the server's send() call has not had a chance to complete fully when the client decided to exit.  This prevents the client from sending its reply to the send() call.  The server reports exactly what happened.

You can avoid this by only disconnecting (ie, stopping the reactor) when receiving a response to a call (as opposed to doing so when you receive a call but before you respond), although this can be difficult if you have more than one thing happening at a time.

More likely, you just want to handle PBConnectionLost on the server.  In many cases, it is probably appropriate just to trap and ignore it.

Jean-Paul



From exarkun at divmod.com  Tue Jan 31 07:32:29 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 09:32:29 -0500
Subject: [Twisted-Python] Deferred ownership and the Protocols
In-Reply-To: <20060128042720.48877.qmail@web30012.mail.mud.yahoo.com>
Message-ID: <20060131143229.2697.1995070941.divmod.quotient.2803@ohm>

On Fri, 27 Jan 2006 20:27:20 -0800 (PST), Andy Leszczynski <leszczynscy at yahoo.com> wrote:
>Hi,
>
>I am in the process of designing the custom Protocol
>and will use Deferred-s in order to pass the
>asynchronous results. I try to learn from the current
>Twisted code base.
>
>For instance there are two modules smtp.py and
>web/client.py:
>
>def getPage(url, contextFactory=None, *args,
>**kwargs):
>[]
>    factory = HTTPClientFactory(url, *args, **kwargs)
>[]
>        reactor.connectTCP(host, port, factory)
>[]
>    return factory.deferred
>
>
>
>
>def sendEmail(smtphost, fromEmail, toEmail, content,
>headers = None, attachments = None, multipartbody =
>"mixed"):
>[]
>    d = defer.Deferred()
>    factory = SMTPSenderFactory(fromEmail, toEmail, f,
>d)
>    reactor.connectTCP(smtphost, 25, factory)
>    return d
>
>
>In the first case the deferred is owned/created by the
>Factory, in the second by the sendEmail helper. Is
>there any reason behind those, what is the
>recommendation? If my question is not clear :-), let
>me know.

It doesn't really make a difference.  I think I slightly prefer the former, but even in the latter case, sendMail and SMTPSenderFactory are basically agents of the same intent.

Jean-Paul



From rob.mason at ammeon.com  Tue Jan 31 09:02:00 2006
From: rob.mason at ammeon.com (Rob Mason)
Date: Tue, 31 Jan 2006 16:02:00 +0000
Subject: [Twisted-Python] How to do cleanup to server on sigint
Message-ID: <43DF89F8.2040207@ammeon.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060131/3e5e9e0a/attachment.html>

From mw44106 at gmail.com  Tue Jan 31 19:06:06 2006
From: mw44106 at gmail.com (Matthew Wilson)
Date: Tue, 31 Jan 2006 21:06:06 -0500
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
Message-ID: <8e97d5be0601311806i595d789boc9993c25ed13043c@mail.gmail.com>

I want to write a chat bot that signs into MSN IM, then waits
passively for users to send it messages.  When the bot gets a message,
it should just reply back to the sender.

Here's where I'm struggling: it appears that I need to maintain a
connection to a notification server AND a switchboard server. How to
do this with only one reactor running?

I'm new to twisted.

TIA

Matt



From exarkun at divmod.com  Tue Jan 31 19:32:51 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 31 Jan 2006 21:32:51 -0500
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
In-Reply-To: <8e97d5be0601311806i595d789boc9993c25ed13043c@mail.gmail.com>
Message-ID: <20060201023251.2697.776481818.divmod.quotient.2929@ohm>

On Tue, 31 Jan 2006 21:06:06 -0500, Matthew Wilson <mw44106 at gmail.com> wrote:
>I want to write a chat bot that signs into MSN IM, then waits
>passively for users to send it messages.  When the bot gets a message,
>it should just reply back to the sender.
>
>Here's where I'm struggling: it appears that I need to maintain a
>connection to a notification server AND a switchboard server. How to
>do this with only one reactor running?
>
>I'm new to twisted.

There is always one reactor.  Nothing you can do has any bearing on this.  It supports two connections as easily as any other number of connections.

Jean-Paul



From moe at divmod.com  Tue Jan 31 20:00:40 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Wed, 1 Feb 2006 05:00:40 +0200
Subject: [Twisted-Python] MSN IM question: two factories, one reactor?
In-Reply-To: <20060201023251.2697.776481818.divmod.quotient.2929@ohm>
Message-ID: <20060201030040.2697.387847070.divmod.quotient.2955@ohm>

http://twistedmatrix.com/projects/words/documentation/examples/msn_example.py



From foom at fuhm.net  Tue Jan 31 23:00:22 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 01 Feb 2006 00:00:22 -0600
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: <E1F4B2U-0006bN-00@pyramid.twistedmatrix.com>

Bug summary
______________________
Since 2006-01-25 06:00:01.760000:
 Bugs opened: 14   Bugs closed: 19   Total open bugs: 545 (-5)
  Urgent: 3 (-6)
  Bug: 264 (+0)
  Feature: 187 (+0)
  Wish: 91 (+1)

New / Reopened Bugs
______________________
                    ==== Urgent ====
[WEB, WIN32] twisted.web2 problems on Windows.  (3 months ago)
CLOSED http://twistedmatrix.com/bugs/issue1270 opened by mkerrin

                    ==== Bug ====
[CORE, TRIAL] When using "trial -u", old trial log observers are not removed  (5 days ago)
       http://twistedmatrix.com/bugs/issue1453 opened by exarkun

ProducerConsumerProxy won't transfer data: "Writing fresh data to consumer before my buffer is empty!"  (6 hours ago)
       http://twistedmatrix.com/bugs/issue1461 opened by ghazel

[CORE] Reimplement twisted.protocols.policies.ThrottlingFactory  (yesterday)
       http://twistedmatrix.com/bugs/issue1460 opened by exarkun

[LORE] Fix latex formatting of man pages  (2 days ago)
       http://twistedmatrix.com/bugs/issue1459 opened by exarkun

[CORE, WIN32] spawnProcess in default reactor for win32 is broken  (4 days ago)
       http://twistedmatrix.com/bugs/issue1457 opened by justinj

[TRIAL] .timeout is not enforced for Deferred-chain test cases  (4 days ago)
       http://twistedmatrix.com/bugs/issue1456 opened by warner

[BACKPORT, WEB2] twisted.web2.wsgi - readline method doesn't behave like a file object  (5 days ago)
       http://twistedmatrix.com/bugs/issue1451 opened by mkerrin

web page left pane layout is broken (patch included)  (1 week ago)
       http://twistedmatrix.com/bugs/issue1429 opened by ghazel

[TRIAL] test failures during chained methods are not reported well  (4 days ago)
       http://twistedmatrix.com/bugs/issue1454 opened by warner

[WEB2] Two failures in WebDAV on Win32  (5 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1452 opened by exarkun

                    ==== Feature ====
Need TodoTest  (6 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1450 opened by wsanchez

                    ==== Wish ====
[DOCUMENTATION] Write a howto for Deferred timeouts  (2 days ago)
       http://twistedmatrix.com/bugs/issue1458 opened by exarkun

[TRIAL] misusing SkipTest can make trial explode in unhelpful ways  (4 days ago)
CLOSED http://twistedmatrix.com/bugs/issue1455 opened by warner

Bugs Closed
______________________
                    ==== Urgent ====
[TRIAL] TypeError in trial  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1422 opened by zooko, closed by jml

[TRIAL] trial's minimal reporter is broken  (1 week ago)
       http://twistedmatrix.com/bugs/issue1426 opened by itamarst, closed by jml

[WEB, WIN32] twisted.web2 problems on Windows.  (3 months ago)
       http://twistedmatrix.com/bugs/issue1270 opened by mkerrin, closed by moonfallen

[CORE, TESTS] Intermitent failure in tcp unit tests  (1 month ago)
       http://twistedmatrix.com/bugs/issue1392 opened by exarkun, closed by exarkun

[TESTS, TRIAL, WIN32] t.trial.test.test_output tests fail on win32 select reactor  (1 month ago)
       http://twistedmatrix.com/bugs/issue1380 opened by jml, closed by exarkun

                    ==== Bug ====
[CORE, DOCUMENTATION, TRIAL] trial docs suggest obsolete timeout idiom  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1420 opened by zooko, closed by jml

[TRIAL, WIN32] Trial bombs on Wndows when attempting to move/delete temp directories  (1 month ago)
       http://twistedmatrix.com/bugs/issue1387 opened by moof, closed by jml

[WEB] HTTPClientFactory leaks memory  (7 months ago)
       http://twistedmatrix.com/bugs/issue1079 opened by jojo, closed by jknight

[MAIL] [imap4] Literals need not to be preceeded by space  (2 weeks ago)
       http://twistedmatrix.com/bugs/issue1417 opened by jojo, closed by exarkun

[WEB] [PATCH] microdom is not case sensitive when doing laterClosers  (1 month ago)
       http://twistedmatrix.com/bugs/issue1358 opened by Tv, closed by jknight

[DOCUMENTATION, LORE, WEB] Lore emits warnings when processing new web howto doc  (10 months ago)
       http://twistedmatrix.com/bugs/issue956 opened by exarkun, closed by jknight

wprocess is broken  (15 months ago)
       http://twistedmatrix.com/bugs/issue760 opened by slyphon, closed by jknight

[WEB] Refactor http support for file uploads  (31 months ago)
       http://twistedmatrix.com/bugs/issue77 opened by itamarst, closed by jknight

[WEB2] Two failures in WebDAV on Win32  (5 days ago)
       http://twistedmatrix.com/bugs/issue1452 opened by exarkun, closed by wsanchez

[CORE] twisted.internet.udp.Port doesn't notice being disconnected  (7 days ago)
       http://twistedmatrix.com/bugs/issue1448 opened by exarkun, closed by exarkun

[WEB2] main.CONNECTION_LOST is not error.ConnectionLost().  (1 week ago)
       http://twistedmatrix.com/bugs/issue1435 opened by andrea, closed by exarkun

z.i.Interface interfaces should not have "self" in method signatures  (1 week ago)
       http://twistedmatrix.com/bugs/issue1428 opened by marienz, closed by exarkun

                    ==== Feature ====
Need TodoTest  (6 days ago)
       http://twistedmatrix.com/bugs/issue1450 opened by wsanchez, closed by jml

                    ==== Wish ====
[TRIAL] misusing SkipTest can make trial explode in unhelpful ways  (4 days ago)
       http://twistedmatrix.com/bugs/issue1455 opened by warner, closed by exarkun




