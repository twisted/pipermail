From nico at tekNico.net  Mon May  1 02:53:34 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 01 May 2006 08:53:34 +0200
Subject: [Twisted-Python] 
	Re: Status of components, protocols, etc in Twisted
In-Reply-To: <17493.24492.57227.748654@terry.jones.tc>
References: <17493.24492.57227.748654@terry.jones.tc>
Message-ID: <4455B06E.2060509@tekNico.net>

> I'm trying to better understand componentized architectures, protocols,
> adaptors etc., as done in Python. I've been reading around and have a few
> questions about the state of play. It would be good to understand where
> things are, and where they're heading.
> 
> It seems there are (or were) 3 efforts to provide components, protocols,
> adaptors, etc.: Zope, Twisted, PyProtocols.

Take also into account the recent GvR Python 3000 decision to put aside
interfaces and adaptation in favor of generic functions or, as he decided
to call them, "dynamic function overloading":

Python 3000 - Adaptation or Generic Functions?
http://www.artima.com/forums/threaded.jsp?forum=106&thread=155123

Dynamic Function Overloading
http://www.artima.com/forums/threaded.jsp?forum=106&thread=155514


> It looks like Twisted is now using the zope module to do this. But I also
> ran across discussion (on this list, in Feb 2004, I think), about possibly
> migrating zope's use of components to PyProtocols. Did that happen?

Notice that PJE himself is not very fond of PyProtocols anymore:

[Python-3000] Sane transitive adaptation
http://mail.python.org/pipermail/python-3000/2006-April/000532.html


-- 
Nicola Larosa - http://www.tekNico.net/

How we live; how we invest our limited capital of time, energy, interest
and capabilities, is surely more important than how we invest our money;
and look how much time, activity and newsprint is spent on that. Money
can be replaced. Once spent, our lives can not.
 -- Carmine Coyote, January 2006





From uwe at oss4u.com  Mon May  1 05:13:52 2006
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 1 May 2006 02:13:52 -0700
Subject: [Twisted-Python] OT: job offer
Message-ID: <200605010213.53520.uwe@oss4u.com>

Hope nobody minds a job offer.....

We have developed an application for the insurance market that is based on:

wxPython for the GUI
twisted pb as network layer
certainly python :-)
reportlab/OpenOffice/pyUno for printing
zope/plone as alternative web interface.
the database backend is postgresql.

We're currently in the process of setting up a company to market this 
software. The software targets a niche market in the insurance business and 
has been in production for over 3 years with a limited number of clients.
We're looking for developers, preferably in the greater San Francisco Bay Area 
but not a necessity, who have as much experience as possible in any/all of 
the above technologies. We have certain projects that only need partial 
knowledge (I'm not disclosing specifics here, I much rather list requirements 
for the different projects):

1) Solely Plone based development. This basically only requires Plone and 
postgresql experience.

2) The printing backend needs work. Anyone with good XSLT/RML experience is 
welcome to apply. Intention is to write a Open Document Format to RML 
exporter for OpenOffice. We will contribute the exporter back to the 
community which would benefit the OpenOffice and the reportlab projects.

3)  Someone with a solid knowledge of twisted pb (not yet new pb) and wxPython 
experience. There are technical obstacles to the "twisted/wxPython"-marriage 
and you should be aware of them.

4) anyone with an open mind and good python experience.

SQL database knowledge is pretty much a must for all of the above. We're 
currently using postgresql, but Oracle and DB2 are not out of the question.

If you have commercial insurance knowledge it's even better, but I rather 
focus on programming skills than insurance knowledge - since the later is 
much easier to acquire.

All of the above projects have the potential to turn into a lucrative  
permanent occupation. Salary and terms are negotiable. There will be several 
programmers involved, thus team- and communication skills are a plus.

If you're interested please drop me an email.

Best

	UC

--
Open Source Solutions 4U, LLC	1618 Kelly St
Phone:  +1 707 568 3056		Santa Rosa, CA 95401
Cell:   +1 650 302 2405		United States
Fax:    +1 707 568 6416



From jml at mumak.net  Mon May  1 08:41:28 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 1 May 2006 22:41:28 +1000
Subject: [Twisted-Python] Database tests and Buildbots
Message-ID: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>

Hello,

I'm trying to reproduce #1630 using the buildbots and I'm not having
any luck.  Apparently none of the database software is installed on
any of the buildbots.  All the tests are skipped with 'Cannot access
db'.

Can the buildbot maintainers please configure their slaves to have the
appropriate software installed. Otherwise, we can't really continue
supporting twisted.enterprise.

cheers,
jml



From itamar at itamarst.org  Mon May  1 09:13:48 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 01 May 2006 09:13:48 -0400
Subject: [Twisted-Python] [SOLVED] ProducerConsumerProxy problem
In-Reply-To: <7a1008db0604300924u65495a19x4887889231172253@mail.gmail.com>
References: <7a1008db0604300717m76b7217cg65ecef2aa6d5ce53@mail.gmail.com>
	<7a1008db0604300924u65495a19x4887889231172253@mail.gmail.com>
Message-ID: <1146489228.5698.0.camel@localhost.localdomain>

On Sun, 2006-04-30 at 19:24 +0300, Haris Andrianakis wrote:
> I found the solution.
> 
> The problem was that by default our proxys producer is registered with
> streaming = True
> which is not what we want.
> The following line will register our proxys producer with streaming =
> False 
> ProducerConsumerProxy.iAmStreaming = False
> The rest is the same.
> I think adding an argument to ProducerConsumerProxy.__init__ about
> streaming would
> be a good idea.
> proxy = ProducerConsumerProxy(self.client.transport )
> dd = FileSender().beginFileTransfer(self.outgoingFile, proxy)
> dd.addCallback(self.uploadDone)
> dd.addErrback(self.uploadError)
> _______________________________________________

Add the patch to our issue tracker?

-- 
Itamar Shtull-Trauring
http://itamarst.org





From terry at jon.es  Mon May  1 09:28:52 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 1 May 2006 15:28:52 +0200
Subject: [Twisted-Python] Question on pamauth.py
Message-ID: <17494.3348.841497.813754@terry.jones.tc>

I'm planning to use twisted.cred and just went to look for ways to
implement a back end credentials checker that I could plug in. I soon ran
across mentions of pamauth.py, and was pleasantly surprised to find it
sitting in my Twisted-2.2.0/twisted/cred/pamauth.py

But, I don't see a mention of how to use it. Most of what's on the web
shows pamauth.py as living under twisted.conch, which I take to be an old
code layout.

This:

    $ find . -name '*.html' -print0 | xargs -0 grep -i pamauth

at the top of my Twisted-Sumo tree gets me no hits. I see a little use of
pamauth test/test_newcred.py, but it's not terribly enlightening.


Is there somewhere I can read about how to use this?

A bit more generally, is using pamauth considered roughly best practice?
Are there other credentials checkers in wide use (and yes, I know
/etc/password is in wide use :-))

If I want to build a web site where users authenticate themselves, I
presumably will be setting a cookie on the browser and authentication will
just happen when the browser visits. (I'm happy to hear more details on how
this is best done). But what if a user is trying to run a command line app
or a remote script that's talking to the server via twisted.pb? Presumably
some form of credential is stored locally and transmitted with the
connection.  Is the passed credential in this case stored (supposing it is
even stored on disk, as opposed to being stored in the user's head and
entered on the command line) in a way that's totally orthogonal to cookies,
or does Twisted have yet more functionality to deal with this?

One final one: I imagine it's a standard pattern that people want to
implement users and groups, with some form of permissions model in which
users attempt actions and their privileges are checked (with fallback to
their groups' permission if the user does not have explicit permission).
Can anyone point me to Twisted code that does something like this?

Sorry for so many questions. I don't expect anyone to start writing code
for me, I plan to do that myself. But it's nice to not reinvent wheels,
that's the point after all. So having just discovered the lightly (or un-)
documented pamauth.py, I'm can't help but wonder what more there might be.

Regards,
Terry



From jim at zope.com  Mon May  1 11:23:07 2006
From: jim at zope.com (Jim Fulton)
Date: Mon, 01 May 2006 11:23:07 -0400
Subject: [Twisted-Python] zope.interface changes
Message-ID: <445627DB.6070509@zope.com>


I hope this is the right list to post to.  Twisted-dev seems more aptly named, but
it doesn't seem to get a lot of traffic.

I've recently refactored the adapter-registration implementation in zope.interface.
There were a number of reasons for this, including performance and making it possible,
in the future, to implement a capability similar to Python's super builtin for calling
overridden adaptera.

The performance gains for the simple-adapter lookup used by Twisted was about 200%.
For Zope, the changes led to about a 15-30% performance improvement.

I expect the new interface version to be released in June.

While working on this, I discovered that Twisted was bypassing the public API to
try to determne of there was an adapter registered:

     for interfaceClass in interfaceClasses:
         factory = self.get(origInterface).selfImplied.get(interfaceClass, {}).get('')

where self is an adapter registry.  This is in python/components.py.

I've added an adapter-registry API specifically for Twisted's use:

     def registered(required, provided, name=u''):
         """Return the component registered for the given interfaces and name

         Unlike the lookup method, this methods won't retrieve
         components registered for more specific required interfaces or
         less specific provided interfaces.

         If no component was registered exactly for the given
         interfaces and name, then None is returned.

         """

I've also added a backward-compatibility hack:

     def get(self, _):
         class XXXTwistedFakeOut:
             selfImplied = {}
         return XXXTwistedFakeOut

This makes Zope's tests pass. Not sure about Twisted's.

Obviously, it would be good for Twisted to move to the new public API.
In the future, if you need a new API, please feel free to ask. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 16:15:18 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Mon, 01 May 2006 22:15:18 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded is
 deprecated Use application-level logic instead"
Message-ID: <44566C56.6070507@ac-montpellier.fr>

Helo ,
Vhat is the meaning of "Use application-level logic instead" ?


import twisted.internet.threads
/usr/lib/python2.4/site-packages/twisted/python/context.py:74: 
DeprecationWarning: threadable.whenThreaded is deprecated. Use 
application-level logic instead.
  threadable.whenThreaded(initThreads)

 



From mcmillen at cs.cmu.edu  Mon May  1 17:05:31 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 1 May 2006 17:05:31 -0400
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <44566C56.6070507@ac-montpellier.fr>
References: <44566C56.6070507@ac-montpellier.fr>
Message-ID: <20060501210531.GA1122@cs.cmu.edu>

On Mon, May 01, 2006 at 10:15:18PM +0200, jmp wrote:
> Helo ,
> Vhat is the meaning of "Use application-level logic instead" ?
> 
> 
> import twisted.internet.threads
> /usr/lib/python2.4/site-packages/twisted/python/context.py:74: 
> DeprecationWarning: threadable.whenThreaded is deprecated. Use 
> application-level logic instead.
>  threadable.whenThreaded(initThreads)

Basically, it means "Program it yourself, don't depend on Twisted to
do it for you" :)

- Colin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060501/34cc4688/attachment.pgp 

From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 18:03:31 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Tue, 02 May 2006 00:03:31 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <20060501210531.GA1122@cs.cmu.edu>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
Message-ID: <445685B3.8060601@ac-montpellier.fr>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060502/7472f13b/attachment.htm 

From radix at twistedmatrix.com  Mon May  1 18:10:06 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 1 May 2006 18:10:06 -0400
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <445685B3.8060601@ac-montpellier.fr>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
	<445685B3.8060601@ac-montpellier.fr>
Message-ID: <60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>

On 5/1/06, jmp <jean-marc.pouchoulon at ac-montpellier.fr> wrote:
>
>
>  Basically, it means "Program it yourself, don't depend on Twisted to
> do it for you" :)
>
>
> Does this means that threads.deferToThread  will be unavailable in the
> future ?
> I need it to use twisted and python-ldap. (ldaptor seems to be broken on
> twisted 2.2 ).
>
>
I'm not really sure how you got that warning just from importing t.p.context.
You're probably using out-of-sync versions of various Twisted bits. I
suggest trying to install the latest Twisted release from scratch. As the
warning says, it's not deferToThread that's deprecated, it's whenThreaded.



--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060501/77bd0ea4/attachment.htm 

From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 18:48:43 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Tue, 02 May 2006 00:48:43 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
	<445685B3.8060601@ac-montpellier.fr>
	<60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>
Message-ID: <4456904B.2080100@ac-montpellier.fr>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060502/73fa73a6/attachment.htm 

From fairwinds at eastlink.ca  Tue May  2 11:00:53 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Tue, 02 May 2006 12:00:53 -0300
Subject: [Twisted-Python] Multiple main loops
Message-ID: <44577425.4080500@eastlink.ca>

Hi. I am hoping you can clarify for me whether it is possible to run 
multiple independent main loops in Twisted. It is my understanding that 
this would mean separate independent reactors.

Googling, I found this patch but after looking into the repository, it 
was never committed. I would appreciate any comments on the patch or 
attempts people have made on the integration of a second twisted loop.

At the present time I am using twisted with wxpython with wxpython as 
main loop and also running a selectreactor instance. Here there are two 
separate loops, interoperating and operating independently, however they 
are not both twisted loops.

Zope currently runs using a reactor instance for each zope instance but 
I would like to consider a separate independent loop for each client to 
synchronize to a server without paying a penalty. Zope's ZEO (basically 
a synchronization server) currently uses a simple zrpc protocol and runs 
independently but interoperates with a separate ansyncore main loop. The 
current system works well for the exception that it would be great to 
simplify this as well as improve security using twisted's built in 
capabilities. Many thanks.


Regards
David


Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.79
diff -u -r1.79 default.py
--- twisted/internet/default.py    10 May 2003 12:52:37 -0000    1.79
+++ twisted/internet/default.py    11 May 2003 23:11:26 -0000
@@ -367,8 +367,6 @@


  # global state for selector
-reads = {}
-writes = {}


  def win32select(r, w, e, timeout=None):
@@ -403,13 +401,18 @@

      __implements__ = (PosixReactorBase.__implements__, IReactorFDSet)

+    def __init__(self):
+        PosixReactorBase.__init__(self)
+        self.reads = {}
+        self.writes = {}
+
      def _preenDescriptors(self):
          log.msg("Malformed file descriptor found.  Preening lists.")
-        readers = reads.keys()
-        writers = writes.keys()
-        reads.clear()
-        writes.clear()
-        for selDict, selList in ((reads, readers), (writes, writers)):
+        readers = self.reads.keys()
+        writers = self.writes.keys()
+        self.reads.clear()
+        self.writes.clear()
+        for selDict, selList in ((self.reads, readers), (self.writes, 
writers)):
              for selectable in selList:
                  try:
                      select.select([selectable], [selectable], 
[selectable], 0)
@@ -419,19 +422,19 @@
                      selDict[selectable] = 1


-    def doSelect(self, timeout,
-                 # Since this loop should really be as fast as possible,
-                 # I'm caching these global attributes so the interpreter
-                 # will hit them in the local namespace.
-                 reads=reads,
-                 writes=writes,
-                 rhk=reads.has_key,
-                 whk=writes.has_key):
+    def doSelect(self, timeout):
          """Run one iteration of the I/O monitor loop.

          This will run all selectables who had input or output readiness
          waiting for them.
          """
+        # Since this loop should really be as fast as possible,
+        # I'm caching these global attributes so the interpreter
+        # will hit them in the local namespace.
+        reads=self.reads
+        writes=self.writes
+        rhk=reads.has_key
+        whk=writes.has_key
          while 1:
              try:
                  r, w, ignored = _select(reads.keys(),
@@ -502,33 +505,33 @@
      def addReader(self, reader):
          """Add a FileDescriptor for notification of data available to 
read.
          """
-        reads[reader] = 1
+        self.reads[reader] = 1

      def addWriter(self, writer):
          """Add a FileDescriptor for notification of data available to 
write.
          """
-        writes[writer] = 1
+        self.writes[writer] = 1

      def removeReader(self, reader):
          """Remove a Selectable for notification of data available to read.
          """
-        if reads.has_key(reader):
-            del reads[reader]
+        if self.reads.has_key(reader):
+            del self.reads[reader]

      def removeWriter(self, writer):
          """Remove a Selectable for notification of data available to 
write.
          """
-        if writes.has_key(writer):
-            del writes[writer]
+        if self.writes.has_key(writer):
+            del self.writes[writer]

      def removeAll(self):
          """Remove all readers and writers, and return list of 
Selectables."""
-        readers = reads.keys()
+        readers = self.reads.keys()
          for reader in readers:
-            if reads.has_key(reader):
-                del reads[reader]
-            if writes.has_key(reader):
-                del writes[reader]
+            if self.reads.has_key(reader):
+                del self.reads[reader]
+            if self.writes.has_key(reader):
+                del self.writes[reader]
          return readers



From markus at bluegap.ch  Tue May  2 11:50:16 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 02 May 2006 17:50:16 +0200
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44577425.4080500@eastlink.ca>
References: <44577425.4080500@eastlink.ca>
Message-ID: <1146585016.18433.80.camel@fotomarburg>

Hi,

I'm not sure you are talking about the same topic. But I have just been
thinking about a threaded reactor.

Because my biggest itch with twisted is, that it can not really make use
multi-processor systems. Especially nowadays with dual-core or even
multi-core processors hitting the market this seems like a must-have.

In theory, it would be possible to start as many threads as you have
processors. All threads would process 'events' of the main loop. See for
example the apache event MPM for a better explaination of the algorithm.

Beside allowing only one thread at a time to call select(), this would
have other implications for twisted. I'm not sure about what they are,
but I can imagine it's a non-trivial goal.

How about todays python thread implementation? Did it improve over the
years? Is it worth using? What must be considered to get a reasonably
good performance using python threads?

..just some ideas. I'd be thankfull for hints, though.

Regards

Markus

On Tue, 2006-05-02 at 12:00 -0300, David Pratt wrote:
> Hi. I am hoping you can clarify for me whether it is possible to run 
> multiple independent main loops in Twisted. It is my understanding that 
> this would mean separate independent reactors.
> 
> Googling, I found this patch but after looking into the repository, it 
> was never committed. I would appreciate any comments on the patch or 
> attempts people have made on the integration of a second twisted loop.
> 
> At the present time I am using twisted with wxpython with wxpython as 
> main loop and also running a selectreactor instance. Here there are two 
> separate loops, interoperating and operating independently, however they 
> are not both twisted loops.
> 
> Zope currently runs using a reactor instance for each zope instance but 
> I would like to consider a separate independent loop for each client to 
> synchronize to a server without paying a penalty. Zope's ZEO (basically 
> a synchronization server) currently uses a simple zrpc protocol and runs 
> independently but interoperates with a separate ansyncore main loop. The 
> current system works well for the exception that it would be great to 
> simplify this as well as improve security using twisted's built in 
> capabilities. Many thanks.
> 
> 
> Regards
> David
> 
<SNIPPED the attached patch>





From bear42 at code-bear.com  Tue May  2 16:51:03 2006
From: bear42 at code-bear.com (bear)
Date: Tue, 02 May 2006 16:51:03 -0400
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
Message-ID: <4457C637.8050402@code-bear.com>


Jonathan Lange wrote:
> Hello,
>
> I'm trying to reproduce #1630 using the buildbots and I'm not having
> any luck.  Apparently none of the database software is installed on
> any of the buildbots.  All the tests are skipped with 'Cannot access
> db'.
>
> Can the buildbot maintainers please configure their slaves to have the
> appropriate software installed. Otherwise, we can't really continue
> supporting twisted.enterprise.

Point me to a document or source file that describes what software to 
install and what userid/password is required and I'll setup the window 
buildbot slaves.





From general at eepatents.com  Tue May  2 16:56:50 2006
From: general at eepatents.com (Ed Suominen)
Date: Tue, 02 May 2006 13:56:50 -0700
Subject: [Twisted-Python] Re: The End, also: documentation
In-Reply-To: <E1FaFHA-0003pl-02@pyramid.twistedmatrix.com>
References: <E1FaFHA-0003pl-02@pyramid.twistedmatrix.com>
Message-ID: <4457C792.4060401@eepatents.com>

Mary Gardiner wrote:
> On Wed, Apr 26, 2006, Ed Suominen wrote:
> 
>>I'm thinking about suggesting (gasp!) myself as your replacement.
> 
> ...
> 
>>Comments welcome. Any positive ones will likely be viewed with suspicion
>>and will raise pangs of regret at my making this rash posting. The
>>negative ones will likely be viewed with relief, at least by the
>>aforementioned logical, responsible part...
> 
> 
> You'll notice I've reassigned some tickets to you and will continue to
> do so over the next few days. I'm not sure how your logical and
> responsible part will feel about this... you can grab me on IRC as
> hypatia for clarification of anything I filed...
> 
> -Mary

The aforementioned logical and responsible part is swamped with work
just now and horrified that I made the offer. But I suppose it's done
and I'll start picking things up when the flood recedes in a week or two.

Best regards, Ed



From exarkun at divmod.com  Tue May  2 18:01:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 2 May 2006 18:01:30 -0400
Subject: [Twisted-Python] Re: The End, also: documentation
In-Reply-To: <4457C792.4060401@eepatents.com>
Message-ID: <20060502220130.22481.451061582.divmod.quotient.20755@ohm>

On Tue, 02 May 2006 13:56:50 -0700, Ed Suominen <general at eepatents.com> wrote:
>
>The aforementioned logical and responsible part is swamped with work
>just now and horrified that I made the offer. But I suppose it's done
>and I'll start picking things up when the flood recedes in a week or two.
>

Thanks for the offer to take on this role, Ed.  *Not* to discourage
you, but as of late, we've had quite a few offers to help out with
various parts of Twisted but a lot of them haven't come to much.
The administrative costs are getting to be a significant burden on
some team members who are already swamped.  I think the best thing
to do would be to contribute improvements to the tracker for a
while (once you're all dried off ;).  We'll absolutely take the
time to get tickets in the tracker taken care of, but for now it'd
be best if we could avoid the setting up new accounts, dealing with
keys, poking trac in all the right places for edit permissions and
whatnot.  With the review process we're currently using, this isn't
very far from what you'd be doing anyway.  Once things slow down on
the administrative end and you are contributing enough improvements
for the overhead to be worthwhile, we can get you set up with
commit access and so forth.

Again, thank you for stepping up.  I am personally looking forward
to your contributions.

Jean-Paul



From glyph at divmod.com  Tue May  2 18:38:56 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 2 May 2006 18:38:56 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44577425.4080500@eastlink.ca>
Message-ID: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>


On Tue, 02 May 2006 12:00:53 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi. I am hoping you can clarify for me whether it is possible to run 
>multiple independent main loops in Twisted. It is my understanding that this 
>would mean separate independent reactors.

Yep.  This is not currently possible.  Most importantly there are no tests for it, so we would have no idea if it worked.  Writing tests for race conditions is notoriously hard.

>Googling, I found this patch but after looking into the repository, it was 
>never committed. I would appreciate any comments on the patch or attempts 
>people have made on the integration of a second twisted loop.

This patch was deliberately left uncommitted.  It definitely reverses an optimization that was demonstrated to improve performance on the critical path; it only maybe makes it possible to initialize multiple reactors.  If you want to write a comprehensive set of unit tests for multiple reactors, we might consider doing something like this, otherwise the reactor will be left in its current state in order to discourage people from attempting to start multiple reactors concurrently.

>At the present time I am using twisted with wxpython with wxpython as main 
>loop and also running a selectreactor instance. Here there are two separate 
>loops, interoperating and operating independently, however they are not both 
>twisted loops.

wxpython is buggy and has terrible event-loop support.  Consider using PyGTK instead.  If you really must use wx, there are a variety of mostly-working ways to integrate the mainloop with Twisted without resorting to multiple reactors.



From glyph at divmod.com  Tue May  2 18:40:49 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 2 May 2006 18:40:49 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <1146585016.18433.80.camel@fotomarburg>
Message-ID: <20060502224049.22481.1961026087.divmod.quotient.20773@ohm>



On Tue, 02 May 2006 17:50:16 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:

>Because my biggest itch with twisted is, that it can not really make use
>multi-processor systems. Especially nowadays with dual-core or even
>multi-core processors hitting the market this seems like a must-have.

s/Twisted/Python/g

Python maintains a global interpreter lock which prevents the interpreter from running on more than one CPU at a time.  If you want to take advantage of multiple CPUs with Twisted, you have to spawn multiple communicating processes, not threads.

Even if you *could* take advantage of multiple processors by using threads, making Twisted generally thread-safe would be a HUGE undertaking, probably spanning years, and I cannot imagine anyone on the current development team would care about this as a feature, with so many other major issues looming.



From jml at mumak.net  Tue May  2 20:43:07 2006
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 3 May 2006 10:43:07 +1000
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <4457C637.8050402@code-bear.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
	<4457C637.8050402@code-bear.com>
Message-ID: <d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>

On 5/3/06, bear <bear42 at code-bear.com> wrote:
>
> Jonathan Lange wrote:
> > Hello,
> >
> > I'm trying to reproduce #1630 using the buildbots and I'm not having
> > any luck.  Apparently none of the database software is installed on
> > any of the buildbots.  All the tests are skipped with 'Cannot access
> > db'.
> >
> > Can the buildbot maintainers please configure their slaves to have the
> > appropriate software installed. Otherwise, we can't really continue
> > supporting twisted.enterprise.
>
> Point me to a document or source file that describes what software to
> install and what userid/password is required and I'll setup the window
> buildbot slaves.
>

I have no such documentation.  I'd suggest the enterprise maintainer
write one, but there is no such person.

Suggestions anyone?

jml



From fairwinds at eastlink.ca  Tue May  2 20:43:21 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Tue, 02 May 2006 21:43:21 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
Message-ID: <4457FCA9.3010907@eastlink.ca>

glyph at divmod.com wrote:
> 
> On Tue, 02 May 2006 12:00:53 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi. I am hoping you can clarify for me whether it is possible to run 
>> multiple independent main loops in Twisted. It is my understanding 
>> that this would mean separate independent reactors.
> 
> Yep.  This is not currently possible.  Most importantly there are no 
> tests for it, so we would have no idea if it worked.  Writing tests for 
> race conditions is notoriously hard.

Hi glyph. Have there been previous attempts to run more than a single 
reactor together? Does any of this exist anywhere in the history of the 
your repository.

>> Googling, I found this patch but after looking into the repository, it 
>> was never committed. I would appreciate any comments on the patch or 
>> attempts people have made on the integration of a second twisted loop.
> 
> This patch was deliberately left uncommitted.  It definitely reverses an 
> optimization that was demonstrated to improve performance on the 
> critical path; it only maybe makes it possible to initialize multiple 
> reactors.  If you want to write a comprehensive set of unit tests for 
> multiple reactors, we might consider doing something like this, 
> otherwise the reactor will be left in its current state in order to 
> discourage people from attempting to start multiple reactors concurrently.

I understand what you are saying however there is some appeal in 
exploring this possibility (if there is a possibility for it to work).

>> At the present time I am using twisted with wxpython with wxpython as 
>> main loop and also running a selectreactor instance. Here there are 
>> two separate loops, interoperating and operating independently, 
>> however they are not both twisted loops.
> 
> wxpython is buggy and has terrible event-loop support.  Consider using 
> PyGTK instead.  If you really must use wx, there are a variety of 
> mostly-working ways to integrate the mainloop with Twisted without 
> resorting to multiple reactors.

I have been using wxpython and twisted together for about a year. They 
seem to perform well together and I would have no problem recommending 
wxpython for general cross platform gui development. I am using wxpython 
only to illustrate that multiple independent loops can work 
cooperatively. The target for the multiple reactor possibility is zope 
client instances where currently an asyncore loop has been integrated 
for zeo support.

Regards,
David





From jarrod at vertigrated.com  Tue May  2 23:25:25 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Tue, 2 May 2006 23:25:25 -0400
Subject: [Twisted-Python] Twisted + Xapian WriteableDatabase leaves db_lock
	file on exit.
Message-ID: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>

Twisted Sumo 2006-02-12

xapian and xapian bindings 0.9.2 svn 6532

I have written a Twisted service to write to a xapian database.
I am using WriteableDatabase using DB_CREATE_OR_OPEN.

I am also using twistd and the application plumbing to start the server.

I have tried everything but no matter how I stop the server I can't get it
to shutdown xapian cleanly.

I have implemented stopService() on my service and do a .flush() and have
even tried setting the db instance to None
and tried using del self.db as well.

I even added a reactor.addSystemEventTrigger() and tried "before", "during"
and "after" "shutdown" and nothing
seems to work.

I stop the service with CTRL-C, kill -TERM `cat twistd.pid' and just plain
kill 'cat twistd.pid'

It leaves the db_lock file everytime and I don't know what else it might not
be cleaning up correctly either.

Has anyone gotten a WritableDatabase to work with Twisted?
If so, how do I stop Twisted so it will shutdown xapian cleanly?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060502/077ded0d/attachment.htm 

From duncan.mcgreggor at gmail.com  Wed May  3 00:39:01 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 2 May 2006 22:39:01 -0600
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: <17494.3348.841497.813754@terry.jones.tc>
References: <17494.3348.841497.813754@terry.jones.tc>
Message-ID: <97600867ab180a20f6a24648e41db23c@gmail.com>


On May 1, 2006, at 7:28 AM, Terry Jones wrote:

> I'm planning to use twisted.cred and just went to look for ways to
> implement a back end credentials checker that I could plug in. I soon 
> ran
> across mentions of pamauth.py, and was pleasantly surprised to find it
> sitting in my Twisted-2.2.0/twisted/cred/pamauth.py
>
> But, I don't see a mention of how to use it.

The really great thing about cred is that it works the same regardless 
of the underlying authentication mechanism. I suggest writing a couple 
toy examples and plugging those into your twisted app, just to get a 
feel for how things work. In the process you will gain genuine 
knowledge (as opposed to "a feel").

You probably wouldn't ever need to use twisted.cred.pamauth. You would 
use the twisted.cred.checkers.PluggableAuthenticationModulesChecker, 
and that works just like, well, a cred checker :-)

You biggest problem is actually going to be getting PyPAM working. As 
far as I know, and as far as tummy.com knows (the original sponsors of 
PyPAM), there's been no release since 1999. I toyed with the idea of 
using it at one point, but the amount of work necessary in updating the 
python was too onerous. Perhaps you have a stronger stomach than I :-)

> If I want to build a web site where users authenticate themselves
[snip]
> cookie
[snip]
> But what if a user is trying to run a command line app
[snip]

If I'm understanding what you are asking, this isn't a cred question. 
cred is cred. It handles avatars/ids, realms, portals, etc. You can put 
anything you want in your realm (or checker, or...). It's up to you to 
provide/restrict resources based on that and it's up to you to decide 
what to do about persisting authentication information.

> Can anyone point me to Twisted code that does something like this?

I'm totally not being snotty when I say this (again): cred is cred. One 
of the really great things about it is how easy it is to do whatever 
you want. You can create interfaces that represent groups, have a 
single realm and set/check interfaces, have different realms for 
different levels of access, etc. You can have your resources implement 
your group/role interfaces. There's all kinds of stuff you can do, it 
really depends on your needs. Once you are comfortable with it and have 
written a few working toys/examples, you will see the potential. 
Writing the code necessary to plug your twisted app into somebody 
else's authentication system can be easier than doing it any other way 
(given that you are working with open, sane standards). I've actually 
written working cred code faster than other project members have 
*configured* (GUI) the user management systems I was writing against.

Here's a great resource:
   http://twistedmatrix.com/projects/core/documentation/howto/cred.html

And if you don't have the O'Reilly twisted book, do yourself a favor 
and pick up a copy. Abe did a wonderful job explaining cred very 
clearly in it.

Good luck!

d




From bear42 at code-bear.com  Wed May  3 01:51:11 2006
From: bear42 at code-bear.com (bear)
Date: Wed, 03 May 2006 01:51:11 -0400
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>	<4457C637.8050402@code-bear.com>
	<d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>
Message-ID: <445844CF.7000208@code-bear.com>



Jonathan Lange wrote:
> On 5/3/06, bear <bear42 at code-bear.com> wrote:
>>
>> Jonathan Lange wrote:
>> > Hello,
>> >
>> > I'm trying to reproduce #1630 using the buildbots and I'm not having
>> > any luck.  Apparently none of the database software is installed on
>> > any of the buildbots.  All the tests are skipped with 'Cannot access
>> > db'.
>> >
>> > Can the buildbot maintainers please configure their slaves to have the
>> > appropriate software installed. Otherwise, we can't really continue
>> > supporting twisted.enterprise.
>>
>> Point me to a document or source file that describes what software to
>> install and what userid/password is required and I'll setup the window
>> buildbot slaves.
> I have no such documentation.  I'd suggest the enterprise maintainer
> write one, but there is no such person.

I found the required information after remembering that I had set up 
most of this more than a year ago.

The required information for the test user and database can be found in 
twisted/test/test_adbapi.py - it lists that information as well as what 
database servers it can use (mysql, pgsql, sqlite, gadfly, firefox, etc).

I have enabled pgsql (version 8) and mysql (version 4.1) on the windows 
build slave.




From p.mayers at imperial.ac.uk  Wed May  3 04:26:21 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 03 May 2006 09:26:21 +0100
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4457FCA9.3010907@eastlink.ca>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
	<4457FCA9.3010907@eastlink.ca>
Message-ID: <4458692D.4050000@imperial.ac.uk>

David Pratt wrote:

> I have been using wxpython and twisted together for about a year. They 
> seem to perform well together and I would have no problem recommending 
> wxpython for general cross platform gui development. I am using wxpython 

I'm afraid at least on this list you're in a minority then. It's not 
widely liked, if for no other reason than it's highly uncooperative 
event loop.

> only to illustrate that multiple independent loops can work 
> cooperatively. The target for the multiple reactor possibility is zope 
> client instances where currently an asyncore loop has been integrated 
> for zeo support.

I'm not entirely certain I understand what you want to do - could you 
explain the zope/zeo/zrpc issue(s) you're trying to solve?



From p.mayers at imperial.ac.uk  Wed May  3 04:34:13 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 03 May 2006 09:34:13 +0100
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: <97600867ab180a20f6a24648e41db23c@gmail.com>
References: <17494.3348.841497.813754@terry.jones.tc>
	<97600867ab180a20f6a24648e41db23c@gmail.com>
Message-ID: <44586B05.30806@imperial.ac.uk>

Duncan McGreggor wrote:
> 
> You biggest problem is actually going to be getting PyPAM working. As 
> far as I know, and as far as tummy.com knows (the original sponsors of 
> PyPAM), there's been no release since 1999. I toyed with the idea of 
> using it at one point, but the amount of work necessary in updating the 
> python was too onerous. Perhaps you have a stronger stomach than I :-)

Agreed that PyPAM has bitrotted. FWIW, I circumvented this by using 
Cyrus SASLs "saslauthd" unix socket protocol, with saslauthd configured 
to talk to PAM.

/usr/sbin/saslauthd -m /var/run/saslauthd -a pam -c -n 0


def encode_short(s):
     i = socket.htons(s)
     return chr(i & 0xff) + chr((i >> 8) & 0xff)

def encode_str(s):
     l = encode_short(len(s))
     return l+s

def decode_short(s):
     return socket.ntohs( (ord(s[1]) << 8) + ord(s[0]) )

class SaslAuthdProtocol(protocol.Protocol):
     def connectionMade(self):
         self.data = ''
         # we're going to check this lot
         username = encode_str(self.factory.username)
         password = encode_str(self.factory.password)
         service = encode_str(PAMSERVICENAME)
         realm = encode_str(YOURREALM)
         # ok
         message = username + password + service + realm
         self.transport.write(message)

     def dataReceived(self, data):
         # ok, we've an outstanding request - where are we?
         # we're expecting 2 bytes of length, then length bytes of
         # data which is "code<SP>reason"
         self.data = self.data + data
         dl = len(self.data)
         if dl < 2:
             # we don't have the length yet
             return
         l = decode_short(self.data[:2])
         if dl < l + 2:
             # we don't have the rest of the reply yet
             return
         if dl > l + 2:
             # wtf?
             self.transport.loseConnection()
         # Ok, we can reply
         resp = self.data[2:2+l]
         if ' ' in resp:
             resp, reason = resp.split(' ', 1)
         else:
             reason = ''

         if resp=='OK':
             self.factory.deferred.callback(reason)
         else:
             self.factory.deferred.errback(Exception(reason))


class SaslChecker:
     # We are an ICredentialsChecker implementor
     interface.implements(checkers.ICredentialsChecker)

     # We can only check plaintext username/password combos
     credentialInterfaces = (
             credentials.IUsernamePassword,
             )

     # return the "avatar ID" - username
     def ok(self, matched, username):
         return username
     def err(self, f, username):
         raise error.UnauthorizedLogin(f.getErrorMessage())

     def requestAvatarId(self, creds):
         # Adapt the credentials to a username/password pair
         up = credentials.IUsernamePassword(creds, default=None)

         # It's going to be a deferred reply
         d = defer.Deferred()
         d.addCallbacks(
             self.ok, self.err, (up.username,), {}, (up.username,), {}
         )

         # Send the reply off to saslauthd via unix socket
         f = protocol.ClientFactory()
         f.username = up.username
         f.password = up.password
         f.deferred = d
         f.protocol = SaslAuthdProtocol
         reactor.connectUNIX('/var/run/saslauthd/mux', f)
         return d

Works like a charm.



From manlio_perillo at libero.it  Wed May  3 05:33:22 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 07:33:22 -0200
Subject: [Twisted-Python] cred and stateless protocols
Message-ID: <445878E2.5040806@libero.it>

Hi.

Stateless protocols like HTTP use sessions for client authentication.
The session is created by the server and the client should supply it at
each request.

The question is: does cred support this type of authentication?


Thanks  Manlio Perillo



From manlio_perillo at libero.it  Wed May  3 05:35:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 07:35:58 -0200
Subject: [Twisted-Python] status of IM
Message-ID: <4458797E.3010003@libero.it>

Hi.

IM unfortunately uses GTK 1.x.
I would like to use twisted.words for chat but what is its actual status?

I can try to write a version of IM that uses GTK 2.x, but if all is
going to change...


Thanks  Manlio Perillo



From nico at tekNico.net  Wed May  3 06:14:51 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 03 May 2006 12:14:51 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445878E2.5040806@libero.it>
References: <445878E2.5040806@libero.it>
Message-ID: <4458829B.4010107@tekNico.net>

> Stateless protocols like HTTP use sessions for client authentication.

Don't say such a thing in REST company, you could be lynched. ;-)

HTTP does *not* use sessions for authentication (sessions are not defined
in the protocol anyway): it uses headers for Basic and Digest
authentication, see RFC 2617.


> The session is created by the server and the client should supply it at
> each request.

The client supplies authentication *headers* with each request.


> The question is: does cred support this type of authentication?

There's support in twisted.web.woven.guard and .simpleguard .


-- 
Nicola Larosa - http://www.tekNico.net/

It might be a good rule simply to avoid any prestigious task.
If it didn't suck, they wouldn't have had to make it prestigious.
 -- Paul Graham, January 2006





From terry at jon.es  Wed May  3 07:12:04 2006
From: terry at jon.es (Terry Jones)
Date: Wed, 3 May 2006 13:12:04 +0200
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: Your message at 22:39:01 on Tuesday, 2 May 2006
References: <17494.3348.841497.813754@terry.jones.tc>
	<97600867ab180a20f6a24648e41db23c@gmail.com>
Message-ID: <17496.36868.338994.693977@terry.jones.tc>

Hi Duncan, thanks for the reply.

>>>>> "Duncan" == Duncan McGreggor <duncan.mcgreggor at gmail.com> writes:
Duncan> The really great thing about cred is that it works the same
Duncan> regardless of the underlying authentication mechanism. I suggest
Duncan> writing a couple toy examples and plugging those into your twisted
Duncan> app, just to get a feel for how things work. In the process you
Duncan> will gain genuine knowledge (as opposed to "a feel").

OK, I'll try that.

Duncan> You probably wouldn't ever need to use twisted.cred.pamauth. You would 
Duncan> use the twisted.cred.checkers.PluggableAuthenticationModulesChecker, 
Duncan> and that works just like, well, a cred checker :-)

Duncan> You biggest problem is actually going to be getting PyPAM
Duncan> working. As far as I know, and as far as tummy.com knows (the
Duncan> original sponsors of PyPAM), there's been no release since 1999. I
Duncan> toyed with the idea of using it at one point, but the amount of
Duncan> work necessary in updating the python was too onerous. Perhaps you
Duncan> have a stronger stomach than I :-)

>From your reply and that of Phil Mayers (thanks Phil), I see that my mail
wasn't really clear.

I didn't really want to know about pamauth specifically (despite my
subject), but about back end cred checkers (not twisted.cred itself) that I
could use with twisted.cred. When I went looking for options on this (e.g.,
based on LDAP, /etc/passwd, PAM, other db approaches, etc), I was surprised
to find myself reading about pamauth, that it was in the Twisted tarball
I'd installed, but that I'd read no mention of it. So I wondered about it,
and also whether there might be other back ends to drop in.

Thanks anyway for the details on pamauth, I'm pretty sure I wont use it.

Duncan> and it's up to you to decide what to do about persisting
Duncan> authentication information.

That was what I was meaning to ask: what do other people do about this
(persisting authentication information)? Are there recognized best
practices for what I described? Maybe the question is too basic! I expected
someone might say "oh, just tell cred to use the XYZ python module".

Duncan> I'm totally not being snotty when I say this (again): cred is
Duncan> cred. One of the really great things about it is how easy it is to
Duncan> do whatever you want. You can create interfaces that represent
Duncan> groups, have a single realm and set/check interfaces, have
Duncan> different realms for different levels of access, etc. You can have
Duncan> your resources implement your group/role interfaces. There's all
Duncan> kinds of stuff you can do, it really depends on your needs. Once
Duncan> you are comfortable with it and have written a few working
Duncan> toys/examples, you will see the potential.

I think I see the potential, that's why I'm here bugging you all. I'm still
trying to understand some things, and at least right now, to know if there
are more standard components that I'm not aware of (that I can drop into
the architecture provided by Twisted, and, in this particular case, cred).

Duncan> Writing the code necessary to plug your twisted app into somebody
Duncan> else's authentication system can be easier than doing it any other
Duncan> way (given that you are working with open, sane standards). I've
Duncan> actually written working cred code faster than other project
Duncan> members have *configured* (GUI) the user management systems I was
Duncan> writing against.

I read that in your blog the other night :-)

Duncan> Here's a great resource:
Duncan> http://twistedmatrix.com/projects/core/documentation/howto/cred.html

Yes, thanks, I'd read that a couple of times too.

Duncan> And if you don't have the O'Reilly twisted book, do yourself a
Duncan> favor and pick up a copy. Abe did a wonderful job explaining cred
Duncan> very clearly in it.

And the book is on its way. I ordered it after reading the review here
http://tv.debian.net/articles/review-snakeball/


Anyway, thanks again for the reply. I'm trying to figure out how to make
about half a dozen things hang together nicely, and I've (obviously) never
used Twisted. I'm getting there. I'll take your advice about small
examples.

Regards,
Terry



From khoa.coffee at gmail.com  Wed May  3 10:49:19 2006
From: khoa.coffee at gmail.com (Khoa Nguyen)
Date: Wed, 3 May 2006 10:49:19 -0400
Subject: [Twisted-Python] Run a function repeatedly at different intervals
Message-ID: <3d00e6dc0605030749w6d3abc5fkcafc7886bdab0104@mail.gmail.com>

Hi,

I am new to Twisted Python. I would like to fire a function several
times at different intervals. For example, at 1 second fire f(), at 2
second fire f() again, at 4 second fire f(), and so on...

How do I do that? I looked at the doc and it has
task.LoopingCall(second) but the time interval is fixed...

Thanks,
Khoa



From exarkun at divmod.com  Wed May  3 11:03:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 3 May 2006 11:03:50 -0400
Subject: [Twisted-Python] Run a function repeatedly at different intervals
In-Reply-To: <3d00e6dc0605030749w6d3abc5fkcafc7886bdab0104@mail.gmail.com>
Message-ID: <20060503150350.22481.1208478653.divmod.quotient.21036@ohm>

On Wed, 3 May 2006 10:49:19 -0400, Khoa Nguyen <khoa.coffee at gmail.com> wrote:
>Hi,
>
>I am new to Twisted Python. I would like to fire a function several
>times at different intervals. For example, at 1 second fire f(), at 2
>second fire f() again, at 4 second fire f(), and so on...
>
>How do I do that? I looked at the doc and it has
>task.LoopingCall(second) but the time interval is fixed...
>

LoopingCall is implemented in terms of IReactorTime.callLater.  If you want to schedule a function to run in 1, 2, and 4 seconds:

    reactor.callLater(1, f)
    reactor.callLater(2, f)
    reactor.callLater(4, f)

You could also have f re-schedule itself when it runs, or write a helper that schedules it, as LoopingCall is a helper for running a function on a fixed interval.

It may also be possible to extend LoopingCall to allow changing its interval as it runs.  You could also use LoopingCall as it is and stop() and then start() it with a new interval.

Jean-Paul



From manlio_perillo at libero.it  Wed May  3 11:20:34 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 13:20:34 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458829B.4010107@tekNico.net>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
Message-ID: <4458CA42.5060207@libero.it>

Nicola Larosa ha scritto:
>> Stateless protocols like HTTP use sessions for client authentication.
> 
> Don't say such a thing in REST company, you could be lynched. ;-)
> 
> HTTP does *not* use sessions for authentication (sessions are not defined
> in the protocol anyway): it uses headers for Basic and Digest
> authentication, see RFC 2617.
> 

Ok, but it is improper to require such an authentication for each
resource... ;-)

Clients authenticate once and use "sessions" to identify themselves.

> 
>> The session is created by the server and the client should supply it at
>> each request.
> 
> The client supplies authentication *headers* with each request.
> 

Yes.

> 
>> The question is: does cred support this type of authentication?
> 
> There's support in twisted.web.woven.guard and .simpleguard .
> 

Ok, but maybe sessions can be used by other protocols (over UDP).
I whould like to have some support for creating secure sessions, but
maybe I just have to do urandom(some_bits)?



Thanks  Manlio Perillo



From jarrod at vertigrated.com  Wed May  3 11:20:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:20:31 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <17496.49562.439820.574229@terry.jones.tc>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<17496.49562.439820.574229@terry.jones.tc>
Message-ID: <2389d4730605030820u6a12311cjbe84507bd70348bc@mail.gmail.com>

On 5/3/06, Terry Jones <tcj25 at cam.ac.uk> wrote:

>
> I'd like to know the answer, when you get it (assuming it's not just an
> old
> version of Xapian).
>
>
nope, I installed the latest stable 0.9.5 and it does the same thing,
doesn't close xapian correctly.

:-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060503/97d43647/attachment.htm 

From jarrod at vertigrated.com  Wed May  3 11:26:21 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:26:21 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <20060503130659.GG32166@survex.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
Message-ID: <2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>

On 5/3/06, Olly Betts <olly at survex.com> wrote:
>
> On Tue, May 02, 2006 at 11:25:25PM -0400, jarrod roberson wrote:
> > xapian and xapian bindings 0.9.2 svn 6532
>
> That's rather old - is this reproducible with 0.9.5?
>
> > It leaves the db_lock file everytime and I don't know what else it might
> not
> > be cleaning up correctly either.
>
> The db_lock file gets deleted when the C++ WritableDatabase destructor
> is called.  So if it's not deleted, then the destructor isn't being
> called.
>
> If you can reproduce with the latest release in a simple example
> (ideally without twisted being involved), I can try to investigate.
>
> Cheers,
>     Olly
>

yes, just upgraded and it does the same thing with 0.9.5

the problem is I can't reproduce it outside of Twisted.

all my command line tools that I have written ( all in Python ) that use the
exact same code exit and close properly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060503/6c5736d0/attachment.htm 

From jarrod at vertigrated.com  Wed May  3 11:32:32 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:32:32 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
	<2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
Message-ID: <2389d4730605030832l51a3c80j1263ba9f98e885d@mail.gmail.com>

Here is the relevant output

cassandra:~/projects/wc/wfs/trunk/python/indexd
>delve --version
delve - xapian-core 0.9.5
cassandra:~/projects/wc/wfs/trunk/python/indexd
>whack /index/wfs/
cassandra:~/projects/wc/wfs/trunk/python/indexd
>twistd -noy indexd.tac
2006/05/03 11:18 EDT [-] Log opened.
2006/05/03 11:18 EDT [-] twistd 2.2.0 (/usr/bin/python 2.4.1) starting up
2006/05/03 11:18 EDT [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2006/05/03 11:18 EDT [-] Loading indexd.tac...
2006/05/03 11:18 EDT [-] Loaded.
2006/05/03 11:18 EDT [-] __builtin__.IndexerFactoryFromService starting on
9000
2006/05/03 11:18 EDT [-] Starting factory
<__builtin__.IndexerFactoryFromService instance at 0x5259e0>
2006/05/03 11:18 EDT [-] Start Xapian Index Service
^C2006/05/03 11:19 EDT [-] Received SIGINT, shutting down.
2006/05/03 11:19 EDT [-] Stopping Xapian Indexer Service
2006/05/03 11:19 EDT [-] (Port 9000 Closed)
2006/05/03 11:19 EDT [-] Stopping factory
<__builtin__.IndexerFactoryFromService instance at 0x5259e0>
2006/05/03 11:19 EDT [-] Main loop terminated.
2006/05/03 11:19 EDT [-] Server Shut Down.
cassandra:~/projects/wc/wfs/trunk/python/indexd
>twistd -noy indexd.tac
2006/05/03 11:19 EDT [-] Log opened.
2006/05/03 11:19 EDT [-] twistd 2.2.0 (/usr/bin/python 2.4.1) starting up
2006/05/03 11:19 EDT [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2006/05/03 11:19 EDT [-] Loading indexd.tac...
2006/05/03 11:19 EDT [-] Traceback (most recent call last):
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 159, in getApplication
2006/05/03 11:19 EDT [-]     application = service.loadApplication(filename,
style, passphrase)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/service.py",
line 301, in loadApplication
2006/05/03 11:19 EDT [-]     application = sob.loadValueFromFile(filename,
'application', passphrase)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/persisted/sob.py",
line 208, in loadValueFromFile
2006/05/03 11:19 EDT [-]     exec fileObj in d, d
2006/05/03 11:19 EDT [-]   File "indexd.tac", line 157, in ?
2006/05/03 11:19 EDT [-]     i = XapianIndexerService('/wfs/',
'/index/wfs/')
2006/05/03 11:19 EDT [-]   File "indexd.tac", line 99, in __init__
2006/05/03 11:19 EDT [-]     self.db = xapian.WritableDatabase(indexRoot,
xapian.DB_CREATE_OR_OPEN)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/xapian.py",
line 433, in __init__
2006/05/03 11:19 EDT [-]
_xapian.WritableDatabase_swiginit(self,_xapian.new_WritableDatabase(*args))
2006/05/03 11:19 EDT [-] IOError: DatabaseLockError: Unable to acquire
database write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-] Failed to load application: DatabaseLockError:
Unable to acquire database write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-] Traceback (most recent call last):
          File "/usr/bin/twistd", line 25, in ?
            run()
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/scripts/twistd.py",
line 205, in run
            app.run(runApp, ServerOptions)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 278, in run
            runApp(config)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/scripts/twistd.py",
line 195, in runApp
            application = app.getApplication(config, passphrase)
        --- <exception caught here> ---
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 159, in getApplication
            application = service.loadApplication(filename, style,
passphrase)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/service.py",
line 301, in loadApplication
            application = sob.loadValueFromFile(filename, 'application',
passphrase)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/persisted/sob.py",
line 208, in loadValueFromFile
            exec fileObj in d, d
          File "indexd.tac", line 157, in ?
            i = XapianIndexerService('/wfs/', '/index/wfs/')
          File "indexd.tac", line 99, in __init__
            self.db = xapian.WritableDatabase(indexRoot,
xapian.DB_CREATE_OR_OPEN)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/xapian.py",
line 433, in __init__

_xapian.WritableDatabase_swiginit(self,_xapian.new_WritableDatabase(*args))
        exceptions.IOError: DatabaseLockError: Unable to acquire database
write lock /index/wfs//db_lock


Failed to load application: DatabaseLockError: Unable to acquire database
write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060503/2e7a9e99/attachment.htm 

From jarrod at vertigrated.com  Wed May  3 13:32:20 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 13:32:20 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <20060503162226.GJ32166@survex.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
	<2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
	<20060503153012.GG13360@tartarus.org>
	<2389d4730605030845i5a077972vc6e3b1717ed2957d@mail.gmail.com>
	<20060503162226.GJ32166@survex.com>
Message-ID: <2389d4730605031032g1b637071laa02ef5e3f04b0b0@mail.gmail.com>

On 5/3/06, Olly Betts <olly at survex.com> wrote:
>
> It seems this has cropped up before - see Michael Salib's point "2."
> here:
>
> http://article.gmane.org/gmane.comp.search.xapian.general/1387
>
> I've not yet implemented WritableDatabase::close() though.
>
> Incidentally, the stale lockfile on exit issue goes away if you use
> flint instead of quartz, though the database lock will still be held
> while the process keeps running which could still be a problem.
>
> Cheers,
>     Olly
>

thanks for the hint about using Flint instead.
I thought I was but I guess I didn't add it to my .profile

using Flint it starts and stops and doesn't cause any problems now.

a .close() method on WritableDatabase might be a good addition.
Just so you can force the db closed when you think it might not be being
de-referenced reliably.

It seems to be the same type of issue listed in that link you posted.
Twisted is probably holding on to the Service object
and that is holding on to the db object.

I KNOW I am not sharing db objects nor document objects since it is all
single threaded and all self contained in that one index method.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060503/a18c8069/attachment.htm 

From glyph at divmod.com  Wed May  3 13:36:07 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 13:36:07 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458829B.4010107@tekNico.net>
Message-ID: <20060503173607.22481.535329188.divmod.quotient.21097@ohm>



On Wed, 03 May 2006 12:14:51 +0200, Nicola Larosa <nico at teknico.net> wrote:
>> Stateless protocols like HTTP use sessions for client authentication.

>> The question is: does cred support this type of authentication?
>
>There's support in twisted.web.woven.guard and .simpleguard .

Euuuugghhhh.  twisted.web.woven.* is ancient, deprecated, and buggy.  Don't use it as anything other than an example (and even then it's not a terribly good example).

You can find a more recent examples in nevow.guard, http://divmod.org/

It supports both session-based and HTTP-auth-based authentication with cred.



From jarrod at vertigrated.com  Wed May  3 13:43:24 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 13:43:24 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458CA42.5060207@libero.it>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
	<4458CA42.5060207@libero.it>
Message-ID: <2389d4730605031043i4254ca77v75e378d94f872532@mail.gmail.com>

On 5/3/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> Nicola Larosa ha scritto:
> >> Stateless protocols like HTTP use sessions for client authentication.
> >
> > Don't say such a thing in REST company, you could be lynched. ;-)



no the correct statement is

Stateless protocols like HTTP use sessions to STORE STATE.

Nicola is correct, HTTP only support authentication on every request since
it is STATELESS and only supports BASIC and DIGEST.


if you want to make it STATEFUL then using "sessions" is just one of many
ways to store and track that STATE.
if you want to store authentication tokens as part of that STATE you can,
but that has NOTHING to do with HTTP Authentication and is probably NOT
secure, but it has NOTHING to do with
"... HTTP using sessions for client authentication."
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060503/9709eb1a/attachment.htm 

From glyph at divmod.com  Wed May  3 13:44:33 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 13:44:33 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4458692D.4050000@imperial.ac.uk>
Message-ID: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>



On Wed, 03 May 2006 09:26:21 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>David Pratt wrote:
>>I have been using wxpython and twisted together for about a year. They seem 
>>to perform well together and I would have no problem recommending wxpython 
>>for general cross platform gui development. I am using wxpython
>
>I'm afraid at least on this list you're in a minority then. It's not widely 
>liked, if for no other reason than it's highly uncooperative event loop.

Actually, it seems like a lot of people use WX and Twisted, and some people like the combination quite a lot.  I think OSAF is still using this combination for Chandler and I don't think they're unhappy.

The reason you hear so much vitriol about it on this list is that 90% of the time, wx + networking appears to work in the lab, but when released into the wild will explode in unexpected ways; many people here who don't like wx are nevertheless maintaining applications which use it.  If you know what you're doing with both event loops you can prevent this, though.



From bear42 at code-bear.com  Wed May  3 15:33:18 2006
From: bear42 at code-bear.com (bear)
Date: Wed, 03 May 2006 15:33:18 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>
References: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>
Message-ID: <4459057E.90608@code-bear.com>


glyph at divmod.com wrote:
>
>
> On Wed, 03 May 2006 09:26:21 +0100, Phil Mayers 
> <p.mayers at imperial.ac.uk> wrote:
>> David Pratt wrote:
>>> I have been using wxpython and twisted together for about a year. 
>>> They seem to perform well together and I would have no problem 
>>> recommending wxpython for general cross platform gui development. I 
>>> am using wxpython
>> I'm afraid at least on this list you're in a minority then. It's not 
>> widely liked, if for no other reason than it's highly uncooperative 
>> event loop.
> Actually, it seems like a lot of people use WX and Twisted, and some 
> people like the combination quite a lot.  I think OSAF is still using 
> this combination for Chandler and I don't think they're unhappy.
We are using Twisted and wxPython and so far have been very pleased - 
but that doesn't mean we haven't had many of the issues that glyph is 
warning about.  We've just built suitable walls so the two parts don't 
really realize they are in the same app.


bear
build/release grunt for Open Source Applications Foundation (OSAF)



From fairwinds at eastlink.ca  Wed May  3 19:32:26 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Wed, 03 May 2006 20:32:26 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4458692D.4050000@imperial.ac.uk>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
	<4457FCA9.3010907@eastlink.ca> <4458692D.4050000@imperial.ac.uk>
Message-ID: <44593D8A.6040706@eastlink.ca>

Hi Phil. I am pleased about the zope and twisted integrated in zope3. I 
believe there can be a tighter integration and additional benefits. Zope 
currently uses a twisted loop to run the application and an asyncore 
loop for zeo communication. These are both initialized at start up. What 
I would like to see, is ansyncore replaced with a second twisted loop. I 
would also like the zeo server to be a twisted app that runs zrpc. 
Twisted's ssh and ssl support would be used to secure client / server 
communication.

Regards,
David

Phil Mayers wrote:
> David Pratt wrote:
> 
>> I have been using wxpython and twisted together for about a year. They 
>> seem to perform well together and I would have no problem recommending 
>> wxpython for general cross platform gui development. I am using wxpython 
> 
> I'm afraid at least on this list you're in a minority then. It's not 
> widely liked, if for no other reason than it's highly uncooperative 
> event loop.
> 
>> only to illustrate that multiple independent loops can work 
>> cooperatively. The target for the multiple reactor possibility is zope 
>> client instances where currently an asyncore loop has been integrated 
>> for zeo support.
> 
> I'm not entirely certain I understand what you want to do - could you 
> explain the zope/zeo/zrpc issue(s) you're trying to solve?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From glyph at divmod.com  Wed May  3 22:50:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 22:50:14 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44593D8A.6040706@eastlink.ca>
Message-ID: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>



On Wed, 03 May 2006 20:32:26 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi Phil. I am pleased about the zope and twisted integrated in zope3. I 
>believe there can be a tighter integration and additional benefits. Zope 
>currently uses a twisted loop to run the application and an asyncore loop 
>for zeo communication. These are both initialized at start up. What I would 
>like to see, is ansyncore replaced with a second twisted loop. I would also 
>like the zeo server to be a twisted app that runs zrpc. Twisted's ssh and 
>ssl support would be used to secure client / server communication.

Why is a second event-loop necessary here?



From p.mayers at imperial.ac.uk  Thu May  4 04:24:10 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 04 May 2006 09:24:10 +0100
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44593D8A.6040706@eastlink.ca>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>	<4457FCA9.3010907@eastlink.ca>
	<4458692D.4050000@imperial.ac.uk> <44593D8A.6040706@eastlink.ca>
Message-ID: <4459BA2A.4060800@imperial.ac.uk>

David Pratt wrote:
> currently uses a twisted loop to run the application and an asyncore 
> loop for zeo communication. These are both initialized at start up. What 
> I would like to see, is ansyncore replaced with a second twisted loop. I 

Why in the world wouldn't you use the first twisted loop? Why a second?



From eric.faurot at gmail.com  Thu May  4 05:05:21 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 4 May 2006 11:05:21 +0200
Subject: [Twisted-Python] No-op TimerService on Windows?
Message-ID: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>

Hi,

In the process of exploring my options for deploying twisted
applications on Windows, I noticed that when running the application,
_twistw (line 43) also starts a TimerService around a no-op:

app.startApplication(internet.TimerService(0.1, lambda:None), 0)

I suppose there is very good reason to do so, but I do not see it.
Can somebody enlighten me?

Eric.

From fairwinds at eastlink.ca  Thu May  4 09:03:24 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Thu, 04 May 2006 10:03:24 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
References: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
Message-ID: <4459FB9C.2080202@eastlink.ca>

glyph at divmod.com wrote:
> 
> 
> On Wed, 03 May 2006 20:32:26 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi Phil. I am pleased about the zope and twisted integrated in zope3. 
>> I believe there can be a tighter integration and additional benefits. 
>> Zope currently uses a twisted loop to run the application and an 
>> asyncore loop for zeo communication. These are both initialized at 
>> start up. What I would like to see, is ansyncore replaced with a 
>> second twisted loop. I would also like the zeo server to be a twisted 
>> app that runs zrpc. Twisted's ssh and ssl support would be used to 
>> secure client / server communication.
> 
> Why is a second event-loop necessary here?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Hi Glyph. I believe that performance would suffer using a single loop. I 
am not aware of any evaluation to provide evidence of the extent of the 
impact this would have. zrpc has never been refactored in twisted to 
date, though I have recently suggested this. My general feeling is that 
a different syncing solution is most likely needed. The existing zeo 
client / server relationship has limitations, one of these being the 
granularity desired in the communication longer term. My inclination 
more recently has been to leave zeo alone and work with something 
different that might present an alternative.

The thought of using the existing reactor for communication and serving 
has not escaped me. Once I have a syncing server working in twisted with 
whatever protocol I use, I will have the chance to evaluate performance 
on a couple of levels. This discussion for me has a bit more to do with 
possibilities and exploring boundaries at this point. Googling for 
information, I came across the patch that also suggested the possibility 
of multiple independent reactors. This possibility is interesting to me, 
  even outside of zope.

Regards,
David



From ssgzhantr at gmail.com  Thu May  4 10:19:04 2006
From: ssgzhantr at gmail.com (xuezhu aerodew)
Date: Thu, 4 May 2006 22:19:04 +0800
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4459FB9C.2080202@eastlink.ca>
References: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
	<4459FB9C.2080202@eastlink.ca>
Message-ID: <baf51e510605040719n7fe8c32euf1053ba1acffa963@mail.gmail.com>

    i have erver try to patch twisted to let it use threadpool,so that
do_select will not be blocked,and let more than one thread execute the event
handle,but seeming as above mentioned,that undertaking is non_trivival
goal.we have to take care of condition race.so currently for multiple
threaded main loop,it is not possible
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060504/6ac032e0/attachment.htm 

From glyph at divmod.com  Thu May  4 10:26:22 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 4 May 2006 10:26:22 -0400
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
Message-ID: <20060504142622.22481.1505062321.divmod.quotient.21329@ohm>



On Thu, 4 May 2006 11:05:21 +0200, Eric Faurot <eric.faurot at gmail.com> wrote:

>In the process of exploring my options for deploying twisted
>applications on Windows, I noticed that when running the application,
>_twistw (line 43) also starts a TimerService around a no-op:
>
>app.startApplication(internet.TimerService(0.1, lambda:None), 0)
>
>I suppose there is very good reason to do so, but I do not see it.
>Can somebody enlighten me?

There should be a comment or something to this effect, but:

On Windows, the "signal" handling that Control-c triggers doesn't actually interrupt select().  That timer is there to keep the timeout low so that the server responds in a timely fashion when the user hits Control-c on the console, even if nothing else is happening.



From glyph at divmod.com  Thu May  4 10:32:32 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 4 May 2006 10:32:32 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4459FB9C.2080202@eastlink.ca>
Message-ID: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>


>glyph at divmod.com wrote:
>>Why is a second event-loop necessary here?

>Hi Glyph. I believe that performance would suffer using a single loop. I am 
>not aware of any evaluation to provide evidence of the extent of the impact 
>this would have.

Fair enough.

>The thought of using the existing reactor for communication and serving has 
>not escaped me. Once I have a syncing server working in twisted with 
>whatever protocol I use, I will have the chance to evaluate performance on a 
>couple of levels. This discussion for me has a bit more to do with 
>possibilities and exploring boundaries at this point. Googling for 
>information, I came across the patch that also suggested the possibility of 
>multiple independent reactors. This possibility is interesting to me,  even 
>outside of zope.

Despite the fact that I don't have a similar use-case on a real server or client, it's also interesting to me.  It would definitely make certain test-cases easier to write, and easier testing == more tests.  :)

I previously suggested that perhaps you could write tests for that patch, to verify that multiple reactors could actually run simultaneously.  That was a serious suggestion: if you'd like Twisted to support this feature, you can almost certainly get it accepted if there are accompanying test cases.  I'll commit to doing the reviews if you submit the patches.



From eric.faurot at gmail.com  Thu May  4 11:39:22 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 4 May 2006 17:39:22 +0200
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
References: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
	<20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
Message-ID: <e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>

On 5/4/06, glyph at divmod.com <glyph at divmod.com> wrote:

> On Thu, 4 May 2006 11:05:21 +0200, Eric Faurot <eric.faurot at gmail.com> wrote:
>
> >In the process of exploring my options for deploying twisted
> >applications on Windows, I noticed that when running the application,
> >_twistw (line 43) also starts a TimerService around a no-op:
> >
> >app.startApplication(internet.TimerService(0.1, lambda:None), 0)
> >
> >I suppose there is very good reason to do so, but I do not see it.
> >Can somebody enlighten me?
>
> There should be a comment or something to this effect, but:
>
> On Windows, the "signal" handling that Control-c triggers doesn't actually interrupt select().  That timer is there to keep the timeout low so that the server responds in a timely fashion when the user hits Control-c on the console, even if nothing else is happening.

Ok, but as far as I can see, it is redundant with way select is
wrapped on win32 (in selectreactor). BTW, I am not windows-savvy, but
are the arguments to select (r,w,w) really correct? not (r,w,e)?

def win32select(r, w, e, timeout=None):
    """Win32 select wrapper."""
    if not (r or w):
        # windows select() exits immediately when no sockets
        if timeout is None:
            timeout = 0.01
        else:
            timeout = min(timeout, 0.001)
        sleep(timeout)
        return [], [], []
    # windows doesn't process 'signals' inside select(), so we set a max
    # time or ctrl-c will never be recognized
    if timeout is None or timeout > 0.5:
        timeout = 0.5
    r, w, e = select.select(r, w, w, timeout)
    return r, w + e, []


Eric.

From fairwinds at eastlink.ca  Thu May  4 13:59:42 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Thu, 04 May 2006 14:59:42 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>
References: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>
Message-ID: <445A410E.8000505@eastlink.ca>

glyph at divmod.com wrote:
> I previously suggested that perhaps you could write tests for that 
> patch, to verify that multiple reactors could actually run 
> simultaneously.  That was a serious suggestion: if you'd like Twisted to 
> support this feature, you can almost certainly get it accepted if there 
> are accompanying test cases.  I'll commit to doing the reviews if you 
> submit the patches.

Hi Glyph. The first thing I'm looking at is putting together a sync 
server. This will take some time. Once I have something, I'll be looking 
to measure the impact on zope. This should eliminate some speculatation 
and provide a clearer picture of performance.

At this point I'm hoping to have something a bit more concrete to 
discuss. I may be surprised - who knows. I am hoping this effort will 
result in something that will work well enough to use on zope's single 
reactor (if only for lighter use) in the interim.

If performance is not so hot, I will be revisit the multiple reactor 
issue. There is another person that I have been in contact with that is 
also interested in helping. But there is no point in going this 
direction just yet. Not without at least a demonstration server and 
client, and any proof a significant performance impact.

Regards,
David



From andrew-twisted at puzzling.org  Thu May  4 21:51:47 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 5 May 2006 11:51:47 +1000
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>
References: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
	<20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
	<e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>
Message-ID: <20060505015147.GF12431@steerpike.home.puzzling.org>

On Thu, May 04, 2006 at 05:39:22PM +0200, Eric Faurot wrote:
> On 5/4/06, glyph at divmod.com <glyph at divmod.com> wrote:
> 
[...]
> >
> >There should be a comment or something to this effect, but:
> >
> >On Windows, the "signal" handling that Control-c triggers doesn't actually 
> >interrupt select().  That timer is there to keep the timeout low so that 
> >the server responds in a timely fashion when the user hits Control-c on 
> >the console, even if nothing else is happening.
> 
> Ok, but as far as I can see, it is redundant with way select is
> wrapped on win32 (in selectreactor). BTW, I am not windows-savvy, but
> are the arguments to select (r,w,w) really correct? not (r,w,e)?

You're right, this does seem to take care of that problem.  I'm not sure what
benefit the extra code to do this in twistw adds.

As far as (r,w,w) goes, yes, it is correct -- again, there ought to be a comment
about this.  select on windows is subtly incompatible with select on POSIX, and
uses the third fd set to check for connection failures and the like, whereas on
POSIX this is just signalled on the first or second fd set.  I forget the
precise details, but luckily Itamar has recorded them here: 

    http://itamarst.org/writings/win32sockets.html

So our win32select wrapper passes the write list as the exception list too, then
returns (r, w + e, []) -- so the wrapper behaves more like POSIX, as the
SelectReactor expects.

-Andrew.




From ssgzhantr at gmail.com  Thu May  4 23:13:59 2006
From: ssgzhantr at gmail.com (aerodew)
Date: Fri, 5 May 2006 11:13:59 +0800
Subject: [Twisted-Python] protocol factory
Message-ID: <baf51e510605042013s3c204403p1fb0f3db7e2a9658@mail.gmail.com>

    i think Factory is not to the point,just concerned with its
concept,factory
should only take care of producing proper protocol instance.i can't see any
clue
of protocol context in the defintion of factory.so the boudary of factory is
loom,i don't
like it.or on other hand,we can it can be categoried into abstract
factroy,then i proprose
following refraction.

class ProtoAbsFactory:
    implements(interfaces.IProtocolFactory)

    protocol=None
    context=None

    numProtos=0

    def buildProtocol(self):
        pass
    def buildContext(self):
        pass

class ProtoContext:
    def doStart(self):
        pass
    def doStop(self):
        pass

class ClientProtoContext(ProtoContext):
    def startedCnnecting(self):
        pass
    def clientConnectionFailed(self):
        pass
    def clientConnectionLost(self):
        pass

class ReconnectingClientProtoContext(ClientProtoContext):
    def clientConnectoionFailed(self,connector,reason):
        self.connector=connector
        self.retry()
    def clientConnectionLost(self,connector,reason):
        self.connector=connector
        self.retry()
    def retry(self):
        self.connector.connect()

     by introducing context,we make solution for some situation
very simple,just like http,since it is a stateless ,we have to bring
in session to store state information during the communication,here by
refining the context ,we can easily achieve it
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060505/9ecef08e/attachment.htm 

From robert at gravina.com  Fri May  5 08:16:23 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 5 May 2006 21:16:23 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
Message-ID: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>

Twisted-list,

In an application I'm writing I would like all Perspective Broker  
clients to share some list of objects and have them all keep in sync  
when one of the clients updates an object's attributes (imagine say a  
shared address book - I'm not creating an address book, but it's  
easier than explaining the details of my app). I've created a  
pb.Cacheable class for the purposes of notifying clients when new  
objects are added to this list which works fine (I based this on the  
cache_classes.py example from the docs here <http://twistedmatrix.com/ 
projects/core/documentation/howto/pb-copyable.html>).

Where I am having trouble is with round trip editing these objects  
(which are all both pb.Copyable and pb.RemoteCopy - I did this so  
that I wouldn't have problems of accidentally storing a RemoteFoo  
object in my ZODB rather than a Foo object). Say one user edits one  
of the objects (e.g. changes the name/phone number etc. of one of the  
entries in the shared address book). and then I callRemote to some  
method like "updateObject" on the users Avatar and pass this object  
to this method. According to the doc page I mentioned previously   
"Copyable objects return unchanged from a round trip", but when I  
check if the object is in the list on the server it thinks it isn't  
there. In fact, they seem to point to different objects in memory, so  
naturally a "if object in list" statement will fail.

Am I checking for equality in the wrong way? Or am I approaching the  
problem in the wrong way?

I am quite new to Twisted, so I apologise if the problem is obvious.

Robert



From mcmillen at cs.cmu.edu  Fri May  5 09:49:40 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Fri, 5 May 2006 09:49:40 -0400
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
Message-ID: <20060505134940.GF27715@cs.cmu.edu>

> Am I checking for equality in the wrong way? Or am I approaching the  
> problem in the wrong way?

I'm not sure if this is the Right Way of doing things, but I got
around this in my own application by making my Copyable objects have a
unique ID. Keep your objects in a dict that maps from id -> object, and
then just say something like:

    objDict[obj.objID] = obj

whenever you get an object back. Possibly you want to check to see if
the object is already in the dict, depending on your application-level
constraints -- in my particular application, it would be considered an
error to send back an object with an ID that wasn't already known by
the server. (Also, you may or may not want to set __eq__, __lt__,
etc. to compare these objects by their ID.)

- Colin


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060505/87dce355/attachment.pgp 

From robert at gravina.com  Fri May  5 10:24:46 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 5 May 2006 23:24:46 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <20060505134940.GF27715@cs.cmu.edu>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
Message-ID: <949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>


On 2006/05/05, at 22:49, Colin McMillen wrote:

>> Am I checking for equality in the wrong way? Or am I approaching the
>> problem in the wrong way?
>
> I'm not sure if this is the Right Way of doing things, but I got
> around this in my own application by making my Copyable objects have a
> unique ID. Keep your objects in a dict that maps from id -> object,  
> and
> then just say something like:
>
>     objDict[obj.objID] = obj
>
> whenever you get an object back. Possibly you want to check to see if
> the object is already in the dict, depending on your application-level
> constraints -- in my particular application, it would be considered an
> error to send back an object with an ID that wasn't already known by
> the server. (Also, you may or may not want to set __eq__, __lt__,
> etc. to compare these objects by their ID.)
>

Thanks Colin, this would actually work fine for what I need to do. I  
just figured that I was doing something wrong since it's mentioned in  
a few places that Twisted should be able to do this. Perhaps I am  
mistaking Copyable with Referenceable however... The example from the  
docs I was thinking of where an object is send on a round trip then  
compared using '==' is actually a pb.Referenceable (I think Copyable  
is a subclass though)?

Anyway, your solution should work and I might use that for the time  
being. All objects that could possibly go out to clients and come  
back again should be stored in the ZODB, so I might be able to use  
whatever ID it uses, or generate one myself otherwise.

If anyone knows the "Twisted Way" do deal with several clients  
sharing lists of objects (or even just complex objects that refer to  
other objects) please let me know.

Thanks all for the fast responses!

> - Colin
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From mithrandi-twisted-python at mithrandi.za.net  Fri May  5 10:53:54 2006
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Fri, 5 May 2006 16:53:54 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458CA42.5060207@libero.it>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
	<4458CA42.5060207@libero.it>
Message-ID: <20060505145354.GD27395@mithrandi.za.net>

* Manlio Perillo <manlio_perillo at libero.it> [2006-05-03 13:20:34 -0200]:

> Ok, but it is improper to require such an authentication for each
> resource... ;-)
> 
> Clients authenticate once and use "sessions" to identify themselves.

Many people are successfully using basic/digest auth without any use of
sessions, and I would hardly call this "improper". In many cases it is
much more straightforward than bolting on stateful session tracking, and
it also potentially makes client implementation simpler.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060505/577a4c9f/attachment.pgp 

From mcmillen at cs.cmu.edu  Fri May  5 11:31:41 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Fri, 5 May 2006 11:31:41 -0400
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
Message-ID: <20060505153141.GH27715@cs.cmu.edu>

> Thanks Colin, this would actually work fine for what I need to do. I  
> just figured that I was doing something wrong since it's mentioned in  
> a few places that Twisted should be able to do this. Perhaps I am  
> mistaking Copyable with Referenceable however... The example from the  
> docs I was thinking of where an object is send on a round trip then  
> compared using '==' is actually a pb.Referenceable (I think Copyable  
> is a subclass though)?

As I said, I'm not sure that my way of doing things is the Right Way
(or considered a best practice), so if anyone can confirm or deny,
that would possibly be useful. :) It seems like a hack, but it works
for me.

- Colin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060505/a24b3690/attachment.pgp 

From robert at gravina.com  Fri May  5 12:42:32 2006
From: robert at gravina.com (Robert Gravina)
Date: Sat, 6 May 2006 01:42:32 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <20060505153141.GH27715@cs.cmu.edu>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
Message-ID: <B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>

> As I said, I'm not sure that my way of doing things is the Right Way
> (or considered a best practice), so if anyone can confirm or deny,
> that would possibly be useful. :) It seems like a hack, but it works
> for me.
>

Yeah actually I think my problem is that I shouldn't be using  
Copyable since they copy-by-value and what I really want to do is  
copy-by-reference so that when clients edit attributes on the object  
the server (and other clients) can find out about it. I should be  
using Cacheable, but not sure having every object in my application  
as a Cacheable with a list of observers is the best way to go about it.

Guess I'll just have to think this through a little more.

Although I understand whether to use Referenceable/Copyable/Cachable  
depends on your specific application, If anyone could suggest a good  
general way to approach keeping clients in sync who are sharing many  
objects that would be of great help.

I've already got one "cache" type object (a pb.Cacheable) that keeps  
a list of observers and all adds/updates/deletes go through this...  
but up until now I have been using Copyable for the objects that are  
stored in lists in this cache, but found I can't update after a  
client modifies using Copyables (because I have no way of telling  
which object was sent back to the server). Using Referencable would  
be tricky because the clients need to access all the classes  
attributes to display in the UI, and that would require remote_get*  
methods for all of them) and using Cachables again would require  
*another* list of observers to be maintained - I'm just not sure how  
all this should work.

Does anyone have any suggestions of how to tackle this problem?

Robert




From general at eepatents.com  Fri May  5 13:14:25 2006
From: general at eepatents.com (Ed Suominen)
Date: Fri, 05 May 2006 10:14:25 -0700
Subject: [Twisted-Python] Twisted + SQLAlchemy
In-Reply-To: <000c01c67022$3063be80$38aa20d4@hp>
References: <000c01c67022$3063be80$38aa20d4@hp>
Message-ID: <445B87F1.1040908@eepatents.com>

I've received an inquiry about how I'm using SQLAlchemy under Twisted. I
thought I'd provide the answer so that others can benefit from it as well:

http://foss.eepatents.com/pNetworkX/browser/trunk/pnetworkx/database.py

Note particularly the "transact" function, which is used as a decorator.
Thanks to Valentino Volonghi (aka Dialtone) for the fine idea of using a
decorator to set up a nonblocking transaction (using deferToThread) for
whatever functions are so designated.

Here's a usage example, with various database-accessing methods that are
decorated with "@transact":

http://foss.eepatents.com/pNetworkX/browser/trunk/pnetworkx/edges.py

Best regards,
Ed Suominen



From glyph at divmod.com  Fri May  5 17:39:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 5 May 2006 17:39:21 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <20060505145354.GD27395@mithrandi.za.net>
Message-ID: <20060505213921.22481.49127185.divmod.quotient.21826@ohm>



On Fri, 5 May 2006 16:53:54 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
>* Manlio Perillo <manlio_perillo at libero.it> [2006-05-03 13:20:34 -0200]:
>
>> Ok, but it is improper to require such an authentication for each
>> resource... ;-)
>>
>> Clients authenticate once and use "sessions" to identify themselves.
>
>Many people are successfully using basic/digest auth without any use of
>sessions, and I would hardly call this "improper". In many cases it is
>much more straightforward than bolting on stateful session tracking, and
>it also potentially makes client implementation simpler.

HTTP auth can also be used in such a way that the "session" is simply the username that is being authenticated.  nevow.guard attempts to make the distinction between cookie-based and http-auth-based sessions simply an implementation detail.



From nico at tekNico.net  Fri May  5 18:07:02 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 06 May 2006 00:07:02 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <20060505213921.22481.49127185.divmod.quotient.21826@ohm>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
Message-ID: <445BCC86.9020104@tekNico.net>

> HTTP auth can also be used in such a way that the "session" is simply
> the username that is being authenticated.  nevow.guard attempts to make
> the distinction between cookie-based and http-auth-based sessions simply
> an implementation detail.

Unfortunately they're functionally equivalent only as long as the same
credentials are only used on one browser instance at the same time. If one
user authenticates himself on two browsers with the same credentials, there
can be two distinct cookie-based sessions, but only one http-auth based
"session".

An interesting discussion about this has been going on for weeks now on the
rest-discuss mailing list on Yahoo Groups.


-- 
Nicola Larosa - http://www.tekNico.net/

Most people are doomed in childhood by accepting the axiom that work equals
pain. Those who escape this are nearly all lured onto the rocks by prestige
or money. How many even discover something they love to work on? A few
hundred thousand, perhaps, out of billions. -- Paul Graham, January 2006





From jarrod at vertigrated.com  Sat May  6 11:09:17 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Sat, 6 May 2006 11:09:17 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445BCC86.9020104@tekNico.net>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
Message-ID: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>

On 5/5/06, Nicola Larosa <nico at teknico.net> wrote:
>
> > HTTP auth can also be used in such a way that the "session" is simply
> > the username that is being authenticated.  nevow.guard attempts to make
> > the distinction between cookie-based and http-auth-based sessions simply
> > an implementation detail.
>
> Unfortunately they're functionally equivalent only as long as the same
> credentials are only used on one browser instance at the same time. If one
> user authenticates himself on two browsers with the same credentials,
> there
> can be two distinct cookie-based sessions, but only one http-auth based
> "session".
>

that would be the case for a NAIVE cookie-based session.

an intelligent session management implementation would track be able to tell
from
the auth request that the user had already started a session and just use
that.

this kind of thing is already been written by many people, the OP needs to
just use
something that already exists, session tracking code is not something you
should be
writting unless you are writing framework code or an app server.

and since he is confusing / equating authenticaiton == sessions he lacks a
fundemental
understanding about security and authentication, authorization and stateful
vs stateless semantics.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060506/afcf2143/attachment.htm 

From johann.borck at densedata.com  Sat May  6 12:14:17 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 06 May 2006 18:14:17 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
Message-ID: <445CCB59.4070102@densedata.com>

jarrod roberson wrote:

>
>
> On 5/5/06, *Nicola Larosa* <nico at teknico.net
> <mailto:nico at teknico.net>> wrote:
>
>     > HTTP auth can also be used in such a way that the "session" is
>     simply
>     > the username that is being authenticated.  nevow.guard attempts
>     to make
>     > the distinction between cookie-based and http-auth-based
>     sessions simply
>     > an implementation detail.
>
>     Unfortunately they're functionally equivalent only as long as the same
>     credentials are only used on one browser instance at the same
>     time. If one
>     user authenticates himself on two browsers with the same
>     credentials, there
>     can be two distinct cookie-based sessions, but only one http-auth
>     based
>     "session".
>
>
> that would be the case for a NAIVE cookie-based session.
>
> an intelligent session management implementation would track be able
> to tell from
> the auth request that the user had already started a session and just
> use that.
>
> this kind of thing is already been written by many people, the OP
> needs to just use
> something that already exists, session tracking code is not something
> you should be
> writting unless you are writing framework code or an app server.
>
> and since he is confusing / equating authenticaiton == sessions he
> lacks a fundemental

just interested,who do you refer to by "he"?

> understanding about security and authentication, authorization and
> stateful vs stateless semantics.
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From manlio_perillo at libero.it  Sat May  6 12:16:25 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 06 May 2006 14:16:25 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
Message-ID: <445CCBD9.6020204@libero.it>

jarrod roberson ha scritto:
> [...]
> 
> an intelligent session management implementation would track be able to
> tell from
> the auth request that the user had already started a session and just
> use that.
> 
> this kind of thing is already been written by many people, the OP needs
> to just use
> something that already exists, session tracking code is not something
> you should be
> writting unless you are writing framework code or an app server.
> 
> and since he is confusing 

Yes, I wrongly use the term REST protocol in place of UDP connections.

/ equating authenticaiton == sessions he lacks

Not really.

I simply have seen an UDP protocol that uses sessions to identify each
request.
The session is obtained after an authentication phase.

Since I think that the procedure is similar to HTTP session handling, I
was asking if there is some reusable support for creating "secure"
session id and if cred has some support for this.



Thanks and regards  Manlio Perillo



From exarkun at twistedmatrix.com  Sun May  7 01:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 May 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1146978301.96.444500064@twistedmatrix.com

Bug summary
______________________
Summary for 2006-04-30 through 2006-05-07
Bugs opened: 21    Bugs closed: 15  Total open bugs: 608 (+6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -5  |Highest:  -2          |Conch:    +1           
|Enhancement: +10  |High:     -5          |Core:     +8           
|Task:         +1  |Normal:  +13          |Mail:     +2           
                   |Low:      +0          |Names:    -1           
                                          |Trial:    -5           
                                          |Web2:     +2           
                                          |Website:  +0           
                                          |Words:    -1           


New / Reopened Bugs
______________________
                    ===== High =====
[#1701] Most twisted.mail.pop3.IMailbox should be allowed to return Deferreds (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/1701

                    ===== Normal =====
[#1685] [patch] unicode fixups in words.irc and words.service (opened by j2a)
    defect          words      http://twistedmatrix.com/trac/ticket/1685

[#1686] Better XML Stanza and error support (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1686

[#1687] Convert reports into queries (opened by exarkun)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1687

[#1688] wxreactor ignores previously-installed sigint handlers (opened by ml.flex)
    defect          core       http://twistedmatrix.com/trac/ticket/1688

[#1689] Move the Trac configuration files into the WebSite repository (opened by tekNico)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1689

[#1690] Make links to documentation for all Twisted versions (opened by tekNico)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1690

[#1691] POP3Client can't deal with the continued commands request (opened by tomoyuki)
    defect          mail       http://twistedmatrix.com/trac/ticket/1691

[#1692] Intermittent test failure on win32 (test_policies.ThrottlingTestCase.testLimit) (opened by teratorn) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1692

[#1693] tkconch freeze waiting for data on Windows (opened by synapsis)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1693

[#1694] killing a process (opened by synapsis)
    defect          core       http://twistedmatrix.com/trac/ticket/1694

[#1695] raising an exception from datagramReceived should not kill a listening UDP Port (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1695

[#1696] RPMs fail to build on RHEL 4 (opened by shieldszero)
    defect          core       http://twistedmatrix.com/trac/ticket/1696

[#1697] Merge Combinator into Twisted (opened by hypatia)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1697

[#1698] Version option for Trial (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1698

[#1699] t.w2.vhost.AutoVHostURIRewrite doesn't pass remote_ip information (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1699

[#1700] t.w2.vhost.AutoVHostURIRewrite fails silently if no X-Forwarded-Host header is provided. (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1700

[#1702] Kill Defer.setTimeout (opened by jml)
    task            core       http://twistedmatrix.com/trac/ticket/1702

[#1703] Twisted's logging API is confusing (opened by predictive)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1703

[#1705] Test failure on win32 (FilePathTestCase.testGetAndSet) (opened by teratorn)
    defect          core       http://twistedmatrix.com/trac/ticket/1705

                    ===== Low =====
[#1704] Misspelling at http://twistedmatrix.com/projects/conch/ (opened by shieldszero) (CLOSED, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1704



Closed Bugs
______________________
                    ===== Highest =====
[#1074] domish.Element checking __class__, breaks inheritance (opened by VislabSteve, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1074

[#1654] Optionally provide prefix context to serialization of domish Elements. (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1654

                    ===== High =====
[#1285] twisted.trial.test.test_util.TestFindObject.test_importModule fails intermittently (opened by jml, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1285

[#1213] trial does not isolate test methods from each other (opened by exarkun, closed by jml, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/1213

[#1304] twisted.trial.test.test_failure_formatting.TestFailureFormatting.testFormatErroredMethod hangs indefinitely (opened by exarkun, closed by jml, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/1304

[#1026] [PATCH] Improve index pages of documentation (opened by hypatia, closed by tekNico, invalid)
    defect          website    http://twistedmatrix.com/trac/ticket/1026

[#1339] API docs on site should reflect recent releases (opened by ralphm, closed by tekNico, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1339

[#1217] trial.util should not be used by non-Trial code (opened by jml, closed by jml, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/1217

                    ===== Normal =====
[#1683] Set up and host Planet Twisted (opened by hypatia, closed by ralphm, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1683

[#1675] failUnlessFailure is too liberal (opened by spiv, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1675

[#1592] twisted.trial.test.test_loader.FileTest.test_packageNotInPath fails (opened by spiv, closed by jml, worksforme)
    defect          trial      http://twistedmatrix.com/trac/ticket/1592

[#1669] Parser in domish does not keep unreferenced namespace declarations (opened by ff, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1669

[#1692] Intermittent test failure on win32 (test_policies.ThrottlingTestCase.testLimit) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1692

[#343 ] reactor fd cleanup between tests (opened by warner, closed by jml, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/343

                    ===== Low =====
[#1704] Misspelling at http://twistedmatrix.com/projects/conch/ (opened by shieldszero, closed by tekNico, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1704





From ml.flex at gmail.com  Sun May  7 05:55:54 2006
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 7 May 2006 11:55:54 +0200
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
	<B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
Message-ID: <d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>

It's possible to make each element in the set being edited a
cacheable. If you think that would introduce too much overhead, then
you can add a method to the "address book" object which updates one of
the entries in this address book, and uses an id to identify the entry
within the address book. So the address book is the dict. That's what
I did in a similar case. I'm no expert though.

HTH

Micky

From jarrod at vertigrated.com  Sun May  7 16:25:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Sun, 7 May 2006 16:25:31 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445CCBD9.6020204@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
	<445CCBD9.6020204@libero.it>
Message-ID: <2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>

On 5/6/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> jarrod roberson ha scritto:
> > [...]
> >
> > an intelligent session management implementation would track be able to
> > tell from
> > the auth request that the user had already started a session and just
> > use that.
> >
> > this kind of thing is already been written by many people, the OP needs
> > to just use
> > something that already exists, session tracking code is not something
> > you should be
> > writting unless you are writing framework code or an app server.
> >
> > and since he is confusing
>
> Yes, I wrongly use the term REST protocol in place of UDP connections.
>
> / equating authenticaiton == sessions he lacks
>
> Not really.
>
> I simply have seen an UDP protocol that uses sessions to identify each
> request.
> The session is obtained after an authentication phase.


if the sesssion id never changes I am SURE you have seen an insecure UDP
protocol
which means unless the client and server are generating dynamic single use
tokens and "know" what the next valid session id the client should send,
which implies encryption plus authenticaiton on every request.

Since I think that the procedure is similar to HTTP session handling, I
> was asking if there is some reusable support for creating "secure"
> session id and if cred has some support for this.



you still don't understand STATE != Authentication.

ANYONE can sniff the packets, get whatever token or breadcrumb you are using
for the state id and spoof it.
that is unless you REQUIRE authentication on every request. "secure" session
id's imply a form of authenticaiton on every request.

you can't just "encrypt" a string and call it a "secure" session id.

you can have UNSECURE STATE tracking with out Authentication on every
request, using server side sessions is just one way to do it.

you can NOT have SECURE STATE tracking without some form of authetenication
on every request, that authentication might be "implied" by some encryption
process, but it is still a form of authentication.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060507/bfc431aa/attachment.htm 

From manlio_perillo at libero.it  Mon May  8 04:17:43 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 08 May 2006 06:17:43 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>
	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
Message-ID: <445EFEA7.6070000@libero.it>

jarrod roberson ha scritto:
> [...]
>     I simply have seen an UDP protocol that uses sessions to identify each
>     request.
>     The session is obtained after an authentication phase.
> 
> 
> if the sesssion id never changes I am SURE you have seen an insecure UDP
> protocol

Of course, as the 90% of internet (as far as I have seen)..

> which means unless the client and server are generating dynamic single
> use tokens and "know" what the next valid session id the client should
> send, which implies encryption plus authenticaiton on every request.
> 
>     Since I think that the procedure is similar to HTTP session handling, I
>     was asking if there is some reusable support for creating "secure"
>     session id and if cred has some support for this.
> 
> 
> 
> you still don't understand STATE != Authentication.
> 
> ANYONE can sniff the packets, get whatever token or breadcrumb you are
> using for the state id and spoof it.
> that is unless you REQUIRE authentication on every request. "secure"
> session id's imply a form of authenticaiton on every request.
> 

Ok, but this implies (with simple authentication scheme like HTTP) to
double the number of requests/reponses.

And what if the authentication protocol is more complex?

> you can't just "encrypt" a string and call it a "secure" session id.
> 

But I can generate a "secure" session and use it for encrypt every
request/response.

Or, more simply, one can use SSL.

Unfortunately many web site not use SSL or use only HTTP Base
Authentication...


By the way:
for user tracking in UDP, why not just use the peer address?



Thanks and regards  Manlio Perillo



From warner at lothar.com  Mon May  8 04:54:32 2006
From: warner at lothar.com (Brian Warner)
Date: Mon, 08 May 2006 01:54:32 -0700 (PDT)
Subject: [Twisted-Python] newpb 0.0.1 is released!
Message-ID: <20060508.015432.86968533.warner@lothar.com>

I'm pleased to announce that the first alpha release of "newpb", a ground-up
rewrite of twisted's native RPC protocol, is now available.

Years in the making, newpb offers a variety of new features, more flexible
serialization than oldpb, a better security model, and the potential (not yet
achieved) to be faster. For a larger list of new features, take a look at the
newpb wiki page[1].

The release itself is currently available from my web directory[2]. At some
point in the near future, it should also be available from the Twisted
downloads directory, and from the download mirror sites as well. To use the
release you will have to install it with the usual 'setup.py install'
incantation: it adds a 'twisted.pb' module to your regular twisted
installation, and as such it won't work if you just add the unpacked
directory to your PYTHONPATH.

Please note that this is an ALPHA release. Think of it as a technology
preview. The wire protocol is *not* stable yet, which means that a
newpb-0.0.1 client is unlikely to be able to talk to a newpb-0.0.2 server,
etc. Don't deploy it anywhere unless you will be able to upgrade both ends of
the wire in the future. There are likely to be significant bugs (including
security holes) present, and some major design decisions still remain to be
settled. For production systems, please continue to use oldpb (aka
twisted.spread, as distributed in TwistedCore) for the forseable future.

That said, it's high time that people get a chance to play with this code. An
earlier version of it leaked into the TwistedCore-2.2.0 release before anyone
could catch it (but truth be told the code there is almost identical to this
0.0.1 release), but apart from that it has been languishing in SVN[3] for far
too long. I think I've been working on this intermittently for three years,
hopefully with other people involved we can get this thing rolling and usable
in a non-bounded amount of time.

The top-level "Getting Started" documentation, with examples, is in
doc/pb/using-pb.xhtml, of which a lore-rendered version is in my newpb
webspace[4]. There are a number of protocol specification documents in there
too. There are also lists of outstanding jobs and open design questions in
doc/pb/*. The 8.5kloc of code lives in twisted/pb/*, along with an additional
4.7kloc in the 229 unit tests.

Naming: the name is still in flux. We've been using "newpb" as a working
title, to distinguish it from "oldpb" (which is the twisted.spread that's
been shipping in TwistedCore since forever). "pb2" is another working title.
It will probably have some new name in the future, hopefully one which makes
its purpose more immediately obvious. The point right now is to work on the
functionality, not the name. In the long run this is intended to replace
oldpb/twisted.spread, but not this month. So don't worry about the name too
much for now.

When filing bugs and tickets, if you see a 'pb2' component in Trac, please
use that. Otherwise please use the 'pb' component and include "newpb" or
"pb2" in the title. Discussions here on the twisted-python mailing list or in
the #twisted IRC channel on freenode.net are also appropriate.


Have an Alice, Bob, and Carol-ific day,
 -Brian



[1]: http://twistedmatrix.com/trac/wiki/NewPB
[2]: http://twistedmatrix.com/~warner/newpb/TwistedPb2-0.0.1.tar.bz2
[3]: svn://svn.twistedmatrix.com/svn/Twisted/tags/releases/pb2/0.0.1
[4]: http://twistedmatrix.com/~warner/newpb/




From jritter at bektel.com  Mon May  8 11:03:04 2006
From: jritter at bektel.com (Josh Ritter)
Date: Mon, 8 May 2006 10:03:04 -0500
Subject: [Twisted-Python] newpb 0.0.1 is released!
References: <20060508.015432.86968533.warner@lothar.com>
Message-ID: <005201c672b0$96fbc210$0400000a@spooge>

Excellent!

It's great to see newpb emerge from the shadows :)

We use spread extensively in our game Minions of Mirth.  Security and 
*performance* are key areas for us.

Thanks!,
-Josh Ritter
Prairie Games, Inc
http://www.prairiegames.com




----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: <twisted-python at twistedmatrix.com>
Sent: Monday, May 08, 2006 3:54 AM
Subject: [Twisted-Python] newpb 0.0.1 is released!


> I'm pleased to announce that the first alpha release of "newpb", a 
> ground-up
> rewrite of twisted's native RPC protocol, is now available.
>
> Years in the making, newpb offers a variety of new features, more flexible
> serialization than oldpb, a better security model, and the potential (not 
> yet
> achieved) to be faster. For a larger list of new features, take a look at 
> the
> newpb wiki page[1].
>
> The release itself is currently available from my web directory[2]. At 
> some
> point in the near future, it should also be available from the Twisted
> downloads directory, and from the download mirror sites as well. To use 
> the
> release you will have to install it with the usual 'setup.py install'
> incantation: it adds a 'twisted.pb' module to your regular twisted
> installation, and as such it won't work if you just add the unpacked
> directory to your PYTHONPATH.
>
> Please note that this is an ALPHA release. Think of it as a technology
> preview. The wire protocol is *not* stable yet, which means that a
> newpb-0.0.1 client is unlikely to be able to talk to a newpb-0.0.2 server,
> etc. Don't deploy it anywhere unless you will be able to upgrade both ends 
> of
> the wire in the future. There are likely to be significant bugs (including
> security holes) present, and some major design decisions still remain to 
> be
> settled. For production systems, please continue to use oldpb (aka
> twisted.spread, as distributed in TwistedCore) for the forseable future.
>
> That said, it's high time that people get a chance to play with this code. 
> An
> earlier version of it leaked into the TwistedCore-2.2.0 release before 
> anyone
> could catch it (but truth be told the code there is almost identical to 
> this
> 0.0.1 release), but apart from that it has been languishing in SVN[3] for 
> far
> too long. I think I've been working on this intermittently for three 
> years,
> hopefully with other people involved we can get this thing rolling and 
> usable
> in a non-bounded amount of time.
>
> The top-level "Getting Started" documentation, with examples, is in
> doc/pb/using-pb.xhtml, of which a lore-rendered version is in my newpb
> webspace[4]. There are a number of protocol specification documents in 
> there
> too. There are also lists of outstanding jobs and open design questions in
> doc/pb/*. The 8.5kloc of code lives in twisted/pb/*, along with an 
> additional
> 4.7kloc in the 229 unit tests.
>
> Naming: the name is still in flux. We've been using "newpb" as a working
> title, to distinguish it from "oldpb" (which is the twisted.spread that's
> been shipping in TwistedCore since forever). "pb2" is another working 
> title.
> It will probably have some new name in the future, hopefully one which 
> makes
> its purpose more immediately obvious. The point right now is to work on 
> the
> functionality, not the name. In the long run this is intended to replace
> oldpb/twisted.spread, but not this month. So don't worry about the name 
> too
> much for now.
>
> When filing bugs and tickets, if you see a 'pb2' component in Trac, please
> use that. Otherwise please use the 'pb' component and include "newpb" or
> "pb2" in the title. Discussions here on the twisted-python mailing list or 
> in
> the #twisted IRC channel on freenode.net are also appropriate.
>
>
> Have an Alice, Bob, and Carol-ific day,
> -Brian
>
>
>
> [1]: http://twistedmatrix.com/trac/wiki/NewPB
> [2]: http://twistedmatrix.com/~warner/newpb/TwistedPb2-0.0.1.tar.bz2
> [3]: svn://svn.twistedmatrix.com/svn/Twisted/tags/releases/pb2/0.0.1
> [4]: http://twistedmatrix.com/~warner/newpb/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 




From p.mayers at imperial.ac.uk  Mon May  8 13:52:26 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 08 May 2006 18:52:26 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445BCC86.9020104@tekNico.net>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
Message-ID: <445F855A.8000209@imperial.ac.uk>

Nicola Larosa wrote:
>> HTTP auth can also be used in such a way that the "session" is
>> simply the username that is being authenticated.  nevow.guard
>> attempts to make the distinction between cookie-based and
>> http-auth-based sessions simply an implementation detail.
> 
> Unfortunately they're functionally equivalent only as long as the
> same credentials are only used on one browser instance at the same
> time. If one user authenticates himself on two browsers with the same
> credentials, there can be two distinct cookie-based sessions, but
> only one http-auth based "session".

If you were using digest auth, correct use of the headers (I can't
remember which one off the top of my head) it would allow >1 http auth
session. I looked at this a while back; the issue being few orgs. have
an authentication database that can serve digest.

There's nothing to stop you sending a cookie AND requiring
WWW-Authenticate. Whether a non-browser client would see and round-trip
the cookie is another matter of course.

Possibly judicious use of 302s and url-based sessions would suffice, but
I don't know if that would impress or enrage REST purists - arguably you
could say the redirect was to a "representation" of the object hierarchy 
- google do something similar with the gdata API and rel="edit" for 
Atom+HTTP based deletes.



From jarrod at vertigrated.com  Mon May  8 14:34:51 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 8 May 2006 14:34:51 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445EFEA7.6070000@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
	<445CCBD9.6020204@libero.it>
	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
	<445EFEA7.6070000@libero.it>
Message-ID: <2389d4730605081134u24bf1cads744ba607d6f047a1@mail.gmail.com>

On 5/8/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> jarrod roberson ha scritto:
> > [...]
> >     I simply have seen an UDP protocol that uses sessions to identify
> each
> >     request.
> >     The session is obtained after an authentication phase.
> >
> >
> > if the sesssion id never changes I am SURE you have seen an insecure UDP
> > protocol
>
> Of course, as the 90% of internet (as far as I have seen)..
>
> > which means unless the client and server are generating dynamic single
> > use tokens and "know" what the next valid session id the client should
> > send, which implies encryption plus authenticaiton on every request.
> >
> >     Since I think that the procedure is similar to HTTP session
> handling, I
> >     was asking if there is some reusable support for creating "secure"
> >     session id and if cred has some support for this.
> >
> >
> >
> > you still don't understand STATE != Authentication.
> >
> > ANYONE can sniff the packets, get whatever token or breadcrumb you are
> > using for the state id and spoof it.
> > that is unless you REQUIRE authentication on every request. "secure"
> > session id's imply a form of authenticaiton on every request.
> >
>
> Ok, but this implies (with simple authentication scheme like HTTP) to
> double the number of requests/reponses.
>
> And what if the authentication protocol is more complex?
>
>
you can send "premetive" authentication in the REQUEST headers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060508/d71c7aa5/attachment.htm 

From p.mayers at imperial.ac.uk  Mon May  8 14:38:20 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 08 May 2006 19:38:20 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445EFEA7.6070000@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
	<445EFEA7.6070000@libero.it>
Message-ID: <445F901C.2000905@imperial.ac.uk>

> Since I think that the procedure is similar to HTTP session handling, I
> was asking if there is some reusable support for creating "secure"
> session id and if cred has some support for this.

Ok. You're wrong that they're similar, but let me give the short answer 
to the latter question:

No, cred does not provide secure session IDs. Cred is for authenticating 
credentials.

Individual cred checkers may, for a given credentialInterface, choose to 
execute a challenge/response algorithm and establish a secure session, 
but that is specific to the checker, algorithm and wire protocol 
combination.

HTTP does not have spectacularly good authentication support. The 
available mechanisms insecure in one way or another:
  * basic - Credential exposure. No integrity. No privacy
  * digest - No credential exposure. Minimal integrity (request body 
only - request headers, reply body+headers unprotected). No privacy.

...or not standardised e.g. GSS over HTTP.

The only sensible solution to HTTP authentication for important 
applications is to use an HTTPS link, signed server certs and ideally 
client certs as well, or fallback to HTTP digest or basic.

Once you're using HTTPS, other systems can be sensibly and securely 
used. However...

Homegrown systems using cookies and such MAY in fact weaken the overall 
security of the system unless carefully designed, which brings us back 
to Jarrods point that basically no-one should be writing their own auth 
systems these days. They should be re-using one.

Note: there are circumstances where other concerns outweigh purist 
security. For example, the Google gdata API uses an initial HTTPS GET to 
return an auth token, which is then supplied to the server over HTTP in 
an "Authorization: GoogleAuth THETOKEN" header. This provides much 
greater scalability and is similar to MS Passport (which itself is 
similar to Kerberos).

Presumably the token expires. You should note however that the token is 
NOT used for sessioning. HTTP 302 redirects and URL parameters are used 
for that. You might ponder that Google separated out auth and sessions 
even in their engineering compromise.

Note that the above refers to the non-browser API. Presumably the 
browser API will use a passport-alike 302+cookie.

For open source examples, see PubCookie.

> 
> By the way:
> for user tracking in UDP, why not just use the peer address?

Pardon? Are you serious?



From manlio_perillo at libero.it  Mon May  8 16:25:07 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 08 May 2006 18:25:07 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445F901C.2000905@imperial.ac.uk>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>
	<445F901C.2000905@imperial.ac.uk>
Message-ID: <445FA923.6090703@libero.it>

Phil Mayers ha scritto:
>> Since I think that the procedure is similar to HTTP session handling, I
>> was asking if there is some reusable support for creating "secure"
>> session id and if cred has some support for this.
> 
> Ok. You're wrong that they're similar, but let me give the short answer
> to the latter question:
> 
> No, cred does not provide secure session IDs. Cred is for authenticating
> credentials.
> 

Ok, thanks for the clarification.

> [...]

> HTTP does not have spectacularly good authentication support. The
> available mechanisms insecure in one way or another:
>  * basic - Credential exposure. No integrity. No privacy
>  * digest - No credential exposure. Minimal integrity (request body only
> - request headers, reply body+headers unprotected). No privacy.
> 
> ...or not standardised e.g. GSS over HTTP.
> 
> The only sensible solution to HTTP authentication for important
> applications is to use an HTTPS link, signed server certs and ideally
> client certs as well, 


Yes, but how many people knows how to set up a private certificate?
And how many sites uses certs verification?

It would be nice to store a certificate on a smart card and authenticate
to a web server using only that certificate.


> [...]

> Note: there are circumstances where other concerns outweigh purist
> security. For example, the Google gdata API uses an initial HTTPS GET to
> return an auth token, which is then supplied to the server over HTTP in
> an "Authorization: GoogleAuth THETOKEN" header. 

And this header should be supplied for every successive requests (like
cookies)?

> This provides much
> greater scalability and is similar to MS Passport (which itself is
> similar to Kerberos).
> 
> Presumably the token expires. You should note however that the token is
> NOT used for sessioning. HTTP 302 redirects and URL parameters are used
> for that. 


I'm not sure to understand this.

> You might ponder that Google separated out auth and sessions
> even in their engineering compromise.
> 
> Note that the above refers to the non-browser API. Presumably the
> browser API will use a passport-alike 302+cookie.
> 
> For open source examples, see PubCookie.
> 

Thanks for the link.
I have not read the source, but the "granting cookie" what type of
informations contains to be sure that the UA is the "right" one?

>>
>> By the way:
>> for user tracking in UDP, why not just use the peer address?
> 
> Pardon? Are you serious?
> 

Well, let me explain this better.
Unfortunately there are not examples of UDP servers in twisted.

Since UDP is connection-less, the first thing that come to my mind is:

class MyProtocol(DatagramProtocol):
    def __init__(self):
       self.users = {}

    def datagramReceived(self, data, (host, port)):
        context = self.users.setdefault(host, Context())
        response = context.handle(data)
        self.transport.write(data, (host, port))


Where the Context class keep an internal state, like IMAP.



Thanks and regards  Manlio Perillo




From torbjorn at einarssons.se  Mon May  8 16:49:24 2006
From: torbjorn at einarssons.se (=?ISO-8859-1?Q?Torbj=F6rn_Einarsson?=)
Date: Mon, 08 May 2006 22:49:24 +0200
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
Message-ID: <445FAED4.7080804@einarssons.se>

Hi,

I am running twisted-1.3 on some SUN machines, and haven't changed since 
I couldn't install the Zope Interface without a compiler. This is 
unfortunate, since there is no compiler on the machines, and the rest of 
twisted is installable without a compiler.

The Zope interface is now a part of the sumo distribution, but it seems 
that it needs a compiler in this case as well.
Does anyone know a simple way of installing the Zope Interface without a 
compiler?

Thanks,
Torbj?rn Einarsson




From foom at fuhm.net  Mon May  8 17:03:24 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 8 May 2006 17:03:24 -0400
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
In-Reply-To: <445FAED4.7080804@einarssons.se>
References: <445FAED4.7080804@einarssons.se>
Message-ID: <A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>

On May 8, 2006, at 4:49 PM, Torbj?rn Einarsson wrote:

> Hi,
>
> I am running twisted-1.3 on some SUN machines, and haven't changed  
> since I couldn't install the Zope Interface without a compiler.  
> This is unfortunate, since there is no compiler on the machines,  
> and the rest of twisted is installable without a compiler.
>
> The Zope interface is now a part of the sumo distribution, but it  
> seems that it needs a compiler in this case as well.
> Does anyone know a simple way of installing the Zope Interface  
> without a compiler?

It is certainly usable without compiling -- if you just install  
the .py files in your pythonpath, under zope/interface/. It'd be nice  
if its setup.py file knew how to deal with the lack of a compiler  
automatically, but until it does, you can just manually copy the  
files in. If the latest z.i release still has this problem, perhaps  
you could submit a patch to their bugtracker.

James


From radix at twistedmatrix.com  Mon May  8 17:31:51 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 8 May 2006 17:31:51 -0400
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
In-Reply-To: <A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>
References: <445FAED4.7080804@einarssons.se>
	<A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>
Message-ID: <60ed19d40605081431g3f42cb81td9b52fc9828de000@mail.gmail.com>

On 5/8/06, James Y Knight <foom at fuhm.net> wrote:

> On May 8, 2006, at 4:49 PM, Torbj?rn Einarsson wrote:

> > I am running twisted-1.3 on some SUN machines, and haven't changed
> > since I couldn't install the Zope Interface without a compiler.

> It is certainly usable without compiling -- if you just install
> the .py files in your pythonpath, under zope/interface/. It'd be nice
> if its setup.py file knew how to deal with the lack of a compiler
> automatically

I'm pretty sure I installed zope.interface the other day (from the
ZopeInterface package, version 3c1 or something), using setup.py
install --skip-build on a machine without gcc.


--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From mli at deform.com  Tue May  9 10:58:19 2006
From: mli at deform.com (Michael Li)
Date: Tue, 09 May 2006 10:58:19 -0400
Subject: [Twisted-Python] how to only accept local computer requests?
Message-ID: <4460AE0B.90503@deform.com>

Hi,

I have a python server with twisted framework running
24x7. I want to have a config file to setup accepting local
computer requests or remote computer requests.
If the config file exists, it only accepts local computer
request, does not accept requests from other computers.
If the config file does not exist, it accepts requests
from any computers.
Is there any easy way to do it ?

Best regards.
Michael Li

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From radix at twistedmatrix.com  Tue May  9 11:07:16 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 9 May 2006 11:07:16 -0400
Subject: [Twisted-Python] how to only accept local computer requests?
In-Reply-To: <4460AE0B.90503@deform.com>
References: <4460AE0B.90503@deform.com>
Message-ID: <60ed19d40605090807p770b821dr1a77b6a2b3dec398@mail.gmail.com>

On 5/9/06, Michael Li <mli at deform.com> wrote:
> Hi,
>
> I have a python server with twisted framework running
> 24x7. I want to have a config file to setup accepting local
> computer requests or remote computer requests.
> If the config file exists, it only accepts local computer
> request, does not accept requests from other computers.
> If the config file does not exist, it accepts requests
> from any computers.
> Is there any easy way to do it ?

It's not totally clear from what info you've given, but it sounds like
you want to pass the 'interface' argument to TCPServer or listenTCP,
whichever you're using. interface='127.0.0.1' to only serve
connections from localhost, interface='' to serve connections from
anybody.

--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nico at tekNico.net  Tue May  9 11:15:39 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 09 May 2006 17:15:39 +0200
Subject: [Twisted-Python] Re: how to only accept local computer requests?
In-Reply-To: <4460AE0B.90503@deform.com>
References: <4460AE0B.90503@deform.com>
Message-ID: <4460B21B.4010409@tekNico.net>

> I have a python server with twisted framework running
> 24x7. I want to have a config file to setup accepting local
> computer requests or remote computer requests.

When you create instances of twisted.internet.application.TCPServer or
.SSLServer, pass the keyword parameter

interface = '127.0.0.1'

and the server socket will only bind to the localhost interface. If you
don't pass the parameter, the socket will bind to all interfaces.

-- 
Nicola Larosa - http://www.tekNico.net/

In high school she already wanted to be a doctor. And she is so ambitious
and determined that she overcame every obstacle along the way -- including,
unfortunately, not liking it. Now she has a life chosen for her by
a high-school kid. -- Paul Graham, January 2006





From leszczynscy at yahoo.com  Tue May  9 13:00:45 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Tue, 9 May 2006 10:00:45 -0700 (PDT)
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
Message-ID: <20060509170045.53346.qmail@web30009.mail.mud.yahoo.com>

I have a M$ Windows box where I need to start a ad hoc
FTP server, how can I do that quickly?

Thx,
A.



From exarkun at divmod.com  Tue May  9 17:45:46 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 May 2006 17:45:46 -0400
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
In-Reply-To: <20060509170045.53346.qmail@web30009.mail.mud.yahoo.com>
Message-ID: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>

On Tue, 9 May 2006 10:00:45 -0700 (PDT), Andy Leszczynski <leszczynscy at yahoo.com> wrote:
>I have a M$ Windows box where I need to start a ad hoc
>FTP server, how can I do that quickly?

Using a recent enough version of Twisted,

  mktap ftp --help

will give you some help with this.

Jean-Paul



From leszczynscy at yahoo.com  Tue May  9 22:51:43 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Tue, 09 May 2006 22:51:43 -0400
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
In-Reply-To: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>
References: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>
Message-ID: <4461553F.9070705@yahoo.com>

Jean-Paul Calderone wrote:

> On Tue, 9 May 2006 10:00:45 -0700 (PDT), Andy Leszczynski 
> <leszczynscy at yahoo.com> wrote:
>
>> I have a M$ Windows box where I need to start a ad hoc
>> FTP server, how can I do that quickly?
>
>
> Using a recent enough version of Twisted,
>
>  mktap ftp --help
>
> will give you some help with this.


thx for the help, Andy



From stephane_brault at yahoo.fr  Wed May 10 06:27:16 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Wed, 10 May 2006 10:27:16 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
Message-ID: <20060510102716.46912.qmail@web26513.mail.ukl.yahoo.com>

Hi,
 I want to use twisted to run a server that is also a SOA client:
 I developp a scheduler that schedule calls to a web service regularly, tasks may be added or terminated.
 The web service has different calls and each task calls a specific call (too many calls in that sentence ;-)) and then update a database.
 The fact is that I can only have a maximum number of thread per call, I was wondering if I could have a thread pool per type of call,
 feeding it with my scheduled tasks and being able to change its size dynamically.
 I was thinking of having different groups of tasks, depending of the specific call, and feeding my thread pool according to the schedule.
 I'm new to twisted, so I don't really know how to do that, the thread documentation is a bit light for me.
 I'm also not quite sure what type of reactor would be best to use.
 
 I hope I've been clear, thanks,
 
 St?phane





From p.mayers at imperial.ac.uk  Wed May 10 06:42:32 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 10 May 2006 11:42:32 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445FA923.6090703@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>
	<445FA923.6090703@libero.it>
Message-ID: <4461C398.8060503@imperial.ac.uk>

Manlio Perillo wrote:
>> The only sensible solution to HTTP authentication for important
>> applications is to use an HTTPS link, signed server certs and ideally
>> client certs as well, 
> 
> 
> Yes, but how many people knows how to set up a private certificate?
> And how many sites uses certs verification?

Lots. I honestly don't think it's that hard but we might have to agree 
to disagree on this. If it has a fault, it's the difficulty virtual 
hosting without burning IPs.

> 
> It would be nice to store a certificate on a smart card and authenticate
> to a web server using only that certificate.

You can do that now if you want. But the hardware is expensive. Frankly, 
I think a local software store with key is fine.

But the important thing is to use SSL and server certs. The client certs 
are just a nice-to-have.

>> an "Authorization: GoogleAuth THETOKEN" header. 
> 
> And this header should be supplied for every successive requests (like
> cookies)?

Yes, avoiding the need for an extra round-trip per request.

> 
>> This provides much
>> greater scalability and is similar to MS Passport (which itself is
>> similar to Kerberos).
>>
>> Presumably the token expires. You should note however that the token is
>> NOT used for sessioning. HTTP 302 redirects and URL parameters are used
>> for that. 
> 
> 
> I'm not sure to understand this.

GET /resource

401 unauth

GET /resouce
Authorization: GoogleAuth=foobarbaz

302 Moved
Location: /resource?sessionid=id

GET /resource?sessionid=id
Authorization: GoogleAuth=foobarbaz

200 OK
CONTENT

...then on subsequence requests, you can do:

GET /another_resource?sessionid=id
Authorization: GoogleAuth=foobazbaz

200 OK
CONENT

...which is a single round-trip with authentication and sessioning

> 
>> You might ponder that Google separated out auth and sessions
>> even in their engineering compromise.
>>
>> Note that the above refers to the non-browser API. Presumably the
>> browser API will use a passport-alike 302+cookie.
>>
>> For open source examples, see PubCookie.
>>
> 
> Thanks for the link.
> I have not read the source, but the "granting cookie" what type of
> informations contains to be sure that the UA is the "right" one?

I haven't used it, I just know it's generally well thought of.

> 
>>> By the way:
>>> for user tracking in UDP, why not just use the peer address?
>> Pardon? Are you serious?
>>
> 
> Well, let me explain this better.
> Unfortunately there are not examples of UDP servers in twisted.
> 
> Since UDP is connection-less, the first thing that come to my mind is:
> 
> class MyProtocol(DatagramProtocol):
>     def __init__(self):
>        self.users = {}
> 
>     def datagramReceived(self, data, (host, port)):
>         context = self.users.setdefault(host, Context())
>         response = context.handle(data)
>         self.transport.write(data, (host, port))
> 
> 
> Where the Context class keep an internal state, like IMAP.

That is phenomenally insecure

  1. You're using just the IP and not the IP+port, which means 2 users 
behind the same NAT will be unable to simultaneously use your service, 
or will see each others data.

  2. Since it's UDP it's trivially forged, so unless your context.handle 
FURTHER authenticates the data (via e.g. HMAC and key agreement) it's 
basically open to the world

  3. You're creating a new context for the 1st packet from each IP, so I 
can trivially send hundreds of thousands of packets to your service with 
forged source addresses and exhaust the CPU and memory resources of your 
server.

At ABSOLUTE MINIMUM a UDP protocol must force the client to round-trip 
the first packet using minimal CPU resources possible to at least ensure 
it's not a source-spoofing DDoS.

# WARNING WARNING WARNING DO NOT USE INSECURE IN MANY WAYS
# I strongly suggest the use of TCP or existing secure UDP
# protocols such as Q2Q
class proto(DatagramProtocol):
   MAGIC = 'MYPT'
   ECHO = open('/dev/random').read(16)

   # PDU format: MAGIC(4 bytes)+FLAGS(1 bytes)+PAYLOAD

   def datagramReceived(self, data, (host, port)):
     if len(data)<28:
       # too short
       return
     if data[:4]!=self.MAGIC:
       # not our protocol
       return
     flags = ord(data[4])

     # 1st packet in connection has flags=0
     if flags==0:
         # note: no state and minimal CPU consumed here
         self.transport.write(self.MAGIC+'\0'+self.ECHO, (host, port))
         return

     # 2nd packet must have flags==1 and payload==ECHO
     elif flags==1:
         if data[5:]!=self.ECHO:
             return
         # ok, we've verified there's something on the other
         # end, now start e.g. secure diffie-hellman
         context = startContext(host, port, self.transport)

     else flags==2:
         feedContext(host, port, data)

The above is NOT SECURE and would need sequence numbers, authentication 
and integrity protection adding. But it should hopefully convince you 
that the naive approach is just that - and in fact actively dangerous in 
a modern, hostile internet environment.



From manlio_perillo at libero.it  Wed May 10 13:04:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 10 May 2006 15:04:18 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4461C398.8060503@imperial.ac.uk>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>	<445FA923.6090703@libero.it>
	<4461C398.8060503@imperial.ac.uk>
Message-ID: <44621D12.5030800@libero.it>

Phil Mayers ha scritto:
> [...]
> 
> You can do that now if you want. But the hardware is expensive. Frankly,
> I think a local software store with key is fine.
> 
> But the important thing is to use SSL and server certs. The client certs
> are just a nice-to-have.
> 

One more thing.
Actually, if I'm right, web servers and UAs like Apache and Mozilla only
do certificate *verification*, without identification/authorization.

I'm interested in the latter case.

>>> an "Authorization: GoogleAuth THETOKEN" header. 
>>
>> And this header should be supplied for every successive requests (like
>> cookies)?
> 
> Yes, avoiding the need for an extra round-trip per request.
> 

But in this way isn't it unsecure to man in the middle attacks?


>  [...]
> 
>>
>>> You might ponder that Google separated out auth and sessions
>>> even in their engineering compromise.
>>>
>>> Note that the above refers to the non-browser API. Presumably the
>>> browser API will use a passport-alike 302+cookie.
>>>
>>> For open source examples, see PubCookie.
>>>
>>
>> Thanks for the link.
>> I have not read the source, but the "granting cookie" what type of
>> informations contains to be sure that the UA is the "right" one?
> 
> I haven't used it, I just know it's generally well thought of.
> 

The thing that is not clear to me is if every resource requires 3 pair
of request/response (4 for the first time when login).

And what about nevow guard?
I have searched some documentation but with no results.

> [...]
>>
>>     def datagramReceived(self, data, (host, port)):
>>         context = self.users.setdefault(host, Context())
>>         response = context.handle(data)
>>         self.transport.write(data, (host, port))
>>
>>
>> Where the Context class keep an internal state, like IMAP.
> 
> That is phenomenally insecure
> 

Sorry, I just forget to add the port too!

>  1. You're using just the IP and not the IP+port, which means 2 users
> behind the same NAT will be unable to simultaneously use your service,
> or will see each others data.
> 

Ok.

>  2. Since it's UDP it's trivially forged, so unless your context.handle
> FURTHER authenticates the data (via e.g. HMAC and key agreement) it's
> basically open to the world
> 

Of course some type of authentication is required.
The idea is to use the context like a Twisted protocol class for TCP.

>  3. You're creating a new context for the 1st packet from each IP, so I
> can trivially send hundreds of thousands of packets to your service with
> forged source addresses and exhaust the CPU and memory resources of your
> server.
> 

This is a problem, but it can occurs for TCP too.

> At ABSOLUTE MINIMUM a UDP protocol must force the client to round-trip
> the first packet using minimal CPU resources possible to at least ensure
> it's not a source-spoofing DDoS.
> 

Ok, thanks.

> # WARNING WARNING WARNING DO NOT USE INSECURE IN MANY WAYS
> # I strongly suggest the use of TCP or existing secure UDP
> # protocols such as Q2Q

> [...]

Thanks for the idea.

About Q2Q: I got no entry about it in wikipedia...
Is this another twisted/divmod "private" protocols?



Thanks and regards  Manlio Perillo



From nico at tekNico.net  Wed May 10 13:55:27 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 10 May 2006 19:55:27 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <44621D12.5030800@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>	<445FA923.6090703@libero.it>	<4461C398.8060503@imperial.ac.uk>
	<44621D12.5030800@libero.it>
Message-ID: <4462290F.4040303@tekNico.net>

> About Q2Q: I got no entry about it in wikipedia...
> Is this another twisted/divmod "private" protocols?

Yes, for some meaning of "private". ;-) See Vertex:

http://divmod.org/trac/wiki/DivmodVertex


-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006





From stephane_brault at yahoo.fr  Thu May 11 11:32:08 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 15:32:08 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
Message-ID: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>

Hi,
 I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-) 
 Still, I need to ensure that I won't have more than x similar calls at a time. 
 Is there a way, maybe using some of the deferred classes (deferredqueue,..)
 to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
 until one is finished. My question might be stupid, but I'm quite new to twisted and the way to implement
 this behaviour is not clear to me (even if I found great help in the o'reilly book and the docs).
 
 Thanks,
 
 St?phane

----- Message d'origine ----
De : St?phane Brault <stephane_brault at yahoo.fr>
?? : twisted-python at twistedmatrix.com
Envoy?? le : Mercredi, 10 Mai 2006, 12h27mn 16s
Objet? : [Twisted-Python] Multiple thread pools

Hi,
 I want to use twisted to run a server that is also a SOA client:
 I developp a scheduler that schedule calls to a web service regularly, tasks may be added or terminated.
 The web service has different calls and each task calls a specific call (too many calls in that sentence ;-)) and then update a database.
 The fact is that I can only have a maximum number of thread per call, I was wondering if I could have a thread pool per type of call,
 feeding it with my scheduled tasks and being able to change its size dynamically.
 I was thinking of having different groups of tasks, depending of the specific call, and feeding my thread pool according to the schedule.
 I'm new to twisted, so I don't really know how to do that, the thread documentation is a bit light for me.
 I'm also not quite sure what type of reactor would be best to use.
 
 I hope I've been clear, thanks,
 
 St?phane



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From moe at divmod.com  Thu May 11 11:56:52 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Thu, 11 May 2006 17:56:52 +0200
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
Message-ID: <20060511155652.22481.612721210.divmod.quotient.24231@ohm>

On Thu, 11 May 2006 15:32:08 +0000 (GMT), St?phane Brault <stephane_brault at yahoo.fr> wrote:
>Hi,
> I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-)
> Still, I need to ensure that I won't have more than x similar calls at a time.
> Is there a way, maybe using some of the deferred classes (deferredqueue,..)
> to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
> until one is finished

I think twisted.internet.defer.DeferredSemaphore is what you're looking for.  There is an example (someone else's example) of using it to do something similar here: http://pastebin.com/702986

Moe



From nico at tekNico.net  Thu May 11 12:00:44 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 11 May 2006 18:00:44 +0200
Subject: [Twisted-Python] Re: Re : Multiple thread pools
In-Reply-To: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
References: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
Message-ID: <44635FAC.2030208@tekNico.net>

> Still, I need to ensure that I won't have more than x similar calls at a
> time. Is there a way, maybe using some of the deferred classes
> (deferredqueue,..) to ensure that there is no more than x simultaneous
> similar calls (wrapped in deferreds), the others being pending, until
> one is finished.

You are on the right track. A couple possible approaches are in this
mailing list thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-January/012388.html

-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006





From xt1_tm at yahoo.com  Thu May 11 12:41:23 2006
From: xt1_tm at yahoo.com (xuan tang)
Date: Thu, 11 May 2006 09:41:23 -0700 (PDT)
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
Message-ID: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>

I am trying to create a TCP server using twisted reactor. I want to  stop the server from accepting TCP bind requests (and restart it  later), but for some reason I don't want to use reactor.stop(). Is  there another way to do it?
  
  Thanks,
  Xuan
  
  
		
---------------------------------
Yahoo! Messenger with Voice. PC-to-Phone calls for ridiculously low rates.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060511/58072dcc/attachment.htm 

From johann.borck at densedata.com  Thu May 11 13:47:46 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 11 May 2006 19:47:46 +0200
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
In-Reply-To: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>
References: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>
Message-ID: <446378C2.6050801@densedata.com>

xuan tang wrote:

> I am trying to create a TCP server using twisted reactor. I want to
> stop the server from accepting TCP bind requests (and restart it
> later), but for some reason I don't want to use reactor.stop(). Is
> there another way to do it?

reactor.listenXXX returns the an IListeningPort-implementing object on
which you can call stopListening() and startListening(). When you're
using the twisted.application stuff you can call
stopService()/startService() on your Service instance.

Johann




From stephane_brault at yahoo.fr  Thu May 11 13:43:05 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 17:43:05 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511155652.22481.612721210.divmod.quotient.24231@ohm>
Message-ID: <20060511174305.11050.qmail@web26502.mail.ukl.yahoo.com>

Thanks Moe,
 the example seems to work, which is nice ;-)
 If I understand well DeferredSemaphore(x) guarantees that no more than x concurent calls that acquired it 
 will be run together. Am I wrong when inferring that DeferredList is not compulsory ? And that I adding calls to the semaphore
 as I need them will ensure the behaviour I want (as my tasks come, acquire the semaphore, then release it) ?
 
 Thaks again,
 
 St?phane

----- Message d'origine ----
De : Moe Aboulkheir <moe at divmod.com>
? : twisted-python at twistedmatrix.com
Envoy? le : Jeudi, 11 Mai 2006, 5h56mn 52s
Objet : Re: Re : [Twisted-Python] Multiple thread pools

On Thu, 11 May 2006 15:32:08 +0000 (GMT), St?phane Brault <stephane_brault at yahoo.fr> wrote:
>Hi,
> I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-)
> Still, I need to ensure that I won't have more than x similar calls at a time.
> Is there a way, maybe using some of the deferred classes (deferredqueue,..)
> to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
> until one is finished

I think twisted.internet.defer.DeferredSemaphore is what you're looking for.  There is an example (someone else's example) of using it to do something similar here: http://pastebin.com/702986

Moe

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From stephane_brault at yahoo.fr  Thu May 11 13:43:46 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 17:43:46 +0000 (GMT)
Subject: [Twisted-Python] Re: Re : Multiple thread pools
In-Reply-To: <44635FAC.2030208@tekNico.net>
Message-ID: <20060511174346.37577.qmail@web26515.mail.ukl.yahoo.com>

Thanks Nicola,
 I'm investigating this further.
 
 St?phane

----- Message d'origine ----
De : Nicola Larosa <nico at tekNico.net>
? : twisted-python at twistedmatrix.com
Envoy? le : Jeudi, 11 Mai 2006, 6h00mn 44s
Objet : [Twisted-Python] Re: Re : Multiple thread pools

> Still, I need to ensure that I won't have more than x similar calls at a
> time. Is there a way, maybe using some of the deferred classes
> (deferredqueue,..) to ensure that there is no more than x simultaneous
> similar calls (wrapped in deferreds), the others being pending, until
> one is finished.

You are on the right track. A couple possible approaches are in this
mailing list thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-January/012388.html

-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From xt1_tm at yahoo.com  Thu May 11 14:43:14 2006
From: xt1_tm at yahoo.com (xuan tang)
Date: Thu, 11 May 2006 11:43:14 -0700 (PDT)
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
In-Reply-To: <446378C2.6050801@densedata.com>
Message-ID: <20060511184314.20974.qmail@web38413.mail.mud.yahoo.com>

Thanks for your help Johann.
  
  Xuan

Johann Borck <johann.borck at densedata.com> wrote:  xuan tang wrote:

> I am trying to create a TCP server using twisted reactor. I want to
> stop the server from accepting TCP bind requests (and restart it
> later), but for some reason I don't want to use reactor.stop(). Is
> there another way to do it?

reactor.listenXXX returns the an IListeningPort-implementing object on
which you can call stopListening() and startListening(). When you're
using the twisted.application stuff you can call
stopService()/startService() on your Service instance.

Johann


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060511/c2e82be7/attachment.htm 

From robert at gravina.com  Fri May 12 05:03:24 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 12 May 2006 18:03:24 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
	<B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
	<d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>
Message-ID: <D5F8F0E7-1BD9-48AE-96A9-817316678460@gravina.com>

> It's possible to make each element in the set being edited a
> cacheable. If you think that would introduce too much overhead, then
> you can add a method to the "address book" object which updates one of
> the entries in this address book, and uses an id to identify the entry
> within the address book. So the address book is the dict. That's what
> I did in a similar case. I'm no expert though.

> HTH
>
> Micky

Yeah. I've just realised that after saving an object in the ZODB it  
should have an ID attribute called "_p_oid". I can can compare  
copyables that come back to objects in the database this way. I think  
this will be much easier to implement than having around 20 classes  
which are all cachables, although I can see some problems arising  
here because the "_p_oid" only has a useful value after the object  
has been persisted.

Perhaps someone knows of an open source app which has tackled this  
problem (i.e. keeping an object hierarchy in sync across multiple  
clients) that I could look at and get general strategies from? It  
seems all my solutions have a "hack" feel too them, and I can't wrap  
my head around how to do this using a mix of cacheables/copyables/ 
referencables. For now, I just have one top-level cache that get it's  
observe_* methods called (e.g. observe_addFoo(foo)) and then just  
look to see if there is an Foo with the same _p_oid in my list of  
Foo's and update (by just calling setCopyableState) if so, or append  
otherwise. Something just doesn't feel right about this approach.

Robert



From moe at divmod.com  Fri May 12 05:13:33 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 12 May 2006 11:13:33 +0200
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511174305.11050.qmail@web26502.mail.ukl.yahoo.com>
Message-ID: <20060512091333.22481.1759201386.divmod.quotient.24713@ohm>

On Thu, 11 May 2006 17:43:05 +0000 (GMT), St?phane Brault <stephane_brault at yahoo.fr> wrote:
>Am I wrong when inferring that DeferredList is not compulsory ?

It depends whether or not you want to know when all of the tasks have completed, which is what the example uses it for.

Moe



From stephane_brault at yahoo.fr  Fri May 12 05:59:00 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Fri, 12 May 2006 09:59:00 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060512091333.22481.1759201386.divmod.quotient.24713@ohm>
Message-ID: <20060512095900.70674.qmail@web26510.mail.ukl.yahoo.com>

Thanks Moe,
 that's what I inferred, I don't need to know when all tasks have completed. I only need to run tasks as they arrive,
 whether scheduled or called by a user and guarantee that no more than a certain number are running simultineaously.
 
 St?phane

----- Message d'origine ----
De : Moe Aboulkheir <moe at divmod.com>
?? : Twisted general discussion <twisted-python at twistedmatrix.com>
Envoy?? le : Vendredi, 12 Mai 2006, 11h13mn 33s
Objet? : Re: Re : Re : [Twisted-Python] Multiple thread pools

On Thu, 11 May 2006 17:43:05 +0000 (GMT), St?phane Brault <stephane_brault at yahoo.fr> wrote:
>Am I wrong when inferring that DeferredList is not compulsory ?

It depends whether or not you want to know when all of the tasks have completed, which is what the example uses it for.

Moe

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From manlio_perillo at libero.it  Fri May 12 14:56:23 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 12 May 2006 16:56:23 -0200
Subject: [Twisted-Python] signal handlers and threads
Message-ID: <4464DA57.3090205@libero.it>

Hi.

I have written a small module for sending signals to a "foreign" Python
process on Windows 2000/XP.

The trunk is on
http://svn.berlios.de/svnroot/repos/pykill32/trunk

In this way I can send KILL, TERM and so, like in a POSIX system.

This works by creating a thread on the remote process (yes, Windows
allow this...) and let it call the function "raise" from the MSVCR71 DLL.


This seems to work fine, and now I can stop a Twisted process with
kill.py TERM pid
(does twistd save the pid in a file on Windows?)

but I'm not sure if signal handlers are thread safe.



Regards  Manlio Perillo



From slamb at slamb.org  Fri May 12 16:33:46 2006
From: slamb at slamb.org (Scott Lamb)
Date: Fri, 12 May 2006 13:33:46 -0700
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <4464DA57.3090205@libero.it>
References: <4464DA57.3090205@libero.it>
Message-ID: <55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>

On May 12, 2006, at 11:56 AM, Manlio Perillo wrote:
> Hi.
>
> I have written a small module for sending signals to a "foreign"  
> Python
> process on Windows 2000/XP.
>
> The trunk is on
> http://svn.berlios.de/svnroot/repos/pykill32/trunk
>
> In this way I can send KILL, TERM and so, like in a POSIX system.
>
> This works by creating a thread on the remote process (yes, Windows
> allow this...) and let it call the function "raise" from the  
> MSVCR71 DLL.

Wow, that is sick! I thought _I_ did weird stuff with signals!

So Windows provides signal(), raise(), and the usual signal numbers,  
but no kill()? Weird! Does it have pthread_kill()? sigprocmask()?  
pthread_sigprocmask()? sigaction()? Do the semantics differ from the  
usual ones?

Interesting when compared to the Cygwin stuff: <http://cygwin.com/cgi- 
bin/cvsweb.cgi/src/winsup/cygwin/sigproc.cc?cvsroot=src>

> This seems to work fine, and now I can stop a Twisted process with
> kill.py TERM pid
> (does twistd save the pid in a file on Windows?)
>
> but I'm not sure if signal handlers are thread safe.

In Twisted's case, it sure looks to be. See twisted/internet/base.py:

     def sigTerm(self, *args):
         """Handle a SIGTERM interrupt.
         """
         log.msg("Received SIGTERM, shutting down.")
         self.callFromThread(self.stop)

Actually, <http://docs.python.org/lib/module-signal.html> says this:

     "Some care must be taken if both signals and threads are used in  
the same program. The fundamental thing to remember in using signals  
and threads simultaneously is: always perform signal() operations in  
the main thread of execution. Any thread can perform an alarm(),  
getsignal(), or pause(); only the main thread can set a new signal  
handler, and the main thread will be the only one to receive signals  
(this is enforced by the Python signal module, even if the underlying  
thread implementation supports sending signals to individual  
threads). This means that signals can't be used as a means of inter- 
thread communication. Use locks instead."

so the self.callFromThread() only matters if the reactor thread is  
not Python's main thread.

And Python does seem to provide this guarantee even with your thing.  
See signal_handler in <http://svn.python.org/projects/python/trunk/ 
Modules/signalmodule.c>. It just sets a flag to be picked up later,  
and only the main thread does that apparently.

Now, I don't see any guarantee that signals always handled before  
entering blocking calls, so they can be delayed forever if nothing  
else wakes it up. (This is like their documented note about long  
computations but worse.) It does the "normal syscall + flag handler"  
stuff I describe at <http://www.slamb.org/projects/sigsafe/api/>.  
That's a problem with Python's signal handling everywhere, not with  
your thing or Twisted.

Regards,
Scott

-- 
Scott Lamb <http://www.slamb.org/>





From manlio_perillo at libero.it  Fri May 12 17:30:49 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 12 May 2006 19:30:49 -0200
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
References: <4464DA57.3090205@libero.it>
	<55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
Message-ID: <4464FE89.2020708@libero.it>

Scott Lamb ha scritto:
> [...]
>> This works by creating a thread on the remote process (yes, Windows
>> allow this...) and let it call the function "raise" from the MSVCR71 DLL.
> 
> Wow, that is sick! I thought _I_ did weird stuff with signals!
> 
> So Windows provides signal(), raise(), and the usual signal numbers, but
> no kill()? 

Yes!
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_crt_raise.asp
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_CRT_signal.asp

Note that it is supported also SIGBREAK (but not documented on msdn).

> Weird! Does it have pthread_kill()? sigprocmask()?
> pthread_sigprocmask()? sigaction()? Do the semantics differ from the
> usual ones?
> 

No, Windows support signals because they are required by ISO C.

I have found this document:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/ucmglp.asp


> Interesting when compared to the Cygwin stuff:
> <http://cygwin.com/cgi-bin/cvsweb.cgi/src/winsup/cygwin/sigproc.cc?cvsroot=src>
> 

Pass.

> 
>> This seems to work fine, and now I can stop a Twisted process with
>> kill.py TERM pid
>> (does twistd save the pid in a file on Windows?)
>>
>> but I'm not sure if signal handlers are thread safe.
> 
> In Twisted's case, it sure looks to be. See twisted/internet/base.py:
> 
>     def sigTerm(self, *args):
>         """Handle a SIGTERM interrupt.
>         """
>         log.msg("Received SIGTERM, shutting down.")
>         self.callFromThread(self.stop)
> 

Ok, fine!

> Actually, <http://docs.python.org/lib/module-signal.html> says this:
> 
>     "Some care must be taken if both signals and threads are used in the
> same program. The fundamental thing to remember in using signals and
> threads simultaneously is: always perform signal() operations in the
> main thread of execution. Any thread can perform an alarm(),
> getsignal(), or pause(); only the main thread can set a new signal
> handler, and the main thread will be the only one to receive signals
> (this is enforced by the Python signal module, even if the underlying
> thread implementation supports sending signals to individual threads).
> This means that signals can't be used as a means of inter-thread
> communication. Use locks instead."
> 

I have read this and it seems to allow what I'm doing.

> so the self.callFromThread() only matters if the reactor thread is not
> Python's main thread.
> 

There is someone who run the reactor in a child thread?

> And Python does seem to provide this guarantee even with your thing. See
> signal_handler in
> <http://svn.python.org/projects/python/trunk/Modules/signalmodule.c>. It
> just sets a flag to be picked up later, and only the main thread does
> that apparently.
> 
> Now, I don't see any guarantee that signals always handled before
> entering blocking calls, so they can be delayed forever if nothing else
> wakes it up. 

But this should not be a problem in Twisted, since there are no blocking
calls.

> (This is like their documented note about long computations
> but worse.) It does the "normal syscall + flag handler" stuff I describe
> at <http://www.slamb.org/projects/sigsafe/api/>. That's a problem with
> Python's signal handling everywhere, not with your thing or Twisted.
> 

Well, thanks!

Just to add more informations:
when killing a normal Python process with TERM, the Interpreter
terminates without calling the functions registered with atexit.

Now this is strange because the MSDN says that, by default, SIGTERM is
ignored and the Python documentation says that only an handler for
SIGINT is installed.



Regards  Manlio Perillo



From slamb at slamb.org  Fri May 12 20:12:06 2006
From: slamb at slamb.org (Scott Lamb)
Date: Fri, 12 May 2006 17:12:06 -0700
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <4464FE89.2020708@libero.it>
References: <4464DA57.3090205@libero.it>
	<55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
	<4464FE89.2020708@libero.it>
Message-ID: <7D80E3A1-F423-49E4-9AFD-382EF31A58F9@slamb.org>


On May 12, 2006, at 2:30 PM, Manlio Perillo wrote:

>> Now, I don't see any guarantee that signals always handled before
>> entering blocking calls, so they can be delayed forever if nothing  
>> else
>> wakes it up.
>
> But this should not be a problem in Twisted, since there are no  
> blocking
> calls.

There's one: select().

-- 
Scott Lamb <http://www.slamb.org/>





From exarkun at twistedmatrix.com  Sun May 14 01:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 May 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1147583101.93.1781374640@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-07 through 2006-05-14
Bugs opened: 10    Bugs closed: 6  Total open bugs: 612 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -1          |Core:     +0           
|Enhancement:  +1  |High:     -1          |Names:    +1           
                   |Normal:   +6          |Pb:       -1           
                                          |Trial:    +1           
                                          |Web2:     +1           
                                          |Website:  +1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1709] defgen incorrectly propagates handled Failures to the outer Deferred (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1709

[#1710] Failures can be created in a broken state (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1710

                    ===== High =====
[#1711] PyLucene doesn't close write indexes properly (opened by exarkun) (CLOSED, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1711

                    ===== Normal =====
[#1706] Make todo a decorator (opened by jml)
    defect          trial      http://twistedmatrix.com/trac/ticket/1706

[#1707] cannot edit wiki pages (opened by warner)
    defect          website    http://twistedmatrix.com/trac/ticket/1707

[#1708] twisted.names shouldn't stop listening when crappy data is sent (opened by radix)
    enhancement     names      http://twistedmatrix.com/trac/ticket/1708

[#1712] Twisted overview graph shows Xish (opened by ralphm)
    defect          core       http://twistedmatrix.com/trac/ticket/1712

[#1713] Web2 test failure on win32 (SSLServerTest.testLingeringClose) (opened by teratorn)
    defect          web2       http://twistedmatrix.com/trac/ticket/1713

[#1714] Update Words' NEWS for 2.3 release (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1714

[#1715] move vertex.juice into twisted.internet (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1715



Closed Bugs
______________________
                    ===== Highest =====
[#1710] Failures can be created in a broken state (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1710

[#1709] defgen incorrectly propagates handled Failures to the outer Deferred (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1709

[#1668] Update release automation to work with recent version changes (opened by radix, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1668

                    ===== High =====
[#1022] Explain Deferred for users familiar with callbacks (opened by hypatia, closed by edsuom, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1022

[#1711] PyLucene doesn't close write indexes properly (opened by exarkun, closed by exarkun, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1711

                    ===== Normal =====
[#1684] release newpb 0.0.1 ! (opened by warner, closed by radix, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/1684





From jmp at MIT.EDU  Tue May 16 21:24:24 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Tue, 16 May 2006 21:24:24 -0400
Subject: [Twisted-Python] Send many large files with PB
Message-ID: <20060517012422.GB20086@mit.edu>

Hi,

I'm using PB in a distributed application that has suddenly grown the
requirement to copy directories of files between the servers.

>From lurking on the mailing list archives, it seems that the best way
to move large amounts of data between Twisted servers is to use a
twisted.spread.util.Pager sub-class to pipe the data.  Between that
information and the "How to use twisted pb pager" [1] document, I'm
probably good to go on how to transfer large amounts of data.

However, I wanted to step back and ask what's the best way to actually
package the files that I'm going to send.  To make things concrete,
suppose I need to send data from SRC to DEST and that SRC has a PB
RemoteReference to DEST.  Also, most files will be huge (gigabytes)
and nested in directories.

- Should I send the files from SRC to DEST one-by-one?  That is, make
  a new PB request for a new Pager reference for each file, stream the
  file using a twisted.spread.util.FilePager instance, then repeat
  with the next file, and so on.  This has the advantage that I think
  I can do it fairly easily, but has the disadvantage of requiring
  many PB calls (with the associated bookkeeping in my application).

- Or, is it better to use something like tarfile module to create a
  stream of bytes that I stream to the other side and decode?  There's
  something appealing to using tarfile--it's like the oft-seen "tar
  -xf - | ssh user at host 'tar -cf -'" way of transferring files.  Plus,
  the tarfile module takes care of making directories and the like for
  me.

  This method has the advantage of a single PB call, but the
  disadvantage that I can't quite figure out how to use tarfile with
  Twisted.  The tarfile module requires an file-like object to stream
  to or stream from.  I don't think the naive approach of just adding
  __write__ method to a Pager or __read__ method to a
  CallbackPageCollector will work without taking up all of the memory
  in my system or blocking in some way.

- Finally, should I be doing something completely different?
  Normally, outside of my application, I'd just use rsync, scp, or
  some such.  However, the users of this application don't know how to
  use these tools.  I can't spawn these programs without getting into
  authentication issues between the machines.  Doing this within
  Twisted seems like a good idea because the machines are already
  authenticated to each other through PB, but I could be wrong.

I apologize if this is rambling.  I've been thinking about this for
a while and am now a bit bleary-eyed.
  --Justin

[1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/457670



From warner at lothar.com  Wed May 17 02:41:12 2006
From: warner at lothar.com (Brian Warner)
Date: Tue, 16 May 2006 23:41:12 -0700 (PDT)
Subject: [Twisted-Python] Send many large files with PB
Message-ID: <20060516.234112.131383979.warner@lothar.com>

Justin Mazzola Paluska <jmp at MIT.EDU> writes:

> - Should I send the files from SRC to DEST one-by-one?

That's how I would do it. If you're talking about gigabyte-sized files, the
protocol overhead will be pretty minimal compared to the data being
transferred. You've got a couple of objects to keep track of for each file
being sent, but on the other hand it will be a lot easier to keep track of
how much progress you've made (and keep the user informed) that way.

> - Or, is it better to use something like tarfile module to create a
>   stream of bytes that I stream to the other side and decode?

I would recommend this approach if you had a bunch of small files. You want
to run that 'tar cf - WHAT' child against a ProcessProtocol that reacted to
dataReceived(data) by doing a rref.callRemote("moreDataForYou", data). You'd
probably want to accumulate data into chunks of maybe 4k or so to increase
efficiency. At the far end, your remote_moreDataForYou() call would write
that data into the untarring ProcessProtocol. Take a look at
doc/core/howto/process.xhtml for details on ProcessProtocols and
reactor.spawnProcess.

> - Finally, should I be doing something completely different?
>   Normally, outside of my application, I'd just use rsync, scp, or
>   some such.

I'd certainly investigate this method if the most of the files you are
sending are already in place on the far end. The bandwidth savings are worth
the extra setup hassle.

Is there a way to get rsync to speak to stdout/stdin instead of using a TCP
socket? If so, you could spawnProcess('rsync') and proxy it to the far end
over PB as with 'tar' above. Or, you could have your PB-connection-wielding
process listen on a local TCP socket, then tell rsync to talk directly to
that port, then do a socket-level proxy over PB to the far system.

Also remember that scp (or rsync-over-ssh or tar|ssh, etc) will be doing
better authentication than PB, since PB is all in cleartext. Many
applications don't require confidentiality, but before you switch from ssh to
straight PB you should be aware of what exactly you're giving up.

<shameless plug>
But, if you use NewPB, you get the strong authentication and confidentiality
of ssh with all of the juicy RemoteReference model you've come to know and
love from PB, check out NewPB[1] today.
</shameless plug>.


cheers,
 -Brian

[1]: http://twistedmatrix.com/trac/wiki/NewPB



From nico at tekNico.net  Wed May 17 02:41:21 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 17 May 2006 08:41:21 +0200
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <20060517012422.GB20086@mit.edu>
References: <20060517012422.GB20086@mit.edu>
Message-ID: <446AC591.5020908@tekNico.net>

Justin Mazzola Paluska wrote:
> Hi,
> 
> I'm using PB in a distributed application that has suddenly grown the
> requirement to copy directories of files between the servers.
> 
> From lurking on the mailing list archives, it seems that the best way
> to move large amounts of data between Twisted servers is to use a
> twisted.spread.util.Pager sub-class to pipe the data.  Between that
> information and the "How to use twisted pb pager" [1] document, I'm
> probably good to go on how to transfer large amounts of data.

In my experience, sending big files over PB takes way too much time. This
is due to the serialization-deserialization process involved. Paging avoids
blocking, which is good, but it still takes much more than sending the
files as-is.

At the very least, optimize serialization by enable cBanana by uncommenting
the lines 311-318 in twisted.spread.banana.py . Why are they commented?

http://twistedmatrix.com/pipermail/twisted-python/2004-December/009158.html


> - Finally, should I be doing something completely different?
>   Normally, outside of my application, I'd just use rsync, scp, or
>   some such.  However, the users of this application don't know how to
>   use these tools.  I can't spawn these programs without getting into
>   authentication issues between the machines.  Doing this within
>   Twisted seems like a good idea because the machines are already
>   authenticated to each other through PB, but I could be wrong.

You could send the files over an HTTP connection, avoiding the
serialization overhead. Setting up HTTP clients and servers is very easy in
Twisted, as you surely know.


> [1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/457670

-- 
Nicola Larosa - http://www.tekNico.net/

If you know you can love work, you're in the home stretch, and if you know
what work you love, you're practically there. -- Paul Graham, January 2006





From general at eepatents.com  Wed May 17 03:25:54 2006
From: general at eepatents.com (Ed Suominen)
Date: Wed, 17 May 2006 00:25:54 -0700
Subject: [Twisted-Python] sAsync: SQLAlchemy Made Asynchronous
Message-ID: <446AD002.9040207@eepatents.com>

sAsync: SQLAlchemy Made Asynchronous
----------------------------------------
http://foss.eepatents.com/sAsync/

"sAsync offers asynchronous access to the outstanding SQLAlchemy package
by Michael Bayer. It also provides SQLAlchemy enhancements including
persistent dictionaries, text indexing and searching, and an access
broker for conveniently managing database access, table setup, and
transactions. Everything can be run in an asynchronous fashion using the
Twisted framework and its deferred processing capabilities."

As the site goes on to say, this package is very much a work in
progress, and it's not even close to a release yet. It has only the
beginning of a test suite, none of the planned searching capability is
close to working, and it needs some more packaging work, for starters.
However, you can browse the package source files from the current SVN
trunk on the Trac site, or check out the current SVN trunk as follows:

svn co svn://eepatents.com/var/svn/sasync/trunk sasync

I very much hope that SQLAlchemy and Twisted users (especially those
interested in the integrated use of both projects) will offer
submissions. That can be done by creating tickets with uploaded files,
editing the Wiki page http://foss.eepatents.com/sAsync/wiki/Submissions,
or (if you're serious about this), by requesting and obtaining SVN
commit privileges for the project from me.

It would be great to see some collaborate work getting done on this. I'm
also interested in whether this would be a prospect for an add-on to SA
itself rather than a separately maintained package.

Best regards,
Ed Suominen



From eprparadocs at gmail.com  Wed May 17 07:57:39 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 07:57:39 -0400
Subject: [Twisted-Python] Question about PB and multicast
Message-ID: <446B0FB3.8060108@gmail.com>

I am building an application that has tens of thousands of clients.
There are times when I need to talk to quite a few of the clients using PB.

When I have to talk to a single (or a few) clients via PB I do the
normal thing - issue multiple calls. In the cases where I have to talk
to quite a few clients I had thought of changing the object I am sending
to include the names of the machines I am interested in talking to. I
would then send it via multicast using PB. I know this would require
some changes on the PB side, but I am wondering if anyone sees a problem
doing this?

Peace,
Chaz.



From jmp at MIT.EDU  Wed May 17 08:57:24 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Wed, 17 May 2006 08:57:24 -0400
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <446AC591.5020908@tekNico.net>
References: <20060517012422.GB20086@mit.edu> <446AC591.5020908@tekNico.net>
Message-ID: <20060517125723.GE7887@mit.edu>

On Wed, May 17, 2006 at 08:41:21AM +0200, Nicola Larosa wrote:
> In my experience, sending big files over PB takes way too much time. This
> is due to the serialization-deserialization process involved. Paging avoids
> blocking, which is good, but it still takes much more than sending the
> files as-is.

How bad is the slow down?  Or, to ask the question another way, how
much CPU will the process actually take?  

I ask because the machines in question are being used as file servers
for streaming applications like video and whatnot, so having Twisted
suck up all of the CPU may disrupt the other streams.  (We're not
using Twisted to actually serve the files, but rather as the
application framework for various web- and GUI- based management
clients.  The copy data feature would be the first time we're moving
lots of data with Twisted.)

> > - Finally, should I be doing something completely different?
> >   Normally, outside of my application, I'd just use rsync, scp, or
> >   some such.  However, the users of this application don't know how to
> >   use these tools.  I can't spawn these programs without getting into
> >   authentication issues between the machines.  Doing this within
> >   Twisted seems like a good idea because the machines are already
> >   authenticated to each other through PB, but I could be wrong.
> 
> You could send the files over an HTTP connection, avoiding the
> serialization overhead. Setting up HTTP clients and servers is very easy in
> Twisted, as you surely know.

Indeed! Using HTTP is appealing because it is closer to just stuffing
bits in a socket from an efficiency standpoint.  Is there a way of
passing a RemoteReference to an HTTP server?  Or is the best thing to
do just use the PB to send a URL to the DEST server?
   --Justin



From nico at tekNico.net  Wed May 17 09:16:17 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 17 May 2006 15:16:17 +0200
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <20060517125723.GE7887@mit.edu>
References: <20060517012422.GB20086@mit.edu> <446AC591.5020908@tekNico.net>
	<20060517125723.GE7887@mit.edu>
Message-ID: <446B2221.9040708@tekNico.net>

Nicola Larosa:
>> In my experience, sending big files over PB takes way too much time. This
>> is due to the serialization-deserialization process involved. Paging avoids
>> blocking, which is good, but it still takes much more than sending the
>> files as-is.

Justin Mazzola Paluska:
> How bad is the slow down?  Or, to ask the question another way, how
> much CPU will the process actually take?  

100% CPU for all the time it takes. Serialization is CPU- and memory-intensive.


>> You could send the files over an HTTP connection, avoiding the
>> serialization overhead. Setting up HTTP clients and servers is very easy in
>> Twisted, as you surely know.

> Indeed! Using HTTP is appealing because it is closer to just stuffing
> bits in a socket from an efficiency standpoint.  Is there a way of
> passing a RemoteReference to an HTTP server?

I don't think so. There's no overlapping that I know of, between PB and HTTP.


> Or is the best thing to do just use the PB to send a URL to the DEST
> server?

That's what I was hinting at, yes. Of course you should separately take
care of any required authentication, authorization and encryption on the
HTTP connection.


-- 
Nicola Larosa - http://www.tekNico.net/

If you know you can love work, you're in the home stretch, and if you know
what work you love, you're practically there. -- Paul Graham, January 2006





From jmp at MIT.EDU  Wed May 17 09:17:37 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Wed, 17 May 2006 09:17:37 -0400
Subject: [Twisted-Python] Send many large files with PB
In-Reply-To: <20060516.234112.131383979.warner@lothar.com>
References: <20060516.234112.131383979.warner@lothar.com>
Message-ID: <20060517131735.GF7887@mit.edu>

On Tue, May 16, 2006 at 11:41:12PM -0700, Brian Warner wrote:
> Justin Mazzola Paluska <jmp at MIT.EDU> writes:
> 
> > - Should I send the files from SRC to DEST one-by-one?
> 
> That's how I would do it. If you're talking about gigabyte-sized files, the
> protocol overhead will be pretty minimal compared to the data being
> transferred. You've got a couple of objects to keep track of for each file
> being sent, but on the other hand it will be a lot easier to keep track of
> how much progress you've made (and keep the user informed) that way.

OK.  I could also possibly stream multiple files at once with this
method, which is an added bonus.

> > - Finally, should I be doing something completely different?
> >   Normally, outside of my application, I'd just use rsync, scp, or
> >   some such.
> 
> I'd certainly investigate this method if the most of the files you are
> sending are already in place on the far end. The bandwidth savings are worth
> the extra setup hassle.

For this particular job, none of the files are initially in place on
the remote end, so rsync itself won't be a big win.

> Is there a way to get rsync to speak to stdout/stdin instead of using a TCP
> socket? If so, you could spawnProcess('rsync') and proxy it to the far end
> over PB as with 'tar' above. Or, you could have your PB-connection-wielding
> process listen on a local TCP socket, then tell rsync to talk directly to
> that port, then do a socket-level proxy over PB to the far system.

For future reference, I think there are ways of hacking this (these
statements are conjectures, I haven't actually tried them):

- on the side pushing data, use --rsh= some script that just takes the
  output of rsync and pushes it to stdout.

- on the side receiving the data, use --server to read from stdin.

> Also remember that scp (or rsync-over-ssh or tar|ssh, etc) will be doing
> better authentication than PB, since PB is all in cleartext. Many
> applications don't require confidentiality, but before you switch from ssh to
> straight PB you should be aware of what exactly you're giving up.

Our PB connections go over SSL and we have a custom auth module, so
piping everything over PB wouldn't be a big loss.

> <shameless plug>
> But, if you use NewPB, you get the strong authentication and confidentiality
> of ssh with all of the juicy RemoteReference model you've come to know and
> love from PB, check out NewPB[1] today.
> </shameless plug>.

I've been reading about NewPB and it might be exactly what we'll need
for the next revision of our application.  We're just too close to
pushing out this version to switch to a new RPC method for the core of
the program.

Thanks,
	--Justin



From teratorn at twistedmatrix.com  Wed May 17 09:32:00 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 17 May 2006 23:32:00 +1000
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <446B0FB3.8060108@gmail.com>
References: <446B0FB3.8060108@gmail.com>
Message-ID: <op.s9o6jm1ny3d107@localhost.localdomain>

On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:

> I am building an application that has tens of thousands of clients.
> There are times when I need to talk to quite a few of the clients using  
> PB.
>
> When I have to talk to a single (or a few) clients via PB I do the
> normal thing - issue multiple calls. In the cases where I have to talk
> to quite a few clients I had thought of changing the object I am sending
> to include the names of the machines I am interested in talking to. I
> would then send it via multicast using PB. I know this would require
> some changes on the PB side, but I am wondering if anyone sees a problem
> doing this?
>
> Peace,
> Chaz.

PB connections were only ever designed to operate between two peers. It's  
designed to run over a reliable stream protocol, e.g. TCP.

TCP doesn't work over Multicast (it doesn't make any sense, if you think  
about it). If you want to use Multicast, I think you'll pretty much have  
to write your own thing using UDP.

-Eric



From eprparadocs at gmail.com  Wed May 17 09:48:00 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 09:48:00 -0400
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <op.s9o6jm1ny3d107@localhost.localdomain>
References: <446B0FB3.8060108@gmail.com>
	<op.s9o6jm1ny3d107@localhost.localdomain>
Message-ID: <446B2990.7070601@gmail.com>

Thanks Eric. I was figuring it was something that I needed to write, but
I was hoping there was some hidden feature of Twisted or PB I didn't
know about.

Peace,
Chaz.

Eric Mangold wrote:
> On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:
> 
>> I am building an application that has tens of thousands of clients.
>> There are times when I need to talk to quite a few of the clients
>> using PB.
>>
>> When I have to talk to a single (or a few) clients via PB I do the
>> normal thing - issue multiple calls. In the cases where I have to talk
>> to quite a few clients I had thought of changing the object I am sending
>> to include the names of the machines I am interested in talking to. I
>> would then send it via multicast using PB. I know this would require
>> some changes on the PB side, but I am wondering if anyone sees a problem
>> doing this?
>>
>> Peace,
>> Chaz.
> 
> PB connections were only ever designed to operate between two peers.
> It's designed to run over a reliable stream protocol, e.g. TCP.
> 
> TCP doesn't work over Multicast (it doesn't make any sense, if you think
> about it). If you want to use Multicast, I think you'll pretty much have
> to write your own thing using UDP.
> 
> -Eric
> 




From andrea at cpushare.com  Wed May 17 10:28:07 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:28:07 +0200
Subject: [Twisted-Python] [patch] 1/4 process disconneting
Message-ID: <20060517142807.GV21766@opteron.random>

Here a list of fixes present in CPUShare-Twisted mercurial tree and
missing in Twisted SVN trunk. Most of these have been posted as a ticket
in trac without feedback (by now the links in the tickets are obsolete
due to bugs in tailor that required a rebuild of the SVN->HG repository,
but nobody asked about the dangling link anyway). So I rensend them here
just in case somebody is interested. I will not answer to replies
because I've no time, sorry. Each email contains one patch.

This fixes a reentrance problem in connectionLost if invoked by shutdown
at the same time as the real disconnect.

diff -r 493b5c24e0f3 twisted/internet/process.py
--- a/twisted/internet/process.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/internet/process.py	Wed May 17 15:59:28 2006 +0200
@@ -82,7 +82,24 @@ def detectLinuxBrokenPipeBehavior():
 # Call at import time
 detectLinuxBrokenPipeBehavior()
 
-class ProcessWriter(abstract.FileDescriptor):
+class ProcessReaderWriter(abstract.FileDescriptor):
+    """(Internal) Helper class to avoid code duplication between
+    ProcessReader and ProcessWriter."""
+    def connectionLost(self, reason):
+        """Close my end of the pipe, signal the Process (which signals the
+        ProcessProtocol).
+        See also abstract.FileDescriptor.connectionLost.
+        """
+        # connectionLost can be called multiple times, for example
+        # both from the loseConnection timer, and from the
+        # shutdown event as well, but childConnectionLost
+        # needs to be invoked only once
+        disconnected = self.disconnected
+        abstract.FileDescriptor.connectionLost(self, reason)
+        if not disconnected:
+            self.proc.childConnectionLost(self.name, reason)
+
+class ProcessWriter(ProcessReaderWriter):
     """(Internal) Helper class to write into a Process's input pipe.
 
     I am a helper which describes a selectable asynchronous writer to a
@@ -174,14 +191,8 @@ class ProcessWriter(abstract.FileDescrip
         else:
             self.stopReading()
         
-    def connectionLost(self, reason):
-        """See abstract.FileDescriptor.connectionLost.
-        """
-        abstract.FileDescriptor.connectionLost(self, reason)
-        self.proc.childConnectionLost(self.name, reason)
-
-
-class ProcessReader(abstract.FileDescriptor):
+
+class ProcessReader(ProcessReaderWriter):
     """ProcessReader
 
     I am a selectable representation of a process's output pipe, such as
@@ -224,13 +235,6 @@ class ProcessReader(abstract.FileDescrip
             self.disconnecting = 1
             self.stopReading()
             self.reactor.callLater(0, self.connectionLost, failure.Failure(CONNECTION_DONE))
-    
-    def connectionLost(self, reason):
-        """Close my end of the pipe, signal the Process (which signals the
-        ProcessProtocol).
-        """
-        abstract.FileDescriptor.connectionLost(self, reason)
-        self.proc.childConnectionLost(self.name, reason)
 
 
 class Process(styles.Ephemeral):



From andrea at cpushare.com  Wed May 17 10:31:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:31:56 +0200
Subject: [Twisted-Python] [patch] 2/4 processEnded no thread callback
In-Reply-To: <20060517142807.GV21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
Message-ID: <20060517143156.GW21766@opteron.random>

I noticed processEnded is called by threads. This generates a subtle
race condition for most code (or at least for my code). The fact
processEnded is called from threads isn't documented anywhere and so I
prefer to be safe than sorry since I assume most code is written
thinking processEnded will run in the usual serialized context and not
in a parallel racy thread.

diff -r 493b5c24e0f3 twisted/internet/posixbase.py
--- a/twisted/internet/posixbase.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/internet/posixbase.py	Wed May 17 15:59:28 2006 +0200
@@ -189,7 +189,7 @@ class PosixReactorBase(ReactorBase):
         if platformType == 'posix':
             signal.signal(signal.SIGCHLD, self._handleSigchld)
 
-    def _handleSigchld(self, signum, frame, _threadSupport=platform.supportsThreads()):
+    def _handleSigchld(self, signum, frame):
         """Reap all processes on SIGCHLD.
 
         This gets called on SIGCHLD. We do no processing inside a signal
@@ -198,10 +198,7 @@ class PosixReactorBase(ReactorBase):
         eventloop round prevents us from violating the state constraints
         of arbitrary classes.
         """
-        if _threadSupport:
-            self.callFromThread(process.reapAllProcesses)
-        else:
-            self.callLater(0, process.reapAllProcesses)
+        self.callLater(0, process.reapAllProcesses)
 
     def startRunning(self, installSignalHandlers=1):
         # Just in case we're started on a different thread than



From andrea at cpushare.com  Wed May 17 10:37:28 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:37:28 +0200
Subject: [Twisted-Python] [patch] 3/4 basic protocols don't notice
	disconnecting
In-Reply-To: <20060517143156.GW21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
	<20060517143156.GW21766@opteron.random>
Message-ID: <20060517143728.GX21766@opteron.random>

This is an old patch, it wasn't applied because not all transport
backends support disconnecting but since I assume most people uses the
basic int32/16 protocols on top of tcp this isn't a pratical concern for
me, and I prefer no data callback to fire after calling loseConnection.
This isn't an high prio patch but I post it anyway (I understand if it
will not be applied to SVN again for the valid reason that disconnecting
may not exists, I admit I never investigated since I only use tcp and
udp, my argument that disconnecting could be added in a compatible
transparent way to all transports still holds).

diff -r 493b5c24e0f3 twisted/protocols/basic.py
--- a/twisted/protocols/basic.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/protocols/basic.py	Wed May 17 15:59:28 2006 +0200
@@ -309,7 +309,7 @@ class Int32StringReceiver(protocol.Proto
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3 and not self.paused:
+        while len(self.recvd) > 3 and not self.paused and not self.transport.disconnecting:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -346,7 +346,7 @@ class Int16StringReceiver(protocol.Proto
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1 and not self.paused:
+        while len(self.recvd) > 1 and not self.paused and not self.transport.disconnecting:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break




From teratorn at twistedmatrix.com  Wed May 17 10:38:58 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Thu, 18 May 2006 00:38:58 +1000
Subject: [Twisted-Python] Twisted Sprint in Australia
In-Reply-To: <d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
References: <d06a5cd30604081942q3972c79apfde5efb6812da6a2@mail.gmail.com>
	<20060409041914.GA5338@sourdust.home.puzzling.org>
	<d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
Message-ID: <op.s9o9m80my3d107@localhost.localdomain>

Cool. I should be able to make it. Will be staying in Sydney for the  
nights of June 3-6. I'm trying to sort out accomodations right now... is  
anyone staying at a hotel, or have other accomodations that could be  
shared?

-Eric

On Sun, 09 Apr 2006 17:09:43 +1000, Jonathan Lange <jml at mumak.net> wrote:

> On 4/9/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>> On Sun, Apr 09, 2006, Jonathan Lange wrote:
>> > I tentatively suggest that the Sprint be:
>> > - In Sydney
>> > - June 24-25
>> > (patches accepted)
>> >
>
> For various reasons, it is now:
> June 3-4, Sydney.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From andrea at cpushare.com  Wed May 17 10:51:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:51:06 +0200
Subject: [Twisted-Python] [patch] 4/4 stable web2
In-Reply-To: <20060517143728.GX21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
	<20060517143156.GW21766@opteron.random>
	<20060517143728.GX21766@opteron.random>
Message-ID: <20060517145106.GY21766@opteron.random>

I started using web2 in production about 4 months ago and it's stable
(there were bugs but I've fixed them all). Grepping for 'grep -ri nevow'
over my tree shows zero hits for about two months. The web2 API
rightfully isn't stable but people that is ok with slight change of APIs
(changes that hopefully won't require a total rewrite of the
application) should be allowed to start porting their apps to web2, and
infact in the last 4 months the API has not changed singificantly, and
it seems quite mature, much better than web1.

It is now time to make web2 mainstream, implementing any potentially
missing feature (I never tested the web2 client side for example, that
may not be mature as the server side yet) and leave for web3
any huge changes that isn't strictly necessary and that would requires a
total rewrite of the apps. Twisted-web userbase shouldn't lose more time
on the obsolete twisted.web1 api. There is people like me that needs
something with much more scalable and simpler to code with than
web1+neovw. twisted.web2 + cheetah (or other rendering templates) fills
this gap nicely. I hope that the huge nevow dependency of divmod
products generates no conflict of interest with change. Web2 always gest
installed in Twisted-HG (including all web2 fixes that are pending and
that I'll post to twisted-web list shortly).

diff -r 493b5c24e0f3 setup.py
--- a/setup.py	Tue May 16 04:57:00 2006 +0000
+++ b/setup.py	Wed May 17 15:59:35 2006 +0200
@@ -11,7 +11,7 @@ import sys, os, glob
 
 # Projects to which `all' refers.
 sumoSubprojects = ['core', 'conch', 'lore', 'mail', 'names',
-                   'runner', 'web', 'words', 'news']
+                   'runner', 'web', 'words', 'news', 'web2',]
 
 specialPaths = {'core': 'twisted/topfiles/setup.py'}
 



From exarkun at divmod.com  Wed May 17 11:04:07 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:04:07 -0400
Subject: [Twisted-Python] [patch] 1/4 process disconneting
In-Reply-To: <20060517142807.GV21766@opteron.random>
Message-ID: <20060517150407.28682.827774677.divmod.quotient.1839@ohm>

On Wed, 17 May 2006 16:28:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>Here a list of fixes present in CPUShare-Twisted mercurial tree and
>missing in Twisted SVN trunk. Most of these have been posted as a ticket
>in trac without feedback (by now the links in the tickets are obsolete
>due to bugs in tailor that required a rebuild of the SVN->HG repository,
>but nobody asked about the dangling link anyway). So I rensend them here
>just in case somebody is interested. I will not answer to replies
>because I've no time, sorry. Each email contains one patch.

If you had put patches into the issue tracker in the first place you wouldn't have had to resend anything at all.

>
>This fixes a reentrance problem in connectionLost if invoked by shutdown
>at the same time as the real disconnect.

No it doesn't.

Jean-Paul



From exarkun at divmod.com  Wed May 17 11:06:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:06:09 -0400
Subject: [Twisted-Python] [patch] 2/4 processEnded no thread callback
In-Reply-To: <20060517143156.GW21766@opteron.random>
Message-ID: <20060517150609.28682.1764661287.divmod.quotient.1840@ohm>

On Wed, 17 May 2006 16:31:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I noticed processEnded is called by threads. This generates a subtle
>race condition for most code (or at least for my code). The fact
>processEnded is called from threads isn't documented anywhere and so I
>prefer to be safe than sorry since I assume most code is written
>thinking processEnded will run in the usual serialized context and not
>in a parallel racy thread.

No it isn't.  The bug you imagine here is non-existent.  There is nothing to be fixed.

Jean-Paul



From exarkun at divmod.com  Wed May 17 11:09:56 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:09:56 -0400
Subject: [Twisted-Python] [patch] 4/4 stable web2
In-Reply-To: <20060517145106.GY21766@opteron.random>
Message-ID: <20060517150956.28682.738587629.divmod.quotient.1842@ohm>

On Wed, 17 May 2006 16:51:06 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I started using web2 in production about 4 months ago and it's stable
>(there were bugs but I've fixed them all). Grepping for 'grep -ri nevow'
>over my tree shows zero hits for about two months. The web2 API
>rightfully isn't stable but people that is ok with slight change of APIs
>(changes that hopefully won't require a total rewrite of the
>application) should be allowed to start porting their apps to web2, and
>infact in the last 4 months the API has not changed singificantly, and
>it seems quite mature, much better than web1.

"allowed"?  What's stopping anyone from using it?

>
>It is now time to make web2 mainstream, implementing any potentially
>missing feature (I never tested the web2 client side for example, that
>may not be mature as the server side yet) and leave for web3
>any huge changes that isn't strictly necessary and that would requires a
>total rewrite of the apps. Twisted-web userbase shouldn't lose more time
>on the obsolete twisted.web1 api. There is people like me that needs
>something with much more scalable and simpler to code with than
>web1+neovw. twisted.web2 + cheetah (or other rendering templates) fills
>this gap nicely. I hope that the huge nevow dependency of divmod
>products generates no conflict of interest with change. Web2 always gest
>installed in Twisted-HG (including all web2 fixes that are pending and
>that I'll post to twisted-web list shortly).

Sorry, you don't get to dictate the course of development of projects you don't even usefully contribute to.  twisted.web2 is unstable and will continue to change incompatibly until at least the _obvious_ shortcomings have been addressed.

Jean-Paul



From exarkun at divmod.com  Wed May 17 11:16:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:16:06 -0400
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <op.s9o6jm1ny3d107@localhost.localdomain>
Message-ID: <20060517151606.28682.1215678633.divmod.quotient.1844@ohm>

On Wed, 17 May 2006 23:32:00 +1000, Eric Mangold <teratorn at twistedmatrix.com> wrote:
>On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:
>>I am building an application that has tens of thousands of clients.
>>There are times when I need to talk to quite a few of the clients using 
>>PB.
>>
>>When I have to talk to a single (or a few) clients via PB I do the
>>normal thing - issue multiple calls. In the cases where I have to talk
>>to quite a few clients I had thought of changing the object I am sending
>>to include the names of the machines I am interested in talking to. I
>>would then send it via multicast using PB. I know this would require
>>some changes on the PB side, but I am wondering if anyone sees a problem
>>doing this?
>>
>>Peace,
>>Chaz.
>
>PB connections were only ever designed to operate between two peers. It's 
>designed to run over a reliable stream protocol, e.g. TCP.

Actually, PB's initial design did include provisions for operation over
UDP.  However, Twisted does not include any implementation of those parts
of PB, so this is perhaps a useless correction. ;)

Jean-Paul



From glyph at divmod.com  Wed May 17 11:30:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 11:30:14 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060517143156.GW21766@opteron.random>
Message-ID: <20060517153014.28682.849255619.divmod.quotient.1848@ohm>

On Wed, 17 May 2006 16:31:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I noticed processEnded is called by threads.

As exarkun noted in the ticket, which is where Andrea should have responded in the first place:

    http://twistedmatrix.com/trac/ticket/1667

Andrea don't understand the purpose of that code (he's effectively reading it backwards) and disabling it will make the situation with processes and threads worse, not better.  Please don't apply this patch (or any of his patches) to your own copies of Twisted.

Also, please don't follow his example and re-post your own patches which have been rejected because they are buggy to the mailing list.

I hope that everyone on this list has the good sense not to listen to Mr. Arcangeli's creative interpretations of reality by now, but in case not, this line should give you a clue:

> (there were bugs but I've fixed them all)

This from a man who believes that unit tests are a "waste of time".

It may indeed be possible to use some random snapshot of web2 in a production setting; however, you have a virtual guarantee from the entire Twisted team that the web2 API _will_ change incompatibly before it's released, and that we will _not_ support any use of it before then.  I am personally hoping that we can make some major incompatible changes, (as I have said before) specifically the substitution of something else for the deferred 'streams' API.  I'm not a web2 maintainer so I might be talked out of that *specific* change, but it's just an example.

(Keep in mind that the only person willing to support it does not have time to write unit tests for his own code, or read responses to tickets he has filed explaining why his understanding is incorrect.)

If you want to accelerate the process of web2 actually being maintained and supported as a stable API, we're always interested in hearing about donations of resources or time.  Divmod, in particular, would like to have some excuse to help web2 get finished so we can port Nevow over and stop supporting web1, but we don't have any resources of our own to spare at the moment.



From manlio_perillo at libero.it  Wed May 17 11:55:38 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 13:55:38 -0200
Subject: [Twisted-Python] trial and setUpClass
Message-ID: <446B477A.8000904@libero.it>

Hi.

Just to be sure:
setUpClass will be called *once* at the beginning of the TestCase?


Thanks  Manlio Perillo



From manlio_perillo at libero.it  Wed May 17 11:57:52 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 13:57:52 -0200
Subject: [Twisted-Python] lore
Message-ID: <446B4800.9020500@libero.it>

Is Lore still the official tool for documentation?

I've noted that web2 uses reStructuredText.

And what about API generation from docstrings?
What tool it is used? epydoc?



Thanks and regards  Manlio Perillo



From luc.stepniewski at adelux.fr  Wed May 17 11:56:24 2006
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Wed, 17 May 2006 17:56:24 +0200
Subject: [Twisted-Python] How to disconnect a client,
	when you only have an instance of pb.PBClientFactory ?
Message-ID: <200605171756.24534.luc.stepniewski@adelux.fr>

I'm still trying to kill a hung PB client connection to a server. I noticed 
the timeout parameter in reactor.connectTCP() is not what I what, as it is 
only used once the connection is established (PB handshake).
I'm trying to kill a connection that didn't manage to make the PB handshake 
(for example when instead of having a PB server, you have a server that 
replies to TCP but not to PB, like a netcat program).

So my idea is to launch a callLater that, if the connection is still present 
after 5 seconds (the callLater hasn't been cancelled), will close the client 
connection. The problem is that I just have an instance of 
pb.PBClientFactory, and I cannot find in the forest of methods which one I 
could use to cut that connection (if that's possible).

I attached a small test file, if my explanation was really clear :-)

Thanks for your help,
Luc
-------------- next part --------------
A non-text attachment was scrubbed...
Name: killit.py
Type: application/x-python
Size: 2118 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060517/c18b7c35/attachment.bin 

From glyph at divmod.com  Wed May 17 12:42:13 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 12:42:13 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
Message-ID: <20060517164214.28682.813570504.divmod.quotient.1866@ohm>



On Wed, 17 May 2006 13:57:52 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Is Lore still the official tool for documentation?

Yes.

>I've noted that web2 uses reStructuredText.

Yes.  An experiment, and a failed one.  The goal was originally to generate Lore from the ReST; I hope someone will volunteer to translate it to the official format so that it can be included in the PDF with the rest of the documentation.

>And what about API generation from docstrings?
>What tool it is used? epydoc?

Pydoctor.  My previous proposal to include pydoctor in lore was met ... coolly, to put it diplomatically ;-).



From exarkun at divmod.com  Wed May 17 12:43:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 12:43:16 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
Message-ID: <20060517164316.28682.247618772.divmod.quotient.1868@ohm>

On Wed, 17 May 2006 13:57:52 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Is Lore still the official tool for documentation?

Yes.

>
>I've noted that web2 uses reStructuredText.

David Reid is working on converting it to lore.

>
>And what about API generation from docstrings?
>What tool it is used? epydoc?

Michael Hudson wrote an epydoc replacement called pydoctor.  It parses the epytext markup in docstrings and generates the API docs now on the website.

Jean-Paul



From foom at fuhm.net  Wed May 17 12:48:33 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 17 May 2006 12:48:33 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
References: <446B4800.9020500@libero.it>
Message-ID: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>


On May 17, 2006, at 11:57 AM, Manlio Perillo wrote:

> Is Lore still the official tool for documentation?
>
Yes.

> I've noted that web2 uses reStructuredText.
>

I did that because I hate lore, but everyone else seems to dislike  
that I did so, and plans to convert those docs back to lore format.  
I'd rather that ReST became the recommended doc format, instead of  
converting those back to lore, but have no free time to try to push  
that viewpoint.

> And what about API generation from docstrings?
> What tool it is used? epydoc?

No, pydoctor. epydoc doesn't work.

James




From glyph at divmod.com  Wed May 17 13:01:55 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 13:01:55 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
Message-ID: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>



On Wed, 17 May 2006 12:48:33 -0400, James Y Knight <foom at fuhm.net> wrote:

>On May 17, 2006, at 11:57 AM, Manlio Perillo wrote:

>>I've noted that web2 uses reStructuredText.

>I did that because I hate lore, but everyone else seems to dislike  that I 
>did so, and plans to convert those docs back to lore format.  I'd rather 
>that ReST became the recommended doc format, instead of  converting those 
>back to lore, but have no free time to try to push  that viewpoint.

FWIW, I really wouldn't be opposed to ReST as a _format_, as long as it fit into the rest of the toolchain.  If anyone else shares james' dislike of extremely limited HTML as an input format and user interface[1] to the documentation system, writing an input plugin for lore to recognize it would be a good first step.


[1]: I can see why you might.  While I personally don't mind typing angle brackets (it's a soothing distraction from all that thinking), Lore's input format was in part a bet that Mozilla Composer would be reasonable and ubiquitous for end-users in a year or two... three years ago.  Remember Mozilla?  Hee.



From manlio_perillo at libero.it  Wed May 17 13:16:12 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 15:16:12 -0200
Subject: [Twisted-Python] lore
In-Reply-To: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
References: <446B4800.9020500@libero.it>
	<BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
Message-ID: <446B5A5C.8040709@libero.it>

James Y Knight ha scritto:
> [...]
>
>> I've noted that web2 uses reStructuredText.
>>
> 
> I did that because I hate lore, 

Lore is a good thing, but writing XHTML documents can be a nuisance...

> but everyone else seems to dislike that
> I did so, and plans to convert those docs back to lore format. I'd
> rather that ReST became the recommended doc format, instead of
> converting those back to lore, but have no free time to try to push that
> viewpoint.
> 

What are the problems encountered with reStructuredText?

>> And what about API generation from docstrings?
>> What tool it is used? epydoc?
> 
> No, pydoctor. epydoc doesn't work.
> 

Thanks.
The "formats" used are the same, right?


I'm asking this because I'm writing a replacement for pgasync.
It will be a fully featured client, with an interface like libpq (where
this make sense, of course).

I'm tring to follow the "twisted way" [1].
I've added unit tests and now I would like to write some documentation.


[1] because I think such a thing should be added in twisted.enterprise



Regards  Manlio Perillo



From eprparadocs at gmail.com  Wed May 17 14:00:01 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 14:00:01 -0400
Subject: [Twisted-Python] Multicast Server Example....
In-Reply-To: <200605171756.24534.luc.stepniewski@adelux.fr>
References: <200605171756.24534.luc.stepniewski@adelux.fr>
Message-ID: <446B64A1.4000309@gmail.com>

I have been looking over the Multicast server example in the
documentation (pages 92/93). In both the server and the client there the
line:

from twisted.application.internet import MulticastServer

but I don't see any need for it. Am I missing something here?

Peace,
Chuck Wegrzyn




From manlio_perillo at libero.it  Wed May 17 15:00:29 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 17:00:29 -0200
Subject: [Twisted-Python] how to "close" a TLS connection?
Message-ID: <446B72CD.2080106@libero.it>

Hi.

I'm doing some unit test with TLS but I got:

twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!
reactor left in unclean state, the following Selectables were left over:
 <<class 'twisted.internet.tcp.TLSConnection'> to ('localhost', 5432) at
f0e590>


All is ok if I do not use TLS (I simply close the connection).

What's the problem?


Thanks  Manlio Perillo



From exarkun at divmod.com  Wed May 17 16:03:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 16:03:17 -0400
Subject: [Twisted-Python] how to "close" a TLS connection?
In-Reply-To: <446B72CD.2080106@libero.it>
Message-ID: <20060517200317.28682.1960707075.divmod.quotient.1886@ohm>

On Wed, 17 May 2006 17:00:29 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Hi.
>
>I'm doing some unit test with TLS but I got:
>
>twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!
>reactor left in unclean state, the following Selectables were left over:
> <<class 'twisted.internet.tcp.TLSConnection'> to ('localhost', 5432) at
>f0e590>
>
>
>All is ok if I do not use TLS (I simply close the connection).
>
>What's the problem?
>

TLS close adds a layer of back and forth traffic on top of the existing TCP close handshake.  Your test probably assumes that loseConnection() will drop the connection within a certain number of round-trips, but the added TLS negotiation pushes the actual shutdown over that threshhold, so the connection is still around when trial gets around to looking for such things.

You should add a Deferred which is fired by the protocol's connectionLost method or the factory's clientConnectionLost method, and make sure your test doesn't end until that Deferred fires.

Jean-Paul



From foom at fuhm.net  Wed May 17 17:42:12 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 17 May 2006 17:42:12 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
Message-ID: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>

On May 17, 2006, at 1:01 PM, glyph at divmod.com wrote:
> FWIW, I really wouldn't be opposed to ReST as a _format_, as long  
> as it fit into the rest of the toolchain.  If anyone else shares  
> james' dislike of extremely limited HTML as an input format and  
> user interface[1] to the documentation system, writing an input  
> plugin for lore to recognize it would be a good first step.

JP/Exarkun is against ReST as an input format for the documentation  
system. Writing an input plugin for lore to recognize it isn't a good  
first step, getting agreement that writing such a plugin would be  
Good is a good first step. From http://twistedmatrix.com/trac/ticket/ 
1515:
> All documentation for all Twisted projects should use lore. There  
> should only be one source format for documentation: even though we  
> could write a ReST input driver, doing so would defeat a large  
> portion of the purpose of lore, which is to make it easy to write  
> and maintain documentation (requiring everyone to learn lore xhtml  
> and ReST is harder than requiring everyone to learn lore xhtml).
I disagree with that conclusion, but have given up arguing the point.  
If there are others who support my view, now would be a good time to  
speak up. You of course get extra bonus points if you've actually  
contributed to documentation in twisted.

James





From dreid at dreid.org  Wed May 17 18:06:33 2006
From: dreid at dreid.org (David Reid)
Date: Wed, 17 May 2006 15:06:33 -0700
Subject: [Twisted-Python] lore
In-Reply-To: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
Message-ID: <446B9E69.2000604@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

James Y Knight wrote:
> JP/Exarkun is against ReST as an input format for the documentation
> system. Writing an input plugin for lore to recognize it isn't a good
> first step, getting agreement that writing such a plugin would be Good
> is a good first step. From http://twistedmatrix.com/trac/ticket/1515:
>> All documentation for all Twisted projects should use lore. There
>> should only be one source format for documentation: even though we
>> could write a ReST input driver, doing so would defeat a large portion
>> of the purpose of lore, which is to make it easy to write and maintain
>> documentation (requiring everyone to learn lore xhtml and ReST is
>> harder than requiring everyone to learn lore xhtml).

If I'm not lazy this input driver is going to get written to convert the
existing web2 docs anyway.  I think he's mainly saying he's against it
for the purposes of allowing multiple documentation formats in the
source tree.  I don't think he'd find it terribly objectionable as a
"feature" of lore.  Atleast not enough to finding the energy to prevent
it from happening.

> I disagree with that conclusion, but have given up arguing the point. If
> there are others who support my view, now would be a good time to speak
> up. You of course get extra bonus points if you've actually contributed
> to documentation in twisted.

I just don't see any clear benefit ReST has over lore.  Especially not
with the amount of existing documentation that is in lore.  If anyone
would like to point out the benefit I'll gladly listen.

- -David

- --
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (Darwin)

iD8DBQFEa55orsrO6aeULcgRAilhAJ9s8uA8XuIRrRO/3jMA3s9keUH9JwCgoySY
ZTcN7w4Rf2EoF2RKoPajVyI=
=LpZH
-----END PGP SIGNATURE-----



From jml at mumak.net  Wed May 17 20:04:42 2006
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 18 May 2006 10:04:42 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446B477A.8000904@libero.it>
References: <446B477A.8000904@libero.it>
Message-ID: <d06a5cd30605171704i1fe4a20br4b1bc9fa35c17311@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Hi.
>
> Just to be sure:
> setUpClass will be called *once* at the beginning of the TestCase?
>

Yes.



From manlio_perillo at libero.it  Thu May 18 03:11:05 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 18 May 2006 05:11:05 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446B477A.8000904@libero.it>
References: <446B477A.8000904@libero.it>
Message-ID: <446C1E09.5050203@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> Just to be sure:
> setUpClass will be called *once* at the beginning of the TestCase?
> 

Another question: there is a supported way to execute code before *all*
TestCases run?


Now I simply execute a synchronous function before defining test cases.


Thanks and regards  Manlio Perillo



From jml at mumak.net  Thu May 18 03:29:00 2006
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 18 May 2006 17:29:00 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446C1E09.5050203@libero.it>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
Message-ID: <d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Manlio Perillo ha scritto:
> > Hi.
> >
> > Just to be sure:
> > setUpClass will be called *once* at the beginning of the TestCase?
> >
>
> Another question: there is a supported way to execute code before *all*
> TestCases run?
>
>
> Now I simply execute a synchronous function before defining test cases.
>

No, there isn't.

What are you trying to do?

jml



From manlio_perillo at libero.it  Thu May 18 06:23:13 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 18 May 2006 08:23:13 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
Message-ID: <446C4B11.3090904@libero.it>

Jonathan Lange ha scritto:
> [...]
>> Another question: there is a supported way to execute code before *all*
>> TestCases run?
>>
>>
>> Now I simply execute a synchronous function before defining test cases.
>>
> 
> No, there isn't.
> 
> What are you trying to do?
> 


Create some tables and functions on a PostgreSQL database.


Regards  Manlio Perillo



From corydodt at twistedmatrix.com  Thu May 18 12:59:46 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 18 May 2006 09:59:46 -0700
Subject: [Twisted-Python] lore
In-Reply-To: <446B9E69.2000604@dreid.org>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
	<446B9E69.2000604@dreid.org>
Message-ID: <446CA802.903@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Well, I was a contributor to Lore in ages past and was one of the ones who
thought it was a great idea.  Now I'm in the other camp, and I actually have
been using reST for all kinds of documentation on my end.  It's just so much
more convenient to type.

I'm not opposed to saving my documents as HTML-like syntax, but I hate typing
angle brackets.  After trying out many different approaches, I have decided
that my primary requirement in a documentation system is that it be easy to
type in documentation.  That, and nothing else, keeps me updating my
documentation regularly.  That and nothing else would convince me to generate
more documentation where it's missing.

I might be dissuaded if I saw that there was excellent tool support for Lore
out there.  What tools do people use to write Lore documents? Nvu?  How do you
handle doing the special lore-specific markup like Python code snippets?

- From what I remember about Lore, it doesn't do anything reST can't do; more
than that, reST can be converted to Lore without a lot of work.  (Round-trip
should even be possible, if that was for some reason desirable.)  So the
bottom line is: It's all about editor preference.  I would happily use Nvu if
I knew that the output would be Lore without any extra fiddling.

C


David Reid wrote:
> James Y Knight wrote:
>>> JP/Exarkun is against ReST as an input format for the documentation
>>> system. Writing an input plugin for lore to recognize it isn't a good
>>> first step, getting agreement that writing such a plugin would be Good
>>> is a good first step. From http://twistedmatrix.com/trac/ticket/1515:
>>>> All documentation for all Twisted projects should use lore. There
>>>> should only be one source format for documentation: even though we
>>>> could write a ReST input driver, doing so would defeat a large portion
>>>> of the purpose of lore, which is to make it easy to write and maintain
>>>> documentation (requiring everyone to learn lore xhtml and ReST is
>>>> harder than requiring everyone to learn lore xhtml).
> 
> If I'm not lazy this input driver is going to get written to convert the
> existing web2 docs anyway.  I think he's mainly saying he's against it
> for the purposes of allowing multiple documentation formats in the
> source tree.  I don't think he'd find it terribly objectionable as a
> "feature" of lore.  Atleast not enough to finding the energy to prevent
> it from happening.
> 
>>> I disagree with that conclusion, but have given up arguing the point. If
>>> there are others who support my view, now would be a good time to speak
>>> up. You of course get extra bonus points if you've actually contributed
>>> to documentation in twisted.
> 
> I just don't see any clear benefit ReST has over lore.  Especially not
> with the amount of existing documentation that is in lore.  If anyone
> would like to point out the benefit I'll gladly listen.
> 
> -David
> 
> --
> "Usually the protocol is this: I appoint someone for a task,
> which they are not qualified to do.  Then, they have to fight
> a bear if they don't want to do it." -- Glyph Lefkowitz

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbKgC3A5SrXAiHQcRAhl/AJ91K/mScJvHmonGM+Cbqpa4S+9gMQCfVKXM
wVwd3pIrSD7uTBFyuJntwIo=
=r7+i
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Thu May 18 15:25:07 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 18 May 2006 21:25:07 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060517153014.28682.849255619.divmod.quotient.1848@ohm>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
Message-ID: <20060518192507.GL21766@opteron.random>

> Andrea don't understand the purpose of that code (he's effectively reading 
> it backwards) and disabling it will make the situation with processes and 
> threads worse, not better.  Please don't apply this patch (or any of his 
> patches) to your own copies of Twisted.

I didn't want to answer but I think I should to confirm that for this
single patch (2/4 posted to python-twisted) they're right: I misread the
code because defertothread(callback) means defer the callback to the
thread, but callfromthred _doesn't_ mean to call the callback from the
thread. callfromthread means to call the callback from the main event
loop instead, great API naming I would say.

But for all other patches I posted, they should be applied to
everybody's own twisted copy. Including the "no it isn't", since the bug
exists and needs fixing or I get exceptions.

If trac would have posted me updates via email I wouldn't have been
forced to resubmit here. I got zero feedback and I've better things to
do than to poll trac (I even tried to poll track but I couldn't find my
tickets anymore, probably because you closed them and I got no
notification by email). Perhaps I didn't include myself in some CC list
or whatever, but in all bugtracking software I used in my life so far, I
never needed to add myself to a CC list if I was the very submitter of
the report, perhaps trac is different I don't know, apologies for that
if that's the case.

Overall using twisted for my project was a mistake. One major core
design problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to
the poll syscall unless POLLIN/POLLOUT are set too. This means that if I
throttle the I/O I can't notice anymore when a disconnect happens. But
the severe core design issues it has would be fixable and they are a
minor problem compared to the behaviour of some elements of the
community that exists around it. I don't need to enter the details
myself, if doc/fun/Twisted.Quotes isn't enough, quoting emails like
these is more than enough:

	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013137.html
	http://www.mail-archive.com/twisted-web%40twistedmatrix.com/msg00352.html

(sadly there are many more)

The only bit for which I prefer to enter into the details (just in case
somebody didn't notice) is that the guy puts me words in my mouth that I
never said and that I never thought either.

Specifically I never said unittest are a waste of time, I only said that
I don't have time to write unittests and that lack of unittests should
not prevent valid bugfixes to be included and I think this is a very
reasonable development approach. We can argue about features or huge
changes, but I think valid bugfixes should not require unittests.

If somebody sends me a huge amount of unittests I will apply them
immediately. The more unittests the better! Exactly the opposite of
"unittests are a waste of time" that the guy claimed that I have said.
I even written "unittests are welcome" it in the CPUShare-Twisted
homepage, the last change in that page happened 2006-02-16, so quite a
few months ago.
	
	http://www.cpushare.com/twisted

	In the CPUShare-Twisted fork fixes and new features will be applied
	without formalities. Notably, unit-tests are welcome, but they're
	certainly not mandatory for inclusion of new features and bugfixes. If
	you've objectives to reach quickly and you don't want having to maintain
	your own version of Twisted, you may find this project useful to you.



From foom at fuhm.net  Thu May 18 16:02:24 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 18 May 2006 16:02:24 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <82FD739B-93F7-4951-8CA4-E5836543A946@fuhm.net>

On May 18, 2006, at 3:25 PM, Andrea Arcangeli wrote:
> If trac would have posted me updates via email I wouldn't have been
> forced to resubmit here. I got zero feedback and I've better things to
> do than to poll trac (I even tried to poll track but I couldn't  
> find my
> tickets anymore, probably because you closed them and I got no
> notification by email). Perhaps I didn't include myself in some CC  
> list
> or whatever, but in all bugtracking software I used in my life so  
> far, I
> never needed to add myself to a CC list if I was the very submitter of
> the report, perhaps trac is different I don't know, apologies for that
> if that's the case.

Yes! This is a major problem with our installation of trac.  
Submitters and commentators don't get any emails unless they manually  
add themselves to the CC list.

James




From glyph at divmod.com  Thu May 18 17:34:54 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 18 May 2006 17:34:54 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
Message-ID: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>



On Thu, 18 May 2006 21:25:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>> Andrea don't understand the purpose of that code (he's effectively reading
>> it backwards) and disabling it will make the situation with processes and
>> threads worse, not better.  Please don't apply this patch (or any of his
>> patches) to your own copies of Twisted.
>
>I didn't want to answer but I think I should to confirm that for this
>single patch (2/4 posted to python-twisted) they're right: I misread the
>code because defertothread(callback) means defer the callback to the
>thread, but callfromthred _doesn't_ mean to call the callback from the
>thread. callfromthread means to call the callback from the main event
>loop instead, great API naming I would say.

I understand that English isn't your first language, and I don't blame you for that, but you can find the documentation for these APIs here:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html

and I think the descriptions are easy enough to understand.

The API logic is this: If you have a function and you are running in the reactor, but you want to CALL that function IN a THREAD, you use callInThread.

If you are running in a thread already, and you want to CALL a function that uses Twisted APIs (such as the reactor) FROM that THREAD, you use callFromThread.

Perhaps "invokeArgumentInThreadpool" or "dispatchCallableToReactorForThreadSafety" would have been better names, but I already wear out my keyboards fast enough.

>But for all other patches I posted, they should be applied to
>everybody's own twisted copy. Including the "no it isn't", since the bug
>exists and needs fixing or I get exceptions.

Since you've already demonstrated that you don't bother to read the documentation, write tests, or even understand the difficulties that may or may not exist before you submit a patch and apply it to your branch, I don't doubt that tracebacks happen, but I doubt that they're the problem you have identified.

The reason we require unit tests is the same reason scientists require *reproducible* experiments.  If you don't submit a test that can easily produce the traceback you saw, how else would we know that some local misconfiguration on your system wasn't causing it.

>If trac would have posted me updates via email ...

o/` If I only had a brain o/` da dee da dee da da dum o/`

Trac isn't perfect, but despite some minor complaints everyone else is managing to use it.  Like Twisted, Trac is written in Python, and if you want it to send you email, you can submit plugins and suggest that we use them.  Also, you can learn how to click on a bookmark, or even update an RSS feed.  Here's a single convenient page you can poll for all your tickets - including those that have been closed - and it does have an "RSS" button at the bottom so you can monitor changes:

    http://twistedmatrix.com/trac/query?reporter=andrea

>Overall using twisted for my project was a mistake.

And yet, and yet, and yet...

>One major core
>design problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to
>the poll syscall unless POLLIN/POLLOUT are set too.

This is definitely a bug.  I wouldn't term it a "major core design problem", since I think it can be affected even without changing any external APIs.  Oddly enough, you submitted a bug in the tracker about it, which could have been found either with trac's search field or the above query.  In fact it's also the first hit for "POLLHUP POLLNVAL twisted" on google.  However, since both Trac and Google are far too much work for busy, important men like yourself, I've included a link here:

    http://twistedmatrix.com/trac/ticket/1662

A response has been posted within the last month, with a comment indicating that it will be fixed.

>This means that if I throttle the I/O I can't notice anymore when a disconnect happens.

The last paragraph of the ticket's description begins:

"Currently I don't strictly need this"

I doubt that we'd necessarily do anything that was important to you in particular, but *even you* have said that this isn't really that important.  It is hypocrisy of the worst order to bring it up in this discussion as a critical, severe problem that indicates the failure of the whole community.

>But the severe core design issues it has would be fixable and they are a
>minor problem compared to the behaviour of some elements of the
>community that exists around it. I don't need to enter the details
>myself, if doc/fun/Twisted.Quotes isn't enough, quoting emails like
>these is more than enough:

"I know you are but what am I!?!?"

You're the one who won't follow simple rules of politeness like "use the tracker" or "write unit tests if you require your patches be applied".

You're the one who throws around baseless insults and lies about other peoples' code.  Your factual errors about Nevow during the period when you were abandoning it were too numerous to even taxonomize -- when have I ever said anything nasty about CPUShare?

Even considering these abuses, we still haven't rejected your access to our resources, including our mailing list and our bugtracker.  In fact, as evidenced above, effort and thought is going into fixing issues that you've reported!

And yet, because somebody once told a fart joke on an IRC channel, you *still* have the gall to say that our "behavior", as a whole community, is too difficult for anyone to deal with.  Since explicit is better than implicit, why don't I just say this right out: you are a humorless, self-important, obnoxious jerk.  You need to seriously consider your own behavior before you start insulting others.

>Specifically I never said unittest are a waste of time

Ahem.  From http://twistedmatrix.com/pipermail/twisted-web/2006-January/002389.html

"""
>So I'm going to fork twisted into a private twisted-CPUShare branch for
>my own server use where I won't have to waste time to fix bugs
"""

At least as I understood it, "waste time" == "write unittests" in that context, since the whole point of this fork is that you didn't want to write tests to get bug-fixes applied.  You are correct that you didn't ever write, word for word, "unit tests are a waste of time" but numerous other things you said implied it.



From slamb at slamb.org  Thu May 18 18:01:02 2006
From: slamb at slamb.org (Scott Lamb)
Date: Thu, 18 May 2006 15:01:02 -0700
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
Message-ID: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>

On May 18, 2006, at 2:34 PM, glyph at divmod.com wrote:
> I understand that English isn't your first language, and I don't  
> blame you for that, but you can find the documentation for these  
> APIs here:
>
> http://twistedmatrix.com/documents/current/api/ 
> twisted.internet.interfaces.IReactorThreads.html
>
> and I think the descriptions are easy enough to understand.

Actually, English is my first language, and I'm confused every time I  
see those functions. It's probably too late to change the name, but  
might I suggest changing the first sentence of callFromThread's  
docstring from:

     Call a function from within another (i.e. non-reactor) thread.

to:

     Cause a function to be executed asynchronously on the reactor  
thread.

This is the language used by SwingUtilities.invokeLater(), which I've  
always found comparatively clear.

http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/ 
SwingUtilities.html#invokeLater(java.lang.Runnable)

Regards,
Scott

-- 
Scott Lamb <http://www.slamb.org/>





From jml at mumak.net  Thu May 18 18:41:47 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 08:41:47 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446C4B11.3090904@libero.it>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
	<446C4B11.3090904@libero.it>
Message-ID: <d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Jonathan Lange ha scritto:
> > [...]
> >> Another question: there is a supported way to execute code before *all*
> >> TestCases run?
> >>
> >>
> >> Now I simply execute a synchronous function before defining test cases.
> >>
> >
> > No, there isn't.
> >
> > What are you trying to do?
> >
>
>
> Create some tables and functions on a PostgreSQL database.
>

In that case, here's what I'd do.  I'd create a couple of top-level
functions (maybe methods in a TestCase subclass -- who knows?), like
this:

def checkDB():
    # check the database is configured properly.
    # return False if it needs to be restored

def setUpDB():
    if not checkDB():
        # drop & create a bunch of tables

I'd then whack a call to setUpDB() in my setUp (_not_ setUpClass) for
every test case that needed to use the database.  That way, I'd know
that the data was always correct, and I wouldn't be reconfiguring the
database for every single test.

You could also refine the process so that setUpDB checks individual
tables rather than the whole of your schema.

Hope this helps,
jml



From andrea at cpushare.com  Thu May 18 19:42:40 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 01:42:40 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060518234240.GN21766@opteron.random>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
> 	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013137.html
> 	http://www.mail-archive.com/twisted-web%40twistedmatrix.com/msg00352.html
> 
> (sadly there are many more)

Within a few hours here one more that can be added to the list:

	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013158.html

The guy is kind enough not to blame me for not speaking english as my
first native language, but yet he's trying to teach me english by saying
that unittests are a "waste of time" 

---quote---
This from a man who believes that unit tests are a "waste of time".
---quote---

means the same as "I won't have to waste time to fix bugs".

In my minimal english language understananding, it was clear that with
"wasted time to fix bugs" I meant "the time between fixing the bug and
deploying the bugfix in production (or to the userbase)". I never said,
believed, thought or meant that writing an unit test is a waste of time
at large, as proven by the CPUShare-Twisted homepage that explicitly
says for the last 3 months "unittest are welcome". Why should they be
welcome if they are "a waste of time"?

But then the fact the guy puts words in my mouth that I never said in
order to make me look like an idiot is after all a minor thing compared
to the rest he says.

But let's ingore the usual politcally correct behaviour I receive from
some element of this community and let's stick to technical facts:

1) callFromThread should be renamed callFromReactor (no need to make up
long names when it actually means callFromReactor)
2) verifying a bugfix correctness doesn't require unittests in most
cases, anybody with a basic CS knowledge perfectly knows that
no matter how much testing you do you can never be guaranteed that the
code is correct by just testing it. Infact if the test is buggy too, it
may generate false positives. The same way you _have_ verify any unit-test
without using yet another unittest (or you enter an infinite recursion),
you can also verify that the bugfix is correct in the first place. The
idea that without an unittest isn't possible to verify the correctness
of a bugfix is totally wrong. An unit-test is sure useful, but it
shouldn't be mandatory for quick bugfixes. And the time that it would
take to write a new unittest for a new bug, before deploying the fix in
production, is definitely "wasted".
3) when I posted the ticket (again I received no answer with that one
because of the trac hidden feature) about POLLHUP/ERR/NVAL core reactor
troubles, I thought it wasn't strictly needed. But that was a few weeks ago
if I remember well. In the last few weeks things changed and now it
looks strictly needed and worst of all to be fully reliable I would need
it in the client too, and on the client I still allow my users to use
the standard twisted from twistedmatrix.com. I will probably have to
workaround it with a timer but it's still not a desiderable solution
since I will have to rearm the poll syscall for a little way in
unblocking mode which is theoretically unsafe.
4) his belief that the core reactor limitation of point 3 "can be
affected even without changing any external APIs" (btw, I guess with his
native english he actually means "fixed" and not "affected") implies the
external API won't change but I can guarantee you that the semantics
will change in a not-backwards-compatible way. I think the users should
know if you're going to make not-backwards compatible semantical changes
in the core reactor without changing the external API (i.e.
transport.pauseProducing and friends) so they can check their apps won't
break.
5) about the technical things that I said about nevow, axiom and epsilon
previously, I'm sorry if the divmod guys didn't like it, but if they're
not true, then they should not get angry and insult me, but they should
post benchmarks that invalidate my claims. They are very welcome to
start to invalidate my bold claim that for rendering web2+cheetah is an
order of magnitude faster (and in turn more scalable) than web+nevow.
6) about the performance of web2 vs apache/cherrypy (note: this is
different from point 5, this is _not_ web2+cheetah vs web+nevow), there
is no reason to worry about the channel of web2. No reason to change the
API. I already told foom and drier privately. The benchmark I've seen
posted to the list had a tiny size per page. Unfortunately the majority
of the cpu time is spent in the twisted core (i.e. basically the
reactor). I measured it. There's little or nothing you can do inside
web2 to speedup the per-connection overhead. Infact if you increase the
size of the page, the connections per second remain the same, only the
bandwidth increases. So effectively web2 has no immediate performance
issues because most pages are larger than a dozen bytes. When you do the
test on a normal page size, things are ok. Most of the overhead happens
in the handling of the socket outside web2, and it's very similar for
twisted.web and it's a fixed cost outside web2. Again I will be totally
happy to be proven wrong and see that the divmod folks can make web2 go
much faster with a tiny page size with a change of API inside
twisted/web2 directory and without touching the reactor code.



From corydodt at twistedmatrix.com  Thu May 18 19:57:39 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 18 May 2006 16:57:39 -0700
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
Message-ID: <446D09F3.1050004@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Indeed.  <http://twistedmatrix.com/trac/ticket/1726>!

Scott Lamb wrote:
> Actually, English is my first language, and I'm confused every time I
> see those functions. It's probably too late to change the name, but
> might I suggest changing the first sentence of callFromThread's
> docstring from:
> 
>     Call a function from within another (i.e. non-reactor) thread.
> 
> to:
> 
>     Cause a function to be executed asynchronously on the reactor thread.
> 
> This is the language used by SwingUtilities.invokeLater(), which I've
> always found comparatively clear.
> 
> http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable)
> 
> 
> Regards,
> Scott
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbQnz3A5SrXAiHQcRAnbCAKCOvvp/SDJjEoHuxCjHjPNq3aZfigCffFbA
yMD3vh9kAg7Y8cLOWqrG2CI=
=ngPU
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Thu May 18 20:04:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 02:04:56 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <20060519000456.GO21766@opteron.random>

By the way, if having a sense of humor would mean enjoying reading
doc/fun/Twisted.Quotes then I'd be proud to be humorless(tm).

http://twistedmatrix.com/trac/browser/trunk/doc/fun/Twisted.Quotes?rev=16852#L38



From mcmillen at cs.cmu.edu  Thu May 18 20:08:56 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Thu, 18 May 2006 20:08:56 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <446D0C98.7060404@cs.cmu.edu>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> And the time that it would
> take to write a new unittest for a new bug, before deploying the fix in
> production, is definitely "wasted".

I'm not a Twisted dev, but I do manage a couple open-source projects,
and would like to point out:

Participation in the open-source development process requires good
communication skills.  A unit test is an excellent way of communicating
to the main developers that you've thought the problem through clearly
and showed that your solution is a worthy one.  Open-source developers
are busy folk, so anything you can do to take their lives easier (even
if you think their rules are foolish) will speed up the inclusion of
your patch in the long run.  Remember that the majority of Twisted
developers are *volunteers*.

I highly doubt that the time it would take for you to write a unit test
would significantly impact *anyone* else who is using Twisted in production.

- - Colin

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbQyYXZxSS+Knk6ARAjB4AJ9VGy7lAb2v7qCnYz+JA4TNkXsDjACfX8pl
FRmxo5loTbl7gNmP788vKTk=
=bBaD
-----END PGP SIGNATURE-----



From johann.borck at densedata.com  Thu May 18 20:46:54 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 May 2006 02:46:54 +0200
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
Message-ID: <446D157E.6070806@densedata.com>

Scott Lamb wrote:

> On May 18, 2006, at 2:34 PM, glyph at divmod.com wrote:
>
>> I understand that English isn't your first language, and I don't 
>> blame you for that, but you can find the documentation for these 
>> APIs here:
>>
>> http://twistedmatrix.com/documents/current/api/
>> twisted.internet.interfaces.IReactorThreads.html
>>
>> and I think the descriptions are easy enough to understand.
>
>
> Actually, English is my first language, and I'm confused every time I 
> see those functions...
>
I'm not a native speaker, but given twisteds  concurrency model, how
could one assume reactor.callFromThread gets executed anywhere but in
the reactor? Nothing else makes sense, or put as a question, what else
does?  You call something  f r o m  a  thread, using a member-function
of the one and only reactor. The only way to get that wrong is to think
of the thread in callFromThread as the reactor-thread. The main loop of
an asynchronous app is way too special to name it just thread, thatswhy
its name is reactor, so the other way round it might be
callFrom/InReactor, which imo would make it by far less obvious that
this is an interface to threads.

Johann






From daedalus at eigenmagic.com  Thu May 18 20:41:35 2006
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 19 May 2006 10:41:35 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <1147999295.5461.37.camel@localhost.localdomain>

On Fri, 2006-05-19 at 01:42 +0200, Andrea Arcangeli wrote:

[snip. Not overly interested in the flamewar.]

> 2) verifying a bugfix correctness doesn't require unittests in most
> cases, anybody with a basic CS knowledge perfectly knows that
> no matter how much testing you do you can never be guaranteed that the
> code is correct by just testing it. Infact if the test is buggy too, it
> may generate false positives. The same way you _have_ verify any unit-test
> without using yet another unittest (or you enter an infinite recursion),
> you can also verify that the bugfix is correct in the first place. The
> idea that without an unittest isn't possible to verify the correctness
> of a bugfix is totally wrong. An unit-test is sure useful, but it
> shouldn't be mandatory for quick bugfixes. And the time that it would
> take to write a new unittest for a new bug, before deploying the fix in
> production, is definitely "wasted".

I don't believe you understand the purpose of unit testing. The approach
you appear to be advocating leads to unmaintainable, buggy code. The
unit test is developed to verify that the bug you believe exists does,
in fact, exist. Buggy code will cause the test to fail, while correct
code will cause the test to pass. If the behaviour you observe is
actually caused by something else, your test will pass, but the
behaviour will stay the same.

In this way, you can correctly identify the cause of the problem. Then
you can develop a patch. Importantly, once you have developed a patch,
you can verify that it does, in fact, fix the problem. If the code
passes your new unit test after you apply your patch, the patch is
correct. If the test still fails, your patch doesn't, in fact, fix the
problem. 

Additionally, when other changes are made in the future, the new unit
test can be used to verify that those changes (like your patch) don't
break existing code, ie: regression testing. I'm personally a big fan of
this feature of test suites.

Incidentally, those with slightly more CS knowledge know that it is
possible, though by no means easy, to build a system that is provably
correct. An investigation of the Z specification language may prove
enlightening. I think you mean that a test suite proves that the system
passes all the tests, not that it is bug free.

> 5) about the technical things that I said about nevow, axiom and epsilon
> previously, I'm sorry if the divmod guys didn't like it, but if they're
> not true, then they should not get angry and insult me, but they should
> post benchmarks that invalidate my claims. They are very welcome to
> start to invalidate my bold claim that for rendering web2+cheetah is an
> order of magnitude faster (and in turn more scalable) than web+nevow.

I think you have this backwards: those who make bold claims are the ones
with the burden of proof. Simply claiming that something is so does not
make it so. If you have benchmarks that demonstrate your claim, and
importantly, the method used to generate them, then by all means share
them with others. If your claims are true, this information will help in
fixing the problem. Fixing these bugs is what we all want, after all.

-- 
Justin Warren <daedalus at eigenmagic.com>




From terry at jon.es  Thu May 18 21:15:40 2006
From: terry at jon.es (Terry Jones)
Date: Fri, 19 May 2006 03:15:40 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: Your message at 17:34:54 on Thursday, 18 May 2006
References: <20060518192507.GL21766@opteron.random>
	<20060518213454.28682.834611068.divmod.quotient.2411@ohm>
Message-ID: <17517.7228.481164.207664@terry.jones.tc>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On Thu, 18 May 2006 21:25:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:

>> Overall using twisted for my project was a mistake.
glyph> And yet, and yet, and yet...

Right. That's the part that I find pretty odd. Andrea says that Twisted was
a mistake for him, and that it has one severe/major core design problem:

>>Overall using twisted for my project was a mistake. One major core design
>>problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to the poll
>>syscall unless POLLIN/POLLOUT are set too. This means that if I throttle
>>the I/O I can't notice anymore when a disconnect happens. But the severe
>>core design issues it has

But, apparently, Twisted isn't that bad after all. It still seems like it's
worth using. In fact, it's SO good why not FORK THE CODE just so we can
quickly apply a few patches and keep using it?

On top of generally being a pest, not being willing or making/having the
time to follow well-established project guidelines, etc., Andrea decides
not just to continue to use Twisted with a few of his own patches applied
(which would save plenty of time), while putting more energy into getting
his patches integrated, but, instead, to publicly announce a fork, make all
the effort to put it online, set up a mailing list, etc.  That all seems
quite deliberately anti-social and deliberately disruptive and destructive,
rather than constructive. Meanwhile I read that "CPUShare-Twisted will try
to avoid duplication" - why yes, that's an excellent (i.e. belated and
hypocritical) aim for a _forked_ project. It seems that just a little more
effort (and a whole lot less than forking, publicizing, putting it online,
running servers, svn, etc) could have avoided a hell of a lot more
duplication.

On top of this nastiness, repeatedly posting URLs of chat room discussion
between a bunch of developers is pretty silly, and, again, smacks of a
deliberately destructive attitude to a project which you are nevertheless
happy to run off with in a fork. It's not as though the Twisted developers
(of which I am not one) are trying to hide their IRC conversation, is it?
In this day and age it's nice to see some people playing around, even
swearing (oh the shock, the horror, the scandal), and nice to see them even
unashamedly include it in their distribution.

The most fruitful part of this thread, and what I think really makes it
worth otherwise-productive developers spending their time replying, is that
it's nice to see the reaction to Andrea's postings. As someone considering
using Twisted, I find it interesting and encouraging to read this thread -
it gives me increased confidence in Twisted, the people behind it, and the
project in general. So while the thread is a waste for some, there is real
value for others.

My impression is the following: Andrea, having not followed project
guidelines and rules because he doesn't have the time, having not been
treated like a coding God for whom others will naturally rush to do the
mundane tasks in order to receive his patches, and being unwilling to go
the extra few yards to get his patches (eventually) incorporated, is now
using his formerly precious time to go out of his way to undermine the
project.

Terry



From andrew-twisted at puzzling.org  Thu May 18 21:47:54 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 11:47:54 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060519014754.GH2204@steerpike.home.puzzling.org>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
[...]
> 
> Specifically I never said unittest are a waste of time, I only said that
> I don't have time to write unittests and that lack of unittests should
> not prevent valid bugfixes to be included and I think this is a very
> reasonable development approach. We can argue about features or huge
> changes, but I think valid bugfixes should not require unittests.

We, the people that have to *maintain* Twisted, think valid bugfixes require
unittests.  Our experience is that without them, bugs are doomed to reoccur and
reoccur between releases as other bugs are "fixed" that we may as well not
pretend to have fixed it in the first place.

It's the same principle as commenting code and following cosmetic coding
standards about whitespace.  The presence of the test doesn't directly make the
software more correct -- you could delete it and the code would still work
exactly as it did with the test on the filesystem, and similarly ugly code and
uncommented code isn't necessarily buggy code.  But these things help
maintainers applying patches and developers doing new work keep it correct, and
avoid wasting their time wondering why an apparently innocuous change does
something unexpected.  And avoid wasting our time fixing the same bugs over and
over again.

This is why we are so strict about requiring tests with bug fixes.  You might
not have time to write the tests, but *we* don't have the time to deal with new
code without tests, even if it is apparently more correct.

Thus it is part of our coding standard now (although it hasn't been written down
anywhere I'm aware of, you have certainly been told it is on many occasions).
If you cannot follow the coding standards for a project, then don't be offended
if that project doesn't apply your patches.

-Andrew.




From andrea at cpushare.com  Thu May 18 23:04:23 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 05:04:23 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <1147999295.5461.37.camel@localhost.localdomain>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
Message-ID: <20060519030423.GP21766@opteron.random>

On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> break existing code, ie: regression testing. I'm personally a big fan of
> this feature of test suites.

I'm a big fun of test suites as well. I only disagree with wasting time
delaying the integration of a valid bugfix just because the unit test
doesn't exist yet. I absolutely never said unit tests are a waste of
time. For the last months I've always said that "unit tests" are
_welcome_ at the top of the cpushare-twisted webpage.

> Incidentally, those with slightly more CS knowledge know that it is
> possible, though by no means easy, to build a system that is provably
> correct. An investigation of the Z specification language may prove
> enlightening. I think you mean that a test suite proves that the system
> passes all the tests, not that it is bug free.

What I mean is that a test suite cannot prove the code is bug free. Nor
that any bugfix is correct. If nothing else because the test suite may
be buggy too. This is obvious.

Clearly a test suite is welcome and can only help, but its mandatory
requirement for any change to the code sounds way excessive.

I perfectly know about formal demonstrations being possible too (I spoke
about those matters for a long time last year in a completely different
context) but they're not unit-tests (certainly not the ones you see in
the twisted reposistory), so I didn't mention this to avoid further
confusion. I doubt it's feasible to demonstrate Twisted bug free
formally (to back my guess I remind you Alan Cox quote saying twisted is
a 6m unauditable weirdness, I guess he was partly joking though).

	http://article.gmane.org/gmane.linux.kernel/327172

My current worries are the troubles with poll, I worry about the lack of
epoll, I worry about scaling in SMP with one thread per cpu. Those are
the things that should be discussed instead of receiving emails from
people about lack of unit tests for fixes that can be trivially verified
by reading the code.

> make it so. If you have benchmarks that demonstrate your claim, and
> importantly, the method used to generate them, then by all means share
> them with others. If your claims are true, this information will help in
> fixing the problem. Fixing these bugs is what we all want, after all.

About the benchmarks to make an example I posted some benchmarks here:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002425.html

I used the klive homepage for it. You can reproduce yourself downloading
it (all GPL):

	http://klive.cpushare.com/downloads/

Older versions uses web+nevow, newer uses web2+Cheetah (I don't remember
exactly the time of the switch but it's easy to find with some diff).

However here the kind of the answers I got:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002428.html

So I didn't post more benchmarks, nor I tried to produce an official
benchmark that is easier to run than to install klive locally. Also
note, quite a lot of the time of klive is spent in the database. So it's
one of the worst possible benchmarks for web1+nevow vs web2+cheetah
since only little time is spent for the rendering. I measured much
higher html delivery speedups in other pages that weren't asking the db
such cpu intensive queries.

If there is interest I can produce an official benchmark (that sounds
much more useful than unit-tests for every bugfix). However I guess
we'll have to follow the above advice and do it on the cpushare-twisted
list. Also note, if you've a better place than cpushare-twisted for
things that may not be welcome here, that's fine with me. I made up this
cpushare-twisted things to fit my needs, only because I didn't find any
other alternate place.



From dreid at dreid.org  Thu May 18 23:45:40 2006
From: dreid at dreid.org (David Reid)
Date: Thu, 18 May 2006 20:45:40 -0700
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>	<20060518192507.GL21766@opteron.random>	<20060518234240.GN21766@opteron.random>	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <446D3F64.30805@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Andrea Arcangeli wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
>> break existing code, ie: regression testing. I'm personally a big fan of
>> this feature of test suites.
> 
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. 

It has been my experience, that if a bug is "fixed", and there wasn't a
unit test for the bug, then a unit test won't get written until someone
breaks it again and spends potentially many man hours tracking down the
the bug again.  Unit tests don't just test that a bug is "fixed" they
help to document the bug, to make it easier to fix when it is broken
again (and a bug without a test will resurface) or if the original bug
fix turns out to not be complete or entirely correct.  And if your unit
tests aren't more easily verifiably correct than your code is, you're
either not writing very complex code or, to paraphrase jml, your unit
tests aren't unit-y enough.

It is also very difficult to judge the correctness of the code (and
therefor the bug 'fix') if we can not reproduce the bug.  It really
isn't enough that we take your word for it that there is a bug.  It's
not that we don't trust you in particular (well ok, some of us are
indifferent and have no opinion high or low about your skills as a
programmer or CS student, (well mostly it's just me)) but humans make
mistakes.  In such a case, a unit test can quickly indicate that there
is a bug, or that the submitter of the unit test has made a mistake.
You seem to be under the impression that submitting a unit test with
your patch means they will both be applied simultaneously and that we'll
take the green [OK] from trial to indicate that everything is fine and
dandy.  I assure you this isn't the case, we actually will make sure the
bug exists before we fix it.

- -David

- --
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (Darwin)

iD8DBQFEbT9krsrO6aeULcgRAp31AJ9Z12bQi9aUr2nV97Zqb8+TijSZvwCcCZhD
kT3p6umR6jK5Jy7/35q7etE=
=NBEJ
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Fri May 19 00:18:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 06:18:18 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <17517.7228.481164.207664@terry.jones.tc>
References: <20060518192507.GL21766@opteron.random>
	<20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<17517.7228.481164.207664@terry.jones.tc>
Message-ID: <20060519041818.GQ21766@opteron.random>

On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:
> But, apparently, Twisted isn't that bad after all. It still seems like it's
> worth using. In fact, it's SO good why not FORK THE CODE just so we can
> quickly apply a few patches and keep using it?

I've dozen thousand lines written in twisted. Moving away from it would
require a large rewrite. Maintaining my fixes locally for now is a lower
effort than rewriting the whole thing.

> deliberately destructive attitude to a project which you are nevertheless
> happy to run off with in a fork. It's not as though the Twisted developers

Happy to run it isn't really accurate. Simpler to keep running it even
if unreliable against malicious clients is more accurate.

> My impression is the following: Andrea, having not followed project
> guidelines and rules because he doesn't have the time, having not been
> treated like a coding God for whom others will naturally rush to do the
> mundane tasks in order to receive his patches, and being unwilling to go
> the extra few yards to get his patches (eventually) incorporated, is now
> using his formerly precious time to go out of his way to undermine the
> project.

My impression is that most of my fixes I did over the last years were
getting merged for some time. As far as I can tell things derailed when
I didn't like the fact that epsilon was becoming a dependency for nevow.
I was nevow user at the time. You think it's good that next time there
is a twisted bug you've to upgrade epsilon instead of upgrading twisted
in the first place?  Upgrading twisted would fix the bug for _all_ apps
and not only the apps shipped by divmod.

When I noticed a combination of weirdness (to mention one more, the new
axiom api that cannot work with real DBMS in the async way because it
doesn't return deferreds) I tried to find a way out of nevow (also
motivated by the fact formless was declared obsolete and so I had to
rewrite part of the code anyway) to avoid depending on divmod decisions
on the future of nevow. Thankfully web2 was already usable (even if
quite buggy) and I found tons of advantages by moving to cheetah and the
result was between 2 to 10 times faster depending on the webpage. The
code was reduced as well. I should have done that change regardless of
epsilon and formless infact. But unfortunately there is a post that
explicitly says that twisted-web is not a mailing list to discuss
cheetah integrations:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002371.html

So then I fail to see why twisted-web mailing list is on twistedmatrix
domain if only divmod projects like nevow should be discussed. Can you
provide a reasonable answer? I never asked cause I think I already knew
the answer.

While I acknowledge I wasn't the best bugfix submitter (and obviously
I'm no coding God either), I'm definitely not trying to undermine
twisted, quite the opposite I'd like twisted to evolve and integrated
with not-invented-here technologies, but I fail to see how it can evolve
and integrate with cheetah or/and django in this environment.

Note that Guido himself did an evaluation of the templating engines an
last time I read his blogs, he said he liked django most after comparing
it with Cheetah. So I don't think I deserve to be considered as an
heretic if I want to integration with other template engines (for
example cheetah would get an huge gain by learning to talk with
deferreds, I assume for django is similar). Cheetah for example could
handle deferreds transparently at zero runtime cost thanks to its
compilation stage (dunno about django).  It would be great to talk about
these things if only we were allowed. I created the cpushare-twisted
list as a place to talk about those things that seems not appropriate to
talk about here.

So long, but I hope this clarifies my impressions.



From andrea at cpushare.com  Fri May 19 00:26:10 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 06:26:10 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519014754.GH2204@steerpike.home.puzzling.org>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060519014754.GH2204@steerpike.home.puzzling.org>
Message-ID: <20060519042610.GR21766@opteron.random>

On Fri, May 19, 2006 at 11:47:54AM +1000, Andrew Bennetts wrote:
> not have time to write the tests, but *we* don't have the time to deal with new
> code without tests, even if it is apparently more correct.

This is the bit I definitely disagree with.

> If you cannot follow the coding standards for a project, then don't be offended
> if that project doesn't apply your patches.

I'm certainly not offended by it, but then I can't agree with a coding
standard that I think is wrong.

The thing I definitely agree with, is that having the unit test is
certainly better than not having it, infact I'm very grateful to people
like you that write unit tests, you're doing a great job.



From daedalus at eigenmagic.com  Fri May 19 00:26:33 2006
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 19 May 2006 14:26:33 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <1148012793.5461.99.camel@localhost.localdomain>

On Fri, 2006-05-19 at 05:04 +0200, Andrea Arcangeli wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> > break existing code, ie: regression testing. I'm personally a big fan of
> > this feature of test suites.
> 
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. I absolutely never said unit tests are a waste of
> time. For the last months I've always said that "unit tests" are
> _welcome_ at the top of the cpushare-twisted webpage.

Righto. How do you know it's a valid bugfix without a test? Personally,
I know that I make mistakes from time to time, so I think it's handy to
have something that will independantly verify if I've made one or not.
Many a time I've thought I knew what was broken only to find out it was
something completely different.

The twisted folks appear to disagree with you about the necessity of
writing a unit test as part of the bugfix integration process. Since
it's their code, they get to make the rules.

> > Incidentally, those with slightly more CS knowledge know that it is
> > possible, though by no means easy, to build a system that is provably
> > correct. An investigation of the Z specification language may prove
> > enlightening. I think you mean that a test suite proves that the system
> > passes all the tests, not that it is bug free.
> 
> What I mean is that a test suite cannot prove the code is bug free. Nor
> that any bugfix is correct. If nothing else because the test suite may
> be buggy too. This is obvious.

Obvious to you and me, perhaps, but there may be others who read this to
whom it isn't so obvious. Hopefully they find this thread helpful.

> Clearly a test suite is welcome and can only help, but its mandatory
> requirement for any change to the code sounds way excessive.

I guess we'll just have to agree to disagree on this point. I support
the mandatory unit test requirement.

> I perfectly know about formal demonstrations being possible too (I spoke
> about those matters for a long time last year in a completely different
> context) but they're not unit-tests (certainly not the ones you see in
> the twisted reposistory), so I didn't mention this to avoid further
> confusion. I doubt it's feasible to demonstrate Twisted bug free
> formally (to back my guess I remind you Alan Cox quote saying twisted is
> a 6m unauditable weirdness, I guess he was partly joking though).

My apologies for starting a thread derail. I was simply responding to
your assertion that nothing can be proven to be bug free. Rather petty
of me in hindsight.

> My current worries are the troubles with poll, I worry about the lack of
> epoll, I worry about scaling in SMP with one thread per cpu. Those are
> the things that should be discussed instead of receiving emails from
> people about lack of unit tests for fixes that can be trivially verified
> by reading the code.

We disagree on the 'trivially verified by reading code' part. It is my
opinion that only trivially simple code can be correctly verified simply
by reading it, particularly by so fallible a human as myself. Perhaps
your code reading skills are far superior to my own. Unit tests help me
to understand other's code. I have enough trouble understanding my own
code six months after writing it.

As you suggest, perhaps now is the time to move on to discussing other
issues?

[snip benchmarking bits]

Interesting reading. My apologies to everyone else on the list for
contributing to the... clutter.

-- 
Justin Warren <daedalus at eigenmagic.com>




From andrew-twisted at puzzling.org  Fri May 19 01:26:05 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 15:26:05 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060519052605.GI2204@steerpike.home.puzzling.org>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
[..]
> 
> But for all other patches I posted, they should be applied to
> everybody's own twisted copy. Including the "no it isn't", since the bug
> exists and needs fixing or I get exceptions.

Would you be so kind as to include details of these exceptions in your bug
reports on trac next time?

Having some extra detail would help us understand the circumstances of the
apparent bug -- and help someone with some free time construct an automated test
to replicate it.

Also, I haven't seen anyone else report your bugs, and at least one of your bug
reports has turned out to be quite wrong, so the extra information would help us
to determine if the bug is really ours or perhaps a misunderstanding of yours of
how to use Twisted (which in turn might be due to a documentation bug...).

While I'm on the subject, it would have been good if you'd attached the patches
directly in the bug reports in the first place, rather than pasting links that
have since broken.  Aside from being robust against you breaking your links, it
follows the normal conventions the developers expect: i.e. that patches are in
the bug report, where they're easy to find and automatically mailed to
subscribers and whatnot.  It saves us time, which gives us more time to actually
fix things.

In short: help us help you.  A bug report consisting of a single sentence in the
summary and a link to a patch isn't trying very hard to communicate with us
about an issue you have presumably invested time in investigating and
understanding.  Why not share that research with us, so we don't have to
duplicate your effort?

(An example: http://twistedmatrix.com/trac/ticket/1661 is a poor bug report).

I find it odd that you have so much time to debate our development methods on
this mailing list, but apparently no time to try to communicate details about
your bugs or discuss them.  Seeing as you are so confident in telling us how we
should spend our time, let me return the favour: you should spend more time
explaining your bug reports.  I'll note that a clearly written test case can be
an adequate explanation...

By the way, you can easily find your bugs in trac here:
   http://twistedmatrix.com/trac/search?q=andrea&ticket=on

-Andrew.




From jml at mumak.net  Fri May 19 01:30:31 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 15:30:31 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>

On 5/19/06, Andrea Arcangeli <andrea at cpushare.com> wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> > break existing code, ie: regression testing. I'm personally a big fan of
> > this feature of test suites.
>
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. I absolutely never said unit tests are a waste of
> time. For the last months I've always said that "unit tests" are
> _welcome_ at the top of the cpushare-twisted webpage.
>
> > Incidentally, those with slightly more CS knowledge know that it is
> > possible, though by no means easy, to build a system that is provably
> > correct. An investigation of the Z specification language may prove
> > enlightening. I think you mean that a test suite proves that the system
> > passes all the tests, not that it is bug free.
>
> What I mean is that a test suite cannot prove the code is bug free. Nor
> that any bugfix is correct. If nothing else because the test suite may
> be buggy too. This is obvious.
>
> Clearly a test suite is welcome and can only help, but its mandatory
> requirement for any change to the code sounds way excessive.
>

Andrea,

Your main objection is that requiring unit tests for bug fixes is
excessive.  I think it would be fair to say that you believe that
following such a requirement means wasting time.

Many people have defended this requirement.  They have said that writing a test:
- ensures the bug stays fixed
- communicates important information about decisions in the code
- provides a clear [and fast -- jml] way of reproducing the bug
- confirms the existence of the bug

You raised a concern that unit tests do not prove the absence of bugs.
 You have also stated that unit tests are desirable, but not
necessary.  I would like to respond to these points.

First, although unit tests do not *prove* the absence of a bug, they
provide strong evidence for its absence.  When fixing code, there must
be some check that the fix is correct.  The check generally takes one
of four forms: informal induction from the code; manual
experimentation; automatic experimentation (i.e. unit tests) and
formal verification.  The first provides unacceptably weak evidence.
The fourth proves the matter, but is too difficult to attempt for most
bugs.  This leaves the second and the third.  I would consider either
acceptable for demonstrating a bug's absence.

Second, without unit tests the amount of work required to maintain
code increases over time, and so they are necessary.  Each of the
advantages listed above has a corresponding disadvantage: the bug will
probably appear again; decisions in code lie undocumented; bugs cannot
be easily reproduced and so cannot be easily determined as either
fixed or unfixed.  Each disadvantage costs time. There is a finite
supply of time and an arbitrarily large supply of bugs.

If you wish to argue against our requirement for unit tests, then you
must persuade us either that the evidence they provide is not strong
enough to provide the listed benefits, or that the work in writing
unit tests is significantly greater than the work of not writing unit
tests.

Regards,
jml



From andrew-twisted at puzzling.org  Fri May 19 01:52:25 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 15:52:25 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
	<d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>
Message-ID: <20060519055225.GJ2204@steerpike.home.puzzling.org>

On Fri, May 19, 2006 at 03:30:31PM +1000, Jonathan Lange wrote:
[...]
> provide strong evidence for its absence.  When fixing code, there must
> be some check that the fix is correct.  The check generally takes one
> of four forms: informal induction from the code; manual

I think often a combination of checks are used: in particular, reading the code
and seeing that the fix "makes sense" in addition to an empiricial demonstration
of absence (exercising the fixed bug manually or by automated test) is very
common.  A fix is rarely accepted if it doesn't "make sense", even if there's an
automated test case that suggests it works.

[...]
> 
> If you wish to argue against our requirement for unit tests, then you
> must persuade us either that the evidence they provide is not strong
> enough to provide the listed benefits, or that the work in writing
> unit tests is significantly greater than the work of not writing unit
> tests.

I think the problem may be different perspectives.

For Andrea, he's apparently already manually verified that his patches solve the
problems he's seen, so that's good enough.  Ignoring for a moment the issue of
what it takes to get it merged into official Twisted, further effort is wasted.

For people maintaining Twisted, a once-off manual verification isn't enough, for
the reasons you give.

So for Andrea's fixes to make the leap from "good enough for him" to "good
enough to be merged into Twisted", they need more work: they need automated
tests.

-Andrew.




From jml at mumak.net  Fri May 19 03:12:19 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 17:12:19 +1000
Subject: [Twisted-Python] Twisted Sprint in Australia
In-Reply-To: <op.s9o9m80my3d107@localhost.localdomain>
References: <d06a5cd30604081942q3972c79apfde5efb6812da6a2@mail.gmail.com>
	<20060409041914.GA5338@sourdust.home.puzzling.org>
	<d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
	<op.s9o9m80my3d107@localhost.localdomain>
Message-ID: <d06a5cd30605190012t3b77f4bat935c52ce0ded4879@mail.gmail.com>

On 5/18/06, Eric Mangold <teratorn at twistedmatrix.com> wrote:
> Cool. I should be able to make it. Will be staying in Sydney for the
> nights of June 3-6. I'm trying to sort out accomodations right now... is
> anyone staying at a hotel, or have other accomodations that could be
> shared?
>

It might also be a good idea to post accomodation thoughts on the wiki
page: http://www.twistedmatrix.com/wiki/SydneySprint

jml



From jml at mumak.net  Fri May 19 03:14:21 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 17:14:21 +1000
Subject: [Twisted-Python] June Sprint
Message-ID: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>

Hello!

There's a sprint on June 3-4 in Sydney, Australia.  But you already knew that.

What you don't know is that now there is a wiki page for you to put
your name and ideas for the sprint!
Examine http://twistedmatrix.com/trac/wiki/SydneySprint

Look forward to seeing y'all there.

jml



From schneider at gl-systemhaus.de  Fri May 19 03:48:28 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Fri, 19 May 2006 09:48:28 +0200
Subject: [Twisted-Python] Binding a twisted application to only one interface
Message-ID: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>

Hi all,

I have written a service as shown below. Now, I'd like this service  
to only be available on one specific network interface but have been  
unable to find any documentation on how to achieve that.

Any hints or pointers would be very welcome.

chris

from twisted.application import service
from jobsservice import JobsService

from twisted.internet import reactor

class JobsService(internet.TCPServer):

     def __init__(self):
         internet.TCPServer.__init__(self, 8000, JobsFactory(self))

application = service.Application("Jobs")
serviceCollection = service.IServiceCollection(application)
jobsService = JobsService()
jobsService.setServiceParent(serviceCollection)




From nico at tekNico.net  Fri May 19 04:44:47 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 19 May 2006 10:44:47 +0200
Subject: [Twisted-Python] Re: Binding a twisted application to only one
	interface
In-Reply-To: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>
References: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>
Message-ID: <446D857F.3000202@tekNico.net>

Christian Schneider wrote:
> Hi all,
> 
> I have written a service as shown below. Now, I'd like this service to
> only be available on one specific network interface but have been unable
> to find any documentation on how to achieve that.

See this thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-May/013092.html

-- 
Nicola Larosa - http://www.tekNico.net/

If you're in a job that feels safe, you are not going to get rich,
because if there is no danger there is almost certainly no leverage.
 -- Paul Graham, May 2004





From WTD008 at motorola.com  Fri May 19 05:38:52 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 10:38:52 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>

Hi,
 
I'm looking for a solution to make a server that handle many tcp
connections and where I can send different information to each one.
I read that twisted is maybe a good way to do this.
 
Can you confirm that it's a better way to learn twisted than to try with
Socket Server ?
And if maybe you have a sample to help me to understand the basic
thing... thks
 
 
Thanks a lot for your help,
 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060519/1a8ef473/attachment.htm 

From WTD008 at motorola.com  Fri May 19 05:55:17 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 10:55:17 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>

I will maybe be give more information.
What I wanted to do for the moment is to begin, a server and two
clients.
 
Each client open a connection with the server and wait.
The server, send "client1" to the client 1 waiting a random time between
each sending
  and the same thing with the client 2.
 
The final aim is to send different information to each client. The
information will be given by a other processus via a pipe or something
like this.
 
Hope it's more clear,
 
Thomas  

________________________________

From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Deillon
Thomas-WTD008
Sent: 19 May 2006 10:39
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] A tcp server that handles many connections


Hi,
 
I'm looking for a solution to make a server that handle many tcp
connections and where I can send different information to each one.
I read that twisted is maybe a good way to do this.
 
Can you confirm that it's a better way to learn twisted than to try with
Socket Server ?
And if maybe you have a sample to help me to understand the basic
thing... thks
 
 
Thanks a lot for your help,
 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060519/68045592/attachment.htm 

From maciejka at tiger.com.pl  Thu May 18 20:56:55 2006
From: maciejka at tiger.com.pl (Maciek Kaminski)
Date: Fri, 19 May 2006 02:56:55 +0200
Subject: [Twisted-Python] status of twisted flow
Message-ID: <446D17D7.9080302@tiger.com.pl>

What is the status of Twisted flow project? Project page 
(http://twistedmatrix.com/projects/flow/) states that it is unmaintained 
. Is it dead or alive?

Maciej Kaminski




From teratorn at twistedmatrix.com  Fri May 19 06:23:12 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Fri, 19 May 2006 20:23:12 +1000
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>
Message-ID: <op.s9sm4y1ly3d107@localhost.localdomain>

On Fri, 19 May 2006 19:38:52 +1000, Deillon Thomas-WTD008  
<WTD008 at motorola.com> wrote:

> Hi,
> I'm looking for a solution to make a server that handle many tcp
> connections and where I can send different information to each one.
> I read that twisted is maybe a good way to do this.

Twisted could very well be the best choice, but then there aren't too many  
details to judge from here.

> Can you confirm that it's a better way to learn twisted than to try with
> Socket Server ?

It's almost surely better, yes.

> And if maybe you have a sample to help me to understand the basic
> thing... thks
> Thanks a lot for your help,
> Thomas

There are quite a few Developer Guides and code examples in the official  
documentation. Let use know if you have trouble finding the right ones.

-Eric





From johann.borck at densedata.com  Fri May 19 06:58:34 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 May 2006 12:58:34 +0200
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
Message-ID: <446DA4DA.2030004@densedata.com>

Deillon Thomas-WTD008 wrote:

> I will maybe be give more information.
> What I wanted to do for the moment is to begin, a server and two clients.
>  
> Each client open a connection with the server and wait.
> The server, send "client1" to the client 1 waiting a random
> time between each sending
>   and the same thing with the client 2.
>  
> The final aim is to send different information to each client. The
> information will be given by a other processus via a pipe or something
> like this.
>
First of all, yes, twisted is what you're looking for,
Here the basics are explained,  it really helps a lot to read them
carefully, many questions you might and will have are explained along
with the underlying concepts of event-based/async programming, which are
important to understand to use twisted correctly:
http://twistedmatrix.com/projects/core/documentation/howto/index.html

you find examples here, and there are many in the download/checkout itself:
http://twistedmatrix.com/projects/core/documentation/examples/index.html

and if you're looking for "real world" apps using twisted... uups can't
find that page right now (does it still exist?) ahem, look at divmod.org :)

Johann



From andrew-twisted at puzzling.org  Fri May 19 09:07:32 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 23:07:32 +1000
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <446DA4DA.2030004@densedata.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
	<446DA4DA.2030004@densedata.com>
Message-ID: <20060519130732.GL2204@steerpike.home.puzzling.org>

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups can't
> find that page right now (does it still exist?) ahem, look at divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.




From WTD008 at motorola.com  Fri May 19 09:15:31 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 14:15:31 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE9890@zuk35exm62.ds.mot.com>

Ok, thanks to both of you

Thomas 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew
Bennetts
Sent: 19 May 2006 14:08
To: Twisted general discussion
Subject: Re: [Twisted-Python] A tcp server that handles many connections

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups 
> can't find that page right now (does it still exist?) ahem, look at 
> divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From WTD008 at motorola.com  Fri May 19 09:28:04 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 14:28:04 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE98B1@zuk35exm62.ds.mot.com>

I just have a general question using python.
It is possible that a python script will be a XmlRPC server on the port
5555 and at the same time a tcp-server on the port 6666 ?
If yes.
What I have to do to do a such thing ?

Thanks,

Thomas  

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Deillon
Thomas-WTD008
Sent: 19 May 2006 14:16
To: Twisted general discussion
Subject: RE: [Twisted-Python] A tcp server that handles many connections

Ok, thanks to both of you

Thomas 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew
Bennetts
Sent: 19 May 2006 14:08
To: Twisted general discussion
Subject: Re: [Twisted-Python] A tcp server that handles many connections

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups 
> can't find that page right now (does it still exist?) ahem, look at 
> divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From stephane_brault at yahoo.fr  Fri May 19 09:33:40 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Fri, 19 May 2006 13:33:40 +0000 (GMT)
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
Message-ID: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>

Hi,
 I have to call a web service then process the answer, according to the answer I may have to call the service again.
 The traditional way to go would be :
 condition = 1
 while condition:
     message = callWebService()
     condition = processMessage(message)
 
 Here is what I do :
 def function():
     
     def myCalback(message):
         condition = processMessage(message)
         if condition:
             deferred = callWebService()
              deferred.addCallback(myCallback)
 
     deferred = callWebService()
     deferred.addCallback(myCallback)
 
 I was wondering if it was the way to go or if there was a better way, since I'm not quite sure about the impact of calling new deffered within a callback.
 
 Thanks,
 
 St?phane





From exarkun at divmod.com  Fri May 19 10:09:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 May 2006 10:09:01 -0400
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE98B1@zuk35exm62.ds.mot.com>
Message-ID: <20060519140901.28682.378551705.divmod.quotient.2800@ohm>

On Fri, 19 May 2006 14:28:04 +0100, Deillon Thomas-WTD008 <wtd008 at motorola.com> wrote:
>I just have a general question using python.
>It is possible that a python script will be a XmlRPC server on the port
>5555 and at the same time a tcp-server on the port 6666 ?
>If yes.
>What I have to do to do a such thing ?
>

Actually this isn't a general Python question.  Here's how you do it with Twisted:


    reactor.listenTCP(5555, XMLRPCFactory)
    reactor.listenTCP(6666, SomeOtherFactory)

You may want to look at the writing servers document:

    http://twistedmatrix.com/projects/core/documentation/howto/servers.html

This is linked from one of the documentation pages on Twisted's website:

    http://twistedmatrix.com/projects/core/documentation/howto/index.html

Jean-Paul



From therve at free.fr  Fri May 19 14:26:03 2006
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Fri, 19 May 2006 20:26:03 +0200
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
In-Reply-To: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>
References: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>
Message-ID: <1148063163.446e0dbb2c5b9@imp1-g19.free.fr>

Selon St??phane Brault <stephane_brault at yahoo.fr>:

> Hi,
>  I have to call a web service then process the answer, according to the
> answer I may have to call the service again.
>  The traditional way to go would be :
>  condition = 1
>  while condition:
>      message = callWebService()
>      condition = processMessage(message)
>
>  Here is what I do :
>  def function():
>
>      def myCalback(message):
>          condition = processMessage(message)
>          if condition:
>              deferred = callWebService()
>               deferred.addCallback(myCallback)
>
>      deferred = callWebService()
>      deferred.addCallback(myCallback)
>
>  I was wondering if it was the way to go or if there was a better way, since
> I'm not quite sure about the impact of calling new deffered within a
> callback.

You may have a recursion problem with this kind of code (I'm not quite sure when
it happens but it does). One good way is to use deferredGenerator:

# Not tested
def function():
    condition = True
    while condition:
        wfd =  defer.waitForDeferred(callWebService())
        yield wfd
        condition = wfd.getResult()
function = defer.deferredGenerator(function)

--
Thomas



From manlio_perillo at libero.it  Fri May 19 15:09:52 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 19 May 2006 17:09:52 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>
References: <446B477A.8000904@libero.it>
	<446C1E09.5050203@libero.it>	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>	<446C4B11.3090904@libero.it>
	<d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>
Message-ID: <446E1800.2020607@libero.it>

Jonathan Lange ha scritto:
> On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>> Jonathan Lange ha scritto:
>> > [...]
>> >> Another question: there is a supported way to execute code before
>> *all*
>> >> TestCases run?

> [...]

> In that case, here's what I'd do.  I'd create a couple of top-level
> functions (maybe methods in a TestCase subclass -- who knows?), like
> this:
> 

Ok, I already use a common subclass.

> def checkDB():
>    # check the database is configured properly.
>    # return False if it needs to be restored
> 
> def setUpDB():
>    if not checkDB():
>        # drop & create a bunch of tables
> 
> I'd then whack a call to setUpDB() in my setUp (_not_ setUpClass) for
> every test case that needed to use the database.  That way, I'd know
> that the data was always correct, and I wouldn't be reconfiguring the
> database for every single test.
> 

Thanks, good idea.

For now, however, I simply use os.system and os.popen with psgl.



Regards  Manlio Perillo



From glyph at divmod.com  Sat May 20 02:26:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 20 May 2006 02:26:42 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: 0
Message-ID: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>

Well, I can't get to sleep, so here I go again...

On Fri, 19 May 2006 06:18:18 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:

>> My impression is the following: Andrea, having not followed project
>> guidelines and rules because he doesn't have the time, having not been
>> treated like a coding God for whom others will naturally rush to do the
>> mundane tasks in order to receive his patches, and being unwilling to go
>> the extra few yards to get his patches (eventually) incorporated, is now
>> using his formerly precious time to go out of his way to undermine the
>> project.

Thank you, Terry!  It's nice to have a vote of confidence from the larger community.  This is my impression exactly, and it is why I have become so rude.  I write these replies for other people's benefit (they do nothing for me but make my blood pressure go up) and I'm happy to see they've been useful to someone.

>My impression is that most of my fixes I did over the last years were
>getting merged for some time.  As far as I can tell things derailed when
>I didn't like the fact that epsilon was becoming a dependency for nevow.

Andrea, things derailed when you went from simply submitting mostly-useful fixes without tests to agressively badmouthing our developers, our quality-control process and a company (Divmod) that contributes heavily to Twisted and employs both the Twisted project lead (myself) and its most active maintainer (JP Calderone).  The epsilon thing was a coincidence of timing, and as a matter of fact, I ultimately agreed with you on that particular point.

((An aside on the point of Divmod - yes, it is where I work, and yes, I am *very* offended at the characterization of the company as a bunch of control freaks trying to destroy Twisted.  There are lots of companies that deserve scorn from the open source and free software communities, but Divmod not one of them.  Divmod is an _impeccably_ good citizen of the open source world.  We consider credibility with the technical people who make smart decisions like the use of Twisted extremely important.  So important, in fact, that we have made a number of decisions to preserve that credibility, to fold things back upstream into the community, at considerable pain and expense to ourselves.  Divmod has contributed more to Twisted than any other company at this point, period, and although I'm confident that is the right decision in the long run, we have had very few opportunities to reap any benefits from this good citizenship yet.))

Not only did you disregard and insult our quality control process, it was explicitly instituted to avoid applying patches like the callFromThread 'fix' which you insisted we apply.  From my perspective, you seem to be actively trying to sabotage Twisted.  (Your attitude certainly implies that you are.)  For all we know, all your other patches are similarly broken and there is nothing to demonstrate otherwise.  You say you have tracebacks?  Produce those tracebacks in the context of a unit test, and I would be happy to discuss them.

We're all generally open to constructive criticism - but not only did your comments not provide a realistic direction for improvement, they're not helpful even as flames because they are not based on truth.  Below are some more repetitions of the same corrections I've been offering you for the last year.  I see that you finally figured out that your callFromThread patch was buggy (after having been told a mere 5 times by 3 different people) so perhaps you will eventually figure the other stuff out and stop posting those, too.

Given that everyone I've spoken with about your posts here is under the impression that you are trying to cause trouble, maybe you could take a step back and reconsider your tone.  I am slow to anger and quick to forgive, but if you are really interested in participating in the community in a productive and useful way, you are going to have to stop posting insulting lies 3 or 4 times a day.

>I was nevow user at the time. You think it's good that next time there
>is a twisted bug you've to upgrade epsilon instead of upgrading twisted
>in the first place?  Upgrading twisted would fix the bug for _all_ apps
>and not only the apps shipped by divmod.

For those of you just tuning in, Epsilon is a Divmod utility package which includes certain things which are destined for inclusion in Twisted but which are still stabilizing, may not be a good idea, or depend on python features too recent for Twisted to use, such as Python 2.4.  In particular, Andrea is referring to the fact that it may include "hot fixes" for Twisted functionality that Divmod products will be broken without, but which has not yet made it into a public release of Twisted.

(The particular fix that Andrea was concerned might have been included in Epsilon and depended upon by Nevow was never actually necessary, and therefore not made.  Epsilon was never actually a dependency of Nevow.  Nevertheless, he continues to complain about it.)

This practice was instituted so that Divmod projects could both work with older versions of Twisted (so that Divmod products may be installed on stable distributions with system-installed Twisted such as Debian or Ubuntu) and be released before parallel versions of Twisted were ready for release, as Twisted has a larger community and a more rigorous, slower, release process.

Here is the process for including a "hot fix" in epsilon.  I am not airing my opinion about how things should work here, I am stating a fact, as I am responsible for setting this policy, and there are only three hotfixes yet made in Epsilon and they have all followed this exact procedure:

  - Bug gets fixed **in Twisted SVN HEAD**, not in Epsilon.
  - It is submitted, tested, reviewed, merged to trunk.
  - Twisted release process begins.
  - Twisted fix gets copied into Epsilon.
  - Divmod projects are released with Epsilon, including the fix.
  - Twisted is released, with the fix.

If you are interested, see the revision log here:

    http://divmod.org/trac/log/trunk/Epsilon/epsilon/hotfixes

and compare with the various Twisted revisions / commit times that these fixes were applied in.

These fixes will ALWAYS be contributed to Twisted.  They are made in Twisted FIRST.  The amount of time between the Epsilon release and the Twisted release will be kept to an absolute minimum.  It is absolutely, completely untrue that we would ever deliberately make fixes to Twisted functionality and not contribute them back to the project.

>When I noticed a combination of weirdness (to mention one more, the new
>axiom api that cannot work with real DBMS in the async way because it
>doesn't return deferreds)

Another good way to convince people that you are not deliberately trying to cause trouble is to stop bringing up unrelated disagreements.  The other things you are trying to talk about here have nothing to do with Axiom, and showcasing your ignorance in this fashion doesn't do much for your case.  But, in the hopes of bringing some useful technical insight to this thread, I will correct your misconception here yet again.

"real" RDBMSes have almost universally blocking interfaces; yet Twisted manages to make them "async" with adbapi.  A similar simple threadpooling system could easily make Axiom "real"-RDBMS friendly; in fact, there are reasons it may be desirable for some application architectures even with SQLite.  Per-thread isolation of store caches is fine; there is no reason the Store object has to be the same everywhere.

This is another thing that I hope someone will contract Divmod to do, since Divmod as such doesn't need it, but it is abstractly interesting to me.  However, as it turns out, the people using Axiom (and there are several) are mostly happy with its synchronous mode of operation and it turns out to be quite fast.  Scaling is achieved differently than with other RDBMS systems, but that is a topic too complex to cover here.

>So then I fail to see why twisted-web mailing list is on twistedmatrix
>domain if only divmod projects like nevow should be discussed. Can you
>provide a reasonable answer? I never asked cause I think I already knew
>the answer.

Nevow is the next version of *twisted*.web.woven, developed outside Twisted due to explicit community displeasure at the disparity between woven's breakneck and chaotic development pace and twisted.web's relatively sedate one.  It was initially created by Donovan Preston, the same developer who wrote Woven, who was employed by Divmod at the time.  It was done on Divmod time and for Divmod projects, because Woven was not working well enough.  It is a Twisted-based technology through and through, and only works with twisted web on purpose.

Cheetah is a template engine that can be used with multiple web servers and has nothing to do with Twisted.  If someone wants to start a Twisted/Cheetah integration project and actually release some code, maybe people wouldn't mind so much if you talked about it.  However, cheetah itself is not a "twisted web" technology, even if it's possible to use them together.  (You can run PHP or Perl as a CGI under Twisted, but postings about PHP and Perl would similarly be off-topic.)

>While I acknowledge I wasn't the best bugfix submitter (and obviously
>I'm no coding God either), I'm definitely not trying to undermine
>twisted, quite the opposite I'd like twisted to evolve and integrated
>with not-invented-here technologies, but I fail to see how it can evolve
>and integrate with cheetah or/and django in this environment.

You'll notice that certain NIH technologies get a much better reception.  For example, the recently announced sAsync <http://foss.eepatents.com/sAsync/> "competes" with Axiom, but nobody bothered Ed when he posted about it here.  I'm not going to use SQLAlchemy, I don't particularly like it: but sAsync seems like a neat idea and I'm perfectly happy to see Twisted integrating with lots and lots of different third-party libraries that I am, personally, not interested in.  In fact, we all love Ed, because he has promised to write some docs!  (Hi Ed!)

Here is an example of how to begin a release announcement.  Ed's announcement began like this:

"sAsync offers asynchronous access to the outstanding SQLAlchemy package by Michael Bayer."

Notice how it begins with a compliment?  Try that next time.

>It would be great to talk about
>these things if only we were allowed. I created the cpushare-twisted
>list as a place to talk about those things that seems not appropriate to
>talk about here.

I'm sure that the bustling cpushare-twisted and web2/cheetah integration community appreciates your attention a lot more than this one.  Perhaps you should go talk to them instead -- or maybe, as you keep saying you must do, write some code rather than trolling mailing lists.  I seriously think you could have written comprehensive unit tests for all your patches in the time it's taken to write all these posts.



From therve at free.fr  Sat May 20 06:21:05 2006
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Sat, 20 May 2006 12:21:05 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
Message-ID: <1148120465.446eed910b085@imp8-g19.free.fr>

Selon glyph at divmod.com:

> Well, I can't get to sleep, so here I go again...
>
> On Fri, 19 May 2006 06:18:18 +0200, Andrea Arcangeli <andrea at cpushare.com>
> wrote:
> >On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:
>
> >> My impression is the following: Andrea, having not followed project
> >> guidelines and rules because he doesn't have the time, having not been
> >> treated like a coding God for whom others will naturally rush to do the
> >> mundane tasks in order to receive his patches, and being unwilling to go
> >> the extra few yards to get his patches (eventually) incorporated, is now
> >> using his formerly precious time to go out of his way to undermine the
> >> project.
>
> Thank you, Terry!  It's nice to have a vote of confidence from the larger
> community.  This is my impression exactly, and it is why I have become so
> rude.  I write these replies for other people's benefit (they do nothing for
> me but make my blood pressure go up) and I'm happy to see they've been useful
> to someone.

Glyph, I hope you realize most of the community didn't express on this point
because it was really not worthy. twisted-python readers already realized that
Mr  Arcangeli is only posting here to make us waste bandwith. Nobody use his
pseudo fork so he needs to make some noise from time to time.

As a Twisted user, I give all my support to current developpement policy, even
if it could slow down the pace a bit (which is not proved on the long run).

And, of course, long life to Divmod :).

--
Thomas




From p.mayers at imperial.ac.uk  Sat May 20 07:44:25 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 20 May 2006 12:44:25 +0100
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <1148120465.446eed910b085@imp8-g19.free.fr>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
	<1148120465.446eed910b085@imp8-g19.free.fr>
Message-ID: <446F0119.6040609@imperial.ac.uk>

Thomas Herv? wrote:
>> Thank you, Terry!  It's nice to have a vote of confidence from the larger
>> community.  This is my impression exactly, and it is why I have become so
>> rude.  I write these replies for other people's benefit (they do nothing for
>> me but make my blood pressure go up) and I'm happy to see they've been useful
>> to someone.
> 
> Glyph, I hope you realize most of the community didn't express on this point
> because it was really not worthy. twisted-python readers already realized that
> Mr  Arcangeli is only posting here to make us waste bandwith. Nobody use his
> pseudo fork so he needs to make some noise from time to time.
> 
> As a Twisted user, I give all my support to current developpement policy, even
> if it could slow down the pace a bit (which is not proved on the long run).
> 
> And, of course, long life to Divmod :).
> 

Agreed. Frankly, I think you've been amazingly patient. And I certainly 
wholeheartedly back the current development policy, warts and all. To 
paraphrase Winston Churchill:

Many forms of Development have been tried, and will be tried in this 
world of sin and woe. No one pretends that test-driven development is 
perfect or all-wise. Indeed, it has been said that TDD is the worst form 
of development except all those other forms that have been tried from 
time to time.



From slamb at slamb.org  Sat May 20 14:10:54 2006
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 20 May 2006 11:10:54 -0700
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
Message-ID: <D2D7F7F1-75AB-4834-A987-E45B86067D25@slamb.org>

On May 19, 2006, at 11:26 PM, glyph at divmod.com wrote:
> Thank you, Terry!  It's nice to have a vote of confidence from the  
> larger community.  This is my impression exactly, and it is why I  
> have become so rude.  I write these replies for other people's  
> benefit (they do nothing for me but make my blood pressure go up)  
> and I'm happy to see they've been useful to someone.

Let it go. He's a jerk, and everyone sees that. I find Twisted's high  
standards hard to match (unit testing can be hard! my own projects  
are at 50% line coverage at best) but it's pretty obvious he'd rather  
fling unfounded allegations and insult the people who built the tools  
he's using than even try.

In these situations, I tend to say "screw this, I'm going biking".  
When I come back, I'm a lot happier.

-- 
Scott Lamb <http://www.slamb.org/>





From msoulier at digitaltorque.ca  Sat May 20 18:28:38 2006
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Sat, 20 May 2006 18:28:38 -0400
Subject: [Twisted-Python] implementing a tftp protocol
Message-ID: <fb6605670605201528k74f2f38fy5af187a513ee8a6@mail.gmail.com>

Hi there,

I'm new to twisted, and I'm trying to implement a tftp protocol, since
I don't see one in the API and I need one.

I'm finding the docs on UDP clients to be _very_ sparse. So far it
seems that I need to use the reactor.listenUDP() method and then call
transport.connect() somehow. I was going to use the
protocol.ClientFactory as the TFTPFactory superclass. For the protocol
I assume that DatagramProtocol would be an appropriate parent.

I'm not sure of what the override exactly though, to drop in the right
bits to request a file from a remote tftp server. Could someone point
me in the right direction?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein



From exarkun at twistedmatrix.com  Sun May 21 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 May 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1148187902.19.2145154836@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-14 through 2006-05-21
Bugs opened: 13    Bugs closed: 18  Total open bugs: 605 (-5)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +0  |Highest:  -5          |Core:     +0           
|Enhancement:  -4  |Normal:   +1          |Mail:     -1           
|Task:         +0                         |Trial:    +1           
                                          |Vfs:      -1           
                                          |Web2:     +0           
                                          |Website:  -1           
                                          |Words:    -2           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1717] Test failures on win32 (test_process.UtilTestCase) (opened by teratorn) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1717

[#1718] Release Twisted core 2.3.0 (opened by radix) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1718

[#1722] Make t.p.policies.TimeoutMixin and t.i.base.DelayedCall more unittest-friendly (opened by exarkun) (CLOSED, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1722

                    ===== Normal =====
[#1716] iocpreactor should use WSA functions for sockets (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1716

[#1719] Review pyflakes warnings for Trial (opened by jml) (CLOSED, fixed)
    task            trial      http://twistedmatrix.com/trac/ticket/1719

[#1720] Trial's display of setUp errors is wonky (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/1720

[#1721] Document DelayedCall because docstrings for maintainers are nice (opened by radix) (CLOSED, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1721

[#1723] twisted.web2.http_headers.parseWWWAuthenticate doesn't work without a challenge. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1723

[#1724] twisted.web2.auth doesn't address multi-step authentication (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1724

[#1725] selectreactor 'winsock error' (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1725

[#1726] Enhanced docstring for callFromThread (opened by moonfallen)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1726

[#1727] custom log observer support for twistd (opened by harshaw) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1727

[#1728] ThrottlingProtocol incorrectly calls stopReading and startReading on its transport (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1728



Closed Bugs
______________________
                    ===== Highest =====
[#1479] make setup.py and admin/sumo-setup.py share code (opened by radix, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1479

[#1517] /bugs/issue# should redirect to /trac/ticket/# (opened by dreid, closed by exarkun, fixed)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1517

[#1655] typos (group<->user) in twisted.words.service (opened by j2a, closed by exarkun, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1655

[#1718] Release Twisted core 2.3.0 (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1718

[#1717] Test failures on win32 (test_process.UtilTestCase) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1717

[#1686] Better XML Stanza and error support (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1686

[#1722] Make t.p.policies.TimeoutMixin and t.i.base.DelayedCall more unittest-friendly (opened by exarkun, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1722

[#1701] Most twisted.mail.pop3.IMailbox should be allowed to return Deferreds (opened by exarkun, closed by exarkun, fixed)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/1701

                    ===== Normal =====
[#1705] Test failure on win32 (FilePathTestCase.testGetAndSet) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1705

[#1563] trial --testmodule should be usable without causing test methods to run repeatedly (opened by exarkun, closed by jml, )
    defect          trial      http://twistedmatrix.com/trac/ticket/1563

[#1719] Review pyflakes warnings for Trial (opened by jml, closed by jml, fixed)
    task            trial      http://twistedmatrix.com/trac/ticket/1719

[#1661] KeyError exception in twisted.internet.process.Process.childConnectionLost (opened by andrea, closed by glyph, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1661

[#1436] add getCookie/setCookie to web2.http_headers.Headers (opened by andrea, closed by glyph, invalid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1436

[#1475] Basic and Digest HTTP-Auth Implementation. (opened by dreid, closed by dreid, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1475

[#1721] Document DelayedCall because docstrings for maintainers are nice (opened by radix, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1721

[#1727] custom log observer support for twistd (opened by harshaw, closed by harshaw, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1727

[#1728] ThrottlingProtocol incorrectly calls stopReading and startReading on its transport (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1728

[#1673] twisted.vfs.adapters.sftp doesn't translate VFSErrors consistently and completely (opened by spiv, closed by spiv, fixed)
    defect          vfs        http://twistedmatrix.com/trac/ticket/1673





From jml at mumak.net  Sun May 21 02:22:13 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 May 2006 16:22:13 +1000
Subject: [Twisted-Python] Bugs, bugs, bugs
Message-ID: <d06a5cd30605202322v3ad5e74cs21b3f57516884244@mail.gmail.com>

Hello,

In the interests of household cleanliness[1], I propose we have
schedule a weekend of bug squashing.  We currently have six hundred
and five active tickets.

Apart from scheduling a time, and maybe creating a wiki page, I'm not
really sure how these things work.  I suggest June 3-4 as a good time,
as that will match with the sprint in Sydney.

What do you reckon?

jml

[1] http://www.advogato.org/article/215.html



From tv at twistedmatrix.com  Sun May 21 02:45:15 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 21 May 2006 09:45:15 +0300
Subject: [Twisted-Python] lore
In-Reply-To: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
Message-ID: <44700C7B.9070306@twistedmatrix.com>

James Y Knight wrote:
> I disagree with that conclusion, but have given up arguing the point. If
> there are others who support my view, now would be a good time to speak
> up. You of course get extra bonus points if you've actually contributed
> to documentation in twisted.

No bonus points for me from contributing much to documentation, but
ReST >> Lore. Both because of how nice it is to write and because it's
a format with a user base bigger than the number of people who are
working on twisted.



From jml at mumak.net  Sun May 21 03:09:06 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 May 2006 17:09:06 +1000
Subject: [Twisted-Python] Re: June Sprint
In-Reply-To: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>
References: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>
Message-ID: <d06a5cd30605210009g4524fc66g2365b786d8e48c92@mail.gmail.com>

On 5/19/06, Jonathan Lange <jml at mumak.net> wrote:
> Hello!
>
> There's a sprint on June 3-4 in Sydney, Australia.  But you already knew that.
>
> What you don't know is that now there is a wiki page for you to put
> your name and ideas for the sprint!
> Examine http://twistedmatrix.com/trac/wiki/SydneySprint
>

Someone just asked about the venue.

UTS have graciously offered us the use of some of their rooms.
Details will be posted on the wiki page as they arrive.

cheers,
jml



From stephane_brault at yahoo.fr  Sun May 21 14:55:48 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Sun, 21 May 2006 18:55:48 +0000 (GMT)
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
In-Reply-To: <1148063163.446e0dbb2c5b9@imp1-g19.free.fr>
Message-ID: <20060521185548.61800.qmail@web26507.mail.ukl.yahoo.com>

Thanks Thomas,
 I'll try your solution.
 
 St?phane

----- Message d'origine ----
De : Thomas Herv? <therve at free.fr>
?? : Twisted general discussion <twisted-python at twistedmatrix.com>
Envoy?? le : Vendredi, 19 Mai 2006, 8h26mn 03s
Objet? : Re: [Twisted-Python] Calling deferred within a callback, good or bad idea ?

Selon St??phane Brault <stephane_brault at yahoo.fr>:

> Hi,
>  I have to call a web service then process the answer, according to the
> answer I may have to call the service again.
>  The traditional way to go would be :
>  condition = 1
>  while condition:
>      message = callWebService()
>      condition = processMessage(message)
>
>  Here is what I do :
>  def function():
>
>      def myCalback(message):
>          condition = processMessage(message)
>          if condition:
>              deferred = callWebService()
>               deferred.addCallback(myCallback)
>
>      deferred = callWebService()
>      deferred.addCallback(myCallback)
>
>  I was wondering if it was the way to go or if there was a better way, since
> I'm not quite sure about the impact of calling new deffered within a
> callback.

You may have a recursion problem with this kind of code (I'm not quite sure when
it happens but it does). One good way is to use deferredGenerator:

# Not tested
def function():
    condition = True
    while condition:
        wfd =  defer.waitForDeferred(callWebService())
        yield wfd
        condition = wfd.getResult()
function = defer.deferredGenerator(function)

--
Thomas

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From warner at lothar.com  Mon May 22 02:30:32 2006
From: warner at lothar.com (Brian Warner)
Date: Sun, 21 May 2006 23:30:32 -0700 (PDT)
Subject: [Twisted-Python] Re: Send many large files with PB
Message-ID: <20060521.233032.123886711.warner@lothar.com>

> Justin Mazzola Paluska:
>> How bad is the slow down?  Or, to ask the question another way, how
>> much CPU will the process actually take?  
>
> 100% CPU for all the time it takes. Serialization is CPU- and
> memory-intensive.

Well, the memory footprint is equal to the size of the chunk that you're
paging.. that's the reason for using FilePager, to reduce the chunk size. (I
think the instantaneous footprint is 2x the chunksize, but once the chunk has
been serialized, it drops back to close to 1x).

Serializing strings is equivalent to copying them. The banana format for
strings is just a couple of length bytes followed by the string contents, so
there's not a whole lot of complex CPU stuff going on, just strcpy.

The other advantage of FilePager is that the serialization CPU time is spread
out according to how fast the network is. I suspect that in most
environments, the process will be IO limited, and CPU usage during the
process would be far less than 100%. That said, it *is* less efficient than
an HTTP server that can just dump the file straight to the network (or better
yet use something like sendfile() to avoid the kernel/userspace transition
altogether).

>> Or is the best thing to do just use the PB to send a URL to the DEST
>> server?
>
> That's what I was hinting at, yes. Of course you should separately take
> care of any required authentication, authorization and encryption on the
> HTTP connection.

Yup, and if you do too much then you're verging back to the performance of
PB. Creating a random, unguessable URL which only allows a single download of
the target file will basically provide the authentication/authorization
features (modulo a man-in-the-middle attack), but not any confidentiality.
For some applications that might be enough, though.

 -Brian



From Wolfgang.W.Eichler at gmx.de  Mon May 22 09:18:32 2006
From: Wolfgang.W.Eichler at gmx.de (Wolfgang Eichler)
Date: Mon, 22 May 2006 15:18:32 +0200
Subject: [Twisted-Python] IPV6 in twisted ?
Message-ID: <E1FiAIq-0005c6-00@pyramid.twistedmatrix.com>

Hello,

what is the situation concerning IPV6 in twisted ?
I use tcp LineReceiver.

Thanks

Wolfgang





From exarkun at divmod.com  Mon May 22 09:30:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 22 May 2006 09:30:53 -0400
Subject: [Twisted-Python] IPV6 in twisted ?
In-Reply-To: <E1FiAIq-0005c6-00@pyramid.twistedmatrix.com>
Message-ID: <20060522133053.28682.1803169828.divmod.quotient.3981@ohm>

On Mon, 22 May 2006 15:18:32 +0200, Wolfgang Eichler <wolfgang.w.eichler at gmx.de> wrote:
>Hello,
>
>what is the situation concerning IPV6 in twisted ?
>I use tcp LineReceiver.

IPv6 is unsupported in Twisted.  There is a sketch of an implementation in the sandbox but support has not yet proven useful enough to bother finishing it.

Jean-Paul



From teratorn at twistedmatrix.com  Mon May 22 10:55:10 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Tue, 23 May 2006 00:55:10 +1000
Subject: [Twisted-Python] Sydney Sprint
Message-ID: <op.s9yjp8e5y3d107@localhost.localdomain>

I'm a little bit concerned about attendance for the June 3-4 Sydney  
Sprint. The wiki page only lists two people:  
http://twistedmatrix.com/trac/wiki/SydneySprint

Unfortunately that page requires a trac login with edit permissions to  
change, so I'm afraid some people have been unable to add themselves to  
the list.

Would everyone attending be kind enough to reply to this thread?

Also, can anyone recommend accommodations near the UTS campus?

Cheers,
-Eric



From manlio_perillo at libero.it  Mon May 22 13:24:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 22 May 2006 15:24:59 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
Message-ID: <4471F3EB.9070202@libero.it>

I'm pleasant to announce the first public release of pglib.

pglib is an implementation of the PostgreSQL protocol, version 3.0.
It is written in Twisted, and aims to be a complete replacement for libpq.

In the current version the extended query sub protocol is not supported.

The project can be found at:
http://developer.berlios.de/projects/pglib/

Subversion access coming soon.


Unfortunately, I still have to write some documentation/examples.
However there is a (hopefully) detailed README and a complete test case.

Its just the "twisted way" ;-).

Note that running the test suite requires to setup a PostgreSQL database.

And note that pglib offer (at least with the default IRowConsumer
implementation) only a raw and low level access to the database (no
conversion from SQL types and Python objects, like in pgasync).

This is the responsibility of an higher lever layer.


I would like to see pglib included in Twisted Core
(in twisted.enterprise.protocols.twisted)

I'm planning to write a support for MySQL (if I have time, it has a
really ugly protocol design) and an asynchronous "wrapper" for SQLite.



Regards  Manlio Perillo



From andrew-twisted at puzzling.org  Mon May 22 21:36:26 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 23 May 2006 11:36:26 +1000
Subject: [Twisted-Python] Sydney Sprint
In-Reply-To: <op.s9yjp8e5y3d107@localhost.localdomain>
References: <op.s9yjp8e5y3d107@localhost.localdomain>
Message-ID: <20060523013626.GD2204@steerpike.home.puzzling.org>

On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
> I'm a little bit concerned about attendance for the June 3-4 Sydney  
> Sprint. The wiki page only lists two people:  
> http://twistedmatrix.com/trac/wiki/SydneySprint
> 
> Unfortunately that page requires a trac login with edit permissions to  
> change, so I'm afraid some people have been unable to add themselves to  
> the list.

Yep, that includes me.

> Would everyone attending be kind enough to reply to this thread?

I'll be there, and so will Mary.

You should also mail the python-au list, we've always mailed them about sprints
in the past, and there are usually people interested.

> Also, can anyone recommend accommodations near the UTS campus?

UTS is very close to Central Station, so any city backpacker place would be
fairly close.  I think last time Andy stayed at the YHA listed here:

    http://wikitravel.org/en/Sydney/City#Sleep

-Andrew.




From mary-twisted at puzzling.org  Mon May 22 21:47:23 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 23 May 2006 11:47:23 +1000
Subject: [Twisted-Python] Sydney Sprint
In-Reply-To: <20060523013626.GD2204@steerpike.home.puzzling.org>
References: <op.s9yjp8e5y3d107@localhost.localdomain>
	<20060523013626.GD2204@steerpike.home.puzzling.org>
Message-ID: <20060523014723.GA24809@sourdust.home.puzzling.org>

On Tue, May 23, 2006, Andrew Bennetts wrote:
> On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
> > Unfortunately that page requires a trac login with edit permissions to  
> > change, so I'm afraid some people have been unable to add themselves to  
> > the list.
> 
> Yep, that includes me.

Likewise, I do not have edit permissions.

> You should also mail the python-au list, we've always mailed them about sprints
> in the past, and there are usually people interested.

http://starship.python.net/mailman/listinfo/python-au

-Mary



From mailinglists at smartology.nl  Tue May 23 12:31:15 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Tue, 23 May 2006 18:31:15 +0200
Subject: [Twisted-Python] Twisted to proxy php out to apache?
Message-ID: <447338D3.3030109@smartology.nl>

Hello fellow twisters,

We have a rather large web app based on xul, xmlrpc (via twisted) and
php (via apache) .... and we would like to get it all (in due time) in
python.

As a first step it would be perfect to let twisted handle php page
requests so that we can use nevow for the upcomming modules and convert
old modules when we have the time to spare.

Some time ago, I  tried to get PHP to run as a CGI from twisted ... that
was so slow that I got timing problems and a non operatable webapp.
Nothing new on the FCGI for PHP front yet?

My question ... is it possible to pass php page requests from twisted to
apache so I don't suffer the speed loss but still have my app listening
on only one port (for http and xmlrpc) ? So can twisted be a proxy for
php or is this not the recommended way to go?

- Remi -



From manlio_perillo at libero.it  Tue May 23 12:58:31 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 14:58:31 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <4471F3EB.9070202@libero.it>
References: <4471F3EB.9070202@libero.it>
Message-ID: <44733F37.50104@libero.it>

Manlio Perillo ha scritto:
> [...]

> I would like to see pglib included in Twisted Core
> (in twisted.enterprise.protocols.twisted)
> 

Well, just to know.
What is the procedure for require the inclusion of a new module/package?


Thanks  Manlio Perillo



From christian.simms at gmail.com  Tue May 23 13:04:10 2006
From: christian.simms at gmail.com (christian simms)
Date: Tue, 23 May 2006 13:04:10 -0400
Subject: [Twisted-Python] Problems with spawnProcess on Windows with
	ActiveState's ActivePython 2.3
Message-ID: <cd8fa6f90605231004g3b523015m2e224d60b88e774c@mail.gmail.com>

I see this is a known problem (issue #1457 is closed, link at
http://twistedmatrix.com/trac/ticket/1457), and the solution is to
upgrade your pywin32.  However, it's annoying that the current latest
ActivePython 2.3 still includes the old and buggy pywin32 --
ActiveState's release notes at
http://aspn.activestate.com/ASPN/docs/ActivePython/2.3/relnotes.html
state that they are including build 203+ (20050128).

As a simple solution, I wonder if someone could add a line to the Trac
download link for the "Win32 installer for Python 2.3" saying
something like:

    - NOTE:  To avoid issues relating to launching subprocesses,
please upgrade to the latest pywin32 package available at:
http://sourceforge.net/project/showfiles.php?group_id=78018.  If
you're using ActiveState's installation then you definitely need to
upgrade.

Cheers,
Christian



From itamar at itamarst.org  Tue May 23 13:22:32 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 May 2006 13:22:32 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44733F37.50104@libero.it>
References: <4471F3EB.9070202@libero.it>  <44733F37.50104@libero.it>
Message-ID: <1148404953.8109.3.camel@localhost.localdomain>

On Tue, 2006-05-23 at 14:58 -0200, Manlio Perillo wrote:
> Manlio Perillo ha scritto:
> > [...]
> 
> > I would like to see pglib included in Twisted Core
> > (in twisted.enterprise.protocols.twisted)
> > 
> 
> Well, just to know.
> What is the procedure for require the inclusion of a new module/package?

1. Make sure you follow the Twisted coding standards, and have good test
coverage.
2. Open issue in issue tracker, explaining motivation for not keeping
this is as separate project.




From manlio_perillo at libero.it  Tue May 23 14:59:09 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 16:59:09 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <1148404953.8109.3.camel@localhost.localdomain>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
Message-ID: <44735B7D.7000307@libero.it>

Itamar Shtull-Trauring ha scritto:
> On Tue, 2006-05-23 at 14:58 -0200, Manlio Perillo wrote:
>> Manlio Perillo ha scritto:
>>> [...]
>>> I would like to see pglib included in Twisted Core
>>> (in twisted.enterprise.protocols.twisted)
>>>
>> Well, just to know.
>> What is the procedure for require the inclusion of a new module/package?
> 
> 1. Make sure you follow the Twisted coding standards, and have good test
> coverage.

In the current version, the docstrings do not use the format of
epydocs/pydoctor.

The test coverage should be good, but it requires an "external"
PostgreSQL database.
Is this a problem?

> 2. Open issue in issue tracker, explaining motivation for not keeping
> this is as separate project.
>


Ok, thanks.
I will open an issue when I clean up the code.

However I would like to see pglib in Twisted because:
1) I don't like that adbapi have to use dbapi2 compiant modules
2) I don't have the time to fully support pglib



Thanks and regards  Manlio Perillo



From radix at twistedmatrix.com  Tue May 23 15:05:01 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 23 May 2006 15:05:01 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44735B7D.7000307@libero.it>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
	<44735B7D.7000307@libero.it>
Message-ID: <60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>

On 5/23/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> However I would like to see pglib in Twisted because:
> 1) I don't like that adbapi have to use dbapi2 compiant modules
> 2) I don't have the time to fully support pglib


#2 is a point *against* inclusion of pglib in Twisted, as far as the
Twisted project is concerned. We already have way too much
unmaintained code whose only users are the author and (sometimes) a
few third parties who don't contribute enough.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Tue May 23 15:15:44 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 May 2006 15:15:44 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44735B7D.7000307@libero.it>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
	<44735B7D.7000307@libero.it>
Message-ID: <1148411745.8109.11.camel@localhost.localdomain>

On Tue, 2006-05-23 at 16:59 -0200, Manlio Perillo wrote:

> 2) I don't have the time to fully support pglib

That means it's probably less likely to be accepted, since we have lots
of existing code to maintain. Unless you can find a volunteer, of
course.





From schneider at gl-systemhaus.de  Tue May 23 15:24:26 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Tue, 23 May 2006 21:24:26 +0200
Subject: [Twisted-Python] How many threads in an application
Message-ID: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>

Hi all,

I have implemented a server as a subclass of t.i.TCPServer and have  
it running as a twistd application. Within the service, I have  
several callbacks. Let's say I have three connected protocols, how  
many threads to I have? Just one or more. The callbacks are scheduled  
via reactor.callLater.

Thanks,

chris



From manlio_perillo at libero.it  Tue May 23 15:30:38 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 17:30:38 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>
References: <4471F3EB.9070202@libero.it>
	<44733F37.50104@libero.it>	<1148404953.8109.3.camel@localhost.localdomain>	<44735B7D.7000307@libero.it>
	<60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>
Message-ID: <447362DE.30905@libero.it>

Christopher Armstrong ha scritto:
> On 5/23/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>> However I would like to see pglib in Twisted because:
>> 1) I don't like that adbapi have to use dbapi2 compiant modules
>> 2) I don't have the time to fully support pglib
> 
> 
> #2 is a point *against* inclusion of pglib in Twisted, as far as the
> Twisted project is concerned. We already have way too much
> unmaintained code whose only users are the author and (sometimes) a
> few third parties who don't contribute enough.
> 

Support the *code* is not a problem.

The problem is support a bug tracker, mailing list, and all stuff for
user contributions.


Regards  Manlio Perillo




From ldanielburr at mac.com  Tue May 23 15:41:39 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 23 May 2006 14:41:39 -0500
Subject: [Twisted-Python] How many threads in an application
In-Reply-To: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
References: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
Message-ID: <op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Chris,


On Tue, 23 May 2006 14:24:26 -0500, Christian Schneider  
<schneider at gl-systemhaus.de> wrote:

> Hi all,
>
> I have implemented a server as a subclass of t.i.TCPServer and have it  
> running as a twistd application. Within the service, I have several  
> callbacks. Let's say I have three connected protocols, how many threads  
> to I have? Just one or more. The callbacks are scheduled via  
> reactor.callLater.
>
> Thanks,
>
> chris

The really cool thing about twisted is, in your case, you probably have no  
threads running, other than the main thread of execution, which is the  
reactor.  Twisted is handling your protocols asynchronously, rather than  
using threads, and this is a Good Thing, in terms of scalability and  
reliability.

L. Daniel Burr



From schneider at gl-systemhaus.de  Tue May 23 15:59:15 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Tue, 23 May 2006 21:59:15 +0200
Subject: [Twisted-Python] How many threads in an application
In-Reply-To: <op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
	<op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <8E71331A-2948-4B0B-8D00-51E780358CD0@gl-systemhaus.de>

Hi Daniel,

thanks, that's what I've been thinking but it's good to have it  
confirmed.

chris

On 23.05.2006, at 21:41, L. Daniel Burr wrote:

> Hi Chris,
>
>
> On Tue, 23 May 2006 14:24:26 -0500, Christian Schneider  
> <schneider at gl-systemhaus.de> wrote:
>
>> Hi all,
>>
>> I have implemented a server as a subclass of t.i.TCPServer and  
>> have it running as a twistd application. Within the service, I  
>> have several callbacks. Let's say I have three connected  
>> protocols, how many threads to I have? Just one or more. The  
>> callbacks are scheduled via reactor.callLater.
>>
>> Thanks,
>>
>> chris
>
> The really cool thing about twisted is, in your case, you probably  
> have no threads running, other than the main thread of execution,  
> which is the reactor.  Twisted is handling your protocols  
> asynchronously, rather than using threads, and this is a Good  
> Thing, in terms of scalability and reliability.
>
> L. Daniel Burr
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pf_moore at yahoo.co.uk  Tue May 23 16:49:23 2006
From: pf_moore at yahoo.co.uk (Paul Moore)
Date: Tue, 23 May 2006 21:49:23 +0100
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
Message-ID: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>

I have a program where I think that what I want to use is
deferToThread and setTimeout. However, the setTimeout method is marked
as deprecated - but I can't find a good supported alternative. Can
anyone help?

The situation I have is:

I need to do a large-ish number (50-100) of blocking calls in
parallel, and collect the results or any errors. In itself, this seems
like a suitable use for deferToThread (defer each call, and collect
the results in the deferred callback/errback).

The problem is that in rare cases, the blocking call can block
indefinitely. In this case, I need to make the call time out. However,
the underlying API offers no way to time out the call, so I have to do
this externally.

A quick prototype seems to work OK, using setTimeout to force a
timeout on the deferred, but it generates deprecation warnings for the
setTimeout call.

What should I be using to achieve this effect?

Thanks,
Paul.
-- 
I remember being impressed with Ada because you could write an infinite
loop without a faked up condition. The idea being that in Ada the
typical infinite loop would normally be terminated by detonation. --
Larry Wall




From ldanielburr at mac.com  Tue May 23 18:39:43 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 23 May 2006 17:39:43 -0500
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <op.s90zwhmu3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Paul,

On Tue, 23 May 2006 15:49:23 -0500, Paul Moore <pf_moore at yahoo.co.uk>  
wrote:

> I have a program where I think that what I want to use is
> deferToThread and setTimeout. However, the setTimeout method is marked
> as deprecated - but I can't find a good supported alternative. Can
> anyone help?
>

I don't know for a certainty that I can help, but I'll try :)

> The situation I have is:
>
> I need to do a large-ish number (50-100) of blocking calls in
> parallel, and collect the results or any errors. In itself, this seems
> like a suitable use for deferToThread (defer each call, and collect
> the results in the deferred callback/errback).
>

Agreed, this seems to be a perfectly reasonable use-case for deferToThread.

> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.
>

Alas, when dealing with APIs that do not allow for timeouts, there is very  
little that twisted can do to help.  The use of setTimeout has been  
debated to death, and no magic bullet solution is in sight.  That said,  
please read the following discussion thread to see what your options are,  
and perhaps one of them will be acceptable for your particular situation.   
These discussions cover your issue in reasonable depth.

http://twistedmatrix.com/pipermail/twisted-python/2004-April/007531.html

http://twistedmatrix.com/trac/ticket/178

http://twistedmatrix.com/pipermail/twisted-python/2005-March/009716.html

Basically, the best you can do in your circumstances is use  
reactor.callLater to invoke some function/method that will take action  
appropriate to your situation, be that cancelling the Deferred, killing  
the thread, etc.

Hope this helps,

L. Daniel Burr



From teratorn at twistedmatrix.com  Tue May 23 19:03:29 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 24 May 2006 09:03:29 +1000
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <op.s900z3why3d107@localhost.localdomain>

On Wed, 24 May 2006 06:49:23 +1000, Paul Moore <pf_moore at yahoo.co.uk>  
wrote:

> I have a program where I think that what I want to use is
> deferToThread and setTimeout. However, the setTimeout method is marked
> as deprecated - but I can't find a good supported alternative. Can
> anyone help?

You can just use reactor.callLater(...) to run whatever timeout code you
have after the given number of seconds. callLater returns a DelayedCall
instance which you can .cancel() if you get a result before the timeout.

> The situation I have is:
>
> I need to do a large-ish number (50-100) of blocking calls in
> parallel, and collect the results or any errors. In itself, this seems
> like a suitable use for deferToThread (defer each call, and collect
> the results in the deferred callback/errback).
>
> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.

Well this is a bit of a problem. You can't just kill a thread - so it will
eventually return a result, and Twisted will .callback() its deferred. If
you've already stepped in, due to a timeout, and .callback()'ed the same
deferred you'll get an AlreadyCalledError in your log.

So don't do that.. don't fire that deferred. When you time out just keep  
some
state so that you can ignore the result if and when it comes.

> A quick prototype seems to work OK, using setTimeout to force a
> timeout on the deferred, but it generates deprecation warnings for the
> setTimeout call.
>
> What should I be using to achieve this effect?
>
> Thanks,
> Paul.

Hope that helps.

-- 
Eric Mangold - Twisted/Win32 Maintainer
http://twistedmatrix.com/trac/wiki/Windows



From andrew-twisted at puzzling.org  Tue May 23 22:36:37 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 24 May 2006 12:36:37 +1000
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <20060524023637.GF2204@steerpike.home.puzzling.org>

On Tue, May 23, 2006 at 09:49:23PM +0100, Paul Moore wrote:
[...]
> 
> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.

There is a problem here Twisted cannot help you with -- you will leak threads
that you cannot interrupt, because they are blocked indefinitely.  setTimeout or
other solutions will allow you to paper over this fact, but you need to be aware
of it, because it will eventually stop your process from running.  There's no
way something like defer.setTimeout can magically cancel the underlying
operation for you (even though it unblocks the deferred waiting on that
operation), and part of the reason setTimeout is a deprecated is to force people
to be aware of that.

Also, deferToThread by default isn't going to give you with 50-100 parallel
threads.  The default threadpool size is 4.  You'll need to use
reactor.suggestThreadPoolSize to change that -- but realise that the default DNS
resolver in current Twisted releases use that threadpool too, and perhaps so
will other libraries, and you could starve those callers by swamping the
threadpool with your blocking calls.  So it may be better to use your own
threadpool, as twisted.enterprise.adbapi does, for example.  See
twisted.python.threadpool.

I don't suppose there's a non-blocking way to do what you want?

Oh -- and remember that while you can't kill threads, you *can* kill processes.
Consider using subprocesses to do your blocking work.

-Andrew.




From exarkun at divmod.com  Tue May 23 22:43:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 23 May 2006 22:43:35 -0400
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <20060524024335.28682.498346100.divmod.quotient.4692@ohm>

On Tue, 23 May 2006 21:49:23 +0100, Paul Moore <pf_moore at yahoo.co.uk> wrote:
>I have a program where I think that what I want to use is
>deferToThread and setTimeout. However, the setTimeout method is marked
>as deprecated - but I can't find a good supported alternative. Can
>anyone help?
>
>The situation I have is:
>
>I need to do a large-ish number (50-100) of blocking calls in
>parallel, and collect the results or any errors. In itself, this seems
>like a suitable use for deferToThread (defer each call, and collect
>the results in the deferred callback/errback).
>
>The problem is that in rare cases, the blocking call can block
>indefinitely. In this case, I need to make the call time out. However,
>the underlying API offers no way to time out the call, so I have to do
>this externally.
>
>A quick prototype seems to work OK, using setTimeout to force a
>timeout on the deferred, but it generates deprecation warnings for the
>setTimeout call.
>
>What should I be using to achieve this effect?

There's some code along these lines here:

http://twistedmatrix.com/trac/browser/trunk/twisted/internet/base.py#L201

It might make a good example to work from.  Note that any call that
blocks indefinitely will hold on to a thread indefinitely, and thus
reduce your effective thread pool size by one.  If this happens
enough, you'll end up with no free threads in your threadpool, and
no other threaded tasks will ever be able to complete.

Jean-Paul



From keith at Shopzilla.com  Thu May 25 18:48:28 2006
From: keith at Shopzilla.com (Keith Dutton)
Date: Thu, 25 May 2006 15:48:28 -0700
Subject: [Twisted-Python] web.client blowing up on non-fully qualified 301s
Message-ID: <2E91C86E7AEBFD43BB11EC2DD8EF518F10C2F0@szexchange.Shopzilla.inc>

Hello, 

I have run into an odd problem.  I am not sure if it is my issue or Twisted: any help would be appreciated.  Under at least some circumstances, twisted.web.client seems to 1) not be able to follow a 301, and 2) throw an unhandled exception, when trying to follow a 301.  A specific example and resulting error is given below:


from twisted.internet import defer
from twisted.web import client
from twisted.internet import reactor

class HTTPGetter(client.HTTPClientFactory):
    protocol = client.HTTPPageGetter

class Fetcher:

    def __init__(self,client_factory = HTTPGetter):
        self.factory = client_factory
        
    def download(self,host,port,url):
        f = self.factory(url)
        f.deferred.addCallback(self.downloadFinished).addErrback(self.downloadFailed)
        k = reactor.connectTCP(host, port, f, timeout=10)
        return f.deferred
    
    def downloadFinished(self,v):
        print  "good"

    def downloadFailed(self, v):
        print "bad"
        print v
    
r = Fetcher()
w = r.download("www.shopzilla.com",80,"/aaaa")
reactor.callLater(10,reactor.stop)
reactor.run()

This results in:

Unhandled error in Deferred:
Traceback (most recent call last):
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", line 226, in mainLoop
    self.runUntilCurrent()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py", line 541, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 494, in resolveAddress
    d.addCallbacks(self._setRealAddress, self.failIfNotConnected)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/defer.py", line 182, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 498, in _setRealAddress
    self.doConnect()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 520, in doConnect
    connectResult = self.socket.connect_ex(self.realAddress)
  File "<string>", line 1, in connect_ex
    
exceptions.TypeError: an integer is required

Which is apparently due to the fact that doConnect assumes a good address and so does not trap for TypeError.

The bad address that doConnect blows up on ('',None) for (host,port) slips in due to twisted.web.client.handleStatus_301.   The example site (Shopzilla.com) posts a URL for the 301 Location that is not fully qualified.  handleStatus_301, in the face of such a URL, appears to fail because it relies on getting the host/port from the location URL, but these are not present in it.  Thus it passes in the ('',None) to its reactor.connectTCP attempt to follow the redirect, leading to the error above.  My kludge fix to handleStatus_301 is given below, where if the host or port are missing I steal them from the transport, which should be correct since it was just used to get the page.  I am running with this now, with no errors.

Is this a Twisted issue?  If so, is my fix reasonable?  If it is not a Twisted issue, what am I doing wrong?  

Thanks,

Keith

    def handleStatus_301(self):
        l = self.headers.get('location')
        if not l:
            self.handleStatusDefault()
        url = l[0]
        if self.followRedirect:
            scheme, host, port, path = \
                _parse(url, defaultPort=self.transport.getPeer().port)
            self.factory.setURL(url)
            #following 4 lines added kad to fix apparent issue with 301 to a url that is not fully qualified
            if self.factory.host == '':
                self.factory.host = self.transport.addr[0]
            if self.factory.port == None:
                self.factory.port = self.transport.addr[1]


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060525/f57a2e7b/attachment.htm 

From stephen at thorne.id.au  Thu May 25 19:28:01 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 26 May 2006 09:28:01 +1000
Subject: [Twisted-Python] web.client blowing up on non-fully qualified 301s
In-Reply-To: <2E91C86E7AEBFD43BB11EC2DD8EF518F10C2F0@szexchange.Shopzilla.inc>
Message-ID: <20060525232801.28682.803616384.divmod.quotient.5368@ohm>

On Thu, 25 May 2006 15:48:28 -0700, Keith Dutton <keith at shopzilla.com> wrote:
>Is this a Twisted issue?  If so, is my fix reasonable?  If it is not a Twisted issue, what am I doing wrong?

This looks like a twisted 'issue' in that it's very common for webservers to give this (invalid) response.

Can you file a bug on the tracker, submit the test data you have, and your change as a unified diff against latest svn trunk?

http://twistedmatrix.com/trac/

I think you need to register a user account to create a ticket, in case you've not done that.

We can integrate the patch once we have a unit test :)

Regards,
Stephen Thorne.



From kpvincent at yahoo.com  Fri May 26 08:36:53 2006
From: kpvincent at yahoo.com (Kelly Vincent)
Date: Fri, 26 May 2006 13:36:53 +0100 (BST)
Subject: [Twisted-Python] XML-RPC server
Message-ID: <20060526123653.7472.qmail@web53402.mail.yahoo.com>

I am quite new to Twisted and I'm having some trouble
getting my XML-RPC server to do exactly what I want. 

We have a relatively simple goal: create an XML-RPC
server that will accept a request for a score, call a
function that computes that score, and then return the
score. The two catches are that 1. the client is
actually a .NET web server rather than a Twisted
client, and 2. we could have thousands of requests
come in relatively simultaneously (though more likely
not greater than a few hundred), likely with lots of
downtime between these periods of high activity. We
are planning to create a look-up table to deal with
some of the more common calculations, but I still need
to be able to run the other calculations
non-sequentially. I know that using a Deferred object
is the normal solution, but I'm not entirely sure if
it could work here without threads. I read somewhere 
that when the function call is not from another 
Twisted application, it's not possible to use the 
Deferred object. Is this actually the case? Or would 
it work in my situation since all of the "deferring" 
would be occurring within the server itself? My 
current solution involves using threads and a Deferred

object. Is this the best way to do this? Can it be 
done without threads? If so, how and is that a better
solution than the one with threads?

Here is my sample code, which does a simple 
calculation rather than the real one I will be using. 
Both my Twisted testing client and the .NET web 
server are able to talk to this server and get the 
correct results back. 


from twisted.web import resource, server, xmlrpc
from twisted.internet import defer, threads
from twisted.python import threadable
threadable.init()

class ScoreServer(xmlrpc.XMLRPC):
    def xmlrpc_calculateScore(self,params):
        t = params[0]
        d = threads.deferToThread(self.calc,t)
        val = d.addCallback(self.handleSuccess)
        d.addErrback(self.handleFailure)
        print t, d
        return val
    def calc(self,t):
        import time
        time.sleep(t)
        result = [t,t*10]
        return result
    def handleSuccess(self,t):
        print 'succeeded', t
        return t
    def handleFailure(self):
        print 'failed miserably'
        return ['Error']
        
if __name__ == "__main__":
    from twisted.internet import reactor
    root = resource.Resource()
    root.putChild('RPC2', ScoreServer())
    reactor.listenTCP(8082, server.Site(root))
    reactor.run()






From mailinglists at smartology.nl  Fri May 26 08:51:43 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Fri, 26 May 2006 14:51:43 +0200
Subject: [Twisted-Python] XML-RPC server
In-Reply-To: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
References: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
Message-ID: <4476F9DF.2020305@smartology.nl>

Kelly Vincent wrote:

>I am quite new to Twisted and I'm having some trouble
>getting my XML-RPC server to do exactly what I want. 
>
>We have a relatively simple goal: create an XML-RPC
>server that will accept a request for a score, call a
>function that computes that score, and then return the
>score. The two catches are that 1. the client is
>actually a .NET web server rather than a Twisted
>client, and 2. we could have thousands of requests
>come in relatively simultaneously (though more likely
>not greater than a few hundred), likely with lots of
>downtime between these periods of high activity. We
>are planning to create a look-up table to deal with
>some of the more common calculations, but I still need
>to be able to run the other calculations
>non-sequentially. I know that using a Deferred object
>is the normal solution, but I'm not entirely sure if
>it could work here without threads. I read somewhere 
>that when the function call is not from another 
>Twisted application, it's not possible to use the 
>Deferred object. Is this actually the case? Or would 
>it work in my situation since all of the "deferring" 
>would be occurring within the server itself? My 
>current solution involves using threads and a Deferred
>
>  
>
To my knowledge, a client has nothing to do with twisted internals like
deferreds.

For example I use a twisted xmlrpc server that get's it's requests from
a php script via apache.
You also could test your code with a simple python xmlrpc client like:

from xmlrpclib import ServerProxy

server = ServerProxy("http://yourserver:port")

print server

try:
    print server.your.method(attr)
except Exception, v:
    print "ERROR", v

- Remi -



From ldanielburr at mac.com  Fri May 26 10:13:10 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri, 26 May 2006 09:13:10 -0500
Subject: [Twisted-Python] XML-RPC server
In-Reply-To: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
References: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
Message-ID: <op.s95wf8ll3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Kelly,

On Fri, 26 May 2006 07:36:53 -0500, Kelly Vincent <kpvincent at yahoo.com>  
wrote:

> I am quite new to Twisted and I'm having some trouble
> getting my XML-RPC server to do exactly what I want.
>

First off, welcome aboard!  Now, on to your problem/question...

> We have a relatively simple goal: create an XML-RPC
> server that will accept a request for a score, call a
> function that computes that score, and then return the
> score. The two catches are that 1. the client is
> actually a .NET web server rather than a Twisted
> client, and 2. we could have thousands of requests
> come in relatively simultaneously (though more likely
> not greater than a few hundred), likely with lots of
> downtime between these periods of high activity. We
> are planning to create a look-up table to deal with
> some of the more common calculations, but I still need
> to be able to run the other calculations
> non-sequentially. I know that using a Deferred object
> is the normal solution, but I'm not entirely sure if
> it could work here without threads. I read somewhere
> that when the function call is not from another
> Twisted application, it's not possible to use the
> Deferred object. Is this actually the case? Or would
> it work in my situation since all of the "deferring"
> would be occurring within the server itself? My
> current solution involves using threads and a Deferred
> object. Is this the best way to do this? Can it be
> done without threads? If so, how and is that a better
> solution than the one with threads?

This kind of situation is pretty common, and finding the best solution  
will require you to do some benchmarking.  Firstly, benchmark your  
calculation: How much time does it take to return a result?  If the  
calculation is fairly swift (milliseconds), then don't worry about  
Deferreds at all; just perform the calculation and return the result.  If  
the calculation takes longer (seconds, minutes, whatever), then you can  
either use deferToThread, as you are currently, or you break your  
calculation up into steps, and use reactor.callLater to schedule execution  
incrementally.

That said, run a simple load-testing tool, such as apache's "ab", or  
"httperf", and see what kind of requests-per-second numbers you get for  
both approaches.

Hope this helps,

L. Daniel Burr



From pf_moore at yahoo.co.uk  Fri May 26 15:46:27 2006
From: pf_moore at yahoo.co.uk (Paul Moore)
Date: Fri, 26 May 2006 20:46:27 +0100
Subject: [Twisted-Python] Re: deferToThread - supported alternative to the
	(deprecated) setTimeout method
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
	<20060524024335.28682.498346100.divmod.quotient.4692@ohm>
Message-ID: <g1le729flhakbl0gcn1r424r1s4tcnm3g6@4ax.com>

Many thanks to all for the helpful responses. They've given me a lot
of options to think about. I'll see where it takes me.

Some specific comments:

On Tue, 23 May 2006 22:43:35 -0400, Jean-Paul Calderone
<exarkun at divmod.com> wrote:

>There's some code along these lines here:
>
>http://twistedmatrix.com/trac/browser/trunk/twisted/internet/base.py#L201

Thanks, that was useful.

>It might make a good example to work from.  Note that any call that
>blocks indefinitely will hold on to a thread indefinitely, and thus
>reduce your effective thread pool size by one.  If this happens
>enough, you'll end up with no free threads in your threadpool, and
>no other threaded tasks will ever be able to complete.

That's a good point. My initial thought was that I'm not writing a
long-running process here (my process runs all the threads, does a bit
of housekeeping when they complete, and then stops) and the blocking
thread condition is rare, so it shouldn't be a problem. But that's
just swapping one rare problem for another, somewhat rarer case. So
maybe I'm better fixing it properly.

On Wed, 24 May 2006 09:03:29 +1000, "Eric Mangold"
<teratorn at twistedmatrix.com> wrote:

>Well this is a bit of a problem. You can't just kill a thread - so it will
>eventually return a result, and Twisted will .callback() its deferred. If
>you've already stepped in, due to a timeout, and .callback()'ed the same
>deferred you'll get an AlreadyCalledError in your log.

Ah. That clarifies why setTimeout is deprecated, and why it's not
appropriate for me. Thanks!

On Wed, 24 May 2006 12:36:37 +1000, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:

>I don't suppose there's a non-blocking way to do what you want?

Sadly, no. It's a horribly broken API in this respect. (It's the
Oracle database connection API, if you want to know - no timeout
capability, and a rare but definite chance of a complete hang, no
return *ever*).

>Oh -- and remember that while you can't kill threads, you *can* kill processes.
>Consider using subprocesses to do your blocking work.

That's possible, but I'm running on Windows and subprocess management
is not as manageable on that platform (even under Python/twisted). But
it is a thought, and I'll keep it in mind.

Paul.
-- 
The trouble with being punctual is that nobody's there to appreciate
it. -- Franklin P. Jones




From glyph at divmod.com  Fri May 26 16:19:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 26 May 2006 16:19:47 -0400
Subject: [Twisted-Python] Re: deferToThread - supported alternative to
	the (deprecated) setTimeout method
In-Reply-To: <g1le729flhakbl0gcn1r424r1s4tcnm3g6@4ax.com>
Message-ID: <20060526201947.28682.1731617036.divmod.quotient.5814@ohm>



On Fri, 26 May 2006 20:46:27 +0100, Paul Moore <pf_moore at yahoo.co.uk> wrote:

>>Consider using subprocesses to do your blocking work.
>
>That's possible, but I'm running on Windows and subprocess management
>is not as manageable on that platform (even under Python/twisted). But
>it is a thought, and I'll keep it in mind.

While Twisted uses some rather gross APIs, and polling, to get subprocess management working on win32, and it's therefore not very high performance, it _does_ work, performs reasonably under average load (sockets are generally higher performance than stdin/stdout on all platforms, so if you have really large volumes of data to send to your subprocess you might want to use one of those anyway.), and is supported, especially in the most recent 2.4 release.  (No win32 installers for that yet; you'll have to build it yourself from the tarball).

Although the Python APIs differ substantially, the Twisted APIs for managing processes and communicating with them should be identical on Windows.



From radix at twistedmatrix.com  Sat May 27 13:19:21 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 27 May 2006 13:19:21 -0400
Subject: [Twisted-Python] Twisted 2.4.0 released
Message-ID: <60ed19d40605271019o85c7adp9896cb9605d6e17@mail.gmail.com>

Twisted is an event-based framework for internet applications which
works on Python 2.3.x and 2.4.x.

The 2.4.0 release includes features and fixes for the various parts of
Twisted, including Internet, Conch, Web, Mail, Names, and more.

Hit http://twistedmatrix.com/trac/wiki/TwistedProject to see what's
new and to get the latest downloads, including tarballs and Windows
installers.

For general information about Twisted, see the web site at
http://twistedmatrix.com/.

Thanks to Jean-Paul Calderone for helping a lot to get this release
out the door.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

From general at eepatents.com  Sat May 27 21:48:59 2006
From: general at eepatents.com (Ed Suominen)
Date: Sat, 27 May 2006 18:48:59 -0700
Subject: [Twisted-Python] Synchronous Code Fishbowl
Message-ID: <4479018B.7060503@eepatents.com>

The dialogue copied below shows yet another example of the frustrations
that arise when trying to bridge the chasm between Twisted and the
synchronous rest of the world.

This latest episode inspired the idea of a synchronous code fishbowl
that offers well-behaved Twisted code a deferToQueue() method for
running badly-behaved blocking code.

See http://foss.eepatents.com/sAsync/browser/branches/syncbridge.py

Comments?

- Ed Suominen


-------- Original Message --------
Michael Bayer wrote:
> why are you using twisted *with* threads ?  didnt we all agree that was
> sort of unnecessary ?

Twisted operates without needing to run *in* a thread by doing
everything asynchronously. Every call made via the Twisted event loop
must either return (synchronous) results very quickly or return an
immediate reference to an eventual result (thus operating
asynchronously). The objects that hold those immediate references are
called "deferreds" in TWisted parlance.

Twisted runs most all of its internal operations with appropriate
chunking and use of select() to keep the asynchronous event loop humming
along nicely, but it has no control over how other libraries do things.
When an external library like SQLAlchemy presents a blocking call like
select(...).execute.fetchall(), the only way to make that call "play
nice" with Twisted by immediately returning a deferred to the eventual
result is by having TWisted run it in a thread. It includes the
deferToThread() function for that express purpose.

> (this goes to my point that twisted is a pain in the butt...)

Perhaps, but asynchronous code is a whole different way of thinking that
some of us actually find cleaner and more intuitive than blocking +
threads. What I'm trying to do with sAsync is put the "pain in the butt"
associated with making synchronous and asynchronous code work together
firmly behind the scenes for Twisted users, at least as far as
interacting with SQLAlchemy is concerned.

> anyway, SA 0.2 uses the same idea for sqlite threading as 0.1....it
> maintains each connection thread locally since you cant share a sqlite
> connection between threads.   im also not sure what youre talking about
> with a "thread local copy of the engine", if thats something youre doing
> on your end, you might want to not do that.  use Connection objects
> instead theyre much more portable.

Mike, I remember you telling me a while ago that SA somehow figures out
how to make things work with the engine. That was after I spent a lot of
time trying to re-engineer the wheel, to great frustration on my part. I
followed your advice, ditched my thread-local code, and got SA
transactions just fine (based on the engine) to run in arbitrary
threads. Now it's not working in SA 0.2. Could you point out what's
changed in regard to the engine vs. threads vs. sqlite?

I'd rather not change everything under the hood (e.g., using connections
somehow) if I don't have to. The lesson of not trying to re-engineer
what SA handled fine on its own is still with me. :-)

Best regards, Ed

> On May 27, 2006, at 6:57 PM, Ed Suominen wrote:
> 
>> My sAsync project relies on Twisted to maintain a thread pool. It runs
>> database transactions in some available thread via Twisted's
>> deferToThread() function. See the transact function in
>> http://foss.eepatents.com/sAsync/browser/trunk/sasync/database.py for
>> details.
>>
>> That arrangement created no problem with SQLite and SA 0.1, even though
>> SQLite does not allow sharing of connections between threads. Somehow,
>> SA 0.1 made the transaction run in its thread with a thread-local copy
>> of the engine and table that was created in the main thread. I never
>> figured out how, but it just worked.
>>
>> It doesn't work in SA 0.2, however. I either get the error when trying
>> to use the main-thread table in the threaded transaction, or have no
>> table available in the thread because it wasn't created there. Now I'm
>> trying to figure out how to put humpty dumpty back together again. Any
>> suggestions?
>>
>> Best regards, Ed




From exarkun at twistedmatrix.com  Sun May 28 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 May 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1148792702.13.242170977@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-21 through 2006-05-28
Bugs opened: 28    Bugs closed: 19  Total open bugs: 614 (+9)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:       +5  |Highest:  -1          |Conch:               -2  
|Enhancement:  +2  |High:     +2          |Core:                +7  
|Task:         +2  |Normal:   +7          |Lore:                +0  
                   |Low:      +1          |Mail:                +0  
                                          |Names:               +0  
                                          |News:                +0  
                                          |Release Management:  +0  
                                          |Runner:              +0  
                                          |Web:                 +0  
                                          |Web2:                +2  
                                          |Website:             +1  
                                          |Words:               +1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1737] Release Twisted conch 0.7.0 (opened by radix) (CLOSED, fixed)
    task            conch      http://twistedmatrix.com/trac/ticket/1737

[#1743] Release Twisted Lore 0.2.0 (opened by radix) (CLOSED, fixed)
    task            lore       http://twistedmatrix.com/trac/ticket/1743

[#1745] Release Twisted Runner 0.2.0 (opened by radix) (CLOSED, fixed)
    task            runner     http://twistedmatrix.com/trac/ticket/1745

[#1747] RELEASE "TWISTED" 2.4.0!!!! (opened by radix) (CLOSED, fixed)
    enhancement     release management http://twistedmatrix.com/trac/ticket/1747

[#1749] update the docs on the web site for 2.4.0 (opened by radix) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/1749

                    ===== High =====
[#1742] Add stdio halfclose tests (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/1742

[#1752] t.w2's header tests that use runRoundtripTest and requiredGeneratedElements are invalid. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1752

[#1753] ConnectionPool.good_sql is not good SQL as far as Oracle is concerned (opened by itamarst)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1753

[#1754] adbapi has blanket except: with no logging (opened by itamarst)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1754

[#1755] t.w2.twscgi.SCGIClientProtocol causes an exception to be raised in t.w2.log._LogByteCounter (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1755

                    ===== Normal =====
[#1729] release twisted core 2.4.0 (opened by radix) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1729

[#1730] twisted.test.test_tcp.HalfClose3TestCase.testReadNotificationRaises fails intermittently (opened by radix)
    defect          core       http://twistedmatrix.com/trac/ticket/1730

[#1731] Release twisted names 0.3.0 (opened by radix) (CLOSED, fixed)
    task            names      http://twistedmatrix.com/trac/ticket/1731

[#1732] Release twisted mail 0.3.0 (opened by radix) (CLOSED, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/1732

[#1733] Release Twisted words 0.4.0 (opened by radix) (CLOSED, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/1733

[#1734] twisted.words.service has NameErrors (opened by radix)
    defect          words      http://twistedmatrix.com/trac/ticket/1734

[#1735] skip twisted.words' msn tests when twisted.web is not available (opened by radix)
    task            words      http://twistedmatrix.com/trac/ticket/1735

[#1736] Release Twisted web 0.6.0 (opened by radix) (CLOSED, fixed)
    task            web        http://twistedmatrix.com/trac/ticket/1736

[#1738] Failure.__getstate__() does not clean self.value() (opened by moof)
    defect          core       http://twistedmatrix.com/trac/ticket/1738

[#1739] (patch) Removing system event triggers while firing does the wrong thing. (opened by antony)
    defect          core       http://twistedmatrix.com/trac/ticket/1739

[#1740] twisted/test/stdio_test_halfclose.py typo (opened by rikyu) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1740

[#1741] threadCallQueue loop can grow list forever (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1741

[#1744] listen invalid argument (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1744

[#1746] Release Twisted News 0.2.0 (opened by radix) (CLOSED, fixed)
    task            news       http://twistedmatrix.com/trac/ticket/1746

[#1748] Using twisted.cred.credentials results in deprecation warnings in Twisted 2.4 (opened by szumo)
    defect          core       http://twistedmatrix.com/trac/ticket/1748

[#1750] Solaris tar does not work with Twisted tarball (opened by damon_register) (CLOSED, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/1750

[#1751] Make macro or plugin or something so project pages automatically display latest releases (opened by itamarst)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1751

                    ===== Low =====
[#1756] Add preliminary support for UTF-8 to twisted.conch.insults (opened by radix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1756



Closed Bugs
______________________
                    ===== Highest =====
[#1695] raising an exception from datagramReceived should not kill a listening UDP Port (opened by radix, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1695

[#1737] Release Twisted conch 0.7.0 (opened by radix, closed by exarkun, fixed)
    task            conch      http://twistedmatrix.com/trac/ticket/1737

[#1745] Release Twisted Runner 0.2.0 (opened by radix, closed by exarkun, fixed)
    task            runner     http://twistedmatrix.com/trac/ticket/1745

[#1749] update the docs on the web site for 2.4.0 (opened by radix, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/1749

[#1743] Release Twisted Lore 0.2.0 (opened by radix, closed by radix, fixed)
    task            lore       http://twistedmatrix.com/trac/ticket/1743

[#1747] RELEASE "TWISTED" 2.4.0!!!! (opened by radix, closed by radix, fixed)
    enhancement     release management http://twistedmatrix.com/trac/ticket/1747

                    ===== High =====
[#635 ] Patch for py2exe 0.5 support for tap2ntsvc (opened by jml, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/635

[#1013] Windows batch file arguments (opened by nicktrout, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/1013

[#1016] setup.py all --help causes infinite loop (opened by justinj, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/1016

                    ===== Normal =====
[#1729] release twisted core 2.4.0 (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1729

[#1731] Release twisted names 0.3.0 (opened by radix, closed by radix, fixed)
    task            names      http://twistedmatrix.com/trac/ticket/1731

[#1732] Release twisted mail 0.3.0 (opened by radix, closed by exarkun, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/1732

[#1714] Update Words' NEWS for 0.4 release (opened by ralphm, closed by exarkun, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1714

[#1733] Release Twisted words 0.4.0 (opened by radix, closed by exarkun, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/1733

[#1736] Release Twisted web 0.6.0 (opened by radix, closed by radix, fixed)
    task            web        http://twistedmatrix.com/trac/ticket/1736

[#1740] twisted/test/stdio_test_halfclose.py typo (opened by rikyu, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1740

[#1746] Release Twisted News 0.2.0 (opened by radix, closed by radix, fixed)
    task            news       http://twistedmatrix.com/trac/ticket/1746

[#1750] Solaris tar does not work with Twisted tarball (opened by damon_register, closed by glyph, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/1750

[#1725] selectreactor 'winsock error' (opened by ghazel, closed by glyph, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/1725





From dominic.fox at gmail.com  Sun May 28 06:45:22 2006
From: dominic.fox at gmail.com (Dominic Fox)
Date: Sun, 28 May 2006 11:45:22 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
Message-ID: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>

I understand that twisted.flow is no longer maintained, and is not
widely considered to represent a good way of writing twisted code.
However, I haven't been able to find any explanation of why this
approach (using generators to simulate co-operative multitasking)
seems to have been abandoned.

Is it simply the case  that most people writing twisted code didn't
find it very useful? Or are there more specific arguments against
doing things that way?

I'm trying to make the case at work for using twisted for networking
things (in spite of my preference for lightweight threads plus
sensible concurrency primitives, if Python is the target platform then
twisted is probably the best way to go).

If I can show some full-threaded code next to some co-operative
multitasking code that a) has much the same sort of control flow, but
b) scales much better, and doesn't have to worry about subtle
concurrency issues, then I think it should go fairly well. If I have
to explain about how the event-driven programming model works at the
same time, it might not go *so* well...

Dominic



From p.mayers at imperial.ac.uk  Sun May 28 08:39:54 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 28 May 2006 13:39:54 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <44799A1A.3080204@imperial.ac.uk>

Dominic Fox wrote:
> I understand that twisted.flow is no longer maintained, and is not
> widely considered to represent a good way of writing twisted code.
> However, I haven't been able to find any explanation of why this
> approach (using generators to simulate co-operative multitasking)
> seems to have been abandoned.

Well, flow in particular had a very funny model. It did not seem 
straightforward to me at all.

> 
> Is it simply the case  that most people writing twisted code didn't
> find it very useful? Or are there more specific arguments against
> doing things that way?

I believe the general consensus with regards generator-based 
microthreads is that attempting to hide the fact you are doing 
asynchronous work behind a language trick is a Bad Thing(tm) in much the 
same way that RESTians believe layering RPC semantics over HTTP (or any 
WAN technology) is a bad thing, and for many of the same reasons.

In addition, though the concurrency issues are VASTLY reduced compared 
to pre-emptive threading, they do still exist. I've got caught out by them.

Pre python2.5 getting the data back into the generator either requires a 
global or a magic stack-traversing function which is of course nasty.

Finally, you have to work very hard pre-python2.5 to make the uthreads 
correctly handle all error cases.

> 
> I'm trying to make the case at work for using twisted for networking
> things (in spite of my preference for lightweight threads plus
> sensible concurrency primitives, if Python is the target platform then
> twisted is probably the best way to go).

I tend to think that lightweight threads really require first-class 
support from the VM, such as exists in Erlang, in order for them to be 
truly useful.

Were Erlang not such an ugly language I'd seriously consider switching 
to it. The more restricted model leads to all kinds of magic VM scaling 
goodness and the "right" (in my at least current opinion) way of writing 
such code is enshrined in the very architecture.

Had Stackless not been shot down (and for no particularly good reasons - 
"we'd have to port it to each platform" seems to have been the gist of 
it, plus some people rather disappointing and recurrent fear of the new) 
then I suspect Twisted would not exist in its current form.

w.r.t. "sensible" concurrency primitives, I've heard an Erlang expert 
relate: "Oh, we have two concurrency primitives. 'read' and 'write'", a 
position I support wholeheartedly.

All that said, the BBC Kamaelia project uses a generator-based 
consumer/producer pipeline as its underlying primitive, and seems to get 
along fine with it. But a consumer/producer component is not the same as 
a lightweight thread of course - broadly a c/p will only ever interact 
with its input, local variables, output and library calls. A thread 
might be expected to interact with other threads and shared data, from 
whence all difficulty springs.

It's also worth pointing out that Google uses a massively distributed 
c/p implementation called map-reduce to do much of their big work. A 
well-isolated generator-based c/p would be trivially parallel in much 
the same way.

> 
> If I can show some full-threaded code next to some co-operative
> multitasking code that a) has much the same sort of control flow, but
> b) scales much better, and doesn't have to worry about subtle
> concurrency issues, then I think it should go fairly well. If I have
> to explain about how the event-driven programming model works at the
> same time, it might not go *so* well...

I wrote a generator-based uthread thing over the top of twisted ages 
ago, on more or less the same rationale - other people would eventually 
be expected to write code for the system, and they would balk at or be 
unable to handle writing "true" async code.

This has not in fact been the case. Several of my colleagues have picked 
up the deferred/callback programming model with little difficulty.

Given that a similar system appears in MochiKit and web programmers 
appear to be able to pick it up and run with it in a *JavaScript* VM, 
perhaps we're underestimating people.

I will say three things:

  1. The name "Deferred" is tremendously unfortunate. I cannot begin to 
imagine why they weren't just called "Callback". The name seems to 
confuse people into thinking it does something it does not.

  2. The generator/uthread trick makes for tidier code because you can 
keep state in local variables. Using callbacks require you to pass a 
state object around and then prefix everything with a "state.varname" or 
worse "state['varname']" and the (frankly annoying) extra typing 
obviously leads to more scope for bugs as well as lower performance 
since local variable access is much faster.
  Sadly the "with" keyword just got used for something else (something 
else the language already had in fact. Oh well)

  3. I believe Deferreds as they currently exist are not very fast, and 
that's on top of the high cost of python function calls. Frequently we 
are told most processes are IO bound. That is very definitely not the 
case in my setup - I am SNMP polling 1200 devices every 5 minutes, 
sending an average of ~300-500 PDUs to each. With a bit of tuning, the 
CPU spins at about 90% usermode and 10% io/system.



From exarkun at divmod.com  Sun May 28 10:13:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 28 May 2006 10:13:23 -0400
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <20060528141323.28682.1809501099.divmod.quotient.6585@ohm>

On Sun, 28 May 2006 11:45:22 +0100, Dominic Fox <dominic.fox at gmail.com> wrote:
>I understand that twisted.flow is no longer maintained, and is not
>widely considered to represent a good way of writing twisted code.
>However, I haven't been able to find any explanation of why this
>approach (using generators to simulate co-operative multitasking)
>seems to have been abandoned.

Flow added a lot of complexity which served no great purpose.  Roughly
the same thing can be achieved in a tiny fraction of the code and API
size using twisted.internet.defer.deferredGenerator.

So it's not that the approach was abandoned, it's that a particular
implementation of it was abandoned.

I should also point out that Flow has almost nothing to do with
cooperative multitasking (and certainly nothing to do with
simulating it).  Twisted is a cooperative multitasking system at
the lowest level.  Everything you write with Twisted is an application
of cooperative multitasking.

Flow and Deferred Generators are different APIs for yielding
execution control, ones which often allow code which uses
asynchronous APIs to be written in a way which makes them appear
to be using synchronous APIs.

Inasmuch as this is misleading to readers, there is some debate
over whether or not it is a good idea at all.  However, Deferred
Generator is around and will be supported for some time.

Jean-Paul



From l.allegrucci at gmail.com  Sun May 28 15:02:07 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Sun, 28 May 2006 21:02:07 +0200
Subject: [Twisted-Python] reactor.connectSSL() error handling
Message-ID: <1148842927.9303.21.camel@localhost.localdomain>


Hi, I'm writing a distributed application using XML-RPC over SSL in
Twisted. I need mutual authentication (server and client) but the
XML-RPC Proxy in Twisted doesn't take any SSL context so I rewrote a
Proxy by myself passing my ClientContextFactory subclass to
reactor.connectSSL.
Everything works fine but now I need to handle some possible error
conditions that could prevent the connection, e.g wrong certificates,
incompatible ciphersuite etc. In other words, I would like to catch
these "exceptions" and handle them but I don't know how to do it in the
Twisted framework (using Deferred I guess..).  Any hint?
Thank you.





From ms at cerenity.org  Sun May 28 17:59:12 2006
From: ms at cerenity.org (Michael)
Date: Sun, 28 May 2006 22:59:12 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <44799A1A.3080204@imperial.ac.uk>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
	<44799A1A.3080204@imperial.ac.uk>
Message-ID: <200605282259.12952.ms@cerenity.org>

On Sunday 28 May 2006 13:39, Phil Mayers wrote:
...
> All that said, the BBC Kamaelia project uses a generator-based
> consumer/producer pipeline as its underlying primitive, and seems to get
> along fine with it. But a consumer/producer component is not the same as
> a lightweight thread of course - broadly a c/p will only ever interact
> with its input, local variables, output and library calls. A thread
> might be expected to interact with other threads and shared data, from
> whence all difficulty springs.

</delurk>

[ Since someone else raised us, I'd like to say a couple of things, since I
  think one is related to the conversation in hand, and the other is relevant
  to a conversation started at Europython last year about our work feeding
  into Twisted in a good way (ie a way useful to people using Twisted). ]

Hopefully both points are useful.

Given we're now churning out systems at work with Kamaelia which are getting
/close/ to what I'd be happy with as production systems, so it //seems// to
be working out OK so far as you say. One thing that's less obvious about
the term consumer producer (even though its correct) is people tend to
think pipelines, and many systems don't tend to be (we've invented the
term graphlines instead, for want of a better name).

As part of getting to that stage - getting back to why I was replying - as
well as pure generators, we also properly support threaded components now
(albeit with a couple of caveats). The only difference between those and
standard components is the baseclass you inherit from and the fact your
main method doesn't have a yield statement in it. Threaded components are
also useful for forcing true system quiescence. This also gives a fairly
simple migration route for code for integration.

This also means bridging sync and async worlds is pretty trivial - for example
a crappy interactive web-tester application can look like this: (would be
nicer to use sys.argv...)

pipeline(
   ConsoleReader(),                 # This uses raw_input in a thread.
   TCPClient("www.google.com", 80), # Async and uses a selector component
                                    # running in another thread so the
                                    # system can be quiescent
   ConsoleEchoer(),                 # Normal Async
).run()

(The reason TCPClient fires up a selector component is because it expects to
be in a situation where lots of networking stuff is happening. If it's not the
CPU/memory load addition is minimal)

There's more useful examples than the above, but I quite like the above
because of simplicity. (The system we've got for dumping DVB-T transport
streams, and transcoding them is much more fun, but longer winded :)

On the second point...

I think it's worth mentioning that our goal of trying to make it possible
to integrate our code with twisted by Europython this year was woefully
optimistic (we've been spending time on optimisations instead, which will
probably actually simplify integrating with twisted). (Integrating as in
"work well with", not as in "viewed as a good idea by everyone involved
with twisted :)" ) [[ Sorry Tommi, I know there were aspects you wanted to 
nick... :-( ]]

<relurk>

Best Regards,


Michael.
--
Michael Sparks, Senior Research Engineer, BBC Research, Technology Group
michael.sparks at rd.bbc.co.uk, Kamaelia Project Lead, http://kamaelia.sf.net/



From glyph at divmod.com  Mon May 29 01:37:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 01:37:30 -0400
Subject: [Twisted-Python] reactor.connectSSL() error handling
In-Reply-To: <1148842927.9303.21.camel@localhost.localdomain>
Message-ID: <20060529053730.28682.710963033.divmod.quotient.6955@ohm>



On Sun, 28 May 2006 21:02:07 +0200, Lorenzo Allegrucci <l.allegrucci at gmail.com> wrote:
>
>Hi, I'm writing a distributed application using XML-RPC over SSL in
>Twisted. I need mutual authentication (server and client) but the
>XML-RPC Proxy in Twisted doesn't take any SSL context so I rewrote a
>Proxy by myself passing my ClientContextFactory subclass to
>reactor.connectSSL.
>Everything works fine but now I need to handle some possible error
>conditions that could prevent the connection, e.g wrong certificates,
>incompatible ciphersuite etc. In other words, I would like to catch
>these "exceptions" and handle them but I don't know how to do it in the
>Twisted framework (using Deferred I guess..).  Any hint?
>Thank you.

SSL error handling is a weak area in Twisted.  It's been improving, but it is still poorly documented.  Perhaps you can motivate some further improvements :)

However, the method you can use to "catch" exceptions related to connecting (SSL or otherwise) is http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ClientFactory.clientConnectionFailed.html

HTH,

-glyph



From glyph at divmod.com  Mon May 29 01:41:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 01:41:30 -0400
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <4479018B.7060503@eepatents.com>
Message-ID: <20060529054130.28682.683636483.divmod.quotient.6957@ohm>



On Sat, 27 May 2006 18:48:59 -0700, Ed Suominen <general at eepatents.com> wrote:
>The dialogue copied below shows yet another example of the frustrations
>that arise when trying to bridge the chasm between Twisted and the
>synchronous rest of the world.
>
>This latest episode inspired the idea of a synchronous code fishbowl
>that offers well-behaved Twisted code a deferToQueue() method for
>running badly-behaved blocking code.
>
>See http://foss.eepatents.com/sAsync/browser/branches/syncbridge.py
>
>Comments?

syncbridge looks like an interesting module.  I've often wanted to do something similar, to have a "one right way" for integrating with non-async-clean legacy code which also doesn't necessarily support threaded concurrency either.

However, I notice that nothing sets up the 'shutdown' method to be called on reactor shutdown automatically; this is a very tricky area, since mismanaged thread-pool shutdown can lock a process up hard as it's exiting.

Also, have you considered just using a twisted.python.threadpool of maximum size 1, rather than callInThread?  The main reason I didn't document that as the aforementioned "one right way" was because of the associated shutdown issues.  The major advantage of callInThread is that the reactor's own threadpool is definitely initialized and shut down at predictable points.

HTH,

-glyph



From acapnotic at twistedmatrix.com  Mon May 29 11:51:52 2006
From: acapnotic at twistedmatrix.com (Grant)
Date: Mon, 29 May 2006 11:51:52 -0400
Subject: [Twisted-Python] pr0blems with meds expencies, you Are 0n right way
Message-ID: <80851065.20060529115152@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060529/d20b3c36/attachment.htm 

From zooko at zooko.com  Mon May 29 13:30:42 2006
From: zooko at zooko.com (zooko at zooko.com)
Date: Mon, 29 May 2006 14:30:42 -0300
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <20060529173042.B61FC198A@yumyum.zooko.com>


Mark Miller (whose recently completed dissertation is available [1]), recently
summarized in one sentence why event-based concurrency is safer than
cooperative multithreading.  He said (quoting from memory): "The difference is
that in an event-based system, when you invoke a function and the function
returns, then you know that the only side-effects that could have happened are
side-effects that *that* function was authorized to cause."

Regards,

Zooko

[1] http://erights.org/talks/thesis/index.html



From acapnotic at twistedmatrix.com  Mon May 29 08:18:45 2006
From: acapnotic at twistedmatrix.com (Adan)
Date: Mon, 29 May 2006 12:18:45 -0000
Subject: [Twisted-Python] prOblems with meds expencies, you Are On right way
Message-ID: <2034175.20060529121845@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060529/81dd172d/attachment.htm 

From ml.flex at gmail.com  Mon May 29 14:54:47 2006
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 29 May 2006 20:54:47 +0200
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <20060529173042.B61FC198A@yumyum.zooko.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
	<20060529173042.B61FC198A@yumyum.zooko.com>
Message-ID: <d27002d90605291154k3f6db867h7e88b890053cc730@mail.gmail.com>

Hmm, but it's precisely the same with python generators. If you yield, then
anything can happen by the time the function returns (same as with a
addCallback - anything can happen between adding the callback and the time
it's called). If you don't yield, but simply call a function, then only
those function's side effects can occur.

That's because a function called by a generator cannot yield on behalf of
that generator. I didn't appreciate that as a good thing until now, but now
I do.

On 29/05/06, zooko at zooko.com <zooko at zooko.com> wrote:
>
>
> Mark Miller (whose recently completed dissertation is available [1]),
> recently
> summarized in one sentence why event-based concurrency is safer than
> cooperative multithreading.  He said (quoting from memory): "The
> difference is
> that in an event-based system, when you invoke a function and the function
> returns, then you know that the only side-effects that could have happened
> are
> side-effects that *that* function was authorized to cause."
>
> Regards,
>
> Zooko
>
> [1] http://erights.org/talks/thesis/index.html
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060529/4ac3a954/attachment.htm 

From general at eepatents.com  Mon May 29 17:46:29 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon, 29 May 2006 14:46:29 -0700
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
Message-ID: <447B6BB5.6000208@eepatents.com>

Glyph wrote:
> syncbridge looks like an interesting module.  I've often wanted to do
> something similar, to have a "one right way" for integrating with
> non-async-clean legacy code which also doesn't necessarily support
> threaded concurrency either.
> 
> However, I notice that nothing sets up the 'shutdown' method to be
> called on reactor shutdown automatically; this is a very tricky area,
> since mismanaged thread-pool shutdown can lock a process up hard as
> it's exiting.
> 
> Also, have you considered just using a twisted.python.threadpool of
> maximum size 1, rather than callInThread?  The main reason I didn't
> document that as the aforementioned "one right way" was because of
> the associated shutdown issues.  The major advantage of callInThread
> is that the reactor's own threadpool is definitely initialized and
> shut down at predictable points.

Well of course, Glyph's "interesting module" comment was just enough of
a table scrap to get me running, tail wagging furiously. The result
(unit testing in progress) is a full-fledged SynchronousTasks object
that runs a priority queue of synchronous tasks with niceness
scheduling. See

* http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
* http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py

Once fully tested, would SynchronousTasks be considered as an addition
to twisted.internet.threads?

Best regards, Ed



From exarkun at divmod.com  Mon May 29 18:44:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 29 May 2006 18:44:01 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16956 - Branch for 2518bis
	updates.
In-Reply-To: <E1FkpkS-00088F-00@wolfwood>
Message-ID: <20060529224401.28682.2098193512.divmod.quotient.7232@ohm>

On Mon, 29 May 2006 15:58:04 -0600, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Mon May 29 15:58:03 2006
>New Revision: 16956
>
>Added:
>   branches/wsanchez/bis/
>      - copied from r16955, trunk/
>Log:
>Branch for 2518bis updates.
>

We've stopped using per-user directories in the branches hierarchy.  Also, all branch names should be of the form <short descriptive name>-<ticket number>.

See http://divmod.org/trac/wiki/UltimateQualityDevelopmentSystem for documentation on the procedure that should be used for all Twisted development.

Jean-Paul




From glyph at divmod.com  Mon May 29 20:10:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 20:10:10 -0400
Subject: svn maintenance,
	trac permissions (was Re: [Twisted-Python] Sydney Sprint)
In-Reply-To: <20060523013626.GD2204@steerpike.home.puzzling.org>
Message-ID: <20060530001010.28682.1106589697.divmod.quotient.7268@ohm>

On Tue, 23 May 2006 11:36:26 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
>> I'm a little bit concerned about attendance for the June 3-4 Sydney
>> Sprint. The wiki page only lists two people:
>> http://twistedmatrix.com/trac/wiki/SydneySprint
>>
>> Unfortunately that page requires a trac login with edit permissions to
>> change, so I'm afraid some people have been unable to add themselves to
>> the list.
>
>Yep, that includes me.

Hmm.  Can everyone who should have wiki edit permissions please complain so that someone who knows how to add those will add them?  I've created a ticket, #1761, that you can all comment on to request them.

>> Would everyone attending be kind enough to reply to this thread?
>
>I'll be there, and so will Mary.

If I could make a request for the focus of this sprint:

There are a *LOT* of dead or dying branches in /branches, and a lot of tickets which have been outstanding for a very long time.  I'd appreciate it if everyone would focus some effort on killing off old branches, and resolving old tickets.  In particular I'd like to get rid of all old user directories and branches which do not include ticket numbers in their names; tracking down the status of those branches is always a pain.

I've gone through most of these and removed the ones whose tickets had already been resolved or were clearly merged already, but there are still a lot left, and I am missing lots of information.

If some folks are going to do this, I'll try to participate remotely in the sprint so if there are some required judgement calls I can make them ASAP rather than just sticking more questions in the tracker and waiting.

Obviously it's more fun to work on new functionality than this kind of maintenance, so no worries if you have specific plans and won't be doing this.  Still, I'd like it if our users could look at /branches and see only a list of things that were actually being worked on presently, rather than a bunch of one-off ideas which may or may not be active, from five days to two years ago.  It would also be easier to try to coordinate and plan releases.

I will more urgently request that this sprint not leave any *new*, unreviewed branches hanging around.  Again, I'll try to be available to do reviews so we don't create even more stagnant branches / tickets.

How do those of you who will be attending feel about this?



From jml at mumak.net  Mon May 29 20:17:34 2006
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 30 May 2006 10:17:34 +1000
Subject: svn maintenance,
	trac permissions (was Re: [Twisted-Python] Sydney Sprint)
In-Reply-To: <20060530001010.28682.1106589697.divmod.quotient.7268@ohm>
References: <20060523013626.GD2204@steerpike.home.puzzling.org>
	<20060530001010.28682.1106589697.divmod.quotient.7268@ohm>
Message-ID: <d06a5cd30605291717k32957699pd6ab82ef7496ed87@mail.gmail.com>

On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> Obviously it's more fun to work on new functionality than this kind of maintenance, so no worries if you have specific plans and won't be doing this.  Still, I'd like it if our users could look at /branches and see only a list of things that were actually being worked on presently, rather than a bunch of one-off ideas which may or may not be active, from five days to two years ago.  It would also be easier to try to coordinate and plan releases.
>
> I will more urgently request that this sprint not leave any *new*, unreviewed branches hanging around.  Again, I'll try to be available to do reviews so we don't create even more stagnant branches / tickets.
>
> How do those of you who will be attending feel about this?
>

Fine in principle.  However, as far as refactoring wait out of Trial,
well, my conviction is an arrow already in flight. I don't want to
underestimate the difficulty of that task and promise you something
that I won't be able to give.

That said,  I will try to spend some time cleaning up branches and the like.

jml



From matt at pollenation.net  Mon May 29 20:19:20 2006
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 30 May 2006 01:19:20 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447B6BB5.6000208@eepatents.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
	<447B6BB5.6000208@eepatents.com>
Message-ID: <447B8F88.9030907@pollenation.net>

Ed Suominen wrote:
> Glyph wrote:
>> syncbridge looks like an interesting module.  I've often wanted to do
>> something similar, to have a "one right way" for integrating with
>> non-async-clean legacy code which also doesn't necessarily support
>> threaded concurrency either.
[...]
> 
> Well of course, Glyph's "interesting module" comment was just enough of
> a table scrap to get me running, tail wagging furiously. The result
> (unit testing in progress) is a full-fledged SynchronousTasks object
> that runs a priority queue of synchronous tasks with niceness
> scheduling. See
> 
> * http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
> * http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py
> 
> Once fully tested, would SynchronousTasks be considered as an addition
> to twisted.internet.threads?

Just scanned through that module and the idea looks useful to me too.

In fact, AFAICT, it's basically the same technique I used for laxdb, 
<http://twistedmatrix.com/trac/browser/sandbox/mg/laxdb.py>.

One small comment, and it's totally untested ... I don't think an 
already empty SynchronousQueue can be shutdown because nothing will wake 
the processing loop in _workOnTasks.


- Matt


-- 
      __
     /  \__     Matt Goodall, Pollenation Internet Ltd
     \__/  \    w: http://www.pollenation.net
   __/  \__/    e: matt at pollenation.net
  /  \__/  \    t: +44 (0)113 2252500
  \__/  \__/
  /  \	       Any views expressed are my own and do not necessarily
  \__/          reflect the views of my employer.



From nealie at kobudo.homeunix.net  Tue May 30 05:12:09 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 11:12:09 +0200
Subject: [Twisted-Python] Upgrade Questions
Message-ID: <1148980329.1912.17.camel@server.home>

I'm in the process of upgrading the FreeBSD port of TwistedCore and I
have a couple of questions:

- The source distribution used to be hosted both on the
twistedmatrix.com and tmrc.mit.edu sites. It only seems to be on the
latter now. Is this true or is there another site I can add to the list
of master sites since it's always nice to allow the port system to try
other sites if one is down?

- There seems to be a problem while performing the install_lib phase of
the installation during byte compiling. I get the following:

byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
  File
"/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
    ???
    ^
SyntaxError: invalid syntax

There actually appears to be a "???" on this line.

Regards,

Neal Nelson.




From nealie at kobudo.homeunix.net  Tue May 30 05:42:55 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 11:42:55 +0200
Subject: [Twisted-Python] Another upgrade question: PB
Message-ID: <1148982175.1912.27.camel@server.home>

I have another quick question about the new 2.4.0 release of
TwistedCore: What happened to the pb directory and it's contents as it
seems to have been removed from the distribution? Should I be worrying
about this?

Regards,

Neal Nelson.




From dominic.fox at gmail.com  Tue May 30 08:13:47 2006
From: dominic.fox at gmail.com (Dominic Fox)
Date: Tue, 30 May 2006 12:13:47 +0000
Subject: [Twisted-Python] Re: Flow, generators, coroutines etc.
Message-ID: <f278b2130605300513u18ab59dfn5a0acf4ff26acc2@mail.gmail.com>

This just in...

http://lambda-the-ultimate.org/node/1520

"Narrative Javascript is an extension to Javascript that adds an
operator to convert asynchronous operations into synchronous ones. It
has a compiler that compiles the extended Javascript into normal
Javascript."

Dominic



From itamar at itamarst.org  Tue May 30 08:19:08 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 08:19:08 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148980329.1912.17.camel@server.home>
References: <1148980329.1912.17.camel@server.home>
Message-ID: <1148991548.5483.3.camel@localhost.localdomain>

On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:

> - There seems to be a problem while performing the install_lib phase of
> the installation during byte compiling. I get the following:
> 
> byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
>   File
> "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
>     ???
>     ^
> SyntaxError: invalid syntax

I think this is fixed in trunk.

Channeling James, who is off on his honeymoon: we should have release
candidates.





From nealie at kobudo.homeunix.net  Tue May 30 08:34:49 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 14:34:49 +0200
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148991548.5483.3.camel@localhost.localdomain>
References: <1148980329.1912.17.camel@server.home>
	<1148991548.5483.3.camel@localhost.localdomain>
Message-ID: <1148992489.1912.69.camel@server.home>

On Tue, 2006-05-30 at 08:19 -0400, Itamar Shtull-Trauring wrote:
> On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:
> 
> > - There seems to be a problem while performing the install_lib phase of
> > the installation during byte compiling. I get the following:
> > 
> > byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
> >   File
> > "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
> >     ???
> >     ^
> > SyntaxError: invalid syntax
> 
> I think this is fixed in trunk.
> 
> Channeling James, who is off on his honeymoon: we should have release
> candidates.

I suppose what I need to know is: will there be a fixed release or
should I just go and submit my port changes and live with the error so
that people using FreeBSD can use it?




From radix at twistedmatrix.com  Tue May 30 08:47:51 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 08:47:51 -0400
Subject: [Twisted-Python] Another upgrade question: PB
In-Reply-To: <1148982175.1912.27.camel@server.home>
References: <1148982175.1912.27.camel@server.home>
Message-ID: <60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>

On 5/30/06, Nealie <nealie at kobudo.homeunix.net> wrote:
> I have another quick question about the new 2.4.0 release of
> TwistedCore: What happened to the pb directory and it's contents as it
> seems to have been removed from the distribution? Should I be worrying
> about this?

twisted.pb was not meant to be included in the last release, as it is
still experimental. Separate releases of PB will be made until it is
deemed ready to be packaged with the main Twisted release, and one has
already been made. Another one needs to go out soon for compatibility
with 2.4.0; keep your eyes peeled.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From radix at twistedmatrix.com  Tue May 30 08:59:50 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 08:59:50 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148991548.5483.3.camel@localhost.localdomain>
References: <1148980329.1912.17.camel@server.home>
	<1148991548.5483.3.camel@localhost.localdomain>
Message-ID: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>

On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:
>
> > - There seems to be a problem while performing the install_lib phase of
> > the installation during byte compiling. I get the following:
> >
> > byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
> >   File
> > "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
> >     ???
> >     ^
> > SyntaxError: invalid syntax
>
> I think this is fixed in trunk.
>
> Channeling James, who is off on his honeymoon: we should have release
> candidates.

An RC would not have mattered; a highest-priority bug would have. This
was known even as we were doing the release, but was deemed
unimportant.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From exarkun at divmod.com  Tue May 30 09:02:45 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 09:02:45 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16970 - removed a bunch of
 deprecations but
 then realized I didn't want to spend the last 30 minutes of the
 day working on this
In-Reply-To: <E1FkuqL-0008Md-00@wolfwood>
Message-ID: <20060530130245.28682.1812769441.divmod.quotient.7518@ohm>

On Mon, 29 May 2006 21:24:29 -0600, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
>Author: glyph
>Date: Mon May 29 21:24:28 2006
>New Revision: 16970
>
>Modified:
> [snip]
>   branches/killtpc-1636/twisted/spread/banana.py
>   branches/killtpc-1636/twisted/test/test_banana.py
> [snip]
>Log:
>removed a bunch of deprecations but then realized I didn't want to spend the last 30 minutes of the day working on this
>
> [snip]
>Modified: branches/killtpc-1636/twisted/spread/banana.py
>==============================================================================
>--- branches/killtpc-1636/twisted/spread/banana.py	(original)
>+++ branches/killtpc-1636/twisted/spread/banana.py	Mon May 29 21:24:28 2006
>@@ -255,20 +255,21 @@
>             write(LIST)
>             for elem in obj:
>                 self._encode(elem, write)
>-        elif isinstance(obj, types.IntType):
>-            if obj >= 0:
>-                int2b128(obj, write)
>-                write(INT)
>+        elif isinstance(obj, (types.IntType, types.LongType)):
>+            aobj = abs(obj)
>+            if aobj < (2**32): # this is lame, but it's what the protocol
>+                               # spec says.
>+                if obj >= 0:
>+                    typebyte = INT
>+                else:
>+                    typebyte = NEG
>             else:
>-                int2b128(-obj, write)
>-                write(NEG)
>-        elif isinstance(obj, types.LongType):
>-            if obj >= 0l:
>-                int2b128(obj, write)
>-                write(LONGINT)
>-            else:
>-                int2b128(-obj, write)
>-                write(LONGNEG)
>+                if obj >= 0:
>+                    typebyte = LONGINT
>+                else:
>+                    typebyte = LONGNEG
>+            int2b128(aobj, write)
>+            write(typebyte)
>         elif isinstance(obj, types.FloatType):
>             write(FLOAT)
>             write(struct.pack("!d", obj))
>
> [snip]
>Modified: branches/killtpc-1636/twisted/test/test_banana.py
>==============================================================================
>--- branches/killtpc-1636/twisted/test/test_banana.py	(original)
>+++ branches/killtpc-1636/twisted/test/test_banana.py	Mon May 29 21:24:28 2006
>@@ -134,7 +134,21 @@
>         self.enc.dataReceived(self.io.getvalue())
>         assert self.result == -2147483648, "should be -2147483648, got %s" % self.result
>
>-
>+    def _roundtrip(self, value):
>+        self.io.seek(0)
>+        self.io.truncate()
>+        self.enc.sendEncoded(value)
>+        self.enc.dataReceived(self.io.getvalue())
>+        return self.result
>+
>+    def testSizedIntegerTypes(self):
>+        # use int to decode int, long to decode long.
>+        self.assertEquals(type(self._roundtrip(2l)), int)
>+        # this should always come back as a 'long' even on 64-bit platforms,
>+        # because it was encoded that way.  Kind of a lame test, but at least
>+        # it makes sure that <64bit numbers won't be encoded as INT...
>+        self.assertEquals(type(self._roundtrip(2**35)), long)
>+
> testCases = [MathTestCase, BananaTestCase]
>
> try:
>

These changes don't look like the others.



From exarkun at divmod.com  Tue May 30 09:04:22 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 09:04:22 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16971 - Fix name conflict
 between conch and legacy manhole plugins.
In-Reply-To: <E1Fkuwn-0008NS-00@wolfwood>
Message-ID: <20060530130422.28682.1337174147.divmod.quotient.7520@ohm>

On Mon, 29 May 2006 21:31:09 -0600, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
>Author: glyph
>Date: Mon May 29 21:31:08 2006
>New Revision: 16971
>
>Modified:
>   trunk/twisted/plugins/twisted_manhole.py
>Log:
>Fix name conflict between conch and legacy manhole plugins.
>
>'mktap manhole' would non-deterministically give you a different plugin
>sometimes, due to the fact that the old manhole tap plugin had the same name.
>
>This changes the old manhole plugin's name to "manhole-old", since the title
>already said (old).  This fixes the name conflict.
>

Author!  Reviewer!  Ticket number!

Jean-Paul



From moof at metamoof.net  Tue May 30 09:06:22 2006
From: moof at metamoof.net (Moof)
Date: Tue, 30 May 2006 15:06:22 +0200
Subject: [Twisted-Python] Another upgrade question: PB
In-Reply-To: <60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>
References: <1148982175.1912.27.camel@server.home>
	<60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>
Message-ID: <bff8eeef0605300606t69687726jc7a4af28fcef4a8a@mail.gmail.com>

On 5/30/06, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> On 5/30/06, Nealie <nealie at kobudo.homeunix.net> wrote:
> > I have another quick question about the new 2.4.0 release of
> > TwistedCore: What happened to the pb directory and it's contents as it
> > seems to have been removed from the distribution? Should I be worrying
> > about this?
>
> twisted.pb was not meant to be included in the last release, as it is
> still experimental. Separate releases of PB will be made until it is
> deemed ready to be packaged with the main Twisted release, and one has
> already been made. Another one needs to go out soon for compatibility
> with 2.4.0; keep your eyes peeled.

You can keep using the old vesion of pb in twisted.spread.pb, as
twisted.pb is still not stable.

Moof



From scalet at yebu.de  Tue May 30 11:05:08 2006
From: scalet at yebu.de (scalet at yebu.de)
Date: Tue, 30 May 2006 17:05:08 +0200 (CEST)
Subject: [Twisted-Python] twisted and PyQt4
Message-ID: <27393.80.246.32.40.1149001508.squirrel@yebu.de>

Hi,

it seems to me, there is no reactor for PyQt4 yet.
What is the preferred way to have a PyQt4 application
using the famous twisted framework for networking.

Thanks for any hints.

Karl





From exarkun at divmod.com  Tue May 30 11:24:11 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 11:24:11 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <27393.80.246.32.40.1149001508.squirrel@yebu.de>
Message-ID: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>

On Tue, 30 May 2006 17:05:08 +0200 (CEST), scalet at yebu.de wrote:
>Hi,
>
>it seems to me, there is no reactor for PyQt4 yet.
>What is the preferred way to have a PyQt4 application
>using the famous twisted framework for networking.
>
>Thanks for any hints.

Someone will have to write one.  Qt4 has numerous improvements which
should make it possible to write a reasonable reactor, instead of a
shambling horror (like the existing Qt reactor).

However, I don't use Qt myself, and I don't know any Twisted developers
who do.  If there are a sufficient number of Twisted users who are
interested in this, it may be possible to add support.  One way of
demonstrating that there is enough interest would be to have someone
donate a buildslave to run tests with Qt.  This would be easier for
PyQt4 than it is for the current Qt reactor, since PyQt4 won't
necessarily require an X11 server to run the test suite.

Jean-Paul



From matt at pollenation.net  Tue May 30 11:31:42 2006
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 30 May 2006 16:31:42 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447B6BB5.6000208@eepatents.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
	<447B6BB5.6000208@eepatents.com>
Message-ID: <447C655E.2060400@pollenation.net>

Ed Suominen wrote:

> Well of course, Glyph's "interesting module" comment was just enough of
> a table scrap to get me running, tail wagging furiously. The result
> (unit testing in progress) is a full-fledged SynchronousTasks object
> that runs a priority queue of synchronous tasks with niceness
> scheduling. See
> 
> * http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
> * http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py

I was going to post again last night about how the PriorityQueue.get()
would never block once something had been put() into it, but I see
you've fixed that bug by clearing the event semaphore. Unfortunately,
the code now has a race condition.

If the SynchronousQueue._workOnTasks thread is pre-empted in
PriorityQueue.get() between "if self.empty():" and "self.event.clear()",
and another thread calls PriorityQueue.put() then the event semaphore
set during put() will be cleared when get() continues.

OK, that was horrible to write so here's a picture instead ;-) ...

Thread 1                                Thread 2

# Calls get()
self.event.wait()
result = heapq.heappop(self.list)
if self.empty():

<------------------ Thread 2 preempts Thread 1 ---------------------->

                                       # Calls put()
                                       heapq.heappush(self.list, item)
                                       self.event.set()

<---------------------- Thread 1 continues -------------------------->

    self.event.clear()


PriorityQueue should probably be using a Condition to protect access to
the heapq list *and* wait for something to be posted to it. See
<http://docs.python.org/lib/condition-objects.html>.


Cheers, Matt


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From glyph at divmod.com  Tue May 30 12:09:50 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:09:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16970 - removed a bunch of
In-Reply-To: <20060530130245.28682.1812769441.divmod.quotient.7518@ohm>
Message-ID: <20060530160950.28682.525688745.divmod.quotient.7637@ohm>

On Tue, 30 May 2006 09:02:45 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Mon, 29 May 2006 21:24:29 -0600, Glyph Lefkowitz 
><glyph at wolfwood.twistedmatrix.com> wrote:

>These changes don't look like the others.

Yeah, I noticed that after I checked in, but those already got attached as a patch to a different ticket.  I'm sure they'll be removed in some forward merge, or after review.



From glyph at divmod.com  Tue May 30 12:12:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:12:27 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16971 - Fix name conflict
In-Reply-To: <20060530130422.28682.1337174147.divmod.quotient.7520@ohm>
Message-ID: <20060530161227.28682.144485516.divmod.quotient.7638@ohm>



On Tue, 30 May 2006 09:04:22 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Author!  Reviewer!  Ticket number!

Hmm.  I could swear I put those in the commit message, maybe I put them below some fateful line?

I've updated the ticket to note that revision.

Author: glyph
Reviewer: moonfallen
Fixes #1658




From glyph at divmod.com  Tue May 30 12:14:04 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:14:04 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
Message-ID: <20060530161404.28682.413529033.divmod.quotient.7640@ohm>

On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>>Channeling James, who is off on his honeymoon: we should have release
>>candidates.

>An RC would not have mattered; a highest-priority bug would have. This
>was known even as we were doing the release, but was deemed
>unimportant.

An RC would have given the packager an opportunity to complain about this and increase the priority of the bug to highest.  I agree with james-via-itamar.



From rudy at goldenhelix.com  Tue May 30 12:14:45 2006
From: rudy at goldenhelix.com (Gabe Rudy)
Date: Tue, 30 May 2006 10:14:45 -0600
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
Message-ID: <200605301014.45911.rudy@goldenhelix.com>

> Someone will have to write one.  Qt4 has numerous improvements which
> should make it possible to write a reasonable reactor, instead of a
> shambling horror (like the existing Qt reactor).

I use twisted with a pyQt4 app, so I created a more or less functional port of 
the current qt recator to qt4. I have attached it for anybody who needs a 
quick fix, but I don't claim to have taken advantage of Qt4's cleaner 
architecture and many improvements but I have tested it on both windows and 
linux and it seems to work ok. You are right that there should be a GUI and 
non-GUI qt4 reactor options and it may not even be that hard to code if 
someone has the time and the tests.

--gabe
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qt4reactor.py
Type: application/x-python
Size: 5201 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060530/44702803/attachment.bin 

From radix at twistedmatrix.com  Tue May 30 12:40:42 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 12:40:42 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <20060530161404.28682.413529033.divmod.quotient.7640@ohm>
References: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
	<20060530161404.28682.413529033.divmod.quotient.7640@ohm>
Message-ID: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>

On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>
> >>Channeling James, who is off on his honeymoon: we should have release
> >>candidates.
>
> >An RC would not have mattered; a highest-priority bug would have. This
> >was known even as we were doing the release, but was deemed
> >unimportant.
>
> An RC would have given the packager an opportunity to complain about this and increase the priority of the bug to highest.  I agree with james-via-itamar.

Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
Neal, you should ignore this harmless error.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From eprparadocs at gmail.com  Tue May 30 12:51:51 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Tue, 30 May 2006 12:51:51 -0400
Subject: [Twisted-Python] Shutting down an XMLRPC server remotely - how?
In-Reply-To: <4479018B.7060503@eepatents.com>
References: <4479018B.7060503@eepatents.com>
Message-ID: <447C7827.60008@gmail.com>

I am rather new to Twisted. I am starting to build my first XMLRPC
server and would like a way to shut it down remotely. Is there a way to
do that?

TIA,
Chaz



From scalet at yebu.de  Tue May 30 12:52:28 2006
From: scalet at yebu.de (scalet at yebu.de)
Date: Tue, 30 May 2006 18:52:28 +0200 (CEST)
Subject: [Twisted-Python] twisted and PyQt4
Message-ID: <29878.80.246.32.40.1149007948.squirrel@yebu.de>

Hi Gabe,

thank you very much for the modified qtreactor

and jp for the answer

Karl





From glyph at divmod.com  Tue May 30 13:05:15 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 13:05:15 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
Message-ID: <20060530170515.28682.1040635737.divmod.quotient.7680@ohm>



On Tue, 30 May 2006 12:40:42 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:

>Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
>Neal, you should ignore this harmless error.

OK.  Perhaps all an RC would have done in this case would have allowed this *particular* exchange to take place pre-release :).  Still, we should have 'em.



From itamar at itamarst.org  Tue May 30 14:19:42 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 14:19:42 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301014.45911.rudy@goldenhelix.com>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
Message-ID: <1149013182.5737.4.camel@localhost.localdomain>

On Tue, 2006-05-30 at 10:14 -0600, Gabe Rudy wrote:
> > Someone will have to write one.  Qt4 has numerous improvements which
> > should make it possible to write a reasonable reactor, instead of a
> > shambling horror (like the existing Qt reactor).
> 
> I use twisted with a pyQt4 app, so I created a more or less functional port of 
> the current qt recator to qt4. I have attached it for anybody who needs a 
> quick fix, but I don't claim to have taken advantage of Qt4's cleaner 
> architecture and many improvements but I have tested it on both windows and 
> linux and it seems to work ok. You are right that there should be a GUI and 
> non-GUI qt4 reactor options and it may not even be that hard to code if 
> someone has the time and the tests.

Cool! Could you please open an issue in the tracker with this attached?




From itamar at itamarst.org  Tue May 30 14:40:10 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 14:40:10 -0400
Subject: [Twisted-Python] Shutting down an XMLRPC server remotely - how?
In-Reply-To: <447C7827.60008@gmail.com>
References: <4479018B.7060503@eepatents.com>  <447C7827.60008@gmail.com>
Message-ID: <1149014411.5737.8.camel@localhost.localdomain>

On Tue, 2006-05-30 at 12:51 -0400, Chaz. wrote:
> I am rather new to Twisted. I am starting to build my first XMLRPC
> server and would like a way to shut it down remotely. Is there a way to
> do that?

Add an xml-rpc command called e.g. "shutdown" that does reactor.stop(). 

-- 
Itamar Shtull-Trauring
http://itamarst.org





From golux at comcast.net  Tue May 30 16:12:46 2006
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 30 May 2006 16:12:46 -0400
Subject: [Twisted-Python] PB and other distributed object protocols
Message-ID: <447CA73E.5090705@comcast.net>

Hi Gang,

Preface:  I'm not a protocol guru, or even a "distributed object" (DO)
guru, so this message is from the point of view of a DO novice looking for
insights from some of the twisted minions (/gurus) and other cybergods
who hang out here.

I've been monitoring Brian's work on newpb (PBng?), and I love
everything about it.  Except how long it's taking.  :(

Brian:  I know you have a real job, too, so I completely understand!
(Incidentally, you're the only one whose commit messages I save,
because they're always so well documented.)  I've read the TODO list,
and pretty much everything is beyond my abilities (and time) to
contribute to -- sorry! -- but is it possible to put any kind of
approximate timeline on some of it?

PB is what I really want to use for my project, but I need something
that's close to ready-for-prime-time, and I've been waiting literally
years for PB, so in the meantime I'm looking at other candidates.
I would definitely prefer a "twistable" technology -- i.e., one for
which some kind of async adapter can be written from twisted -- and
also one that has bindings for other languages (mainly Java, since
my organization is Java-heavy).

I've dismissed the idea of CORBA -- although one or more
of the python orbs is probably twistable, CORBA has such a negative
image that I'd probably have to lie about using it, and it does
have lots of weird baggage.

[Aside:  I always liked Bill Janssen's ILU (how could you not like a
distributed object system that had bindings for both python and
lisp??) and I was sad to see it go.  Interesting that Bill is
now in the Python community.]

Over the weekend I read the docs for ICE (http://www.zeroc.com/),
sort of a streamlined, WAN-optimized CORBA.  It has nice features,
and even support for (threaded) async operations which seems
(to my novice understanding) twistable.  But its type system and
python binding seem very unpythonic to me, based on lots of C++-isms,
etc.  Ugh.

I just today discovered "json-rpc", which looks pretty cool.
I currently use xml-rpc in my twisted app, and I've thought that
json would be a neat replacement for xml (more concise + very
pythonic syntax so probably *way* more efficient python
marshalling/unmarshalling).  And someone finally did it -- great!
Has anyone here experimented with it?  Anyone thought
about twistifying it?  If not, I might take a stab (I'd start
by looking at what Itamar [I think] did with xml-rpc).

Cheers,
Steve



From rudy at goldenhelix.com  Tue May 30 17:13:30 2006
From: rudy at goldenhelix.com (Gabe Rudy)
Date: Tue, 30 May 2006 15:13:30 -0600
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <1149013182.5737.4.camel@localhost.localdomain>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
	<1149013182.5737.4.camel@localhost.localdomain>
Message-ID: <200605301513.31116.rudy@goldenhelix.com>

> Cool! Could you please open an issue in the tracker with this attached?
>

Alright it's ticket #1770 [1], although I must admit that I have lost a bit of 
confidence in the cacual coders (me) ability to contribute to Twisted as my 
previous attempt to post a patch[2] has been wholly ignored for a month, even 
after a bit of nagging. Maybe this is just the timeline in which people get 
around to things, or maybe this is a symptom to the everything has a 
branch/review/merge methodology.

[1] http://twistedmatrix.com/trac/ticket/1770
[2] http://twistedmatrix.com/trac/ticket/1324



From radix at twistedmatrix.com  Tue May 30 19:13:46 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 19:13:46 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301513.31116.rudy@goldenhelix.com>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
	<1149013182.5737.4.camel@localhost.localdomain>
	<200605301513.31116.rudy@goldenhelix.com>
Message-ID: <60ed19d40605301613n74108928x6727fa2b2c9a8fce@mail.gmail.com>

On 5/30/06, Gabe Rudy <rudy at goldenhelix.com> wrote:
> Alright it's ticket #1770 [1], although I must admit that I have lost a bit of
> confidence in the cacual coders (me) ability to contribute to Twisted as my
> previous attempt to post a patch[2] has been wholly ignored for a month, even
> after a bit of nagging. Maybe this is just the timeline in which people get
> around to things, or maybe this is a symptom to the everything has a
> branch/review/merge methodology.


Trust me, ticket response time has improved a *lot* since we've
switched to this development model. If we haven't responded to
previous tickets, it's because a) no developers with the expertise
required were available for review; b) the change is controversial or
incorrect, or c) the change didn't include sufficient unit tests.

Besides, I'm not sure why you're mentioning this, as you don't even
seem to be suggesting we include your qt reactor in Twisted since it's
untested and not using the new qt4 techniques. Or are you?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Tue May 30 19:31:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:31:30 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301513.31116.rudy@goldenhelix.com>
Message-ID: <20060530233130.28682.167195106.divmod.quotient.7929@ohm>

On Tue, 30 May 2006 15:13:30 -0600, Gabe Rudy <rudy at goldenhelix.com> wrote:
>> Cool! Could you please open an issue in the tracker with this attached?
>>
>
>Alright it's ticket #1770 [1], although I must admit that I have lost a bit of
>confidence in the cacual coders (me) ability to contribute to Twisted as my
>previous attempt to post a patch[2] has been wholly ignored for a month, even
>after a bit of nagging. Maybe this is just the timeline in which people get
>around to things, or maybe this is a symptom to the everything has a
>branch/review/merge methodology.

>[1] http://twistedmatrix.com/trac/ticket/1770
>[2] http://twistedmatrix.com/trac/ticket/1324

My apologies.  These both look like pretty good reports and they should be reviewed soon.

As far as the process being the bottleneck - it's not the process, we just don't have enough manpower.  There are currently 619 open tickets in Twisted, and only 11 maintainers.  We're overwhelmed.  New tickets can't always get the attention they deserve.  This isn't particular to Twisted's process - your tickets would require review in pretty much any open source project.

(BTW, reviewers; if you are reviewing patches from external contributors, you *don't* need to create branches first.  If the branch passes review, simply comment on the ticket and reference it in the commit message.)

The easiest way to get a branch reviewed is to look for a reviewer on #twisted on Freenode in real-time.  If you make a point of mentioning that your code already includes test-cases, it will probably get reviewed faster.

If you want to get your contributed feature-additions to get reviewed and merged REALLY fast, go through the tracker and write patches which fix existing bugs for a while.  You will have dedicated maintainers practically at your beck and call ;).



From glyph at divmod.com  Tue May 30 19:35:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:35:11 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <60ed19d40605301613n74108928x6727fa2b2c9a8fce@mail.gmail.com>
Message-ID: <20060530233511.28682.1939829893.divmod.quotient.7933@ohm>



On Tue, 30 May 2006 19:13:46 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:

>Trust me, ticket response time has improved a *lot* since we've
>switched to this development model.

That certainly seems to be the case, at least subjectively speaking - do we actually have any metrics on this though?  It'd be kind of neat to plot a graph.

>If we haven't responded to
>previous tickets, it's because a) no developers with the expertise
>required were available for review; b) the change is controversial or
>incorrect, or c) the change didn't include sufficient unit tests.

Generally it's (a), or that the ticket didn't even get noticed.  Trac generates a nonstop flood of email to dozens of people and I'm sure most of it gets deleted without being read.

>Besides, I'm not sure why you're mentioning this, as you don't even
>seem to be suggesting we include your qt reactor in Twisted since it's
>untested and not using the new qt4 techniques. Or are you?

He has *another* ticket which didn't get merged... (it has test cases even).  It was itamar who requested he put the qt stuff into the tracker.



From glyph at divmod.com  Tue May 30 19:37:55 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:37:55 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <20060530233130.28682.167195106.divmod.quotient.7929@ohm>
Message-ID: <20060530233755.28682.481462361.divmod.quotient.7934@ohm>



On Tue, 30 May 2006 19:31:30 -0400, glyph at divmod.com wrote:

>If the branch passes review, 

D'oh.  Patch.  If the *patch* passes review.



From phil at bubblehouse.org  Wed May 31 00:16:12 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 31 May 2006 00:16:12 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
References: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
	<20060530161404.28682.413529033.divmod.quotient.7640@ohm>
	<60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
Message-ID: <B03CBB64-C3CE-400F-A2D2-570B3BF1FE93@bubblehouse.org>

On May 30, 2006, at 12:40 PM, Christopher Armstrong wrote:
> On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>> On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong  
>> <radix at twistedmatrix.com> wrote:
>> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> An RC would have given the packager an opportunity to complain  
>> about this and increase the priority of the bug to highest.  I  
>> agree with james-via-itamar.
>
> Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
> Neal, you should ignore this harmless error.

I would like to interject about a potential issue here, that I  
mentioned in ticket #1740.

This typo prevents debian systems from byte-compiling the site  
packages directory during APT's installation process. This in turn  
prevents python-related packages from being installed sucessfully  
until the typo is removed.

Personally, I run into this issue constantly, and I know that if I  
had encountered it when I wasn't as familiar with debian, I could  
have spent a lot of time trying to figure it out.

just my two cents...

-phil



From exarkun at divmod.com  Wed May 31 01:58:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 May 2006 01:58:23 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <B03CBB64-C3CE-400F-A2D2-570B3BF1FE93@bubblehouse.org>
Message-ID: <20060531055823.28682.101710531.divmod.quotient.8173@ohm>

On Wed, 31 May 2006 00:16:12 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>On May 30, 2006, at 12:40 PM, Christopher Armstrong wrote:
>>On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>>>On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong 
>>><radix at twistedmatrix.com> wrote:
>>> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>>>An RC would have given the packager an opportunity to complain  about this 
>>>and increase the priority of the bug to highest.  I  agree with james-via- 
>>>itamar.
>>
>>Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
>>Neal, you should ignore this harmless error.
>
>I would like to interject about a potential issue here, that I  mentioned in 
>ticket #1740.
>
>This typo prevents debian systems from byte-compiling the site  packages 
>directory during APT's installation process. This in turn  prevents python- 
>related packages from being installed sucessfully  until the typo is 
>removed.
>
>Personally, I run into this issue constantly, and I know that if I  had 
>encountered it when I wasn't as familiar with debian, I could  have spent a 
>lot of time trying to figure it out.
>
>just my two cents...
>
>-phil
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From igor at tyumbit.ru  Wed May 31 04:30:27 2006
From: igor at tyumbit.ru (Igor Prischepoff)
Date: Wed, 31 May 2006 14:30:27 +0600
Subject: [Twisted-Python] twisted WORDS and ICQ connect throug http proxy
Message-ID: <20060531083028.05EAC2E020@gw.tyumbit.ru>

Hello,
I'm trying to connect to icq.
..\Lib\site-packages\TwistedDocs\examples\oscardemo.py 
gives me following messages:
...
Unhandled error in Deferred:
Traceback (most recent call last):
Failure: twisted.internet.error.TCPTimedOutError: TCP connection timed out:
10060: Unknown error.
...

when looking in my icq pro 2003 setup I've noticed that we use http proxy
here in office.
so how can I modify oscardemo.py just to connect to icq?
I've got environment variable
http_proxy=http://digits.digits.digits:digits_port_number

Other network based utilities (perl for example) recognize this variable and
use this proxy.
Can oscardemo.py use proxy as well?


---
Igor
igor at tyumbit.ru





From carl.lambert at waveworks.co.uk  Wed May 31 05:33:10 2006
From: carl.lambert at waveworks.co.uk (Carl Lambert)
Date: Wed, 31 May 2006 10:33:10 +0100
Subject: [Twisted-Python] ping with twisted
Message-ID: <447D62D6.5010604@waveworks.co.uk>

Hi,

Im writing a simple network monitoring system for my internal work 
network. ive got most of it sussed.. snmp, port probs etc.. but im 
strugling when it comes to pinging the boxes.. is there a simple way to 
do this? if not what would be the best way of going about it?

Thanks Carl



From jadestorm at nc.rr.com  Wed May 31 08:26:42 2006
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Wed, 31 May 2006 08:26:42 -0400
Subject: [Twisted-Python] twisted WORDS and ICQ connect throug http proxy
In-Reply-To: <20060531083028.05EAC2E020@gw.tyumbit.ru>
References: <20060531083028.05EAC2E020@gw.tyumbit.ru>
Message-ID: <4EDFAAEB-61C6-40A7-A39A-64F589DCFE88@nc.rr.com>

The upgraded version of oscar.py that I've been developing has socks5  
support in it, though it does not have http support as of yet.  I  
don't believe (and if anyone else knows better, please correct me)  
that the oscar.py that is included with TwistedWords right now has  
the functionality to make use of any proxy.  The reason why I'm not  
sure of this is that I'm not sure if there might be a way "as is" to  
wrap ClientCreator or something along those lines in a proxy handler  
that I'm not aware of.  (and if there is, someone please let me know,  
I've got a few folk who are interested in using an http proxy with  
oscar.py)  I simply haven't gotten around to it yet.  =/

Speaking of which, I really need to find some time to document what  
I've got, create some test cases, and submit an update to oscar.py.   
Considering how large it's gotten, I'm actually aiming to split it up  
into an oscar subdirectory.

Anyway, feel free to contact me directly with some questions if you'd  
like.

Daniel

On May 31, 2006, at 4:30 AM, Igor Prischepoff wrote:

> Hello,
> I'm trying to connect to icq.
> ..\Lib\site-packages\TwistedDocs\examples\oscardemo.py
> gives me following messages:
> ...
> Unhandled error in Deferred:
> Traceback (most recent call last):
> Failure: twisted.internet.error.TCPTimedOutError: TCP connection  
> timed out:
> 10060: Unknown error.
> ...
>
> when looking in my icq pro 2003 setup I've noticed that we use http  
> proxy
> here in office.
> so how can I modify oscardemo.py just to connect to icq?
> I've got environment variable
> http_proxy=http://digits.digits.digits:digits_port_number
>
> Other network based utilities (perl for example) recognize this  
> variable and
> use this proxy.
> Can oscardemo.py use proxy as well?
>
>
> ---
> Igor
> igor at tyumbit.ru
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From matt at pollenation.net  Wed May 31 10:10:43 2006
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 31 May 2006 15:10:43 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447C655E.2060400@pollenation.net>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>	<447B6BB5.6000208@eepatents.com>
	<447C655E.2060400@pollenation.net>
Message-ID: <447DA3E3.6000801@pollenation.net>

Matt Goodall wrote:
> Ed Suominen wrote:
> 
> 
>>Well of course, Glyph's "interesting module" comment was just enough of
>>a table scrap to get me running, tail wagging furiously. The result
>>(unit testing in progress) is a full-fledged SynchronousTasks object
>>that runs a priority queue of synchronous tasks with niceness
>>scheduling. See
>>
>>* http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
>>* http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py
> 
> 
> I was going to post again last night about how the PriorityQueue.get()
> would never block once something had been put() into it, but I see
> you've fixed that bug by clearing the event semaphore. Unfortunately,
> the code now has a race condition.
> 
> If the SynchronousQueue._workOnTasks thread is pre-empted in
> PriorityQueue.get() between "if self.empty():" and "self.event.clear()",
> and another thread calls PriorityQueue.put() then the event semaphore
> set during put() will be cleared when get() continues.
> 
> OK, that was horrible to write so here's a picture instead ;-) ...
> 
> Thread 1                                Thread 2
> 
> # Calls get()
> self.event.wait()
> result = heapq.heappop(self.list)
> if self.empty():
> 
> <------------------ Thread 2 preempts Thread 1 ---------------------->
> 
>                                        # Calls put()
>                                        heapq.heappush(self.list, item)
>                                        self.event.set()
> 
> <---------------------- Thread 1 continues -------------------------->
> 
>     self.event.clear()
> 
> 
> PriorityQueue should probably be using a Condition to protect access to
> the heapq list *and* wait for something to be posted to it. See
> <http://docs.python.org/lib/condition-objects.html>.

I notice you've updated syncbridge to use a Condition now. Looks better
to me, although there's another bug and an improvement suggestion.

First up is that it should be "while self.empty(): self.cv.wait()".

Whenever something is put on the queue notify() is always called to wake
a consumer thread. However, there may already be a consumer thread
tearing around a loop taking items from the queue and, critically, never
waiting until the queue is empty.

By the time the newly woken consumer thread actually calls heappop to
take an item the existing consumer thread may have emptied the queue.

Ths improvement suggestion is to put the conditional's release() in a
finally block to ensure it actually happens. (Why isn't the Condition
example in the documentation written expecting exceptions?)

Anyway, this all makes get() and put() look something like:


    def get(self):
        self.cv.acquire()
        try:
            while self.empty():
                self.cv.wait()
            return heapq.heappop(self.list)
        finally:
            self.cv.release()

    def put(self, item):
        self.cv.acquire()
        try:
            heapq.heappush(self.list, item)
            self.cv.notify()
        finally:
            self.cv.release()


After that, I think the queue implementation is ok.


And some people insist that threading is easy ;-).


- Matt


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




From nico at tekNico.net  Mon May  1 00:53:34 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Mon, 01 May 2006 08:53:34 +0200
Subject: [Twisted-Python] 
	Re: Status of components, protocols, etc in Twisted
In-Reply-To: <17493.24492.57227.748654@terry.jones.tc>
References: <17493.24492.57227.748654@terry.jones.tc>
Message-ID: <4455B06E.2060509@tekNico.net>

> I'm trying to better understand componentized architectures, protocols,
> adaptors etc., as done in Python. I've been reading around and have a few
> questions about the state of play. It would be good to understand where
> things are, and where they're heading.
> 
> It seems there are (or were) 3 efforts to provide components, protocols,
> adaptors, etc.: Zope, Twisted, PyProtocols.

Take also into account the recent GvR Python 3000 decision to put aside
interfaces and adaptation in favor of generic functions or, as he decided
to call them, "dynamic function overloading":

Python 3000 - Adaptation or Generic Functions?
http://www.artima.com/forums/threaded.jsp?forum=106&thread=155123

Dynamic Function Overloading
http://www.artima.com/forums/threaded.jsp?forum=106&thread=155514


> It looks like Twisted is now using the zope module to do this. But I also
> ran across discussion (on this list, in Feb 2004, I think), about possibly
> migrating zope's use of components to PyProtocols. Did that happen?

Notice that PJE himself is not very fond of PyProtocols anymore:

[Python-3000] Sane transitive adaptation
http://mail.python.org/pipermail/python-3000/2006-April/000532.html


-- 
Nicola Larosa - http://www.tekNico.net/

How we live; how we invest our limited capital of time, energy, interest
and capabilities, is surely more important than how we invest our money;
and look how much time, activity and newsprint is spent on that. Money
can be replaced. Once spent, our lives can not.
 -- Carmine Coyote, January 2006





From uwe at oss4u.com  Mon May  1 03:13:52 2006
From: uwe at oss4u.com (Uwe C. Schroeder)
Date: Mon, 1 May 2006 02:13:52 -0700
Subject: [Twisted-Python] OT: job offer
Message-ID: <200605010213.53520.uwe@oss4u.com>

Hope nobody minds a job offer.....

We have developed an application for the insurance market that is based on:

wxPython for the GUI
twisted pb as network layer
certainly python :-)
reportlab/OpenOffice/pyUno for printing
zope/plone as alternative web interface.
the database backend is postgresql.

We're currently in the process of setting up a company to market this 
software. The software targets a niche market in the insurance business and 
has been in production for over 3 years with a limited number of clients.
We're looking for developers, preferably in the greater San Francisco Bay Area 
but not a necessity, who have as much experience as possible in any/all of 
the above technologies. We have certain projects that only need partial 
knowledge (I'm not disclosing specifics here, I much rather list requirements 
for the different projects):

1) Solely Plone based development. This basically only requires Plone and 
postgresql experience.

2) The printing backend needs work. Anyone with good XSLT/RML experience is 
welcome to apply. Intention is to write a Open Document Format to RML 
exporter for OpenOffice. We will contribute the exporter back to the 
community which would benefit the OpenOffice and the reportlab projects.

3)  Someone with a solid knowledge of twisted pb (not yet new pb) and wxPython 
experience. There are technical obstacles to the "twisted/wxPython"-marriage 
and you should be aware of them.

4) anyone with an open mind and good python experience.

SQL database knowledge is pretty much a must for all of the above. We're 
currently using postgresql, but Oracle and DB2 are not out of the question.

If you have commercial insurance knowledge it's even better, but I rather 
focus on programming skills than insurance knowledge - since the later is 
much easier to acquire.

All of the above projects have the potential to turn into a lucrative  
permanent occupation. Salary and terms are negotiable. There will be several 
programmers involved, thus team- and communication skills are a plus.

If you're interested please drop me an email.

Best

	UC

--
Open Source Solutions 4U, LLC	1618 Kelly St
Phone:  +1 707 568 3056		Santa Rosa, CA 95401
Cell:   +1 650 302 2405		United States
Fax:    +1 707 568 6416



From jml at mumak.net  Mon May  1 06:41:28 2006
From: jml at mumak.net (Jonathan Lange)
Date: Mon, 1 May 2006 22:41:28 +1000
Subject: [Twisted-Python] Database tests and Buildbots
Message-ID: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>

Hello,

I'm trying to reproduce #1630 using the buildbots and I'm not having
any luck.  Apparently none of the database software is installed on
any of the buildbots.  All the tests are skipped with 'Cannot access
db'.

Can the buildbot maintainers please configure their slaves to have the
appropriate software installed. Otherwise, we can't really continue
supporting twisted.enterprise.

cheers,
jml



From itamar at itamarst.org  Mon May  1 07:13:48 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 01 May 2006 09:13:48 -0400
Subject: [Twisted-Python] [SOLVED] ProducerConsumerProxy problem
In-Reply-To: <7a1008db0604300924u65495a19x4887889231172253@mail.gmail.com>
References: <7a1008db0604300717m76b7217cg65ecef2aa6d5ce53@mail.gmail.com>
	<7a1008db0604300924u65495a19x4887889231172253@mail.gmail.com>
Message-ID: <1146489228.5698.0.camel@localhost.localdomain>

On Sun, 2006-04-30 at 19:24 +0300, Haris Andrianakis wrote:
> I found the solution.
> 
> The problem was that by default our proxys producer is registered with
> streaming = True
> which is not what we want.
> The following line will register our proxys producer with streaming =
> False 
> ProducerConsumerProxy.iAmStreaming = False
> The rest is the same.
> I think adding an argument to ProducerConsumerProxy.__init__ about
> streaming would
> be a good idea.
> proxy = ProducerConsumerProxy(self.client.transport )
> dd = FileSender().beginFileTransfer(self.outgoingFile, proxy)
> dd.addCallback(self.uploadDone)
> dd.addErrback(self.uploadError)
> _______________________________________________

Add the patch to our issue tracker?

-- 
Itamar Shtull-Trauring
http://itamarst.org





From terry at jon.es  Mon May  1 07:28:52 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 1 May 2006 15:28:52 +0200
Subject: [Twisted-Python] Question on pamauth.py
Message-ID: <17494.3348.841497.813754@terry.jones.tc>

I'm planning to use twisted.cred and just went to look for ways to
implement a back end credentials checker that I could plug in. I soon ran
across mentions of pamauth.py, and was pleasantly surprised to find it
sitting in my Twisted-2.2.0/twisted/cred/pamauth.py

But, I don't see a mention of how to use it. Most of what's on the web
shows pamauth.py as living under twisted.conch, which I take to be an old
code layout.

This:

    $ find . -name '*.html' -print0 | xargs -0 grep -i pamauth

at the top of my Twisted-Sumo tree gets me no hits. I see a little use of
pamauth test/test_newcred.py, but it's not terribly enlightening.


Is there somewhere I can read about how to use this?

A bit more generally, is using pamauth considered roughly best practice?
Are there other credentials checkers in wide use (and yes, I know
/etc/password is in wide use :-))

If I want to build a web site where users authenticate themselves, I
presumably will be setting a cookie on the browser and authentication will
just happen when the browser visits. (I'm happy to hear more details on how
this is best done). But what if a user is trying to run a command line app
or a remote script that's talking to the server via twisted.pb? Presumably
some form of credential is stored locally and transmitted with the
connection.  Is the passed credential in this case stored (supposing it is
even stored on disk, as opposed to being stored in the user's head and
entered on the command line) in a way that's totally orthogonal to cookies,
or does Twisted have yet more functionality to deal with this?

One final one: I imagine it's a standard pattern that people want to
implement users and groups, with some form of permissions model in which
users attempt actions and their privileges are checked (with fallback to
their groups' permission if the user does not have explicit permission).
Can anyone point me to Twisted code that does something like this?

Sorry for so many questions. I don't expect anyone to start writing code
for me, I plan to do that myself. But it's nice to not reinvent wheels,
that's the point after all. So having just discovered the lightly (or un-)
documented pamauth.py, I'm can't help but wonder what more there might be.

Regards,
Terry



From jim at zope.com  Mon May  1 09:23:07 2006
From: jim at zope.com (Jim Fulton)
Date: Mon, 01 May 2006 11:23:07 -0400
Subject: [Twisted-Python] zope.interface changes
Message-ID: <445627DB.6070509@zope.com>


I hope this is the right list to post to.  Twisted-dev seems more aptly named, but
it doesn't seem to get a lot of traffic.

I've recently refactored the adapter-registration implementation in zope.interface.
There were a number of reasons for this, including performance and making it possible,
in the future, to implement a capability similar to Python's super builtin for calling
overridden adaptera.

The performance gains for the simple-adapter lookup used by Twisted was about 200%.
For Zope, the changes led to about a 15-30% performance improvement.

I expect the new interface version to be released in June.

While working on this, I discovered that Twisted was bypassing the public API to
try to determne of there was an adapter registered:

     for interfaceClass in interfaceClasses:
         factory = self.get(origInterface).selfImplied.get(interfaceClass, {}).get('')

where self is an adapter registry.  This is in python/components.py.

I've added an adapter-registry API specifically for Twisted's use:

     def registered(required, provided, name=u''):
         """Return the component registered for the given interfaces and name

         Unlike the lookup method, this methods won't retrieve
         components registered for more specific required interfaces or
         less specific provided interfaces.

         If no component was registered exactly for the given
         interfaces and name, then None is returned.

         """

I've also added a backward-compatibility hack:

     def get(self, _):
         class XXXTwistedFakeOut:
             selfImplied = {}
         return XXXTwistedFakeOut

This makes Zope's tests pass. Not sure about Twisted's.

Obviously, it would be good for Twisted to move to the new public API.
In the future, if you need a new API, please feel free to ask. :)

Jim

-- 
Jim Fulton           mailto:jim at zope.com       Python Powered!
CTO                  (540) 361-1714            http://www.python.org
Zope Corporation     http://www.zope.com       http://www.zope.org



From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 14:15:18 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Mon, 01 May 2006 22:15:18 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded is
 deprecated Use application-level logic instead"
Message-ID: <44566C56.6070507@ac-montpellier.fr>

Helo ,
Vhat is the meaning of "Use application-level logic instead" ?


import twisted.internet.threads
/usr/lib/python2.4/site-packages/twisted/python/context.py:74: 
DeprecationWarning: threadable.whenThreaded is deprecated. Use 
application-level logic instead.
  threadable.whenThreaded(initThreads)

 



From mcmillen at cs.cmu.edu  Mon May  1 15:05:31 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Mon, 1 May 2006 17:05:31 -0400
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <44566C56.6070507@ac-montpellier.fr>
References: <44566C56.6070507@ac-montpellier.fr>
Message-ID: <20060501210531.GA1122@cs.cmu.edu>

On Mon, May 01, 2006 at 10:15:18PM +0200, jmp wrote:
> Helo ,
> Vhat is the meaning of "Use application-level logic instead" ?
> 
> 
> import twisted.internet.threads
> /usr/lib/python2.4/site-packages/twisted/python/context.py:74: 
> DeprecationWarning: threadable.whenThreaded is deprecated. Use 
> application-level logic instead.
>  threadable.whenThreaded(initThreads)

Basically, it means "Program it yourself, don't depend on Twisted to
do it for you" :)

- Colin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060501/34cc4688/attachment.sig>

From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 16:03:31 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Tue, 02 May 2006 00:03:31 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <20060501210531.GA1122@cs.cmu.edu>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
Message-ID: <445685B3.8060601@ac-montpellier.fr>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060502/7472f13b/attachment.html>

From radix at twistedmatrix.com  Mon May  1 16:10:06 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 1 May 2006 18:10:06 -0400
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <445685B3.8060601@ac-montpellier.fr>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
	<445685B3.8060601@ac-montpellier.fr>
Message-ID: <60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>

On 5/1/06, jmp <jean-marc.pouchoulon at ac-montpellier.fr> wrote:
>
>
>  Basically, it means "Program it yourself, don't depend on Twisted to
> do it for you" :)
>
>
> Does this means that threads.deferToThread  will be unavailable in the
> future ?
> I need it to use twisted and python-ldap. (ldaptor seems to be broken on
> twisted 2.2 ).
>
>
I'm not really sure how you got that warning just from importing t.p.context.
You're probably using out-of-sync versions of various Twisted bits. I
suggest trying to install the latest Twisted release from scratch. As the
warning says, it's not deferToThread that's deprecated, it's whenThreaded.



--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060501/77bd0ea4/attachment.html>

From jean-marc.pouchoulon at ac-montpellier.fr  Mon May  1 16:48:43 2006
From: jean-marc.pouchoulon at ac-montpellier.fr (jmp)
Date: Tue, 02 May 2006 00:48:43 +0200
Subject: [Twisted-Python] What is the meaning of "threadable.whenThreaded
	is deprecated Use application-level logic instead"
In-Reply-To: <60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>
References: <44566C56.6070507@ac-montpellier.fr>
	<20060501210531.GA1122@cs.cmu.edu>
	<445685B3.8060601@ac-montpellier.fr>
	<60ed19d40605011510h24251b9nd41110ec989be178@mail.gmail.com>
Message-ID: <4456904B.2080100@ac-montpellier.fr>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060502/73fa73a6/attachment.html>

From fairwinds at eastlink.ca  Tue May  2 09:00:53 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Tue, 02 May 2006 12:00:53 -0300
Subject: [Twisted-Python] Multiple main loops
Message-ID: <44577425.4080500@eastlink.ca>

Hi. I am hoping you can clarify for me whether it is possible to run 
multiple independent main loops in Twisted. It is my understanding that 
this would mean separate independent reactors.

Googling, I found this patch but after looking into the repository, it 
was never committed. I would appreciate any comments on the patch or 
attempts people have made on the integration of a second twisted loop.

At the present time I am using twisted with wxpython with wxpython as 
main loop and also running a selectreactor instance. Here there are two 
separate loops, interoperating and operating independently, however they 
are not both twisted loops.

Zope currently runs using a reactor instance for each zope instance but 
I would like to consider a separate independent loop for each client to 
synchronize to a server without paying a penalty. Zope's ZEO (basically 
a synchronization server) currently uses a simple zrpc protocol and runs 
independently but interoperates with a separate ansyncore main loop. The 
current system works well for the exception that it would be great to 
simplify this as well as improve security using twisted's built in 
capabilities. Many thanks.


Regards
David


Index: twisted/internet/default.py
===================================================================
RCS file: /cvs/Twisted/twisted/internet/default.py,v
retrieving revision 1.79
diff -u -r1.79 default.py
--- twisted/internet/default.py    10 May 2003 12:52:37 -0000    1.79
+++ twisted/internet/default.py    11 May 2003 23:11:26 -0000
@@ -367,8 +367,6 @@


  # global state for selector
-reads = {}
-writes = {}


  def win32select(r, w, e, timeout=None):
@@ -403,13 +401,18 @@

      __implements__ = (PosixReactorBase.__implements__, IReactorFDSet)

+    def __init__(self):
+        PosixReactorBase.__init__(self)
+        self.reads = {}
+        self.writes = {}
+
      def _preenDescriptors(self):
          log.msg("Malformed file descriptor found.  Preening lists.")
-        readers = reads.keys()
-        writers = writes.keys()
-        reads.clear()
-        writes.clear()
-        for selDict, selList in ((reads, readers), (writes, writers)):
+        readers = self.reads.keys()
+        writers = self.writes.keys()
+        self.reads.clear()
+        self.writes.clear()
+        for selDict, selList in ((self.reads, readers), (self.writes, 
writers)):
              for selectable in selList:
                  try:
                      select.select([selectable], [selectable], 
[selectable], 0)
@@ -419,19 +422,19 @@
                      selDict[selectable] = 1


-    def doSelect(self, timeout,
-                 # Since this loop should really be as fast as possible,
-                 # I'm caching these global attributes so the interpreter
-                 # will hit them in the local namespace.
-                 reads=reads,
-                 writes=writes,
-                 rhk=reads.has_key,
-                 whk=writes.has_key):
+    def doSelect(self, timeout):
          """Run one iteration of the I/O monitor loop.

          This will run all selectables who had input or output readiness
          waiting for them.
          """
+        # Since this loop should really be as fast as possible,
+        # I'm caching these global attributes so the interpreter
+        # will hit them in the local namespace.
+        reads=self.reads
+        writes=self.writes
+        rhk=reads.has_key
+        whk=writes.has_key
          while 1:
              try:
                  r, w, ignored = _select(reads.keys(),
@@ -502,33 +505,33 @@
      def addReader(self, reader):
          """Add a FileDescriptor for notification of data available to 
read.
          """
-        reads[reader] = 1
+        self.reads[reader] = 1

      def addWriter(self, writer):
          """Add a FileDescriptor for notification of data available to 
write.
          """
-        writes[writer] = 1
+        self.writes[writer] = 1

      def removeReader(self, reader):
          """Remove a Selectable for notification of data available to read.
          """
-        if reads.has_key(reader):
-            del reads[reader]
+        if self.reads.has_key(reader):
+            del self.reads[reader]

      def removeWriter(self, writer):
          """Remove a Selectable for notification of data available to 
write.
          """
-        if writes.has_key(writer):
-            del writes[writer]
+        if self.writes.has_key(writer):
+            del self.writes[writer]

      def removeAll(self):
          """Remove all readers and writers, and return list of 
Selectables."""
-        readers = reads.keys()
+        readers = self.reads.keys()
          for reader in readers:
-            if reads.has_key(reader):
-                del reads[reader]
-            if writes.has_key(reader):
-                del writes[reader]
+            if self.reads.has_key(reader):
+                del self.reads[reader]
+            if self.writes.has_key(reader):
+                del self.writes[reader]
          return readers



From markus at bluegap.ch  Tue May  2 09:50:16 2006
From: markus at bluegap.ch (Markus Schiltknecht)
Date: Tue, 02 May 2006 17:50:16 +0200
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44577425.4080500@eastlink.ca>
References: <44577425.4080500@eastlink.ca>
Message-ID: <1146585016.18433.80.camel@fotomarburg>

Hi,

I'm not sure you are talking about the same topic. But I have just been
thinking about a threaded reactor.

Because my biggest itch with twisted is, that it can not really make use
multi-processor systems. Especially nowadays with dual-core or even
multi-core processors hitting the market this seems like a must-have.

In theory, it would be possible to start as many threads as you have
processors. All threads would process 'events' of the main loop. See for
example the apache event MPM for a better explaination of the algorithm.

Beside allowing only one thread at a time to call select(), this would
have other implications for twisted. I'm not sure about what they are,
but I can imagine it's a non-trivial goal.

How about todays python thread implementation? Did it improve over the
years? Is it worth using? What must be considered to get a reasonably
good performance using python threads?

..just some ideas. I'd be thankfull for hints, though.

Regards

Markus

On Tue, 2006-05-02 at 12:00 -0300, David Pratt wrote:
> Hi. I am hoping you can clarify for me whether it is possible to run 
> multiple independent main loops in Twisted. It is my understanding that 
> this would mean separate independent reactors.
> 
> Googling, I found this patch but after looking into the repository, it 
> was never committed. I would appreciate any comments on the patch or 
> attempts people have made on the integration of a second twisted loop.
> 
> At the present time I am using twisted with wxpython with wxpython as 
> main loop and also running a selectreactor instance. Here there are two 
> separate loops, interoperating and operating independently, however they 
> are not both twisted loops.
> 
> Zope currently runs using a reactor instance for each zope instance but 
> I would like to consider a separate independent loop for each client to 
> synchronize to a server without paying a penalty. Zope's ZEO (basically 
> a synchronization server) currently uses a simple zrpc protocol and runs 
> independently but interoperates with a separate ansyncore main loop. The 
> current system works well for the exception that it would be great to 
> simplify this as well as improve security using twisted's built in 
> capabilities. Many thanks.
> 
> 
> Regards
> David
> 
<SNIPPED the attached patch>





From bear42 at code-bear.com  Tue May  2 14:51:03 2006
From: bear42 at code-bear.com (bear)
Date: Tue, 02 May 2006 16:51:03 -0400
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
Message-ID: <4457C637.8050402@code-bear.com>


Jonathan Lange wrote:
> Hello,
>
> I'm trying to reproduce #1630 using the buildbots and I'm not having
> any luck.  Apparently none of the database software is installed on
> any of the buildbots.  All the tests are skipped with 'Cannot access
> db'.
>
> Can the buildbot maintainers please configure their slaves to have the
> appropriate software installed. Otherwise, we can't really continue
> supporting twisted.enterprise.

Point me to a document or source file that describes what software to 
install and what userid/password is required and I'll setup the window 
buildbot slaves.





From general at eepatents.com  Tue May  2 14:56:50 2006
From: general at eepatents.com (Ed Suominen)
Date: Tue, 02 May 2006 13:56:50 -0700
Subject: [Twisted-Python] Re: The End, also: documentation
In-Reply-To: <E1FaFHA-0003pl-02@pyramid.twistedmatrix.com>
References: <E1FaFHA-0003pl-02@pyramid.twistedmatrix.com>
Message-ID: <4457C792.4060401@eepatents.com>

Mary Gardiner wrote:
> On Wed, Apr 26, 2006, Ed Suominen wrote:
> 
>>I'm thinking about suggesting (gasp!) myself as your replacement.
> 
> ...
> 
>>Comments welcome. Any positive ones will likely be viewed with suspicion
>>and will raise pangs of regret at my making this rash posting. The
>>negative ones will likely be viewed with relief, at least by the
>>aforementioned logical, responsible part...
> 
> 
> You'll notice I've reassigned some tickets to you and will continue to
> do so over the next few days. I'm not sure how your logical and
> responsible part will feel about this... you can grab me on IRC as
> hypatia for clarification of anything I filed...
> 
> -Mary

The aforementioned logical and responsible part is swamped with work
just now and horrified that I made the offer. But I suppose it's done
and I'll start picking things up when the flood recedes in a week or two.

Best regards, Ed



From exarkun at divmod.com  Tue May  2 16:01:30 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 2 May 2006 18:01:30 -0400
Subject: [Twisted-Python] Re: The End, also: documentation
In-Reply-To: <4457C792.4060401@eepatents.com>
Message-ID: <20060502220130.22481.451061582.divmod.quotient.20755@ohm>

On Tue, 02 May 2006 13:56:50 -0700, Ed Suominen <general at eepatents.com> wrote:
>
>The aforementioned logical and responsible part is swamped with work
>just now and horrified that I made the offer. But I suppose it's done
>and I'll start picking things up when the flood recedes in a week or two.
>

Thanks for the offer to take on this role, Ed.  *Not* to discourage
you, but as of late, we've had quite a few offers to help out with
various parts of Twisted but a lot of them haven't come to much.
The administrative costs are getting to be a significant burden on
some team members who are already swamped.  I think the best thing
to do would be to contribute improvements to the tracker for a
while (once you're all dried off ;).  We'll absolutely take the
time to get tickets in the tracker taken care of, but for now it'd
be best if we could avoid the setting up new accounts, dealing with
keys, poking trac in all the right places for edit permissions and
whatnot.  With the review process we're currently using, this isn't
very far from what you'd be doing anyway.  Once things slow down on
the administrative end and you are contributing enough improvements
for the overhead to be worthwhile, we can get you set up with
commit access and so forth.

Again, thank you for stepping up.  I am personally looking forward
to your contributions.

Jean-Paul



From glyph at divmod.com  Tue May  2 16:38:56 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 2 May 2006 18:38:56 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44577425.4080500@eastlink.ca>
Message-ID: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>


On Tue, 02 May 2006 12:00:53 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi. I am hoping you can clarify for me whether it is possible to run 
>multiple independent main loops in Twisted. It is my understanding that this 
>would mean separate independent reactors.

Yep.  This is not currently possible.  Most importantly there are no tests for it, so we would have no idea if it worked.  Writing tests for race conditions is notoriously hard.

>Googling, I found this patch but after looking into the repository, it was 
>never committed. I would appreciate any comments on the patch or attempts 
>people have made on the integration of a second twisted loop.

This patch was deliberately left uncommitted.  It definitely reverses an optimization that was demonstrated to improve performance on the critical path; it only maybe makes it possible to initialize multiple reactors.  If you want to write a comprehensive set of unit tests for multiple reactors, we might consider doing something like this, otherwise the reactor will be left in its current state in order to discourage people from attempting to start multiple reactors concurrently.

>At the present time I am using twisted with wxpython with wxpython as main 
>loop and also running a selectreactor instance. Here there are two separate 
>loops, interoperating and operating independently, however they are not both 
>twisted loops.

wxpython is buggy and has terrible event-loop support.  Consider using PyGTK instead.  If you really must use wx, there are a variety of mostly-working ways to integrate the mainloop with Twisted without resorting to multiple reactors.



From glyph at divmod.com  Tue May  2 16:40:49 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 2 May 2006 18:40:49 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <1146585016.18433.80.camel@fotomarburg>
Message-ID: <20060502224049.22481.1961026087.divmod.quotient.20773@ohm>



On Tue, 02 May 2006 17:50:16 +0200, Markus Schiltknecht <markus at bluegap.ch> wrote:

>Because my biggest itch with twisted is, that it can not really make use
>multi-processor systems. Especially nowadays with dual-core or even
>multi-core processors hitting the market this seems like a must-have.

s/Twisted/Python/g

Python maintains a global interpreter lock which prevents the interpreter from running on more than one CPU at a time.  If you want to take advantage of multiple CPUs with Twisted, you have to spawn multiple communicating processes, not threads.

Even if you *could* take advantage of multiple processors by using threads, making Twisted generally thread-safe would be a HUGE undertaking, probably spanning years, and I cannot imagine anyone on the current development team would care about this as a feature, with so many other major issues looming.



From jml at mumak.net  Tue May  2 18:43:07 2006
From: jml at mumak.net (Jonathan Lange)
Date: Wed, 3 May 2006 10:43:07 +1000
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <4457C637.8050402@code-bear.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>
	<4457C637.8050402@code-bear.com>
Message-ID: <d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>

On 5/3/06, bear <bear42 at code-bear.com> wrote:
>
> Jonathan Lange wrote:
> > Hello,
> >
> > I'm trying to reproduce #1630 using the buildbots and I'm not having
> > any luck.  Apparently none of the database software is installed on
> > any of the buildbots.  All the tests are skipped with 'Cannot access
> > db'.
> >
> > Can the buildbot maintainers please configure their slaves to have the
> > appropriate software installed. Otherwise, we can't really continue
> > supporting twisted.enterprise.
>
> Point me to a document or source file that describes what software to
> install and what userid/password is required and I'll setup the window
> buildbot slaves.
>

I have no such documentation.  I'd suggest the enterprise maintainer
write one, but there is no such person.

Suggestions anyone?

jml



From fairwinds at eastlink.ca  Tue May  2 18:43:21 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Tue, 02 May 2006 21:43:21 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
Message-ID: <4457FCA9.3010907@eastlink.ca>

glyph at divmod.com wrote:
> 
> On Tue, 02 May 2006 12:00:53 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi. I am hoping you can clarify for me whether it is possible to run 
>> multiple independent main loops in Twisted. It is my understanding 
>> that this would mean separate independent reactors.
> 
> Yep.  This is not currently possible.  Most importantly there are no 
> tests for it, so we would have no idea if it worked.  Writing tests for 
> race conditions is notoriously hard.

Hi glyph. Have there been previous attempts to run more than a single 
reactor together? Does any of this exist anywhere in the history of the 
your repository.

>> Googling, I found this patch but after looking into the repository, it 
>> was never committed. I would appreciate any comments on the patch or 
>> attempts people have made on the integration of a second twisted loop.
> 
> This patch was deliberately left uncommitted.  It definitely reverses an 
> optimization that was demonstrated to improve performance on the 
> critical path; it only maybe makes it possible to initialize multiple 
> reactors.  If you want to write a comprehensive set of unit tests for 
> multiple reactors, we might consider doing something like this, 
> otherwise the reactor will be left in its current state in order to 
> discourage people from attempting to start multiple reactors concurrently.

I understand what you are saying however there is some appeal in 
exploring this possibility (if there is a possibility for it to work).

>> At the present time I am using twisted with wxpython with wxpython as 
>> main loop and also running a selectreactor instance. Here there are 
>> two separate loops, interoperating and operating independently, 
>> however they are not both twisted loops.
> 
> wxpython is buggy and has terrible event-loop support.  Consider using 
> PyGTK instead.  If you really must use wx, there are a variety of 
> mostly-working ways to integrate the mainloop with Twisted without 
> resorting to multiple reactors.

I have been using wxpython and twisted together for about a year. They 
seem to perform well together and I would have no problem recommending 
wxpython for general cross platform gui development. I am using wxpython 
only to illustrate that multiple independent loops can work 
cooperatively. The target for the multiple reactor possibility is zope 
client instances where currently an asyncore loop has been integrated 
for zeo support.

Regards,
David





From jarrod at vertigrated.com  Tue May  2 21:25:25 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Tue, 2 May 2006 23:25:25 -0400
Subject: [Twisted-Python] Twisted + Xapian WriteableDatabase leaves db_lock
	file on exit.
Message-ID: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>

Twisted Sumo 2006-02-12

xapian and xapian bindings 0.9.2 svn 6532

I have written a Twisted service to write to a xapian database.
I am using WriteableDatabase using DB_CREATE_OR_OPEN.

I am also using twistd and the application plumbing to start the server.

I have tried everything but no matter how I stop the server I can't get it
to shutdown xapian cleanly.

I have implemented stopService() on my service and do a .flush() and have
even tried setting the db instance to None
and tried using del self.db as well.

I even added a reactor.addSystemEventTrigger() and tried "before", "during"
and "after" "shutdown" and nothing
seems to work.

I stop the service with CTRL-C, kill -TERM `cat twistd.pid' and just plain
kill 'cat twistd.pid'

It leaves the db_lock file everytime and I don't know what else it might not
be cleaning up correctly either.

Has anyone gotten a WritableDatabase to work with Twisted?
If so, how do I stop Twisted so it will shutdown xapian cleanly?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060502/077ded0d/attachment.html>

From duncan.mcgreggor at gmail.com  Tue May  2 22:39:01 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 2 May 2006 22:39:01 -0600
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: <17494.3348.841497.813754@terry.jones.tc>
References: <17494.3348.841497.813754@terry.jones.tc>
Message-ID: <97600867ab180a20f6a24648e41db23c@gmail.com>


On May 1, 2006, at 7:28 AM, Terry Jones wrote:

> I'm planning to use twisted.cred and just went to look for ways to
> implement a back end credentials checker that I could plug in. I soon 
> ran
> across mentions of pamauth.py, and was pleasantly surprised to find it
> sitting in my Twisted-2.2.0/twisted/cred/pamauth.py
>
> But, I don't see a mention of how to use it.

The really great thing about cred is that it works the same regardless 
of the underlying authentication mechanism. I suggest writing a couple 
toy examples and plugging those into your twisted app, just to get a 
feel for how things work. In the process you will gain genuine 
knowledge (as opposed to "a feel").

You probably wouldn't ever need to use twisted.cred.pamauth. You would 
use the twisted.cred.checkers.PluggableAuthenticationModulesChecker, 
and that works just like, well, a cred checker :-)

You biggest problem is actually going to be getting PyPAM working. As 
far as I know, and as far as tummy.com knows (the original sponsors of 
PyPAM), there's been no release since 1999. I toyed with the idea of 
using it at one point, but the amount of work necessary in updating the 
python was too onerous. Perhaps you have a stronger stomach than I :-)

> If I want to build a web site where users authenticate themselves
[snip]
> cookie
[snip]
> But what if a user is trying to run a command line app
[snip]

If I'm understanding what you are asking, this isn't a cred question. 
cred is cred. It handles avatars/ids, realms, portals, etc. You can put 
anything you want in your realm (or checker, or...). It's up to you to 
provide/restrict resources based on that and it's up to you to decide 
what to do about persisting authentication information.

> Can anyone point me to Twisted code that does something like this?

I'm totally not being snotty when I say this (again): cred is cred. One 
of the really great things about it is how easy it is to do whatever 
you want. You can create interfaces that represent groups, have a 
single realm and set/check interfaces, have different realms for 
different levels of access, etc. You can have your resources implement 
your group/role interfaces. There's all kinds of stuff you can do, it 
really depends on your needs. Once you are comfortable with it and have 
written a few working toys/examples, you will see the potential. 
Writing the code necessary to plug your twisted app into somebody 
else's authentication system can be easier than doing it any other way 
(given that you are working with open, sane standards). I've actually 
written working cred code faster than other project members have 
*configured* (GUI) the user management systems I was writing against.

Here's a great resource:
   http://twistedmatrix.com/projects/core/documentation/howto/cred.html

And if you don't have the O'Reilly twisted book, do yourself a favor 
and pick up a copy. Abe did a wonderful job explaining cred very 
clearly in it.

Good luck!

d




From bear42 at code-bear.com  Tue May  2 23:51:11 2006
From: bear42 at code-bear.com (bear)
Date: Wed, 03 May 2006 01:51:11 -0400
Subject: [Twisted-Python] Database tests and Buildbots
In-Reply-To: <d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>
References: <d06a5cd30605010541s35169411g6222f2ff36c9f6e@mail.gmail.com>	<4457C637.8050402@code-bear.com>
	<d06a5cd30605021743n7dd2ca79n7f7d3393c709eda7@mail.gmail.com>
Message-ID: <445844CF.7000208@code-bear.com>



Jonathan Lange wrote:
> On 5/3/06, bear <bear42 at code-bear.com> wrote:
>>
>> Jonathan Lange wrote:
>> > Hello,
>> >
>> > I'm trying to reproduce #1630 using the buildbots and I'm not having
>> > any luck.  Apparently none of the database software is installed on
>> > any of the buildbots.  All the tests are skipped with 'Cannot access
>> > db'.
>> >
>> > Can the buildbot maintainers please configure their slaves to have the
>> > appropriate software installed. Otherwise, we can't really continue
>> > supporting twisted.enterprise.
>>
>> Point me to a document or source file that describes what software to
>> install and what userid/password is required and I'll setup the window
>> buildbot slaves.
> I have no such documentation.  I'd suggest the enterprise maintainer
> write one, but there is no such person.

I found the required information after remembering that I had set up 
most of this more than a year ago.

The required information for the test user and database can be found in 
twisted/test/test_adbapi.py - it lists that information as well as what 
database servers it can use (mysql, pgsql, sqlite, gadfly, firefox, etc).

I have enabled pgsql (version 8) and mysql (version 4.1) on the windows 
build slave.




From p.mayers at imperial.ac.uk  Wed May  3 02:26:21 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 03 May 2006 09:26:21 +0100
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4457FCA9.3010907@eastlink.ca>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
	<4457FCA9.3010907@eastlink.ca>
Message-ID: <4458692D.4050000@imperial.ac.uk>

David Pratt wrote:

> I have been using wxpython and twisted together for about a year. They 
> seem to perform well together and I would have no problem recommending 
> wxpython for general cross platform gui development. I am using wxpython 

I'm afraid at least on this list you're in a minority then. It's not 
widely liked, if for no other reason than it's highly uncooperative 
event loop.

> only to illustrate that multiple independent loops can work 
> cooperatively. The target for the multiple reactor possibility is zope 
> client instances where currently an asyncore loop has been integrated 
> for zeo support.

I'm not entirely certain I understand what you want to do - could you 
explain the zope/zeo/zrpc issue(s) you're trying to solve?



From p.mayers at imperial.ac.uk  Wed May  3 02:34:13 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 03 May 2006 09:34:13 +0100
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: <97600867ab180a20f6a24648e41db23c@gmail.com>
References: <17494.3348.841497.813754@terry.jones.tc>
	<97600867ab180a20f6a24648e41db23c@gmail.com>
Message-ID: <44586B05.30806@imperial.ac.uk>

Duncan McGreggor wrote:
> 
> You biggest problem is actually going to be getting PyPAM working. As 
> far as I know, and as far as tummy.com knows (the original sponsors of 
> PyPAM), there's been no release since 1999. I toyed with the idea of 
> using it at one point, but the amount of work necessary in updating the 
> python was too onerous. Perhaps you have a stronger stomach than I :-)

Agreed that PyPAM has bitrotted. FWIW, I circumvented this by using 
Cyrus SASLs "saslauthd" unix socket protocol, with saslauthd configured 
to talk to PAM.

/usr/sbin/saslauthd -m /var/run/saslauthd -a pam -c -n 0


def encode_short(s):
     i = socket.htons(s)
     return chr(i & 0xff) + chr((i >> 8) & 0xff)

def encode_str(s):
     l = encode_short(len(s))
     return l+s

def decode_short(s):
     return socket.ntohs( (ord(s[1]) << 8) + ord(s[0]) )

class SaslAuthdProtocol(protocol.Protocol):
     def connectionMade(self):
         self.data = ''
         # we're going to check this lot
         username = encode_str(self.factory.username)
         password = encode_str(self.factory.password)
         service = encode_str(PAMSERVICENAME)
         realm = encode_str(YOURREALM)
         # ok
         message = username + password + service + realm
         self.transport.write(message)

     def dataReceived(self, data):
         # ok, we've an outstanding request - where are we?
         # we're expecting 2 bytes of length, then length bytes of
         # data which is "code<SP>reason"
         self.data = self.data + data
         dl = len(self.data)
         if dl < 2:
             # we don't have the length yet
             return
         l = decode_short(self.data[:2])
         if dl < l + 2:
             # we don't have the rest of the reply yet
             return
         if dl > l + 2:
             # wtf?
             self.transport.loseConnection()
         # Ok, we can reply
         resp = self.data[2:2+l]
         if ' ' in resp:
             resp, reason = resp.split(' ', 1)
         else:
             reason = ''

         if resp=='OK':
             self.factory.deferred.callback(reason)
         else:
             self.factory.deferred.errback(Exception(reason))


class SaslChecker:
     # We are an ICredentialsChecker implementor
     interface.implements(checkers.ICredentialsChecker)

     # We can only check plaintext username/password combos
     credentialInterfaces = (
             credentials.IUsernamePassword,
             )

     # return the "avatar ID" - username
     def ok(self, matched, username):
         return username
     def err(self, f, username):
         raise error.UnauthorizedLogin(f.getErrorMessage())

     def requestAvatarId(self, creds):
         # Adapt the credentials to a username/password pair
         up = credentials.IUsernamePassword(creds, default=None)

         # It's going to be a deferred reply
         d = defer.Deferred()
         d.addCallbacks(
             self.ok, self.err, (up.username,), {}, (up.username,), {}
         )

         # Send the reply off to saslauthd via unix socket
         f = protocol.ClientFactory()
         f.username = up.username
         f.password = up.password
         f.deferred = d
         f.protocol = SaslAuthdProtocol
         reactor.connectUNIX('/var/run/saslauthd/mux', f)
         return d

Works like a charm.



From manlio_perillo at libero.it  Wed May  3 03:33:22 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 07:33:22 -0200
Subject: [Twisted-Python] cred and stateless protocols
Message-ID: <445878E2.5040806@libero.it>

Hi.

Stateless protocols like HTTP use sessions for client authentication.
The session is created by the server and the client should supply it at
each request.

The question is: does cred support this type of authentication?


Thanks  Manlio Perillo



From manlio_perillo at libero.it  Wed May  3 03:35:58 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 07:35:58 -0200
Subject: [Twisted-Python] status of IM
Message-ID: <4458797E.3010003@libero.it>

Hi.

IM unfortunately uses GTK 1.x.
I would like to use twisted.words for chat but what is its actual status?

I can try to write a version of IM that uses GTK 2.x, but if all is
going to change...


Thanks  Manlio Perillo



From nico at tekNico.net  Wed May  3 04:14:51 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 03 May 2006 12:14:51 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445878E2.5040806@libero.it>
References: <445878E2.5040806@libero.it>
Message-ID: <4458829B.4010107@tekNico.net>

> Stateless protocols like HTTP use sessions for client authentication.

Don't say such a thing in REST company, you could be lynched. ;-)

HTTP does *not* use sessions for authentication (sessions are not defined
in the protocol anyway): it uses headers for Basic and Digest
authentication, see RFC 2617.


> The session is created by the server and the client should supply it at
> each request.

The client supplies authentication *headers* with each request.


> The question is: does cred support this type of authentication?

There's support in twisted.web.woven.guard and .simpleguard .


-- 
Nicola Larosa - http://www.tekNico.net/

It might be a good rule simply to avoid any prestigious task.
If it didn't suck, they wouldn't have had to make it prestigious.
 -- Paul Graham, January 2006





From terry at jon.es  Wed May  3 05:12:04 2006
From: terry at jon.es (Terry Jones)
Date: Wed, 3 May 2006 13:12:04 +0200
Subject: [Twisted-Python] Question on pamauth.py
In-Reply-To: Your message at 22:39:01 on Tuesday, 2 May 2006
References: <17494.3348.841497.813754@terry.jones.tc>
	<97600867ab180a20f6a24648e41db23c@gmail.com>
Message-ID: <17496.36868.338994.693977@terry.jones.tc>

Hi Duncan, thanks for the reply.

>>>>> "Duncan" == Duncan McGreggor <duncan.mcgreggor at gmail.com> writes:
Duncan> The really great thing about cred is that it works the same
Duncan> regardless of the underlying authentication mechanism. I suggest
Duncan> writing a couple toy examples and plugging those into your twisted
Duncan> app, just to get a feel for how things work. In the process you
Duncan> will gain genuine knowledge (as opposed to "a feel").

OK, I'll try that.

Duncan> You probably wouldn't ever need to use twisted.cred.pamauth. You would 
Duncan> use the twisted.cred.checkers.PluggableAuthenticationModulesChecker, 
Duncan> and that works just like, well, a cred checker :-)

Duncan> You biggest problem is actually going to be getting PyPAM
Duncan> working. As far as I know, and as far as tummy.com knows (the
Duncan> original sponsors of PyPAM), there's been no release since 1999. I
Duncan> toyed with the idea of using it at one point, but the amount of
Duncan> work necessary in updating the python was too onerous. Perhaps you
Duncan> have a stronger stomach than I :-)

>From your reply and that of Phil Mayers (thanks Phil), I see that my mail
wasn't really clear.

I didn't really want to know about pamauth specifically (despite my
subject), but about back end cred checkers (not twisted.cred itself) that I
could use with twisted.cred. When I went looking for options on this (e.g.,
based on LDAP, /etc/passwd, PAM, other db approaches, etc), I was surprised
to find myself reading about pamauth, that it was in the Twisted tarball
I'd installed, but that I'd read no mention of it. So I wondered about it,
and also whether there might be other back ends to drop in.

Thanks anyway for the details on pamauth, I'm pretty sure I wont use it.

Duncan> and it's up to you to decide what to do about persisting
Duncan> authentication information.

That was what I was meaning to ask: what do other people do about this
(persisting authentication information)? Are there recognized best
practices for what I described? Maybe the question is too basic! I expected
someone might say "oh, just tell cred to use the XYZ python module".

Duncan> I'm totally not being snotty when I say this (again): cred is
Duncan> cred. One of the really great things about it is how easy it is to
Duncan> do whatever you want. You can create interfaces that represent
Duncan> groups, have a single realm and set/check interfaces, have
Duncan> different realms for different levels of access, etc. You can have
Duncan> your resources implement your group/role interfaces. There's all
Duncan> kinds of stuff you can do, it really depends on your needs. Once
Duncan> you are comfortable with it and have written a few working
Duncan> toys/examples, you will see the potential.

I think I see the potential, that's why I'm here bugging you all. I'm still
trying to understand some things, and at least right now, to know if there
are more standard components that I'm not aware of (that I can drop into
the architecture provided by Twisted, and, in this particular case, cred).

Duncan> Writing the code necessary to plug your twisted app into somebody
Duncan> else's authentication system can be easier than doing it any other
Duncan> way (given that you are working with open, sane standards). I've
Duncan> actually written working cred code faster than other project
Duncan> members have *configured* (GUI) the user management systems I was
Duncan> writing against.

I read that in your blog the other night :-)

Duncan> Here's a great resource:
Duncan> http://twistedmatrix.com/projects/core/documentation/howto/cred.html

Yes, thanks, I'd read that a couple of times too.

Duncan> And if you don't have the O'Reilly twisted book, do yourself a
Duncan> favor and pick up a copy. Abe did a wonderful job explaining cred
Duncan> very clearly in it.

And the book is on its way. I ordered it after reading the review here
http://tv.debian.net/articles/review-snakeball/


Anyway, thanks again for the reply. I'm trying to figure out how to make
about half a dozen things hang together nicely, and I've (obviously) never
used Twisted. I'm getting there. I'll take your advice about small
examples.

Regards,
Terry



From khoa.coffee at gmail.com  Wed May  3 08:49:19 2006
From: khoa.coffee at gmail.com (Khoa Nguyen)
Date: Wed, 3 May 2006 10:49:19 -0400
Subject: [Twisted-Python] Run a function repeatedly at different intervals
Message-ID: <3d00e6dc0605030749w6d3abc5fkcafc7886bdab0104@mail.gmail.com>

Hi,

I am new to Twisted Python. I would like to fire a function several
times at different intervals. For example, at 1 second fire f(), at 2
second fire f() again, at 4 second fire f(), and so on...

How do I do that? I looked at the doc and it has
task.LoopingCall(second) but the time interval is fixed...

Thanks,
Khoa



From exarkun at divmod.com  Wed May  3 09:03:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 3 May 2006 11:03:50 -0400
Subject: [Twisted-Python] Run a function repeatedly at different intervals
In-Reply-To: <3d00e6dc0605030749w6d3abc5fkcafc7886bdab0104@mail.gmail.com>
Message-ID: <20060503150350.22481.1208478653.divmod.quotient.21036@ohm>

On Wed, 3 May 2006 10:49:19 -0400, Khoa Nguyen <khoa.coffee at gmail.com> wrote:
>Hi,
>
>I am new to Twisted Python. I would like to fire a function several
>times at different intervals. For example, at 1 second fire f(), at 2
>second fire f() again, at 4 second fire f(), and so on...
>
>How do I do that? I looked at the doc and it has
>task.LoopingCall(second) but the time interval is fixed...
>

LoopingCall is implemented in terms of IReactorTime.callLater.  If you want to schedule a function to run in 1, 2, and 4 seconds:

    reactor.callLater(1, f)
    reactor.callLater(2, f)
    reactor.callLater(4, f)

You could also have f re-schedule itself when it runs, or write a helper that schedules it, as LoopingCall is a helper for running a function on a fixed interval.

It may also be possible to extend LoopingCall to allow changing its interval as it runs.  You could also use LoopingCall as it is and stop() and then start() it with a new interval.

Jean-Paul



From manlio_perillo at libero.it  Wed May  3 09:20:34 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 03 May 2006 13:20:34 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458829B.4010107@tekNico.net>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
Message-ID: <4458CA42.5060207@libero.it>

Nicola Larosa ha scritto:
>> Stateless protocols like HTTP use sessions for client authentication.
> 
> Don't say such a thing in REST company, you could be lynched. ;-)
> 
> HTTP does *not* use sessions for authentication (sessions are not defined
> in the protocol anyway): it uses headers for Basic and Digest
> authentication, see RFC 2617.
> 

Ok, but it is improper to require such an authentication for each
resource... ;-)

Clients authenticate once and use "sessions" to identify themselves.

> 
>> The session is created by the server and the client should supply it at
>> each request.
> 
> The client supplies authentication *headers* with each request.
> 

Yes.

> 
>> The question is: does cred support this type of authentication?
> 
> There's support in twisted.web.woven.guard and .simpleguard .
> 

Ok, but maybe sessions can be used by other protocols (over UDP).
I whould like to have some support for creating secure sessions, but
maybe I just have to do urandom(some_bits)?



Thanks  Manlio Perillo



From jarrod at vertigrated.com  Wed May  3 09:20:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:20:31 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <17496.49562.439820.574229@terry.jones.tc>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<17496.49562.439820.574229@terry.jones.tc>
Message-ID: <2389d4730605030820u6a12311cjbe84507bd70348bc@mail.gmail.com>

On 5/3/06, Terry Jones <tcj25 at cam.ac.uk> wrote:

>
> I'd like to know the answer, when you get it (assuming it's not just an
> old
> version of Xapian).
>
>
nope, I installed the latest stable 0.9.5 and it does the same thing,
doesn't close xapian correctly.

:-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060503/97d43647/attachment.html>

From jarrod at vertigrated.com  Wed May  3 09:26:21 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:26:21 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <20060503130659.GG32166@survex.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
Message-ID: <2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>

On 5/3/06, Olly Betts <olly at survex.com> wrote:
>
> On Tue, May 02, 2006 at 11:25:25PM -0400, jarrod roberson wrote:
> > xapian and xapian bindings 0.9.2 svn 6532
>
> That's rather old - is this reproducible with 0.9.5?
>
> > It leaves the db_lock file everytime and I don't know what else it might
> not
> > be cleaning up correctly either.
>
> The db_lock file gets deleted when the C++ WritableDatabase destructor
> is called.  So if it's not deleted, then the destructor isn't being
> called.
>
> If you can reproduce with the latest release in a simple example
> (ideally without twisted being involved), I can try to investigate.
>
> Cheers,
>     Olly
>

yes, just upgraded and it does the same thing with 0.9.5

the problem is I can't reproduce it outside of Twisted.

all my command line tools that I have written ( all in Python ) that use the
exact same code exit and close properly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060503/6c5736d0/attachment.html>

From jarrod at vertigrated.com  Wed May  3 09:32:32 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 11:32:32 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
	<2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
Message-ID: <2389d4730605030832l51a3c80j1263ba9f98e885d@mail.gmail.com>

Here is the relevant output

cassandra:~/projects/wc/wfs/trunk/python/indexd
>delve --version
delve - xapian-core 0.9.5
cassandra:~/projects/wc/wfs/trunk/python/indexd
>whack /index/wfs/
cassandra:~/projects/wc/wfs/trunk/python/indexd
>twistd -noy indexd.tac
2006/05/03 11:18 EDT [-] Log opened.
2006/05/03 11:18 EDT [-] twistd 2.2.0 (/usr/bin/python 2.4.1) starting up
2006/05/03 11:18 EDT [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2006/05/03 11:18 EDT [-] Loading indexd.tac...
2006/05/03 11:18 EDT [-] Loaded.
2006/05/03 11:18 EDT [-] __builtin__.IndexerFactoryFromService starting on
9000
2006/05/03 11:18 EDT [-] Starting factory
<__builtin__.IndexerFactoryFromService instance at 0x5259e0>
2006/05/03 11:18 EDT [-] Start Xapian Index Service
^C2006/05/03 11:19 EDT [-] Received SIGINT, shutting down.
2006/05/03 11:19 EDT [-] Stopping Xapian Indexer Service
2006/05/03 11:19 EDT [-] (Port 9000 Closed)
2006/05/03 11:19 EDT [-] Stopping factory
<__builtin__.IndexerFactoryFromService instance at 0x5259e0>
2006/05/03 11:19 EDT [-] Main loop terminated.
2006/05/03 11:19 EDT [-] Server Shut Down.
cassandra:~/projects/wc/wfs/trunk/python/indexd
>twistd -noy indexd.tac
2006/05/03 11:19 EDT [-] Log opened.
2006/05/03 11:19 EDT [-] twistd 2.2.0 (/usr/bin/python 2.4.1) starting up
2006/05/03 11:19 EDT [-] reactor class:
twisted.internet.selectreactor.SelectReactor
2006/05/03 11:19 EDT [-] Loading indexd.tac...
2006/05/03 11:19 EDT [-] Traceback (most recent call last):
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 159, in getApplication
2006/05/03 11:19 EDT [-]     application = service.loadApplication(filename,
style, passphrase)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/service.py",
line 301, in loadApplication
2006/05/03 11:19 EDT [-]     application = sob.loadValueFromFile(filename,
'application', passphrase)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/persisted/sob.py",
line 208, in loadValueFromFile
2006/05/03 11:19 EDT [-]     exec fileObj in d, d
2006/05/03 11:19 EDT [-]   File "indexd.tac", line 157, in ?
2006/05/03 11:19 EDT [-]     i = XapianIndexerService('/wfs/',
'/index/wfs/')
2006/05/03 11:19 EDT [-]   File "indexd.tac", line 99, in __init__
2006/05/03 11:19 EDT [-]     self.db = xapian.WritableDatabase(indexRoot,
xapian.DB_CREATE_OR_OPEN)
2006/05/03 11:19 EDT [-]   File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/xapian.py",
line 433, in __init__
2006/05/03 11:19 EDT [-]
_xapian.WritableDatabase_swiginit(self,_xapian.new_WritableDatabase(*args))
2006/05/03 11:19 EDT [-] IOError: DatabaseLockError: Unable to acquire
database write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-] Failed to load application: DatabaseLockError:
Unable to acquire database write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-] Traceback (most recent call last):
          File "/usr/bin/twistd", line 25, in ?
            run()
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/scripts/twistd.py",
line 205, in run
            app.run(runApp, ServerOptions)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 278, in run
            runApp(config)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/scripts/twistd.py",
line 195, in runApp
            application = app.getApplication(config, passphrase)
        --- <exception caught here> ---
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/app.py",
line 159, in getApplication
            application = service.loadApplication(filename, style,
passphrase)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/application/service.py",
line 301, in loadApplication
            application = sob.loadValueFromFile(filename, 'application',
passphrase)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/twisted/persisted/sob.py",
line 208, in loadValueFromFile
            exec fileObj in d, d
          File "indexd.tac", line 157, in ?
            i = XapianIndexerService('/wfs/', '/index/wfs/')
          File "indexd.tac", line 99, in __init__
            self.db = xapian.WritableDatabase(indexRoot,
xapian.DB_CREATE_OR_OPEN)
          File
"/Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4/site-packages/xapian.py",
line 433, in __init__

_xapian.WritableDatabase_swiginit(self,_xapian.new_WritableDatabase(*args))
        exceptions.IOError: DatabaseLockError: Unable to acquire database
write lock /index/wfs//db_lock


Failed to load application: DatabaseLockError: Unable to acquire database
write lock /index/wfs//db_lock
2006/05/03 11:19 EDT [-]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060503/2e7a9e99/attachment.html>

From jarrod at vertigrated.com  Wed May  3 11:32:20 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 13:32:20 -0400
Subject: [Twisted-Python] Re: [Xapian-discuss] Twisted + Xapian
	WriteableDatabase leaves db_lock file on exit.
In-Reply-To: <20060503162226.GJ32166@survex.com>
References: <2389d4730605022025y63f2dfe6m1e2d2b0498dc2db8@mail.gmail.com>
	<20060503130659.GG32166@survex.com>
	<2389d4730605030826t5574eebbud1317b48e88d082e@mail.gmail.com>
	<20060503153012.GG13360@tartarus.org>
	<2389d4730605030845i5a077972vc6e3b1717ed2957d@mail.gmail.com>
	<20060503162226.GJ32166@survex.com>
Message-ID: <2389d4730605031032g1b637071laa02ef5e3f04b0b0@mail.gmail.com>

On 5/3/06, Olly Betts <olly at survex.com> wrote:
>
> It seems this has cropped up before - see Michael Salib's point "2."
> here:
>
> http://article.gmane.org/gmane.comp.search.xapian.general/1387
>
> I've not yet implemented WritableDatabase::close() though.
>
> Incidentally, the stale lockfile on exit issue goes away if you use
> flint instead of quartz, though the database lock will still be held
> while the process keeps running which could still be a problem.
>
> Cheers,
>     Olly
>

thanks for the hint about using Flint instead.
I thought I was but I guess I didn't add it to my .profile

using Flint it starts and stops and doesn't cause any problems now.

a .close() method on WritableDatabase might be a good addition.
Just so you can force the db closed when you think it might not be being
de-referenced reliably.

It seems to be the same type of issue listed in that link you posted.
Twisted is probably holding on to the Service object
and that is holding on to the db object.

I KNOW I am not sharing db objects nor document objects since it is all
single threaded and all self contained in that one index method.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060503/a18c8069/attachment.html>

From glyph at divmod.com  Wed May  3 11:36:07 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 13:36:07 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458829B.4010107@tekNico.net>
Message-ID: <20060503173607.22481.535329188.divmod.quotient.21097@ohm>



On Wed, 03 May 2006 12:14:51 +0200, Nicola Larosa <nico at teknico.net> wrote:
>> Stateless protocols like HTTP use sessions for client authentication.

>> The question is: does cred support this type of authentication?
>
>There's support in twisted.web.woven.guard and .simpleguard .

Euuuugghhhh.  twisted.web.woven.* is ancient, deprecated, and buggy.  Don't use it as anything other than an example (and even then it's not a terribly good example).

You can find a more recent examples in nevow.guard, http://divmod.org/

It supports both session-based and HTTP-auth-based authentication with cred.



From jarrod at vertigrated.com  Wed May  3 11:43:24 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Wed, 3 May 2006 13:43:24 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458CA42.5060207@libero.it>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
	<4458CA42.5060207@libero.it>
Message-ID: <2389d4730605031043i4254ca77v75e378d94f872532@mail.gmail.com>

On 5/3/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> Nicola Larosa ha scritto:
> >> Stateless protocols like HTTP use sessions for client authentication.
> >
> > Don't say such a thing in REST company, you could be lynched. ;-)



no the correct statement is

Stateless protocols like HTTP use sessions to STORE STATE.

Nicola is correct, HTTP only support authentication on every request since
it is STATELESS and only supports BASIC and DIGEST.


if you want to make it STATEFUL then using "sessions" is just one of many
ways to store and track that STATE.
if you want to store authentication tokens as part of that STATE you can,
but that has NOTHING to do with HTTP Authentication and is probably NOT
secure, but it has NOTHING to do with
"... HTTP using sessions for client authentication."
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060503/9709eb1a/attachment.html>

From glyph at divmod.com  Wed May  3 11:44:33 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 13:44:33 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4458692D.4050000@imperial.ac.uk>
Message-ID: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>



On Wed, 03 May 2006 09:26:21 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>David Pratt wrote:
>>I have been using wxpython and twisted together for about a year. They seem 
>>to perform well together and I would have no problem recommending wxpython 
>>for general cross platform gui development. I am using wxpython
>
>I'm afraid at least on this list you're in a minority then. It's not widely 
>liked, if for no other reason than it's highly uncooperative event loop.

Actually, it seems like a lot of people use WX and Twisted, and some people like the combination quite a lot.  I think OSAF is still using this combination for Chandler and I don't think they're unhappy.

The reason you hear so much vitriol about it on this list is that 90% of the time, wx + networking appears to work in the lab, but when released into the wild will explode in unexpected ways; many people here who don't like wx are nevertheless maintaining applications which use it.  If you know what you're doing with both event loops you can prevent this, though.



From bear42 at code-bear.com  Wed May  3 13:33:18 2006
From: bear42 at code-bear.com (bear)
Date: Wed, 03 May 2006 15:33:18 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>
References: <20060503174433.22481.1800222426.divmod.quotient.21101@ohm>
Message-ID: <4459057E.90608@code-bear.com>


glyph at divmod.com wrote:
>
>
> On Wed, 03 May 2006 09:26:21 +0100, Phil Mayers 
> <p.mayers at imperial.ac.uk> wrote:
>> David Pratt wrote:
>>> I have been using wxpython and twisted together for about a year. 
>>> They seem to perform well together and I would have no problem 
>>> recommending wxpython for general cross platform gui development. I 
>>> am using wxpython
>> I'm afraid at least on this list you're in a minority then. It's not 
>> widely liked, if for no other reason than it's highly uncooperative 
>> event loop.
> Actually, it seems like a lot of people use WX and Twisted, and some 
> people like the combination quite a lot.  I think OSAF is still using 
> this combination for Chandler and I don't think they're unhappy.
We are using Twisted and wxPython and so far have been very pleased - 
but that doesn't mean we haven't had many of the issues that glyph is 
warning about.  We've just built suitable walls so the two parts don't 
really realize they are in the same app.


bear
build/release grunt for Open Source Applications Foundation (OSAF)



From fairwinds at eastlink.ca  Wed May  3 17:32:26 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Wed, 03 May 2006 20:32:26 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4458692D.4050000@imperial.ac.uk>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>
	<4457FCA9.3010907@eastlink.ca> <4458692D.4050000@imperial.ac.uk>
Message-ID: <44593D8A.6040706@eastlink.ca>

Hi Phil. I am pleased about the zope and twisted integrated in zope3. I 
believe there can be a tighter integration and additional benefits. Zope 
currently uses a twisted loop to run the application and an asyncore 
loop for zeo communication. These are both initialized at start up. What 
I would like to see, is ansyncore replaced with a second twisted loop. I 
would also like the zeo server to be a twisted app that runs zrpc. 
Twisted's ssh and ssl support would be used to secure client / server 
communication.

Regards,
David

Phil Mayers wrote:
> David Pratt wrote:
> 
>> I have been using wxpython and twisted together for about a year. They 
>> seem to perform well together and I would have no problem recommending 
>> wxpython for general cross platform gui development. I am using wxpython 
> 
> I'm afraid at least on this list you're in a minority then. It's not 
> widely liked, if for no other reason than it's highly uncooperative 
> event loop.
> 
>> only to illustrate that multiple independent loops can work 
>> cooperatively. The target for the multiple reactor possibility is zope 
>> client instances where currently an asyncore loop has been integrated 
>> for zeo support.
> 
> I'm not entirely certain I understand what you want to do - could you 
> explain the zope/zeo/zrpc issue(s) you're trying to solve?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From glyph at divmod.com  Wed May  3 20:50:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 3 May 2006 22:50:14 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44593D8A.6040706@eastlink.ca>
Message-ID: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>



On Wed, 03 May 2006 20:32:26 -0300, David Pratt <fairwinds at eastlink.ca> wrote:
>Hi Phil. I am pleased about the zope and twisted integrated in zope3. I 
>believe there can be a tighter integration and additional benefits. Zope 
>currently uses a twisted loop to run the application and an asyncore loop 
>for zeo communication. These are both initialized at start up. What I would 
>like to see, is ansyncore replaced with a second twisted loop. I would also 
>like the zeo server to be a twisted app that runs zrpc. Twisted's ssh and 
>ssl support would be used to secure client / server communication.

Why is a second event-loop necessary here?



From p.mayers at imperial.ac.uk  Thu May  4 02:24:10 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 04 May 2006 09:24:10 +0100
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <44593D8A.6040706@eastlink.ca>
References: <20060502223856.22481.357549020.divmod.quotient.20771@ohm>	<4457FCA9.3010907@eastlink.ca>
	<4458692D.4050000@imperial.ac.uk> <44593D8A.6040706@eastlink.ca>
Message-ID: <4459BA2A.4060800@imperial.ac.uk>

David Pratt wrote:
> currently uses a twisted loop to run the application and an asyncore 
> loop for zeo communication. These are both initialized at start up. What 
> I would like to see, is ansyncore replaced with a second twisted loop. I 

Why in the world wouldn't you use the first twisted loop? Why a second?



From eric.faurot at gmail.com  Thu May  4 03:05:21 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 4 May 2006 11:05:21 +0200
Subject: [Twisted-Python] No-op TimerService on Windows?
Message-ID: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>

Hi,

In the process of exploring my options for deploying twisted
applications on Windows, I noticed that when running the application,
_twistw (line 43) also starts a TimerService around a no-op:

app.startApplication(internet.TimerService(0.1, lambda:None), 0)

I suppose there is very good reason to do so, but I do not see it.
Can somebody enlighten me?

Eric.

From fairwinds at eastlink.ca  Thu May  4 07:03:24 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Thu, 04 May 2006 10:03:24 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
References: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
Message-ID: <4459FB9C.2080202@eastlink.ca>

glyph at divmod.com wrote:
> 
> 
> On Wed, 03 May 2006 20:32:26 -0300, David Pratt <fairwinds at eastlink.ca> 
> wrote:
>> Hi Phil. I am pleased about the zope and twisted integrated in zope3. 
>> I believe there can be a tighter integration and additional benefits. 
>> Zope currently uses a twisted loop to run the application and an 
>> asyncore loop for zeo communication. These are both initialized at 
>> start up. What I would like to see, is ansyncore replaced with a 
>> second twisted loop. I would also like the zeo server to be a twisted 
>> app that runs zrpc. Twisted's ssh and ssl support would be used to 
>> secure client / server communication.
> 
> Why is a second event-loop necessary here?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Hi Glyph. I believe that performance would suffer using a single loop. I 
am not aware of any evaluation to provide evidence of the extent of the 
impact this would have. zrpc has never been refactored in twisted to 
date, though I have recently suggested this. My general feeling is that 
a different syncing solution is most likely needed. The existing zeo 
client / server relationship has limitations, one of these being the 
granularity desired in the communication longer term. My inclination 
more recently has been to leave zeo alone and work with something 
different that might present an alternative.

The thought of using the existing reactor for communication and serving 
has not escaped me. Once I have a syncing server working in twisted with 
whatever protocol I use, I will have the chance to evaluate performance 
on a couple of levels. This discussion for me has a bit more to do with 
possibilities and exploring boundaries at this point. Googling for 
information, I came across the patch that also suggested the possibility 
of multiple independent reactors. This possibility is interesting to me, 
  even outside of zope.

Regards,
David



From ssgzhantr at gmail.com  Thu May  4 08:19:04 2006
From: ssgzhantr at gmail.com (xuezhu aerodew)
Date: Thu, 4 May 2006 22:19:04 +0800
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4459FB9C.2080202@eastlink.ca>
References: <20060504025014.22481.1115706766.divmod.quotient.21280@ohm>
	<4459FB9C.2080202@eastlink.ca>
Message-ID: <baf51e510605040719n7fe8c32euf1053ba1acffa963@mail.gmail.com>

    i have erver try to patch twisted to let it use threadpool,so that
do_select will not be blocked,and let more than one thread execute the event
handle,but seeming as above mentioned,that undertaking is non_trivival
goal.we have to take care of condition race.so currently for multiple
threaded main loop,it is not possible
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060504/6ac032e0/attachment.html>

From glyph at divmod.com  Thu May  4 08:26:22 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 4 May 2006 10:26:22 -0400
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
Message-ID: <20060504142622.22481.1505062321.divmod.quotient.21329@ohm>



On Thu, 4 May 2006 11:05:21 +0200, Eric Faurot <eric.faurot at gmail.com> wrote:

>In the process of exploring my options for deploying twisted
>applications on Windows, I noticed that when running the application,
>_twistw (line 43) also starts a TimerService around a no-op:
>
>app.startApplication(internet.TimerService(0.1, lambda:None), 0)
>
>I suppose there is very good reason to do so, but I do not see it.
>Can somebody enlighten me?

There should be a comment or something to this effect, but:

On Windows, the "signal" handling that Control-c triggers doesn't actually interrupt select().  That timer is there to keep the timeout low so that the server responds in a timely fashion when the user hits Control-c on the console, even if nothing else is happening.



From glyph at divmod.com  Thu May  4 08:32:32 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 4 May 2006 10:32:32 -0400
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <4459FB9C.2080202@eastlink.ca>
Message-ID: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>


>glyph at divmod.com wrote:
>>Why is a second event-loop necessary here?

>Hi Glyph. I believe that performance would suffer using a single loop. I am 
>not aware of any evaluation to provide evidence of the extent of the impact 
>this would have.

Fair enough.

>The thought of using the existing reactor for communication and serving has 
>not escaped me. Once I have a syncing server working in twisted with 
>whatever protocol I use, I will have the chance to evaluate performance on a 
>couple of levels. This discussion for me has a bit more to do with 
>possibilities and exploring boundaries at this point. Googling for 
>information, I came across the patch that also suggested the possibility of 
>multiple independent reactors. This possibility is interesting to me,  even 
>outside of zope.

Despite the fact that I don't have a similar use-case on a real server or client, it's also interesting to me.  It would definitely make certain test-cases easier to write, and easier testing == more tests.  :)

I previously suggested that perhaps you could write tests for that patch, to verify that multiple reactors could actually run simultaneously.  That was a serious suggestion: if you'd like Twisted to support this feature, you can almost certainly get it accepted if there are accompanying test cases.  I'll commit to doing the reviews if you submit the patches.



From eric.faurot at gmail.com  Thu May  4 09:39:22 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Thu, 4 May 2006 17:39:22 +0200
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
References: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
	<20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
Message-ID: <e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>

On 5/4/06, glyph at divmod.com <glyph at divmod.com> wrote:

> On Thu, 4 May 2006 11:05:21 +0200, Eric Faurot <eric.faurot at gmail.com> wrote:
>
> >In the process of exploring my options for deploying twisted
> >applications on Windows, I noticed that when running the application,
> >_twistw (line 43) also starts a TimerService around a no-op:
> >
> >app.startApplication(internet.TimerService(0.1, lambda:None), 0)
> >
> >I suppose there is very good reason to do so, but I do not see it.
> >Can somebody enlighten me?
>
> There should be a comment or something to this effect, but:
>
> On Windows, the "signal" handling that Control-c triggers doesn't actually interrupt select().  That timer is there to keep the timeout low so that the server responds in a timely fashion when the user hits Control-c on the console, even if nothing else is happening.

Ok, but as far as I can see, it is redundant with way select is
wrapped on win32 (in selectreactor). BTW, I am not windows-savvy, but
are the arguments to select (r,w,w) really correct? not (r,w,e)?

def win32select(r, w, e, timeout=None):
    """Win32 select wrapper."""
    if not (r or w):
        # windows select() exits immediately when no sockets
        if timeout is None:
            timeout = 0.01
        else:
            timeout = min(timeout, 0.001)
        sleep(timeout)
        return [], [], []
    # windows doesn't process 'signals' inside select(), so we set a max
    # time or ctrl-c will never be recognized
    if timeout is None or timeout > 0.5:
        timeout = 0.5
    r, w, e = select.select(r, w, w, timeout)
    return r, w + e, []


Eric.

From fairwinds at eastlink.ca  Thu May  4 11:59:42 2006
From: fairwinds at eastlink.ca (David Pratt)
Date: Thu, 04 May 2006 14:59:42 -0300
Subject: [Twisted-Python] Multiple main loops
In-Reply-To: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>
References: <20060504143232.22481.412493931.divmod.quotient.21332@ohm>
Message-ID: <445A410E.8000505@eastlink.ca>

glyph at divmod.com wrote:
> I previously suggested that perhaps you could write tests for that 
> patch, to verify that multiple reactors could actually run 
> simultaneously.  That was a serious suggestion: if you'd like Twisted to 
> support this feature, you can almost certainly get it accepted if there 
> are accompanying test cases.  I'll commit to doing the reviews if you 
> submit the patches.

Hi Glyph. The first thing I'm looking at is putting together a sync 
server. This will take some time. Once I have something, I'll be looking 
to measure the impact on zope. This should eliminate some speculatation 
and provide a clearer picture of performance.

At this point I'm hoping to have something a bit more concrete to 
discuss. I may be surprised - who knows. I am hoping this effort will 
result in something that will work well enough to use on zope's single 
reactor (if only for lighter use) in the interim.

If performance is not so hot, I will be revisit the multiple reactor 
issue. There is another person that I have been in contact with that is 
also interested in helping. But there is no point in going this 
direction just yet. Not without at least a demonstration server and 
client, and any proof a significant performance impact.

Regards,
David



From andrew-twisted at puzzling.org  Thu May  4 19:51:47 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 5 May 2006 11:51:47 +1000
Subject: [Twisted-Python] No-op TimerService on Windows?
In-Reply-To: <e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>
References: <e012d6b50605040205n632aaa98ydbd586584bf694d7@mail.gmail.com>
	<20060504142622.22481.1505062321.divmod.quotient.21329@ohm>
	<e012d6b50605040839q2ffb9d22sa05d22268e8f304e@mail.gmail.com>
Message-ID: <20060505015147.GF12431@steerpike.home.puzzling.org>

On Thu, May 04, 2006 at 05:39:22PM +0200, Eric Faurot wrote:
> On 5/4/06, glyph at divmod.com <glyph at divmod.com> wrote:
> 
[...]
> >
> >There should be a comment or something to this effect, but:
> >
> >On Windows, the "signal" handling that Control-c triggers doesn't actually 
> >interrupt select().  That timer is there to keep the timeout low so that 
> >the server responds in a timely fashion when the user hits Control-c on 
> >the console, even if nothing else is happening.
> 
> Ok, but as far as I can see, it is redundant with way select is
> wrapped on win32 (in selectreactor). BTW, I am not windows-savvy, but
> are the arguments to select (r,w,w) really correct? not (r,w,e)?

You're right, this does seem to take care of that problem.  I'm not sure what
benefit the extra code to do this in twistw adds.

As far as (r,w,w) goes, yes, it is correct -- again, there ought to be a comment
about this.  select on windows is subtly incompatible with select on POSIX, and
uses the third fd set to check for connection failures and the like, whereas on
POSIX this is just signalled on the first or second fd set.  I forget the
precise details, but luckily Itamar has recorded them here: 

    http://itamarst.org/writings/win32sockets.html

So our win32select wrapper passes the write list as the exception list too, then
returns (r, w + e, []) -- so the wrapper behaves more like POSIX, as the
SelectReactor expects.

-Andrew.




From ssgzhantr at gmail.com  Thu May  4 21:13:59 2006
From: ssgzhantr at gmail.com (aerodew)
Date: Fri, 5 May 2006 11:13:59 +0800
Subject: [Twisted-Python] protocol factory
Message-ID: <baf51e510605042013s3c204403p1fb0f3db7e2a9658@mail.gmail.com>

    i think Factory is not to the point,just concerned with its
concept,factory
should only take care of producing proper protocol instance.i can't see any
clue
of protocol context in the defintion of factory.so the boudary of factory is
loom,i don't
like it.or on other hand,we can it can be categoried into abstract
factroy,then i proprose
following refraction.

class ProtoAbsFactory:
    implements(interfaces.IProtocolFactory)

    protocol=None
    context=None

    numProtos=0

    def buildProtocol(self):
        pass
    def buildContext(self):
        pass

class ProtoContext:
    def doStart(self):
        pass
    def doStop(self):
        pass

class ClientProtoContext(ProtoContext):
    def startedCnnecting(self):
        pass
    def clientConnectionFailed(self):
        pass
    def clientConnectionLost(self):
        pass

class ReconnectingClientProtoContext(ClientProtoContext):
    def clientConnectoionFailed(self,connector,reason):
        self.connector=connector
        self.retry()
    def clientConnectionLost(self,connector,reason):
        self.connector=connector
        self.retry()
    def retry(self):
        self.connector.connect()

     by introducing context,we make solution for some situation
very simple,just like http,since it is a stateless ,we have to bring
in session to store state information during the communication,here by
refining the context ,we can easily achieve it
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060505/9ecef08e/attachment.html>

From robert at gravina.com  Fri May  5 06:16:23 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 5 May 2006 21:16:23 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
Message-ID: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>

Twisted-list,

In an application I'm writing I would like all Perspective Broker  
clients to share some list of objects and have them all keep in sync  
when one of the clients updates an object's attributes (imagine say a  
shared address book - I'm not creating an address book, but it's  
easier than explaining the details of my app). I've created a  
pb.Cacheable class for the purposes of notifying clients when new  
objects are added to this list which works fine (I based this on the  
cache_classes.py example from the docs here <http://twistedmatrix.com/ 
projects/core/documentation/howto/pb-copyable.html>).

Where I am having trouble is with round trip editing these objects  
(which are all both pb.Copyable and pb.RemoteCopy - I did this so  
that I wouldn't have problems of accidentally storing a RemoteFoo  
object in my ZODB rather than a Foo object). Say one user edits one  
of the objects (e.g. changes the name/phone number etc. of one of the  
entries in the shared address book). and then I callRemote to some  
method like "updateObject" on the users Avatar and pass this object  
to this method. According to the doc page I mentioned previously   
"Copyable objects return unchanged from a round trip", but when I  
check if the object is in the list on the server it thinks it isn't  
there. In fact, they seem to point to different objects in memory, so  
naturally a "if object in list" statement will fail.

Am I checking for equality in the wrong way? Or am I approaching the  
problem in the wrong way?

I am quite new to Twisted, so I apologise if the problem is obvious.

Robert



From mcmillen at cs.cmu.edu  Fri May  5 07:49:40 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Fri, 5 May 2006 09:49:40 -0400
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
Message-ID: <20060505134940.GF27715@cs.cmu.edu>

> Am I checking for equality in the wrong way? Or am I approaching the  
> problem in the wrong way?

I'm not sure if this is the Right Way of doing things, but I got
around this in my own application by making my Copyable objects have a
unique ID. Keep your objects in a dict that maps from id -> object, and
then just say something like:

    objDict[obj.objID] = obj

whenever you get an object back. Possibly you want to check to see if
the object is already in the dict, depending on your application-level
constraints -- in my particular application, it would be considered an
error to send back an object with an ID that wasn't already known by
the server. (Also, you may or may not want to set __eq__, __lt__,
etc. to compare these objects by their ID.)

- Colin


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060505/87dce355/attachment.sig>

From robert at gravina.com  Fri May  5 08:24:46 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 5 May 2006 23:24:46 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <20060505134940.GF27715@cs.cmu.edu>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
Message-ID: <949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>


On 2006/05/05, at 22:49, Colin McMillen wrote:

>> Am I checking for equality in the wrong way? Or am I approaching the
>> problem in the wrong way?
>
> I'm not sure if this is the Right Way of doing things, but I got
> around this in my own application by making my Copyable objects have a
> unique ID. Keep your objects in a dict that maps from id -> object,  
> and
> then just say something like:
>
>     objDict[obj.objID] = obj
>
> whenever you get an object back. Possibly you want to check to see if
> the object is already in the dict, depending on your application-level
> constraints -- in my particular application, it would be considered an
> error to send back an object with an ID that wasn't already known by
> the server. (Also, you may or may not want to set __eq__, __lt__,
> etc. to compare these objects by their ID.)
>

Thanks Colin, this would actually work fine for what I need to do. I  
just figured that I was doing something wrong since it's mentioned in  
a few places that Twisted should be able to do this. Perhaps I am  
mistaking Copyable with Referenceable however... The example from the  
docs I was thinking of where an object is send on a round trip then  
compared using '==' is actually a pb.Referenceable (I think Copyable  
is a subclass though)?

Anyway, your solution should work and I might use that for the time  
being. All objects that could possibly go out to clients and come  
back again should be stored in the ZODB, so I might be able to use  
whatever ID it uses, or generate one myself otherwise.

If anyone knows the "Twisted Way" do deal with several clients  
sharing lists of objects (or even just complex objects that refer to  
other objects) please let me know.

Thanks all for the fast responses!

> - Colin
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From mithrandi-twisted-python at mithrandi.za.net  Fri May  5 08:53:54 2006
From: mithrandi-twisted-python at mithrandi.za.net (Tristan Seligmann)
Date: Fri, 5 May 2006 16:53:54 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4458CA42.5060207@libero.it>
References: <445878E2.5040806@libero.it> <4458829B.4010107@tekNico.net>
	<4458CA42.5060207@libero.it>
Message-ID: <20060505145354.GD27395@mithrandi.za.net>

* Manlio Perillo <manlio_perillo at libero.it> [2006-05-03 13:20:34 -0200]:

> Ok, but it is improper to require such an authentication for each
> resource... ;-)
> 
> Clients authenticate once and use "sessions" to identify themselves.

Many people are successfully using basic/digest auth without any use of
sessions, and I would hardly call this "improper". In many cases it is
much more straightforward than bolting on stateful session tracking, and
it also potentially makes client implementation simpler.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060505/577a4c9f/attachment.sig>

From mcmillen at cs.cmu.edu  Fri May  5 09:31:41 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Fri, 5 May 2006 11:31:41 -0400
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
Message-ID: <20060505153141.GH27715@cs.cmu.edu>

> Thanks Colin, this would actually work fine for what I need to do. I  
> just figured that I was doing something wrong since it's mentioned in  
> a few places that Twisted should be able to do this. Perhaps I am  
> mistaking Copyable with Referenceable however... The example from the  
> docs I was thinking of where an object is send on a round trip then  
> compared using '==' is actually a pb.Referenceable (I think Copyable  
> is a subclass though)?

As I said, I'm not sure that my way of doing things is the Right Way
(or considered a best practice), so if anyone can confirm or deny,
that would possibly be useful. :) It seems like a hack, but it works
for me.

- Colin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20060505/a24b3690/attachment.sig>

From robert at gravina.com  Fri May  5 10:42:32 2006
From: robert at gravina.com (Robert Gravina)
Date: Sat, 6 May 2006 01:42:32 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <20060505153141.GH27715@cs.cmu.edu>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
Message-ID: <B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>

> As I said, I'm not sure that my way of doing things is the Right Way
> (or considered a best practice), so if anyone can confirm or deny,
> that would possibly be useful. :) It seems like a hack, but it works
> for me.
>

Yeah actually I think my problem is that I shouldn't be using  
Copyable since they copy-by-value and what I really want to do is  
copy-by-reference so that when clients edit attributes on the object  
the server (and other clients) can find out about it. I should be  
using Cacheable, but not sure having every object in my application  
as a Cacheable with a list of observers is the best way to go about it.

Guess I'll just have to think this through a little more.

Although I understand whether to use Referenceable/Copyable/Cachable  
depends on your specific application, If anyone could suggest a good  
general way to approach keeping clients in sync who are sharing many  
objects that would be of great help.

I've already got one "cache" type object (a pb.Cacheable) that keeps  
a list of observers and all adds/updates/deletes go through this...  
but up until now I have been using Copyable for the objects that are  
stored in lists in this cache, but found I can't update after a  
client modifies using Copyables (because I have no way of telling  
which object was sent back to the server). Using Referencable would  
be tricky because the clients need to access all the classes  
attributes to display in the UI, and that would require remote_get*  
methods for all of them) and using Cachables again would require  
*another* list of observers to be maintained - I'm just not sure how  
all this should work.

Does anyone have any suggestions of how to tackle this problem?

Robert




From general at eepatents.com  Fri May  5 11:14:25 2006
From: general at eepatents.com (Ed Suominen)
Date: Fri, 05 May 2006 10:14:25 -0700
Subject: [Twisted-Python] Twisted + SQLAlchemy
In-Reply-To: <000c01c67022$3063be80$38aa20d4@hp>
References: <000c01c67022$3063be80$38aa20d4@hp>
Message-ID: <445B87F1.1040908@eepatents.com>

I've received an inquiry about how I'm using SQLAlchemy under Twisted. I
thought I'd provide the answer so that others can benefit from it as well:

http://foss.eepatents.com/pNetworkX/browser/trunk/pnetworkx/database.py

Note particularly the "transact" function, which is used as a decorator.
Thanks to Valentino Volonghi (aka Dialtone) for the fine idea of using a
decorator to set up a nonblocking transaction (using deferToThread) for
whatever functions are so designated.

Here's a usage example, with various database-accessing methods that are
decorated with "@transact":

http://foss.eepatents.com/pNetworkX/browser/trunk/pnetworkx/edges.py

Best regards,
Ed Suominen



From glyph at divmod.com  Fri May  5 15:39:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 5 May 2006 17:39:21 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <20060505145354.GD27395@mithrandi.za.net>
Message-ID: <20060505213921.22481.49127185.divmod.quotient.21826@ohm>



On Fri, 5 May 2006 16:53:54 +0200, Tristan Seligmann <mithrandi-twisted-python at mithrandi.za.net> wrote:
>* Manlio Perillo <manlio_perillo at libero.it> [2006-05-03 13:20:34 -0200]:
>
>> Ok, but it is improper to require such an authentication for each
>> resource... ;-)
>>
>> Clients authenticate once and use "sessions" to identify themselves.
>
>Many people are successfully using basic/digest auth without any use of
>sessions, and I would hardly call this "improper". In many cases it is
>much more straightforward than bolting on stateful session tracking, and
>it also potentially makes client implementation simpler.

HTTP auth can also be used in such a way that the "session" is simply the username that is being authenticated.  nevow.guard attempts to make the distinction between cookie-based and http-auth-based sessions simply an implementation detail.



From nico at tekNico.net  Fri May  5 16:07:02 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Sat, 06 May 2006 00:07:02 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <20060505213921.22481.49127185.divmod.quotient.21826@ohm>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
Message-ID: <445BCC86.9020104@tekNico.net>

> HTTP auth can also be used in such a way that the "session" is simply
> the username that is being authenticated.  nevow.guard attempts to make
> the distinction between cookie-based and http-auth-based sessions simply
> an implementation detail.

Unfortunately they're functionally equivalent only as long as the same
credentials are only used on one browser instance at the same time. If one
user authenticates himself on two browsers with the same credentials, there
can be two distinct cookie-based sessions, but only one http-auth based
"session".

An interesting discussion about this has been going on for weeks now on the
rest-discuss mailing list on Yahoo Groups.


-- 
Nicola Larosa - http://www.tekNico.net/

Most people are doomed in childhood by accepting the axiom that work equals
pain. Those who escape this are nearly all lured onto the rocks by prestige
or money. How many even discover something they love to work on? A few
hundred thousand, perhaps, out of billions. -- Paul Graham, January 2006





From jarrod at vertigrated.com  Sat May  6 09:09:17 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Sat, 6 May 2006 11:09:17 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445BCC86.9020104@tekNico.net>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
Message-ID: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>

On 5/5/06, Nicola Larosa <nico at teknico.net> wrote:
>
> > HTTP auth can also be used in such a way that the "session" is simply
> > the username that is being authenticated.  nevow.guard attempts to make
> > the distinction between cookie-based and http-auth-based sessions simply
> > an implementation detail.
>
> Unfortunately they're functionally equivalent only as long as the same
> credentials are only used on one browser instance at the same time. If one
> user authenticates himself on two browsers with the same credentials,
> there
> can be two distinct cookie-based sessions, but only one http-auth based
> "session".
>

that would be the case for a NAIVE cookie-based session.

an intelligent session management implementation would track be able to tell
from
the auth request that the user had already started a session and just use
that.

this kind of thing is already been written by many people, the OP needs to
just use
something that already exists, session tracking code is not something you
should be
writting unless you are writing framework code or an app server.

and since he is confusing / equating authenticaiton == sessions he lacks a
fundemental
understanding about security and authentication, authorization and stateful
vs stateless semantics.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060506/afcf2143/attachment.html>

From johann.borck at densedata.com  Sat May  6 10:14:17 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Sat, 06 May 2006 18:14:17 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
Message-ID: <445CCB59.4070102@densedata.com>

jarrod roberson wrote:

>
>
> On 5/5/06, *Nicola Larosa* <nico at teknico.net
> <mailto:nico at teknico.net>> wrote:
>
>     > HTTP auth can also be used in such a way that the "session" is
>     simply
>     > the username that is being authenticated.  nevow.guard attempts
>     to make
>     > the distinction between cookie-based and http-auth-based
>     sessions simply
>     > an implementation detail.
>
>     Unfortunately they're functionally equivalent only as long as the same
>     credentials are only used on one browser instance at the same
>     time. If one
>     user authenticates himself on two browsers with the same
>     credentials, there
>     can be two distinct cookie-based sessions, but only one http-auth
>     based
>     "session".
>
>
> that would be the case for a NAIVE cookie-based session.
>
> an intelligent session management implementation would track be able
> to tell from
> the auth request that the user had already started a session and just
> use that.
>
> this kind of thing is already been written by many people, the OP
> needs to just use
> something that already exists, session tracking code is not something
> you should be
> writting unless you are writing framework code or an app server.
>
> and since he is confusing / equating authenticaiton == sessions he
> lacks a fundemental

just interested,who do you refer to by "he"?

> understanding about security and authentication, authorization and
> stateful vs stateless semantics.
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>  
>




From manlio_perillo at libero.it  Sat May  6 10:16:25 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 06 May 2006 14:16:25 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
Message-ID: <445CCBD9.6020204@libero.it>

jarrod roberson ha scritto:
> [...]
> 
> an intelligent session management implementation would track be able to
> tell from
> the auth request that the user had already started a session and just
> use that.
> 
> this kind of thing is already been written by many people, the OP needs
> to just use
> something that already exists, session tracking code is not something
> you should be
> writting unless you are writing framework code or an app server.
> 
> and since he is confusing 

Yes, I wrongly use the term REST protocol in place of UDP connections.

/ equating authenticaiton == sessions he lacks

Not really.

I simply have seen an UDP protocol that uses sessions to identify each
request.
The session is obtained after an authentication phase.

Since I think that the procedure is similar to HTTP session handling, I
was asking if there is some reusable support for creating "secure"
session id and if cred has some support for this.



Thanks and regards  Manlio Perillo



From exarkun at twistedmatrix.com  Sat May  6 23:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 07 May 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1146978301.96.444500064@twistedmatrix.com

Bug summary
______________________
Summary for 2006-04-30 through 2006-05-07
Bugs opened: 21    Bugs closed: 15  Total open bugs: 608 (+6)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -5  |Highest:  -2          |Conch:    +1           
|Enhancement: +10  |High:     -5          |Core:     +8           
|Task:         +1  |Normal:  +13          |Mail:     +2           
                   |Low:      +0          |Names:    -1           
                                          |Trial:    -5           
                                          |Web2:     +2           
                                          |Website:  +0           
                                          |Words:    -1           


New / Reopened Bugs
______________________
                    ===== High =====
[#1701] Most twisted.mail.pop3.IMailbox should be allowed to return Deferreds (opened by exarkun)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/1701

                    ===== Normal =====
[#1685] [patch] unicode fixups in words.irc and words.service (opened by j2a)
    defect          words      http://twistedmatrix.com/trac/ticket/1685

[#1686] Better XML Stanza and error support (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1686

[#1687] Convert reports into queries (opened by exarkun)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1687

[#1688] wxreactor ignores previously-installed sigint handlers (opened by ml.flex)
    defect          core       http://twistedmatrix.com/trac/ticket/1688

[#1689] Move the Trac configuration files into the WebSite repository (opened by tekNico)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1689

[#1690] Make links to documentation for all Twisted versions (opened by tekNico)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1690

[#1691] POP3Client can't deal with the continued commands request (opened by tomoyuki)
    defect          mail       http://twistedmatrix.com/trac/ticket/1691

[#1692] Intermittent test failure on win32 (test_policies.ThrottlingTestCase.testLimit) (opened by teratorn) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1692

[#1693] tkconch freeze waiting for data on Windows (opened by synapsis)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1693

[#1694] killing a process (opened by synapsis)
    defect          core       http://twistedmatrix.com/trac/ticket/1694

[#1695] raising an exception from datagramReceived should not kill a listening UDP Port (opened by radix)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1695

[#1696] RPMs fail to build on RHEL 4 (opened by shieldszero)
    defect          core       http://twistedmatrix.com/trac/ticket/1696

[#1697] Merge Combinator into Twisted (opened by hypatia)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1697

[#1698] Version option for Trial (opened by jml)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1698

[#1699] t.w2.vhost.AutoVHostURIRewrite doesn't pass remote_ip information (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1699

[#1700] t.w2.vhost.AutoVHostURIRewrite fails silently if no X-Forwarded-Host header is provided. (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1700

[#1702] Kill Defer.setTimeout (opened by jml)
    task            core       http://twistedmatrix.com/trac/ticket/1702

[#1703] Twisted's logging API is confusing (opened by predictive)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1703

[#1705] Test failure on win32 (FilePathTestCase.testGetAndSet) (opened by teratorn)
    defect          core       http://twistedmatrix.com/trac/ticket/1705

                    ===== Low =====
[#1704] Misspelling at http://twistedmatrix.com/projects/conch/ (opened by shieldszero) (CLOSED, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1704



Closed Bugs
______________________
                    ===== Highest =====
[#1074] domish.Element checking __class__, breaks inheritance (opened by VislabSteve, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1074

[#1654] Optionally provide prefix context to serialization of domish Elements. (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1654

                    ===== High =====
[#1285] twisted.trial.test.test_util.TestFindObject.test_importModule fails intermittently (opened by jml, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1285

[#1213] trial does not isolate test methods from each other (opened by exarkun, closed by jml, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/1213

[#1304] twisted.trial.test.test_failure_formatting.TestFailureFormatting.testFormatErroredMethod hangs indefinitely (opened by exarkun, closed by jml, duplicate)
    defect          trial      http://twistedmatrix.com/trac/ticket/1304

[#1026] [PATCH] Improve index pages of documentation (opened by hypatia, closed by tekNico, invalid)
    defect          website    http://twistedmatrix.com/trac/ticket/1026

[#1339] API docs on site should reflect recent releases (opened by ralphm, closed by tekNico, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1339

[#1217] trial.util should not be used by non-Trial code (opened by jml, closed by jml, fixed)
    defect          names      http://twistedmatrix.com/trac/ticket/1217

                    ===== Normal =====
[#1683] Set up and host Planet Twisted (opened by hypatia, closed by ralphm, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1683

[#1675] failUnlessFailure is too liberal (opened by spiv, closed by jml, fixed)
    defect          trial      http://twistedmatrix.com/trac/ticket/1675

[#1592] twisted.trial.test.test_loader.FileTest.test_packageNotInPath fails (opened by spiv, closed by jml, worksforme)
    defect          trial      http://twistedmatrix.com/trac/ticket/1592

[#1669] Parser in domish does not keep unreferenced namespace declarations (opened by ff, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1669

[#1692] Intermittent test failure on win32 (test_policies.ThrottlingTestCase.testLimit) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1692

[#343 ] reactor fd cleanup between tests (opened by warner, closed by jml, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/343

                    ===== Low =====
[#1704] Misspelling at http://twistedmatrix.com/projects/conch/ (opened by shieldszero, closed by tekNico, fixed)
    defect          website    http://twistedmatrix.com/trac/ticket/1704





From ml.flex at gmail.com  Sun May  7 03:55:54 2006
From: ml.flex at gmail.com (Micky Latowicki)
Date: Sun, 7 May 2006 11:55:54 +0200
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
	<B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
Message-ID: <d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>

It's possible to make each element in the set being edited a
cacheable. If you think that would introduce too much overhead, then
you can add a method to the "address book" object which updates one of
the entries in this address book, and uses an id to identify the entry
within the address book. So the address book is the dict. That's what
I did in a similar case. I'm no expert though.

HTH

Micky

From jarrod at vertigrated.com  Sun May  7 14:25:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Sun, 7 May 2006 16:25:31 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445CCBD9.6020204@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
	<445CCBD9.6020204@libero.it>
Message-ID: <2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>

On 5/6/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> jarrod roberson ha scritto:
> > [...]
> >
> > an intelligent session management implementation would track be able to
> > tell from
> > the auth request that the user had already started a session and just
> > use that.
> >
> > this kind of thing is already been written by many people, the OP needs
> > to just use
> > something that already exists, session tracking code is not something
> > you should be
> > writting unless you are writing framework code or an app server.
> >
> > and since he is confusing
>
> Yes, I wrongly use the term REST protocol in place of UDP connections.
>
> / equating authenticaiton == sessions he lacks
>
> Not really.
>
> I simply have seen an UDP protocol that uses sessions to identify each
> request.
> The session is obtained after an authentication phase.


if the sesssion id never changes I am SURE you have seen an insecure UDP
protocol
which means unless the client and server are generating dynamic single use
tokens and "know" what the next valid session id the client should send,
which implies encryption plus authenticaiton on every request.

Since I think that the procedure is similar to HTTP session handling, I
> was asking if there is some reusable support for creating "secure"
> session id and if cred has some support for this.



you still don't understand STATE != Authentication.

ANYONE can sniff the packets, get whatever token or breadcrumb you are using
for the state id and spoof it.
that is unless you REQUIRE authentication on every request. "secure" session
id's imply a form of authenticaiton on every request.

you can't just "encrypt" a string and call it a "secure" session id.

you can have UNSECURE STATE tracking with out Authentication on every
request, using server side sessions is just one way to do it.

you can NOT have SECURE STATE tracking without some form of authetenication
on every request, that authentication might be "implied" by some encryption
process, but it is still a form of authentication.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060507/bfc431aa/attachment.html>

From manlio_perillo at libero.it  Mon May  8 02:17:43 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 08 May 2006 06:17:43 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>
	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
Message-ID: <445EFEA7.6070000@libero.it>

jarrod roberson ha scritto:
> [...]
>     I simply have seen an UDP protocol that uses sessions to identify each
>     request.
>     The session is obtained after an authentication phase.
> 
> 
> if the sesssion id never changes I am SURE you have seen an insecure UDP
> protocol

Of course, as the 90% of internet (as far as I have seen)..

> which means unless the client and server are generating dynamic single
> use tokens and "know" what the next valid session id the client should
> send, which implies encryption plus authenticaiton on every request.
> 
>     Since I think that the procedure is similar to HTTP session handling, I
>     was asking if there is some reusable support for creating "secure"
>     session id and if cred has some support for this.
> 
> 
> 
> you still don't understand STATE != Authentication.
> 
> ANYONE can sniff the packets, get whatever token or breadcrumb you are
> using for the state id and spoof it.
> that is unless you REQUIRE authentication on every request. "secure"
> session id's imply a form of authenticaiton on every request.
> 

Ok, but this implies (with simple authentication scheme like HTTP) to
double the number of requests/reponses.

And what if the authentication protocol is more complex?

> you can't just "encrypt" a string and call it a "secure" session id.
> 

But I can generate a "secure" session and use it for encrypt every
request/response.

Or, more simply, one can use SSL.

Unfortunately many web site not use SSL or use only HTTP Base
Authentication...


By the way:
for user tracking in UDP, why not just use the peer address?



Thanks and regards  Manlio Perillo



From warner at lothar.com  Mon May  8 02:54:32 2006
From: warner at lothar.com (Brian Warner)
Date: Mon, 08 May 2006 01:54:32 -0700 (PDT)
Subject: [Twisted-Python] newpb 0.0.1 is released!
Message-ID: <20060508.015432.86968533.warner@lothar.com>

I'm pleased to announce that the first alpha release of "newpb", a ground-up
rewrite of twisted's native RPC protocol, is now available.

Years in the making, newpb offers a variety of new features, more flexible
serialization than oldpb, a better security model, and the potential (not yet
achieved) to be faster. For a larger list of new features, take a look at the
newpb wiki page[1].

The release itself is currently available from my web directory[2]. At some
point in the near future, it should also be available from the Twisted
downloads directory, and from the download mirror sites as well. To use the
release you will have to install it with the usual 'setup.py install'
incantation: it adds a 'twisted.pb' module to your regular twisted
installation, and as such it won't work if you just add the unpacked
directory to your PYTHONPATH.

Please note that this is an ALPHA release. Think of it as a technology
preview. The wire protocol is *not* stable yet, which means that a
newpb-0.0.1 client is unlikely to be able to talk to a newpb-0.0.2 server,
etc. Don't deploy it anywhere unless you will be able to upgrade both ends of
the wire in the future. There are likely to be significant bugs (including
security holes) present, and some major design decisions still remain to be
settled. For production systems, please continue to use oldpb (aka
twisted.spread, as distributed in TwistedCore) for the forseable future.

That said, it's high time that people get a chance to play with this code. An
earlier version of it leaked into the TwistedCore-2.2.0 release before anyone
could catch it (but truth be told the code there is almost identical to this
0.0.1 release), but apart from that it has been languishing in SVN[3] for far
too long. I think I've been working on this intermittently for three years,
hopefully with other people involved we can get this thing rolling and usable
in a non-bounded amount of time.

The top-level "Getting Started" documentation, with examples, is in
doc/pb/using-pb.xhtml, of which a lore-rendered version is in my newpb
webspace[4]. There are a number of protocol specification documents in there
too. There are also lists of outstanding jobs and open design questions in
doc/pb/*. The 8.5kloc of code lives in twisted/pb/*, along with an additional
4.7kloc in the 229 unit tests.

Naming: the name is still in flux. We've been using "newpb" as a working
title, to distinguish it from "oldpb" (which is the twisted.spread that's
been shipping in TwistedCore since forever). "pb2" is another working title.
It will probably have some new name in the future, hopefully one which makes
its purpose more immediately obvious. The point right now is to work on the
functionality, not the name. In the long run this is intended to replace
oldpb/twisted.spread, but not this month. So don't worry about the name too
much for now.

When filing bugs and tickets, if you see a 'pb2' component in Trac, please
use that. Otherwise please use the 'pb' component and include "newpb" or
"pb2" in the title. Discussions here on the twisted-python mailing list or in
the #twisted IRC channel on freenode.net are also appropriate.


Have an Alice, Bob, and Carol-ific day,
 -Brian



[1]: http://twistedmatrix.com/trac/wiki/NewPB
[2]: http://twistedmatrix.com/~warner/newpb/TwistedPb2-0.0.1.tar.bz2
[3]: svn://svn.twistedmatrix.com/svn/Twisted/tags/releases/pb2/0.0.1
[4]: http://twistedmatrix.com/~warner/newpb/




From jritter at bektel.com  Mon May  8 09:03:04 2006
From: jritter at bektel.com (Josh Ritter)
Date: Mon, 8 May 2006 10:03:04 -0500
Subject: [Twisted-Python] newpb 0.0.1 is released!
References: <20060508.015432.86968533.warner@lothar.com>
Message-ID: <005201c672b0$96fbc210$0400000a@spooge>

Excellent!

It's great to see newpb emerge from the shadows :)

We use spread extensively in our game Minions of Mirth.  Security and 
*performance* are key areas for us.

Thanks!,
-Josh Ritter
Prairie Games, Inc
http://www.prairiegames.com




----- Original Message ----- 
From: "Brian Warner" <warner at lothar.com>
To: <twisted-python at twistedmatrix.com>
Sent: Monday, May 08, 2006 3:54 AM
Subject: [Twisted-Python] newpb 0.0.1 is released!


> I'm pleased to announce that the first alpha release of "newpb", a 
> ground-up
> rewrite of twisted's native RPC protocol, is now available.
>
> Years in the making, newpb offers a variety of new features, more flexible
> serialization than oldpb, a better security model, and the potential (not 
> yet
> achieved) to be faster. For a larger list of new features, take a look at 
> the
> newpb wiki page[1].
>
> The release itself is currently available from my web directory[2]. At 
> some
> point in the near future, it should also be available from the Twisted
> downloads directory, and from the download mirror sites as well. To use 
> the
> release you will have to install it with the usual 'setup.py install'
> incantation: it adds a 'twisted.pb' module to your regular twisted
> installation, and as such it won't work if you just add the unpacked
> directory to your PYTHONPATH.
>
> Please note that this is an ALPHA release. Think of it as a technology
> preview. The wire protocol is *not* stable yet, which means that a
> newpb-0.0.1 client is unlikely to be able to talk to a newpb-0.0.2 server,
> etc. Don't deploy it anywhere unless you will be able to upgrade both ends 
> of
> the wire in the future. There are likely to be significant bugs (including
> security holes) present, and some major design decisions still remain to 
> be
> settled. For production systems, please continue to use oldpb (aka
> twisted.spread, as distributed in TwistedCore) for the forseable future.
>
> That said, it's high time that people get a chance to play with this code. 
> An
> earlier version of it leaked into the TwistedCore-2.2.0 release before 
> anyone
> could catch it (but truth be told the code there is almost identical to 
> this
> 0.0.1 release), but apart from that it has been languishing in SVN[3] for 
> far
> too long. I think I've been working on this intermittently for three 
> years,
> hopefully with other people involved we can get this thing rolling and 
> usable
> in a non-bounded amount of time.
>
> The top-level "Getting Started" documentation, with examples, is in
> doc/pb/using-pb.xhtml, of which a lore-rendered version is in my newpb
> webspace[4]. There are a number of protocol specification documents in 
> there
> too. There are also lists of outstanding jobs and open design questions in
> doc/pb/*. The 8.5kloc of code lives in twisted/pb/*, along with an 
> additional
> 4.7kloc in the 229 unit tests.
>
> Naming: the name is still in flux. We've been using "newpb" as a working
> title, to distinguish it from "oldpb" (which is the twisted.spread that's
> been shipping in TwistedCore since forever). "pb2" is another working 
> title.
> It will probably have some new name in the future, hopefully one which 
> makes
> its purpose more immediately obvious. The point right now is to work on 
> the
> functionality, not the name. In the long run this is intended to replace
> oldpb/twisted.spread, but not this month. So don't worry about the name 
> too
> much for now.
>
> When filing bugs and tickets, if you see a 'pb2' component in Trac, please
> use that. Otherwise please use the 'pb' component and include "newpb" or
> "pb2" in the title. Discussions here on the twisted-python mailing list or 
> in
> the #twisted IRC channel on freenode.net are also appropriate.
>
>
> Have an Alice, Bob, and Carol-ific day,
> -Brian
>
>
>
> [1]: http://twistedmatrix.com/trac/wiki/NewPB
> [2]: http://twistedmatrix.com/~warner/newpb/TwistedPb2-0.0.1.tar.bz2
> [3]: svn://svn.twistedmatrix.com/svn/Twisted/tags/releases/pb2/0.0.1
> [4]: http://twistedmatrix.com/~warner/newpb/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 




From p.mayers at imperial.ac.uk  Mon May  8 11:52:26 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 08 May 2006 18:52:26 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445BCC86.9020104@tekNico.net>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
Message-ID: <445F855A.8000209@imperial.ac.uk>

Nicola Larosa wrote:
>> HTTP auth can also be used in such a way that the "session" is
>> simply the username that is being authenticated.  nevow.guard
>> attempts to make the distinction between cookie-based and
>> http-auth-based sessions simply an implementation detail.
> 
> Unfortunately they're functionally equivalent only as long as the
> same credentials are only used on one browser instance at the same
> time. If one user authenticates himself on two browsers with the same
> credentials, there can be two distinct cookie-based sessions, but
> only one http-auth based "session".

If you were using digest auth, correct use of the headers (I can't
remember which one off the top of my head) it would allow >1 http auth
session. I looked at this a while back; the issue being few orgs. have
an authentication database that can serve digest.

There's nothing to stop you sending a cookie AND requiring
WWW-Authenticate. Whether a non-browser client would see and round-trip
the cookie is another matter of course.

Possibly judicious use of 302s and url-based sessions would suffice, but
I don't know if that would impress or enrage REST purists - arguably you
could say the redirect was to a "representation" of the object hierarchy 
- google do something similar with the gdata API and rel="edit" for 
Atom+HTTP based deletes.



From jarrod at vertigrated.com  Mon May  8 12:34:51 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 8 May 2006 14:34:51 -0400
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445EFEA7.6070000@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>
	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>
	<445BCC86.9020104@tekNico.net>
	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>
	<445CCBD9.6020204@libero.it>
	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
	<445EFEA7.6070000@libero.it>
Message-ID: <2389d4730605081134u24bf1cads744ba607d6f047a1@mail.gmail.com>

On 5/8/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> jarrod roberson ha scritto:
> > [...]
> >     I simply have seen an UDP protocol that uses sessions to identify
> each
> >     request.
> >     The session is obtained after an authentication phase.
> >
> >
> > if the sesssion id never changes I am SURE you have seen an insecure UDP
> > protocol
>
> Of course, as the 90% of internet (as far as I have seen)..
>
> > which means unless the client and server are generating dynamic single
> > use tokens and "know" what the next valid session id the client should
> > send, which implies encryption plus authenticaiton on every request.
> >
> >     Since I think that the procedure is similar to HTTP session
> handling, I
> >     was asking if there is some reusable support for creating "secure"
> >     session id and if cred has some support for this.
> >
> >
> >
> > you still don't understand STATE != Authentication.
> >
> > ANYONE can sniff the packets, get whatever token or breadcrumb you are
> > using for the state id and spoof it.
> > that is unless you REQUIRE authentication on every request. "secure"
> > session id's imply a form of authenticaiton on every request.
> >
>
> Ok, but this implies (with simple authentication scheme like HTTP) to
> double the number of requests/reponses.
>
> And what if the authentication protocol is more complex?
>
>
you can send "premetive" authentication in the REQUEST headers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060508/d71c7aa5/attachment.html>

From p.mayers at imperial.ac.uk  Mon May  8 12:38:20 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 08 May 2006 19:38:20 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445EFEA7.6070000@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>
	<445EFEA7.6070000@libero.it>
Message-ID: <445F901C.2000905@imperial.ac.uk>

> Since I think that the procedure is similar to HTTP session handling, I
> was asking if there is some reusable support for creating "secure"
> session id and if cred has some support for this.

Ok. You're wrong that they're similar, but let me give the short answer 
to the latter question:

No, cred does not provide secure session IDs. Cred is for authenticating 
credentials.

Individual cred checkers may, for a given credentialInterface, choose to 
execute a challenge/response algorithm and establish a secure session, 
but that is specific to the checker, algorithm and wire protocol 
combination.

HTTP does not have spectacularly good authentication support. The 
available mechanisms insecure in one way or another:
  * basic - Credential exposure. No integrity. No privacy
  * digest - No credential exposure. Minimal integrity (request body 
only - request headers, reply body+headers unprotected). No privacy.

...or not standardised e.g. GSS over HTTP.

The only sensible solution to HTTP authentication for important 
applications is to use an HTTPS link, signed server certs and ideally 
client certs as well, or fallback to HTTP digest or basic.

Once you're using HTTPS, other systems can be sensibly and securely 
used. However...

Homegrown systems using cookies and such MAY in fact weaken the overall 
security of the system unless carefully designed, which brings us back 
to Jarrods point that basically no-one should be writing their own auth 
systems these days. They should be re-using one.

Note: there are circumstances where other concerns outweigh purist 
security. For example, the Google gdata API uses an initial HTTPS GET to 
return an auth token, which is then supplied to the server over HTTP in 
an "Authorization: GoogleAuth THETOKEN" header. This provides much 
greater scalability and is similar to MS Passport (which itself is 
similar to Kerberos).

Presumably the token expires. You should note however that the token is 
NOT used for sessioning. HTTP 302 redirects and URL parameters are used 
for that. You might ponder that Google separated out auth and sessions 
even in their engineering compromise.

Note that the above refers to the non-browser API. Presumably the 
browser API will use a passport-alike 302+cookie.

For open source examples, see PubCookie.

> 
> By the way:
> for user tracking in UDP, why not just use the peer address?

Pardon? Are you serious?



From manlio_perillo at libero.it  Mon May  8 14:25:07 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 08 May 2006 18:25:07 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445F901C.2000905@imperial.ac.uk>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>
	<445F901C.2000905@imperial.ac.uk>
Message-ID: <445FA923.6090703@libero.it>

Phil Mayers ha scritto:
>> Since I think that the procedure is similar to HTTP session handling, I
>> was asking if there is some reusable support for creating "secure"
>> session id and if cred has some support for this.
> 
> Ok. You're wrong that they're similar, but let me give the short answer
> to the latter question:
> 
> No, cred does not provide secure session IDs. Cred is for authenticating
> credentials.
> 

Ok, thanks for the clarification.

> [...]

> HTTP does not have spectacularly good authentication support. The
> available mechanisms insecure in one way or another:
>  * basic - Credential exposure. No integrity. No privacy
>  * digest - No credential exposure. Minimal integrity (request body only
> - request headers, reply body+headers unprotected). No privacy.
> 
> ...or not standardised e.g. GSS over HTTP.
> 
> The only sensible solution to HTTP authentication for important
> applications is to use an HTTPS link, signed server certs and ideally
> client certs as well, 


Yes, but how many people knows how to set up a private certificate?
And how many sites uses certs verification?

It would be nice to store a certificate on a smart card and authenticate
to a web server using only that certificate.


> [...]

> Note: there are circumstances where other concerns outweigh purist
> security. For example, the Google gdata API uses an initial HTTPS GET to
> return an auth token, which is then supplied to the server over HTTP in
> an "Authorization: GoogleAuth THETOKEN" header. 

And this header should be supplied for every successive requests (like
cookies)?

> This provides much
> greater scalability and is similar to MS Passport (which itself is
> similar to Kerberos).
> 
> Presumably the token expires. You should note however that the token is
> NOT used for sessioning. HTTP 302 redirects and URL parameters are used
> for that. 


I'm not sure to understand this.

> You might ponder that Google separated out auth and sessions
> even in their engineering compromise.
> 
> Note that the above refers to the non-browser API. Presumably the
> browser API will use a passport-alike 302+cookie.
> 
> For open source examples, see PubCookie.
> 

Thanks for the link.
I have not read the source, but the "granting cookie" what type of
informations contains to be sure that the UA is the "right" one?

>>
>> By the way:
>> for user tracking in UDP, why not just use the peer address?
> 
> Pardon? Are you serious?
> 

Well, let me explain this better.
Unfortunately there are not examples of UDP servers in twisted.

Since UDP is connection-less, the first thing that come to my mind is:

class MyProtocol(DatagramProtocol):
    def __init__(self):
       self.users = {}

    def datagramReceived(self, data, (host, port)):
        context = self.users.setdefault(host, Context())
        response = context.handle(data)
        self.transport.write(data, (host, port))


Where the Context class keep an internal state, like IMAP.



Thanks and regards  Manlio Perillo




From torbjorn at einarssons.se  Mon May  8 14:49:24 2006
From: torbjorn at einarssons.se (=?ISO-8859-1?Q?Torbj=F6rn_Einarsson?=)
Date: Mon, 08 May 2006 22:49:24 +0200
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
Message-ID: <445FAED4.7080804@einarssons.se>

Hi,

I am running twisted-1.3 on some SUN machines, and haven't changed since 
I couldn't install the Zope Interface without a compiler. This is 
unfortunate, since there is no compiler on the machines, and the rest of 
twisted is installable without a compiler.

The Zope interface is now a part of the sumo distribution, but it seems 
that it needs a compiler in this case as well.
Does anyone know a simple way of installing the Zope Interface without a 
compiler?

Thanks,
Torbjörn Einarsson




From foom at fuhm.net  Mon May  8 15:03:24 2006
From: foom at fuhm.net (James Y Knight)
Date: Mon, 8 May 2006 17:03:24 -0400
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
In-Reply-To: <445FAED4.7080804@einarssons.se>
References: <445FAED4.7080804@einarssons.se>
Message-ID: <A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>

On May 8, 2006, at 4:49 PM, Torbjörn Einarsson wrote:

> Hi,
>
> I am running twisted-1.3 on some SUN machines, and haven't changed  
> since I couldn't install the Zope Interface without a compiler.  
> This is unfortunate, since there is no compiler on the machines,  
> and the rest of twisted is installable without a compiler.
>
> The Zope interface is now a part of the sumo distribution, but it  
> seems that it needs a compiler in this case as well.
> Does anyone know a simple way of installing the Zope Interface  
> without a compiler?

It is certainly usable without compiling -- if you just install  
the .py files in your pythonpath, under zope/interface/. It'd be nice  
if its setup.py file knew how to deal with the lack of a compiler  
automatically, but until it does, you can just manually copy the  
files in. If the latest z.i release still has this problem, perhaps  
you could submit a patch to their bugtracker.

James


From radix at twistedmatrix.com  Mon May  8 15:31:51 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Mon, 8 May 2006 17:31:51 -0400
Subject: [Twisted-Python] Installing Zope Interface on a SUN without
	compiler?
In-Reply-To: <A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>
References: <445FAED4.7080804@einarssons.se>
	<A9757916-7BF4-44BD-B59E-282BE4A0EECE@fuhm.net>
Message-ID: <60ed19d40605081431g3f42cb81td9b52fc9828de000@mail.gmail.com>

On 5/8/06, James Y Knight <foom at fuhm.net> wrote:

> On May 8, 2006, at 4:49 PM, Torbjörn Einarsson wrote:

> > I am running twisted-1.3 on some SUN machines, and haven't changed
> > since I couldn't install the Zope Interface without a compiler.

> It is certainly usable without compiling -- if you just install
> the .py files in your pythonpath, under zope/interface/. It'd be nice
> if its setup.py file knew how to deal with the lack of a compiler
> automatically

I'm pretty sure I installed zope.interface the other day (from the
ZopeInterface package, version 3c1 or something), using setup.py
install --skip-build on a machine without gcc.


--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From mli at deform.com  Tue May  9 08:58:19 2006
From: mli at deform.com (Michael Li)
Date: Tue, 09 May 2006 10:58:19 -0400
Subject: [Twisted-Python] how to only accept local computer requests?
Message-ID: <4460AE0B.90503@deform.com>

Hi,

I have a python server with twisted framework running
24x7. I want to have a config file to setup accepting local
computer requests or remote computer requests.
If the config file exists, it only accepts local computer
request, does not accept requests from other computers.
If the config file does not exist, it accepts requests
from any computers.
Is there any easy way to do it ?

Best regards.
Michael Li

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From radix at twistedmatrix.com  Tue May  9 09:07:16 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 9 May 2006 11:07:16 -0400
Subject: [Twisted-Python] how to only accept local computer requests?
In-Reply-To: <4460AE0B.90503@deform.com>
References: <4460AE0B.90503@deform.com>
Message-ID: <60ed19d40605090807p770b821dr1a77b6a2b3dec398@mail.gmail.com>

On 5/9/06, Michael Li <mli at deform.com> wrote:
> Hi,
>
> I have a python server with twisted framework running
> 24x7. I want to have a config file to setup accepting local
> computer requests or remote computer requests.
> If the config file exists, it only accepts local computer
> request, does not accept requests from other computers.
> If the config file does not exist, it accepts requests
> from any computers.
> Is there any easy way to do it ?

It's not totally clear from what info you've given, but it sounds like
you want to pass the 'interface' argument to TCPServer or listenTCP,
whichever you're using. interface='127.0.0.1' to only serve
connections from localhost, interface='' to serve connections from
anybody.

--
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From nico at tekNico.net  Tue May  9 09:15:39 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 09 May 2006 17:15:39 +0200
Subject: [Twisted-Python] Re: how to only accept local computer requests?
In-Reply-To: <4460AE0B.90503@deform.com>
References: <4460AE0B.90503@deform.com>
Message-ID: <4460B21B.4010409@tekNico.net>

> I have a python server with twisted framework running
> 24x7. I want to have a config file to setup accepting local
> computer requests or remote computer requests.

When you create instances of twisted.internet.application.TCPServer or
.SSLServer, pass the keyword parameter

interface = '127.0.0.1'

and the server socket will only bind to the localhost interface. If you
don't pass the parameter, the socket will bind to all interfaces.

-- 
Nicola Larosa - http://www.tekNico.net/

In high school she already wanted to be a doctor. And she is so ambitious
and determined that she overcame every obstacle along the way -- including,
unfortunately, not liking it. Now she has a life chosen for her by
a high-school kid. -- Paul Graham, January 2006





From leszczynscy at yahoo.com  Tue May  9 11:00:45 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Tue, 9 May 2006 10:00:45 -0700 (PDT)
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
Message-ID: <20060509170045.53346.qmail@web30009.mail.mud.yahoo.com>

I have a M$ Windows box where I need to start a ad hoc
FTP server, how can I do that quickly?

Thx,
A.



From exarkun at divmod.com  Tue May  9 15:45:46 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 9 May 2006 17:45:46 -0400
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
In-Reply-To: <20060509170045.53346.qmail@web30009.mail.mud.yahoo.com>
Message-ID: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>

On Tue, 9 May 2006 10:00:45 -0700 (PDT), Andy Leszczynski <leszczynscy at yahoo.com> wrote:
>I have a M$ Windows box where I need to start a ad hoc
>FTP server, how can I do that quickly?

Using a recent enough version of Twisted,

  mktap ftp --help

will give you some help with this.

Jean-Paul



From leszczynscy at yahoo.com  Tue May  9 20:51:43 2006
From: leszczynscy at yahoo.com (Andy Leszczynski)
Date: Tue, 09 May 2006 22:51:43 -0400
Subject: [Twisted-Python] how to quickly set a ad hoc FTP server using
	Twisted
In-Reply-To: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>
References: <20060509214546.22481.39651974.divmod.quotient.23003@ohm>
Message-ID: <4461553F.9070705@yahoo.com>

Jean-Paul Calderone wrote:

> On Tue, 9 May 2006 10:00:45 -0700 (PDT), Andy Leszczynski 
> <leszczynscy at yahoo.com> wrote:
>
>> I have a M$ Windows box where I need to start a ad hoc
>> FTP server, how can I do that quickly?
>
>
> Using a recent enough version of Twisted,
>
>  mktap ftp --help
>
> will give you some help with this.


thx for the help, Andy



From stephane_brault at yahoo.fr  Wed May 10 04:27:16 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Wed, 10 May 2006 10:27:16 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
Message-ID: <20060510102716.46912.qmail@web26513.mail.ukl.yahoo.com>

Hi,
 I want to use twisted to run a server that is also a SOA client:
 I developp a scheduler that schedule calls to a web service regularly, tasks may be added or terminated.
 The web service has different calls and each task calls a specific call (too many calls in that sentence ;-)) and then update a database.
 The fact is that I can only have a maximum number of thread per call, I was wondering if I could have a thread pool per type of call,
 feeding it with my scheduled tasks and being able to change its size dynamically.
 I was thinking of having different groups of tasks, depending of the specific call, and feeding my thread pool according to the schedule.
 I'm new to twisted, so I don't really know how to do that, the thread documentation is a bit light for me.
 I'm also not quite sure what type of reactor would be best to use.
 
 I hope I've been clear, thanks,
 
 Stéphane





From p.mayers at imperial.ac.uk  Wed May 10 04:42:32 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 10 May 2006 11:42:32 +0100
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <445FA923.6090703@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>
	<445FA923.6090703@libero.it>
Message-ID: <4461C398.8060503@imperial.ac.uk>

Manlio Perillo wrote:
>> The only sensible solution to HTTP authentication for important
>> applications is to use an HTTPS link, signed server certs and ideally
>> client certs as well, 
> 
> 
> Yes, but how many people knows how to set up a private certificate?
> And how many sites uses certs verification?

Lots. I honestly don't think it's that hard but we might have to agree 
to disagree on this. If it has a fault, it's the difficulty virtual 
hosting without burning IPs.

> 
> It would be nice to store a certificate on a smart card and authenticate
> to a web server using only that certificate.

You can do that now if you want. But the hardware is expensive. Frankly, 
I think a local software store with key is fine.

But the important thing is to use SSL and server certs. The client certs 
are just a nice-to-have.

>> an "Authorization: GoogleAuth THETOKEN" header. 
> 
> And this header should be supplied for every successive requests (like
> cookies)?

Yes, avoiding the need for an extra round-trip per request.

> 
>> This provides much
>> greater scalability and is similar to MS Passport (which itself is
>> similar to Kerberos).
>>
>> Presumably the token expires. You should note however that the token is
>> NOT used for sessioning. HTTP 302 redirects and URL parameters are used
>> for that. 
> 
> 
> I'm not sure to understand this.

GET /resource

401 unauth

GET /resouce
Authorization: GoogleAuth=foobarbaz

302 Moved
Location: /resource?sessionid=id

GET /resource?sessionid=id
Authorization: GoogleAuth=foobarbaz

200 OK
CONTENT

...then on subsequence requests, you can do:

GET /another_resource?sessionid=id
Authorization: GoogleAuth=foobazbaz

200 OK
CONENT

...which is a single round-trip with authentication and sessioning

> 
>> You might ponder that Google separated out auth and sessions
>> even in their engineering compromise.
>>
>> Note that the above refers to the non-browser API. Presumably the
>> browser API will use a passport-alike 302+cookie.
>>
>> For open source examples, see PubCookie.
>>
> 
> Thanks for the link.
> I have not read the source, but the "granting cookie" what type of
> informations contains to be sure that the UA is the "right" one?

I haven't used it, I just know it's generally well thought of.

> 
>>> By the way:
>>> for user tracking in UDP, why not just use the peer address?
>> Pardon? Are you serious?
>>
> 
> Well, let me explain this better.
> Unfortunately there are not examples of UDP servers in twisted.
> 
> Since UDP is connection-less, the first thing that come to my mind is:
> 
> class MyProtocol(DatagramProtocol):
>     def __init__(self):
>        self.users = {}
> 
>     def datagramReceived(self, data, (host, port)):
>         context = self.users.setdefault(host, Context())
>         response = context.handle(data)
>         self.transport.write(data, (host, port))
> 
> 
> Where the Context class keep an internal state, like IMAP.

That is phenomenally insecure

  1. You're using just the IP and not the IP+port, which means 2 users 
behind the same NAT will be unable to simultaneously use your service, 
or will see each others data.

  2. Since it's UDP it's trivially forged, so unless your context.handle 
FURTHER authenticates the data (via e.g. HMAC and key agreement) it's 
basically open to the world

  3. You're creating a new context for the 1st packet from each IP, so I 
can trivially send hundreds of thousands of packets to your service with 
forged source addresses and exhaust the CPU and memory resources of your 
server.

At ABSOLUTE MINIMUM a UDP protocol must force the client to round-trip 
the first packet using minimal CPU resources possible to at least ensure 
it's not a source-spoofing DDoS.

# WARNING WARNING WARNING DO NOT USE INSECURE IN MANY WAYS
# I strongly suggest the use of TCP or existing secure UDP
# protocols such as Q2Q
class proto(DatagramProtocol):
   MAGIC = 'MYPT'
   ECHO = open('/dev/random').read(16)

   # PDU format: MAGIC(4 bytes)+FLAGS(1 bytes)+PAYLOAD

   def datagramReceived(self, data, (host, port)):
     if len(data)<28:
       # too short
       return
     if data[:4]!=self.MAGIC:
       # not our protocol
       return
     flags = ord(data[4])

     # 1st packet in connection has flags=0
     if flags==0:
         # note: no state and minimal CPU consumed here
         self.transport.write(self.MAGIC+'\0'+self.ECHO, (host, port))
         return

     # 2nd packet must have flags==1 and payload==ECHO
     elif flags==1:
         if data[5:]!=self.ECHO:
             return
         # ok, we've verified there's something on the other
         # end, now start e.g. secure diffie-hellman
         context = startContext(host, port, self.transport)

     else flags==2:
         feedContext(host, port, data)

The above is NOT SECURE and would need sequence numbers, authentication 
and integrity protection adding. But it should hopefully convince you 
that the naive approach is just that - and in fact actively dangerous in 
a modern, hostile internet environment.



From manlio_perillo at libero.it  Wed May 10 11:04:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 10 May 2006 15:04:18 -0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <4461C398.8060503@imperial.ac.uk>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>	<445FA923.6090703@libero.it>
	<4461C398.8060503@imperial.ac.uk>
Message-ID: <44621D12.5030800@libero.it>

Phil Mayers ha scritto:
> [...]
> 
> You can do that now if you want. But the hardware is expensive. Frankly,
> I think a local software store with key is fine.
> 
> But the important thing is to use SSL and server certs. The client certs
> are just a nice-to-have.
> 

One more thing.
Actually, if I'm right, web servers and UAs like Apache and Mozilla only
do certificate *verification*, without identification/authorization.

I'm interested in the latter case.

>>> an "Authorization: GoogleAuth THETOKEN" header. 
>>
>> And this header should be supplied for every successive requests (like
>> cookies)?
> 
> Yes, avoiding the need for an extra round-trip per request.
> 

But in this way isn't it unsecure to man in the middle attacks?


>  [...]
> 
>>
>>> You might ponder that Google separated out auth and sessions
>>> even in their engineering compromise.
>>>
>>> Note that the above refers to the non-browser API. Presumably the
>>> browser API will use a passport-alike 302+cookie.
>>>
>>> For open source examples, see PubCookie.
>>>
>>
>> Thanks for the link.
>> I have not read the source, but the "granting cookie" what type of
>> informations contains to be sure that the UA is the "right" one?
> 
> I haven't used it, I just know it's generally well thought of.
> 

The thing that is not clear to me is if every resource requires 3 pair
of request/response (4 for the first time when login).

And what about nevow guard?
I have searched some documentation but with no results.

> [...]
>>
>>     def datagramReceived(self, data, (host, port)):
>>         context = self.users.setdefault(host, Context())
>>         response = context.handle(data)
>>         self.transport.write(data, (host, port))
>>
>>
>> Where the Context class keep an internal state, like IMAP.
> 
> That is phenomenally insecure
> 

Sorry, I just forget to add the port too!

>  1. You're using just the IP and not the IP+port, which means 2 users
> behind the same NAT will be unable to simultaneously use your service,
> or will see each others data.
> 

Ok.

>  2. Since it's UDP it's trivially forged, so unless your context.handle
> FURTHER authenticates the data (via e.g. HMAC and key agreement) it's
> basically open to the world
> 

Of course some type of authentication is required.
The idea is to use the context like a Twisted protocol class for TCP.

>  3. You're creating a new context for the 1st packet from each IP, so I
> can trivially send hundreds of thousands of packets to your service with
> forged source addresses and exhaust the CPU and memory resources of your
> server.
> 

This is a problem, but it can occurs for TCP too.

> At ABSOLUTE MINIMUM a UDP protocol must force the client to round-trip
> the first packet using minimal CPU resources possible to at least ensure
> it's not a source-spoofing DDoS.
> 

Ok, thanks.

> # WARNING WARNING WARNING DO NOT USE INSECURE IN MANY WAYS
> # I strongly suggest the use of TCP or existing secure UDP
> # protocols such as Q2Q

> [...]

Thanks for the idea.

About Q2Q: I got no entry about it in wikipedia...
Is this another twisted/divmod "private" protocols?



Thanks and regards  Manlio Perillo



From nico at tekNico.net  Wed May 10 11:55:27 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 10 May 2006 19:55:27 +0200
Subject: [Twisted-Python] Re: cred and stateless protocols
In-Reply-To: <44621D12.5030800@libero.it>
References: <20060505145354.GD27395@mithrandi.za.net>	<20060505213921.22481.49127185.divmod.quotient.21826@ohm>	<445BCC86.9020104@tekNico.net>	<2389d4730605060809i7e8fca03vd9069dd3ea6c50c@mail.gmail.com>	<445CCBD9.6020204@libero.it>	<2389d4730605071325re53ff60l5a5532a7cfa5ab62@mail.gmail.com>	<445EFEA7.6070000@libero.it>	<445F901C.2000905@imperial.ac.uk>	<445FA923.6090703@libero.it>	<4461C398.8060503@imperial.ac.uk>
	<44621D12.5030800@libero.it>
Message-ID: <4462290F.4040303@tekNico.net>

> About Q2Q: I got no entry about it in wikipedia...
> Is this another twisted/divmod "private" protocols?

Yes, for some meaning of "private". ;-) See Vertex:

http://divmod.org/trac/wiki/DivmodVertex


-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006





From stephane_brault at yahoo.fr  Thu May 11 09:32:08 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 15:32:08 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
Message-ID: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>

Hi,
 I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-) 
 Still, I need to ensure that I won't have more than x similar calls at a time. 
 Is there a way, maybe using some of the deferred classes (deferredqueue,..)
 to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
 until one is finished. My question might be stupid, but I'm quite new to twisted and the way to implement
 this behaviour is not clear to me (even if I found great help in the o'reilly book and the docs).
 
 Thanks,
 
 Stéphane

----- Message d'origine ----
De : Stéphane Brault <stephane_brault at yahoo.fr>
Ã€ : twisted-python at twistedmatrix.com
EnvoyÃ© le : Mercredi, 10 Mai 2006, 12h27mn 16s
ObjetÂ : [Twisted-Python] Multiple thread pools

Hi,
 I want to use twisted to run a server that is also a SOA client:
 I developp a scheduler that schedule calls to a web service regularly, tasks may be added or terminated.
 The web service has different calls and each task calls a specific call (too many calls in that sentence ;-)) and then update a database.
 The fact is that I can only have a maximum number of thread per call, I was wondering if I could have a thread pool per type of call,
 feeding it with my scheduled tasks and being able to change its size dynamically.
 I was thinking of having different groups of tasks, depending of the specific call, and feeding my thread pool according to the schedule.
 I'm new to twisted, so I don't really know how to do that, the thread documentation is a bit light for me.
 I'm also not quite sure what type of reactor would be best to use.
 
 I hope I've been clear, thanks,
 
 Stéphane



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From moe at divmod.com  Thu May 11 09:56:52 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Thu, 11 May 2006 17:56:52 +0200
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
Message-ID: <20060511155652.22481.612721210.divmod.quotient.24231@ohm>

On Thu, 11 May 2006 15:32:08 +0000 (GMT), Stéphane Brault <stephane_brault at yahoo.fr> wrote:
>Hi,
> I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-)
> Still, I need to ensure that I won't have more than x similar calls at a time.
> Is there a way, maybe using some of the deferred classes (deferredqueue,..)
> to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
> until one is finished

I think twisted.internet.defer.DeferredSemaphore is what you're looking for.  There is an example (someone else's example) of using it to do something similar here: http://pastebin.com/702986

Moe



From nico at tekNico.net  Thu May 11 10:00:44 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Thu, 11 May 2006 18:00:44 +0200
Subject: [Twisted-Python] Re: Re : Multiple thread pools
In-Reply-To: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
References: <20060511153208.60712.qmail@web26509.mail.ukl.yahoo.com>
Message-ID: <44635FAC.2030208@tekNico.net>

> Still, I need to ensure that I won't have more than x similar calls at a
> time. Is there a way, maybe using some of the deferred classes
> (deferredqueue,..) to ensure that there is no more than x simultaneous
> similar calls (wrapped in deferreds), the others being pending, until
> one is finished.

You are on the right track. A couple possible approaches are in this
mailing list thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-January/012388.html

-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006





From xt1_tm at yahoo.com  Thu May 11 10:41:23 2006
From: xt1_tm at yahoo.com (xuan tang)
Date: Thu, 11 May 2006 09:41:23 -0700 (PDT)
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
Message-ID: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>

I am trying to create a TCP server using twisted reactor. I want to  stop the server from accepting TCP bind requests (and restart it  later), but for some reason I don't want to use reactor.stop(). Is  there another way to do it?
  
  Thanks,
  Xuan
  
  
		
---------------------------------
Yahoo! Messenger with Voice. PC-to-Phone calls for ridiculously low rates.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060511/58072dcc/attachment.html>

From johann.borck at densedata.com  Thu May 11 11:47:46 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Thu, 11 May 2006 19:47:46 +0200
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
In-Reply-To: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>
References: <20060511164123.73490.qmail@web38405.mail.mud.yahoo.com>
Message-ID: <446378C2.6050801@densedata.com>

xuan tang wrote:

> I am trying to create a TCP server using twisted reactor. I want to
> stop the server from accepting TCP bind requests (and restart it
> later), but for some reason I don't want to use reactor.stop(). Is
> there another way to do it?

reactor.listenXXX returns the an IListeningPort-implementing object on
which you can call stopListening() and startListening(). When you're
using the twisted.application stuff you can call
stopService()/startService() on your Service instance.

Johann




From stephane_brault at yahoo.fr  Thu May 11 11:43:05 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 17:43:05 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511155652.22481.612721210.divmod.quotient.24231@ohm>
Message-ID: <20060511174305.11050.qmail@web26502.mail.ukl.yahoo.com>

Thanks Moe,
 the example seems to work, which is nice ;-)
 If I understand well DeferredSemaphore(x) guarantees that no more than x concurent calls that acquired it 
 will be run together. Am I wrong when inferring that DeferredList is not compulsory ? And that I adding calls to the semaphore
 as I need them will ensure the behaviour I want (as my tasks come, acquire the semaphore, then release it) ?
 
 Thaks again,
 
 Stéphane

----- Message d'origine ----
De : Moe Aboulkheir <moe at divmod.com>
À : twisted-python at twistedmatrix.com
Envoyé le : Jeudi, 11 Mai 2006, 5h56mn 52s
Objet : Re: Re : [Twisted-Python] Multiple thread pools

On Thu, 11 May 2006 15:32:08 +0000 (GMT), Stéphane Brault <stephane_brault at yahoo.fr> wrote:
>Hi,
> I can see now how 'untwisted' my threads concerns are, please forget my newbie ununderstanding ;-)
> Still, I need to ensure that I won't have more than x similar calls at a time.
> Is there a way, maybe using some of the deferred classes (deferredqueue,..)
> to ensure that there is no more than x simultaneous similar calls (wrapped in deferreds), the others being pending,
> until one is finished

I think twisted.internet.defer.DeferredSemaphore is what you're looking for.  There is an example (someone else's example) of using it to do something similar here: http://pastebin.com/702986

Moe

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From stephane_brault at yahoo.fr  Thu May 11 11:43:46 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Thu, 11 May 2006 17:43:46 +0000 (GMT)
Subject: [Twisted-Python] Re: Re : Multiple thread pools
In-Reply-To: <44635FAC.2030208@tekNico.net>
Message-ID: <20060511174346.37577.qmail@web26515.mail.ukl.yahoo.com>

Thanks Nicola,
 I'm investigating this further.
 
 Stéphane

----- Message d'origine ----
De : Nicola Larosa <nico at tekNico.net>
À : twisted-python at twistedmatrix.com
Envoyé le : Jeudi, 11 Mai 2006, 6h00mn 44s
Objet : [Twisted-Python] Re: Re : Multiple thread pools

> Still, I need to ensure that I won't have more than x similar calls at a
> time. Is there a way, maybe using some of the deferred classes
> (deferredqueue,..) to ensure that there is no more than x simultaneous
> similar calls (wrapped in deferreds), the others being pending, until
> one is finished.

You are on the right track. A couple possible approaches are in this
mailing list thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-January/012388.html

-- 
Nicola Larosa - http://www.tekNico.net/

Much as everyone thinks they want financial security, the happiest
people are not those who have it, but those who like what they do.
 -- Paul Graham, January 2006



_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From xt1_tm at yahoo.com  Thu May 11 12:43:14 2006
From: xt1_tm at yahoo.com (xuan tang)
Date: Thu, 11 May 2006 11:43:14 -0700 (PDT)
Subject: [Twisted-Python] How to stop a TCP server without stoping the
	reactor?
In-Reply-To: <446378C2.6050801@densedata.com>
Message-ID: <20060511184314.20974.qmail@web38413.mail.mud.yahoo.com>

Thanks for your help Johann.
  
  Xuan

Johann Borck <johann.borck at densedata.com> wrote:  xuan tang wrote:

> I am trying to create a TCP server using twisted reactor. I want to
> stop the server from accepting TCP bind requests (and restart it
> later), but for some reason I don't want to use reactor.stop(). Is
> there another way to do it?

reactor.listenXXX returns the an IListeningPort-implementing object on
which you can call stopListening() and startListening(). When you're
using the twisted.application stuff you can call
stopService()/startService() on your Service instance.

Johann


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060511/c2e82be7/attachment.html>

From robert at gravina.com  Fri May 12 03:03:24 2006
From: robert at gravina.com (Robert Gravina)
Date: Fri, 12 May 2006 18:03:24 +0900
Subject: [Twisted-Python] can pb.Copyable objects be compared for equality
	after a round trip?
In-Reply-To: <d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>
References: <A3670745-9440-473D-A3E8-8246F1EA68A0@gravina.com>
	<20060505134940.GF27715@cs.cmu.edu>
	<949B39E2-44C5-40DF-8E9C-14999D64BFCD@gravina.com>
	<20060505153141.GH27715@cs.cmu.edu>
	<B32E2896-6935-420F-830E-C7C1ACDC10F2@gravina.com>
	<d27002d90605070255y563ed3a5t2237b23c807d5c79@mail.gmail.com>
Message-ID: <D5F8F0E7-1BD9-48AE-96A9-817316678460@gravina.com>

> It's possible to make each element in the set being edited a
> cacheable. If you think that would introduce too much overhead, then
> you can add a method to the "address book" object which updates one of
> the entries in this address book, and uses an id to identify the entry
> within the address book. So the address book is the dict. That's what
> I did in a similar case. I'm no expert though.

> HTH
>
> Micky

Yeah. I've just realised that after saving an object in the ZODB it  
should have an ID attribute called "_p_oid". I can can compare  
copyables that come back to objects in the database this way. I think  
this will be much easier to implement than having around 20 classes  
which are all cachables, although I can see some problems arising  
here because the "_p_oid" only has a useful value after the object  
has been persisted.

Perhaps someone knows of an open source app which has tackled this  
problem (i.e. keeping an object hierarchy in sync across multiple  
clients) that I could look at and get general strategies from? It  
seems all my solutions have a "hack" feel too them, and I can't wrap  
my head around how to do this using a mix of cacheables/copyables/ 
referencables. For now, I just have one top-level cache that get it's  
observe_* methods called (e.g. observe_addFoo(foo)) and then just  
look to see if there is an Foo with the same _p_oid in my list of  
Foo's and update (by just calling setCopyableState) if so, or append  
otherwise. Something just doesn't feel right about this approach.

Robert



From moe at divmod.com  Fri May 12 03:13:33 2006
From: moe at divmod.com (Moe Aboulkheir)
Date: Fri, 12 May 2006 11:13:33 +0200
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060511174305.11050.qmail@web26502.mail.ukl.yahoo.com>
Message-ID: <20060512091333.22481.1759201386.divmod.quotient.24713@ohm>

On Thu, 11 May 2006 17:43:05 +0000 (GMT), Stéphane Brault <stephane_brault at yahoo.fr> wrote:
>Am I wrong when inferring that DeferredList is not compulsory ?

It depends whether or not you want to know when all of the tasks have completed, which is what the example uses it for.

Moe



From stephane_brault at yahoo.fr  Fri May 12 03:59:00 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Fri, 12 May 2006 09:59:00 +0000 (GMT)
Subject: [Twisted-Python] Multiple thread pools
In-Reply-To: <20060512091333.22481.1759201386.divmod.quotient.24713@ohm>
Message-ID: <20060512095900.70674.qmail@web26510.mail.ukl.yahoo.com>

Thanks Moe,
 that's what I inferred, I don't need to know when all tasks have completed. I only need to run tasks as they arrive,
 whether scheduled or called by a user and guarantee that no more than a certain number are running simultineaously.
 
 Stéphane

----- Message d'origine ----
De : Moe Aboulkheir <moe at divmod.com>
Ã€ : Twisted general discussion <twisted-python at twistedmatrix.com>
EnvoyÃ© le : Vendredi, 12 Mai 2006, 11h13mn 33s
ObjetÂ : Re: Re : Re : [Twisted-Python] Multiple thread pools

On Thu, 11 May 2006 17:43:05 +0000 (GMT), Stéphane Brault <stephane_brault at yahoo.fr> wrote:
>Am I wrong when inferring that DeferredList is not compulsory ?

It depends whether or not you want to know when all of the tasks have completed, which is what the example uses it for.

Moe

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From manlio_perillo at libero.it  Fri May 12 12:56:23 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 12 May 2006 16:56:23 -0200
Subject: [Twisted-Python] signal handlers and threads
Message-ID: <4464DA57.3090205@libero.it>

Hi.

I have written a small module for sending signals to a "foreign" Python
process on Windows 2000/XP.

The trunk is on
http://svn.berlios.de/svnroot/repos/pykill32/trunk

In this way I can send KILL, TERM and so, like in a POSIX system.

This works by creating a thread on the remote process (yes, Windows
allow this...) and let it call the function "raise" from the MSVCR71 DLL.


This seems to work fine, and now I can stop a Twisted process with
kill.py TERM pid
(does twistd save the pid in a file on Windows?)

but I'm not sure if signal handlers are thread safe.



Regards  Manlio Perillo



From slamb at slamb.org  Fri May 12 14:33:46 2006
From: slamb at slamb.org (Scott Lamb)
Date: Fri, 12 May 2006 13:33:46 -0700
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <4464DA57.3090205@libero.it>
References: <4464DA57.3090205@libero.it>
Message-ID: <55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>

On May 12, 2006, at 11:56 AM, Manlio Perillo wrote:
> Hi.
>
> I have written a small module for sending signals to a "foreign"  
> Python
> process on Windows 2000/XP.
>
> The trunk is on
> http://svn.berlios.de/svnroot/repos/pykill32/trunk
>
> In this way I can send KILL, TERM and so, like in a POSIX system.
>
> This works by creating a thread on the remote process (yes, Windows
> allow this...) and let it call the function "raise" from the  
> MSVCR71 DLL.

Wow, that is sick! I thought _I_ did weird stuff with signals!

So Windows provides signal(), raise(), and the usual signal numbers,  
but no kill()? Weird! Does it have pthread_kill()? sigprocmask()?  
pthread_sigprocmask()? sigaction()? Do the semantics differ from the  
usual ones?

Interesting when compared to the Cygwin stuff: <http://cygwin.com/cgi- 
bin/cvsweb.cgi/src/winsup/cygwin/sigproc.cc?cvsroot=src>

> This seems to work fine, and now I can stop a Twisted process with
> kill.py TERM pid
> (does twistd save the pid in a file on Windows?)
>
> but I'm not sure if signal handlers are thread safe.

In Twisted's case, it sure looks to be. See twisted/internet/base.py:

     def sigTerm(self, *args):
         """Handle a SIGTERM interrupt.
         """
         log.msg("Received SIGTERM, shutting down.")
         self.callFromThread(self.stop)

Actually, <http://docs.python.org/lib/module-signal.html> says this:

     "Some care must be taken if both signals and threads are used in  
the same program. The fundamental thing to remember in using signals  
and threads simultaneously is: always perform signal() operations in  
the main thread of execution. Any thread can perform an alarm(),  
getsignal(), or pause(); only the main thread can set a new signal  
handler, and the main thread will be the only one to receive signals  
(this is enforced by the Python signal module, even if the underlying  
thread implementation supports sending signals to individual  
threads). This means that signals can't be used as a means of inter- 
thread communication. Use locks instead."

so the self.callFromThread() only matters if the reactor thread is  
not Python's main thread.

And Python does seem to provide this guarantee even with your thing.  
See signal_handler in <http://svn.python.org/projects/python/trunk/ 
Modules/signalmodule.c>. It just sets a flag to be picked up later,  
and only the main thread does that apparently.

Now, I don't see any guarantee that signals always handled before  
entering blocking calls, so they can be delayed forever if nothing  
else wakes it up. (This is like their documented note about long  
computations but worse.) It does the "normal syscall + flag handler"  
stuff I describe at <http://www.slamb.org/projects/sigsafe/api/>.  
That's a problem with Python's signal handling everywhere, not with  
your thing or Twisted.

Regards,
Scott

-- 
Scott Lamb <http://www.slamb.org/>





From manlio_perillo at libero.it  Fri May 12 15:30:49 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 12 May 2006 19:30:49 -0200
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
References: <4464DA57.3090205@libero.it>
	<55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
Message-ID: <4464FE89.2020708@libero.it>

Scott Lamb ha scritto:
> [...]
>> This works by creating a thread on the remote process (yes, Windows
>> allow this...) and let it call the function "raise" from the MSVCR71 DLL.
> 
> Wow, that is sick! I thought _I_ did weird stuff with signals!
> 
> So Windows provides signal(), raise(), and the usual signal numbers, but
> no kill()? 

Yes!
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_crt_raise.asp
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclib/html/_CRT_signal.asp

Note that it is supported also SIGBREAK (but not documented on msdn).

> Weird! Does it have pthread_kill()? sigprocmask()?
> pthread_sigprocmask()? sigaction()? Do the semantics differ from the
> usual ones?
> 

No, Windows support signals because they are required by ISO C.

I have found this document:
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/ucmglp.asp


> Interesting when compared to the Cygwin stuff:
> <http://cygwin.com/cgi-bin/cvsweb.cgi/src/winsup/cygwin/sigproc.cc?cvsroot=src>
> 

Pass.

> 
>> This seems to work fine, and now I can stop a Twisted process with
>> kill.py TERM pid
>> (does twistd save the pid in a file on Windows?)
>>
>> but I'm not sure if signal handlers are thread safe.
> 
> In Twisted's case, it sure looks to be. See twisted/internet/base.py:
> 
>     def sigTerm(self, *args):
>         """Handle a SIGTERM interrupt.
>         """
>         log.msg("Received SIGTERM, shutting down.")
>         self.callFromThread(self.stop)
> 

Ok, fine!

> Actually, <http://docs.python.org/lib/module-signal.html> says this:
> 
>     "Some care must be taken if both signals and threads are used in the
> same program. The fundamental thing to remember in using signals and
> threads simultaneously is: always perform signal() operations in the
> main thread of execution. Any thread can perform an alarm(),
> getsignal(), or pause(); only the main thread can set a new signal
> handler, and the main thread will be the only one to receive signals
> (this is enforced by the Python signal module, even if the underlying
> thread implementation supports sending signals to individual threads).
> This means that signals can't be used as a means of inter-thread
> communication. Use locks instead."
> 

I have read this and it seems to allow what I'm doing.

> so the self.callFromThread() only matters if the reactor thread is not
> Python's main thread.
> 

There is someone who run the reactor in a child thread?

> And Python does seem to provide this guarantee even with your thing. See
> signal_handler in
> <http://svn.python.org/projects/python/trunk/Modules/signalmodule.c>. It
> just sets a flag to be picked up later, and only the main thread does
> that apparently.
> 
> Now, I don't see any guarantee that signals always handled before
> entering blocking calls, so they can be delayed forever if nothing else
> wakes it up. 

But this should not be a problem in Twisted, since there are no blocking
calls.

> (This is like their documented note about long computations
> but worse.) It does the "normal syscall + flag handler" stuff I describe
> at <http://www.slamb.org/projects/sigsafe/api/>. That's a problem with
> Python's signal handling everywhere, not with your thing or Twisted.
> 

Well, thanks!

Just to add more informations:
when killing a normal Python process with TERM, the Interpreter
terminates without calling the functions registered with atexit.

Now this is strange because the MSDN says that, by default, SIGTERM is
ignored and the Python documentation says that only an handler for
SIGINT is installed.



Regards  Manlio Perillo



From slamb at slamb.org  Fri May 12 18:12:06 2006
From: slamb at slamb.org (Scott Lamb)
Date: Fri, 12 May 2006 17:12:06 -0700
Subject: [Twisted-Python] signal handlers and threads
In-Reply-To: <4464FE89.2020708@libero.it>
References: <4464DA57.3090205@libero.it>
	<55D12038-C5E0-4839-8C9C-528334F16CC0@slamb.org>
	<4464FE89.2020708@libero.it>
Message-ID: <7D80E3A1-F423-49E4-9AFD-382EF31A58F9@slamb.org>


On May 12, 2006, at 2:30 PM, Manlio Perillo wrote:

>> Now, I don't see any guarantee that signals always handled before
>> entering blocking calls, so they can be delayed forever if nothing  
>> else
>> wakes it up.
>
> But this should not be a problem in Twisted, since there are no  
> blocking
> calls.

There's one: select().

-- 
Scott Lamb <http://www.slamb.org/>





From exarkun at twistedmatrix.com  Sat May 13 23:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 14 May 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1147583101.93.1781374640@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-07 through 2006-05-14
Bugs opened: 10    Bugs closed: 6  Total open bugs: 612 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +3  |Highest:  -1          |Core:     +0           
|Enhancement:  +1  |High:     -1          |Names:    +1           
                   |Normal:   +6          |Pb:       -1           
                                          |Trial:    +1           
                                          |Web2:     +1           
                                          |Website:  +1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1709] defgen incorrectly propagates handled Failures to the outer Deferred (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1709

[#1710] Failures can be created in a broken state (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1710

                    ===== High =====
[#1711] PyLucene doesn't close write indexes properly (opened by exarkun) (CLOSED, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1711

                    ===== Normal =====
[#1706] Make todo a decorator (opened by jml)
    defect          trial      http://twistedmatrix.com/trac/ticket/1706

[#1707] cannot edit wiki pages (opened by warner)
    defect          website    http://twistedmatrix.com/trac/ticket/1707

[#1708] twisted.names shouldn't stop listening when crappy data is sent (opened by radix)
    enhancement     names      http://twistedmatrix.com/trac/ticket/1708

[#1712] Twisted overview graph shows Xish (opened by ralphm)
    defect          core       http://twistedmatrix.com/trac/ticket/1712

[#1713] Web2 test failure on win32 (SSLServerTest.testLingeringClose) (opened by teratorn)
    defect          web2       http://twistedmatrix.com/trac/ticket/1713

[#1714] Update Words' NEWS for 2.3 release (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1714

[#1715] move vertex.juice into twisted.internet (opened by glyph)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1715



Closed Bugs
______________________
                    ===== Highest =====
[#1710] Failures can be created in a broken state (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1710

[#1709] defgen incorrectly propagates handled Failures to the outer Deferred (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1709

[#1668] Update release automation to work with recent version changes (opened by radix, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1668

                    ===== High =====
[#1022] Explain Deferred for users familiar with callbacks (opened by hypatia, closed by edsuom, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1022

[#1711] PyLucene doesn't close write indexes properly (opened by exarkun, closed by exarkun, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1711

                    ===== Normal =====
[#1684] release newpb 0.0.1 ! (opened by warner, closed by radix, fixed)
    enhancement     pb         http://twistedmatrix.com/trac/ticket/1684





From jmp at MIT.EDU  Tue May 16 19:24:24 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Tue, 16 May 2006 21:24:24 -0400
Subject: [Twisted-Python] Send many large files with PB
Message-ID: <20060517012422.GB20086@mit.edu>

Hi,

I'm using PB in a distributed application that has suddenly grown the
requirement to copy directories of files between the servers.

>From lurking on the mailing list archives, it seems that the best way
to move large amounts of data between Twisted servers is to use a
twisted.spread.util.Pager sub-class to pipe the data.  Between that
information and the "How to use twisted pb pager" [1] document, I'm
probably good to go on how to transfer large amounts of data.

However, I wanted to step back and ask what's the best way to actually
package the files that I'm going to send.  To make things concrete,
suppose I need to send data from SRC to DEST and that SRC has a PB
RemoteReference to DEST.  Also, most files will be huge (gigabytes)
and nested in directories.

- Should I send the files from SRC to DEST one-by-one?  That is, make
  a new PB request for a new Pager reference for each file, stream the
  file using a twisted.spread.util.FilePager instance, then repeat
  with the next file, and so on.  This has the advantage that I think
  I can do it fairly easily, but has the disadvantage of requiring
  many PB calls (with the associated bookkeeping in my application).

- Or, is it better to use something like tarfile module to create a
  stream of bytes that I stream to the other side and decode?  There's
  something appealing to using tarfile--it's like the oft-seen "tar
  -xf - | ssh user at host 'tar -cf -'" way of transferring files.  Plus,
  the tarfile module takes care of making directories and the like for
  me.

  This method has the advantage of a single PB call, but the
  disadvantage that I can't quite figure out how to use tarfile with
  Twisted.  The tarfile module requires an file-like object to stream
  to or stream from.  I don't think the naive approach of just adding
  __write__ method to a Pager or __read__ method to a
  CallbackPageCollector will work without taking up all of the memory
  in my system or blocking in some way.

- Finally, should I be doing something completely different?
  Normally, outside of my application, I'd just use rsync, scp, or
  some such.  However, the users of this application don't know how to
  use these tools.  I can't spawn these programs without getting into
  authentication issues between the machines.  Doing this within
  Twisted seems like a good idea because the machines are already
  authenticated to each other through PB, but I could be wrong.

I apologize if this is rambling.  I've been thinking about this for
a while and am now a bit bleary-eyed.
  --Justin

[1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/457670



From warner at lothar.com  Wed May 17 00:41:12 2006
From: warner at lothar.com (Brian Warner)
Date: Tue, 16 May 2006 23:41:12 -0700 (PDT)
Subject: [Twisted-Python] Send many large files with PB
Message-ID: <20060516.234112.131383979.warner@lothar.com>

Justin Mazzola Paluska <jmp at MIT.EDU> writes:

> - Should I send the files from SRC to DEST one-by-one?

That's how I would do it. If you're talking about gigabyte-sized files, the
protocol overhead will be pretty minimal compared to the data being
transferred. You've got a couple of objects to keep track of for each file
being sent, but on the other hand it will be a lot easier to keep track of
how much progress you've made (and keep the user informed) that way.

> - Or, is it better to use something like tarfile module to create a
>   stream of bytes that I stream to the other side and decode?

I would recommend this approach if you had a bunch of small files. You want
to run that 'tar cf - WHAT' child against a ProcessProtocol that reacted to
dataReceived(data) by doing a rref.callRemote("moreDataForYou", data). You'd
probably want to accumulate data into chunks of maybe 4k or so to increase
efficiency. At the far end, your remote_moreDataForYou() call would write
that data into the untarring ProcessProtocol. Take a look at
doc/core/howto/process.xhtml for details on ProcessProtocols and
reactor.spawnProcess.

> - Finally, should I be doing something completely different?
>   Normally, outside of my application, I'd just use rsync, scp, or
>   some such.

I'd certainly investigate this method if the most of the files you are
sending are already in place on the far end. The bandwidth savings are worth
the extra setup hassle.

Is there a way to get rsync to speak to stdout/stdin instead of using a TCP
socket? If so, you could spawnProcess('rsync') and proxy it to the far end
over PB as with 'tar' above. Or, you could have your PB-connection-wielding
process listen on a local TCP socket, then tell rsync to talk directly to
that port, then do a socket-level proxy over PB to the far system.

Also remember that scp (or rsync-over-ssh or tar|ssh, etc) will be doing
better authentication than PB, since PB is all in cleartext. Many
applications don't require confidentiality, but before you switch from ssh to
straight PB you should be aware of what exactly you're giving up.

<shameless plug>
But, if you use NewPB, you get the strong authentication and confidentiality
of ssh with all of the juicy RemoteReference model you've come to know and
love from PB, check out NewPB[1] today.
</shameless plug>.


cheers,
 -Brian

[1]: http://twistedmatrix.com/trac/wiki/NewPB



From nico at tekNico.net  Wed May 17 00:41:21 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 17 May 2006 08:41:21 +0200
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <20060517012422.GB20086@mit.edu>
References: <20060517012422.GB20086@mit.edu>
Message-ID: <446AC591.5020908@tekNico.net>

Justin Mazzola Paluska wrote:
> Hi,
> 
> I'm using PB in a distributed application that has suddenly grown the
> requirement to copy directories of files between the servers.
> 
> From lurking on the mailing list archives, it seems that the best way
> to move large amounts of data between Twisted servers is to use a
> twisted.spread.util.Pager sub-class to pipe the data.  Between that
> information and the "How to use twisted pb pager" [1] document, I'm
> probably good to go on how to transfer large amounts of data.

In my experience, sending big files over PB takes way too much time. This
is due to the serialization-deserialization process involved. Paging avoids
blocking, which is good, but it still takes much more than sending the
files as-is.

At the very least, optimize serialization by enable cBanana by uncommenting
the lines 311-318 in twisted.spread.banana.py . Why are they commented?

http://twistedmatrix.com/pipermail/twisted-python/2004-December/009158.html


> - Finally, should I be doing something completely different?
>   Normally, outside of my application, I'd just use rsync, scp, or
>   some such.  However, the users of this application don't know how to
>   use these tools.  I can't spawn these programs without getting into
>   authentication issues between the machines.  Doing this within
>   Twisted seems like a good idea because the machines are already
>   authenticated to each other through PB, but I could be wrong.

You could send the files over an HTTP connection, avoiding the
serialization overhead. Setting up HTTP clients and servers is very easy in
Twisted, as you surely know.


> [1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/457670

-- 
Nicola Larosa - http://www.tekNico.net/

If you know you can love work, you're in the home stretch, and if you know
what work you love, you're practically there. -- Paul Graham, January 2006





From general at eepatents.com  Wed May 17 01:25:54 2006
From: general at eepatents.com (Ed Suominen)
Date: Wed, 17 May 2006 00:25:54 -0700
Subject: [Twisted-Python] sAsync: SQLAlchemy Made Asynchronous
Message-ID: <446AD002.9040207@eepatents.com>

sAsync: SQLAlchemy Made Asynchronous
----------------------------------------
http://foss.eepatents.com/sAsync/

"sAsync offers asynchronous access to the outstanding SQLAlchemy package
by Michael Bayer. It also provides SQLAlchemy enhancements including
persistent dictionaries, text indexing and searching, and an access
broker for conveniently managing database access, table setup, and
transactions. Everything can be run in an asynchronous fashion using the
Twisted framework and its deferred processing capabilities."

As the site goes on to say, this package is very much a work in
progress, and it's not even close to a release yet. It has only the
beginning of a test suite, none of the planned searching capability is
close to working, and it needs some more packaging work, for starters.
However, you can browse the package source files from the current SVN
trunk on the Trac site, or check out the current SVN trunk as follows:

svn co svn://eepatents.com/var/svn/sasync/trunk sasync

I very much hope that SQLAlchemy and Twisted users (especially those
interested in the integrated use of both projects) will offer
submissions. That can be done by creating tickets with uploaded files,
editing the Wiki page http://foss.eepatents.com/sAsync/wiki/Submissions,
or (if you're serious about this), by requesting and obtaining SVN
commit privileges for the project from me.

It would be great to see some collaborate work getting done on this. I'm
also interested in whether this would be a prospect for an add-on to SA
itself rather than a separately maintained package.

Best regards,
Ed Suominen



From eprparadocs at gmail.com  Wed May 17 05:57:39 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 07:57:39 -0400
Subject: [Twisted-Python] Question about PB and multicast
Message-ID: <446B0FB3.8060108@gmail.com>

I am building an application that has tens of thousands of clients.
There are times when I need to talk to quite a few of the clients using PB.

When I have to talk to a single (or a few) clients via PB I do the
normal thing - issue multiple calls. In the cases where I have to talk
to quite a few clients I had thought of changing the object I am sending
to include the names of the machines I am interested in talking to. I
would then send it via multicast using PB. I know this would require
some changes on the PB side, but I am wondering if anyone sees a problem
doing this?

Peace,
Chaz.



From jmp at MIT.EDU  Wed May 17 06:57:24 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Wed, 17 May 2006 08:57:24 -0400
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <446AC591.5020908@tekNico.net>
References: <20060517012422.GB20086@mit.edu> <446AC591.5020908@tekNico.net>
Message-ID: <20060517125723.GE7887@mit.edu>

On Wed, May 17, 2006 at 08:41:21AM +0200, Nicola Larosa wrote:
> In my experience, sending big files over PB takes way too much time. This
> is due to the serialization-deserialization process involved. Paging avoids
> blocking, which is good, but it still takes much more than sending the
> files as-is.

How bad is the slow down?  Or, to ask the question another way, how
much CPU will the process actually take?  

I ask because the machines in question are being used as file servers
for streaming applications like video and whatnot, so having Twisted
suck up all of the CPU may disrupt the other streams.  (We're not
using Twisted to actually serve the files, but rather as the
application framework for various web- and GUI- based management
clients.  The copy data feature would be the first time we're moving
lots of data with Twisted.)

> > - Finally, should I be doing something completely different?
> >   Normally, outside of my application, I'd just use rsync, scp, or
> >   some such.  However, the users of this application don't know how to
> >   use these tools.  I can't spawn these programs without getting into
> >   authentication issues between the machines.  Doing this within
> >   Twisted seems like a good idea because the machines are already
> >   authenticated to each other through PB, but I could be wrong.
> 
> You could send the files over an HTTP connection, avoiding the
> serialization overhead. Setting up HTTP clients and servers is very easy in
> Twisted, as you surely know.

Indeed! Using HTTP is appealing because it is closer to just stuffing
bits in a socket from an efficiency standpoint.  Is there a way of
passing a RemoteReference to an HTTP server?  Or is the best thing to
do just use the PB to send a URL to the DEST server?
   --Justin



From nico at tekNico.net  Wed May 17 07:16:17 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Wed, 17 May 2006 15:16:17 +0200
Subject: [Twisted-Python] Re: Send many large files with PB
In-Reply-To: <20060517125723.GE7887@mit.edu>
References: <20060517012422.GB20086@mit.edu> <446AC591.5020908@tekNico.net>
	<20060517125723.GE7887@mit.edu>
Message-ID: <446B2221.9040708@tekNico.net>

Nicola Larosa:
>> In my experience, sending big files over PB takes way too much time. This
>> is due to the serialization-deserialization process involved. Paging avoids
>> blocking, which is good, but it still takes much more than sending the
>> files as-is.

Justin Mazzola Paluska:
> How bad is the slow down?  Or, to ask the question another way, how
> much CPU will the process actually take?  

100% CPU for all the time it takes. Serialization is CPU- and memory-intensive.


>> You could send the files over an HTTP connection, avoiding the
>> serialization overhead. Setting up HTTP clients and servers is very easy in
>> Twisted, as you surely know.

> Indeed! Using HTTP is appealing because it is closer to just stuffing
> bits in a socket from an efficiency standpoint.  Is there a way of
> passing a RemoteReference to an HTTP server?

I don't think so. There's no overlapping that I know of, between PB and HTTP.


> Or is the best thing to do just use the PB to send a URL to the DEST
> server?

That's what I was hinting at, yes. Of course you should separately take
care of any required authentication, authorization and encryption on the
HTTP connection.


-- 
Nicola Larosa - http://www.tekNico.net/

If you know you can love work, you're in the home stretch, and if you know
what work you love, you're practically there. -- Paul Graham, January 2006





From jmp at MIT.EDU  Wed May 17 07:17:37 2006
From: jmp at MIT.EDU (Justin Mazzola Paluska)
Date: Wed, 17 May 2006 09:17:37 -0400
Subject: [Twisted-Python] Send many large files with PB
In-Reply-To: <20060516.234112.131383979.warner@lothar.com>
References: <20060516.234112.131383979.warner@lothar.com>
Message-ID: <20060517131735.GF7887@mit.edu>

On Tue, May 16, 2006 at 11:41:12PM -0700, Brian Warner wrote:
> Justin Mazzola Paluska <jmp at MIT.EDU> writes:
> 
> > - Should I send the files from SRC to DEST one-by-one?
> 
> That's how I would do it. If you're talking about gigabyte-sized files, the
> protocol overhead will be pretty minimal compared to the data being
> transferred. You've got a couple of objects to keep track of for each file
> being sent, but on the other hand it will be a lot easier to keep track of
> how much progress you've made (and keep the user informed) that way.

OK.  I could also possibly stream multiple files at once with this
method, which is an added bonus.

> > - Finally, should I be doing something completely different?
> >   Normally, outside of my application, I'd just use rsync, scp, or
> >   some such.
> 
> I'd certainly investigate this method if the most of the files you are
> sending are already in place on the far end. The bandwidth savings are worth
> the extra setup hassle.

For this particular job, none of the files are initially in place on
the remote end, so rsync itself won't be a big win.

> Is there a way to get rsync to speak to stdout/stdin instead of using a TCP
> socket? If so, you could spawnProcess('rsync') and proxy it to the far end
> over PB as with 'tar' above. Or, you could have your PB-connection-wielding
> process listen on a local TCP socket, then tell rsync to talk directly to
> that port, then do a socket-level proxy over PB to the far system.

For future reference, I think there are ways of hacking this (these
statements are conjectures, I haven't actually tried them):

- on the side pushing data, use --rsh= some script that just takes the
  output of rsync and pushes it to stdout.

- on the side receiving the data, use --server to read from stdin.

> Also remember that scp (or rsync-over-ssh or tar|ssh, etc) will be doing
> better authentication than PB, since PB is all in cleartext. Many
> applications don't require confidentiality, but before you switch from ssh to
> straight PB you should be aware of what exactly you're giving up.

Our PB connections go over SSL and we have a custom auth module, so
piping everything over PB wouldn't be a big loss.

> <shameless plug>
> But, if you use NewPB, you get the strong authentication and confidentiality
> of ssh with all of the juicy RemoteReference model you've come to know and
> love from PB, check out NewPB[1] today.
> </shameless plug>.

I've been reading about NewPB and it might be exactly what we'll need
for the next revision of our application.  We're just too close to
pushing out this version to switch to a new RPC method for the core of
the program.

Thanks,
	--Justin



From teratorn at twistedmatrix.com  Wed May 17 07:32:00 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 17 May 2006 23:32:00 +1000
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <446B0FB3.8060108@gmail.com>
References: <446B0FB3.8060108@gmail.com>
Message-ID: <op.s9o6jm1ny3d107@localhost.localdomain>

On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:

> I am building an application that has tens of thousands of clients.
> There are times when I need to talk to quite a few of the clients using  
> PB.
>
> When I have to talk to a single (or a few) clients via PB I do the
> normal thing - issue multiple calls. In the cases where I have to talk
> to quite a few clients I had thought of changing the object I am sending
> to include the names of the machines I am interested in talking to. I
> would then send it via multicast using PB. I know this would require
> some changes on the PB side, but I am wondering if anyone sees a problem
> doing this?
>
> Peace,
> Chaz.

PB connections were only ever designed to operate between two peers. It's  
designed to run over a reliable stream protocol, e.g. TCP.

TCP doesn't work over Multicast (it doesn't make any sense, if you think  
about it). If you want to use Multicast, I think you'll pretty much have  
to write your own thing using UDP.

-Eric



From eprparadocs at gmail.com  Wed May 17 07:48:00 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 09:48:00 -0400
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <op.s9o6jm1ny3d107@localhost.localdomain>
References: <446B0FB3.8060108@gmail.com>
	<op.s9o6jm1ny3d107@localhost.localdomain>
Message-ID: <446B2990.7070601@gmail.com>

Thanks Eric. I was figuring it was something that I needed to write, but
I was hoping there was some hidden feature of Twisted or PB I didn't
know about.

Peace,
Chaz.

Eric Mangold wrote:
> On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:
> 
>> I am building an application that has tens of thousands of clients.
>> There are times when I need to talk to quite a few of the clients
>> using PB.
>>
>> When I have to talk to a single (or a few) clients via PB I do the
>> normal thing - issue multiple calls. In the cases where I have to talk
>> to quite a few clients I had thought of changing the object I am sending
>> to include the names of the machines I am interested in talking to. I
>> would then send it via multicast using PB. I know this would require
>> some changes on the PB side, but I am wondering if anyone sees a problem
>> doing this?
>>
>> Peace,
>> Chaz.
> 
> PB connections were only ever designed to operate between two peers.
> It's designed to run over a reliable stream protocol, e.g. TCP.
> 
> TCP doesn't work over Multicast (it doesn't make any sense, if you think
> about it). If you want to use Multicast, I think you'll pretty much have
> to write your own thing using UDP.
> 
> -Eric
> 




From andrea at cpushare.com  Wed May 17 08:28:07 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:28:07 +0200
Subject: [Twisted-Python] [patch] 1/4 process disconneting
Message-ID: <20060517142807.GV21766@opteron.random>

Here a list of fixes present in CPUShare-Twisted mercurial tree and
missing in Twisted SVN trunk. Most of these have been posted as a ticket
in trac without feedback (by now the links in the tickets are obsolete
due to bugs in tailor that required a rebuild of the SVN->HG repository,
but nobody asked about the dangling link anyway). So I rensend them here
just in case somebody is interested. I will not answer to replies
because I've no time, sorry. Each email contains one patch.

This fixes a reentrance problem in connectionLost if invoked by shutdown
at the same time as the real disconnect.

diff -r 493b5c24e0f3 twisted/internet/process.py
--- a/twisted/internet/process.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/internet/process.py	Wed May 17 15:59:28 2006 +0200
@@ -82,7 +82,24 @@ def detectLinuxBrokenPipeBehavior():
 # Call at import time
 detectLinuxBrokenPipeBehavior()
 
-class ProcessWriter(abstract.FileDescriptor):
+class ProcessReaderWriter(abstract.FileDescriptor):
+    """(Internal) Helper class to avoid code duplication between
+    ProcessReader and ProcessWriter."""
+    def connectionLost(self, reason):
+        """Close my end of the pipe, signal the Process (which signals the
+        ProcessProtocol).
+        See also abstract.FileDescriptor.connectionLost.
+        """
+        # connectionLost can be called multiple times, for example
+        # both from the loseConnection timer, and from the
+        # shutdown event as well, but childConnectionLost
+        # needs to be invoked only once
+        disconnected = self.disconnected
+        abstract.FileDescriptor.connectionLost(self, reason)
+        if not disconnected:
+            self.proc.childConnectionLost(self.name, reason)
+
+class ProcessWriter(ProcessReaderWriter):
     """(Internal) Helper class to write into a Process's input pipe.
 
     I am a helper which describes a selectable asynchronous writer to a
@@ -174,14 +191,8 @@ class ProcessWriter(abstract.FileDescrip
         else:
             self.stopReading()
         
-    def connectionLost(self, reason):
-        """See abstract.FileDescriptor.connectionLost.
-        """
-        abstract.FileDescriptor.connectionLost(self, reason)
-        self.proc.childConnectionLost(self.name, reason)
-
-
-class ProcessReader(abstract.FileDescriptor):
+
+class ProcessReader(ProcessReaderWriter):
     """ProcessReader
 
     I am a selectable representation of a process's output pipe, such as
@@ -224,13 +235,6 @@ class ProcessReader(abstract.FileDescrip
             self.disconnecting = 1
             self.stopReading()
             self.reactor.callLater(0, self.connectionLost, failure.Failure(CONNECTION_DONE))
-    
-    def connectionLost(self, reason):
-        """Close my end of the pipe, signal the Process (which signals the
-        ProcessProtocol).
-        """
-        abstract.FileDescriptor.connectionLost(self, reason)
-        self.proc.childConnectionLost(self.name, reason)
 
 
 class Process(styles.Ephemeral):



From andrea at cpushare.com  Wed May 17 08:31:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:31:56 +0200
Subject: [Twisted-Python] [patch] 2/4 processEnded no thread callback
In-Reply-To: <20060517142807.GV21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
Message-ID: <20060517143156.GW21766@opteron.random>

I noticed processEnded is called by threads. This generates a subtle
race condition for most code (or at least for my code). The fact
processEnded is called from threads isn't documented anywhere and so I
prefer to be safe than sorry since I assume most code is written
thinking processEnded will run in the usual serialized context and not
in a parallel racy thread.

diff -r 493b5c24e0f3 twisted/internet/posixbase.py
--- a/twisted/internet/posixbase.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/internet/posixbase.py	Wed May 17 15:59:28 2006 +0200
@@ -189,7 +189,7 @@ class PosixReactorBase(ReactorBase):
         if platformType == 'posix':
             signal.signal(signal.SIGCHLD, self._handleSigchld)
 
-    def _handleSigchld(self, signum, frame, _threadSupport=platform.supportsThreads()):
+    def _handleSigchld(self, signum, frame):
         """Reap all processes on SIGCHLD.
 
         This gets called on SIGCHLD. We do no processing inside a signal
@@ -198,10 +198,7 @@ class PosixReactorBase(ReactorBase):
         eventloop round prevents us from violating the state constraints
         of arbitrary classes.
         """
-        if _threadSupport:
-            self.callFromThread(process.reapAllProcesses)
-        else:
-            self.callLater(0, process.reapAllProcesses)
+        self.callLater(0, process.reapAllProcesses)
 
     def startRunning(self, installSignalHandlers=1):
         # Just in case we're started on a different thread than



From andrea at cpushare.com  Wed May 17 08:37:28 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:37:28 +0200
Subject: [Twisted-Python] [patch] 3/4 basic protocols don't notice
	disconnecting
In-Reply-To: <20060517143156.GW21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
	<20060517143156.GW21766@opteron.random>
Message-ID: <20060517143728.GX21766@opteron.random>

This is an old patch, it wasn't applied because not all transport
backends support disconnecting but since I assume most people uses the
basic int32/16 protocols on top of tcp this isn't a pratical concern for
me, and I prefer no data callback to fire after calling loseConnection.
This isn't an high prio patch but I post it anyway (I understand if it
will not be applied to SVN again for the valid reason that disconnecting
may not exists, I admit I never investigated since I only use tcp and
udp, my argument that disconnecting could be added in a compatible
transparent way to all transports still holds).

diff -r 493b5c24e0f3 twisted/protocols/basic.py
--- a/twisted/protocols/basic.py	Tue May 16 04:57:00 2006 +0000
+++ b/twisted/protocols/basic.py	Wed May 17 15:59:28 2006 +0200
@@ -309,7 +309,7 @@ class Int32StringReceiver(protocol.Proto
         """Convert int32 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 3 and not self.paused:
+        while len(self.recvd) > 3 and not self.paused and not self.transport.disconnecting:
             length ,= struct.unpack("!i",self.recvd[:4])
             if length > self.MAX_LENGTH:
                 self.transport.loseConnection()
@@ -346,7 +346,7 @@ class Int16StringReceiver(protocol.Proto
         """Convert int16 prefixed strings into calls to stringReceived.
         """
         self.recvd = self.recvd + recd
-        while len(self.recvd) > 1 and not self.paused:
+        while len(self.recvd) > 1 and not self.paused and not self.transport.disconnecting:
             length = (ord(self.recvd[0]) * 256) + ord(self.recvd[1])
             if len(self.recvd) < length+2:
                 break




From teratorn at twistedmatrix.com  Wed May 17 08:38:58 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Thu, 18 May 2006 00:38:58 +1000
Subject: [Twisted-Python] Twisted Sprint in Australia
In-Reply-To: <d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
References: <d06a5cd30604081942q3972c79apfde5efb6812da6a2@mail.gmail.com>
	<20060409041914.GA5338@sourdust.home.puzzling.org>
	<d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
Message-ID: <op.s9o9m80my3d107@localhost.localdomain>

Cool. I should be able to make it. Will be staying in Sydney for the  
nights of June 3-6. I'm trying to sort out accomodations right now... is  
anyone staying at a hotel, or have other accomodations that could be  
shared?

-Eric

On Sun, 09 Apr 2006 17:09:43 +1000, Jonathan Lange <jml at mumak.net> wrote:

> On 4/9/06, Mary Gardiner <mary-twisted at puzzling.org> wrote:
>> On Sun, Apr 09, 2006, Jonathan Lange wrote:
>> > I tentatively suggest that the Sprint be:
>> > - In Sydney
>> > - June 24-25
>> > (patches accepted)
>> >
>
> For various reasons, it is now:
> June 3-4, Sydney.
>
> jml
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>





From andrea at cpushare.com  Wed May 17 08:51:06 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Wed, 17 May 2006 16:51:06 +0200
Subject: [Twisted-Python] [patch] 4/4 stable web2
In-Reply-To: <20060517143728.GX21766@opteron.random>
References: <20060517142807.GV21766@opteron.random>
	<20060517143156.GW21766@opteron.random>
	<20060517143728.GX21766@opteron.random>
Message-ID: <20060517145106.GY21766@opteron.random>

I started using web2 in production about 4 months ago and it's stable
(there were bugs but I've fixed them all). Grepping for 'grep -ri nevow'
over my tree shows zero hits for about two months. The web2 API
rightfully isn't stable but people that is ok with slight change of APIs
(changes that hopefully won't require a total rewrite of the
application) should be allowed to start porting their apps to web2, and
infact in the last 4 months the API has not changed singificantly, and
it seems quite mature, much better than web1.

It is now time to make web2 mainstream, implementing any potentially
missing feature (I never tested the web2 client side for example, that
may not be mature as the server side yet) and leave for web3
any huge changes that isn't strictly necessary and that would requires a
total rewrite of the apps. Twisted-web userbase shouldn't lose more time
on the obsolete twisted.web1 api. There is people like me that needs
something with much more scalable and simpler to code with than
web1+neovw. twisted.web2 + cheetah (or other rendering templates) fills
this gap nicely. I hope that the huge nevow dependency of divmod
products generates no conflict of interest with change. Web2 always gest
installed in Twisted-HG (including all web2 fixes that are pending and
that I'll post to twisted-web list shortly).

diff -r 493b5c24e0f3 setup.py
--- a/setup.py	Tue May 16 04:57:00 2006 +0000
+++ b/setup.py	Wed May 17 15:59:35 2006 +0200
@@ -11,7 +11,7 @@ import sys, os, glob
 
 # Projects to which `all' refers.
 sumoSubprojects = ['core', 'conch', 'lore', 'mail', 'names',
-                   'runner', 'web', 'words', 'news']
+                   'runner', 'web', 'words', 'news', 'web2',]
 
 specialPaths = {'core': 'twisted/topfiles/setup.py'}
 



From exarkun at divmod.com  Wed May 17 09:04:07 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:04:07 -0400
Subject: [Twisted-Python] [patch] 1/4 process disconneting
In-Reply-To: <20060517142807.GV21766@opteron.random>
Message-ID: <20060517150407.28682.827774677.divmod.quotient.1839@ohm>

On Wed, 17 May 2006 16:28:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>Here a list of fixes present in CPUShare-Twisted mercurial tree and
>missing in Twisted SVN trunk. Most of these have been posted as a ticket
>in trac without feedback (by now the links in the tickets are obsolete
>due to bugs in tailor that required a rebuild of the SVN->HG repository,
>but nobody asked about the dangling link anyway). So I rensend them here
>just in case somebody is interested. I will not answer to replies
>because I've no time, sorry. Each email contains one patch.

If you had put patches into the issue tracker in the first place you wouldn't have had to resend anything at all.

>
>This fixes a reentrance problem in connectionLost if invoked by shutdown
>at the same time as the real disconnect.

No it doesn't.

Jean-Paul



From exarkun at divmod.com  Wed May 17 09:06:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:06:09 -0400
Subject: [Twisted-Python] [patch] 2/4 processEnded no thread callback
In-Reply-To: <20060517143156.GW21766@opteron.random>
Message-ID: <20060517150609.28682.1764661287.divmod.quotient.1840@ohm>

On Wed, 17 May 2006 16:31:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I noticed processEnded is called by threads. This generates a subtle
>race condition for most code (or at least for my code). The fact
>processEnded is called from threads isn't documented anywhere and so I
>prefer to be safe than sorry since I assume most code is written
>thinking processEnded will run in the usual serialized context and not
>in a parallel racy thread.

No it isn't.  The bug you imagine here is non-existent.  There is nothing to be fixed.

Jean-Paul



From exarkun at divmod.com  Wed May 17 09:09:56 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:09:56 -0400
Subject: [Twisted-Python] [patch] 4/4 stable web2
In-Reply-To: <20060517145106.GY21766@opteron.random>
Message-ID: <20060517150956.28682.738587629.divmod.quotient.1842@ohm>

On Wed, 17 May 2006 16:51:06 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I started using web2 in production about 4 months ago and it's stable
>(there were bugs but I've fixed them all). Grepping for 'grep -ri nevow'
>over my tree shows zero hits for about two months. The web2 API
>rightfully isn't stable but people that is ok with slight change of APIs
>(changes that hopefully won't require a total rewrite of the
>application) should be allowed to start porting their apps to web2, and
>infact in the last 4 months the API has not changed singificantly, and
>it seems quite mature, much better than web1.

"allowed"?  What's stopping anyone from using it?

>
>It is now time to make web2 mainstream, implementing any potentially
>missing feature (I never tested the web2 client side for example, that
>may not be mature as the server side yet) and leave for web3
>any huge changes that isn't strictly necessary and that would requires a
>total rewrite of the apps. Twisted-web userbase shouldn't lose more time
>on the obsolete twisted.web1 api. There is people like me that needs
>something with much more scalable and simpler to code with than
>web1+neovw. twisted.web2 + cheetah (or other rendering templates) fills
>this gap nicely. I hope that the huge nevow dependency of divmod
>products generates no conflict of interest with change. Web2 always gest
>installed in Twisted-HG (including all web2 fixes that are pending and
>that I'll post to twisted-web list shortly).

Sorry, you don't get to dictate the course of development of projects you don't even usefully contribute to.  twisted.web2 is unstable and will continue to change incompatibly until at least the _obvious_ shortcomings have been addressed.

Jean-Paul



From exarkun at divmod.com  Wed May 17 09:16:06 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 11:16:06 -0400
Subject: [Twisted-Python] Question about PB and multicast
In-Reply-To: <op.s9o6jm1ny3d107@localhost.localdomain>
Message-ID: <20060517151606.28682.1215678633.divmod.quotient.1844@ohm>

On Wed, 17 May 2006 23:32:00 +1000, Eric Mangold <teratorn at twistedmatrix.com> wrote:
>On Wed, 17 May 2006 21:57:39 +1000, Chaz. <eprparadocs at gmail.com> wrote:
>>I am building an application that has tens of thousands of clients.
>>There are times when I need to talk to quite a few of the clients using 
>>PB.
>>
>>When I have to talk to a single (or a few) clients via PB I do the
>>normal thing - issue multiple calls. In the cases where I have to talk
>>to quite a few clients I had thought of changing the object I am sending
>>to include the names of the machines I am interested in talking to. I
>>would then send it via multicast using PB. I know this would require
>>some changes on the PB side, but I am wondering if anyone sees a problem
>>doing this?
>>
>>Peace,
>>Chaz.
>
>PB connections were only ever designed to operate between two peers. It's 
>designed to run over a reliable stream protocol, e.g. TCP.

Actually, PB's initial design did include provisions for operation over
UDP.  However, Twisted does not include any implementation of those parts
of PB, so this is perhaps a useless correction. ;)

Jean-Paul



From glyph at divmod.com  Wed May 17 09:30:14 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 11:30:14 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060517143156.GW21766@opteron.random>
Message-ID: <20060517153014.28682.849255619.divmod.quotient.1848@ohm>

On Wed, 17 May 2006 16:31:56 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>I noticed processEnded is called by threads.

As exarkun noted in the ticket, which is where Andrea should have responded in the first place:

    http://twistedmatrix.com/trac/ticket/1667

Andrea don't understand the purpose of that code (he's effectively reading it backwards) and disabling it will make the situation with processes and threads worse, not better.  Please don't apply this patch (or any of his patches) to your own copies of Twisted.

Also, please don't follow his example and re-post your own patches which have been rejected because they are buggy to the mailing list.

I hope that everyone on this list has the good sense not to listen to Mr. Arcangeli's creative interpretations of reality by now, but in case not, this line should give you a clue:

> (there were bugs but I've fixed them all)

This from a man who believes that unit tests are a "waste of time".

It may indeed be possible to use some random snapshot of web2 in a production setting; however, you have a virtual guarantee from the entire Twisted team that the web2 API _will_ change incompatibly before it's released, and that we will _not_ support any use of it before then.  I am personally hoping that we can make some major incompatible changes, (as I have said before) specifically the substitution of something else for the deferred 'streams' API.  I'm not a web2 maintainer so I might be talked out of that *specific* change, but it's just an example.

(Keep in mind that the only person willing to support it does not have time to write unit tests for his own code, or read responses to tickets he has filed explaining why his understanding is incorrect.)

If you want to accelerate the process of web2 actually being maintained and supported as a stable API, we're always interested in hearing about donations of resources or time.  Divmod, in particular, would like to have some excuse to help web2 get finished so we can port Nevow over and stop supporting web1, but we don't have any resources of our own to spare at the moment.



From manlio_perillo at libero.it  Wed May 17 09:55:38 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 13:55:38 -0200
Subject: [Twisted-Python] trial and setUpClass
Message-ID: <446B477A.8000904@libero.it>

Hi.

Just to be sure:
setUpClass will be called *once* at the beginning of the TestCase?


Thanks  Manlio Perillo



From manlio_perillo at libero.it  Wed May 17 09:57:52 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 13:57:52 -0200
Subject: [Twisted-Python] lore
Message-ID: <446B4800.9020500@libero.it>

Is Lore still the official tool for documentation?

I've noted that web2 uses reStructuredText.

And what about API generation from docstrings?
What tool it is used? epydoc?



Thanks and regards  Manlio Perillo



From luc.stepniewski at adelux.fr  Wed May 17 09:56:24 2006
From: luc.stepniewski at adelux.fr (Luc Stepniewski)
Date: Wed, 17 May 2006 17:56:24 +0200
Subject: [Twisted-Python] How to disconnect a client,
	when you only have an instance of pb.PBClientFactory ?
Message-ID: <200605171756.24534.luc.stepniewski@adelux.fr>

I'm still trying to kill a hung PB client connection to a server. I noticed 
the timeout parameter in reactor.connectTCP() is not what I what, as it is 
only used once the connection is established (PB handshake).
I'm trying to kill a connection that didn't manage to make the PB handshake 
(for example when instead of having a PB server, you have a server that 
replies to TCP but not to PB, like a netcat program).

So my idea is to launch a callLater that, if the connection is still present 
after 5 seconds (the callLater hasn't been cancelled), will close the client 
connection. The problem is that I just have an instance of 
pb.PBClientFactory, and I cannot find in the forest of methods which one I 
could use to cut that connection (if that's possible).

I attached a small test file, if my explanation was really clear :-)

Thanks for your help,
Luc
-------------- next part --------------
A non-text attachment was scrubbed...
Name: killit.py
Type: application/x-python
Size: 2118 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060517/c18b7c35/attachment-0002.bin>

From glyph at divmod.com  Wed May 17 10:42:13 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 12:42:13 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
Message-ID: <20060517164214.28682.813570504.divmod.quotient.1866@ohm>



On Wed, 17 May 2006 13:57:52 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Is Lore still the official tool for documentation?

Yes.

>I've noted that web2 uses reStructuredText.

Yes.  An experiment, and a failed one.  The goal was originally to generate Lore from the ReST; I hope someone will volunteer to translate it to the official format so that it can be included in the PDF with the rest of the documentation.

>And what about API generation from docstrings?
>What tool it is used? epydoc?

Pydoctor.  My previous proposal to include pydoctor in lore was met ... coolly, to put it diplomatically ;-).



From exarkun at divmod.com  Wed May 17 10:43:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 12:43:16 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
Message-ID: <20060517164316.28682.247618772.divmod.quotient.1868@ohm>

On Wed, 17 May 2006 13:57:52 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Is Lore still the official tool for documentation?

Yes.

>
>I've noted that web2 uses reStructuredText.

David Reid is working on converting it to lore.

>
>And what about API generation from docstrings?
>What tool it is used? epydoc?

Michael Hudson wrote an epydoc replacement called pydoctor.  It parses the epytext markup in docstrings and generates the API docs now on the website.

Jean-Paul



From foom at fuhm.net  Wed May 17 10:48:33 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 17 May 2006 12:48:33 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <446B4800.9020500@libero.it>
References: <446B4800.9020500@libero.it>
Message-ID: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>


On May 17, 2006, at 11:57 AM, Manlio Perillo wrote:

> Is Lore still the official tool for documentation?
>
Yes.

> I've noted that web2 uses reStructuredText.
>

I did that because I hate lore, but everyone else seems to dislike  
that I did so, and plans to convert those docs back to lore format.  
I'd rather that ReST became the recommended doc format, instead of  
converting those back to lore, but have no free time to try to push  
that viewpoint.

> And what about API generation from docstrings?
> What tool it is used? epydoc?

No, pydoctor. epydoc doesn't work.

James




From glyph at divmod.com  Wed May 17 11:01:55 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Wed, 17 May 2006 13:01:55 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
Message-ID: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>



On Wed, 17 May 2006 12:48:33 -0400, James Y Knight <foom at fuhm.net> wrote:

>On May 17, 2006, at 11:57 AM, Manlio Perillo wrote:

>>I've noted that web2 uses reStructuredText.

>I did that because I hate lore, but everyone else seems to dislike  that I 
>did so, and plans to convert those docs back to lore format.  I'd rather 
>that ReST became the recommended doc format, instead of  converting those 
>back to lore, but have no free time to try to push  that viewpoint.

FWIW, I really wouldn't be opposed to ReST as a _format_, as long as it fit into the rest of the toolchain.  If anyone else shares james' dislike of extremely limited HTML as an input format and user interface[1] to the documentation system, writing an input plugin for lore to recognize it would be a good first step.


[1]: I can see why you might.  While I personally don't mind typing angle brackets (it's a soothing distraction from all that thinking), Lore's input format was in part a bet that Mozilla Composer would be reasonable and ubiquitous for end-users in a year or two... three years ago.  Remember Mozilla?  Hee.



From manlio_perillo at libero.it  Wed May 17 11:16:12 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 15:16:12 -0200
Subject: [Twisted-Python] lore
In-Reply-To: <BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
References: <446B4800.9020500@libero.it>
	<BBF51656-A3DA-44B3-955E-A673DF683779@fuhm.net>
Message-ID: <446B5A5C.8040709@libero.it>

James Y Knight ha scritto:
> [...]
>
>> I've noted that web2 uses reStructuredText.
>>
> 
> I did that because I hate lore, 

Lore is a good thing, but writing XHTML documents can be a nuisance...

> but everyone else seems to dislike that
> I did so, and plans to convert those docs back to lore format. I'd
> rather that ReST became the recommended doc format, instead of
> converting those back to lore, but have no free time to try to push that
> viewpoint.
> 

What are the problems encountered with reStructuredText?

>> And what about API generation from docstrings?
>> What tool it is used? epydoc?
> 
> No, pydoctor. epydoc doesn't work.
> 

Thanks.
The "formats" used are the same, right?


I'm asking this because I'm writing a replacement for pgasync.
It will be a fully featured client, with an interface like libpq (where
this make sense, of course).

I'm tring to follow the "twisted way" [1].
I've added unit tests and now I would like to write some documentation.


[1] because I think such a thing should be added in twisted.enterprise



Regards  Manlio Perillo



From eprparadocs at gmail.com  Wed May 17 12:00:01 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 17 May 2006 14:00:01 -0400
Subject: [Twisted-Python] Multicast Server Example....
In-Reply-To: <200605171756.24534.luc.stepniewski@adelux.fr>
References: <200605171756.24534.luc.stepniewski@adelux.fr>
Message-ID: <446B64A1.4000309@gmail.com>

I have been looking over the Multicast server example in the
documentation (pages 92/93). In both the server and the client there the
line:

from twisted.application.internet import MulticastServer

but I don't see any need for it. Am I missing something here?

Peace,
Chuck Wegrzyn




From manlio_perillo at libero.it  Wed May 17 13:00:29 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Wed, 17 May 2006 17:00:29 -0200
Subject: [Twisted-Python] how to "close" a TLS connection?
Message-ID: <446B72CD.2080106@libero.it>

Hi.

I'm doing some unit test with TLS but I got:

twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!
reactor left in unclean state, the following Selectables were left over:
 <<class 'twisted.internet.tcp.TLSConnection'> to ('localhost', 5432) at
f0e590>


All is ok if I do not use TLS (I simply close the connection).

What's the problem?


Thanks  Manlio Perillo



From exarkun at divmod.com  Wed May 17 14:03:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 17 May 2006 16:03:17 -0400
Subject: [Twisted-Python] how to "close" a TLS connection?
In-Reply-To: <446B72CD.2080106@libero.it>
Message-ID: <20060517200317.28682.1960707075.divmod.quotient.1886@ohm>

On Wed, 17 May 2006 17:00:29 -0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>Hi.
>
>I'm doing some unit test with TLS but I got:
>
>twisted.trial.util.DirtyReactorError: THIS WILL BECOME AN ERROR SOON!
>reactor left in unclean state, the following Selectables were left over:
> <<class 'twisted.internet.tcp.TLSConnection'> to ('localhost', 5432) at
>f0e590>
>
>
>All is ok if I do not use TLS (I simply close the connection).
>
>What's the problem?
>

TLS close adds a layer of back and forth traffic on top of the existing TCP close handshake.  Your test probably assumes that loseConnection() will drop the connection within a certain number of round-trips, but the added TLS negotiation pushes the actual shutdown over that threshhold, so the connection is still around when trial gets around to looking for such things.

You should add a Deferred which is fired by the protocol's connectionLost method or the factory's clientConnectionLost method, and make sure your test doesn't end until that Deferred fires.

Jean-Paul



From foom at fuhm.net  Wed May 17 15:42:12 2006
From: foom at fuhm.net (James Y Knight)
Date: Wed, 17 May 2006 17:42:12 -0400
Subject: [Twisted-Python] lore
In-Reply-To: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
Message-ID: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>

On May 17, 2006, at 1:01 PM, glyph at divmod.com wrote:
> FWIW, I really wouldn't be opposed to ReST as a _format_, as long  
> as it fit into the rest of the toolchain.  If anyone else shares  
> james' dislike of extremely limited HTML as an input format and  
> user interface[1] to the documentation system, writing an input  
> plugin for lore to recognize it would be a good first step.

JP/Exarkun is against ReST as an input format for the documentation  
system. Writing an input plugin for lore to recognize it isn't a good  
first step, getting agreement that writing such a plugin would be  
Good is a good first step. From http://twistedmatrix.com/trac/ticket/ 
1515:
> All documentation for all Twisted projects should use lore. There  
> should only be one source format for documentation: even though we  
> could write a ReST input driver, doing so would defeat a large  
> portion of the purpose of lore, which is to make it easy to write  
> and maintain documentation (requiring everyone to learn lore xhtml  
> and ReST is harder than requiring everyone to learn lore xhtml).
I disagree with that conclusion, but have given up arguing the point.  
If there are others who support my view, now would be a good time to  
speak up. You of course get extra bonus points if you've actually  
contributed to documentation in twisted.

James





From dreid at dreid.org  Wed May 17 16:06:33 2006
From: dreid at dreid.org (David Reid)
Date: Wed, 17 May 2006 15:06:33 -0700
Subject: [Twisted-Python] lore
In-Reply-To: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
Message-ID: <446B9E69.2000604@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

James Y Knight wrote:
> JP/Exarkun is against ReST as an input format for the documentation
> system. Writing an input plugin for lore to recognize it isn't a good
> first step, getting agreement that writing such a plugin would be Good
> is a good first step. From http://twistedmatrix.com/trac/ticket/1515:
>> All documentation for all Twisted projects should use lore. There
>> should only be one source format for documentation: even though we
>> could write a ReST input driver, doing so would defeat a large portion
>> of the purpose of lore, which is to make it easy to write and maintain
>> documentation (requiring everyone to learn lore xhtml and ReST is
>> harder than requiring everyone to learn lore xhtml).

If I'm not lazy this input driver is going to get written to convert the
existing web2 docs anyway.  I think he's mainly saying he's against it
for the purposes of allowing multiple documentation formats in the
source tree.  I don't think he'd find it terribly objectionable as a
"feature" of lore.  Atleast not enough to finding the energy to prevent
it from happening.

> I disagree with that conclusion, but have given up arguing the point. If
> there are others who support my view, now would be a good time to speak
> up. You of course get extra bonus points if you've actually contributed
> to documentation in twisted.

I just don't see any clear benefit ReST has over lore.  Especially not
with the amount of existing documentation that is in lore.  If anyone
would like to point out the benefit I'll gladly listen.

- -David

- --
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (Darwin)

iD8DBQFEa55orsrO6aeULcgRAilhAJ9s8uA8XuIRrRO/3jMA3s9keUH9JwCgoySY
ZTcN7w4Rf2EoF2RKoPajVyI=
=LpZH
-----END PGP SIGNATURE-----



From jml at mumak.net  Wed May 17 18:04:42 2006
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 18 May 2006 10:04:42 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446B477A.8000904@libero.it>
References: <446B477A.8000904@libero.it>
Message-ID: <d06a5cd30605171704i1fe4a20br4b1bc9fa35c17311@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Hi.
>
> Just to be sure:
> setUpClass will be called *once* at the beginning of the TestCase?
>

Yes.



From manlio_perillo at libero.it  Thu May 18 01:11:05 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 18 May 2006 05:11:05 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446B477A.8000904@libero.it>
References: <446B477A.8000904@libero.it>
Message-ID: <446C1E09.5050203@libero.it>

Manlio Perillo ha scritto:
> Hi.
> 
> Just to be sure:
> setUpClass will be called *once* at the beginning of the TestCase?
> 

Another question: there is a supported way to execute code before *all*
TestCases run?


Now I simply execute a synchronous function before defining test cases.


Thanks and regards  Manlio Perillo



From jml at mumak.net  Thu May 18 01:29:00 2006
From: jml at mumak.net (Jonathan Lange)
Date: Thu, 18 May 2006 17:29:00 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446C1E09.5050203@libero.it>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
Message-ID: <d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Manlio Perillo ha scritto:
> > Hi.
> >
> > Just to be sure:
> > setUpClass will be called *once* at the beginning of the TestCase?
> >
>
> Another question: there is a supported way to execute code before *all*
> TestCases run?
>
>
> Now I simply execute a synchronous function before defining test cases.
>

No, there isn't.

What are you trying to do?

jml



From manlio_perillo at libero.it  Thu May 18 04:23:13 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 18 May 2006 08:23:13 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
Message-ID: <446C4B11.3090904@libero.it>

Jonathan Lange ha scritto:
> [...]
>> Another question: there is a supported way to execute code before *all*
>> TestCases run?
>>
>>
>> Now I simply execute a synchronous function before defining test cases.
>>
> 
> No, there isn't.
> 
> What are you trying to do?
> 


Create some tables and functions on a PostgreSQL database.


Regards  Manlio Perillo



From corydodt at twistedmatrix.com  Thu May 18 10:59:46 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 18 May 2006 09:59:46 -0700
Subject: [Twisted-Python] lore
In-Reply-To: <446B9E69.2000604@dreid.org>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
	<446B9E69.2000604@dreid.org>
Message-ID: <446CA802.903@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Well, I was a contributor to Lore in ages past and was one of the ones who
thought it was a great idea.  Now I'm in the other camp, and I actually have
been using reST for all kinds of documentation on my end.  It's just so much
more convenient to type.

I'm not opposed to saving my documents as HTML-like syntax, but I hate typing
angle brackets.  After trying out many different approaches, I have decided
that my primary requirement in a documentation system is that it be easy to
type in documentation.  That, and nothing else, keeps me updating my
documentation regularly.  That and nothing else would convince me to generate
more documentation where it's missing.

I might be dissuaded if I saw that there was excellent tool support for Lore
out there.  What tools do people use to write Lore documents? Nvu?  How do you
handle doing the special lore-specific markup like Python code snippets?

- From what I remember about Lore, it doesn't do anything reST can't do; more
than that, reST can be converted to Lore without a lot of work.  (Round-trip
should even be possible, if that was for some reason desirable.)  So the
bottom line is: It's all about editor preference.  I would happily use Nvu if
I knew that the output would be Lore without any extra fiddling.

C


David Reid wrote:
> James Y Knight wrote:
>>> JP/Exarkun is against ReST as an input format for the documentation
>>> system. Writing an input plugin for lore to recognize it isn't a good
>>> first step, getting agreement that writing such a plugin would be Good
>>> is a good first step. From http://twistedmatrix.com/trac/ticket/1515:
>>>> All documentation for all Twisted projects should use lore. There
>>>> should only be one source format for documentation: even though we
>>>> could write a ReST input driver, doing so would defeat a large portion
>>>> of the purpose of lore, which is to make it easy to write and maintain
>>>> documentation (requiring everyone to learn lore xhtml and ReST is
>>>> harder than requiring everyone to learn lore xhtml).
> 
> If I'm not lazy this input driver is going to get written to convert the
> existing web2 docs anyway.  I think he's mainly saying he's against it
> for the purposes of allowing multiple documentation formats in the
> source tree.  I don't think he'd find it terribly objectionable as a
> "feature" of lore.  Atleast not enough to finding the energy to prevent
> it from happening.
> 
>>> I disagree with that conclusion, but have given up arguing the point. If
>>> there are others who support my view, now would be a good time to speak
>>> up. You of course get extra bonus points if you've actually contributed
>>> to documentation in twisted.
> 
> I just don't see any clear benefit ReST has over lore.  Especially not
> with the amount of existing documentation that is in lore.  If anyone
> would like to point out the benefit I'll gladly listen.
> 
> -David
> 
> --
> "Usually the protocol is this: I appoint someone for a task,
> which they are not qualified to do.  Then, they have to fight
> a bear if they don't want to do it." -- Glyph Lefkowitz

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbKgC3A5SrXAiHQcRAhl/AJ91K/mScJvHmonGM+Cbqpa4S+9gMQCfVKXM
wVwd3pIrSD7uTBFyuJntwIo=
=r7+i
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Thu May 18 13:25:07 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Thu, 18 May 2006 21:25:07 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060517153014.28682.849255619.divmod.quotient.1848@ohm>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
Message-ID: <20060518192507.GL21766@opteron.random>

> Andrea don't understand the purpose of that code (he's effectively reading 
> it backwards) and disabling it will make the situation with processes and 
> threads worse, not better.  Please don't apply this patch (or any of his 
> patches) to your own copies of Twisted.

I didn't want to answer but I think I should to confirm that for this
single patch (2/4 posted to python-twisted) they're right: I misread the
code because defertothread(callback) means defer the callback to the
thread, but callfromthred _doesn't_ mean to call the callback from the
thread. callfromthread means to call the callback from the main event
loop instead, great API naming I would say.

But for all other patches I posted, they should be applied to
everybody's own twisted copy. Including the "no it isn't", since the bug
exists and needs fixing or I get exceptions.

If trac would have posted me updates via email I wouldn't have been
forced to resubmit here. I got zero feedback and I've better things to
do than to poll trac (I even tried to poll track but I couldn't find my
tickets anymore, probably because you closed them and I got no
notification by email). Perhaps I didn't include myself in some CC list
or whatever, but in all bugtracking software I used in my life so far, I
never needed to add myself to a CC list if I was the very submitter of
the report, perhaps trac is different I don't know, apologies for that
if that's the case.

Overall using twisted for my project was a mistake. One major core
design problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to
the poll syscall unless POLLIN/POLLOUT are set too. This means that if I
throttle the I/O I can't notice anymore when a disconnect happens. But
the severe core design issues it has would be fixable and they are a
minor problem compared to the behaviour of some elements of the
community that exists around it. I don't need to enter the details
myself, if doc/fun/Twisted.Quotes isn't enough, quoting emails like
these is more than enough:

	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013137.html
	http://www.mail-archive.com/twisted-web%40twistedmatrix.com/msg00352.html

(sadly there are many more)

The only bit for which I prefer to enter into the details (just in case
somebody didn't notice) is that the guy puts me words in my mouth that I
never said and that I never thought either.

Specifically I never said unittest are a waste of time, I only said that
I don't have time to write unittests and that lack of unittests should
not prevent valid bugfixes to be included and I think this is a very
reasonable development approach. We can argue about features or huge
changes, but I think valid bugfixes should not require unittests.

If somebody sends me a huge amount of unittests I will apply them
immediately. The more unittests the better! Exactly the opposite of
"unittests are a waste of time" that the guy claimed that I have said.
I even written "unittests are welcome" it in the CPUShare-Twisted
homepage, the last change in that page happened 2006-02-16, so quite a
few months ago.
	
	http://www.cpushare.com/twisted

	In the CPUShare-Twisted fork fixes and new features will be applied
	without formalities. Notably, unit-tests are welcome, but they're
	certainly not mandatory for inclusion of new features and bugfixes. If
	you've objectives to reach quickly and you don't want having to maintain
	your own version of Twisted, you may find this project useful to you.



From foom at fuhm.net  Thu May 18 14:02:24 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 18 May 2006 16:02:24 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <82FD739B-93F7-4951-8CA4-E5836543A946@fuhm.net>

On May 18, 2006, at 3:25 PM, Andrea Arcangeli wrote:
> If trac would have posted me updates via email I wouldn't have been
> forced to resubmit here. I got zero feedback and I've better things to
> do than to poll trac (I even tried to poll track but I couldn't  
> find my
> tickets anymore, probably because you closed them and I got no
> notification by email). Perhaps I didn't include myself in some CC  
> list
> or whatever, but in all bugtracking software I used in my life so  
> far, I
> never needed to add myself to a CC list if I was the very submitter of
> the report, perhaps trac is different I don't know, apologies for that
> if that's the case.

Yes! This is a major problem with our installation of trac.  
Submitters and commentators don't get any emails unless they manually  
add themselves to the CC list.

James




From glyph at divmod.com  Thu May 18 15:34:54 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 18 May 2006 17:34:54 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
Message-ID: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>



On Thu, 18 May 2006 21:25:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>> Andrea don't understand the purpose of that code (he's effectively reading
>> it backwards) and disabling it will make the situation with processes and
>> threads worse, not better.  Please don't apply this patch (or any of his
>> patches) to your own copies of Twisted.
>
>I didn't want to answer but I think I should to confirm that for this
>single patch (2/4 posted to python-twisted) they're right: I misread the
>code because defertothread(callback) means defer the callback to the
>thread, but callfromthred _doesn't_ mean to call the callback from the
>thread. callfromthread means to call the callback from the main event
>loop instead, great API naming I would say.

I understand that English isn't your first language, and I don't blame you for that, but you can find the documentation for these APIs here:

http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html

and I think the descriptions are easy enough to understand.

The API logic is this: If you have a function and you are running in the reactor, but you want to CALL that function IN a THREAD, you use callInThread.

If you are running in a thread already, and you want to CALL a function that uses Twisted APIs (such as the reactor) FROM that THREAD, you use callFromThread.

Perhaps "invokeArgumentInThreadpool" or "dispatchCallableToReactorForThreadSafety" would have been better names, but I already wear out my keyboards fast enough.

>But for all other patches I posted, they should be applied to
>everybody's own twisted copy. Including the "no it isn't", since the bug
>exists and needs fixing or I get exceptions.

Since you've already demonstrated that you don't bother to read the documentation, write tests, or even understand the difficulties that may or may not exist before you submit a patch and apply it to your branch, I don't doubt that tracebacks happen, but I doubt that they're the problem you have identified.

The reason we require unit tests is the same reason scientists require *reproducible* experiments.  If you don't submit a test that can easily produce the traceback you saw, how else would we know that some local misconfiguration on your system wasn't causing it.

>If trac would have posted me updates via email ...

o/` If I only had a brain o/` da dee da dee da da dum o/`

Trac isn't perfect, but despite some minor complaints everyone else is managing to use it.  Like Twisted, Trac is written in Python, and if you want it to send you email, you can submit plugins and suggest that we use them.  Also, you can learn how to click on a bookmark, or even update an RSS feed.  Here's a single convenient page you can poll for all your tickets - including those that have been closed - and it does have an "RSS" button at the bottom so you can monitor changes:

    http://twistedmatrix.com/trac/query?reporter=andrea

>Overall using twisted for my project was a mistake.

And yet, and yet, and yet...

>One major core
>design problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to
>the poll syscall unless POLLIN/POLLOUT are set too.

This is definitely a bug.  I wouldn't term it a "major core design problem", since I think it can be affected even without changing any external APIs.  Oddly enough, you submitted a bug in the tracker about it, which could have been found either with trac's search field or the above query.  In fact it's also the first hit for "POLLHUP POLLNVAL twisted" on google.  However, since both Trac and Google are far too much work for busy, important men like yourself, I've included a link here:

    http://twistedmatrix.com/trac/ticket/1662

A response has been posted within the last month, with a comment indicating that it will be fixed.

>This means that if I throttle the I/O I can't notice anymore when a disconnect happens.

The last paragraph of the ticket's description begins:

"Currently I don't strictly need this"

I doubt that we'd necessarily do anything that was important to you in particular, but *even you* have said that this isn't really that important.  It is hypocrisy of the worst order to bring it up in this discussion as a critical, severe problem that indicates the failure of the whole community.

>But the severe core design issues it has would be fixable and they are a
>minor problem compared to the behaviour of some elements of the
>community that exists around it. I don't need to enter the details
>myself, if doc/fun/Twisted.Quotes isn't enough, quoting emails like
>these is more than enough:

"I know you are but what am I!?!?"

You're the one who won't follow simple rules of politeness like "use the tracker" or "write unit tests if you require your patches be applied".

You're the one who throws around baseless insults and lies about other peoples' code.  Your factual errors about Nevow during the period when you were abandoning it were too numerous to even taxonomize -- when have I ever said anything nasty about CPUShare?

Even considering these abuses, we still haven't rejected your access to our resources, including our mailing list and our bugtracker.  In fact, as evidenced above, effort and thought is going into fixing issues that you've reported!

And yet, because somebody once told a fart joke on an IRC channel, you *still* have the gall to say that our "behavior", as a whole community, is too difficult for anyone to deal with.  Since explicit is better than implicit, why don't I just say this right out: you are a humorless, self-important, obnoxious jerk.  You need to seriously consider your own behavior before you start insulting others.

>Specifically I never said unittest are a waste of time

Ahem.  From http://twistedmatrix.com/pipermail/twisted-web/2006-January/002389.html

"""
>So I'm going to fork twisted into a private twisted-CPUShare branch for
>my own server use where I won't have to waste time to fix bugs
"""

At least as I understood it, "waste time" == "write unittests" in that context, since the whole point of this fork is that you didn't want to write tests to get bug-fixes applied.  You are correct that you didn't ever write, word for word, "unit tests are a waste of time" but numerous other things you said implied it.



From slamb at slamb.org  Thu May 18 16:01:02 2006
From: slamb at slamb.org (Scott Lamb)
Date: Thu, 18 May 2006 15:01:02 -0700
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
Message-ID: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>

On May 18, 2006, at 2:34 PM, glyph at divmod.com wrote:
> I understand that English isn't your first language, and I don't  
> blame you for that, but you can find the documentation for these  
> APIs here:
>
> http://twistedmatrix.com/documents/current/api/ 
> twisted.internet.interfaces.IReactorThreads.html
>
> and I think the descriptions are easy enough to understand.

Actually, English is my first language, and I'm confused every time I  
see those functions. It's probably too late to change the name, but  
might I suggest changing the first sentence of callFromThread's  
docstring from:

     Call a function from within another (i.e. non-reactor) thread.

to:

     Cause a function to be executed asynchronously on the reactor  
thread.

This is the language used by SwingUtilities.invokeLater(), which I've  
always found comparatively clear.

http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/ 
SwingUtilities.html#invokeLater(java.lang.Runnable)

Regards,
Scott

-- 
Scott Lamb <http://www.slamb.org/>





From jml at mumak.net  Thu May 18 16:41:47 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 08:41:47 +1000
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <446C4B11.3090904@libero.it>
References: <446B477A.8000904@libero.it> <446C1E09.5050203@libero.it>
	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>
	<446C4B11.3090904@libero.it>
Message-ID: <d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>

On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> Jonathan Lange ha scritto:
> > [...]
> >> Another question: there is a supported way to execute code before *all*
> >> TestCases run?
> >>
> >>
> >> Now I simply execute a synchronous function before defining test cases.
> >>
> >
> > No, there isn't.
> >
> > What are you trying to do?
> >
>
>
> Create some tables and functions on a PostgreSQL database.
>

In that case, here's what I'd do.  I'd create a couple of top-level
functions (maybe methods in a TestCase subclass -- who knows?), like
this:

def checkDB():
    # check the database is configured properly.
    # return False if it needs to be restored

def setUpDB():
    if not checkDB():
        # drop & create a bunch of tables

I'd then whack a call to setUpDB() in my setUp (_not_ setUpClass) for
every test case that needed to use the database.  That way, I'd know
that the data was always correct, and I wouldn't be reconfiguring the
database for every single test.

You could also refine the process so that setUpDB checks individual
tables rather than the whole of your schema.

Hope this helps,
jml



From andrea at cpushare.com  Thu May 18 17:42:40 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 01:42:40 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060518234240.GN21766@opteron.random>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
> 	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013137.html
> 	http://www.mail-archive.com/twisted-web%40twistedmatrix.com/msg00352.html
> 
> (sadly there are many more)

Within a few hours here one more that can be added to the list:

	http://twistedmatrix.com/pipermail/twisted-python/2006-May/013158.html

The guy is kind enough not to blame me for not speaking english as my
first native language, but yet he's trying to teach me english by saying
that unittests are a "waste of time" 

---quote---
This from a man who believes that unit tests are a "waste of time".
---quote---

means the same as "I won't have to waste time to fix bugs".

In my minimal english language understananding, it was clear that with
"wasted time to fix bugs" I meant "the time between fixing the bug and
deploying the bugfix in production (or to the userbase)". I never said,
believed, thought or meant that writing an unit test is a waste of time
at large, as proven by the CPUShare-Twisted homepage that explicitly
says for the last 3 months "unittest are welcome". Why should they be
welcome if they are "a waste of time"?

But then the fact the guy puts words in my mouth that I never said in
order to make me look like an idiot is after all a minor thing compared
to the rest he says.

But let's ingore the usual politcally correct behaviour I receive from
some element of this community and let's stick to technical facts:

1) callFromThread should be renamed callFromReactor (no need to make up
long names when it actually means callFromReactor)
2) verifying a bugfix correctness doesn't require unittests in most
cases, anybody with a basic CS knowledge perfectly knows that
no matter how much testing you do you can never be guaranteed that the
code is correct by just testing it. Infact if the test is buggy too, it
may generate false positives. The same way you _have_ verify any unit-test
without using yet another unittest (or you enter an infinite recursion),
you can also verify that the bugfix is correct in the first place. The
idea that without an unittest isn't possible to verify the correctness
of a bugfix is totally wrong. An unit-test is sure useful, but it
shouldn't be mandatory for quick bugfixes. And the time that it would
take to write a new unittest for a new bug, before deploying the fix in
production, is definitely "wasted".
3) when I posted the ticket (again I received no answer with that one
because of the trac hidden feature) about POLLHUP/ERR/NVAL core reactor
troubles, I thought it wasn't strictly needed. But that was a few weeks ago
if I remember well. In the last few weeks things changed and now it
looks strictly needed and worst of all to be fully reliable I would need
it in the client too, and on the client I still allow my users to use
the standard twisted from twistedmatrix.com. I will probably have to
workaround it with a timer but it's still not a desiderable solution
since I will have to rearm the poll syscall for a little way in
unblocking mode which is theoretically unsafe.
4) his belief that the core reactor limitation of point 3 "can be
affected even without changing any external APIs" (btw, I guess with his
native english he actually means "fixed" and not "affected") implies the
external API won't change but I can guarantee you that the semantics
will change in a not-backwards-compatible way. I think the users should
know if you're going to make not-backwards compatible semantical changes
in the core reactor without changing the external API (i.e.
transport.pauseProducing and friends) so they can check their apps won't
break.
5) about the technical things that I said about nevow, axiom and epsilon
previously, I'm sorry if the divmod guys didn't like it, but if they're
not true, then they should not get angry and insult me, but they should
post benchmarks that invalidate my claims. They are very welcome to
start to invalidate my bold claim that for rendering web2+cheetah is an
order of magnitude faster (and in turn more scalable) than web+nevow.
6) about the performance of web2 vs apache/cherrypy (note: this is
different from point 5, this is _not_ web2+cheetah vs web+nevow), there
is no reason to worry about the channel of web2. No reason to change the
API. I already told foom and drier privately. The benchmark I've seen
posted to the list had a tiny size per page. Unfortunately the majority
of the cpu time is spent in the twisted core (i.e. basically the
reactor). I measured it. There's little or nothing you can do inside
web2 to speedup the per-connection overhead. Infact if you increase the
size of the page, the connections per second remain the same, only the
bandwidth increases. So effectively web2 has no immediate performance
issues because most pages are larger than a dozen bytes. When you do the
test on a normal page size, things are ok. Most of the overhead happens
in the handling of the socket outside web2, and it's very similar for
twisted.web and it's a fixed cost outside web2. Again I will be totally
happy to be proven wrong and see that the divmod folks can make web2 go
much faster with a tiny page size with a change of API inside
twisted/web2 directory and without touching the reactor code.



From corydodt at twistedmatrix.com  Thu May 18 17:57:39 2006
From: corydodt at twistedmatrix.com (Cory Dodt)
Date: Thu, 18 May 2006 16:57:39 -0700
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
Message-ID: <446D09F3.1050004@twistedmatrix.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Indeed.  <http://twistedmatrix.com/trac/ticket/1726>!

Scott Lamb wrote:
> Actually, English is my first language, and I'm confused every time I
> see those functions. It's probably too late to change the name, but
> might I suggest changing the first sentence of callFromThread's
> docstring from:
> 
>     Call a function from within another (i.e. non-reactor) thread.
> 
> to:
> 
>     Cause a function to be executed asynchronously on the reactor thread.
> 
> This is the language used by SwingUtilities.invokeLater(), which I've
> always found comparatively clear.
> 
> http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable)
> 
> 
> Regards,
> Scott
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbQnz3A5SrXAiHQcRAnbCAKCOvvp/SDJjEoHuxCjHjPNq3aZfigCffFbA
yMD3vh9kAg7Y8cLOWqrG2CI=
=ngPU
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Thu May 18 18:04:56 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 02:04:56 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <20060519000456.GO21766@opteron.random>

By the way, if having a sense of humor would mean enjoying reading
doc/fun/Twisted.Quotes then I'd be proud to be humorless(tm).

http://twistedmatrix.com/trac/browser/trunk/doc/fun/Twisted.Quotes?rev=16852#L38



From mcmillen at cs.cmu.edu  Thu May 18 18:08:56 2006
From: mcmillen at cs.cmu.edu (Colin McMillen)
Date: Thu, 18 May 2006 20:08:56 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <446D0C98.7060404@cs.cmu.edu>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> And the time that it would
> take to write a new unittest for a new bug, before deploying the fix in
> production, is definitely "wasted".

I'm not a Twisted dev, but I do manage a couple open-source projects,
and would like to point out:

Participation in the open-source development process requires good
communication skills.  A unit test is an excellent way of communicating
to the main developers that you've thought the problem through clearly
and showed that your solution is a worthy one.  Open-source developers
are busy folk, so anything you can do to take their lives easier (even
if you think their rules are foolish) will speed up the inclusion of
your patch in the long run.  Remember that the majority of Twisted
developers are *volunteers*.

I highly doubt that the time it would take for you to write a unit test
would significantly impact *anyone* else who is using Twisted in production.

- - Colin

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFEbQyYXZxSS+Knk6ARAjB4AJ9VGy7lAb2v7qCnYz+JA4TNkXsDjACfX8pl
FRmxo5loTbl7gNmP788vKTk=
=bBaD
-----END PGP SIGNATURE-----



From johann.borck at densedata.com  Thu May 18 18:46:54 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 May 2006 02:46:54 +0200
Subject: [Twisted-Python] Re: callFromThread [was Hilarious dream-logic]
In-Reply-To: <39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
References: <20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<39C3A301-F059-4E44-8655-C1489401FF4E@slamb.org>
Message-ID: <446D157E.6070806@densedata.com>

Scott Lamb wrote:

> On May 18, 2006, at 2:34 PM, glyph at divmod.com wrote:
>
>> I understand that English isn't your first language, and I don't 
>> blame you for that, but you can find the documentation for these 
>> APIs here:
>>
>> http://twistedmatrix.com/documents/current/api/
>> twisted.internet.interfaces.IReactorThreads.html
>>
>> and I think the descriptions are easy enough to understand.
>
>
> Actually, English is my first language, and I'm confused every time I 
> see those functions...
>
I'm not a native speaker, but given twisteds  concurrency model, how
could one assume reactor.callFromThread gets executed anywhere but in
the reactor? Nothing else makes sense, or put as a question, what else
does?  You call something  f r o m  a  thread, using a member-function
of the one and only reactor. The only way to get that wrong is to think
of the thread in callFromThread as the reactor-thread. The main loop of
an asynchronous app is way too special to name it just thread, thatswhy
its name is reactor, so the other way round it might be
callFrom/InReactor, which imo would make it by far less obvious that
this is an interface to threads.

Johann






From daedalus at eigenmagic.com  Thu May 18 18:41:35 2006
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 19 May 2006 10:41:35 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518234240.GN21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
Message-ID: <1147999295.5461.37.camel@localhost.localdomain>

On Fri, 2006-05-19 at 01:42 +0200, Andrea Arcangeli wrote:

[snip. Not overly interested in the flamewar.]

> 2) verifying a bugfix correctness doesn't require unittests in most
> cases, anybody with a basic CS knowledge perfectly knows that
> no matter how much testing you do you can never be guaranteed that the
> code is correct by just testing it. Infact if the test is buggy too, it
> may generate false positives. The same way you _have_ verify any unit-test
> without using yet another unittest (or you enter an infinite recursion),
> you can also verify that the bugfix is correct in the first place. The
> idea that without an unittest isn't possible to verify the correctness
> of a bugfix is totally wrong. An unit-test is sure useful, but it
> shouldn't be mandatory for quick bugfixes. And the time that it would
> take to write a new unittest for a new bug, before deploying the fix in
> production, is definitely "wasted".

I don't believe you understand the purpose of unit testing. The approach
you appear to be advocating leads to unmaintainable, buggy code. The
unit test is developed to verify that the bug you believe exists does,
in fact, exist. Buggy code will cause the test to fail, while correct
code will cause the test to pass. If the behaviour you observe is
actually caused by something else, your test will pass, but the
behaviour will stay the same.

In this way, you can correctly identify the cause of the problem. Then
you can develop a patch. Importantly, once you have developed a patch,
you can verify that it does, in fact, fix the problem. If the code
passes your new unit test after you apply your patch, the patch is
correct. If the test still fails, your patch doesn't, in fact, fix the
problem. 

Additionally, when other changes are made in the future, the new unit
test can be used to verify that those changes (like your patch) don't
break existing code, ie: regression testing. I'm personally a big fan of
this feature of test suites.

Incidentally, those with slightly more CS knowledge know that it is
possible, though by no means easy, to build a system that is provably
correct. An investigation of the Z specification language may prove
enlightening. I think you mean that a test suite proves that the system
passes all the tests, not that it is bug free.

> 5) about the technical things that I said about nevow, axiom and epsilon
> previously, I'm sorry if the divmod guys didn't like it, but if they're
> not true, then they should not get angry and insult me, but they should
> post benchmarks that invalidate my claims. They are very welcome to
> start to invalidate my bold claim that for rendering web2+cheetah is an
> order of magnitude faster (and in turn more scalable) than web+nevow.

I think you have this backwards: those who make bold claims are the ones
with the burden of proof. Simply claiming that something is so does not
make it so. If you have benchmarks that demonstrate your claim, and
importantly, the method used to generate them, then by all means share
them with others. If your claims are true, this information will help in
fixing the problem. Fixing these bugs is what we all want, after all.

-- 
Justin Warren <daedalus at eigenmagic.com>




From terry at jon.es  Thu May 18 19:15:40 2006
From: terry at jon.es (Terry Jones)
Date: Fri, 19 May 2006 03:15:40 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: Your message at 17:34:54 on Thursday, 18 May 2006
References: <20060518192507.GL21766@opteron.random>
	<20060518213454.28682.834611068.divmod.quotient.2411@ohm>
Message-ID: <17517.7228.481164.207664@terry.jones.tc>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> On Thu, 18 May 2006 21:25:07 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:

>> Overall using twisted for my project was a mistake.
glyph> And yet, and yet, and yet...

Right. That's the part that I find pretty odd. Andrea says that Twisted was
a mistake for him, and that it has one severe/major core design problem:

>>Overall using twisted for my project was a mistake. One major core design
>>problem it has is that it can't pass POLLERR|POLLHUP|POLLNVAL to the poll
>>syscall unless POLLIN/POLLOUT are set too. This means that if I throttle
>>the I/O I can't notice anymore when a disconnect happens. But the severe
>>core design issues it has

But, apparently, Twisted isn't that bad after all. It still seems like it's
worth using. In fact, it's SO good why not FORK THE CODE just so we can
quickly apply a few patches and keep using it?

On top of generally being a pest, not being willing or making/having the
time to follow well-established project guidelines, etc., Andrea decides
not just to continue to use Twisted with a few of his own patches applied
(which would save plenty of time), while putting more energy into getting
his patches integrated, but, instead, to publicly announce a fork, make all
the effort to put it online, set up a mailing list, etc.  That all seems
quite deliberately anti-social and deliberately disruptive and destructive,
rather than constructive. Meanwhile I read that "CPUShare-Twisted will try
to avoid duplication" - why yes, that's an excellent (i.e. belated and
hypocritical) aim for a _forked_ project. It seems that just a little more
effort (and a whole lot less than forking, publicizing, putting it online,
running servers, svn, etc) could have avoided a hell of a lot more
duplication.

On top of this nastiness, repeatedly posting URLs of chat room discussion
between a bunch of developers is pretty silly, and, again, smacks of a
deliberately destructive attitude to a project which you are nevertheless
happy to run off with in a fork. It's not as though the Twisted developers
(of which I am not one) are trying to hide their IRC conversation, is it?
In this day and age it's nice to see some people playing around, even
swearing (oh the shock, the horror, the scandal), and nice to see them even
unashamedly include it in their distribution.

The most fruitful part of this thread, and what I think really makes it
worth otherwise-productive developers spending their time replying, is that
it's nice to see the reaction to Andrea's postings. As someone considering
using Twisted, I find it interesting and encouraging to read this thread -
it gives me increased confidence in Twisted, the people behind it, and the
project in general. So while the thread is a waste for some, there is real
value for others.

My impression is the following: Andrea, having not followed project
guidelines and rules because he doesn't have the time, having not been
treated like a coding God for whom others will naturally rush to do the
mundane tasks in order to receive his patches, and being unwilling to go
the extra few yards to get his patches (eventually) incorporated, is now
using his formerly precious time to go out of his way to undermine the
project.

Terry



From andrew-twisted at puzzling.org  Thu May 18 19:47:54 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 11:47:54 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060519014754.GH2204@steerpike.home.puzzling.org>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
[...]
> 
> Specifically I never said unittest are a waste of time, I only said that
> I don't have time to write unittests and that lack of unittests should
> not prevent valid bugfixes to be included and I think this is a very
> reasonable development approach. We can argue about features or huge
> changes, but I think valid bugfixes should not require unittests.

We, the people that have to *maintain* Twisted, think valid bugfixes require
unittests.  Our experience is that without them, bugs are doomed to reoccur and
reoccur between releases as other bugs are "fixed" that we may as well not
pretend to have fixed it in the first place.

It's the same principle as commenting code and following cosmetic coding
standards about whitespace.  The presence of the test doesn't directly make the
software more correct -- you could delete it and the code would still work
exactly as it did with the test on the filesystem, and similarly ugly code and
uncommented code isn't necessarily buggy code.  But these things help
maintainers applying patches and developers doing new work keep it correct, and
avoid wasting their time wondering why an apparently innocuous change does
something unexpected.  And avoid wasting our time fixing the same bugs over and
over again.

This is why we are so strict about requiring tests with bug fixes.  You might
not have time to write the tests, but *we* don't have the time to deal with new
code without tests, even if it is apparently more correct.

Thus it is part of our coding standard now (although it hasn't been written down
anywhere I'm aware of, you have certainly been told it is on many occasions).
If you cannot follow the coding standards for a project, then don't be offended
if that project doesn't apply your patches.

-Andrew.




From andrea at cpushare.com  Thu May 18 21:04:23 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 05:04:23 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <1147999295.5461.37.camel@localhost.localdomain>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
Message-ID: <20060519030423.GP21766@opteron.random>

On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> break existing code, ie: regression testing. I'm personally a big fan of
> this feature of test suites.

I'm a big fun of test suites as well. I only disagree with wasting time
delaying the integration of a valid bugfix just because the unit test
doesn't exist yet. I absolutely never said unit tests are a waste of
time. For the last months I've always said that "unit tests" are
_welcome_ at the top of the cpushare-twisted webpage.

> Incidentally, those with slightly more CS knowledge know that it is
> possible, though by no means easy, to build a system that is provably
> correct. An investigation of the Z specification language may prove
> enlightening. I think you mean that a test suite proves that the system
> passes all the tests, not that it is bug free.

What I mean is that a test suite cannot prove the code is bug free. Nor
that any bugfix is correct. If nothing else because the test suite may
be buggy too. This is obvious.

Clearly a test suite is welcome and can only help, but its mandatory
requirement for any change to the code sounds way excessive.

I perfectly know about formal demonstrations being possible too (I spoke
about those matters for a long time last year in a completely different
context) but they're not unit-tests (certainly not the ones you see in
the twisted reposistory), so I didn't mention this to avoid further
confusion. I doubt it's feasible to demonstrate Twisted bug free
formally (to back my guess I remind you Alan Cox quote saying twisted is
a 6m unauditable weirdness, I guess he was partly joking though).

	http://article.gmane.org/gmane.linux.kernel/327172

My current worries are the troubles with poll, I worry about the lack of
epoll, I worry about scaling in SMP with one thread per cpu. Those are
the things that should be discussed instead of receiving emails from
people about lack of unit tests for fixes that can be trivially verified
by reading the code.

> make it so. If you have benchmarks that demonstrate your claim, and
> importantly, the method used to generate them, then by all means share
> them with others. If your claims are true, this information will help in
> fixing the problem. Fixing these bugs is what we all want, after all.

About the benchmarks to make an example I posted some benchmarks here:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002425.html

I used the klive homepage for it. You can reproduce yourself downloading
it (all GPL):

	http://klive.cpushare.com/downloads/

Older versions uses web+nevow, newer uses web2+Cheetah (I don't remember
exactly the time of the switch but it's easy to find with some diff).

However here the kind of the answers I got:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002428.html

So I didn't post more benchmarks, nor I tried to produce an official
benchmark that is easier to run than to install klive locally. Also
note, quite a lot of the time of klive is spent in the database. So it's
one of the worst possible benchmarks for web1+nevow vs web2+cheetah
since only little time is spent for the rendering. I measured much
higher html delivery speedups in other pages that weren't asking the db
such cpu intensive queries.

If there is interest I can produce an official benchmark (that sounds
much more useful than unit-tests for every bugfix). However I guess
we'll have to follow the above advice and do it on the cpushare-twisted
list. Also note, if you've a better place than cpushare-twisted for
things that may not be welcome here, that's fine with me. I made up this
cpushare-twisted things to fit my needs, only because I didn't find any
other alternate place.



From dreid at dreid.org  Thu May 18 21:45:40 2006
From: dreid at dreid.org (David Reid)
Date: Thu, 18 May 2006 20:45:40 -0700
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>	<20060518192507.GL21766@opteron.random>	<20060518234240.GN21766@opteron.random>	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <446D3F64.30805@dreid.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Andrea Arcangeli wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
>> break existing code, ie: regression testing. I'm personally a big fan of
>> this feature of test suites.
> 
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. 

It has been my experience, that if a bug is "fixed", and there wasn't a
unit test for the bug, then a unit test won't get written until someone
breaks it again and spends potentially many man hours tracking down the
the bug again.  Unit tests don't just test that a bug is "fixed" they
help to document the bug, to make it easier to fix when it is broken
again (and a bug without a test will resurface) or if the original bug
fix turns out to not be complete or entirely correct.  And if your unit
tests aren't more easily verifiably correct than your code is, you're
either not writing very complex code or, to paraphrase jml, your unit
tests aren't unit-y enough.

It is also very difficult to judge the correctness of the code (and
therefor the bug 'fix') if we can not reproduce the bug.  It really
isn't enough that we take your word for it that there is a bug.  It's
not that we don't trust you in particular (well ok, some of us are
indifferent and have no opinion high or low about your skills as a
programmer or CS student, (well mostly it's just me)) but humans make
mistakes.  In such a case, a unit test can quickly indicate that there
is a bug, or that the submitter of the unit test has made a mistake.
You seem to be under the impression that submitting a unit test with
your patch means they will both be applied simultaneously and that we'll
take the green [OK] from trial to indicate that everything is fine and
dandy.  I assure you this isn't the case, we actually will make sure the
bug exists before we fix it.

- -David

- --
"Usually the protocol is this: I appoint someone for a task,
which they are not qualified to do.  Then, they have to fight
a bear if they don't want to do it." -- Glyph Lefkowitz
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.2.2 (Darwin)

iD8DBQFEbT9krsrO6aeULcgRAp31AJ9Z12bQi9aUr2nV97Zqb8+TijSZvwCcCZhD
kT3p6umR6jK5Jy7/35q7etE=
=NBEJ
-----END PGP SIGNATURE-----



From andrea at cpushare.com  Thu May 18 22:18:18 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 06:18:18 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <17517.7228.481164.207664@terry.jones.tc>
References: <20060518192507.GL21766@opteron.random>
	<20060518213454.28682.834611068.divmod.quotient.2411@ohm>
	<17517.7228.481164.207664@terry.jones.tc>
Message-ID: <20060519041818.GQ21766@opteron.random>

On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:
> But, apparently, Twisted isn't that bad after all. It still seems like it's
> worth using. In fact, it's SO good why not FORK THE CODE just so we can
> quickly apply a few patches and keep using it?

I've dozen thousand lines written in twisted. Moving away from it would
require a large rewrite. Maintaining my fixes locally for now is a lower
effort than rewriting the whole thing.

> deliberately destructive attitude to a project which you are nevertheless
> happy to run off with in a fork. It's not as though the Twisted developers

Happy to run it isn't really accurate. Simpler to keep running it even
if unreliable against malicious clients is more accurate.

> My impression is the following: Andrea, having not followed project
> guidelines and rules because he doesn't have the time, having not been
> treated like a coding God for whom others will naturally rush to do the
> mundane tasks in order to receive his patches, and being unwilling to go
> the extra few yards to get his patches (eventually) incorporated, is now
> using his formerly precious time to go out of his way to undermine the
> project.

My impression is that most of my fixes I did over the last years were
getting merged for some time. As far as I can tell things derailed when
I didn't like the fact that epsilon was becoming a dependency for nevow.
I was nevow user at the time. You think it's good that next time there
is a twisted bug you've to upgrade epsilon instead of upgrading twisted
in the first place?  Upgrading twisted would fix the bug for _all_ apps
and not only the apps shipped by divmod.

When I noticed a combination of weirdness (to mention one more, the new
axiom api that cannot work with real DBMS in the async way because it
doesn't return deferreds) I tried to find a way out of nevow (also
motivated by the fact formless was declared obsolete and so I had to
rewrite part of the code anyway) to avoid depending on divmod decisions
on the future of nevow. Thankfully web2 was already usable (even if
quite buggy) and I found tons of advantages by moving to cheetah and the
result was between 2 to 10 times faster depending on the webpage. The
code was reduced as well. I should have done that change regardless of
epsilon and formless infact. But unfortunately there is a post that
explicitly says that twisted-web is not a mailing list to discuss
cheetah integrations:

	http://twistedmatrix.com/pipermail/twisted-web/2006-January/002371.html

So then I fail to see why twisted-web mailing list is on twistedmatrix
domain if only divmod projects like nevow should be discussed. Can you
provide a reasonable answer? I never asked cause I think I already knew
the answer.

While I acknowledge I wasn't the best bugfix submitter (and obviously
I'm no coding God either), I'm definitely not trying to undermine
twisted, quite the opposite I'd like twisted to evolve and integrated
with not-invented-here technologies, but I fail to see how it can evolve
and integrate with cheetah or/and django in this environment.

Note that Guido himself did an evaluation of the templating engines an
last time I read his blogs, he said he liked django most after comparing
it with Cheetah. So I don't think I deserve to be considered as an
heretic if I want to integration with other template engines (for
example cheetah would get an huge gain by learning to talk with
deferreds, I assume for django is similar). Cheetah for example could
handle deferreds transparently at zero runtime cost thanks to its
compilation stage (dunno about django).  It would be great to talk about
these things if only we were allowed. I created the cpushare-twisted
list as a place to talk about those things that seems not appropriate to
talk about here.

So long, but I hope this clarifies my impressions.



From andrea at cpushare.com  Thu May 18 22:26:10 2006
From: andrea at cpushare.com (Andrea Arcangeli)
Date: Fri, 19 May 2006 06:26:10 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519014754.GH2204@steerpike.home.puzzling.org>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060519014754.GH2204@steerpike.home.puzzling.org>
Message-ID: <20060519042610.GR21766@opteron.random>

On Fri, May 19, 2006 at 11:47:54AM +1000, Andrew Bennetts wrote:
> not have time to write the tests, but *we* don't have the time to deal with new
> code without tests, even if it is apparently more correct.

This is the bit I definitely disagree with.

> If you cannot follow the coding standards for a project, then don't be offended
> if that project doesn't apply your patches.

I'm certainly not offended by it, but then I can't agree with a coding
standard that I think is wrong.

The thing I definitely agree with, is that having the unit test is
certainly better than not having it, infact I'm very grateful to people
like you that write unit tests, you're doing a great job.



From daedalus at eigenmagic.com  Thu May 18 22:26:33 2006
From: daedalus at eigenmagic.com (Justin Warren)
Date: Fri, 19 May 2006 14:26:33 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <1148012793.5461.99.camel@localhost.localdomain>

On Fri, 2006-05-19 at 05:04 +0200, Andrea Arcangeli wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> > break existing code, ie: regression testing. I'm personally a big fan of
> > this feature of test suites.
> 
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. I absolutely never said unit tests are a waste of
> time. For the last months I've always said that "unit tests" are
> _welcome_ at the top of the cpushare-twisted webpage.

Righto. How do you know it's a valid bugfix without a test? Personally,
I know that I make mistakes from time to time, so I think it's handy to
have something that will independantly verify if I've made one or not.
Many a time I've thought I knew what was broken only to find out it was
something completely different.

The twisted folks appear to disagree with you about the necessity of
writing a unit test as part of the bugfix integration process. Since
it's their code, they get to make the rules.

> > Incidentally, those with slightly more CS knowledge know that it is
> > possible, though by no means easy, to build a system that is provably
> > correct. An investigation of the Z specification language may prove
> > enlightening. I think you mean that a test suite proves that the system
> > passes all the tests, not that it is bug free.
> 
> What I mean is that a test suite cannot prove the code is bug free. Nor
> that any bugfix is correct. If nothing else because the test suite may
> be buggy too. This is obvious.

Obvious to you and me, perhaps, but there may be others who read this to
whom it isn't so obvious. Hopefully they find this thread helpful.

> Clearly a test suite is welcome and can only help, but its mandatory
> requirement for any change to the code sounds way excessive.

I guess we'll just have to agree to disagree on this point. I support
the mandatory unit test requirement.

> I perfectly know about formal demonstrations being possible too (I spoke
> about those matters for a long time last year in a completely different
> context) but they're not unit-tests (certainly not the ones you see in
> the twisted reposistory), so I didn't mention this to avoid further
> confusion. I doubt it's feasible to demonstrate Twisted bug free
> formally (to back my guess I remind you Alan Cox quote saying twisted is
> a 6m unauditable weirdness, I guess he was partly joking though).

My apologies for starting a thread derail. I was simply responding to
your assertion that nothing can be proven to be bug free. Rather petty
of me in hindsight.

> My current worries are the troubles with poll, I worry about the lack of
> epoll, I worry about scaling in SMP with one thread per cpu. Those are
> the things that should be discussed instead of receiving emails from
> people about lack of unit tests for fixes that can be trivially verified
> by reading the code.

We disagree on the 'trivially verified by reading code' part. It is my
opinion that only trivially simple code can be correctly verified simply
by reading it, particularly by so fallible a human as myself. Perhaps
your code reading skills are far superior to my own. Unit tests help me
to understand other's code. I have enough trouble understanding my own
code six months after writing it.

As you suggest, perhaps now is the time to move on to discussing other
issues?

[snip benchmarking bits]

Interesting reading. My apologies to everyone else on the list for
contributing to the... clutter.

-- 
Justin Warren <daedalus at eigenmagic.com>




From andrew-twisted at puzzling.org  Thu May 18 23:26:05 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 15:26:05 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060518192507.GL21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
Message-ID: <20060519052605.GI2204@steerpike.home.puzzling.org>

On Thu, May 18, 2006 at 09:25:07PM +0200, Andrea Arcangeli wrote:
[..]
> 
> But for all other patches I posted, they should be applied to
> everybody's own twisted copy. Including the "no it isn't", since the bug
> exists and needs fixing or I get exceptions.

Would you be so kind as to include details of these exceptions in your bug
reports on trac next time?

Having some extra detail would help us understand the circumstances of the
apparent bug -- and help someone with some free time construct an automated test
to replicate it.

Also, I haven't seen anyone else report your bugs, and at least one of your bug
reports has turned out to be quite wrong, so the extra information would help us
to determine if the bug is really ours or perhaps a misunderstanding of yours of
how to use Twisted (which in turn might be due to a documentation bug...).

While I'm on the subject, it would have been good if you'd attached the patches
directly in the bug reports in the first place, rather than pasting links that
have since broken.  Aside from being robust against you breaking your links, it
follows the normal conventions the developers expect: i.e. that patches are in
the bug report, where they're easy to find and automatically mailed to
subscribers and whatnot.  It saves us time, which gives us more time to actually
fix things.

In short: help us help you.  A bug report consisting of a single sentence in the
summary and a link to a patch isn't trying very hard to communicate with us
about an issue you have presumably invested time in investigating and
understanding.  Why not share that research with us, so we don't have to
duplicate your effort?

(An example: http://twistedmatrix.com/trac/ticket/1661 is a poor bug report).

I find it odd that you have so much time to debate our development methods on
this mailing list, but apparently no time to try to communicate details about
your bugs or discuss them.  Seeing as you are so confident in telling us how we
should spend our time, let me return the favour: you should spend more time
explaining your bug reports.  I'll note that a clearly written test case can be
an adequate explanation...

By the way, you can easily find your bugs in trac here:
   http://twistedmatrix.com/trac/search?q=andrea&ticket=on

-Andrew.




From jml at mumak.net  Thu May 18 23:30:31 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 15:30:31 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060519030423.GP21766@opteron.random>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
Message-ID: <d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>

On 5/19/06, Andrea Arcangeli <andrea at cpushare.com> wrote:
> On Fri, May 19, 2006 at 10:41:35AM +1000, Justin Warren wrote:
> > break existing code, ie: regression testing. I'm personally a big fan of
> > this feature of test suites.
>
> I'm a big fun of test suites as well. I only disagree with wasting time
> delaying the integration of a valid bugfix just because the unit test
> doesn't exist yet. I absolutely never said unit tests are a waste of
> time. For the last months I've always said that "unit tests" are
> _welcome_ at the top of the cpushare-twisted webpage.
>
> > Incidentally, those with slightly more CS knowledge know that it is
> > possible, though by no means easy, to build a system that is provably
> > correct. An investigation of the Z specification language may prove
> > enlightening. I think you mean that a test suite proves that the system
> > passes all the tests, not that it is bug free.
>
> What I mean is that a test suite cannot prove the code is bug free. Nor
> that any bugfix is correct. If nothing else because the test suite may
> be buggy too. This is obvious.
>
> Clearly a test suite is welcome and can only help, but its mandatory
> requirement for any change to the code sounds way excessive.
>

Andrea,

Your main objection is that requiring unit tests for bug fixes is
excessive.  I think it would be fair to say that you believe that
following such a requirement means wasting time.

Many people have defended this requirement.  They have said that writing a test:
- ensures the bug stays fixed
- communicates important information about decisions in the code
- provides a clear [and fast -- jml] way of reproducing the bug
- confirms the existence of the bug

You raised a concern that unit tests do not prove the absence of bugs.
 You have also stated that unit tests are desirable, but not
necessary.  I would like to respond to these points.

First, although unit tests do not *prove* the absence of a bug, they
provide strong evidence for its absence.  When fixing code, there must
be some check that the fix is correct.  The check generally takes one
of four forms: informal induction from the code; manual
experimentation; automatic experimentation (i.e. unit tests) and
formal verification.  The first provides unacceptably weak evidence.
The fourth proves the matter, but is too difficult to attempt for most
bugs.  This leaves the second and the third.  I would consider either
acceptable for demonstrating a bug's absence.

Second, without unit tests the amount of work required to maintain
code increases over time, and so they are necessary.  Each of the
advantages listed above has a corresponding disadvantage: the bug will
probably appear again; decisions in code lie undocumented; bugs cannot
be easily reproduced and so cannot be easily determined as either
fixed or unfixed.  Each disadvantage costs time. There is a finite
supply of time and an arbitrarily large supply of bugs.

If you wish to argue against our requirement for unit tests, then you
must persuade us either that the evidence they provide is not strong
enough to provide the listed benefits, or that the work in writing
unit tests is significantly greater than the work of not writing unit
tests.

Regards,
jml



From andrew-twisted at puzzling.org  Thu May 18 23:52:25 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 15:52:25 +1000
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>
References: <20060517143156.GW21766@opteron.random>
	<20060517153014.28682.849255619.divmod.quotient.1848@ohm>
	<20060518192507.GL21766@opteron.random>
	<20060518234240.GN21766@opteron.random>
	<1147999295.5461.37.camel@localhost.localdomain>
	<20060519030423.GP21766@opteron.random>
	<d06a5cd30605182230x3c681417s95e305c497e87050@mail.gmail.com>
Message-ID: <20060519055225.GJ2204@steerpike.home.puzzling.org>

On Fri, May 19, 2006 at 03:30:31PM +1000, Jonathan Lange wrote:
[...]
> provide strong evidence for its absence.  When fixing code, there must
> be some check that the fix is correct.  The check generally takes one
> of four forms: informal induction from the code; manual

I think often a combination of checks are used: in particular, reading the code
and seeing that the fix "makes sense" in addition to an empiricial demonstration
of absence (exercising the fixed bug manually or by automated test) is very
common.  A fix is rarely accepted if it doesn't "make sense", even if there's an
automated test case that suggests it works.

[...]
> 
> If you wish to argue against our requirement for unit tests, then you
> must persuade us either that the evidence they provide is not strong
> enough to provide the listed benefits, or that the work in writing
> unit tests is significantly greater than the work of not writing unit
> tests.

I think the problem may be different perspectives.

For Andrea, he's apparently already manually verified that his patches solve the
problems he's seen, so that's good enough.  Ignoring for a moment the issue of
what it takes to get it merged into official Twisted, further effort is wasted.

For people maintaining Twisted, a once-off manual verification isn't enough, for
the reasons you give.

So for Andrea's fixes to make the leap from "good enough for him" to "good
enough to be merged into Twisted", they need more work: they need automated
tests.

-Andrew.




From jml at mumak.net  Fri May 19 01:12:19 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 17:12:19 +1000
Subject: [Twisted-Python] Twisted Sprint in Australia
In-Reply-To: <op.s9o9m80my3d107@localhost.localdomain>
References: <d06a5cd30604081942q3972c79apfde5efb6812da6a2@mail.gmail.com>
	<20060409041914.GA5338@sourdust.home.puzzling.org>
	<d06a5cd30604090009r58cc8a08xb2e576d6869a78b5@mail.gmail.com>
	<op.s9o9m80my3d107@localhost.localdomain>
Message-ID: <d06a5cd30605190012t3b77f4bat935c52ce0ded4879@mail.gmail.com>

On 5/18/06, Eric Mangold <teratorn at twistedmatrix.com> wrote:
> Cool. I should be able to make it. Will be staying in Sydney for the
> nights of June 3-6. I'm trying to sort out accomodations right now... is
> anyone staying at a hotel, or have other accomodations that could be
> shared?
>

It might also be a good idea to post accomodation thoughts on the wiki
page: http://www.twistedmatrix.com/wiki/SydneySprint

jml



From jml at mumak.net  Fri May 19 01:14:21 2006
From: jml at mumak.net (Jonathan Lange)
Date: Fri, 19 May 2006 17:14:21 +1000
Subject: [Twisted-Python] June Sprint
Message-ID: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>

Hello!

There's a sprint on June 3-4 in Sydney, Australia.  But you already knew that.

What you don't know is that now there is a wiki page for you to put
your name and ideas for the sprint!
Examine http://twistedmatrix.com/trac/wiki/SydneySprint

Look forward to seeing y'all there.

jml



From schneider at gl-systemhaus.de  Fri May 19 01:48:28 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Fri, 19 May 2006 09:48:28 +0200
Subject: [Twisted-Python] Binding a twisted application to only one interface
Message-ID: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>

Hi all,

I have written a service as shown below. Now, I'd like this service  
to only be available on one specific network interface but have been  
unable to find any documentation on how to achieve that.

Any hints or pointers would be very welcome.

chris

from twisted.application import service
from jobsservice import JobsService

from twisted.internet import reactor

class JobsService(internet.TCPServer):

     def __init__(self):
         internet.TCPServer.__init__(self, 8000, JobsFactory(self))

application = service.Application("Jobs")
serviceCollection = service.IServiceCollection(application)
jobsService = JobsService()
jobsService.setServiceParent(serviceCollection)




From nico at tekNico.net  Fri May 19 02:44:47 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Fri, 19 May 2006 10:44:47 +0200
Subject: [Twisted-Python] Re: Binding a twisted application to only one
	interface
In-Reply-To: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>
References: <0EEA4AEF-A061-42DB-B35F-C7F47AF5791D@gl-systemhaus.de>
Message-ID: <446D857F.3000202@tekNico.net>

Christian Schneider wrote:
> Hi all,
> 
> I have written a service as shown below. Now, I'd like this service to
> only be available on one specific network interface but have been unable
> to find any documentation on how to achieve that.

See this thread:

http://twistedmatrix.com/pipermail/twisted-python/2006-May/013092.html

-- 
Nicola Larosa - http://www.tekNico.net/

If you're in a job that feels safe, you are not going to get rich,
because if there is no danger there is almost certainly no leverage.
 -- Paul Graham, May 2004





From WTD008 at motorola.com  Fri May 19 03:38:52 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 10:38:52 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>

Hi,
 
I'm looking for a solution to make a server that handle many tcp
connections and where I can send different information to each one.
I read that twisted is maybe a good way to do this.
 
Can you confirm that it's a better way to learn twisted than to try with
Socket Server ?
And if maybe you have a sample to help me to understand the basic
thing... thks
 
 
Thanks a lot for your help,
 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060519/1a8ef473/attachment.html>

From WTD008 at motorola.com  Fri May 19 03:55:17 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 10:55:17 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>

I will maybe be give more information.
What I wanted to do for the moment is to begin, a server and two
clients.
 
Each client open a connection with the server and wait.
The server, send "client1" to the client 1 waiting a random time between
each sending
  and the same thing with the client 2.
 
The final aim is to send different information to each client. The
information will be given by a other processus via a pipe or something
like this.
 
Hope it's more clear,
 
Thomas  

________________________________

From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Deillon
Thomas-WTD008
Sent: 19 May 2006 10:39
To: twisted-python at twistedmatrix.com
Subject: [Twisted-Python] A tcp server that handles many connections


Hi,
 
I'm looking for a solution to make a server that handle many tcp
connections and where I can send different information to each one.
I read that twisted is maybe a good way to do this.
 
Can you confirm that it's a better way to learn twisted than to try with
Socket Server ?
And if maybe you have a sample to help me to understand the basic
thing... thks
 
 
Thanks a lot for your help,
 
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060519/68045592/attachment.html>

From maciejka at tiger.com.pl  Thu May 18 18:56:55 2006
From: maciejka at tiger.com.pl (Maciek Kaminski)
Date: Fri, 19 May 2006 02:56:55 +0200
Subject: [Twisted-Python] status of twisted flow
Message-ID: <446D17D7.9080302@tiger.com.pl>

What is the status of Twisted flow project? Project page 
(http://twistedmatrix.com/projects/flow/) states that it is unmaintained 
. Is it dead or alive?

Maciej Kaminski




From teratorn at twistedmatrix.com  Fri May 19 04:23:12 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Fri, 19 May 2006 20:23:12 +1000
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96A8@zuk35exm62.ds.mot.com>
Message-ID: <op.s9sm4y1ly3d107@localhost.localdomain>

On Fri, 19 May 2006 19:38:52 +1000, Deillon Thomas-WTD008  
<WTD008 at motorola.com> wrote:

> Hi,
> I'm looking for a solution to make a server that handle many tcp
> connections and where I can send different information to each one.
> I read that twisted is maybe a good way to do this.

Twisted could very well be the best choice, but then there aren't too many  
details to judge from here.

> Can you confirm that it's a better way to learn twisted than to try with
> Socket Server ?

It's almost surely better, yes.

> And if maybe you have a sample to help me to understand the basic
> thing... thks
> Thanks a lot for your help,
> Thomas

There are quite a few Developer Guides and code examples in the official  
documentation. Let use know if you have trouble finding the right ones.

-Eric





From johann.borck at densedata.com  Fri May 19 04:58:34 2006
From: johann.borck at densedata.com (Johann Borck)
Date: Fri, 19 May 2006 12:58:34 +0200
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
Message-ID: <446DA4DA.2030004@densedata.com>

Deillon Thomas-WTD008 wrote:

> I will maybe be give more information.
> What I wanted to do for the moment is to begin, a server and two clients.
>  
> Each client open a connection with the server and wait.
> The server, send "client1" to the client 1 waiting a random
> time between each sending
>   and the same thing with the client 2.
>  
> The final aim is to send different information to each client. The
> information will be given by a other processus via a pipe or something
> like this.
>
First of all, yes, twisted is what you're looking for,
Here the basics are explained,  it really helps a lot to read them
carefully, many questions you might and will have are explained along
with the underlying concepts of event-based/async programming, which are
important to understand to use twisted correctly:
http://twistedmatrix.com/projects/core/documentation/howto/index.html

you find examples here, and there are many in the download/checkout itself:
http://twistedmatrix.com/projects/core/documentation/examples/index.html

and if you're looking for "real world" apps using twisted... uups can't
find that page right now (does it still exist?) ahem, look at divmod.org :)

Johann



From andrew-twisted at puzzling.org  Fri May 19 07:07:32 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 19 May 2006 23:07:32 +1000
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <446DA4DA.2030004@densedata.com>
References: <11C836DCD6F62240A8AB85A1D7487905EE96CD@zuk35exm62.ds.mot.com>
	<446DA4DA.2030004@densedata.com>
Message-ID: <20060519130732.GL2204@steerpike.home.puzzling.org>

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups can't
> find that page right now (does it still exist?) ahem, look at divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.




From WTD008 at motorola.com  Fri May 19 07:15:31 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 14:15:31 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE9890@zuk35exm62.ds.mot.com>

Ok, thanks to both of you

Thomas 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew
Bennetts
Sent: 19 May 2006 14:08
To: Twisted general discussion
Subject: Re: [Twisted-Python] A tcp server that handles many connections

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups 
> can't find that page right now (does it still exist?) ahem, look at 
> divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From WTD008 at motorola.com  Fri May 19 07:28:04 2006
From: WTD008 at motorola.com (Deillon Thomas-WTD008)
Date: Fri, 19 May 2006 14:28:04 +0100
Subject: [Twisted-Python] A tcp server that handles many connections
Message-ID: <11C836DCD6F62240A8AB85A1D7487905EE98B1@zuk35exm62.ds.mot.com>

I just have a general question using python.
It is possible that a python script will be a XmlRPC server on the port
5555 and at the same time a tcp-server on the port 6666 ?
If yes.
What I have to do to do a such thing ?

Thanks,

Thomas  

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Deillon
Thomas-WTD008
Sent: 19 May 2006 14:16
To: Twisted general discussion
Subject: RE: [Twisted-Python] A tcp server that handles many connections

Ok, thanks to both of you

Thomas 

-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com
[mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew
Bennetts
Sent: 19 May 2006 14:08
To: Twisted general discussion
Subject: Re: [Twisted-Python] A tcp server that handles many connections

On Fri, May 19, 2006 at 12:58:34PM +0200, Johann Borck wrote:
[...]
> 
> and if you're looking for "real world" apps using twisted... uups 
> can't find that page right now (does it still exist?) ahem, look at 
> divmod.org :)

You're probably thinking of this:
   http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted

And maybe this:
   http://twistedmatrix.com/trac/wiki/SuccessStories

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From stephane_brault at yahoo.fr  Fri May 19 07:33:40 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Fri, 19 May 2006 13:33:40 +0000 (GMT)
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
Message-ID: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>

Hi,
 I have to call a web service then process the answer, according to the answer I may have to call the service again.
 The traditional way to go would be :
 condition = 1
 while condition:
     message = callWebService()
     condition = processMessage(message)
 
 Here is what I do :
 def function():
     
     def myCalback(message):
         condition = processMessage(message)
         if condition:
             deferred = callWebService()
              deferred.addCallback(myCallback)
 
     deferred = callWebService()
     deferred.addCallback(myCallback)
 
 I was wondering if it was the way to go or if there was a better way, since I'm not quite sure about the impact of calling new deffered within a callback.
 
 Thanks,
 
 Stéphane





From exarkun at divmod.com  Fri May 19 08:09:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 19 May 2006 10:09:01 -0400
Subject: [Twisted-Python] A tcp server that handles many connections
In-Reply-To: <11C836DCD6F62240A8AB85A1D7487905EE98B1@zuk35exm62.ds.mot.com>
Message-ID: <20060519140901.28682.378551705.divmod.quotient.2800@ohm>

On Fri, 19 May 2006 14:28:04 +0100, Deillon Thomas-WTD008 <wtd008 at motorola.com> wrote:
>I just have a general question using python.
>It is possible that a python script will be a XmlRPC server on the port
>5555 and at the same time a tcp-server on the port 6666 ?
>If yes.
>What I have to do to do a such thing ?
>

Actually this isn't a general Python question.  Here's how you do it with Twisted:


    reactor.listenTCP(5555, XMLRPCFactory)
    reactor.listenTCP(6666, SomeOtherFactory)

You may want to look at the writing servers document:

    http://twistedmatrix.com/projects/core/documentation/howto/servers.html

This is linked from one of the documentation pages on Twisted's website:

    http://twistedmatrix.com/projects/core/documentation/howto/index.html

Jean-Paul



From therve at free.fr  Fri May 19 12:26:03 2006
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Fri, 19 May 2006 20:26:03 +0200
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
In-Reply-To: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>
References: <20060519133340.9910.qmail@web26510.mail.ukl.yahoo.com>
Message-ID: <1148063163.446e0dbb2c5b9@imp1-g19.free.fr>

Selon StÃ©phane Brault <stephane_brault at yahoo.fr>:

> Hi,
>  I have to call a web service then process the answer, according to the
> answer I may have to call the service again.
>  The traditional way to go would be :
>  condition = 1
>  while condition:
>      message = callWebService()
>      condition = processMessage(message)
>
>  Here is what I do :
>  def function():
>
>      def myCalback(message):
>          condition = processMessage(message)
>          if condition:
>              deferred = callWebService()
>               deferred.addCallback(myCallback)
>
>      deferred = callWebService()
>      deferred.addCallback(myCallback)
>
>  I was wondering if it was the way to go or if there was a better way, since
> I'm not quite sure about the impact of calling new deffered within a
> callback.

You may have a recursion problem with this kind of code (I'm not quite sure when
it happens but it does). One good way is to use deferredGenerator:

# Not tested
def function():
    condition = True
    while condition:
        wfd =  defer.waitForDeferred(callWebService())
        yield wfd
        condition = wfd.getResult()
function = defer.deferredGenerator(function)

--
Thomas



From manlio_perillo at libero.it  Fri May 19 13:09:52 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 19 May 2006 17:09:52 -0200
Subject: [Twisted-Python] trial and setUpClass
In-Reply-To: <d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>
References: <446B477A.8000904@libero.it>
	<446C1E09.5050203@libero.it>	<d06a5cd30605180029i6401948etd4185b4edfcba9c6@mail.gmail.com>	<446C4B11.3090904@libero.it>
	<d06a5cd30605181541u5ee64eddwc9f371cdaa27a5f5@mail.gmail.com>
Message-ID: <446E1800.2020607@libero.it>

Jonathan Lange ha scritto:
> On 5/18/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>> Jonathan Lange ha scritto:
>> > [...]
>> >> Another question: there is a supported way to execute code before
>> *all*
>> >> TestCases run?

> [...]

> In that case, here's what I'd do.  I'd create a couple of top-level
> functions (maybe methods in a TestCase subclass -- who knows?), like
> this:
> 

Ok, I already use a common subclass.

> def checkDB():
>    # check the database is configured properly.
>    # return False if it needs to be restored
> 
> def setUpDB():
>    if not checkDB():
>        # drop & create a bunch of tables
> 
> I'd then whack a call to setUpDB() in my setUp (_not_ setUpClass) for
> every test case that needed to use the database.  That way, I'd know
> that the data was always correct, and I wouldn't be reconfiguring the
> database for every single test.
> 

Thanks, good idea.

For now, however, I simply use os.system and os.popen with psgl.



Regards  Manlio Perillo



From glyph at divmod.com  Sat May 20 00:26:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 20 May 2006 02:26:42 -0400
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: 0
Message-ID: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>

Well, I can't get to sleep, so here I go again...

On Fri, 19 May 2006 06:18:18 +0200, Andrea Arcangeli <andrea at cpushare.com> wrote:
>On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:

>> My impression is the following: Andrea, having not followed project
>> guidelines and rules because he doesn't have the time, having not been
>> treated like a coding God for whom others will naturally rush to do the
>> mundane tasks in order to receive his patches, and being unwilling to go
>> the extra few yards to get his patches (eventually) incorporated, is now
>> using his formerly precious time to go out of his way to undermine the
>> project.

Thank you, Terry!  It's nice to have a vote of confidence from the larger community.  This is my impression exactly, and it is why I have become so rude.  I write these replies for other people's benefit (they do nothing for me but make my blood pressure go up) and I'm happy to see they've been useful to someone.

>My impression is that most of my fixes I did over the last years were
>getting merged for some time.  As far as I can tell things derailed when
>I didn't like the fact that epsilon was becoming a dependency for nevow.

Andrea, things derailed when you went from simply submitting mostly-useful fixes without tests to agressively badmouthing our developers, our quality-control process and a company (Divmod) that contributes heavily to Twisted and employs both the Twisted project lead (myself) and its most active maintainer (JP Calderone).  The epsilon thing was a coincidence of timing, and as a matter of fact, I ultimately agreed with you on that particular point.

((An aside on the point of Divmod - yes, it is where I work, and yes, I am *very* offended at the characterization of the company as a bunch of control freaks trying to destroy Twisted.  There are lots of companies that deserve scorn from the open source and free software communities, but Divmod not one of them.  Divmod is an _impeccably_ good citizen of the open source world.  We consider credibility with the technical people who make smart decisions like the use of Twisted extremely important.  So important, in fact, that we have made a number of decisions to preserve that credibility, to fold things back upstream into the community, at considerable pain and expense to ourselves.  Divmod has contributed more to Twisted than any other company at this point, period, and although I'm confident that is the right decision in the long run, we have had very few opportunities to reap any benefits from this good citizenship yet.))

Not only did you disregard and insult our quality control process, it was explicitly instituted to avoid applying patches like the callFromThread 'fix' which you insisted we apply.  From my perspective, you seem to be actively trying to sabotage Twisted.  (Your attitude certainly implies that you are.)  For all we know, all your other patches are similarly broken and there is nothing to demonstrate otherwise.  You say you have tracebacks?  Produce those tracebacks in the context of a unit test, and I would be happy to discuss them.

We're all generally open to constructive criticism - but not only did your comments not provide a realistic direction for improvement, they're not helpful even as flames because they are not based on truth.  Below are some more repetitions of the same corrections I've been offering you for the last year.  I see that you finally figured out that your callFromThread patch was buggy (after having been told a mere 5 times by 3 different people) so perhaps you will eventually figure the other stuff out and stop posting those, too.

Given that everyone I've spoken with about your posts here is under the impression that you are trying to cause trouble, maybe you could take a step back and reconsider your tone.  I am slow to anger and quick to forgive, but if you are really interested in participating in the community in a productive and useful way, you are going to have to stop posting insulting lies 3 or 4 times a day.

>I was nevow user at the time. You think it's good that next time there
>is a twisted bug you've to upgrade epsilon instead of upgrading twisted
>in the first place?  Upgrading twisted would fix the bug for _all_ apps
>and not only the apps shipped by divmod.

For those of you just tuning in, Epsilon is a Divmod utility package which includes certain things which are destined for inclusion in Twisted but which are still stabilizing, may not be a good idea, or depend on python features too recent for Twisted to use, such as Python 2.4.  In particular, Andrea is referring to the fact that it may include "hot fixes" for Twisted functionality that Divmod products will be broken without, but which has not yet made it into a public release of Twisted.

(The particular fix that Andrea was concerned might have been included in Epsilon and depended upon by Nevow was never actually necessary, and therefore not made.  Epsilon was never actually a dependency of Nevow.  Nevertheless, he continues to complain about it.)

This practice was instituted so that Divmod projects could both work with older versions of Twisted (so that Divmod products may be installed on stable distributions with system-installed Twisted such as Debian or Ubuntu) and be released before parallel versions of Twisted were ready for release, as Twisted has a larger community and a more rigorous, slower, release process.

Here is the process for including a "hot fix" in epsilon.  I am not airing my opinion about how things should work here, I am stating a fact, as I am responsible for setting this policy, and there are only three hotfixes yet made in Epsilon and they have all followed this exact procedure:

  - Bug gets fixed **in Twisted SVN HEAD**, not in Epsilon.
  - It is submitted, tested, reviewed, merged to trunk.
  - Twisted release process begins.
  - Twisted fix gets copied into Epsilon.
  - Divmod projects are released with Epsilon, including the fix.
  - Twisted is released, with the fix.

If you are interested, see the revision log here:

    http://divmod.org/trac/log/trunk/Epsilon/epsilon/hotfixes

and compare with the various Twisted revisions / commit times that these fixes were applied in.

These fixes will ALWAYS be contributed to Twisted.  They are made in Twisted FIRST.  The amount of time between the Epsilon release and the Twisted release will be kept to an absolute minimum.  It is absolutely, completely untrue that we would ever deliberately make fixes to Twisted functionality and not contribute them back to the project.

>When I noticed a combination of weirdness (to mention one more, the new
>axiom api that cannot work with real DBMS in the async way because it
>doesn't return deferreds)

Another good way to convince people that you are not deliberately trying to cause trouble is to stop bringing up unrelated disagreements.  The other things you are trying to talk about here have nothing to do with Axiom, and showcasing your ignorance in this fashion doesn't do much for your case.  But, in the hopes of bringing some useful technical insight to this thread, I will correct your misconception here yet again.

"real" RDBMSes have almost universally blocking interfaces; yet Twisted manages to make them "async" with adbapi.  A similar simple threadpooling system could easily make Axiom "real"-RDBMS friendly; in fact, there are reasons it may be desirable for some application architectures even with SQLite.  Per-thread isolation of store caches is fine; there is no reason the Store object has to be the same everywhere.

This is another thing that I hope someone will contract Divmod to do, since Divmod as such doesn't need it, but it is abstractly interesting to me.  However, as it turns out, the people using Axiom (and there are several) are mostly happy with its synchronous mode of operation and it turns out to be quite fast.  Scaling is achieved differently than with other RDBMS systems, but that is a topic too complex to cover here.

>So then I fail to see why twisted-web mailing list is on twistedmatrix
>domain if only divmod projects like nevow should be discussed. Can you
>provide a reasonable answer? I never asked cause I think I already knew
>the answer.

Nevow is the next version of *twisted*.web.woven, developed outside Twisted due to explicit community displeasure at the disparity between woven's breakneck and chaotic development pace and twisted.web's relatively sedate one.  It was initially created by Donovan Preston, the same developer who wrote Woven, who was employed by Divmod at the time.  It was done on Divmod time and for Divmod projects, because Woven was not working well enough.  It is a Twisted-based technology through and through, and only works with twisted web on purpose.

Cheetah is a template engine that can be used with multiple web servers and has nothing to do with Twisted.  If someone wants to start a Twisted/Cheetah integration project and actually release some code, maybe people wouldn't mind so much if you talked about it.  However, cheetah itself is not a "twisted web" technology, even if it's possible to use them together.  (You can run PHP or Perl as a CGI under Twisted, but postings about PHP and Perl would similarly be off-topic.)

>While I acknowledge I wasn't the best bugfix submitter (and obviously
>I'm no coding God either), I'm definitely not trying to undermine
>twisted, quite the opposite I'd like twisted to evolve and integrated
>with not-invented-here technologies, but I fail to see how it can evolve
>and integrate with cheetah or/and django in this environment.

You'll notice that certain NIH technologies get a much better reception.  For example, the recently announced sAsync <http://foss.eepatents.com/sAsync/> "competes" with Axiom, but nobody bothered Ed when he posted about it here.  I'm not going to use SQLAlchemy, I don't particularly like it: but sAsync seems like a neat idea and I'm perfectly happy to see Twisted integrating with lots and lots of different third-party libraries that I am, personally, not interested in.  In fact, we all love Ed, because he has promised to write some docs!  (Hi Ed!)

Here is an example of how to begin a release announcement.  Ed's announcement began like this:

"sAsync offers asynchronous access to the outstanding SQLAlchemy package by Michael Bayer."

Notice how it begins with a compliment?  Try that next time.

>It would be great to talk about
>these things if only we were allowed. I created the cpushare-twisted
>list as a place to talk about those things that seems not appropriate to
>talk about here.

I'm sure that the bustling cpushare-twisted and web2/cheetah integration community appreciates your attention a lot more than this one.  Perhaps you should go talk to them instead -- or maybe, as you keep saying you must do, write some code rather than trolling mailing lists.  I seriously think you could have written comprehensive unit tests for all your patches in the time it's taken to write all these posts.



From therve at free.fr  Sat May 20 04:21:05 2006
From: therve at free.fr (Thomas =?iso-8859-1?b?SGVyduk=?=)
Date: Sat, 20 May 2006 12:21:05 +0200
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
Message-ID: <1148120465.446eed910b085@imp8-g19.free.fr>

Selon glyph at divmod.com:

> Well, I can't get to sleep, so here I go again...
>
> On Fri, 19 May 2006 06:18:18 +0200, Andrea Arcangeli <andrea at cpushare.com>
> wrote:
> >On Fri, May 19, 2006 at 03:15:40AM +0200, Terry Jones wrote:
>
> >> My impression is the following: Andrea, having not followed project
> >> guidelines and rules because he doesn't have the time, having not been
> >> treated like a coding God for whom others will naturally rush to do the
> >> mundane tasks in order to receive his patches, and being unwilling to go
> >> the extra few yards to get his patches (eventually) incorporated, is now
> >> using his formerly precious time to go out of his way to undermine the
> >> project.
>
> Thank you, Terry!  It's nice to have a vote of confidence from the larger
> community.  This is my impression exactly, and it is why I have become so
> rude.  I write these replies for other people's benefit (they do nothing for
> me but make my blood pressure go up) and I'm happy to see they've been useful
> to someone.

Glyph, I hope you realize most of the community didn't express on this point
because it was really not worthy. twisted-python readers already realized that
Mr  Arcangeli is only posting here to make us waste bandwith. Nobody use his
pseudo fork so he needs to make some noise from time to time.

As a Twisted user, I give all my support to current developpement policy, even
if it could slow down the pace a bit (which is not proved on the long run).

And, of course, long life to Divmod :).

--
Thomas




From p.mayers at imperial.ac.uk  Sat May 20 05:44:25 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 20 May 2006 12:44:25 +0100
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <1148120465.446eed910b085@imp8-g19.free.fr>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
	<1148120465.446eed910b085@imp8-g19.free.fr>
Message-ID: <446F0119.6040609@imperial.ac.uk>

Thomas Hervé wrote:
>> Thank you, Terry!  It's nice to have a vote of confidence from the larger
>> community.  This is my impression exactly, and it is why I have become so
>> rude.  I write these replies for other people's benefit (they do nothing for
>> me but make my blood pressure go up) and I'm happy to see they've been useful
>> to someone.
> 
> Glyph, I hope you realize most of the community didn't express on this point
> because it was really not worthy. twisted-python readers already realized that
> Mr  Arcangeli is only posting here to make us waste bandwith. Nobody use his
> pseudo fork so he needs to make some noise from time to time.
> 
> As a Twisted user, I give all my support to current developpement policy, even
> if it could slow down the pace a bit (which is not proved on the long run).
> 
> And, of course, long life to Divmod :).
> 

Agreed. Frankly, I think you've been amazingly patient. And I certainly 
wholeheartedly back the current development policy, warts and all. To 
paraphrase Winston Churchill:

Many forms of Development have been tried, and will be tried in this 
world of sin and woe. No one pretends that test-driven development is 
perfect or all-wise. Indeed, it has been said that TDD is the worst form 
of development except all those other forms that have been tried from 
time to time.



From slamb at slamb.org  Sat May 20 12:10:54 2006
From: slamb at slamb.org (Scott Lamb)
Date: Sat, 20 May 2006 11:10:54 -0700
Subject: Hilarious dream-logic (was Re: [Twisted-Python] [patch] (etc)
In-Reply-To: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
References: <20060520062642.28682.762090094.divmod.quotient.3142@ohm>
Message-ID: <D2D7F7F1-75AB-4834-A987-E45B86067D25@slamb.org>

On May 19, 2006, at 11:26 PM, glyph at divmod.com wrote:
> Thank you, Terry!  It's nice to have a vote of confidence from the  
> larger community.  This is my impression exactly, and it is why I  
> have become so rude.  I write these replies for other people's  
> benefit (they do nothing for me but make my blood pressure go up)  
> and I'm happy to see they've been useful to someone.

Let it go. He's a jerk, and everyone sees that. I find Twisted's high  
standards hard to match (unit testing can be hard! my own projects  
are at 50% line coverage at best) but it's pretty obvious he'd rather  
fling unfounded allegations and insult the people who built the tools  
he's using than even try.

In these situations, I tend to say "screw this, I'm going biking".  
When I come back, I'm a lot happier.

-- 
Scott Lamb <http://www.slamb.org/>





From msoulier at digitaltorque.ca  Sat May 20 16:28:38 2006
From: msoulier at digitaltorque.ca (Michael P. Soulier)
Date: Sat, 20 May 2006 18:28:38 -0400
Subject: [Twisted-Python] implementing a tftp protocol
Message-ID: <fb6605670605201528k74f2f38fy5af187a513ee8a6@mail.gmail.com>

Hi there,

I'm new to twisted, and I'm trying to implement a tftp protocol, since
I don't see one in the API and I need one.

I'm finding the docs on UDP clients to be _very_ sparse. So far it
seems that I need to use the reactor.listenUDP() method and then call
transport.connect() somehow. I was going to use the
protocol.ClientFactory as the TFTPFactory superclass. For the protocol
I assume that DatagramProtocol would be an appropriate parent.

I'm not sure of what the override exactly though, to drop in the right
bits to request a file from a remote tftp server. Could someone point
me in the right direction?

Thanks,
Mike
-- 
Michael P. Soulier <msoulier at digitaltorque.ca>
"Any intelligent fool can make things bigger and more complex... It takes a
touch of genius - and a lot of courage to move in the opposite direction."
--Albert Einstein



From exarkun at twistedmatrix.com  Sat May 20 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 21 May 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1148187902.19.2145154836@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-14 through 2006-05-21
Bugs opened: 13    Bugs closed: 18  Total open bugs: 605 (-5)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +0  |Highest:  -5          |Core:     +0           
|Enhancement:  -4  |Normal:   +1          |Mail:     -1           
|Task:         +0                         |Trial:    +1           
                                          |Vfs:      -1           
                                          |Web2:     +0           
                                          |Website:  -1           
                                          |Words:    -2           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1717] Test failures on win32 (test_process.UtilTestCase) (opened by teratorn) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1717

[#1718] Release Twisted core 2.3.0 (opened by radix) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1718

[#1722] Make t.p.policies.TimeoutMixin and t.i.base.DelayedCall more unittest-friendly (opened by exarkun) (CLOSED, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1722

                    ===== Normal =====
[#1716] iocpreactor should use WSA functions for sockets (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1716

[#1719] Review pyflakes warnings for Trial (opened by jml) (CLOSED, fixed)
    task            trial      http://twistedmatrix.com/trac/ticket/1719

[#1720] Trial's display of setUp errors is wonky (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/1720

[#1721] Document DelayedCall because docstrings for maintainers are nice (opened by radix) (CLOSED, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1721

[#1723] twisted.web2.http_headers.parseWWWAuthenticate doesn't work without a challenge. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1723

[#1724] twisted.web2.auth doesn't address multi-step authentication (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1724

[#1725] selectreactor 'winsock error' (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1725

[#1726] Enhanced docstring for callFromThread (opened by moonfallen)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1726

[#1727] custom log observer support for twistd (opened by harshaw) (CLOSED, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1727

[#1728] ThrottlingProtocol incorrectly calls stopReading and startReading on its transport (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1728



Closed Bugs
______________________
                    ===== Highest =====
[#1479] make setup.py and admin/sumo-setup.py share code (opened by radix, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1479

[#1517] /bugs/issue# should redirect to /trac/ticket/# (opened by dreid, closed by exarkun, fixed)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1517

[#1655] typos (group<->user) in twisted.words.service (opened by j2a, closed by exarkun, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/1655

[#1718] Release Twisted core 2.3.0 (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1718

[#1717] Test failures on win32 (test_process.UtilTestCase) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1717

[#1686] Better XML Stanza and error support (opened by ralphm, closed by ralphm, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1686

[#1722] Make t.p.policies.TimeoutMixin and t.i.base.DelayedCall more unittest-friendly (opened by exarkun, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1722

[#1701] Most twisted.mail.pop3.IMailbox should be allowed to return Deferreds (opened by exarkun, closed by exarkun, fixed)
    enhancement     mail       http://twistedmatrix.com/trac/ticket/1701

                    ===== Normal =====
[#1705] Test failure on win32 (FilePathTestCase.testGetAndSet) (opened by teratorn, closed by teratorn, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1705

[#1563] trial --testmodule should be usable without causing test methods to run repeatedly (opened by exarkun, closed by jml, )
    defect          trial      http://twistedmatrix.com/trac/ticket/1563

[#1719] Review pyflakes warnings for Trial (opened by jml, closed by jml, fixed)
    task            trial      http://twistedmatrix.com/trac/ticket/1719

[#1661] KeyError exception in twisted.internet.process.Process.childConnectionLost (opened by andrea, closed by glyph, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1661

[#1436] add getCookie/setCookie to web2.http_headers.Headers (opened by andrea, closed by glyph, invalid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1436

[#1475] Basic and Digest HTTP-Auth Implementation. (opened by dreid, closed by dreid, fixed)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1475

[#1721] Document DelayedCall because docstrings for maintainers are nice (opened by radix, closed by radix, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1721

[#1727] custom log observer support for twistd (opened by harshaw, closed by harshaw, duplicate)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1727

[#1728] ThrottlingProtocol incorrectly calls stopReading and startReading on its transport (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1728

[#1673] twisted.vfs.adapters.sftp doesn't translate VFSErrors consistently and completely (opened by spiv, closed by spiv, fixed)
    defect          vfs        http://twistedmatrix.com/trac/ticket/1673





From jml at mumak.net  Sun May 21 00:22:13 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 May 2006 16:22:13 +1000
Subject: [Twisted-Python] Bugs, bugs, bugs
Message-ID: <d06a5cd30605202322v3ad5e74cs21b3f57516884244@mail.gmail.com>

Hello,

In the interests of household cleanliness[1], I propose we have
schedule a weekend of bug squashing.  We currently have six hundred
and five active tickets.

Apart from scheduling a time, and maybe creating a wiki page, I'm not
really sure how these things work.  I suggest June 3-4 as a good time,
as that will match with the sprint in Sydney.

What do you reckon?

jml

[1] http://www.advogato.org/article/215.html



From tv at twistedmatrix.com  Sun May 21 00:45:15 2006
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: Sun, 21 May 2006 09:45:15 +0300
Subject: [Twisted-Python] lore
In-Reply-To: <9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
References: <20060517170155.28682.640691496.divmod.quotient.1875@ohm>
	<9F601982-462B-46A9-B34D-8AA22E2F9097@fuhm.net>
Message-ID: <44700C7B.9070306@twistedmatrix.com>

James Y Knight wrote:
> I disagree with that conclusion, but have given up arguing the point. If
> there are others who support my view, now would be a good time to speak
> up. You of course get extra bonus points if you've actually contributed
> to documentation in twisted.

No bonus points for me from contributing much to documentation, but
ReST >> Lore. Both because of how nice it is to write and because it's
a format with a user base bigger than the number of people who are
working on twisted.



From jml at mumak.net  Sun May 21 01:09:06 2006
From: jml at mumak.net (Jonathan Lange)
Date: Sun, 21 May 2006 17:09:06 +1000
Subject: [Twisted-Python] Re: June Sprint
In-Reply-To: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>
References: <d06a5cd30605190014n17be49far6bca52eb6ff1aa7f@mail.gmail.com>
Message-ID: <d06a5cd30605210009g4524fc66g2365b786d8e48c92@mail.gmail.com>

On 5/19/06, Jonathan Lange <jml at mumak.net> wrote:
> Hello!
>
> There's a sprint on June 3-4 in Sydney, Australia.  But you already knew that.
>
> What you don't know is that now there is a wiki page for you to put
> your name and ideas for the sprint!
> Examine http://twistedmatrix.com/trac/wiki/SydneySprint
>

Someone just asked about the venue.

UTS have graciously offered us the use of some of their rooms.
Details will be posted on the wiki page as they arrive.

cheers,
jml



From stephane_brault at yahoo.fr  Sun May 21 12:55:48 2006
From: stephane_brault at yahoo.fr (=?utf-8?q?St=C3=A9phane=20Brault?=)
Date: Sun, 21 May 2006 18:55:48 +0000 (GMT)
Subject: [Twisted-Python] Calling deferred within a callback,
	good or bad idea ?
In-Reply-To: <1148063163.446e0dbb2c5b9@imp1-g19.free.fr>
Message-ID: <20060521185548.61800.qmail@web26507.mail.ukl.yahoo.com>

Thanks Thomas,
 I'll try your solution.
 
 Stéphane

----- Message d'origine ----
De : Thomas Hervé <therve at free.fr>
Ã€ : Twisted general discussion <twisted-python at twistedmatrix.com>
EnvoyÃ© le : Vendredi, 19 Mai 2006, 8h26mn 03s
ObjetÂ : Re: [Twisted-Python] Calling deferred within a callback, good or bad idea ?

Selon StÃ©phane Brault <stephane_brault at yahoo.fr>:

> Hi,
>  I have to call a web service then process the answer, according to the
> answer I may have to call the service again.
>  The traditional way to go would be :
>  condition = 1
>  while condition:
>      message = callWebService()
>      condition = processMessage(message)
>
>  Here is what I do :
>  def function():
>
>      def myCalback(message):
>          condition = processMessage(message)
>          if condition:
>              deferred = callWebService()
>               deferred.addCallback(myCallback)
>
>      deferred = callWebService()
>      deferred.addCallback(myCallback)
>
>  I was wondering if it was the way to go or if there was a better way, since
> I'm not quite sure about the impact of calling new deffered within a
> callback.

You may have a recursion problem with this kind of code (I'm not quite sure when
it happens but it does). One good way is to use deferredGenerator:

# Not tested
def function():
    condition = True
    while condition:
        wfd =  defer.waitForDeferred(callWebService())
        yield wfd
        condition = wfd.getResult()
function = defer.deferredGenerator(function)

--
Thomas

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python






From warner at lothar.com  Mon May 22 00:30:32 2006
From: warner at lothar.com (Brian Warner)
Date: Sun, 21 May 2006 23:30:32 -0700 (PDT)
Subject: [Twisted-Python] Re: Send many large files with PB
Message-ID: <20060521.233032.123886711.warner@lothar.com>

> Justin Mazzola Paluska:
>> How bad is the slow down?  Or, to ask the question another way, how
>> much CPU will the process actually take?  
>
> 100% CPU for all the time it takes. Serialization is CPU- and
> memory-intensive.

Well, the memory footprint is equal to the size of the chunk that you're
paging.. that's the reason for using FilePager, to reduce the chunk size. (I
think the instantaneous footprint is 2x the chunksize, but once the chunk has
been serialized, it drops back to close to 1x).

Serializing strings is equivalent to copying them. The banana format for
strings is just a couple of length bytes followed by the string contents, so
there's not a whole lot of complex CPU stuff going on, just strcpy.

The other advantage of FilePager is that the serialization CPU time is spread
out according to how fast the network is. I suspect that in most
environments, the process will be IO limited, and CPU usage during the
process would be far less than 100%. That said, it *is* less efficient than
an HTTP server that can just dump the file straight to the network (or better
yet use something like sendfile() to avoid the kernel/userspace transition
altogether).

>> Or is the best thing to do just use the PB to send a URL to the DEST
>> server?
>
> That's what I was hinting at, yes. Of course you should separately take
> care of any required authentication, authorization and encryption on the
> HTTP connection.

Yup, and if you do too much then you're verging back to the performance of
PB. Creating a random, unguessable URL which only allows a single download of
the target file will basically provide the authentication/authorization
features (modulo a man-in-the-middle attack), but not any confidentiality.
For some applications that might be enough, though.

 -Brian



From Wolfgang.W.Eichler at gmx.de  Mon May 22 07:18:32 2006
From: Wolfgang.W.Eichler at gmx.de (Wolfgang Eichler)
Date: Mon, 22 May 2006 15:18:32 +0200
Subject: [Twisted-Python] IPV6 in twisted ?
Message-ID: <E1FiAIq-0005c6-00@pyramid.twistedmatrix.com>

Hello,

what is the situation concerning IPV6 in twisted ?
I use tcp LineReceiver.

Thanks

Wolfgang





From exarkun at divmod.com  Mon May 22 07:30:53 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 22 May 2006 09:30:53 -0400
Subject: [Twisted-Python] IPV6 in twisted ?
In-Reply-To: <E1FiAIq-0005c6-00@pyramid.twistedmatrix.com>
Message-ID: <20060522133053.28682.1803169828.divmod.quotient.3981@ohm>

On Mon, 22 May 2006 15:18:32 +0200, Wolfgang Eichler <wolfgang.w.eichler at gmx.de> wrote:
>Hello,
>
>what is the situation concerning IPV6 in twisted ?
>I use tcp LineReceiver.

IPv6 is unsupported in Twisted.  There is a sketch of an implementation in the sandbox but support has not yet proven useful enough to bother finishing it.

Jean-Paul



From teratorn at twistedmatrix.com  Mon May 22 08:55:10 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Tue, 23 May 2006 00:55:10 +1000
Subject: [Twisted-Python] Sydney Sprint
Message-ID: <op.s9yjp8e5y3d107@localhost.localdomain>

I'm a little bit concerned about attendance for the June 3-4 Sydney  
Sprint. The wiki page only lists two people:  
http://twistedmatrix.com/trac/wiki/SydneySprint

Unfortunately that page requires a trac login with edit permissions to  
change, so I'm afraid some people have been unable to add themselves to  
the list.

Would everyone attending be kind enough to reply to this thread?

Also, can anyone recommend accommodations near the UTS campus?

Cheers,
-Eric



From manlio_perillo at libero.it  Mon May 22 11:24:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Mon, 22 May 2006 15:24:59 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
Message-ID: <4471F3EB.9070202@libero.it>

I'm pleasant to announce the first public release of pglib.

pglib is an implementation of the PostgreSQL protocol, version 3.0.
It is written in Twisted, and aims to be a complete replacement for libpq.

In the current version the extended query sub protocol is not supported.

The project can be found at:
http://developer.berlios.de/projects/pglib/

Subversion access coming soon.


Unfortunately, I still have to write some documentation/examples.
However there is a (hopefully) detailed README and a complete test case.

Its just the "twisted way" ;-).

Note that running the test suite requires to setup a PostgreSQL database.

And note that pglib offer (at least with the default IRowConsumer
implementation) only a raw and low level access to the database (no
conversion from SQL types and Python objects, like in pgasync).

This is the responsibility of an higher lever layer.


I would like to see pglib included in Twisted Core
(in twisted.enterprise.protocols.twisted)

I'm planning to write a support for MySQL (if I have time, it has a
really ugly protocol design) and an asynchronous "wrapper" for SQLite.



Regards  Manlio Perillo



From andrew-twisted at puzzling.org  Mon May 22 19:36:26 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 23 May 2006 11:36:26 +1000
Subject: [Twisted-Python] Sydney Sprint
In-Reply-To: <op.s9yjp8e5y3d107@localhost.localdomain>
References: <op.s9yjp8e5y3d107@localhost.localdomain>
Message-ID: <20060523013626.GD2204@steerpike.home.puzzling.org>

On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
> I'm a little bit concerned about attendance for the June 3-4 Sydney  
> Sprint. The wiki page only lists two people:  
> http://twistedmatrix.com/trac/wiki/SydneySprint
> 
> Unfortunately that page requires a trac login with edit permissions to  
> change, so I'm afraid some people have been unable to add themselves to  
> the list.

Yep, that includes me.

> Would everyone attending be kind enough to reply to this thread?

I'll be there, and so will Mary.

You should also mail the python-au list, we've always mailed them about sprints
in the past, and there are usually people interested.

> Also, can anyone recommend accommodations near the UTS campus?

UTS is very close to Central Station, so any city backpacker place would be
fairly close.  I think last time Andy stayed at the YHA listed here:

    http://wikitravel.org/en/Sydney/City#Sleep

-Andrew.




From mary-twisted at puzzling.org  Mon May 22 19:47:23 2006
From: mary-twisted at puzzling.org (Mary Gardiner)
Date: Tue, 23 May 2006 11:47:23 +1000
Subject: [Twisted-Python] Sydney Sprint
In-Reply-To: <20060523013626.GD2204@steerpike.home.puzzling.org>
References: <op.s9yjp8e5y3d107@localhost.localdomain>
	<20060523013626.GD2204@steerpike.home.puzzling.org>
Message-ID: <20060523014723.GA24809@sourdust.home.puzzling.org>

On Tue, May 23, 2006, Andrew Bennetts wrote:
> On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
> > Unfortunately that page requires a trac login with edit permissions to  
> > change, so I'm afraid some people have been unable to add themselves to  
> > the list.
> 
> Yep, that includes me.

Likewise, I do not have edit permissions.

> You should also mail the python-au list, we've always mailed them about sprints
> in the past, and there are usually people interested.

http://starship.python.net/mailman/listinfo/python-au

-Mary



From mailinglists at smartology.nl  Tue May 23 10:31:15 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Tue, 23 May 2006 18:31:15 +0200
Subject: [Twisted-Python] Twisted to proxy php out to apache?
Message-ID: <447338D3.3030109@smartology.nl>

Hello fellow twisters,

We have a rather large web app based on xul, xmlrpc (via twisted) and
php (via apache) .... and we would like to get it all (in due time) in
python.

As a first step it would be perfect to let twisted handle php page
requests so that we can use nevow for the upcomming modules and convert
old modules when we have the time to spare.

Some time ago, I  tried to get PHP to run as a CGI from twisted ... that
was so slow that I got timing problems and a non operatable webapp.
Nothing new on the FCGI for PHP front yet?

My question ... is it possible to pass php page requests from twisted to
apache so I don't suffer the speed loss but still have my app listening
on only one port (for http and xmlrpc) ? So can twisted be a proxy for
php or is this not the recommended way to go?

- Remi -



From manlio_perillo at libero.it  Tue May 23 10:58:31 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 14:58:31 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <4471F3EB.9070202@libero.it>
References: <4471F3EB.9070202@libero.it>
Message-ID: <44733F37.50104@libero.it>

Manlio Perillo ha scritto:
> [...]

> I would like to see pglib included in Twisted Core
> (in twisted.enterprise.protocols.twisted)
> 

Well, just to know.
What is the procedure for require the inclusion of a new module/package?


Thanks  Manlio Perillo



From christian.simms at gmail.com  Tue May 23 11:04:10 2006
From: christian.simms at gmail.com (christian simms)
Date: Tue, 23 May 2006 13:04:10 -0400
Subject: [Twisted-Python] Problems with spawnProcess on Windows with
	ActiveState's ActivePython 2.3
Message-ID: <cd8fa6f90605231004g3b523015m2e224d60b88e774c@mail.gmail.com>

I see this is a known problem (issue #1457 is closed, link at
http://twistedmatrix.com/trac/ticket/1457), and the solution is to
upgrade your pywin32.  However, it's annoying that the current latest
ActivePython 2.3 still includes the old and buggy pywin32 --
ActiveState's release notes at
http://aspn.activestate.com/ASPN/docs/ActivePython/2.3/relnotes.html
state that they are including build 203+ (20050128).

As a simple solution, I wonder if someone could add a line to the Trac
download link for the "Win32 installer for Python 2.3" saying
something like:

    - NOTE:  To avoid issues relating to launching subprocesses,
please upgrade to the latest pywin32 package available at:
http://sourceforge.net/project/showfiles.php?group_id=78018.  If
you're using ActiveState's installation then you definitely need to
upgrade.

Cheers,
Christian



From itamar at itamarst.org  Tue May 23 11:22:32 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 May 2006 13:22:32 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44733F37.50104@libero.it>
References: <4471F3EB.9070202@libero.it>  <44733F37.50104@libero.it>
Message-ID: <1148404953.8109.3.camel@localhost.localdomain>

On Tue, 2006-05-23 at 14:58 -0200, Manlio Perillo wrote:
> Manlio Perillo ha scritto:
> > [...]
> 
> > I would like to see pglib included in Twisted Core
> > (in twisted.enterprise.protocols.twisted)
> > 
> 
> Well, just to know.
> What is the procedure for require the inclusion of a new module/package?

1. Make sure you follow the Twisted coding standards, and have good test
coverage.
2. Open issue in issue tracker, explaining motivation for not keeping
this is as separate project.




From manlio_perillo at libero.it  Tue May 23 12:59:09 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 16:59:09 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <1148404953.8109.3.camel@localhost.localdomain>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
Message-ID: <44735B7D.7000307@libero.it>

Itamar Shtull-Trauring ha scritto:
> On Tue, 2006-05-23 at 14:58 -0200, Manlio Perillo wrote:
>> Manlio Perillo ha scritto:
>>> [...]
>>> I would like to see pglib included in Twisted Core
>>> (in twisted.enterprise.protocols.twisted)
>>>
>> Well, just to know.
>> What is the procedure for require the inclusion of a new module/package?
> 
> 1. Make sure you follow the Twisted coding standards, and have good test
> coverage.

In the current version, the docstrings do not use the format of
epydocs/pydoctor.

The test coverage should be good, but it requires an "external"
PostgreSQL database.
Is this a problem?

> 2. Open issue in issue tracker, explaining motivation for not keeping
> this is as separate project.
>


Ok, thanks.
I will open an issue when I clean up the code.

However I would like to see pglib in Twisted because:
1) I don't like that adbapi have to use dbapi2 compiant modules
2) I don't have the time to fully support pglib



Thanks and regards  Manlio Perillo



From radix at twistedmatrix.com  Tue May 23 13:05:01 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 23 May 2006 15:05:01 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44735B7D.7000307@libero.it>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
	<44735B7D.7000307@libero.it>
Message-ID: <60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>

On 5/23/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
> However I would like to see pglib in Twisted because:
> 1) I don't like that adbapi have to use dbapi2 compiant modules
> 2) I don't have the time to fully support pglib


#2 is a point *against* inclusion of pglib in Twisted, as far as the
Twisted project is concerned. We already have way too much
unmaintained code whose only users are the author and (sometimes) a
few third parties who don't contribute enough.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From itamar at itamarst.org  Tue May 23 13:15:44 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 23 May 2006 15:15:44 -0400
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <44735B7D.7000307@libero.it>
References: <4471F3EB.9070202@libero.it> <44733F37.50104@libero.it>
	<1148404953.8109.3.camel@localhost.localdomain>
	<44735B7D.7000307@libero.it>
Message-ID: <1148411745.8109.11.camel@localhost.localdomain>

On Tue, 2006-05-23 at 16:59 -0200, Manlio Perillo wrote:

> 2) I don't have the time to fully support pglib

That means it's probably less likely to be accepted, since we have lots
of existing code to maintain. Unless you can find a volunteer, of
course.





From schneider at gl-systemhaus.de  Tue May 23 13:24:26 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Tue, 23 May 2006 21:24:26 +0200
Subject: [Twisted-Python] How many threads in an application
Message-ID: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>

Hi all,

I have implemented a server as a subclass of t.i.TCPServer and have  
it running as a twistd application. Within the service, I have  
several callbacks. Let's say I have three connected protocols, how  
many threads to I have? Just one or more. The callbacks are scheduled  
via reactor.callLater.

Thanks,

chris



From manlio_perillo at libero.it  Tue May 23 13:30:38 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Tue, 23 May 2006 17:30:38 -0200
Subject: [Twisted-Python] [ANN] pglib 0.1
In-Reply-To: <60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>
References: <4471F3EB.9070202@libero.it>
	<44733F37.50104@libero.it>	<1148404953.8109.3.camel@localhost.localdomain>	<44735B7D.7000307@libero.it>
	<60ed19d40605231205v12d292ayc44bc718626d5e67@mail.gmail.com>
Message-ID: <447362DE.30905@libero.it>

Christopher Armstrong ha scritto:
> On 5/23/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>> However I would like to see pglib in Twisted because:
>> 1) I don't like that adbapi have to use dbapi2 compiant modules
>> 2) I don't have the time to fully support pglib
> 
> 
> #2 is a point *against* inclusion of pglib in Twisted, as far as the
> Twisted project is concerned. We already have way too much
> unmaintained code whose only users are the author and (sometimes) a
> few third parties who don't contribute enough.
> 

Support the *code* is not a problem.

The problem is support a bug tracker, mailing list, and all stuff for
user contributions.


Regards  Manlio Perillo




From ldanielburr at mac.com  Tue May 23 13:41:39 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 23 May 2006 14:41:39 -0500
Subject: [Twisted-Python] How many threads in an application
In-Reply-To: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
References: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
Message-ID: <op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Chris,


On Tue, 23 May 2006 14:24:26 -0500, Christian Schneider  
<schneider at gl-systemhaus.de> wrote:

> Hi all,
>
> I have implemented a server as a subclass of t.i.TCPServer and have it  
> running as a twistd application. Within the service, I have several  
> callbacks. Let's say I have three connected protocols, how many threads  
> to I have? Just one or more. The callbacks are scheduled via  
> reactor.callLater.
>
> Thanks,
>
> chris

The really cool thing about twisted is, in your case, you probably have no  
threads running, other than the main thread of execution, which is the  
reactor.  Twisted is handling your protocols asynchronously, rather than  
using threads, and this is a Good Thing, in terms of scalability and  
reliability.

L. Daniel Burr



From schneider at gl-systemhaus.de  Tue May 23 13:59:15 2006
From: schneider at gl-systemhaus.de (Christian Schneider)
Date: Tue, 23 May 2006 21:59:15 +0200
Subject: [Twisted-Python] How many threads in an application
In-Reply-To: <op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>
References: <66C05562-EE5C-45A4-BCA5-100B27C35AB1@gl-systemhaus.de>
	<op.s90rnpa63oj628@l-daniel-burrs-powerbook-g4-17.local>
Message-ID: <8E71331A-2948-4B0B-8D00-51E780358CD0@gl-systemhaus.de>

Hi Daniel,

thanks, that's what I've been thinking but it's good to have it  
confirmed.

chris

On 23.05.2006, at 21:41, L. Daniel Burr wrote:

> Hi Chris,
>
>
> On Tue, 23 May 2006 14:24:26 -0500, Christian Schneider  
> <schneider at gl-systemhaus.de> wrote:
>
>> Hi all,
>>
>> I have implemented a server as a subclass of t.i.TCPServer and  
>> have it running as a twistd application. Within the service, I  
>> have several callbacks. Let's say I have three connected  
>> protocols, how many threads to I have? Just one or more. The  
>> callbacks are scheduled via reactor.callLater.
>>
>> Thanks,
>>
>> chris
>
> The really cool thing about twisted is, in your case, you probably  
> have no threads running, other than the main thread of execution,  
> which is the reactor.  Twisted is handling your protocols  
> asynchronously, rather than using threads, and this is a Good  
> Thing, in terms of scalability and reliability.
>
> L. Daniel Burr
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From pf_moore at yahoo.co.uk  Tue May 23 14:49:23 2006
From: pf_moore at yahoo.co.uk (Paul Moore)
Date: Tue, 23 May 2006 21:49:23 +0100
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
Message-ID: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>

I have a program where I think that what I want to use is
deferToThread and setTimeout. However, the setTimeout method is marked
as deprecated - but I can't find a good supported alternative. Can
anyone help?

The situation I have is:

I need to do a large-ish number (50-100) of blocking calls in
parallel, and collect the results or any errors. In itself, this seems
like a suitable use for deferToThread (defer each call, and collect
the results in the deferred callback/errback).

The problem is that in rare cases, the blocking call can block
indefinitely. In this case, I need to make the call time out. However,
the underlying API offers no way to time out the call, so I have to do
this externally.

A quick prototype seems to work OK, using setTimeout to force a
timeout on the deferred, but it generates deprecation warnings for the
setTimeout call.

What should I be using to achieve this effect?

Thanks,
Paul.
-- 
I remember being impressed with Ada because you could write an infinite
loop without a faked up condition. The idea being that in Ada the
typical infinite loop would normally be terminated by detonation. --
Larry Wall




From ldanielburr at mac.com  Tue May 23 16:39:43 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Tue, 23 May 2006 17:39:43 -0500
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <op.s90zwhmu3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Paul,

On Tue, 23 May 2006 15:49:23 -0500, Paul Moore <pf_moore at yahoo.co.uk>  
wrote:

> I have a program where I think that what I want to use is
> deferToThread and setTimeout. However, the setTimeout method is marked
> as deprecated - but I can't find a good supported alternative. Can
> anyone help?
>

I don't know for a certainty that I can help, but I'll try :)

> The situation I have is:
>
> I need to do a large-ish number (50-100) of blocking calls in
> parallel, and collect the results or any errors. In itself, this seems
> like a suitable use for deferToThread (defer each call, and collect
> the results in the deferred callback/errback).
>

Agreed, this seems to be a perfectly reasonable use-case for deferToThread.

> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.
>

Alas, when dealing with APIs that do not allow for timeouts, there is very  
little that twisted can do to help.  The use of setTimeout has been  
debated to death, and no magic bullet solution is in sight.  That said,  
please read the following discussion thread to see what your options are,  
and perhaps one of them will be acceptable for your particular situation.   
These discussions cover your issue in reasonable depth.

http://twistedmatrix.com/pipermail/twisted-python/2004-April/007531.html

http://twistedmatrix.com/trac/ticket/178

http://twistedmatrix.com/pipermail/twisted-python/2005-March/009716.html

Basically, the best you can do in your circumstances is use  
reactor.callLater to invoke some function/method that will take action  
appropriate to your situation, be that cancelling the Deferred, killing  
the thread, etc.

Hope this helps,

L. Daniel Burr



From teratorn at twistedmatrix.com  Tue May 23 17:03:29 2006
From: teratorn at twistedmatrix.com (Eric Mangold)
Date: Wed, 24 May 2006 09:03:29 +1000
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <op.s900z3why3d107@localhost.localdomain>

On Wed, 24 May 2006 06:49:23 +1000, Paul Moore <pf_moore at yahoo.co.uk>  
wrote:

> I have a program where I think that what I want to use is
> deferToThread and setTimeout. However, the setTimeout method is marked
> as deprecated - but I can't find a good supported alternative. Can
> anyone help?

You can just use reactor.callLater(...) to run whatever timeout code you
have after the given number of seconds. callLater returns a DelayedCall
instance which you can .cancel() if you get a result before the timeout.

> The situation I have is:
>
> I need to do a large-ish number (50-100) of blocking calls in
> parallel, and collect the results or any errors. In itself, this seems
> like a suitable use for deferToThread (defer each call, and collect
> the results in the deferred callback/errback).
>
> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.

Well this is a bit of a problem. You can't just kill a thread - so it will
eventually return a result, and Twisted will .callback() its deferred. If
you've already stepped in, due to a timeout, and .callback()'ed the same
deferred you'll get an AlreadyCalledError in your log.

So don't do that.. don't fire that deferred. When you time out just keep  
some
state so that you can ignore the result if and when it comes.

> A quick prototype seems to work OK, using setTimeout to force a
> timeout on the deferred, but it generates deprecation warnings for the
> setTimeout call.
>
> What should I be using to achieve this effect?
>
> Thanks,
> Paul.

Hope that helps.

-- 
Eric Mangold - Twisted/Win32 Maintainer
http://twistedmatrix.com/trac/wiki/Windows



From andrew-twisted at puzzling.org  Tue May 23 20:36:37 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Wed, 24 May 2006 12:36:37 +1000
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <20060524023637.GF2204@steerpike.home.puzzling.org>

On Tue, May 23, 2006 at 09:49:23PM +0100, Paul Moore wrote:
[...]
> 
> The problem is that in rare cases, the blocking call can block
> indefinitely. In this case, I need to make the call time out. However,
> the underlying API offers no way to time out the call, so I have to do
> this externally.

There is a problem here Twisted cannot help you with -- you will leak threads
that you cannot interrupt, because they are blocked indefinitely.  setTimeout or
other solutions will allow you to paper over this fact, but you need to be aware
of it, because it will eventually stop your process from running.  There's no
way something like defer.setTimeout can magically cancel the underlying
operation for you (even though it unblocks the deferred waiting on that
operation), and part of the reason setTimeout is a deprecated is to force people
to be aware of that.

Also, deferToThread by default isn't going to give you with 50-100 parallel
threads.  The default threadpool size is 4.  You'll need to use
reactor.suggestThreadPoolSize to change that -- but realise that the default DNS
resolver in current Twisted releases use that threadpool too, and perhaps so
will other libraries, and you could starve those callers by swamping the
threadpool with your blocking calls.  So it may be better to use your own
threadpool, as twisted.enterprise.adbapi does, for example.  See
twisted.python.threadpool.

I don't suppose there's a non-blocking way to do what you want?

Oh -- and remember that while you can't kill threads, you *can* kill processes.
Consider using subprocesses to do your blocking work.

-Andrew.




From exarkun at divmod.com  Tue May 23 20:43:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 23 May 2006 22:43:35 -0400
Subject: [Twisted-Python] deferToThread - supported alternative to the
	(deprecated) setTimeout method
In-Reply-To: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
Message-ID: <20060524024335.28682.498346100.divmod.quotient.4692@ohm>

On Tue, 23 May 2006 21:49:23 +0100, Paul Moore <pf_moore at yahoo.co.uk> wrote:
>I have a program where I think that what I want to use is
>deferToThread and setTimeout. However, the setTimeout method is marked
>as deprecated - but I can't find a good supported alternative. Can
>anyone help?
>
>The situation I have is:
>
>I need to do a large-ish number (50-100) of blocking calls in
>parallel, and collect the results or any errors. In itself, this seems
>like a suitable use for deferToThread (defer each call, and collect
>the results in the deferred callback/errback).
>
>The problem is that in rare cases, the blocking call can block
>indefinitely. In this case, I need to make the call time out. However,
>the underlying API offers no way to time out the call, so I have to do
>this externally.
>
>A quick prototype seems to work OK, using setTimeout to force a
>timeout on the deferred, but it generates deprecation warnings for the
>setTimeout call.
>
>What should I be using to achieve this effect?

There's some code along these lines here:

http://twistedmatrix.com/trac/browser/trunk/twisted/internet/base.py#L201

It might make a good example to work from.  Note that any call that
blocks indefinitely will hold on to a thread indefinitely, and thus
reduce your effective thread pool size by one.  If this happens
enough, you'll end up with no free threads in your threadpool, and
no other threaded tasks will ever be able to complete.

Jean-Paul



From keith at Shopzilla.com  Thu May 25 16:48:28 2006
From: keith at Shopzilla.com (Keith Dutton)
Date: Thu, 25 May 2006 15:48:28 -0700
Subject: [Twisted-Python] web.client blowing up on non-fully qualified 301s
Message-ID: <2E91C86E7AEBFD43BB11EC2DD8EF518F10C2F0@szexchange.Shopzilla.inc>

Hello, 

I have run into an odd problem.  I am not sure if it is my issue or Twisted: any help would be appreciated.  Under at least some circumstances, twisted.web.client seems to 1) not be able to follow a 301, and 2) throw an unhandled exception, when trying to follow a 301.  A specific example and resulting error is given below:


from twisted.internet import defer
from twisted.web import client
from twisted.internet import reactor

class HTTPGetter(client.HTTPClientFactory):
    protocol = client.HTTPPageGetter

class Fetcher:

    def __init__(self,client_factory = HTTPGetter):
        self.factory = client_factory
        
    def download(self,host,port,url):
        f = self.factory(url)
        f.deferred.addCallback(self.downloadFinished).addErrback(self.downloadFailed)
        k = reactor.connectTCP(host, port, f, timeout=10)
        return f.deferred
    
    def downloadFinished(self,v):
        print  "good"

    def downloadFailed(self, v):
        print "bad"
        print v
    
r = Fetcher()
w = r.download("www.shopzilla.com",80,"/aaaa")
reactor.callLater(10,reactor.stop)
reactor.run()

This results in:

Unhandled error in Deferred:
Traceback (most recent call last):
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/posixbase.py", line 226, in mainLoop
    self.runUntilCurrent()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/base.py", line 541, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 494, in resolveAddress
    d.addCallbacks(self._setRealAddress, self.failIfNotConnected)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/defer.py", line 182, in addCallbacks
    self._runCallbacks()
--- <exception caught here> ---
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/defer.py", line 307, in _runCallbacks
    self.result = callback(self.result, *args, **kw)
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 498, in _setRealAddress
    self.doConnect()
  File "/usr/local/lib/python2.4/site-packages/twisted/internet/tcp.py", line 520, in doConnect
    connectResult = self.socket.connect_ex(self.realAddress)
  File "<string>", line 1, in connect_ex
    
exceptions.TypeError: an integer is required

Which is apparently due to the fact that doConnect assumes a good address and so does not trap for TypeError.

The bad address that doConnect blows up on ('',None) for (host,port) slips in due to twisted.web.client.handleStatus_301.   The example site (Shopzilla.com) posts a URL for the 301 Location that is not fully qualified.  handleStatus_301, in the face of such a URL, appears to fail because it relies on getting the host/port from the location URL, but these are not present in it.  Thus it passes in the ('',None) to its reactor.connectTCP attempt to follow the redirect, leading to the error above.  My kludge fix to handleStatus_301 is given below, where if the host or port are missing I steal them from the transport, which should be correct since it was just used to get the page.  I am running with this now, with no errors.

Is this a Twisted issue?  If so, is my fix reasonable?  If it is not a Twisted issue, what am I doing wrong?  

Thanks,

Keith

    def handleStatus_301(self):
        l = self.headers.get('location')
        if not l:
            self.handleStatusDefault()
        url = l[0]
        if self.followRedirect:
            scheme, host, port, path = \
                _parse(url, defaultPort=self.transport.getPeer().port)
            self.factory.setURL(url)
            #following 4 lines added kad to fix apparent issue with 301 to a url that is not fully qualified
            if self.factory.host == '':
                self.factory.host = self.transport.addr[0]
            if self.factory.port == None:
                self.factory.port = self.transport.addr[1]


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060525/f57a2e7b/attachment.html>

From stephen at thorne.id.au  Thu May 25 17:28:01 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Fri, 26 May 2006 09:28:01 +1000
Subject: [Twisted-Python] web.client blowing up on non-fully qualified 301s
In-Reply-To: <2E91C86E7AEBFD43BB11EC2DD8EF518F10C2F0@szexchange.Shopzilla.inc>
Message-ID: <20060525232801.28682.803616384.divmod.quotient.5368@ohm>

On Thu, 25 May 2006 15:48:28 -0700, Keith Dutton <keith at shopzilla.com> wrote:
>Is this a Twisted issue?  If so, is my fix reasonable?  If it is not a Twisted issue, what am I doing wrong?

This looks like a twisted 'issue' in that it's very common for webservers to give this (invalid) response.

Can you file a bug on the tracker, submit the test data you have, and your change as a unified diff against latest svn trunk?

http://twistedmatrix.com/trac/

I think you need to register a user account to create a ticket, in case you've not done that.

We can integrate the patch once we have a unit test :)

Regards,
Stephen Thorne.



From kpvincent at yahoo.com  Fri May 26 06:36:53 2006
From: kpvincent at yahoo.com (Kelly Vincent)
Date: Fri, 26 May 2006 13:36:53 +0100 (BST)
Subject: [Twisted-Python] XML-RPC server
Message-ID: <20060526123653.7472.qmail@web53402.mail.yahoo.com>

I am quite new to Twisted and I'm having some trouble
getting my XML-RPC server to do exactly what I want. 

We have a relatively simple goal: create an XML-RPC
server that will accept a request for a score, call a
function that computes that score, and then return the
score. The two catches are that 1. the client is
actually a .NET web server rather than a Twisted
client, and 2. we could have thousands of requests
come in relatively simultaneously (though more likely
not greater than a few hundred), likely with lots of
downtime between these periods of high activity. We
are planning to create a look-up table to deal with
some of the more common calculations, but I still need
to be able to run the other calculations
non-sequentially. I know that using a Deferred object
is the normal solution, but I'm not entirely sure if
it could work here without threads. I read somewhere 
that when the function call is not from another 
Twisted application, it's not possible to use the 
Deferred object. Is this actually the case? Or would 
it work in my situation since all of the "deferring" 
would be occurring within the server itself? My 
current solution involves using threads and a Deferred

object. Is this the best way to do this? Can it be 
done without threads? If so, how and is that a better
solution than the one with threads?

Here is my sample code, which does a simple 
calculation rather than the real one I will be using. 
Both my Twisted testing client and the .NET web 
server are able to talk to this server and get the 
correct results back. 


from twisted.web import resource, server, xmlrpc
from twisted.internet import defer, threads
from twisted.python import threadable
threadable.init()

class ScoreServer(xmlrpc.XMLRPC):
    def xmlrpc_calculateScore(self,params):
        t = params[0]
        d = threads.deferToThread(self.calc,t)
        val = d.addCallback(self.handleSuccess)
        d.addErrback(self.handleFailure)
        print t, d
        return val
    def calc(self,t):
        import time
        time.sleep(t)
        result = [t,t*10]
        return result
    def handleSuccess(self,t):
        print 'succeeded', t
        return t
    def handleFailure(self):
        print 'failed miserably'
        return ['Error']
        
if __name__ == "__main__":
    from twisted.internet import reactor
    root = resource.Resource()
    root.putChild('RPC2', ScoreServer())
    reactor.listenTCP(8082, server.Site(root))
    reactor.run()






From mailinglists at smartology.nl  Fri May 26 06:51:43 2006
From: mailinglists at smartology.nl (Remi Cool)
Date: Fri, 26 May 2006 14:51:43 +0200
Subject: [Twisted-Python] XML-RPC server
In-Reply-To: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
References: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
Message-ID: <4476F9DF.2020305@smartology.nl>

Kelly Vincent wrote:

>I am quite new to Twisted and I'm having some trouble
>getting my XML-RPC server to do exactly what I want. 
>
>We have a relatively simple goal: create an XML-RPC
>server that will accept a request for a score, call a
>function that computes that score, and then return the
>score. The two catches are that 1. the client is
>actually a .NET web server rather than a Twisted
>client, and 2. we could have thousands of requests
>come in relatively simultaneously (though more likely
>not greater than a few hundred), likely with lots of
>downtime between these periods of high activity. We
>are planning to create a look-up table to deal with
>some of the more common calculations, but I still need
>to be able to run the other calculations
>non-sequentially. I know that using a Deferred object
>is the normal solution, but I'm not entirely sure if
>it could work here without threads. I read somewhere 
>that when the function call is not from another 
>Twisted application, it's not possible to use the 
>Deferred object. Is this actually the case? Or would 
>it work in my situation since all of the "deferring" 
>would be occurring within the server itself? My 
>current solution involves using threads and a Deferred
>
>  
>
To my knowledge, a client has nothing to do with twisted internals like
deferreds.

For example I use a twisted xmlrpc server that get's it's requests from
a php script via apache.
You also could test your code with a simple python xmlrpc client like:

from xmlrpclib import ServerProxy

server = ServerProxy("http://yourserver:port")

print server

try:
    print server.your.method(attr)
except Exception, v:
    print "ERROR", v

- Remi -



From ldanielburr at mac.com  Fri May 26 08:13:10 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri, 26 May 2006 09:13:10 -0500
Subject: [Twisted-Python] XML-RPC server
In-Reply-To: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
References: <20060526123653.7472.qmail@web53402.mail.yahoo.com>
Message-ID: <op.s95wf8ll3oj628@l-daniel-burrs-powerbook-g4-17.local>

Hi Kelly,

On Fri, 26 May 2006 07:36:53 -0500, Kelly Vincent <kpvincent at yahoo.com>  
wrote:

> I am quite new to Twisted and I'm having some trouble
> getting my XML-RPC server to do exactly what I want.
>

First off, welcome aboard!  Now, on to your problem/question...

> We have a relatively simple goal: create an XML-RPC
> server that will accept a request for a score, call a
> function that computes that score, and then return the
> score. The two catches are that 1. the client is
> actually a .NET web server rather than a Twisted
> client, and 2. we could have thousands of requests
> come in relatively simultaneously (though more likely
> not greater than a few hundred), likely with lots of
> downtime between these periods of high activity. We
> are planning to create a look-up table to deal with
> some of the more common calculations, but I still need
> to be able to run the other calculations
> non-sequentially. I know that using a Deferred object
> is the normal solution, but I'm not entirely sure if
> it could work here without threads. I read somewhere
> that when the function call is not from another
> Twisted application, it's not possible to use the
> Deferred object. Is this actually the case? Or would
> it work in my situation since all of the "deferring"
> would be occurring within the server itself? My
> current solution involves using threads and a Deferred
> object. Is this the best way to do this? Can it be
> done without threads? If so, how and is that a better
> solution than the one with threads?

This kind of situation is pretty common, and finding the best solution  
will require you to do some benchmarking.  Firstly, benchmark your  
calculation: How much time does it take to return a result?  If the  
calculation is fairly swift (milliseconds), then don't worry about  
Deferreds at all; just perform the calculation and return the result.  If  
the calculation takes longer (seconds, minutes, whatever), then you can  
either use deferToThread, as you are currently, or you break your  
calculation up into steps, and use reactor.callLater to schedule execution  
incrementally.

That said, run a simple load-testing tool, such as apache's "ab", or  
"httperf", and see what kind of requests-per-second numbers you get for  
both approaches.

Hope this helps,

L. Daniel Burr



From pf_moore at yahoo.co.uk  Fri May 26 13:46:27 2006
From: pf_moore at yahoo.co.uk (Paul Moore)
Date: Fri, 26 May 2006 20:46:27 +0100
Subject: [Twisted-Python] Re: deferToThread - supported alternative to the
	(deprecated) setTimeout method
References: <bms672p6vgja66fon36m1i44cc7pfif1nq@4ax.com>
	<20060524024335.28682.498346100.divmod.quotient.4692@ohm>
Message-ID: <g1le729flhakbl0gcn1r424r1s4tcnm3g6@4ax.com>

Many thanks to all for the helpful responses. They've given me a lot
of options to think about. I'll see where it takes me.

Some specific comments:

On Tue, 23 May 2006 22:43:35 -0400, Jean-Paul Calderone
<exarkun at divmod.com> wrote:

>There's some code along these lines here:
>
>http://twistedmatrix.com/trac/browser/trunk/twisted/internet/base.py#L201

Thanks, that was useful.

>It might make a good example to work from.  Note that any call that
>blocks indefinitely will hold on to a thread indefinitely, and thus
>reduce your effective thread pool size by one.  If this happens
>enough, you'll end up with no free threads in your threadpool, and
>no other threaded tasks will ever be able to complete.

That's a good point. My initial thought was that I'm not writing a
long-running process here (my process runs all the threads, does a bit
of housekeeping when they complete, and then stops) and the blocking
thread condition is rare, so it shouldn't be a problem. But that's
just swapping one rare problem for another, somewhat rarer case. So
maybe I'm better fixing it properly.

On Wed, 24 May 2006 09:03:29 +1000, "Eric Mangold"
<teratorn at twistedmatrix.com> wrote:

>Well this is a bit of a problem. You can't just kill a thread - so it will
>eventually return a result, and Twisted will .callback() its deferred. If
>you've already stepped in, due to a timeout, and .callback()'ed the same
>deferred you'll get an AlreadyCalledError in your log.

Ah. That clarifies why setTimeout is deprecated, and why it's not
appropriate for me. Thanks!

On Wed, 24 May 2006 12:36:37 +1000, Andrew Bennetts
<andrew-twisted at puzzling.org> wrote:

>I don't suppose there's a non-blocking way to do what you want?

Sadly, no. It's a horribly broken API in this respect. (It's the
Oracle database connection API, if you want to know - no timeout
capability, and a rare but definite chance of a complete hang, no
return *ever*).

>Oh -- and remember that while you can't kill threads, you *can* kill processes.
>Consider using subprocesses to do your blocking work.

That's possible, but I'm running on Windows and subprocess management
is not as manageable on that platform (even under Python/twisted). But
it is a thought, and I'll keep it in mind.

Paul.
-- 
The trouble with being punctual is that nobody's there to appreciate
it. -- Franklin P. Jones




From glyph at divmod.com  Fri May 26 14:19:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 26 May 2006 16:19:47 -0400
Subject: [Twisted-Python] Re: deferToThread - supported alternative to
	the (deprecated) setTimeout method
In-Reply-To: <g1le729flhakbl0gcn1r424r1s4tcnm3g6@4ax.com>
Message-ID: <20060526201947.28682.1731617036.divmod.quotient.5814@ohm>



On Fri, 26 May 2006 20:46:27 +0100, Paul Moore <pf_moore at yahoo.co.uk> wrote:

>>Consider using subprocesses to do your blocking work.
>
>That's possible, but I'm running on Windows and subprocess management
>is not as manageable on that platform (even under Python/twisted). But
>it is a thought, and I'll keep it in mind.

While Twisted uses some rather gross APIs, and polling, to get subprocess management working on win32, and it's therefore not very high performance, it _does_ work, performs reasonably under average load (sockets are generally higher performance than stdin/stdout on all platforms, so if you have really large volumes of data to send to your subprocess you might want to use one of those anyway.), and is supported, especially in the most recent 2.4 release.  (No win32 installers for that yet; you'll have to build it yourself from the tarball).

Although the Python APIs differ substantially, the Twisted APIs for managing processes and communicating with them should be identical on Windows.



From radix at twistedmatrix.com  Sat May 27 11:19:21 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Sat, 27 May 2006 13:19:21 -0400
Subject: [Twisted-Python] Twisted 2.4.0 released
Message-ID: <60ed19d40605271019o85c7adp9896cb9605d6e17@mail.gmail.com>

Twisted is an event-based framework for internet applications which
works on Python 2.3.x and 2.4.x.

The 2.4.0 release includes features and fixes for the various parts of
Twisted, including Internet, Conch, Web, Mail, Names, and more.

Hit http://twistedmatrix.com/trac/wiki/TwistedProject to see what's
new and to get the latest downloads, including tarballs and Windows
installers.

For general information about Twisted, see the web site at
http://twistedmatrix.com/.

Thanks to Jean-Paul Calderone for helping a lot to get this release
out the door.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/

From general at eepatents.com  Sat May 27 19:48:59 2006
From: general at eepatents.com (Ed Suominen)
Date: Sat, 27 May 2006 18:48:59 -0700
Subject: [Twisted-Python] Synchronous Code Fishbowl
Message-ID: <4479018B.7060503@eepatents.com>

The dialogue copied below shows yet another example of the frustrations
that arise when trying to bridge the chasm between Twisted and the
synchronous rest of the world.

This latest episode inspired the idea of a synchronous code fishbowl
that offers well-behaved Twisted code a deferToQueue() method for
running badly-behaved blocking code.

See http://foss.eepatents.com/sAsync/browser/branches/syncbridge.py

Comments?

- Ed Suominen


-------- Original Message --------
Michael Bayer wrote:
> why are you using twisted *with* threads ?  didnt we all agree that was
> sort of unnecessary ?

Twisted operates without needing to run *in* a thread by doing
everything asynchronously. Every call made via the Twisted event loop
must either return (synchronous) results very quickly or return an
immediate reference to an eventual result (thus operating
asynchronously). The objects that hold those immediate references are
called "deferreds" in TWisted parlance.

Twisted runs most all of its internal operations with appropriate
chunking and use of select() to keep the asynchronous event loop humming
along nicely, but it has no control over how other libraries do things.
When an external library like SQLAlchemy presents a blocking call like
select(...).execute.fetchall(), the only way to make that call "play
nice" with Twisted by immediately returning a deferred to the eventual
result is by having TWisted run it in a thread. It includes the
deferToThread() function for that express purpose.

> (this goes to my point that twisted is a pain in the butt...)

Perhaps, but asynchronous code is a whole different way of thinking that
some of us actually find cleaner and more intuitive than blocking +
threads. What I'm trying to do with sAsync is put the "pain in the butt"
associated with making synchronous and asynchronous code work together
firmly behind the scenes for Twisted users, at least as far as
interacting with SQLAlchemy is concerned.

> anyway, SA 0.2 uses the same idea for sqlite threading as 0.1....it
> maintains each connection thread locally since you cant share a sqlite
> connection between threads.   im also not sure what youre talking about
> with a "thread local copy of the engine", if thats something youre doing
> on your end, you might want to not do that.  use Connection objects
> instead theyre much more portable.

Mike, I remember you telling me a while ago that SA somehow figures out
how to make things work with the engine. That was after I spent a lot of
time trying to re-engineer the wheel, to great frustration on my part. I
followed your advice, ditched my thread-local code, and got SA
transactions just fine (based on the engine) to run in arbitrary
threads. Now it's not working in SA 0.2. Could you point out what's
changed in regard to the engine vs. threads vs. sqlite?

I'd rather not change everything under the hood (e.g., using connections
somehow) if I don't have to. The lesson of not trying to re-engineer
what SA handled fine on its own is still with me. :-)

Best regards, Ed

> On May 27, 2006, at 6:57 PM, Ed Suominen wrote:
> 
>> My sAsync project relies on Twisted to maintain a thread pool. It runs
>> database transactions in some available thread via Twisted's
>> deferToThread() function. See the transact function in
>> http://foss.eepatents.com/sAsync/browser/trunk/sasync/database.py for
>> details.
>>
>> That arrangement created no problem with SQLite and SA 0.1, even though
>> SQLite does not allow sharing of connections between threads. Somehow,
>> SA 0.1 made the transaction run in its thread with a thread-local copy
>> of the engine and table that was created in the main thread. I never
>> figured out how, but it just worked.
>>
>> It doesn't work in SA 0.2, however. I either get the error when trying
>> to use the main-thread table in the threaded transaction, or have no
>> table available in the thread because it wasn't created there. Now I'm
>> trying to figure out how to put humpty dumpty back together again. Any
>> suggestions?
>>
>> Best regards, Ed




From exarkun at twistedmatrix.com  Sat May 27 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 28 May 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1148792702.13.242170977@twistedmatrix.com

Bug summary
______________________
Summary for 2006-05-21 through 2006-05-28
Bugs opened: 28    Bugs closed: 19  Total open bugs: 614 (+9)

|== Type Changes   |== Priority Changes   |== Component Changes     
|Defect:       +5  |Highest:  -1          |Conch:               -2  
|Enhancement:  +2  |High:     +2          |Core:                +7  
|Task:         +2  |Normal:   +7          |Lore:                +0  
                   |Low:      +1          |Mail:                +0  
                                          |Names:               +0  
                                          |News:                +0  
                                          |Release Management:  +0  
                                          |Runner:              +0  
                                          |Web:                 +0  
                                          |Web2:                +2  
                                          |Website:             +1  
                                          |Words:               +1  


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1737] Release Twisted conch 0.7.0 (opened by radix) (CLOSED, fixed)
    task            conch      http://twistedmatrix.com/trac/ticket/1737

[#1743] Release Twisted Lore 0.2.0 (opened by radix) (CLOSED, fixed)
    task            lore       http://twistedmatrix.com/trac/ticket/1743

[#1745] Release Twisted Runner 0.2.0 (opened by radix) (CLOSED, fixed)
    task            runner     http://twistedmatrix.com/trac/ticket/1745

[#1747] RELEASE "TWISTED" 2.4.0!!!! (opened by radix) (CLOSED, fixed)
    enhancement     release management http://twistedmatrix.com/trac/ticket/1747

[#1749] update the docs on the web site for 2.4.0 (opened by radix) (CLOSED, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/1749

                    ===== High =====
[#1742] Add stdio halfclose tests (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/1742

[#1752] t.w2's header tests that use runRoundtripTest and requiredGeneratedElements are invalid. (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1752

[#1753] ConnectionPool.good_sql is not good SQL as far as Oracle is concerned (opened by itamarst)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1753

[#1754] adbapi has blanket except: with no logging (opened by itamarst)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1754

[#1755] t.w2.twscgi.SCGIClientProtocol causes an exception to be raised in t.w2.log._LogByteCounter (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/1755

                    ===== Normal =====
[#1729] release twisted core 2.4.0 (opened by radix) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1729

[#1730] twisted.test.test_tcp.HalfClose3TestCase.testReadNotificationRaises fails intermittently (opened by radix)
    defect          core       http://twistedmatrix.com/trac/ticket/1730

[#1731] Release twisted names 0.3.0 (opened by radix) (CLOSED, fixed)
    task            names      http://twistedmatrix.com/trac/ticket/1731

[#1732] Release twisted mail 0.3.0 (opened by radix) (CLOSED, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/1732

[#1733] Release Twisted words 0.4.0 (opened by radix) (CLOSED, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/1733

[#1734] twisted.words.service has NameErrors (opened by radix)
    defect          words      http://twistedmatrix.com/trac/ticket/1734

[#1735] skip twisted.words' msn tests when twisted.web is not available (opened by radix)
    task            words      http://twistedmatrix.com/trac/ticket/1735

[#1736] Release Twisted web 0.6.0 (opened by radix) (CLOSED, fixed)
    task            web        http://twistedmatrix.com/trac/ticket/1736

[#1738] Failure.__getstate__() does not clean self.value() (opened by moof)
    defect          core       http://twistedmatrix.com/trac/ticket/1738

[#1739] (patch) Removing system event triggers while firing does the wrong thing. (opened by antony)
    defect          core       http://twistedmatrix.com/trac/ticket/1739

[#1740] twisted/test/stdio_test_halfclose.py typo (opened by rikyu) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1740

[#1741] threadCallQueue loop can grow list forever (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1741

[#1744] listen invalid argument (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/1744

[#1746] Release Twisted News 0.2.0 (opened by radix) (CLOSED, fixed)
    task            news       http://twistedmatrix.com/trac/ticket/1746

[#1748] Using twisted.cred.credentials results in deprecation warnings in Twisted 2.4 (opened by szumo)
    defect          core       http://twistedmatrix.com/trac/ticket/1748

[#1750] Solaris tar does not work with Twisted tarball (opened by damon_register) (CLOSED, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/1750

[#1751] Make macro or plugin or something so project pages automatically display latest releases (opened by itamarst)
    enhancement     website    http://twistedmatrix.com/trac/ticket/1751

                    ===== Low =====
[#1756] Add preliminary support for UTF-8 to twisted.conch.insults (opened by radix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1756



Closed Bugs
______________________
                    ===== Highest =====
[#1695] raising an exception from datagramReceived should not kill a listening UDP Port (opened by radix, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1695

[#1737] Release Twisted conch 0.7.0 (opened by radix, closed by exarkun, fixed)
    task            conch      http://twistedmatrix.com/trac/ticket/1737

[#1745] Release Twisted Runner 0.2.0 (opened by radix, closed by exarkun, fixed)
    task            runner     http://twistedmatrix.com/trac/ticket/1745

[#1749] update the docs on the web site for 2.4.0 (opened by radix, closed by exarkun, fixed)
    task            website    http://twistedmatrix.com/trac/ticket/1749

[#1743] Release Twisted Lore 0.2.0 (opened by radix, closed by radix, fixed)
    task            lore       http://twistedmatrix.com/trac/ticket/1743

[#1747] RELEASE "TWISTED" 2.4.0!!!! (opened by radix, closed by radix, fixed)
    enhancement     release management http://twistedmatrix.com/trac/ticket/1747

                    ===== High =====
[#635 ] Patch for py2exe 0.5 support for tap2ntsvc (opened by jml, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/635

[#1013] Windows batch file arguments (opened by nicktrout, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/1013

[#1016] setup.py all --help causes infinite loop (opened by justinj, closed by moonfallen, invalid)
    defect          conch      http://twistedmatrix.com/trac/ticket/1016

                    ===== Normal =====
[#1729] release twisted core 2.4.0 (opened by radix, closed by radix, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1729

[#1731] Release twisted names 0.3.0 (opened by radix, closed by radix, fixed)
    task            names      http://twistedmatrix.com/trac/ticket/1731

[#1732] Release twisted mail 0.3.0 (opened by radix, closed by exarkun, fixed)
    task            mail       http://twistedmatrix.com/trac/ticket/1732

[#1714] Update Words' NEWS for 0.4 release (opened by ralphm, closed by exarkun, fixed)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1714

[#1733] Release Twisted words 0.4.0 (opened by radix, closed by exarkun, fixed)
    task            words      http://twistedmatrix.com/trac/ticket/1733

[#1736] Release Twisted web 0.6.0 (opened by radix, closed by radix, fixed)
    task            web        http://twistedmatrix.com/trac/ticket/1736

[#1740] twisted/test/stdio_test_halfclose.py typo (opened by rikyu, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1740

[#1746] Release Twisted News 0.2.0 (opened by radix, closed by radix, fixed)
    task            news       http://twistedmatrix.com/trac/ticket/1746

[#1750] Solaris tar does not work with Twisted tarball (opened by damon_register, closed by glyph, wontfix)
    defect          website    http://twistedmatrix.com/trac/ticket/1750

[#1725] selectreactor 'winsock error' (opened by ghazel, closed by glyph, wontfix)
    defect          core       http://twistedmatrix.com/trac/ticket/1725





From dominic.fox at gmail.com  Sun May 28 04:45:22 2006
From: dominic.fox at gmail.com (Dominic Fox)
Date: Sun, 28 May 2006 11:45:22 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
Message-ID: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>

I understand that twisted.flow is no longer maintained, and is not
widely considered to represent a good way of writing twisted code.
However, I haven't been able to find any explanation of why this
approach (using generators to simulate co-operative multitasking)
seems to have been abandoned.

Is it simply the case  that most people writing twisted code didn't
find it very useful? Or are there more specific arguments against
doing things that way?

I'm trying to make the case at work for using twisted for networking
things (in spite of my preference for lightweight threads plus
sensible concurrency primitives, if Python is the target platform then
twisted is probably the best way to go).

If I can show some full-threaded code next to some co-operative
multitasking code that a) has much the same sort of control flow, but
b) scales much better, and doesn't have to worry about subtle
concurrency issues, then I think it should go fairly well. If I have
to explain about how the event-driven programming model works at the
same time, it might not go *so* well...

Dominic



From p.mayers at imperial.ac.uk  Sun May 28 06:39:54 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sun, 28 May 2006 13:39:54 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <44799A1A.3080204@imperial.ac.uk>

Dominic Fox wrote:
> I understand that twisted.flow is no longer maintained, and is not
> widely considered to represent a good way of writing twisted code.
> However, I haven't been able to find any explanation of why this
> approach (using generators to simulate co-operative multitasking)
> seems to have been abandoned.

Well, flow in particular had a very funny model. It did not seem 
straightforward to me at all.

> 
> Is it simply the case  that most people writing twisted code didn't
> find it very useful? Or are there more specific arguments against
> doing things that way?

I believe the general consensus with regards generator-based 
microthreads is that attempting to hide the fact you are doing 
asynchronous work behind a language trick is a Bad Thing(tm) in much the 
same way that RESTians believe layering RPC semantics over HTTP (or any 
WAN technology) is a bad thing, and for many of the same reasons.

In addition, though the concurrency issues are VASTLY reduced compared 
to pre-emptive threading, they do still exist. I've got caught out by them.

Pre python2.5 getting the data back into the generator either requires a 
global or a magic stack-traversing function which is of course nasty.

Finally, you have to work very hard pre-python2.5 to make the uthreads 
correctly handle all error cases.

> 
> I'm trying to make the case at work for using twisted for networking
> things (in spite of my preference for lightweight threads plus
> sensible concurrency primitives, if Python is the target platform then
> twisted is probably the best way to go).

I tend to think that lightweight threads really require first-class 
support from the VM, such as exists in Erlang, in order for them to be 
truly useful.

Were Erlang not such an ugly language I'd seriously consider switching 
to it. The more restricted model leads to all kinds of magic VM scaling 
goodness and the "right" (in my at least current opinion) way of writing 
such code is enshrined in the very architecture.

Had Stackless not been shot down (and for no particularly good reasons - 
"we'd have to port it to each platform" seems to have been the gist of 
it, plus some people rather disappointing and recurrent fear of the new) 
then I suspect Twisted would not exist in its current form.

w.r.t. "sensible" concurrency primitives, I've heard an Erlang expert 
relate: "Oh, we have two concurrency primitives. 'read' and 'write'", a 
position I support wholeheartedly.

All that said, the BBC Kamaelia project uses a generator-based 
consumer/producer pipeline as its underlying primitive, and seems to get 
along fine with it. But a consumer/producer component is not the same as 
a lightweight thread of course - broadly a c/p will only ever interact 
with its input, local variables, output and library calls. A thread 
might be expected to interact with other threads and shared data, from 
whence all difficulty springs.

It's also worth pointing out that Google uses a massively distributed 
c/p implementation called map-reduce to do much of their big work. A 
well-isolated generator-based c/p would be trivially parallel in much 
the same way.

> 
> If I can show some full-threaded code next to some co-operative
> multitasking code that a) has much the same sort of control flow, but
> b) scales much better, and doesn't have to worry about subtle
> concurrency issues, then I think it should go fairly well. If I have
> to explain about how the event-driven programming model works at the
> same time, it might not go *so* well...

I wrote a generator-based uthread thing over the top of twisted ages 
ago, on more or less the same rationale - other people would eventually 
be expected to write code for the system, and they would balk at or be 
unable to handle writing "true" async code.

This has not in fact been the case. Several of my colleagues have picked 
up the deferred/callback programming model with little difficulty.

Given that a similar system appears in MochiKit and web programmers 
appear to be able to pick it up and run with it in a *JavaScript* VM, 
perhaps we're underestimating people.

I will say three things:

  1. The name "Deferred" is tremendously unfortunate. I cannot begin to 
imagine why they weren't just called "Callback". The name seems to 
confuse people into thinking it does something it does not.

  2. The generator/uthread trick makes for tidier code because you can 
keep state in local variables. Using callbacks require you to pass a 
state object around and then prefix everything with a "state.varname" or 
worse "state['varname']" and the (frankly annoying) extra typing 
obviously leads to more scope for bugs as well as lower performance 
since local variable access is much faster.
  Sadly the "with" keyword just got used for something else (something 
else the language already had in fact. Oh well)

  3. I believe Deferreds as they currently exist are not very fast, and 
that's on top of the high cost of python function calls. Frequently we 
are told most processes are IO bound. That is very definitely not the 
case in my setup - I am SNMP polling 1200 devices every 5 minutes, 
sending an average of ~300-500 PDUs to each. With a bit of tuning, the 
CPU spins at about 90% usermode and 10% io/system.



From exarkun at divmod.com  Sun May 28 08:13:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 28 May 2006 10:13:23 -0400
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <20060528141323.28682.1809501099.divmod.quotient.6585@ohm>

On Sun, 28 May 2006 11:45:22 +0100, Dominic Fox <dominic.fox at gmail.com> wrote:
>I understand that twisted.flow is no longer maintained, and is not
>widely considered to represent a good way of writing twisted code.
>However, I haven't been able to find any explanation of why this
>approach (using generators to simulate co-operative multitasking)
>seems to have been abandoned.

Flow added a lot of complexity which served no great purpose.  Roughly
the same thing can be achieved in a tiny fraction of the code and API
size using twisted.internet.defer.deferredGenerator.

So it's not that the approach was abandoned, it's that a particular
implementation of it was abandoned.

I should also point out that Flow has almost nothing to do with
cooperative multitasking (and certainly nothing to do with
simulating it).  Twisted is a cooperative multitasking system at
the lowest level.  Everything you write with Twisted is an application
of cooperative multitasking.

Flow and Deferred Generators are different APIs for yielding
execution control, ones which often allow code which uses
asynchronous APIs to be written in a way which makes them appear
to be using synchronous APIs.

Inasmuch as this is misleading to readers, there is some debate
over whether or not it is a good idea at all.  However, Deferred
Generator is around and will be supported for some time.

Jean-Paul



From l.allegrucci at gmail.com  Sun May 28 13:02:07 2006
From: l.allegrucci at gmail.com (Lorenzo Allegrucci)
Date: Sun, 28 May 2006 21:02:07 +0200
Subject: [Twisted-Python] reactor.connectSSL() error handling
Message-ID: <1148842927.9303.21.camel@localhost.localdomain>


Hi, I'm writing a distributed application using XML-RPC over SSL in
Twisted. I need mutual authentication (server and client) but the
XML-RPC Proxy in Twisted doesn't take any SSL context so I rewrote a
Proxy by myself passing my ClientContextFactory subclass to
reactor.connectSSL.
Everything works fine but now I need to handle some possible error
conditions that could prevent the connection, e.g wrong certificates,
incompatible ciphersuite etc. In other words, I would like to catch
these "exceptions" and handle them but I don't know how to do it in the
Twisted framework (using Deferred I guess..).  Any hint?
Thank you.





From ms at cerenity.org  Sun May 28 15:59:12 2006
From: ms at cerenity.org (Michael)
Date: Sun, 28 May 2006 22:59:12 +0100
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <44799A1A.3080204@imperial.ac.uk>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
	<44799A1A.3080204@imperial.ac.uk>
Message-ID: <200605282259.12952.ms@cerenity.org>

On Sunday 28 May 2006 13:39, Phil Mayers wrote:
...
> All that said, the BBC Kamaelia project uses a generator-based
> consumer/producer pipeline as its underlying primitive, and seems to get
> along fine with it. But a consumer/producer component is not the same as
> a lightweight thread of course - broadly a c/p will only ever interact
> with its input, local variables, output and library calls. A thread
> might be expected to interact with other threads and shared data, from
> whence all difficulty springs.

</delurk>

[ Since someone else raised us, I'd like to say a couple of things, since I
  think one is related to the conversation in hand, and the other is relevant
  to a conversation started at Europython last year about our work feeding
  into Twisted in a good way (ie a way useful to people using Twisted). ]

Hopefully both points are useful.

Given we're now churning out systems at work with Kamaelia which are getting
/close/ to what I'd be happy with as production systems, so it //seems// to
be working out OK so far as you say. One thing that's less obvious about
the term consumer producer (even though its correct) is people tend to
think pipelines, and many systems don't tend to be (we've invented the
term graphlines instead, for want of a better name).

As part of getting to that stage - getting back to why I was replying - as
well as pure generators, we also properly support threaded components now
(albeit with a couple of caveats). The only difference between those and
standard components is the baseclass you inherit from and the fact your
main method doesn't have a yield statement in it. Threaded components are
also useful for forcing true system quiescence. This also gives a fairly
simple migration route for code for integration.

This also means bridging sync and async worlds is pretty trivial - for example
a crappy interactive web-tester application can look like this: (would be
nicer to use sys.argv...)

pipeline(
   ConsoleReader(),                 # This uses raw_input in a thread.
   TCPClient("www.google.com", 80), # Async and uses a selector component
                                    # running in another thread so the
                                    # system can be quiescent
   ConsoleEchoer(),                 # Normal Async
).run()

(The reason TCPClient fires up a selector component is because it expects to
be in a situation where lots of networking stuff is happening. If it's not the
CPU/memory load addition is minimal)

There's more useful examples than the above, but I quite like the above
because of simplicity. (The system we've got for dumping DVB-T transport
streams, and transcoding them is much more fun, but longer winded :)

On the second point...

I think it's worth mentioning that our goal of trying to make it possible
to integrate our code with twisted by Europython this year was woefully
optimistic (we've been spending time on optimisations instead, which will
probably actually simplify integrating with twisted). (Integrating as in
"work well with", not as in "viewed as a good idea by everyone involved
with twisted :)" ) [[ Sorry Tommi, I know there were aspects you wanted to 
nick... :-( ]]

<relurk>

Best Regards,


Michael.
--
Michael Sparks, Senior Research Engineer, BBC Research, Technology Group
michael.sparks at rd.bbc.co.uk, Kamaelia Project Lead, http://kamaelia.sf.net/



From glyph at divmod.com  Sun May 28 23:37:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 01:37:30 -0400
Subject: [Twisted-Python] reactor.connectSSL() error handling
In-Reply-To: <1148842927.9303.21.camel@localhost.localdomain>
Message-ID: <20060529053730.28682.710963033.divmod.quotient.6955@ohm>



On Sun, 28 May 2006 21:02:07 +0200, Lorenzo Allegrucci <l.allegrucci at gmail.com> wrote:
>
>Hi, I'm writing a distributed application using XML-RPC over SSL in
>Twisted. I need mutual authentication (server and client) but the
>XML-RPC Proxy in Twisted doesn't take any SSL context so I rewrote a
>Proxy by myself passing my ClientContextFactory subclass to
>reactor.connectSSL.
>Everything works fine but now I need to handle some possible error
>conditions that could prevent the connection, e.g wrong certificates,
>incompatible ciphersuite etc. In other words, I would like to catch
>these "exceptions" and handle them but I don't know how to do it in the
>Twisted framework (using Deferred I guess..).  Any hint?
>Thank you.

SSL error handling is a weak area in Twisted.  It's been improving, but it is still poorly documented.  Perhaps you can motivate some further improvements :)

However, the method you can use to "catch" exceptions related to connecting (SSL or otherwise) is http://twistedmatrix.com/documents/current/api/twisted.internet.protocol.ClientFactory.clientConnectionFailed.html

HTH,

-glyph



From glyph at divmod.com  Sun May 28 23:41:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 01:41:30 -0400
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <4479018B.7060503@eepatents.com>
Message-ID: <20060529054130.28682.683636483.divmod.quotient.6957@ohm>



On Sat, 27 May 2006 18:48:59 -0700, Ed Suominen <general at eepatents.com> wrote:
>The dialogue copied below shows yet another example of the frustrations
>that arise when trying to bridge the chasm between Twisted and the
>synchronous rest of the world.
>
>This latest episode inspired the idea of a synchronous code fishbowl
>that offers well-behaved Twisted code a deferToQueue() method for
>running badly-behaved blocking code.
>
>See http://foss.eepatents.com/sAsync/browser/branches/syncbridge.py
>
>Comments?

syncbridge looks like an interesting module.  I've often wanted to do something similar, to have a "one right way" for integrating with non-async-clean legacy code which also doesn't necessarily support threaded concurrency either.

However, I notice that nothing sets up the 'shutdown' method to be called on reactor shutdown automatically; this is a very tricky area, since mismanaged thread-pool shutdown can lock a process up hard as it's exiting.

Also, have you considered just using a twisted.python.threadpool of maximum size 1, rather than callInThread?  The main reason I didn't document that as the aforementioned "one right way" was because of the associated shutdown issues.  The major advantage of callInThread is that the reactor's own threadpool is definitely initialized and shut down at predictable points.

HTH,

-glyph



From acapnotic at twistedmatrix.com  Mon May 29 09:51:52 2006
From: acapnotic at twistedmatrix.com (Grant)
Date: Mon, 29 May 2006 11:51:52 -0400
Subject: [Twisted-Python] pr0blems with meds expencies, you Are 0n right way
Message-ID: <80851065.20060529115152@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060529/d20b3c36/attachment.html>

From zooko at zooko.com  Mon May 29 11:30:42 2006
From: zooko at zooko.com (zooko at zooko.com)
Date: Mon, 29 May 2006 14:30:42 -0300
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
Message-ID: <20060529173042.B61FC198A@yumyum.zooko.com>


Mark Miller (whose recently completed dissertation is available [1]), recently
summarized in one sentence why event-based concurrency is safer than
cooperative multithreading.  He said (quoting from memory): "The difference is
that in an event-based system, when you invoke a function and the function
returns, then you know that the only side-effects that could have happened are
side-effects that *that* function was authorized to cause."

Regards,

Zooko

[1] http://erights.org/talks/thesis/index.html



From acapnotic at twistedmatrix.com  Mon May 29 06:18:45 2006
From: acapnotic at twistedmatrix.com (Adan)
Date: Mon, 29 May 2006 12:18:45 -0000
Subject: [Twisted-Python] prOblems with meds expencies, you Are On right way
Message-ID: <2034175.20060529121845@twistedmatrix.com>

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060529/81dd172d/attachment.html>

From ml.flex at gmail.com  Mon May 29 12:54:47 2006
From: ml.flex at gmail.com (Micky Latowicki)
Date: Mon, 29 May 2006 20:54:47 +0200
Subject: [Twisted-Python] Flow, generators, coroutines etc.
In-Reply-To: <20060529173042.B61FC198A@yumyum.zooko.com>
References: <f278b2130605280345m5dac15en49059c3a941e7fbc@mail.gmail.com>
	<20060529173042.B61FC198A@yumyum.zooko.com>
Message-ID: <d27002d90605291154k3f6db867h7e88b890053cc730@mail.gmail.com>

Hmm, but it's precisely the same with python generators. If you yield, then
anything can happen by the time the function returns (same as with a
addCallback - anything can happen between adding the callback and the time
it's called). If you don't yield, but simply call a function, then only
those function's side effects can occur.

That's because a function called by a generator cannot yield on behalf of
that generator. I didn't appreciate that as a good thing until now, but now
I do.

On 29/05/06, zooko at zooko.com <zooko at zooko.com> wrote:
>
>
> Mark Miller (whose recently completed dissertation is available [1]),
> recently
> summarized in one sentence why event-based concurrency is safer than
> cooperative multithreading.  He said (quoting from memory): "The
> difference is
> that in an event-based system, when you invoke a function and the function
> returns, then you know that the only side-effects that could have happened
> are
> side-effects that *that* function was authorized to cause."
>
> Regards,
>
> Zooko
>
> [1] http://erights.org/talks/thesis/index.html
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060529/4ac3a954/attachment.html>

From general at eepatents.com  Mon May 29 15:46:29 2006
From: general at eepatents.com (Ed Suominen)
Date: Mon, 29 May 2006 14:46:29 -0700
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
Message-ID: <447B6BB5.6000208@eepatents.com>

Glyph wrote:
> syncbridge looks like an interesting module.  I've often wanted to do
> something similar, to have a "one right way" for integrating with
> non-async-clean legacy code which also doesn't necessarily support
> threaded concurrency either.
> 
> However, I notice that nothing sets up the 'shutdown' method to be
> called on reactor shutdown automatically; this is a very tricky area,
> since mismanaged thread-pool shutdown can lock a process up hard as
> it's exiting.
> 
> Also, have you considered just using a twisted.python.threadpool of
> maximum size 1, rather than callInThread?  The main reason I didn't
> document that as the aforementioned "one right way" was because of
> the associated shutdown issues.  The major advantage of callInThread
> is that the reactor's own threadpool is definitely initialized and
> shut down at predictable points.

Well of course, Glyph's "interesting module" comment was just enough of
a table scrap to get me running, tail wagging furiously. The result
(unit testing in progress) is a full-fledged SynchronousTasks object
that runs a priority queue of synchronous tasks with niceness
scheduling. See

* http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
* http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py

Once fully tested, would SynchronousTasks be considered as an addition
to twisted.internet.threads?

Best regards, Ed



From exarkun at divmod.com  Mon May 29 16:44:01 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 29 May 2006 18:44:01 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16956 - Branch for 2518bis
	updates.
In-Reply-To: <E1FkpkS-00088F-00@wolfwood>
Message-ID: <20060529224401.28682.2098193512.divmod.quotient.7232@ohm>

On Mon, 29 May 2006 15:58:04 -0600, Wilfredo Sanchez <wsanchez at wolfwood.twistedmatrix.com> wrote:
>Author: wsanchez
>Date: Mon May 29 15:58:03 2006
>New Revision: 16956
>
>Added:
>   branches/wsanchez/bis/
>      - copied from r16955, trunk/
>Log:
>Branch for 2518bis updates.
>

We've stopped using per-user directories in the branches hierarchy.  Also, all branch names should be of the form <short descriptive name>-<ticket number>.

See http://divmod.org/trac/wiki/UltimateQualityDevelopmentSystem for documentation on the procedure that should be used for all Twisted development.

Jean-Paul




From glyph at divmod.com  Mon May 29 18:10:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 29 May 2006 20:10:10 -0400
Subject: svn maintenance,
	trac permissions (was Re: [Twisted-Python] Sydney Sprint)
In-Reply-To: <20060523013626.GD2204@steerpike.home.puzzling.org>
Message-ID: <20060530001010.28682.1106589697.divmod.quotient.7268@ohm>

On Tue, 23 May 2006 11:36:26 +1000, Andrew Bennetts <andrew-twisted at puzzling.org> wrote:
>On Tue, May 23, 2006 at 12:55:10AM +1000, Eric Mangold wrote:
>> I'm a little bit concerned about attendance for the June 3-4 Sydney
>> Sprint. The wiki page only lists two people:
>> http://twistedmatrix.com/trac/wiki/SydneySprint
>>
>> Unfortunately that page requires a trac login with edit permissions to
>> change, so I'm afraid some people have been unable to add themselves to
>> the list.
>
>Yep, that includes me.

Hmm.  Can everyone who should have wiki edit permissions please complain so that someone who knows how to add those will add them?  I've created a ticket, #1761, that you can all comment on to request them.

>> Would everyone attending be kind enough to reply to this thread?
>
>I'll be there, and so will Mary.

If I could make a request for the focus of this sprint:

There are a *LOT* of dead or dying branches in /branches, and a lot of tickets which have been outstanding for a very long time.  I'd appreciate it if everyone would focus some effort on killing off old branches, and resolving old tickets.  In particular I'd like to get rid of all old user directories and branches which do not include ticket numbers in their names; tracking down the status of those branches is always a pain.

I've gone through most of these and removed the ones whose tickets had already been resolved or were clearly merged already, but there are still a lot left, and I am missing lots of information.

If some folks are going to do this, I'll try to participate remotely in the sprint so if there are some required judgement calls I can make them ASAP rather than just sticking more questions in the tracker and waiting.

Obviously it's more fun to work on new functionality than this kind of maintenance, so no worries if you have specific plans and won't be doing this.  Still, I'd like it if our users could look at /branches and see only a list of things that were actually being worked on presently, rather than a bunch of one-off ideas which may or may not be active, from five days to two years ago.  It would also be easier to try to coordinate and plan releases.

I will more urgently request that this sprint not leave any *new*, unreviewed branches hanging around.  Again, I'll try to be available to do reviews so we don't create even more stagnant branches / tickets.

How do those of you who will be attending feel about this?



From jml at mumak.net  Mon May 29 18:17:34 2006
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 30 May 2006 10:17:34 +1000
Subject: svn maintenance,
	trac permissions (was Re: [Twisted-Python] Sydney Sprint)
In-Reply-To: <20060530001010.28682.1106589697.divmod.quotient.7268@ohm>
References: <20060523013626.GD2204@steerpike.home.puzzling.org>
	<20060530001010.28682.1106589697.divmod.quotient.7268@ohm>
Message-ID: <d06a5cd30605291717k32957699pd6ab82ef7496ed87@mail.gmail.com>

On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>
> Obviously it's more fun to work on new functionality than this kind of maintenance, so no worries if you have specific plans and won't be doing this.  Still, I'd like it if our users could look at /branches and see only a list of things that were actually being worked on presently, rather than a bunch of one-off ideas which may or may not be active, from five days to two years ago.  It would also be easier to try to coordinate and plan releases.
>
> I will more urgently request that this sprint not leave any *new*, unreviewed branches hanging around.  Again, I'll try to be available to do reviews so we don't create even more stagnant branches / tickets.
>
> How do those of you who will be attending feel about this?
>

Fine in principle.  However, as far as refactoring wait out of Trial,
well, my conviction is an arrow already in flight. I don't want to
underestimate the difficulty of that task and promise you something
that I won't be able to give.

That said,  I will try to spend some time cleaning up branches and the like.

jml



From matt at pollenation.net  Mon May 29 18:19:20 2006
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 30 May 2006 01:19:20 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447B6BB5.6000208@eepatents.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
	<447B6BB5.6000208@eepatents.com>
Message-ID: <447B8F88.9030907@pollenation.net>

Ed Suominen wrote:
> Glyph wrote:
>> syncbridge looks like an interesting module.  I've often wanted to do
>> something similar, to have a "one right way" for integrating with
>> non-async-clean legacy code which also doesn't necessarily support
>> threaded concurrency either.
[...]
> 
> Well of course, Glyph's "interesting module" comment was just enough of
> a table scrap to get me running, tail wagging furiously. The result
> (unit testing in progress) is a full-fledged SynchronousTasks object
> that runs a priority queue of synchronous tasks with niceness
> scheduling. See
> 
> * http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
> * http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py
> 
> Once fully tested, would SynchronousTasks be considered as an addition
> to twisted.internet.threads?

Just scanned through that module and the idea looks useful to me too.

In fact, AFAICT, it's basically the same technique I used for laxdb, 
<http://twistedmatrix.com/trac/browser/sandbox/mg/laxdb.py>.

One small comment, and it's totally untested ... I don't think an 
already empty SynchronousQueue can be shutdown because nothing will wake 
the processing loop in _workOnTasks.


- Matt


-- 
      __
     /  \__     Matt Goodall, Pollenation Internet Ltd
     \__/  \    w: http://www.pollenation.net
   __/  \__/    e: matt at pollenation.net
  /  \__/  \    t: +44 (0)113 2252500
  \__/  \__/
  /  \	       Any views expressed are my own and do not necessarily
  \__/          reflect the views of my employer.



From nealie at kobudo.homeunix.net  Tue May 30 03:12:09 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 11:12:09 +0200
Subject: [Twisted-Python] Upgrade Questions
Message-ID: <1148980329.1912.17.camel@server.home>

I'm in the process of upgrading the FreeBSD port of TwistedCore and I
have a couple of questions:

- The source distribution used to be hosted both on the
twistedmatrix.com and tmrc.mit.edu sites. It only seems to be on the
latter now. Is this true or is there another site I can add to the list
of master sites since it's always nice to allow the port system to try
other sites if one is down?

- There seems to be a problem while performing the install_lib phase of
the installation during byte compiling. I get the following:

byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
  File
"/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
    ???
    ^
SyntaxError: invalid syntax

There actually appears to be a "???" on this line.

Regards,

Neal Nelson.




From nealie at kobudo.homeunix.net  Tue May 30 03:42:55 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 11:42:55 +0200
Subject: [Twisted-Python] Another upgrade question: PB
Message-ID: <1148982175.1912.27.camel@server.home>

I have another quick question about the new 2.4.0 release of
TwistedCore: What happened to the pb directory and it's contents as it
seems to have been removed from the distribution? Should I be worrying
about this?

Regards,

Neal Nelson.




From dominic.fox at gmail.com  Tue May 30 06:13:47 2006
From: dominic.fox at gmail.com (Dominic Fox)
Date: Tue, 30 May 2006 12:13:47 +0000
Subject: [Twisted-Python] Re: Flow, generators, coroutines etc.
Message-ID: <f278b2130605300513u18ab59dfn5a0acf4ff26acc2@mail.gmail.com>

This just in...

http://lambda-the-ultimate.org/node/1520

"Narrative Javascript is an extension to Javascript that adds an
operator to convert asynchronous operations into synchronous ones. It
has a compiler that compiles the extended Javascript into normal
Javascript."

Dominic



From itamar at itamarst.org  Tue May 30 06:19:08 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 08:19:08 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148980329.1912.17.camel@server.home>
References: <1148980329.1912.17.camel@server.home>
Message-ID: <1148991548.5483.3.camel@localhost.localdomain>

On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:

> - There seems to be a problem while performing the install_lib phase of
> the installation during byte compiling. I get the following:
> 
> byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
>   File
> "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
>     ???
>     ^
> SyntaxError: invalid syntax

I think this is fixed in trunk.

Channeling James, who is off on his honeymoon: we should have release
candidates.





From nealie at kobudo.homeunix.net  Tue May 30 06:34:49 2006
From: nealie at kobudo.homeunix.net (Nealie)
Date: Tue, 30 May 2006 14:34:49 +0200
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148991548.5483.3.camel@localhost.localdomain>
References: <1148980329.1912.17.camel@server.home>
	<1148991548.5483.3.camel@localhost.localdomain>
Message-ID: <1148992489.1912.69.camel@server.home>

On Tue, 2006-05-30 at 08:19 -0400, Itamar Shtull-Trauring wrote:
> On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:
> 
> > - There seems to be a problem while performing the install_lib phase of
> > the installation during byte compiling. I get the following:
> > 
> > byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
> >   File
> > "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
> >     ???
> >     ^
> > SyntaxError: invalid syntax
> 
> I think this is fixed in trunk.
> 
> Channeling James, who is off on his honeymoon: we should have release
> candidates.

I suppose what I need to know is: will there be a fixed release or
should I just go and submit my port changes and live with the error so
that people using FreeBSD can use it?




From radix at twistedmatrix.com  Tue May 30 06:47:51 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 08:47:51 -0400
Subject: [Twisted-Python] Another upgrade question: PB
In-Reply-To: <1148982175.1912.27.camel@server.home>
References: <1148982175.1912.27.camel@server.home>
Message-ID: <60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>

On 5/30/06, Nealie <nealie at kobudo.homeunix.net> wrote:
> I have another quick question about the new 2.4.0 release of
> TwistedCore: What happened to the pb directory and it's contents as it
> seems to have been removed from the distribution? Should I be worrying
> about this?

twisted.pb was not meant to be included in the last release, as it is
still experimental. Separate releases of PB will be made until it is
deemed ready to be packaged with the main Twisted release, and one has
already been made. Another one needs to go out soon for compatibility
with 2.4.0; keep your eyes peeled.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From radix at twistedmatrix.com  Tue May 30 06:59:50 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 08:59:50 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <1148991548.5483.3.camel@localhost.localdomain>
References: <1148980329.1912.17.camel@server.home>
	<1148991548.5483.3.camel@localhost.localdomain>
Message-ID: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>

On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
> On Tue, 2006-05-30 at 11:12 +0200, Nealie wrote:
>
> > - There seems to be a problem while performing the install_lib phase of
> > the installation during byte compiling. I get the following:
> >
> > byte-compiling /var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py to stdio_test_halfclose.pyc
> >   File
> > "/var/tmp/port-name/lib/python2.4/site-packages/twisted/test/stdio_test_halfclose.py", line 20
> >     ???
> >     ^
> > SyntaxError: invalid syntax
>
> I think this is fixed in trunk.
>
> Channeling James, who is off on his honeymoon: we should have release
> candidates.

An RC would not have mattered; a highest-priority bug would have. This
was known even as we were doing the release, but was deemed
unimportant.


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From exarkun at divmod.com  Tue May 30 07:02:45 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 09:02:45 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16970 - removed a bunch of
 deprecations but
 then realized I didn't want to spend the last 30 minutes of the
 day working on this
In-Reply-To: <E1FkuqL-0008Md-00@wolfwood>
Message-ID: <20060530130245.28682.1812769441.divmod.quotient.7518@ohm>

On Mon, 29 May 2006 21:24:29 -0600, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
>Author: glyph
>Date: Mon May 29 21:24:28 2006
>New Revision: 16970
>
>Modified:
> [snip]
>   branches/killtpc-1636/twisted/spread/banana.py
>   branches/killtpc-1636/twisted/test/test_banana.py
> [snip]
>Log:
>removed a bunch of deprecations but then realized I didn't want to spend the last 30 minutes of the day working on this
>
> [snip]
>Modified: branches/killtpc-1636/twisted/spread/banana.py
>==============================================================================
>--- branches/killtpc-1636/twisted/spread/banana.py	(original)
>+++ branches/killtpc-1636/twisted/spread/banana.py	Mon May 29 21:24:28 2006
>@@ -255,20 +255,21 @@
>             write(LIST)
>             for elem in obj:
>                 self._encode(elem, write)
>-        elif isinstance(obj, types.IntType):
>-            if obj >= 0:
>-                int2b128(obj, write)
>-                write(INT)
>+        elif isinstance(obj, (types.IntType, types.LongType)):
>+            aobj = abs(obj)
>+            if aobj < (2**32): # this is lame, but it's what the protocol
>+                               # spec says.
>+                if obj >= 0:
>+                    typebyte = INT
>+                else:
>+                    typebyte = NEG
>             else:
>-                int2b128(-obj, write)
>-                write(NEG)
>-        elif isinstance(obj, types.LongType):
>-            if obj >= 0l:
>-                int2b128(obj, write)
>-                write(LONGINT)
>-            else:
>-                int2b128(-obj, write)
>-                write(LONGNEG)
>+                if obj >= 0:
>+                    typebyte = LONGINT
>+                else:
>+                    typebyte = LONGNEG
>+            int2b128(aobj, write)
>+            write(typebyte)
>         elif isinstance(obj, types.FloatType):
>             write(FLOAT)
>             write(struct.pack("!d", obj))
>
> [snip]
>Modified: branches/killtpc-1636/twisted/test/test_banana.py
>==============================================================================
>--- branches/killtpc-1636/twisted/test/test_banana.py	(original)
>+++ branches/killtpc-1636/twisted/test/test_banana.py	Mon May 29 21:24:28 2006
>@@ -134,7 +134,21 @@
>         self.enc.dataReceived(self.io.getvalue())
>         assert self.result == -2147483648, "should be -2147483648, got %s" % self.result
>
>-
>+    def _roundtrip(self, value):
>+        self.io.seek(0)
>+        self.io.truncate()
>+        self.enc.sendEncoded(value)
>+        self.enc.dataReceived(self.io.getvalue())
>+        return self.result
>+
>+    def testSizedIntegerTypes(self):
>+        # use int to decode int, long to decode long.
>+        self.assertEquals(type(self._roundtrip(2l)), int)
>+        # this should always come back as a 'long' even on 64-bit platforms,
>+        # because it was encoded that way.  Kind of a lame test, but at least
>+        # it makes sure that <64bit numbers won't be encoded as INT...
>+        self.assertEquals(type(self._roundtrip(2**35)), long)
>+
> testCases = [MathTestCase, BananaTestCase]
>
> try:
>

These changes don't look like the others.



From exarkun at divmod.com  Tue May 30 07:04:22 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 09:04:22 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16971 - Fix name conflict
 between conch and legacy manhole plugins.
In-Reply-To: <E1Fkuwn-0008NS-00@wolfwood>
Message-ID: <20060530130422.28682.1337174147.divmod.quotient.7520@ohm>

On Mon, 29 May 2006 21:31:09 -0600, Glyph Lefkowitz <glyph at wolfwood.twistedmatrix.com> wrote:
>Author: glyph
>Date: Mon May 29 21:31:08 2006
>New Revision: 16971
>
>Modified:
>   trunk/twisted/plugins/twisted_manhole.py
>Log:
>Fix name conflict between conch and legacy manhole plugins.
>
>'mktap manhole' would non-deterministically give you a different plugin
>sometimes, due to the fact that the old manhole tap plugin had the same name.
>
>This changes the old manhole plugin's name to "manhole-old", since the title
>already said (old).  This fixes the name conflict.
>

Author!  Reviewer!  Ticket number!

Jean-Paul



From moof at metamoof.net  Tue May 30 07:06:22 2006
From: moof at metamoof.net (Moof)
Date: Tue, 30 May 2006 15:06:22 +0200
Subject: [Twisted-Python] Another upgrade question: PB
In-Reply-To: <60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>
References: <1148982175.1912.27.camel@server.home>
	<60ed19d40605300547h5b848dectd7e8dbca3ef17c15@mail.gmail.com>
Message-ID: <bff8eeef0605300606t69687726jc7a4af28fcef4a8a@mail.gmail.com>

On 5/30/06, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> On 5/30/06, Nealie <nealie at kobudo.homeunix.net> wrote:
> > I have another quick question about the new 2.4.0 release of
> > TwistedCore: What happened to the pb directory and it's contents as it
> > seems to have been removed from the distribution? Should I be worrying
> > about this?
>
> twisted.pb was not meant to be included in the last release, as it is
> still experimental. Separate releases of PB will be made until it is
> deemed ready to be packaged with the main Twisted release, and one has
> already been made. Another one needs to go out soon for compatibility
> with 2.4.0; keep your eyes peeled.

You can keep using the old vesion of pb in twisted.spread.pb, as
twisted.pb is still not stable.

Moof



From scalet at yebu.de  Tue May 30 09:05:08 2006
From: scalet at yebu.de (scalet at yebu.de)
Date: Tue, 30 May 2006 17:05:08 +0200 (CEST)
Subject: [Twisted-Python] twisted and PyQt4
Message-ID: <27393.80.246.32.40.1149001508.squirrel@yebu.de>

Hi,

it seems to me, there is no reactor for PyQt4 yet.
What is the preferred way to have a PyQt4 application
using the famous twisted framework for networking.

Thanks for any hints.

Karl





From exarkun at divmod.com  Tue May 30 09:24:11 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 30 May 2006 11:24:11 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <27393.80.246.32.40.1149001508.squirrel@yebu.de>
Message-ID: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>

On Tue, 30 May 2006 17:05:08 +0200 (CEST), scalet at yebu.de wrote:
>Hi,
>
>it seems to me, there is no reactor for PyQt4 yet.
>What is the preferred way to have a PyQt4 application
>using the famous twisted framework for networking.
>
>Thanks for any hints.

Someone will have to write one.  Qt4 has numerous improvements which
should make it possible to write a reasonable reactor, instead of a
shambling horror (like the existing Qt reactor).

However, I don't use Qt myself, and I don't know any Twisted developers
who do.  If there are a sufficient number of Twisted users who are
interested in this, it may be possible to add support.  One way of
demonstrating that there is enough interest would be to have someone
donate a buildslave to run tests with Qt.  This would be easier for
PyQt4 than it is for the current Qt reactor, since PyQt4 won't
necessarily require an X11 server to run the test suite.

Jean-Paul



From matt at pollenation.net  Tue May 30 09:31:42 2006
From: matt at pollenation.net (Matt Goodall)
Date: Tue, 30 May 2006 16:31:42 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447B6BB5.6000208@eepatents.com>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>
	<447B6BB5.6000208@eepatents.com>
Message-ID: <447C655E.2060400@pollenation.net>

Ed Suominen wrote:

> Well of course, Glyph's "interesting module" comment was just enough of
> a table scrap to get me running, tail wagging furiously. The result
> (unit testing in progress) is a full-fledged SynchronousTasks object
> that runs a priority queue of synchronous tasks with niceness
> scheduling. See
> 
> * http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
> * http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py

I was going to post again last night about how the PriorityQueue.get()
would never block once something had been put() into it, but I see
you've fixed that bug by clearing the event semaphore. Unfortunately,
the code now has a race condition.

If the SynchronousQueue._workOnTasks thread is pre-empted in
PriorityQueue.get() between "if self.empty():" and "self.event.clear()",
and another thread calls PriorityQueue.put() then the event semaphore
set during put() will be cleared when get() continues.

OK, that was horrible to write so here's a picture instead ;-) ...

Thread 1                                Thread 2

# Calls get()
self.event.wait()
result = heapq.heappop(self.list)
if self.empty():

<------------------ Thread 2 preempts Thread 1 ---------------------->

                                       # Calls put()
                                       heapq.heappush(self.list, item)
                                       self.event.set()

<---------------------- Thread 1 continues -------------------------->

    self.event.clear()


PriorityQueue should probably be using a Condition to protect access to
the heapq list *and* wait for something to be posted to it. See
<http://docs.python.org/lib/condition-objects.html>.


Cheers, Matt


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.



From glyph at divmod.com  Tue May 30 10:09:50 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:09:50 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16970 - removed a bunch of
In-Reply-To: <20060530130245.28682.1812769441.divmod.quotient.7518@ohm>
Message-ID: <20060530160950.28682.525688745.divmod.quotient.7637@ohm>

On Tue, 30 May 2006 09:02:45 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Mon, 29 May 2006 21:24:29 -0600, Glyph Lefkowitz 
><glyph at wolfwood.twistedmatrix.com> wrote:

>These changes don't look like the others.

Yeah, I noticed that after I checked in, but those already got attached as a patch to a different ticket.  I'm sure they'll be removed in some forward merge, or after review.



From glyph at divmod.com  Tue May 30 10:12:27 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:12:27 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r16971 - Fix name conflict
In-Reply-To: <20060530130422.28682.1337174147.divmod.quotient.7520@ohm>
Message-ID: <20060530161227.28682.144485516.divmod.quotient.7638@ohm>



On Tue, 30 May 2006 09:04:22 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:

>Author!  Reviewer!  Ticket number!

Hmm.  I could swear I put those in the commit message, maybe I put them below some fateful line?

I've updated the ticket to note that revision.

Author: glyph
Reviewer: moonfallen
Fixes #1658




From glyph at divmod.com  Tue May 30 10:14:04 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 12:14:04 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
Message-ID: <20060530161404.28682.413529033.divmod.quotient.7640@ohm>

On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:
>On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:

>>Channeling James, who is off on his honeymoon: we should have release
>>candidates.

>An RC would not have mattered; a highest-priority bug would have. This
>was known even as we were doing the release, but was deemed
>unimportant.

An RC would have given the packager an opportunity to complain about this and increase the priority of the bug to highest.  I agree with james-via-itamar.



From rudy at goldenhelix.com  Tue May 30 10:14:45 2006
From: rudy at goldenhelix.com (Gabe Rudy)
Date: Tue, 30 May 2006 10:14:45 -0600
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
Message-ID: <200605301014.45911.rudy@goldenhelix.com>

> Someone will have to write one.  Qt4 has numerous improvements which
> should make it possible to write a reasonable reactor, instead of a
> shambling horror (like the existing Qt reactor).

I use twisted with a pyQt4 app, so I created a more or less functional port of 
the current qt recator to qt4. I have attached it for anybody who needs a 
quick fix, but I don't claim to have taken advantage of Qt4's cleaner 
architecture and many improvements but I have tested it on both windows and 
linux and it seems to work ok. You are right that there should be a GUI and 
non-GUI qt4 reactor options and it may not even be that hard to code if 
someone has the time and the tests.

--gabe
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qt4reactor.py
Type: application/x-python
Size: 5201 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20060530/44702803/attachment-0002.bin>

From radix at twistedmatrix.com  Tue May 30 10:40:42 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 12:40:42 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <20060530161404.28682.413529033.divmod.quotient.7640@ohm>
References: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
	<20060530161404.28682.413529033.divmod.quotient.7640@ohm>
Message-ID: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>

On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
> On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:
> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>
> >>Channeling James, who is off on his honeymoon: we should have release
> >>candidates.
>
> >An RC would not have mattered; a highest-priority bug would have. This
> >was known even as we were doing the release, but was deemed
> >unimportant.
>
> An RC would have given the packager an opportunity to complain about this and increase the priority of the bug to highest.  I agree with james-via-itamar.

Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
Neal, you should ignore this harmless error.

-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From eprparadocs at gmail.com  Tue May 30 10:51:51 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Tue, 30 May 2006 12:51:51 -0400
Subject: [Twisted-Python] Shutting down an XMLRPC server remotely - how?
In-Reply-To: <4479018B.7060503@eepatents.com>
References: <4479018B.7060503@eepatents.com>
Message-ID: <447C7827.60008@gmail.com>

I am rather new to Twisted. I am starting to build my first XMLRPC
server and would like a way to shut it down remotely. Is there a way to
do that?

TIA,
Chaz



From scalet at yebu.de  Tue May 30 10:52:28 2006
From: scalet at yebu.de (scalet at yebu.de)
Date: Tue, 30 May 2006 18:52:28 +0200 (CEST)
Subject: [Twisted-Python] twisted and PyQt4
Message-ID: <29878.80.246.32.40.1149007948.squirrel@yebu.de>

Hi Gabe,

thank you very much for the modified qtreactor

and jp for the answer

Karl





From glyph at divmod.com  Tue May 30 11:05:15 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 13:05:15 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
Message-ID: <20060530170515.28682.1040635737.divmod.quotient.7680@ohm>



On Tue, 30 May 2006 12:40:42 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:

>Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
>Neal, you should ignore this harmless error.

OK.  Perhaps all an RC would have done in this case would have allowed this *particular* exchange to take place pre-release :).  Still, we should have 'em.



From itamar at itamarst.org  Tue May 30 12:19:42 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 14:19:42 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301014.45911.rudy@goldenhelix.com>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
Message-ID: <1149013182.5737.4.camel@localhost.localdomain>

On Tue, 2006-05-30 at 10:14 -0600, Gabe Rudy wrote:
> > Someone will have to write one.  Qt4 has numerous improvements which
> > should make it possible to write a reasonable reactor, instead of a
> > shambling horror (like the existing Qt reactor).
> 
> I use twisted with a pyQt4 app, so I created a more or less functional port of 
> the current qt recator to qt4. I have attached it for anybody who needs a 
> quick fix, but I don't claim to have taken advantage of Qt4's cleaner 
> architecture and many improvements but I have tested it on both windows and 
> linux and it seems to work ok. You are right that there should be a GUI and 
> non-GUI qt4 reactor options and it may not even be that hard to code if 
> someone has the time and the tests.

Cool! Could you please open an issue in the tracker with this attached?




From itamar at itamarst.org  Tue May 30 12:40:10 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 30 May 2006 14:40:10 -0400
Subject: [Twisted-Python] Shutting down an XMLRPC server remotely - how?
In-Reply-To: <447C7827.60008@gmail.com>
References: <4479018B.7060503@eepatents.com>  <447C7827.60008@gmail.com>
Message-ID: <1149014411.5737.8.camel@localhost.localdomain>

On Tue, 2006-05-30 at 12:51 -0400, Chaz. wrote:
> I am rather new to Twisted. I am starting to build my first XMLRPC
> server and would like a way to shut it down remotely. Is there a way to
> do that?

Add an xml-rpc command called e.g. "shutdown" that does reactor.stop(). 

-- 
Itamar Shtull-Trauring
http://itamarst.org





From golux at comcast.net  Tue May 30 14:12:46 2006
From: golux at comcast.net (Stephen Waterbury)
Date: Tue, 30 May 2006 16:12:46 -0400
Subject: [Twisted-Python] PB and other distributed object protocols
Message-ID: <447CA73E.5090705@comcast.net>

Hi Gang,

Preface:  I'm not a protocol guru, or even a "distributed object" (DO)
guru, so this message is from the point of view of a DO novice looking for
insights from some of the twisted minions (/gurus) and other cybergods
who hang out here.

I've been monitoring Brian's work on newpb (PBng?), and I love
everything about it.  Except how long it's taking.  :(

Brian:  I know you have a real job, too, so I completely understand!
(Incidentally, you're the only one whose commit messages I save,
because they're always so well documented.)  I've read the TODO list,
and pretty much everything is beyond my abilities (and time) to
contribute to -- sorry! -- but is it possible to put any kind of
approximate timeline on some of it?

PB is what I really want to use for my project, but I need something
that's close to ready-for-prime-time, and I've been waiting literally
years for PB, so in the meantime I'm looking at other candidates.
I would definitely prefer a "twistable" technology -- i.e., one for
which some kind of async adapter can be written from twisted -- and
also one that has bindings for other languages (mainly Java, since
my organization is Java-heavy).

I've dismissed the idea of CORBA -- although one or more
of the python orbs is probably twistable, CORBA has such a negative
image that I'd probably have to lie about using it, and it does
have lots of weird baggage.

[Aside:  I always liked Bill Janssen's ILU (how could you not like a
distributed object system that had bindings for both python and
lisp??) and I was sad to see it go.  Interesting that Bill is
now in the Python community.]

Over the weekend I read the docs for ICE (http://www.zeroc.com/),
sort of a streamlined, WAN-optimized CORBA.  It has nice features,
and even support for (threaded) async operations which seems
(to my novice understanding) twistable.  But its type system and
python binding seem very unpythonic to me, based on lots of C++-isms,
etc.  Ugh.

I just today discovered "json-rpc", which looks pretty cool.
I currently use xml-rpc in my twisted app, and I've thought that
json would be a neat replacement for xml (more concise + very
pythonic syntax so probably *way* more efficient python
marshalling/unmarshalling).  And someone finally did it -- great!
Has anyone here experimented with it?  Anyone thought
about twistifying it?  If not, I might take a stab (I'd start
by looking at what Itamar [I think] did with xml-rpc).

Cheers,
Steve



From rudy at goldenhelix.com  Tue May 30 15:13:30 2006
From: rudy at goldenhelix.com (Gabe Rudy)
Date: Tue, 30 May 2006 15:13:30 -0600
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <1149013182.5737.4.camel@localhost.localdomain>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
	<1149013182.5737.4.camel@localhost.localdomain>
Message-ID: <200605301513.31116.rudy@goldenhelix.com>

> Cool! Could you please open an issue in the tracker with this attached?
>

Alright it's ticket #1770 [1], although I must admit that I have lost a bit of 
confidence in the cacual coders (me) ability to contribute to Twisted as my 
previous attempt to post a patch[2] has been wholly ignored for a month, even 
after a bit of nagging. Maybe this is just the timeline in which people get 
around to things, or maybe this is a symptom to the everything has a 
branch/review/merge methodology.

[1] http://twistedmatrix.com/trac/ticket/1770
[2] http://twistedmatrix.com/trac/ticket/1324



From radix at twistedmatrix.com  Tue May 30 17:13:46 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 30 May 2006 19:13:46 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301513.31116.rudy@goldenhelix.com>
References: <20060530152411.28682.570244690.divmod.quotient.7605@ohm>
	<200605301014.45911.rudy@goldenhelix.com>
	<1149013182.5737.4.camel@localhost.localdomain>
	<200605301513.31116.rudy@goldenhelix.com>
Message-ID: <60ed19d40605301613n74108928x6727fa2b2c9a8fce@mail.gmail.com>

On 5/30/06, Gabe Rudy <rudy at goldenhelix.com> wrote:
> Alright it's ticket #1770 [1], although I must admit that I have lost a bit of
> confidence in the cacual coders (me) ability to contribute to Twisted as my
> previous attempt to post a patch[2] has been wholly ignored for a month, even
> after a bit of nagging. Maybe this is just the timeline in which people get
> around to things, or maybe this is a symptom to the everything has a
> branch/review/merge methodology.


Trust me, ticket response time has improved a *lot* since we've
switched to this development model. If we haven't responded to
previous tickets, it's because a) no developers with the expertise
required were available for review; b) the change is controversial or
incorrect, or c) the change didn't include sufficient unit tests.

Besides, I'm not sure why you're mentioning this, as you don't even
seem to be suggesting we include your qt reactor in Twisted since it's
untested and not using the new qt4 techniques. Or are you?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/



From glyph at divmod.com  Tue May 30 17:31:30 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:31:30 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <200605301513.31116.rudy@goldenhelix.com>
Message-ID: <20060530233130.28682.167195106.divmod.quotient.7929@ohm>

On Tue, 30 May 2006 15:13:30 -0600, Gabe Rudy <rudy at goldenhelix.com> wrote:
>> Cool! Could you please open an issue in the tracker with this attached?
>>
>
>Alright it's ticket #1770 [1], although I must admit that I have lost a bit of
>confidence in the cacual coders (me) ability to contribute to Twisted as my
>previous attempt to post a patch[2] has been wholly ignored for a month, even
>after a bit of nagging. Maybe this is just the timeline in which people get
>around to things, or maybe this is a symptom to the everything has a
>branch/review/merge methodology.

>[1] http://twistedmatrix.com/trac/ticket/1770
>[2] http://twistedmatrix.com/trac/ticket/1324

My apologies.  These both look like pretty good reports and they should be reviewed soon.

As far as the process being the bottleneck - it's not the process, we just don't have enough manpower.  There are currently 619 open tickets in Twisted, and only 11 maintainers.  We're overwhelmed.  New tickets can't always get the attention they deserve.  This isn't particular to Twisted's process - your tickets would require review in pretty much any open source project.

(BTW, reviewers; if you are reviewing patches from external contributors, you *don't* need to create branches first.  If the branch passes review, simply comment on the ticket and reference it in the commit message.)

The easiest way to get a branch reviewed is to look for a reviewer on #twisted on Freenode in real-time.  If you make a point of mentioning that your code already includes test-cases, it will probably get reviewed faster.

If you want to get your contributed feature-additions to get reviewed and merged REALLY fast, go through the tracker and write patches which fix existing bugs for a while.  You will have dedicated maintainers practically at your beck and call ;).



From glyph at divmod.com  Tue May 30 17:35:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:35:11 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <60ed19d40605301613n74108928x6727fa2b2c9a8fce@mail.gmail.com>
Message-ID: <20060530233511.28682.1939829893.divmod.quotient.7933@ohm>



On Tue, 30 May 2006 19:13:46 -0400, Christopher Armstrong <radix at twistedmatrix.com> wrote:

>Trust me, ticket response time has improved a *lot* since we've
>switched to this development model.

That certainly seems to be the case, at least subjectively speaking - do we actually have any metrics on this though?  It'd be kind of neat to plot a graph.

>If we haven't responded to
>previous tickets, it's because a) no developers with the expertise
>required were available for review; b) the change is controversial or
>incorrect, or c) the change didn't include sufficient unit tests.

Generally it's (a), or that the ticket didn't even get noticed.  Trac generates a nonstop flood of email to dozens of people and I'm sure most of it gets deleted without being read.

>Besides, I'm not sure why you're mentioning this, as you don't even
>seem to be suggesting we include your qt reactor in Twisted since it's
>untested and not using the new qt4 techniques. Or are you?

He has *another* ticket which didn't get merged... (it has test cases even).  It was itamar who requested he put the qt stuff into the tracker.



From glyph at divmod.com  Tue May 30 17:37:55 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 30 May 2006 19:37:55 -0400
Subject: [Twisted-Python] twisted and PyQt4
In-Reply-To: <20060530233130.28682.167195106.divmod.quotient.7929@ohm>
Message-ID: <20060530233755.28682.481462361.divmod.quotient.7934@ohm>



On Tue, 30 May 2006 19:31:30 -0400, glyph at divmod.com wrote:

>If the branch passes review, 

D'oh.  Patch.  If the *patch* passes review.



From phil at bubblehouse.org  Tue May 30 22:16:12 2006
From: phil at bubblehouse.org (Phil Christensen)
Date: Wed, 31 May 2006 00:16:12 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
References: <60ed19d40605300559u3b69553bh68ee22edb94289e8@mail.gmail.com>
	<20060530161404.28682.413529033.divmod.quotient.7640@ohm>
	<60ed19d40605300940ud333df2qc7a913b58b6109a1@mail.gmail.com>
Message-ID: <B03CBB64-C3CE-400F-A2D2-570B3BF1FE93@bubblehouse.org>

On May 30, 2006, at 12:40 PM, Christopher Armstrong wrote:
> On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>> On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong  
>> <radix at twistedmatrix.com> wrote:
>> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>> An RC would have given the packager an opportunity to complain  
>> about this and increase the priority of the bug to highest.  I  
>> agree with james-via-itamar.
>
> Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
> Neal, you should ignore this harmless error.

I would like to interject about a potential issue here, that I  
mentioned in ticket #1740.

This typo prevents debian systems from byte-compiling the site  
packages directory during APT's installation process. This in turn  
prevents python-related packages from being installed sucessfully  
until the typo is removed.

Personally, I run into this issue constantly, and I know that if I  
had encountered it when I wasn't as familiar with debian, I could  
have spent a lot of time trying to figure it out.

just my two cents...

-phil



From exarkun at divmod.com  Tue May 30 23:58:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 31 May 2006 01:58:23 -0400
Subject: [Twisted-Python] Upgrade Questions
In-Reply-To: <B03CBB64-C3CE-400F-A2D2-570B3BF1FE93@bubblehouse.org>
Message-ID: <20060531055823.28682.101710531.divmod.quotient.8173@ohm>

On Wed, 31 May 2006 00:16:12 -0400, Phil Christensen <phil at bubblehouse.org> wrote:
>On May 30, 2006, at 12:40 PM, Christopher Armstrong wrote:
>>On 5/30/06, glyph at divmod.com <glyph at divmod.com> wrote:
>>>On Tue, 30 May 2006 08:59:50 -0400, Christopher Armstrong 
>>><radix at twistedmatrix.com> wrote:
>>> >On 5/30/06, Itamar Shtull-Trauring <itamar at itamarst.org> wrote:
>>>An RC would have given the packager an opportunity to complain  about this 
>>>and increase the priority of the bug to highest.  I  agree with james-via- 
>>>itamar.
>>
>>Let me say this, then: I don't plan on doing a 2.4.1 for this issue;
>>Neal, you should ignore this harmless error.
>
>I would like to interject about a potential issue here, that I  mentioned in 
>ticket #1740.
>
>This typo prevents debian systems from byte-compiling the site  packages 
>directory during APT's installation process. This in turn  prevents python- 
>related packages from being installed sucessfully  until the typo is 
>removed.
>
>Personally, I run into this issue constantly, and I know that if I  had 
>encountered it when I wasn't as familiar with debian, I could  have spent a 
>lot of time trying to figure it out.
>
>just my two cents...
>
>-phil
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From igor at tyumbit.ru  Wed May 31 02:30:27 2006
From: igor at tyumbit.ru (Igor Prischepoff)
Date: Wed, 31 May 2006 14:30:27 +0600
Subject: [Twisted-Python] twisted WORDS and ICQ connect throug http proxy
Message-ID: <20060531083028.05EAC2E020@gw.tyumbit.ru>

Hello,
I'm trying to connect to icq.
..\Lib\site-packages\TwistedDocs\examples\oscardemo.py 
gives me following messages:
...
Unhandled error in Deferred:
Traceback (most recent call last):
Failure: twisted.internet.error.TCPTimedOutError: TCP connection timed out:
10060: Unknown error.
...

when looking in my icq pro 2003 setup I've noticed that we use http proxy
here in office.
so how can I modify oscardemo.py just to connect to icq?
I've got environment variable
http_proxy=http://digits.digits.digits:digits_port_number

Other network based utilities (perl for example) recognize this variable and
use this proxy.
Can oscardemo.py use proxy as well?


---
Igor
igor at tyumbit.ru





From carl.lambert at waveworks.co.uk  Wed May 31 03:33:10 2006
From: carl.lambert at waveworks.co.uk (Carl Lambert)
Date: Wed, 31 May 2006 10:33:10 +0100
Subject: [Twisted-Python] ping with twisted
Message-ID: <447D62D6.5010604@waveworks.co.uk>

Hi,

Im writing a simple network monitoring system for my internal work 
network. ive got most of it sussed.. snmp, port probs etc.. but im 
strugling when it comes to pinging the boxes.. is there a simple way to 
do this? if not what would be the best way of going about it?

Thanks Carl



From jadestorm at nc.rr.com  Wed May 31 06:26:42 2006
From: jadestorm at nc.rr.com (Daniel Henninger)
Date: Wed, 31 May 2006 08:26:42 -0400
Subject: [Twisted-Python] twisted WORDS and ICQ connect throug http proxy
In-Reply-To: <20060531083028.05EAC2E020@gw.tyumbit.ru>
References: <20060531083028.05EAC2E020@gw.tyumbit.ru>
Message-ID: <4EDFAAEB-61C6-40A7-A39A-64F589DCFE88@nc.rr.com>

The upgraded version of oscar.py that I've been developing has socks5  
support in it, though it does not have http support as of yet.  I  
don't believe (and if anyone else knows better, please correct me)  
that the oscar.py that is included with TwistedWords right now has  
the functionality to make use of any proxy.  The reason why I'm not  
sure of this is that I'm not sure if there might be a way "as is" to  
wrap ClientCreator or something along those lines in a proxy handler  
that I'm not aware of.  (and if there is, someone please let me know,  
I've got a few folk who are interested in using an http proxy with  
oscar.py)  I simply haven't gotten around to it yet.  =/

Speaking of which, I really need to find some time to document what  
I've got, create some test cases, and submit an update to oscar.py.   
Considering how large it's gotten, I'm actually aiming to split it up  
into an oscar subdirectory.

Anyway, feel free to contact me directly with some questions if you'd  
like.

Daniel

On May 31, 2006, at 4:30 AM, Igor Prischepoff wrote:

> Hello,
> I'm trying to connect to icq.
> ..\Lib\site-packages\TwistedDocs\examples\oscardemo.py
> gives me following messages:
> ...
> Unhandled error in Deferred:
> Traceback (most recent call last):
> Failure: twisted.internet.error.TCPTimedOutError: TCP connection  
> timed out:
> 10060: Unknown error.
> ...
>
> when looking in my icq pro 2003 setup I've noticed that we use http  
> proxy
> here in office.
> so how can I modify oscardemo.py just to connect to icq?
> I've got environment variable
> http_proxy=http://digits.digits.digits:digits_port_number
>
> Other network based utilities (perl for example) recognize this  
> variable and
> use this proxy.
> Can oscardemo.py use proxy as well?
>
>
> ---
> Igor
> igor at tyumbit.ru
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From matt at pollenation.net  Wed May 31 08:10:43 2006
From: matt at pollenation.net (Matt Goodall)
Date: Wed, 31 May 2006 15:10:43 +0100
Subject: [Twisted-Python] Synchronous Code Fishbowl
In-Reply-To: <447C655E.2060400@pollenation.net>
References: <E1Fkl64-0004Lu-02@pyramid.twistedmatrix.com>	<447B6BB5.6000208@eepatents.com>
	<447C655E.2060400@pollenation.net>
Message-ID: <447DA3E3.6000801@pollenation.net>

Matt Goodall wrote:
> Ed Suominen wrote:
> 
> 
>>Well of course, Glyph's "interesting module" comment was just enough of
>>a table scrap to get me running, tail wagging furiously. The result
>>(unit testing in progress) is a full-fledged SynchronousTasks object
>>that runs a priority queue of synchronous tasks with niceness
>>scheduling. See
>>
>>* http://foss.eepatents.com/sAsync/browser/trunk/sasync/syncbridge.py
>>* http://foss.eepatents.com/sAsync/browser/trunk/test/syncbridge.py
> 
> 
> I was going to post again last night about how the PriorityQueue.get()
> would never block once something had been put() into it, but I see
> you've fixed that bug by clearing the event semaphore. Unfortunately,
> the code now has a race condition.
> 
> If the SynchronousQueue._workOnTasks thread is pre-empted in
> PriorityQueue.get() between "if self.empty():" and "self.event.clear()",
> and another thread calls PriorityQueue.put() then the event semaphore
> set during put() will be cleared when get() continues.
> 
> OK, that was horrible to write so here's a picture instead ;-) ...
> 
> Thread 1                                Thread 2
> 
> # Calls get()
> self.event.wait()
> result = heapq.heappop(self.list)
> if self.empty():
> 
> <------------------ Thread 2 preempts Thread 1 ---------------------->
> 
>                                        # Calls put()
>                                        heapq.heappush(self.list, item)
>                                        self.event.set()
> 
> <---------------------- Thread 1 continues -------------------------->
> 
>     self.event.clear()
> 
> 
> PriorityQueue should probably be using a Condition to protect access to
> the heapq list *and* wait for something to be posted to it. See
> <http://docs.python.org/lib/condition-objects.html>.

I notice you've updated syncbridge to use a Condition now. Looks better
to me, although there's another bug and an improvement suggestion.

First up is that it should be "while self.empty(): self.cv.wait()".

Whenever something is put on the queue notify() is always called to wake
a consumer thread. However, there may already be a consumer thread
tearing around a loop taking items from the queue and, critically, never
waiting until the queue is empty.

By the time the newly woken consumer thread actually calls heappop to
take an item the existing consumer thread may have emptied the queue.

Ths improvement suggestion is to put the conditional's release() in a
finally block to ensure it actually happens. (Why isn't the Condition
example in the documentation written expecting exceptions?)

Anyway, this all makes get() and put() look something like:


    def get(self):
        self.cv.acquire()
        try:
            while self.empty():
                self.cv.wait()
            return heapq.heappop(self.list)
        finally:
            self.cv.release()

    def put(self, item):
        self.cv.acquire()
        try:
            heapq.heappush(self.list, item)
            self.cv.notify()
        finally:
            self.cv.release()


After that, I think the queue implementation is ok.


And some people insist that threading is easy ;-).


- Matt


-- 
     __
    /  \__     Matt Goodall, Pollenation Internet Ltd
    \__/  \    w: http://www.pollenation.net
  __/  \__/    e: matt at pollenation.net
 /  \__/  \    t: +44 (0)113 2252500
 \__/  \__/
 /  \          Any views expressed are my own and do not necessarily
 \__/          reflect the views of my employer.




