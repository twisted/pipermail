From dstainton415 at gmail.com  Tue Oct  1 01:30:23 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 00:30:23 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
Message-ID: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>

Hi,

I'm trying to implement an IWriteDescriptor using raw sockets.
So far this is what I wrote... but it doesn't work:
https://github.com/david415/hushTCP/blob/master/hush_writer.py

Am I doing something obviously wrong here?

I certainly am able to use raw socket + scapy correctly without Twisted.


Cheers!

David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/0b8a5fd0/attachment.html>

From p.mayers at imperial.ac.uk  Tue Oct  1 01:54:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 01 Oct 2013 08:54:48 +0100
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
Message-ID: <524A7FC8.9050008@imperial.ac.uk>

On 10/01/2013 08:30 AM, David Stainton wrote:
>
> Hi,
>
> I'm trying to implement an IWriteDescriptor using raw sockets.
> So far this is what I wrote... but it doesn't work:
> https://github.com/david415/hushTCP/blob/master/hush_writer.py
>
> Am I doing something obviously wrong here?

I don't see you trying to add the raw socket to the reactor anywhere; 
typically you'll want to do at least reactor.addWriter(hush), but for a 
proper implementation there's more - see the IReactorFDSet docs.

You may want to look at the udp code in Twisted to see how this is done 
under the hood (although TBH it can be hard to follow!)



From dstainton415 at gmail.com  Tue Oct  1 02:05:47 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 01:05:47 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <524A7FC8.9050008@imperial.ac.uk>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
Message-ID: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>

I just now realized that my fileno() method was incorrect.
It now returns the descriptor instead of the python socket:
return self.socket.fileno()

I add the socket to the reactor in the constructor like this:
reactor.addWriter(self)
BTW is that OK? Or is it better to add it to the reactor outside of the
constructor?


On Tue, Oct 1, 2013 at 12:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 10/01/2013 08:30 AM, David Stainton wrote:
>
>>
>> Hi,
>>
>> I'm trying to implement an IWriteDescriptor using raw sockets.
>> So far this is what I wrote... but it doesn't work:
>> https://github.com/david415/**hushTCP/blob/master/hush_**writer.py<https://github.com/david415/hushTCP/blob/master/hush_writer.py>
>>
>> Am I doing something obviously wrong here?
>>
>
> I don't see you trying to add the raw socket to the reactor anywhere;
> typically you'll want to do at least reactor.addWriter(hush), but for a
> proper implementation there's more - see the IReactorFDSet docs.
>
> You may want to look at the udp code in Twisted to see how this is done
> under the hood (although TBH it can be hard to follow!)
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/e9db6ed4/attachment.html>

From _ at lvh.io  Tue Oct  1 02:13:28 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 1 Oct 2013 10:13:28 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
Message-ID: <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>

On Tue, Oct 1, 2013 at 12:59 AM, Glyph <glyph at twistedmatrix.com> wrote:


> Most of the code I can think of that wants to use that really wants the *
> transport* rather than the "protocol",
>

Yes, but having the protocol would also immediately give you access to the
transport, and, from what I understand in most cases of AMP, also
everything else :)


> but nothing within AMP itself actually uses those arguments; in fact,
> searching the usual suspects (epsilon, vertex) I can't even find any
> Arguments that use the 'proto' argument for anything useful.
>

I suppose it's too late to get "proto" to actually mean "proto" and not
"boxSender"? It would definitely be a backwards-incompatible change, and I
do actually have some code that somehow relied on it being the boxSender
(actually, I think I saved that code in txampext, mostly, except I renamed
that thing "proto").


> If I recall, I believe the idea behind it was to allow an AMP responder
> within Vertex to return the peer's IP address back to the peer, from within
> an authenticated AMP route that (because it was a route) wasn't necessarily
> connected directly to the transport (and therefore couldn't just do
> self.transport.getPeer()).  Ironically I don't think it'll actually work
> for that now :-).
>
> When we pull the authentication logic in from <
> http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>,
> you might write a responder that's interested in authentication information
> that lives in some other relation to the protocol.
>

I wrote very similar deep-in-AMP auth logic once, and did look at that code
(but ended up not using it because I use TLS, so I don't need hand-rolled
challenge response or OTP systems).

When you say "other relation to the protocol", does that mean "it can be
the protocol because the protocol will have some kind of reference to it"?


> So in order to fix fromBox/toBox, we need to do a fix that firms up that
> contract and perhaps exposes more than a Protocol object.  The
> *recommended* API should be more or less like what ExposingArgument is
> doing - specify an Argument that asks for a particular attribute of the
> transport or the protocol or the authentication context or whatever, the
> implementation details may involve other lower-level public APIs.
>

That still sounds like it can be done by making "proto" actually the proto
;-) So, basically, the question is if "proto" being the locator is a bug
that I can fix, or an interface that I can't.


> My contributions to AMP have been more of the defect-findy kind, but I
> could certainly turn them more into the code-contributy kind. I imagine I'm
> not the first person to want tests for command classes (
> https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or
> a nested AMP box (
> https://github.com/lvh/txampext/blob/master/txampext/nested.py).
>
>
> That would be cool.  And, you know, that auth thing I said :-).
>

If I can change "proto" to mean "actually the protocol not something else"
then that seems plenty easy to add, and it would definitely be cool if
people don't have to mess with this nonsense themselves for something as
ostensibly simple as having access to the protocol :-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/f1ae8a62/attachment-0001.html>

From p.mayers at imperial.ac.uk  Tue Oct  1 05:05:07 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 01 Oct 2013 12:05:07 +0100
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
 <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
Message-ID: <524AAC63.8090900@imperial.ac.uk>

On 01/10/13 09:05, David Stainton wrote:
>
> I just now realized that my fileno() method was incorrect.
> It now returns the descriptor instead of the python socket:
> return self.socket.fileno()
>
> I add the socket to the reactor in the constructor like this:
> reactor.addWriter(self)

Oops sorry didn't see that.

> BTW is that OK? Or is it better to add it to the reactor outside of the
> constructor?

I guess... it's not something most people do.


From marco.giusti at gmail.com  Tue Oct  1 05:19:29 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 1 Oct 2013 13:19:29 +0200
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
 <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
Message-ID: <20131001111929.GA24362@murdoc>

On Tue, Oct 01, 2013 at 01:05:47AM -0700, David Stainton wrote:
> I add the socket to the reactor in the constructor like this:
> reactor.addWriter(self)
> BTW is that OK? Or is it better to add it to the reactor outside of the
> constructor?

twisted.internet.stdio.StandardIO do that so it is not so bad.


From exarkun at twistedmatrix.com  Tue Oct  1 06:38:33 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 01 Oct 2013 12:38:33 -0000
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
Message-ID: <20131001123833.26068.579635392.divmod.xquotient.2518@top>

On 07:30 am, dstainton415 at gmail.com wrote:
>Hi,
>
>I'm trying to implement an IWriteDescriptor using raw sockets.
>So far this is what I wrote... but it doesn't work:
>https://github.com/david415/hushTCP/blob/master/hush_writer.py
>
>Am I doing something obviously wrong here?
>
>I certainly am able to use raw socket + scapy correctly without 
>Twisted.

Please describe the problem in more detail than "it doesn't work". >:) 
Your hush_writer.py is a good <http://sscce.org/> but it's still 
important to know how its behavior differs from your expectations.

As far as I can tell it does work - although there's one mistake that 
makes it a bit more inefficient than strictly necessary:

     def doWrite(self):
         if len(self.packets) > 0:
             self.socket.sendto(self.packets.pop(0), self.address)
         else:
             return

When you're out of packets you should remove the writer from the 
reactor.  This version of the code will perpetually dispatch writeable 
notification (in the form of a doWrite call) to your object as fast as 
possible.

Once you fix this, don't forget to re-add the writer as soon as 
len(self.packets) rises above 0 again.

Jean-Paul


From dstainton415 at gmail.com  Tue Oct  1 07:06:40 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 06:06:40 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <20131001123833.26068.579635392.divmod.xquotient.2518@top>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <20131001123833.26068.579635392.divmod.xquotient.2518@top>
Message-ID: <CAFN1edq4geiyeJ8jZy37zH8JdOg6zAzO=Vb=ZrK=Xod1cmqAag@mail.gmail.com>

Oh I was having trouble because my fileno() method was not returning the
correct descriptor. But I fixed it...

Thanks for the excellent suggestion for improving performance!
I've implemented that change. It works great!



On Tue, Oct 1, 2013 at 5:38 AM, <exarkun at twistedmatrix.com> wrote:

> On 07:30 am, dstainton415 at gmail.com wrote:
>
>> Hi,
>>
>> I'm trying to implement an IWriteDescriptor using raw sockets.
>> So far this is what I wrote... but it doesn't work:
>> https://github.com/david415/**hushTCP/blob/master/hush_**writer.py<https://github.com/david415/hushTCP/blob/master/hush_writer.py>
>>
>> Am I doing something obviously wrong here?
>>
>> I certainly am able to use raw socket + scapy correctly without Twisted.
>>
>
> Please describe the problem in more detail than "it doesn't work". >:)
> Your hush_writer.py is a good <http://sscce.org/> but it's still
> important to know how its behavior differs from your expectations.
>
> As far as I can tell it does work - although there's one mistake that
> makes it a bit more inefficient than strictly necessary:
>
>     def doWrite(self):
>         if len(self.packets) > 0:
>             self.socket.sendto(self.**packets.pop(0), self.address)
>         else:
>             return
>
> When you're out of packets you should remove the writer from the reactor.
>  This version of the code will perpetually dispatch writeable notification
> (in the form of a doWrite call) to your object as fast as possible.
>
> Once you fix this, don't forget to re-add the writer as soon as
> len(self.packets) rises above 0 again.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/8d34e670/attachment.html>

From donald at stufft.io  Tue Oct  1 19:21:38 2013
From: donald at stufft.io (Donald Stufft)
Date: Tue, 1 Oct 2013 21:21:38 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail" while
	another works
Message-ID: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>

I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).

I don't understand *why* though, why does the connectionReady dance make it work?

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/f51cc196/attachment.pgp>

From dstainton415 at gmail.com  Wed Oct  2 00:14:26 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 23:14:26 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
Message-ID: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>

Hi,

I am wondering how I should combine various twisted interfaces
in a way that makes sense. It probably shows here... that I'm new to
twisted.

The Linux iptables can log packets to the netfilter_log which can give
access to user space.
I wrote a simple twisted Reader (IReadDescriptor implementation) that is
working functional code...
https://gist.github.com/david415/6789612

But since these are packets it returns... should I implement a "read only
Protocol"?
The protocol's dataReceive() method could be called from the NFLogReader's
doRead() method.
Does this mean that NFLogReader would be responsible for calling
buildProtocol to construct the NFLogProtocol?
In the normal Twisted examples the buildProtocol seems to be called from
the react loop..
Should I pass the protocol factory and the reader to the service?

If I want to drop privileges right after retrieving the filedescriptor for
netfilter_log, shall I use a Twisted Service/Application to drop the root
privs to a non-superuser?
Should the privileges be dropped by the privilegedStartService() method?
The manual says that method is for preparing to drop services...

What I want out of all of this is the most high performance and general
solution to utilizing netfilter_log in twisted...


David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131001/f6c5e33d/attachment.html>

From p.mayers at imperial.ac.uk  Wed Oct  2 01:26:20 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 08:26:20 +0100
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
Message-ID: <524BCA9C.7030601@imperial.ac.uk>

On 10/02/2013 07:14 AM, David Stainton wrote:
> Hi,
>
> I am wondering how I should combine various twisted interfaces
> in a way that makes sense. It probably shows here... that I'm new to
> twisted.
>
> The Linux iptables can log packets to the netfilter_log which can give
> access to user space.
> I wrote a simple twisted Reader (IReadDescriptor implementation) that is
> working functional code...
> https://gist.github.com/david415/6789612
>
> But since these are packets it returns... should I implement a "read
> only Protocol"?

Well, if your transport is not writable, just don't implement that - 
Exceptions will be raised if you mistakenly try to write, so nothing bad 
will happen.

> The protocol's dataReceive() method could be called from the
> NFLogReader's doRead() method.

Since they're packets it should really be a DatagramProtocol and call 
datagramReceived.

> Does this mean that NFLogReader would be responsible for calling
> buildProtocol to construct the NFLogProtocol?

Typically a factory is responsible for calling buildProtocol, but in 
most datagram uses, there is only one protocol instance per port, so you 
just instantiate it. See e.g.

http://twistedmatrix.com/documents/current/core/howto/udp.html

> In the normal Twisted examples the buildProtocol seems to be called from
> the react loop..
> Should I pass the protocol factory and the reader to the service?

Sorry I don't know what this means.

>
> If I want to drop privileges right after retrieving the filedescriptor
> for netfilter_log, shall I use a Twisted Service/Application to drop the
> root privs to a non-superuser?

That would be the "Twisted" way of doing it, yes.

> Should the privileges be dropped by the privilegedStartService() method?
> The manual says that method is for preparing to drop services...
>
> What I want out of all of this is the most high performance and general
> solution to utilizing netfilter_log in twisted...

Couple of general points:

The nflog_cffi code is... hard to read. But it's not obvious to me that 
it sets the FD to nonblocking anywhere, or that it's (frankly weird) 
generator construct will actually yield the "nonblock" marker object at 
the right times. You might want to test this.

On a different note, a colleague wrote some code to process the IPQUEUE 
target of iptables a while back. This code did something similar to your 
example above, but it didn't bother integrating with the 
protocol/factory machinery, and you could consider whether it makes 
sense to do so - unlike a TCP or UDP port, you're unlikely to ever have 
 >1 nflog "connection" per-process, so it's not obvious that using the 
full generality of the factory/protocol machinery is appropriate.

However if you do that, I would just copy what Twisted does for UDP; 
don't model it on TCP.


From m-lists at the-moon.net  Wed Oct  2 01:32:10 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Wed, 2 Oct 2013 08:32:10 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
 <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
Message-ID: <CABefbUo-O1uXYRmDwBAfa_GTeoJGn0WOvDdJ-ZKMo4FcHtMNGg@mail.gmail.com>

On 30 September 2013 19:51, Hynek Schlawack <hs at ox.cx> wrote:
> Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:
> I have that on my todo-list since the beginning of time but never got around
> to it.
> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that
> is tracking this?
> Yes, I believe it?s https://bugs.launchpad.net/nevow/+bug/1091055

I started looking at this last week, but after discussing it in
#divmod, Tom pointed out that pydoctor (trunk) now uses
twisted.web.template instead of Nevow, so it would be a better use of
time to help mwh release a new version of Pydoctor on pypi.

That doesn't help people who actually want to use Nevow, but it should
make it a little simpler to set up a Twisted Development environment.

-RichardW.


From dstainton415 at gmail.com  Wed Oct  2 02:25:26 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Wed, 2 Oct 2013 01:25:26 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <524BCA9C.7030601@imperial.ac.uk>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
Message-ID: <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>

In examples of Twisted UDP clients they all do this:

reactor.listenUDP(3000, MyProtocol())

What would I do instead?
reactor.addReader makes sense to me since what I have is a file descriptor,
and the reactor loop and use select or epoll find out when there is data to
read...
and call our doRead() method of the Reader.

I don't know about implementing this as a Protocol because I do not have any
equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
And I'm not sure how a Transport is related to my Reader... but it seems to
me
that there is some abstraction which sets callbacks for io and also calls
buildProtocol...

Would a NFLogProtocol and factory like this be usable?
Sorta like this?
https://gist.github.com/david415/6790543

If I am going to be using a Twisted Service to drop privileges after
gaining access to the fd...
How would I do this? Would I have startService() instantiate a Protocol
instance?

I don't know about the nflog file descriptor...
but the nflog generator interface is non-blocking if used like this:

    def doRead(self):
        pkt = self.nflog.next()
        while True:
            self.handlePacket(pkt)
            pkt = self.nflog.send(True)
            if pkt is NFWouldBlock: break

My nflog reader seems to work great.


On Wed, Oct 2, 2013 at 12:26 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 10/02/2013 07:14 AM, David Stainton wrote:
>
>> Hi,
>>
>> I am wondering how I should combine various twisted interfaces
>> in a way that makes sense. It probably shows here... that I'm new to
>> twisted.
>>
>> The Linux iptables can log packets to the netfilter_log which can give
>> access to user space.
>> I wrote a simple twisted Reader (IReadDescriptor implementation) that is
>> working functional code...
>> https://gist.github.com/**david415/6789612<https://gist.github.com/david415/6789612>
>>
>> But since these are packets it returns... should I implement a "read
>> only Protocol"?
>>
>
> Well, if your transport is not writable, just don't implement that -
> Exceptions will be raised if you mistakenly try to write, so nothing bad
> will happen.
>
>
>  The protocol's dataReceive() method could be called from the
>> NFLogReader's doRead() method.
>>
>
> Since they're packets it should really be a DatagramProtocol and call
> datagramReceived.
>
>
>  Does this mean that NFLogReader would be responsible for calling
>> buildProtocol to construct the NFLogProtocol?
>>
>
> Typically a factory is responsible for calling buildProtocol, but in most
> datagram uses, there is only one protocol instance per port, so you just
> instantiate it. See e.g.
>
> http://twistedmatrix.com/**documents/current/core/howto/**udp.html<http://twistedmatrix.com/documents/current/core/howto/udp.html>
>
>
>  In the normal Twisted examples the buildProtocol seems to be called from
>> the react loop..
>> Should I pass the protocol factory and the reader to the service?
>>
>
> Sorry I don't know what this means.
>
>
>
>> If I want to drop privileges right after retrieving the filedescriptor
>> for netfilter_log, shall I use a Twisted Service/Application to drop the
>> root privs to a non-superuser?
>>
>
> That would be the "Twisted" way of doing it, yes.
>
>
>  Should the privileges be dropped by the privilegedStartService() method?
>> The manual says that method is for preparing to drop services...
>>
>> What I want out of all of this is the most high performance and general
>> solution to utilizing netfilter_log in twisted...
>>
>
> Couple of general points:
>
> The nflog_cffi code is... hard to read. But it's not obvious to me that it
> sets the FD to nonblocking anywhere, or that it's (frankly weird) generator
> construct will actually yield the "nonblock" marker object at the right
> times. You might want to test this.
>
> On a different note, a colleague wrote some code to process the IPQUEUE
> target of iptables a while back. This code did something similar to your
> example above, but it didn't bother integrating with the protocol/factory
> machinery, and you could consider whether it makes sense to do so - unlike
> a TCP or UDP port, you're unlikely to ever have >1 nflog "connection"
> per-process, so it's not obvious that using the full generality of the
> factory/protocol machinery is appropriate.
>
> However if you do that, I would just copy what Twisted does for UDP; don't
> model it on TCP.
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131002/d93e31d8/attachment-0001.html>

From p.mayers at imperial.ac.uk  Wed Oct  2 04:14:04 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 11:14:04 +0100
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
Message-ID: <524BF1EC.4070809@imperial.ac.uk>

On 02/10/13 09:25, David Stainton wrote:
>
> In examples of Twisted UDP clients they all do this:
>
> reactor.listenUDP(3000,MyProtocol())
>
> What would I do instead?
> reactor.addReader makes sense to me since what I have is a file descriptor,
> and the reactor loop and use select or epoll find out when there is data
> to read...
> and call our doRead() method of the Reader.
>
> I don't know about implementing this as a Protocol because I do not have any
> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
> And I'm not sure how a Transport is related to my Reader... but it seems
> to me
> that there is some abstraction which sets callbacks for io and also
> calls buildProtocol...

Sorry, maybe I was unclear: you were asking about protocols, so I was 
merely pointing out that *if* you were to use a protocol, you should 
copy the approach DatagramProtocol and udp.Port take.

However as I noted, it *might not* make sense to do this, if there's 
only ever going to be one socket listening on this "thing", your current 
approach might be fine.

> If I am going to be using a Twisted Service to drop privileges after
> gaining access to the fd...
> How would I do this? Would I have startService() instantiate a Protocol
> instance?

As above, it depends. If you're using Protocol instances, then yes. If 
not, then no.

Services are just things which start and stop; they may or may not use 
objects implementing the transport/factory/protocol pattern.

>
> I don't know about the nflog file descriptor...
> but the nflog generator interface is non-blocking if used like this:

Ok. Weird API, but if it works...

> My nflog reader seems to work great.

If it works for you, and you're using documented Twisted interfaces, 
then there's probably no need to fiddle with it.


From exarkun at twistedmatrix.com  Wed Oct  2 07:20:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Oct 2013 13:20:54 -0000
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
Message-ID: <20131002132054.26068.31139453.divmod.xquotient.2526@top>

On 01:21 am, donald at stufft.io wrote:
>I have two pieces of code (see: 
>https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in 
>that it fails verifying the host key like i'd expect) and one doesn't 
>("it never tries to verify the host key and just exists immediately).
>
>I don't understand *why* though, why does the connectionReady dance 
>make it work?

Where's the second piece of code?

Jean-Paul


From donald at stufft.io  Wed Oct  2 07:31:18 2013
From: donald at stufft.io (Donald Stufft)
Date: Wed, 2 Oct 2013 09:31:18 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
	while another works
In-Reply-To: <20131002132054.26068.31139453.divmod.xquotient.2526@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
Message-ID: <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>


On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:

> On 01:21 am, donald at stufft.io wrote:
>> I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).
>> 
>> I don't understand *why* though, why does the connectionReady dance make it work?
> 
> Where's the second piece of code?
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Both are in the gist, works.py and fails.py

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131002/39c1bcdf/attachment.pgp>

From _ at lvh.io  Wed Oct  2 07:31:38 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 2 Oct 2013 15:31:38 +0200
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <20131002132054.26068.31139453.divmod.xquotient.2526@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
Message-ID: <CAE_Hg6arTKbOFDLJ6767Uugza91GpWupXZ6+X6ZX0DmqzZc5ow@mail.gmail.com>

On Wed, Oct 2, 2013 at 3:20 PM, <exarkun at twistedmatrix.com> wrote:

> Where's the second piece of code?
>

The gist has two files in it.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131002/a9becf0a/attachment.html>

From exarkun at twistedmatrix.com  Wed Oct  2 08:00:51 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Oct 2013 14:00:51 -0000
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
Message-ID: <20131002140051.26068.646127389.divmod.xquotient.2535@top>

On 01:31 pm, donald at stufft.io wrote:
>
>On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:
>>On 01:21 am, donald at stufft.io wrote:
>>>I have two pieces of code (see: 
>>>https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in 
>>>that it fails verifying the host key like i'd expect) and one doesn't 
>>>("it never tries to verify the host key and just exists immediately).
>>>
>>>I don't understand *why* though, why does the connectionReady dance 
>>>make it work?
>>
>>Where's the second piece of code?
>>
>>Jean-Paul
>
>
>Both are in the gist, works.py and fails.py

Oops, sorry.  The second one disappeared when I clicked the "raw" link I 
guess.

In the first version, you `react` until `connectProtocol`'s Deferred 
fires.  That's immediately upon the TCP connection setup success - 
before any appreciable SSH happens.

In the second version, you `react` indefinitely (because 
`connectionReady` never fires) giving SSH ample time to handshake.

BTW, I'm not sure what you plan to do with this connection, but if you 
haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then 
you probably want to look.

Jean-Paul


From donald at stufft.io  Wed Oct  2 08:12:14 2013
From: donald at stufft.io (Donald Stufft)
Date: Wed, 2 Oct 2013 10:12:14 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
	while another works
In-Reply-To: <20131002140051.26068.646127389.divmod.xquotient.2535@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
 <20131002140051.26068.646127389.divmod.xquotient.2535@top>
Message-ID: <FBCF8429-4DAE-42B3-ABAF-6AEB637777BF@stufft.io>


On Oct 2, 2013, at 10:00 AM, exarkun at twistedmatrix.com wrote:

> On 01:31 pm, donald at stufft.io wrote:
>> 
>> On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:
>>> On 01:21 am, donald at stufft.io wrote:
>>>> I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).
>>>> 
>>>> I don't understand *why* though, why does the connectionReady dance make it work?
>>> 
>>> Where's the second piece of code?
>>> 
>>> Jean-Paul
>> 
>> 
>> Both are in the gist, works.py and fails.py
> 
> Oops, sorry.  The second one disappeared when I clicked the "raw" link I guess.
> 
> In the first version, you `react` until `connectProtocol`'s Deferred fires.  That's immediately upon the TCP connection setup success - before any appreciable SSH happens.
> 
> In the second version, you `react` indefinitely (because `connectionReady` never fires) giving SSH ample time to handshake.

ah ha, So for a real workload instead of a connectionReady you'd probably addCallback a deferred that waits for the SSH to connect and does the work.

> 
> BTW, I'm not sure what you plan to do with this connection, but if you haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then you probably want to look.

I've seen the endpoints (and even have a version of this working with it). Essentially what i'm trying to do is connect to up to ~200 some SSH hosts and run a bunch of commands on them (and possibly do things like download files). I have this somewhat working with the command endpoint but the snag in that plan is I don't always have direct access to these servers so I need to "gateway" through another SSH host.

I tried to get this working with the command endpoint but I ended up very confused about how the entire thing worked (and I was never able to get the gatewaying working). After some frustration in #twisted I decided to start over and try to grok all the code (and the underlying stuff as well) before just copy/pasting stuff from the examples. Which is where I'm at now.

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131002/6bf76054/attachment.pgp>

From p.mayers at imperial.ac.uk  Wed Oct  2 08:24:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 15:24:48 +0100
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <20131002140051.26068.646127389.divmod.xquotient.2535@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
 <20131002140051.26068.646127389.divmod.xquotient.2535@top>
Message-ID: <524C2CB0.5080708@imperial.ac.uk>

On 02/10/13 15:00, exarkun at twistedmatrix.com wrote:

> BTW, I'm not sure what you plan to do with this connection, but if you
> haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then
> you probably want to look.

ZOMG I had not seen the (existing) Conch endpoints before. Amazing, and 
many thanks to whoever did this work.


From twisted-python at 2xlp.com  Wed Oct  2 09:42:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 2 Oct 2013 11:42:54 -0400
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
 <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
 <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>
Message-ID: <A7A48E8A-C7D0-4103-B13A-E5B4083BE088@2xlp.com>

been too busy to work on this, but...

1) Ok, I will avoid subprocess and stick with twisted.  Thanks!

2) I will absolutely document where things got annoying to share!


On Sep 27, 2013, at 12:35 AM, Matt Haggard wrote:

> 
> On Sep 26, 2013 8:18 PM, "Glyph" <glyph at twistedmatrix.com> wrote:
> >
> >
> > On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> >
> > Could you write up why you feel it's "annoying"?  Maybe we can improve spawnProcess so it works better for you in the future.
> 
> I'm also interested in what you feel is annoying. Please write this (it will help improve documentation too).
> 
> Also, check out http://twistedftw.org/articles.html#!/processes/getstdout
> 
> Matt
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131002/27200e11/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Oct  3 03:54:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 3 Oct 2013 02:54:13 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
 <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
Message-ID: <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>

> On Oct 1, 2013, at 1:13 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> On Tue, Oct 1, 2013 at 12:59 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>  
>> Most of the code I can think of that wants to use that really wants the transport rather than the "protocol",
> 
> Yes, but having the protocol would also immediately give you access to the transport, and, from what I understand in most cases of AMP, also everything else :)

The problem here is that you can do AMP decoding without a protocol anywhere in sight.  A CommandLocator by itself, passed appropriate boxes to the callables returned by locateResponder, is capable of speaking AMP just fine, as long as you don't care about speaking it to an actual byte stream :-).  (And ostensibly this is one way to speak AMP over transports other than BinaryBoxProtocol.)

In the case of AMP routes (something it would be very nice to integrate into the main protocol), you have multiple command locators per transport, and each one might have its own properties that would be interesting to Argument types,

This is why putting requirements on the thing-doing-the-parsing in the Argument definition makes sense; the Command could interrogate its prospective Responder class, asking each of its Argument objects if it will be able to satisfy their requirements in turn, at the time that CommandLocator.__metaclass__.__new__ gets invoked, rather than once your protocol is already trying to respond to commands.

>> but nothing within AMP itself actually uses those arguments; in fact, searching the usual suspects (epsilon, vertex) I can't even find any Arguments that use the 'proto' argument for anything useful.
> 
> I suppose it's too late to get "proto" to actually mean "proto" and not "boxSender"?

I believe it currently means "responderLocator".  _wrapWithSerialization is where the magic happens if you want to confirm.

> It would definitely be a backwards-incompatible change, and I do actually have some code that somehow relied on it being the boxSender (actually, I think I saved that code in txampext, mostly, except I renamed that thing "proto").

It's probably too late for this method, but you can always add a new one :-)

>> If I recall, I believe the idea behind it was to allow an AMP responder within Vertex to return the peer's IP address back to the peer, from within an authenticated AMP route that (because it was a route) wasn't necessarily connected directly to the transport (and therefore couldn't just do self.transport.getPeer()).  Ironically I don't think it'll actually work for that now :-).
>> 
>> When we pull the authentication logic in from <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>, you might write a responder that's interested in authentication information that lives in some other relation to the protocol.
> 
> I wrote very similar deep-in-AMP auth logic once, and did look at that code (but ended up not using it because I use TLS, so I don't need hand-rolled challenge response or OTP systems).

The hand-rolled CR/OTP crap is really not supposed to be the interesting part. Really, that should just be SASL.  The interesting part is the integration with cred.

(Augh, and we didn't know the difference between a one-time password and a one-time pad, and the wrong word is right there in the wire format... Augh augh augh)

> When you say "other relation to the protocol", does that mean "it can be the protocol because the protocol will have some kind of reference to it"?

Notice that in that authentication code, CredReceiver *sets self.boxReceiver* to the result of portal.login.  It hands off processing of the parsed AMP boxes to another IBoxReceiver.  So the thing parsing the commands - the post-authentication protocol - is what the Arguments will currently have direct access to (as that will be the CommandLocator as well) but that object will have no transport; only a boxSender.

>> So in order to fix fromBox/toBox, we need to do a fix that firms up that contract and perhaps exposes more than a Protocol object.  The *recommended* API should be more or less like what ExposingArgument is doing - specify an Argument that asks for a particular attribute of the transport or the protocol or the authentication context or whatever, the implementation details may involve other lower-level public APIs.
> 
> That still sounds like it can be done by making "proto" actually the proto ;-) So, basically, the question is if "proto" being the locator is a bug that I can fix, or an interface that I can't.

You could add a new interface where it's "fixed", but given the case I just described above, what does "fixed" mean?

>>> My contributions to AMP have been more of the defect-findy kind, but I could certainly turn them more into the code-contributy kind. I imagine I'm not the first person to want tests for command classes (https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a nested AMP box (https://github.com/lvh/txampext/blob/master/txampext/nested.py).
>> 
>> That would be cool.  And, you know, that auth thing I said :-).
> 
> If I can change "proto" to mean "actually the protocol not something else" then that seems plenty easy to add, and it would definitely be cool if people don't have to mess with this nonsense themselves for something as ostensibly simple as having access to the protocol :-)

Keep in mind that in the authentication case I mentioned, your post-auth object may well subclass AMP and therefore "actually" be a protocol; but it still won't have a transport.  What do you propose happen in that case?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131003/cd3a5009/attachment.html>

From s.danzi at hawai.it  Thu Oct  3 10:57:58 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Thu, 03 Oct 2013 18:57:58 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
Message-ID: <524DA216.70108@hawai.it>

Hi!!

I have to write a little python program to manage a serial port radio modem.
I have to send some AT commands and read resposes. This is not a problem,
twisted examples are enough.

...but I have a situation that makes things complicated:

Anytime the modem can send back to serial port a line starting with "++"...
I have to catch it and do some analysis that could take a long time.

How to solve????????????????

I have found only this manner:

  - a thread continuously read from serial port.
  - if it receive a line stanting with "++" put it in a queue (I could 
name it "unexpected-queue")
  - this thread also check for commands on another queue (commands-queue)
  - if there are something on command-queue it send command to serial 
port an put
    replies on another queue (replies-queue)
  - Another thread loop to check unexpected-queue and do something if 
there are messages.
  - main program sent commands to command-queue and read replies from 
replies-queue

Does anyone have better ideas or suggestions?


From exarkun at twistedmatrix.com  Thu Oct  3 11:30:36 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Oct 2013 17:30:36 -0000
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <524DA216.70108@hawai.it>
References: <524DA216.70108@hawai.it>
Message-ID: <20131003173036.26068.740439382.divmod.xquotient.2568@top>

On 04:57 pm, s.danzi at hawai.it wrote:
>Hi!!
>
>I have to write a little python program to manage a serial port radio 
>modem.
>I have to send some AT commands and read resposes. This is not a 
>problem,
>twisted examples are enough.
>
>...but I have a situation that makes things complicated:
>
>Anytime the modem can send back to serial port a line starting with 
>"++"...
>I have to catch it and do some analysis that could take a long time.
>
>How to solve????????????????

Hi Stefano,

Please read http://sscce.org/ and post again with more information.

Thanks,
Jean-Paul


From s.danzi at hawai.it  Thu Oct  3 12:50:38 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Thu, 03 Oct 2013 20:50:38 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
Message-ID: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>

Hi...
Thanks for reply.

I know SSCCE.... But I have not code yet. I'm doing some investigation to understand if it is the right way or if twisted has a better standard flow for a similar problem.

I will try to write something....


exarkun at twistedmatrix.com ha scritto:

>On 04:57 pm, s.danzi at hawai.it wrote:
>>Hi!!
>>
>>I have to write a little python program to manage a serial port radio 
>>modem.
>>I have to send some AT commands and read resposes. This is not a 
>>problem,
>>twisted examples are enough.
>>
>>...but I have a situation that makes things complicated:
>>
>>Anytime the modem can send back to serial port a line starting with 
>>"++"...
>>I have to catch it and do some analysis that could take a long time.
>>
>>How to solve????????????????
>
>Hi Stefano,
>
>Please read http://sscce.org/ and post again with more information.
>
>Thanks,
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From _ at lvh.io  Fri Oct  4 01:12:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 4 Oct 2013 09:12:59 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
Message-ID: <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>

Hi Stefano,


It's probably a good idea to avoid thinking in threads until they come up
as a potential solution.

Some questions:

1) What are the latency requirements? Is it okay for everything else to
halt while you do that computation? What are the latency requirements for
the computation? Is the data useless if you don't get it in the next n
seconds?
2) What kind of machine is it running on? Are multiple cores available, and
would it make sense to use them?
3) Do you require a lot of shared state with the process talking to the
modem in order to make the long computation?

The easiest thing to do is probably deferToThread, but you have to be
careful not to touch any state you're not supposed to touch. The second
easiest thing is probably Ampoule, a process pool, or maybe just regular
AMP, if you only want a regular process. Those would have the benefit that
the reading process is never doing anything hard, so latency should stay
predictable.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131004/5cb2f8c2/attachment.html>

From s.danzi at hawai.it  Fri Oct  4 02:59:20 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Fri, 04 Oct 2013 10:59:20 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
 <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
Message-ID: <524E8368.9050507@hawai.it>

Hi Laurens,
many thanks for yours considerations.

1) I don't have problems about latency but I can't halt all during the 
computation. I can defer the computation for minutes if I attach to data 
the timestamp related to when data arrives.
2) The "monster" machine that have to do all is an embedded pc based on 
1000MHz AMD Geode NX1500
3) The long computation need only the data. In extremis I could write 
data on a file or DB and compute using another program.

I bit better explanation of scenario:

The radiomodem take "unexpected data" from a network of varius sensors. 
The sensors could be reachable or not.
The only way to know when the sensor is reachable is to wait fo 
"unexpected data". If I need to send data to a specific sensor
I have to do it immediatly after it send me "unexpected data", wait also 
1 second could be sufficient to have the sensor no longer reachable.
I can't send data to sensor and after do computation because meanwhile 
could arrive data from another sensor.
Mainly it is the reason because I think to defer long computation to 
another thread..



From _ at lvh.io  Fri Oct  4 04:15:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 4 Oct 2013 12:15:59 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <524E8368.9050507@hawai.it>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
 <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
 <524E8368.9050507@hawai.it>
Message-ID: <CAE_Hg6aMn9RHXQzh2XCZ29eGYdjJ-VoZcMAN5AgV285hMzdpgg@mail.gmail.com>

On Fri, Oct 4, 2013 at 10:59 AM, Stefano Danzi <s.danzi at hawai.it> wrote:

> Hi Laurens,
> many thanks for yours considerations.
>
> 1) I don't have problems about latency but I can't halt all during the
> computation.


Why not?


> I can defer the computation for minutes if I attach to data the timestamp
> related to when data arrives.
>

Sure, gettimeofday is a thing, that shouldn't be a problem.


> 2) The "monster" machine that have to do all is an embedded pc based on
> 1000MHz AMD Geode NX1500
>

Okay, so single core.


> 3) The long computation need only the data. In extremis I could write data
> on a file or DB and compute using another program.
>

I would imagine you do that anyway for persistence reasons with the results
:)


> I bit better explanation of scenario:
>
> The radiomodem take "unexpected data" from a network of varius sensors.
> The sensors could be reachable or not.
> The only way to know when the sensor is reachable is to wait fo
> "unexpected data". If I need to send data to a specific sensor
> I have to do it immediatly after it send me "unexpected data", wait also 1
> second could be sufficient to have the sensor no longer reachable.
>
I can't send data to sensor and after do computation because meanwhile
> could arrive data from another sensor.
>
Mainly it is the reason because I think to defer long computation to
> another thread..
>

Okay, so try with threads first, and hope that the scheduler lets your
reactor thread work often enough. If that doesn't work, do the computation
in a subprocess, and hope that nice works well enough :)

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131004/74af4f76/attachment.html>

From tobias.oberstein at tavendo.de  Sat Oct  5 08:24:42 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 5 Oct 2013 07:24:42 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression and
	more
Message-ID: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>

Hi,

AutobahnPython 0.6.3 was just released to PyPi https://pypi.python.org/pypi/autobahn with lots of new features, including _WebSocket compression_, an upcoming extension to the WebSocket protocol.

We have seen compression ratios of 2-15x with JSON payload over WebSocket, which is great, in particular for mobile and embedded devices / IoT!

AutobahnPython supports WS compression for both clients and servers, and with all knobs and options.

Besides AutobahnPython, the extension is currently implemented in Chromium (very near shipping in Chrome), WebSocket++ (client and server), pywebsocket (server only) and Jetty (server only, not yet released, partial implementation).

Complete list of new features is here:
https://github.com/tavendo/AutobahnPython/blob/master/CHANGELOG.md

/Tobias

PS: should it be frowned upon posting announcements like this, please let me know. If it's useful/ok, please let me know also - I am hesitating each time to do postings like this to the list ..

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/5d9c35e4/attachment.html>

From dstainton415 at gmail.com  Sat Oct  5 11:50:25 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 10:50:25 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <524BF1EC.4070809@imperial.ac.uk>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
Message-ID: <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>

Right. I gave my class one of these: implements(interfaces.IPushProducer,
interfaces.IReadDescriptor)
Which means that I can easily write a class that implements IConsumer
to do something with the packets.

https://github.com/david415/hushVPN/blob/master/nflog_reader.py

This is basically a packet sniffer which receives packets based on iptables
rules.

After that I wrote proxy consumer/producers too; classes that implement
both IConsumer and IPushProducer;
this allows me to transform the packets before sending them to a transport.

I was inspired by this doc:
http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html

So far I really love Twisted!


On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 02/10/13 09:25, David Stainton wrote:
>
>>
>> In examples of Twisted UDP clients they all do this:
>>
>> reactor.listenUDP(3000,**MyProtocol())
>>
>> What would I do instead?
>> reactor.addReader makes sense to me since what I have is a file
>> descriptor,
>> and the reactor loop and use select or epoll find out when there is data
>> to read...
>> and call our doRead() method of the Reader.
>>
>> I don't know about implementing this as a Protocol because I do not have
>> any
>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
>> And I'm not sure how a Transport is related to my Reader... but it seems
>> to me
>> that there is some abstraction which sets callbacks for io and also
>> calls buildProtocol...
>>
>
> Sorry, maybe I was unclear: you were asking about protocols, so I was
> merely pointing out that *if* you were to use a protocol, you should copy
> the approach DatagramProtocol and udp.Port take.
>
> However as I noted, it *might not* make sense to do this, if there's only
> ever going to be one socket listening on this "thing", your current
> approach might be fine.
>
>
>  If I am going to be using a Twisted Service to drop privileges after
>> gaining access to the fd...
>> How would I do this? Would I have startService() instantiate a Protocol
>> instance?
>>
>
> As above, it depends. If you're using Protocol instances, then yes. If
> not, then no.
>
> Services are just things which start and stop; they may or may not use
> objects implementing the transport/factory/protocol pattern.
>
>
>
>> I don't know about the nflog file descriptor...
>> but the nflog generator interface is non-blocking if used like this:
>>
>
> Ok. Weird API, but if it works...
>
>
>  My nflog reader seems to work great.
>>
>
> If it works for you, and you're using documented Twisted interfaces, then
> there's probably no need to fiddle with it.
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/e93d54f4/attachment.html>

From tobias.oberstein at tavendo.de  Sat Oct  5 16:12:34 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 5 Oct 2013 15:12:34 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
Message-ID: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>

> I would like to announce the first release of txThings. It is a simple library
> for Constrained Application Protocol (CoAP). CoAP is a relatively new protocol
> designed for "Internet of Things" and M2M communications.

Cool! 

> Internet of Things is currently very interesting field of development. It is
> approaching
> a phase where many opportunities for both large and small players. I think
> Twisted is
> well suited for development of IoT apps:
> - it's stable
> - it's Python based and portable
> - it has good support for UDP and TCP, which makes it ideal for proxying IoT
> protocols to HTTP
> In my opinion in the next three years, at least 20% of Twisted apps will be
> IoT related
> (educated guess, no hard data :) )

I fully agree that Python/Twisted may have a particular competitive
advantage in embedded / IoT (see below).

And if so, why not take that opportunity and actively embrace / promote
specifically IoT from the Twisted community?

Why I think Python/Twisted has an edge:

- the (more pure) Web play languages like PHP and Ruby don't fit well with
processing serial port data or doing UDP (if possible at all)
- Perl - shudder;) Python is easy to approach for beginners and sane and bla
bla bla
- C: is here to stay, and has it's place in IoT
- C++: can't see a particular competitive advantage for IoT
- same goes for (great) stuff like Haskell or Erlang

Whats your take on the stuff below?

There is .NET driven by MS. I wasn't aware that they created a .NET Micro
under _Apache 2.0_ (!):

http://en.wikipedia.org/wiki/.NET_Micro_Framework
http://www.netmf.com/

Then there is Oracle with Java ME
http://www.oracle.com/us/solutions/internetofthings/index.html

Then there is .. JavaScript. Put v8/node on your Pi. However, Node has
quite a different focus. Last time I checked e.g. the support for serial
was not in main project (I had read comments they don't _want_ to have it).

And then there is the Lua universe that has a bunch of brilliant stuff:

http://www.eluaproject.net/
http://luajit.org/
https://github.com/justincormack/ljsyscall

===

If above sounds OT for this list, in one way probably, but when looking from
the angle: competitive advantage of Python/Twisted and opportunities for
expanding the community and actively promoting Twisted, I'd say it's on
topic.

/Tobias



From _ at habnab.it  Sat Oct  5 19:18:38 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Sat, 05 Oct 2013 18:18:38 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
Message-ID: <m261tb42oh.fsf@ender.habnabit.org>

Hi!

txsocksx <https://pypi.python.org/pypi/txsocksx> 1.13.0.0 has been
released--the first stable 1.x release.

This version has full implementations of client endpoints which wrap
client endpoints and perform SOCKS 4, 4a, or 5 proxy negotiation.

Additionally, txsocksx comes with support code to allow HTTP requests to
be made over a SOCKS connection using Twisted's Agent API, and another
wrapper endpoint for performing TLS negotiation after proxy negotiation.
(The TLS wrapper endpoint will eventually land in twisted as a part of
<http://tm.tl/5642>, but are experimentally in txsocksx for now.)

Documentation is available on ReadTheDocs, including examples and an API
reference: <http://txsocksx.readthedocs.org/en/latest/>.


From glyph at twistedmatrix.com  Sat Oct  5 20:29:08 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:29:08 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>


On Oct 5, 2013, at 7:24 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
 
> AutobahnPython 0.6.3 was just released to PyPi https://pypi.python.org/pypi/autobahn with lots of new features, including _WebSocket compression_, an upcoming extension to the WebSocket protocol.

Congratulations, Tobias!  And thanks again for providing support for Twisted in Autobahn!

>  PS: should it be frowned upon posting announcements like this, please let me know. If it's useful/ok, please let me know also - I am hesitating each time to do postings like this to the list ..

The official (at least as far as "official" goes) policy on this is that it's OK until someone complains, and right now the volume of such announcements is not high enough to bother anyone.  And it's nice to see code being released that supports Twisted well.  So keep them coming!  If there's ever an issue we can always make a separate list for announcements.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/8ed4d8df/attachment.html>

From glyph at twistedmatrix.com  Sat Oct  5 20:46:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:46:56 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
In-Reply-To: <m261tb42oh.fsf@ender.habnabit.org>
References: <m261tb42oh.fsf@ender.habnabit.org>
Message-ID: <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>


On Oct 5, 2013, at 6:18 PM, Aaron Gallagher <_ at habnab.it> wrote:

> Hi!
> 
> txsocksx <https://pypi.python.org/pypi/txsocksx> 1.13.0.0 has been
> released--the first stable 1.x release.

Cool!

> This version has full implementations of client endpoints which wrap
> client endpoints and perform SOCKS 4, 4a, or 5 proxy negotiation.
> 
> Additionally, txsocksx comes with support code to allow HTTP requests to
> be made over a SOCKS connection using Twisted's Agent API, and another
> wrapper endpoint for performing TLS negotiation after proxy negotiation.
> (The TLS wrapper endpoint will eventually land in twisted as a part of
> <http://tm.tl/5642>, but are experimentally in txsocksx for now.)

Always great to get some real-world usage while these things make their way through code review :-).

> Documentation is available on ReadTheDocs, including examples and an API
> reference: <http://txsocksx.readthedocs.org/en/latest/>.

I'm super happy to see such widespread use of the endpoint API :-).  It looks like there's no endpoint string parser plugin, though; any chance you'll be looking into adding that in a future release?

-glyph

From _ at habnab.it  Sat Oct  5 20:55:08 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Sat, 05 Oct 2013 19:55:08 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
In-Reply-To: <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>
References: <m261tb42oh.fsf@ender.habnabit.org>
 <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>
Message-ID: <m2vc1b3y7n.fsf@ender.habnabit.org>

Glyph <glyph at twistedmatrix.com> writes:

> I'm super happy to see such widespread use of the endpoint API :-). It
> looks like there's no endpoint string parser plugin, though; any
> chance you'll be looking into adding that in a future release?

Yes! This is definitely on my todo list, but it will be much more useful
once <tm.tl/5069> (IStreamClientEndpointStringParserWithReactor, which I
need to work on again) and <tm.tl/6758> (quoting for ${x}FromString,
which I just reviewed) land.


From glyph at twistedmatrix.com  Sat Oct  5 20:58:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:58:40 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
Message-ID: <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>

On Oct 5, 2013, at 3:12 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> If above sounds OT for this list, in one way probably, but when looking from
> the angle: competitive advantage of Python/Twisted and opportunities for
> expanding the community and actively promoting Twisted, I'd say it's on
> topic.

While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just say it on this list ;-).  The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/a520dc55/attachment.html>

From glyph at twistedmatrix.com  Sat Oct  5 21:46:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 20:46:31 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
Message-ID: <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>


On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com> wrote:

> 
> Right. I gave my class one of these: implements(interfaces.IPushProducer, interfaces.IReadDescriptor)
> Which means that I can easily write a class that implements IConsumer
> to do something with the packets.
> 
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py

After a brief glance, this stuff looks pretty cool.  Very much in the spirit that these interfaces were developed in.  (And you chose the correct producer interface; the other I*Producer interfaces are pretty much just legacy junk, sorry about that :-))

One thing to note, though: you should switch to this style:

@implementer(IPushProducer, IReadDescriptor)
class NFLogPacket...

because the implements() style won't work in future versions of Python.  (Plus, the implementation of @implementer is much cleaner on older versions too.)

-glyph

> This is basically a packet sniffer which receives packets based on iptables rules.
> 
> After that I wrote proxy consumer/producers too; classes that implement both IConsumer and IPushProducer;
> this allows me to transform the packets before sending them to a transport.
> 
> I was inspired by this doc:
> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
> 
> So far I really love Twisted!
> 
> 
> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 02/10/13 09:25, David Stainton wrote:
> 
> In examples of Twisted UDP clients they all do this:
> 
> reactor.listenUDP(3000,MyProtocol())
> 
> What would I do instead?
> reactor.addReader makes sense to me since what I have is a file descriptor,
> and the reactor loop and use select or epoll find out when there is data
> to read...
> and call our doRead() method of the Reader.
> 
> I don't know about implementing this as a Protocol because I do not have any
> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
> And I'm not sure how a Transport is related to my Reader... but it seems
> to me
> that there is some abstraction which sets callbacks for io and also
> calls buildProtocol...
> 
> Sorry, maybe I was unclear: you were asking about protocols, so I was merely pointing out that *if* you were to use a protocol, you should copy the approach DatagramProtocol and udp.Port take.
> 
> However as I noted, it *might not* make sense to do this, if there's only ever going to be one socket listening on this "thing", your current approach might be fine.
> 
> 
> If I am going to be using a Twisted Service to drop privileges after
> gaining access to the fd...
> How would I do this? Would I have startService() instantiate a Protocol
> instance?
> 
> As above, it depends. If you're using Protocol instances, then yes. If not, then no.
> 
> Services are just things which start and stop; they may or may not use objects implementing the transport/factory/protocol pattern.
> 
> 
> 
> I don't know about the nflog file descriptor...
> but the nflog generator interface is non-blocking if used like this:
> 
> Ok. Weird API, but if it works...
> 
> 
> My nflog reader seems to work great.
> 
> If it works for you, and you're using documented Twisted interfaces, then there's probably no need to fiddle with it.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/73f99371/attachment-0001.html>

From dstainton415 at gmail.com  Sat Oct  5 22:22:10 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 21:22:10 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
 <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
Message-ID: <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>

I'm glad I found the doc about producers/consumers... I should actually
finish a transport so I can see this thing churn data.
Thanks for pointing out that decorator.



On Sat, Oct 5, 2013 at 8:46 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com>
> wrote:
>
>
> Right. I gave my class one of these: implements(interfaces.IPushProducer,
> interfaces.IReadDescriptor)
> Which means that I can easily write a class that implements IConsumer
> to do something with the packets.
>
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>
>
> After a brief glance, this stuff looks pretty cool.  Very much in the
> spirit that these interfaces were developed in.  (And you chose the correct
> producer interface; the other I*Producer interfaces are pretty much just
> legacy junk, sorry about that :-))
>
> One thing to note, though: you should switch to this style:
>
> @implementer(IPushProducer, IReadDescriptor)
> class NFLogPacket...
>
> because the implements() style won't work in future versions of Python.
>  (Plus, the implementation of @implementer is much cleaner on older
> versions too.)
>
> -glyph
>
> This is basically a packet sniffer which receives packets based on
> iptables rules.
>
> After that I wrote proxy consumer/producers too; classes that implement
> both IConsumer and IPushProducer;
> this allows me to transform the packets before sending them to a transport.
>
> I was inspired by this doc:
> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
>
> So far I really love Twisted!
>
>
> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> On 02/10/13 09:25, David Stainton wrote:
>>
>>>
>>> In examples of Twisted UDP clients they all do this:
>>>
>>> reactor.listenUDP(3000,**MyProtocol())
>>>
>>> What would I do instead?
>>> reactor.addReader makes sense to me since what I have is a file
>>> descriptor,
>>> and the reactor loop and use select or epoll find out when there is data
>>> to read...
>>> and call our doRead() method of the Reader.
>>>
>>> I don't know about implementing this as a Protocol because I do not have
>>> any
>>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
>>> And I'm not sure how a Transport is related to my Reader... but it seems
>>> to me
>>> that there is some abstraction which sets callbacks for io and also
>>> calls buildProtocol...
>>>
>>
>> Sorry, maybe I was unclear: you were asking about protocols, so I was
>> merely pointing out that *if* you were to use a protocol, you should copy
>> the approach DatagramProtocol and udp.Port take.
>>
>> However as I noted, it *might not* make sense to do this, if there's only
>> ever going to be one socket listening on this "thing", your current
>> approach might be fine.
>>
>>
>>  If I am going to be using a Twisted Service to drop privileges after
>>> gaining access to the fd...
>>> How would I do this? Would I have startService() instantiate a Protocol
>>> instance?
>>>
>>
>> As above, it depends. If you're using Protocol instances, then yes. If
>> not, then no.
>>
>> Services are just things which start and stop; they may or may not use
>> objects implementing the transport/factory/protocol pattern.
>>
>>
>>
>>> I don't know about the nflog file descriptor...
>>> but the nflog generator interface is non-blocking if used like this:
>>>
>>
>> Ok. Weird API, but if it works...
>>
>>
>>  My nflog reader seems to work great.
>>>
>>
>> If it works for you, and you're using documented Twisted interfaces, then
>> there's probably no need to fiddle with it.
>>
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/c0b8b0be/attachment.html>

From dstainton415 at gmail.com  Sat Oct  5 22:53:10 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 21:53:10 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
 <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
 <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>
Message-ID: <CAFN1edrDGwZ=_r1G4BbjO6aLK=az0nLin++yq2sXHsuOrUhuTA@mail.gmail.com>

Oh and it looks like I should be using these for my proxy classes:

http://twistedmatrix.com/documents/current/api/twisted.protocols.pcp.BasicProducerConsumerProxy.html
http://twistedmatrix.com/documents/current/api/twisted.protocols.pcp.ProducerConsumerProxy.html


On Sat, Oct 5, 2013 at 9:22 PM, David Stainton <dstainton415 at gmail.com>wrote:

>
> I'm glad I found the doc about producers/consumers... I should actually
> finish a transport so I can see this thing churn data.
> Thanks for pointing out that decorator.
>
>
>
> On Sat, Oct 5, 2013 at 8:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com>
>> wrote:
>>
>>
>> Right. I gave my class one of these: implements(interfaces.IPushProducer,
>> interfaces.IReadDescriptor)
>> Which means that I can easily write a class that implements IConsumer
>> to do something with the packets.
>>
>> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>>
>>
>> After a brief glance, this stuff looks pretty cool.  Very much in the
>> spirit that these interfaces were developed in.  (And you chose the correct
>> producer interface; the other I*Producer interfaces are pretty much just
>> legacy junk, sorry about that :-))
>>
>> One thing to note, though: you should switch to this style:
>>
>> @implementer(IPushProducer, IReadDescriptor)
>> class NFLogPacket...
>>
>> because the implements() style won't work in future versions of Python.
>>  (Plus, the implementation of @implementer is much cleaner on older
>> versions too.)
>>
>> -glyph
>>
>> This is basically a packet sniffer which receives packets based on
>> iptables rules.
>>
>> After that I wrote proxy consumer/producers too; classes that implement
>> both IConsumer and IPushProducer;
>> this allows me to transform the packets before sending them to a
>> transport.
>>
>> I was inspired by this doc:
>> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
>>
>> So far I really love Twisted!
>>
>>
>> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>>
>>> On 02/10/13 09:25, David Stainton wrote:
>>>
>>>>
>>>> In examples of Twisted UDP clients they all do this:
>>>>
>>>> reactor.listenUDP(3000,**MyProtocol())
>>>>
>>>> What would I do instead?
>>>> reactor.addReader makes sense to me since what I have is a file
>>>> descriptor,
>>>> and the reactor loop and use select or epoll find out when there is data
>>>> to read...
>>>> and call our doRead() method of the Reader.
>>>>
>>>> I don't know about implementing this as a Protocol because I do not
>>>> have any
>>>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a
>>>> ListeningPort.
>>>> And I'm not sure how a Transport is related to my Reader... but it seems
>>>> to me
>>>> that there is some abstraction which sets callbacks for io and also
>>>> calls buildProtocol...
>>>>
>>>
>>> Sorry, maybe I was unclear: you were asking about protocols, so I was
>>> merely pointing out that *if* you were to use a protocol, you should copy
>>> the approach DatagramProtocol and udp.Port take.
>>>
>>> However as I noted, it *might not* make sense to do this, if there's
>>> only ever going to be one socket listening on this "thing", your current
>>> approach might be fine.
>>>
>>>
>>>  If I am going to be using a Twisted Service to drop privileges after
>>>> gaining access to the fd...
>>>> How would I do this? Would I have startService() instantiate a Protocol
>>>> instance?
>>>>
>>>
>>> As above, it depends. If you're using Protocol instances, then yes. If
>>> not, then no.
>>>
>>> Services are just things which start and stop; they may or may not use
>>> objects implementing the transport/factory/protocol pattern.
>>>
>>>
>>>
>>>> I don't know about the nflog file descriptor...
>>>> but the nflog generator interface is non-blocking if used like this:
>>>>
>>>
>>> Ok. Weird API, but if it works...
>>>
>>>
>>>  My nflog reader seems to work great.
>>>>
>>>
>>> If it works for you, and you're using documented Twisted interfaces,
>>> then there's probably no need to fiddle with it.
>>>
>>>
>>> ______________________________**_________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131005/c11e15e7/attachment.html>

From trac at twistedmatrix.com  Sun Oct  6 00:05:14 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 06 Oct 2013 06:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1381039514.23.426914758013049741@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131006/a45fa61b/attachment-0001.html>

From _ at lvh.io  Sun Oct  6 02:36:58 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 6 Oct 2013 10:36:58 +0200
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
Message-ID: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>

Congratulations! Please keep the announcements coming.

If I get a chance, I'll try to apply the recent attacks by Rizzo et al. on
TLS compression and the compressed stream over TLS equivalent by Prado et
al., since I like compression but I also send credentials over TLS :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131006/8132ab60/attachment.html>

From tobias.oberstein at tavendo.de  Sun Oct  6 04:51:32 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 03:51:32 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C21B@EXVMBX020-12.exch020.serverdata.net>

>If I get a chance, I'll try to apply the recent attacks by Rizzo et al. on TLS compression and the compressed stream over TLS equivalent by Prado et al., since I like >compression but I also send credentials over TLS :)

I guess you are referring to CRIME/BEAST, right?

I haven't had a deep look into those, but it seems they require plaintext injection.

In the context of WebSocket (using compression, and with transport over TLS), that would mean injecting WebSocket messages with chosen payload into the conversation between client and server.

What I don't get: unless at least one of the endpoints have been compromised, how are you going to inject? And if an endpoint has been compromised, one might as well just grab the unencrypted stuff right away.

What am I missing?

/Tobias


From tobias.oberstein at tavendo.de  Sun Oct  6 05:11:39 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 04:11:39 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>

>>If above sounds OT for this list, in one way probably, but when looking from
>>the angle: competitive advantage of Python/Twisted and opportunities for
>>expanding the community and actively promoting Twisted, I'd say it's on
>>topic.

>While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just >say it on this list ;-). ?The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.

Ok, thank you for making this crystal clear! 

What's your take on the tactic/proposal  "actively promoting Twisted for IoT"?

E.g., as a start, we could have a dedicated page on the Twistedmatrix Web site "Twisted for Things" for intro and collecting links, articles etc

Dummy question: how would I contribute to the Trac-based Web site content?

/Tobias



From exarkun at twistedmatrix.com  Sun Oct  6 06:22:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Oct 2013 12:22:39 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20131006122239.26068.609867439.divmod.xquotient.2571@top>

On 5 Oct, 02:24 pm, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>AutobahnPython 0.6.3 was just released to PyPi 
>https://pypi.python.org/pypi/autobahn with lots of new features, 
>including _WebSocket compression_, an upcoming extension to the 
>WebSocket protocol.

Heya Tobias,

Great news!  Thanks for sharing (and thanks for working on a great 
Twisted-based WebSocket library)!

Jean-Paul


From tobias.oberstein at tavendo.de  Sun Oct  6 08:51:47 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 07:51:47 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>

>.. , since I like compression but I also send credentials over TLS :)

IMHO, credentials should never be sent over the wire (be it encrypted or not) and never be stored in plaintext.

FWIW, Autobahn provides a challenge-response authentication scheme ("WAMP_CRA") that also allows for salted/hashed passwords (pbkdf2-based) for WebSocket/WAMP.

With TLS, and in a Post-Snowden era, how do you know your TLS server isn't impersonated and encryption broken?

Personally, I assume root CA private keys of any CA vendor are owned by the NSA anyway.

Really, TLS is broken.

We need a new scheme. For encryption session keys, Diffie-Hellman is available, and provides perfect forward secrecy naturally.

For authentication, we need a peer-based system like PGP has, not relying on centrally managed trust.

I know. Not going to happen any time soon ..

/Tobias


From exarkun at twistedmatrix.com  Sun Oct  6 15:26:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Oct 2013 21:26:29 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
 <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20131006212629.26068.503860633.divmod.xquotient.2582@top>

On 02:51 pm, tobias.oberstein at tavendo.de wrote:
>>.. , since I like compression but I also send credentials over TLS :)
>
>IMHO, credentials should never be sent over the wire (be it encrypted 
>or not) and never be stored in plaintext.
>
>FWIW, Autobahn provides a challenge-response authentication scheme 
>("WAMP_CRA") that also allows for salted/hashed passwords 
>(pbkdf2-based) for WebSocket/WAMP.
>
>With TLS, and in a Post-Snowden era, how do you know your TLS server 
>isn't impersonated and encryption broken?
>
>Personally, I assume root CA private keys of any CA vendor are owned by 
>the NSA anyway.

There's no rule that says you have to use a "root CA" signed certificate 
for your TLS connections.

Jean-Paul
>Really, TLS is broken.
>
>We need a new scheme. For encryption session keys, Diffie-Hellman is 
>available, and provides perfect forward secrecy naturally.
>
>For authentication, we need a peer-based system like PGP has, not 
>relying on centrally managed trust.
>
>I know. Not going to happen any time soon ..
>
>/Tobias


From tobias.oberstein at tavendo.de  Sun Oct  6 17:02:13 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 16:02:13 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
Message-ID: <CE77B895.1C455%tobias.oberstein@tavendo.de>

>> Personally, I assume root CA private keys of any CA vendor are owned by
>> the NSA anyway.
> 
> There's no rule that says you have to use a "root CA" signed certificate
> for your TLS connections.

Sure, in theory, but there are multiple practical problems when using
self-signed certs or certs signed by a CA not built into browsers. As a
starter, here are 3:

- enterprise networks might block those right away with no way for the user
to accept self-signed or import alien CA certs
- the user experience is bad: Firefox scares with dialogs and multiple steps
of overcoming those
- with WebSocket, browers will not even show a dialog! WebSocket are so
called "subresources", and browsers will never render dialogs for these

So in practice, I _have_ to use a CA that is built into all major browsers.

/Tobias

> 
> Jean-Paul
>> Really, TLS is broken.
>> 
>> We need a new scheme. For encryption session keys, Diffie-Hellman is
>> available, and provides perfect forward secrecy naturally.
>> 
>> For authentication, we need a peer-based system like PGP has, not
>> relying on centrally managed trust.
>> 
>> I know. Not going to happen any time soon ..
>> 
>> /Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 



From exarkun at twistedmatrix.com  Sun Oct  6 18:23:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Oct 2013 00:23:22 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <CE77B895.1C455%tobias.oberstein@tavendo.de>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
Message-ID: <20131007002322.26068.991605302.divmod.xquotient.2584@top>

On 6 Oct, 11:02 pm, tobias.oberstein at tavendo.de wrote:
>>>Personally, I assume root CA private keys of any CA vendor are owned 
>>>by
>>>the NSA anyway.
>>
>>There's no rule that says you have to use a "root CA" signed 
>>certificate
>>for your TLS connections.
>
>Sure, in theory, but there are multiple practical problems when using
>self-signed certs or certs signed by a CA not built into browsers. As a
>starter, here are 3:
>
>- enterprise networks might block those right away with no way for the 
>user
>to accept self-signed or import alien CA certs
>- the user experience is bad: Firefox scares with dialogs and multiple 
>steps
>of overcoming those
>- with WebSocket, browers will not even show a dialog! WebSocket are so
>called "subresources", and browsers will never render dialogs for these
>
>So in practice, I _have_ to use a CA that is built into all major 
>browsers.

You're assuming a lot here.  Perhaps TLS is broken for all the uses 
you're interested in - that doesn't mean it's broken for everyone else's 
uses.

*This* is probably now sufficiently off-topic, though...

Jean-Paul
>/Tobias
>>
>>Jean-Paul
>>>Really, TLS is broken.
>>>
>>>We need a new scheme. For encryption session keys, Diffie-Hellman is
>>>available, and provides perfect forward secrecy naturally.
>>>
>>>For authentication, we need a peer-based system like PGP has, not
>>>relying on centrally managed trust.
>>>
>>>I know. Not going to happen any time soon ..
>>>
>>>/Tobias
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Mon Oct  7 00:30:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Oct 2013 23:30:03 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <20131007002322.26068.991605302.divmod.xquotient.2584@top>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
Message-ID: <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>



> On Oct 6, 2013, at 5:23 PM, exarkun at twistedmatrix.com wrote:
> 
> On 6 Oct, 11:02 pm, tobias.oberstein at tavendo.de wrote:
>>>> Personally, I assume root CA private keys of any CA vendor are owned by
>>>> the NSA anyway.
>>> 
>>> There's no rule that says you have to use a "root CA" signed certificate
>>> for your TLS connections.
>> 
>> Sure, in theory, but there are multiple practical problems when using
>> self-signed certs or certs signed by a CA not built into browsers. As a
>> starter, here are 3:
>> 
>> - enterprise networks might block those right away with no way for the user
>> to accept self-signed or import alien CA certs
>> - the user experience is bad: Firefox scares with dialogs and multiple steps
>> of overcoming those
>> - with WebSocket, browers will not even show a dialog! WebSocket are so
>> called "subresources", and browsers will never render dialogs for these
>> 
>> So in practice, I _have_ to use a CA that is built into all major browsers.
> 
> You're assuming a lot here.  Perhaps TLS is broken for all the uses you're interested in - that doesn't mean it's broken for everyone else's uses.

Tobias, all of the things you've said here about browser UI, enterprise networks, and key management tooling are true; however, note that none of those nouns are "TLS".

If you want to fix these problems, two possible options are:

 1. Write some code that uses TLS (which is a wire protocol, after all, not a trust model or set of trust roots, nor a key management UI) and addresses these issues, by implementing a new trust model, protocol for exchanging trust roots, or key management UI, and selecting appropriate ciphers.
 2. Write some code that uses a brand new wire protocol with unknown, unaudited security properties, also implementing appropriate ciphers, and also implementing all of the things in point 1.

One of these options seems obviously superior to me :-).

It doesn't seem to me that re-working the wire protocol of TLS will fix problematic browser behaviors; only patches to the browsers will do that.

> *This* is probably now sufficiently off-topic, though...

Man, are there some kind of Topic Police everyone is worried about? Do I need to start taking extra precautions when I write to mailing lists? :-)

I think this is on-topic enough, since this might inform TLS work with Twisted in the future, and Vertex has been brought under the Twisted umbrella recently, https://github.com/twisted/vertex and it seeks to provide a different trust model with TLS and Twisted.

(If anyone objects, of course, feel free to say so and we can take this thread elsewhere.)

> Jean-Paul
>> /Tobias
>>> 
>>> Jean-Paul
>>>> Really, TLS is broken.
>>>> 
>>>> We need a new scheme. For encryption session keys, Diffie-Hellman is
>>>> available, and provides perfect forward secrecy naturally.
>>>> 
>>>> For authentication, we need a peer-based system like PGP has, not
>>>> relying on centrally managed trust.
>>>> 
>>>> I know. Not going to happen any time soon ..
>>>> 
>>>> /Tobias
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131006/8e52d23c/attachment.html>

From tobias.oberstein at tavendo.de  Mon Oct  7 01:51:42 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 00:51:42 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>

>>>So in practice, I _have_ to use a CA that is built into all major browsers.

>>You're assuming a lot here. ?Perhaps TLS is broken for all the uses you're interested in - that doesn't mean it's broken for everyone else's uses.

@Jean-Paul: Granted .. good catch.

My interest is the Web/browser, and also non-browser clients working in a Web-compatible way.

>Tobias, all of the things you've said here about browser UI, enterprise networks, and key management tooling are true; however, note that none of those nouns are "TLS".

@Glyph:

I agree: "browser UI" is formally unrelated to TLS
I (mostly) agree: locked down enterprise networks are orthogonal to TLS - formally.

And the "key management" system being ortho to TLS: a very good point.

The problem is X.509, and TLS today uses only that, but it is capable of using different schemes in principle.

I did some further looking around: turns out there is TLS-PGP

http://tools.ietf.org/html/rfc6091

Does someone know whether OpenSSL supports that?

[Sidenote: if not, one more reason why a pure Python TLS implementation (then with RFC6091) would rock. The other reason being the total awesomeness of the OpenSSL codebase;) And the third: PyPy.]

>?1. Write some code that uses TLS (which is a wire protocol, after all, not a trust model or set of trust roots, nor a key management UI) and addresses these issues, by implementing a new trust model, protocol for exchanging trust roots, or key management UI, and selecting appropriate ciphers.
>?2. Write some code that uses a brand new wire protocol with unknown, unaudited security properties, also implementing appropriate ciphers, and also implementing all of the things in point 1.

>One of these options seems obviously superior to me :-).

Yeah;) 

1) => RFC6091

>>*This* is probably now sufficiently off-topic, though...

>Man, are there some kind of Topic Police everyone is worried about? Do I need to start taking extra precautions when I write to mailing lists? :-)

Got it. It's just that different communities have different social codes.
But it's good that Twisted has no "Topic Police".
I like that .. term and fact;)

>I think this is on-topic enough, since this might inform TLS work with Twisted in the future, and Vertex has been brought under the Twisted umbrella recently,?https://github.com/twisted/vertex and it seeks to provide a different trust model with TLS and Twisted.

Is there any intro / architecture document? I'd like to read more .. 

/Tobias


From p.mayers at imperial.ac.uk  Mon Oct  7 02:50:00 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 09:50:00 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <525275B8.2050609@imperial.ac.uk>

On 10/07/2013 08:51 AM, Tobias Oberstein wrote:

> I did some further looking around: turns out there is TLS-PGP
>
> http://tools.ietf.org/html/rfc6091
>
> Does someone know whether OpenSSL supports that?
>

There are *lots* of TLS extensions that eliminate or obviate the need 
for the (horrible) PKIX trust model as deployed. For example, TLS PSK, 
TLS-SRP, the PGP method you've found, and others.

Right now, none are useful in a browser, but personally I have high 
hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this 
model, X.509 is essentially just a payload format for certs - the entire 
trust model is unused.

> [Sidenote: if not, one more reason why a pure Python TLS

Such as tlslite?


From p.mayers at imperial.ac.uk  Mon Oct  7 02:52:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 09:52:36 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <52527654.4000403@imperial.ac.uk>

On 10/07/2013 09:50 AM, Phil Mayers wrote:

> Right now, none are useful in a browser, but personally I have high
> hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this
> model, X.509 is essentially just a payload format for certs

Sorry, "payload format for keys".


From donald at stufft.io  Mon Oct  7 04:56:47 2013
From: donald at stufft.io (Donald Stufft)
Date: Mon, 7 Oct 2013 06:56:47 -0400
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>

DNSSEC solves none of the problems with the CA system. It just moves the problem around. 

> On Oct 7, 2013, at 4:50 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> I have high hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this model, X.509 is essentially just a payload format for certs - the entire trust model is unused.


From tobias.oberstein at tavendo.de  Mon Oct  7 05:35:14 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 04:35:14 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>

> There are *lots* of TLS extensions that eliminate or obviate the need for the
> (horrible) PKIX trust model as deployed. For example, TLS PSK, TLS-SRP, the
> PGP method you've found, and others.

Sure .. however as far as I understand the IETF has only 2 _cert_ schemes sanctioned:
x509 and OpenPGP, and of those only OpenPGP has a decentralized trust model.

> 
> Right now, none are useful in a browser, but personally I have high hopes for

Which is the main roadblocker to adoption .. right.

> raw keys, trust-anchored by DNSSEC via RFC 6698. In this model, X.509 is
> essentially just a payload format for certs - the entire trust model is unused.

DNSSEC seems to follow a centralized/hierachical trust model. Won't help. The NSA will (does?) own those.

> > [Sidenote: if not, one more reason why a pure Python TLS
> 
> Such as tlslite?

That could be a good start: it would take a community effort to scrutinize, security review and
robustify for production.

The monoculture of OpenSSL is no good IMHO.

/Tobias

> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From p.mayers at imperial.ac.uk  Mon Oct  7 07:13:46 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 14:13:46 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
Message-ID: <5252B38A.8050108@imperial.ac.uk>

On 07/10/13 11:56, Donald Stufft wrote:
> DNSSEC solves none of the problems with the CA system. It just moves
> the problem around.

Disagree.

However - there are other, better forums to have this argument in (and 
to be frank, I've no interest in having it at all) so I won't respond 
further.

I would however urge other people reading this to look into the issues 
and decide for themselves.


From p.mayers at imperial.ac.uk  Mon Oct  7 07:19:43 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 14:19:43 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <5252B4EF.6090504@imperial.ac.uk>

On 07/10/13 12:35, Tobias Oberstein wrote:

> DNSSEC seems to follow a centralized/hierachical trust model. Won't
> help. The NSA will (does?) own those.

The default trust model is to have parent sign the child. Other models 
are not only possible, they're deployed. Google "DLV" and "trust anchor".

As to whether "the NSA" has the root keys; given recent revelations I 
rule nothing out. But if this is a concern, I would urge you to 
investigate and get involved in the root key generation and rollover 
procedures - there is a rollover coming soon, and more eyes make 
subversion less likely.

> That could be a good start: it would take a community effort to
> scrutinize, security review and robustify for production.
>
> The monoculture of OpenSSL is no good IMHO.

I agree, but there are other options - gnutls, NSS - which have received 
this scrutiny, if you want to move away from OpenSSL.


From glyph at twistedmatrix.com  Mon Oct  7 11:00:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 7 Oct 2013 10:00:33 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>


On Oct 6, 2013, at 4:11 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>>> If above sounds OT for this list, in one way probably, but when looking from
>>> the angle: competitive advantage of Python/Twisted and opportunities for
>>> expanding the community and actively promoting Twisted, I'd say it's on
>>> topic.
> 
>> While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just >say it on this list ;-).  The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.
> 
> Ok, thank you for making this crystal clear! 
> 
> What's your take on the tactic/proposal  "actively promoting Twisted for IoT"?

Personally I don't have much of one.  I don't know a lot about that space.

> E.g., as a start, we could have a dedicated page on the Twistedmatrix Web site "Twisted for Things" for intro and collecting links, articles etc

Fun fact: the very first class in the very first thing that would eventually become Twisted was called "Thing".  ;-)

> Dummy question: how would I contribute to the Trac-based Web site content?

Just click on the "edit" button at the bottom of any wiki page.  Some of the pages (like the front page) are locked to prevent abuse, but I can give you whatever extra permissions you need if you want to work on the site.

-glyph

From tobias.oberstein at tavendo.de  Mon Oct  7 11:40:51 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 10:40:51 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>

> > E.g., as a start, we could have a dedicated page on the Twistedmatrix
> > Web site "Twisted for Things" for intro and collecting links, articles
> > etc
> 
> Fun fact: the very first class in the very first thing that would eventually
> become Twisted was called "Thing".  ;-)

What a prevision;)

> 
> > Dummy question: how would I contribute to the Trac-based Web site
> content?
> 
> Just click on the "edit" button at the bottom of any wiki page.  Some of the
> pages (like the front page) are locked to prevent abuse, but I can give you
> whatever extra permissions you need if you want to work on the site.

Yes please, I'd like to contribute to the site.

I have visited a dozen pages from the Index, and I have no "edit" button .. nowhere. I am logged in ("oberstet") .. I can file/edit tickets.

I would start by creating a new page, following http://twistedmatrix.com/trac/wiki/WikiNewPage, and - at this point - only add a link to the new page from the Index page.

A general question regarding using Trac as a Website system: the landing page does only links to a couple of further pages.
How are user supposed to navigate around? Always via the Index page?

You know, I haven't done a lot systematic looking around exactly for that reason .. when I look for Twisted docs/pages, I basically Google for them (sometimes restricting the search to Twistedmatrix).
The UX of the Website is .. unusual .. or I just don't get it.

/Tobias

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Mon Oct  7 11:58:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 7 Oct 2013 10:58:58 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <5252B38A.8050108@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
Message-ID: <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>


On Oct 7, 2013, at 6:13 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 07/10/13 11:56, Donald Stufft wrote:
>> DNSSEC solves none of the problems with the CA system. It just moves
>> the problem around.
> 
> Disagree.
> 
> However - there are other, better forums to have this argument in (and to be frank, I've no interest in having it at all) so I won't respond further.
> 
> I would however urge other people reading this to look into the issues and decide for themselves.

If you have a disagreement, please say what the disagreement is (not just "disagree") and then link to resources instead of abstractly claiming people may find them themselves somehow.  You don't have to get into a big back-and-forth, but I believe DNSSEC implementation work is proceeding in Twisted so it would be good for the community to be aware of these issues.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131007/199ca085/attachment-0001.html>

From p.mayers at imperial.ac.uk  Mon Oct  7 17:10:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 08 Oct 2013 00:10:51 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
Message-ID: <52533F7B.6050306@imperial.ac.uk>

On 07/10/2013 18:58, Glyph wrote:

> If you have a disagreement, please say /what the disagreement is/ (not
> just "disagree") and then link to resources instead of abstractly
> claiming people may find them themselves somehow.  You don't have to get
> into a big back-and-forth, but I believe DNSSEC implementation work is
> proceeding in Twisted so it would be good for the community to be aware
> of these issues.

Ok. Don't say I didn't warn you. Apologies to anyone who forces 
themselves to read all this, and please note I DO NOT claim authority on 
any of this - I'm just a random guy. People should decide for themselves.

Donald wrote:

"""
DNSSEC solves none of the problems with the CA system. It just moves the 
problem around.
"""

I believe I understand why he said this, but I think it's incorrect to 
say that DNSSEC solves "none" of the problems. I think it solves many 
(though not all) of them, and that supplementary systems - which are 
desirable in and of themselves - can take us the rest of the way.

Here's my reasoning:

I think it's fair to say that the PKIX trust model is known to have some 
serious flaws. They basically stem from the existence of far, far too 
many CAs, and the lack of constraint on what a CA can issue for.

There are various proposed solutions to this problem. DNSSEC-signed TLSA 
records (DANE; RFC 6698) offer one solution to the problem - to put 
hashes of certs/keys or issuer/chain certs/keys in DNS, and sign then 
with DNSSEC. This accomplishes two things:

  1. Reduction in the number of trusted CAs. To what degree depends on 
what deployment model you use - you can put a specific key/cert into 
DNS, or one or more traditional X.509 issuers that allowed to sign for 
you. The latter in particular seems likely to be common - reduce the CAs 
that can sign for "blah.example.com" from ~1500 by putting the hashes of 
the 1/2/N "good" CA certs (most specific parent!) into the 
"blah.example.com" TLSA records.

  2. Constraint - a DNS zone-signing key can only sign records below it, 
terminating at secure child delegations (DS keys).

The obvious objection to this solution is the necessary trust in the DNS 
root / parent zones. There are, it seems, people who are not willing to 
grant this trust. I understand that - particularly in light of recent 
revelations.

However: government agencies are not the only people who might want to 
get certs in the name of a 3rd party. Crime syndicates attacking the 
latest race-to-the-bottom CA to get "e<some unicode glyph like 
x>ample.com" certs are a real issue, and DANE can handle these just fine.

There are arguments that DANE moves the trust problem from CAs to 
registrars and registries. I must admit, I don't understand the threat 
model here - it's asserted that registrars are cheap&cheerful (true) but 
they only handle public key material, and don't run the DNS; the 
registry is a more fruitful target, but validation of the public key 
material they publish for you is trivial (whereas proving that a CA 
somewhere hasn't signed a cert for your domain is not).

In short, I think it's a significant net win, and as a side benefit 
offers greatly reduced key management burden. The ability to publish and 
revoke TLSA records at significantly lower cost than X.509 cert 
issuance, and without need to interact with a 3rd party, would be 
valuable even without the above. It could in theory help decouple TLS 
from X.509 - useful if you want to move to PGP, for example.

However, some people don't agree. Moxie Marlinspike discusses the 
general issues and makes an argument against DANE - see:

http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/

...and the video of the talk here:

http://www.youtube.com/watch?v=Z7Wl2FW2TcA

He essentially suggests a trusted notary system - a working 
implementation of which you can see here:

http://convergence.io/

I agree that this approach is promising. I am not super-confident that 
it will take off - end-users literally DO NOT CARE about these issues 
until it's too late - but if someone (Chrome, Firefox) starts bundling 
notary functionality and prompting users to trust one or more of a 
(randomly shuffled) set of notaries on startup, it might... However, I'm 
not sure how likely that is - see:

https://www.imperialviolet.org/2011/09/07/convergence.html

[Note Adam Langley is "Google TLS person"]

For an alternative take on the problem, see:

http://www.certificate-transparency.org/

People interested in reading a pro-DNSSEC PoV should look here (warning 
- sequence of posts):

http://dankaminsky.com/2010/12/13/dnssec-ch1/

...and here:

http://www.slideshare.net/dakami/black-opspki-2

So - not as short as I'd like, but as short as I could make it. I hope 
that makes my position clear.

Finally a note on why I was reluctant to respond...

In my experience, "discussions" on TLS, X.509, DNS and DNSSEC can become 
very emotive, very quickly. There are people who care very, very deeply 
about the minutae of these issues because they directly impact the 
politics of privacy and symmetry of access to the internet.

To be honest, I lack the mental drive to engage in those discussions 
over the internet. Face to face might be another matter, but I have 
better things to do with my time than argue with strangers.

So - if anyone is sitting there bouncing up and down in their seat 
excited about how wrong I am - forgive me if I don't reply, I'm just not 
as excited about it. Look me up in real life sometime and we'll chat 
about it over beer!

Cheers,
Phil


From itamar at itamarst.org  Mon Oct  7 19:13:16 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 07 Oct 2013 21:13:16 -0400
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
Message-ID: <52535C2C.7080904@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: 
https://github.com/itamarst/crochet

*What's New in 0.9.0*

New features:

  * Expanded and much improved documentation, including a new section
    with design suggestions.
  * New decorator @wait_for_reactor added, a simpler alternative to
    @run_in_reactor.
  * Refactored @run_in_reactor, making it a bit more responsive.
  * Blocking operations which would otherwise never finish due to
    reactor having stopped (EventualResult.wait() or @wait_for_reactor
    decorated call) will be interrupted with a ReactorStopped exception.

Bug fixes:

  * @run_in_reactor decorated functions (or rather, their generated
    wrapper) are interrupted by Ctrl-C.
  * On POSIX platforms, a workaround is installed to ensure processes
    started by reactor.spawnProcess have their exit noticed. See Twisted
    ticket 6378 <http://tm.tl/6738> for more details about the
    underlying issue.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131007/2cdd50e6/attachment.html>

From tobias.oberstein at tavendo.de  Tue Oct  8 10:21:47 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 8 Oct 2013 09:21:47 -0700
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
In-Reply-To: <52535C2C.7080904@itamarst.org>
References: <52535C2C.7080904@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>

Hi Itamar,

Nifty. Wasn't aware. I add it to my toolbelt;)

/Tobias

PS: One suggestion for the docs: it could be helpful to contrast the approach crochet takes with the other option of having a Twisted Web WSGI resource for running Flask (and other WSGI stuff) so users can make an informed decision.

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Itamar Turner-Trauring
Gesendet: Dienstag, 8. Oktober 2013 03:13
An: Twisted general discussion
Betreff: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!


Crochet is an MIT-licensed library that makes it easier for blocking or threaded applications like Flask or Django to use the Twisted networking framework. Crochet provides the following features:

 *   Runs Twisted's reactor in a thread it manages.
 *   The reactor shuts down automatically when the process' main thread finishes.
 *   Hooks up Twisted's log system to the Python standard library logging framework. Unlike Twisted's built-in logging bridge, this includes support for blocking Handler instances.
 *   A blocking API to eventual results (i.e. Deferred instances). This last feature can be used separately, so Crochet is also useful for normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: https://github.com/itamarst/crochet

What's New in 0.9.0

New features:

 *   Expanded and much improved documentation, including a new section with design suggestions.
 *   New decorator @wait_for_reactor added, a simpler alternative to @run_in_reactor.
 *   Refactored @run_in_reactor, making it a bit more responsive.
 *   Blocking operations which would otherwise never finish due to reactor having stopped (EventualResult.wait() or @wait_for_reactor decorated call) will be interrupted with a ReactorStopped exception.

Bug fixes:

 *   @run_in_reactor decorated functions (or rather, their generated wrapper) are interrupted by Ctrl-C.
 *   On POSIX platforms, a workaround is installed to ensure processes started by reactor.spawnProcess have their exit noticed. See Twisted ticket 6378<http://tm.tl/6738> for more details about the underlying issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131008/eb85243c/attachment-0001.html>

From tobias.oberstein at tavendo.de  Tue Oct  8 10:28:22 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 8 Oct 2013 09:28:22 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <52533F7B.6050306@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
 <52533F7B.6050306@imperial.ac.uk>
Message-ID: <634914A010D0B943A035D226786325D444689FFF3D@EXVMBX020-12.exch020.serverdata.net>

> Ok. Don't say I didn't warn you. Apologies to anyone who forces themselves
> to read all this, and please note I DO NOT claim authority on any of this - I'm
> just a random guy. People should decide for themselves.

Nothing to apologize .. I have learned from your post. And the pointers you give. Thanks!

> So - if anyone is sitting there bouncing up and down in their seat excited
> about how wrong I am - forgive me if I don't reply, I'm just not as excited
> about it. Look me up in real life sometime and we'll chat about it over beer!

I agree. It has a lot of facets and discussing over email is very time consuming.

Would be nice to meet you personally! Maybe at some Python conference/such thing ..

Warning: we might have a discussion about brands of beers then as well;)

_Cheers_;)

/Tobias


From glyph at twistedmatrix.com  Tue Oct  8 14:49:06 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 8 Oct 2013 13:49:06 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <52533F7B.6050306@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
 <52533F7B.6050306@imperial.ac.uk>
Message-ID: <F279E732-FE6B-4D2E-990A-51FFD0055633@twistedmatrix.com>


On Oct 7, 2013, at 4:10 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 07/10/2013 18:58, Glyph wrote:
> 
>> If you have a disagreement, please say /what the disagreement is/ (not
>> just "disagree") and then link to resources instead of abstractly
>> claiming people may find them themselves somehow.  You don't have to get
>> into a big back-and-forth, but I believe DNSSEC implementation work is
>> proceeding in Twisted so it would be good for the community to be aware
>> of these issues.
> 
> Ok. Don't say I didn't warn you. Apologies to anyone who forces themselves to read all this, and please note I DO NOT claim authority on any of this - I'm just a random guy. People should decide for themselves.
> 
> Donald wrote:
> 
> """
> DNSSEC solves none of the problems with the CA system. It just moves the problem around.
> """
> 
> I believe I understand why he said this, but I think it's incorrect to say that DNSSEC solves "none" of the problems. I think it solves many (though not all) of them, and that supplementary systems - which are desirable in and of themselves - can take us the rest of the way.

I think I basically agree with this sentiment.  A lot of security measures are based on threat-neutralization, whereas DNSSEC is based on threat-reduction.  It mitigates intrusions by certain classes of bad actor while still enabling others.

An important thing is that the average user isn't going to perceive any difference in security when using DNSSEC; so they're not going to get a false sense of security from DNSSEC.

> Here's my reasoning:
> 
> I think it's fair to say that the PKIX trust model is known to have some serious flaws. They basically stem from the existence of far, far too many CAs, and the lack of constraint on what a CA can issue for.

One minor quibble I have here is that trust is always between two parties.  The presence of a "trusted third party" is _always_ a problem.  So it's not that there are too many CAs, but rather, that you *always* need a cartel CA to sign your stuff in order to be able to trust someone, and once you have an established trust relationship, you can't base things off of that relationship rather than off of software-distributor (i.e. browser-vendor) granted authority.

> There are various proposed solutions to this problem. DNSSEC-signed TLSA records (DANE; RFC 6698) offer one solution to the problem - to put hashes of certs/keys or issuer/chain certs/keys in DNS, and sign then with DNSSEC. This accomplishes two things:
> 
> 1. Reduction in the number of trusted CAs. To what degree depends on what deployment model you use - you can put a specific key/cert into DNS, or one or more traditional X.509 issuers that allowed to sign for you. The latter in particular seems likely to be common - reduce the CAs that can sign for "blah.example.com" from ~1500 by putting the hashes of the 1/2/N "good" CA certs (most specific parent!) into the "blah.example.com" TLSA records.
> 
> 2. Constraint - a DNS zone-signing key can only sign records below it, terminating at secure child delegations (DS keys).
> 
> The obvious objection to this solution is the necessary trust in the DNS root / parent zones. There are, it seems, people who are not willing to grant this trust. I understand that - particularly in light of recent revelations.

It's worth noting, however, that you are already accepting a certain degree of trust in the DNS root.  Even if your traffic is totally cryptographically secure, if you're talking to a compromised DNS they can still reliably tell (A) who you are talking to and (B) when you are talking to them.

So if the option is "trust the DNS and a bunch of CAs" or "trust the DNS", just trusting the DNS is safer (even if not, in an absolute sense, "safe").

> However: government agencies are not the only people who might want to get certs in the name of a 3rd party. Crime syndicates attacking the latest race-to-the-bottom CA to get "e<some unicode glyph like x>ample.com" certs are a real issue, and DANE can handle these just fine.

Another way to look at it is that governments are the largest, most established crime syndicates, with the most rules governing their use of violence (I won't say they're the "least violent"); so again, the question is "do you want to be vulnerable to SOME crime syndicates or to ALL crime syndicates", the answer is clearly the former :).

> There are arguments that DANE moves the trust problem from CAs to registrars and registries. I must admit, I don't understand the threat model here - it's asserted that registrars are cheap&cheerful (true) but they only handle public key material, and don't run the DNS; the registry is a more fruitful target, but validation of the public key material they publish for you is trivial (whereas proving that a CA somewhere hasn't signed a cert for your domain is not).

This is the sort of thing OCSP and CRLs are for, though, right?

> In short, I think it's a significant net win, and as a side benefit offers greatly reduced key management burden. The ability to publish and revoke TLSA records at significantly lower cost than X.509 cert issuance, and without need to interact with a 3rd party, would be valuable even without the above. It could in theory help decouple TLS from X.509 - useful if you want to move to PGP, for example.
> 
> However, some people don't agree. Moxie Marlinspike discusses the general issues and makes an argument against DANE - see:
> 
> http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/
> 
> ...and the video of the talk here:
> 
> http://www.youtube.com/watch?v=Z7Wl2FW2TcA

Interesting reading.  Thanks for presenting the opposing view as well :).

> He essentially suggests a trusted notary system - a working implementation of which you can see here:
> 
> http://convergence.io/
> 
> I agree that this approach is promising. I am not super-confident that it will take off - end-users literally DO NOT CARE about these issues until it's too late - but if someone (Chrome, Firefox) starts bundling notary functionality and prompting users to trust one or more of a (randomly shuffled) set of notaries on startup, it might... However, I'm not sure how likely that is - see:
> 
> https://www.imperialviolet.org/2011/09/07/convergence.html
> 
> [Note Adam Langley is "Google TLS person"]
> 
> For an alternative take on the problem, see:
> 
> http://www.certificate-transparency.org/
> 
> People interested in reading a pro-DNSSEC PoV should look here (warning - sequence of posts):
> 
> http://dankaminsky.com/2010/12/13/dnssec-ch1/
> 
> ...and here:
> 
> http://www.slideshare.net/dakami/black-opspki-2
> 
> So - not as short as I'd like, but as short as I could make it. I hope that makes my position clear.

Yes, tremendously enlightening.  And I thought I already understood these issues fairly well!

> Finally a note on why I was reluctant to respond...
> 
> In my experience, "discussions" on TLS, X.509, DNS and DNSSEC can become very emotive, very quickly. There are people who care very, very deeply about the minutae of these issues because they directly impact the politics of privacy and symmetry of access to the internet.

I understand.  But that's out there on The Internet, and not here on the eminently civil and thoughtful Twisted mailing list, where we can count on the discourse to be at a higher level :-).  As you can see, no fallout has occurred!

> To be honest, I lack the mental drive to engage in those discussions over the internet. Face to face might be another matter, but I have better things to do with my time than argue with strangers.
> 
> So - if anyone is sitting there bouncing up and down in their seat excited about how wrong I am - forgive me if I don't reply, I'm just not as excited about it. Look me up in real life sometime and we'll chat about it over beer!
> 
> Cheers,
> Phil


Thanks for taking the time to write all this up.

-glyph



From itamar at itamarst.org  Tue Oct  8 17:10:32 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 08 Oct 2013 19:10:32 -0400
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
In-Reply-To: <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>
References: <52535C2C.7080904@itamarst.org>
 <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <525490E8.9090802@itamarst.org>

On 10/08/2013 12:21 PM, Tobias Oberstein wrote:
>
> PS: One suggestion for the docs: it could be helpful to contrast the 
> approach crochet takes with the other option of having a Twisted Web 
> WSGI resource for running Flask (and other WSGI stuff) so users can 
> make an informed decision.
>

That's a good idea; I opened a ticket to document that.

Short version:

1. Maybe you're not writing a web app, but some other application or a 
generic library, in which case WSGI is irrelevant.

2. Maybe you don't want to deploy on Twisted's WSGI container because 
you prefer some other WSGI container.

Even if you decide to use Twisted as a WSGI container, or in fact any 
time you're using threads with Twisted where deferToThread is 
insufficient, Crochet's APIs for calling into Twisted from a thread are 
much nicer than blockingCallFromThread.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131008/2089b453/attachment.html>

From kebin70 at gmail.com  Fri Oct 11 16:05:58 2013
From: kebin70 at gmail.com (kevin mcintyre)
Date: Fri, 11 Oct 2013 15:05:58 -0700
Subject: [Twisted-Python] web templating with html
Message-ID: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>

https://twistedmatrix.com/documents/current/web/howto/twisted-templates.html#auto7

I see the example with quoting, but what if I want to render html?

I'm trying to get the text/html part of an email, and want to render as is.

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131011/ba691a62/attachment.html>

From glyph at twistedmatrix.com  Sat Oct 12 02:43:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Oct 2013 01:43:14 -0700
Subject: [Twisted-Python] web templating with html
In-Reply-To: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>
References: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>
Message-ID: <CBF74A07-80A1-4EBB-990F-CCEC7D7ADF30@twistedmatrix.com>


On Oct 11, 2013, at 3:05 PM, kevin mcintyre <kebin70 at gmail.com> wrote:

> https://twistedmatrix.com/documents/current/web/howto/twisted-templates.html#auto7
> 
> I see the example with quoting, but what if I want to render html?  
> 
> I'm trying to get the text/html part of an email, and want to render as is.
> 
> Thanks in advance.

This feature has already been requested for twisted.web.template:

<https://twistedmatrix.com/trac/ticket/4984>

Since you've mentioned it, I put a couple of code snippets on the bug which explain how we might address this, which should provide you with some possibilities to get moving with your application; they are all using existing public APIs.  I hope you'll stick around and help us at least improve the documentation, if not the implementation, though :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131012/79bc11aa/attachment.html>

From wasilak at gmail.com  Sat Oct 12 08:27:59 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sat, 12 Oct 2013 16:27:59 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
Message-ID: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>

Hello,

I've got a problem when using Twisted UDP-based app with IPv6. I know UDP
IPv6 is not yet officially supported, I am using the unoffcial hack found
somewhere on the net.

----------------UNOFFICIAL HACK----------------------
In twisted/internet/udp.py:

(...)
    def __init__(self, port, proto, interface='', maxPacketSize=8192,
reactor=None):
        """
        Initialize with a numeric port to listen on.
        """
        base.BasePort.__init__(self, reactor)
        self.port = port
        self.protocol = proto
        self.maxPacketSize = maxPacketSize
        self.interface = interface
        self.setLogStr()
        self._connectedAddr = None
+       if interface and abstract.isIPv6Address(interface): ###
+          self.addressFamily = socket.AF_INET6 ###

(...)
    def doRead(self):
        """
        Called when my socket is ready for reading.
        """
        read = 0
        while read < self.maxThroughput:
            try:
                data, addr = self.socket.recvfrom(self.maxPacketSize)
            except socket.error as se:
                no = se.args[0]
                if no in _sockErrReadIgnore:
                    return
                if no in _sockErrReadRefuse:
                    if self._connectedAddr:
                        self.protocol.connectionRefused()
                    return
                raise
            else:
                read += len(data)
                try:
+                 addr = (addr[0], addr[1]) ###
                    self.protocol.datagramReceived(data, addr)
                except:
                    log.err()
--------------END OF UNOFFICIAL HACK------------------------

I deploy my protocol like that:

reactor.listenUDP(5683, myapp.MyProtocol(), interface="::")
reactor.run()

The problem is:
1. My server receives a request from remote client (with destination
address being valid global IPv6 address)
2. The server sends a response, but uses different source address (which is
also valid and assigned to local wlan0 interface).
3. Remote host drops the response (destination address of the request and
source address of the response do not match).

It is common for IPv6 interfaces to have multiple global IPv6 addresses -
because of privacy reasons (both on Windows and Linux).

My question is - can I read manually the destination address from the
incoming request datagram, and set it as a source address manually in the
outgoing response datagram?

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131012/c623f869/attachment.html>

From trac at twistedmatrix.com  Sun Oct 13 00:05:23 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Oct 2013 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1381644323.41.2144218698835044198@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131013/ff8e50dd/attachment.html>

From tobias.oberstein at tavendo.de  Sun Oct 13 11:51:38 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 13 Oct 2013 10:51:38 -0700
Subject: [Twisted-Python] AutobahnTestsuite 0.5.6
Message-ID: <634914A010D0B943A035D226786325D44469B06676@EXVMBX020-12.exch020.serverdata.net>

Hi,

we've just release a new version of AutobahnTestsuite - including WebSocket compression testing.

Full announcement:
https://groups.google.com/forum/#!topic/autobahnws/_WIk5Z_xJ4U

Reports:
http://autobahn.ws/testsuite#reports_20131013

Takeaways:

1) Compression:
=> go to section 12 in reports
=> compression on real-world JSON can achieve ratios of up to 20!

2) Performance:
Autobahn/Twisted on CPython using wsaccel (Cython based acceleration for certain things) or PyPy are really competitive.
http://autobahn.ws/testsuite/reports/servers/index.html
=> section 9
=> Testing details: https://github.com/tavendo/AutobahnTestSuite/tree/master/examples/publicreports

There are a couple of interesting aspects rgd CPy+wsaccel and PyPy: on large volumes of data, CPy+wsaccel wins.
On small data, but lots of, PyPy is faster. PyPy is good at accelerating all the loops and conditional code, but Cython
is faster when doing mass data crunching. I expect more differences under real, concurrent load, since the GCs are
quite different. Anyway,

Cheers,
/Tobias


From itamar at itamarst.org  Mon Oct 14 11:43:17 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Oct 2013 13:43:17 -0400
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
Message-ID: <525C2D35.2060407@itamarst.org>

On 10/12/2013 10:27 AM, Maciej Wasilak wrote:
>
> I deploy my protocol like that:
>
> reactor.listenUDP(5683, myapp.MyProtocol(), interface="::")
> reactor.run()
>
> The problem is:
> 1. My server receives a request from remote client (with destination 
> address being valid global IPv6 address)
> 2. The server sends a response, but uses different source address 
> (which is also valid and assigned to local wlan0 interface).
> 3. Remote host drops the response (destination address of the request 
> and source address of the response do not match).
>
> It is common for IPv6 interfaces to have multiple global IPv6 
> addresses - because of privacy reasons (both on Windows and Linux).
>
> My question is - can I read manually the destination address from the 
> incoming request datagram, and set it as a source address manually in 
> the outgoing response datagram?

If you pass a specific IP to the interface keyword argument instead of 
"::", the UDP port will bind to that specific IP and will only send 
datagrams on that IP. You can use netifaces package (e.g. find it on 
PyPI) to list all local IPs. So you could do the equivalent of "::" by 
binding multiple times, once for each IPv6 address.


From wasilak at gmail.com  Wed Oct 16 01:36:58 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 16 Oct 2013 09:36:58 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <525C2D35.2060407@itamarst.org>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
Message-ID: <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>

Itamar,

If you pass a specific IP to the interface keyword argument instead of
> "::", the UDP port will bind to that specific IP and will only send
> datagrams on that IP. You can use netifaces package (e.g. find it on PyPI)
> to list all local IPs. So you could do the equivalent of "::" by binding
> multiple times, once for each IPv6 address.
>

Thanks for the hint - I've ran a few tests with netifaces. Few observations:
1. Returned interface identifiers for Windows are not human-readable - it's
hard to determine which interface is wireless, and which one is loopback
from just the interface identifier. Results for Linux are better -
identifiers are human readable (eth0, wlan0, lo, etc.) - it might be
possible to implement some simple logic to automatically choose the right
interface.
2. As far as I noticed it is not possible to use one DatagramProtocol
instance to listen on multiple addresses, so I think to achieve "::"
equivalent I have to use separate DatagramProtocol instance for each
address. However I think in many cases it's enough to deploy server on a
single address, provided it's a reachable and well-known one.
3. I've checked some docs and see no easy way to deploy a server which
automatically listens on all interfaces and responds with a source address
that was used in request . It seems that it has nothing to do with Twisted.
It is rather caused by the underlying Python socket implementation.

All in all the problem with using wrong source address can be easilly
solved with a bit of user attention, however it's hard to find the solution
that "just works".

Best Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/359e7c7c/attachment.html>

From itamar at itamarst.org  Wed Oct 16 05:47:34 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 16 Oct 2013 07:47:34 -0400
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
Message-ID: <525E7CD6.9040006@itamarst.org>

On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
>
> All in all the problem with using wrong source address can be easilly 
> solved with a bit of user attention, however it's hard to find the 
> solution that "just works".
>
There's an OS API (recvmsg?) that lets you get at this information; I 
believe Twisted has the start of a wrapper for it. Given a full wrapper 
we could create a new UDP API that did support this easily.

-Itamar


From m-lists at the-moon.net  Wed Oct 16 06:14:46 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Wed, 16 Oct 2013 13:14:46 +0100
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <525E7CD6.9040006@itamarst.org>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
 <525E7CD6.9040006@itamarst.org>
Message-ID: <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>

On 16 October 2013 12:47, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
>> All in all the problem with using wrong source address can be easilly
>> solved with a bit of user attention, however it's hard to find the solution
>> that "just works".
>>
> There's an OS API (recvmsg?) that lets you get at this information; I
> believe Twisted has the start of a wrapper for it. Given a full wrapper we
> could create a new UDP API that did support this easily.

Here's a good description of how PowerDNS solved this problem using recvmsg:
 * http://bert-hubert.blogspot.nl/2012/10/on-binding-datagram-udp-sockets-to-any.html

I don't think it's currently possible to listenUDP on a specific IPv6 address:
 * https://twistedmatrix.com/trac/ticket/5086

But the branch for that ticket is almost ready to be merged... it just
needs a few custom exception classes I think.

-RichardW.


From sayresc at gmail.com  Wed Oct 16 11:33:29 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 10:33:29 -0700
Subject: [Twisted-Python] Garbage in logfiles?
Message-ID: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>

Hi All,

I'm working for an astro observatory and we are upgrading our telescope control software.  We are swapping to twisted under the hood, and I have run into an issue regarding logging.

I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:

3230 3133 2d31 302d 3136 2031 303a 3131
3a34 352d 3037 3030 205b 2d5d 2044 6576
436d 6428 5354 4154 5553 290a 3230 3133
2d31 302d 3136 2031 303a 3131 3a34 352d
3037 3030 205b 2d5d 2044 6576 436d 6428
5354 4154 5553 290a 3230 3133 2d31 302d

Here is an example of a few lines from a good log file:

2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000, 000000000, 000000000 commanded position)
2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i axisHomed=1, 1, 1, 1, 1)
2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)

I haven't been able to reproduce the problem in a simpler framework than our simulation.  I am triggering the rollover by directly calling LogFile.rollover on a timer.  The problem also exists if I define a small file size limit for automatic rollover and let twisted do it automatically.

Sound familiar to anyone out there?

Cheers,
Conor



From radix at twistedmatrix.com  Wed Oct 16 11:44:27 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Oct 2013 12:44:27 -0500
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
Message-ID: <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>

On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:

> Hi All,
>
> I'm working for an astro observatory and we are upgrading our telescope
> control software.  We are swapping to twisted under the hood, and I have
> run into an issue regarding logging.
>
> I have set up twisted logging to record all communication between our
> devices.  When we simulate our system with a high frequency log rollover
> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> example of a few lines in a given bad log file:
>
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d
>
> Here is an example of a few lines from a good log file:
>
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000,
> 000000000, 000000000 commanded position)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>
> I haven't been able to reproduce the problem in a simpler framework than
> our simulation.  I am triggering the rollover by directly calling
> LogFile.rollover on a timer.  The problem also exists if I define a small
> file size limit for automatic rollover and let twisted do it automatically.
>


I don't think there's any method named "rollover" anywhere in Twisted (in
fact, I just confirmed this with grep).

Your message is pretty vague and context-free; could you try to add more
necessary detail? Is the problem with the output you're seeing the
*content* of the numbers/letters, or just the fact that they're appearing
at all? Maybe there's relevant output before or after that block of
numbers/letters? Did you leave out the timestamp prefixes when pasting to
this email, or is there really no timestamp prefixing the lines of that
output?

I don't know where those numbers/letters could be coming from. Does your
code (or any libraries you use) ever print to stdout? By default, Twisted
redirects all prints (and any writing to sys.stdout) to the log file.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/c09661eb/attachment.html>

From sayresc at gmail.com  Wed Oct 16 12:12:12 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 11:12:12 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
Message-ID: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>


On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:
> Hi All,
> 
> I'm working for an astro observatory and we are upgrading our telescope control software.  We are swapping to twisted under the hood, and I have run into an issue regarding logging.
> 
> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
> 
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d
> 
> Here is an example of a few lines from a good log file:
> 
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000, 000000000, 000000000 commanded position)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 
> I haven't been able to reproduce the problem in a simpler framework than our simulation.  I am triggering the rollover by directly calling LogFile.rollover on a timer.  The problem also exists if I define a small file size limit for automatic rollover and let twisted do it automatically.
> 
> 
> I don't think there's any method named "rollover" anywhere in Twisted (in fact, I just confirmed this with grep).

I'm sorry, the method is rotate my mistake

> 
> Your message is pretty vague and context-free; could you try to add more necessary detail?
> Is the problem with the output you're seeing the *content* of the numbers/letters, or just the fact that they're appearing at all? Maybe there's relevant output before or after that block of numbers/letters? Did you leave out the timestamp prefixes when pasting to this email, or is there really no timestamp prefixing the lines of that output?

The bad log files are 100% full of non-relevant output.  They contain no time stamps, solely lines of 4 character blocks (hex?).  They should contain information like the example of a good log I showed above.

The good log files are 100% full of relevant output, no corruption.  They contain the timestamps (as they should).

It seems somewhat random whether or not a given log file will be good or bad.

> 
> I don't know where those numbers/letters could be coming from. Does your code (or any libraries you use) ever print to stdout? By default, Twisted redirects all prints (and any writing to sys.stdout) to the log file.
> 

The log was configured to NOT capture print statements to stdout.

> 
> -- 
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/26ac98d0/attachment.html>

From radix at twistedmatrix.com  Wed Oct 16 12:19:07 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Oct 2013 13:19:07 -0500
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
 <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
Message-ID: <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>

On Wed, Oct 16, 2013 at 1:12 PM, Conor Sayres <sayresc at gmail.com> wrote:

>
> On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:
>
>> Hi All,
>>
>> I'm working for an astro observatory and we are upgrading our telescope
>> control software.  We are swapping to twisted under the hood, and I have
>> run into an issue regarding logging.
>>
>> I have set up twisted logging to record all communication between our
>> devices.  When we simulate our system with a high frequency log rollover
>> rate (~5 seconds), many of the logs contain only garbage.  Here is an
>> example of a few lines in a given bad log file:
>>
>> 3230 3133 2d31 302d 3136 2031 303a 3131
>> 3a34 352d 3037 3030 205b 2d5d 2044 6576
>> 436d 6428 5354 4154 5553 290a 3230 3133
>> 2d31 302d 3136 2031 303a 3131 3a34 352d
>> 3037 3030 205b 2d5d 2044 6576 436d 6428
>> 5354 4154 5553 290a 3230 3133 2d31 302d
>>
>> Here is an example of a few lines from a good log file:
>>
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
>> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
>> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000,
>> 000000000, 000000000 commanded position)
>> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
>> axisHomed=1, 1, 1, 1, 1)
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>>
>> I haven't been able to reproduce the problem in a simpler framework than
>> our simulation.  I am triggering the rollover by directly calling
>> LogFile.rollover on a timer.  The problem also exists if I define a small
>> file size limit for automatic rollover and let twisted do it automatically.
>>
>
>
> I don't think there's any method named "rollover" anywhere in Twisted (in
> fact, I just confirmed this with grep).
>
>
> I'm sorry, the method is rotate my mistake
>
>
> Your message is pretty vague and context-free; could you try to add more
> necessary detail?
>
> Is the problem with the output you're seeing the *content* of the
> numbers/letters, or just the fact that they're appearing at all? Maybe
> there's relevant output before or after that block of numbers/letters? Did
> you leave out the timestamp prefixes when pasting to this email, or is
> there really no timestamp prefixing the lines of that output?
>
>
> The bad log files are 100% full of non-relevant output.  They contain no
> time stamps, solely lines of 4 character blocks (hex?).  They should
> contain information like the example of a good log I showed above.
>
> The good log files are 100% full of relevant output, no corruption.  They
> contain the timestamps (as they should).
>
> It seems somewhat random whether or not a given log file will be good or
> bad.
>
>
> I don't know where those numbers/letters could be coming from. Does your
> code (or any libraries you use) ever print to stdout? By default, Twisted
> redirects all prints (and any writing to sys.stdout) to the log file.
>
>
> The log was configured to NOT capture print statements to stdout.
>



The only other thing I can think of (without having a reproducible example
of the problem in a self-contained executable example) is that some other
program or code is opening the same file and writing garbage to it. Maybe
you accidentally pass the location of the log file somewhere that wants a
file to write to. It's unlikely that twisted's logging code itself would
write unprefixed lines without a custom observer doing so.


>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>  _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/bb3b76ae/attachment.html>

From glyph at twistedmatrix.com  Wed Oct 16 14:14:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 16 Oct 2013 13:14:00 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
 <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
 <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>
Message-ID: <0B91CDE1-5DED-4521-95DE-84EC0C246C4E@twistedmatrix.com>


On Oct 16, 2013, at 11:19 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> The only other thing I can think of (without having a reproducible example of the problem in a self-contained executable example) is that some other program or code is opening the same file and writing garbage to it. Maybe you accidentally pass the location of the log file somewhere that wants a file to write to. It's unlikely that twisted's logging code itself would write unprefixed lines without a custom observer doing so.

Whenever I've seen truly garbage stuff like this, it's always been some code that opens a file descriptor, has it closed out from under it, and then the log file gets (re-?)opened with the same file descriptor number.  Then write() calls start going to the logfile's FD.

This is almost certainly a bug in your code or some other library that it's using, not Twisted itself.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/48c706a3/attachment-0001.html>

From tom.sheffler at gmail.com  Wed Oct 16 14:41:40 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 16 Oct 2013 13:41:40 -0700
Subject: [Twisted-Python] Twisted-Python Digest, Vol 115, Issue 19
In-Reply-To: <mailman.2906.1381954449.2077.twisted-python@twistedmatrix.com>
References: <mailman.2906.1381954449.2077.twisted-python@twistedmatrix.com>
Message-ID: <CAMBtMcsJ6spDcKV-W0aH9=rXAfQRXHthWhCmJfX7e5Gvka8A0Q@mail.gmail.com>

Don't know if this helps:

>>> chr(0x32) + chr(0x30) + chr(0x31) + chr(0x33) + chr(0x2d) + chr(0x31) +
chr(0x30) + chr(0x2d) + chr(0x31) + chr(0x36) + chr(0x20) + chr(0x31) +
chr(0x30) + chr(0x3a) + chr(0x31) + chr(0x31)
'2013-10-16 10:11'
>>>


On Wed, Oct 16, 2013 at 1:14 PM,
<twisted-python-request at twistedmatrix.com>wrote:

> Send Twisted-Python mailing list submissions to
>         twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>         twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
>
>
> Today's Topics:
>
>    1. Re: Garbage in logfiles? (Conor Sayres)
>    2. Re: Garbage in logfiles? (Christopher Armstrong)
>    3. Re: Garbage in logfiles? (Glyph)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Wed, 16 Oct 2013 11:12:12 -0700
> From: Conor Sayres <sayresc at gmail.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4 at gmail.com>
> Content-Type: text/plain; charset="us-ascii"
>
>
> On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> > On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com>
> wrote:
> > Hi All,
> >
> > I'm working for an astro observatory and we are upgrading our telescope
> control software.  We are swapping to twisted under the hood, and I have
> run into an issue regarding logging.
> >
> > I have set up twisted logging to record all communication between our
> devices.  When we simulate our system with a high frequency log rollover
> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> example of a few lines in a given bad log file:
> >
> > 3230 3133 2d31 302d 3136 2031 303a 3131
> > 3a34 352d 3037 3030 205b 2d5d 2044 6576
> > 436d 6428 5354 4154 5553 290a 3230 3133
> > 2d31 302d 3136 2031 303a 3131 3a34 352d
> > 3037 3030 205b 2d5d 2044 6576 436d 6428
> > 5354 4154 5553 290a 3230 3133 2d31 302d
> >
> > Here is an example of a few lines from a good log file:
> >
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> > 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> > 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> > 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000,
> 000000000, 000000000, 000000000 commanded position)
> > 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> axisHomed=1, 1, 1, 1, 1)
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >
> > I haven't been able to reproduce the problem in a simpler framework than
> our simulation.  I am triggering the rollover by directly calling
> LogFile.rollover on a timer.  The problem also exists if I define a small
> file size limit for automatic rollover and let twisted do it automatically.
> >
> >
> > I don't think there's any method named "rollover" anywhere in Twisted
> (in fact, I just confirmed this with grep).
>
> I'm sorry, the method is rotate my mistake
>
> >
> > Your message is pretty vague and context-free; could you try to add more
> necessary detail?
> > Is the problem with the output you're seeing the *content* of the
> numbers/letters, or just the fact that they're appearing at all? Maybe
> there's relevant output before or after that block of numbers/letters? Did
> you leave out the timestamp prefixes when pasting to this email, or is
> there really no timestamp prefixing the lines of that output?
>
> The bad log files are 100% full of non-relevant output.  They contain no
> time stamps, solely lines of 4 character blocks (hex?).  They should
> contain information like the example of a good log I showed above.
>
> The good log files are 100% full of relevant output, no corruption.  They
> contain the timestamps (as they should).
>
> It seems somewhat random whether or not a given log file will be good or
> bad.
>
> >
> > I don't know where those numbers/letters could be coming from. Does your
> code (or any libraries you use) ever print to stdout? By default, Twisted
> redirects all prints (and any writing to sys.stdout) to the log file.
> >
>
> The log was configured to NOT capture print statements to stdout.
>
> >
> > --
> > Christopher Armstrong
> > http://radix.twistedmatrix.com/
> > http://planet-if.com/
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/26ac98d0/attachment-0001.html
> >
>
> ------------------------------
>
> Message: 2
> Date: Wed, 16 Oct 2013 13:19:07 -0500
> From: Christopher Armstrong <radix at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID:
>         <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=
> Mg at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> On Wed, Oct 16, 2013 at 1:12 PM, Conor Sayres <sayresc at gmail.com> wrote:
>
> >
> > On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> > radix at twistedmatrix.com> wrote:
> >
> > On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com>
> wrote:
> >
> >> Hi All,
> >>
> >> I'm working for an astro observatory and we are upgrading our telescope
> >> control software.  We are swapping to twisted under the hood, and I have
> >> run into an issue regarding logging.
> >>
> >> I have set up twisted logging to record all communication between our
> >> devices.  When we simulate our system with a high frequency log rollover
> >> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> >> example of a few lines in a given bad log file:
> >>
> >> 3230 3133 2d31 302d 3136 2031 303a 3131
> >> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> >> 436d 6428 5354 4154 5553 290a 3230 3133
> >> 2d31 302d 3136 2031 303a 3131 3a34 352d
> >> 3037 3030 205b 2d5d 2044 6576 436d 6428
> >> 5354 4154 5553 290a 3230 3133 2d31 302d
> >>
> >> Here is an example of a few lines from a good log file:
> >>
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> >> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> >> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000,
> 000000000,
> >> 000000000, 000000000 commanded position)
> >> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> >> axisHomed=1, 1, 1, 1, 1)
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >>
> >> I haven't been able to reproduce the problem in a simpler framework than
> >> our simulation.  I am triggering the rollover by directly calling
> >> LogFile.rollover on a timer.  The problem also exists if I define a
> small
> >> file size limit for automatic rollover and let twisted do it
> automatically.
> >>
> >
> >
> > I don't think there's any method named "rollover" anywhere in Twisted (in
> > fact, I just confirmed this with grep).
> >
> >
> > I'm sorry, the method is rotate my mistake
> >
> >
> > Your message is pretty vague and context-free; could you try to add more
> > necessary detail?
> >
> > Is the problem with the output you're seeing the *content* of the
> > numbers/letters, or just the fact that they're appearing at all? Maybe
> > there's relevant output before or after that block of numbers/letters?
> Did
> > you leave out the timestamp prefixes when pasting to this email, or is
> > there really no timestamp prefixing the lines of that output?
> >
> >
> > The bad log files are 100% full of non-relevant output.  They contain no
> > time stamps, solely lines of 4 character blocks (hex?).  They should
> > contain information like the example of a good log I showed above.
> >
> > The good log files are 100% full of relevant output, no corruption.  They
> > contain the timestamps (as they should).
> >
> > It seems somewhat random whether or not a given log file will be good or
> > bad.
> >
> >
> > I don't know where those numbers/letters could be coming from. Does your
> > code (or any libraries you use) ever print to stdout? By default, Twisted
> > redirects all prints (and any writing to sys.stdout) to the log file.
> >
> >
> > The log was configured to NOT capture print statements to stdout.
> >
>
>
>
> The only other thing I can think of (without having a reproducible example
> of the problem in a self-contained executable example) is that some other
> program or code is opening the same file and writing garbage to it. Maybe
> you accidentally pass the location of the log file somewhere that wants a
> file to write to. It's unlikely that twisted's logging code itself would
> write unprefixed lines without a custom observer doing so.
>
>
> >
> > --
> > Christopher Armstrong
> > http://radix.twistedmatrix.com/
> > http://planet-if.com/
> >
> >  _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/bb3b76ae/attachment-0001.html
> >
>
> ------------------------------
>
> Message: 3
> Date: Wed, 16 Oct 2013 13:14:00 -0700
> From: Glyph <glyph at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID: <0B91CDE1-5DED-4521-95DE-84EC0C246C4E at twistedmatrix.com>
> Content-Type: text/plain; charset="us-ascii"
>
>
> On Oct 16, 2013, at 11:19 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> > The only other thing I can think of (without having a reproducible
> example of the problem in a self-contained executable example) is that some
> other program or code is opening the same file and writing garbage to it.
> Maybe you accidentally pass the location of the log file somewhere that
> wants a file to write to. It's unlikely that twisted's logging code itself
> would write unprefixed lines without a custom observer doing so.
>
> Whenever I've seen truly garbage stuff like this, it's always been some
> code that opens a file descriptor, has it closed out from under it, and
> then the log file gets (re-?)opened with the same file descriptor number.
>  Then write() calls start going to the logfile's FD.
>
> This is almost certainly a bug in your code or some other library that
> it's using, not Twisted itself.
>
> -g
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/48c706a3/attachment.html
> >
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 115, Issue 19
> ***********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/805fae8f/attachment-0001.html>

From tom.prince at ualberta.net  Wed Oct 16 16:07:29 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 16 Oct 2013 16:07:29 -0600
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
Message-ID: <87d2n498f2.fsf@hermes.hocat.ca>

Conor Sayres <sayresc at gmail.com> writes:

> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
>
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d

How are you viewing the log file? I suspect
you are using less, and that the file contains
some control characters, and less is automatically
showing you a hex dump. Try using `less -A`.

The above lines when coverted from hex are:

2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
2013-10

which looks like part of a log file.

  Tom


From sayresc at gmail.com  Wed Oct 16 16:18:37 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 15:18:37 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <87d2n498f2.fsf@hermes.hocat.ca>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <87d2n498f2.fsf@hermes.hocat.ca>
Message-ID: <CA90785A-2DC4-4FBC-B72F-A8EA1DD34C31@gmail.com>

Hi Guys,

Tom nailed it.  It seems to be a bug in my text editor from which I was viewing the files (Sublime Text 2).  

The logging was correct all along.  Thanks All!

Conor


On Oct 16, 2013, at 3:07 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> Conor Sayres <sayresc at gmail.com> writes:
> 
>> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
>> 
>> 3230 3133 2d31 302d 3136 2031 303a 3131
>> 3a34 352d 3037 3030 205b 2d5d 2044 6576
>> 436d 6428 5354 4154 5553 290a 3230 3133
>> 2d31 302d 3136 2031 303a 3131 3a34 352d
>> 3037 3030 205b 2d5d 2044 6576 436d 6428
>> 5354 4154 5553 290a 3230 3133 2d31 302d
> 
> How are you viewing the log file? I suspect
> you are using less, and that the file contains
> some control characters, and less is automatically
> showing you a hex dump. Try using `less -A`.
> 
> The above lines when coverted from hex are:
> 
> 2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
> 2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
> 2013-10
> 
> which looks like part of a log file.
> 
>  Tom



From sank.daniel at gmail.com  Thu Oct 17 13:26:42 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 17 Oct 2013 12:26:42 -0700
Subject: [Twisted-Python] pb.Cacheable with response to remote requests
Message-ID: <CAKN9TD+1Nia3ak7A-o2rKA9=8FEZ=Eh6McaxtkSEoquro8pFtQ@mail.gmail.com>

Is there a good way to make something like a pb.Cacheable on which the
observers can call remote methods?

-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899


From wasilak at gmail.com  Fri Oct 18 00:20:55 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 18 Oct 2013 08:20:55 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
 <525E7CD6.9040006@itamarst.org>
 <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>
Message-ID: <CAFUtXGwV7CU2wEgfuPfQAL01ujwktLdaSeu2LqpNHSpe7dFQ6Q@mail.gmail.com>

Richard,

thank you very much - this post is exactly what I need. Python supports
recvmsg, and sendmsg from version 3.3, but Twisted has its own
implementation that is 2.7 compatible. I'll try that right away. I think
it's best to include the recvmsg/sendmsg code into my DatagramProtocol
subclass.

Best Regards
Maciek


2013/10/16 Richard Wall <m-lists at the-moon.net>

> On 16 October 2013 12:47, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
> > On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
> >> All in all the problem with using wrong source address can be easilly
> >> solved with a bit of user attention, however it's hard to find the
> solution
> >> that "just works".
> >>
> > There's an OS API (recvmsg?) that lets you get at this information; I
> > believe Twisted has the start of a wrapper for it. Given a full wrapper
> we
> > could create a new UDP API that did support this easily.
>
> Here's a good description of how PowerDNS solved this problem using
> recvmsg:
>  *
> http://bert-hubert.blogspot.nl/2012/10/on-binding-datagram-udp-sockets-to-any.html
>
> I don't think it's currently possible to listenUDP on a specific IPv6
> address:
>  * https://twistedmatrix.com/trac/ticket/5086
>
> But the branch for that ticket is almost ready to be merged... it just
> needs a few custom exception classes I think.
>
> -RichardW.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131018/3c8d53ec/attachment.html>

From itamar at itamarst.org  Sat Oct 19 09:36:12 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Oct 2013 11:36:12 -0400
Subject: [Twisted-Python] ANN: Crochet 1.0.0 - Use Twisted Anywhere!
Message-ID: <5262A6EC.7080105@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: 
https://github.com/itamarst/crochet

*What's New in 1.0.0*

**

Documentation:

  * Added section on use cases and alternatives. Thanks to Tobias
    Oberstein for the suggestion.

Bug fixes:

  * Twisted does not have to be pre-installed to run setup.py, thanks to
    Paul Weaver for bug report and Chris Scutcher for patch.
  * Importing Crochet does not have side-effects (installing reactor
    event) any more.
  * Blocking calls are interrupted earlier in the shutdown process, to
    reduce scope for deadlocks. Thanks to rmorehead for bug report.

*
*

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131019/4be127f0/attachment.html>

From trac at twistedmatrix.com  Sun Oct 20 00:05:18 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Oct 2013 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1382249118.08.8391847777306654739@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131020/a26f7108/attachment.html>

From orestis at orestis.gr  Sun Oct 20 03:21:26 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Sun, 20 Oct 2013 12:21:26 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting [WSGI +
	other]
Message-ID: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>

Hello,

Short form of the question:

Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other? Are there any inherent drawbacks in using Twisted for this use case?

Long form of the question:

These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.

The bare minimum looks probably like so:

1. Your web-framework of choice, like Django
2. Some kind of WSGI container, like gunicorn
3. A static file server, like nginx
4. Some kind of database [off-topic for this message]

Additionally, you might want:

* Celery
* Redis
* Cron
* Something for web sockets or similar technology
* ? and so on

In my experience, Twisted can be used to replace a lot of those use cases:

* It has a WSGI container
* It has a static web server
* It can be used for other long-running tasks 

I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.

Orestis




From r.voigtlaender at gmail.com  Mon Oct 21 05:35:44 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 13:35:44 +0200
Subject: [Twisted-Python] serial communication - getting started
Message-ID: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>

Hi,

I am new to Python. Trying to figure out how to use the serial port I
started with pyserial.
Works - but the CPU usage on my Raspberry Pi is at about 30% just for
reading the port. Before I started to optimize the code it was even 90+%.

So I tried twisted - and boom down to 3-4%. Even though twisted also uses
pyserial (as far as I read) - obviously better than I do.

So far so good.
With copy&paste from the internet and some editing I got the PI to read
from my Arduino. (code below)
But the code seems to be blocking. I tried putting things in a thread - but
I must have done something wrong. It is still blocking.

I also don't know how to write.
Does s.write("test") work?

Would be great if someone could help me out here.

Thanks a lot.
Robert



import logging
from twisted.protocols.basic import LineReceiver
from twisted.protocols.basic import LineReceiver

from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.python import usage
import thread

class THOptions(usage.Options):
    optParameters = [
        ['baudrate', 'b', 115200, 'Serial baudrate'],
        ['port', 'p', '/dev/ttyACM0', 'Serial port to use'],]


class Echo(LineReceiver):
    def processData(self, data):
        print(data)

    def lineReceived(self, line):
        try:
            data = line.rstrip()
            #logging.debug(data)
            self.processData(data)
            #print(line.rstrip())
            #pass
        except ValueError:
            logging.error('Unable to parse data %s' % line)
            return

def SerialInit():
    o = THOptions()
    try:
        o.parseOptions()
    except usage.UsageError, errortext:
        logging.error('%s %s' % (sys.argv[0], errortext))
        logging.info('Try %s --help for usage details' % sys.argv[0])
        raise SystemExit, 1

    baudrate = o.opts['baudrate'] #int('115200')
    port = o.opts['port']
    logging.debug('About to open port %s' % port)
    s = SerialPort(Echo(), port, reactor, baudrate=baudrate)
    reactor.run()


thread.start_new_thread(SerialInit())

if __name__ == '__main__':
    print("-----")
    s.write('123456789')
    #s.write("\n")
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/e8ca46ec/attachment.html>

From itamar at itamarst.org  Mon Oct 21 05:45:35 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 21 Oct 2013 07:45:35 -0400
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
Message-ID: <526513DF.6080500@itamarst.org>

On 10/21/2013 07:35 AM, Robert Voigtl?nder wrote:
> def SerialInit():
> ...
>     reactor.run()
>
>
> thread.start_new_thread(SerialInit())
>
> if __name__ == '__main__':
>     print("-----")
>     s.write('123456789')
>     #s.write("\n")
>
1. Twisted is not thread-safe, so you can't call methods on the protocol 
from another thread.

2. As a result, you're probably best off not using threads at all.

3. A reasonable place for the write() might be in your Protocol's 
connectionMade method.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/3e17e607/attachment.html>

From r.voigtlaender at gmail.com  Mon Oct 21 05:57:19 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 13:57:19 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <526513DF.6080500@itamarst.org>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
Message-ID: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>

Thanks for the fast reply.
I don't yet understand your answer. I may have to dig more into Python.



On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>wrote:

>  On 10/21/2013 07:35 AM, Robert Voigtl?nder wrote:
>
>   def SerialInit():
> ...
>
>       reactor.run()
>
>
>  thread.start_new_thread(SerialInit())
>
>  if __name__ == '__main__':
>     print("-----")
>     s.write('123456789')
>     #s.write("\n")
>
>  1. Twisted is not thread-safe, so you can't call methods on the protocol
> from another thread.
>
> 2. As a result, you're probably best off not using threads at all.
>
> 3. A reasonable place for the write() might be in your Protocol's
> connectionMade method.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/d3bf5319/attachment.html>

From tobias.oberstein at tavendo.de  Mon Oct 21 06:20:00 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 05:20:00 -0700
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>

Robert,

as Itamar said: don't use thread -- you likely don't need them in your scenario.

shameless self-plug:

http://www.youtube.com/watch?v=va7j86thW5M
https://github.com/tavendo/AutobahnPython/tree/master/examples/wamp/serial2ws

The example includes both Arduino code and Twisted/Autobahn code .. communicating over serial. No locking. Everything async.

Maybe thats of use while learning ..

/Tobias


Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Robert Voigtl?nder
Gesendet: Montag, 21. Oktober 2013 13:57
An: Twisted general discussion
Betreff: Re: [Twisted-Python] serial communication - getting started

Thanks for the fast reply.
I don't yet understand your answer. I may have to dig more into Python.


On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org<mailto:itamar at itamarst.org>> wrote:
On 10/21/2013 07:35 AM, Robert Voigtl?nder wrote:
def SerialInit():
...
    reactor.run()


thread.start_new_thread(SerialInit())

if __name__ == '__main__':
    print("-----")
    s.write('123456789')
    #s.write("\n")

1. Twisted is not thread-safe, so you can't call methods on the protocol from another thread.

2. As a result, you're probably best off not using threads at all.

3. A reasonable place for the write() might be in your Protocol's connectionMade method.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/f7bbfe18/attachment-0001.html>

From r.voigtlaender at gmail.com  Mon Oct 21 06:24:44 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 14:24:44 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CAH7aJjK-zf-6xv=ckvcW2PRBsDBEB+jGoKzJ82Z=J1J31zL97Q@mail.gmail.com>

Thanks a lot! I'll dig throught the code.


On 21 October 2013 14:20, Tobias Oberstein <tobias.oberstein at tavendo.de>wrote:

> Robert,****
>
> ** **
>
> as Itamar said: don't use thread -- you likely don't need them in your
> scenario.****
>
> ** **
>
> shameless self-plug:****
>
> ** **
>
> http://www.youtube.com/watch?v=va7j86thW5M****
>
>
> https://github.com/tavendo/AutobahnPython/tree/master/examples/wamp/serial2ws
> ****
>
> ** **
>
> The example includes both Arduino code and Twisted/Autobahn code ..
> communicating over serial. No locking. Everything async.****
>
> ** **
>
> Maybe thats of use while learning ..****
>
> ** **
>
> /Tobias****
>
> ** **
>
> ** **
>
> *Von:* twisted-python-bounces at twistedmatrix.com [mailto:
> twisted-python-bounces at twistedmatrix.com] *Im Auftrag von *Robert
> Voigtl?nder
> *Gesendet:* Montag, 21. Oktober 2013 13:57
> *An:* Twisted general discussion
> *Betreff:* Re: [Twisted-Python] serial communication - getting started****
>
> ** **
>
> Thanks for the fast reply.****
>
> I don't yet understand your answer. I may have to dig more into Python.***
> *
>
> ** **
>
> ** **
>
> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:****
>
> On 10/21/2013 07:35 AM, Robert Voigtl?nder wrote:****
>
> def SerialInit():****
>
> ...****
>
>     reactor.run() ****
>
> ** **
>
> ** **
>
> thread.start_new_thread(SerialInit())****
>
> ** **
>
> if __name__ == '__main__':****
>
>     print("-----")****
>
>     s.write('123456789')****
>
>     #s.write("\n")****
>
> ** **
>
> 1. Twisted is not thread-safe, so you can't call methods on the protocol
> from another thread.
>
> 2. As a result, you're probably best off not using threads at all.
>
> 3. A reasonable place for the write() might be in your Protocol's
> connectionMade method.****
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/591d2e36/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 21 13:32:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 21 Oct 2013 12:32:35 -0700
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
Message-ID: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>


On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:

> Hello,
> 
> Short form of the question:
> 
> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?

I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.

> Are there any inherent drawbacks in using Twisted for this use case?

Nope.  Twisted is the best :-).

> Long form of the question:
> 
> These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.
> 
> The bare minimum looks probably like so:
> 
> 1. Your web-framework of choice, like Django
> 2. Some kind of WSGI container, like gunicorn
> 3. A static file server, like nginx
> 4. Some kind of database [off-topic for this message]
> 
> Additionally, you might want:
> 
> * Celery
> * Redis
> * Cron
> * Something for web sockets or similar technology
> * ? and so on
> 
> In my experience, Twisted can be used to replace a lot of those use cases:
> 
> * It has a WSGI container
> * It has a static web server
> * It can be used for other long-running tasks 
> 
> I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.

If you hit any problems, they're bugs, report them and they'll get fixed.

Please do this.  I even gave a talk about this at DjangoCon a couple of years ago:

<http://blip.tv/djangocon/keynote-glyph-lefkowitz-5573264>

-glyph




From ltaylor.volks at gmail.com  Mon Oct 21 13:42:27 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Mon, 21 Oct 2013 14:42:27 -0500
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
Message-ID: <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>


On Oct 21, 2013, at 6:57 AM, Robert Voigtl?nder wrote:

> Thanks for the fast reply.
> I don't yet understand your answer. I may have to dig more into Python.
> 
> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

<snip guidance to avoid threads>

> 
> 3. A reasonable place for the write() might be in your Protocol's connectionMade method.
> 
> 



The Protocol has access to a .transport attribute, which is the SerialPort() instance. 

Therefore, you can write to the serial port (the transport) from within your protocol:


class Echo(LineReceiver):

    def connectionMade(self):
        self.transport.write('HELLO\n')

    def lineReceived(self, line):
        self.transport.write(line + '\n')


The connectionMade method will be called once the transport (the SerialPort instance) is ready (the serial port is open), making it an appropriate place to kick off an init sequence or similar.


Lucas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/645a739d/attachment.html>

From p.mayers at imperial.ac.uk  Mon Oct 21 14:16:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Oct 2013 21:16:19 +0100
Subject: [Twisted-Python] Twisted as a full solution for web
	hosting	[WSGI + other]
In-Reply-To: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
Message-ID: <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>

Does the Twisted wsgi runner have support for process rather than threading models to avoid the gil? Because if so I should take a look at it...
-- 
Sent from my phone with, please excuse brevity and typos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/6b94d6ce/attachment.html>

From exarkun at twistedmatrix.com  Mon Oct 21 14:21:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 21 Oct 2013 20:21:27 -0000
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
Message-ID: <20131021202127.8627.1904113363.divmod.xquotient.11@top>

On 07:42 pm, ltaylor.volks at gmail.com wrote:
>
>On Oct 21, 2013, at 6:57 AM, Robert Voigtl?nder wrote:
>>Thanks for the fast reply.
>>I don't yet understand your answer. I may have to dig more into 
>>Python.
>>
>>On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org> 
>>wrote:
>
><snip guidance to avoid threads>
>>
>>3. A reasonable place for the write() might be in your Protocol's 
>>connectionMade method.
>
>The Protocol has access to a .transport attribute, which is the 
>SerialPort() instance.
>
>Therefore, you can write to the serial port (the transport) from within 
>your protocol:
>
>
>class Echo(LineReceiver):
>
>    def connectionMade(self):
>        self.transport.write('HELLO\n')
>
>    def lineReceived(self, line):
>        self.transport.write(line + '\n')

Additionally, since the serial transport tries hard to look just like a 
tcp transport or an ssl transport, the generic protocol code in 
LineReceiver.sendLine will work just fine with it.  So in addition to 
using the `lineReceived` callback to handle lines that arrive you can 
use `sendLine` to write lines out to the serial port:

    class Echo(LineReceiver):
        delimiter = b"\n"

        def connectionMade(self):
            self.sendLine(b"HELLO")

        def lineReceived(self, line):
            self.sendLine(line)

This is part of the power of the transport/protocol separation: reusable 
protocol logic. :)

Jean-Paul
>
>The connectionMade method will be called once the transport (the 
>SerialPort instance) is ready (the serial port is open), making it an 
>appropriate place to kick off an init sequence or similar.
>
>
>Lucas


From tobias.oberstein at tavendo.de  Mon Oct 21 14:48:17 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 13:48:17 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
Message-ID: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>

Hi,

with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

a) Unix Domain sockets
b) Pipes (spawnProcess)

?

Thanks!
/Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/50a8609e/attachment.html>

From glyph at twistedmatrix.com  Mon Oct 21 15:06:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 21 Oct 2013 14:06:31 -0700
Subject: [Twisted-Python] Twisted as a full solution for web
	hosting	[WSGI + other]
In-Reply-To: <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>
Message-ID: <A2CD679A-DF3A-4353-89E2-B48BF13E18DD@twistedmatrix.com>

On Oct 21, 2013, at 1:16 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Does the Twisted wsgi runner have support for process rather than threading models to avoid the gil? Because if so I should take a look at it...

Nope.  It ought to though: <https://twistedmatrix.com/trac/ticket/5180>.  Any interest in tackling that?

-glyph





From dstainton415 at gmail.com  Mon Oct 21 15:33:32 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Mon, 21 Oct 2013 14:33:32 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
References: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
Message-ID: <CAFN1edoFySTu4J5vFSi8JZzgpnaHbZLpQ0sxDEpHUbjyD9qHdg@mail.gmail.com>

Hi,

I don't know the answer to your question...
I've been thinking about flow control lately.

I recently wrote a little working prototype VPN in Twisted using
IPushProducer and IConsumer interfaces
but I have not yet implemented flow control :

Here we can see how I proxy between TUN and UDP using producers and consumers:

https://github.com/david415/hushVPN/blob/master/hushVPN_service.py


Perhaps later on I could add flow control... by having the consumers
pause the producers when need be.
For now I just churn packets as fast as possible.

David


On Mon, Oct 21, 2013 at 1:48 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and practically
> usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)
>
> ?
>
> Thanks!
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>


From rowen at uw.edu  Mon Oct 21 16:08:56 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Mon, 21 Oct 2013 15:08:56 -0700
Subject: [Twisted-Python] Defer until a server is ready?
Message-ID: <rowen-13D7D6.15085621102013@news.gmane.org>

For unit testing and other reasons I would like to launch a server in a 
subprocess, then wait until it is available before running some code 
that uses it. Is there a standard paradigm for this, e.g. poll until a 
connection is accepted, or have the server emit some kind of "ready" 
signal (such as a message to stdout or a UDP packet)? Any advice would 
be appreciated. A web search didn't turn up anything.

In some cases we have used one reactor to run both the server or servers 
and the client, in which case waiting is trivial. But we have cases 
where we would much rather run the server in a separate process.

-- Russell



From eric at teratorn.org  Mon Oct 21 16:45:29 2013
From: eric at teratorn.org (Eric P. Mangold)
Date: Mon, 21 Oct 2013 18:45:29 -0400
Subject: [Twisted-Python] Defer until a server is ready?
In-Reply-To: <rowen-13D7D6.15085621102013@news.gmane.org>
References: <rowen-13D7D6.15085621102013@news.gmane.org>
Message-ID: <20131021224529.GS10637@ragnarok.teratorn.org>

On Mon, Oct 21, 2013 at 03:08:56PM -0700, Russell E. Owen wrote:
> For unit testing and other reasons I would like to launch a server in a 
> subprocess, then wait until it is available before running some code 
> that uses it. Is there a standard paradigm for this, e.g. poll until a 
> connection is accepted, or have the server emit some kind of "ready" 
> signal (such as a message to stdout or a UDP packet)? Any advice would 
> be appreciated. A web search didn't turn up anything.
 
Emitting a message on stdout has worked well for me before.

You can wait for this in your ProcessProtocol then continue
the test case once you receieve it.

	-E


From tobias.oberstein at tavendo.de  Mon Oct 21 16:55:22 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 15:55:22 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CAFN1edoFySTu4J5vFSi8JZzgpnaHbZLpQ0sxDEpHUbjyD9qHdg@mail.gmail.com>
Message-ID: <CE8B7D7A.1CD86%tobias.oberstein@tavendo.de>

fwiw, I have been trying to get find a conclusive answer to the subquestion:

Do Unix domain sockets (either stream or dgram) support flow-control?

The nearest I could find is
http://stackoverflow.com/questions/1478975/unix-domain-socket-is-there-such-a-thing-as-a-busy-signal/1479022
but the comments seem to contradict each other.

seems I'll just try it and see what happens ..

/Tobias

On 21.10.13 23:33, "David Stainton" <dstainton415 at gmail.com> wrote:

Hi,

I don't know the answer to your question...
I've been thinking about flow control lately.

I recently wrote a little working prototype VPN in Twisted using
IPushProducer and IConsumer interfaces
but I have not yet implemented flow control :

Here we can see how I proxy between TUN and UDP using producers and consumers:

https://github.com/david415/hushVPN/blob/master/hushVPN_service.py


Perhaps later on I could add flow control... by having the consumers
pause the producers when need be.
For now I just churn packets as fast as possible.

David


On Mon, Oct 21, 2013 at 1:48 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and practically
> usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)
>
> ?
>
> Thanks!
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/763ed073/attachment.html>

From itamar at itamarst.org  Mon Oct 21 18:00:37 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 21 Oct 2013 20:00:37 -0400
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
References: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
Message-ID: <5265C025.7080709@itamarst.org>

On 10/21/2013 04:48 PM, Tobias Oberstein wrote:
> Flow-control for Pipes / Unix Domains Sockets? Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the 
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and 
> practically usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)

I would expect transport.registerProducer to work with both.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131021/bed55cea/attachment.html>

From r.voigtlaender at gmail.com  Tue Oct 22 00:25:00 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Tue, 22 Oct 2013 08:25:00 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <20131021202127.8627.1904113363.divmod.xquotient.11@top>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
 <20131021202127.8627.1904113363.divmod.xquotient.11@top>
Message-ID: <CAH7aJjJuSen36Vetx+30Nh4GogzdYX=OcDJaMfnasx1jbm0TOw@mail.gmail.com>

This works. Thanks a lot.

So sending and receiving works .. with low CPU usage.
I need to dig into twisted....

As a Python starter I want something like serial.send usabel in the main
loop and serial.receive to work in the background and only trigger
something once data has been received.
Obviously it is possible with python. Just have to find out how :-)

Thanks for the support so far.

Robert


On 21 October 2013 22:21, <exarkun at twistedmatrix.com> wrote:

> On 07:42 pm, ltaylor.volks at gmail.com wrote:
>
>>
>> On Oct 21, 2013, at 6:57 AM, Robert Voigtl?nder wrote:
>>
>>> Thanks for the fast reply.
>>> I don't yet understand your answer. I may have to dig more into Python.
>>>
>>> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>
>>> wrote:
>>>
>>
>> <snip guidance to avoid threads>
>>
>>>
>>> 3. A reasonable place for the write() might be in your Protocol's
>>> connectionMade method.
>>>
>>
>> The Protocol has access to a .transport attribute, which is the
>> SerialPort() instance.
>>
>> Therefore, you can write to the serial port (the transport) from within
>> your protocol:
>>
>>
>> class Echo(LineReceiver):
>>
>>    def connectionMade(self):
>>        self.transport.write('HELLO\n'**)
>>
>>    def lineReceived(self, line):
>>        self.transport.write(line + '\n')
>>
>
> Additionally, since the serial transport tries hard to look just like a
> tcp transport or an ssl transport, the generic protocol code in
> LineReceiver.sendLine will work just fine with it.  So in addition to using
> the `lineReceived` callback to handle lines that arrive you can use
> `sendLine` to write lines out to the serial port:
>
>    class Echo(LineReceiver):
>        delimiter = b"\n"
>
>        def connectionMade(self):
>            self.sendLine(b"HELLO")
>
>        def lineReceived(self, line):
>            self.sendLine(line)
>
> This is part of the power of the transport/protocol separation: reusable
> protocol logic. :)
>
> Jean-Paul
>
>>
>> The connectionMade method will be called once the transport (the
>> SerialPort instance) is ready (the serial port is open), making it an
>> appropriate place to kick off an init sequence or similar.
>>
>>
>> Lucas
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131022/486ee7ae/attachment.html>

From sank.daniel at gmail.com  Tue Oct 22 00:32:03 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 21 Oct 2013 23:32:03 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <5245B80E.8080501@ripton.net>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <5245B80E.8080501@ripton.net>
Message-ID: <CAKN9TDJdg9joYzQwe2sUdReVkza12FG_seEjmj_C0PvBvtQ9jA@mail.gmail.com>

> Here's my game that uses PB: https://github.com/dripton/Slugathon

This has been useful. I am learning from it and my own experimentation.

> One piece of advice: do the network code first and always exercise it, even
> when playing on a single computer.  Every time I've written a single-machine
> game first then tried to add networking later, the networking has been a
> mess to debug.

The way my classes are set up I can't run the game without the network
bits. Glad to hear this was good thinking.


From hawkowl at atleastfornow.net  Tue Oct 22 00:50:46 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 22 Oct 2013 14:50:46 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Announcement
Message-ID: <52662046.1010508@atleastfornow.net>

Hello everyone!
  
I bring news of a Twisted pre-release - 13.2.0pre1, to be exact! This will be
followed by the full release of 13.2.0 in the coming weeks.
  
The highlights of this release are:
  
  * Twisted now includes a HostnameEndpoint implementation which uses IPv4 and
    IPv6 in parallel, speeding up the connection by using whichever connects
    first (the 'Happy Eyeballs'/RFC 6555 algorithm). (#4859)
  
  * Improved support for Cancellable Deferreds by kaizhang, our GSoC student.
    (#4320, #6532, #6572, #6639)
  
  * Improved Twisted.Mail documentation by shira, our Outreach Program for Women
    intern. (#6649, #6652)
  
  * twistd now waits for the application to start successfully before exiting
    after daemonization. (#823)
  
  * SSL server endpoint string descriptions now support the specification of
    chain certificates. (#6499)
  
  * Over 70 closed tickets since 13.1.0.
  
For more information, check the NEWS file (link provided below).
  
The pre-release tarballs can be found at the link below - please download them
and test them as much as you can.
  
Tarballs:           http://twistedmatrix.com/Releases/pre/13.2.0pre1/
NEWS.txt:           http://twistedmatrix.com/Releases/pre/13.2.0pre1/NEWS.txt
  
Twisted Regards,
HawkOwl



From orestis at orestis.gr  Tue Oct 22 01:41:08 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Tue, 22 Oct 2013 10:41:08 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
Message-ID: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>

On 21 ??? 2013, at 10:32 ?.?., Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:
> 
>> Hello,
>> 
>> Short form of the question:
>> 
>> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?
> 
> I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.

Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:

os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
application = django.core.handlers.wsgi.WSGIHandler()

wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), application)
resource = Root(wsgi_resource)
# this could probably be automatically inferred from settings.py
resource.putChild('static', File(...))
resource.putChild('uploaded', File(...))
# other stuff
site = server.Site(resource)
reactor.listenTCP(8000, site)
reactor.run()

>> Are there any inherent drawbacks in using Twisted for this use case?
> 
> Nope.  Twisted is the best :-).
> 
>> Long form of the question:
>> 
>> These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.
>> 
>> The bare minimum looks probably like so:
>> 
>> 1. Your web-framework of choice, like Django
>> 2. Some kind of WSGI container, like gunicorn
>> 3. A static file server, like nginx
>> 4. Some kind of database [off-topic for this message]
>> 
>> Additionally, you might want:
>> 
>> * Celery
>> * Redis
>> * Cron
>> * Something for web sockets or similar technology
>> * ? and so on
>> 
>> In my experience, Twisted can be used to replace a lot of those use cases:
>> 
>> * It has a WSGI container
>> * It has a static web server
>> * It can be used for other long-running tasks 
>> 
>> I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.
> 
> If you hit any problems, they're bugs, report them and they'll get fixed.
> 
> Please do this.  I even gave a talk about this at DjangoCon a couple of years ago:
> 
> <http://blip.tv/djangocon/keynote-glyph-lefkowitz-5573264>

That was interesting to watch - I wonder if you know whether things have been improved since then. 

Here's a thought experiment - I'd like to keep URL routing 100% in Django for anything that hits the DB. I have some code that needs to spawn an external process to generate an image on-demand (with a layer of caching on top). In the past I defined a Twisted.Web handler for that. Could I now expose an internal API that (through Crochet?) do the spawnProcess dance and come back with image data that Django could then handle internally (store in a file, whatever). How would the threaded WSGI container deal with the blocking request (not really blocking, but that request would stall until the Deferred would be fired).


> -glyph
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131022/7833c3c9/attachment-0001.html>

From exarkun at twistedmatrix.com  Tue Oct 22 06:38:50 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Oct 2013 12:38:50 -0000
Subject: [Twisted-Python] Twisted as a full solution for web hosting
 [WSGI + other]
In-Reply-To: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
Message-ID: <20131022123850.8627.826066756.divmod.xquotient.29@top>

On 07:41 am, orestis at orestis.gr wrote:
>On 21 ??? 2013, at 10:32 ?.?., Glyph <glyph at twistedmatrix.com> wrote:
>>
>>On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> 
>>wrote:
>>>Hello,
>>>
>>>Short form of the question:
>>>
>>>Are people using Twisted to host WSGI applications AND serve static 
>>>files AND replace celery/redis/other?
>>
>>I'm not personally using it as a WSGI host, but otherwise, yes, a 
>>full-stack application container speaking multiple protocols.
>
>Any pointers on how to best use this in combination with WSGI/Django? 
>In the past I had a combination of twisted-web (for /static and /media) 
>and wsgi host (for everything else), all running under the same 
>Service. Essentially:
>
>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
>application = django.core.handlers.wsgi.WSGIHandler()
>
>wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), 
>application)
>resource = Root(wsgi_resource)
># this could probably be automatically inferred from settings.py
>resource.putChild('static', File(...))
>resource.putChild('uploaded', File(...))
># other stuff
>site = server.Site(resource)
>reactor.listenTCP(8000, site)
>reactor.run()

This looks about like I'd expect (if my guess that `Root` is an 
`IResource` that knows how to split dispatch between the WSGI resource 
and its other children).  If you have any suggestions for improving the 
experience please share them. :)
>[snip]
>
>Here's a thought experiment - I'd like to keep URL routing 100% in 
>Django for anything that hits the DB. I have some code that needs to 
>spawn an external process to generate an image on-demand (with a layer 
>of caching on top). In the past I defined a Twisted.Web handler for 
>that. Could I now expose an internal API that (through Crochet?) do the 
>spawnProcess dance and come back with image data that Django could then 
>handle internally (store in a file, whatever). How would the threaded 
>WSGI container deal with the blocking request (not really blocking, but 
>that request would stall until the Deferred would be fired).

It will produce roughly the same results as you'd get if you used any 
other WSGI container: one of the threads in the thread pool will be kept 
unavailable as it waits for the result.  This will have the usual 
consequence: if your threadpool has a max of N threads and you receive N 
requests that need to do this, the N+1th request that needs to be 
handled by the WSGI part of your server won't be handled until one of 
the previous requests completes (completion frees up one thread which is 
then used to handle the N+1th request).

The only difference might be that since you also have non-WSGI content 
(all of your static content) even when your thread pool is completely in 
use requests for static content will still be satisfied right away. 
However, if you previously had a WSGI+lighttpd/whatever then you 
probably already had this property as well.

Put another way, Twisted's WSGI container is still just a WSGI 
container.  Fortunately Twisted has other pieces aside from a WSGI 
container. :)

Jean-Paul


From haggardii at gmail.com  Tue Oct 22 06:52:21 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 22 Oct 2013 06:52:21 -0600
Subject: [Twisted-Python] Twisted as a full solution for web hosting
 [WSGI + other]
In-Reply-To: <20131022123850.8627.826066756.divmod.xquotient.29@top>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <20131022123850.8627.826066756.divmod.xquotient.29@top>
Message-ID: <CAL+xXwPnkr4qxs1z-CChw0yiNRiZFCitFrvuPR87Jibcf9iTsA@mail.gmail.com>

On Tue, Oct 22, 2013 at 6:38 AM,  <exarkun at twistedmatrix.com> wrote:
[snip]
>
> It will produce roughly the same results as you'd get if you used any other
> WSGI container: one of the threads in the thread pool will be kept
> unavailable as it waits for the result.  This will have the usual
> consequence: if your threadpool has a max of N threads and you receive N
> requests that need to do this, the N+1th request that needs to be handled by
> the WSGI part of your server won't be handled until one of the previous
> requests completes (completion frees up one thread which is then used to
> handle the N+1th request).
[snip]

It is "roughly" the same, but it may also be better.  We recently
replaced flup with Twisted as our WSGI container.  With traffic
spikes, flup would start dropping requests because our WSGI app is too
slow, resulting in 500 errors for our users.  With Twisted as the WSGI
container, we no longer see the same 500 errors.  Eventually, all
requests finish.  I recommend Twisted as a production WSGI container.

Matt Haggard


From orestis at orestis.gr  Tue Oct 22 06:58:45 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Tue, 22 Oct 2013 15:58:45 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <20131022123850.8627.826066756.divmod.xquotient.29@top>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <20131022123850.8627.826066756.divmod.xquotient.29@top>
Message-ID: <3FB7C1B3-4A13-42D1-A212-7B883747AE96@orestis.gr>


On 22 ??? 2013, at 3:38 ?.?., exarkun at twistedmatrix.com wrote:

> On 07:41 am, orestis at orestis.gr wrote:
>> On 21 ??? 2013, at 10:32 ?.?., Glyph <glyph at twistedmatrix.com> wrote:
>>> 
>>> On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:
>>>> Hello,
>>>> 
>>>> Short form of the question:
>>>> 
>>>> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?
>>> 
>>> I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.
>> 
>> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:
>> 
>> os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
>> application = django.core.handlers.wsgi.WSGIHandler()
>> 
>> wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), application)
>> resource = Root(wsgi_resource)
>> # this could probably be automatically inferred from settings.py
>> resource.putChild('static', File(...))
>> resource.putChild('uploaded', File(...))
>> # other stuff
>> site = server.Site(resource)
>> reactor.listenTCP(8000, site)
>> reactor.run()
> 
> This looks about like I'd expect (if my guess that `Root` is an `IResource` that knows how to split dispatch between the WSGI resource and its other children).  If you have any suggestions for improving the experience please share them. :)

For anyone following along:

class Root(resource.Resource):

    def __init__(self, wsgi_resource):
        resource.Resource.__init__(self)
        self.wsgi_resource = wsgi_resource

    def getChild(self, path, request):
        path0 = request.prepath.pop(0)
        request.postpath.insert(0, path0)
        return self.wsgi_resource

I don't remember now if I wrote this code or if I copied it from somewhere.

>> [snip]
>> 
>> Here's a thought experiment - I'd like to keep URL routing 100% in Django for anything that hits the DB. I have some code that needs to spawn an external process to generate an image on-demand (with a layer of caching on top). In the past I defined a Twisted.Web handler for that. Could I now expose an internal API that (through Crochet?) do the spawnProcess dance and come back with image data that Django could then handle internally (store in a file, whatever). How would the threaded WSGI container deal with the blocking request (not really blocking, but that request would stall until the Deferred would be fired).
> 
> It will produce roughly the same results as you'd get if you used any other WSGI container: one of the threads in the thread pool will be kept unavailable as it waits for the result.  This will have the usual consequence: if your threadpool has a max of N threads and you receive N requests that need to do this, the N+1th request that needs to be handled by the WSGI part of your server won't be handled until one of the previous requests completes (completion frees up one thread which is then used to handle the N+1th request).
> 
> The only difference might be that since you also have non-WSGI content (all of your static content) even when your thread pool is completely in use requests for static content will still be satisfied right away. However, if you previously had a WSGI+lighttpd/whatever then you probably already had this property as well.
> 
> Put another way, Twisted's WSGI container is still just a WSGI container.  Fortunately Twisted has other pieces aside from a WSGI container. :)

I wonder if this could be turned on its head - instead of having the Django WSGI app blocking while waiting for a long running thing, field the request beforehand, do whatever long-running thing is required and only then hand over the to the WSGI app to proceed with the HTTP response. This obviously requires a level request processing in Twisted - I'm not sure if it's worth the effort. It could be done by a Twisted-savvy WSGI middleware, perhaps. I'll try to see what I can come up with.

Orestis



> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131022/fe78349b/attachment.html>

From tobias.oberstein at tavendo.de  Tue Oct 22 16:58:03 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 22 Oct 2013 15:58:03 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <5265C025.7080709@itamarst.org>
Message-ID: <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>

Hi Itamar,

once again Twisted surprises me: it just works!

I have tested a master/child combo over pipe (both Twisted) with a push producer on the sending leg.

It can push around 70MB/s raw binary (16k write size) to the child. Load is evenly on 2 CPU cores each at 80% and stays roughly constant. Memory is flat for both.

This is on some years old Macbook (kqueue reactor .. a little faster than select) - tomorrow I repeat on a beefy system/OS.

I will do more systematic throughput and also latency measurements .. but this is already not bad at all.

Moreso: I really am curious now how that works under the hood, since the pausing/resuming seems to be upper/lower watermark controlled .. it'll resume the producer before the consumer starves. As it should be;)

Background: this is part of experiments in preparation for a multi-core capable Autobahn based message broker ..

Takeaway: Next time I don't waste time on the internet reading half-baked posts, but just hack away;)

/Tobias

PS: The following is actually slower than above master/slave pair .. which I also didn't expect:

tobias-obersteins-macbook-pro-2:masterchild oberstet$ time dd if=/dev/zero bs=1k count=1000000 | wc -c
1000000+0 records in
1000000+0 records out
1024000000 bytes transferred in 17.454178 secs (58667902 bytes/sec)
 1024000000

real    0m17.460s
user    0m18.389s
sys    0m7.729s



On 22.10.13 02:00, "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:


On 10/21/2013 04:48 PM, Tobias Oberstein wrote:


Flow-control for Pipes / Unix Domains Sockets? Hi,

 with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

 Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

 a) Unix Domain sockets
 b) Pipes (spawnProcess)


 I would expect transport.registerProducer to work with both.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131022/d39cb099/attachment.html>

From glyph at twistedmatrix.com  Tue Oct 22 17:59:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 22 Oct 2013 16:59:34 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Announcement
In-Reply-To: <52662046.1010508@atleastfornow.net>
References: <52662046.1010508@atleastfornow.net>
Message-ID: <22F6C00E-F014-40E1-8597-490C454E7C95@twistedmatrix.com>

On Oct 21, 2013, at 11:50 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hello everyone!

Hello HawkOwl!  Congratulations on getting your first Twisted release started, and thank you very much for volunteering to do it!

> I bring news of a Twisted pre-release - 13.2.0pre1, to be exact! This will be
> followed by the full release of 13.2.0 in the coming weeks.
> The highlights of this release are:

>  * Twisted now includes a HostnameEndpoint implementation which uses IPv4 and
>   IPv6 in parallel, speeding up the connection by using whichever connects
>   first (the 'Happy Eyeballs'/RFC 6555 algorithm). (#4859)

Fantastic!  Arguably adding this was one of the central points of the Endpoints API in the first place, this unified "do what I want" endpoint is a big step forward for any clients using Twisted! :-).  It's great to see this finally land.

>  * Improved support for Cancellable Deferreds by kaizhang, our GSoC student.
>   (#4320, #6532, #6572, #6639)
>  * Improved Twisted.Mail documentation by shira, our Outreach Program for Women
>   intern. (#6649, #6652)

Clearly our participation in these programs is continuing to be a huge benefit to Twisted.

>  * twistd now waits for the application to start successfully before exiting
>   after daemonization. (#823)
>  * SSL server endpoint string descriptions now support the specification of
>   chain certificates. (#6499)

I can't wait to get this deployed on twistedmatrix.com itself ;-).

-glyph

From sank.daniel at gmail.com  Wed Oct 23 00:11:57 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 22 Oct 2013 23:11:57 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
Message-ID: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>

Dear Twisted readers,

I am trying to learn to ins and outs of twisted.spread.pb with the
official howto as my main point of reference. When I get to the
section "Managing Clients of Perspectives" the first sentence reads

"In all the IPerspective uses we have shown so far, we ignored the
mind argument and created a new Avatar for every connection. This is
usually an easy design choice, and it works well for simple cases."

This seems odd because nothing in the howto up to this point mentions
a "mind argument". Also IPerspective and Avatar are only briefly
introduced but never used in example up to this point.

I'm not good enough with pb yet to want to suggest an alteration but
this confused me enough that I thought I should bring it up.

Yours sincerely
-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899


From sank.daniel at gmail.com  Wed Oct 23 00:33:43 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 22 Oct 2013 23:33:43 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
Message-ID: <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>

I should clarify something:

I understand that Avatar and Mind are introduced in the cred section.
I'll venture to suggest that the pb section simply refers and links to
that.


From glyph at twistedmatrix.com  Wed Oct 23 02:13:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 01:13:56 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
Message-ID: <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>

On Oct 22, 2013, at 11:33 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I should clarify something:
> 
> I understand that Avatar and Mind are introduced in the cred section.
> I'll venture to suggest that the pb section simply refers and links to
> that.

This sounds like a clear bug in the documentation, and even if you don't have a fix proposed yet, please feel free to file a documentation ticket for it.  The more detail you have about why you found it confusing, the better.

-glyph



From glyph at twistedmatrix.com  Wed Oct 23 02:21:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 01:21:43 -0700
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
Message-ID: <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>

On Oct 22, 2013, at 12:41 AM, Orestis Markou <orestis at orestis.gr> wrote:

> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:

Have you seen <https://github.com/clemesha/twisted-wsgi-django/blob/master/server.py>?  It seems like maybe that repository could use a little maintenance, maybe a couple of command-line options, to do the (fairly default) thing that you seem to want to do :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/e1b383ae/attachment.html>

From orestis at orestis.gr  Wed Oct 23 02:33:13 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Wed, 23 Oct 2013 11:33:13 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>
Message-ID: <A2D4C2C9-E20C-4D25-B551-AA18B4E19CFA@orestis.gr>


On 23 ??? 2013, at 11:21 ?.?., Glyph <glyph at twistedmatrix.com> wrote:

> On Oct 22, 2013, at 12:41 AM, Orestis Markou <orestis at orestis.gr> wrote:
> 
>> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:
> 
> Have you seen <https://github.com/clemesha/twisted-wsgi-django/blob/master/server.py>?  It seems like maybe that repository could use a little maintenance, maybe a couple of command-line options, to do the (fairly default) thing that you seem to want to do :-).

Bookmarked! I will probably need to really scratch the itch in a couple of weeks time. I'll update the list when I have some results. 

Orestis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/a03224b5/attachment-0001.html>

From tobias.oberstein at tavendo.de  Wed Oct 23 04:55:59 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 23 Oct 2013 03:55:59 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>
References: <5265C025.7080709@itamarst.org>
 <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>
Message-ID: <634914A010D0B943A035D226786325D44469DC5EFD@EXVMBX020-12.exch020.serverdata.net>

Ok, I've pimped up the test

https://github.com/oberstet/scratchbox/blob/master/python/twisted/masterchild/streaming_master.py
https://github.com/oberstet/scratchbox/blob/master/python/twisted/masterchild/streaming_child.py

and running on Ubuntu LTS 12.04, 64 Bit, Core i7 3.4GHz, epoll reactor, I was able to get it up to

Master => Child : 450MB/s
[94%/100% CPU load)

Master <=> Child (full-duplex echo): 200MB/s
[95%/100% CPU load)

Nifty.


Now, it might be that I can push even higher by adjusting the pipe buffer sizes (there is a Linux fcntl for that .. F_SETPIPE_SZ).

Q: How do I get at the FDs of the underlying pipes to the spawned process in the parent?

reactor.spawnProcess returns an object implementing IProcessTransport
However, that does not seem to provide access to the underlying pipes (and their FDs in the parent)

Looking at
http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/internet/process.py
I can get it, but not via official API, right?

===

Windows: It does not work at all. Tested "select" and "iocp" reactors. It just hangs doing nothing.



Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Tobias Oberstein
Gesendet: Mittwoch, 23. Oktober 2013 00:58
An: Twisted discussion
Betreff: Re: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?

Hi Itamar,

once again Twisted surprises me: it just works!

I have tested a master/child combo over pipe (both Twisted) with a push producer on the sending leg.

It can push around 70MB/s raw binary (16k write size) to the child. Load is evenly on 2 CPU cores each at 80% and stays roughly constant. Memory is flat for both.

This is on some years old Macbook (kqueue reactor .. a little faster than select) - tomorrow I repeat on a beefy system/OS.

I will do more systematic throughput and also latency measurements .. but this is already not bad at all.

Moreso: I really am curious now how that works under the hood, since the pausing/resuming seems to be upper/lower watermark controlled .. it'll resume the producer before the consumer starves. As it should be;)

Background: this is part of experiments in preparation for a multi-core capable Autobahn based message broker ..

Takeaway: Next time I don't waste time on the internet reading half-baked posts, but just hack away;)

/Tobias

PS: The following is actually slower than above master/slave pair .. which I also didn't expect:

tobias-obersteins-macbook-pro-2:masterchild oberstet$ time dd if=/dev/zero bs=1k count=1000000 | wc -c
1000000+0 records in
1000000+0 records out
1024000000 bytes transferred in 17.454178 secs (58667902 bytes/sec)
 1024000000

real    0m17.460s
user    0m18.389s
sys    0m7.729s



On 22.10.13 02:00, "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:

On 10/21/2013 04:48 PM, Tobias Oberstein wrote:


Flow-control for Pipes / Unix Domains Sockets? Hi,

 with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

 Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

 a) Unix Domain sockets
 b) Pipes (spawnProcess)


 I would expect transport.registerProducer to work with both.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/225fe338/attachment.html>

From hawkowl at atleastfornow.net  Wed Oct 23 08:07:19 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 23 Oct 2013 22:07:19 +0800
Subject: [Twisted-Python] Twisted Users on Windows XP
Message-ID: <5267D817.8070006@atleastfornow.net>

Hi everyone,

I have raised the question of Windows XP support in Twisted earlier 
today in #twisted-dev. Since the Microsoft "extended support" cut-off is 
within six or so months, and there is continuing trouble with the 
XP-based buildslave, I think it would be a good idea to get a figure of 
how many Windows XP users there are currently using Twisted, so informed 
decisions can be made in regards to supporting it.

If you use Twisted on Windows XP, please comment on ticket #6798 [1], so 
we can get an idea of the usage numbers.

-hawkowl

[1] https://twistedmatrix.com/trac/ticket/6798


From grindizer at gmail.com  Wed Oct 23 09:46:24 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 23 Oct 2013 17:46:24 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>

Hi everybody

I a came across a surprising problem when using the epoll based reactor.
(ticket here https://twistedmatrix.com/trac/ticket/6796)

As you can see on the ticket, the epoll object seems to share some state
even after fork.
Which means even after having forked the process, making some changes to
the inherited epoll object in one process may impact the one existing in
another process !

This problem is only related to epoll based reactor, poll and select behave
correctly.
I'm aware that some may say that this in not a twisted related problem (but
an epoll issue), but I'm addressing my question here to try to figure out
what would be the best workaround for this problem in a twisted based
project ?

And for information this is what I have already tryed:
- I though about using poll or select reactor, but this is not possible,
cause as i'm writing a library I do not decide which reactor will be
installed by the person who want to use it.
(Besides as epoll is now the default reactor installed, I certainly want my
library to work with it !)

- Using spawnProcess as mentioned in the ticket comment, is not an option
too, in my case, I need to share some state between the main process and
subprocess. (I have on object in main process space that I want to inherit
in all subprocess)

- I (desperately) tryed to re-initialize the reactor._poller object after
each fork to set it with a new object, but it was just a very bad idea ! :)

Thank you, in advance, for any possible clue !
(for information, my project is here https://github.com/Grindizer/scaletix)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/62e8ad1a/attachment.html>

From tom.sheffler at gmail.com  Wed Oct 23 10:36:56 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 23 Oct 2013 09:36:56 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
Message-ID: <CAMBtMcv4xBgCpz+aKy0veGWpkh6+prSNqk+rx7YJROz-1EWfmw@mail.gmail.com>

Tobias and Itamar -
Thanks for sharing the conversation and statistics.  Very interesting!

-Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/e6b94f89/attachment.html>

From p.mayers at imperial.ac.uk  Wed Oct 23 10:39:03 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Oct 2013 17:39:03 +0100
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <5267FBA7.2050606@imperial.ac.uk>

On 23/10/13 16:46, Flint wrote:
> Hi everybody
>
> I a came across a surprising problem when using the epoll based reactor.
> (ticket here https://twistedmatrix.com/trac/ticket/6796)
>
> As you can see on the ticket, the epoll object seems to share some state
> even after fork.
> Which means even after having forked the process, making some changes to
> the inherited epoll object in one process may impact the one existing in
> another process !
>
> This problem is only related to epoll based reactor, poll and select
> behave correctly.
> I'm aware that some may say that this in not a twisted related problem
> (but an epoll issue), but I'm addressing my question here to try to
> figure out what would be the best workaround for this problem in a
> twisted based project ?

The problem is that you're sharing the epoll object (and thus the 
underlying epoll FD, and associated state) with the multiprocessing 
child processes.

Either:

  1. Don't use multiprocessing
  2. Arrange for the epoll object (or FD) to be closed after fork, but 
before exec, so that the child process can't fiddle with it
  3. Create the epoll object after starting the multiprocessing children

IMHO Twisted and multiprocessing are not good together.


From tobias.oberstein at tavendo.de  Wed Oct 23 10:44:49 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 23 Oct 2013 09:44:49 -0700
Subject: [Twisted-Python] epoll keep sharing state between process
	even	after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469DC612F@EXVMBX020-12.exch020.serverdata.net>

Hi,

this is funny, I am also working in this area currently.

Though I use spawnProcess for various reasons, not multiprocessing - which is also the recommendation on the ticket. And it makes sense.

Nevertheless I'd be interested what happens if you try that on a kqueue-reactor OS .. ideally FreeBSD. OSX kqueue isn't the greatest.

/Tobias

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Flint
Gesendet: Mittwoch, 23. Oktober 2013 17:46
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] epoll keep sharing state between process even after fork.

Hi everybody

I a came across a surprising problem when using the epoll based reactor.
(ticket here https://twistedmatrix.com/trac/ticket/6796)

As you can see on the ticket, the epoll object seems to share some state even after fork.
Which means even after having forked the process, making some changes to the inherited epoll object in one process may impact the one existing in another process !

This problem is only related to epoll based reactor, poll and select behave correctly.
I'm aware that some may say that this in not a twisted related problem (but an epoll issue), but I'm addressing my question here to try to figure out what would be the best workaround for this problem in a twisted based project ?

And for information this is what I have already tryed:
- I though about using poll or select reactor, but this is not possible, cause as i'm writing a library I do not decide which reactor will be installed by the person who want to use it.
(Besides as epoll is now the default reactor installed, I certainly want my library to work with it !)

- Using spawnProcess as mentioned in the ticket comment, is not an option too, in my case, I need to share some state between the main process and subprocess. (I have on object in main process space that I want to inherit in all subprocess)

- I (desperately) tryed to re-initialize the reactor._poller object after each fork to set it with a new object, but it was just a very bad idea ! :)

Thank you, in advance, for any possible clue !
(for information, my project is here https://github.com/Grindizer/scaletix)






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/685d2b7c/attachment.html>

From p.mayers at imperial.ac.uk  Wed Oct 23 10:50:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Oct 2013 17:50:36 +0100
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <5267FBA7.2050606@imperial.ac.uk>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk>
Message-ID: <5267FE5C.9090807@imperial.ac.uk>

On 23/10/13 17:39, Phil Mayers wrote:

>   2. Arrange for the epoll object (or FD) to be closed after fork, but
> before exec, so that the child process can't fiddle with it

See also:

http://bugs.python.org/issue8713

...which suggests Python 3.4 added fork+exec support to multiprocessing. 
On Unix and older Python versions, you're stuck with plain fork and all 
the attendant horribleness.

This is a multiprocessing bug IMHO.


From exarkun at twistedmatrix.com  Wed Oct 23 11:31:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Oct 2013 17:31:55 -0000
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <20131023173155.8627.1410787219.divmod.xquotient.38@top>

On 03:46 pm, grindizer at gmail.com wrote:
>Hi everybody
>
>I a came across a surprising problem when using the epoll based 
>reactor.
>(ticket here https://twistedmatrix.com/trac/ticket/6796)
>
>As you can see on the ticket, the epoll object seems to share some 
>state
>even after fork.
>
>[snip]
>
>- Using spawnProcess as mentioned in the ticket comment, is not an 
>option
>too, in my case, I need to share some state between the main process 
>and
>subprocess. (I have on object in main process space that I want to 
>inherit
>in all subprocess)

This doesn't really explain why you can't use `spawnProcess`.  There are 
other ways to share state between processes.  Perhaps if you describe 
the object you have someone can suggest a way to share it that will 
still satisfy your requirements without requiring that you use the 
`multiprocessing` module.

Jean-Paul


From glyph at twistedmatrix.com  Wed Oct 23 11:51:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 10:51:39 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <5267D817.8070006@atleastfornow.net>
References: <5267D817.8070006@atleastfornow.net>
Message-ID: <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>


On Oct 23, 2013, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone,
> 
> I have raised the question of Windows XP support in Twisted earlier today in #twisted-dev. Since the Microsoft "extended support" cut-off is within six or so months, and there is continuing trouble with the XP-based buildslave, I think it would be a good idea to get a figure of how many Windows XP users there are currently using Twisted, so informed decisions can be made in regards to supporting it.
> 
> If you use Twisted on Windows XP, please comment on ticket #6798 [1], so we can get an idea of the usage numbers.
> 
> -hawkowl


I have 2 concerns with XP support; one is that an existing user will be unable to upgrade to a new version of Twisted, but an equally valid concern is that Twisted would be unsuitable for a *new* application because of a requirement to run on XP.  And although Microsoft doesn't support it, there are still millions and millions of computers with it installed.

<https://en.wikipedia.org/wiki/Usage_share_of_operating_systems>

Perhaps more interesting than that ~30% number, though, is the fact that ~7% of the Steam user base is still actively using XP on machines they play games on:

<http://store.steampowered.com/hwsurvey>

And I'd definitely like Twisted to stay true to its roots and remain an attractive option for game developers.  I'm pretty sure no games on the Steam store currently use Twisted, but I would like that to change ;-).  "First, sacrifice 7% of your potential revenue" seems like a bad starting point for the pitch for why Twisted would be great to use in their game.

Nevertheless I can definitely understand the appeal of dropping support for XP, too.  I really hope that the "extended support" cut-off is going to provoke a massive drop in those numbers, but somehow I suspect that a substantial fraction of the people on those systems are going to keep using them until they physically fail, and do not know or care whether Microsoft "supports" them.

Also, aren't the majority of the problems on the Windows buildslave just race conditions that we don't seem to hit with our other builders right now?  It would be good to have it be regularly green *before* it's decommissioned.  (If you're referring to operational issues keeping it running, then, by all means carry on.)

-glyph



From jasonjwwilliams at gmail.com  Wed Oct 23 11:56:40 2013
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 23 Oct 2013 10:56:40 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
Message-ID: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>

If you're still running XP isn't it pretty unlikely you have hardware modern enough to power a Steam game in the first place?

-J

Sent via iPhone

Is your email Premiere?

> On Oct 23, 2013, at 10:51, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Oct 23, 2013, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> I have raised the question of Windows XP support in Twisted earlier today in #twisted-dev. Since the Microsoft "extended support" cut-off is within six or so months, and there is continuing trouble with the XP-based buildslave, I think it would be a good idea to get a figure of how many Windows XP users there are currently using Twisted, so informed decisions can be made in regards to supporting it.
>> 
>> If you use Twisted on Windows XP, please comment on ticket #6798 [1], so we can get an idea of the usage numbers.
>> 
>> -hawkowl
> 
> 
> I have 2 concerns with XP support; one is that an existing user will be unable to upgrade to a new version of Twisted, but an equally valid concern is that Twisted would be unsuitable for a *new* application because of a requirement to run on XP.  And although Microsoft doesn't support it, there are still millions and millions of computers with it installed.
> 
> <https://en.wikipedia.org/wiki/Usage_share_of_operating_systems>
> 
> Perhaps more interesting than that ~30% number, though, is the fact that ~7% of the Steam user base is still actively using XP on machines they play games on:
> 
> <http://store.steampowered.com/hwsurvey>
> 
> And I'd definitely like Twisted to stay true to its roots and remain an attractive option for game developers.  I'm pretty sure no games on the Steam store currently use Twisted, but I would like that to change ;-).  "First, sacrifice 7% of your potential revenue" seems like a bad starting point for the pitch for why Twisted would be great to use in their game.
> 
> Nevertheless I can definitely understand the appeal of dropping support for XP, too.  I really hope that the "extended support" cut-off is going to provoke a massive drop in those numbers, but somehow I suspect that a substantial fraction of the people on those systems are going to keep using them until they physically fail, and do not know or care whether Microsoft "supports" them.
> 
> Also, aren't the majority of the problems on the Windows buildslave just race conditions that we don't seem to hit with our other builders right now?  It would be good to have it be regularly green *before* it's decommissioned.  (If you're referring to operational issues keeping it running, then, by all means carry on.)
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From sank.daniel at gmail.com  Wed Oct 23 12:20:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 23 Oct 2013 11:20:05 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
Message-ID: <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>

> If you're still running XP isn't it pretty unlikely you have
> hardware modern enough to power a Steam game in the
> first place?

You'd be surprised. I have an XP machine at work because I never
bothered to buy a new license for Win7, but I've upgraded the hardware
reasonably recently. I have no idea if home users are in the same
situation.


From lloyd at passcal.nmt.edu  Wed Oct 23 15:41:27 2013
From: lloyd at passcal.nmt.edu (Lloyd Carothers)
Date: Wed, 23 Oct 2013 15:41:27 -0600
Subject: [Twisted-Python] FTP without the protocol
Message-ID: <52684287.5000609@passcal.nmt.edu>

Hi, all,
  I have many users that need to send data to me for archival. Large 
data sets in many files (10,000's of files 100s of GB per file set.) Up 
to this point the users use a ftp client wrapper that uploads data to my 
FTP server. This has become too problematic with firewalls etc. and I 
now have the time to write a new client/server of my own; A ftp server 
for uploads only.

  I'm looking into using twisted, but am very open to other 
suggestions/solutions.

  For such a use case I'm surprised not to find an example. I think I 
just need a push in the right direction. Is producers/consumers the 
right approach?

Thanks in advance,
  Lloyd



From mithrandi at mithrandi.net  Wed Oct 23 16:16:18 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 24 Oct 2013 00:16:18 +0200
Subject: [Twisted-Python] Buildslave outage
Message-ID: <CAMcKhMT=fgf1zk1g3DrqCJr0F9cchHP0bgxD5AtoDEPU_wewgA@mail.gmail.com>

Hi all,

Sorry for the short notice. My buildslaves (bot-idnar-debian{,64})
will be down for the next 8 hours or so, due to the host systems being
moved to another datacentre.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From werner at thieprojects.ch  Wed Oct 23 16:18:50 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 23 Oct 2013 12:18:50 -1000
Subject: [Twisted-Python] twisted & USB
Message-ID: <52684B4A.1010106@thieprojects.ch>

Aloha

is anybody aware of code allowing to attach to USB devices with twisted?

The only piece of code I found is the twistification of pywws (Weather 
Station) on

https://gist.github.com/claws/2464017

The code works, but I'm scratching my head if there is a better solution 
to this problem, although USB across platforms seems to be a monster to 
tackle.

Werner


From glyph at twistedmatrix.com  Wed Oct 23 16:50:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 15:50:41 -0700
Subject: [Twisted-Python] twisted & USB
In-Reply-To: <52684B4A.1010106@thieprojects.ch>
References: <52684B4A.1010106@thieprojects.ch>
Message-ID: <230A4EB6-4990-485D-AF8D-F1DEFEDD231E@twistedmatrix.com>


On Oct 23, 2013, at 3:18 PM, Werner Thie <werner at thieprojects.ch> wrote:

> Aloha
> 
> is anybody aware of code allowing to attach to USB devices with twisted?
> 
> The only piece of code I found is the twistification of pywws (Weather Station) on
> 
> https://gist.github.com/claws/2464017
> 
> The code works, but I'm scratching my head if there is a better solution to this problem, although USB across platforms seems to be a monster to tackle.

Sounds like this code ought to be extracted into a, let's say, txUSB project, then.  Seems like 'weather_station.py' is the wrong module for a class called 'UsbDevice', at any rate :-).

I'm not aware of anyone else working on such a thing yet.

-glyph



From glyph at twistedmatrix.com  Wed Oct 23 16:53:53 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 15:53:53 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
Message-ID: <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>

On Oct 23, 2013, at 10:56 AM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:

> If you're still running XP isn't it pretty unlikely you have hardware modern enough to power a Steam game in the first place?

Not according to the statistics that Valve themselves publish about Steam.  Did you read the link in the original email?

> Is your email Premiere?

I'm not sure what you mean.  My email is not the leader of a foreign country or anything, and I don't think that my email is the best email ever written or read.  Why do you ask?

-glyph



From jasonjwwilliams at gmail.com  Wed Oct 23 17:16:30 2013
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 23 Oct 2013 16:16:30 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>
Message-ID: <CAHZAEpeQTTbgDkWu2nzBOP=J3Zp8bUbGkXq2NonVvXQK4josKw@mail.gmail.com>

>
> Not according to the statistics that Valve themselves publish about Steam.
>  Did you read the link in the original email?
>

Yeah, I didn't see a correlation though of what kind of hardware those
folks were running. They could be running ancient stuff and are prepared to
deal with the consequences of running XP.


> > Is your email Premiere?
>
> I'm not sure what you mean.  My email is not the leader of a foreign
> country or anything, and I don't think that my email is the best email ever
> written or read.  Why do you ask?


Wasn't a real question. I used my office e-mail client and it added a
signature.

-J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131023/c818cf75/attachment.html>

From db3l.net at gmail.com  Wed Oct 23 19:30:13 2013
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 23 Oct 2013 21:30:13 -0400
Subject: [Twisted-Python] FTP without the protocol
References: <52684287.5000609@passcal.nmt.edu>
Message-ID: <m2hac7ihga.fsf@valheru.db3l.homeip.net>

Lloyd Carothers <lloyd at passcal.nmt.edu> writes:

>  For such a use case I'm surprised not to find an example. I think I
> just need a push in the right direction. Is producers/consumers the
> right approach?

It's a bit dated at this point, but maybe this might spark some ideas:
   http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

It's producer/consumer, which yes, is very efficient for streaming
transfers.  The code the post was based on is actually still in active
use, but against an older twisted 2.5.0 installation, so I'm not sure
how much tweaking it may need to adjust to the latest Twisted version.

In practice this is paired with a separate set of code that implements a
PB-based control channel over which the files to upload are negotiated.
The binary transfer itself just has a small header in front of the data
containing some authentication and size information, so it's derived
from LineReceiver and switches to raw mode for the transfer.  While I
tend to prefer a separate control channel (though it certainly doesn't
need to be PB based), you could also in-line the control information (so
it becomes more like an HTTP transfer) if you wished.

BTW, passive FTP should be quite firewall friendly, unless you're
talking about really locked down locations where the only thing allowed
out is HTTP or something.  But if you're not using passive mode yet,
that might also be a quicker fix to your existing code base.

-- David



From sank.daniel at gmail.com  Thu Oct 24 00:08:21 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 23 Oct 2013 23:08:21 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
Message-ID: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>

I think I have figured out what's wrong with the documentation. Some
of the chapters are out of order. It looks like the logical flow was
broken as new chapters were inserted. For example, the chapter
"Authentication with Perspective Broker" refers to "Using Perspective
Broker" as the "previous chapter" whereas this is not how the chapters
are actually currently ordered.

> please feel free to file a documentation ticket for it

I just tried to register so I could do that. When I clicked on the
register button after filling out the username/password fields my
browser (firefox) brought up a notice that the security certificate is
invalid because of unavailable issuance chain information. Knowing
absolutely nothing about internet security issues I thought I should
mention this and ask if this is expected behavior.

Sincerely
--
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117


From tobias.oberstein at tavendo.de  Thu Oct 24 01:02:15 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 00:02:15 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>

> I just tried to register so I could do that. When I clicked on the register button
> after filling out the username/password fields my browser (firefox) brought
> up a notice that the security certificate is invalid because of unavailable
> issuance chain information. Knowing absolutely nothing about internet
> security issues I thought I should mention this and ask if this is expected
> behavior.

I wouldn't call that expected behavior, since

a) the certificate used on twistedmatrix.com contains (as it should) intermediate CA certs also (see attachments)

b) Firefox (but not Chrome) is usually able to dynamically retrieve intermediate CA certs to fill in gaps in the certificate chain

Mmmh.

Probably you are on a locked down network where a MITM TLS proxy kicks which rewrites the cert.

If you care, could you open the page in your browser, double click the small "lock icon" left to the "https://" in the address bar and send a screenshot of the dialog shown (as the one attached)?

/Tobias
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard01.png
Type: image/png
Size: 29331 bytes
Desc: Clipboard01.png
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/7dfbbeeb/attachment-0002.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard02.png
Type: image/png
Size: 36765 bytes
Desc: Clipboard02.png
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/7dfbbeeb/attachment-0003.png>

From hs at ox.cx  Thu Oct 24 01:13:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 09:13:03 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
Message-ID: <F6958A41-7854-4589-9D29-3B079491C5E3@ox.cx>

Am 24.10.2013 um 08:08 schrieb Daniel Sank <sank.daniel at gmail.com>:

> When I clicked on the
> register button after filling out the username/password fields my
> browser (firefox) brought up a notice that the security certificate is
> invalid because of unavailable issuance chain information. Knowing
> absolutely nothing about internet security issues I thought I should
> mention this and ask if this is expected behavior.

This will be fixed as soon as the now-in-prerelease Twisted 13.2 has been deployed to Twisted?s homepage (i.e. hopefully soon). Earlier versions don?t allow the specification of chain certificates unfortunately so it?s up to the browsers to fetch them ? or not.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/d0c049d0/attachment.pgp>

From hs at ox.cx  Thu Oct 24 01:15:50 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 09:15:50 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>

Am 24.10.2013 um 09:02 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>> I just tried to register so I could do that. When I clicked on the register button
>> after filling out the username/password fields my browser (firefox) brought
>> up a notice that the security certificate is invalid because of unavailable
>> issuance chain information. Knowing absolutely nothing about internet
>> security issues I thought I should mention this and ask if this is expected
>> behavior.
> 
> I wouldn't call that expected behavior, since
> 
> a) the certificate used on twistedmatrix.com contains (as it should) intermediate CA certs also (see attachments)

I?m not sure what you mean with ?contains?? It certainly *relies* on one but unfortunately doesn?t send it along (yet):

$ openssl s_client -host www.twistedmatrix.com -port 443                                                                                                                                                                                                                                                                                                             
CONNECTED(00000003)
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=27:certificate not trusted
verify return:1
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
---
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/4ecb2560/attachment.pgp>

From tobias.oberstein at tavendo.de  Thu Oct 24 01:48:02 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 00:48:02 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>

Ah, right. Seems Chrome changed it's behavior .. at one point it wasn't able to load intermediate certs .. and hence I assumed from the dialog that Twisted cert has the intermediate cert contained. Wrong.

FWIW, you can manually concatenate certs .. this is what we do (also for StartSSL):

    $ cat myserver_plain_cert.crt > myserver.crt
    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
    $ cat ../ca.pem >> myserver.crt

A concatenated cert like above works today without the new code that is upcoming in Twisted. Which is cool also.

However: this all does not explain (at least I dont understand) why the OP has that issue showing up .. Firefox is able to load intermediate CA certs from the net .. I have seen it .. also for StartSSL certs. Something is breaking this. Maybe it's MITM TLS, maybe they blocked intermediate cert auto-loading, .. dunno.

/Tobias

> -----Urspr?ngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Hynek Schlawack
> Gesendet: Donnerstag, 24. Oktober 2013 09:16
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> Am 24.10.2013 um 09:02 schrieb Tobias Oberstein
> <tobias.oberstein at tavendo.de>:
> 
> >> I just tried to register so I could do that. When I clicked on the
> >> register button after filling out the username/password fields my
> >> browser (firefox) brought up a notice that the security certificate
> >> is invalid because of unavailable issuance chain information. Knowing
> >> absolutely nothing about internet security issues I thought I should
> >> mention this and ask if this is expected behavior.
> >
> > I wouldn't call that expected behavior, since
> >
> > a) the certificate used on twistedmatrix.com contains (as it should)
> > intermediate CA certs also (see attachments)
> 
> I'm not sure what you mean with "contains"? It certainly *relies* on one but
> unfortunately doesn't send it along (yet):
> 
> $ openssl s_client -host www.twistedmatrix.com -port 443
> CONNECTED(00000003)
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=20:unable to get local issuer certificate verify return:1
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=27:certificate not trusted verify return:1
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=21:unable to verify the first certificate verify return:1
> ---
> Certificate chain
>  0
> s:/description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/email
> Address=postmaster at twistedmatrix.com
>    i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate
> Signing/CN=StartCom Class 1 Primary Intermediate Server CA
> ---


From hs at ox.cx  Thu Oct 24 02:08:14 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 10:08:14 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>

Am 24.10.2013 um 09:48 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

> FWIW, you can manually concatenate certs .. this is what we do (also for StartSSL):
> 
>    $ cat myserver_plain_cert.crt > myserver.crt
>    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
>    $ cat ../ca.pem >> myserver.crt
> 
> A concatenated cert like above works today without the new code that is upcoming in Twisted. Which is cool also.

That is completely new to me. Are you sure you?re not mixing up Twisted?s behavior with nginx?

If what you say is true, there would have never been the need for #2061 and the monkey patching everyone was doing before it landed. Can you point me at a server where you have deployed TLS like that please?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/5e8d5917/attachment.pgp>

From tobias.oberstein at tavendo.de  Thu Oct 24 03:10:48 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 02:10:48 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>

> > A concatenated cert like above works today without the new code that is
> upcoming in Twisted. Which is cool also.
> 
> That is completely new to me. Are you sure you're not mixing up Twisted's
> behavior with nginx?
> 
> If what you say is true, there would have never been the need for #2061 and
> the monkey patching everyone was doing before it landed. Can you point me
> at a server where you have deployed TLS like that please?

https://crossbardemo.tavendo.de/ws

This works for me in Chrome, FF and IE. It is Twisted Web / Autobahn. Nothing in front.

Now, using 

openssl s_client -host crossbardemo.tavendo.de -port 443                                                                                                                                                                                                                                                                                                             

spits out errors complaining about "self-signed" cert inside.

This might be because I not only included the StartSSL intermediate CA cert, but also their top-level CA cert (which is obviously self-signed).

Maybe this is wrong, and one should only include up to (but excluding) root CA cert ..

/Tobias


From grindizer at gmail.com  Thu Oct 24 03:13:36 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 11:13:36 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1paRNatz0gstQLf4w4hkZgoXp1xtrSr7EdpCX0_5tKNcew@mail.gmail.com>

>
> On 03:46 pm, grindizer at gmail.com wrote:
> >Hi everybody
> >
> >I a came across a surprising problem when using the epoll based
> >reactor.
> >(ticket here https://twistedmatrix.com/trac/ticket/6796)
> >
> >As you can see on the ticket, the epoll object seems to share some
> >state
> >even after fork.
> >
> >[snip]
> >
> >- Using spawnProcess as mentioned in the ticket comment, is not an
> >option
> >too, in my case, I need to share some state between the main process
> >and
> >subprocess. (I have on object in main process space that I want to
> >inherit
> >in all subprocess)
>
> This doesn't really explain why you can't use `spawnProcess`.  There are
> other ways to share state between processes.  Perhaps if you describe
> the object you have someone can suggest a way to share it that will
> still satisfy your requirements without requiring that you use the
> `multiprocessing` module.
>
> Jean-Paul
>

Hi.

For the moment I share a factory object, but it's the underlying "protocol
class" that is really needed.
The code takes a factory object, and then launch a set of worker/process.
when a connection is made on the parent process, the socket handler will be
sent to one of the process (using sendmsg), the process will then run
reactor.adoptStreamConnection and this is when we need the protocol class.
There is an example of what I would like to achieve here
https://github.com/Grindizer/scaletix the example works with select or poll
reactor.

with spawnProcess I guess the child process will need to somehow import the
factory class and should be given the way to instanciate it ? isn't it ? I
don't know other way to do it actually ?

thankx again.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/c81ae05f/attachment.html>

From tobias.oberstein at tavendo.de  Thu Oct 24 03:15:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 02:15:40 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A9@EXVMBX020-12.exch020.serverdata.net>

that server isnt terrible elegant/complete at the moment .. sorry, we#re right now moving our stuff to Amazon EC2 .. but see attached shots. It _is_ Twisted Web 13.1 (release)

> -----Urspr?ngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Hynek Schlawack
> Gesendet: Donnerstag, 24. Oktober 2013 10:08
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> Am 24.10.2013 um 09:48 schrieb Tobias Oberstein
> <tobias.oberstein at tavendo.de>:
> 
> > FWIW, you can manually concatenate certs .. this is what we do (also for
> StartSSL):
> >
> >    $ cat myserver_plain_cert.crt > myserver.crt
> >    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
> >    $ cat ../ca.pem >> myserver.crt
> >
> > A concatenated cert like above works today without the new code that is
> upcoming in Twisted. Which is cool also.
> 
> That is completely new to me. Are you sure you're not mixing up Twisted's
> behavior with nginx?
> 
> If what you say is true, there would have never been the need for #2061 and
> the monkey patching everyone was doing before it landed. Can you point me
> at a server where you have deployed TLS like that please?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard03.png
Type: image/png
Size: 46913 bytes
Desc: Clipboard03.png
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/c35b7145/attachment-0002.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard04.png
Type: image/png
Size: 26949 bytes
Desc: Clipboard04.png
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/c35b7145/attachment-0003.png>

From grindizer at gmail.com  Thu Oct 24 03:32:09 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 11:32:09 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1paVNwKs5AgqLu+e9fWo_0npPi=sUch9pbeho0dxAbh1ww@mail.gmail.com>

> >   2. Arrange for the epoll object (or FD) to be closed after fork, but
> > before exec, so that the child process can't fiddle with it
>
> See also:
>
> http://bugs.python.org/issue8713
>
> ...which suggests Python 3.4 added fork+exec support to multiprocessing.
> On Unix and older Python versions, you're stuck with plain fork and all
> the attendant horribleness.
>
> This is a multiprocessing bug IMHO.
>

Hi again,

I've found this discussion https://lkml.org/lkml/2007/10/27/25 the
scenarios discussed are a bit different but it sounds to me related to the
same problem. which makes me think this is not a python bug but may be an
epoll design poblem with fork !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/36e6c0df/attachment.html>

From hs at ox.cx  Thu Oct 24 04:30:02 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 12:30:02 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>


Am 24.10.2013 um 11:10 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>>> A concatenated cert like above works today without the new code that is
>> upcoming in Twisted. Which is cool also.
>> 
>> That is completely new to me. Are you sure you're not mixing up Twisted's
>> behavior with nginx?
>> 
>> If what you say is true, there would have never been the need for #2061 and
>> the monkey patching everyone was doing before it landed. Can you point me
>> at a server where you have deployed TLS like that please?
> 
> https://crossbardemo.tavendo.de/ws
> 
> This works for me in Chrome, FF and IE. It is Twisted Web / Autobahn. Nothing in front.

Your server definitely sends three certificates ? that?s surprising/confusing.

Could you double-check how you?ve achieved that? If you google for chain certs & Twisted you?ll find all kinds of monkey patches to achieve that; and when I run twistd -n web with a pem that has multiple certificates I still get sent only one from the server. I feel like I?m missing something.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/18a71e79/attachment.pgp>

From tobias.oberstein at tavendo.de  Thu Oct 24 04:44:32 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 03:44:32 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
 <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>

> Your server definitely sends three certificates - that's surprising/confusing.
> 
> Could you double-check how you've achieved that? If you google for chain
> certs & Twisted you'll find all kinds of monkey patches to achieve that; and
> when I run twistd -n web with a pem that has multiple certificates I still get
> sent only one from the server. I feel like I'm missing something.

Ok, sorry, I forgot totally about it .. but this is what we do:

https://github.com/crossbario/crossbar/blob/master/crossbar/crossbar/tlsctx.py#L73

It indeed relies on "use_certificate_chain_file".

Sorry. My fault: it needs patching.

/Tobias


From hs at ox.cx  Thu Oct 24 05:02:00 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 13:02:00 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
 <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <56277C43-4FAE-4B7F-B59C-2579E4AC4B82@ox.cx>


Am 24.10.2013 um 12:44 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>> Your server definitely sends three certificates - that's surprising/confusing.
>> 
>> Could you double-check how you've achieved that? If you google for chain
>> certs & Twisted you'll find all kinds of monkey patches to achieve that; and
>> when I run twistd -n web with a pem that has multiple certificates I still get
>> sent only one from the server. I feel like I'm missing something.
> 
> Ok, sorry, I forgot totally about it .. but this is what we do:
> 
> https://github.com/crossbario/crossbar/blob/master/crossbar/crossbar/tlsctx.py#L73
> 
> It indeed relies on "use_certificate_chain_file".
> 
> Sorry. My fault: it needs patching.

Phew, you really got me sweating there. :)

Since you?re not using string representations there, you can move to CertificateOptions which has chain files sind 13.1 already (the string support slipped into 13.2 because I don?t know how to Python and it got reverted a few days before the release of 13.1 because of a Python 3 regression).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/7c77a7a0/attachment.pgp>

From itamar at itamarst.org  Thu Oct 24 05:19:36 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 24 Oct 2013 07:19:36 -0400
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <5267FE5C.9090807@imperial.ac.uk>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
Message-ID: <52690248.1090707@itamarst.org>

On 10/23/2013 12:50 PM, Phil Mayers wrote:
>
> This is a multiprocessing bug IMHO.

This issue with multiprocessing appears in other places too. E.g. if 
you're using stdlib logging, child processes will try to rotate the 
parent process logs.

Basically multiprocessing on Unix is utterly broken and should never be 
used (except in the fork+exec form in Python 3.4).

-Itamar


From sank.daniel at gmail.com  Thu Oct 24 01:35:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 24 Oct 2013 00:35:05 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CAKN9TDKesBtKV1vxQevq4bqJ5a9UKpxa6x8sMASyZb_MxodOmg@mail.gmail.com>

> If you care, could you open the page in your browser, double click the small
> "lock icon" left to the "https://" in the address bar and send a screenshot of
> the dialog shown (as the one attached)?

Tried. Can't. Whenever I try to log in or out (bear with me) the lock
turns into a globe and I see firefox's security warning thingy.
Clicking on the globe shows the screens as given in attachments.

Now you ask how can I be logging out if I never was able to log in?
After submitting the registration info I got the security warning so I
left that page and emailed the list. When I went back to
twistedmatrix.com to try again I was already logged in. Now when I
click the log out link I get the same security warning. Is it possible
that only the page resulting from log in/out has this problem? Again,
I know next to nothing about web security (unless it involved quantum
encryption in which case I'll talk your ears off).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 1.png
Type: image/png
Size: 54882 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/476e931c/attachment-0002.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 2.png
Type: image/png
Size: 61857 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/476e931c/attachment-0003.png>

From exarkun at twistedmatrix.com  Thu Oct 24 06:07:46 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Oct 2013 12:07:46 -0000
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <52690248.1090707@itamarst.org>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
 <52690248.1090707@itamarst.org>
Message-ID: <20131024120746.8627.1193742102.divmod.xquotient.98@top>

On 11:19 am, itamar at itamarst.org wrote:
>On 10/23/2013 12:50 PM, Phil Mayers wrote:
>>
>>This is a multiprocessing bug IMHO.
>
>This issue with multiprocessing appears in other places too. E.g. if 
>you're using stdlib logging, child processes will try to rotate the 
>parent process logs.
>
>Basically multiprocessing on Unix is utterly broken and should never be 
>used (except in the fork+exec form in Python 3.4).

To expand on that just a bit, the form of sharing that you get when you 
fork() but you don't exec() is very difficult to use correctly (I think 
it's an open question whether it's *possible* to use correctly in a 
Python program).

The argument here is similar to the argument against shared-everything 
multithreading.  While memory (and some other per-process state) is no 
longer shared after fork(), *some* per-process state is still shared. 
And all of the state that isn't shared is still a potential source of 
bugs since it's almost certainly the case that none of it cooperated 
with the fork() call - a call which happened at some arbitrary time and 
captured a snapshot of all the state in memory at an arbitrary point.

Consider a simple implementation of a lock file, used to prevent 
multiple instances of a program from starting.  There are several ways 
fork() could break such code.  Perhaps it is partway through acquiring a 
lock on the lock file when the fork() occurs.  Perhaps the result is 
that the file ends up locked but no process thinks it is holding the 
lock.  Now no instances of the program are running.  Or perhaps the lock 
is held when fork() happens and the problem only surfaces at unlock 
time.  Perhaps one of the processes exits and releases the lock.  Now 
the program is still running but the lock isn't held.

And that's just one of the simplest possible examples of how things can 
go wrong.

The nearly uncountable different ways for failures to creep in and the 
resulting impracticality (if not impossibility) of being able to test 
that Twisted (or any Python library) actually works when fork() is used 
means that it's not likely Twisted will ever be declared compatible with 
any fork()-without-exec() usage.

You can find some examples of Twisted-using applications that run 
multiple processes, though.  Apple CalendarServer does it by passing 
file descriptors to worker processes and sends them the location of a 
configuration file describing how they should behave.  Divmod Mantissa 
does it by inserting self-describing work into a SQLite3 database.  When 
the worker process finds one of these, it knows what code to load and 
run by looking at the fields in the row.  These are variations on a 
theme - RPC, not shared (or duplicated) memory.

Hope this helps,
Jean-Paul


From tobias.oberstein at tavendo.de  Thu Oct 24 07:12:44 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 06:12:44 -0700
Subject: [Twisted-Python] WG:  "mind" introduced strangely in pb howto
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <CAKN9TDKesBtKV1vxQevq4bqJ5a9UKpxa6x8sMASyZb_MxodOmg@mail.gmail.com> 
Message-ID: <634914A010D0B943A035D226786325D44469DC63EF@EXVMBX020-12.exch020.serverdata.net>

maybe the mailing list disallows >2 attachments .. again:

http://picpaste.com/pics/step1-NB1LoEVR.1382620207.png
http://picpaste.com/pics/step2-6zVhXeE6.1382620274.png
http://picpaste.com/pics/step3-KTao4B2V.1382620308.png


-----Urspr?ngliche Nachricht-----
Von: Tobias Oberstein 
Gesendet: Donnerstag, 24. Oktober 2013 14:35
An: Twisted general discussion
Betreff: AW: [Twisted-Python] "mind" introduced strangely in pb howto

Daniel,

Ok, I've just tried using Firefox Portable (a self-contained browser not relying on any local installed stuff .. you can run that without Admin rights / installation - caution: when you are on some intranet, the former might be technically possible, but still disallowed .. and admins might still catch you): http://portableapps.com/apps/internet/firefox_portable

See attached shots.

This shows that the cert on twistedmatrix is somewhat lacking .. Firefox complains .. but I _do_ get HTTPS in the end.

Are you surfing from a university (or some other) intranet?

If so, the only reason I could think of is that the admins there have setup servers that _intercept_ the initial HTTPS negotiation.

How to prove that? Well, that would now get quite technical .. not sure if you want to do that;)

Or: just call them up;)

If you are surfing from a regular residential dial-up or such: I have no clue why that happens to you ..

/Tobias

> -----Urspr?ngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python- 
> bounces at twistedmatrix.com] Im Auftrag von Daniel Sank
> Gesendet: Donnerstag, 24. Oktober 2013 09:35
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> > If you care, could you open the page in your browser, double click 
> > the small "lock icon" left to the "https://" in the address bar and 
> > send a screenshot of the dialog shown (as the one attached)?
> 
> Tried. Can't. Whenever I try to log in or out (bear with me) the lock 
> turns into a globe and I see firefox's security warning thingy.
> Clicking on the globe shows the screens as given in attachments.
> 
> Now you ask how can I be logging out if I never was able to log in?
> After submitting the registration info I got the security warning so I 
> left that page and emailed the list. When I went back to 
> twistedmatrix.com to try again I was already logged in. Now when I 
> click the log out link I get the same security warning. Is it possible 
> that only the page resulting from log in/out has this problem? Again, 
> I know next to nothing about web security (unless it involved quantum encryption in which case I'll talk your ears off).


From grindizer at gmail.com  Thu Oct 24 08:10:45 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 16:10:45 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <20131024120746.8627.1193742102.divmod.xquotient.98@top>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
 <52690248.1090707@itamarst.org>
 <20131024120746.8627.1193742102.divmod.xquotient.98@top>
Message-ID: <CALpq1paDsRBhbZny=MVW5+fj5GZk9ePiQZhKez3eGCV4_jV0cg@mail.gmail.com>

>
> To expand on that just a bit, the form of sharing that you get when you
> fork() but you don't exec() is very difficult to use correctly (I think
> it's an open question whether it's *possible* to use correctly in a Python
> program).
>
> The argument here is similar to the argument against shared-everything
> multithreading.  While memory (and some other per-process state) is no
> longer shared after fork(), *some* per-process state is still shared. And
> all of the state that isn't shared is still a potential source of bugs
> since it's almost certainly the case that none of it cooperated with the
> fork() call - a call which happened at some arbitrary time and captured a
> snapshot of all the state in memory at an arbitrary point.
>
> Consider a simple implementation of a lock file, used to prevent multiple
> instances of a program from starting.  There are several ways fork() could
> break such code.  Perhaps it is partway through acquiring a lock on the
> lock file when the fork() occurs.  Perhaps the result is that the file ends
> up locked but no process thinks it is holding the lock.  Now no instances
> of the program are running.  Or perhaps the lock is held when fork()
> happens and the problem only surfaces at unlock time.  Perhaps one of the
> processes exits and releases the lock.  Now the program is still running
> but the lock isn't held.
>
> And that's just one of the simplest possible examples of how things can go
> wrong.
>
> The nearly uncountable different ways for failures to creep in and the
> resulting impracticality (if not impossibility) of being able to test that
> Twisted (or any Python library) actually works when fork() is used means
> that it's not likely Twisted will ever be declared compatible with any
> fork()-without-exec() usage.
>
> You can find some examples of Twisted-using applications that run multiple
> processes, though.  Apple CalendarServer does it by passing file
> descriptors to worker processes and sends them the location of a
> configuration file describing how they should behave.  Divmod Mantissa does
> it by inserting self-describing work into a SQLite3 database.  When the
> worker process finds one of these, it knows what code to load and run by
> looking at the fields in the row.  These are variations on a theme - RPC,
> not shared (or duplicated) memory.
>
> Hope this helps,
> Jean-Paul


Thankx a lot.

I'll probably rethink everything in my project hehe, but i'm glad I asked !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/5b16fe65/attachment.html>

From glyph at twistedmatrix.com  Thu Oct 24 11:50:45 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 24 Oct 2013 10:50:45 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <1F252086-842D-4356-87D2-9C352AD88B3A@twistedmatrix.com>


On Oct 24, 2013, at 12:48 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> However: this all does not explain (at least I dont understand) why the OP has that issue showing up .. Firefox is able to load intermediate CA certs from the net .. I have seen it .. also for StartSSL certs. Something is breaking this. Maybe it's MITM TLS, maybe they blocked intermediate cert auto-loading, .. dunno.

Firefox does not load intermediate CA certs from the network.  It - and pretty much all other browsers, as far as I know - will sometimes magically cache intermediary certificates.  So if you visit the site in a browser that happens to have had the right intermediate CA certificate cached (probably because you visited another StartSSL free site, in twistedmatrix.com's case) then you will get no warning.  This is why most people don't actually see a warning on the site :-).

But we'll have this problem fixed For Real soon!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131024/24396578/attachment.html>

From lloyd at passcal.nmt.edu  Thu Oct 24 15:32:09 2013
From: lloyd at passcal.nmt.edu (Lloyd Carothers)
Date: Thu, 24 Oct 2013 15:32:09 -0600
Subject: [Twisted-Python] FTP without the protocol
In-Reply-To: <m2hac7ihga.fsf@valheru.db3l.homeip.net>
References: <52684287.5000609@passcal.nmt.edu>
 <m2hac7ihga.fsf@valheru.db3l.homeip.net>
Message-ID: <526991D9.1080306@passcal.nmt.edu>

On 10/23/13 7:30 PM, David Bolen wrote:
> Lloyd Carothers <lloyd at passcal.nmt.edu> writes:
>
>>   For such a use case I'm surprised not to find an example. I think I
>> just need a push in the right direction. Is producers/consumers the
>> right approach?
> It's a bit dated at this point, but maybe this might spark some ideas:
>     http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>
> It's producer/consumer, which yes, is very efficient for streaming
> transfers.  The code the post was based on is actually still in active
> use, but against an older twisted 2.5.0 installation, so I'm not sure
> how much tweaking it may need to adjust to the latest Twisted version.
This looks pretty close to what I need and definitely a good starting 
point for me. I can make use of session specific information too, which 
will be nice.
As you've been using it for a while, have you had any issues. Is it 
robust/stable?
> In practice this is paired with a separate set of code that implements a
> PB-based control channel over which the files to upload are negotiated.
Would you be willing to share this as well?
> The binary transfer itself just has a small header in front of the data
> containing some authentication and size information, so it's derived
> from LineReceiver and switches to raw mode for the transfer.  While I
> tend to prefer a separate control channel (though it certainly doesn't
> need to be PB based), you could also in-line the control information (so
> it becomes more like an HTTP transfer) if you wished.
Gotcha.
Maybe this is new since you wrote the above, but is FileSender the 
producer to use here?
Perhaps its not fully developed but should there not also be a 
compliment FileReceiver  to consume the file and write it out?
> BTW, passive FTP should be quite firewall friendly, unless you're
> talking about really locked down locations where the only thing allowed
> out is HTTP or something.  But if you're not using passive mode yet,
> that might also be a quicker fix to your existing code base.
Indeed, I use passive mode exclusively as clients often come from NATed 
nets.
Generally FTP works ok but some organizations firewalls do strange 
things with that traffic, and even the good connections seem to have 
sporadic drops which often aren't handled well, at least with proftp.


>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From hawkowl at atleastfornow.net  Fri Oct 25 00:38:38 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 25 Oct 2013 14:38:38 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
Message-ID: <526A11EE.3060700@atleastfornow.net>

Hi everyone,

I've yet to hear back from anyone testing the prerelease - if you're 
able to, please do!

Especially of interest to be tested would be the new HostnameEndpoint, 
which tries to connect to both the IPv4 and IPv6 addresses from a DNS 
lookup, and uses whichever is first - it makes Glyph excited for its 
inclusion, so it ought to make you ;) .

It also supports SSL chain certificates, which should also fix up some 
issues using TLS with Twisted - this would also be great for people to 
test, and will hopefully remove a bunch of monkeypatching in everyone's 
code.

Unless there are problems brought to our attention, it is unlikely that 
the 13.2.0pre will be different from the final release - so you can also 
use it to run against your application's test suites, so you know you're 
ready for upgrading to the full release later. :)

The tarballs and NEWS file are available at 
http://twistedmatrix.com/Releases/pre/13.2.0pre1/ .

The ticket for the 13.2 release is at 
https://twistedmatrix.com/trac/ticket/6795 - please comment on it if you 
have any issues!

-hawkowl


From sank.daniel at gmail.com  Fri Oct 25 00:44:27 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 24 Oct 2013 23:44:27 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
Message-ID: <CAKN9TDJsApN_w7U9eOcaqKMkXfh0sNda9N9YMMPoRbo20LjCOg@mail.gmail.com>

> That will atomically combine the propagation of initial state with the provision of the
> back-propagation channel for updates to that state.

My understanding of Cacheable is that it propagates initial state to
the RemoteCache and then sends subsequent updates also to the
RemoteCache. What I was originally asking about was how to allow the
side holding the RemoteCache to request changes on the Cacheable. Your
phrase "back-propagation" leads me to think that maybe this kind of
thing is built into Cacheable, but I have not discovered how to use
it.

All of that said, in the end the answer to my original question seems
to be "read this howto page:"

http://twistedmatrix.com/documents/current/core/howto/pb-cred.html

and then use the mind argument.

Sincere thanks for your help,
Daniel


From db3l.net at gmail.com  Fri Oct 25 17:38:01 2013
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 25 Oct 2013 19:38:01 -0400
Subject: [Twisted-Python] FTP without the protocol
References: <52684287.5000609@passcal.nmt.edu>
 <m2hac7ihga.fsf@valheru.db3l.homeip.net> <526991D9.1080306@passcal.nmt.edu>
Message-ID: <m2d2msj50m.fsf@valheru.db3l.homeip.net>

Lloyd Carothers <lloyd at passcal.nmt.edu> writes:

> This looks pretty close to what I need and definitely a good starting
> point for me. I can make use of session specific information too,
> which will be nice.
> As you've been using it for a while, have you had any issues. Is it
> robust/stable?

Absolutely robust/stable.  Haven't touched the code since 2007 (well,
aside from one tweak to deal with an application level race condition
under long RTT connections unrelated to the file transfer itself).
Looks like there have been around 60000 media file transfers totaling
about 650GB of data so far.

> Would you be willing to share this as well?

It's part of a larger system that I can't really share in total, but I
could probably snip an extract of the PB part related to file I/O.
It's not really anything special - just a typical PB published object
with some remote methods.  You'd have to be willing to deal with it in
an "as-is" state though.  If interested, drop me a note directly.

> Gotcha.
> Maybe this is new since you wrote the above, but is FileSender the
> producer to use here?

That's the one I use on the client side, yes.  On the receiver the raw
data receipt is just part of the server side protocol definition.

> Perhaps its not fully developed but should there not also be a
> compliment FileReceiver  to consume the file and write it out?

Maybe.  I don't think such a helper exists in the version of Twisted I
was using, but it may also have been simpler enough that I didn't look too
hard (plus I wanted a running crc calculation).

I think it's also a little trickier on the receiving side than
sending.  On the sending side it's easier to delegate transmission of
the data, while on the receiving side the data (and connection status)
occurs as part of your protocol handler.  So at the least something
like FileReceiver would probably need to be a mix-in (taking over
dataReceived in some way) rather than an independent function.

The receiving side is also fairly trivial - in my case, it's not much
more than the few lines in dataReceived.

> Generally FTP works ok but some organizations firewalls do strange
> things with that traffic, and even the good connections seem to have
> sporadic drops which often aren't handled well, at least with proftp.

Yeah, it's an ugly network world out there :-)

Note that with an FTP replacement, you'll still be responsible for
handling disconnects and/or resuming uploads.  In my current system
all uploads go to a dedicated upload folder by job, which is moved to
its final location during the job commit, or completely discarded if
something goes wrong.  But I have the luxury of having tight control
of the client (who is an audio post-production house publishing jobs
for clients to review), so failures between the client and the server
in my case are actually reasonably rare.

-- David



From _ at lvh.io  Sat Oct 26 15:49:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 26 Oct 2013 23:49:00 +0200
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
	python3 porting
Message-ID: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>

Hi everyone,


I'm working on #6749 for porting t.p.logfile to python3. I'm dealing with
some test failures, which you can see from the buildbot here:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/1602/steps/shell/logs/stdio

I have pasted the relevant bit into a gist here:

https://gist.github.com/lvh/7174766

I think what's happening is that LogFile.write should take native strings
(since that's what log.msg takes). However, I'm opening all files in binary
mode, since that's on the reviewer checklist (point 8) for the Python 3
porting plan.

Should I not open the files in binary mode?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131026/94e8531f/attachment.html>

From exarkun at twistedmatrix.com  Sat Oct 26 19:19:00 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Oct 2013 01:19:00 -0000
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
Message-ID: <20131027011900.8627.1582817547.divmod.xquotient.144@top>

On 26 Oct, 09:49 pm, _ at lvh.io wrote:
>Hi everyone,
>
>
>I'm working on #6749 for porting t.p.logfile to python3. I'm dealing 
>with
>some test failures, which you can see from the buildbot here:
>
>http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/1602/steps/shell/logs/stdio
>
>I have pasted the relevant bit into a gist here:
>
>https://gist.github.com/lvh/7174766
>
>I think what's happening is that LogFile.write should take native 
>strings
>(since that's what log.msg takes). However, I'm opening all files in 
>binary
>mode, since that's on the reviewer checklist (point 8) for the Python 3
>porting plan.

Argh.  I was all set up to object to the "...should take native strings" 
bit but then I reviewed some history.

If you haven't already, read 
<https://twistedmatrix.com/trac/ticket/5932>.  In hindsight, it would 
have been nice if this branch had come with documentation of some kind.

 From what I can tell, this means:

  1. yep, `log.msg` takes native strings
  2. LogPublisher doesn't do anything with encoding or decoding
  3. a log observer can choose to do whatever it wants with what it gets
     (but it should be prepared to handle bytes on python 2 and unicode 
on python 3)

So... invent some policy.  What encoding does Twisted's built-in file 
log observer use for the files it writes?  Up until now the answer has 
been ASCII because it doesn't try to handle unicode so anything non- 
ASCII results in exceptions (unless you're using PyGTK... let's not go 
there).

UTF-8 is obviously the only possible correct answer, I guess.  This 
needs to be documented, of course.

And I predict that next someone will come along with a feature request 
for a command-line option to twistd to make it write logs with a 
different encoding. :(

Whether you open the file in binary mode or not is up to you in this 
case, I think.  You could do that and handle the encoding yourself or 
you could open it in text mode with the right encoding and let it handle 
the encoding.

The blanket statement on 
https://twistedmatrix.com/trac/wiki/Plan/Python3 about open calls is 
perhaps slightly too general.  It seems like that should apply to cases 
where the behavior is not supposed to be changing - which should be the 
case for the majority of porting work.  However, `log.msg` has already 
changed behavior as part of the port.

*Or*, it now occurs to me, just stick with the ASCII-only policy that's 
already in place.  I'd even say this is more correct since porting isn't 
supposed to change behavior.  Leave support for some other codec for 
another ticket (perhaps #989).  Apart from being simpler (I hope) and 
avoiding breaching the documented porting guidelines, this also means 
someone will actually have to think about unicode support on Python 2 as 
well.  Saying we support unicode in the logging system is a lot better 
than saying we support unicode in the logging system on Python 3 only.

Jean-Paul


From trac at twistedmatrix.com  Sun Oct 27 00:05:32 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Oct 2013 06:05:32 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1382853932.86.6363892501800605626@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131027/cc696d2d/attachment.html>

From _ at lvh.io  Sun Oct 27 07:57:28 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 27 Oct 2013 14:57:28 +0100
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <20131027011900.8627.1582817547.divmod.xquotient.144@top>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
Message-ID: <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>

Hi JP,


On Sun, Oct 27, 2013 at 2:19 AM, <exarkun at twistedmatrix.com> wrote:

> *Or*, it now occurs to me, just stick with the ASCII-only policy that's
> already in place.  I'd even say this is more correct since porting isn't
> supposed to change behavior.  Leave support for some other codec for
> another ticket (perhaps #989).  Apart from being simpler (I hope) and
> avoiding breaching the documented porting guidelines, this also means
> someone will actually have to think about unicode support on Python 2 as
> well.  Saying we support unicode in the logging system is a lot better than
> saying we support unicode in the logging system on Python 3 only.
>

Did this.

There's a few Windows-specific bugs left on the ticket that I don't know
how to fix, unfortunately.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131027/fd769cc0/attachment.html>

From exarkun at twistedmatrix.com  Sun Oct 27 14:40:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Oct 2013 20:40:45 -0000
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <20131027204045.32060.1785041479.divmod.xquotient.100@top>

On 25 Oct, 06:38 am, hawkowl at atleastfornow.net wrote:
>Hi everyone,
>
>I've yet to hear back from anyone testing the prerelease - if you're 
>able to, please do!

Thanks for managing the 13.2 release!

I've deployed my Divmod Quotient server on 13.2.0pre1 and it's running 
fine so far.

Jean-Paul


From _ at lvh.io  Sun Oct 27 15:37:27 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 27 Oct 2013 22:37:27 +0100
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <CAE_Hg6bU3WFTBUBEMXCPZy1ChjCpqyXH5DG=2XtbOi7NGk4cyg@mail.gmail.com>

Hi Hawkowl,


Thanks for managing the release!

My stuff works fine :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131027/2a754cb0/attachment.html>

From tobias.oberstein at tavendo.de  Mon Oct 28 04:41:33 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 28 Oct 2013 03:41:33 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>

> I've yet to hear back from anyone testing the prerelease - if you're able to,
> please do!

Tested with Autobahn (WebSocket) + Twisted Web based stuff .. no issues found.

> It also supports SSL chain certificates, which should also fix up some issues
> using TLS with Twisted - this would also be great for people to test, and will
> hopefully remove a bunch of monkeypatching in everyone's code.

Still using monkey patching (for various other SSL things), but I can confirm "no issues"

https://www.ssllabs.com/ssltest/analyze.html?d=crossbardemo.tavendo.de

See bottom of that page: "HTTP server signature	TwistedWeb/13.2.0pre1"

Thanks for the hard work!!

/Tobias


From hawkowl at atleastfornow.net  Mon Oct 28 05:16:40 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 28 Oct 2013 19:16:40 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
References: <526A11EE.3060700@atleastfornow.net>
 <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <526E4798.7070004@atleastfornow.net>

On 28/10/13 18:41, Tobias Oberstein wrote:
>> I've yet to hear back from anyone testing the prerelease - if you're able to,
>> please do!
> Tested with Autobahn (WebSocket) + Twisted Web based stuff .. no issues found.
>
>> It also supports SSL chain certificates, which should also fix up some issues
>> using TLS with Twisted - this would also be great for people to test, and will
>> hopefully remove a bunch of monkeypatching in everyone's code.
> Still using monkey patching (for various other SSL things), but I can confirm "no issues"
>
> https://www.ssllabs.com/ssltest/analyze.html?d=crossbardemo.tavendo.de
>
> See bottom of that page: "HTTP server signature	TwistedWeb/13.2.0pre1"
>
> Thanks for the hard work!!
>
> /Tobias
Brilliant - hynek mentioned a few more SSL tickets in the pipeline which 
should hopefully be in 14.0 - so hopefully we can get rid of all of the 
monkey patching eventually! :)


On 28/10/13 05:37, Laurens Van Houtven wrote:
> Hi Hawkowl,
>
>
> Thanks for managing the release!
>
> My stuff works fine :)
>
> cheers
> lvh
>
Good to hear!And thanks :)


On 28/10/13 04:40, exarkun at twistedmatrix.com wrote:
> Thanks for managing the 13.2 release!
>
> I've deployed my Divmod Quotient server on 13.2.0pre1 and it's running 
> fine so far.
>
> Jean-Paul
>
No problem - it's rather exciting, actually!And, great to hear 
everything is going good (so far at least!).

-

I think that with no problems being detected so far, I'll get the 
release ticket in for review soon, and have it in the queue for 
(hopefully) go time for next week, unless anyone has any objections, or 
anything crops up.

-hawkowl


From tobias.oberstein at tavendo.de  Mon Oct 28 06:50:28 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 28 Oct 2013 05:50:28 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526E4798.7070004@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
 <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
 <526E4798.7070004@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44469E6F54A@EXVMBX020-12.exch020.serverdata.net>

> Brilliant - hynek mentioned a few more SSL tickets in the pipeline which
> should hopefully be in 14.0 - so hopefully we can get rid of all of the monkey
> patching eventually! :)

That would be neat. There are 2 issues in pyOpenSSL which would needed to be
resolved for monkey patching going away completely:

https://bugs.launchpad.net/pyopenssl/+bug/1233810
https://bugs.launchpad.net/pyopenssl/+bug/1244201

/Tobias



From kevin.horn at gmail.com  Mon Oct 28 09:45:43 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Oct 2013 10:45:43 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
Message-ID: <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>

It's also worth noting that there are a fair number of people (at least I
know some) who use their old XP licenses for testing Windows software in
VMs, especially if they're usually working in Linux or Mac OS X.


On Wed, Oct 23, 2013 at 1:20 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> > If you're still running XP isn't it pretty unlikely you have
> > hardware modern enough to power a Steam game in the
> > first place?
>
> You'd be surprised. I have an XP machine at work because I never
> bothered to buy a new license for Win7, but I've upgraded the hardware
> reasonably recently. I have no idea if home users are in the same
> situation.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131028/cc656738/attachment.html>

From rgacote at appropriatesolutions.com  Tue Oct 29 11:11:59 2013
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 29 Oct 2013 13:11:59 -0400 (EDT)
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
Message-ID: <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>

I need to limit the ciphers offered for an ssh/sftp connection. 

class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
    """Main local proxy class for file transfer access.

    Many methods are overriden to support file encryption and
    encrypted file name mappings.
    """

    def __init__(self, avatar):
        """Initialize class with avatar representing user information"""
        SFTPServerForUnixConchUser.__init__(self, avatar)

I'm unclear as to how to restrict which ciphers to use at this level.
--Ray

-- 
Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 


From glyph at twistedmatrix.com  Tue Oct 29 16:34:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 29 Oct 2013 15:34:03 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
Message-ID: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>


On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> It's also worth noting that there are a fair number of people (at least I know some) who use their old XP licenses for testing Windows software in VMs, especially if they're usually working in Linux or Mac OS X.


Do you, yourself do this?

Anywhere possible it would be nice to identify real, actual users rather than hypothetical proto-users :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131029/49611fb9/attachment.html>

From glyph at twistedmatrix.com  Tue Oct 29 18:22:44 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 29 Oct 2013 17:22:44 -0700
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
	python3 porting
In-Reply-To: <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
 <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
Message-ID: <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>


On Oct 27, 2013, at 6:57 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi JP,
> 
> 
> On Sun, Oct 27, 2013 at 2:19 AM, <exarkun at twistedmatrix.com> wrote:
> *Or*, it now occurs to me, just stick with the ASCII-only policy that's already in place.  I'd even say this is more correct since porting isn't supposed to change behavior.  Leave support for some other codec for another ticket (perhaps #989).  Apart from being simpler (I hope) and avoiding breaching the documented porting guidelines, this also means someone will actually have to think about unicode support on Python 2 as well.  Saying we support unicode in the logging system is a lot better than saying we support unicode in the logging system on Python 3 only.
> 
> Did this.
> 
> There's a few Windows-specific bugs left on the ticket that I don't know how to fix, unfortunately.

The new logging branch (destined for review Real Soon Now) is a bit more rigorous about sensible behavior with respect to encoding, so we can tighten up this behavior and make it work in more cases without breaking compatibility.  What you're doing here basically makes sense though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131029/7ed1dc7b/attachment.html>

From orestis at orestis.gr  Wed Oct 30 02:13:46 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Wed, 30 Oct 2013 10:13:46 +0200
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
Message-ID: <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>


On 30 ??? 2013, at 12:34 ?.?., Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
> 
>> It's also worth noting that there are a fair number of people (at least I know some) who use their old XP licenses for testing Windows software in VMs, especially if they're usually working in Linux or Mac OS X.
> 
> 
> Do you, yourself do this?

I used to do that, but nowadays use the VMs Microsoft provides for testing webpages under IE [1] and multiple windows environments. Just download your favorite flavor and run. I'm not sure about limitations they might have, but I was able to install other software just fine.

[1]: http://www.modern.ie/en-us/virtualization-tools

> Anywhere possible it would be nice to identify real, actual users rather than hypothetical proto-users :-).
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/2bcddd1a/attachment.html>

From _ at lvh.io  Wed Oct 30 03:34:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 30 Oct 2013 10:34:00 +0100
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
 <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
 <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>
Message-ID: <CAE_Hg6YpT2DxuscM=PvA-uEfSi=DuCWv8L27qHgzTy-QRp=hVA@mail.gmail.com>

Hi Glyph,

On Wed, Oct 30, 2013 at 1:22 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> The new logging branch (destined for review Real Soon Now) is a bit more
> rigorous about sensible behavior with respect to encoding, so we can
> tighten up this behavior and make it work in more cases without breaking
> compatibility.  What you're doing here basically makes sense though.
>

Okay, great :-) I specialcased Windows so that the test would use NUL
instead of /dev/null. That appears to make the win7 bot happy. I've
resubmitted it for review, we'll see what happens :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/4d21a9fd/attachment.html>

From grindizer at gmail.com  Wed Oct 30 03:39:44 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 30 Oct 2013 10:39:44 +0100
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
References: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
Message-ID: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>

Hi

I have not used it myself but this seems what you're looking for:
http://twistedmatrix.com/documents/13.0.0/api/twisted.conch.ssh.transport.SSHTransportBase.html#supportedCiphers
I guess you need to subclass SSHTransport and give it the list of ciphers
you want.

--
Nacim.








2013/10/29 Ray Cote <rgacote at appropriatesolutions.com>

> I need to limit the ciphers offered for an ssh/sftp connection.
>
> class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
>     """Main local proxy class for file transfer access.
>
>     Many methods are overriden to support file encryption and
>     encrypted file name mappings.
>     """
>
>     def __init__(self, avatar):
>         """Initialize class with avatar representing user information"""
>         SFTPServerForUnixConchUser.__init__(self, avatar)
>
> I'm unclear as to how to restrict which ciphers to use at this level.
> --Ray
>
> --
> Ray Cote, President Appropriate Solutions, Inc.
> We Build Software
> www.AppropriateSolutions.com 603.924.6079
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/4f926875/attachment.html>

From _ at lvh.io  Wed Oct 30 03:49:44 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 30 Oct 2013 10:49:44 +0100
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
References: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
Message-ID: <CAE_Hg6bPi--soXGPD064menZzjzxyx5gxOTDqGG_pPk_YX5mWg@mail.gmail.com>

Hi Ray!


This seems like a clear failure of the documentation. Please file a ticket
so that it can be alleviated at some point :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/25f3c82e/attachment-0001.html>

From kevin.horn at gmail.com  Wed Oct 30 09:36:32 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Oct 2013 10:36:32 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
Message-ID: <CA+U=zK3eNiYv1Ut5rPqwWswaCB26ojKORQuDF=XLio6++orQ8Q@mail.gmail.com>

On Tue, Oct 29, 2013 at 5:34 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> It's also worth noting that there are a fair number of people (at least I
> know some) who use their old XP licenses for testing Windows software in
> VMs, especially if they're usually working in Linux or Mac OS X.
>
>
> Do you, yourself do this?
>
> Anywhere possible it would be nice to identify real, actual users rather
> than hypothetical proto-users :-).
>
> -glyph
>
>
Well, I haven't in a year or two, because I haven't needed to test anything
on Windows in a while (mostly writing web stuff these days).

But I thought it was worth pointing out.

Perhaps of more interest (or perhaps not) is that I myself was running
WinXP until about a year ago, and only really upgraded because I had some
hardware fail and it's...unpleasant...to install WinXP on modern
processors, since the XP installer doesn't seem to know what to do with
multi-core processors (or at least the processor I was using).

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/d51c39ae/attachment.html>

From kevin.horn at gmail.com  Wed Oct 30 09:42:54 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Oct 2013 10:42:54 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
 <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>
Message-ID: <CA+U=zK2zpiuXRPp=M6WiM-=yALztCdBy54qtUzO4a+hY2MObOw@mail.gmail.com>

On Wed, Oct 30, 2013 at 3:13 AM, Orestis Markou <orestis at orestis.gr> wrote:

>
> On 30 ??? 2013, at 12:34 ?.?., Glyph <glyph at twistedmatrix.com> wrote:
>
>
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> It's also worth noting that there are a fair number of people (at least I
> know some) who use their old XP licenses for testing Windows software in
> VMs, especially if they're usually working in Linux or Mac OS X.
>
>
> Do you, yourself do this?
>
>
> I used to do that, but nowadays use the VMs Microsoft provides for testing
> webpages under IE [1] and multiple windows environments. Just download your
> favorite flavor and run. I'm not sure about limitations they might have,
> but I was able to install other software just fine.
>
> [1]: http://www.modern.ie/en-us/virtualization-tools
>
>
It's worth noting that MS still provides XP images on this site, though I
suppose that may (probably will) change when XP extended support ends.
 With luck, maybe that means I can finally stop caring about IE6 entirely.
 I'm probably not that lucky though...

In any case I think Twisted should keep support for XP until extended
support ends, or at least until we know what the user base looks like
_after_ extended support ends.  I'm not too familiar with the overhead of
doing so, however, so it's not that informed of an opinion, I'm afraid.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/6a726257/attachment.html>

From rgacote at appropriatesolutions.com  Wed Oct 30 09:56:42 2013
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 30 Oct 2013 11:56:42 -0400 (EDT)
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
Message-ID: <11181164.3411.1383148600504.JavaMail.rgacote@raymac.appropriatesolutions.com>

Thanks Nacim: 

I had found the supported ciphers. 
However, I'm unclear as to how to present a subclassed SSHTransport to the SFTPServer. 

(And, once I understand how I will issue a documentation bug with details...) 
--Ray 

----- Original Message -----

> From: "Flint" <grindizer at gmail.com>
> To: "Ray Cote" <rgacote at appropriatesolutions.com>, "Twisted general
> discussion" <twisted-python at twistedmatrix.com>
> Sent: Wednesday, October 30, 2013 5:39:44 AM
> Subject: Re: [Twisted-Python] Limiting cipher options for SSH/SFTP

> Hi

> I have not used it myself but this seems what you're looking for:
> http://twistedmatrix.com/documents/13.0.0/api/twisted.conch.ssh.transport.SSHTransportBase.html#supportedCiphers

> I guess you need to subclass SSHTransport and give it the list of
> ciphers you want.

> --

> Nacim.

> 2013/10/29 Ray Cote < rgacote at appropriatesolutions.com >

> > I need to limit the ciphers offered for an ssh/sftp connection.
> 

> > class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
> 
> > """Main local proxy class for file transfer access.
> 

> > Many methods are overriden to support file encryption and
> 
> > encrypted file name mappings.
> 
> > """
> 

> > def __init__(self, avatar):
> 
> > """Initialize class with avatar representing user information"""
> 
> > SFTPServerForUnixConchUser.__init__(self, avatar)
> 

> > I'm unclear as to how to restrict which ciphers to use at this
> > level.
> 
> > --Ray
> 

> > --
> 
> > Ray Cote, President Appropriate Solutions, Inc.
> 
> > We Build Software
> 
> > www.AppropriateSolutions.com 603.924.6079
> 

> > _______________________________________________
> 
> > Twisted-Python mailing list
> 
> > Twisted-Python at twistedmatrix.com
> 
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-- 

Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20131030/8bb91376/attachment.html>

From tobias.oberstein at tavendo.de  Wed Oct 30 17:28:38 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 30 Oct 2013 16:28:38 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
Message-ID: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>

Hi,

I have done some testing of scaling Twisted Web on multicore and wanted to share:

https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket

For those that are running short in time or want to have a teaser first, here are the results, including comparison with Nginx:

https://github.com/oberstet/scratchbox/raw/master/python/twisted/sharedsocket/results.pdf

Personally, I think the results are quite encouraging. I'd love to hear any feedback and comments!

Cheers,
Tobias


From itamar at itamarst.org  Thu Oct 31 05:23:46 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 31 Oct 2013 07:23:46 -0400
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <52723DC2.1050908@itamarst.org>

On 10/30/2013 07:28 PM, Tobias Oberstein wrote:
> Hi,
>
> I have done some testing of scaling Twisted Web on multicore and wanted to share:
>
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket
>
This was PyPy, yes?


From tobias.oberstein at tavendo.de  Thu Oct 31 05:59:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 31 Oct 2013 04:59:40 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <52723DC2.1050908@itamarst.org>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
 <52723DC2.1050908@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D44469E702A9@EXVMBX020-12.exch020.serverdata.net>

> > I have done some testing of scaling Twisted Web on multicore and wanted to
> share:
> >
> >
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsoc
> ket
> >
> This was PyPy, yes?

Yes. All testing details are in the README.md ..


From therve at twistedmatrix.com  Thu Oct 31 09:04:12 2013
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Thu, 31 Oct 2013 16:04:12 +0100
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>

On Thu, Oct 31, 2013 at 12:28 AM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> I have done some testing of scaling Twisted Web on multicore and wanted to share:
>
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket
>
> For those that are running short in time or want to have a teaser first, here are the results, including comparison with Nginx:
>
> https://github.com/oberstet/scratchbox/raw/master/python/twisted/sharedsocket/results.pdf
>
> Personally, I think the results are quite encouraging. I'd love to hear any feedback and comments!

Looks nice. It's something that has been around in poor form for a
long time in several places (I'm thinking about
http://twistedmatrix.com/trac/browser/sandbox/exarkun/copyover/ which
inspired http://twistedmatrix.com/trac/browser/sandbox/therve/prefork/).
It would be good to have some documented examples. It would be even
better to have a proper Twisted API for that.

Note that for testing static files, sendfile may be an interesting
boost: https://tm.tl/585

Also, on BSDs (not sure about OS X) and recent Linux, you can use
SO_REUSEPORT which would make for an even simpler code.

-- 
Thomas


From tobias.oberstein at tavendo.de  Thu Oct 31 17:16:54 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 31 Oct 2013 16:16:54 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
 <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469F478DC@EXVMBX020-12.exch020.serverdata.net>

> Looks nice. It's something that has been around in poor form for a long time in
> several places (I'm thinking about
> http://twistedmatrix.com/trac/browser/sandbox/exarkun/copyover/ which
> inspired http://twistedmatrix.com/trac/browser/sandbox/therve/prefork/).

Wow. 10 years ago.;) I already had given credit in the README.md to Jean-Paul, but referring to a relatively recent answer by him on Stackoverflow. I didn't knew it was around so long, and also not aware of your tests.

> It would be good to have some documented examples. It would be even better
> to have a proper Twisted API for that.
> 
> Note that for testing static files, sendfile may be an interesting
> boost: https://tm.tl/585

The thing is: sendfile() doesn't support TLS. As far as I can see.

Further: the tests that are getting "close" (up to 50%-70%) to Nginx performance are using a "Fixed Resource" .. that is merely a Resource returning a string. 

When I take static.File, the performance gap widens up considerable (factor 4-5 vs Nginx). Which brought me to the following idea .. not sure if that would work:

Why not completely cache a Twisted Web HTTP _response_ (including headers and all) upon the first request to that resource _in RAM_?

If the underlying is a file, maybe use FS notify to invalidate the cache entry.

That would still allow doing TLS and push octets from RAM.

A static.CachingFile resource. Or a general CachingWrapper factory, wrapping any resource hierarchy.

Of course that breaks for real dynamic sites .. but it is useful: e.g. we use FrozenFlask to freeze Flask and deploy to S3, and normal Flask for easy and standard development. I can still use all the routing goodies of Flask and have a set of statics in the end.

> 
> Also, on BSDs (not sure about OS X) and recent Linux, you can use
> SO_REUSEPORT which would make for an even simpler code.

This is very interesting. Thanks for pointing me there .. didn't knew that.

It is useful and I will try, since as

https://lwn.net/Articles/542629/

notes:

"when multiple threads are waiting in the accept() call, wake-ups are not fair, so that, under high load, incoming connections may be distributed across threads in a very unbalanced fashion."

I have seen this behavior also. Accept from multiple processes is skewed.

I am fine with support for FreeBSD and Linux only (for now).

So: I will further explore:

1) SO_REUSEPORT
2) CachingWrapper

Thanks for feedback and hints!
/Tobias

> 
> --
> Thomas
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From dstainton415 at gmail.com  Tue Oct  1 01:30:23 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 00:30:23 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
Message-ID: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>

Hi,

I'm trying to implement an IWriteDescriptor using raw sockets.
So far this is what I wrote... but it doesn't work:
https://github.com/david415/hushTCP/blob/master/hush_writer.py

Am I doing something obviously wrong here?

I certainly am able to use raw socket + scapy correctly without Twisted.


Cheers!

David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131001/0b8a5fd0/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Oct  1 01:54:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 01 Oct 2013 08:54:48 +0100
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
Message-ID: <524A7FC8.9050008@imperial.ac.uk>

On 10/01/2013 08:30 AM, David Stainton wrote:
>
> Hi,
>
> I'm trying to implement an IWriteDescriptor using raw sockets.
> So far this is what I wrote... but it doesn't work:
> https://github.com/david415/hushTCP/blob/master/hush_writer.py
>
> Am I doing something obviously wrong here?

I don't see you trying to add the raw socket to the reactor anywhere; 
typically you'll want to do at least reactor.addWriter(hush), but for a 
proper implementation there's more - see the IReactorFDSet docs.

You may want to look at the udp code in Twisted to see how this is done 
under the hood (although TBH it can be hard to follow!)




From dstainton415 at gmail.com  Tue Oct  1 02:05:47 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 01:05:47 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <524A7FC8.9050008@imperial.ac.uk>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
Message-ID: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>

I just now realized that my fileno() method was incorrect.
It now returns the descriptor instead of the python socket:
return self.socket.fileno()

I add the socket to the reactor in the constructor like this:
reactor.addWriter(self)
BTW is that OK? Or is it better to add it to the reactor outside of the
constructor?


On Tue, Oct 1, 2013 at 12:54 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 10/01/2013 08:30 AM, David Stainton wrote:
>
>>
>> Hi,
>>
>> I'm trying to implement an IWriteDescriptor using raw sockets.
>> So far this is what I wrote... but it doesn't work:
>> https://github.com/david415/**hushTCP/blob/master/hush_**writer.py<https://github.com/david415/hushTCP/blob/master/hush_writer.py>
>>
>> Am I doing something obviously wrong here?
>>
>
> I don't see you trying to add the raw socket to the reactor anywhere;
> typically you'll want to do at least reactor.addWriter(hush), but for a
> proper implementation there's more - see the IReactorFDSet docs.
>
> You may want to look at the udp code in Twisted to see how this is done
> under the hood (although TBH it can be hard to follow!)
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131001/e9db6ed4/attachment-0002.html>

From _ at lvh.io  Tue Oct  1 02:13:28 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 1 Oct 2013 10:13:28 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
Message-ID: <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>

On Tue, Oct 1, 2013 at 12:59 AM, Glyph <glyph at twistedmatrix.com> wrote:


> Most of the code I can think of that wants to use that really wants the *
> transport* rather than the "protocol",
>

Yes, but having the protocol would also immediately give you access to the
transport, and, from what I understand in most cases of AMP, also
everything else :)


> but nothing within AMP itself actually uses those arguments; in fact,
> searching the usual suspects (epsilon, vertex) I can't even find any
> Arguments that use the 'proto' argument for anything useful.
>

I suppose it's too late to get "proto" to actually mean "proto" and not
"boxSender"? It would definitely be a backwards-incompatible change, and I
do actually have some code that somehow relied on it being the boxSender
(actually, I think I saved that code in txampext, mostly, except I renamed
that thing "proto").


> If I recall, I believe the idea behind it was to allow an AMP responder
> within Vertex to return the peer's IP address back to the peer, from within
> an authenticated AMP route that (because it was a route) wasn't necessarily
> connected directly to the transport (and therefore couldn't just do
> self.transport.getPeer()).  Ironically I don't think it'll actually work
> for that now :-).
>
> When we pull the authentication logic in from <
> http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>,
> you might write a responder that's interested in authentication information
> that lives in some other relation to the protocol.
>

I wrote very similar deep-in-AMP auth logic once, and did look at that code
(but ended up not using it because I use TLS, so I don't need hand-rolled
challenge response or OTP systems).

When you say "other relation to the protocol", does that mean "it can be
the protocol because the protocol will have some kind of reference to it"?


> So in order to fix fromBox/toBox, we need to do a fix that firms up that
> contract and perhaps exposes more than a Protocol object.  The
> *recommended* API should be more or less like what ExposingArgument is
> doing - specify an Argument that asks for a particular attribute of the
> transport or the protocol or the authentication context or whatever, the
> implementation details may involve other lower-level public APIs.
>

That still sounds like it can be done by making "proto" actually the proto
;-) So, basically, the question is if "proto" being the locator is a bug
that I can fix, or an interface that I can't.


> My contributions to AMP have been more of the defect-findy kind, but I
> could certainly turn them more into the code-contributy kind. I imagine I'm
> not the first person to want tests for command classes (
> https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or
> a nested AMP box (
> https://github.com/lvh/txampext/blob/master/txampext/nested.py).
>
>
> That would be cool.  And, you know, that auth thing I said :-).
>

If I can change "proto" to mean "actually the protocol not something else"
then that seems plenty easy to add, and it would definitely be cool if
people don't have to mess with this nonsense themselves for something as
ostensibly simple as having access to the protocol :-)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131001/f1ae8a62/attachment-0002.html>

From p.mayers at imperial.ac.uk  Tue Oct  1 05:05:07 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 01 Oct 2013 12:05:07 +0100
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
 <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
Message-ID: <524AAC63.8090900@imperial.ac.uk>

On 01/10/13 09:05, David Stainton wrote:
>
> I just now realized that my fileno() method was incorrect.
> It now returns the descriptor instead of the python socket:
> return self.socket.fileno()
>
> I add the socket to the reactor in the constructor like this:
> reactor.addWriter(self)

Oops sorry didn't see that.

> BTW is that OK? Or is it better to add it to the reactor outside of the
> constructor?

I guess... it's not something most people do.



From marco.giusti at gmail.com  Tue Oct  1 05:19:29 2013
From: marco.giusti at gmail.com (Marco Giusti)
Date: Tue, 1 Oct 2013 13:19:29 +0200
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <524A7FC8.9050008@imperial.ac.uk>
 <CAFN1edpgbFdBzTALMep9gRxg=eiaZn_QdQ3pWjvH26RufnwDwQ@mail.gmail.com>
Message-ID: <20131001111929.GA24362@murdoc>

On Tue, Oct 01, 2013 at 01:05:47AM -0700, David Stainton wrote:
> I add the socket to the reactor in the constructor like this:
> reactor.addWriter(self)
> BTW is that OK? Or is it better to add it to the reactor outside of the
> constructor?

twisted.internet.stdio.StandardIO do that so it is not so bad.



From exarkun at twistedmatrix.com  Tue Oct  1 06:38:33 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 01 Oct 2013 12:38:33 -0000
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
Message-ID: <20131001123833.26068.579635392.divmod.xquotient.2518@top>

On 07:30 am, dstainton415 at gmail.com wrote:
>Hi,
>
>I'm trying to implement an IWriteDescriptor using raw sockets.
>So far this is what I wrote... but it doesn't work:
>https://github.com/david415/hushTCP/blob/master/hush_writer.py
>
>Am I doing something obviously wrong here?
>
>I certainly am able to use raw socket + scapy correctly without 
>Twisted.

Please describe the problem in more detail than "it doesn't work". >:) 
Your hush_writer.py is a good <http://sscce.org/> but it's still 
important to know how its behavior differs from your expectations.

As far as I can tell it does work - although there's one mistake that 
makes it a bit more inefficient than strictly necessary:

     def doWrite(self):
         if len(self.packets) > 0:
             self.socket.sendto(self.packets.pop(0), self.address)
         else:
             return

When you're out of packets you should remove the writer from the 
reactor.  This version of the code will perpetually dispatch writeable 
notification (in the form of a doWrite call) to your object as fast as 
possible.

Once you fix this, don't forget to re-add the writer as soon as 
len(self.packets) rises above 0 again.

Jean-Paul



From dstainton415 at gmail.com  Tue Oct  1 07:06:40 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 06:06:40 -0700
Subject: [Twisted-Python] raw socket IWriteDescriptor
In-Reply-To: <20131001123833.26068.579635392.divmod.xquotient.2518@top>
References: <CAFN1edqmHoCP9cUB+bpu+Sr02SgECTq4fPtKYKXOwUc5AF8r2A@mail.gmail.com>
 <20131001123833.26068.579635392.divmod.xquotient.2518@top>
Message-ID: <CAFN1edq4geiyeJ8jZy37zH8JdOg6zAzO=Vb=ZrK=Xod1cmqAag@mail.gmail.com>

Oh I was having trouble because my fileno() method was not returning the
correct descriptor. But I fixed it...

Thanks for the excellent suggestion for improving performance!
I've implemented that change. It works great!



On Tue, Oct 1, 2013 at 5:38 AM, <exarkun at twistedmatrix.com> wrote:

> On 07:30 am, dstainton415 at gmail.com wrote:
>
>> Hi,
>>
>> I'm trying to implement an IWriteDescriptor using raw sockets.
>> So far this is what I wrote... but it doesn't work:
>> https://github.com/david415/**hushTCP/blob/master/hush_**writer.py<https://github.com/david415/hushTCP/blob/master/hush_writer.py>
>>
>> Am I doing something obviously wrong here?
>>
>> I certainly am able to use raw socket + scapy correctly without Twisted.
>>
>
> Please describe the problem in more detail than "it doesn't work". >:)
> Your hush_writer.py is a good <http://sscce.org/> but it's still
> important to know how its behavior differs from your expectations.
>
> As far as I can tell it does work - although there's one mistake that
> makes it a bit more inefficient than strictly necessary:
>
>     def doWrite(self):
>         if len(self.packets) > 0:
>             self.socket.sendto(self.**packets.pop(0), self.address)
>         else:
>             return
>
> When you're out of packets you should remove the writer from the reactor.
>  This version of the code will perpetually dispatch writeable notification
> (in the form of a doWrite call) to your object as fast as possible.
>
> Once you fix this, don't forget to re-add the writer as soon as
> len(self.packets) rises above 0 again.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131001/8d34e670/attachment-0002.html>

From donald at stufft.io  Tue Oct  1 19:21:38 2013
From: donald at stufft.io (Donald Stufft)
Date: Tue, 1 Oct 2013 21:21:38 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail" while
	another works
Message-ID: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>

I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).

I don't understand *why* though, why does the connectionReady dance make it work?

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131001/f51cc196/attachment.sig>

From dstainton415 at gmail.com  Wed Oct  2 00:14:26 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Tue, 1 Oct 2013 23:14:26 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
Message-ID: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>

Hi,

I am wondering how I should combine various twisted interfaces
in a way that makes sense. It probably shows here... that I'm new to
twisted.

The Linux iptables can log packets to the netfilter_log which can give
access to user space.
I wrote a simple twisted Reader (IReadDescriptor implementation) that is
working functional code...
https://gist.github.com/david415/6789612

But since these are packets it returns... should I implement a "read only
Protocol"?
The protocol's dataReceive() method could be called from the NFLogReader's
doRead() method.
Does this mean that NFLogReader would be responsible for calling
buildProtocol to construct the NFLogProtocol?
In the normal Twisted examples the buildProtocol seems to be called from
the react loop..
Should I pass the protocol factory and the reader to the service?

If I want to drop privileges right after retrieving the filedescriptor for
netfilter_log, shall I use a Twisted Service/Application to drop the root
privs to a non-superuser?
Should the privileges be dropped by the privilegedStartService() method?
The manual says that method is for preparing to drop services...

What I want out of all of this is the most high performance and general
solution to utilizing netfilter_log in twisted...


David
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131001/f6c5e33d/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Oct  2 01:26:20 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 08:26:20 +0100
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
Message-ID: <524BCA9C.7030601@imperial.ac.uk>

On 10/02/2013 07:14 AM, David Stainton wrote:
> Hi,
>
> I am wondering how I should combine various twisted interfaces
> in a way that makes sense. It probably shows here... that I'm new to
> twisted.
>
> The Linux iptables can log packets to the netfilter_log which can give
> access to user space.
> I wrote a simple twisted Reader (IReadDescriptor implementation) that is
> working functional code...
> https://gist.github.com/david415/6789612
>
> But since these are packets it returns... should I implement a "read
> only Protocol"?

Well, if your transport is not writable, just don't implement that - 
Exceptions will be raised if you mistakenly try to write, so nothing bad 
will happen.

> The protocol's dataReceive() method could be called from the
> NFLogReader's doRead() method.

Since they're packets it should really be a DatagramProtocol and call 
datagramReceived.

> Does this mean that NFLogReader would be responsible for calling
> buildProtocol to construct the NFLogProtocol?

Typically a factory is responsible for calling buildProtocol, but in 
most datagram uses, there is only one protocol instance per port, so you 
just instantiate it. See e.g.

http://twistedmatrix.com/documents/current/core/howto/udp.html

> In the normal Twisted examples the buildProtocol seems to be called from
> the react loop..
> Should I pass the protocol factory and the reader to the service?

Sorry I don't know what this means.

>
> If I want to drop privileges right after retrieving the filedescriptor
> for netfilter_log, shall I use a Twisted Service/Application to drop the
> root privs to a non-superuser?

That would be the "Twisted" way of doing it, yes.

> Should the privileges be dropped by the privilegedStartService() method?
> The manual says that method is for preparing to drop services...
>
> What I want out of all of this is the most high performance and general
> solution to utilizing netfilter_log in twisted...

Couple of general points:

The nflog_cffi code is... hard to read. But it's not obvious to me that 
it sets the FD to nonblocking anywhere, or that it's (frankly weird) 
generator construct will actually yield the "nonblock" marker object at 
the right times. You might want to test this.

On a different note, a colleague wrote some code to process the IPQUEUE 
target of iptables a while back. This code did something similar to your 
example above, but it didn't bother integrating with the 
protocol/factory machinery, and you could consider whether it makes 
sense to do so - unlike a TCP or UDP port, you're unlikely to ever have 
 >1 nflog "connection" per-process, so it's not obvious that using the 
full generality of the factory/protocol machinery is appropriate.

However if you do that, I would just copy what Twisted does for UDP; 
don't model it on TCP.



From m-lists at the-moon.net  Wed Oct  2 01:32:10 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Wed, 2 Oct 2013 08:32:10 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
 <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
Message-ID: <CABefbUo-O1uXYRmDwBAfa_GTeoJGn0WOvDdJ-ZKMo4FcHtMNGg@mail.gmail.com>

On 30 September 2013 19:51, Hynek Schlawack <hs at ox.cx> wrote:
> Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:
> I have that on my todo-list since the beginning of time but never got around
> to it.
> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that
> is tracking this?
> Yes, I believe it’s https://bugs.launchpad.net/nevow/+bug/1091055

I started looking at this last week, but after discussing it in
#divmod, Tom pointed out that pydoctor (trunk) now uses
twisted.web.template instead of Nevow, so it would be a better use of
time to help mwh release a new version of Pydoctor on pypi.

That doesn't help people who actually want to use Nevow, but it should
make it a little simpler to set up a Twisted Development environment.

-RichardW.



From dstainton415 at gmail.com  Wed Oct  2 02:25:26 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Wed, 2 Oct 2013 01:25:26 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <524BCA9C.7030601@imperial.ac.uk>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
Message-ID: <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>

In examples of Twisted UDP clients they all do this:

reactor.listenUDP(3000, MyProtocol())

What would I do instead?
reactor.addReader makes sense to me since what I have is a file descriptor,
and the reactor loop and use select or epoll find out when there is data to
read...
and call our doRead() method of the Reader.

I don't know about implementing this as a Protocol because I do not have any
equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
And I'm not sure how a Transport is related to my Reader... but it seems to
me
that there is some abstraction which sets callbacks for io and also calls
buildProtocol...

Would a NFLogProtocol and factory like this be usable?
Sorta like this?
https://gist.github.com/david415/6790543

If I am going to be using a Twisted Service to drop privileges after
gaining access to the fd...
How would I do this? Would I have startService() instantiate a Protocol
instance?

I don't know about the nflog file descriptor...
but the nflog generator interface is non-blocking if used like this:

    def doRead(self):
        pkt = self.nflog.next()
        while True:
            self.handlePacket(pkt)
            pkt = self.nflog.send(True)
            if pkt is NFWouldBlock: break

My nflog reader seems to work great.


On Wed, Oct 2, 2013 at 12:26 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:

> On 10/02/2013 07:14 AM, David Stainton wrote:
>
>> Hi,
>>
>> I am wondering how I should combine various twisted interfaces
>> in a way that makes sense. It probably shows here... that I'm new to
>> twisted.
>>
>> The Linux iptables can log packets to the netfilter_log which can give
>> access to user space.
>> I wrote a simple twisted Reader (IReadDescriptor implementation) that is
>> working functional code...
>> https://gist.github.com/**david415/6789612<https://gist.github.com/david415/6789612>
>>
>> But since these are packets it returns... should I implement a "read
>> only Protocol"?
>>
>
> Well, if your transport is not writable, just don't implement that -
> Exceptions will be raised if you mistakenly try to write, so nothing bad
> will happen.
>
>
>  The protocol's dataReceive() method could be called from the
>> NFLogReader's doRead() method.
>>
>
> Since they're packets it should really be a DatagramProtocol and call
> datagramReceived.
>
>
>  Does this mean that NFLogReader would be responsible for calling
>> buildProtocol to construct the NFLogProtocol?
>>
>
> Typically a factory is responsible for calling buildProtocol, but in most
> datagram uses, there is only one protocol instance per port, so you just
> instantiate it. See e.g.
>
> http://twistedmatrix.com/**documents/current/core/howto/**udp.html<http://twistedmatrix.com/documents/current/core/howto/udp.html>
>
>
>  In the normal Twisted examples the buildProtocol seems to be called from
>> the react loop..
>> Should I pass the protocol factory and the reader to the service?
>>
>
> Sorry I don't know what this means.
>
>
>
>> If I want to drop privileges right after retrieving the filedescriptor
>> for netfilter_log, shall I use a Twisted Service/Application to drop the
>> root privs to a non-superuser?
>>
>
> That would be the "Twisted" way of doing it, yes.
>
>
>  Should the privileges be dropped by the privilegedStartService() method?
>> The manual says that method is for preparing to drop services...
>>
>> What I want out of all of this is the most high performance and general
>> solution to utilizing netfilter_log in twisted...
>>
>
> Couple of general points:
>
> The nflog_cffi code is... hard to read. But it's not obvious to me that it
> sets the FD to nonblocking anywhere, or that it's (frankly weird) generator
> construct will actually yield the "nonblock" marker object at the right
> times. You might want to test this.
>
> On a different note, a colleague wrote some code to process the IPQUEUE
> target of iptables a while back. This code did something similar to your
> example above, but it didn't bother integrating with the protocol/factory
> machinery, and you could consider whether it makes sense to do so - unlike
> a TCP or UDP port, you're unlikely to ever have >1 nflog "connection"
> per-process, so it's not obvious that using the full generality of the
> factory/protocol machinery is appropriate.
>
> However if you do that, I would just copy what Twisted does for UDP; don't
> model it on TCP.
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131002/d93e31d8/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Oct  2 04:14:04 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 11:14:04 +0100
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
Message-ID: <524BF1EC.4070809@imperial.ac.uk>

On 02/10/13 09:25, David Stainton wrote:
>
> In examples of Twisted UDP clients they all do this:
>
> reactor.listenUDP(3000,MyProtocol())
>
> What would I do instead?
> reactor.addReader makes sense to me since what I have is a file descriptor,
> and the reactor loop and use select or epoll find out when there is data
> to read...
> and call our doRead() method of the Reader.
>
> I don't know about implementing this as a Protocol because I do not have any
> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
> And I'm not sure how a Transport is related to my Reader... but it seems
> to me
> that there is some abstraction which sets callbacks for io and also
> calls buildProtocol...

Sorry, maybe I was unclear: you were asking about protocols, so I was 
merely pointing out that *if* you were to use a protocol, you should 
copy the approach DatagramProtocol and udp.Port take.

However as I noted, it *might not* make sense to do this, if there's 
only ever going to be one socket listening on this "thing", your current 
approach might be fine.

> If I am going to be using a Twisted Service to drop privileges after
> gaining access to the fd...
> How would I do this? Would I have startService() instantiate a Protocol
> instance?

As above, it depends. If you're using Protocol instances, then yes. If 
not, then no.

Services are just things which start and stop; they may or may not use 
objects implementing the transport/factory/protocol pattern.

>
> I don't know about the nflog file descriptor...
> but the nflog generator interface is non-blocking if used like this:

Ok. Weird API, but if it works...

> My nflog reader seems to work great.

If it works for you, and you're using documented Twisted interfaces, 
then there's probably no need to fiddle with it.



From exarkun at twistedmatrix.com  Wed Oct  2 07:20:54 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Oct 2013 13:20:54 -0000
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
Message-ID: <20131002132054.26068.31139453.divmod.xquotient.2526@top>

On 01:21 am, donald at stufft.io wrote:
>I have two pieces of code (see: 
>https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in 
>that it fails verifying the host key like i'd expect) and one doesn't 
>("it never tries to verify the host key and just exists immediately).
>
>I don't understand *why* though, why does the connectionReady dance 
>make it work?

Where's the second piece of code?

Jean-Paul



From donald at stufft.io  Wed Oct  2 07:31:18 2013
From: donald at stufft.io (Donald Stufft)
Date: Wed, 2 Oct 2013 09:31:18 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
	while another works
In-Reply-To: <20131002132054.26068.31139453.divmod.xquotient.2526@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
Message-ID: <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>


On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:

> On 01:21 am, donald at stufft.io wrote:
>> I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).
>> 
>> I don't understand *why* though, why does the connectionReady dance make it work?
> 
> Where's the second piece of code?
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


Both are in the gist, works.py and fails.py

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131002/39c1bcdf/attachment.sig>

From _ at lvh.io  Wed Oct  2 07:31:38 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 2 Oct 2013 15:31:38 +0200
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <20131002132054.26068.31139453.divmod.xquotient.2526@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
Message-ID: <CAE_Hg6arTKbOFDLJ6767Uugza91GpWupXZ6+X6ZX0DmqzZc5ow@mail.gmail.com>

On Wed, Oct 2, 2013 at 3:20 PM, <exarkun at twistedmatrix.com> wrote:

> Where's the second piece of code?
>

The gist has two files in it.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131002/a9becf0a/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Oct  2 08:00:51 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 02 Oct 2013 14:00:51 -0000
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
Message-ID: <20131002140051.26068.646127389.divmod.xquotient.2535@top>

On 01:31 pm, donald at stufft.io wrote:
>
>On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:
>>On 01:21 am, donald at stufft.io wrote:
>>>I have two pieces of code (see: 
>>>https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in 
>>>that it fails verifying the host key like i'd expect) and one doesn't 
>>>("it never tries to verify the host key and just exists immediately).
>>>
>>>I don't understand *why* though, why does the connectionReady dance 
>>>make it work?
>>
>>Where's the second piece of code?
>>
>>Jean-Paul
>
>
>Both are in the gist, works.py and fails.py

Oops, sorry.  The second one disappeared when I clicked the "raw" link I 
guess.

In the first version, you `react` until `connectProtocol`'s Deferred 
fires.  That's immediately upon the TCP connection setup success - 
before any appreciable SSH happens.

In the second version, you `react` indefinitely (because 
`connectionReady` never fires) giving SSH ample time to handshake.

BTW, I'm not sure what you plan to do with this connection, but if you 
haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then 
you probably want to look.

Jean-Paul



From donald at stufft.io  Wed Oct  2 08:12:14 2013
From: donald at stufft.io (Donald Stufft)
Date: Wed, 2 Oct 2013 10:12:14 -0400
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
	while another works
In-Reply-To: <20131002140051.26068.646127389.divmod.xquotient.2535@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
 <20131002140051.26068.646127389.divmod.xquotient.2535@top>
Message-ID: <FBCF8429-4DAE-42B3-ABAF-6AEB637777BF@stufft.io>


On Oct 2, 2013, at 10:00 AM, exarkun at twistedmatrix.com wrote:

> On 01:31 pm, donald at stufft.io wrote:
>> 
>> On Oct 2, 2013, at 9:20 AM, exarkun at twistedmatrix.com wrote:
>>> On 01:21 am, donald at stufft.io wrote:
>>>> I have two pieces of code (see: https://gist.github.com/dstufft/9dc9978dc0af77e82f0c) one "works" (in that it fails verifying the host key like i'd expect) and one doesn't ("it never tries to verify the host key and just exists immediately).
>>>> 
>>>> I don't understand *why* though, why does the connectionReady dance make it work?
>>> 
>>> Where's the second piece of code?
>>> 
>>> Jean-Paul
>> 
>> 
>> Both are in the gist, works.py and fails.py
> 
> Oops, sorry.  The second one disappeared when I clicked the "raw" link I guess.
> 
> In the first version, you `react` until `connectProtocol`'s Deferred fires.  That's immediately upon the TCP connection setup success - before any appreciable SSH happens.
> 
> In the second version, you `react` indefinitely (because `connectionReady` never fires) giving SSH ample time to handshake.

ah ha, So for a real workload instead of a connectionReady you'd probably addCallback a deferred that waits for the SSH to connect and does the work.

> 
> BTW, I'm not sure what you plan to do with this connection, but if you haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then you probably want to look.

I've seen the endpoints (and even have a version of this working with it). Essentially what i'm trying to do is connect to up to ~200 some SSH hosts and run a bunch of commands on them (and possibly do things like download files). I have this somewhat working with the command endpoint but the snag in that plan is I don't always have direct access to these servers so I need to "gateway" through another SSH host.

I tried to get this working with the command endpoint but I ended up very confused about how the entire thing worked (and I was never able to get the gatewaying working). After some frustration in #twisted I decided to start over and try to grok all the code (and the underlying stuff as well) before just copy/pasting stuff from the examples. Which is where I'm at now.

> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131002/6bf76054/attachment.sig>

From p.mayers at imperial.ac.uk  Wed Oct  2 08:24:48 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 02 Oct 2013 15:24:48 +0100
Subject: [Twisted-Python] Conch - Why does one piece of code "fail"
 while another works
In-Reply-To: <20131002140051.26068.646127389.divmod.xquotient.2535@top>
References: <71D7622A-B5B5-49E6-922A-C8C90D2A762E@stufft.io>
 <20131002132054.26068.31139453.divmod.xquotient.2526@top>
 <6CA7D2E9-4627-4521-91A9-FDE2ABE7F466@stufft.io>
 <20131002140051.26068.646127389.divmod.xquotient.2535@top>
Message-ID: <524C2CB0.5080708@imperial.ac.uk>

On 02/10/13 15:00, exarkun at twistedmatrix.com wrote:

> BTW, I'm not sure what you plan to do with this connection, but if you
> haven't seen `twisted.conch.endpoints` (and <https://tm.tl/6617>) then
> you probably want to look.

ZOMG I had not seen the (existing) Conch endpoints before. Amazing, and 
many thanks to whoever did this work.



From twisted-python at 2xlp.com  Wed Oct  2 09:42:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 2 Oct 2013 11:42:54 -0400
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
 <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
 <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>
Message-ID: <A7A48E8A-C7D0-4103-B13A-E5B4083BE088@2xlp.com>

been too busy to work on this, but...

1) Ok, I will avoid subprocess and stick with twisted.  Thanks!

2) I will absolutely document where things got annoying to share!


On Sep 27, 2013, at 12:35 AM, Matt Haggard wrote:

> 
> On Sep 26, 2013 8:18 PM, "Glyph" <glyph at twistedmatrix.com> wrote:
> >
> >
> > On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> >
> > Could you write up why you feel it's "annoying"?  Maybe we can improve spawnProcess so it works better for you in the future.
> 
> I'm also interested in what you feel is annoying. Please write this (it will help improve documentation too).
> 
> Also, check out http://twistedftw.org/articles.html#!/processes/getstdout
> 
> Matt
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131002/27200e11/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct  3 03:54:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 3 Oct 2013 02:54:13 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
 <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>
 <CAE_Hg6bsf8=2ZAg8As=Ju_Mf5hLXVPCqb+ksDRnq3pHTjnpAxg@mail.gmail.com>
Message-ID: <59B7D7CB-1BB5-4048-8FCE-85F55B83FC51@twistedmatrix.com>

> On Oct 1, 2013, at 1:13 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> On Tue, Oct 1, 2013 at 12:59 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>  
>> Most of the code I can think of that wants to use that really wants the transport rather than the "protocol",
> 
> Yes, but having the protocol would also immediately give you access to the transport, and, from what I understand in most cases of AMP, also everything else :)

The problem here is that you can do AMP decoding without a protocol anywhere in sight.  A CommandLocator by itself, passed appropriate boxes to the callables returned by locateResponder, is capable of speaking AMP just fine, as long as you don't care about speaking it to an actual byte stream :-).  (And ostensibly this is one way to speak AMP over transports other than BinaryBoxProtocol.)

In the case of AMP routes (something it would be very nice to integrate into the main protocol), you have multiple command locators per transport, and each one might have its own properties that would be interesting to Argument types,

This is why putting requirements on the thing-doing-the-parsing in the Argument definition makes sense; the Command could interrogate its prospective Responder class, asking each of its Argument objects if it will be able to satisfy their requirements in turn, at the time that CommandLocator.__metaclass__.__new__ gets invoked, rather than once your protocol is already trying to respond to commands.

>> but nothing within AMP itself actually uses those arguments; in fact, searching the usual suspects (epsilon, vertex) I can't even find any Arguments that use the 'proto' argument for anything useful.
> 
> I suppose it's too late to get "proto" to actually mean "proto" and not "boxSender"?

I believe it currently means "responderLocator".  _wrapWithSerialization is where the magic happens if you want to confirm.

> It would definitely be a backwards-incompatible change, and I do actually have some code that somehow relied on it being the boxSender (actually, I think I saved that code in txampext, mostly, except I renamed that thing "proto").

It's probably too late for this method, but you can always add a new one :-)

>> If I recall, I believe the idea behind it was to allow an AMP responder within Vertex to return the peer's IP address back to the peer, from within an authenticated AMP route that (because it was a route) wasn't necessarily connected directly to the transport (and therefore couldn't just do self.transport.getPeer()).  Ironically I don't think it'll actually work for that now :-).
>> 
>> When we pull the authentication logic in from <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>, you might write a responder that's interested in authentication information that lives in some other relation to the protocol.
> 
> I wrote very similar deep-in-AMP auth logic once, and did look at that code (but ended up not using it because I use TLS, so I don't need hand-rolled challenge response or OTP systems).

The hand-rolled CR/OTP crap is really not supposed to be the interesting part. Really, that should just be SASL.  The interesting part is the integration with cred.

(Augh, and we didn't know the difference between a one-time password and a one-time pad, and the wrong word is right there in the wire format... Augh augh augh)

> When you say "other relation to the protocol", does that mean "it can be the protocol because the protocol will have some kind of reference to it"?

Notice that in that authentication code, CredReceiver *sets self.boxReceiver* to the result of portal.login.  It hands off processing of the parsed AMP boxes to another IBoxReceiver.  So the thing parsing the commands - the post-authentication protocol - is what the Arguments will currently have direct access to (as that will be the CommandLocator as well) but that object will have no transport; only a boxSender.

>> So in order to fix fromBox/toBox, we need to do a fix that firms up that contract and perhaps exposes more than a Protocol object.  The *recommended* API should be more or less like what ExposingArgument is doing - specify an Argument that asks for a particular attribute of the transport or the protocol or the authentication context or whatever, the implementation details may involve other lower-level public APIs.
> 
> That still sounds like it can be done by making "proto" actually the proto ;-) So, basically, the question is if "proto" being the locator is a bug that I can fix, or an interface that I can't.

You could add a new interface where it's "fixed", but given the case I just described above, what does "fixed" mean?

>>> My contributions to AMP have been more of the defect-findy kind, but I could certainly turn them more into the code-contributy kind. I imagine I'm not the first person to want tests for command classes (https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a nested AMP box (https://github.com/lvh/txampext/blob/master/txampext/nested.py).
>> 
>> That would be cool.  And, you know, that auth thing I said :-).
> 
> If I can change "proto" to mean "actually the protocol not something else" then that seems plenty easy to add, and it would definitely be cool if people don't have to mess with this nonsense themselves for something as ostensibly simple as having access to the protocol :-)

Keep in mind that in the authentication case I mentioned, your post-auth object may well subclass AMP and therefore "actually" be a protocol; but it still won't have a transport.  What do you propose happen in that case?

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131003/cd3a5009/attachment-0002.html>

From s.danzi at hawai.it  Thu Oct  3 10:57:58 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Thu, 03 Oct 2013 18:57:58 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
Message-ID: <524DA216.70108@hawai.it>

Hi!!

I have to write a little python program to manage a serial port radio modem.
I have to send some AT commands and read resposes. This is not a problem,
twisted examples are enough.

...but I have a situation that makes things complicated:

Anytime the modem can send back to serial port a line starting with "++"...
I have to catch it and do some analysis that could take a long time.

How to solve????????????????

I have found only this manner:

  - a thread continuously read from serial port.
  - if it receive a line stanting with "++" put it in a queue (I could 
name it "unexpected-queue")
  - this thread also check for commands on another queue (commands-queue)
  - if there are something on command-queue it send command to serial 
port an put
    replies on another queue (replies-queue)
  - Another thread loop to check unexpected-queue and do something if 
there are messages.
  - main program sent commands to command-queue and read replies from 
replies-queue

Does anyone have better ideas or suggestions?



From exarkun at twistedmatrix.com  Thu Oct  3 11:30:36 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 03 Oct 2013 17:30:36 -0000
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <524DA216.70108@hawai.it>
References: <524DA216.70108@hawai.it>
Message-ID: <20131003173036.26068.740439382.divmod.xquotient.2568@top>

On 04:57 pm, s.danzi at hawai.it wrote:
>Hi!!
>
>I have to write a little python program to manage a serial port radio 
>modem.
>I have to send some AT commands and read resposes. This is not a 
>problem,
>twisted examples are enough.
>
>...but I have a situation that makes things complicated:
>
>Anytime the modem can send back to serial port a line starting with 
>"++"...
>I have to catch it and do some analysis that could take a long time.
>
>How to solve????????????????

Hi Stefano,

Please read http://sscce.org/ and post again with more information.

Thanks,
Jean-Paul



From s.danzi at hawai.it  Thu Oct  3 12:50:38 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Thu, 03 Oct 2013 20:50:38 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
Message-ID: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>

Hi...
Thanks for reply.

I know SSCCE.... But I have not code yet. I'm doing some investigation to understand if it is the right way or if twisted has a better standard flow for a similar problem.

I will try to write something....


exarkun at twistedmatrix.com ha scritto:

>On 04:57 pm, s.danzi at hawai.it wrote:
>>Hi!!
>>
>>I have to write a little python program to manage a serial port radio 
>>modem.
>>I have to send some AT commands and read resposes. This is not a 
>>problem,
>>twisted examples are enough.
>>
>>...but I have a situation that makes things complicated:
>>
>>Anytime the modem can send back to serial port a line starting with 
>>"++"...
>>I have to catch it and do some analysis that could take a long time.
>>
>>How to solve????????????????
>
>Hi Stefano,
>
>Please read http://sscce.org/ and post again with more information.
>
>Thanks,
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

From _ at lvh.io  Fri Oct  4 01:12:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 4 Oct 2013 09:12:59 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
Message-ID: <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>

Hi Stefano,


It's probably a good idea to avoid thinking in threads until they come up
as a potential solution.

Some questions:

1) What are the latency requirements? Is it okay for everything else to
halt while you do that computation? What are the latency requirements for
the computation? Is the data useless if you don't get it in the next n
seconds?
2) What kind of machine is it running on? Are multiple cores available, and
would it make sense to use them?
3) Do you require a lot of shared state with the process talking to the
modem in order to make the long computation?

The easiest thing to do is probably deferToThread, but you have to be
careful not to touch any state you're not supposed to touch. The second
easiest thing is probably Ampoule, a process pool, or maybe just regular
AMP, if you only want a regular process. Those would have the benefit that
the reading process is never doing anything hard, so latency should stay
predictable.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131004/5cb2f8c2/attachment-0002.html>

From s.danzi at hawai.it  Fri Oct  4 02:59:20 2013
From: s.danzi at hawai.it (Stefano Danzi)
Date: Fri, 04 Oct 2013 10:59:20 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
 <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
Message-ID: <524E8368.9050507@hawai.it>

Hi Laurens,
many thanks for yours considerations.

1) I don't have problems about latency but I can't halt all during the 
computation. I can defer the computation for minutes if I attach to data 
the timestamp related to when data arrives.
2) The "monster" machine that have to do all is an embedded pc based on 
1000MHz AMD Geode NX1500
3) The long computation need only the data. In extremis I could write 
data on a file or DB and compute using another program.

I bit better explanation of scenario:

The radiomodem take "unexpected data" from a network of varius sensors. 
The sensors could be reachable or not.
The only way to know when the sensor is reachable is to wait fo 
"unexpected data". If I need to send data to a specific sensor
I have to do it immediatly after it send me "unexpected data", wait also 
1 second could be sufficient to have the sensor no longer reachable.
I can't send data to sensor and after do computation because meanwhile 
could arrive data from another sensor.
Mainly it is the reason because I think to defer long computation to 
another thread..




From _ at lvh.io  Fri Oct  4 04:15:59 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 4 Oct 2013 12:15:59 +0200
Subject: [Twisted-Python] Help for Twisted + Thread + Message Queue
In-Reply-To: <524E8368.9050507@hawai.it>
References: <cla49q2919hvyi54tbo0erly.1380825859810@email.android.com>
 <CAE_Hg6bg0YEo8QsdTRzX3K=LVD2ufpbfeeNUN2mfwbqPupta9Q@mail.gmail.com>
 <524E8368.9050507@hawai.it>
Message-ID: <CAE_Hg6aMn9RHXQzh2XCZ29eGYdjJ-VoZcMAN5AgV285hMzdpgg@mail.gmail.com>

On Fri, Oct 4, 2013 at 10:59 AM, Stefano Danzi <s.danzi at hawai.it> wrote:

> Hi Laurens,
> many thanks for yours considerations.
>
> 1) I don't have problems about latency but I can't halt all during the
> computation.


Why not?


> I can defer the computation for minutes if I attach to data the timestamp
> related to when data arrives.
>

Sure, gettimeofday is a thing, that shouldn't be a problem.


> 2) The "monster" machine that have to do all is an embedded pc based on
> 1000MHz AMD Geode NX1500
>

Okay, so single core.


> 3) The long computation need only the data. In extremis I could write data
> on a file or DB and compute using another program.
>

I would imagine you do that anyway for persistence reasons with the results
:)


> I bit better explanation of scenario:
>
> The radiomodem take "unexpected data" from a network of varius sensors.
> The sensors could be reachable or not.
> The only way to know when the sensor is reachable is to wait fo
> "unexpected data". If I need to send data to a specific sensor
> I have to do it immediatly after it send me "unexpected data", wait also 1
> second could be sufficient to have the sensor no longer reachable.
>
I can't send data to sensor and after do computation because meanwhile
> could arrive data from another sensor.
>
Mainly it is the reason because I think to defer long computation to
> another thread..
>

Okay, so try with threads first, and hope that the scheduler lets your
reactor thread work often enough. If that doesn't work, do the computation
in a subprocess, and hope that nice works well enough :)

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131004/74af4f76/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sat Oct  5 08:24:42 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 5 Oct 2013 07:24:42 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression and
	more
Message-ID: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>

Hi,

AutobahnPython 0.6.3 was just released to PyPi https://pypi.python.org/pypi/autobahn with lots of new features, including _WebSocket compression_, an upcoming extension to the WebSocket protocol.

We have seen compression ratios of 2-15x with JSON payload over WebSocket, which is great, in particular for mobile and embedded devices / IoT!

AutobahnPython supports WS compression for both clients and servers, and with all knobs and options.

Besides AutobahnPython, the extension is currently implemented in Chromium (very near shipping in Chrome), WebSocket++ (client and server), pywebsocket (server only) and Jetty (server only, not yet released, partial implementation).

Complete list of new features is here:
https://github.com/tavendo/AutobahnPython/blob/master/CHANGELOG.md

/Tobias

PS: should it be frowned upon posting announcements like this, please let me know. If it's useful/ok, please let me know also - I am hesitating each time to do postings like this to the list ..

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/5d9c35e4/attachment-0002.html>

From dstainton415 at gmail.com  Sat Oct  5 11:50:25 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 10:50:25 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <524BF1EC.4070809@imperial.ac.uk>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
Message-ID: <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>

Right. I gave my class one of these: implements(interfaces.IPushProducer,
interfaces.IReadDescriptor)
Which means that I can easily write a class that implements IConsumer
to do something with the packets.

https://github.com/david415/hushVPN/blob/master/nflog_reader.py

This is basically a packet sniffer which receives packets based on iptables
rules.

After that I wrote proxy consumer/producers too; classes that implement
both IConsumer and IPushProducer;
this allows me to transform the packets before sending them to a transport.

I was inspired by this doc:
http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html

So far I really love Twisted!


On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 02/10/13 09:25, David Stainton wrote:
>
>>
>> In examples of Twisted UDP clients they all do this:
>>
>> reactor.listenUDP(3000,**MyProtocol())
>>
>> What would I do instead?
>> reactor.addReader makes sense to me since what I have is a file
>> descriptor,
>> and the reactor loop and use select or epoll find out when there is data
>> to read...
>> and call our doRead() method of the Reader.
>>
>> I don't know about implementing this as a Protocol because I do not have
>> any
>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
>> And I'm not sure how a Transport is related to my Reader... but it seems
>> to me
>> that there is some abstraction which sets callbacks for io and also
>> calls buildProtocol...
>>
>
> Sorry, maybe I was unclear: you were asking about protocols, so I was
> merely pointing out that *if* you were to use a protocol, you should copy
> the approach DatagramProtocol and udp.Port take.
>
> However as I noted, it *might not* make sense to do this, if there's only
> ever going to be one socket listening on this "thing", your current
> approach might be fine.
>
>
>  If I am going to be using a Twisted Service to drop privileges after
>> gaining access to the fd...
>> How would I do this? Would I have startService() instantiate a Protocol
>> instance?
>>
>
> As above, it depends. If you're using Protocol instances, then yes. If
> not, then no.
>
> Services are just things which start and stop; they may or may not use
> objects implementing the transport/factory/protocol pattern.
>
>
>
>> I don't know about the nflog file descriptor...
>> but the nflog generator interface is non-blocking if used like this:
>>
>
> Ok. Weird API, but if it works...
>
>
>  My nflog reader seems to work great.
>>
>
> If it works for you, and you're using documented Twisted interfaces, then
> there's probably no need to fiddle with it.
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/e93d54f4/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sat Oct  5 16:12:34 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sat, 5 Oct 2013 15:12:34 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
Message-ID: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>

> I would like to announce the first release of txThings. It is a simple library
> for Constrained Application Protocol (CoAP). CoAP is a relatively new protocol
> designed for "Internet of Things" and M2M communications.

Cool! 

> Internet of Things is currently very interesting field of development. It is
> approaching
> a phase where many opportunities for both large and small players. I think
> Twisted is
> well suited for development of IoT apps:
> - it's stable
> - it's Python based and portable
> - it has good support for UDP and TCP, which makes it ideal for proxying IoT
> protocols to HTTP
> In my opinion in the next three years, at least 20% of Twisted apps will be
> IoT related
> (educated guess, no hard data :) )

I fully agree that Python/Twisted may have a particular competitive
advantage in embedded / IoT (see below).

And if so, why not take that opportunity and actively embrace / promote
specifically IoT from the Twisted community?

Why I think Python/Twisted has an edge:

- the (more pure) Web play languages like PHP and Ruby don't fit well with
processing serial port data or doing UDP (if possible at all)
- Perl - shudder;) Python is easy to approach for beginners and sane and bla
bla bla
- C: is here to stay, and has it's place in IoT
- C++: can't see a particular competitive advantage for IoT
- same goes for (great) stuff like Haskell or Erlang

Whats your take on the stuff below?

There is .NET driven by MS. I wasn't aware that they created a .NET Micro
under _Apache 2.0_ (!):

http://en.wikipedia.org/wiki/.NET_Micro_Framework
http://www.netmf.com/

Then there is Oracle with Java ME
http://www.oracle.com/us/solutions/internetofthings/index.html

Then there is .. JavaScript. Put v8/node on your Pi. However, Node has
quite a different focus. Last time I checked e.g. the support for serial
was not in main project (I had read comments they don't _want_ to have it).

And then there is the Lua universe that has a bunch of brilliant stuff:

http://www.eluaproject.net/
http://luajit.org/
https://github.com/justincormack/ljsyscall

===

If above sounds OT for this list, in one way probably, but when looking from
the angle: competitive advantage of Python/Twisted and opportunities for
expanding the community and actively promoting Twisted, I'd say it's on
topic.

/Tobias




From _ at habnab.it  Sat Oct  5 19:18:38 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Sat, 05 Oct 2013 18:18:38 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
Message-ID: <m261tb42oh.fsf@ender.habnabit.org>

Hi!

txsocksx <https://pypi.python.org/pypi/txsocksx> 1.13.0.0 has been
released--the first stable 1.x release.

This version has full implementations of client endpoints which wrap
client endpoints and perform SOCKS 4, 4a, or 5 proxy negotiation.

Additionally, txsocksx comes with support code to allow HTTP requests to
be made over a SOCKS connection using Twisted's Agent API, and another
wrapper endpoint for performing TLS negotiation after proxy negotiation.
(The TLS wrapper endpoint will eventually land in twisted as a part of
<http://tm.tl/5642>, but are experimentally in txsocksx for now.)

Documentation is available on ReadTheDocs, including examples and an API
reference: <http://txsocksx.readthedocs.org/en/latest/>.



From glyph at twistedmatrix.com  Sat Oct  5 20:29:08 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:29:08 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>


On Oct 5, 2013, at 7:24 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:
 
> AutobahnPython 0.6.3 was just released to PyPi https://pypi.python.org/pypi/autobahn with lots of new features, including _WebSocket compression_, an upcoming extension to the WebSocket protocol.

Congratulations, Tobias!  And thanks again for providing support for Twisted in Autobahn!

>  PS: should it be frowned upon posting announcements like this, please let me know. If it's useful/ok, please let me know also - I am hesitating each time to do postings like this to the list ..

The official (at least as far as "official" goes) policy on this is that it's OK until someone complains, and right now the volume of such announcements is not high enough to bother anyone.  And it's nice to see code being released that supports Twisted well.  So keep them coming!  If there's ever an issue we can always make a separate list for announcements.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/8ed4d8df/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct  5 20:46:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:46:56 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
In-Reply-To: <m261tb42oh.fsf@ender.habnabit.org>
References: <m261tb42oh.fsf@ender.habnabit.org>
Message-ID: <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>


On Oct 5, 2013, at 6:18 PM, Aaron Gallagher <_ at habnab.it> wrote:

> Hi!
> 
> txsocksx <https://pypi.python.org/pypi/txsocksx> 1.13.0.0 has been
> released--the first stable 1.x release.

Cool!

> This version has full implementations of client endpoints which wrap
> client endpoints and perform SOCKS 4, 4a, or 5 proxy negotiation.
> 
> Additionally, txsocksx comes with support code to allow HTTP requests to
> be made over a SOCKS connection using Twisted's Agent API, and another
> wrapper endpoint for performing TLS negotiation after proxy negotiation.
> (The TLS wrapper endpoint will eventually land in twisted as a part of
> <http://tm.tl/5642>, but are experimentally in txsocksx for now.)

Always great to get some real-world usage while these things make their way through code review :-).

> Documentation is available on ReadTheDocs, including examples and an API
> reference: <http://txsocksx.readthedocs.org/en/latest/>.

I'm super happy to see such widespread use of the endpoint API :-).  It looks like there's no endpoint string parser plugin, though; any chance you'll be looking into adding that in a future release?

-glyph


From _ at habnab.it  Sat Oct  5 20:55:08 2013
From: _ at habnab.it (Aaron Gallagher)
Date: Sat, 05 Oct 2013 19:55:08 -0700
Subject: [Twisted-Python] txsocksx 1.13.0.0 released (SOCKS clients for
	Twisted)
In-Reply-To: <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>
References: <m261tb42oh.fsf@ender.habnabit.org>
 <0C767EAB-4916-4FF4-9975-C2A6B533631E@twistedmatrix.com>
Message-ID: <m2vc1b3y7n.fsf@ender.habnabit.org>

Glyph <glyph at twistedmatrix.com> writes:

> I'm super happy to see such widespread use of the endpoint API :-). It
> looks like there's no endpoint string parser plugin, though; any
> chance you'll be looking into adding that in a future release?

Yes! This is definitely on my todo list, but it will be much more useful
once <tm.tl/5069> (IStreamClientEndpointStringParserWithReactor, which I
need to work on again) and <tm.tl/6758> (quoting for ${x}FromString,
which I just reviewed) land.



From glyph at twistedmatrix.com  Sat Oct  5 20:58:40 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 19:58:40 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
Message-ID: <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>

On Oct 5, 2013, at 3:12 PM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> If above sounds OT for this list, in one way probably, but when looking from
> the angle: competitive advantage of Python/Twisted and opportunities for
> expanding the community and actively promoting Twisted, I'd say it's on
> topic.

While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just say it on this list ;-).  The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/a520dc55/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct  5 21:46:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 5 Oct 2013 20:46:31 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
Message-ID: <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>


On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com> wrote:

> 
> Right. I gave my class one of these: implements(interfaces.IPushProducer, interfaces.IReadDescriptor)
> Which means that I can easily write a class that implements IConsumer
> to do something with the packets.
> 
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py

After a brief glance, this stuff looks pretty cool.  Very much in the spirit that these interfaces were developed in.  (And you chose the correct producer interface; the other I*Producer interfaces are pretty much just legacy junk, sorry about that :-))

One thing to note, though: you should switch to this style:

@implementer(IPushProducer, IReadDescriptor)
class NFLogPacket...

because the implements() style won't work in future versions of Python.  (Plus, the implementation of @implementer is much cleaner on older versions too.)

-glyph

> This is basically a packet sniffer which receives packets based on iptables rules.
> 
> After that I wrote proxy consumer/producers too; classes that implement both IConsumer and IPushProducer;
> this allows me to transform the packets before sending them to a transport.
> 
> I was inspired by this doc:
> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
> 
> So far I really love Twisted!
> 
> 
> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 02/10/13 09:25, David Stainton wrote:
> 
> In examples of Twisted UDP clients they all do this:
> 
> reactor.listenUDP(3000,MyProtocol())
> 
> What would I do instead?
> reactor.addReader makes sense to me since what I have is a file descriptor,
> and the reactor loop and use select or epoll find out when there is data
> to read...
> and call our doRead() method of the Reader.
> 
> I don't know about implementing this as a Protocol because I do not have any
> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
> And I'm not sure how a Transport is related to my Reader... but it seems
> to me
> that there is some abstraction which sets callbacks for io and also
> calls buildProtocol...
> 
> Sorry, maybe I was unclear: you were asking about protocols, so I was merely pointing out that *if* you were to use a protocol, you should copy the approach DatagramProtocol and udp.Port take.
> 
> However as I noted, it *might not* make sense to do this, if there's only ever going to be one socket listening on this "thing", your current approach might be fine.
> 
> 
> If I am going to be using a Twisted Service to drop privileges after
> gaining access to the fd...
> How would I do this? Would I have startService() instantiate a Protocol
> instance?
> 
> As above, it depends. If you're using Protocol instances, then yes. If not, then no.
> 
> Services are just things which start and stop; they may or may not use objects implementing the transport/factory/protocol pattern.
> 
> 
> 
> I don't know about the nflog file descriptor...
> but the nflog generator interface is non-blocking if used like this:
> 
> Ok. Weird API, but if it works...
> 
> 
> My nflog reader seems to work great.
> 
> If it works for you, and you're using documented Twisted interfaces, then there's probably no need to fiddle with it.
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/73f99371/attachment-0002.html>

From dstainton415 at gmail.com  Sat Oct  5 22:22:10 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 21:22:10 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
 <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
Message-ID: <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>

I'm glad I found the doc about producers/consumers... I should actually
finish a transport so I can see this thing churn data.
Thanks for pointing out that decorator.



On Sat, Oct 5, 2013 at 8:46 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com>
> wrote:
>
>
> Right. I gave my class one of these: implements(interfaces.IPushProducer,
> interfaces.IReadDescriptor)
> Which means that I can easily write a class that implements IConsumer
> to do something with the packets.
>
> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>
>
> After a brief glance, this stuff looks pretty cool.  Very much in the
> spirit that these interfaces were developed in.  (And you chose the correct
> producer interface; the other I*Producer interfaces are pretty much just
> legacy junk, sorry about that :-))
>
> One thing to note, though: you should switch to this style:
>
> @implementer(IPushProducer, IReadDescriptor)
> class NFLogPacket...
>
> because the implements() style won't work in future versions of Python.
>  (Plus, the implementation of @implementer is much cleaner on older
> versions too.)
>
> -glyph
>
> This is basically a packet sniffer which receives packets based on
> iptables rules.
>
> After that I wrote proxy consumer/producers too; classes that implement
> both IConsumer and IPushProducer;
> this allows me to transform the packets before sending them to a transport.
>
> I was inspired by this doc:
> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
>
> So far I really love Twisted!
>
>
> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>
>> On 02/10/13 09:25, David Stainton wrote:
>>
>>>
>>> In examples of Twisted UDP clients they all do this:
>>>
>>> reactor.listenUDP(3000,**MyProtocol())
>>>
>>> What would I do instead?
>>> reactor.addReader makes sense to me since what I have is a file
>>> descriptor,
>>> and the reactor loop and use select or epoll find out when there is data
>>> to read...
>>> and call our doRead() method of the Reader.
>>>
>>> I don't know about implementing this as a Protocol because I do not have
>>> any
>>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a ListeningPort.
>>> And I'm not sure how a Transport is related to my Reader... but it seems
>>> to me
>>> that there is some abstraction which sets callbacks for io and also
>>> calls buildProtocol...
>>>
>>
>> Sorry, maybe I was unclear: you were asking about protocols, so I was
>> merely pointing out that *if* you were to use a protocol, you should copy
>> the approach DatagramProtocol and udp.Port take.
>>
>> However as I noted, it *might not* make sense to do this, if there's only
>> ever going to be one socket listening on this "thing", your current
>> approach might be fine.
>>
>>
>>  If I am going to be using a Twisted Service to drop privileges after
>>> gaining access to the fd...
>>> How would I do this? Would I have startService() instantiate a Protocol
>>> instance?
>>>
>>
>> As above, it depends. If you're using Protocol instances, then yes. If
>> not, then no.
>>
>> Services are just things which start and stop; they may or may not use
>> objects implementing the transport/factory/protocol pattern.
>>
>>
>>
>>> I don't know about the nflog file descriptor...
>>> but the nflog generator interface is non-blocking if used like this:
>>>
>>
>> Ok. Weird API, but if it works...
>>
>>
>>  My nflog reader seems to work great.
>>>
>>
>> If it works for you, and you're using documented Twisted interfaces, then
>> there's probably no need to fiddle with it.
>>
>>
>> ______________________________**_________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/c0b8b0be/attachment-0002.html>

From dstainton415 at gmail.com  Sat Oct  5 22:53:10 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 5 Oct 2013 21:53:10 -0700
Subject: [Twisted-Python] twisted linux netfilter_log protocol
In-Reply-To: <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>
References: <CAFN1edpMv=85Z=3UpQOnRX3v50dRA2gG+=wt1_Dy8hh9GciU9A@mail.gmail.com>
 <524BCA9C.7030601@imperial.ac.uk>
 <CAFN1edoOEygbByRZ1WW+tCS=hf8wceYK-FGmL+myu=SS3A1jpA@mail.gmail.com>
 <524BF1EC.4070809@imperial.ac.uk>
 <CAFN1edrR3MY--ab_-d8WTfjYSEc7Wqx42+7y_L+tC=qhy5V_LQ@mail.gmail.com>
 <099AE36A-E658-45B7-AEC0-4569FC681417@twistedmatrix.com>
 <CAFN1edq2RTmgA1o2b+sVCqmR-vTiSSp-L6cokuOXwszo246DrA@mail.gmail.com>
Message-ID: <CAFN1edrDGwZ=_r1G4BbjO6aLK=az0nLin++yq2sXHsuOrUhuTA@mail.gmail.com>

Oh and it looks like I should be using these for my proxy classes:

http://twistedmatrix.com/documents/current/api/twisted.protocols.pcp.BasicProducerConsumerProxy.html
http://twistedmatrix.com/documents/current/api/twisted.protocols.pcp.ProducerConsumerProxy.html


On Sat, Oct 5, 2013 at 9:22 PM, David Stainton <dstainton415 at gmail.com>wrote:

>
> I'm glad I found the doc about producers/consumers... I should actually
> finish a transport so I can see this thing churn data.
> Thanks for pointing out that decorator.
>
>
>
> On Sat, Oct 5, 2013 at 8:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
>>
>> On Oct 5, 2013, at 10:50 AM, David Stainton <dstainton415 at gmail.com>
>> wrote:
>>
>>
>> Right. I gave my class one of these: implements(interfaces.IPushProducer,
>> interfaces.IReadDescriptor)
>> Which means that I can easily write a class that implements IConsumer
>> to do something with the packets.
>>
>> https://github.com/david415/hushVPN/blob/master/nflog_reader.py
>>
>>
>> After a brief glance, this stuff looks pretty cool.  Very much in the
>> spirit that these interfaces were developed in.  (And you chose the correct
>> producer interface; the other I*Producer interfaces are pretty much just
>> legacy junk, sorry about that :-))
>>
>> One thing to note, though: you should switch to this style:
>>
>> @implementer(IPushProducer, IReadDescriptor)
>> class NFLogPacket...
>>
>> because the implements() style won't work in future versions of Python.
>>  (Plus, the implementation of @implementer is much cleaner on older
>> versions too.)
>>
>> -glyph
>>
>> This is basically a packet sniffer which receives packets based on
>> iptables rules.
>>
>> After that I wrote proxy consumer/producers too; classes that implement
>> both IConsumer and IPushProducer;
>> this allows me to transform the packets before sending them to a
>> transport.
>>
>> I was inspired by this doc:
>> http://twistedmatrix.com/documents/12.2.0/core/howto/producers.html
>>
>> So far I really love Twisted!
>>
>>
>> On Wed, Oct 2, 2013 at 3:14 AM, Phil Mayers <p.mayers at imperial.ac.uk>wrote:
>>
>>> On 02/10/13 09:25, David Stainton wrote:
>>>
>>>>
>>>> In examples of Twisted UDP clients they all do this:
>>>>
>>>> reactor.listenUDP(3000,**MyProtocol())
>>>>
>>>> What would I do instead?
>>>> reactor.addReader makes sense to me since what I have is a file
>>>> descriptor,
>>>> and the reactor loop and use select or epoll find out when there is data
>>>> to read...
>>>> and call our doRead() method of the Reader.
>>>>
>>>> I don't know about implementing this as a Protocol because I do not
>>>> have any
>>>> equivalent to ReactorUDP. ReactorUDP's listenUDP returns a
>>>> ListeningPort.
>>>> And I'm not sure how a Transport is related to my Reader... but it seems
>>>> to me
>>>> that there is some abstraction which sets callbacks for io and also
>>>> calls buildProtocol...
>>>>
>>>
>>> Sorry, maybe I was unclear: you were asking about protocols, so I was
>>> merely pointing out that *if* you were to use a protocol, you should copy
>>> the approach DatagramProtocol and udp.Port take.
>>>
>>> However as I noted, it *might not* make sense to do this, if there's
>>> only ever going to be one socket listening on this "thing", your current
>>> approach might be fine.
>>>
>>>
>>>  If I am going to be using a Twisted Service to drop privileges after
>>>> gaining access to the fd...
>>>> How would I do this? Would I have startService() instantiate a Protocol
>>>> instance?
>>>>
>>>
>>> As above, it depends. If you're using Protocol instances, then yes. If
>>> not, then no.
>>>
>>> Services are just things which start and stop; they may or may not use
>>> objects implementing the transport/factory/protocol pattern.
>>>
>>>
>>>
>>>> I don't know about the nflog file descriptor...
>>>> but the nflog generator interface is non-blocking if used like this:
>>>>
>>>
>>> Ok. Weird API, but if it works...
>>>
>>>
>>>  My nflog reader seems to work great.
>>>>
>>>
>>> If it works for you, and you're using documented Twisted interfaces,
>>> then there's probably no need to fiddle with it.
>>>
>>>
>>> ______________________________**_________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>>> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131005/c11e15e7/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct  6 00:05:14 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 06 Oct 2013 06:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1381039514.23.426914758013049741@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131006/a45fa61b/attachment-0002.html>

From _ at lvh.io  Sun Oct  6 02:36:58 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 6 Oct 2013 10:36:58 +0200
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
Message-ID: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>

Congratulations! Please keep the announcements coming.

If I get a chance, I'll try to apply the recent attacks by Rizzo et al. on
TLS compression and the compressed stream over TLS equivalent by Prado et
al., since I like compression but I also send credentials over TLS :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131006/8132ab60/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sun Oct  6 04:51:32 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 03:51:32 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C21B@EXVMBX020-12.exch020.serverdata.net>

>If I get a chance, I'll try to apply the recent attacks by Rizzo et al. on TLS compression and the compressed stream over TLS equivalent by Prado et al., since I like >compression but I also send credentials over TLS :)

I guess you are referring to CRIME/BEAST, right?

I haven't had a deep look into those, but it seems they require plaintext injection.

In the context of WebSocket (using compression, and with transport over TLS), that would mean injecting WebSocket messages with chosen payload into the conversation between client and server.

What I don't get: unless at least one of the endpoints have been compromised, how are you going to inject? And if an endpoint has been compromised, one might as well just grab the unencrypted stuff right away.

What am I missing?

/Tobias



From tobias.oberstein at tavendo.de  Sun Oct  6 05:11:39 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 04:11:39 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>

>>If above sounds OT for this list, in one way probably, but when looking from
>>the angle: competitive advantage of Python/Twisted and opportunities for
>>expanding the community and actively promoting Twisted, I'd say it's on
>>topic.

>While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just >say it on this list ;-).  The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.

Ok, thank you for making this crystal clear! 

What's your take on the tactic/proposal  "actively promoting Twisted for IoT"?

E.g., as a start, we could have a dedicated page on the Twistedmatrix Web site "Twisted for Things" for intro and collecting links, articles etc

Dummy question: how would I contribute to the Trac-based Web site content?

/Tobias




From exarkun at twistedmatrix.com  Sun Oct  6 06:22:39 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Oct 2013 12:22:39 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20131006122239.26068.609867439.divmod.xquotient.2571@top>

On 5 Oct, 02:24 pm, tobias.oberstein at tavendo.de wrote:
>Hi,
>
>AutobahnPython 0.6.3 was just released to PyPi 
>https://pypi.python.org/pypi/autobahn with lots of new features, 
>including _WebSocket compression_, an upcoming extension to the 
>WebSocket protocol.

Heya Tobias,

Great news!  Thanks for sharing (and thanks for working on a great 
Twisted-based WebSocket library)!

Jean-Paul



From tobias.oberstein at tavendo.de  Sun Oct  6 08:51:47 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 07:51:47 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>

>.. , since I like compression but I also send credentials over TLS :)

IMHO, credentials should never be sent over the wire (be it encrypted or not) and never be stored in plaintext.

FWIW, Autobahn provides a challenge-response authentication scheme ("WAMP_CRA") that also allows for salted/hashed passwords (pbkdf2-based) for WebSocket/WAMP.

With TLS, and in a Post-Snowden era, how do you know your TLS server isn't impersonated and encryption broken?

Personally, I assume root CA private keys of any CA vendor are owned by the NSA anyway.

Really, TLS is broken.

We need a new scheme. For encryption session keys, Diffie-Hellman is available, and provides perfect forward secrecy naturally.

For authentication, we need a peer-based system like PGP has, not relying on centrally managed trust.

I know. Not going to happen any time soon ..

/Tobias



From exarkun at twistedmatrix.com  Sun Oct  6 15:26:29 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Oct 2013 21:26:29 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D4446790C1F1@EXVMBX020-12.exch020.serverdata.net>
 <55F90225-4061-440E-A197-1B52166221E1@twistedmatrix.com>
 <CAE_Hg6bG01zXP2TUo5ECh6eiCaRfbARwtQkSOW1qOrmMP3UxYQ@mail.gmail.com>
 <634914A010D0B943A035D226786325D4446790C226@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <20131006212629.26068.503860633.divmod.xquotient.2582@top>

On 02:51 pm, tobias.oberstein at tavendo.de wrote:
>>.. , since I like compression but I also send credentials over TLS :)
>
>IMHO, credentials should never be sent over the wire (be it encrypted 
>or not) and never be stored in plaintext.
>
>FWIW, Autobahn provides a challenge-response authentication scheme 
>("WAMP_CRA") that also allows for salted/hashed passwords 
>(pbkdf2-based) for WebSocket/WAMP.
>
>With TLS, and in a Post-Snowden era, how do you know your TLS server 
>isn't impersonated and encryption broken?
>
>Personally, I assume root CA private keys of any CA vendor are owned by 
>the NSA anyway.

There's no rule that says you have to use a "root CA" signed certificate 
for your TLS connections.

Jean-Paul
>Really, TLS is broken.
>
>We need a new scheme. For encryption session keys, Diffie-Hellman is 
>available, and provides perfect forward secrecy naturally.
>
>For authentication, we need a peer-based system like PGP has, not 
>relying on centrally managed trust.
>
>I know. Not going to happen any time soon ..
>
>/Tobias



From tobias.oberstein at tavendo.de  Sun Oct  6 17:02:13 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 6 Oct 2013 16:02:13 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
Message-ID: <CE77B895.1C455%tobias.oberstein@tavendo.de>

>> Personally, I assume root CA private keys of any CA vendor are owned by
>> the NSA anyway.
> 
> There's no rule that says you have to use a "root CA" signed certificate
> for your TLS connections.

Sure, in theory, but there are multiple practical problems when using
self-signed certs or certs signed by a CA not built into browsers. As a
starter, here are 3:

- enterprise networks might block those right away with no way for the user
to accept self-signed or import alien CA certs
- the user experience is bad: Firefox scares with dialogs and multiple steps
of overcoming those
- with WebSocket, browers will not even show a dialog! WebSocket are so
called "subresources", and browsers will never render dialogs for these

So in practice, I _have_ to use a CA that is built into all major browsers.

/Tobias

> 
> Jean-Paul
>> Really, TLS is broken.
>> 
>> We need a new scheme. For encryption session keys, Diffie-Hellman is
>> available, and provides perfect forward secrecy naturally.
>> 
>> For authentication, we need a peer-based system like PGP has, not
>> relying on centrally managed trust.
>> 
>> I know. Not going to happen any time soon ..
>> 
>> /Tobias
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From exarkun at twistedmatrix.com  Sun Oct  6 18:23:22 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 07 Oct 2013 00:23:22 -0000
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <CE77B895.1C455%tobias.oberstein@tavendo.de>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
Message-ID: <20131007002322.26068.991605302.divmod.xquotient.2584@top>

On 6 Oct, 11:02 pm, tobias.oberstein at tavendo.de wrote:
>>>Personally, I assume root CA private keys of any CA vendor are owned 
>>>by
>>>the NSA anyway.
>>
>>There's no rule that says you have to use a "root CA" signed 
>>certificate
>>for your TLS connections.
>
>Sure, in theory, but there are multiple practical problems when using
>self-signed certs or certs signed by a CA not built into browsers. As a
>starter, here are 3:
>
>- enterprise networks might block those right away with no way for the 
>user
>to accept self-signed or import alien CA certs
>- the user experience is bad: Firefox scares with dialogs and multiple 
>steps
>of overcoming those
>- with WebSocket, browers will not even show a dialog! WebSocket are so
>called "subresources", and browsers will never render dialogs for these
>
>So in practice, I _have_ to use a CA that is built into all major 
>browsers.

You're assuming a lot here.  Perhaps TLS is broken for all the uses 
you're interested in - that doesn't mean it's broken for everyone else's 
uses.

*This* is probably now sufficiently off-topic, though...

Jean-Paul
>/Tobias
>>
>>Jean-Paul
>>>Really, TLS is broken.
>>>
>>>We need a new scheme. For encryption session keys, Diffie-Hellman is
>>>available, and provides perfect forward secrecy naturally.
>>>
>>>For authentication, we need a peer-based system like PGP has, not
>>>relying on centrally managed trust.
>>>
>>>I know. Not going to happen any time soon ..
>>>
>>>/Tobias
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Mon Oct  7 00:30:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 6 Oct 2013 23:30:03 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <20131007002322.26068.991605302.divmod.xquotient.2584@top>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
Message-ID: <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>



> On Oct 6, 2013, at 5:23 PM, exarkun at twistedmatrix.com wrote:
> 
> On 6 Oct, 11:02 pm, tobias.oberstein at tavendo.de wrote:
>>>> Personally, I assume root CA private keys of any CA vendor are owned by
>>>> the NSA anyway.
>>> 
>>> There's no rule that says you have to use a "root CA" signed certificate
>>> for your TLS connections.
>> 
>> Sure, in theory, but there are multiple practical problems when using
>> self-signed certs or certs signed by a CA not built into browsers. As a
>> starter, here are 3:
>> 
>> - enterprise networks might block those right away with no way for the user
>> to accept self-signed or import alien CA certs
>> - the user experience is bad: Firefox scares with dialogs and multiple steps
>> of overcoming those
>> - with WebSocket, browers will not even show a dialog! WebSocket are so
>> called "subresources", and browsers will never render dialogs for these
>> 
>> So in practice, I _have_ to use a CA that is built into all major browsers.
> 
> You're assuming a lot here.  Perhaps TLS is broken for all the uses you're interested in - that doesn't mean it's broken for everyone else's uses.

Tobias, all of the things you've said here about browser UI, enterprise networks, and key management tooling are true; however, note that none of those nouns are "TLS".

If you want to fix these problems, two possible options are:

 1. Write some code that uses TLS (which is a wire protocol, after all, not a trust model or set of trust roots, nor a key management UI) and addresses these issues, by implementing a new trust model, protocol for exchanging trust roots, or key management UI, and selecting appropriate ciphers.
 2. Write some code that uses a brand new wire protocol with unknown, unaudited security properties, also implementing appropriate ciphers, and also implementing all of the things in point 1.

One of these options seems obviously superior to me :-).

It doesn't seem to me that re-working the wire protocol of TLS will fix problematic browser behaviors; only patches to the browsers will do that.

> *This* is probably now sufficiently off-topic, though...

Man, are there some kind of Topic Police everyone is worried about? Do I need to start taking extra precautions when I write to mailing lists? :-)

I think this is on-topic enough, since this might inform TLS work with Twisted in the future, and Vertex has been brought under the Twisted umbrella recently, https://github.com/twisted/vertex and it seeks to provide a different trust model with TLS and Twisted.

(If anyone objects, of course, feel free to say so and we can take this thread elsewhere.)

> Jean-Paul
>> /Tobias
>>> 
>>> Jean-Paul
>>>> Really, TLS is broken.
>>>> 
>>>> We need a new scheme. For encryption session keys, Diffie-Hellman is
>>>> available, and provides perfect forward secrecy naturally.
>>>> 
>>>> For authentication, we need a peer-based system like PGP has, not
>>>> relying on centrally managed trust.
>>>> 
>>>> I know. Not going to happen any time soon ..
>>>> 
>>>> /Tobias
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131006/8e52d23c/attachment-0002.html>

From tobias.oberstein at tavendo.de  Mon Oct  7 01:51:42 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 00:51:42 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket
	compression	and more
In-Reply-To: <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>

>>>So in practice, I _have_ to use a CA that is built into all major browsers.

>>You're assuming a lot here.  Perhaps TLS is broken for all the uses you're interested in - that doesn't mean it's broken for everyone else's uses.

@Jean-Paul: Granted .. good catch.

My interest is the Web/browser, and also non-browser clients working in a Web-compatible way.

>Tobias, all of the things you've said here about browser UI, enterprise networks, and key management tooling are true; however, note that none of those nouns are "TLS".

@Glyph:

I agree: "browser UI" is formally unrelated to TLS
I (mostly) agree: locked down enterprise networks are orthogonal to TLS - formally.

And the "key management" system being ortho to TLS: a very good point.

The problem is X.509, and TLS today uses only that, but it is capable of using different schemes in principle.

I did some further looking around: turns out there is TLS-PGP

http://tools.ietf.org/html/rfc6091

Does someone know whether OpenSSL supports that?

[Sidenote: if not, one more reason why a pure Python TLS implementation (then with RFC6091) would rock. The other reason being the total awesomeness of the OpenSSL codebase;) And the third: PyPy.]

> 1. Write some code that uses TLS (which is a wire protocol, after all, not a trust model or set of trust roots, nor a key management UI) and addresses these issues, by implementing a new trust model, protocol for exchanging trust roots, or key management UI, and selecting appropriate ciphers.
> 2. Write some code that uses a brand new wire protocol with unknown, unaudited security properties, also implementing appropriate ciphers, and also implementing all of the things in point 1.

>One of these options seems obviously superior to me :-).

Yeah;) 

1) => RFC6091

>>*This* is probably now sufficiently off-topic, though...

>Man, are there some kind of Topic Police everyone is worried about? Do I need to start taking extra precautions when I write to mailing lists? :-)

Got it. It's just that different communities have different social codes.
But it's good that Twisted has no "Topic Police".
I like that .. term and fact;)

>I think this is on-topic enough, since this might inform TLS work with Twisted in the future, and Vertex has been brought under the Twisted umbrella recently, https://github.com/twisted/vertex and it seeks to provide a different trust model with TLS and Twisted.

Is there any intro / architecture document? I'd like to read more .. 

/Tobias


From p.mayers at imperial.ac.uk  Mon Oct  7 02:50:00 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 09:50:00 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <525275B8.2050609@imperial.ac.uk>

On 10/07/2013 08:51 AM, Tobias Oberstein wrote:

> I did some further looking around: turns out there is TLS-PGP
>
> http://tools.ietf.org/html/rfc6091
>
> Does someone know whether OpenSSL supports that?
>

There are *lots* of TLS extensions that eliminate or obviate the need 
for the (horrible) PKIX trust model as deployed. For example, TLS PSK, 
TLS-SRP, the PGP method you've found, and others.

Right now, none are useful in a browser, but personally I have high 
hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this 
model, X.509 is essentially just a payload format for certs - the entire 
trust model is unused.

> [Sidenote: if not, one more reason why a pure Python TLS

Such as tlslite?



From p.mayers at imperial.ac.uk  Mon Oct  7 02:52:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 09:52:36 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <52527654.4000403@imperial.ac.uk>

On 10/07/2013 09:50 AM, Phil Mayers wrote:

> Right now, none are useful in a browser, but personally I have high
> hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this
> model, X.509 is essentially just a payload format for certs

Sorry, "payload format for keys".



From donald at stufft.io  Mon Oct  7 04:56:47 2013
From: donald at stufft.io (Donald Stufft)
Date: Mon, 7 Oct 2013 06:56:47 -0400
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>

DNSSEC solves none of the problems with the CA system. It just moves the problem around. 

> On Oct 7, 2013, at 4:50 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> 
> I have high hopes for raw keys, trust-anchored by DNSSEC via RFC 6698. In this model, X.509 is essentially just a payload format for certs - the entire trust model is unused.



From tobias.oberstein at tavendo.de  Mon Oct  7 05:35:14 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 04:35:14 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <525275B8.2050609@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
Message-ID: <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>

> There are *lots* of TLS extensions that eliminate or obviate the need for the
> (horrible) PKIX trust model as deployed. For example, TLS PSK, TLS-SRP, the
> PGP method you've found, and others.

Sure .. however as far as I understand the IETF has only 2 _cert_ schemes sanctioned:
x509 and OpenPGP, and of those only OpenPGP has a decentralized trust model.

> 
> Right now, none are useful in a browser, but personally I have high hopes for

Which is the main roadblocker to adoption .. right.

> raw keys, trust-anchored by DNSSEC via RFC 6698. In this model, X.509 is
> essentially just a payload format for certs - the entire trust model is unused.

DNSSEC seems to follow a centralized/hierachical trust model. Won't help. The NSA will (does?) own those.

> > [Sidenote: if not, one more reason why a pure Python TLS
> 
> Such as tlslite?

That could be a good start: it would take a community effort to scrutinize, security review and
robustify for production.

The monoculture of OpenSSL is no good IMHO.

/Tobias

> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From p.mayers at imperial.ac.uk  Mon Oct  7 07:13:46 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 14:13:46 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
Message-ID: <5252B38A.8050108@imperial.ac.uk>

On 07/10/13 11:56, Donald Stufft wrote:
> DNSSEC solves none of the problems with the CA system. It just moves
> the problem around.

Disagree.

However - there are other, better forums to have this argument in (and 
to be frank, I've no interest in having it at all) so I won't respond 
further.

I would however urge other people reading this to look into the issues 
and decide for themselves.



From p.mayers at imperial.ac.uk  Mon Oct  7 07:19:43 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 07 Oct 2013 14:19:43 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <634914A010D0B943A035D226786325D4446790C258@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <5252B4EF.6090504@imperial.ac.uk>

On 07/10/13 12:35, Tobias Oberstein wrote:

> DNSSEC seems to follow a centralized/hierachical trust model. Won't
> help. The NSA will (does?) own those.

The default trust model is to have parent sign the child. Other models 
are not only possible, they're deployed. Google "DLV" and "trust anchor".

As to whether "the NSA" has the root keys; given recent revelations I 
rule nothing out. But if this is a concern, I would urge you to 
investigate and get involved in the root key generation and rollover 
procedures - there is a rollover coming soon, and more eyes make 
subversion less likely.

> That could be a good start: it would take a community effort to
> scrutinize, security review and robustify for production.
>
> The monoculture of OpenSSL is no good IMHO.

I agree, but there are other options - gnutls, NSS - which have received 
this scrutiny, if you want to move away from OpenSSL.



From glyph at twistedmatrix.com  Mon Oct  7 11:00:33 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 7 Oct 2013 10:00:33 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>


On Oct 6, 2013, at 4:11 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

>>> If above sounds OT for this list, in one way probably, but when looking from
>>> the angle: competitive advantage of Python/Twisted and opportunities for
>>> expanding the community and actively promoting Twisted, I'd say it's on
>>> topic.
> 
>> While I appreciate showing respect for the list membership's time and trying to stay on topic - jeez, lighten up, if you have stuff to say about Twisted, please just >say it on this list ;-).  The Management will not hesitate to (gently, politely) tell you if we believe you've gone too far afield.
> 
> Ok, thank you for making this crystal clear! 
> 
> What's your take on the tactic/proposal  "actively promoting Twisted for IoT"?

Personally I don't have much of one.  I don't know a lot about that space.

> E.g., as a start, we could have a dedicated page on the Twistedmatrix Web site "Twisted for Things" for intro and collecting links, articles etc

Fun fact: the very first class in the very first thing that would eventually become Twisted was called "Thing".  ;-)

> Dummy question: how would I contribute to the Trac-based Web site content?

Just click on the "edit" button at the bottom of any wiki page.  Some of the pages (like the front page) are locked to prevent abuse, but I can give you whatever extra permissions you need if you want to work on the site.

-glyph


From tobias.oberstein at tavendo.de  Mon Oct  7 11:40:51 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 7 Oct 2013 10:40:51 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
References: <CE765B72.1C3E0%tobias.oberstein@tavendo.de>
 <8978AC49-540F-4B05-8775-D600BE8062B0@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C21C@EXVMBX020-12.exch020.serverdata.net>
 <81E2EC36-5D3E-44A1-A465-7381CBE695CB@twistedmatrix.com>
Message-ID: <634914A010D0B943A035D226786325D4446790C53D@EXVMBX020-12.exch020.serverdata.net>

> > E.g., as a start, we could have a dedicated page on the Twistedmatrix
> > Web site "Twisted for Things" for intro and collecting links, articles
> > etc
> 
> Fun fact: the very first class in the very first thing that would eventually
> become Twisted was called "Thing".  ;-)

What a prevision;)

> 
> > Dummy question: how would I contribute to the Trac-based Web site
> content?
> 
> Just click on the "edit" button at the bottom of any wiki page.  Some of the
> pages (like the front page) are locked to prevent abuse, but I can give you
> whatever extra permissions you need if you want to work on the site.

Yes please, I'd like to contribute to the site.

I have visited a dozen pages from the Index, and I have no "edit" button .. nowhere. I am logged in ("oberstet") .. I can file/edit tickets.

I would start by creating a new page, following http://twistedmatrix.com/trac/wiki/WikiNewPage, and - at this point - only add a link to the new page from the Index page.

A general question regarding using Trac as a Website system: the landing page does only links to a couple of further pages.
How are user supposed to navigate around? Always via the Index page?

You know, I haven't done a lot systematic looking around exactly for that reason .. when I look for Twisted docs/pages, I basically Google for them (sometimes restricting the search to Twistedmatrix).
The UX of the Website is .. unusual .. or I just don't get it.

/Tobias

> 
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Mon Oct  7 11:58:58 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 7 Oct 2013 10:58:58 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <5252B38A.8050108@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
Message-ID: <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>


On Oct 7, 2013, at 6:13 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 07/10/13 11:56, Donald Stufft wrote:
>> DNSSEC solves none of the problems with the CA system. It just moves
>> the problem around.
> 
> Disagree.
> 
> However - there are other, better forums to have this argument in (and to be frank, I've no interest in having it at all) so I won't respond further.
> 
> I would however urge other people reading this to look into the issues and decide for themselves.

If you have a disagreement, please say what the disagreement is (not just "disagree") and then link to resources instead of abstractly claiming people may find them themselves somehow.  You don't have to get into a big back-and-forth, but I believe DNSSEC implementation work is proceeding in Twisted so it would be good for the community to be aware of these issues.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131007/199ca085/attachment-0002.html>

From p.mayers at imperial.ac.uk  Mon Oct  7 17:10:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 08 Oct 2013 00:10:51 +0100
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
Message-ID: <52533F7B.6050306@imperial.ac.uk>

On 07/10/2013 18:58, Glyph wrote:

> If you have a disagreement, please say /what the disagreement is/ (not
> just "disagree") and then link to resources instead of abstractly
> claiming people may find them themselves somehow.  You don't have to get
> into a big back-and-forth, but I believe DNSSEC implementation work is
> proceeding in Twisted so it would be good for the community to be aware
> of these issues.

Ok. Don't say I didn't warn you. Apologies to anyone who forces 
themselves to read all this, and please note I DO NOT claim authority on 
any of this - I'm just a random guy. People should decide for themselves.

Donald wrote:

"""
DNSSEC solves none of the problems with the CA system. It just moves the 
problem around.
"""

I believe I understand why he said this, but I think it's incorrect to 
say that DNSSEC solves "none" of the problems. I think it solves many 
(though not all) of them, and that supplementary systems - which are 
desirable in and of themselves - can take us the rest of the way.

Here's my reasoning:

I think it's fair to say that the PKIX trust model is known to have some 
serious flaws. They basically stem from the existence of far, far too 
many CAs, and the lack of constraint on what a CA can issue for.

There are various proposed solutions to this problem. DNSSEC-signed TLSA 
records (DANE; RFC 6698) offer one solution to the problem - to put 
hashes of certs/keys or issuer/chain certs/keys in DNS, and sign then 
with DNSSEC. This accomplishes two things:

  1. Reduction in the number of trusted CAs. To what degree depends on 
what deployment model you use - you can put a specific key/cert into 
DNS, or one or more traditional X.509 issuers that allowed to sign for 
you. The latter in particular seems likely to be common - reduce the CAs 
that can sign for "blah.example.com" from ~1500 by putting the hashes of 
the 1/2/N "good" CA certs (most specific parent!) into the 
"blah.example.com" TLSA records.

  2. Constraint - a DNS zone-signing key can only sign records below it, 
terminating at secure child delegations (DS keys).

The obvious objection to this solution is the necessary trust in the DNS 
root / parent zones. There are, it seems, people who are not willing to 
grant this trust. I understand that - particularly in light of recent 
revelations.

However: government agencies are not the only people who might want to 
get certs in the name of a 3rd party. Crime syndicates attacking the 
latest race-to-the-bottom CA to get "e<some unicode glyph like 
x>ample.com" certs are a real issue, and DANE can handle these just fine.

There are arguments that DANE moves the trust problem from CAs to 
registrars and registries. I must admit, I don't understand the threat 
model here - it's asserted that registrars are cheap&cheerful (true) but 
they only handle public key material, and don't run the DNS; the 
registry is a more fruitful target, but validation of the public key 
material they publish for you is trivial (whereas proving that a CA 
somewhere hasn't signed a cert for your domain is not).

In short, I think it's a significant net win, and as a side benefit 
offers greatly reduced key management burden. The ability to publish and 
revoke TLSA records at significantly lower cost than X.509 cert 
issuance, and without need to interact with a 3rd party, would be 
valuable even without the above. It could in theory help decouple TLS 
from X.509 - useful if you want to move to PGP, for example.

However, some people don't agree. Moxie Marlinspike discusses the 
general issues and makes an argument against DANE - see:

http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/

...and the video of the talk here:

http://www.youtube.com/watch?v=Z7Wl2FW2TcA

He essentially suggests a trusted notary system - a working 
implementation of which you can see here:

http://convergence.io/

I agree that this approach is promising. I am not super-confident that 
it will take off - end-users literally DO NOT CARE about these issues 
until it's too late - but if someone (Chrome, Firefox) starts bundling 
notary functionality and prompting users to trust one or more of a 
(randomly shuffled) set of notaries on startup, it might... However, I'm 
not sure how likely that is - see:

https://www.imperialviolet.org/2011/09/07/convergence.html

[Note Adam Langley is "Google TLS person"]

For an alternative take on the problem, see:

http://www.certificate-transparency.org/

People interested in reading a pro-DNSSEC PoV should look here (warning 
- sequence of posts):

http://dankaminsky.com/2010/12/13/dnssec-ch1/

...and here:

http://www.slideshare.net/dakami/black-opspki-2

So - not as short as I'd like, but as short as I could make it. I hope 
that makes my position clear.

Finally a note on why I was reluctant to respond...

In my experience, "discussions" on TLS, X.509, DNS and DNSSEC can become 
very emotive, very quickly. There are people who care very, very deeply 
about the minutae of these issues because they directly impact the 
politics of privacy and symmetry of access to the internet.

To be honest, I lack the mental drive to engage in those discussions 
over the internet. Face to face might be another matter, but I have 
better things to do with my time than argue with strangers.

So - if anyone is sitting there bouncing up and down in their seat 
excited about how wrong I am - forgive me if I don't reply, I'm just not 
as excited about it. Look me up in real life sometime and we'll chat 
about it over beer!

Cheers,
Phil



From itamar at itamarst.org  Mon Oct  7 19:13:16 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 07 Oct 2013 21:13:16 -0400
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
Message-ID: <52535C2C.7080904@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: 
https://github.com/itamarst/crochet

*What's New in 0.9.0*

New features:

  * Expanded and much improved documentation, including a new section
    with design suggestions.
  * New decorator @wait_for_reactor added, a simpler alternative to
    @run_in_reactor.
  * Refactored @run_in_reactor, making it a bit more responsive.
  * Blocking operations which would otherwise never finish due to
    reactor having stopped (EventualResult.wait() or @wait_for_reactor
    decorated call) will be interrupted with a ReactorStopped exception.

Bug fixes:

  * @run_in_reactor decorated functions (or rather, their generated
    wrapper) are interrupted by Ctrl-C.
  * On POSIX platforms, a workaround is installed to ensure processes
    started by reactor.spawnProcess have their exit noticed. See Twisted
    ticket 6378 <http://tm.tl/6738> for more details about the
    underlying issue.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131007/2cdd50e6/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Oct  8 10:21:47 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 8 Oct 2013 09:21:47 -0700
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
In-Reply-To: <52535C2C.7080904@itamarst.org>
References: <52535C2C.7080904@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>

Hi Itamar,

Nifty. Wasn't aware. I add it to my toolbelt;)

/Tobias

PS: One suggestion for the docs: it could be helpful to contrast the approach crochet takes with the other option of having a Twisted Web WSGI resource for running Flask (and other WSGI stuff) so users can make an informed decision.

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Itamar Turner-Trauring
Gesendet: Dienstag, 8. Oktober 2013 03:13
An: Twisted general discussion
Betreff: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!


Crochet is an MIT-licensed library that makes it easier for blocking or threaded applications like Flask or Django to use the Twisted networking framework. Crochet provides the following features:

 *   Runs Twisted's reactor in a thread it manages.
 *   The reactor shuts down automatically when the process' main thread finishes.
 *   Hooks up Twisted's log system to the Python standard library logging framework. Unlike Twisted's built-in logging bridge, this includes support for blocking Handler instances.
 *   A blocking API to eventual results (i.e. Deferred instances). This last feature can be used separately, so Crochet is also useful for normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: https://github.com/itamarst/crochet

What's New in 0.9.0

New features:

 *   Expanded and much improved documentation, including a new section with design suggestions.
 *   New decorator @wait_for_reactor added, a simpler alternative to @run_in_reactor.
 *   Refactored @run_in_reactor, making it a bit more responsive.
 *   Blocking operations which would otherwise never finish due to reactor having stopped (EventualResult.wait() or @wait_for_reactor decorated call) will be interrupted with a ReactorStopped exception.

Bug fixes:

 *   @run_in_reactor decorated functions (or rather, their generated wrapper) are interrupted by Ctrl-C.
 *   On POSIX platforms, a workaround is installed to ensure processes started by reactor.spawnProcess have their exit noticed. See Twisted ticket 6378<http://tm.tl/6738> for more details about the underlying issue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131008/eb85243c/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Oct  8 10:28:22 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 8 Oct 2013 09:28:22 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
 and more
In-Reply-To: <52533F7B.6050306@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
 <52533F7B.6050306@imperial.ac.uk>
Message-ID: <634914A010D0B943A035D226786325D444689FFF3D@EXVMBX020-12.exch020.serverdata.net>

> Ok. Don't say I didn't warn you. Apologies to anyone who forces themselves
> to read all this, and please note I DO NOT claim authority on any of this - I'm
> just a random guy. People should decide for themselves.

Nothing to apologize .. I have learned from your post. And the pointers you give. Thanks!

> So - if anyone is sitting there bouncing up and down in their seat excited
> about how wrong I am - forgive me if I don't reply, I'm just not as excited
> about it. Look me up in real life sometime and we'll chat about it over beer!

I agree. It has a lot of facets and discussing over email is very time consuming.

Would be nice to meet you personally! Maybe at some Python conference/such thing ..

Warning: we might have a discussion about brands of beers then as well;)

_Cheers_;)

/Tobias



From glyph at twistedmatrix.com  Tue Oct  8 14:49:06 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 8 Oct 2013 13:49:06 -0700
Subject: [Twisted-Python] AutobahnPython 0.6.3 - WebSocket compression
	and more
In-Reply-To: <52533F7B.6050306@imperial.ac.uk>
References: <20131006212629.26068.503860633.divmod.xquotient.2582@top>
 <CE77B895.1C455%tobias.oberstein@tavendo.de>
 <20131007002322.26068.991605302.divmod.xquotient.2584@top>
 <353A780E-32C4-4B41-A854-659DC5CA7ACD@twistedmatrix.com>
 <634914A010D0B943A035D226786325D4446790C253@EXVMBX020-12.exch020.serverdata.net>
 <525275B8.2050609@imperial.ac.uk>
 <C1181A83-B86B-40A1-A120-A3A63D5127EE@stufft.io>
 <5252B38A.8050108@imperial.ac.uk>
 <34951AA6-44A7-4F4E-8897-46DCE850C7F0@twistedmatrix.com>
 <52533F7B.6050306@imperial.ac.uk>
Message-ID: <F279E732-FE6B-4D2E-990A-51FFD0055633@twistedmatrix.com>


On Oct 7, 2013, at 4:10 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 07/10/2013 18:58, Glyph wrote:
> 
>> If you have a disagreement, please say /what the disagreement is/ (not
>> just "disagree") and then link to resources instead of abstractly
>> claiming people may find them themselves somehow.  You don't have to get
>> into a big back-and-forth, but I believe DNSSEC implementation work is
>> proceeding in Twisted so it would be good for the community to be aware
>> of these issues.
> 
> Ok. Don't say I didn't warn you. Apologies to anyone who forces themselves to read all this, and please note I DO NOT claim authority on any of this - I'm just a random guy. People should decide for themselves.
> 
> Donald wrote:
> 
> """
> DNSSEC solves none of the problems with the CA system. It just moves the problem around.
> """
> 
> I believe I understand why he said this, but I think it's incorrect to say that DNSSEC solves "none" of the problems. I think it solves many (though not all) of them, and that supplementary systems - which are desirable in and of themselves - can take us the rest of the way.

I think I basically agree with this sentiment.  A lot of security measures are based on threat-neutralization, whereas DNSSEC is based on threat-reduction.  It mitigates intrusions by certain classes of bad actor while still enabling others.

An important thing is that the average user isn't going to perceive any difference in security when using DNSSEC; so they're not going to get a false sense of security from DNSSEC.

> Here's my reasoning:
> 
> I think it's fair to say that the PKIX trust model is known to have some serious flaws. They basically stem from the existence of far, far too many CAs, and the lack of constraint on what a CA can issue for.

One minor quibble I have here is that trust is always between two parties.  The presence of a "trusted third party" is _always_ a problem.  So it's not that there are too many CAs, but rather, that you *always* need a cartel CA to sign your stuff in order to be able to trust someone, and once you have an established trust relationship, you can't base things off of that relationship rather than off of software-distributor (i.e. browser-vendor) granted authority.

> There are various proposed solutions to this problem. DNSSEC-signed TLSA records (DANE; RFC 6698) offer one solution to the problem - to put hashes of certs/keys or issuer/chain certs/keys in DNS, and sign then with DNSSEC. This accomplishes two things:
> 
> 1. Reduction in the number of trusted CAs. To what degree depends on what deployment model you use - you can put a specific key/cert into DNS, or one or more traditional X.509 issuers that allowed to sign for you. The latter in particular seems likely to be common - reduce the CAs that can sign for "blah.example.com" from ~1500 by putting the hashes of the 1/2/N "good" CA certs (most specific parent!) into the "blah.example.com" TLSA records.
> 
> 2. Constraint - a DNS zone-signing key can only sign records below it, terminating at secure child delegations (DS keys).
> 
> The obvious objection to this solution is the necessary trust in the DNS root / parent zones. There are, it seems, people who are not willing to grant this trust. I understand that - particularly in light of recent revelations.

It's worth noting, however, that you are already accepting a certain degree of trust in the DNS root.  Even if your traffic is totally cryptographically secure, if you're talking to a compromised DNS they can still reliably tell (A) who you are talking to and (B) when you are talking to them.

So if the option is "trust the DNS and a bunch of CAs" or "trust the DNS", just trusting the DNS is safer (even if not, in an absolute sense, "safe").

> However: government agencies are not the only people who might want to get certs in the name of a 3rd party. Crime syndicates attacking the latest race-to-the-bottom CA to get "e<some unicode glyph like x>ample.com" certs are a real issue, and DANE can handle these just fine.

Another way to look at it is that governments are the largest, most established crime syndicates, with the most rules governing their use of violence (I won't say they're the "least violent"); so again, the question is "do you want to be vulnerable to SOME crime syndicates or to ALL crime syndicates", the answer is clearly the former :).

> There are arguments that DANE moves the trust problem from CAs to registrars and registries. I must admit, I don't understand the threat model here - it's asserted that registrars are cheap&cheerful (true) but they only handle public key material, and don't run the DNS; the registry is a more fruitful target, but validation of the public key material they publish for you is trivial (whereas proving that a CA somewhere hasn't signed a cert for your domain is not).

This is the sort of thing OCSP and CRLs are for, though, right?

> In short, I think it's a significant net win, and as a side benefit offers greatly reduced key management burden. The ability to publish and revoke TLSA records at significantly lower cost than X.509 cert issuance, and without need to interact with a 3rd party, would be valuable even without the above. It could in theory help decouple TLS from X.509 - useful if you want to move to PGP, for example.
> 
> However, some people don't agree. Moxie Marlinspike discusses the general issues and makes an argument against DANE - see:
> 
> http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/
> 
> ...and the video of the talk here:
> 
> http://www.youtube.com/watch?v=Z7Wl2FW2TcA

Interesting reading.  Thanks for presenting the opposing view as well :).

> He essentially suggests a trusted notary system - a working implementation of which you can see here:
> 
> http://convergence.io/
> 
> I agree that this approach is promising. I am not super-confident that it will take off - end-users literally DO NOT CARE about these issues until it's too late - but if someone (Chrome, Firefox) starts bundling notary functionality and prompting users to trust one or more of a (randomly shuffled) set of notaries on startup, it might... However, I'm not sure how likely that is - see:
> 
> https://www.imperialviolet.org/2011/09/07/convergence.html
> 
> [Note Adam Langley is "Google TLS person"]
> 
> For an alternative take on the problem, see:
> 
> http://www.certificate-transparency.org/
> 
> People interested in reading a pro-DNSSEC PoV should look here (warning - sequence of posts):
> 
> http://dankaminsky.com/2010/12/13/dnssec-ch1/
> 
> ...and here:
> 
> http://www.slideshare.net/dakami/black-opspki-2
> 
> So - not as short as I'd like, but as short as I could make it. I hope that makes my position clear.

Yes, tremendously enlightening.  And I thought I already understood these issues fairly well!

> Finally a note on why I was reluctant to respond...
> 
> In my experience, "discussions" on TLS, X.509, DNS and DNSSEC can become very emotive, very quickly. There are people who care very, very deeply about the minutae of these issues because they directly impact the politics of privacy and symmetry of access to the internet.

I understand.  But that's out there on The Internet, and not here on the eminently civil and thoughtful Twisted mailing list, where we can count on the discourse to be at a higher level :-).  As you can see, no fallout has occurred!

> To be honest, I lack the mental drive to engage in those discussions over the internet. Face to face might be another matter, but I have better things to do with my time than argue with strangers.
> 
> So - if anyone is sitting there bouncing up and down in their seat excited about how wrong I am - forgive me if I don't reply, I'm just not as excited about it. Look me up in real life sometime and we'll chat about it over beer!
> 
> Cheers,
> Phil


Thanks for taking the time to write all this up.

-glyph




From itamar at itamarst.org  Tue Oct  8 17:10:32 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Tue, 08 Oct 2013 19:10:32 -0400
Subject: [Twisted-Python] ANN: Crochet 0.9.0 - Use Twisted Anywhere!
In-Reply-To: <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>
References: <52535C2C.7080904@itamarst.org>
 <634914A010D0B943A035D226786325D444689FFF30@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <525490E8.9090802@itamarst.org>

On 10/08/2013 12:21 PM, Tobias Oberstein wrote:
>
> PS: One suggestion for the docs: it could be helpful to contrast the 
> approach crochet takes with the other option of having a Twisted Web 
> WSGI resource for running Flask (and other WSGI stuff) so users can 
> make an informed decision.
>

That's a good idea; I opened a ticket to document that.

Short version:

1. Maybe you're not writing a web app, but some other application or a 
generic library, in which case WSGI is irrelevant.

2. Maybe you don't want to deploy on Twisted's WSGI container because 
you prefer some other WSGI container.

Even if you decide to use Twisted as a WSGI container, or in fact any 
time you're using threads with Twisted where deferToThread is 
insufficient, Crochet's APIs for calling into Twisted from a thread are 
much nicer than blockingCallFromThread.

-Itamar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131008/2089b453/attachment-0002.html>

From kebin70 at gmail.com  Fri Oct 11 16:05:58 2013
From: kebin70 at gmail.com (kevin mcintyre)
Date: Fri, 11 Oct 2013 15:05:58 -0700
Subject: [Twisted-Python] web templating with html
Message-ID: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>

https://twistedmatrix.com/documents/current/web/howto/twisted-templates.html#auto7

I see the example with quoting, but what if I want to render html?

I'm trying to get the text/html part of an email, and want to render as is.

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131011/ba691a62/attachment-0002.html>

From glyph at twistedmatrix.com  Sat Oct 12 02:43:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 12 Oct 2013 01:43:14 -0700
Subject: [Twisted-Python] web templating with html
In-Reply-To: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>
References: <CAA-sNEbgC+3Drw-Sk9R_j4aQcV1ERdiqGOEuZqzxbNEzbYjvsg@mail.gmail.com>
Message-ID: <CBF74A07-80A1-4EBB-990F-CCEC7D7ADF30@twistedmatrix.com>


On Oct 11, 2013, at 3:05 PM, kevin mcintyre <kebin70 at gmail.com> wrote:

> https://twistedmatrix.com/documents/current/web/howto/twisted-templates.html#auto7
> 
> I see the example with quoting, but what if I want to render html?  
> 
> I'm trying to get the text/html part of an email, and want to render as is.
> 
> Thanks in advance.

This feature has already been requested for twisted.web.template:

<https://twistedmatrix.com/trac/ticket/4984>

Since you've mentioned it, I put a couple of code snippets on the bug which explain how we might address this, which should provide you with some possibilities to get moving with your application; they are all using existing public APIs.  I hope you'll stick around and help us at least improve the documentation, if not the implementation, though :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131012/79bc11aa/attachment-0002.html>

From wasilak at gmail.com  Sat Oct 12 08:27:59 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Sat, 12 Oct 2013 16:27:59 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
Message-ID: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>

Hello,

I've got a problem when using Twisted UDP-based app with IPv6. I know UDP
IPv6 is not yet officially supported, I am using the unoffcial hack found
somewhere on the net.

----------------UNOFFICIAL HACK----------------------
In twisted/internet/udp.py:

(...)
    def __init__(self, port, proto, interface='', maxPacketSize=8192,
reactor=None):
        """
        Initialize with a numeric port to listen on.
        """
        base.BasePort.__init__(self, reactor)
        self.port = port
        self.protocol = proto
        self.maxPacketSize = maxPacketSize
        self.interface = interface
        self.setLogStr()
        self._connectedAddr = None
+       if interface and abstract.isIPv6Address(interface): ###
+          self.addressFamily = socket.AF_INET6 ###

(...)
    def doRead(self):
        """
        Called when my socket is ready for reading.
        """
        read = 0
        while read < self.maxThroughput:
            try:
                data, addr = self.socket.recvfrom(self.maxPacketSize)
            except socket.error as se:
                no = se.args[0]
                if no in _sockErrReadIgnore:
                    return
                if no in _sockErrReadRefuse:
                    if self._connectedAddr:
                        self.protocol.connectionRefused()
                    return
                raise
            else:
                read += len(data)
                try:
+                 addr = (addr[0], addr[1]) ###
                    self.protocol.datagramReceived(data, addr)
                except:
                    log.err()
--------------END OF UNOFFICIAL HACK------------------------

I deploy my protocol like that:

reactor.listenUDP(5683, myapp.MyProtocol(), interface="::")
reactor.run()

The problem is:
1. My server receives a request from remote client (with destination
address being valid global IPv6 address)
2. The server sends a response, but uses different source address (which is
also valid and assigned to local wlan0 interface).
3. Remote host drops the response (destination address of the request and
source address of the response do not match).

It is common for IPv6 interfaces to have multiple global IPv6 addresses -
because of privacy reasons (both on Windows and Linux).

My question is - can I read manually the destination address from the
incoming request datagram, and set it as a source address manually in the
outgoing response datagram?

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131012/c623f869/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct 13 00:05:23 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 13 Oct 2013 06:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1381644323.41.2144218698835044198@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131013/ff8e50dd/attachment-0002.html>

From tobias.oberstein at tavendo.de  Sun Oct 13 11:51:38 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Sun, 13 Oct 2013 10:51:38 -0700
Subject: [Twisted-Python] AutobahnTestsuite 0.5.6
Message-ID: <634914A010D0B943A035D226786325D44469B06676@EXVMBX020-12.exch020.serverdata.net>

Hi,

we've just release a new version of AutobahnTestsuite - including WebSocket compression testing.

Full announcement:
https://groups.google.com/forum/#!topic/autobahnws/_WIk5Z_xJ4U

Reports:
http://autobahn.ws/testsuite#reports_20131013

Takeaways:

1) Compression:
=> go to section 12 in reports
=> compression on real-world JSON can achieve ratios of up to 20!

2) Performance:
Autobahn/Twisted on CPython using wsaccel (Cython based acceleration for certain things) or PyPy are really competitive.
http://autobahn.ws/testsuite/reports/servers/index.html
=> section 9
=> Testing details: https://github.com/tavendo/AutobahnTestSuite/tree/master/examples/publicreports

There are a couple of interesting aspects rgd CPy+wsaccel and PyPy: on large volumes of data, CPy+wsaccel wins.
On small data, but lots of, PyPy is faster. PyPy is good at accelerating all the loops and conditional code, but Cython
is faster when doing mass data crunching. I expect more differences under real, concurrent load, since the GCs are
quite different. Anyway,

Cheers,
/Tobias



From itamar at itamarst.org  Mon Oct 14 11:43:17 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 14 Oct 2013 13:43:17 -0400
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
Message-ID: <525C2D35.2060407@itamarst.org>

On 10/12/2013 10:27 AM, Maciej Wasilak wrote:
>
> I deploy my protocol like that:
>
> reactor.listenUDP(5683, myapp.MyProtocol(), interface="::")
> reactor.run()
>
> The problem is:
> 1. My server receives a request from remote client (with destination 
> address being valid global IPv6 address)
> 2. The server sends a response, but uses different source address 
> (which is also valid and assigned to local wlan0 interface).
> 3. Remote host drops the response (destination address of the request 
> and source address of the response do not match).
>
> It is common for IPv6 interfaces to have multiple global IPv6 
> addresses - because of privacy reasons (both on Windows and Linux).
>
> My question is - can I read manually the destination address from the 
> incoming request datagram, and set it as a source address manually in 
> the outgoing response datagram?

If you pass a specific IP to the interface keyword argument instead of 
"::", the UDP port will bind to that specific IP and will only send 
datagrams on that IP. You can use netifaces package (e.g. find it on 
PyPI) to list all local IPs. So you could do the equivalent of "::" by 
binding multiple times, once for each IPv6 address.



From wasilak at gmail.com  Wed Oct 16 01:36:58 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 16 Oct 2013 09:36:58 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <525C2D35.2060407@itamarst.org>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
Message-ID: <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>

Itamar,

If you pass a specific IP to the interface keyword argument instead of
> "::", the UDP port will bind to that specific IP and will only send
> datagrams on that IP. You can use netifaces package (e.g. find it on PyPI)
> to list all local IPs. So you could do the equivalent of "::" by binding
> multiple times, once for each IPv6 address.
>

Thanks for the hint - I've ran a few tests with netifaces. Few observations:
1. Returned interface identifiers for Windows are not human-readable - it's
hard to determine which interface is wireless, and which one is loopback
from just the interface identifier. Results for Linux are better -
identifiers are human readable (eth0, wlan0, lo, etc.) - it might be
possible to implement some simple logic to automatically choose the right
interface.
2. As far as I noticed it is not possible to use one DatagramProtocol
instance to listen on multiple addresses, so I think to achieve "::"
equivalent I have to use separate DatagramProtocol instance for each
address. However I think in many cases it's enough to deploy server on a
single address, provided it's a reachable and well-known one.
3. I've checked some docs and see no easy way to deploy a server which
automatically listens on all interfaces and responds with a source address
that was used in request . It seems that it has nothing to do with Twisted.
It is rather caused by the underlying Python socket implementation.

All in all the problem with using wrong source address can be easilly
solved with a bit of user attention, however it's hard to find the solution
that "just works".

Best Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/359e7c7c/attachment-0002.html>

From itamar at itamarst.org  Wed Oct 16 05:47:34 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Wed, 16 Oct 2013 07:47:34 -0400
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
Message-ID: <525E7CD6.9040006@itamarst.org>

On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
>
> All in all the problem with using wrong source address can be easilly 
> solved with a bit of user attention, however it's hard to find the 
> solution that "just works".
>
There's an OS API (recvmsg?) that lets you get at this information; I 
believe Twisted has the start of a wrapper for it. Given a full wrapper 
we could create a new UDP API that did support this easily.

-Itamar



From m-lists at the-moon.net  Wed Oct 16 06:14:46 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Wed, 16 Oct 2013 13:14:46 +0100
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <525E7CD6.9040006@itamarst.org>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
 <525E7CD6.9040006@itamarst.org>
Message-ID: <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>

On 16 October 2013 12:47, Itamar Turner-Trauring <itamar at itamarst.org> wrote:
> On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
>> All in all the problem with using wrong source address can be easilly
>> solved with a bit of user attention, however it's hard to find the solution
>> that "just works".
>>
> There's an OS API (recvmsg?) that lets you get at this information; I
> believe Twisted has the start of a wrapper for it. Given a full wrapper we
> could create a new UDP API that did support this easily.

Here's a good description of how PowerDNS solved this problem using recvmsg:
 * http://bert-hubert.blogspot.nl/2012/10/on-binding-datagram-udp-sockets-to-any.html

I don't think it's currently possible to listenUDP on a specific IPv6 address:
 * https://twistedmatrix.com/trac/ticket/5086

But the branch for that ticket is almost ready to be merged... it just
needs a few custom exception classes I think.

-RichardW.



From sayresc at gmail.com  Wed Oct 16 11:33:29 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 10:33:29 -0700
Subject: [Twisted-Python] Garbage in logfiles?
Message-ID: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>

Hi All,

I'm working for an astro observatory and we are upgrading our telescope control software.  We are swapping to twisted under the hood, and I have run into an issue regarding logging.

I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:

3230 3133 2d31 302d 3136 2031 303a 3131
3a34 352d 3037 3030 205b 2d5d 2044 6576
436d 6428 5354 4154 5553 290a 3230 3133
2d31 302d 3136 2031 303a 3131 3a34 352d
3037 3030 205b 2d5d 2044 6576 436d 6428
5354 4154 5553 290a 3230 3133 2d31 302d

Here is an example of a few lines from a good log file:

2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000, 000000000, 000000000 commanded position)
2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i axisHomed=1, 1, 1, 1, 1)
2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)

I haven't been able to reproduce the problem in a simpler framework than our simulation.  I am triggering the rollover by directly calling LogFile.rollover on a timer.  The problem also exists if I define a small file size limit for automatic rollover and let twisted do it automatically.

Sound familiar to anyone out there?

Cheers,
Conor




From radix at twistedmatrix.com  Wed Oct 16 11:44:27 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Oct 2013 12:44:27 -0500
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
Message-ID: <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>

On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:

> Hi All,
>
> I'm working for an astro observatory and we are upgrading our telescope
> control software.  We are swapping to twisted under the hood, and I have
> run into an issue regarding logging.
>
> I have set up twisted logging to record all communication between our
> devices.  When we simulate our system with a high frequency log rollover
> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> example of a few lines in a given bad log file:
>
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d
>
> Here is an example of a few lines from a good log file:
>
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000,
> 000000000, 000000000 commanded position)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>
> I haven't been able to reproduce the problem in a simpler framework than
> our simulation.  I am triggering the rollover by directly calling
> LogFile.rollover on a timer.  The problem also exists if I define a small
> file size limit for automatic rollover and let twisted do it automatically.
>


I don't think there's any method named "rollover" anywhere in Twisted (in
fact, I just confirmed this with grep).

Your message is pretty vague and context-free; could you try to add more
necessary detail? Is the problem with the output you're seeing the
*content* of the numbers/letters, or just the fact that they're appearing
at all? Maybe there's relevant output before or after that block of
numbers/letters? Did you leave out the timestamp prefixes when pasting to
this email, or is there really no timestamp prefixing the lines of that
output?

I don't know where those numbers/letters could be coming from. Does your
code (or any libraries you use) ever print to stdout? By default, Twisted
redirects all prints (and any writing to sys.stdout) to the log file.


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/c09661eb/attachment-0002.html>

From sayresc at gmail.com  Wed Oct 16 12:12:12 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 11:12:12 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
Message-ID: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>


On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:
> Hi All,
> 
> I'm working for an astro observatory and we are upgrading our telescope control software.  We are swapping to twisted under the hood, and I have run into an issue regarding logging.
> 
> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
> 
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d
> 
> Here is an example of a few lines from a good log file:
> 
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000, 000000000, 000000000 commanded position)
> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i axisHomed=1, 1, 1, 1, 1)
> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> 
> I haven't been able to reproduce the problem in a simpler framework than our simulation.  I am triggering the rollover by directly calling LogFile.rollover on a timer.  The problem also exists if I define a small file size limit for automatic rollover and let twisted do it automatically.
> 
> 
> I don't think there's any method named "rollover" anywhere in Twisted (in fact, I just confirmed this with grep).

I'm sorry, the method is rotate my mistake

> 
> Your message is pretty vague and context-free; could you try to add more necessary detail?
> Is the problem with the output you're seeing the *content* of the numbers/letters, or just the fact that they're appearing at all? Maybe there's relevant output before or after that block of numbers/letters? Did you leave out the timestamp prefixes when pasting to this email, or is there really no timestamp prefixing the lines of that output?

The bad log files are 100% full of non-relevant output.  They contain no time stamps, solely lines of 4 character blocks (hex?).  They should contain information like the example of a good log I showed above.

The good log files are 100% full of relevant output, no corruption.  They contain the timestamps (as they should).

It seems somewhat random whether or not a given log file will be good or bad.

> 
> I don't know where those numbers/letters could be coming from. Does your code (or any libraries you use) ever print to stdout? By default, Twisted redirects all prints (and any writing to sys.stdout) to the log file.
> 

The log was configured to NOT capture print statements to stdout.

> 
> -- 
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/26ac98d0/attachment-0002.html>

From radix at twistedmatrix.com  Wed Oct 16 12:19:07 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 16 Oct 2013 13:19:07 -0500
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
 <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
Message-ID: <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>

On Wed, Oct 16, 2013 at 1:12 PM, Conor Sayres <sayresc at gmail.com> wrote:

>
> On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com> wrote:
>
>> Hi All,
>>
>> I'm working for an astro observatory and we are upgrading our telescope
>> control software.  We are swapping to twisted under the hood, and I have
>> run into an issue regarding logging.
>>
>> I have set up twisted logging to record all communication between our
>> devices.  When we simulate our system with a high frequency log rollover
>> rate (~5 seconds), many of the logs contain only garbage.  Here is an
>> example of a few lines in a given bad log file:
>>
>> 3230 3133 2d31 302d 3136 2031 303a 3131
>> 3a34 352d 3037 3030 205b 2d5d 2044 6576
>> 436d 6428 5354 4154 5553 290a 3230 3133
>> 2d31 302d 3136 2031 303a 3131 3a34 352d
>> 3037 3030 205b 2d5d 2044 6576 436d 6428
>> 5354 4154 5553 290a 3230 3133 2d31 302d
>>
>> Here is an example of a few lines from a good log file:
>>
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
>> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
>> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000, 000000000,
>> 000000000, 000000000 commanded position)
>> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
>> axisHomed=1, 1, 1, 1, 1)
>> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
>>
>> I haven't been able to reproduce the problem in a simpler framework than
>> our simulation.  I am triggering the rollover by directly calling
>> LogFile.rollover on a timer.  The problem also exists if I define a small
>> file size limit for automatic rollover and let twisted do it automatically.
>>
>
>
> I don't think there's any method named "rollover" anywhere in Twisted (in
> fact, I just confirmed this with grep).
>
>
> I'm sorry, the method is rotate my mistake
>
>
> Your message is pretty vague and context-free; could you try to add more
> necessary detail?
>
> Is the problem with the output you're seeing the *content* of the
> numbers/letters, or just the fact that they're appearing at all? Maybe
> there's relevant output before or after that block of numbers/letters? Did
> you leave out the timestamp prefixes when pasting to this email, or is
> there really no timestamp prefixing the lines of that output?
>
>
> The bad log files are 100% full of non-relevant output.  They contain no
> time stamps, solely lines of 4 character blocks (hex?).  They should
> contain information like the example of a good log I showed above.
>
> The good log files are 100% full of relevant output, no corruption.  They
> contain the timestamps (as they should).
>
> It seems somewhat random whether or not a given log file will be good or
> bad.
>
>
> I don't know where those numbers/letters could be coming from. Does your
> code (or any libraries you use) ever print to stdout? By default, Twisted
> redirects all prints (and any writing to sys.stdout) to the log file.
>
>
> The log was configured to NOT capture print statements to stdout.
>



The only other thing I can think of (without having a reproducible example
of the problem in a self-contained executable example) is that some other
program or code is opening the same file and writing garbage to it. Maybe
you accidentally pass the location of the log file somewhere that wants a
file to write to. It's unlikely that twisted's logging code itself would
write unprefixed lines without a custom observer doing so.


>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
>
>  _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/bb3b76ae/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Oct 16 14:14:00 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 16 Oct 2013 13:14:00 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <CAPkRfUQuoEmuuLvseWx3DFdWAYkpd2xKFxBo8buMo4ChLdboJw@mail.gmail.com>
 <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4@gmail.com>
 <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=Mg@mail.gmail.com>
Message-ID: <0B91CDE1-5DED-4521-95DE-84EC0C246C4E@twistedmatrix.com>


On Oct 16, 2013, at 11:19 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> The only other thing I can think of (without having a reproducible example of the problem in a self-contained executable example) is that some other program or code is opening the same file and writing garbage to it. Maybe you accidentally pass the location of the log file somewhere that wants a file to write to. It's unlikely that twisted's logging code itself would write unprefixed lines without a custom observer doing so.

Whenever I've seen truly garbage stuff like this, it's always been some code that opens a file descriptor, has it closed out from under it, and then the log file gets (re-?)opened with the same file descriptor number.  Then write() calls start going to the logfile's FD.

This is almost certainly a bug in your code or some other library that it's using, not Twisted itself.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/48c706a3/attachment-0002.html>

From tom.sheffler at gmail.com  Wed Oct 16 14:41:40 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 16 Oct 2013 13:41:40 -0700
Subject: [Twisted-Python] Twisted-Python Digest, Vol 115, Issue 19
In-Reply-To: <mailman.2906.1381954449.2077.twisted-python@twistedmatrix.com>
References: <mailman.2906.1381954449.2077.twisted-python@twistedmatrix.com>
Message-ID: <CAMBtMcsJ6spDcKV-W0aH9=rXAfQRXHthWhCmJfX7e5Gvka8A0Q@mail.gmail.com>

Don't know if this helps:

>>> chr(0x32) + chr(0x30) + chr(0x31) + chr(0x33) + chr(0x2d) + chr(0x31) +
chr(0x30) + chr(0x2d) + chr(0x31) + chr(0x36) + chr(0x20) + chr(0x31) +
chr(0x30) + chr(0x3a) + chr(0x31) + chr(0x31)
'2013-10-16 10:11'
>>>


On Wed, Oct 16, 2013 at 1:14 PM,
<twisted-python-request at twistedmatrix.com>wrote:

> Send Twisted-Python mailing list submissions to
>         twisted-python at twistedmatrix.com
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> or, via email, send a message with subject or body 'help' to
>         twisted-python-request at twistedmatrix.com
>
> You can reach the person managing the list at
>         twisted-python-owner at twistedmatrix.com
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Twisted-Python digest..."
>
>
> Today's Topics:
>
>    1. Re: Garbage in logfiles? (Conor Sayres)
>    2. Re: Garbage in logfiles? (Christopher Armstrong)
>    3. Re: Garbage in logfiles? (Glyph)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Wed, 16 Oct 2013 11:12:12 -0700
> From: Conor Sayres <sayresc at gmail.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID: <81DD4767-8F1E-4A55-857E-A7A61BE9E3D4 at gmail.com>
> Content-Type: text/plain; charset="us-ascii"
>
>
> On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> > On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com>
> wrote:
> > Hi All,
> >
> > I'm working for an astro observatory and we are upgrading our telescope
> control software.  We are swapping to twisted under the hood, and I have
> run into an issue regarding logging.
> >
> > I have set up twisted logging to record all communication between our
> devices.  When we simulate our system with a high frequency log rollover
> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> example of a few lines in a given bad log file:
> >
> > 3230 3133 2d31 302d 3136 2031 303a 3131
> > 3a34 352d 3037 3030 205b 2d5d 2044 6576
> > 436d 6428 5354 4154 5553 290a 3230 3133
> > 2d31 302d 3136 2031 303a 3131 3a34 352d
> > 3037 3030 205b 2d5d 2044 6576 436d 6428
> > 5354 4154 5553 290a 3230 3133 2d31 302d
> >
> > Here is an example of a few lines from a good log file:
> >
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> > 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> > 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> > 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000,
> 000000000, 000000000, 000000000 commanded position)
> > 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> axisHomed=1, 1, 1, 1, 1)
> > 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >
> > I haven't been able to reproduce the problem in a simpler framework than
> our simulation.  I am triggering the rollover by directly calling
> LogFile.rollover on a timer.  The problem also exists if I define a small
> file size limit for automatic rollover and let twisted do it automatically.
> >
> >
> > I don't think there's any method named "rollover" anywhere in Twisted
> (in fact, I just confirmed this with grep).
>
> I'm sorry, the method is rotate my mistake
>
> >
> > Your message is pretty vague and context-free; could you try to add more
> necessary detail?
> > Is the problem with the output you're seeing the *content* of the
> numbers/letters, or just the fact that they're appearing at all? Maybe
> there's relevant output before or after that block of numbers/letters? Did
> you leave out the timestamp prefixes when pasting to this email, or is
> there really no timestamp prefixing the lines of that output?
>
> The bad log files are 100% full of non-relevant output.  They contain no
> time stamps, solely lines of 4 character blocks (hex?).  They should
> contain information like the example of a good log I showed above.
>
> The good log files are 100% full of relevant output, no corruption.  They
> contain the timestamps (as they should).
>
> It seems somewhat random whether or not a given log file will be good or
> bad.
>
> >
> > I don't know where those numbers/letters could be coming from. Does your
> code (or any libraries you use) ever print to stdout? By default, Twisted
> redirects all prints (and any writing to sys.stdout) to the log file.
> >
>
> The log was configured to NOT capture print statements to stdout.
>
> >
> > --
> > Christopher Armstrong
> > http://radix.twistedmatrix.com/
> > http://planet-if.com/
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/26ac98d0/attachment-0001.html
> >
>
> ------------------------------
>
> Message: 2
> Date: Wed, 16 Oct 2013 13:19:07 -0500
> From: Christopher Armstrong <radix at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID:
>         <CAPkRfURUVATCZr2-e2nLKaUpN4U3GK-kgHoLnP-a_1EUAcG=
> Mg at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> On Wed, Oct 16, 2013 at 1:12 PM, Conor Sayres <sayresc at gmail.com> wrote:
>
> >
> > On Oct 16, 2013, at 10:44 AM, Christopher Armstrong <
> > radix at twistedmatrix.com> wrote:
> >
> > On Wed, Oct 16, 2013 at 12:33 PM, Conor Sayres <sayresc at gmail.com>
> wrote:
> >
> >> Hi All,
> >>
> >> I'm working for an astro observatory and we are upgrading our telescope
> >> control software.  We are swapping to twisted under the hood, and I have
> >> run into an issue regarding logging.
> >>
> >> I have set up twisted logging to record all communication between our
> >> devices.  When we simulate our system with a high frequency log rollover
> >> rate (~5 seconds), many of the logs contain only garbage.  Here is an
> >> example of a few lines in a given bad log file:
> >>
> >> 3230 3133 2d31 302d 3136 2031 303a 3131
> >> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> >> 436d 6428 5354 4154 5553 290a 3230 3133
> >> 2d31 302d 3136 2031 303a 3131 3a34 352d
> >> 3037 3030 205b 2d5d 2044 6576 436d 6428
> >> 5354 4154 5553 290a 3230 3133 2d31 302d
> >>
> >> Here is an example of a few lines from a good log file:
> >>
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >> 2013-10-16 10:11:39-0700 [-] Galil Reply(: 1,  1,  1,  1,  1 axis homed)
> >> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i axisHomed=1, 1, 1, 1, 1)
> >> 2013-10-16 10:11:39-0700 [-] Galil Reply(000000000, 000000000,
> 000000000,
> >> 000000000, 000000000 commanded position)
> >> 2013-10-16 10:11:39-0700 [-] To All Users(1 1 i cmdMount=0, 0, 0, 0, 0)
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] MirrorCtrl Reply(1 1 i
> >> axisHomed=1, 1, 1, 1, 1)
> >> 2013-10-16 10:11:39-0700 [_SocketProtocol,client] Galil Reply(XQ#STATUS)
> >>
> >> I haven't been able to reproduce the problem in a simpler framework than
> >> our simulation.  I am triggering the rollover by directly calling
> >> LogFile.rollover on a timer.  The problem also exists if I define a
> small
> >> file size limit for automatic rollover and let twisted do it
> automatically.
> >>
> >
> >
> > I don't think there's any method named "rollover" anywhere in Twisted (in
> > fact, I just confirmed this with grep).
> >
> >
> > I'm sorry, the method is rotate my mistake
> >
> >
> > Your message is pretty vague and context-free; could you try to add more
> > necessary detail?
> >
> > Is the problem with the output you're seeing the *content* of the
> > numbers/letters, or just the fact that they're appearing at all? Maybe
> > there's relevant output before or after that block of numbers/letters?
> Did
> > you leave out the timestamp prefixes when pasting to this email, or is
> > there really no timestamp prefixing the lines of that output?
> >
> >
> > The bad log files are 100% full of non-relevant output.  They contain no
> > time stamps, solely lines of 4 character blocks (hex?).  They should
> > contain information like the example of a good log I showed above.
> >
> > The good log files are 100% full of relevant output, no corruption.  They
> > contain the timestamps (as they should).
> >
> > It seems somewhat random whether or not a given log file will be good or
> > bad.
> >
> >
> > I don't know where those numbers/letters could be coming from. Does your
> > code (or any libraries you use) ever print to stdout? By default, Twisted
> > redirects all prints (and any writing to sys.stdout) to the log file.
> >
> >
> > The log was configured to NOT capture print statements to stdout.
> >
>
>
>
> The only other thing I can think of (without having a reproducible example
> of the problem in a self-contained executable example) is that some other
> program or code is opening the same file and writing garbage to it. Maybe
> you accidentally pass the location of the log file somewhere that wants a
> file to write to. It's unlikely that twisted's logging code itself would
> write unprefixed lines without a custom observer doing so.
>
>
> >
> > --
> > Christopher Armstrong
> > http://radix.twistedmatrix.com/
> > http://planet-if.com/
> >
> >  _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
> >
> > _______________________________________________
> > Twisted-Python mailing list
> > Twisted-Python at twistedmatrix.com
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> >
> >
>
>
> --
> Christopher Armstrong
> http://radix.twistedmatrix.com/
> http://planet-if.com/
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/bb3b76ae/attachment-0001.html
> >
>
> ------------------------------
>
> Message: 3
> Date: Wed, 16 Oct 2013 13:14:00 -0700
> From: Glyph <glyph at twistedmatrix.com>
> To: Twisted general discussion <twisted-python at twistedmatrix.com>
> Subject: Re: [Twisted-Python] Garbage in logfiles?
> Message-ID: <0B91CDE1-5DED-4521-95DE-84EC0C246C4E at twistedmatrix.com>
> Content-Type: text/plain; charset="us-ascii"
>
>
> On Oct 16, 2013, at 11:19 AM, Christopher Armstrong <
> radix at twistedmatrix.com> wrote:
>
> > The only other thing I can think of (without having a reproducible
> example of the problem in a self-contained executable example) is that some
> other program or code is opening the same file and writing garbage to it.
> Maybe you accidentally pass the location of the log file somewhere that
> wants a file to write to. It's unlikely that twisted's logging code itself
> would write unprefixed lines without a custom observer doing so.
>
> Whenever I've seen truly garbage stuff like this, it's always been some
> code that opens a file descriptor, has it closed out from under it, and
> then the log file gets (re-?)opened with the same file descriptor number.
>  Then write() calls start going to the logfile's FD.
>
> This is almost certainly a bug in your code or some other library that
> it's using, not Twisted itself.
>
> -g
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://twistedmatrix.com/pipermail/twisted-python/attachments/20131016/48c706a3/attachment.html
> >
>
> ------------------------------
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
> End of Twisted-Python Digest, Vol 115, Issue 19
> ***********************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131016/805fae8f/attachment-0002.html>

From tom.prince at ualberta.net  Wed Oct 16 16:07:29 2013
From: tom.prince at ualberta.net (Tom Prince)
Date: Wed, 16 Oct 2013 16:07:29 -0600
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
Message-ID: <87d2n498f2.fsf@hermes.hocat.ca>

Conor Sayres <sayresc at gmail.com> writes:

> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
>
> 3230 3133 2d31 302d 3136 2031 303a 3131
> 3a34 352d 3037 3030 205b 2d5d 2044 6576
> 436d 6428 5354 4154 5553 290a 3230 3133
> 2d31 302d 3136 2031 303a 3131 3a34 352d
> 3037 3030 205b 2d5d 2044 6576 436d 6428
> 5354 4154 5553 290a 3230 3133 2d31 302d

How are you viewing the log file? I suspect
you are using less, and that the file contains
some control characters, and less is automatically
showing you a hex dump. Try using `less -A`.

The above lines when coverted from hex are:

2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
2013-10

which looks like part of a log file.

  Tom



From sayresc at gmail.com  Wed Oct 16 16:18:37 2013
From: sayresc at gmail.com (Conor Sayres)
Date: Wed, 16 Oct 2013 15:18:37 -0700
Subject: [Twisted-Python] Garbage in logfiles?
In-Reply-To: <87d2n498f2.fsf@hermes.hocat.ca>
References: <1CE2C7EB-37F1-4169-BA30-D8A16A2C76AB@gmail.com>
 <87d2n498f2.fsf@hermes.hocat.ca>
Message-ID: <CA90785A-2DC4-4FBC-B72F-A8EA1DD34C31@gmail.com>

Hi Guys,

Tom nailed it.  It seems to be a bug in my text editor from which I was viewing the files (Sublime Text 2).  

The logging was correct all along.  Thanks All!

Conor


On Oct 16, 2013, at 3:07 PM, Tom Prince <tom.prince at ualberta.net> wrote:

> Conor Sayres <sayresc at gmail.com> writes:
> 
>> I have set up twisted logging to record all communication between our devices.  When we simulate our system with a high frequency log rollover rate (~5 seconds), many of the logs contain only garbage.  Here is an example of a few lines in a given bad log file:
>> 
>> 3230 3133 2d31 302d 3136 2031 303a 3131
>> 3a34 352d 3037 3030 205b 2d5d 2044 6576
>> 436d 6428 5354 4154 5553 290a 3230 3133
>> 2d31 302d 3136 2031 303a 3131 3a34 352d
>> 3037 3030 205b 2d5d 2044 6576 436d 6428
>> 5354 4154 5553 290a 3230 3133 2d31 302d
> 
> How are you viewing the log file? I suspect
> you are using less, and that the file contains
> some control characters, and less is automatically
> showing you a hex dump. Try using `less -A`.
> 
> The above lines when coverted from hex are:
> 
> 2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
> 2013-10-16 10:11:45-0700 [-] DevCmd(STATUS)
> 2013-10
> 
> which looks like part of a log file.
> 
>  Tom




From sank.daniel at gmail.com  Thu Oct 17 13:26:42 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 17 Oct 2013 12:26:42 -0700
Subject: [Twisted-Python] pb.Cacheable with response to remote requests
Message-ID: <CAKN9TD+1Nia3ak7A-o2rKA9=8FEZ=Eh6McaxtkSEoquro8pFtQ@mail.gmail.com>

Is there a good way to make something like a pb.Cacheable on which the
observers can call remote methods?

-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899



From wasilak at gmail.com  Fri Oct 18 00:20:55 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 18 Oct 2013 08:20:55 +0200
Subject: [Twisted-Python] Setting source address of outgoing datagrams
In-Reply-To: <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>
References: <CAFUtXGz2tgg6Cf346t3c04vCYkrxZ0yRQAEhuZhXdAPN_VEkZg@mail.gmail.com>
 <525C2D35.2060407@itamarst.org>
 <CAFUtXGyHho40F-stVQ7GsTD8a2Km-xLVbZ09SNjXrHE_3EwQ0w@mail.gmail.com>
 <525E7CD6.9040006@itamarst.org>
 <CABefbUoa+uajmEVkrLdj1q7eESWnPP+2XjS+X6t4bVWg5UwdBg@mail.gmail.com>
Message-ID: <CAFUtXGwV7CU2wEgfuPfQAL01ujwktLdaSeu2LqpNHSpe7dFQ6Q@mail.gmail.com>

Richard,

thank you very much - this post is exactly what I need. Python supports
recvmsg, and sendmsg from version 3.3, but Twisted has its own
implementation that is 2.7 compatible. I'll try that right away. I think
it's best to include the recvmsg/sendmsg code into my DatagramProtocol
subclass.

Best Regards
Maciek


2013/10/16 Richard Wall <m-lists at the-moon.net>

> On 16 October 2013 12:47, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:
> > On 10/16/2013 03:36 AM, Maciej Wasilak wrote:
> >> All in all the problem with using wrong source address can be easilly
> >> solved with a bit of user attention, however it's hard to find the
> solution
> >> that "just works".
> >>
> > There's an OS API (recvmsg?) that lets you get at this information; I
> > believe Twisted has the start of a wrapper for it. Given a full wrapper
> we
> > could create a new UDP API that did support this easily.
>
> Here's a good description of how PowerDNS solved this problem using
> recvmsg:
>  *
> http://bert-hubert.blogspot.nl/2012/10/on-binding-datagram-udp-sockets-to-any.html
>
> I don't think it's currently possible to listenUDP on a specific IPv6
> address:
>  * https://twistedmatrix.com/trac/ticket/5086
>
> But the branch for that ticket is almost ready to be merged... it just
> needs a few custom exception classes I think.
>
> -RichardW.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131018/3c8d53ec/attachment-0002.html>

From itamar at itamarst.org  Sat Oct 19 09:36:12 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Sat, 19 Oct 2013 11:36:12 -0400
Subject: [Twisted-Python] ANN: Crochet 1.0.0 - Use Twisted Anywhere!
Message-ID: <5262A6EC.7080105@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.

You can download Crochet at: http://pypi.python.org/pypi/crochet

Documentation can be found at: http://crochet.readthedocs.org

Bugs and feature requests should be filed at the project page: 
https://github.com/itamarst/crochet

*What's New in 1.0.0*

**

Documentation:

  * Added section on use cases and alternatives. Thanks to Tobias
    Oberstein for the suggestion.

Bug fixes:

  * Twisted does not have to be pre-installed to run setup.py, thanks to
    Paul Weaver for bug report and Chris Scutcher for patch.
  * Importing Crochet does not have side-effects (installing reactor
    event) any more.
  * Blocking calls are interrupted earlier in the shutdown process, to
    reduce scope for deadlocks. Thanks to rmorehead for bug report.

*
*

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131019/4be127f0/attachment-0002.html>

From trac at twistedmatrix.com  Sun Oct 20 00:05:18 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 20 Oct 2013 06:05:18 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1382249118.08.8391847777306654739@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131020/a26f7108/attachment-0002.html>

From orestis at orestis.gr  Sun Oct 20 03:21:26 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Sun, 20 Oct 2013 12:21:26 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting [WSGI +
	other]
Message-ID: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>

Hello,

Short form of the question:

Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other? Are there any inherent drawbacks in using Twisted for this use case?

Long form of the question:

These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.

The bare minimum looks probably like so:

1. Your web-framework of choice, like Django
2. Some kind of WSGI container, like gunicorn
3. A static file server, like nginx
4. Some kind of database [off-topic for this message]

Additionally, you might want:

* Celery
* Redis
* Cron
* Something for web sockets or similar technology
* … and so on

In my experience, Twisted can be used to replace a lot of those use cases:

* It has a WSGI container
* It has a static web server
* It can be used for other long-running tasks 

I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.

Orestis





From r.voigtlaender at gmail.com  Mon Oct 21 05:35:44 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 13:35:44 +0200
Subject: [Twisted-Python] serial communication - getting started
Message-ID: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>

Hi,

I am new to Python. Trying to figure out how to use the serial port I
started with pyserial.
Works - but the CPU usage on my Raspberry Pi is at about 30% just for
reading the port. Before I started to optimize the code it was even 90+%.

So I tried twisted - and boom down to 3-4%. Even though twisted also uses
pyserial (as far as I read) - obviously better than I do.

So far so good.
With copy&paste from the internet and some editing I got the PI to read
from my Arduino. (code below)
But the code seems to be blocking. I tried putting things in a thread - but
I must have done something wrong. It is still blocking.

I also don't know how to write.
Does s.write("test") work?

Would be great if someone could help me out here.

Thanks a lot.
Robert



import logging
from twisted.protocols.basic import LineReceiver
from twisted.protocols.basic import LineReceiver

from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.python import usage
import thread

class THOptions(usage.Options):
    optParameters = [
        ['baudrate', 'b', 115200, 'Serial baudrate'],
        ['port', 'p', '/dev/ttyACM0', 'Serial port to use'],]


class Echo(LineReceiver):
    def processData(self, data):
        print(data)

    def lineReceived(self, line):
        try:
            data = line.rstrip()
            #logging.debug(data)
            self.processData(data)
            #print(line.rstrip())
            #pass
        except ValueError:
            logging.error('Unable to parse data %s' % line)
            return

def SerialInit():
    o = THOptions()
    try:
        o.parseOptions()
    except usage.UsageError, errortext:
        logging.error('%s %s' % (sys.argv[0], errortext))
        logging.info('Try %s --help for usage details' % sys.argv[0])
        raise SystemExit, 1

    baudrate = o.opts['baudrate'] #int('115200')
    port = o.opts['port']
    logging.debug('About to open port %s' % port)
    s = SerialPort(Echo(), port, reactor, baudrate=baudrate)
    reactor.run()


thread.start_new_thread(SerialInit())

if __name__ == '__main__':
    print("-----")
    s.write('123456789')
    #s.write("\n")
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/e8ca46ec/attachment-0002.html>

From itamar at itamarst.org  Mon Oct 21 05:45:35 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 21 Oct 2013 07:45:35 -0400
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
Message-ID: <526513DF.6080500@itamarst.org>

On 10/21/2013 07:35 AM, Robert Voigtländer wrote:
> def SerialInit():
> ...
>     reactor.run()
>
>
> thread.start_new_thread(SerialInit())
>
> if __name__ == '__main__':
>     print("-----")
>     s.write('123456789')
>     #s.write("\n")
>
1. Twisted is not thread-safe, so you can't call methods on the protocol 
from another thread.

2. As a result, you're probably best off not using threads at all.

3. A reasonable place for the write() might be in your Protocol's 
connectionMade method.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/3e17e607/attachment-0002.html>

From r.voigtlaender at gmail.com  Mon Oct 21 05:57:19 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 13:57:19 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <526513DF.6080500@itamarst.org>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
Message-ID: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>

Thanks for the fast reply.
I don't yet understand your answer. I may have to dig more into Python.



On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>wrote:

>  On 10/21/2013 07:35 AM, Robert Voigtländer wrote:
>
>   def SerialInit():
> ...
>
>       reactor.run()
>
>
>  thread.start_new_thread(SerialInit())
>
>  if __name__ == '__main__':
>     print("-----")
>     s.write('123456789')
>     #s.write("\n")
>
>  1. Twisted is not thread-safe, so you can't call methods on the protocol
> from another thread.
>
> 2. As a result, you're probably best off not using threads at all.
>
> 3. A reasonable place for the write() might be in your Protocol's
> connectionMade method.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/d3bf5319/attachment-0002.html>

From tobias.oberstein at tavendo.de  Mon Oct 21 06:20:00 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 05:20:00 -0700
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>

Robert,

as Itamar said: don't use thread -- you likely don't need them in your scenario.

shameless self-plug:

http://www.youtube.com/watch?v=va7j86thW5M
https://github.com/tavendo/AutobahnPython/tree/master/examples/wamp/serial2ws

The example includes both Arduino code and Twisted/Autobahn code .. communicating over serial. No locking. Everything async.

Maybe thats of use while learning ..

/Tobias


Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Robert Voigtländer
Gesendet: Montag, 21. Oktober 2013 13:57
An: Twisted general discussion
Betreff: Re: [Twisted-Python] serial communication - getting started

Thanks for the fast reply.
I don't yet understand your answer. I may have to dig more into Python.


On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org<mailto:itamar at itamarst.org>> wrote:
On 10/21/2013 07:35 AM, Robert Voigtländer wrote:
def SerialInit():
...
    reactor.run()


thread.start_new_thread(SerialInit())

if __name__ == '__main__':
    print("-----")
    s.write('123456789')
    #s.write("\n")

1. Twisted is not thread-safe, so you can't call methods on the protocol from another thread.

2. As a result, you're probably best off not using threads at all.

3. A reasonable place for the write() might be in your Protocol's connectionMade method.

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com<mailto:Twisted-Python at twistedmatrix.com>
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/f7bbfe18/attachment-0002.html>

From r.voigtlaender at gmail.com  Mon Oct 21 06:24:44 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Mon, 21 Oct 2013 14:24:44 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469CD5A2C@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CAH7aJjK-zf-6xv=ckvcW2PRBsDBEB+jGoKzJ82Z=J1J31zL97Q@mail.gmail.com>

Thanks a lot! I'll dig throught the code.


On 21 October 2013 14:20, Tobias Oberstein <tobias.oberstein at tavendo.de>wrote:

> Robert,****
>
> ** **
>
> as Itamar said: don't use thread -- you likely don't need them in your
> scenario.****
>
> ** **
>
> shameless self-plug:****
>
> ** **
>
> http://www.youtube.com/watch?v=va7j86thW5M****
>
>
> https://github.com/tavendo/AutobahnPython/tree/master/examples/wamp/serial2ws
> ****
>
> ** **
>
> The example includes both Arduino code and Twisted/Autobahn code ..
> communicating over serial. No locking. Everything async.****
>
> ** **
>
> Maybe thats of use while learning ..****
>
> ** **
>
> /Tobias****
>
> ** **
>
> ** **
>
> *Von:* twisted-python-bounces at twistedmatrix.com [mailto:
> twisted-python-bounces at twistedmatrix.com] *Im Auftrag von *Robert
> Voigtländer
> *Gesendet:* Montag, 21. Oktober 2013 13:57
> *An:* Twisted general discussion
> *Betreff:* Re: [Twisted-Python] serial communication - getting started****
>
> ** **
>
> Thanks for the fast reply.****
>
> I don't yet understand your answer. I may have to dig more into Python.***
> *
>
> ** **
>
> ** **
>
> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>
> wrote:****
>
> On 10/21/2013 07:35 AM, Robert Voigtländer wrote:****
>
> def SerialInit():****
>
> ...****
>
>     reactor.run() ****
>
> ** **
>
> ** **
>
> thread.start_new_thread(SerialInit())****
>
> ** **
>
> if __name__ == '__main__':****
>
>     print("-----")****
>
>     s.write('123456789')****
>
>     #s.write("\n")****
>
> ** **
>
> 1. Twisted is not thread-safe, so you can't call methods on the protocol
> from another thread.
>
> 2. As a result, you're probably best off not using threads at all.
>
> 3. A reasonable place for the write() might be in your Protocol's
> connectionMade method.****
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python****
>
> ** **
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/591d2e36/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 21 13:32:35 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 21 Oct 2013 12:32:35 -0700
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
Message-ID: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>


On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:

> Hello,
> 
> Short form of the question:
> 
> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?

I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.

> Are there any inherent drawbacks in using Twisted for this use case?

Nope.  Twisted is the best :-).

> Long form of the question:
> 
> These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.
> 
> The bare minimum looks probably like so:
> 
> 1. Your web-framework of choice, like Django
> 2. Some kind of WSGI container, like gunicorn
> 3. A static file server, like nginx
> 4. Some kind of database [off-topic for this message]
> 
> Additionally, you might want:
> 
> * Celery
> * Redis
> * Cron
> * Something for web sockets or similar technology
> * … and so on
> 
> In my experience, Twisted can be used to replace a lot of those use cases:
> 
> * It has a WSGI container
> * It has a static web server
> * It can be used for other long-running tasks 
> 
> I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.

If you hit any problems, they're bugs, report them and they'll get fixed.

Please do this.  I even gave a talk about this at DjangoCon a couple of years ago:

<http://blip.tv/djangocon/keynote-glyph-lefkowitz-5573264>

-glyph





From ltaylor.volks at gmail.com  Mon Oct 21 13:42:27 2013
From: ltaylor.volks at gmail.com (Lucas Taylor)
Date: Mon, 21 Oct 2013 14:42:27 -0500
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
Message-ID: <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>


On Oct 21, 2013, at 6:57 AM, Robert Voigtländer wrote:

> Thanks for the fast reply.
> I don't yet understand your answer. I may have to dig more into Python.
> 
> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org> wrote:

<snip guidance to avoid threads>

> 
> 3. A reasonable place for the write() might be in your Protocol's connectionMade method.
> 
> 



The Protocol has access to a .transport attribute, which is the SerialPort() instance. 

Therefore, you can write to the serial port (the transport) from within your protocol:


class Echo(LineReceiver):

    def connectionMade(self):
        self.transport.write('HELLO\n')

    def lineReceived(self, line):
        self.transport.write(line + '\n')


The connectionMade method will be called once the transport (the SerialPort instance) is ready (the serial port is open), making it an appropriate place to kick off an init sequence or similar.


Lucas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/645a739d/attachment-0002.html>

From p.mayers at imperial.ac.uk  Mon Oct 21 14:16:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Mon, 21 Oct 2013 21:16:19 +0100
Subject: [Twisted-Python] Twisted as a full solution for web
	hosting	[WSGI + other]
In-Reply-To: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
Message-ID: <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>

Does the Twisted wsgi runner have support for process rather than threading models to avoid the gil? Because if so I should take a look at it...
-- 
Sent from my phone with, please excuse brevity and typos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/6b94d6ce/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Oct 21 14:21:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 21 Oct 2013 20:21:27 -0000
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
Message-ID: <20131021202127.8627.1904113363.divmod.xquotient.11@top>

On 07:42 pm, ltaylor.volks at gmail.com wrote:
>
>On Oct 21, 2013, at 6:57 AM, Robert Voigtländer wrote:
>>Thanks for the fast reply.
>>I don't yet understand your answer. I may have to dig more into 
>>Python.
>>
>>On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org> 
>>wrote:
>
><snip guidance to avoid threads>
>>
>>3. A reasonable place for the write() might be in your Protocol's 
>>connectionMade method.
>
>The Protocol has access to a .transport attribute, which is the 
>SerialPort() instance.
>
>Therefore, you can write to the serial port (the transport) from within 
>your protocol:
>
>
>class Echo(LineReceiver):
>
>    def connectionMade(self):
>        self.transport.write('HELLO\n')
>
>    def lineReceived(self, line):
>        self.transport.write(line + '\n')

Additionally, since the serial transport tries hard to look just like a 
tcp transport or an ssl transport, the generic protocol code in 
LineReceiver.sendLine will work just fine with it.  So in addition to 
using the `lineReceived` callback to handle lines that arrive you can 
use `sendLine` to write lines out to the serial port:

    class Echo(LineReceiver):
        delimiter = b"\n"

        def connectionMade(self):
            self.sendLine(b"HELLO")

        def lineReceived(self, line):
            self.sendLine(line)

This is part of the power of the transport/protocol separation: reusable 
protocol logic. :)

Jean-Paul
>
>The connectionMade method will be called once the transport (the 
>SerialPort instance) is ready (the serial port is open), making it an 
>appropriate place to kick off an init sequence or similar.
>
>
>Lucas



From tobias.oberstein at tavendo.de  Mon Oct 21 14:48:17 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 13:48:17 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
Message-ID: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>

Hi,

with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

a) Unix Domain sockets
b) Pipes (spawnProcess)

?

Thanks!
/Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/50a8609e/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Oct 21 15:06:31 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 21 Oct 2013 14:06:31 -0700
Subject: [Twisted-Python] Twisted as a full solution for web
	hosting	[WSGI + other]
In-Reply-To: <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <758dcd47-d185-4ec9-8c52-9617fc20107d@email.android.com>
Message-ID: <A2CD679A-DF3A-4353-89E2-B48BF13E18DD@twistedmatrix.com>

On Oct 21, 2013, at 1:16 PM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Does the Twisted wsgi runner have support for process rather than threading models to avoid the gil? Because if so I should take a look at it...

Nope.  It ought to though: <https://twistedmatrix.com/trac/ticket/5180>.  Any interest in tackling that?

-glyph






From dstainton415 at gmail.com  Mon Oct 21 15:33:32 2013
From: dstainton415 at gmail.com (David Stainton)
Date: Mon, 21 Oct 2013 14:33:32 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
References: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
Message-ID: <CAFN1edoFySTu4J5vFSi8JZzgpnaHbZLpQ0sxDEpHUbjyD9qHdg@mail.gmail.com>

Hi,

I don't know the answer to your question...
I've been thinking about flow control lately.

I recently wrote a little working prototype VPN in Twisted using
IPushProducer and IConsumer interfaces
but I have not yet implemented flow control :

Here we can see how I proxy between TUN and UDP using producers and consumers:

https://github.com/david415/hushVPN/blob/master/hushVPN_service.py


Perhaps later on I could add flow control... by having the consumers
pause the producers when need be.
For now I just churn packets as fast as possible.

David


On Mon, Oct 21, 2013 at 1:48 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and practically
> usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)
>
> ?
>
> Thanks!
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



From rowen at uw.edu  Mon Oct 21 16:08:56 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Mon, 21 Oct 2013 15:08:56 -0700
Subject: [Twisted-Python] Defer until a server is ready?
Message-ID: <rowen-13D7D6.15085621102013@news.gmane.org>

For unit testing and other reasons I would like to launch a server in a 
subprocess, then wait until it is available before running some code 
that uses it. Is there a standard paradigm for this, e.g. poll until a 
connection is accepted, or have the server emit some kind of "ready" 
signal (such as a message to stdout or a UDP packet)? Any advice would 
be appreciated. A web search didn't turn up anything.

In some cases we have used one reactor to run both the server or servers 
and the client, in which case waiting is trivial. But we have cases 
where we would much rather run the server in a separate process.

-- Russell




From eric at teratorn.org  Mon Oct 21 16:45:29 2013
From: eric at teratorn.org (Eric P. Mangold)
Date: Mon, 21 Oct 2013 18:45:29 -0400
Subject: [Twisted-Python] Defer until a server is ready?
In-Reply-To: <rowen-13D7D6.15085621102013@news.gmane.org>
References: <rowen-13D7D6.15085621102013@news.gmane.org>
Message-ID: <20131021224529.GS10637@ragnarok.teratorn.org>

On Mon, Oct 21, 2013 at 03:08:56PM -0700, Russell E. Owen wrote:
> For unit testing and other reasons I would like to launch a server in a 
> subprocess, then wait until it is available before running some code 
> that uses it. Is there a standard paradigm for this, e.g. poll until a 
> connection is accepted, or have the server emit some kind of "ready" 
> signal (such as a message to stdout or a UDP packet)? Any advice would 
> be appreciated. A web search didn't turn up anything.
 
Emitting a message on stdout has worked well for me before.

You can wait for this in your ProcessProtocol then continue
the test case once you receieve it.

	-E



From tobias.oberstein at tavendo.de  Mon Oct 21 16:55:22 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 21 Oct 2013 15:55:22 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CAFN1edoFySTu4J5vFSi8JZzgpnaHbZLpQ0sxDEpHUbjyD9qHdg@mail.gmail.com>
Message-ID: <CE8B7D7A.1CD86%tobias.oberstein@tavendo.de>

fwiw, I have been trying to get find a conclusive answer to the subquestion:

Do Unix domain sockets (either stream or dgram) support flow-control?

The nearest I could find is
http://stackoverflow.com/questions/1478975/unix-domain-socket-is-there-such-a-thing-as-a-busy-signal/1479022
but the comments seem to contradict each other.

seems I'll just try it and see what happens ..

/Tobias

On 21.10.13 23:33, "David Stainton" <dstainton415 at gmail.com> wrote:

Hi,

I don't know the answer to your question...
I've been thinking about flow control lately.

I recently wrote a little working prototype VPN in Twisted using
IPushProducer and IConsumer interfaces
but I have not yet implemented flow control :

Here we can see how I proxy between TUN and UDP using producers and consumers:

https://github.com/david415/hushVPN/blob/master/hushVPN_service.py


Perhaps later on I could add flow control... by having the consumers
pause the producers when need be.
For now I just churn packets as fast as possible.

David


On Mon, Oct 21, 2013 at 1:48 PM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and practically
> usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)
>
> ?
>
> Thanks!
> /Tobias
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/763ed073/attachment-0002.html>

From itamar at itamarst.org  Mon Oct 21 18:00:37 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 21 Oct 2013 20:00:37 -0400
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
References: <CE8B5FB1.1CD69%tobias.oberstein@tavendo.de>
Message-ID: <5265C025.7080709@itamarst.org>

On 10/21/2013 04:48 PM, Tobias Oberstein wrote:
> Flow-control for Pipes / Unix Domains Sockets? Hi,
>
> with TCP (either remote or loopback) I can have flow-control using the 
> producer-consumer machinery that Twisted provides.
>
> Is that (flow-control / producer-consumer) also available (and 
> practically usable/recommended) with:
>
> a) Unix Domain sockets
> b) Pipes (spawnProcess)

I would expect transport.registerProducer to work with both.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131021/bed55cea/attachment-0002.html>

From r.voigtlaender at gmail.com  Tue Oct 22 00:25:00 2013
From: r.voigtlaender at gmail.com (=?ISO-8859-1?Q?Robert_Voigtl=E4nder?=)
Date: Tue, 22 Oct 2013 08:25:00 +0200
Subject: [Twisted-Python] serial communication - getting started
In-Reply-To: <20131021202127.8627.1904113363.divmod.xquotient.11@top>
References: <CAH7aJjL6HpfS9AvAxUugaSHU6BqYOphc1w6i51Yct-TOL0E2LQ@mail.gmail.com>
 <526513DF.6080500@itamarst.org>
 <CAH7aJj+23J4SNQy1b7VEY8NwsNfNRRPepUznKwP3k-2Bw5H_Qg@mail.gmail.com>
 <DB0E4C44-C454-4D36-976A-2881C73E7384@gmail.com>
 <20131021202127.8627.1904113363.divmod.xquotient.11@top>
Message-ID: <CAH7aJjJuSen36Vetx+30Nh4GogzdYX=OcDJaMfnasx1jbm0TOw@mail.gmail.com>

This works. Thanks a lot.

So sending and receiving works .. with low CPU usage.
I need to dig into twisted....

As a Python starter I want something like serial.send usabel in the main
loop and serial.receive to work in the background and only trigger
something once data has been received.
Obviously it is possible with python. Just have to find out how :-)

Thanks for the support so far.

Robert


On 21 October 2013 22:21, <exarkun at twistedmatrix.com> wrote:

> On 07:42 pm, ltaylor.volks at gmail.com wrote:
>
>>
>> On Oct 21, 2013, at 6:57 AM, Robert Voigtländer wrote:
>>
>>> Thanks for the fast reply.
>>> I don't yet understand your answer. I may have to dig more into Python.
>>>
>>> On 21 October 2013 13:45, Itamar Turner-Trauring <itamar at itamarst.org>
>>> wrote:
>>>
>>
>> <snip guidance to avoid threads>
>>
>>>
>>> 3. A reasonable place for the write() might be in your Protocol's
>>> connectionMade method.
>>>
>>
>> The Protocol has access to a .transport attribute, which is the
>> SerialPort() instance.
>>
>> Therefore, you can write to the serial port (the transport) from within
>> your protocol:
>>
>>
>> class Echo(LineReceiver):
>>
>>    def connectionMade(self):
>>        self.transport.write('HELLO\n'**)
>>
>>    def lineReceived(self, line):
>>        self.transport.write(line + '\n')
>>
>
> Additionally, since the serial transport tries hard to look just like a
> tcp transport or an ssl transport, the generic protocol code in
> LineReceiver.sendLine will work just fine with it.  So in addition to using
> the `lineReceived` callback to handle lines that arrive you can use
> `sendLine` to write lines out to the serial port:
>
>    class Echo(LineReceiver):
>        delimiter = b"\n"
>
>        def connectionMade(self):
>            self.sendLine(b"HELLO")
>
>        def lineReceived(self, line):
>            self.sendLine(line)
>
> This is part of the power of the transport/protocol separation: reusable
> protocol logic. :)
>
> Jean-Paul
>
>>
>> The connectionMade method will be called once the transport (the
>> SerialPort instance) is ready (the serial port is open), making it an
>> appropriate place to kick off an init sequence or similar.
>>
>>
>> Lucas
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131022/486ee7ae/attachment-0002.html>

From sank.daniel at gmail.com  Tue Oct 22 00:32:03 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 21 Oct 2013 23:32:03 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <5245B80E.8080501@ripton.net>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <5245B80E.8080501@ripton.net>
Message-ID: <CAKN9TDJdg9joYzQwe2sUdReVkza12FG_seEjmj_C0PvBvtQ9jA@mail.gmail.com>

> Here's my game that uses PB: https://github.com/dripton/Slugathon

This has been useful. I am learning from it and my own experimentation.

> One piece of advice: do the network code first and always exercise it, even
> when playing on a single computer.  Every time I've written a single-machine
> game first then tried to add networking later, the networking has been a
> mess to debug.

The way my classes are set up I can't run the game without the network
bits. Glad to hear this was good thinking.



From hawkowl at atleastfornow.net  Tue Oct 22 00:50:46 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Tue, 22 Oct 2013 14:50:46 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Announcement
Message-ID: <52662046.1010508@atleastfornow.net>

Hello everyone!
  
I bring news of a Twisted pre-release - 13.2.0pre1, to be exact! This will be
followed by the full release of 13.2.0 in the coming weeks.
  
The highlights of this release are:
  
  * Twisted now includes a HostnameEndpoint implementation which uses IPv4 and
    IPv6 in parallel, speeding up the connection by using whichever connects
    first (the 'Happy Eyeballs'/RFC 6555 algorithm). (#4859)
  
  * Improved support for Cancellable Deferreds by kaizhang, our GSoC student.
    (#4320, #6532, #6572, #6639)
  
  * Improved Twisted.Mail documentation by shira, our Outreach Program for Women
    intern. (#6649, #6652)
  
  * twistd now waits for the application to start successfully before exiting
    after daemonization. (#823)
  
  * SSL server endpoint string descriptions now support the specification of
    chain certificates. (#6499)
  
  * Over 70 closed tickets since 13.1.0.
  
For more information, check the NEWS file (link provided below).
  
The pre-release tarballs can be found at the link below - please download them
and test them as much as you can.
  
Tarballs:           http://twistedmatrix.com/Releases/pre/13.2.0pre1/
NEWS.txt:           http://twistedmatrix.com/Releases/pre/13.2.0pre1/NEWS.txt
  
Twisted Regards,
HawkOwl




From orestis at orestis.gr  Tue Oct 22 01:41:08 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Tue, 22 Oct 2013 10:41:08 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
Message-ID: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>

On 21 Οκτ 2013, at 10:32 μ.μ., Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:
> 
>> Hello,
>> 
>> Short form of the question:
>> 
>> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?
> 
> I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.

Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:

os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
application = django.core.handlers.wsgi.WSGIHandler()

wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), application)
resource = Root(wsgi_resource)
# this could probably be automatically inferred from settings.py
resource.putChild('static', File(...))
resource.putChild('uploaded', File(...))
# other stuff
site = server.Site(resource)
reactor.listenTCP(8000, site)
reactor.run()

>> Are there any inherent drawbacks in using Twisted for this use case?
> 
> Nope.  Twisted is the best :-).
> 
>> Long form of the question:
>> 
>> These days to get a reasonably feature-full python web stack deployed you need to have a lot of 3rd-party libraries.
>> 
>> The bare minimum looks probably like so:
>> 
>> 1. Your web-framework of choice, like Django
>> 2. Some kind of WSGI container, like gunicorn
>> 3. A static file server, like nginx
>> 4. Some kind of database [off-topic for this message]
>> 
>> Additionally, you might want:
>> 
>> * Celery
>> * Redis
>> * Cron
>> * Something for web sockets or similar technology
>> * … and so on
>> 
>> In my experience, Twisted can be used to replace a lot of those use cases:
>> 
>> * It has a WSGI container
>> * It has a static web server
>> * It can be used for other long-running tasks 
>> 
>> I'd like to know if there is some kind of inherent drawback of using Twisted to fill those areas. My use case deals with many small intranet-like deployments of web applications, and I'd like to streamline the stack as much as possible. I believe that with the newly-released Crochet someone could even write a Django extension to replace `runserver` with something more production-oriented.
> 
> If you hit any problems, they're bugs, report them and they'll get fixed.
> 
> Please do this.  I even gave a talk about this at DjangoCon a couple of years ago:
> 
> <http://blip.tv/djangocon/keynote-glyph-lefkowitz-5573264>

That was interesting to watch - I wonder if you know whether things have been improved since then. 

Here's a thought experiment - I'd like to keep URL routing 100% in Django for anything that hits the DB. I have some code that needs to spawn an external process to generate an image on-demand (with a layer of caching on top). In the past I defined a Twisted.Web handler for that. Could I now expose an internal API that (through Crochet?) do the spawnProcess dance and come back with image data that Django could then handle internally (store in a file, whatever). How would the threaded WSGI container deal with the blocking request (not really blocking, but that request would stall until the Deferred would be fired).


> -glyph
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131022/7833c3c9/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Oct 22 06:38:50 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 22 Oct 2013 12:38:50 -0000
Subject: [Twisted-Python] Twisted as a full solution for web hosting
 [WSGI + other]
In-Reply-To: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
Message-ID: <20131022123850.8627.826066756.divmod.xquotient.29@top>

On 07:41 am, orestis at orestis.gr wrote:
>On 21 Οκτ 2013, at 10:32 μ.μ., Glyph <glyph at twistedmatrix.com> wrote:
>>
>>On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> 
>>wrote:
>>>Hello,
>>>
>>>Short form of the question:
>>>
>>>Are people using Twisted to host WSGI applications AND serve static 
>>>files AND replace celery/redis/other?
>>
>>I'm not personally using it as a WSGI host, but otherwise, yes, a 
>>full-stack application container speaking multiple protocols.
>
>Any pointers on how to best use this in combination with WSGI/Django? 
>In the past I had a combination of twisted-web (for /static and /media) 
>and wsgi host (for everything else), all running under the same 
>Service. Essentially:
>
>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
>application = django.core.handlers.wsgi.WSGIHandler()
>
>wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), 
>application)
>resource = Root(wsgi_resource)
># this could probably be automatically inferred from settings.py
>resource.putChild('static', File(...))
>resource.putChild('uploaded', File(...))
># other stuff
>site = server.Site(resource)
>reactor.listenTCP(8000, site)
>reactor.run()

This looks about like I'd expect (if my guess that `Root` is an 
`IResource` that knows how to split dispatch between the WSGI resource 
and its other children).  If you have any suggestions for improving the 
experience please share them. :)
>[snip]
>
>Here's a thought experiment - I'd like to keep URL routing 100% in 
>Django for anything that hits the DB. I have some code that needs to 
>spawn an external process to generate an image on-demand (with a layer 
>of caching on top). In the past I defined a Twisted.Web handler for 
>that. Could I now expose an internal API that (through Crochet?) do the 
>spawnProcess dance and come back with image data that Django could then 
>handle internally (store in a file, whatever). How would the threaded 
>WSGI container deal with the blocking request (not really blocking, but 
>that request would stall until the Deferred would be fired).

It will produce roughly the same results as you'd get if you used any 
other WSGI container: one of the threads in the thread pool will be kept 
unavailable as it waits for the result.  This will have the usual 
consequence: if your threadpool has a max of N threads and you receive N 
requests that need to do this, the N+1th request that needs to be 
handled by the WSGI part of your server won't be handled until one of 
the previous requests completes (completion frees up one thread which is 
then used to handle the N+1th request).

The only difference might be that since you also have non-WSGI content 
(all of your static content) even when your thread pool is completely in 
use requests for static content will still be satisfied right away. 
However, if you previously had a WSGI+lighttpd/whatever then you 
probably already had this property as well.

Put another way, Twisted's WSGI container is still just a WSGI 
container.  Fortunately Twisted has other pieces aside from a WSGI 
container. :)

Jean-Paul



From haggardii at gmail.com  Tue Oct 22 06:52:21 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Tue, 22 Oct 2013 06:52:21 -0600
Subject: [Twisted-Python] Twisted as a full solution for web hosting
 [WSGI + other]
In-Reply-To: <20131022123850.8627.826066756.divmod.xquotient.29@top>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <20131022123850.8627.826066756.divmod.xquotient.29@top>
Message-ID: <CAL+xXwPnkr4qxs1z-CChw0yiNRiZFCitFrvuPR87Jibcf9iTsA@mail.gmail.com>

On Tue, Oct 22, 2013 at 6:38 AM,  <exarkun at twistedmatrix.com> wrote:
[snip]
>
> It will produce roughly the same results as you'd get if you used any other
> WSGI container: one of the threads in the thread pool will be kept
> unavailable as it waits for the result.  This will have the usual
> consequence: if your threadpool has a max of N threads and you receive N
> requests that need to do this, the N+1th request that needs to be handled by
> the WSGI part of your server won't be handled until one of the previous
> requests completes (completion frees up one thread which is then used to
> handle the N+1th request).
[snip]

It is "roughly" the same, but it may also be better.  We recently
replaced flup with Twisted as our WSGI container.  With traffic
spikes, flup would start dropping requests because our WSGI app is too
slow, resulting in 500 errors for our users.  With Twisted as the WSGI
container, we no longer see the same 500 errors.  Eventually, all
requests finish.  I recommend Twisted as a production WSGI container.

Matt Haggard



From orestis at orestis.gr  Tue Oct 22 06:58:45 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Tue, 22 Oct 2013 15:58:45 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <20131022123850.8627.826066756.divmod.xquotient.29@top>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <20131022123850.8627.826066756.divmod.xquotient.29@top>
Message-ID: <3FB7C1B3-4A13-42D1-A212-7B883747AE96@orestis.gr>


On 22 Οκτ 2013, at 3:38 μ.μ., exarkun at twistedmatrix.com wrote:

> On 07:41 am, orestis at orestis.gr wrote:
>> On 21 Οκτ 2013, at 10:32 μ.μ., Glyph <glyph at twistedmatrix.com> wrote:
>>> 
>>> On Oct 20, 2013, at 2:21 AM, Orestis Markou <orestis at orestis.gr> wrote:
>>>> Hello,
>>>> 
>>>> Short form of the question:
>>>> 
>>>> Are people using Twisted to host WSGI applications AND serve static files AND replace celery/redis/other?
>>> 
>>> I'm not personally using it as a WSGI host, but otherwise, yes, a full-stack application container speaking multiple protocols.
>> 
>> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:
>> 
>> os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
>> application = django.core.handlers.wsgi.WSGIHandler()
>> 
>> wsgi_resource = WSGIResource(reactor, reactor.getThreadPool(), application)
>> resource = Root(wsgi_resource)
>> # this could probably be automatically inferred from settings.py
>> resource.putChild('static', File(...))
>> resource.putChild('uploaded', File(...))
>> # other stuff
>> site = server.Site(resource)
>> reactor.listenTCP(8000, site)
>> reactor.run()
> 
> This looks about like I'd expect (if my guess that `Root` is an `IResource` that knows how to split dispatch between the WSGI resource and its other children).  If you have any suggestions for improving the experience please share them. :)

For anyone following along:

class Root(resource.Resource):

    def __init__(self, wsgi_resource):
        resource.Resource.__init__(self)
        self.wsgi_resource = wsgi_resource

    def getChild(self, path, request):
        path0 = request.prepath.pop(0)
        request.postpath.insert(0, path0)
        return self.wsgi_resource

I don't remember now if I wrote this code or if I copied it from somewhere.

>> [snip]
>> 
>> Here's a thought experiment - I'd like to keep URL routing 100% in Django for anything that hits the DB. I have some code that needs to spawn an external process to generate an image on-demand (with a layer of caching on top). In the past I defined a Twisted.Web handler for that. Could I now expose an internal API that (through Crochet?) do the spawnProcess dance and come back with image data that Django could then handle internally (store in a file, whatever). How would the threaded WSGI container deal with the blocking request (not really blocking, but that request would stall until the Deferred would be fired).
> 
> It will produce roughly the same results as you'd get if you used any other WSGI container: one of the threads in the thread pool will be kept unavailable as it waits for the result.  This will have the usual consequence: if your threadpool has a max of N threads and you receive N requests that need to do this, the N+1th request that needs to be handled by the WSGI part of your server won't be handled until one of the previous requests completes (completion frees up one thread which is then used to handle the N+1th request).
> 
> The only difference might be that since you also have non-WSGI content (all of your static content) even when your thread pool is completely in use requests for static content will still be satisfied right away. However, if you previously had a WSGI+lighttpd/whatever then you probably already had this property as well.
> 
> Put another way, Twisted's WSGI container is still just a WSGI container.  Fortunately Twisted has other pieces aside from a WSGI container. :)

I wonder if this could be turned on its head - instead of having the Django WSGI app blocking while waiting for a long running thing, field the request beforehand, do whatever long-running thing is required and only then hand over the to the WSGI app to proceed with the HTTP response. This obviously requires a level request processing in Twisted - I'm not sure if it's worth the effort. It could be done by a Twisted-savvy WSGI middleware, perhaps. I'll try to see what I can come up with.

Orestis



> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131022/fe78349b/attachment-0002.html>

From tobias.oberstein at tavendo.de  Tue Oct 22 16:58:03 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Tue, 22 Oct 2013 15:58:03 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <5265C025.7080709@itamarst.org>
Message-ID: <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>

Hi Itamar,

once again Twisted surprises me: it just works!

I have tested a master/child combo over pipe (both Twisted) with a push producer on the sending leg.

It can push around 70MB/s raw binary (16k write size) to the child. Load is evenly on 2 CPU cores each at 80% and stays roughly constant. Memory is flat for both.

This is on some years old Macbook (kqueue reactor .. a little faster than select) - tomorrow I repeat on a beefy system/OS.

I will do more systematic throughput and also latency measurements .. but this is already not bad at all.

Moreso: I really am curious now how that works under the hood, since the pausing/resuming seems to be upper/lower watermark controlled .. it'll resume the producer before the consumer starves. As it should be;)

Background: this is part of experiments in preparation for a multi-core capable Autobahn based message broker ..

Takeaway: Next time I don't waste time on the internet reading half-baked posts, but just hack away;)

/Tobias

PS: The following is actually slower than above master/slave pair .. which I also didn't expect:

tobias-obersteins-macbook-pro-2:masterchild oberstet$ time dd if=/dev/zero bs=1k count=1000000 | wc -c
1000000+0 records in
1000000+0 records out
1024000000 bytes transferred in 17.454178 secs (58667902 bytes/sec)
 1024000000

real    0m17.460s
user    0m18.389s
sys    0m7.729s



On 22.10.13 02:00, "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:


On 10/21/2013 04:48 PM, Tobias Oberstein wrote:


Flow-control for Pipes / Unix Domains Sockets? Hi,

 with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

 Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

 a) Unix Domain sockets
 b) Pipes (spawnProcess)


 I would expect transport.registerProducer to work with both.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131022/d39cb099/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Oct 22 17:59:34 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 22 Oct 2013 16:59:34 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Announcement
In-Reply-To: <52662046.1010508@atleastfornow.net>
References: <52662046.1010508@atleastfornow.net>
Message-ID: <22F6C00E-F014-40E1-8597-490C454E7C95@twistedmatrix.com>

On Oct 21, 2013, at 11:50 PM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hello everyone!

Hello HawkOwl!  Congratulations on getting your first Twisted release started, and thank you very much for volunteering to do it!

> I bring news of a Twisted pre-release - 13.2.0pre1, to be exact! This will be
> followed by the full release of 13.2.0 in the coming weeks.
> The highlights of this release are:

>  * Twisted now includes a HostnameEndpoint implementation which uses IPv4 and
>   IPv6 in parallel, speeding up the connection by using whichever connects
>   first (the 'Happy Eyeballs'/RFC 6555 algorithm). (#4859)

Fantastic!  Arguably adding this was one of the central points of the Endpoints API in the first place, this unified "do what I want" endpoint is a big step forward for any clients using Twisted! :-).  It's great to see this finally land.

>  * Improved support for Cancellable Deferreds by kaizhang, our GSoC student.
>   (#4320, #6532, #6572, #6639)
>  * Improved Twisted.Mail documentation by shira, our Outreach Program for Women
>   intern. (#6649, #6652)

Clearly our participation in these programs is continuing to be a huge benefit to Twisted.

>  * twistd now waits for the application to start successfully before exiting
>   after daemonization. (#823)
>  * SSL server endpoint string descriptions now support the specification of
>   chain certificates. (#6499)

I can't wait to get this deployed on twistedmatrix.com itself ;-).

-glyph


From sank.daniel at gmail.com  Wed Oct 23 00:11:57 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 22 Oct 2013 23:11:57 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
Message-ID: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>

Dear Twisted readers,

I am trying to learn to ins and outs of twisted.spread.pb with the
official howto as my main point of reference. When I get to the
section "Managing Clients of Perspectives" the first sentence reads

"In all the IPerspective uses we have shown so far, we ignored the
mind argument and created a new Avatar for every connection. This is
usually an easy design choice, and it works well for simple cases."

This seems odd because nothing in the howto up to this point mentions
a "mind argument". Also IPerspective and Avatar are only briefly
introduced but never used in example up to this point.

I'm not good enough with pb yet to want to suggest an alteration but
this confused me enough that I thought I should bring it up.

Yours sincerely
-- 
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117
(805)893-3899



From sank.daniel at gmail.com  Wed Oct 23 00:33:43 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Tue, 22 Oct 2013 23:33:43 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
Message-ID: <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>

I should clarify something:

I understand that Avatar and Mind are introduced in the cred section.
I'll venture to suggest that the pb section simply refers and links to
that.



From glyph at twistedmatrix.com  Wed Oct 23 02:13:56 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 01:13:56 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
Message-ID: <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>

On Oct 22, 2013, at 11:33 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> I should clarify something:
> 
> I understand that Avatar and Mind are introduced in the cred section.
> I'll venture to suggest that the pb section simply refers and links to
> that.

This sounds like a clear bug in the documentation, and even if you don't have a fix proposed yet, please feel free to file a documentation ticket for it.  The more detail you have about why you found it confusing, the better.

-glyph




From glyph at twistedmatrix.com  Wed Oct 23 02:21:43 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 01:21:43 -0700
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
Message-ID: <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>

On Oct 22, 2013, at 12:41 AM, Orestis Markou <orestis at orestis.gr> wrote:

> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:

Have you seen <https://github.com/clemesha/twisted-wsgi-django/blob/master/server.py>?  It seems like maybe that repository could use a little maintenance, maybe a couple of command-line options, to do the (fairly default) thing that you seem to want to do :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/e1b383ae/attachment-0002.html>

From orestis at orestis.gr  Wed Oct 23 02:33:13 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Wed, 23 Oct 2013 11:33:13 +0300
Subject: [Twisted-Python] Twisted as a full solution for web hosting
	[WSGI + other]
In-Reply-To: <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>
References: <E0C1BC10-C50B-4C9D-934C-FD7D2AAF4D7D@orestis.gr>
 <2F9E4642-B3E6-4D68-B1DA-548A373AAD90@twistedmatrix.com>
 <E7796A67-F68E-43DC-BB75-F404CC7D47AE@orestis.gr>
 <F016423F-6357-4711-A094-CE8FEDAC0812@twistedmatrix.com>
Message-ID: <A2D4C2C9-E20C-4D25-B551-AA18B4E19CFA@orestis.gr>


On 23 Οκτ 2013, at 11:21 π.μ., Glyph <glyph at twistedmatrix.com> wrote:

> On Oct 22, 2013, at 12:41 AM, Orestis Markou <orestis at orestis.gr> wrote:
> 
>> Any pointers on how to best use this in combination with WSGI/Django? In the past I had a combination of twisted-web (for /static and /media) and wsgi host (for everything else), all running under the same Service. Essentially:
> 
> Have you seen <https://github.com/clemesha/twisted-wsgi-django/blob/master/server.py>?  It seems like maybe that repository could use a little maintenance, maybe a couple of command-line options, to do the (fairly default) thing that you seem to want to do :-).

Bookmarked! I will probably need to really scratch the itch in a couple of weeks time. I'll update the list when I have some results. 

Orestis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/a03224b5/attachment-0002.html>

From tobias.oberstein at tavendo.de  Wed Oct 23 04:55:59 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 23 Oct 2013 03:55:59 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
In-Reply-To: <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>
References: <5265C025.7080709@itamarst.org>
 <CE8CCF9B.1CE56%tobias.oberstein@tavendo.de>
Message-ID: <634914A010D0B943A035D226786325D44469DC5EFD@EXVMBX020-12.exch020.serverdata.net>

Ok, I've pimped up the test

https://github.com/oberstet/scratchbox/blob/master/python/twisted/masterchild/streaming_master.py
https://github.com/oberstet/scratchbox/blob/master/python/twisted/masterchild/streaming_child.py

and running on Ubuntu LTS 12.04, 64 Bit, Core i7 3.4GHz, epoll reactor, I was able to get it up to

Master => Child : 450MB/s
[94%/100% CPU load)

Master <=> Child (full-duplex echo): 200MB/s
[95%/100% CPU load)

Nifty.


Now, it might be that I can push even higher by adjusting the pipe buffer sizes (there is a Linux fcntl for that .. F_SETPIPE_SZ).

Q: How do I get at the FDs of the underlying pipes to the spawned process in the parent?

reactor.spawnProcess returns an object implementing IProcessTransport
However, that does not seem to provide access to the underlying pipes (and their FDs in the parent)

Looking at
http://twistedmatrix.com/trac/browser/tags/releases/twisted-13.1.0/twisted/internet/process.py
I can get it, but not via official API, right?

===

Windows: It does not work at all. Tested "select" and "iocp" reactors. It just hangs doing nothing.



Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Tobias Oberstein
Gesendet: Mittwoch, 23. Oktober 2013 00:58
An: Twisted discussion
Betreff: Re: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?

Hi Itamar,

once again Twisted surprises me: it just works!

I have tested a master/child combo over pipe (both Twisted) with a push producer on the sending leg.

It can push around 70MB/s raw binary (16k write size) to the child. Load is evenly on 2 CPU cores each at 80% and stays roughly constant. Memory is flat for both.

This is on some years old Macbook (kqueue reactor .. a little faster than select) - tomorrow I repeat on a beefy system/OS.

I will do more systematic throughput and also latency measurements .. but this is already not bad at all.

Moreso: I really am curious now how that works under the hood, since the pausing/resuming seems to be upper/lower watermark controlled .. it'll resume the producer before the consumer starves. As it should be;)

Background: this is part of experiments in preparation for a multi-core capable Autobahn based message broker ..

Takeaway: Next time I don't waste time on the internet reading half-baked posts, but just hack away;)

/Tobias

PS: The following is actually slower than above master/slave pair .. which I also didn't expect:

tobias-obersteins-macbook-pro-2:masterchild oberstet$ time dd if=/dev/zero bs=1k count=1000000 | wc -c
1000000+0 records in
1000000+0 records out
1024000000 bytes transferred in 17.454178 secs (58667902 bytes/sec)
 1024000000

real    0m17.460s
user    0m18.389s
sys    0m7.729s



On 22.10.13 02:00, "Itamar Turner-Trauring" <itamar at itamarst.org> wrote:

On 10/21/2013 04:48 PM, Tobias Oberstein wrote:


Flow-control for Pipes / Unix Domains Sockets? Hi,

 with TCP (either remote or loopback) I can have flow-control using the producer-consumer machinery that Twisted provides.

 Is that (flow-control / producer-consumer) also available (and practically usable/recommended) with:

 a) Unix Domain sockets
 b) Pipes (spawnProcess)


 I would expect transport.registerProducer to work with both.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/225fe338/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Oct 23 08:07:19 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 23 Oct 2013 22:07:19 +0800
Subject: [Twisted-Python] Twisted Users on Windows XP
Message-ID: <5267D817.8070006@atleastfornow.net>

Hi everyone,

I have raised the question of Windows XP support in Twisted earlier 
today in #twisted-dev. Since the Microsoft "extended support" cut-off is 
within six or so months, and there is continuing trouble with the 
XP-based buildslave, I think it would be a good idea to get a figure of 
how many Windows XP users there are currently using Twisted, so informed 
decisions can be made in regards to supporting it.

If you use Twisted on Windows XP, please comment on ticket #6798 [1], so 
we can get an idea of the usage numbers.

-hawkowl

[1] https://twistedmatrix.com/trac/ticket/6798



From grindizer at gmail.com  Wed Oct 23 09:46:24 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 23 Oct 2013 17:46:24 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>

Hi everybody

I a came across a surprising problem when using the epoll based reactor.
(ticket here https://twistedmatrix.com/trac/ticket/6796)

As you can see on the ticket, the epoll object seems to share some state
even after fork.
Which means even after having forked the process, making some changes to
the inherited epoll object in one process may impact the one existing in
another process !

This problem is only related to epoll based reactor, poll and select behave
correctly.
I'm aware that some may say that this in not a twisted related problem (but
an epoll issue), but I'm addressing my question here to try to figure out
what would be the best workaround for this problem in a twisted based
project ?

And for information this is what I have already tryed:
- I though about using poll or select reactor, but this is not possible,
cause as i'm writing a library I do not decide which reactor will be
installed by the person who want to use it.
(Besides as epoll is now the default reactor installed, I certainly want my
library to work with it !)

- Using spawnProcess as mentioned in the ticket comment, is not an option
too, in my case, I need to share some state between the main process and
subprocess. (I have on object in main process space that I want to inherit
in all subprocess)

- I (desperately) tryed to re-initialize the reactor._poller object after
each fork to set it with a new object, but it was just a very bad idea ! :)

Thank you, in advance, for any possible clue !
(for information, my project is here https://github.com/Grindizer/scaletix)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/62e8ad1a/attachment-0002.html>

From tom.sheffler at gmail.com  Wed Oct 23 10:36:56 2013
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Wed, 23 Oct 2013 09:36:56 -0700
Subject: [Twisted-Python] Flow-control for Pipes / Unix Domains Sockets?
Message-ID: <CAMBtMcv4xBgCpz+aKy0veGWpkh6+prSNqk+rx7YJROz-1EWfmw@mail.gmail.com>

Tobias and Itamar -
Thanks for sharing the conversation and statistics.  Very interesting!

-Tom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/e6b94f89/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Oct 23 10:39:03 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Oct 2013 17:39:03 +0100
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <5267FBA7.2050606@imperial.ac.uk>

On 23/10/13 16:46, Flint wrote:
> Hi everybody
>
> I a came across a surprising problem when using the epoll based reactor.
> (ticket here https://twistedmatrix.com/trac/ticket/6796)
>
> As you can see on the ticket, the epoll object seems to share some state
> even after fork.
> Which means even after having forked the process, making some changes to
> the inherited epoll object in one process may impact the one existing in
> another process !
>
> This problem is only related to epoll based reactor, poll and select
> behave correctly.
> I'm aware that some may say that this in not a twisted related problem
> (but an epoll issue), but I'm addressing my question here to try to
> figure out what would be the best workaround for this problem in a
> twisted based project ?

The problem is that you're sharing the epoll object (and thus the 
underlying epoll FD, and associated state) with the multiprocessing 
child processes.

Either:

  1. Don't use multiprocessing
  2. Arrange for the epoll object (or FD) to be closed after fork, but 
before exec, so that the child process can't fiddle with it
  3. Create the epoll object after starting the multiprocessing children

IMHO Twisted and multiprocessing are not good together.



From tobias.oberstein at tavendo.de  Wed Oct 23 10:44:49 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 23 Oct 2013 09:44:49 -0700
Subject: [Twisted-Python] epoll keep sharing state between process
	even	after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469DC612F@EXVMBX020-12.exch020.serverdata.net>

Hi,

this is funny, I am also working in this area currently.

Though I use spawnProcess for various reasons, not multiprocessing - which is also the recommendation on the ticket. And it makes sense.

Nevertheless I'd be interested what happens if you try that on a kqueue-reactor OS .. ideally FreeBSD. OSX kqueue isn't the greatest.

/Tobias

Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] Im Auftrag von Flint
Gesendet: Mittwoch, 23. Oktober 2013 17:46
An: twisted-python at twistedmatrix.com
Betreff: [Twisted-Python] epoll keep sharing state between process even after fork.

Hi everybody

I a came across a surprising problem when using the epoll based reactor.
(ticket here https://twistedmatrix.com/trac/ticket/6796)

As you can see on the ticket, the epoll object seems to share some state even after fork.
Which means even after having forked the process, making some changes to the inherited epoll object in one process may impact the one existing in another process !

This problem is only related to epoll based reactor, poll and select behave correctly.
I'm aware that some may say that this in not a twisted related problem (but an epoll issue), but I'm addressing my question here to try to figure out what would be the best workaround for this problem in a twisted based project ?

And for information this is what I have already tryed:
- I though about using poll or select reactor, but this is not possible, cause as i'm writing a library I do not decide which reactor will be installed by the person who want to use it.
(Besides as epoll is now the default reactor installed, I certainly want my library to work with it !)

- Using spawnProcess as mentioned in the ticket comment, is not an option too, in my case, I need to share some state between the main process and subprocess. (I have on object in main process space that I want to inherit in all subprocess)

- I (desperately) tryed to re-initialize the reactor._poller object after each fork to set it with a new object, but it was just a very bad idea ! :)

Thank you, in advance, for any possible clue !
(for information, my project is here https://github.com/Grindizer/scaletix)






-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/685d2b7c/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Oct 23 10:50:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 23 Oct 2013 17:50:36 +0100
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <5267FBA7.2050606@imperial.ac.uk>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk>
Message-ID: <5267FE5C.9090807@imperial.ac.uk>

On 23/10/13 17:39, Phil Mayers wrote:

>   2. Arrange for the epoll object (or FD) to be closed after fork, but
> before exec, so that the child process can't fiddle with it

See also:

http://bugs.python.org/issue8713

...which suggests Python 3.4 added fork+exec support to multiprocessing. 
On Unix and older Python versions, you're stuck with plain fork and all 
the attendant horribleness.

This is a multiprocessing bug IMHO.



From exarkun at twistedmatrix.com  Wed Oct 23 11:31:55 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 23 Oct 2013 17:31:55 -0000
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
Message-ID: <20131023173155.8627.1410787219.divmod.xquotient.38@top>

On 03:46 pm, grindizer at gmail.com wrote:
>Hi everybody
>
>I a came across a surprising problem when using the epoll based 
>reactor.
>(ticket here https://twistedmatrix.com/trac/ticket/6796)
>
>As you can see on the ticket, the epoll object seems to share some 
>state
>even after fork.
>
>[snip]
>
>- Using spawnProcess as mentioned in the ticket comment, is not an 
>option
>too, in my case, I need to share some state between the main process 
>and
>subprocess. (I have on object in main process space that I want to 
>inherit
>in all subprocess)

This doesn't really explain why you can't use `spawnProcess`.  There are 
other ways to share state between processes.  Perhaps if you describe 
the object you have someone can suggest a way to share it that will 
still satisfy your requirements without requiring that you use the 
`multiprocessing` module.

Jean-Paul



From glyph at twistedmatrix.com  Wed Oct 23 11:51:39 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 10:51:39 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <5267D817.8070006@atleastfornow.net>
References: <5267D817.8070006@atleastfornow.net>
Message-ID: <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>


On Oct 23, 2013, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> Hi everyone,
> 
> I have raised the question of Windows XP support in Twisted earlier today in #twisted-dev. Since the Microsoft "extended support" cut-off is within six or so months, and there is continuing trouble with the XP-based buildslave, I think it would be a good idea to get a figure of how many Windows XP users there are currently using Twisted, so informed decisions can be made in regards to supporting it.
> 
> If you use Twisted on Windows XP, please comment on ticket #6798 [1], so we can get an idea of the usage numbers.
> 
> -hawkowl


I have 2 concerns with XP support; one is that an existing user will be unable to upgrade to a new version of Twisted, but an equally valid concern is that Twisted would be unsuitable for a *new* application because of a requirement to run on XP.  And although Microsoft doesn't support it, there are still millions and millions of computers with it installed.

<https://en.wikipedia.org/wiki/Usage_share_of_operating_systems>

Perhaps more interesting than that ~30% number, though, is the fact that ~7% of the Steam user base is still actively using XP on machines they play games on:

<http://store.steampowered.com/hwsurvey>

And I'd definitely like Twisted to stay true to its roots and remain an attractive option for game developers.  I'm pretty sure no games on the Steam store currently use Twisted, but I would like that to change ;-).  "First, sacrifice 7% of your potential revenue" seems like a bad starting point for the pitch for why Twisted would be great to use in their game.

Nevertheless I can definitely understand the appeal of dropping support for XP, too.  I really hope that the "extended support" cut-off is going to provoke a massive drop in those numbers, but somehow I suspect that a substantial fraction of the people on those systems are going to keep using them until they physically fail, and do not know or care whether Microsoft "supports" them.

Also, aren't the majority of the problems on the Windows buildslave just race conditions that we don't seem to hit with our other builders right now?  It would be good to have it be regularly green *before* it's decommissioned.  (If you're referring to operational issues keeping it running, then, by all means carry on.)

-glyph




From jasonjwwilliams at gmail.com  Wed Oct 23 11:56:40 2013
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 23 Oct 2013 10:56:40 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
Message-ID: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>

If you're still running XP isn't it pretty unlikely you have hardware modern enough to power a Steam game in the first place?

-J

Sent via iPhone

Is your email Premiere?

> On Oct 23, 2013, at 10:51, Glyph <glyph at twistedmatrix.com> wrote:
> 
> 
>> On Oct 23, 2013, at 7:07 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:
>> 
>> Hi everyone,
>> 
>> I have raised the question of Windows XP support in Twisted earlier today in #twisted-dev. Since the Microsoft "extended support" cut-off is within six or so months, and there is continuing trouble with the XP-based buildslave, I think it would be a good idea to get a figure of how many Windows XP users there are currently using Twisted, so informed decisions can be made in regards to supporting it.
>> 
>> If you use Twisted on Windows XP, please comment on ticket #6798 [1], so we can get an idea of the usage numbers.
>> 
>> -hawkowl
> 
> 
> I have 2 concerns with XP support; one is that an existing user will be unable to upgrade to a new version of Twisted, but an equally valid concern is that Twisted would be unsuitable for a *new* application because of a requirement to run on XP.  And although Microsoft doesn't support it, there are still millions and millions of computers with it installed.
> 
> <https://en.wikipedia.org/wiki/Usage_share_of_operating_systems>
> 
> Perhaps more interesting than that ~30% number, though, is the fact that ~7% of the Steam user base is still actively using XP on machines they play games on:
> 
> <http://store.steampowered.com/hwsurvey>
> 
> And I'd definitely like Twisted to stay true to its roots and remain an attractive option for game developers.  I'm pretty sure no games on the Steam store currently use Twisted, but I would like that to change ;-).  "First, sacrifice 7% of your potential revenue" seems like a bad starting point for the pitch for why Twisted would be great to use in their game.
> 
> Nevertheless I can definitely understand the appeal of dropping support for XP, too.  I really hope that the "extended support" cut-off is going to provoke a massive drop in those numbers, but somehow I suspect that a substantial fraction of the people on those systems are going to keep using them until they physically fail, and do not know or care whether Microsoft "supports" them.
> 
> Also, aren't the majority of the problems on the Windows buildslave just race conditions that we don't seem to hit with our other builders right now?  It would be good to have it be regularly green *before* it's decommissioned.  (If you're referring to operational issues keeping it running, then, by all means carry on.)
> 
> -glyph
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From sank.daniel at gmail.com  Wed Oct 23 12:20:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 23 Oct 2013 11:20:05 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
Message-ID: <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>

> If you're still running XP isn't it pretty unlikely you have
> hardware modern enough to power a Steam game in the
> first place?

You'd be surprised. I have an XP machine at work because I never
bothered to buy a new license for Win7, but I've upgraded the hardware
reasonably recently. I have no idea if home users are in the same
situation.



From lloyd at passcal.nmt.edu  Wed Oct 23 15:41:27 2013
From: lloyd at passcal.nmt.edu (Lloyd Carothers)
Date: Wed, 23 Oct 2013 15:41:27 -0600
Subject: [Twisted-Python] FTP without the protocol
Message-ID: <52684287.5000609@passcal.nmt.edu>

Hi, all,
  I have many users that need to send data to me for archival. Large 
data sets in many files (10,000's of files 100s of GB per file set.) Up 
to this point the users use a ftp client wrapper that uploads data to my 
FTP server. This has become too problematic with firewalls etc. and I 
now have the time to write a new client/server of my own; A ftp server 
for uploads only.

  I'm looking into using twisted, but am very open to other 
suggestions/solutions.

  For such a use case I'm surprised not to find an example. I think I 
just need a push in the right direction. Is producers/consumers the 
right approach?

Thanks in advance,
  Lloyd




From mithrandi at mithrandi.net  Wed Oct 23 16:16:18 2013
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Thu, 24 Oct 2013 00:16:18 +0200
Subject: [Twisted-Python] Buildslave outage
Message-ID: <CAMcKhMT=fgf1zk1g3DrqCJr0F9cchHP0bgxD5AtoDEPU_wewgA@mail.gmail.com>

Hi all,

Sorry for the short notice. My buildslaves (bot-idnar-debian{,64})
will be down for the next 8 hours or so, due to the host systems being
moved to another datacentre.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From werner at thieprojects.ch  Wed Oct 23 16:18:50 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 23 Oct 2013 12:18:50 -1000
Subject: [Twisted-Python] twisted & USB
Message-ID: <52684B4A.1010106@thieprojects.ch>

Aloha

is anybody aware of code allowing to attach to USB devices with twisted?

The only piece of code I found is the twistification of pywws (Weather 
Station) on

https://gist.github.com/claws/2464017

The code works, but I'm scratching my head if there is a better solution 
to this problem, although USB across platforms seems to be a monster to 
tackle.

Werner



From glyph at twistedmatrix.com  Wed Oct 23 16:50:41 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 15:50:41 -0700
Subject: [Twisted-Python] twisted & USB
In-Reply-To: <52684B4A.1010106@thieprojects.ch>
References: <52684B4A.1010106@thieprojects.ch>
Message-ID: <230A4EB6-4990-485D-AF8D-F1DEFEDD231E@twistedmatrix.com>


On Oct 23, 2013, at 3:18 PM, Werner Thie <werner at thieprojects.ch> wrote:

> Aloha
> 
> is anybody aware of code allowing to attach to USB devices with twisted?
> 
> The only piece of code I found is the twistification of pywws (Weather Station) on
> 
> https://gist.github.com/claws/2464017
> 
> The code works, but I'm scratching my head if there is a better solution to this problem, although USB across platforms seems to be a monster to tackle.

Sounds like this code ought to be extracted into a, let's say, txUSB project, then.  Seems like 'weather_station.py' is the wrong module for a class called 'UsbDevice', at any rate :-).

I'm not aware of anyone else working on such a thing yet.

-glyph




From glyph at twistedmatrix.com  Wed Oct 23 16:53:53 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 23 Oct 2013 15:53:53 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
Message-ID: <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>

On Oct 23, 2013, at 10:56 AM, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:

> If you're still running XP isn't it pretty unlikely you have hardware modern enough to power a Steam game in the first place?

Not according to the statistics that Valve themselves publish about Steam.  Did you read the link in the original email?

> Is your email Premiere?

I'm not sure what you mean.  My email is not the leader of a foreign country or anything, and I don't think that my email is the best email ever written or read.  Why do you ask?

-glyph




From jasonjwwilliams at gmail.com  Wed Oct 23 17:16:30 2013
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 23 Oct 2013 16:16:30 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <53C3F5EE-9A92-4F87-8C53-1CF0E37F2537@twistedmatrix.com>
Message-ID: <CAHZAEpeQTTbgDkWu2nzBOP=J3Zp8bUbGkXq2NonVvXQK4josKw@mail.gmail.com>

>
> Not according to the statistics that Valve themselves publish about Steam.
>  Did you read the link in the original email?
>

Yeah, I didn't see a correlation though of what kind of hardware those
folks were running. They could be running ancient stuff and are prepared to
deal with the consequences of running XP.


> > Is your email Premiere?
>
> I'm not sure what you mean.  My email is not the leader of a foreign
> country or anything, and I don't think that my email is the best email ever
> written or read.  Why do you ask?


Wasn't a real question. I used my office e-mail client and it added a
signature.

-J
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131023/c818cf75/attachment-0002.html>

From db3l.net at gmail.com  Wed Oct 23 19:30:13 2013
From: db3l.net at gmail.com (David Bolen)
Date: Wed, 23 Oct 2013 21:30:13 -0400
Subject: [Twisted-Python] FTP without the protocol
References: <52684287.5000609@passcal.nmt.edu>
Message-ID: <m2hac7ihga.fsf@valheru.db3l.homeip.net>

Lloyd Carothers <lloyd at passcal.nmt.edu> writes:

>  For such a use case I'm surprised not to find an example. I think I
> just need a push in the right direction. Is producers/consumers the
> right approach?

It's a bit dated at this point, but maybe this might spark some ideas:
   http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html

It's producer/consumer, which yes, is very efficient for streaming
transfers.  The code the post was based on is actually still in active
use, but against an older twisted 2.5.0 installation, so I'm not sure
how much tweaking it may need to adjust to the latest Twisted version.

In practice this is paired with a separate set of code that implements a
PB-based control channel over which the files to upload are negotiated.
The binary transfer itself just has a small header in front of the data
containing some authentication and size information, so it's derived
from LineReceiver and switches to raw mode for the transfer.  While I
tend to prefer a separate control channel (though it certainly doesn't
need to be PB based), you could also in-line the control information (so
it becomes more like an HTTP transfer) if you wished.

BTW, passive FTP should be quite firewall friendly, unless you're
talking about really locked down locations where the only thing allowed
out is HTTP or something.  But if you're not using passive mode yet,
that might also be a quicker fix to your existing code base.

-- David




From sank.daniel at gmail.com  Thu Oct 24 00:08:21 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 23 Oct 2013 23:08:21 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
Message-ID: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>

I think I have figured out what's wrong with the documentation. Some
of the chapters are out of order. It looks like the logical flow was
broken as new chapters were inserted. For example, the chapter
"Authentication with Perspective Broker" refers to "Using Perspective
Broker" as the "previous chapter" whereas this is not how the chapters
are actually currently ordered.

> please feel free to file a documentation ticket for it

I just tried to register so I could do that. When I clicked on the
register button after filling out the username/password fields my
browser (firefox) brought up a notice that the security certificate is
invalid because of unavailable issuance chain information. Knowing
absolutely nothing about internet security issues I thought I should
mention this and ask if this is expected behavior.

Sincerely
--
Daniel Sank
Department of Physics
Broida Hall
University of California
Santa Barbara, CA 93117



From tobias.oberstein at tavendo.de  Thu Oct 24 01:02:15 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 00:02:15 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>

> I just tried to register so I could do that. When I clicked on the register button
> after filling out the username/password fields my browser (firefox) brought
> up a notice that the security certificate is invalid because of unavailable
> issuance chain information. Knowing absolutely nothing about internet
> security issues I thought I should mention this and ask if this is expected
> behavior.

I wouldn't call that expected behavior, since

a) the certificate used on twistedmatrix.com contains (as it should) intermediate CA certs also (see attachments)

b) Firefox (but not Chrome) is usually able to dynamically retrieve intermediate CA certs to fill in gaps in the certificate chain

Mmmh.

Probably you are on a locked down network where a MITM TLS proxy kicks which rewrites the cert.

If you care, could you open the page in your browser, double click the small "lock icon" left to the "https://" in the address bar and send a screenshot of the dialog shown (as the one attached)?

/Tobias
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard01.png
Type: image/png
Size: 29331 bytes
Desc: Clipboard01.png
URL: </pipermail/twisted-python/attachments/20131024/7dfbbeeb/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard02.png
Type: image/png
Size: 36765 bytes
Desc: Clipboard02.png
URL: </pipermail/twisted-python/attachments/20131024/7dfbbeeb/attachment-0005.png>

From hs at ox.cx  Thu Oct 24 01:13:03 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 09:13:03 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
Message-ID: <F6958A41-7854-4589-9D29-3B079491C5E3@ox.cx>

Am 24.10.2013 um 08:08 schrieb Daniel Sank <sank.daniel at gmail.com>:

> When I clicked on the
> register button after filling out the username/password fields my
> browser (firefox) brought up a notice that the security certificate is
> invalid because of unavailable issuance chain information. Knowing
> absolutely nothing about internet security issues I thought I should
> mention this and ask if this is expected behavior.

This will be fixed as soon as the now-in-prerelease Twisted 13.2 has been deployed to Twisted’s homepage (i.e. hopefully soon). Earlier versions don’t allow the specification of chain certificates unfortunately so it’s up to the browsers to fetch them – or not.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131024/d0c049d0/attachment.sig>

From hs at ox.cx  Thu Oct 24 01:15:50 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 09:15:50 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>

Am 24.10.2013 um 09:02 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>> I just tried to register so I could do that. When I clicked on the register button
>> after filling out the username/password fields my browser (firefox) brought
>> up a notice that the security certificate is invalid because of unavailable
>> issuance chain information. Knowing absolutely nothing about internet
>> security issues I thought I should mention this and ask if this is expected
>> behavior.
> 
> I wouldn't call that expected behavior, since
> 
> a) the certificate used on twistedmatrix.com contains (as it should) intermediate CA certs also (see attachments)

I’m not sure what you mean with “contains”? It certainly *relies* on one but unfortunately doesn’t send it along (yet):

$ openssl s_client -host www.twistedmatrix.com -port 443                                                                                                                                                                                                                                                                                                             
CONNECTED(00000003)
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=27:certificate not trusted
verify return:1
depth=0 /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAddress=postmaster at twistedmatrix.com
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
---
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131024/4ecb2560/attachment.sig>

From tobias.oberstein at tavendo.de  Thu Oct 24 01:48:02 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 00:48:02 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>

Ah, right. Seems Chrome changed it's behavior .. at one point it wasn't able to load intermediate certs .. and hence I assumed from the dialog that Twisted cert has the intermediate cert contained. Wrong.

FWIW, you can manually concatenate certs .. this is what we do (also for StartSSL):

    $ cat myserver_plain_cert.crt > myserver.crt
    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
    $ cat ../ca.pem >> myserver.crt

A concatenated cert like above works today without the new code that is upcoming in Twisted. Which is cool also.

However: this all does not explain (at least I dont understand) why the OP has that issue showing up .. Firefox is able to load intermediate CA certs from the net .. I have seen it .. also for StartSSL certs. Something is breaking this. Maybe it's MITM TLS, maybe they blocked intermediate cert auto-loading, .. dunno.

/Tobias

> -----Ursprüngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Hynek Schlawack
> Gesendet: Donnerstag, 24. Oktober 2013 09:16
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> Am 24.10.2013 um 09:02 schrieb Tobias Oberstein
> <tobias.oberstein at tavendo.de>:
> 
> >> I just tried to register so I could do that. When I clicked on the
> >> register button after filling out the username/password fields my
> >> browser (firefox) brought up a notice that the security certificate
> >> is invalid because of unavailable issuance chain information. Knowing
> >> absolutely nothing about internet security issues I thought I should
> >> mention this and ask if this is expected behavior.
> >
> > I wouldn't call that expected behavior, since
> >
> > a) the certificate used on twistedmatrix.com contains (as it should)
> > intermediate CA certs also (see attachments)
> 
> I'm not sure what you mean with "contains"? It certainly *relies* on one but
> unfortunately doesn't send it along (yet):
> 
> $ openssl s_client -host www.twistedmatrix.com -port 443
> CONNECTED(00000003)
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=20:unable to get local issuer certificate verify return:1
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=27:certificate not trusted verify return:1
> depth=0
> /description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/emailAd
> dress=postmaster at twistedmatrix.com
> verify error:num=21:unable to verify the first certificate verify return:1
> ---
> Certificate chain
>  0
> s:/description=S7lbCt7N2R4t9o8J/C=US/CN=www.twistedmatrix.com/email
> Address=postmaster at twistedmatrix.com
>    i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate
> Signing/CN=StartCom Class 1 Primary Intermediate Server CA
> ---



From hs at ox.cx  Thu Oct 24 02:08:14 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 10:08:14 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>

Am 24.10.2013 um 09:48 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

> FWIW, you can manually concatenate certs .. this is what we do (also for StartSSL):
> 
>    $ cat myserver_plain_cert.crt > myserver.crt
>    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
>    $ cat ../ca.pem >> myserver.crt
> 
> A concatenated cert like above works today without the new code that is upcoming in Twisted. Which is cool also.

That is completely new to me. Are you sure you’re not mixing up Twisted’s behavior with nginx?

If what you say is true, there would have never been the need for #2061 and the monkey patching everyone was doing before it landed. Can you point me at a server where you have deployed TLS like that please?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131024/5e8d5917/attachment.sig>

From tobias.oberstein at tavendo.de  Thu Oct 24 03:10:48 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 02:10:48 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>

> > A concatenated cert like above works today without the new code that is
> upcoming in Twisted. Which is cool also.
> 
> That is completely new to me. Are you sure you're not mixing up Twisted's
> behavior with nginx?
> 
> If what you say is true, there would have never been the need for #2061 and
> the monkey patching everyone was doing before it landed. Can you point me
> at a server where you have deployed TLS like that please?

https://crossbardemo.tavendo.de/ws

This works for me in Chrome, FF and IE. It is Twisted Web / Autobahn. Nothing in front.

Now, using 

openssl s_client -host crossbardemo.tavendo.de -port 443                                                                                                                                                                                                                                                                                                             

spits out errors complaining about "self-signed" cert inside.

This might be because I not only included the StartSSL intermediate CA cert, but also their top-level CA cert (which is obviously self-signed).

Maybe this is wrong, and one should only include up to (but excluding) root CA cert ..

/Tobias



From grindizer at gmail.com  Thu Oct 24 03:13:36 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 11:13:36 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1paRNatz0gstQLf4w4hkZgoXp1xtrSr7EdpCX0_5tKNcew@mail.gmail.com>

>
> On 03:46 pm, grindizer at gmail.com wrote:
> >Hi everybody
> >
> >I a came across a surprising problem when using the epoll based
> >reactor.
> >(ticket here https://twistedmatrix.com/trac/ticket/6796)
> >
> >As you can see on the ticket, the epoll object seems to share some
> >state
> >even after fork.
> >
> >[snip]
> >
> >- Using spawnProcess as mentioned in the ticket comment, is not an
> >option
> >too, in my case, I need to share some state between the main process
> >and
> >subprocess. (I have on object in main process space that I want to
> >inherit
> >in all subprocess)
>
> This doesn't really explain why you can't use `spawnProcess`.  There are
> other ways to share state between processes.  Perhaps if you describe
> the object you have someone can suggest a way to share it that will
> still satisfy your requirements without requiring that you use the
> `multiprocessing` module.
>
> Jean-Paul
>

Hi.

For the moment I share a factory object, but it's the underlying "protocol
class" that is really needed.
The code takes a factory object, and then launch a set of worker/process.
when a connection is made on the parent process, the socket handler will be
sent to one of the process (using sendmsg), the process will then run
reactor.adoptStreamConnection and this is when we need the protocol class.
There is an example of what I would like to achieve here
https://github.com/Grindizer/scaletix the example works with select or poll
reactor.

with spawnProcess I guess the child process will need to somehow import the
factory class and should be given the way to instanciate it ? isn't it ? I
don't know other way to do it actually ?

thankx again.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131024/c81ae05f/attachment-0002.html>

From tobias.oberstein at tavendo.de  Thu Oct 24 03:15:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 02:15:40 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63A9@EXVMBX020-12.exch020.serverdata.net>

that server isnt terrible elegant/complete at the moment .. sorry, we#re right now moving our stuff to Amazon EC2 .. but see attached shots. It _is_ Twisted Web 13.1 (release)

> -----Ursprüngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-
> bounces at twistedmatrix.com] Im Auftrag von Hynek Schlawack
> Gesendet: Donnerstag, 24. Oktober 2013 10:08
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> Am 24.10.2013 um 09:48 schrieb Tobias Oberstein
> <tobias.oberstein at tavendo.de>:
> 
> > FWIW, you can manually concatenate certs .. this is what we do (also for
> StartSSL):
> >
> >    $ cat myserver_plain_cert.crt > myserver.crt
> >    $ cat ../sub.class1.server.sha2.ca.pem >> myserver.crt
> >    $ cat ../ca.pem >> myserver.crt
> >
> > A concatenated cert like above works today without the new code that is
> upcoming in Twisted. Which is cool also.
> 
> That is completely new to me. Are you sure you're not mixing up Twisted's
> behavior with nginx?
> 
> If what you say is true, there would have never been the need for #2061 and
> the monkey patching everyone was doing before it landed. Can you point me
> at a server where you have deployed TLS like that please?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard03.png
Type: image/png
Size: 46913 bytes
Desc: Clipboard03.png
URL: </pipermail/twisted-python/attachments/20131024/c35b7145/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Clipboard04.png
Type: image/png
Size: 26949 bytes
Desc: Clipboard04.png
URL: </pipermail/twisted-python/attachments/20131024/c35b7145/attachment-0005.png>

From grindizer at gmail.com  Thu Oct 24 03:32:09 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 11:32:09 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
	after fork.
Message-ID: <CALpq1paVNwKs5AgqLu+e9fWo_0npPi=sUch9pbeho0dxAbh1ww@mail.gmail.com>

> >   2. Arrange for the epoll object (or FD) to be closed after fork, but
> > before exec, so that the child process can't fiddle with it
>
> See also:
>
> http://bugs.python.org/issue8713
>
> ...which suggests Python 3.4 added fork+exec support to multiprocessing.
> On Unix and older Python versions, you're stuck with plain fork and all
> the attendant horribleness.
>
> This is a multiprocessing bug IMHO.
>

Hi again,

I've found this discussion https://lkml.org/lkml/2007/10/27/25 the
scenarios discussed are a bit different but it sounds to me related to the
same problem. which makes me think this is not a python bug but may be an
epoll design poblem with fork !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131024/36e6c0df/attachment-0002.html>

From hs at ox.cx  Thu Oct 24 04:30:02 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 12:30:02 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>


Am 24.10.2013 um 11:10 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>>> A concatenated cert like above works today without the new code that is
>> upcoming in Twisted. Which is cool also.
>> 
>> That is completely new to me. Are you sure you're not mixing up Twisted's
>> behavior with nginx?
>> 
>> If what you say is true, there would have never been the need for #2061 and
>> the monkey patching everyone was doing before it landed. Can you point me
>> at a server where you have deployed TLS like that please?
> 
> https://crossbardemo.tavendo.de/ws
> 
> This works for me in Chrome, FF and IE. It is Twisted Web / Autobahn. Nothing in front.

Your server definitely sends three certificates – that’s surprising/confusing.

Could you double-check how you’ve achieved that? If you google for chain certs & Twisted you’ll find all kinds of monkey patches to achieve that; and when I run twistd -n web with a pem that has multiple certificates I still get sent only one from the server. I feel like I’m missing something.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131024/18a71e79/attachment.sig>

From tobias.oberstein at tavendo.de  Thu Oct 24 04:44:32 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 03:44:32 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
 <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
Message-ID: <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>

> Your server definitely sends three certificates - that's surprising/confusing.
> 
> Could you double-check how you've achieved that? If you google for chain
> certs & Twisted you'll find all kinds of monkey patches to achieve that; and
> when I run twistd -n web with a pem that has multiple certificates I still get
> sent only one from the server. I feel like I'm missing something.

Ok, sorry, I forgot totally about it .. but this is what we do:

https://github.com/crossbario/crossbar/blob/master/crossbar/crossbar/tlsctx.py#L73

It indeed relies on "use_certificate_chain_file".

Sorry. My fault: it needs patching.

/Tobias



From hs at ox.cx  Thu Oct 24 05:02:00 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 24 Oct 2013 13:02:00 +0200
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
 <CF01BEF8-1185-4C2D-B294-4F36B218B569@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A8@EXVMBX020-12.exch020.serverdata.net>
 <C6FABAD6-243F-4D05-9E3A-D428D5CE3BAC@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63AB@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <56277C43-4FAE-4B7F-B59C-2579E4AC4B82@ox.cx>


Am 24.10.2013 um 12:44 schrieb Tobias Oberstein <tobias.oberstein at tavendo.de>:

>> Your server definitely sends three certificates - that's surprising/confusing.
>> 
>> Could you double-check how you've achieved that? If you google for chain
>> certs & Twisted you'll find all kinds of monkey patches to achieve that; and
>> when I run twistd -n web with a pem that has multiple certificates I still get
>> sent only one from the server. I feel like I'm missing something.
> 
> Ok, sorry, I forgot totally about it .. but this is what we do:
> 
> https://github.com/crossbario/crossbar/blob/master/crossbar/crossbar/tlsctx.py#L73
> 
> It indeed relies on "use_certificate_chain_file".
> 
> Sorry. My fault: it needs patching.

Phew, you really got me sweating there. :)

Since you’re not using string representations there, you can move to CertificateOptions which has chain files sind 13.1 already (the string support slipped into 13.2 because I don’t know how to Python and it got reverted a few days before the release of 13.1 because of a Python 3 regression).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20131024/7c77a7a0/attachment.sig>

From itamar at itamarst.org  Thu Oct 24 05:19:36 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 24 Oct 2013 07:19:36 -0400
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <5267FE5C.9090807@imperial.ac.uk>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
Message-ID: <52690248.1090707@itamarst.org>

On 10/23/2013 12:50 PM, Phil Mayers wrote:
>
> This is a multiprocessing bug IMHO.

This issue with multiprocessing appears in other places too. E.g. if 
you're using stdlib logging, child processes will try to rotate the 
parent process logs.

Basically multiprocessing on Unix is utterly broken and should never be 
used (except in the fork+exec form in Python 3.4).

-Itamar



From sank.daniel at gmail.com  Thu Oct 24 01:35:05 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 24 Oct 2013 00:35:05 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CAKN9TDKesBtKV1vxQevq4bqJ5a9UKpxa6x8sMASyZb_MxodOmg@mail.gmail.com>

> If you care, could you open the page in your browser, double click the small
> "lock icon" left to the "https://" in the address bar and send a screenshot of
> the dialog shown (as the one attached)?

Tried. Can't. Whenever I try to log in or out (bear with me) the lock
turns into a globe and I see firefox's security warning thingy.
Clicking on the globe shows the screens as given in attachments.

Now you ask how can I be logging out if I never was able to log in?
After submitting the registration info I got the security warning so I
left that page and emailed the list. When I went back to
twistedmatrix.com to try again I was already logged in. Now when I
click the log out link I get the same security warning. Is it possible
that only the page resulting from log in/out has this problem? Again,
I know next to nothing about web security (unless it involved quantum
encryption in which case I'll talk your ears off).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 1.png
Type: image/png
Size: 54882 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131024/476e931c/attachment-0004.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 2.png
Type: image/png
Size: 61857 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20131024/476e931c/attachment-0005.png>

From exarkun at twistedmatrix.com  Thu Oct 24 06:07:46 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 24 Oct 2013 12:07:46 -0000
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <52690248.1090707@itamarst.org>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
 <52690248.1090707@itamarst.org>
Message-ID: <20131024120746.8627.1193742102.divmod.xquotient.98@top>

On 11:19 am, itamar at itamarst.org wrote:
>On 10/23/2013 12:50 PM, Phil Mayers wrote:
>>
>>This is a multiprocessing bug IMHO.
>
>This issue with multiprocessing appears in other places too. E.g. if 
>you're using stdlib logging, child processes will try to rotate the 
>parent process logs.
>
>Basically multiprocessing on Unix is utterly broken and should never be 
>used (except in the fork+exec form in Python 3.4).

To expand on that just a bit, the form of sharing that you get when you 
fork() but you don't exec() is very difficult to use correctly (I think 
it's an open question whether it's *possible* to use correctly in a 
Python program).

The argument here is similar to the argument against shared-everything 
multithreading.  While memory (and some other per-process state) is no 
longer shared after fork(), *some* per-process state is still shared. 
And all of the state that isn't shared is still a potential source of 
bugs since it's almost certainly the case that none of it cooperated 
with the fork() call - a call which happened at some arbitrary time and 
captured a snapshot of all the state in memory at an arbitrary point.

Consider a simple implementation of a lock file, used to prevent 
multiple instances of a program from starting.  There are several ways 
fork() could break such code.  Perhaps it is partway through acquiring a 
lock on the lock file when the fork() occurs.  Perhaps the result is 
that the file ends up locked but no process thinks it is holding the 
lock.  Now no instances of the program are running.  Or perhaps the lock 
is held when fork() happens and the problem only surfaces at unlock 
time.  Perhaps one of the processes exits and releases the lock.  Now 
the program is still running but the lock isn't held.

And that's just one of the simplest possible examples of how things can 
go wrong.

The nearly uncountable different ways for failures to creep in and the 
resulting impracticality (if not impossibility) of being able to test 
that Twisted (or any Python library) actually works when fork() is used 
means that it's not likely Twisted will ever be declared compatible with 
any fork()-without-exec() usage.

You can find some examples of Twisted-using applications that run 
multiple processes, though.  Apple CalendarServer does it by passing 
file descriptors to worker processes and sends them the location of a 
configuration file describing how they should behave.  Divmod Mantissa 
does it by inserting self-describing work into a SQLite3 database.  When 
the worker process finds one of these, it knows what code to load and 
run by looking at the fields in the row.  These are variations on a 
theme - RPC, not shared (or duplicated) memory.

Hope this helps,
Jean-Paul



From tobias.oberstein at tavendo.de  Thu Oct 24 07:12:44 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 24 Oct 2013 06:12:44 -0700
Subject: [Twisted-Python] WG:  "mind" introduced strangely in pb howto
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <CAKN9TDKesBtKV1vxQevq4bqJ5a9UKpxa6x8sMASyZb_MxodOmg@mail.gmail.com> 
Message-ID: <634914A010D0B943A035D226786325D44469DC63EF@EXVMBX020-12.exch020.serverdata.net>

maybe the mailing list disallows >2 attachments .. again:

http://picpaste.com/pics/step1-NB1LoEVR.1382620207.png
http://picpaste.com/pics/step2-6zVhXeE6.1382620274.png
http://picpaste.com/pics/step3-KTao4B2V.1382620308.png


-----Ursprüngliche Nachricht-----
Von: Tobias Oberstein 
Gesendet: Donnerstag, 24. Oktober 2013 14:35
An: Twisted general discussion
Betreff: AW: [Twisted-Python] "mind" introduced strangely in pb howto

Daniel,

Ok, I've just tried using Firefox Portable (a self-contained browser not relying on any local installed stuff .. you can run that without Admin rights / installation - caution: when you are on some intranet, the former might be technically possible, but still disallowed .. and admins might still catch you): http://portableapps.com/apps/internet/firefox_portable

See attached shots.

This shows that the cert on twistedmatrix is somewhat lacking .. Firefox complains .. but I _do_ get HTTPS in the end.

Are you surfing from a university (or some other) intranet?

If so, the only reason I could think of is that the admins there have setup servers that _intercept_ the initial HTTPS negotiation.

How to prove that? Well, that would now get quite technical .. not sure if you want to do that;)

Or: just call them up;)

If you are surfing from a regular residential dial-up or such: I have no clue why that happens to you ..

/Tobias

> -----Ursprüngliche Nachricht-----
> Von: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python- 
> bounces at twistedmatrix.com] Im Auftrag von Daniel Sank
> Gesendet: Donnerstag, 24. Oktober 2013 09:35
> An: Twisted general discussion
> Betreff: Re: [Twisted-Python] "mind" introduced strangely in pb howto
> 
> > If you care, could you open the page in your browser, double click 
> > the small "lock icon" left to the "https://" in the address bar and 
> > send a screenshot of the dialog shown (as the one attached)?
> 
> Tried. Can't. Whenever I try to log in or out (bear with me) the lock 
> turns into a globe and I see firefox's security warning thingy.
> Clicking on the globe shows the screens as given in attachments.
> 
> Now you ask how can I be logging out if I never was able to log in?
> After submitting the registration info I got the security warning so I 
> left that page and emailed the list. When I went back to 
> twistedmatrix.com to try again I was already logged in. Now when I 
> click the log out link I get the same security warning. Is it possible 
> that only the page resulting from log in/out has this problem? Again, 
> I know next to nothing about web security (unless it involved quantum encryption in which case I'll talk your ears off).



From grindizer at gmail.com  Thu Oct 24 08:10:45 2013
From: grindizer at gmail.com (Flint)
Date: Thu, 24 Oct 2013 16:10:45 +0200
Subject: [Twisted-Python] epoll keep sharing state between process even
 after fork.
In-Reply-To: <20131024120746.8627.1193742102.divmod.xquotient.98@top>
References: <CALpq1pboUNB9_Nxm2kOtGqLbz0cYnOxuBzq2iQUDxaH2HD_W-A@mail.gmail.com>
 <5267FBA7.2050606@imperial.ac.uk> <5267FE5C.9090807@imperial.ac.uk>
 <52690248.1090707@itamarst.org>
 <20131024120746.8627.1193742102.divmod.xquotient.98@top>
Message-ID: <CALpq1paDsRBhbZny=MVW5+fj5GZk9ePiQZhKez3eGCV4_jV0cg@mail.gmail.com>

>
> To expand on that just a bit, the form of sharing that you get when you
> fork() but you don't exec() is very difficult to use correctly (I think
> it's an open question whether it's *possible* to use correctly in a Python
> program).
>
> The argument here is similar to the argument against shared-everything
> multithreading.  While memory (and some other per-process state) is no
> longer shared after fork(), *some* per-process state is still shared. And
> all of the state that isn't shared is still a potential source of bugs
> since it's almost certainly the case that none of it cooperated with the
> fork() call - a call which happened at some arbitrary time and captured a
> snapshot of all the state in memory at an arbitrary point.
>
> Consider a simple implementation of a lock file, used to prevent multiple
> instances of a program from starting.  There are several ways fork() could
> break such code.  Perhaps it is partway through acquiring a lock on the
> lock file when the fork() occurs.  Perhaps the result is that the file ends
> up locked but no process thinks it is holding the lock.  Now no instances
> of the program are running.  Or perhaps the lock is held when fork()
> happens and the problem only surfaces at unlock time.  Perhaps one of the
> processes exits and releases the lock.  Now the program is still running
> but the lock isn't held.
>
> And that's just one of the simplest possible examples of how things can go
> wrong.
>
> The nearly uncountable different ways for failures to creep in and the
> resulting impracticality (if not impossibility) of being able to test that
> Twisted (or any Python library) actually works when fork() is used means
> that it's not likely Twisted will ever be declared compatible with any
> fork()-without-exec() usage.
>
> You can find some examples of Twisted-using applications that run multiple
> processes, though.  Apple CalendarServer does it by passing file
> descriptors to worker processes and sends them the location of a
> configuration file describing how they should behave.  Divmod Mantissa does
> it by inserting self-describing work into a SQLite3 database.  When the
> worker process finds one of these, it knows what code to load and run by
> looking at the fields in the row.  These are variations on a theme - RPC,
> not shared (or duplicated) memory.
>
> Hope this helps,
> Jean-Paul


Thankx a lot.

I'll probably rethink everything in my project hehe, but i'm glad I asked !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131024/5b16fe65/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Oct 24 11:50:45 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 24 Oct 2013 10:50:45 -0700
Subject: [Twisted-Python] "mind" introduced strangely in pb howto
In-Reply-To: <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
References: <CAKN9TDLU4WEJA-WZSwnvJ7dKQQH6cr9Kr7ngt1dOsBZhLypeRQ@mail.gmail.com>
 <CAKN9TD+bwgj1esMVZrTjqURNOTpFhqNFnCieDVcXquxZJGQzxQ@mail.gmail.com>
 <DA3C5B61-1A1B-4004-AB2B-53D01F437D56@twistedmatrix.com>
 <CAKN9TD+_uEYCz_EuEEZgHATO_ND0pYH_oVush0iBKHHZAe9F+w@mail.gmail.com>
 <634914A010D0B943A035D226786325D44469DC63A6@EXVMBX020-12.exch020.serverdata.net>
 <4807B7F3-7FEB-4B77-AA72-180CD5C911C3@ox.cx>
 <634914A010D0B943A035D226786325D44469DC63A7@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <1F252086-842D-4356-87D2-9C352AD88B3A@twistedmatrix.com>


On Oct 24, 2013, at 12:48 AM, Tobias Oberstein <tobias.oberstein at tavendo.de> wrote:

> However: this all does not explain (at least I dont understand) why the OP has that issue showing up .. Firefox is able to load intermediate CA certs from the net .. I have seen it .. also for StartSSL certs. Something is breaking this. Maybe it's MITM TLS, maybe they blocked intermediate cert auto-loading, .. dunno.

Firefox does not load intermediate CA certs from the network.  It - and pretty much all other browsers, as far as I know - will sometimes magically cache intermediary certificates.  So if you visit the site in a browser that happens to have had the right intermediate CA certificate cached (probably because you visited another StartSSL free site, in twistedmatrix.com's case) then you will get no warning.  This is why most people don't actually see a warning on the site :-).

But we'll have this problem fixed For Real soon!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131024/24396578/attachment-0002.html>

From lloyd at passcal.nmt.edu  Thu Oct 24 15:32:09 2013
From: lloyd at passcal.nmt.edu (Lloyd Carothers)
Date: Thu, 24 Oct 2013 15:32:09 -0600
Subject: [Twisted-Python] FTP without the protocol
In-Reply-To: <m2hac7ihga.fsf@valheru.db3l.homeip.net>
References: <52684287.5000609@passcal.nmt.edu>
 <m2hac7ihga.fsf@valheru.db3l.homeip.net>
Message-ID: <526991D9.1080306@passcal.nmt.edu>

On 10/23/13 7:30 PM, David Bolen wrote:
> Lloyd Carothers <lloyd at passcal.nmt.edu> writes:
>
>>   For such a use case I'm surprised not to find an example. I think I
>> just need a push in the right direction. Is producers/consumers the
>> right approach?
> It's a bit dated at this point, but maybe this might spark some ideas:
>     http://twistedmatrix.com/pipermail/twisted-python/2007-July/015738.html
>
> It's producer/consumer, which yes, is very efficient for streaming
> transfers.  The code the post was based on is actually still in active
> use, but against an older twisted 2.5.0 installation, so I'm not sure
> how much tweaking it may need to adjust to the latest Twisted version.
This looks pretty close to what I need and definitely a good starting 
point for me. I can make use of session specific information too, which 
will be nice.
As you've been using it for a while, have you had any issues. Is it 
robust/stable?
> In practice this is paired with a separate set of code that implements a
> PB-based control channel over which the files to upload are negotiated.
Would you be willing to share this as well?
> The binary transfer itself just has a small header in front of the data
> containing some authentication and size information, so it's derived
> from LineReceiver and switches to raw mode for the transfer.  While I
> tend to prefer a separate control channel (though it certainly doesn't
> need to be PB based), you could also in-line the control information (so
> it becomes more like an HTTP transfer) if you wished.
Gotcha.
Maybe this is new since you wrote the above, but is FileSender the 
producer to use here?
Perhaps its not fully developed but should there not also be a 
compliment FileReceiver  to consume the file and write it out?
> BTW, passive FTP should be quite firewall friendly, unless you're
> talking about really locked down locations where the only thing allowed
> out is HTTP or something.  But if you're not using passive mode yet,
> that might also be a quicker fix to your existing code base.
Indeed, I use passive mode exclusively as clients often come from NATed 
nets.
Generally FTP works ok but some organizations firewalls do strange 
things with that traffic, and even the good connections seem to have 
sporadic drops which often aren't handled well, at least with proftp.


>
> -- David
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From hawkowl at atleastfornow.net  Fri Oct 25 00:38:38 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Fri, 25 Oct 2013 14:38:38 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
Message-ID: <526A11EE.3060700@atleastfornow.net>

Hi everyone,

I've yet to hear back from anyone testing the prerelease - if you're 
able to, please do!

Especially of interest to be tested would be the new HostnameEndpoint, 
which tries to connect to both the IPv4 and IPv6 addresses from a DNS 
lookup, and uses whichever is first - it makes Glyph excited for its 
inclusion, so it ought to make you ;) .

It also supports SSL chain certificates, which should also fix up some 
issues using TLS with Twisted - this would also be great for people to 
test, and will hopefully remove a bunch of monkeypatching in everyone's 
code.

Unless there are problems brought to our attention, it is unlikely that 
the 13.2.0pre will be different from the final release - so you can also 
use it to run against your application's test suites, so you know you're 
ready for upgrading to the full release later. :)

The tarballs and NEWS file are available at 
http://twistedmatrix.com/Releases/pre/13.2.0pre1/ .

The ticket for the 13.2 release is at 
https://twistedmatrix.com/trac/ticket/6795 - please comment on it if you 
have any issues!

-hawkowl



From sank.daniel at gmail.com  Fri Oct 25 00:44:27 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 24 Oct 2013 23:44:27 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
Message-ID: <CAKN9TDJsApN_w7U9eOcaqKMkXfh0sNda9N9YMMPoRbo20LjCOg@mail.gmail.com>

> That will atomically combine the propagation of initial state with the provision of the
> back-propagation channel for updates to that state.

My understanding of Cacheable is that it propagates initial state to
the RemoteCache and then sends subsequent updates also to the
RemoteCache. What I was originally asking about was how to allow the
side holding the RemoteCache to request changes on the Cacheable. Your
phrase "back-propagation" leads me to think that maybe this kind of
thing is built into Cacheable, but I have not discovered how to use
it.

All of that said, in the end the answer to my original question seems
to be "read this howto page:"

http://twistedmatrix.com/documents/current/core/howto/pb-cred.html

and then use the mind argument.

Sincere thanks for your help,
Daniel



From db3l.net at gmail.com  Fri Oct 25 17:38:01 2013
From: db3l.net at gmail.com (David Bolen)
Date: Fri, 25 Oct 2013 19:38:01 -0400
Subject: [Twisted-Python] FTP without the protocol
References: <52684287.5000609@passcal.nmt.edu>
 <m2hac7ihga.fsf@valheru.db3l.homeip.net> <526991D9.1080306@passcal.nmt.edu>
Message-ID: <m2d2msj50m.fsf@valheru.db3l.homeip.net>

Lloyd Carothers <lloyd at passcal.nmt.edu> writes:

> This looks pretty close to what I need and definitely a good starting
> point for me. I can make use of session specific information too,
> which will be nice.
> As you've been using it for a while, have you had any issues. Is it
> robust/stable?

Absolutely robust/stable.  Haven't touched the code since 2007 (well,
aside from one tweak to deal with an application level race condition
under long RTT connections unrelated to the file transfer itself).
Looks like there have been around 60000 media file transfers totaling
about 650GB of data so far.

> Would you be willing to share this as well?

It's part of a larger system that I can't really share in total, but I
could probably snip an extract of the PB part related to file I/O.
It's not really anything special - just a typical PB published object
with some remote methods.  You'd have to be willing to deal with it in
an "as-is" state though.  If interested, drop me a note directly.

> Gotcha.
> Maybe this is new since you wrote the above, but is FileSender the
> producer to use here?

That's the one I use on the client side, yes.  On the receiver the raw
data receipt is just part of the server side protocol definition.

> Perhaps its not fully developed but should there not also be a
> compliment FileReceiver  to consume the file and write it out?

Maybe.  I don't think such a helper exists in the version of Twisted I
was using, but it may also have been simpler enough that I didn't look too
hard (plus I wanted a running crc calculation).

I think it's also a little trickier on the receiving side than
sending.  On the sending side it's easier to delegate transmission of
the data, while on the receiving side the data (and connection status)
occurs as part of your protocol handler.  So at the least something
like FileReceiver would probably need to be a mix-in (taking over
dataReceived in some way) rather than an independent function.

The receiving side is also fairly trivial - in my case, it's not much
more than the few lines in dataReceived.

> Generally FTP works ok but some organizations firewalls do strange
> things with that traffic, and even the good connections seem to have
> sporadic drops which often aren't handled well, at least with proftp.

Yeah, it's an ugly network world out there :-)

Note that with an FTP replacement, you'll still be responsible for
handling disconnects and/or resuming uploads.  In my current system
all uploads go to a dedicated upload folder by job, which is moved to
its final location during the job commit, or completely discarded if
something goes wrong.  But I have the luxury of having tight control
of the client (who is an audio post-production house publishing jobs
for clients to review), so failures between the client and the server
in my case are actually reasonably rare.

-- David




From _ at lvh.io  Sat Oct 26 15:49:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sat, 26 Oct 2013 23:49:00 +0200
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
	python3 porting
Message-ID: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>

Hi everyone,


I'm working on #6749 for porting t.p.logfile to python3. I'm dealing with
some test failures, which you can see from the buildbot here:

http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/1602/steps/shell/logs/stdio

I have pasted the relevant bit into a gist here:

https://gist.github.com/lvh/7174766

I think what's happening is that LogFile.write should take native strings
(since that's what log.msg takes). However, I'm opening all files in binary
mode, since that's on the reviewer checklist (point 8) for the Python 3
porting plan.

Should I not open the files in binary mode?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131026/94e8531f/attachment-0002.html>

From exarkun at twistedmatrix.com  Sat Oct 26 19:19:00 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Oct 2013 01:19:00 -0000
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
Message-ID: <20131027011900.8627.1582817547.divmod.xquotient.144@top>

On 26 Oct, 09:49 pm, _ at lvh.io wrote:
>Hi everyone,
>
>
>I'm working on #6749 for porting t.p.logfile to python3. I'm dealing 
>with
>some test failures, which you can see from the buildbot here:
>
>http://buildbot.twistedmatrix.com/builders/python-3.3-tests/builds/1602/steps/shell/logs/stdio
>
>I have pasted the relevant bit into a gist here:
>
>https://gist.github.com/lvh/7174766
>
>I think what's happening is that LogFile.write should take native 
>strings
>(since that's what log.msg takes). However, I'm opening all files in 
>binary
>mode, since that's on the reviewer checklist (point 8) for the Python 3
>porting plan.

Argh.  I was all set up to object to the "...should take native strings" 
bit but then I reviewed some history.

If you haven't already, read 
<https://twistedmatrix.com/trac/ticket/5932>.  In hindsight, it would 
have been nice if this branch had come with documentation of some kind.

 From what I can tell, this means:

  1. yep, `log.msg` takes native strings
  2. LogPublisher doesn't do anything with encoding or decoding
  3. a log observer can choose to do whatever it wants with what it gets
     (but it should be prepared to handle bytes on python 2 and unicode 
on python 3)

So... invent some policy.  What encoding does Twisted's built-in file 
log observer use for the files it writes?  Up until now the answer has 
been ASCII because it doesn't try to handle unicode so anything non- 
ASCII results in exceptions (unless you're using PyGTK... let's not go 
there).

UTF-8 is obviously the only possible correct answer, I guess.  This 
needs to be documented, of course.

And I predict that next someone will come along with a feature request 
for a command-line option to twistd to make it write logs with a 
different encoding. :(

Whether you open the file in binary mode or not is up to you in this 
case, I think.  You could do that and handle the encoding yourself or 
you could open it in text mode with the right encoding and let it handle 
the encoding.

The blanket statement on 
https://twistedmatrix.com/trac/wiki/Plan/Python3 about open calls is 
perhaps slightly too general.  It seems like that should apply to cases 
where the behavior is not supposed to be changing - which should be the 
case for the majority of porting work.  However, `log.msg` has already 
changed behavior as part of the port.

*Or*, it now occurs to me, just stick with the ASCII-only policy that's 
already in place.  I'd even say this is more correct since porting isn't 
supposed to change behavior.  Leave support for some other codec for 
another ticket (perhaps #989).  Apart from being simpler (I hope) and 
avoiding breaching the documented porting guidelines, this also means 
someone will actually have to think about unicode support on Python 2 as 
well.  Saying we support unicode in the logging system is a lot better 
than saying we support unicode in the logging system on Python 3 only.

Jean-Paul



From trac at twistedmatrix.com  Sun Oct 27 00:05:32 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 27 Oct 2013 06:05:32 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1382853932.86.6363892501800605626@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131027/cc696d2d/attachment-0002.html>

From _ at lvh.io  Sun Oct 27 07:57:28 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 27 Oct 2013 14:57:28 +0100
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <20131027011900.8627.1582817547.divmod.xquotient.144@top>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
Message-ID: <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>

Hi JP,


On Sun, Oct 27, 2013 at 2:19 AM, <exarkun at twistedmatrix.com> wrote:

> *Or*, it now occurs to me, just stick with the ASCII-only policy that's
> already in place.  I'd even say this is more correct since porting isn't
> supposed to change behavior.  Leave support for some other codec for
> another ticket (perhaps #989).  Apart from being simpler (I hope) and
> avoiding breaching the documented porting guidelines, this also means
> someone will actually have to think about unicode support on Python 2 as
> well.  Saying we support unicode in the logging system is a lot better than
> saying we support unicode in the logging system on Python 3 only.
>

Did this.

There's a few Windows-specific bugs left on the ticket that I don't know
how to fix, unfortunately.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131027/fd769cc0/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Oct 27 14:40:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Oct 2013 20:40:45 -0000
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <20131027204045.32060.1785041479.divmod.xquotient.100@top>

On 25 Oct, 06:38 am, hawkowl at atleastfornow.net wrote:
>Hi everyone,
>
>I've yet to hear back from anyone testing the prerelease - if you're 
>able to, please do!

Thanks for managing the 13.2 release!

I've deployed my Divmod Quotient server on 13.2.0pre1 and it's running 
fine so far.

Jean-Paul



From _ at lvh.io  Sun Oct 27 15:37:27 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Sun, 27 Oct 2013 22:37:27 +0100
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <CAE_Hg6bU3WFTBUBEMXCPZy1ChjCpqyXH5DG=2XtbOi7NGk4cyg@mail.gmail.com>

Hi Hawkowl,


Thanks for managing the release!

My stuff works fine :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131027/2a754cb0/attachment-0002.html>

From tobias.oberstein at tavendo.de  Mon Oct 28 04:41:33 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 28 Oct 2013 03:41:33 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526A11EE.3060700@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>

> I've yet to hear back from anyone testing the prerelease - if you're able to,
> please do!

Tested with Autobahn (WebSocket) + Twisted Web based stuff .. no issues found.

> It also supports SSL chain certificates, which should also fix up some issues
> using TLS with Twisted - this would also be great for people to test, and will
> hopefully remove a bunch of monkeypatching in everyone's code.

Still using monkey patching (for various other SSL things), but I can confirm "no issues"

https://www.ssllabs.com/ssltest/analyze.html?d=crossbardemo.tavendo.de

See bottom of that page: "HTTP server signature	TwistedWeb/13.2.0pre1"

Thanks for the hard work!!

/Tobias



From hawkowl at atleastfornow.net  Mon Oct 28 05:16:40 2013
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Mon, 28 Oct 2013 19:16:40 +0800
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
References: <526A11EE.3060700@atleastfornow.net>
 <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <526E4798.7070004@atleastfornow.net>

On 28/10/13 18:41, Tobias Oberstein wrote:
>> I've yet to hear back from anyone testing the prerelease - if you're able to,
>> please do!
> Tested with Autobahn (WebSocket) + Twisted Web based stuff .. no issues found.
>
>> It also supports SSL chain certificates, which should also fix up some issues
>> using TLS with Twisted - this would also be great for people to test, and will
>> hopefully remove a bunch of monkeypatching in everyone's code.
> Still using monkey patching (for various other SSL things), but I can confirm "no issues"
>
> https://www.ssllabs.com/ssltest/analyze.html?d=crossbardemo.tavendo.de
>
> See bottom of that page: "HTTP server signature	TwistedWeb/13.2.0pre1"
>
> Thanks for the hard work!!
>
> /Tobias
Brilliant - hynek mentioned a few more SSL tickets in the pipeline which 
should hopefully be in 14.0 - so hopefully we can get rid of all of the 
monkey patching eventually! :)


On 28/10/13 05:37, Laurens Van Houtven wrote:
> Hi Hawkowl,
>
>
> Thanks for managing the release!
>
> My stuff works fine :)
>
> cheers
> lvh
>
Good to hear!And thanks :)


On 28/10/13 04:40, exarkun at twistedmatrix.com wrote:
> Thanks for managing the 13.2 release!
>
> I've deployed my Divmod Quotient server on 13.2.0pre1 and it's running 
> fine so far.
>
> Jean-Paul
>
No problem - it's rather exciting, actually!And, great to hear 
everything is going good (so far at least!).

-

I think that with no problems being detected so far, I'll get the 
release ticket in for review soon, and have it in the queue for 
(hopefully) go time for next week, unless anyone has any objections, or 
anything crops up.

-hawkowl



From tobias.oberstein at tavendo.de  Mon Oct 28 06:50:28 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Mon, 28 Oct 2013 05:50:28 -0700
Subject: [Twisted-Python] Twisted 13.2.0pre1 Testing Feedback
In-Reply-To: <526E4798.7070004@atleastfornow.net>
References: <526A11EE.3060700@atleastfornow.net>
 <634914A010D0B943A035D226786325D44469E6F512@EXVMBX020-12.exch020.serverdata.net>
 <526E4798.7070004@atleastfornow.net>
Message-ID: <634914A010D0B943A035D226786325D44469E6F54A@EXVMBX020-12.exch020.serverdata.net>

> Brilliant - hynek mentioned a few more SSL tickets in the pipeline which
> should hopefully be in 14.0 - so hopefully we can get rid of all of the monkey
> patching eventually! :)

That would be neat. There are 2 issues in pyOpenSSL which would needed to be
resolved for monkey patching going away completely:

https://bugs.launchpad.net/pyopenssl/+bug/1233810
https://bugs.launchpad.net/pyopenssl/+bug/1244201

/Tobias




From kevin.horn at gmail.com  Mon Oct 28 09:45:43 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Mon, 28 Oct 2013 10:45:43 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
Message-ID: <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>

It's also worth noting that there are a fair number of people (at least I
know some) who use their old XP licenses for testing Windows software in
VMs, especially if they're usually working in Linux or Mac OS X.


On Wed, Oct 23, 2013 at 1:20 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> > If you're still running XP isn't it pretty unlikely you have
> > hardware modern enough to power a Steam game in the
> > first place?
>
> You'd be surprised. I have an XP machine at work because I never
> bothered to buy a new license for Win7, but I've upgraded the hardware
> reasonably recently. I have no idea if home users are in the same
> situation.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131028/cc656738/attachment-0002.html>

From rgacote at appropriatesolutions.com  Tue Oct 29 11:11:59 2013
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Tue, 29 Oct 2013 13:11:59 -0400 (EDT)
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
Message-ID: <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>

I need to limit the ciphers offered for an ssh/sftp connection. 

class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
    """Main local proxy class for file transfer access.

    Many methods are overriden to support file encryption and
    encrypted file name mappings.
    """

    def __init__(self, avatar):
        """Initialize class with avatar representing user information"""
        SFTPServerForUnixConchUser.__init__(self, avatar)

I'm unclear as to how to restrict which ciphers to use at this level.
--Ray

-- 
Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 



From glyph at twistedmatrix.com  Tue Oct 29 16:34:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 29 Oct 2013 15:34:03 -0700
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
Message-ID: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>


On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:

> It's also worth noting that there are a fair number of people (at least I know some) who use their old XP licenses for testing Windows software in VMs, especially if they're usually working in Linux or Mac OS X.


Do you, yourself do this?

Anywhere possible it would be nice to identify real, actual users rather than hypothetical proto-users :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131029/49611fb9/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Oct 29 18:22:44 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 29 Oct 2013 17:22:44 -0700
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
	python3 porting
In-Reply-To: <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
 <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
Message-ID: <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>


On Oct 27, 2013, at 6:57 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi JP,
> 
> 
> On Sun, Oct 27, 2013 at 2:19 AM, <exarkun at twistedmatrix.com> wrote:
> *Or*, it now occurs to me, just stick with the ASCII-only policy that's already in place.  I'd even say this is more correct since porting isn't supposed to change behavior.  Leave support for some other codec for another ticket (perhaps #989).  Apart from being simpler (I hope) and avoiding breaching the documented porting guidelines, this also means someone will actually have to think about unicode support on Python 2 as well.  Saying we support unicode in the logging system is a lot better than saying we support unicode in the logging system on Python 3 only.
> 
> Did this.
> 
> There's a few Windows-specific bugs left on the ticket that I don't know how to fix, unfortunately.

The new logging branch (destined for review Real Soon Now) is a bit more rigorous about sensible behavior with respect to encoding, so we can tighten up this behavior and make it work in more cases without breaking compatibility.  What you're doing here basically makes sense though.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131029/7ed1dc7b/attachment-0002.html>

From orestis at orestis.gr  Wed Oct 30 02:13:46 2013
From: orestis at orestis.gr (Orestis Markou)
Date: Wed, 30 Oct 2013 10:13:46 +0200
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
Message-ID: <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>


On 30 Οκτ 2013, at 12:34 π.μ., Glyph <glyph at twistedmatrix.com> wrote:

> 
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
> 
>> It's also worth noting that there are a fair number of people (at least I know some) who use their old XP licenses for testing Windows software in VMs, especially if they're usually working in Linux or Mac OS X.
> 
> 
> Do you, yourself do this?

I used to do that, but nowadays use the VMs Microsoft provides for testing webpages under IE [1] and multiple windows environments. Just download your favorite flavor and run. I'm not sure about limitations they might have, but I was able to install other software just fine.

[1]: http://www.modern.ie/en-us/virtualization-tools

> Anywhere possible it would be nice to identify real, actual users rather than hypothetical proto-users :-).
> 
> -glyph
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/2bcddd1a/attachment-0002.html>

From _ at lvh.io  Wed Oct 30 03:34:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 30 Oct 2013 10:34:00 +0100
Subject: [Twisted-Python] Bytes vs unicode in twisted.python.logfile's
 python3 porting
In-Reply-To: <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>
References: <CAE_Hg6aEV2Nfz8Uf0SQpM8X5DTmDYiJHFD8qOk85cLbdQg9S7w@mail.gmail.com>
 <20131027011900.8627.1582817547.divmod.xquotient.144@top>
 <CAE_Hg6ajgpjG2KbZXhXWXPAqMAiBZ2HeKN4wnKXr7YnVyYu=Dg@mail.gmail.com>
 <849079F5-3E01-4E01-B9A4-80D49E353C0B@twistedmatrix.com>
Message-ID: <CAE_Hg6YpT2DxuscM=PvA-uEfSi=DuCWv8L27qHgzTy-QRp=hVA@mail.gmail.com>

Hi Glyph,

On Wed, Oct 30, 2013 at 1:22 AM, Glyph <glyph at twistedmatrix.com> wrote:

>
> The new logging branch (destined for review Real Soon Now) is a bit more
> rigorous about sensible behavior with respect to encoding, so we can
> tighten up this behavior and make it work in more cases without breaking
> compatibility.  What you're doing here basically makes sense though.
>

Okay, great :-) I specialcased Windows so that the test would use NUL
instead of /dev/null. That appears to make the win7 bot happy. I've
resubmitted it for review, we'll see what happens :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/4d21a9fd/attachment-0002.html>

From grindizer at gmail.com  Wed Oct 30 03:39:44 2013
From: grindizer at gmail.com (Flint)
Date: Wed, 30 Oct 2013 10:39:44 +0100
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
References: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
Message-ID: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>

Hi

I have not used it myself but this seems what you're looking for:
http://twistedmatrix.com/documents/13.0.0/api/twisted.conch.ssh.transport.SSHTransportBase.html#supportedCiphers
I guess you need to subclass SSHTransport and give it the list of ciphers
you want.

--
Nacim.








2013/10/29 Ray Cote <rgacote at appropriatesolutions.com>

> I need to limit the ciphers offered for an ssh/sftp connection.
>
> class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
>     """Main local proxy class for file transfer access.
>
>     Many methods are overriden to support file encryption and
>     encrypted file name mappings.
>     """
>
>     def __init__(self, avatar):
>         """Initialize class with avatar representing user information"""
>         SFTPServerForUnixConchUser.__init__(self, avatar)
>
> I'm unclear as to how to restrict which ciphers to use at this level.
> --Ray
>
> --
> Ray Cote, President Appropriate Solutions, Inc.
> We Build Software
> www.AppropriateSolutions.com 603.924.6079
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/4f926875/attachment-0002.html>

From _ at lvh.io  Wed Oct 30 03:49:44 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 30 Oct 2013 10:49:44 +0100
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
References: <28569316.2873.1383066206251.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <18410193.2887.1383066717518.JavaMail.rgacote@raymac.appropriatesolutions.com>
 <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
Message-ID: <CAE_Hg6bPi--soXGPD064menZzjzxyx5gxOTDqGG_pPk_YX5mWg@mail.gmail.com>

Hi Ray!


This seems like a clear failure of the documentation. Please file a ticket
so that it can be alleviated at some point :)

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/25f3c82e/attachment-0002.html>

From kevin.horn at gmail.com  Wed Oct 30 09:36:32 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Oct 2013 10:36:32 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
Message-ID: <CA+U=zK3eNiYv1Ut5rPqwWswaCB26ojKORQuDF=XLio6++orQ8Q@mail.gmail.com>

On Tue, Oct 29, 2013 at 5:34 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> It's also worth noting that there are a fair number of people (at least I
> know some) who use their old XP licenses for testing Windows software in
> VMs, especially if they're usually working in Linux or Mac OS X.
>
>
> Do you, yourself do this?
>
> Anywhere possible it would be nice to identify real, actual users rather
> than hypothetical proto-users :-).
>
> -glyph
>
>
Well, I haven't in a year or two, because I haven't needed to test anything
on Windows in a while (mostly writing web stuff these days).

But I thought it was worth pointing out.

Perhaps of more interest (or perhaps not) is that I myself was running
WinXP until about a year ago, and only really upgraded because I had some
hardware fail and it's...unpleasant...to install WinXP on modern
processors, since the XP installer doesn't seem to know what to do with
multi-core processors (or at least the processor I was using).

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/d51c39ae/attachment-0002.html>

From kevin.horn at gmail.com  Wed Oct 30 09:42:54 2013
From: kevin.horn at gmail.com (Kevin Horn)
Date: Wed, 30 Oct 2013 10:42:54 -0500
Subject: [Twisted-Python] Twisted Users on Windows XP
In-Reply-To: <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>
References: <5267D817.8070006@atleastfornow.net>
 <B074ACD9-9F57-41C9-A5FC-BCCF76BCC802@twistedmatrix.com>
 <EC7A2F2C-DBF4-4CA5-883F-C194185D2D8C@gmail.com>
 <CAKN9TDLor2wijPpdqG_EYuy2KZdkjDYoHn24dmxSYZKzcHLuOQ@mail.gmail.com>
 <CA+U=zK3WMp2_Vx8qza5sx2kHzRse0LCmnDRi2wDF5NNMsZWzJA@mail.gmail.com>
 <78EF48A1-1248-4831-8150-E8B0790B1360@twistedmatrix.com>
 <2CE23762-34A4-49B9-9694-1EA0B5F468B0@orestis.gr>
Message-ID: <CA+U=zK2zpiuXRPp=M6WiM-=yALztCdBy54qtUzO4a+hY2MObOw@mail.gmail.com>

On Wed, Oct 30, 2013 at 3:13 AM, Orestis Markou <orestis at orestis.gr> wrote:

>
> On 30 Οκτ 2013, at 12:34 π.μ., Glyph <glyph at twistedmatrix.com> wrote:
>
>
> On Oct 28, 2013, at 8:45 AM, Kevin Horn <kevin.horn at gmail.com> wrote:
>
> It's also worth noting that there are a fair number of people (at least I
> know some) who use their old XP licenses for testing Windows software in
> VMs, especially if they're usually working in Linux or Mac OS X.
>
>
> Do you, yourself do this?
>
>
> I used to do that, but nowadays use the VMs Microsoft provides for testing
> webpages under IE [1] and multiple windows environments. Just download your
> favorite flavor and run. I'm not sure about limitations they might have,
> but I was able to install other software just fine.
>
> [1]: http://www.modern.ie/en-us/virtualization-tools
>
>
It's worth noting that MS still provides XP images on this site, though I
suppose that may (probably will) change when XP extended support ends.
 With luck, maybe that means I can finally stop caring about IE6 entirely.
 I'm probably not that lucky though...

In any case I think Twisted should keep support for XP until extended
support ends, or at least until we know what the user base looks like
_after_ extended support ends.  I'm not too familiar with the overhead of
doing so, however, so it's not that informed of an opinion, I'm afraid.

--
Kevin Horn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/6a726257/attachment-0002.html>

From rgacote at appropriatesolutions.com  Wed Oct 30 09:56:42 2013
From: rgacote at appropriatesolutions.com (Ray Cote)
Date: Wed, 30 Oct 2013 11:56:42 -0400 (EDT)
Subject: [Twisted-Python] Limiting cipher options for SSH/SFTP
In-Reply-To: <CALpq1pbJCu2BpJi_Od4GPuFJcGY3frBopJ9gr9nk82pe9n83ug@mail.gmail.com>
Message-ID: <11181164.3411.1383148600504.JavaMail.rgacote@raymac.appropriatesolutions.com>

Thanks Nacim: 

I had found the supported ciphers. 
However, I'm unclear as to how to present a subclassed SSHTransport to the SFTPServer. 

(And, once I understand how I will issue a documentation bug with details...) 
--Ray 

----- Original Message -----

> From: "Flint" <grindizer at gmail.com>
> To: "Ray Cote" <rgacote at appropriatesolutions.com>, "Twisted general
> discussion" <twisted-python at twistedmatrix.com>
> Sent: Wednesday, October 30, 2013 5:39:44 AM
> Subject: Re: [Twisted-Python] Limiting cipher options for SSH/SFTP

> Hi

> I have not used it myself but this seems what you're looking for:
> http://twistedmatrix.com/documents/13.0.0/api/twisted.conch.ssh.transport.SSHTransportBase.html#supportedCiphers

> I guess you need to subclass SSHTransport and give it the list of
> ciphers you want.

> --

> Nacim.

> 2013/10/29 Ray Cote < rgacote at appropriatesolutions.com >

> > I need to limit the ciphers offered for an ssh/sftp connection.
> 

> > class ESFTPServerForUnixConchUser(SFTPServerForUnixConchUser):
> 
> > """Main local proxy class for file transfer access.
> 

> > Many methods are overriden to support file encryption and
> 
> > encrypted file name mappings.
> 
> > """
> 

> > def __init__(self, avatar):
> 
> > """Initialize class with avatar representing user information"""
> 
> > SFTPServerForUnixConchUser.__init__(self, avatar)
> 

> > I'm unclear as to how to restrict which ciphers to use at this
> > level.
> 
> > --Ray
> 

> > --
> 
> > Ray Cote, President Appropriate Solutions, Inc.
> 
> > We Build Software
> 
> > www.AppropriateSolutions.com 603.924.6079
> 

> > _______________________________________________
> 
> > Twisted-Python mailing list
> 
> > Twisted-Python at twistedmatrix.com
> 
> > http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-- 

Ray Cote, President Appropriate Solutions, Inc. 
We Build Software 
www.AppropriateSolutions.com 603.924.6079 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20131030/8bb91376/attachment-0002.html>

From tobias.oberstein at tavendo.de  Wed Oct 30 17:28:38 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 30 Oct 2013 16:28:38 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
Message-ID: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>

Hi,

I have done some testing of scaling Twisted Web on multicore and wanted to share:

https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket

For those that are running short in time or want to have a teaser first, here are the results, including comparison with Nginx:

https://github.com/oberstet/scratchbox/raw/master/python/twisted/sharedsocket/results.pdf

Personally, I think the results are quite encouraging. I'd love to hear any feedback and comments!

Cheers,
Tobias



From itamar at itamarst.org  Thu Oct 31 05:23:46 2013
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 31 Oct 2013 07:23:46 -0400
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <52723DC2.1050908@itamarst.org>

On 10/30/2013 07:28 PM, Tobias Oberstein wrote:
> Hi,
>
> I have done some testing of scaling Twisted Web on multicore and wanted to share:
>
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket
>
This was PyPy, yes?



From tobias.oberstein at tavendo.de  Thu Oct 31 05:59:40 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 31 Oct 2013 04:59:40 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <52723DC2.1050908@itamarst.org>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
 <52723DC2.1050908@itamarst.org>
Message-ID: <634914A010D0B943A035D226786325D44469E702A9@EXVMBX020-12.exch020.serverdata.net>

> > I have done some testing of scaling Twisted Web on multicore and wanted to
> share:
> >
> >
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsoc
> ket
> >
> This was PyPy, yes?

Yes. All testing details are in the README.md ..



From therve at twistedmatrix.com  Thu Oct 31 09:04:12 2013
From: therve at twistedmatrix.com (=?UTF-8?Q?Thomas_Herv=C3=A9?=)
Date: Thu, 31 Oct 2013 16:04:12 +0100
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
Message-ID: <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>

On Thu, Oct 31, 2013 at 12:28 AM, Tobias Oberstein
<tobias.oberstein at tavendo.de> wrote:
> Hi,
>
> I have done some testing of scaling Twisted Web on multicore and wanted to share:
>
> https://github.com/oberstet/scratchbox/tree/master/python/twisted/sharedsocket
>
> For those that are running short in time or want to have a teaser first, here are the results, including comparison with Nginx:
>
> https://github.com/oberstet/scratchbox/raw/master/python/twisted/sharedsocket/results.pdf
>
> Personally, I think the results are quite encouraging. I'd love to hear any feedback and comments!

Looks nice. It's something that has been around in poor form for a
long time in several places (I'm thinking about
http://twistedmatrix.com/trac/browser/sandbox/exarkun/copyover/ which
inspired http://twistedmatrix.com/trac/browser/sandbox/therve/prefork/).
It would be good to have some documented examples. It would be even
better to have a proper Twisted API for that.

Note that for testing static files, sendfile may be an interesting
boost: https://tm.tl/585

Also, on BSDs (not sure about OS X) and recent Linux, you can use
SO_REUSEPORT which would make for an even simpler code.

-- 
Thomas



From tobias.oberstein at tavendo.de  Thu Oct 31 17:16:54 2013
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Thu, 31 Oct 2013 16:16:54 -0700
Subject: [Twisted-Python] Scaling Twisted Web on multicore
In-Reply-To: <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>
References: <634914A010D0B943A035D226786325D44469E70268@EXVMBX020-12.exch020.serverdata.net>
 <CA+G4quikRdsz==QYCOF3LiU-quaDgM=QbZGUunJLrtyO2FOjpw@mail.gmail.com>
Message-ID: <634914A010D0B943A035D226786325D44469F478DC@EXVMBX020-12.exch020.serverdata.net>

> Looks nice. It's something that has been around in poor form for a long time in
> several places (I'm thinking about
> http://twistedmatrix.com/trac/browser/sandbox/exarkun/copyover/ which
> inspired http://twistedmatrix.com/trac/browser/sandbox/therve/prefork/).

Wow. 10 years ago.;) I already had given credit in the README.md to Jean-Paul, but referring to a relatively recent answer by him on Stackoverflow. I didn't knew it was around so long, and also not aware of your tests.

> It would be good to have some documented examples. It would be even better
> to have a proper Twisted API for that.
> 
> Note that for testing static files, sendfile may be an interesting
> boost: https://tm.tl/585

The thing is: sendfile() doesn't support TLS. As far as I can see.

Further: the tests that are getting "close" (up to 50%-70%) to Nginx performance are using a "Fixed Resource" .. that is merely a Resource returning a string. 

When I take static.File, the performance gap widens up considerable (factor 4-5 vs Nginx). Which brought me to the following idea .. not sure if that would work:

Why not completely cache a Twisted Web HTTP _response_ (including headers and all) upon the first request to that resource _in RAM_?

If the underlying is a file, maybe use FS notify to invalidate the cache entry.

That would still allow doing TLS and push octets from RAM.

A static.CachingFile resource. Or a general CachingWrapper factory, wrapping any resource hierarchy.

Of course that breaks for real dynamic sites .. but it is useful: e.g. we use FrozenFlask to freeze Flask and deploy to S3, and normal Flask for easy and standard development. I can still use all the routing goodies of Flask and have a set of statics in the end.

> 
> Also, on BSDs (not sure about OS X) and recent Linux, you can use
> SO_REUSEPORT which would make for an even simpler code.

This is very interesting. Thanks for pointing me there .. didn't knew that.

It is useful and I will try, since as

https://lwn.net/Articles/542629/

notes:

"when multiple threads are waiting in the accept() call, wake-ups are not fair, so that, under high load, incoming connections may be distributed across threads in a very unbalanced fashion."

I have seen this behavior also. Accept from multiple processes is skewed.

I am fine with support for FreeBSD and Linux only (for now).

So: I will further explore:

1) SO_REUSEPORT
2) CachingWrapper

Thanks for feedback and hints!
/Tobias

> 
> --
> Thomas
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



