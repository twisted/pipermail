From mhumphrey at gmail.com  Sun Sep  1 14:04:35 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Sun, 1 Sep 2013 13:04:35 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
Message-ID: <CAMYwhV=7UzcV2yJLBBRSyxgHJWCPRqdeo7gbtRMtLDCYj9LwMg@mail.gmail.com>

Tom -

Just wanted to thank you for your help. I got everything ported over to
Twisted on Friday, and the responsiveness of the web site is 10 times
better. Also the number of lines of (my) code declined, which is great.

Thanks much.



On Wed, Aug 28, 2013 at 6:40 AM, Tom Sheffler <tom.sheffler at gmail.com>wrote:

>
> Hi Matthew -
>
> I have a couple of idioms I use for #2 and #3 in your message.  Here they
> are.
>
> #2)
>
> For timer events, I create a function that when called, continuously
> schedules itself again in the reactor, does some work for the current
> tick, and then exits.  I've used this down to 1-second intervals.  If
> you're looking for sub-millisecond level timing, this may not be
> appropriate for your application.
>
> def timerFunction(reactor):
>
>     reactor.callLater(1.0, timerFunction, reactor)
>
>     # do the work for this time tick
>     # etc etc
>
>     return
>
> # Somewhere in main do this to kick it off
> from twisted.internet import reactor
> timerFunction(reactor)
>
>
> #3)
>
> For subprocesses, I like to create a custom protocol for each type of
> sub-command I am calling.  I also like to create an object to manage
> the process, its arguments, its results and its temp files.  The idiom
> below is suitable for calling a subprocess that accepts a small amount
> of buffered data on stdin, produces some output on stdout, and logs its
> stderr.
>
> Be careful examining the value of reason.value.exitCode in
> processExited.  The twisted docs show printing the exitCode as a "%d",
> but sometimes the value is None --- if the process was terminated by a
> signal.  The mere printing of the value with "%d" will then trigger an
> exception!
>
>
> Here's my idiom:
>
> class FooprocProtocol(protocol.ProcessProtocol):
>
>     def __init__(self, foomgr):
>         # the object managing my subprocess
>         self.foomgr = foomgr
>
>         # my stdout data
>         self.data = ""
>
>     def connectionMade(self):
>         # Pump input data in using this, and then close stdin
>         log.msg("connectionMade!")
>         # self.transport.write("...")  # if there is any data to shove
> into stdin
>         self.transport.closeStdin()
>
>     def outReceived(self, data):
>         # collect up our stdout
>         log.msg("outReceived! with %d bytes!" % len(data))
>         self.data = self.data + data
>
>     def errReceived(self, data):
>         # echo stderr messages to log with a marker
>         log.msg(">%s" % data)
>
>     def inConnectionLost(self):
>         print "inConnectionLost! stdin is closed! (we probably did it)"
>
>     def outConnectionLost(self):
>         log.msg("outConnectionLost! The child closed their stdout!")
>
>     def errConnectionLost(self):
>         log.msg("errConnectionLost! The child closed their stderr.")
>
>     def processExited(self, reason):
>         log.msg("processExited:%s:" % reason)
>         exitcode = reason.value.exitCode         # an integer or None
>
>         # do some work upon processExit potentially make a decision on
> exitcode ...
>
>         log.msg("processExited:%s" % exitcode)
>
>     def processEnded(self, reason):
>         print "processEnded, status %s" % (reason.value.exitCode,)
>
>         # process the data in the process manager
>         exitcode = reason.value.exitCode         # might be non-numeric
>         result = self.foomgr.processData(exitcode)
>
>
>
> # The main job of the Process Manager is to build the command list and
> # process the results.  It gives us a handy place to encapsulate this
> # logic.
>
> class FooprocManager(object):
>
>     CMD = "/usr/local/foocmd"
>
>     def __init__(self, arg1, arg2, arg3)
>
>         # create a Deferred to fire when we succeed or fail
>         self.d = Deferred()
>
>         # build our command argument list as appropriate for our command
>         self.cmdargs = self.build_cmd_args(arg1, arg2, arg3)
>
>         # define places to store the transport, pid and other things
>         self.ptransport = None
>         self.pid = None
>
>     def build_cmd_args(self, arg1, arg2, arg3):
>
>         # in my projects, this method has become fairly involved as it
> creates
>         # tmp files and builds potentially complicated argument lists.
>
>         arglist = [self.CMD, arg1, arg2, arg3]
>         return arglist
>
>     def run(self):
>
>         # instantiate a protocol connected to this manager
>         pp = FooprocProtocol(self)
>
>         # spawn the process, save the PID
>         self.ptransport = reactor.spawnProcess(pp, self.CMD, self.cmdargs,
> { })
>         self.pid = self.ptransport.pid
>
>     def processData(exitcode):
>
>         # in my projects, this method opens up result files, parses
> results,
>         # moves things around, deletes tmp files, etc.
>
>         # return the result that we ran this subprocess for
>         return result
>
>
> # Instantiate a new process manager and run it this way.
>
> mgr = FooprocManager(args ...)
> d = mgr.run(args ...)
>
>
> =================
> T
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130901/a5611387/attachment.html>

From wasilak at gmail.com  Wed Sep  4 06:04:26 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 4 Sep 2013 14:04:26 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
Message-ID: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>

Dear list,

I've found such a code example on "Stack Overflow" regarding errbacks:
___________________________

class YourExample(object):
    def your_example(self):
        self.agent = Agent(reactor, pool=pool)
        self.deferred = self.agent.request(
                'GET',
                self.url,
                Headers({'User-Agent': ['Mozilla/5.0']})
            )

        self.deferred.addCallback(self.gotResponse).addErrback(self.gotBadResponse)
def gotBadResponse(self,raised):
    """you might have cleanup code here, or mark the url as bad in the
database, or something similar"""
    pass
__________________________

Normally only Failure object is passed to gotBadResponse() . I would
like to pass full response body to it - is it possible?
Do I have to encapsulate the response body inside Failure object?

Best regards

Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130904/e5858072/attachment.html>

From _ at lvh.io  Wed Sep  4 08:30:27 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 4 Sep 2013 16:30:27 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
Message-ID: <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>

Cze?? Maciek :)

In general, you can pass extra arguments when you call addCallback(s) or
addErrback. They will get passed to the callback.

However, as a side note to that code example, do you understand the
difference between

.addCallbacks(cb, eb)

and:

.addCallback(cb).addErrback(eb)


and:

.addErrback(eb).addCallback(cb)

... Also, keep in mind that you only errback when there is an issue setting
up the connection. If the server successfully responds with an error (say,
a 404 Not Found, or something), the callback will be called with the
response object. So, your question doesn't make a lot of sense to me: if
the errback gets called, there's not really a response!

Also, if you want to do scraping with Twisted, consider looking at Scrapy,
a fully-featured web scraper that uses Twisted internally.

pozdrawiam
lvh
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130904/10898817/attachment.html>

From goffi at goffi.org  Wed Sep  4 08:43:13 2013
From: goffi at goffi.org (Goffi)
Date: Wed, 04 Sep 2013 16:43:13 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
Message-ID: <52274701.4080207@goffi.org>

G'day,

in the method "elements" of twisted.words.xish.domish.Element, the 
function "generateElementsQNamed" is called event if the uri if None, so 
the uri is checked against None instead of not checked at all.

I think the function "generateElementsNamed" should be called instead, 
it looks like a bug for me.
Can you confirm ?

cheers
Goffi


From poalman at gmail.com  Wed Sep  4 11:48:40 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Wed, 4 Sep 2013 18:48:40 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
Message-ID: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>

I'm still pretty new to twisted and feel I'm slowly getting the hang of it,
enough to realise that this line of code is probably going to block and not
do me any favours, the line is the first line in a resource.Resource
render_POST.

json_request = json.loads(request.content.read())

The resource.Resource is a child of another resource which is passed to
server.Site which is passed to internent.TCPServer.

The problem is I can't work out how I can read the post data from the
request in an async way.

I have a feeling I need to implement a protocol, I'm guessing a
LineReceiver but I can't figure out how I'd tie that in with my current
solution or specifically how the LineReceiver would even read
asynchronously to be honest..

Maybe the read is fine? I need the whole post data to do anything useful I
guess as I can't string to a json decoder that I'm aware of. Just it will
block everything up while I read, which shouldn't be long but I guess I'm
bound to the speed of the person posting.

Thanks all!

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130904/9c28960f/attachment.html>

From glyph at twistedmatrix.com  Wed Sep  4 15:45:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 4 Sep 2013 14:45:13 -0700
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
Message-ID: <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>


On Sep 4, 2013, at 10:48 AM, Paul Wiseman <poalman at gmail.com> wrote:

> I'm still pretty new to twisted and feel I'm slowly getting the hang of it, enough to realise that this line of code is probably going to block and not do me any favours, the line is the first line in a resource.Resource render_POST.
> 
> json_request = json.loads(request.content.read())
> 
> The resource.Resource is a child of another resource which is passed to server.Site which is passed to internent.TCPServer.
> 
> The problem is I can't work out how I can read the post data from the request in an async way.
> 
> I have a feeling I need to implement a protocol, I'm guessing a LineReceiver but I can't figure out how I'd tie that in with my current solution or specifically how the LineReceiver would even read asynchronously to be honest..
> 
> Maybe the read is fine? I need the whole post data to do anything useful I guess as I can't string to a json decoder that I'm aware of. Just it will block everything up while I read, which shouldn't be long but I guess I'm bound to the speed of the person posting.
> 
> Thanks all!

If you're parsing a JSON object, you're going to be representing the whole thing in memory at the end of the interaction regardless, even if you parsed it and buffered it in an event-driven way.

That means you need to keep this data relatively small no matter what; if it's arbitrarily large, you are going to start swapping anyway.

So probably, just doing the blocking parse is fine.  You might be able to save a *little* memory by parsing it as it comes in, but you're also going to have to write your own JSON parser, which is probably going to take more programmer time than you will ever save in execution time by this marginal memory reduction :-).  Better would be to spend that effort enforcing stringent resource limits so that you will give up reading before you ever get to the parse in the case where it's big enough to cause a problem.

-glyph



From free4machine at gmail.com  Wed Sep  4 17:54:44 2013
From: free4machine at gmail.com (a qi)
Date: Thu, 5 Sep 2013 07:54:44 +0800
Subject: [Twisted-Python] Is there a 'development mode ' for twisted ?
Message-ID: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>

HI, there

     I'm new to twisted,  after  reading the documents from twisted
websites,  I got some questions:

     1. Is there a 'development mode ' for twisted ?   like django, you can
see your changes without restarting  server.

     2. Can I use django and twisted together?  actually, I want to use
django's ORM   inside twisted server, so that I  can  manipulate  data
easily.  I've try  'sob.py', but I can not figure it out how to use it .
         On the other hand,   django is synchronous,  twisted is
asynchronous, how to use them together if we can ?

     3. How to suppress  logs that I do not need ?   there are many logs in
twisted.log file,  as shown in the follow:

2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
ssh-connection on ClientCommandTransport,client] remote eof
2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
ssh-connection on ClientCommandTransport,client] unhandled request for


Any suggestions would be  appreciated.  Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/71d36d8d/attachment.html>

From wasilak at gmail.com  Thu Sep  5 01:24:06 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 5 Sep 2013 09:24:06 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
Message-ID: <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>

Laurens,

> Cze??

Cze??! :)

Thank you for your answer. I'm explicitly interested in the following
combination:

> .addCallback(cb).addErrback(eb)

If I understand correctly errback "eb" catches errors from both callback
"cb", and from agent.request (agent.request errors pass through default
empty errback that re-raises them).

> Also, if you want to do scraping with Twisted, consider looking at
Scrapy, a fully-featured web scraper that uses Twisted internally.

I'm working on CoAP protocol which runs on top of UDP. My actual code is
request processing (but the problem is the same as in my previous post):

_________________________________________________
def processRequest(self, request):
        (...)
        d = defer.succeed(request)
        d.addCallback(self.processBlock1)
        d.addCallback(self.dispatchRequest)
def dispatchRequest(self, request):
        (...)
        resource = self.endpoint.getResourceFor(request)
        if resource is None:
            response = Message(code=NOT_FOUND, payload='Resource not found!'
)
            self.respond(response, request)
            return
        try:
            d = resource.render(request)
        except iot.error.UnallowedMethod:
            response = Message(code=METHOD_NOT_ALLOWED, payload='Method not
allowed!')
            self.respond(response, request)
            return
        except iot.error.UnsupportedMethod:
            response = Message(code=NOT_IMPLEMENTED, payload='Method not
implemented!')
            self.respond(response, request)
            return
        delayed_ack = reactor.callLater(EMPTY_ACK_DELAY, self.sendEmptyAck,
request)
        d.addCallback(self.respond, request, delayed_ack)
        return d

__________________________________________________

I would like to rewrite it to:

__________________________________________________
def processRequest(self, request):
        (...)
        d = defer.succeed(request)
        d.addCallback(self.processBlock1)
        d.addCallback(self.dispatchRequest
).addErrback(self.handleRequestError)

def dispatchRequest(self, request):
        (...)
        resource = self.endpoint.getResourceFor(request)
        if resource is None:
            raise NoResource()
        try:
            d = resource.render(request)
        except iot.error.UnallowedMethod:      #Explicit re-rise for this
example only
            raise UnallowedMethod()
        except iot.error.UnsupportedMethod:
            raise UnsupportedMethod()
        d.addCallback(self.respond, request)
        return d


def handleRequestErrors(self, failure, request???)
        # handle exceptions, send error response to client

_______________________________________________

I would like to handle Exceptions in handleRequestErrors(). However
handleRequestErrors() has to send a response to the client, so it needs the
request, and I don't know how to pass it from inside dispatchRequest().

I see two possibilities:
    1. Pass request inside Failure object
    2. Leave the original code (process errors inside callback)

Which solution is more elegant?

Best Regards

Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/e3d386c4/attachment-0001.html>

From _ at lvh.io  Thu Sep  5 01:24:04 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 09:24:04 +0200
Subject: [Twisted-Python] Is there a 'development mode ' for twisted ?
In-Reply-To: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>
References: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>
Message-ID: <CAE_Hg6bQKtbV_88yb4mz0NbeTN1fbw3WPGy_dteDEibYx6RsYg@mail.gmail.com>

On Thu, Sep 5, 2013 at 1:54 AM, a qi <free4machine at gmail.com> wrote:

> HI, there
>
>      I'm new to twisted,  after  reading the documents from twisted
> websites,  I got some questions:
>
>      1. Is there a 'development mode ' for twisted ?   like django, you
> can see your changes without restarting  server.
>

Not by default, but using the python project "watchdog" it's not very hard
to set up. Personally, I get it to run my *tests*, not my server, since I
really don't care about one particular piece of behavior my server has
right now which I am manually testing, but I care a lot about all of the
behavior my code has that I can automatically test.


>      2. Can I use django and twisted together?  actually, I want to use
> django's ORM   inside twisted server, so that I  can  manipulate  data
> easily.  I've try  'sob.py', but I can not figure it out how to use it .
>          On the other hand,   django is synchronous,  twisted is
> asynchronous, how to use them together if we can ?
>

That depends what you mean by mixing! FWIW, I hope to give a talk on this
subject at PyCon 2014. You can get the preliminary slides here:

http://blog.lvh.io/TwistedMixing/

as well as code examples:

http://www.github.com/lvh/TwistedMixing

Anyway, using Twisted to serve Django is really easy. Using the Django ORM
inside otherwise Twisted code is a *bit* trickier, since, as you mentioned,
it's blocking. There are two solutions to this, but neither is great:

- You can run calls to the Django ORM with deferToThread so that they block
somewhere else, but IIUC there are plenty of things that aren't really
calls (say, attribute access) that will still result in database IO ->
blocking
- Suppose you could get a green (as in gevent) Django ORM, you can use that
+ geventreactor, but that's gross and hacky

     3. How to suppress  logs that I do not need ?   there are many logs in
> twisted.log file,  as shown in the follow:
>
> 2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
> ssh-connection on ClientCommandTransport,client] remote eof
> 2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
> ssh-connection on ClientCommandTransport,client] unhandled request for
>

You could try filtering the log. That way you still get the loud logs if
you later need them for forensics, but you don't have to look at them right
now.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/39bf01b1/attachment.html>

From _ at lvh.io  Thu Sep  5 01:57:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 09:57:00 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
Message-ID: <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>

Hi,


On Thu, Sep 5, 2013 at 9:24 AM, Maciej Wasilak <wasilak at gmail.com> wrote:

> Thank you for your answer. I'm explicitly interested in the following
> combination:
>
> > .addCallback(cb).addErrback(eb)
>
> If I understand correctly errback "eb" catches errors from both callback
> "cb", and from agent.request (agent.request errors pass through default
> empty errback that re-raises them).
>

Yes, that's exactly what it does :) The difference being that with
.addCallbacks(cb, eb), errors in cb would not be caught by eb.

> > Also, if you want to do scraping with Twisted, consider looking at
> Scrapy, a fully-featured web scraper that uses Twisted internally.
>
> I'm working on CoAP protocol which runs on top of UDP. My actual code is
> request processing (but the problem is the same as in my previous post):
>
> _________________________________________________
>  def processRequest(self, request):
>         (...)
>         d = defer.succeed(request)
>         d.addCallback(self.processBlock1)
>         d.addCallback(self.dispatchRequest)
> def dispatchRequest(self, request):
>         (...)
>         resource = self.endpoint.getResourceFor(request)
>         if resource is None:
>             response = Message(code=NOT_FOUND, payload='Resource not
> found!')
>             self.respond(response, request)
>             return
>         try:
>             d = resource.render(request)
>         except iot.error.UnallowedMethod:
>             response = Message(code=METHOD_NOT_ALLOWED, payload='Method
> not allowed!')
>             self.respond(response, request)
>             return
>         except iot.error.UnsupportedMethod:
>             response = Message(code=NOT_IMPLEMENTED, payload='Method not
> implemented!')
>             self.respond(response, request)
>             return
>         delayed_ack = reactor.callLater(EMPTY_ACK_DELAY, self.sendEmptyAck
> , request)
>         d.addCallback(self.respond, request, delayed_ack)
>         return d
>
> __________________________________________________
>
> I would like to rewrite it to:
>
> __________________________________________________
> def processRequest(self, request):
>         (...)
>         d = defer.succeed(request)
>         d.addCallback(self.processBlock1)
>         d.addCallback(self.dispatchRequest
> ).addErrback(self.handleRequestError)
>
> def dispatchRequest(self, request):
>         (...)
>         resource = self.endpoint.getResourceFor(request)
>         if resource is None:
>             raise NoResource()
>         try:
>             d = resource.render(request)
>         except iot.error.UnallowedMethod:      #Explicit re-rise for this
> example only
>             raise UnallowedMethod()
>         except iot.error.UnsupportedMethod:
>             raise UnsupportedMethod()
>         d.addCallback(self.respond, request)
>         return d
>
>
> def handleRequestErrors(self, failure, request???)
>         # handle exceptions, send error response to client
>
> _______________________________________________
>
> I would like to handle Exceptions in handleRequestErrors(). However
> handleRequestErrors() has to send a response to the client, so it needs the
> request, and I don't know how to pass it from inside dispatchRequest().
>
You don't have to do it from in there. You can do .addErrback(handleErrors,
request), since it's all the same request object, right?

>  I see two possibilities:
>     1. Pass request inside Failure object
>     2. Leave the original code (process errors inside callback)
>
Both of those would work, but see above :)

Two random pieces of code review:

1. It seems self.endpoint is a t.w.s.Site object. That's kind of confusing,
since twisted has an "endpoint" concept that's one step removed from a Site
(endpoints connect or listen with factories, a Site is a factory). You
might want to reconsider that name :)
2. It's kind of strange to start with defer.succeed() and then start making
a callback chain IMHO, but it's not wrong, really.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/9051c3e0/attachment.html>

From poalman at gmail.com  Thu Sep  5 02:50:26 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 5 Sep 2013 09:50:26 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
Message-ID: <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>

Hey,

Thanks for your reply! The json data should never be too long so I'm not
worried about the memory usage, I need the whole json object to start
working anyway realistically - I was more concerned about blocking reading
the data from the network - specifically the request.content.read(), if the
client happens to be sending it very slowly this would block everything up
right? - or would this not be an issue?

Maybe because I have fairly small content bodies I wont have to worry?

Payl


On 4 September 2013 22:45, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Sep 4, 2013, at 10:48 AM, Paul Wiseman <poalman at gmail.com> wrote:
>
> > I'm still pretty new to twisted and feel I'm slowly getting the hang of
> it, enough to realise that this line of code is probably going to block and
> not do me any favours, the line is the first line in a resource.Resource
> render_POST.
> >
> > json_request = json.loads(request.content.read())
> >
> > The resource.Resource is a child of another resource which is passed to
> server.Site which is passed to internent.TCPServer.
> >
> > The problem is I can't work out how I can read the post data from the
> request in an async way.
> >
> > I have a feeling I need to implement a protocol, I'm guessing a
> LineReceiver but I can't figure out how I'd tie that in with my current
> solution or specifically how the LineReceiver would even read
> asynchronously to be honest..
> >
> > Maybe the read is fine? I need the whole post data to do anything useful
> I guess as I can't string to a json decoder that I'm aware of. Just it will
> block everything up while I read, which shouldn't be long but I guess I'm
> bound to the speed of the person posting.
> >
> > Thanks all!
>
> If you're parsing a JSON object, you're going to be representing the whole
> thing in memory at the end of the interaction regardless, even if you
> parsed it and buffered it in an event-driven way.
>
> That means you need to keep this data relatively small no matter what; if
> it's arbitrarily large, you are going to start swapping anyway.
>
> So probably, just doing the blocking parse is fine.  You might be able to
> save a *little* memory by parsing it as it comes in, but you're also going
> to have to write your own JSON parser, which is probably going to take more
> programmer time than you will ever save in execution time by this marginal
> memory reduction :-).  Better would be to spend that effort enforcing
> stringent resource limits so that you will give up reading before you ever
> get to the parse in the case where it's big enough to cause a problem.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/924eaa60/attachment-0001.html>

From wasilak at gmail.com  Thu Sep  5 04:00:47 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 5 Sep 2013 12:00:47 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
Message-ID: <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>

Laurens,


> You don't have to do it from in there. You can do
> .addErrback(handleErrors, request), since it's all the same request object,
> right?
>

Aaargh! I see the problem now. I wrote everything as part of the Protocol
class (D&D - Deferreds&Dictionaries), when I should have extracted request
functionality into separate class. Then I can save request body as a class
member between callback and errback. Thanks!!!


> 1. It seems self.endpoint is a t.w.s.Site object. That's kind of
> confusing, since twisted has an "endpoint" concept that's one step removed
> from a Site (endpoints connect or listen with factories, a Site is a
> factory). You might want to reconsider that name :)
>

Endpoint is the official name in draft:
http://tools.ietf.org/html/draft-ietf-core-coap-18  I'll rename it to
coap_endpoint to avoid confusion


> 2. It's kind of strange to start with defer.succeed() and then start
> making a callback chain IMHO, but it's not wrong, really.
>

I've recently understood callback chaining and I really like the idea. I
guess it's this old proverb about having a hammer, and seeing nails
everywhere. I'll try to come up with something better :) .

Case closed - thank you very much!
Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/55dbac1d/attachment.html>

From ralphm at ik.nu  Thu Sep  5 05:24:01 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Thu, 05 Sep 2013 13:24:01 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
In-Reply-To: <52274701.4080207@goffi.org>
References: <52274701.4080207@goffi.org>
Message-ID: <522869D1.5000705@ik.nu>

On 2013-09-04 16:43, Goffi wrote:
> G'day,
> 
> in the method "elements" of twisted.words.xish.domish.Element, the
> function "generateElementsQNamed" is called event if the uri if None, so
> the uri is checked against None instead of not checked at all.
> 
> I think the function "generateElementsNamed" should be called instead,
> it looks like a bug for me.
> Can you confirm ?

The docstring says you have to either pass in both or not. I would say
your suggestion is a feature request at best.

If we would call generateElementsNamed when only the name parameter is
set, you might get unrelated child elements in a different namespace
than you are looking for. I can imagine cases where this becomes an
attack vector. IMO, you should *always* pass in the fully qualified name
here.

The other permutation that is not currently supported, where you do pass
in the URI but not the local name, seems more useful to me.

-- 
ralphm


From exarkun at twistedmatrix.com  Thu Sep  5 05:24:50 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 11:24:50 -0000
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
 <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
Message-ID: <20130905112450.26068.1055468456.divmod.xquotient.376@top>

On 08:50 am, poalman at gmail.com wrote:
>Hey,
>
>Thanks for your reply! The json data should never be too long so I'm 
>not
>worried about the memory usage, I need the whole json object to start
>working anyway realistically - I was more concerned about blocking 
>reading
>the data from the network - specifically the request.content.read(), if 
>the
>client happens to be sending it very slowly this would block everything 
>up
>right? - or would this not be an issue?
>
>Maybe because I have fairly small content bodies I wont have to worry?

Your resource isn't asked to render a response until the request has 
been fully received.  Request.content is a StringIO (if it is small) or 
a temporary file (if it is larger).  Reading from the temporary file 
blocks for a little bit since disks are slow but unless your system is 
seriously loaded you can usually disregard this.

Jean-Paul


From _ at lvh.io  Thu Sep  5 06:37:37 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 14:37:37 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
Message-ID: <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>

On Thu, Sep 5, 2013 at 12:00 PM, Maciej Wasilak <wasilak at gmail.com> wrote:

> Laurens,
>
>
>>  You don't have to do it from in there. You can do
>> .addErrback(handleErrors, request), since it's all the same request object,
>> right?
>>
>
> Aaargh! I see the problem now. I wrote everything as part of the Protocol
> class (D&D - Deferreds&Dictionaries), when I should have extracted request
> functionality into separate class. Then I can save request body as a class
> member between callback and errback. Thanks!!!
>

Well, yes, you should, but still keep in mind that you can actually just
pass the request like so:

.addErrback(handleErrors, request)

You don't really have to save the request itself anywhere as an attribute.


>>
>>  1. It seems self.endpoint is a t.w.s.Site object. That's kind of
>> confusing, since twisted has an "endpoint" concept that's one step removed
>> from a Site (endpoints connect or listen with factories, a Site is a
>> factory). You might want to reconsider that name :)
>>
>
> Endpoint is the official name in draft:
> http://tools.ietf.org/html/draft-ietf-core-coap-18  I'll rename it to
> coap_endpoint to avoid confusion
>
>
>> 2. It's kind of strange to start with defer.succeed() and then start
>> making a callback chain IMHO, but it's not wrong, really.
>>
>
> I've recently understood callback chaining and I really like the idea. I
> guess it's this old proverb about having a hammer, and seeing nails
> everywhere. I'll try to come up with something better :) .
>

No problem.


>  Case closed - thank you very much!
>

Glad to have helped.


> Regards
> Maciek
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/1f9e3989/attachment.html>

From poalman at gmail.com  Thu Sep  5 07:23:12 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 5 Sep 2013 14:23:12 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <20130905112450.26068.1055468456.divmod.xquotient.376@top>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
 <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
 <20130905112450.26068.1055468456.divmod.xquotient.376@top>
Message-ID: <CACgdh2i8nYrh+pO00watQkvanyQZ2nYj58soXLsWJyxjV=98Dw@mail.gmail.com>

Ah awesome that clears it up, thanks! I've never had to deal with HTTP
requests with content bodies before.

I presumed that the .read() would be pulling bytes from the network. I
presumed wrong :)

Thanks!

Paul


On 5 September 2013 12:24, <exarkun at twistedmatrix.com> wrote:

> On 08:50 am, poalman at gmail.com wrote:
>
>> Hey,
>>
>> Thanks for your reply! The json data should never be too long so I'm not
>> worried about the memory usage, I need the whole json object to start
>> working anyway realistically - I was more concerned about blocking reading
>> the data from the network - specifically the request.content.read(), if
>> the
>> client happens to be sending it very slowly this would block everything up
>> right? - or would this not be an issue?
>>
>> Maybe because I have fairly small content bodies I wont have to worry?
>>
>
> Your resource isn't asked to render a response until the request has been
> fully received.  Request.content is a StringIO (if it is small) or a
> temporary file (if it is larger).  Reading from the temporary file blocks
> for a little bit since disks are slow but unless your system is seriously
> loaded you can usually disregard this.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/cf4a0ff6/attachment.html>

From peter at peterryan.net  Thu Sep  5 11:49:57 2013
From: peter at peterryan.net (Peter Ryan)
Date: Thu, 5 Sep 2013 12:49:57 -0500
Subject: [Twisted-Python] ftpclient connection lost callback
Message-ID: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>

I am writing a simple ftp client which I am trying to dispose of. Right now
I send a quit command:

(the ftp_client reference is a FTPClient built with a ClientCreator)

deferred = ftp_client.quit()

And I register a callback:

def quitSent(response):
   print "quit acknowledged...connected?", ftp_client.transport.connected

deferred.addCallback(quitSent)

If I invoke the above the connection is printed as connected.

However if I schedule a callback to check the status later:

def status():
   print "quit acknowledged...connected?", ftp_client.transport.connected

reactor.callLater(1, self.status)

If I schedule a callback for a second later the transport is not connected.
I've searched quite a bit but I cannot determine a way to register a
callback for when the TCP transport is actually disconnected. Can anyone
offer some insight? I'd like to know explicitly when the client is closed.

Thanks,

Peter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/2e1a483b/attachment-0001.html>

From exarkun at twistedmatrix.com  Thu Sep  5 12:35:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 18:35:42 -0000
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
Message-ID: <20130905183542.26068.1581086488.divmod.xquotient.415@top>

On 05:49 pm, peter at peterryan.net wrote:
>I am writing a simple ftp client which I am trying to dispose of. Right 
>now
>I send a quit command:
>
>(the ftp_client reference is a FTPClient built with a ClientCreator)
>
>deferred = ftp_client.quit()
>
>And I register a callback:
>
>def quitSent(response):
>   print "quit acknowledged...connected?", 
>ftp_client.transport.connected
>
>deferred.addCallback(quitSent)
>
>If I invoke the above the connection is printed as connected.

There is no documented `connected` attribute of transports.  So who 
knows what this is telling you. :)

However, the way you learn when a protocol's transport has disconnected 
is to implement the `connectionLost` method on the protocol.  It is 
called when the transport disconnects.

Jean-Paul
>However if I schedule a callback to check the status later:
>
>def status():
>   print "quit acknowledged...connected?", 
>ftp_client.transport.connected
>
>reactor.callLater(1, self.status)
>
>If I schedule a callback for a second later the transport is not 
>connected.
>I've searched quite a bit but I cannot determine a way to register a
>callback for when the TCP transport is actually disconnected. Can 
>anyone
>offer some insight? I'd like to know explicitly when the client is 
>closed.
>
>Thanks,
>
>Peter


From peter at peterryan.net  Thu Sep  5 12:48:54 2013
From: peter at peterryan.net (Peter Ryan)
Date: Thu, 5 Sep 2013 13:48:54 -0500
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <20130905183542.26068.1581086488.divmod.xquotient.415@top>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
 <20130905183542.26068.1581086488.divmod.xquotient.415@top>
Message-ID: <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>

Thanks.

So is the idiomatic approach for this with something like the FTPClient to
subclass it and override connectionLost? FTPClientBasic clears up queued
commands when this happens (which I assume I still want it to do).

To me it seems a little overbearing to have to subclass the ftpclient just
to get a tcp connection lost event (which seem like an event most users
would be interested in).






On Thu, Sep 5, 2013 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 05:49 pm, peter at peterryan.net wrote:
>
>> I am writing a simple ftp client which I am trying to dispose of. Right
>> now
>> I send a quit command:
>>
>> (the ftp_client reference is a FTPClient built with a ClientCreator)
>>
>> deferred = ftp_client.quit()
>>
>> And I register a callback:
>>
>> def quitSent(response):
>>   print "quit acknowledged...connected?", ftp_client.transport.connected
>>
>> deferred.addCallback(quitSent)
>>
>> If I invoke the above the connection is printed as connected.
>>
>
> There is no documented `connected` attribute of transports.  So who knows
> what this is telling you. :)
>
> However, the way you learn when a protocol's transport has disconnected is
> to implement the `connectionLost` method on the protocol.  It is called
> when the transport disconnects.
>
> Jean-Paul
>
>  However if I schedule a callback to check the status later:
>>
>> def status():
>>   print "quit acknowledged...connected?", ftp_client.transport.connected
>>
>> reactor.callLater(1, self.status)
>>
>> If I schedule a callback for a second later the transport is not
>> connected.
>> I've searched quite a bit but I cannot determine a way to register a
>> callback for when the TCP transport is actually disconnected. Can anyone
>> offer some insight? I'd like to know explicitly when the client is closed.
>>
>> Thanks,
>>
>> Peter
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130905/31503574/attachment.html>

From exarkun at twistedmatrix.com  Thu Sep  5 12:54:43 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 18:54:43 -0000
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
 <20130905183542.26068.1581086488.divmod.xquotient.415@top>
 <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>
Message-ID: <20130905185443.26068.350543936.divmod.xquotient.418@top>

On 06:48 pm, peter at peterryan.net wrote:
>Thanks.
>
>So is the idiomatic approach for this with something like the FTPClient 
>to
>subclass it and override connectionLost? FTPClientBasic clears up 
>queued
>commands when this happens (which I assume I still want it to do).

Is it idiomatic?  I don't know.  It accomplishes your goal.  If you 
like, propose a better API (file a ticket, attach a patch, etc:

http://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs#CodeContributions

)

Jean-Paul
>To me it seems a little overbearing to have to subclass the ftpclient 
>just
>to get a tcp connection lost event (which seem like an event most users
>would be interested in).
>
>
>
>
>
>
>On Thu, Sep 5, 2013 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:
>>On 05:49 pm, peter at peterryan.net wrote:
>>>I am writing a simple ftp client which I am trying to dispose of. 
>>>Right
>>>now
>>>I send a quit command:
>>>
>>>(the ftp_client reference is a FTPClient built with a ClientCreator)
>>>
>>>deferred = ftp_client.quit()
>>>
>>>And I register a callback:
>>>
>>>def quitSent(response):
>>>   print "quit acknowledged...connected?", 
>>>ftp_client.transport.connected
>>>
>>>deferred.addCallback(quitSent)
>>>
>>>If I invoke the above the connection is printed as connected.
>>
>>There is no documented `connected` attribute of transports.  So who 
>>knows
>>what this is telling you. :)
>>
>>However, the way you learn when a protocol's transport has 
>>disconnected is
>>to implement the `connectionLost` method on the protocol.  It is 
>>called
>>when the transport disconnects.
>>
>>Jean-Paul
>>
>>  However if I schedule a callback to check the status later:
>>>
>>>def status():
>>>   print "quit acknowledged...connected?", 
>>>ftp_client.transport.connected
>>>
>>>reactor.callLater(1, self.status)
>>>
>>>If I schedule a callback for a second later the transport is not
>>>connected.
>>>I've searched quite a bit but I cannot determine a way to register a
>>>callback for when the TCP transport is actually disconnected. Can 
>>>anyone
>>>offer some insight? I'd like to know explicitly when the client is 
>>>closed.
>>>
>>>Thanks,
>>>
>>>Peter
>>
>>______________________________**_________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>>http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com 
>>/cgi-bin/mailman/listinfo/twisted-python>
>


From wasilak at gmail.com  Fri Sep  6 14:06:01 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 6 Sep 2013 22:06:01 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
 <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
Message-ID: <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>

Hello,

just one more question:

Well, yes, you should, but still keep in mind that you can actually just
> pass the request like so:
>
> .addErrback(handleErrors, request)
>
> You don't really have to save the request itself anywhere as an attribute.
>

if I understand correctly, when I put this instruction into my callback,
then the errback will catch errors only from the callback, and not from
agent.request, right? Such code seems hard to debug. Is this the standard
procedure in Twisted to add callbacks/errbacks inside other callbacks?
Best Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130906/1eaa1fd3/attachment.html>

From goffi at goffi.org  Fri Sep  6 14:42:14 2013
From: goffi at goffi.org (Goffi)
Date: Fri, 06 Sep 2013 22:42:14 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
In-Reply-To: <522869D1.5000705@ik.nu>
References: <52274701.4080207@goffi.org> <522869D1.5000705@ik.nu>
Message-ID: <522A3E26.4020300@goffi.org>

Ok thanks for the precisions.

On 05/09/2013 13:24, Ralph Meijer wrote:
> On 2013-09-04 16:43, Goffi wrote:
>> G'day,
>>
>> in the method "elements" of twisted.words.xish.domish.Element, the
>> function "generateElementsQNamed" is called event if the uri if None, so
>> the uri is checked against None instead of not checked at all.
>>
>> I think the function "generateElementsNamed" should be called instead,
>> it looks like a bug for me.
>> Can you confirm ?
>
> The docstring says you have to either pass in both or not. I would say
> your suggestion is a feature request at best.
>
> If we would call generateElementsNamed when only the name parameter is
> set, you might get unrelated child elements in a different namespace
> than you are looking for. I can imagine cases where this becomes an
> attack vector. IMO, you should *always* pass in the fully qualified name
> here.
>
> The other permutation that is not currently supported, where you do pass
> in the URI but not the local name, seems more useful to me.
>



From p.mayers at imperial.ac.uk  Fri Sep  6 15:11:03 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 06 Sep 2013 22:11:03 +0100
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
 <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
 <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>
Message-ID: <6ccd5318-088b-4f6d-8abc-67c7fd8a3759@email.android.com>

Maciej Wasilak <wasilak at gmail.com> wrote:
>Hello,
>
>just one more question:
>
>Well, yes, you should, but still keep in mind that you can actually
>just
>> pass the request like so:
>>
>> .addErrback(handleErrors, request)
>>
>> You don't really have to save the request itself anywhere as an
>attribute.
>>
>
>if I understand correctly, when I put this instruction into my
>callback,
>then the errback will catch errors only from the callback, and not from
>agent.request, right? Such code seems hard to debug. Is this the
>standard
>procedure in Twisted to add callbacks/errbacks inside other callbacks?
>Best Regards
>Maciek
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

No it'll catch errors from anything previous in the chain - either the agent call or the callback. If you read the docs carefully this should be clear.
-- 
Sent from my phone with, please excuse brevity and typos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130906/189093ae/attachment.html>

From trac at twistedmatrix.com  Sun Sep  8 06:07:47 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 08 Sep 2013 12:07:47 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1378642067.88.4114588285963836769@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130908/b723cc99/attachment.html>

From zooko at leastauthority.com  Wed Sep 11 11:48:08 2013
From: zooko at leastauthority.com (Zooko Wilcox-OHearn)
Date: Wed, 11 Sep 2013 17:48:08 +0000
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
 <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
Message-ID: <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>

Hello, Harry!

I just noticed this thread.

I opened a ticket for this a while back:

https://twistedmatrix.com/trac/ticket/5203# FilePath.children() should
return FilePath objects with unicodes in them instead of strs

There is some discussion on that ticket.

For what it is worth, I agree with Itamar that porting to Python3
shouldn't be combined with changing the functionality or API, but I
also agree with Harry (at least what Harry originally said) that
FilePath objects should not carry around a "path" that is just bytes
and doesn't specify what encoding those bytes are in.

I know this is a subtle topic, in the sense that I can see the
argument on the other side, too, and I don't think either approach can
satisfy all users, but I still think it is a better idea to require
unicode-only, and so I'd like to try to explain why a little bit,
below, in addition to the discussion that is recorded on #5203.

Here's my basic argument: a sequence of bytes without an accompanying
encoding is an *insufficiently typed* thing. That is, there is no way
to use it safely without first restoring a type, and that being the
*correct* type. The traditional way to handle pathnames in Linux has
been to let them be under-typed, and then restore the type
heuristically. This traditionally worked most of the time, because the
most common thing you would do with a sequence of bytes like that is
plug it back into the same filesystem from which it came. However, I
make two claims:

1. In the modern world, it is very common to send it over the network
instead of to plug it back into the same filesystem from which it
came, and

2. there's not very much need for this "forget what type it was, guess
the type later, and guess correctly" hack! We can instead *require*
the user to supply a type with the bytestring originally, and then
remember the type that the user supplied. This breaks only a few use
cases that are probably very rare, and in fact might be unfixable
anyway, but it prevents failures which are very common, which is what
happens when you guess the wrong type during the restore. This is what
we've done in Tahoe-LAFS, and we've had few or no complaints from
users about it. Certainly if there were any, it was in the early days,
of Tahoe-LAFS, around 5 years ago, when ill-typed Linux filesystems
hadn't quite finished dying out (i.e. the bytes on there are actually
encoded in iso8859, but sys.getfilesystemencoding() returns 'utf-8').

We wrote unit tests and did careful code-review when we converted
Tahoe-LAFS from bytes to unicode-only a few years ago, and so I'd be
happy to share the knowledge I gleaned from that experience.

Regards,

Zooko


From terry at jon.es  Wed Sep 11 18:24:13 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 12 Sep 2013 01:24:13 +0100
Subject: [Twisted-Python] Deferreds / promises as first-class objects for
	function calls
Message-ID: <CACqnu4WJDGKj2EnpE1FZo+uJMpzZuA=R8BVRGfW42hz8J1OwRw@mail.gmail.com>

I just wrote a blog post that people who like thinking about deferreds
might find interesting. Somehow it took me 7 years to one day look at
deferreds in this way:
http://blogs.fluidinfo.com/terry/2013/09/12/promises-are-first-class-objects-for-function-calls/

(With apologies for mainly describing things in terms of promises instead
of deferreds.)

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130912/d70e52a7/attachment.html>

From trac at twistedmatrix.com  Sun Sep 15 00:05:15 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 15 Sep 2013 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1379225115.13.1429973170239958454@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130915/a0031887/attachment.html>

From glyph at twistedmatrix.com  Sun Sep 15 14:48:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 15 Sep 2013 13:48:25 -0700
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
 <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
 <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>
Message-ID: <6C215A62-0E62-44C0-BBFE-0EC4C50DEB67@twistedmatrix.com>

On Sep 11, 2013, at 10:48 AM, Zooko Wilcox-OHearn <zooko at leastauthority.com> wrote:

> We can instead *require*
> the user to supply a type with the bytestring originally, and then
> remember the type that the user supplied. This breaks only a few use
> cases that are probably very rare, and in fact might be unfixable
> anyway

Just to be specific about this, the use-case that it breaks is the notion that you have a USB key formatted on a Linux machine in KOI-8 and you plug it into a system where the host encoding is Shift-JIS.  You can then have a path which is partially in one encoding and partially in another.

The problem with the "bytes-with-encoding" idea is that it doesn't apply to paths, it applies to path segments - which is why FilePath is (well, ought to be) a data *structure*, and not just some methods around existing data (a string).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130915/0abaa9aa/attachment.html>

From wuzhigaoem at 163.com  Tue Sep 17 01:53:40 2013
From: wuzhigaoem at 163.com (=?GBK?B?zuLWvrjf?=)
Date: Tue, 17 Sep 2013 15:53:40 +0800 (CST)
Subject: [Twisted-Python] run python application with twistd -y ifinger.tac,
 error occurs. please help to check
Message-ID: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>







Experts:
???

my ifinger.tac file content like following:
fromtwisted.applicationimportinternet, servicefromtwisted.internetimportprotocol, reactor, deferfromtwisted.protocolsimportbasicclassFingerProtocol(basic.LineReceiver):
    deflineReceived(self, user):
        d = self.factory.getUser(user)

        defonError(err):
            return'Internal error in server'd.addErrback(onError)

        defwriteResponse(message):
            self.transport.write(message + '\r\n')
            self.transport.loseConnection()
        d.addCallback(writeResponse)

classFingerFactory(protocol.ServerFactory):
    protocol = FingerProtocoldef__init__(self, **kwargs):
        self.users = kwargsdefgetUser(self, user):
        returndefer.succeed(self.users.get(user, "No such user"))

application = service.Application('finger', uid=1, gid=1)
factory = FingerFactory(moshez='Happy and well')
internet.TCPServer(79, factory).setServiceParent(service.IServiceCollection(application))                   


when running this script with command-line : twistd -y ifinger.tac, error occurs like :


Traceback (most recent call last):
    File "/usr/local/bin/twistd", line 7, in <module>
        import _preamble
ImportError: No module named '_preamble'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):
    File "/usr/local/bin/twistd", line 9, in <module>
        sys.exc_clear()
AttributeError: 'module' object has no attribute 'exc_clear'


And i run python3 in interactive mode to check if exc_clear method is defined in sys,  command line like :
>>>import sys
>>>sys.__dict__["exc_clear"]
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
        sys.exc_clear()
KeyError: 'exc_clear'
>>>


Is there any configuration i should do ? please help to give me an answer.


 ????
----------------------------
?? : ???/Charles
?? : (+086)13410859946

?? : wuzhigaoem at 163.com
================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130917/0596cad1/attachment.html>

From _ at lvh.io  Tue Sep 17 03:06:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 17 Sep 2013 11:06:32 +0200
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
Message-ID: <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>

Hi Charles,


Yes, twistd doesn't appear to work on py3k. Not being able to import
_preamble is normal (once Twisted has been installed), but _preamble does
assume sys.exc_clear exists, which isn't true on 3.x.

I couldn't find any ticket on this. Perhaps you should file it (and maybe
fix it!) :)

It's my understanding that the new except clause semantics are expected to
take care of this problem.

Can someone comment as to why this was put there in the first place, and,
specifically, why it can't just be "pass"? Is there some logging system
that looks at the current exception or something when twistd (or some other
script) starts?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130917/432bc405/attachment.html>

From exarkun at twistedmatrix.com  Tue Sep 17 06:14:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 12:14:08 -0000
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
Message-ID: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>

On 09:06 am, _ at lvh.io wrote:
>Hi Charles,
>
>
>Yes, twistd doesn't appear to work on py3k. Not being able to import
>_preamble is normal (once Twisted has been installed), but _preamble 
>does
>assume sys.exc_clear exists, which isn't true on 3.x.
>
>I couldn't find any ticket on this. Perhaps you should file it (and 
>maybe
>fix it!) :)

I think there are still many unported dependencies of `twistd` to port 
first.
>It's my understanding that the new except clause semantics are expected 
>to
>take care of this problem.
>
>Can someone comment as to why this was put there in the first place, 
>and,
>specifically, why it can't just be "pass"? Is there some logging system
>that looks at the current exception or something when twistd (or some 
>other
>script) starts?

Both `log.err()? and `Failure()? look at the current exception.  If we 
don't `sys.clear_exc()? here then the first piece of code that tries to 
use either of those may get a surprising result.  The current exception 
state can last a long time so this surprise can hide for a remarkably 
long time before showing up.

The exception state also holds references to lots of extra things on the 
stack which is undesirable even if there are no other side-effects.

Jean-Paul


From m-lists at the-moon.net  Tue Sep 17 08:29:13 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 15:29:13 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
Message-ID: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>

Hello everyone,

I'm giving a talk about Twisted and Twisted Names at PyConUK this
year. The schedule hasn't been fixed yet, but it looks like it'll be
this Friday 20 September at 1530.
If you're going to PyConUK I'd welcome your support, especially with
fielding any tricky audience questions. ;-)
 * http://pyconuk.net/Schedule

I'm also hoping to organise a Twisted Sprint, so if you're still
around on Monday come and find me.
 * http://pyconuk.net/Sprints

-RichardW.

PS. I'd love to merge https://tm.tl/5675 before the conference, so if
you're familiar with the DNS RFCs, I'd really appreciate a code
review. I'm rwall on #twisted-dev and #twisted if you want to discuss
it


From p.mayers at imperial.ac.uk  Tue Sep 17 09:34:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 16:34:40 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
Message-ID: <52387690.5070304@imperial.ac.uk>

On 17/09/13 15:29, Richard Wall wrote:

> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
> you're familiar with the DNS RFCs, I'd really appreciate a code
> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
> it

Deep breath... I'll give this a go.

p.s. the "How to review" docs on Trac are AWFUL if you've never done one 
before. It assumes a *hell* of a lot of prior knowledge. There needs to 
be a single page checklist for first-time reviewers.


From exarkun at twistedmatrix.com  Tue Sep 17 10:05:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 16:05:27 -0000
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <52387690.5070304@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
Message-ID: <20130917160527.26068.1762336748.divmod.xquotient.2373@top>

On 03:34 pm, p.mayers at imperial.ac.uk wrote:
>On 17/09/13 15:29, Richard Wall wrote:
>>PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>>you're familiar with the DNS RFCs, I'd really appreciate a code
>>review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>>it
>
>Deep breath... I'll give this a go.
>
>p.s. the "How to review" docs on Trac are AWFUL if you've never done 
>one before. It assumes a *hell* of a lot of prior knowledge. There 
>needs to be a single page checklist for first-time reviewers.

This is in progress.

Jean-Paul
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From _ at lvh.io  Tue Sep 17 10:10:23 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 17 Sep 2013 18:10:23 +0200
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
Message-ID: <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>

On Tue, Sep 17, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:

> I think there are still many unported dependencies of `twistd` to port
> first.
>

Sure, but every little bit helps, right? :)


>  Can someone comment as to why this was put there in the first place, and,
>> specifically, why it can't just be "pass"? Is there some logging system
>> that looks at the current exception or something when twistd (or some
>> other
>> script) starts?
>>
>
> Both `log.err()? and `Failure()? look at the current exception.  If we
> don't `sys.clear_exc()? here then the first piece of code that tries to use
> either of those may get a surprising result.  The current exception state
> can last a long time so this surprise can hide for a remarkably long time
> before showing up.
>

Okay, cool. From what I understand:

1. _preamble is just a hack to get bin/whatever to work right without
installing (i.e. from a checkout)
2. (not too sure about this) in py3k, except statements do the clearing bit
already: www.python.org/dev/peps/pep-3110/#semantic-changes

So, does that mean we can do a try: ... ; except AttributeError and be done
with it?

The exception state also holds references to lots of extra things on the
> stack which is undesirable even if there are no other side-effects.
>
> Jean-Paul
>

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130917/4a28bb9f/attachment.html>

From hs at ox.cx  Tue Sep 17 10:12:01 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 17 Sep 2013 18:12:01 +0200
Subject: [Twisted-Python] =?windows-1252?q?=5BANN=5D_structlog_=96_bring_c?=
 =?windows-1252?q?ontext_=26_structure_to_your_logs_without_boilerplate?=
Message-ID: <30617339-A558-44C6-8AEF-19870948A9D5@ox.cx>

Hi folks,

today, I?ve release the 0.2.0 of my structlog project whose ambition is no less than changing the way we log in Python. :)

And since it sports dedicated support for Twisted <http://www.structlog.org/en/latest/twisted.html> (but is not limited to it, it wraps *any* logger), I?d like to introduce you to it.

Basically, its premise is that events happen in a context and you want to log out both effortlessly.  Nowadays logs are usually consumed by parsers anyway, so regular, easily parsable logs are a good thing?.

This is a nice example of a Twisted application showing off a bit what structlog is capable of:

import sys
import uuid

import structlog
import twisted

from twisted.internet import protocol, reactor

logger = structlog.getLogger()


class Counter(object):
    i = 0

    def inc(self):
        self.i += 1

    def __repr__(self):
        return str(self.i)


class Echo(protocol.Protocol):
    def connectionMade(self):
        self._counter = Counter()
        self._log = logger.new(
            connection_id=str(uuid.uuid4()),
            peer=self.transport.getPeer().host,
            count=self._counter,
        )

    def dataReceived(self, data):
        self._counter.inc()
        log = self._log.bind(data=data)
        self.transport.write(data)
        log.msg('echoed data!')


if __name__ == "__main__":
    structlog.configure(
        processors=[structlog.twisted.EventAdapter()],
        logger_factory=structlog.twisted.LoggerFactory(),
    )
    twisted.python.log.startLogging(sys.stderr)
    reactor.listenTCP(1234, protocol.Factory.forProtocol(Echo))
    reactor.run()


It will give you an output like:

2013-09-17 17:40:23+0200 [-] Log opened.
2013-09-17 17:40:23+0200 [-] Factory starting on 1234
2013-09-17 17:40:23+0200 [-] Starting factory <twisted.internet.protocol.Factory instance at 0x108301488>
2013-09-17 17:40:28+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=1 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='foo\n' event='echoed data!'
2013-09-17 17:40:33+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=2 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='bar\n' event='echoed data!'
2013-09-17 17:40:44+0200 [Echo,1,127.0.0.1] peer='127.0.0.1' count=1 connection_id='3118f673-482b-471f-a206-e8f97f9a9c2c' data='qux\n' event='echoed data!'
2013-09-17 17:40:53+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=3 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='twisted prevails\n' event='echoed data!'

(you can find this and more examples at <http://www.structlog.org/en/latest/examples.html>)

In short:

- It allows you to build context by binding values to loggers. This context is just a dictionary. Once you log an event out (again, arbitrary number of key/value pairs), it gets merged with the context, processed by configurable processor chain and passed to your original logger.
- Your loggers are immutable (by default infidels can use thread local storage) and you?ll get a new one on each binding. Immutable local data is awesome.
- You can define processors that can mangle, filter, and format your log entries.
- Configure once, then just call getLogger (which is a Twisted-friendly alias for get_logger) in regular code.
- Of course there is a JSON renderer built right in ? just tell log stash about it and be merry.

*Please* have a look at <http://www.structlog.org/en/0.2.0-0/getting-started.html>, I don?t want to reproduce it here. :)

Credit where credit is due: I picked up the idea of bound loggers from David Reid?s work on otter <https://github.com/rackerlabs/otter/tree/master/otter/log> which in turn was based on ideas by JP (I?ve been told).

You can find everything you need to know at http://www.structlog.org/ ? I?d be happy about any constructive feedback and even more so about contributions!

Cheers,
Hynek
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130917/6641f382/attachment.pgp>

From m-lists at the-moon.net  Tue Sep 17 10:18:04 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 17:18:04 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
	PyConUK 2013]
Message-ID: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>

On 17 September 2013 16:34, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 17/09/13 15:29, Richard Wall wrote:
>
>> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>> you're familiar with the DNS RFCs, I'd really appreciate a code
>> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>> it
>
>
> Deep breath... I'll give this a go.

Thanks Phil,

I'd seen your previous work in this area and was hoping you'd reply. :)

You might be interested to read the reviews of
https://twistedmatrix.com/trac/ticket/5675 where we introduced support
for parsing of  OPT pseudo records.

Meanwhile, I'll see if I can help exarkun with the code review checklist.

Thanks again and I look forward to your feedback.

-RichardW.


From m-lists at the-moon.net  Tue Sep 17 10:22:49 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 17:22:49 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
	PyConUK 2013]
Message-ID: <CABefbUrfvsP6Jzrf-dC3ttfXXdAWXX3zrtndpLqU2Mn5z+xBZg@mail.gmail.com>

On 17 September 2013 17:18, Richard Wall <m-lists at the-moon.net> wrote:
> You might be interested to read the reviews of
> https://twistedmatrix.com/trac/ticket/5675 where we introduced support
> for parsing of  OPT pseudo records.

Sorry, wrong link.

This is the OPT record ticket - https://twistedmatrix.com/trac/ticket/5668

And this is the EDNS plan:
 * https://twistedmatrix.com/trac/wiki/EDNS0

-RichardW.


From p.mayers at imperial.ac.uk  Tue Sep 17 11:36:23 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 18:36:23 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
 PyConUK 2013]
In-Reply-To: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
References: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
Message-ID: <52389317.1090809@imperial.ac.uk>

On 17/09/13 17:18, Richard Wall wrote:
> On 17 September 2013 16:34, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>> On 17/09/13 15:29, Richard Wall wrote:
>>
>>> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>>> you're familiar with the DNS RFCs, I'd really appreciate a code
>>> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>>> it
>>
>>
>> Deep breath... I'll give this a go.
>
> Thanks Phil,
>
> I'd seen your previous work in this area and was hoping you'd reply. :)
>
> You might be interested to read the reviews of
> https://twistedmatrix.com/trac/ticket/5675 where we introduced support
> for parsing of  OPT pseudo records.

Good idea, that was helpful.

I've given it a go; if anyone has a review of my review... ;o)




From p.mayers at imperial.ac.uk  Tue Sep 17 11:43:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 18:43:51 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
Message-ID: <523894D7.10008@imperial.ac.uk>

On 17/09/13 17:05, exarkun at twistedmatrix.com wrote:

>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>> one before. It assumes a *hell* of a lot of prior knowledge. There
>> needs to be a single page checklist for first-time reviewers.
>
> This is in progress.

Awesome; would it be useful for me to write up what I did, or do you 
have enough source material?

FWIW I found virtualenv & the github mirror to be incredibly useful for 
the task; in particular it meant getting latest & greatest 
pyflakes/twistedchecker and dependencies, and being able to install the 
branch.


From glyph at twistedmatrix.com  Tue Sep 17 12:08:09 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 17 Sep 2013 11:08:09 -0700
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <523894D7.10008@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
Message-ID: <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>

On Sep 17, 2013, at 10:43 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 17/09/13 17:05, exarkun at twistedmatrix.com wrote:
> 
>>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>>> one before. It assumes a *hell* of a lot of prior knowledge. There
>>> needs to be a single page checklist for first-time reviewers.
>> 
>> This is in progress.
> 
> Awesome; would it be useful for me to write up what I did, or do you have enough source material?

Let's have a discussion here on the list first :-).  So... yes, write it up in a reply.

The review docs are always in progress.  Feedback like "this is bad" is basically useless; we know it's bad, but everyone has its own idea of what "bad" means.  What would be really useful in such a write-up was specific feedback about what you needed to know, what resources you discovered, and what they were missing.  Like:

"I didn't know if I should _ or _ because I was looking at this url _ and it didn't say and didn't link to anything that told me what to do.  So, based on this previous review _ I decided to _ and that worked out okay, that should be documented on the first URL I found".

So please feel free to offer more feedback but let's please keep it as specific as possible.

> FWIW I found virtualenv & the github mirror to be incredibly useful for the task; in particular it meant getting latest & greatest pyflakes/twistedchecker and dependencies, and being able to install the branch.

Separately, "how to get set up to review" would be a useful document too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130917/a07112da/attachment.html>

From exarkun at twistedmatrix.com  Tue Sep 17 12:08:37 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 18:08:37 -0000
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
 <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>
Message-ID: <20130917180837.26068.1349767428.divmod.xquotient.2377@top>

On 04:10 pm, _ at lvh.io wrote:
>On Tue, Sep 17, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:
>>I think there are still many unported dependencies of `twistd` to port
>>first.
>
>Sure, but every little bit helps, right? :)

It doesn't make a lot of sense to me to port things that depend on 
unported things.  The little bit that would help would be porting one of 
the unported dependencies.
>
>>  Can someone comment as to why this was put there in the first place, 
>>and,
>>>specifically, why it can't just be "pass"? Is there some logging 
>>>system
>>>that looks at the current exception or something when twistd (or some
>>>other
>>>script) starts?
>>
>>Both `log.err()? and `Failure()? look at the current exception.  If we
>>don't `sys.clear_exc()? here then the first piece of code that tries 
>>to use
>>either of those may get a surprising result.  The current exception 
>>state
>>can last a long time so this surprise can hide for a remarkably long 
>>time
>>before showing up.
>
>Okay, cool. From what I understand:
>
>1. _preamble is just a hack to get bin/whatever to work right without
>installing (i.e. from a checkout)
>2. (not too sure about this) in py3k, except statements do the clearing 
>bit
>already: www.python.org/dev/peps/pep-3110/#semantic-changes
>
>So, does that mean we can do a try: ... ; except AttributeError and be 
>done
>with it?

Sounds like probably yea.  The way to know would be to make the change 
and run the test suite (perhaps first double checking to get an idea of 
how well covered this is).  Revision history suggests the change was 
made to get a test to pass but it doesn't mention which one.

This is why porting the dependencies first makes sense though - you 
won't be able to run the tests as long as the dependencies are unported.

Jean-Paul


From exarkun at twistedmatrix.com  Tue Sep 17 12:10:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 18:10:59 -0000
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
 PyConUK 2013]
In-Reply-To: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
References: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
Message-ID: <20130917181059.26068.2074490532.divmod.xquotient.2378@top>

On 04:18 pm, m-lists at the-moon.net wrote:
>[snip]
>
>Meanwhile, I'll see if I can help exarkun with the code review 
>checklist.

No, not me. :)  Ashwini is working on this.  Please give her a hand. :)

Jean-Paul


From wsanchez at wsanchez.net  Tue Sep 17 18:16:24 2013
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Tue, 17 Sep 2013 17:16:24 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
 <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>
Message-ID: <5238F0D8.3040105@wsanchez.net>

   For your Trac'ing pleasure:

   https://twistedmatrix.com/trac/ticket/6750

     -wsv



From glyph at twistedmatrix.com  Tue Sep 17 18:29:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 17 Sep 2013 17:29:42 -0700
Subject: [Twisted-Python] infrastructure hosting confusion / cleanup
Message-ID: <99A07ACE-76D9-4227-BAC6-20137130A524@twistedmatrix.com>

Pages like this one:

<http://buildbot.twistedmatrix.com/builders/pyflakes/builds/1008>

information about the source code being built in the form of a git revision.

As long as we're still using Subversion for our upstream VCS, it would be desirable to also have a Subversion revision number.

I wanted to request this, but even I have lost track, at this point, of where to file bugs for things like this.

It looks like we're hosting our infrastructure projects on Github right now, which means <https://github.com/twisted-infra/twisted-buildbot-configuration> would be the place to go.  But there is no 'issues' link there.  Nor any link to any place where bugs might be filed.

I guess <https://bugs.launchpad.net/twisted-buildbot-configuration> is still what is being used for that thing? But then that project provides a non-up-to-date view of the source code.

Richard Wall's draft for a new "new ticket" page directs people to file issues against twisted-infra but that appears to be wrong in this particular case, since the buildbot configuration doesn't have a bugtracker there.  <https://twistedmatrix.com/trac/wiki/users/rwall/DraftNewTicketPage>  Plus, that suggestion links to a list of like a zillion infrastructure projects, half of which don't even have a description that explains what they are, let alone where to file bugs.

Can someone please volunteer to update all of the READMEs on all of these projects, and all of the various locations where they've ever lived, to point at the actual, canonical place where infrastructure is developed?  It would be good if users who want to report that the website is down or ask for an enhancement to the website, or Trac or Buildbot instances did not have to select between a dozen different projects that they might file an issue against.

(Perhaps they should all link to <https://twistedmatrix.com/trac/wiki/Infrastructure> or some page beneath it, which can _remain_ the canonical location for everything and be updated once, since based on our history it seems likely that half of our infrastructure will randomly move to Bitbucket, or perhaps to Sourceforge, at some point in the future...)

If someone who has not previously participated in infrastructure development would like to take point on creating such a resource, I will be happy to get you the appropriate access to any systems you need to.

-glyph

From wuzhigaoem at 163.com  Tue Sep 17 19:29:16 2013
From: wuzhigaoem at 163.com (=?UTF-8?B?5ZC05b+X6auY?=)
Date: Wed, 18 Sep 2013 09:29:16 +0800 (CST)
Subject: [Twisted-Python] Reply:Re: run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
Message-ID: <b4ac51a.16afa.1412eaf8492.Coremail.wuzhigaoem@163.com>







Jean-Paul
???

Thanks for your help. 
Because i am a fresh man to twisted. 
I will roll back to version 2.x and try the application again.

????
----------------------------
?? : ???/Charles
?? : (+086)13410859946

?? : wuzhigaoem at 163.com
================================================




At 2013-09-17 20:14:08,exarkun at twistedmatrix.com wrote:
>On 09:06 am, _ at lvh.io wrote:
>>Hi Charles,
>>
>>
>>Yes, twistd doesn't appear to work on py3k. Not being able to import
>>_preamble is normal (once Twisted has been installed), but _preamble 
>>does
>>assume sys.exc_clear exists, which isn't true on 3.x.
>>
>>I couldn't find any ticket on this. Perhaps you should file it (and 
>>maybe
>>fix it!) :)
>
>I think there are still many unported dependencies of `twistd` to port 
>first.
>>It's my understanding that the new except clause semantics are expected 
>>to
>>take care of this problem.
>>
>>Can someone comment as to why this was put there in the first place, 
>>and,
>>specifically, why it can't just be "pass"? Is there some logging system
>>that looks at the current exception or something when twistd (or some 
>>other
>>script) starts?
>
>Both `log.err()? and `Failure()? look at the current exception.  If we 
>don't `sys.clear_exc()? here then the first piece of code that tries to 
>use either of those may get a surprising result.  The current exception 
>state can last a long time so this surprise can hide for a remarkably 
>long time before showing up.
>
>The exception state also holds references to lots of extra things on the 
>stack which is undesirable even if there are no other side-effects.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/b2e64b42/attachment-0001.html>

From p.mayers at imperial.ac.uk  Wed Sep 18 06:03:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 13:03:19 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
Message-ID: <52399687.9020907@imperial.ac.uk>

Is there any support, or any interest in / way to add support for 
deferred cancellation in pb?

Specifically I'd like do have something like:

class blah(pb...):
   def remote_somelongtask(self, args):
     ...
     taskid = somefunc()
     d = defer.Deferred(lambda : canceltask(taskid))
     return d

...and on the client:

d = callRemote('somelongtask', args)
...
# now we no longer need it
d.cancel()

...and have the cancel the server-side task.


From exarkun at twistedmatrix.com  Wed Sep 18 06:34:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 18 Sep 2013 12:34:26 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <52399687.9020907@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
Message-ID: <20130918123426.26068.232339554.divmod.xquotient.2380@top>

On 12:03 pm, p.mayers at imperial.ac.uk wrote:
>Is there any support, or any interest in / way to add support for 
>deferred cancellation in pb?
>
>Specifically I'd like do have something like:
>
>class blah(pb...):
>   def remote_somelongtask(self, args):
>     ...
>     taskid = somefunc()
>     d = defer.Deferred(lambda : canceltask(taskid))
>     return d
>
>...and on the client:
>
>d = callRemote('somelongtask', args)
>...
># now we no longer need it
>d.cancel()
>
>...and have the cancel the server-side task.

s/task/Deferred/ :)

+1 - particularly if you also want to tackle this for AMP.

Jean-Paul


From _ at lvh.io  Wed Sep 18 06:43:58 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 18 Sep 2013 14:43:58 +0200
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918123426.26068.232339554.divmod.xquotient.2380@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
Message-ID: <CAE_Hg6ZqGeMu+iJPEpE2gC6yUVeJfkf3DsAih8590+gF+T-s5Q@mail.gmail.com>

+1, particularly for AMP
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/01df04ce/attachment.html>

From p.mayers at imperial.ac.uk  Wed Sep 18 07:00:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 14:00:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918123426.26068.232339554.divmod.xquotient.2380@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
Message-ID: <5239A403.3040802@imperial.ac.uk>

On 18/09/13 13:34, exarkun at twistedmatrix.com wrote:
> On 12:03 pm, p.mayers at imperial.ac.uk wrote:
>> Is there any support, or any interest in / way to add support for
>> deferred cancellation in pb?
>>
>> Specifically I'd like do have something like:
>>
>> class blah(pb...):
>>   def remote_somelongtask(self, args):
>>     ...
>>     taskid = somefunc()
>>     d = defer.Deferred(lambda : canceltask(taskid))
>>     return d
>>
>> ...and on the client:
>>
>> d = callRemote('somelongtask', args)
>> ...
>> # now we no longer need it
>> d.cancel()
>>
>> ...and have the cancel the server-side task.
>
> s/task/Deferred/ :)
>
> +1 - particularly if you also want to tackle this for AMP.

I've never used (and have no particular use for) AMP so I'd have to take 
a look at it. It doesn't look so hard for pb, but I have "teh fear" in 
case the existing test coverage isn't good and a 10-line change would 
require writing 1000 lines of tests :o(

I'll have a look, but from the responses I'll assume neither pb nor AMP 
can do this, and will file a couple of tickets for reference.


From p.mayers at imperial.ac.uk  Wed Sep 18 07:14:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 14:14:36 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239A403.3040802@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk>
Message-ID: <5239A73C.6010804@imperial.ac.uk>

On 18/09/13 14:00, Phil Mayers wrote:

> I'll have a look, but from the responses I'll assume neither pb nor AMP
> can do this, and will file a couple of tickets for reference.

#6753 and #6754, for the curious. As the latter indicates, I don't 
really understand the AMP stuff; I got stuck in a twisty maze of Box's, 
all alike ;o)


From p.mayers at imperial.ac.uk  Wed Sep 18 10:02:10 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 17:02:10 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
 <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
Message-ID: <5239CE82.6030303@imperial.ac.uk>

On 17/09/13 19:08, Glyph wrote:
> On Sep 17, 2013, at 10:43 AM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>> On 17/09/13 17:05, exarkun at twistedmatrix.com
>> <mailto:exarkun at twistedmatrix.com> wrote:
>>
>>>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>>>> one before. It assumes a *hell* of a lot of prior knowledge. There
>>>> needs to be a single page checklist for first-time reviewers.
>>>
>>> This is in progress.
>>
>> Awesome; would it be useful for me to write up what I did, or do you
>> have enough source material?
>
> Let's have a discussion here on the list first :-).  So... yes, write it
> up in a reply.
>
> The review docs are always in progress.  Feedback like "this is bad" is
> basically useless; we know it's bad, but everyone has its own idea of
> what "bad" means.  What would be really useful in such a write-up was
> specific feedback about what you needed to know, what resources you

Yeah, sorry - not great feedback there.

In brief: Twisted reviews are obviously very comprehensive, encompassing 
test passed and coverage, coding style, api design and documentation as 
well as subjective opinion.

You need a bunch of tools to get started, and have to do a few 
boilerplate things to get setup, and I think a really *really* basic 
setup doc, followed by a handholding checklist, would form a better 
basis for a first-time reviewer.

So specifics:

The Trac ReviewProcess page starts off well, but loses coherence about 
half-way through - the first 3 sections are about authoring a change, 
then you get a "Reviewers: how to review (see below) and some link-free 
bullet points", then back to "Authors": then the "Details" section which 
starts with "news files" and it's all a bit uncertain who this applies 
to on a first pass - I had to read it several times, which makes people 
feel dumb.

Minor note: the "How to review a change" is missing an obvious link to 
the coding standards.

Suggestion: split this page into 3 pages - Authoring, Reviewing, 
Committing. Have a master page "Twisted overall process" which links to 
the 3 pages. It's valuable for a reviewer to know the authoring process 
- the mindset is helpful - but a "mode change" should be accompanied by 
an actual "input" change.

Suggestion for the "Review" page: this should be:

1. Setting up a review environment - I think this is really important. 
People who know the process can and will do things their own way, but a 
really basic setup like:

   virtualenv twrev
   . twrev/bin/active
   pip install twisted-reviewtools << make this!
   svn checkout blah
   twrev/bin/python blah/setup.py install
   twrev/bin/trial twisted

...would save first-timers some hassle.

2. Checking out the branch to review and getting it in a review-able 
state (what do people do here - run from inside the branch dir? install 
to a virtualenv?)

3. Running basic checks - tests, pyflakes, twistedchecker - and 
interpreting the results. In particular, techniques for ignoring the 
flakess/checker output for unchanged files.

4. Reviewing the diff:
    * How to check docstrings
    * How to evaluate test coverage

5. How to provide feedback - form, tone, avoiding bikeshedding (or not)

Then link to some "best practice" examples of previous tickets - one or 
two that show a good set of review comments - for people to peruse.

Hope this is useful. I probably am overstating how painful it was - I 
did get it done after all, and it'll be easier 2nd time around - but you 
guys keep saying you want more reviewers ;o)


From burak at nehbit.net  Wed Sep 18 10:00:45 2013
From: burak at nehbit.net (burak at nehbit.net)
Date: Wed, 18 Sep 2013 12:00:45 -0400
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239A73C.6010804@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
Message-ID: <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>

+1 for AMP.

Best,
Burak


On Sep 18, 2013, at 9:17, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 18/09/13 14:00, Phil Mayers wrote:
> 
>> I'll have a look, but from the responses I'll assume neither pb nor AMP
>> can do this, and will file a couple of tickets for reference.
> 
> #6753 and #6754, for the curious. As the latter indicates, I don't really understand the AMP stuff; I got stuck in a twisty maze of Box's, all alike ;o)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From p.mayers at imperial.ac.uk  Wed Sep 18 10:08:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 17:08:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
Message-ID: <5239D013.3030003@imperial.ac.uk>

On 18/09/13 17:00, burak at nehbit.net wrote:
> +1 for AMP.

Wow, lots of people using AMP. Maybe I'm missing out on something...

Don't people miss the symmetry of PB? Not to mention you can be lazy and 
avoid defining a schema! Or are people using Twisted->Other AMP connections?


From exarkun at twistedmatrix.com  Wed Sep 18 10:34:41 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 18 Sep 2013 16:34:41 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239D013.3030003@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
Message-ID: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>

On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>On 18/09/13 17:00, burak at nehbit.net wrote:
>>+1 for AMP.
>
>Wow, lots of people using AMP. Maybe I'm missing out on something...
>
>Don't people miss the symmetry of PB? Not to mention you can be lazy 
>and avoid defining a schema! Or are people using Twisted->Other AMP 
>connections?

AMP is symmetric in the same way PB is.

I like AMP's explicit schemas because they make maintenance and 
documentation easier.

And I am 98% certain more people are using AMP to interoperate with non- 
Twisted software than are using PB to interoperate with non-Twisted 
software. ;)

Basically, I think PB tries to do too much and does it on a slightly 
shaky foundation.  It is totally possible to build stuff using PB that 
works but in my experience it is a bit easier to do so with AMP and I am 
more comfortable with prospects for making AMP cooler in the future due 
to the simplicity of its implementation compared to the implementation 
of PB (that said, here we are *years* later and I am still waiting for 
good AMP support for streaming data - so it's not all roses over here).

Jean-Paul


From burak at nehbit.net  Wed Sep 18 11:12:43 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 18 Sep 2013 13:12:43 -0400
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
Message-ID: <etPan.5239df0b.6b8b4567.2283@Buraks-MacBook-Pro.local>

My reasons are simpler: PB expects me to build my application to suit it, whereas AMP is small enough to insert into an existing application. It does one single thing and does it well. Caveat emptor, though, I'm still a Twisted newbie?I do understand AMP, but PB is right now way, way?over my head.?


On September 18, 2013 at 12:38:04 PM, exarkun at twistedmatrix.com (exarkun at twistedmatrix.com) wrote:

On 04:08 pm, p.mayers at imperial.ac.uk wrote:  
>On 18/09/13 17:00, burak at nehbit.net wrote:  
>>+1 for AMP.  
>  
>Wow, lots of people using AMP. Maybe I'm missing out on something...  
>  
>Don't people miss the symmetry of PB? Not to mention you can be lazy  
>and avoid defining a schema! Or are people using Twisted->Other AMP  
>connections?  

AMP is symmetric in the same way PB is.  

I like AMP's explicit schemas because they make maintenance and  
documentation easier.  

And I am 98% certain more people are using AMP to interoperate with non-  
Twisted software than are using PB to interoperate with non-Twisted  
software. ;)  

Basically, I think PB tries to do too much and does it on a slightly  
shaky foundation. It is totally possible to build stuff using PB that  
works but in my experience it is a bit easier to do so with AMP and I am  
more comfortable with prospects for making AMP cooler in the future due  
to the simplicity of its implementation compared to the implementation  
of PB (that said, here we are *years* later and I am still waiting for  
good AMP support for streaming data - so it's not all roses over here).  

Jean-Paul  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/a6b6f98c/attachment-0001.html>

From werner at thieprojects.ch  Wed Sep 18 11:37:06 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 18 Sep 2013 07:37:06 -1000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239D013.3030003@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
Message-ID: <5239E4C2.8030001@thieprojects.ch>

+1 for pb
+1 for AMP

Werner

On 9/18/13 6:08 AM, Phil Mayers wrote:
> On 18/09/13 17:00, burak at nehbit.net wrote:
>> +1 for AMP.
>
> Wow, lots of people using AMP. Maybe I'm missing out on something...
>
> Don't people miss the symmetry of PB? Not to mention you can be lazy and
> avoid defining a schema! Or are people using Twisted->Other AMP
> connections?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From bob.novas at shinkuro.com  Wed Sep 18 14:59:38 2013
From: bob.novas at shinkuro.com (Bob Novas)
Date: Wed, 18 Sep 2013 16:59:38 -0400
Subject: [Twisted-Python] How to disconnect an HTTP connection and notify
	the far end
Message-ID: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>

I've got a question on how to explicitly disconnect a connection from the
client side so that the server side knows that the connection has been
disconnected. I'd be happy if this worked even with no guarantees, i.e.,
only when the client and server were in fact well-connected. It's just an
optimization to allow the server to cleanup.

 

I've got an HTTP client that uses HTTPConnectionPool to get an Agent, gets a
Request from the Agent, and sends the Request to a WebServer on a linux box.


 

On a Mac client, if I call closeCachedConnections() on the
HTTPConnectionPool, the client immediately sends FIN on the port with the
Request outstanding, the server delivers a callback registered on the
Request via NotifyFinish() and the server knows the client has disconnected.

 

On a Windows client, if I do the same, same code, the client waits until the
outstanding Request finishes and then sends FIN. Nothing happens at the
server - there's no Request outstanding on which to deliver a callback,
twisted.internet.tcp.Port.connectionLost() doesn't get called, nada.

 

Am I missing something?  Is there a way to send a FIN on a connection on
which there is an outstanding Request on Windows?

 

Thanks in advance,

Bob

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/152633fb/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6085 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/152633fb/attachment.bin>

From glyph at twistedmatrix.com  Wed Sep 18 19:59:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 18 Sep 2013 18:59:17 -0700
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <5239CE82.6030303@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
 <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
 <5239CE82.6030303@imperial.ac.uk>
Message-ID: <FBF3E0F0-3B32-4DAB-8DE9-D68E6C9875DC@twistedmatrix.com>


On Sep 18, 2013, at 9:02 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Hope this is useful. I probably am overstating how painful it was - I did get it done after all, and it'll be easier 2nd time around - but you guys keep saying you want more reviewers ;o)

Definitely useful to get some perspective on this, and to have very specific fodder for making improvements.  Thanks for taking the time to write it up.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130918/e2c946ea/attachment.html>

From p.mayers at imperial.ac.uk  Thu Sep 19 06:38:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 19 Sep 2013 13:38:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
Message-ID: <523AF05B.709@imperial.ac.uk>

On 18/09/13 17:34, exarkun at twistedmatrix.com wrote:
> On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>> On 18/09/13 17:00, burak at nehbit.net wrote:
>>> +1 for AMP.
>>
>> Wow, lots of people using AMP. Maybe I'm missing out on something...
>>
>> Don't people miss the symmetry of PB? Not to mention you can be lazy
>> and avoid defining a schema! Or are people using Twisted->Other AMP
>> connections?
>
> AMP is symmetric in the same way PB is.

Exactly the same? I know you can callRemote on both sides, but only for 
registered Command responders IIRC?


From exarkun at twistedmatrix.com  Thu Sep 19 07:28:20 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 19 Sep 2013 13:28:20 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <523AF05B.709@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
 <523AF05B.709@imperial.ac.uk>
Message-ID: <20130919132820.26068.1680906153.divmod.xquotient.2392@top>

On 12:38 pm, p.mayers at imperial.ac.uk wrote:
>On 18/09/13 17:34, exarkun at twistedmatrix.com wrote:
>>On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>>>
>>>Don't people miss the symmetry of PB? Not to mention you can be lazy
>>>and avoid defining a schema! Or are people using Twisted->Other AMP
>>>connections?
>>
>>AMP is symmetric in the same way PB is.
>
>Exactly the same? I know you can callRemote on both sides, but only for 
>registered Command responders IIRC?

That's right (at least with the primary API exposed by the Twisted 
implementation of AMP).  This is analogous to how you can only call 
`remote_*? methods with PB - regardless of whether the calls are client 
to server or server to client.  For both protocols, these are API 
decisions.  The wire protocol for AMP says nothing about `Command? or 
"responders" just as the wire protocol for PB says nothing about a 
`remote_? method name prefix.

Jean-Paul


From wasilak at gmail.com  Fri Sep 20 02:54:47 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 20 Sep 2013 10:54:47 +0200
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
Message-ID: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>

Hello everyone,

I would like to announce the first release of txThings. It is a simple
library
for Constrained Application Protocol (CoAP). CoAP is a relatively new
protocol
designed for "Internet of Things" and M2M communications.

txThings currently implements a subset of CoAP features:
- standard messaging based on draft-ietf-core-coap-13 (no proxying support
yet)
- blockwise transfers based on draft-ietf-core-block-12
- limited suport for RFC6690 Core Link Format (for servers only)

I hope to add new features like Observe (draft-ietf-core-observe-09) soon.

TxThings is my first Twisted project, so the code quality can probably be
improved,
also better unit testing is necessary. However I decided to release the code
in its current form to discover, if there is any interest in it.

Internet of Things is currently very interesting field of development. It
is approaching
a phase where many opportunities for both large and small players. I think
Twisted is
well suited for development of IoT apps:
- it's stable
- it's Python based and portable
- it has good support for UDP and TCP, which makes it ideal for proxying
IoT protocols to HTTP
In my opinion in the next three years, at least 20% of Twisted apps will be
IoT related
(educated guess, no hard data :) )

There are many new protocols out there designed for IoT, in my opinion
CoAP and MQTT have the biggest chance of adoption. CoAP is developed by
IETF,
and backed by companies like ARM.

You can download txThings from Github:

https://github.com/siskin/txThings

Description:

http://sixpinetrees.blogspot.com/2013/09/txthings-good-enough-is-good-enough.html

Few more remarks:
- txThings works on RaspberryPi (tested)
- txThings plays well with Kivy Python GUI Library http://kivy.org
Kivy is new GUI library that supports Twisted, and allows building apps for
Android and iOS - I've ran a few tests, and it's very promising :)

Photo:
http://bit.ly/1aPZ1ag

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130920/2e91b987/attachment.html>

From glyph at twistedmatrix.com  Fri Sep 20 17:21:46 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 20 Sep 2013 16:21:46 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
References: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
Message-ID: <A06D291F-785F-48D4-AF9B-7724A9BBB489@twistedmatrix.com>


On Sep 20, 2013, at 1:54 AM, Maciej Wasilak <wasilak at gmail.com> wrote:

> I would like to announce the first release of txThings. It is a simple library
> for Constrained Application Protocol (CoAP). CoAP is a relatively new protocol
> designed for "Internet of Things" and M2M communications.

Thanks for sharing this, Maciej!

Please feel free to keep on sending more announcements as you put Twisted inside of more devices ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130920/f3a64045/attachment.html>

From glyph at twistedmatrix.com  Fri Sep 20 17:26:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 20 Sep 2013 16:26:03 -0700
Subject: [Twisted-Python] How to disconnect an HTTP connection and
	notify the far end
In-Reply-To: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>
References: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>
Message-ID: <E34EAEBF-D227-4CD9-9F10-C890BD02C6CC@twistedmatrix.com>


On Sep 18, 2013, at 1:59 PM, Bob Novas <bob.novas at shinkuro.com> wrote:

> I?ve got a question on how to explicitly disconnect a connection from the client side so that the server side knows that the connection has been disconnected. I?d be happy if this worked even with no guarantees, i.e., only when the client and server were in fact well-connected. It?s just an optimization to allow the server to cleanup.
>  
> I?ve got an HTTP client that uses HTTPConnectionPool to get an Agent, gets a Request from the Agent, and sends the Request to a WebServer on a linux box. 
>  
> On a Mac client, if I call closeCachedConnections() on the HTTPConnectionPool, the client immediately sends FIN on the port with the Request outstanding, the server delivers a callback registered on the Request via NotifyFinish() and the server knows the client has disconnected.

Sounds right...

>  On a Windows client, if I do the same, same code, the client waits until the outstanding Request finishes and then sends FIN. Nothing happens at the server ? there?s no Request outstanding on which to deliver a callback, twisted.internet.tcp.Port.connectionLost() doesn?t get called, nada.

So, tcp.Port.connectionLost is only called when the *listening port* is shut down, i.e. when the server stops listening entirely.  What you should be looking for is connectionLost on your particular Protocol.

>  Am I missing something?  Is there a way to send a FIN on a connection on which there is an outstanding Request on Windows?

Twisted should behave the same way on all platforms, at least, if you're using portable APIs.

Usually, when the TCP stack completely goes out to lunch on Windows, it's due to some bizarre antivirus software that's just buggy.  For a while, possibly still today, Twisted just completely dies with certain versions of AVG installed, because they completely break the expected behavior of certain socket APIs.

Have you tried with multiple Windows clients yet? Different versions of Windows? Different software installed?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130920/ba632204/attachment.html>

From trac at twistedmatrix.com  Sun Sep 22 00:05:20 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 22 Sep 2013 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1379829920.14.2827448715611270063@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130922/10e43694/attachment.html>

From m-lists at the-moon.net  Tue Sep 24 06:07:21 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 24 Sep 2013 13:07:21 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
Message-ID: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>

Twisted Sprint Report (2013-09-23)

* Venue
  PyconUK 2013, Coventry, England


* Attendees
  * Lasse Bromose
  * Stephen Evans
  * Holger Kraus
  * Lukasz Prasol
  * Christophe Reche
  * Richard Wall


* Summary
  Five Twisted enthusiasts were introduced to the Twisted development
  process. We closed 2 tickets, made some progress on 2 others and
  improved some of the development process documentation.


* Details
** http://tm.tl/6406
   Christophe, Lukasz and Holger helped improve the Trial Howto
   Documentation. rwall reviewed and merged.

** http://tm.tl/6486
   Lasse and Stephen helped with the removal of "has_key" from
   twisted.mail and documented various undocumented twisted.mail
   tests. rwall reviewed and merged.

** https://twistedmatrix.com/trac/wiki/ReviewingDocumentation
   Holger reviewed and fixed broken links to Nevow and Pydoctor.

** http://tm.tl/6162
   Lasse and Stephen reviewed the twisted.web Agent Howto and updated
   the examples to use task.react.

** http://tm.tl/3324
   Lukasz and Holger reviewed Shira's new SMTP server tutorial.
   (Lukasz will attach their patch / notes when he gets home.)


Thanks to all of you for your help. I hope you found it interesting
and look forward to more contributions from you in the future.

-RichardW.


From exarkun at twistedmatrix.com  Tue Sep 24 07:07:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 24 Sep 2013 13:07:45 -0000
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
Message-ID: <20130924130745.26068.1611267828.divmod.xquotient.2397@top>

On 12:07 pm, m-lists at the-moon.net wrote:
>Twisted Sprint Report (2013-09-23)
>
>* Venue
>  PyconUK 2013, Coventry, England
>
>
>* Attendees
>  * Lasse Bromose
>  * Stephen Evans
>  * Holger Kraus
>  * Lukasz Prasol
>  * Christophe Reche
>  * Richard Wall

Woo.  Hope you guys had fun.  Thanks for the report, Richard.

Jean-Paul


From radix at twistedmatrix.com  Tue Sep 24 09:58:39 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 24 Sep 2013 10:58:39 -0500
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
Message-ID: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>

On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net> wrote:

> Twisted Sprint Report (2013-09-23)
>
> * Venue
>   PyconUK 2013, Coventry, England
>
>
> * Attendees
>   * Lasse Bromose
>   * Stephen Evans
>   * Holger Kraus
>   * Lukasz Prasol
>   * Christophe Reche
>   * Richard Wall
>
>
I am really excited about the fact that I don't know all of the people on
this list -- we need more developers!  :-) Thanks for organizing this
sprint, Richard!


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130924/36c7fe6e/attachment.html>

From techtonik at gmail.com  Tue Sep 24 10:13:52 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 24 Sep 2013 19:13:52 +0300
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
Message-ID: <CAPkN8xLEY-q9+u8xbA1x-=DGjXdBCy9081oMy7j3xSs3pCrmsA@mail.gmail.com>

On Tue, Sep 24, 2013 at 6:58 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net>wrote:
>
>> Twisted Sprint Report (2013-09-23)
>>
>> * Venue
>>   PyconUK 2013, Coventry, England
>>
>>
>> * Attendees
>>   * Lasse Bromose
>>   * Stephen Evans
>>   * Holger Kraus
>>   * Lukasz Prasol
>>   * Christophe Reche
>>   * Richard Wall
>>
>>
> I am really excited about the fact that I don't know all of the people on
> this list -- we need more developers!  :-) Thanks for organizing this
> sprint, Richard!
>

Reports are hard to write, but fun to read. Keep it up. Very nice. =)
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130924/3d21ad80/attachment.html>

From glyph at twistedmatrix.com  Tue Sep 24 11:33:18 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 Sep 2013 10:33:18 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
Message-ID: <AAF1792B-C794-4412-8F46-C40ACAD184EE@twistedmatrix.com>


On Sep 24, 2013, at 8:58 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net> wrote:
> Twisted Sprint Report (2013-09-23)
> 
> * Venue
>   PyconUK 2013, Coventry, England
> 
> 
> * Attendees
>   * Lasse Bromose
>   * Stephen Evans
>   * Holger Kraus
>   * Lukasz Prasol
>   * Christophe Reche
>   * Richard Wall
> 
> 
> I am really excited about the fact that I don't know all of the people on this list -- we need more developers!  :-) Thanks for organizing this sprint, Richard!

Me too.  This is great, thanks a ton!

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130924/1ba30501/attachment.html>

From m-lists at the-moon.net  Tue Sep 24 14:39:15 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 24 Sep 2013 21:39:15 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
Message-ID: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>

On 24 September 2013 14:07,  <exarkun at twistedmatrix.com> wrote:
<snip>
> Woo.  Hope you guys had fun.  Thanks for the report, Richard.

Yep, it was a good day.

There were a few things that could have gone better. Here are a few thoughts.

* Easy Tickets
In hindsight, I should have prepared a selection of suitable tickets.

The "easy" tickets search is useful, but many of them have been worked
on already and it's difficult to choose which of these are suitable
for sprint contributors without reading through the history.
One of the tickets I chose had already been mostly completed and the
remaining work (filling in missing docstrings for mail avatar tests)
was impossible for me to explain, let alone for the new contributors.

The "documentation" ticket report is also useful, but with our current
version of trac, there's no way of dynamically creating a report which
looks for "easy" AND "documentation" keywords.
New versions of trac allow this I think. Meanwhile we could write a
custom SQL report for this. And again it requires a little preparation
to select tickets which haven't got complications.

* Windows Development
Two of the guys were running windows and I struggled to help them set
up a working development environment. This evening I found this page
by cyli which might have helped, but probably needs updating.
 * https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Win32development

* Working in pairs
Anyway, we soon gave up on Windows and they paired up with the others
who were running Linux, and that worked well.

* Dev Requirements
It would be nice to have a dev-requirements.txt file so that they
could easily install the necessary development tools. pydoctor,
coverage, nevow, zope.interface, twistedchecker, etc
See:
 * https://github.com/hynek/structlog/blob/master/dev-requirements.txt

* Nevow
One of the guys was trying to run the documentation tools and we all
got thoroughly confused by the many broken links to Nevow.

The official link is
https://launchpad.net/divmod.org
...but it doesn't include a link to documentation.

There are these unofficial links and yet these are linked to from the
Twisted docs.
https://launchpad.net/divmod
https://launchpad.net/nevow

The pypi package is well out of date and has a broken project link
https://pypi.python.org/pypi/Nevow/0.10.0

The documentation has a broken download link.
http://divmod.readthedocs.org/en/latest/

It's such a shame that Nevow got into this state and that it isn't
easier to install.
It's fantastic software - especially Athena. And I was always partial
to Formless too.
There was even a lightening talk from a guy touting his *new* pythonic
system for generating HTML ie STAN!

* Combinator (or alternatives)
I've always used combinator to switch between Twisted branches, but it
would nice to have some documentation of non-combinator development
methods...what tools do people use to update their paths when they
switch between branches? I suppose with git you don't have to.
Is it worth considering putting combinator on Pypi?

* Git
Some of them struggled to get a complete subversion checkout (due to
dodgy conference wifi I think)  and tried to use git instead. It would
have been helpful if I'd re-read the latest Twisted git documentation
in preparation. It explains how to create a diff containing just the
local changes to a checked out branch.
 * https://twistedmatrix.com/trac/wiki/GitMirror

* The Django Sprint
By contrast, the neighbouring  Django sprint was much better prepared.
They'd run a series of tutorial sessions earlier in the conference, on
how to contribute to Django. So their sprinters hit the ground
running.
 * https://groups.google.com/forum/#!topic/django-developers/7JFKNoYl2EU
 * http://dont-be-afraid-to-commit.readthedocs.org/en/latest/
It's a good idea but a lot more work I guess.


Anyway, next time I'll know  and maybe it'll be a little easier.

-RichardW.


From rowen at uw.edu  Wed Sep 25 12:15:08 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Wed, 25 Sep 2013 11:15:08 -0700
Subject: [Twisted-Python] Running unit tests without trial?
Message-ID: <rowen-AF280F.11150825092013@news.gmane.org>

Is it possible to run twisted.trial unit tests using python instead of 
trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?

I'm hoping there is some simple magic I can put into the unit test 
itself to make this work. Perhaps something in
if __name__ == "__main__":
   ...?
to make it start up the reactor and run it correctly.

I ask because I'm using a build environment that runs all unit tests 
this way. It does the sniffing out and the saving of logs, but it 
insists on running .py tests using python.

-- Russell

P.S. being *able* to run trial unit tests using python seems like a 
feature to me in any case -- one I'd be willing to add extra code to 
support. Trial has some nice features, but I find it confusing that it 
is *required* to run a single test with a ".py" extension when visually 
it looks like a python file.



From exarkun at twistedmatrix.com  Wed Sep 25 12:45:44 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 25 Sep 2013 18:45:44 -0000
Subject: [Twisted-Python] Running unit tests without trial?
In-Reply-To: <rowen-AF280F.11150825092013@news.gmane.org>
References: <rowen-AF280F.11150825092013@news.gmane.org>
Message-ID: <20130925184544.26068.1404349410.divmod.xquotient.2424@top>

On 06:15 pm, rowen at uw.edu wrote:
>Is it possible to run twisted.trial unit tests using python instead of
>trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?

Sure.  Here's the worst case answer (contents of mytest.py):

    import os
    os.system("trial myrealtests.py")

By the way, it's usually better to use the FQPN to run tests - not the 
filename.  Using the filename exposes you to all kinds of gross edge 
cases that trial doesn't always handle very well (having to do with how 
modules are loaded in Python).  So consider this instead:

    trial mytest

Or better yet, since you should be distributing and installing your test 
suite along with your package:

    trial myproject.test

There *are* better ways than `os.system? to get a runnable Python source 
file that will run your tests though.

One that shouldn't be much of a surprise is to do exactly what you would 
do for a stdlib unittest-based test module:

    if __name__ == '__main__':
        import unittest
        unittest.main()

Or you can just invoke the same code that the command line trial script 
invokes:

    from twisted.scripts.trial import run
    run()

(That's not exactly the same as /usr/bin/trial, but you can read 
/usr/bin/trial to see the differences if you're interested).

Jean-Paul

>I'm hoping there is some simple magic I can put into the unit test
>itself to make this work. Perhaps something in
>if __name__ == "__main__":
>   ...?
>to make it start up the reactor and run it correctly.
>
>I ask because I'm using a build environment that runs all unit tests
>this way. It does the sniffing out and the saving of logs, but it
>insists on running .py tests using python.
>
>-- Russell
>
>P.S. being *able* to run trial unit tests using python seems like a
>feature to me in any case -- one I'd be willing to add extra code to
>support. Trial has some nice features, but I find it confusing that it
>is *required* to run a single test with a ".py" extension when visually
>it looks like a python file.

For what it's worth, just having a ".py" extension doesn't mean a file 
is intended to be run directly.  In fact, the vast majority of ".py" 
files are not intended to be run directly.  For example, out of the 816 
".py" files that are part of Twisted, probably only a handful are meant 
to be run directly.

What the ".py" extension unquestionably means is "this is a python 
module, it can be imported".  Arguably command line entrypoints should 
not have a ".py" extension - just as command line tools written in C and 
compiled to some version of native don't have a ".a" or ".so" extension 
(let alone a ".c" extension).

Jean-Paul


From glyph at twistedmatrix.com  Wed Sep 25 15:53:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 25 Sep 2013 14:53:14 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
Message-ID: <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>


On Sep 24, 2013, at 1:39 PM, Richard Wall <m-lists at the-moon.net> wrote:

> On 24 September 2013 14:07,  <exarkun at twistedmatrix.com> wrote:
> <snip>
>> Woo.  Hope you guys had fun.  Thanks for the report, Richard.
> 
> Yep, it was a good day.
> 
> There were a few things that could have gone better. Here are a few thoughts.

Thanks for writing this up.  It's always good to get better at sprints, and someone taking the time to take note of what went right and what went wrong.

> * Easy Tickets
> In hindsight, I should have prepared a selection of suitable tickets.

It seems like we learn this lesson every time :-).

However, I think that one reason that this always comes up is that preparing that selection of suitable tickets is a challenging task in its own right, that someone (or a group of people) needs to set aside time for.

> The "easy" tickets search is useful, but many of them have been worked
> on already and it's difficult to choose which of these are suitable
> for sprint contributors without reading through the history.

The "easy" ticket search is always like this because every 'easy' ticket needs to have its keyword status re-evaluated after every single bit of work that is done on it; every review, every commit, every patch; maybe even every bug comment.

Does anyone want to start an "easy team" that just keeps tabs on this list and tries to keep it updated? :)

> One of the tickets I chose had already been mostly completed and the
> remaining work (filling in missing docstrings for mail avatar tests)
> was impossible for me to explain, let alone for the new contributors.

This is one reason why we should be encouraging people to write docs first, along with writing tests first :).  Once there's an implementation that needs to be explained, bugs start to bottleneck on the original author.  But if there's just an explanation that needs to be implemented, it's generally easier for more people with different levels of skill to jump in.

> The "documentation" ticket report is also useful, but with our current
> version of trac, there's no way of dynamically creating a report which
> looks for "easy" AND "documentation" keywords. 

You can sort of half-ass it by searching for 'easy documentation' or 'documentation easy' :-).  That'll get you some results, although obviously not every possible combination.

> New versions of trac allow this I think.

I've filed a ticket asking for someone to upgrade Trac, but at this point we have pretty much no concrete reasons to do so.  If you have specific features in new versions that would be helpful, it would be good to collect them here:

<https://github.com/twisted-infra/trac-config/issues/4>

> Meanwhile we could write a custom SQL report for this. And again it requires a little preparation to select tickets which haven't got complications.

Presumably the "tickets which haven't got complications" work is covered by curating the "easy" keyword?

> * Windows Development
> Two of the guys were running windows and I struggled to help them set
> up a working development environment. This evening I found this page
> by cyli which might have helped, but probably needs updating.
> * https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Win32development

This already has been updated; a newer version is here:

http://blog.ying.li/2012/03/twisted-development-on-windows-v2.html

But even that still needs updating :-\.

> * Working in pairs
> Anyway, we soon gave up on Windows and they paired up with the others
> who were running Linux, and that worked well.

Sad that the Windows people didn't get a good environment that they could take home, but hey, if they take the lesson that Windows is a mistake that causes them pain, so much the better ;-).

But, all kidding aside, we could really use more contributors who use Windows and can give a different perspective on it.  If people are going to write Windows software - and it seems like we can't stop them - it would be nice if they used Twisted for it.  (And they are not going to make the decision that Windows causes them pain; they are going to decide that either Twisted or Python does.)

> * Dev Requirements
> It would be nice to have a dev-requirements.txt file so that they
> could easily install the necessary development tools. pydoctor,
> coverage, nevow, zope.interface, twistedchecker, etc
> See:
> * https://github.com/hynek/structlog/blob/master/dev-requirements.txt

What tools actually make use of this file?  Why is it desirable to keep this information there, instead of the 'requirements' key in setup.py?  (Is there a 'develop_requires' key?)

> * Nevow
> One of the guys was trying to run the documentation tools and we all
> got thoroughly confused by the many broken links to Nevow.
> 
> The official link is
> https://launchpad.net/divmod.org
> ...but it doesn't include a link to documentation.
> 
> There are these unofficial links and yet these are linked to from the
> Twisted docs.
> https://launchpad.net/divmod
> https://launchpad.net/nevow
> 
> The pypi package is well out of date and has a broken project link
> https://pypi.python.org/pypi/Nevow/0.10.0
> 
> The documentation has a broken download link.
> http://divmod.readthedocs.org/en/latest/
> 
> It's such a shame that Nevow got into this state and that it isn't
> easier to install.
> It's fantastic software - especially Athena. And I was always partial
> to Formless too.
> There was even a lightening talk from a guy touting his *new* pythonic
> system for generating HTML ie STAN!

I'm happy to give you administrative access to anything you need in order to update Nevow's online presence.  Also, a couple of Divmod projects have been successfully split out of that repository recently.  If you want to increase Nevow's visibility, you might want to follow the same model that PyFlakes and Vertex followed.

> * Combinator (or alternatives)
> I've always used combinator to switch between Twisted branches, but it
> would nice to have some documentation of non-combinator development
> methods...what tools do people use to update their paths when they
> switch between branches? I suppose with git you don't have to.
> Is it worth considering putting combinator on Pypi?

Right now I use a (frankly unholy) combination of Combinator and git :-) but I have it on a to-do list to change my setup to use virtualenv and git, since that is where the bulk of the Python community lives now and there is just no good reason to keep fighting the current.  Combinator's branch-management stuff is made irrelevant if you're using git for development since you can just switch between branches in one working copy, and its merge-management stuff is made irrelevant if you're using even a recent version of Subversion, let alone Git.

I'm currently using squash merges to land stuff on trunk, and I guess I need to write up how to do that.  That's the only real place where we still "need" Combinator, because it's hard to explain and error-prone how to land stuff with Subversion and not Combinator.  However, you can also do this with Git, and it's even explained here: <http://twistedmatrix.com/trac/wiki/GitMirror#gitsvnbranchmerging>.

> * Git
> Some of them struggled to get a complete subversion checkout (due to
> dodgy conference wifi I think)  and tried to use git instead. It would
> have been helpful if I'd re-read the latest Twisted git documentation
> in preparation. It explains how to create a diff containing just the
> local changes to a checked out branch.
> * https://twistedmatrix.com/trac/wiki/GitMirror

This documentation is actually in pretty good shape now.  I've managed to follow the instructions several times without errors.  (The trick is, don't try to use git-svn by yourself without help.)

> * The Django Sprint
> By contrast, the neighbouring  Django sprint was much better prepared.
> They'd run a series of tutorial sessions earlier in the conference, on
> how to contribute to Django. So their sprinters hit the ground
> running.
> * https://groups.google.com/forum/#!topic/django-developers/7JFKNoYl2EU
> * http://dont-be-afraid-to-commit.readthedocs.org/en/latest/
> It's a good idea but a lot more work I guess.

On the one hand, the Django project really does a great job onboarding contributors, and they have an amazing culture as regards things like comprehensible documentation and clear workflow.  So we should pay attention to their (in many cases superior) example.

On the other hand, they have a little less code (~140ksloc for Django, ~170ksloc for Twisted) and a substantially larger community. By Ohloh's measure, <http://www.ohloh.net/p/twisted> vs. <http://www.ohloh.net/p/django> is 148 to 992; roughly 7 times the user-base.  So it's not quite reasonable to judge Twisted by the same standard, or to expect that we can achieve Django's results by copying Django's methods, or even that we could faithfully muster enough effort to copy their methods exactly.

So we should definitely try to learn stuff from their methods, but also keep realistic expectations and not get disappointed when we still don't have a Django-size or Django-energy-level sprint :-).

> Anyway, next time I'll know and maybe it'll be a little easier.

Good luck!  Even though you'll know next time, you will still probably need help.  Feel free to ask for help next time; reminding everyone of these difficulties in advance can often help get people interested in doing stuff like grooming the easy queue :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130925/e4c05829/attachment-0001.html>

From julian at grayvines.com  Wed Sep 25 16:11:35 2013
From: julian at grayvines.com (Julian Berman)
Date: Wed, 25 Sep 2013 18:11:35 -0400
Subject: [Twisted-Python] Running unit tests without trial?
Message-ID: <CABJQSkkzofnz7AGSrP=yNss3gp6unnWMhU-UHFD=cAr+iaBUVw@mail.gmail.com>

On Wed, 25 Sep 2013 18:45:44 -0000 exarkun at twistedmatrix.com wrote:
> On 06:15 pm, rowen at uw.edu wrote:
> >Is it possible to run twisted.trial unit tests using python instead of
> >trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?
>
> Sure.  Here's the worst case answer (contents of mytest.py):
>
>     import os
>     os.system("trial myrealtests.py")

There is also http://twistedmatrix.com/trac/ticket/4797

Cheers,
Julian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130925/febd6175/attachment.html>

From rowen at uw.edu  Wed Sep 25 16:40:16 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Wed, 25 Sep 2013 15:40:16 -0700
Subject: [Twisted-Python] Running unit tests without trial?
References: <rowen-AF280F.11150825092013@news.gmane.org>
 <20130925184544.26068.1404349410.divmod.xquotient.2424@top>
Message-ID: <rowen-B1BB28.15401625092013@news.gmane.org>

In article <20130925184544.26068.1404349410.divmod.xquotient.2424 at top>,
 exarkun at twistedmatrix.com wrote:

> On 06:15 pm, rowen at uw.edu wrote:
> >Is it possible to run twisted.trial unit tests using python instead of
> >trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?
> 
> Sure.  Here's the worst case answer (contents of mytest.py):
> 
>     import os
>     os.system("trial myrealtests.py")
> 
> By the way, it's usually better to use the FQPN to run tests - not the 
> filename.  Using the filename exposes you to all kinds of gross edge 
> cases that trial doesn't always handle very well (having to do with how 
> modules are loaded in Python).  So consider this instead:
> 
>     trial mytest
> 
> Or better yet, since you should be distributing and installing your test 
> suite along with your package:
> 
>     trial myproject.test
> 
> There *are* better ways than `os.system?? to get a runnable Python source 
> file that will run your tests though.
> 
> One that shouldn't be much of a surprise is to do exactly what you would 
> do for a stdlib unittest-based test module:
> 
>     if __name__ == '__main__':
>         import unittest
>         unittest.main()

I am surprised it works because I had already tried:

from twisted.trial import unittest
...
if __name__ == '__main__':
    twisted.trial.unittest.main()

but twisted.trial.unittest has no main function (a rude surprise), so it 
never occurred to me that the built-in unittest library's main would 
work.

It seems to be exactly what I want.

> Or you can just invoke the same code that the command line trial script 
> invokes:
> 
>     from twisted.scripts.trial import run
>     run()

I tried that as well, but as you say, it is acting as if it was started 
by trial, so it prints help and quits. I guess it wants some arguments.  
I'm sure it'd be useful for some use cases, but for mine your first 
suggestion looks perfect.

Many thanks.

-- Russell



From hs at ox.cx  Wed Sep 25 23:20:26 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 26 Sep 2013 07:20:26 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
Message-ID: <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>

>> * Dev Requirements
>> It would be nice to have a dev-requirements.txt file so that they
>> could easily install the necessary development tools. pydoctor,
>> coverage, nevow, zope.interface, twistedchecker, etc
>> See:
>> * https://github.com/hynek/structlog/blob/master/dev-requirements.txt
> 
> What tools actually make use of this file?  

pip install -r dev-requirements.txt

> Why is it desirable to keep this information there, instead of the 'requirements' key in setup.py?

There is no ?requirements? key ? and ?requires? are runtime dependencies.  You don?t want to put your development tools there.

>   (Is there a 'develop_requires' key?)

No: http://pythonhosted.org/distribute/setuptools.html#new-and-changed-setup-keywords

There is tests_require which is also something different from development tools and get used when you run setup.py test which we AFAIK don?t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/94323862/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/94323862/attachment.pgp>

From sank.daniel at gmail.com  Thu Sep 26 00:03:17 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 25 Sep 2013 23:03:17 -0700
Subject: [Twisted-Python] (no subject)
Message-ID: <CAKN9TDLyy+4H6ybmGkdoA9Ug+-uBvKKTWZViEDXdXQ45a2M9eQ@mail.gmail.com>

Dear Twisted users,

I recently found myself implementing a design pattern that I think
twisted.pb was specifically designed to address. I think I'm not using pb
correctly so I'd like advice. This is a somewhat longish post because I
need to describe the problem I'm trying to solve.

I have done internet searches on Stack Overflow and this list but have not
found the answer to my question. If I've missed something kindly direct me
to the appropriate reference.

I want to implement something functionally equivalent to a network chess
game. I first consider how I would do this on a single computer with no
network (maybe this is bad thinking). Each piece in the game is represented
by an instance of class Agent. Each agent has a .graphics attribute which
is an instance of a class from a GUI toolkit library or equivalent.
Whenever an agent in the game needs to do something there will be business
logic executed by the game objects proper (ie the agents) which will invoke
methods on the .graphics objects to update the screen. This sort of
structure seems natural as it allows easy integration of drag/drop, mouse
click detection etc. It also nicely separates the real business logic from
the GUI.

Now I want to run over the network. The question is how should I set up
references between the client and server objects?

Surely the server will maintain a set of objects representing the pieces in
the game. It seems reasonable that each user's program will have a
corresponding set of objects (with .graphics attributes). The issue is,
what do we mean by "corresponding" and how do these objects talk to one
another? Following is my idea so far:

Each instance of AgentClient has a .server attribute which is a remote
reference to an instance of AgentServer, and each instance of AgentServer
has a .clients attribute which is a list of remote references to instances
of AgentClient.

class AgentServer(pb.referenceable):

    def remote_move(self, targetSquare):
        """Handle move request from client"""
        if self.thisMoveIsLegal(targetSquare):
            self.position = targetSquare
            for client in self.clients:
                client.callRemote("move", targetSquare)

    def thisMoveIsLegal(self, targetSquare):
        <check that this is a legal move>

class AgentClient(pb.referenceable):

    def requestMove(self, targetSquare):
        """Tell server we'd like to move"""
        self.server.callRemote("move", targetSquare)

    def remote_move(self, targetSquare):
        """Server told us we moved"""
        self.position = targetSquare
        self.graphics.setNewPosition(targetSquare)

This isn't THAT bad. The client's requestMove is thin and unecessary (I put
it there for illustration). Still I need to have two separate classes with
corresponding methods to handle moving the piece. This seems like the kind
of thing I could twisted.pb to solve more cleanly if I only would look in
the right place.

This problem gets even worse when I think about how to birth new in-game
objects. It would have to look like this:

class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
        """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

This just looks wrong. Any advice?

Thank you in advance for your help.

Regards,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130925/4796f6a0/attachment.html>

From sank.daniel at gmail.com  Thu Sep 26 00:05:38 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 25 Sep 2013 23:05:38 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
Message-ID: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>

(Apologies for double send but I forgot the subject line)

Dear Twisted users,

I recently found myself implementing a design pattern that I think
twisted.pb was specifically designed to address. I think I'm not using pb
correctly so I'd like advice. This is a somewhat longish post because I
need to describe the problem I'm trying to solve.

I have done internet searches on Stack Overflow and this list but have not
found the answer to my question. If I've missed something kindly direct me
to the appropriate reference.

I want to implement something functionally equivalent to a network chess
game. I first consider how I would do this on a single computer with no
network (maybe this is bad thinking). Each piece in the game is represented
by an instance of class Agent. Each agent has a .graphics attribute which
is an instance of a class from a GUI toolkit library or equivalent.
Whenever an agent in the game needs to do something there will be business
logic executed by the game objects proper (ie the agents) which will invoke
methods on the .graphics objects to update the screen. This sort of
structure seems natural as it allows easy integration of drag/drop, mouse
click detection etc. It also nicely separates the real business logic from
the GUI.

Now I want to run over the network. The question is how should I set up
references between the client and server objects?

Surely the server will maintain a set of objects representing the pieces in
the game. It seems reasonable that each user's program will have a
corresponding set of objects (with .graphics attributes). The issue is,
what do we mean by "corresponding" and how do these objects talk to one
another? Following is my idea so far:

Each instance of AgentClient has a .server attribute which is a remote
reference to an instance of AgentServer, and each instance of AgentServer
has a .clients attribute which is a list of remote references to instances
of AgentClient.

class AgentServer(pb.referenceable):

    def remote_move(self, targetSquare):
        """Handle move request from client"""
        if self.thisMoveIsLegal(targetSquare):
            self.position = targetSquare
            for client in self.clients:
                client.callRemote("move", targetSquare)

    def thisMoveIsLegal(self, targetSquare):
        <check that this is a legal move>

class AgentClient(pb.referenceable):

    def requestMove(self, targetSquare):
        """Tell server we'd like to move"""
        self.server.callRemote("move", targetSquare)

    def remote_move(self, targetSquare):
        """Server told us we moved"""
        self.position = targetSquare
        self.graphics.setNewPosition(targetSquare)

This isn't THAT bad. The client's requestMove is thin and unecessary (I put
it there for illustration). Still I need to have two separate classes with
corresponding methods to handle moving the piece. This seems like the kind
of thing I could twisted.pb to solve more cleanly if I only would look in
the right place.

This problem gets even worse when I think about how to birth new in-game
objects. It would have to look like this:

class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
        """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

This just looks wrong. Any advice?

Thank you in advance for your help.

Regards,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130925/5fa99ba8/attachment-0001.html>

From glyph at twistedmatrix.com  Thu Sep 26 13:29:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 12:29:57 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
 <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>
Message-ID: <A9585DB2-FBA4-4A26-8E44-A877548D12C0@twistedmatrix.com>

On Sep 25, 2013, at 10:20 PM, Hynek Schlawack <hs at ox.cx> wrote:

>> What tools actually make use of this file?  
> 
> pip install -r dev-requirements.txt


OK.  If this is the way that this file is intended to be used, perhaps there should be a comment explaining that at the top :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/08428e29/attachment.html>

From twisted-python at 2xlp.com  Thu Sep 26 19:51:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 26 Sep 2013 21:51:54 -0400
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
Message-ID: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>


Quick question about (sub)processes in twisted :

	how bad is it to use the subprocess module  ? ( in general / in this application )

I have the following setup :

	- Twisted Daemon that does 5 things (very well!)
	- A new requirement -- to execute 2 scripts on the commandline , one after the other ( ie, blocking )  

the 2 commandline scripts are just tossing some PostgreSQL commands via `postgresql db < file.txt` 

i was looking at reactor.SpawnProcess -- which I know is more correct.  it just seems to be a bit annoying to use , and I know the subprocess module already.  




From glyph at twistedmatrix.com  Thu Sep 26 19:52:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 18:52:04 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
Message-ID: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>

On Sep 25, 2013, at 11:05 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> This isn't THAT bad. The client's requestMove is thin and unecessary (I put it there for illustration). Still I need to have two separate classes with corresponding methods to handle moving the piece.

That's OK.  Don't try to reduce your number of classes just for the sake of having fewer classes.  Each class should have a clearly defined responsibility.  In this case, your responsibilities correspond directly to the things that have to happen on the server (validating the move) and the things that have to happen on the client (updating the graphical representation to correspond to the new game state).  Having more, smaller classes means that it's easier for you to understand each class on its own, and programming is nothing if not the act of promoting local understanding :).

If anything, you should have an additional class to separate out your remote_* responders and the actual internal state.

> This seems like the kind of thing I could twisted.pb to solve more cleanly if I only would look in the right place.


I don't know if this is going to directly address any of your concerns, but have you considered using twisted.spread.flavors.Cacheable?  That will atomically combine the propagation of initial state with the provision of the back-propagation channel for updates to that state.  It's designed for exactly what you're doing, maintaining parallel simulated states on client and server.

Does that help at all?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/5452ebb0/attachment.html>

From glyph at twistedmatrix.com  Thu Sep 26 20:18:16 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 19:18:16 -0700
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
Message-ID: <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>


On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> 
> Quick question about (sub)processes in twisted :
> 
> 	how bad is it to use the subprocess module  ? ( in general / in this application )

It's pretty bad ;-).

> I have the following setup :
> 
> 	- Twisted Daemon that does 5 things (very well!)
> 	- A new requirement -- to execute 2 scripts on the commandline , one after the other ( ie, blocking )  
> 
> the 2 commandline scripts are just tossing some PostgreSQL commands via `postgresql db < file.txt` 
> 
> i was looking at reactor.SpawnProcess -- which I know is more correct.  it just seems to be a bit annoying to use , and I know the subprocess module already.  

The subprocess module does not have any way to spawn a subprocess and get its output and exit status as events in the reactor; its methods all block.  You can sort of re-build spawnProcess yourself from scratch, but ... then you'd just have spawnProcess with a slightly more subprocess-y API, and you'd be better off writing a utility function that wraps spawnProcess for yourself.

Could you write up why you feel it's "annoying"?  Maybe we can improve spawnProcess so it works better for you in the future.

-glyph



From sank.daniel at gmail.com  Thu Sep 26 21:25:31 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 26 Sep 2013 20:25:31 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
Message-ID: <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>

> If anything, you should have an additional class to separate out your
remote_* responders and the actual internal state.

Indeed.

> I don't know if this is going to *directly* address any of your concerns,
but have you considered using twisted.spread.flavors.Cacheable?

This is funny. I read the documentation on Cacheable a few times and
eventually figured the warning about it being "hard to understand" was
there for a reason. I'll check it out in earnest now that I know it's
relevant. Many thanks.

Regards,
Daniel Sank

P.S. Thanks for Twisted. It rocks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/952e9969/attachment.html>

From haggardii at gmail.com  Thu Sep 26 22:35:14 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 26 Sep 2013 22:35:14 -0600
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
 <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
Message-ID: <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>

On Sep 26, 2013 8:18 PM, "Glyph" <glyph at twistedmatrix.com> wrote:
>
>
> On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:
>
> Could you write up why you feel it's "annoying"?  Maybe we can improve
spawnProcess so it works better for you in the future.

I'm also interested in what you feel is annoying. Please write this (it
will help improve documentation too).

Also, check out http://twistedftw.org/articles.html#!/processes/getstdout

Matt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130926/b9ad880e/attachment.html>

From sank.daniel at gmail.com  Thu Sep 26 22:48:14 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 26 Sep 2013 21:48:14 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
Message-ID: <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>

Upon re-reading the Cacheable docs I still don't understand how to use
it. Can we take my previous home-brewed example and use that as a
launch point for illustrating how to use Cacheable? Here's the
example.

We assume the client has a PlayerClient instance with .server pointing
to a PlayerServer instance. The PlayerServer has a .client list of
PlayerClients. The code fragments are the methods needed to spawn a
new Agent and hook up the client and server objects.


class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
       """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

How does Cacheable help do this?


From p.mayers at imperial.ac.uk  Fri Sep 27 01:36:10 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Sep 2013 08:36:10 +0100
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
Message-ID: <5245356A.9060002@imperial.ac.uk>

On 09/27/2013 02:51 AM, Jonathan Vanasco wrote:

> i was looking at reactor.SpawnProcess -- which I know is more
> correct.  it just seems to be a bit annoying to use

Are you aware of twisted.internet.utils.getProcessOutputAndValue? For 
simple spawn/check cases, that's pretty much always the best option IMO.

If you have a case where you need to write to a child process - well, I 
don't see how you hope to avoid using spawnProcess and a 
ProcessProtocol; like others I'd be interested to hear what you dislike 
about the API (I have problems with a bunch of Twisted APIs, but that 
one I quite like ;o)


From p.mayers at imperial.ac.uk  Fri Sep 27 01:46:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Sep 2013 08:46:06 +0100
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
Message-ID: <524537BE.20206@imperial.ac.uk>

On 09/27/2013 05:48 AM, Daniel Sank wrote:
> Upon re-reading the Cacheable docs I still don't understand how to use
> it.

Have you seen this:

http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html#auto9

Essentially, you move all attribute access to accessor methods and do 
callRemote to propagate the changes out to observers; new observers are 
passed to you in getStateToCacheAndObserveFor.

Observers respond to observe_xxx methods, and implement a 
setCopyableState method.

Then you map the cacheable and observer with pb.setUnjellyableForClass


From sank.daniel at gmail.com  Fri Sep 27 02:44:34 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 27 Sep 2013 01:44:34 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <524537BE.20206@imperial.ac.uk>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
 <524537BE.20206@imperial.ac.uk>
Message-ID: <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>

> Have you seen this:
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html#auto9

No, I hadn't. That example is extremely helpful, thank you.

I just realized that the documentation pages I'd been reading are all
linked from here:

http://twistedmatrix.com/documents/current/core/howto/index.html

but don't link to each other, which is why I didn't find the page you
referenced in your post. I should learn to pay attention to URLs :P

Regards,
Daniel


From _ at lvh.io  Fri Sep 27 03:21:42 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 27 Sep 2013 11:21:42 +0200
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
 <524537BE.20206@imperial.ac.uk>
 <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>
Message-ID: <CAE_Hg6aKsLzcV698n2+EX9P=38hMZGYojT6LDiiYJt5SiTAuDQ@mail.gmail.com>

Hi Daniel,

If you're interested in PB, you may also be interested in Foolscap, the
object-capability extension to PB.

Foolscap lives at: http://foolscap.lothar.com/trac
Feature overview: http://foolscap.lothar.com/trac/wiki/FoolscapFeatures

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130927/59006688/attachment.html>

From dripton at ripton.net  Fri Sep 27 10:53:34 2013
From: dripton at ripton.net (David Ripton)
Date: Fri, 27 Sep 2013 12:53:34 -0400
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
Message-ID: <5245B80E.8080501@ripton.net>

On 09/26/2013 02:05 AM, Daniel Sank wrote:

> I want to implement something functionally equivalent to a network chess
> game. I first consider how I would do this on a single computer with no
> network (maybe this is bad thinking). Each piece in the game is
> represented by an instance of class Agent. Each agent has a .graphics
> attribute which is an instance of a class from a GUI toolkit library or
> equivalent. Whenever an agent in the game needs to do something there
> will be business logic executed by the game objects proper (ie the
> agents) which will invoke methods on the .graphics objects to update the
> screen. This sort of structure seems natural as it allows easy
> integration of drag/drop, mouse click detection etc. It also nicely
> separates the real business logic from the GUI.

I think you have the right idea but that's still a bit too much coupling 
between the logic and the UI for my taste.  I don't want the game logic 
to have a .graphics attribute; I want the game logic to fling game 
events to one or more consumers, each of which may or may not be a GUI. 
  (Maybe it's a headless AI player.  Maybe it's a logging service.  The 
server shouldn't care.)

> Now I want to run over the network. The question is how should I set up
> references between the client and server objects?

There's more than one way to do it.

Here's my game that uses PB: https://github.com/dripton/Slugathon

I used PB (because AMP and Foolscap didn't exist yet), but I didn't use 
the fancy bits of PB like Cacheable, because I strongly prefer simple 
remote method calls to fancy remote objects.  But if you grep for 
callRemote, remote_, and perspective_, you can see how I did it.

As noted above, my game server flings events (see Action.py for what 
they look like) to both GUI and AI clients.  The actions are just little 
value objects that happen to inherit from pb.Copyable and pb.RemoteCopy 
for convenience, though they just as easily be JSON blobs.

Of course, it's probably much easier to just use Cacheable.  It comes 
down to programmer preference.

One piece of advice: do the network code first and always exercise it, 
even when playing on a single computer.  Every time I've written a 
single-machine game first then tried to add networking later, the 
networking has been a mess to debug.

-- 
David Ripton    dripton at ripton.net


From trac at twistedmatrix.com  Sun Sep 29 00:05:14 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 29 Sep 2013 06:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1380434714.76.2536777919359202303@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130929/60545205/attachment.html>

From hs at ox.cx  Sun Sep 29 03:49:16 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 29 Sep 2013 11:49:16 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
Message-ID: <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>

Am 24.09.2013 um 22:39 schrieb Richard Wall <m-lists at the-moon.net>:

> * Dev Requirements
> It would be nice to have a dev-requirements.txt file so that they
> could easily install the necessary development tools. pydoctor,
> coverage, nevow, zope.interface, twistedchecker, etc

JFTR, we need to fix nevow first to be installable w/o Twisted being already present:

***

Downloading/unpacking nevow (from -r dev-requirements.txt (line 4))
  Using download cache from /Users/hynek/.pip/cache/https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FN%2FNevow%2FNevow-0.10.0.tar.gz
  Running setup.py egg_info for package nevow
    Traceback (most recent call last):
      File "<string>", line 16, in <module>
      File "/Users/hynek/.virtualenvs/tt/build/nevow/setup.py", line 3, in <module>
        from nevow import __version__ as version
      File "nevow/__init__.py", line 5, in <module>
        from nevow._version import version
      File "nevow/_version.py", line 2, in <module>
        from twisted.python import versions
    ImportError: No module named twisted.python
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):

  File "<string>", line 16, in <module>

  File "/Users/hynek/.virtualenvs/tt/build/nevow/setup.py", line 3, in <module>

    from nevow import __version__ as version

  File "nevow/__init__.py", line 5, in <module>

    from nevow._version import version

  File "nevow/_version.py", line 2, in <module>

    from twisted.python import versions

ImportError: No module named twisted.python

***

I have that on my todo-list since the beginning of time but never got around to it.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130929/ef7e063f/attachment.pgp>

From _ at lvh.io  Mon Sep 30 03:45:39 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 30 Sep 2013 11:45:39 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a locator,
	not the proto?
Message-ID: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>

Hi everyone,


I think I've hit one of those cases where AMP really seems to want
everything (locator, receiver, sender) to be an instance of t.p.amp.AMP :-(

I've written some code that tries to multiplex stream transports over AMP:

https://github.com/lvh/txampext/blob/multiplexing/txampext/multiplexing.py

The repo contains an example server and client, which demonstrate the issue:

https://github.com/lvh/txampext/blob/multiplexing/docs/examples/multiplexing_client.py
https://github.com/lvh/txampext/blob/multiplexing/docs/examples/multiplexing_server.py

In order to do some of this multiplexing, I need access to the protocol
instance inside the responder on the server side. Fortunately, I already
had some code that exposed box senders (after a lot of advice from Glyph).
I modified it to expose the protocol as well:

https://github.com/lvh/txampext/blob/multiplexing/txampext/exposed.py#L41

However, it turns out fromBox gets called with the *responder locator* as
the "proto" argument, not the actual protocol.

The server has a pudb call that makes it easy (?!) to trace this down. The
CommandLocator class, inside doit (a function defined in
_wrapWithSerialization) passes "self" to command.parseArguments:

https://twistedmatrix.com/trac/browser/trunk/twisted/protocols/amp.py#L1015

This is the part where I think the contract is broken, since parseArguments
claims to want the protocol (well, it says it wants the AMP protocol,
which, subclassing everything, is also all of the things, of course), but
receives the responder locator.

What am I doing wrong? Is this a bug?

confusedly,
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/027bb877/attachment.html>

From glyph at twistedmatrix.com  Mon Sep 30 12:41:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 11:41:52 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
Message-ID: <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>


On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> What am I doing wrong? Is this a bug?

I think it's pretty clearly a bug.  Calling the argument "proto" in the first place indicates the nature of the confusion.

There are parts of the flow here from bytes to method execution and back (like _wrapWithSerialization) which are nice for composition, but the fact that they're private sort of ruins their utility for extensibility.

Looking at the code you're trying to write in txampext though, the problem appears to be simply that you're writing functionality close enough to AMP's core that you should be making the changes to AMP directly, and fixing the issue by making changes to AMP itself rather than trying to work around it externally.  The way I was going to recommend fixing it before I clicked on your link was by writing something like ExposingArgument and accessing the locator/receiver/sender via that new API rather than via the 'proto' argument at all :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/523e2617/attachment.html>

From glyph at twistedmatrix.com  Mon Sep 30 12:42:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 11:42:24 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
Message-ID: <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>

On Sep 29, 2013, at 2:49 AM, Hynek Schlawack <hs at ox.cx> wrote:

> I have that on my todo-list since the beginning of time but never got around to it.

Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/36070e2e/attachment.html>

From hs at ox.cx  Mon Sep 30 12:51:37 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 30 Sep 2013 20:51:37 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
Message-ID: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>


Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:

>> I have that on my todo-list since the beginning of time but never got around to it.
> 
> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?

Yes, I believe it?s https://bugs.launchpad.net/nevow/+bug/1091055
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/c12043a2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/c12043a2/attachment.pgp>

From _ at lvh.io  Mon Sep 30 13:09:41 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 30 Sep 2013 21:09:41 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
Message-ID: <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>

Hi Glyph,

Thanks for your response!

On Mon, Sep 30, 2013 at 8:41 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> What am I doing wrong? Is this a bug?
>
>
> I think it's pretty clearly a bug.  Calling the argument "proto" in the
> first place indicates the nature of the confusion.
>
> There are parts of the flow here from bytes to method execution and back
> (like _wrapWithSerialization) which are nice for composition, but the fact
> that they're private sort of ruins their utility for extensibility.
>
> Looking at the code you're trying to write in txampext though, the problem
> appears to be simply that you're writing functionality close enough to
> AMP's core that you should be making the changes to AMP directly, and
> fixing the issue by making changes to AMP itself rather than trying to work
> around it externally.  The way I was going to recommend fixing it before I
> clicked on your link was by writing something like ExposingArgument and
> accessing the locator/receiver/sender via that new API rather than via the
> 'proto' argument at all :)
>

I'm a little confused why that would help; you're saying there should be a
new API that gives arguments access to the locator, receiver, sender? What
would that look like? Something along the lines of fromBox/toBox, or are
you thinking of a more direct approach where the locator has a reference to
the other components? (Given your suggestion of not going through the proto
argument, I imagine something closer to the latter.)

My contributions to AMP have been more of the defect-findy kind, but I
could certainly turn them more into the code-contributy kind. I imagine I'm
not the first person to want tests for command classes (
https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a
nested AMP box (
https://github.com/lvh/txampext/blob/master/txampext/nested.py).

I look forward to being in the same locality as you, I presume it will make
me more productive ;)

-glyph
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/052cb3c0/attachment.html>

From glyph at twistedmatrix.com  Mon Sep 30 16:12:37 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 15:12:37 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
 <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
Message-ID: <AC499CA1-50A2-47CC-8671-4C63476ECA6F@twistedmatrix.com>


On Sep 30, 2013, at 11:51 AM, Hynek Schlawack <hs at ox.cx> wrote:

> 
> Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>> I have that on my todo-list since the beginning of time but never got around to it.
>> 
>> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?
> 
> Yes, I believe it?s https://bugs.launchpad.net/nevow/+bug/1091055

Thanks for the reference.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/6d3faa3c/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Sep 30 16:59:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 15:59:22 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
Message-ID: <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>


On Sep 30, 2013, at 12:09 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Glyph,
> 
> Thanks for your response!
> 
> On Mon, Sep 30, 2013 at 8:41 PM, Glyph <glyph at twistedmatrix.com> wrote:
> On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> What am I doing wrong? Is this a bug?
> 
> I think it's pretty clearly a bug.  Calling the argument "proto" in the first place indicates the nature of the confusion.
> 
> There are parts of the flow here from bytes to method execution and back (like _wrapWithSerialization) which are nice for composition, but the fact that they're private sort of ruins their utility for extensibility.
> 
> Looking at the code you're trying to write in txampext though, the problem appears to be simply that you're writing functionality close enough to AMP's core that you should be making the changes to AMP directly, and fixing the issue by making changes to AMP itself rather than trying to work around it externally.  The way I was going to recommend fixing it before I clicked on your link was by writing something like ExposingArgument and accessing the locator/receiver/sender via that new API rather than via the 'proto' argument at all :)
> 
> I'm a little confused why that would help; you're saying there should be a new API that gives arguments access to the locator, receiver, sender? What would that look like? Something along the lines of fromBox/toBox, or are you thinking of a more direct approach where the locator has a reference to the other components? (Given your suggestion of not going through the proto argument, I imagine something closer to the latter.)

For someone confused about why it would help, you are pretty close to the mark :).

I am not trying to propose a specific new implementation mechanism, but rather to say that fromBox/toBox are broken, in that the contract of the 'proto' argument is incompletely specified.  Most of the code I can think of that wants to use that really wants the transport rather than the "protocol", but nothing within AMP itself actually uses those arguments; in fact, searching the usual suspects (epsilon, vertex) I can't even find any Arguments that use the 'proto' argument for anything useful.

If I recall, I believe the idea behind it was to allow an AMP responder within Vertex to return the peer's IP address back to the peer, from within an authenticated AMP route that (because it was a route) wasn't necessarily connected directly to the transport (and therefore couldn't just do self.transport.getPeer()).  Ironically I don't think it'll actually work for that now :-).

When we pull the authentication logic in from <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>, you might write a responder that's interested in authentication information that lives in some other relation to the protocol.

So in order to fix fromBox/toBox, we need to do a fix that firms up that contract and perhaps exposes more than a Protocol object.  The *recommended* API should be more or less like what ExposingArgument is doing - specify an Argument that asks for a particular attribute of the transport or the protocol or the authentication context or whatever, the implementation details may involve other lower-level public APIs.

> My contributions to AMP have been more of the defect-findy kind, but I could certainly turn them more into the code-contributy kind. I imagine I'm not the first person to want tests for command classes (https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a nested AMP box (https://github.com/lvh/txampext/blob/master/txampext/nested.py).

That would be cool.  And, you know, that auth thing I said :-).

> I look forward to being in the same locality as you, I presume it will make me more productive ;)

Living in that particular locale is going to spoil me.  I feel like I may need to move somewhere more remote so that I am forced to have nice transparent discussions on the record like this one, on mailing lists on IRC :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20130930/164dd613/attachment.html>

From mhumphrey at gmail.com  Sun Sep  1 14:04:35 2013
From: mhumphrey at gmail.com (Matthew Humphrey)
Date: Sun, 1 Sep 2013 13:04:35 -0700
Subject: [Twisted-Python] Advice on porting Python application to Twisted
In-Reply-To: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
References: <CAMBtMcs0GbZgijgrYycmJV5XU=ozg-7NcaHkHYFZwObr4TYpuw@mail.gmail.com>
Message-ID: <CAMYwhV=7UzcV2yJLBBRSyxgHJWCPRqdeo7gbtRMtLDCYj9LwMg@mail.gmail.com>

Tom -

Just wanted to thank you for your help. I got everything ported over to
Twisted on Friday, and the responsiveness of the web site is 10 times
better. Also the number of lines of (my) code declined, which is great.

Thanks much.



On Wed, Aug 28, 2013 at 6:40 AM, Tom Sheffler <tom.sheffler at gmail.com>wrote:

>
> Hi Matthew -
>
> I have a couple of idioms I use for #2 and #3 in your message.  Here they
> are.
>
> #2)
>
> For timer events, I create a function that when called, continuously
> schedules itself again in the reactor, does some work for the current
> tick, and then exits.  I've used this down to 1-second intervals.  If
> you're looking for sub-millisecond level timing, this may not be
> appropriate for your application.
>
> def timerFunction(reactor):
>
>     reactor.callLater(1.0, timerFunction, reactor)
>
>     # do the work for this time tick
>     # etc etc
>
>     return
>
> # Somewhere in main do this to kick it off
> from twisted.internet import reactor
> timerFunction(reactor)
>
>
> #3)
>
> For subprocesses, I like to create a custom protocol for each type of
> sub-command I am calling.  I also like to create an object to manage
> the process, its arguments, its results and its temp files.  The idiom
> below is suitable for calling a subprocess that accepts a small amount
> of buffered data on stdin, produces some output on stdout, and logs its
> stderr.
>
> Be careful examining the value of reason.value.exitCode in
> processExited.  The twisted docs show printing the exitCode as a "%d",
> but sometimes the value is None --- if the process was terminated by a
> signal.  The mere printing of the value with "%d" will then trigger an
> exception!
>
>
> Here's my idiom:
>
> class FooprocProtocol(protocol.ProcessProtocol):
>
>     def __init__(self, foomgr):
>         # the object managing my subprocess
>         self.foomgr = foomgr
>
>         # my stdout data
>         self.data = ""
>
>     def connectionMade(self):
>         # Pump input data in using this, and then close stdin
>         log.msg("connectionMade!")
>         # self.transport.write("...")  # if there is any data to shove
> into stdin
>         self.transport.closeStdin()
>
>     def outReceived(self, data):
>         # collect up our stdout
>         log.msg("outReceived! with %d bytes!" % len(data))
>         self.data = self.data + data
>
>     def errReceived(self, data):
>         # echo stderr messages to log with a marker
>         log.msg(">%s" % data)
>
>     def inConnectionLost(self):
>         print "inConnectionLost! stdin is closed! (we probably did it)"
>
>     def outConnectionLost(self):
>         log.msg("outConnectionLost! The child closed their stdout!")
>
>     def errConnectionLost(self):
>         log.msg("errConnectionLost! The child closed their stderr.")
>
>     def processExited(self, reason):
>         log.msg("processExited:%s:" % reason)
>         exitcode = reason.value.exitCode         # an integer or None
>
>         # do some work upon processExit potentially make a decision on
> exitcode ...
>
>         log.msg("processExited:%s" % exitcode)
>
>     def processEnded(self, reason):
>         print "processEnded, status %s" % (reason.value.exitCode,)
>
>         # process the data in the process manager
>         exitcode = reason.value.exitCode         # might be non-numeric
>         result = self.foomgr.processData(exitcode)
>
>
>
> # The main job of the Process Manager is to build the command list and
> # process the results.  It gives us a handy place to encapsulate this
> # logic.
>
> class FooprocManager(object):
>
>     CMD = "/usr/local/foocmd"
>
>     def __init__(self, arg1, arg2, arg3)
>
>         # create a Deferred to fire when we succeed or fail
>         self.d = Deferred()
>
>         # build our command argument list as appropriate for our command
>         self.cmdargs = self.build_cmd_args(arg1, arg2, arg3)
>
>         # define places to store the transport, pid and other things
>         self.ptransport = None
>         self.pid = None
>
>     def build_cmd_args(self, arg1, arg2, arg3):
>
>         # in my projects, this method has become fairly involved as it
> creates
>         # tmp files and builds potentially complicated argument lists.
>
>         arglist = [self.CMD, arg1, arg2, arg3]
>         return arglist
>
>     def run(self):
>
>         # instantiate a protocol connected to this manager
>         pp = FooprocProtocol(self)
>
>         # spawn the process, save the PID
>         self.ptransport = reactor.spawnProcess(pp, self.CMD, self.cmdargs,
> { })
>         self.pid = self.ptransport.pid
>
>     def processData(exitcode):
>
>         # in my projects, this method opens up result files, parses
> results,
>         # moves things around, deletes tmp files, etc.
>
>         # return the result that we ran this subprocess for
>         return result
>
>
> # Instantiate a new process manager and run it this way.
>
> mgr = FooprocManager(args ...)
> d = mgr.run(args ...)
>
>
> =================
> T
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130901/a5611387/attachment-0002.html>

From wasilak at gmail.com  Wed Sep  4 06:04:26 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Wed, 4 Sep 2013 14:04:26 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
Message-ID: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>

Dear list,

I've found such a code example on "Stack Overflow" regarding errbacks:
___________________________

class YourExample(object):
    def your_example(self):
        self.agent = Agent(reactor, pool=pool)
        self.deferred = self.agent.request(
                'GET',
                self.url,
                Headers({'User-Agent': ['Mozilla/5.0']})
            )

        self.deferred.addCallback(self.gotResponse).addErrback(self.gotBadResponse)
def gotBadResponse(self,raised):
    """you might have cleanup code here, or mark the url as bad in the
database, or something similar"""
    pass
__________________________

Normally only Failure object is passed to gotBadResponse() . I would
like to pass full response body to it - is it possible?
Do I have to encapsulate the response body inside Failure object?

Best regards

Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130904/e5858072/attachment-0002.html>

From _ at lvh.io  Wed Sep  4 08:30:27 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 4 Sep 2013 16:30:27 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
Message-ID: <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>

Cześć Maciek :)

In general, you can pass extra arguments when you call addCallback(s) or
addErrback. They will get passed to the callback.

However, as a side note to that code example, do you understand the
difference between

.addCallbacks(cb, eb)

and:

.addCallback(cb).addErrback(eb)


and:

.addErrback(eb).addCallback(cb)

... Also, keep in mind that you only errback when there is an issue setting
up the connection. If the server successfully responds with an error (say,
a 404 Not Found, or something), the callback will be called with the
response object. So, your question doesn't make a lot of sense to me: if
the errback gets called, there's not really a response!

Also, if you want to do scraping with Twisted, consider looking at Scrapy,
a fully-featured web scraper that uses Twisted internally.

pozdrawiam
lvh
​
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130904/10898817/attachment-0002.html>

From goffi at goffi.org  Wed Sep  4 08:43:13 2013
From: goffi at goffi.org (Goffi)
Date: Wed, 04 Sep 2013 16:43:13 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
Message-ID: <52274701.4080207@goffi.org>

G'day,

in the method "elements" of twisted.words.xish.domish.Element, the 
function "generateElementsQNamed" is called event if the uri if None, so 
the uri is checked against None instead of not checked at all.

I think the function "generateElementsNamed" should be called instead, 
it looks like a bug for me.
Can you confirm ?

cheers
Goffi



From poalman at gmail.com  Wed Sep  4 11:48:40 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Wed, 4 Sep 2013 18:48:40 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
Message-ID: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>

I'm still pretty new to twisted and feel I'm slowly getting the hang of it,
enough to realise that this line of code is probably going to block and not
do me any favours, the line is the first line in a resource.Resource
render_POST.

json_request = json.loads(request.content.read())

The resource.Resource is a child of another resource which is passed to
server.Site which is passed to internent.TCPServer.

The problem is I can't work out how I can read the post data from the
request in an async way.

I have a feeling I need to implement a protocol, I'm guessing a
LineReceiver but I can't figure out how I'd tie that in with my current
solution or specifically how the LineReceiver would even read
asynchronously to be honest..

Maybe the read is fine? I need the whole post data to do anything useful I
guess as I can't string to a json decoder that I'm aware of. Just it will
block everything up while I read, which shouldn't be long but I guess I'm
bound to the speed of the person posting.

Thanks all!

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130904/9c28960f/attachment-0002.html>

From glyph at twistedmatrix.com  Wed Sep  4 15:45:13 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 4 Sep 2013 14:45:13 -0700
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
Message-ID: <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>


On Sep 4, 2013, at 10:48 AM, Paul Wiseman <poalman at gmail.com> wrote:

> I'm still pretty new to twisted and feel I'm slowly getting the hang of it, enough to realise that this line of code is probably going to block and not do me any favours, the line is the first line in a resource.Resource render_POST.
> 
> json_request = json.loads(request.content.read())
> 
> The resource.Resource is a child of another resource which is passed to server.Site which is passed to internent.TCPServer.
> 
> The problem is I can't work out how I can read the post data from the request in an async way.
> 
> I have a feeling I need to implement a protocol, I'm guessing a LineReceiver but I can't figure out how I'd tie that in with my current solution or specifically how the LineReceiver would even read asynchronously to be honest..
> 
> Maybe the read is fine? I need the whole post data to do anything useful I guess as I can't string to a json decoder that I'm aware of. Just it will block everything up while I read, which shouldn't be long but I guess I'm bound to the speed of the person posting.
> 
> Thanks all!

If you're parsing a JSON object, you're going to be representing the whole thing in memory at the end of the interaction regardless, even if you parsed it and buffered it in an event-driven way.

That means you need to keep this data relatively small no matter what; if it's arbitrarily large, you are going to start swapping anyway.

So probably, just doing the blocking parse is fine.  You might be able to save a *little* memory by parsing it as it comes in, but you're also going to have to write your own JSON parser, which is probably going to take more programmer time than you will ever save in execution time by this marginal memory reduction :-).  Better would be to spend that effort enforcing stringent resource limits so that you will give up reading before you ever get to the parse in the case where it's big enough to cause a problem.

-glyph




From free4machine at gmail.com  Wed Sep  4 17:54:44 2013
From: free4machine at gmail.com (a qi)
Date: Thu, 5 Sep 2013 07:54:44 +0800
Subject: [Twisted-Python] Is there a 'development mode ' for twisted ?
Message-ID: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>

HI, there

     I'm new to twisted,  after  reading the documents from twisted
websites,  I got some questions:

     1. Is there a 'development mode ' for twisted ?   like django, you can
see your changes without restarting  server.

     2. Can I use django and twisted together?  actually, I want to use
django's ORM   inside twisted server, so that I  can  manipulate  data
easily.  I've try  'sob.py', but I can not figure it out how to use it .
         On the other hand,   django is synchronous,  twisted is
asynchronous, how to use them together if we can ?

     3. How to suppress  logs that I do not need ?   there are many logs in
twisted.log file,  as shown in the follow:

2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
ssh-connection on ClientCommandTransport,client] remote eof
2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
ssh-connection on ClientCommandTransport,client] unhandled request for


Any suggestions would be  appreciated.  Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/71d36d8d/attachment-0002.html>

From wasilak at gmail.com  Thu Sep  5 01:24:06 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 5 Sep 2013 09:24:06 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
Message-ID: <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>

Laurens,

> Cześć

Cześć! :)

Thank you for your answer. I'm explicitly interested in the following
combination:

> .addCallback(cb).addErrback(eb)

If I understand correctly errback "eb" catches errors from both callback
"cb", and from agent.request (agent.request errors pass through default
empty errback that re-raises them).

> Also, if you want to do scraping with Twisted, consider looking at
Scrapy, a fully-featured web scraper that uses Twisted internally.

I'm working on CoAP protocol which runs on top of UDP. My actual code is
request processing (but the problem is the same as in my previous post):

_________________________________________________
def processRequest(self, request):
        (...)
        d = defer.succeed(request)
        d.addCallback(self.processBlock1)
        d.addCallback(self.dispatchRequest)
def dispatchRequest(self, request):
        (...)
        resource = self.endpoint.getResourceFor(request)
        if resource is None:
            response = Message(code=NOT_FOUND, payload='Resource not found!'
)
            self.respond(response, request)
            return
        try:
            d = resource.render(request)
        except iot.error.UnallowedMethod:
            response = Message(code=METHOD_NOT_ALLOWED, payload='Method not
allowed!')
            self.respond(response, request)
            return
        except iot.error.UnsupportedMethod:
            response = Message(code=NOT_IMPLEMENTED, payload='Method not
implemented!')
            self.respond(response, request)
            return
        delayed_ack = reactor.callLater(EMPTY_ACK_DELAY, self.sendEmptyAck,
request)
        d.addCallback(self.respond, request, delayed_ack)
        return d

__________________________________________________

I would like to rewrite it to:

__________________________________________________
def processRequest(self, request):
        (...)
        d = defer.succeed(request)
        d.addCallback(self.processBlock1)
        d.addCallback(self.dispatchRequest
).addErrback(self.handleRequestError)

def dispatchRequest(self, request):
        (...)
        resource = self.endpoint.getResourceFor(request)
        if resource is None:
            raise NoResource()
        try:
            d = resource.render(request)
        except iot.error.UnallowedMethod:      #Explicit re-rise for this
example only
            raise UnallowedMethod()
        except iot.error.UnsupportedMethod:
            raise UnsupportedMethod()
        d.addCallback(self.respond, request)
        return d


def handleRequestErrors(self, failure, request???)
        # handle exceptions, send error response to client

_______________________________________________

I would like to handle Exceptions in handleRequestErrors(). However
handleRequestErrors() has to send a response to the client, so it needs the
request, and I don't know how to pass it from inside dispatchRequest().

I see two possibilities:
    1. Pass request inside Failure object
    2. Leave the original code (process errors inside callback)

Which solution is more elegant?

Best Regards

Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/e3d386c4/attachment-0002.html>

From _ at lvh.io  Thu Sep  5 01:24:04 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 09:24:04 +0200
Subject: [Twisted-Python] Is there a 'development mode ' for twisted ?
In-Reply-To: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>
References: <CAD-AhdnjMD1=Za7ucHbu+oWoTyO99YeoY6rez9PSDCobcN+dqg@mail.gmail.com>
Message-ID: <CAE_Hg6bQKtbV_88yb4mz0NbeTN1fbw3WPGy_dteDEibYx6RsYg@mail.gmail.com>

On Thu, Sep 5, 2013 at 1:54 AM, a qi <free4machine at gmail.com> wrote:

> HI, there
>
>      I'm new to twisted,  after  reading the documents from twisted
> websites,  I got some questions:
>
>      1. Is there a 'development mode ' for twisted ?   like django, you
> can see your changes without restarting  server.
>

Not by default, but using the python project "watchdog" it's not very hard
to set up. Personally, I get it to run my *tests*, not my server, since I
really don't care about one particular piece of behavior my server has
right now which I am manually testing, but I care a lot about all of the
behavior my code has that I can automatically test.


>      2. Can I use django and twisted together?  actually, I want to use
> django's ORM   inside twisted server, so that I  can  manipulate  data
> easily.  I've try  'sob.py', but I can not figure it out how to use it .
>          On the other hand,   django is synchronous,  twisted is
> asynchronous, how to use them together if we can ?
>

That depends what you mean by mixing! FWIW, I hope to give a talk on this
subject at PyCon 2014. You can get the preliminary slides here:

http://blog.lvh.io/TwistedMixing/

as well as code examples:

http://www.github.com/lvh/TwistedMixing

Anyway, using Twisted to serve Django is really easy. Using the Django ORM
inside otherwise Twisted code is a *bit* trickier, since, as you mentioned,
it's blocking. There are two solutions to this, but neither is great:

- You can run calls to the Django ORM with deferToThread so that they block
somewhere else, but IIUC there are plenty of things that aren't really
calls (say, attribute access) that will still result in database IO ->
blocking
- Suppose you could get a green (as in gevent) Django ORM, you can use that
+ geventreactor, but that's gross and hacky

     3. How to suppress  logs that I do not need ?   there are many logs in
> twisted.log file,  as shown in the follow:
>
> 2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
> ssh-connection on ClientCommandTransport,client] remote eof
> 2013-09-05 07:04:07+0800 [SSHChannel session (0) on SSHService
> ssh-connection on ClientCommandTransport,client] unhandled request for
>

You could try filtering the log. That way you still get the loud logs if
you later need them for forensics, but you don't have to look at them right
now.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/39bf01b1/attachment-0002.html>

From _ at lvh.io  Thu Sep  5 01:57:00 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 09:57:00 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
Message-ID: <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>

Hi,


On Thu, Sep 5, 2013 at 9:24 AM, Maciej Wasilak <wasilak at gmail.com> wrote:

> Thank you for your answer. I'm explicitly interested in the following
> combination:
>
> > .addCallback(cb).addErrback(eb)
>
> If I understand correctly errback "eb" catches errors from both callback
> "cb", and from agent.request (agent.request errors pass through default
> empty errback that re-raises them).
>

Yes, that's exactly what it does :) The difference being that with
.addCallbacks(cb, eb), errors in cb would not be caught by eb.

> > Also, if you want to do scraping with Twisted, consider looking at
> Scrapy, a fully-featured web scraper that uses Twisted internally.
>
> I'm working on CoAP protocol which runs on top of UDP. My actual code is
> request processing (but the problem is the same as in my previous post):
>
> _________________________________________________
>  def processRequest(self, request):
>         (...)
>         d = defer.succeed(request)
>         d.addCallback(self.processBlock1)
>         d.addCallback(self.dispatchRequest)
> def dispatchRequest(self, request):
>         (...)
>         resource = self.endpoint.getResourceFor(request)
>         if resource is None:
>             response = Message(code=NOT_FOUND, payload='Resource not
> found!')
>             self.respond(response, request)
>             return
>         try:
>             d = resource.render(request)
>         except iot.error.UnallowedMethod:
>             response = Message(code=METHOD_NOT_ALLOWED, payload='Method
> not allowed!')
>             self.respond(response, request)
>             return
>         except iot.error.UnsupportedMethod:
>             response = Message(code=NOT_IMPLEMENTED, payload='Method not
> implemented!')
>             self.respond(response, request)
>             return
>         delayed_ack = reactor.callLater(EMPTY_ACK_DELAY, self.sendEmptyAck
> , request)
>         d.addCallback(self.respond, request, delayed_ack)
>         return d
>
> __________________________________________________
>
> I would like to rewrite it to:
>
> __________________________________________________
> def processRequest(self, request):
>         (...)
>         d = defer.succeed(request)
>         d.addCallback(self.processBlock1)
>         d.addCallback(self.dispatchRequest
> ).addErrback(self.handleRequestError)
>
> def dispatchRequest(self, request):
>         (...)
>         resource = self.endpoint.getResourceFor(request)
>         if resource is None:
>             raise NoResource()
>         try:
>             d = resource.render(request)
>         except iot.error.UnallowedMethod:      #Explicit re-rise for this
> example only
>             raise UnallowedMethod()
>         except iot.error.UnsupportedMethod:
>             raise UnsupportedMethod()
>         d.addCallback(self.respond, request)
>         return d
>
>
> def handleRequestErrors(self, failure, request???)
>         # handle exceptions, send error response to client
>
> _______________________________________________
>
> I would like to handle Exceptions in handleRequestErrors(). However
> handleRequestErrors() has to send a response to the client, so it needs the
> request, and I don't know how to pass it from inside dispatchRequest().
>
You don't have to do it from in there. You can do .addErrback(handleErrors,
request), since it's all the same request object, right?

>  I see two possibilities:
>     1. Pass request inside Failure object
>     2. Leave the original code (process errors inside callback)
>
Both of those would work, but see above :)

Two random pieces of code review:

1. It seems self.endpoint is a t.w.s.Site object. That's kind of confusing,
since twisted has an "endpoint" concept that's one step removed from a Site
(endpoints connect or listen with factories, a Site is a factory). You
might want to reconsider that name :)
2. It's kind of strange to start with defer.succeed() and then start making
a callback chain IMHO, but it's not wrong, really.

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/9051c3e0/attachment-0002.html>

From poalman at gmail.com  Thu Sep  5 02:50:26 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 5 Sep 2013 09:50:26 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
Message-ID: <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>

Hey,

Thanks for your reply! The json data should never be too long so I'm not
worried about the memory usage, I need the whole json object to start
working anyway realistically - I was more concerned about blocking reading
the data from the network - specifically the request.content.read(), if the
client happens to be sending it very slowly this would block everything up
right? - or would this not be an issue?

Maybe because I have fairly small content bodies I wont have to worry?

Payl


On 4 September 2013 22:45, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Sep 4, 2013, at 10:48 AM, Paul Wiseman <poalman at gmail.com> wrote:
>
> > I'm still pretty new to twisted and feel I'm slowly getting the hang of
> it, enough to realise that this line of code is probably going to block and
> not do me any favours, the line is the first line in a resource.Resource
> render_POST.
> >
> > json_request = json.loads(request.content.read())
> >
> > The resource.Resource is a child of another resource which is passed to
> server.Site which is passed to internent.TCPServer.
> >
> > The problem is I can't work out how I can read the post data from the
> request in an async way.
> >
> > I have a feeling I need to implement a protocol, I'm guessing a
> LineReceiver but I can't figure out how I'd tie that in with my current
> solution or specifically how the LineReceiver would even read
> asynchronously to be honest..
> >
> > Maybe the read is fine? I need the whole post data to do anything useful
> I guess as I can't string to a json decoder that I'm aware of. Just it will
> block everything up while I read, which shouldn't be long but I guess I'm
> bound to the speed of the person posting.
> >
> > Thanks all!
>
> If you're parsing a JSON object, you're going to be representing the whole
> thing in memory at the end of the interaction regardless, even if you
> parsed it and buffered it in an event-driven way.
>
> That means you need to keep this data relatively small no matter what; if
> it's arbitrarily large, you are going to start swapping anyway.
>
> So probably, just doing the blocking parse is fine.  You might be able to
> save a *little* memory by parsing it as it comes in, but you're also going
> to have to write your own JSON parser, which is probably going to take more
> programmer time than you will ever save in execution time by this marginal
> memory reduction :-).  Better would be to spend that effort enforcing
> stringent resource limits so that you will give up reading before you ever
> get to the parse in the case where it's big enough to cause a problem.
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/924eaa60/attachment-0002.html>

From wasilak at gmail.com  Thu Sep  5 04:00:47 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Thu, 5 Sep 2013 12:00:47 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
Message-ID: <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>

Laurens,


> You don't have to do it from in there. You can do
> .addErrback(handleErrors, request), since it's all the same request object,
> right?
>

Aaargh! I see the problem now. I wrote everything as part of the Protocol
class (D&D - Deferreds&Dictionaries), when I should have extracted request
functionality into separate class. Then I can save request body as a class
member between callback and errback. Thanks!!!


> 1. It seems self.endpoint is a t.w.s.Site object. That's kind of
> confusing, since twisted has an "endpoint" concept that's one step removed
> from a Site (endpoints connect or listen with factories, a Site is a
> factory). You might want to reconsider that name :)
>

Endpoint is the official name in draft:
http://tools.ietf.org/html/draft-ietf-core-coap-18  I'll rename it to
coap_endpoint to avoid confusion


> 2. It's kind of strange to start with defer.succeed() and then start
> making a callback chain IMHO, but it's not wrong, really.
>

I've recently understood callback chaining and I really like the idea. I
guess it's this old proverb about having a hammer, and seeing nails
everywhere. I'll try to come up with something better :) .

Case closed - thank you very much!
Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/55dbac1d/attachment-0002.html>

From ralphm at ik.nu  Thu Sep  5 05:24:01 2013
From: ralphm at ik.nu (Ralph Meijer)
Date: Thu, 05 Sep 2013 13:24:01 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
In-Reply-To: <52274701.4080207@goffi.org>
References: <52274701.4080207@goffi.org>
Message-ID: <522869D1.5000705@ik.nu>

On 2013-09-04 16:43, Goffi wrote:
> G'day,
> 
> in the method "elements" of twisted.words.xish.domish.Element, the
> function "generateElementsQNamed" is called event if the uri if None, so
> the uri is checked against None instead of not checked at all.
> 
> I think the function "generateElementsNamed" should be called instead,
> it looks like a bug for me.
> Can you confirm ?

The docstring says you have to either pass in both or not. I would say
your suggestion is a feature request at best.

If we would call generateElementsNamed when only the name parameter is
set, you might get unrelated child elements in a different namespace
than you are looking for. I can imagine cases where this becomes an
attack vector. IMO, you should *always* pass in the fully qualified name
here.

The other permutation that is not currently supported, where you do pass
in the URI but not the local name, seems more useful to me.

-- 
ralphm



From exarkun at twistedmatrix.com  Thu Sep  5 05:24:50 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 11:24:50 -0000
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
 <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
Message-ID: <20130905112450.26068.1055468456.divmod.xquotient.376@top>

On 08:50 am, poalman at gmail.com wrote:
>Hey,
>
>Thanks for your reply! The json data should never be too long so I'm 
>not
>worried about the memory usage, I need the whole json object to start
>working anyway realistically - I was more concerned about blocking 
>reading
>the data from the network - specifically the request.content.read(), if 
>the
>client happens to be sending it very slowly this would block everything 
>up
>right? - or would this not be an issue?
>
>Maybe because I have fairly small content bodies I wont have to worry?

Your resource isn't asked to render a response until the request has 
been fully received.  Request.content is a StringIO (if it is small) or 
a temporary file (if it is larger).  Reading from the temporary file 
blocks for a little bit since disks are slow but unless your system is 
seriously loaded you can usually disregard this.

Jean-Paul



From _ at lvh.io  Thu Sep  5 06:37:37 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 5 Sep 2013 14:37:37 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
Message-ID: <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>

On Thu, Sep 5, 2013 at 12:00 PM, Maciej Wasilak <wasilak at gmail.com> wrote:

> Laurens,
>
>
>>  You don't have to do it from in there. You can do
>> .addErrback(handleErrors, request), since it's all the same request object,
>> right?
>>
>
> Aaargh! I see the problem now. I wrote everything as part of the Protocol
> class (D&D - Deferreds&Dictionaries), when I should have extracted request
> functionality into separate class. Then I can save request body as a class
> member between callback and errback. Thanks!!!
>

Well, yes, you should, but still keep in mind that you can actually just
pass the request like so:

.addErrback(handleErrors, request)

You don't really have to save the request itself anywhere as an attribute.


>>
>>  1. It seems self.endpoint is a t.w.s.Site object. That's kind of
>> confusing, since twisted has an "endpoint" concept that's one step removed
>> from a Site (endpoints connect or listen with factories, a Site is a
>> factory). You might want to reconsider that name :)
>>
>
> Endpoint is the official name in draft:
> http://tools.ietf.org/html/draft-ietf-core-coap-18  I'll rename it to
> coap_endpoint to avoid confusion
>
>
>> 2. It's kind of strange to start with defer.succeed() and then start
>> making a callback chain IMHO, but it's not wrong, really.
>>
>
> I've recently understood callback chaining and I really like the idea. I
> guess it's this old proverb about having a hammer, and seeing nails
> everywhere. I'll try to come up with something better :) .
>

No problem.


>  Case closed - thank you very much!
>

Glad to have helped.


> Regards
> Maciek
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/1f9e3989/attachment-0002.html>

From poalman at gmail.com  Thu Sep  5 07:23:12 2013
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 5 Sep 2013 14:23:12 +0100
Subject: [Twisted-Python] Asynchronously reading posted data
In-Reply-To: <20130905112450.26068.1055468456.divmod.xquotient.376@top>
References: <CACgdh2ju5A5yYR7CNhbF+D9zZVxetHVeLwtf9mowBWHcnovuhA@mail.gmail.com>
 <21D6AB74-60E0-45C5-A5C6-484C91DE0480@twistedmatrix.com>
 <CACgdh2hh9TdZSTBrYF=xJwdoaspBVwmLQDL7ZrTP-+t-nQV4RA@mail.gmail.com>
 <20130905112450.26068.1055468456.divmod.xquotient.376@top>
Message-ID: <CACgdh2i8nYrh+pO00watQkvanyQZ2nYj58soXLsWJyxjV=98Dw@mail.gmail.com>

Ah awesome that clears it up, thanks! I've never had to deal with HTTP
requests with content bodies before.

I presumed that the .read() would be pulling bytes from the network. I
presumed wrong :)

Thanks!

Paul


On 5 September 2013 12:24, <exarkun at twistedmatrix.com> wrote:

> On 08:50 am, poalman at gmail.com wrote:
>
>> Hey,
>>
>> Thanks for your reply! The json data should never be too long so I'm not
>> worried about the memory usage, I need the whole json object to start
>> working anyway realistically - I was more concerned about blocking reading
>> the data from the network - specifically the request.content.read(), if
>> the
>> client happens to be sending it very slowly this would block everything up
>> right? - or would this not be an issue?
>>
>> Maybe because I have fairly small content bodies I wont have to worry?
>>
>
> Your resource isn't asked to render a response until the request has been
> fully received.  Request.content is a StringIO (if it is small) or a
> temporary file (if it is larger).  Reading from the temporary file blocks
> for a little bit since disks are slow but unless your system is seriously
> loaded you can usually disregard this.
>
> Jean-Paul
>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/cf4a0ff6/attachment-0002.html>

From peter at peterryan.net  Thu Sep  5 11:49:57 2013
From: peter at peterryan.net (Peter Ryan)
Date: Thu, 5 Sep 2013 12:49:57 -0500
Subject: [Twisted-Python] ftpclient connection lost callback
Message-ID: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>

I am writing a simple ftp client which I am trying to dispose of. Right now
I send a quit command:

(the ftp_client reference is a FTPClient built with a ClientCreator)

deferred = ftp_client.quit()

And I register a callback:

def quitSent(response):
   print "quit acknowledged...connected?", ftp_client.transport.connected

deferred.addCallback(quitSent)

If I invoke the above the connection is printed as connected.

However if I schedule a callback to check the status later:

def status():
   print "quit acknowledged...connected?", ftp_client.transport.connected

reactor.callLater(1, self.status)

If I schedule a callback for a second later the transport is not connected.
I've searched quite a bit but I cannot determine a way to register a
callback for when the TCP transport is actually disconnected. Can anyone
offer some insight? I'd like to know explicitly when the client is closed.

Thanks,

Peter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/2e1a483b/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Sep  5 12:35:42 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 18:35:42 -0000
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
Message-ID: <20130905183542.26068.1581086488.divmod.xquotient.415@top>

On 05:49 pm, peter at peterryan.net wrote:
>I am writing a simple ftp client which I am trying to dispose of. Right 
>now
>I send a quit command:
>
>(the ftp_client reference is a FTPClient built with a ClientCreator)
>
>deferred = ftp_client.quit()
>
>And I register a callback:
>
>def quitSent(response):
>   print "quit acknowledged...connected?", 
>ftp_client.transport.connected
>
>deferred.addCallback(quitSent)
>
>If I invoke the above the connection is printed as connected.

There is no documented `connected` attribute of transports.  So who 
knows what this is telling you. :)

However, the way you learn when a protocol's transport has disconnected 
is to implement the `connectionLost` method on the protocol.  It is 
called when the transport disconnects.

Jean-Paul
>However if I schedule a callback to check the status later:
>
>def status():
>   print "quit acknowledged...connected?", 
>ftp_client.transport.connected
>
>reactor.callLater(1, self.status)
>
>If I schedule a callback for a second later the transport is not 
>connected.
>I've searched quite a bit but I cannot determine a way to register a
>callback for when the TCP transport is actually disconnected. Can 
>anyone
>offer some insight? I'd like to know explicitly when the client is 
>closed.
>
>Thanks,
>
>Peter



From peter at peterryan.net  Thu Sep  5 12:48:54 2013
From: peter at peterryan.net (Peter Ryan)
Date: Thu, 5 Sep 2013 13:48:54 -0500
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <20130905183542.26068.1581086488.divmod.xquotient.415@top>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
 <20130905183542.26068.1581086488.divmod.xquotient.415@top>
Message-ID: <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>

Thanks.

So is the idiomatic approach for this with something like the FTPClient to
subclass it and override connectionLost? FTPClientBasic clears up queued
commands when this happens (which I assume I still want it to do).

To me it seems a little overbearing to have to subclass the ftpclient just
to get a tcp connection lost event (which seem like an event most users
would be interested in).






On Thu, Sep 5, 2013 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:

> On 05:49 pm, peter at peterryan.net wrote:
>
>> I am writing a simple ftp client which I am trying to dispose of. Right
>> now
>> I send a quit command:
>>
>> (the ftp_client reference is a FTPClient built with a ClientCreator)
>>
>> deferred = ftp_client.quit()
>>
>> And I register a callback:
>>
>> def quitSent(response):
>>   print "quit acknowledged...connected?", ftp_client.transport.connected
>>
>> deferred.addCallback(quitSent)
>>
>> If I invoke the above the connection is printed as connected.
>>
>
> There is no documented `connected` attribute of transports.  So who knows
> what this is telling you. :)
>
> However, the way you learn when a protocol's transport has disconnected is
> to implement the `connectionLost` method on the protocol.  It is called
> when the transport disconnects.
>
> Jean-Paul
>
>  However if I schedule a callback to check the status later:
>>
>> def status():
>>   print "quit acknowledged...connected?", ftp_client.transport.connected
>>
>> reactor.callLater(1, self.status)
>>
>> If I schedule a callback for a second later the transport is not
>> connected.
>> I've searched quite a bit but I cannot determine a way to register a
>> callback for when the TCP transport is actually disconnected. Can anyone
>> offer some insight? I'd like to know explicitly when the client is closed.
>>
>> Thanks,
>>
>> Peter
>>
>
> ______________________________**_________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
> http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130905/31503574/attachment-0002.html>

From exarkun at twistedmatrix.com  Thu Sep  5 12:54:43 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 05 Sep 2013 18:54:43 -0000
Subject: [Twisted-Python] ftpclient connection lost callback
In-Reply-To: <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>
References: <CALop9kQ0JhW-1CbiY0gBJt_2P9TjN_8htrkrvHaBUV0cGjEKsA@mail.gmail.com>
 <20130905183542.26068.1581086488.divmod.xquotient.415@top>
 <CALop9kSLdhCknf-ncLOwvsmLbU2-6R6PXBFLDtTOei10SgAqvA@mail.gmail.com>
Message-ID: <20130905185443.26068.350543936.divmod.xquotient.418@top>

On 06:48 pm, peter at peterryan.net wrote:
>Thanks.
>
>So is the idiomatic approach for this with something like the FTPClient 
>to
>subclass it and override connectionLost? FTPClientBasic clears up 
>queued
>commands when this happens (which I assume I still want it to do).

Is it idiomatic?  I don't know.  It accomplishes your goal.  If you 
like, propose a better API (file a ticket, attach a patch, etc:

http://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs#CodeContributions

)

Jean-Paul
>To me it seems a little overbearing to have to subclass the ftpclient 
>just
>to get a tcp connection lost event (which seem like an event most users
>would be interested in).
>
>
>
>
>
>
>On Thu, Sep 5, 2013 at 1:35 PM, <exarkun at twistedmatrix.com> wrote:
>>On 05:49 pm, peter at peterryan.net wrote:
>>>I am writing a simple ftp client which I am trying to dispose of. 
>>>Right
>>>now
>>>I send a quit command:
>>>
>>>(the ftp_client reference is a FTPClient built with a ClientCreator)
>>>
>>>deferred = ftp_client.quit()
>>>
>>>And I register a callback:
>>>
>>>def quitSent(response):
>>>   print "quit acknowledged...connected?", 
>>>ftp_client.transport.connected
>>>
>>>deferred.addCallback(quitSent)
>>>
>>>If I invoke the above the connection is printed as connected.
>>
>>There is no documented `connected` attribute of transports.  So who 
>>knows
>>what this is telling you. :)
>>
>>However, the way you learn when a protocol's transport has 
>>disconnected is
>>to implement the `connectionLost` method on the protocol.  It is 
>>called
>>when the transport disconnects.
>>
>>Jean-Paul
>>
>>  However if I schedule a callback to check the status later:
>>>
>>>def status():
>>>   print "quit acknowledged...connected?", 
>>>ftp_client.transport.connected
>>>
>>>reactor.callLater(1, self.status)
>>>
>>>If I schedule a callback for a second later the transport is not
>>>connected.
>>>I've searched quite a bit but I cannot determine a way to register a
>>>callback for when the TCP transport is actually disconnected. Can 
>>>anyone
>>>offer some insight? I'd like to know explicitly when the client is 
>>>closed.
>>>
>>>Thanks,
>>>
>>>Peter
>>
>>______________________________**_________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.**com <Twisted-Python at twistedmatrix.com>
>>http://twistedmatrix.com/cgi-**bin/mailman/listinfo/twisted-**python<http://twistedmatrix.com 
>>/cgi-bin/mailman/listinfo/twisted-python>
>



From wasilak at gmail.com  Fri Sep  6 14:06:01 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 6 Sep 2013 22:06:01 +0200
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
 <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
Message-ID: <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>

Hello,

just one more question:

Well, yes, you should, but still keep in mind that you can actually just
> pass the request like so:
>
> .addErrback(handleErrors, request)
>
> You don't really have to save the request itself anywhere as an attribute.
>

if I understand correctly, when I put this instruction into my callback,
then the errback will catch errors only from the callback, and not from
agent.request, right? Such code seems hard to debug. Is this the standard
procedure in Twisted to add callbacks/errbacks inside other callbacks?
Best Regards
Maciek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130906/1eaa1fd3/attachment-0002.html>

From goffi at goffi.org  Fri Sep  6 14:42:14 2013
From: goffi at goffi.org (Goffi)
Date: Fri, 06 Sep 2013 22:42:14 +0200
Subject: [Twisted-Python] Can't check elements without uri in
	twisted.words.xish.domish.Element
In-Reply-To: <522869D1.5000705@ik.nu>
References: <52274701.4080207@goffi.org> <522869D1.5000705@ik.nu>
Message-ID: <522A3E26.4020300@goffi.org>

Ok thanks for the precisions.

On 05/09/2013 13:24, Ralph Meijer wrote:
> On 2013-09-04 16:43, Goffi wrote:
>> G'day,
>>
>> in the method "elements" of twisted.words.xish.domish.Element, the
>> function "generateElementsQNamed" is called event if the uri if None, so
>> the uri is checked against None instead of not checked at all.
>>
>> I think the function "generateElementsNamed" should be called instead,
>> it looks like a bug for me.
>> Can you confirm ?
>
> The docstring says you have to either pass in both or not. I would say
> your suggestion is a feature request at best.
>
> If we would call generateElementsNamed when only the name parameter is
> set, you might get unrelated child elements in a different namespace
> than you are looking for. I can imagine cases where this becomes an
> attack vector. IMO, you should *always* pass in the fully qualified name
> here.
>
> The other permutation that is not currently supported, where you do pass
> in the URI but not the local name, seems more useful to me.
>




From p.mayers at imperial.ac.uk  Fri Sep  6 15:11:03 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 06 Sep 2013 22:11:03 +0100
Subject: [Twisted-Python] Passing additional arguments to errback
In-Reply-To: <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>
References: <CAFUtXGz68qhED4DsCA_zfg-sqi2VpnMfKPOG5g8LjGHk2xxCsw@mail.gmail.com>
 <CAE_Hg6aTtn7nSRD6PgkCN=tiGZNUUq3S-w+z_NAz45YytwawEQ@mail.gmail.com>
 <CAFUtXGz1GrbfopsYLeQyRfFfNZdSwyteuUhq35oVN7-QAa7zxQ@mail.gmail.com>
 <CAE_Hg6Z4pYBpFnBJmG_VCLd8Bph-Xv_DKEt5NZpCJuTkE8g3xg@mail.gmail.com>
 <CAFUtXGxfC0wX1RjR4zhLamFtjm64gej5O6SOgknX9E16jPSCTw@mail.gmail.com>
 <CAE_Hg6bApUWm=-WXBjnT4WxSd=HRwUg_2dFoDHkgm+wVLVyWHw@mail.gmail.com>
 <CAFUtXGy69-uTpOpnm0UzoRzzdcuV6H30S0OpVeZOx1wskH18Gw@mail.gmail.com>
Message-ID: <6ccd5318-088b-4f6d-8abc-67c7fd8a3759@email.android.com>

Maciej Wasilak <wasilak at gmail.com> wrote:
>Hello,
>
>just one more question:
>
>Well, yes, you should, but still keep in mind that you can actually
>just
>> pass the request like so:
>>
>> .addErrback(handleErrors, request)
>>
>> You don't really have to save the request itself anywhere as an
>attribute.
>>
>
>if I understand correctly, when I put this instruction into my
>callback,
>then the errback will catch errors only from the callback, and not from
>agent.request, right? Such code seems hard to debug. Is this the
>standard
>procedure in Twisted to add callbacks/errbacks inside other callbacks?
>Best Regards
>Maciek
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

No it'll catch errors from anything previous in the chain - either the agent call or the callback. If you read the docs carefully this should be clear.
-- 
Sent from my phone with, please excuse brevity and typos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130906/189093ae/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep  8 06:07:47 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 08 Sep 2013 12:07:47 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1378642067.88.4114588285963836769@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130908/b723cc99/attachment-0002.html>

From zooko at leastauthority.com  Wed Sep 11 11:48:08 2013
From: zooko at leastauthority.com (Zooko Wilcox-OHearn)
Date: Wed, 11 Sep 2013 17:48:08 +0000
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
 <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
Message-ID: <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>

Hello, Harry!

I just noticed this thread.

I opened a ticket for this a while back:

https://twistedmatrix.com/trac/ticket/5203# FilePath.children() should
return FilePath objects with unicodes in them instead of strs

There is some discussion on that ticket.

For what it is worth, I agree with Itamar that porting to Python3
shouldn't be combined with changing the functionality or API, but I
also agree with Harry (at least what Harry originally said) that
FilePath objects should not carry around a "path" that is just bytes
and doesn't specify what encoding those bytes are in.

I know this is a subtle topic, in the sense that I can see the
argument on the other side, too, and I don't think either approach can
satisfy all users, but I still think it is a better idea to require
unicode-only, and so I'd like to try to explain why a little bit,
below, in addition to the discussion that is recorded on #5203.

Here's my basic argument: a sequence of bytes without an accompanying
encoding is an *insufficiently typed* thing. That is, there is no way
to use it safely without first restoring a type, and that being the
*correct* type. The traditional way to handle pathnames in Linux has
been to let them be under-typed, and then restore the type
heuristically. This traditionally worked most of the time, because the
most common thing you would do with a sequence of bytes like that is
plug it back into the same filesystem from which it came. However, I
make two claims:

1. In the modern world, it is very common to send it over the network
instead of to plug it back into the same filesystem from which it
came, and

2. there's not very much need for this "forget what type it was, guess
the type later, and guess correctly" hack! We can instead *require*
the user to supply a type with the bytestring originally, and then
remember the type that the user supplied. This breaks only a few use
cases that are probably very rare, and in fact might be unfixable
anyway, but it prevents failures which are very common, which is what
happens when you guess the wrong type during the restore. This is what
we've done in Tahoe-LAFS, and we've had few or no complaints from
users about it. Certainly if there were any, it was in the early days,
of Tahoe-LAFS, around 5 years ago, when ill-typed Linux filesystems
hadn't quite finished dying out (i.e. the bytes on there are actually
encoded in iso8859, but sys.getfilesystemencoding() returns 'utf-8').

We wrote unit tests and did careful code-review when we converted
Tahoe-LAFS from bytes to unicode-only a few years ago, and so I'd be
happy to share the knowledge I gleaned from that experience.

Regards,

Zooko



From terry at jon.es  Wed Sep 11 18:24:13 2013
From: terry at jon.es (Terry Jones)
Date: Thu, 12 Sep 2013 01:24:13 +0100
Subject: [Twisted-Python] Deferreds / promises as first-class objects for
	function calls
Message-ID: <CACqnu4WJDGKj2EnpE1FZo+uJMpzZuA=R8BVRGfW42hz8J1OwRw@mail.gmail.com>

I just wrote a blog post that people who like thinking about deferreds
might find interesting. Somehow it took me 7 years to one day look at
deferreds in this way:
http://blogs.fluidinfo.com/terry/2013/09/12/promises-are-first-class-objects-for-function-calls/

(With apologies for mainly describing things in terms of promises instead
of deferreds.)

Terry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130912/d70e52a7/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 15 00:05:15 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 15 Sep 2013 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1379225115.13.1429973170239958454@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130915/a0031887/attachment-0002.html>

From glyph at twistedmatrix.com  Sun Sep 15 14:48:25 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 15 Sep 2013 13:48:25 -0700
Subject: [Twisted-Python] Python 3: bytes vs. str in
	twisted.python.filepath
In-Reply-To: <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>
References: <CABjbJ3z22c68k=ziaDkPHBMwqc7=3LdqF0TPH8mR7ZGCpZoLaw@mail.gmail.com>
 <51E2968C.9040001@itamarst.org>
 <CABjbJ3y0gHUD3Qz8FCQHHK7_eRhWnd6rfxFHQn8OvqYDH2y_ZA@mail.gmail.com>
 <3552258B-A1F1-4969-A504-3E61DC8B8DF8@twistedmatrix.com>
 <CAM_a8JwhkJTcX9SwsVQQXnwUWUPGObQNEjg3=ADVRU8j3_rtug@mail.gmail.com>
Message-ID: <6C215A62-0E62-44C0-BBFE-0EC4C50DEB67@twistedmatrix.com>

On Sep 11, 2013, at 10:48 AM, Zooko Wilcox-OHearn <zooko at leastauthority.com> wrote:

> We can instead *require*
> the user to supply a type with the bytestring originally, and then
> remember the type that the user supplied. This breaks only a few use
> cases that are probably very rare, and in fact might be unfixable
> anyway

Just to be specific about this, the use-case that it breaks is the notion that you have a USB key formatted on a Linux machine in KOI-8 and you plug it into a system where the host encoding is Shift-JIS.  You can then have a path which is partially in one encoding and partially in another.

The problem with the "bytes-with-encoding" idea is that it doesn't apply to paths, it applies to path segments - which is why FilePath is (well, ought to be) a data *structure*, and not just some methods around existing data (a string).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130915/0abaa9aa/attachment-0002.html>

From wuzhigaoem at 163.com  Tue Sep 17 01:53:40 2013
From: wuzhigaoem at 163.com (=?GBK?B?zuLWvrjf?=)
Date: Tue, 17 Sep 2013 15:53:40 +0800 (CST)
Subject: [Twisted-Python] run python application with twistd -y ifinger.tac,
 error occurs. please help to check
Message-ID: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>







Experts:
您好！

my ifinger.tac file content like following:
fromtwisted.applicationimportinternet, servicefromtwisted.internetimportprotocol, reactor, deferfromtwisted.protocolsimportbasicclassFingerProtocol(basic.LineReceiver):
    deflineReceived(self, user):
        d = self.factory.getUser(user)

        defonError(err):
            return'Internal error in server'd.addErrback(onError)

        defwriteResponse(message):
            self.transport.write(message + '\r\n')
            self.transport.loseConnection()
        d.addCallback(writeResponse)

classFingerFactory(protocol.ServerFactory):
    protocol = FingerProtocoldef__init__(self, **kwargs):
        self.users = kwargsdefgetUser(self, user):
        returndefer.succeed(self.users.get(user, "No such user"))

application = service.Application('finger', uid=1, gid=1)
factory = FingerFactory(moshez='Happy and well')
internet.TCPServer(79, factory).setServiceParent(service.IServiceCollection(application))                   


when running this script with command-line : twistd -y ifinger.tac, error occurs like :


Traceback (most recent call last):
    File "/usr/local/bin/twistd", line 7, in <module>
        import _preamble
ImportError: No module named '_preamble'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):
    File "/usr/local/bin/twistd", line 9, in <module>
        sys.exc_clear()
AttributeError: 'module' object has no attribute 'exc_clear'


And i run python3 in interactive mode to check if exc_clear method is defined in sys,  command line like :
>>>import sys
>>>sys.__dict__["exc_clear"]
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
        sys.exc_clear()
KeyError: 'exc_clear'
>>>


Is there any configuration i should do ? please help to give me an answer.


 谢谢！！
----------------------------
姓名 : 吴志高/Charles
电话 : (+086)13410859946

邮箱 : wuzhigaoem at 163.com
================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130917/0596cad1/attachment-0002.html>

From _ at lvh.io  Tue Sep 17 03:06:32 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 17 Sep 2013 11:06:32 +0200
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
Message-ID: <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>

Hi Charles,


Yes, twistd doesn't appear to work on py3k. Not being able to import
_preamble is normal (once Twisted has been installed), but _preamble does
assume sys.exc_clear exists, which isn't true on 3.x.

I couldn't find any ticket on this. Perhaps you should file it (and maybe
fix it!) :)

It's my understanding that the new except clause semantics are expected to
take care of this problem.

Can someone comment as to why this was put there in the first place, and,
specifically, why it can't just be "pass"? Is there some logging system
that looks at the current exception or something when twistd (or some other
script) starts?

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130917/432bc405/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Sep 17 06:14:08 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 12:14:08 -0000
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
Message-ID: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>

On 09:06 am, _ at lvh.io wrote:
>Hi Charles,
>
>
>Yes, twistd doesn't appear to work on py3k. Not being able to import
>_preamble is normal (once Twisted has been installed), but _preamble 
>does
>assume sys.exc_clear exists, which isn't true on 3.x.
>
>I couldn't find any ticket on this. Perhaps you should file it (and 
>maybe
>fix it!) :)

I think there are still many unported dependencies of `twistd` to port 
first.
>It's my understanding that the new except clause semantics are expected 
>to
>take care of this problem.
>
>Can someone comment as to why this was put there in the first place, 
>and,
>specifically, why it can't just be "pass"? Is there some logging system
>that looks at the current exception or something when twistd (or some 
>other
>script) starts?

Both `log.err()´ and `Failure()´ look at the current exception.  If we 
don't `sys.clear_exc()´ here then the first piece of code that tries to 
use either of those may get a surprising result.  The current exception 
state can last a long time so this surprise can hide for a remarkably 
long time before showing up.

The exception state also holds references to lots of extra things on the 
stack which is undesirable even if there are no other side-effects.

Jean-Paul



From m-lists at the-moon.net  Tue Sep 17 08:29:13 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 15:29:13 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
Message-ID: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>

Hello everyone,

I'm giving a talk about Twisted and Twisted Names at PyConUK this
year. The schedule hasn't been fixed yet, but it looks like it'll be
this Friday 20 September at 1530.
If you're going to PyConUK I'd welcome your support, especially with
fielding any tricky audience questions. ;-)
 * http://pyconuk.net/Schedule

I'm also hoping to organise a Twisted Sprint, so if you're still
around on Monday come and find me.
 * http://pyconuk.net/Sprints

-RichardW.

PS. I'd love to merge https://tm.tl/5675 before the conference, so if
you're familiar with the DNS RFCs, I'd really appreciate a code
review. I'm rwall on #twisted-dev and #twisted if you want to discuss
it



From p.mayers at imperial.ac.uk  Tue Sep 17 09:34:40 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 16:34:40 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
Message-ID: <52387690.5070304@imperial.ac.uk>

On 17/09/13 15:29, Richard Wall wrote:

> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
> you're familiar with the DNS RFCs, I'd really appreciate a code
> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
> it

Deep breath... I'll give this a go.

p.s. the "How to review" docs on Trac are AWFUL if you've never done one 
before. It assumes a *hell* of a lot of prior knowledge. There needs to 
be a single page checklist for first-time reviewers.



From exarkun at twistedmatrix.com  Tue Sep 17 10:05:27 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 16:05:27 -0000
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <52387690.5070304@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
Message-ID: <20130917160527.26068.1762336748.divmod.xquotient.2373@top>

On 03:34 pm, p.mayers at imperial.ac.uk wrote:
>On 17/09/13 15:29, Richard Wall wrote:
>>PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>>you're familiar with the DNS RFCs, I'd really appreciate a code
>>review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>>it
>
>Deep breath... I'll give this a go.
>
>p.s. the "How to review" docs on Trac are AWFUL if you've never done 
>one before. It assumes a *hell* of a lot of prior knowledge. There 
>needs to be a single page checklist for first-time reviewers.

This is in progress.

Jean-Paul
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From _ at lvh.io  Tue Sep 17 10:10:23 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Tue, 17 Sep 2013 18:10:23 +0200
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
Message-ID: <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>

On Tue, Sep 17, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:

> I think there are still many unported dependencies of `twistd` to port
> first.
>

Sure, but every little bit helps, right? :)


>  Can someone comment as to why this was put there in the first place, and,
>> specifically, why it can't just be "pass"? Is there some logging system
>> that looks at the current exception or something when twistd (or some
>> other
>> script) starts?
>>
>
> Both `log.err()´ and `Failure()´ look at the current exception.  If we
> don't `sys.clear_exc()´ here then the first piece of code that tries to use
> either of those may get a surprising result.  The current exception state
> can last a long time so this surprise can hide for a remarkably long time
> before showing up.
>

Okay, cool. From what I understand:

1. _preamble is just a hack to get bin/whatever to work right without
installing (i.e. from a checkout)
2. (not too sure about this) in py3k, except statements do the clearing bit
already: www.python.org/dev/peps/pep-3110/#semantic-changes

So, does that mean we can do a try: ... ; except AttributeError and be done
with it?

The exception state also holds references to lots of extra things on the
> stack which is undesirable even if there are no other side-effects.
>
> Jean-Paul
>

lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130917/4a28bb9f/attachment-0002.html>

From hs at ox.cx  Tue Sep 17 10:12:01 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Tue, 17 Sep 2013 18:12:01 +0200
Subject: [Twisted-Python] =?windows-1252?q?=5BANN=5D_structlog_=96_bring_c?=
 =?windows-1252?q?ontext_=26_structure_to_your_logs_without_boilerplate?=
Message-ID: <30617339-A558-44C6-8AEF-19870948A9D5@ox.cx>

Hi folks,

today, I’ve release the 0.2.0 of my structlog project whose ambition is no less than changing the way we log in Python. :)

And since it sports dedicated support for Twisted <http://www.structlog.org/en/latest/twisted.html> (but is not limited to it, it wraps *any* logger), I’d like to introduce you to it.

Basically, its premise is that events happen in a context and you want to log out both effortlessly.  Nowadays logs are usually consumed by parsers anyway, so regular, easily parsable logs are a good thing™.

This is a nice example of a Twisted application showing off a bit what structlog is capable of:

import sys
import uuid

import structlog
import twisted

from twisted.internet import protocol, reactor

logger = structlog.getLogger()


class Counter(object):
    i = 0

    def inc(self):
        self.i += 1

    def __repr__(self):
        return str(self.i)


class Echo(protocol.Protocol):
    def connectionMade(self):
        self._counter = Counter()
        self._log = logger.new(
            connection_id=str(uuid.uuid4()),
            peer=self.transport.getPeer().host,
            count=self._counter,
        )

    def dataReceived(self, data):
        self._counter.inc()
        log = self._log.bind(data=data)
        self.transport.write(data)
        log.msg('echoed data!')


if __name__ == "__main__":
    structlog.configure(
        processors=[structlog.twisted.EventAdapter()],
        logger_factory=structlog.twisted.LoggerFactory(),
    )
    twisted.python.log.startLogging(sys.stderr)
    reactor.listenTCP(1234, protocol.Factory.forProtocol(Echo))
    reactor.run()


It will give you an output like:

2013-09-17 17:40:23+0200 [-] Log opened.
2013-09-17 17:40:23+0200 [-] Factory starting on 1234
2013-09-17 17:40:23+0200 [-] Starting factory <twisted.internet.protocol.Factory instance at 0x108301488>
2013-09-17 17:40:28+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=1 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='foo\n' event='echoed data!'
2013-09-17 17:40:33+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=2 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='bar\n' event='echoed data!'
2013-09-17 17:40:44+0200 [Echo,1,127.0.0.1] peer='127.0.0.1' count=1 connection_id='3118f673-482b-471f-a206-e8f97f9a9c2c' data='qux\n' event='echoed data!'
2013-09-17 17:40:53+0200 [Echo,0,127.0.0.1] peer='127.0.0.1' count=3 connection_id='4e2ee31c-b3ff-478e-ae06-7b1a492fce45' data='twisted prevails\n' event='echoed data!'

(you can find this and more examples at <http://www.structlog.org/en/latest/examples.html>)

In short:

- It allows you to build context by binding values to loggers. This context is just a dictionary. Once you log an event out (again, arbitrary number of key/value pairs), it gets merged with the context, processed by configurable processor chain and passed to your original logger.
- Your loggers are immutable (by default infidels can use thread local storage) and you’ll get a new one on each binding. Immutable local data is awesome.
- You can define processors that can mangle, filter, and format your log entries.
- Configure once, then just call getLogger (which is a Twisted-friendly alias for get_logger) in regular code.
- Of course there is a JSON renderer built right in – just tell log stash about it and be merry.

*Please* have a look at <http://www.structlog.org/en/0.2.0-0/getting-started.html>, I don’t want to reproduce it here. :)

Credit where credit is due: I picked up the idea of bound loggers from David Reid’s work on otter <https://github.com/rackerlabs/otter/tree/master/otter/log> which in turn was based on ideas by JP (I’ve been told).

You can find everything you need to know at http://www.structlog.org/ – I’d be happy about any constructive feedback and even more so about contributions!

Cheers,
Hynek
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130917/6641f382/attachment.sig>

From m-lists at the-moon.net  Tue Sep 17 10:18:04 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 17:18:04 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
	PyConUK 2013]
Message-ID: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>

On 17 September 2013 16:34, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
> On 17/09/13 15:29, Richard Wall wrote:
>
>> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>> you're familiar with the DNS RFCs, I'd really appreciate a code
>> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>> it
>
>
> Deep breath... I'll give this a go.

Thanks Phil,

I'd seen your previous work in this area and was hoping you'd reply. :)

You might be interested to read the reviews of
https://twistedmatrix.com/trac/ticket/5675 where we introduced support
for parsing of  OPT pseudo records.

Meanwhile, I'll see if I can help exarkun with the code review checklist.

Thanks again and I look forward to your feedback.

-RichardW.



From m-lists at the-moon.net  Tue Sep 17 10:22:49 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 17 Sep 2013 17:22:49 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
	PyConUK 2013]
Message-ID: <CABefbUrfvsP6Jzrf-dC3ttfXXdAWXX3zrtndpLqU2Mn5z+xBZg@mail.gmail.com>

On 17 September 2013 17:18, Richard Wall <m-lists at the-moon.net> wrote:
> You might be interested to read the reviews of
> https://twistedmatrix.com/trac/ticket/5675 where we introduced support
> for parsing of  OPT pseudo records.

Sorry, wrong link.

This is the OPT record ticket - https://twistedmatrix.com/trac/ticket/5668

And this is the EDNS plan:
 * https://twistedmatrix.com/trac/wiki/EDNS0

-RichardW.



From p.mayers at imperial.ac.uk  Tue Sep 17 11:36:23 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 18:36:23 +0100
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
 PyConUK 2013]
In-Reply-To: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
References: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
Message-ID: <52389317.1090809@imperial.ac.uk>

On 17/09/13 17:18, Richard Wall wrote:
> On 17 September 2013 16:34, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>> On 17/09/13 15:29, Richard Wall wrote:
>>
>>> PS. I'd love to merge https://tm.tl/5675 before the conference, so if
>>> you're familiar with the DNS RFCs, I'd really appreciate a code
>>> review. I'm rwall on #twisted-dev and #twisted if you want to discuss
>>> it
>>
>>
>> Deep breath... I'll give this a go.
>
> Thanks Phil,
>
> I'd seen your previous work in this area and was hoping you'd reply. :)
>
> You might be interested to read the reviews of
> https://twistedmatrix.com/trac/ticket/5675 where we introduced support
> for parsing of  OPT pseudo records.

Good idea, that was helpful.

I've given it a go; if anyone has a review of my review... ;o)





From p.mayers at imperial.ac.uk  Tue Sep 17 11:43:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 17 Sep 2013 18:43:51 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
Message-ID: <523894D7.10008@imperial.ac.uk>

On 17/09/13 17:05, exarkun at twistedmatrix.com wrote:

>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>> one before. It assumes a *hell* of a lot of prior knowledge. There
>> needs to be a single page checklist for first-time reviewers.
>
> This is in progress.

Awesome; would it be useful for me to write up what I did, or do you 
have enough source material?

FWIW I found virtualenv & the github mirror to be incredibly useful for 
the task; in particular it meant getting latest & greatest 
pyflakes/twistedchecker and dependencies, and being able to install the 
branch.



From glyph at twistedmatrix.com  Tue Sep 17 12:08:09 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 17 Sep 2013 11:08:09 -0700
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <523894D7.10008@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
Message-ID: <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>

On Sep 17, 2013, at 10:43 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 17/09/13 17:05, exarkun at twistedmatrix.com wrote:
> 
>>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>>> one before. It assumes a *hell* of a lot of prior knowledge. There
>>> needs to be a single page checklist for first-time reviewers.
>> 
>> This is in progress.
> 
> Awesome; would it be useful for me to write up what I did, or do you have enough source material?

Let's have a discussion here on the list first :-).  So... yes, write it up in a reply.

The review docs are always in progress.  Feedback like "this is bad" is basically useless; we know it's bad, but everyone has its own idea of what "bad" means.  What would be really useful in such a write-up was specific feedback about what you needed to know, what resources you discovered, and what they were missing.  Like:

"I didn't know if I should _ or _ because I was looking at this url _ and it didn't say and didn't link to anything that told me what to do.  So, based on this previous review _ I decided to _ and that worked out okay, that should be documented on the first URL I found".

So please feel free to offer more feedback but let's please keep it as specific as possible.

> FWIW I found virtualenv & the github mirror to be incredibly useful for the task; in particular it meant getting latest & greatest pyflakes/twistedchecker and dependencies, and being able to install the branch.

Separately, "how to get set up to review" would be a useful document too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130917/a07112da/attachment-0002.html>

From exarkun at twistedmatrix.com  Tue Sep 17 12:08:37 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 18:08:37 -0000
Subject: [Twisted-Python] run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
 <CAE_Hg6aiO3+VQ4+gC_uyW_C_oC4UtqzOL7zv96pyp65XxN312A@mail.gmail.com>
Message-ID: <20130917180837.26068.1349767428.divmod.xquotient.2377@top>

On 04:10 pm, _ at lvh.io wrote:
>On Tue, Sep 17, 2013 at 2:14 PM, <exarkun at twistedmatrix.com> wrote:
>>I think there are still many unported dependencies of `twistd` to port
>>first.
>
>Sure, but every little bit helps, right? :)

It doesn't make a lot of sense to me to port things that depend on 
unported things.  The little bit that would help would be porting one of 
the unported dependencies.
>
>>  Can someone comment as to why this was put there in the first place, 
>>and,
>>>specifically, why it can't just be "pass"? Is there some logging 
>>>system
>>>that looks at the current exception or something when twistd (or some
>>>other
>>>script) starts?
>>
>>Both `log.err()´ and `Failure()´ look at the current exception.  If we
>>don't `sys.clear_exc()´ here then the first piece of code that tries 
>>to use
>>either of those may get a surprising result.  The current exception 
>>state
>>can last a long time so this surprise can hide for a remarkably long 
>>time
>>before showing up.
>
>Okay, cool. From what I understand:
>
>1. _preamble is just a hack to get bin/whatever to work right without
>installing (i.e. from a checkout)
>2. (not too sure about this) in py3k, except statements do the clearing 
>bit
>already: www.python.org/dev/peps/pep-3110/#semantic-changes
>
>So, does that mean we can do a try: ... ; except AttributeError and be 
>done
>with it?

Sounds like probably yea.  The way to know would be to make the change 
and run the test suite (perhaps first double checking to get an idea of 
how well covered this is).  Revision history suggests the change was 
made to get a test to pass but it doesn't mention which one.

This is why porting the dependencies first makes sense though - you 
won't be able to run the tests as long as the dependencies are unported.

Jean-Paul



From exarkun at twistedmatrix.com  Tue Sep 17 12:10:59 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 17 Sep 2013 18:10:59 -0000
Subject: [Twisted-Python] Twisted Names EDNS(0) support [Was Twisted at
 PyConUK 2013]
In-Reply-To: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
References: <CABefbUqEKMp7r4eABGSi=tscOboJ_w-2TdrfaO+fyUJyhLGcRQ@mail.gmail.com>
Message-ID: <20130917181059.26068.2074490532.divmod.xquotient.2378@top>

On 04:18 pm, m-lists at the-moon.net wrote:
>[snip]
>
>Meanwhile, I'll see if I can help exarkun with the code review 
>checklist.

No, not me. :)  Ashwini is working on this.  Please give her a hand. :)

Jean-Paul



From wsanchez at wsanchez.net  Tue Sep 17 18:16:24 2013
From: wsanchez at wsanchez.net (=?ISO-8859-1?Q?Wilfredo_S=E1nchez_Vega?=)
Date: Tue, 17 Sep 2013 17:16:24 -0700
Subject: [Twisted-Python] logging
In-Reply-To: <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>
References: <8741E998-D2B2-4F65-BB42-6D61779E7A8B@twistedmatrix.com>
 <c4ec7d4f-f13f-4782-9a45-c3b7b649b5fa@email.android.com>
 <3B161C97-88C2-42BB-A018-4F00B2229DFA@twistedmatrix.com>
 <1371569146.32178.140661245381745.62913D07@webmail.messagingengine.com>
 <F3D9613E-107F-4D26-86A9-405C3C49F239@twistedmatrix.com>
Message-ID: <5238F0D8.3040105@wsanchez.net>

   For your Trac'ing pleasure:

   https://twistedmatrix.com/trac/ticket/6750

     -wsv




From glyph at twistedmatrix.com  Tue Sep 17 18:29:42 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 17 Sep 2013 17:29:42 -0700
Subject: [Twisted-Python] infrastructure hosting confusion / cleanup
Message-ID: <99A07ACE-76D9-4227-BAC6-20137130A524@twistedmatrix.com>

Pages like this one:

<http://buildbot.twistedmatrix.com/builders/pyflakes/builds/1008>

information about the source code being built in the form of a git revision.

As long as we're still using Subversion for our upstream VCS, it would be desirable to also have a Subversion revision number.

I wanted to request this, but even I have lost track, at this point, of where to file bugs for things like this.

It looks like we're hosting our infrastructure projects on Github right now, which means <https://github.com/twisted-infra/twisted-buildbot-configuration> would be the place to go.  But there is no 'issues' link there.  Nor any link to any place where bugs might be filed.

I guess <https://bugs.launchpad.net/twisted-buildbot-configuration> is still what is being used for that thing? But then that project provides a non-up-to-date view of the source code.

Richard Wall's draft for a new "new ticket" page directs people to file issues against twisted-infra but that appears to be wrong in this particular case, since the buildbot configuration doesn't have a bugtracker there.  <https://twistedmatrix.com/trac/wiki/users/rwall/DraftNewTicketPage>  Plus, that suggestion links to a list of like a zillion infrastructure projects, half of which don't even have a description that explains what they are, let alone where to file bugs.

Can someone please volunteer to update all of the READMEs on all of these projects, and all of the various locations where they've ever lived, to point at the actual, canonical place where infrastructure is developed?  It would be good if users who want to report that the website is down or ask for an enhancement to the website, or Trac or Buildbot instances did not have to select between a dozen different projects that they might file an issue against.

(Perhaps they should all link to <https://twistedmatrix.com/trac/wiki/Infrastructure> or some page beneath it, which can _remain_ the canonical location for everything and be updated once, since based on our history it seems likely that half of our infrastructure will randomly move to Bitbucket, or perhaps to Sourceforge, at some point in the future...)

If someone who has not previously participated in infrastructure development would like to take point on creating such a resource, I will be happy to get you the appropriate access to any systems you need to.

-glyph


From wuzhigaoem at 163.com  Tue Sep 17 19:29:16 2013
From: wuzhigaoem at 163.com (=?UTF-8?B?5ZC05b+X6auY?=)
Date: Wed, 18 Sep 2013 09:29:16 +0800 (CST)
Subject: [Twisted-Python] Reply:Re: run python application with twistd -y
 ifinger.tac, error occurs. please help to check
In-Reply-To: <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
References: <771db05d.97d1.1412ae91515.Coremail.wuzhigaoem@163.com>
 <CAE_Hg6YO1tQbmMZjHXqVRPWmLLnciNEBR3kPN0ZSW7Z++r25Ug@mail.gmail.com>
 <20130917121408.26068.1226862992.divmod.xquotient.2372@top>
Message-ID: <b4ac51a.16afa.1412eaf8492.Coremail.wuzhigaoem@163.com>







Jean-Paul
您好！

Thanks for your help. 
Because i am a fresh man to twisted. 
I will roll back to version 2.x and try the application again.

谢谢！！
----------------------------
姓名 : 吴志高/Charles
电话 : (+086)13410859946

邮箱 : wuzhigaoem at 163.com
================================================




At 2013-09-17 20:14:08,exarkun at twistedmatrix.com wrote:
>On 09:06 am, _ at lvh.io wrote:
>>Hi Charles,
>>
>>
>>Yes, twistd doesn't appear to work on py3k. Not being able to import
>>_preamble is normal (once Twisted has been installed), but _preamble 
>>does
>>assume sys.exc_clear exists, which isn't true on 3.x.
>>
>>I couldn't find any ticket on this. Perhaps you should file it (and 
>>maybe
>>fix it!) :)
>
>I think there are still many unported dependencies of `twistd` to port 
>first.
>>It's my understanding that the new except clause semantics are expected 
>>to
>>take care of this problem.
>>
>>Can someone comment as to why this was put there in the first place, 
>>and,
>>specifically, why it can't just be "pass"? Is there some logging system
>>that looks at the current exception or something when twistd (or some 
>>other
>>script) starts?
>
>Both `log.err()´ and `Failure()´ look at the current exception.  If we 
>don't `sys.clear_exc()´ here then the first piece of code that tries to 
>use either of those may get a surprising result.  The current exception 
>state can last a long time so this surprise can hide for a remarkably 
>long time before showing up.
>
>The exception state also holds references to lots of extra things on the 
>stack which is undesirable even if there are no other side-effects.
>
>Jean-Paul
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130918/b2e64b42/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Sep 18 06:03:19 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 13:03:19 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
Message-ID: <52399687.9020907@imperial.ac.uk>

Is there any support, or any interest in / way to add support for 
deferred cancellation in pb?

Specifically I'd like do have something like:

class blah(pb...):
   def remote_somelongtask(self, args):
     ...
     taskid = somefunc()
     d = defer.Deferred(lambda : canceltask(taskid))
     return d

...and on the client:

d = callRemote('somelongtask', args)
...
# now we no longer need it
d.cancel()

...and have the cancel the server-side task.



From exarkun at twistedmatrix.com  Wed Sep 18 06:34:26 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 18 Sep 2013 12:34:26 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <52399687.9020907@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
Message-ID: <20130918123426.26068.232339554.divmod.xquotient.2380@top>

On 12:03 pm, p.mayers at imperial.ac.uk wrote:
>Is there any support, or any interest in / way to add support for 
>deferred cancellation in pb?
>
>Specifically I'd like do have something like:
>
>class blah(pb...):
>   def remote_somelongtask(self, args):
>     ...
>     taskid = somefunc()
>     d = defer.Deferred(lambda : canceltask(taskid))
>     return d
>
>...and on the client:
>
>d = callRemote('somelongtask', args)
>...
># now we no longer need it
>d.cancel()
>
>...and have the cancel the server-side task.

s/task/Deferred/ :)

+1 - particularly if you also want to tackle this for AMP.

Jean-Paul



From _ at lvh.io  Wed Sep 18 06:43:58 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 18 Sep 2013 14:43:58 +0200
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918123426.26068.232339554.divmod.xquotient.2380@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
Message-ID: <CAE_Hg6ZqGeMu+iJPEpE2gC6yUVeJfkf3DsAih8590+gF+T-s5Q@mail.gmail.com>

+1, particularly for AMP
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130918/01df04ce/attachment-0002.html>

From p.mayers at imperial.ac.uk  Wed Sep 18 07:00:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 14:00:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918123426.26068.232339554.divmod.xquotient.2380@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
Message-ID: <5239A403.3040802@imperial.ac.uk>

On 18/09/13 13:34, exarkun at twistedmatrix.com wrote:
> On 12:03 pm, p.mayers at imperial.ac.uk wrote:
>> Is there any support, or any interest in / way to add support for
>> deferred cancellation in pb?
>>
>> Specifically I'd like do have something like:
>>
>> class blah(pb...):
>>   def remote_somelongtask(self, args):
>>     ...
>>     taskid = somefunc()
>>     d = defer.Deferred(lambda : canceltask(taskid))
>>     return d
>>
>> ...and on the client:
>>
>> d = callRemote('somelongtask', args)
>> ...
>> # now we no longer need it
>> d.cancel()
>>
>> ...and have the cancel the server-side task.
>
> s/task/Deferred/ :)
>
> +1 - particularly if you also want to tackle this for AMP.

I've never used (and have no particular use for) AMP so I'd have to take 
a look at it. It doesn't look so hard for pb, but I have "teh fear" in 
case the existing test coverage isn't good and a 10-line change would 
require writing 1000 lines of tests :o(

I'll have a look, but from the responses I'll assume neither pb nor AMP 
can do this, and will file a couple of tickets for reference.



From p.mayers at imperial.ac.uk  Wed Sep 18 07:14:36 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 14:14:36 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239A403.3040802@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk>
Message-ID: <5239A73C.6010804@imperial.ac.uk>

On 18/09/13 14:00, Phil Mayers wrote:

> I'll have a look, but from the responses I'll assume neither pb nor AMP
> can do this, and will file a couple of tickets for reference.

#6753 and #6754, for the curious. As the latter indicates, I don't 
really understand the AMP stuff; I got stuck in a twisty maze of Box's, 
all alike ;o)



From p.mayers at imperial.ac.uk  Wed Sep 18 10:02:10 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 17:02:10 +0100
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
 <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
Message-ID: <5239CE82.6030303@imperial.ac.uk>

On 17/09/13 19:08, Glyph wrote:
> On Sep 17, 2013, at 10:43 AM, Phil Mayers <p.mayers at imperial.ac.uk
> <mailto:p.mayers at imperial.ac.uk>> wrote:
>
>> On 17/09/13 17:05, exarkun at twistedmatrix.com
>> <mailto:exarkun at twistedmatrix.com> wrote:
>>
>>>> p.s. the "How to review" docs on Trac are AWFUL if you've never done
>>>> one before. It assumes a *hell* of a lot of prior knowledge. There
>>>> needs to be a single page checklist for first-time reviewers.
>>>
>>> This is in progress.
>>
>> Awesome; would it be useful for me to write up what I did, or do you
>> have enough source material?
>
> Let's have a discussion here on the list first :-).  So... yes, write it
> up in a reply.
>
> The review docs are always in progress.  Feedback like "this is bad" is
> basically useless; we know it's bad, but everyone has its own idea of
> what "bad" means.  What would be really useful in such a write-up was
> specific feedback about what you needed to know, what resources you

Yeah, sorry - not great feedback there.

In brief: Twisted reviews are obviously very comprehensive, encompassing 
test passed and coverage, coding style, api design and documentation as 
well as subjective opinion.

You need a bunch of tools to get started, and have to do a few 
boilerplate things to get setup, and I think a really *really* basic 
setup doc, followed by a handholding checklist, would form a better 
basis for a first-time reviewer.

So specifics:

The Trac ReviewProcess page starts off well, but loses coherence about 
half-way through - the first 3 sections are about authoring a change, 
then you get a "Reviewers: how to review (see below) and some link-free 
bullet points", then back to "Authors": then the "Details" section which 
starts with "news files" and it's all a bit uncertain who this applies 
to on a first pass - I had to read it several times, which makes people 
feel dumb.

Minor note: the "How to review a change" is missing an obvious link to 
the coding standards.

Suggestion: split this page into 3 pages - Authoring, Reviewing, 
Committing. Have a master page "Twisted overall process" which links to 
the 3 pages. It's valuable for a reviewer to know the authoring process 
- the mindset is helpful - but a "mode change" should be accompanied by 
an actual "input" change.

Suggestion for the "Review" page: this should be:

1. Setting up a review environment - I think this is really important. 
People who know the process can and will do things their own way, but a 
really basic setup like:

   virtualenv twrev
   . twrev/bin/active
   pip install twisted-reviewtools << make this!
   svn checkout blah
   twrev/bin/python blah/setup.py install
   twrev/bin/trial twisted

...would save first-timers some hassle.

2. Checking out the branch to review and getting it in a review-able 
state (what do people do here - run from inside the branch dir? install 
to a virtualenv?)

3. Running basic checks - tests, pyflakes, twistedchecker - and 
interpreting the results. In particular, techniques for ignoring the 
flakess/checker output for unchanged files.

4. Reviewing the diff:
    * How to check docstrings
    * How to evaluate test coverage

5. How to provide feedback - form, tone, avoiding bikeshedding (or not)

Then link to some "best practice" examples of previous tickets - one or 
two that show a good set of review comments - for people to peruse.

Hope this is useful. I probably am overstating how painful it was - I 
did get it done after all, and it'll be easier 2nd time around - but you 
guys keep saying you want more reviewers ;o)



From burak at nehbit.net  Wed Sep 18 10:00:45 2013
From: burak at nehbit.net (burak at nehbit.net)
Date: Wed, 18 Sep 2013 12:00:45 -0400
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239A73C.6010804@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
Message-ID: <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>

+1 for AMP.

Best,
Burak


On Sep 18, 2013, at 9:17, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> On 18/09/13 14:00, Phil Mayers wrote:
> 
>> I'll have a look, but from the responses I'll assume neither pb nor AMP
>> can do this, and will file a couple of tickets for reference.
> 
> #6753 and #6754, for the curious. As the latter indicates, I don't really understand the AMP stuff; I got stuck in a twisty maze of Box's, all alike ;o)
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From p.mayers at imperial.ac.uk  Wed Sep 18 10:08:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 18 Sep 2013 17:08:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
Message-ID: <5239D013.3030003@imperial.ac.uk>

On 18/09/13 17:00, burak at nehbit.net wrote:
> +1 for AMP.

Wow, lots of people using AMP. Maybe I'm missing out on something...

Don't people miss the symmetry of PB? Not to mention you can be lazy and 
avoid defining a schema! Or are people using Twisted->Other AMP connections?



From exarkun at twistedmatrix.com  Wed Sep 18 10:34:41 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 18 Sep 2013 16:34:41 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239D013.3030003@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
Message-ID: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>

On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>On 18/09/13 17:00, burak at nehbit.net wrote:
>>+1 for AMP.
>
>Wow, lots of people using AMP. Maybe I'm missing out on something...
>
>Don't people miss the symmetry of PB? Not to mention you can be lazy 
>and avoid defining a schema! Or are people using Twisted->Other AMP 
>connections?

AMP is symmetric in the same way PB is.

I like AMP's explicit schemas because they make maintenance and 
documentation easier.

And I am 98% certain more people are using AMP to interoperate with non- 
Twisted software than are using PB to interoperate with non-Twisted 
software. ;)

Basically, I think PB tries to do too much and does it on a slightly 
shaky foundation.  It is totally possible to build stuff using PB that 
works but in my experience it is a bit easier to do so with AMP and I am 
more comfortable with prospects for making AMP cooler in the future due 
to the simplicity of its implementation compared to the implementation 
of PB (that said, here we are *years* later and I am still waiting for 
good AMP support for streaming data - so it's not all roses over here).

Jean-Paul



From burak at nehbit.net  Wed Sep 18 11:12:43 2013
From: burak at nehbit.net (Burak Nehbit)
Date: Wed, 18 Sep 2013 13:12:43 -0400
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
Message-ID: <etPan.5239df0b.6b8b4567.2283@Buraks-MacBook-Pro.local>

My reasons are simpler: PB expects me to build my application to suit it, whereas AMP is small enough to insert into an existing application. It does one single thing and does it well. Caveat emptor, though, I'm still a Twisted newbie—I do understand AMP, but PB is right now way, way over my head. 


On September 18, 2013 at 12:38:04 PM, exarkun at twistedmatrix.com (exarkun at twistedmatrix.com) wrote:

On 04:08 pm, p.mayers at imperial.ac.uk wrote:  
>On 18/09/13 17:00, burak at nehbit.net wrote:  
>>+1 for AMP.  
>  
>Wow, lots of people using AMP. Maybe I'm missing out on something...  
>  
>Don't people miss the symmetry of PB? Not to mention you can be lazy  
>and avoid defining a schema! Or are people using Twisted->Other AMP  
>connections?  

AMP is symmetric in the same way PB is.  

I like AMP's explicit schemas because they make maintenance and  
documentation easier.  

And I am 98% certain more people are using AMP to interoperate with non-  
Twisted software than are using PB to interoperate with non-Twisted  
software. ;)  

Basically, I think PB tries to do too much and does it on a slightly  
shaky foundation. It is totally possible to build stuff using PB that  
works but in my experience it is a bit easier to do so with AMP and I am  
more comfortable with prospects for making AMP cooler in the future due  
to the simplicity of its implementation compared to the implementation  
of PB (that said, here we are *years* later and I am still waiting for  
good AMP support for streaming data - so it's not all roses over here).  

Jean-Paul  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130918/a6b6f98c/attachment-0002.html>

From werner at thieprojects.ch  Wed Sep 18 11:37:06 2013
From: werner at thieprojects.ch (Werner Thie)
Date: Wed, 18 Sep 2013 07:37:06 -1000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <5239D013.3030003@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
Message-ID: <5239E4C2.8030001@thieprojects.ch>

+1 for pb
+1 for AMP

Werner

On 9/18/13 6:08 AM, Phil Mayers wrote:
> On 18/09/13 17:00, burak at nehbit.net wrote:
>> +1 for AMP.
>
> Wow, lots of people using AMP. Maybe I'm missing out on something...
>
> Don't people miss the symmetry of PB? Not to mention you can be lazy and
> avoid defining a schema! Or are people using Twisted->Other AMP
> connections?
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From bob.novas at shinkuro.com  Wed Sep 18 14:59:38 2013
From: bob.novas at shinkuro.com (Bob Novas)
Date: Wed, 18 Sep 2013 16:59:38 -0400
Subject: [Twisted-Python] How to disconnect an HTTP connection and notify
	the far end
Message-ID: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>

I've got a question on how to explicitly disconnect a connection from the
client side so that the server side knows that the connection has been
disconnected. I'd be happy if this worked even with no guarantees, i.e.,
only when the client and server were in fact well-connected. It's just an
optimization to allow the server to cleanup.

 

I've got an HTTP client that uses HTTPConnectionPool to get an Agent, gets a
Request from the Agent, and sends the Request to a WebServer on a linux box.


 

On a Mac client, if I call closeCachedConnections() on the
HTTPConnectionPool, the client immediately sends FIN on the port with the
Request outstanding, the server delivers a callback registered on the
Request via NotifyFinish() and the server knows the client has disconnected.

 

On a Windows client, if I do the same, same code, the client waits until the
outstanding Request finishes and then sends FIN. Nothing happens at the
server - there's no Request outstanding on which to deliver a callback,
twisted.internet.tcp.Port.connectionLost() doesn't get called, nada.

 

Am I missing something?  Is there a way to send a FIN on a connection on
which there is an outstanding Request on Windows?

 

Thanks in advance,

Bob

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130918/152633fb/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6085 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20130918/152633fb/attachment-0002.bin>

From glyph at twistedmatrix.com  Wed Sep 18 19:59:17 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 18 Sep 2013 18:59:17 -0700
Subject: [Twisted-Python] Twisted at PyConUK 2013
In-Reply-To: <5239CE82.6030303@imperial.ac.uk>
References: <CABefbUpM26VPayMEDaj-tAZQBoA6nwYvNL6g-Xpueu1=N_1TSA@mail.gmail.com>
 <52387690.5070304@imperial.ac.uk>
 <20130917160527.26068.1762336748.divmod.xquotient.2373@top>
 <523894D7.10008@imperial.ac.uk>
 <0F2ACAB3-4C8E-4556-925B-1FDAB963F37C@twistedmatrix.com>
 <5239CE82.6030303@imperial.ac.uk>
Message-ID: <FBF3E0F0-3B32-4DAB-8DE9-D68E6C9875DC@twistedmatrix.com>


On Sep 18, 2013, at 9:02 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> Hope this is useful. I probably am overstating how painful it was - I did get it done after all, and it'll be easier 2nd time around - but you guys keep saying you want more reviewers ;o)

Definitely useful to get some perspective on this, and to have very specific fodder for making improvements.  Thanks for taking the time to write it up.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130918/e2c946ea/attachment-0002.html>

From p.mayers at imperial.ac.uk  Thu Sep 19 06:38:51 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 19 Sep 2013 13:38:51 +0100
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
Message-ID: <523AF05B.709@imperial.ac.uk>

On 18/09/13 17:34, exarkun at twistedmatrix.com wrote:
> On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>> On 18/09/13 17:00, burak at nehbit.net wrote:
>>> +1 for AMP.
>>
>> Wow, lots of people using AMP. Maybe I'm missing out on something...
>>
>> Don't people miss the symmetry of PB? Not to mention you can be lazy
>> and avoid defining a schema! Or are people using Twisted->Other AMP
>> connections?
>
> AMP is symmetric in the same way PB is.

Exactly the same? I know you can callRemote on both sides, but only for 
registered Command responders IIRC?



From exarkun at twistedmatrix.com  Thu Sep 19 07:28:20 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 19 Sep 2013 13:28:20 -0000
Subject: [Twisted-Python] Cancelling a pb callRemote
In-Reply-To: <523AF05B.709@imperial.ac.uk>
References: <52399687.9020907@imperial.ac.uk>
 <20130918123426.26068.232339554.divmod.xquotient.2380@top>
 <5239A403.3040802@imperial.ac.uk> <5239A73C.6010804@imperial.ac.uk>
 <873B717E-280F-48C0-A714-876B20BD26B1@nehbit.net>
 <5239D013.3030003@imperial.ac.uk>
 <20130918163441.26068.1958441417.divmod.xquotient.2386@top>
 <523AF05B.709@imperial.ac.uk>
Message-ID: <20130919132820.26068.1680906153.divmod.xquotient.2392@top>

On 12:38 pm, p.mayers at imperial.ac.uk wrote:
>On 18/09/13 17:34, exarkun at twistedmatrix.com wrote:
>>On 04:08 pm, p.mayers at imperial.ac.uk wrote:
>>>
>>>Don't people miss the symmetry of PB? Not to mention you can be lazy
>>>and avoid defining a schema! Or are people using Twisted->Other AMP
>>>connections?
>>
>>AMP is symmetric in the same way PB is.
>
>Exactly the same? I know you can callRemote on both sides, but only for 
>registered Command responders IIRC?

That's right (at least with the primary API exposed by the Twisted 
implementation of AMP).  This is analogous to how you can only call 
`remote_*´ methods with PB - regardless of whether the calls are client 
to server or server to client.  For both protocols, these are API 
decisions.  The wire protocol for AMP says nothing about `Command´ or 
"responders" just as the wire protocol for PB says nothing about a 
`remote_´ method name prefix.

Jean-Paul



From wasilak at gmail.com  Fri Sep 20 02:54:47 2013
From: wasilak at gmail.com (Maciej Wasilak)
Date: Fri, 20 Sep 2013 10:54:47 +0200
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
Message-ID: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>

Hello everyone,

I would like to announce the first release of txThings. It is a simple
library
for Constrained Application Protocol (CoAP). CoAP is a relatively new
protocol
designed for "Internet of Things" and M2M communications.

txThings currently implements a subset of CoAP features:
- standard messaging based on draft-ietf-core-coap-13 (no proxying support
yet)
- blockwise transfers based on draft-ietf-core-block-12
- limited suport for RFC6690 Core Link Format (for servers only)

I hope to add new features like Observe (draft-ietf-core-observe-09) soon.

TxThings is my first Twisted project, so the code quality can probably be
improved,
also better unit testing is necessary. However I decided to release the code
in its current form to discover, if there is any interest in it.

Internet of Things is currently very interesting field of development. It
is approaching
a phase where many opportunities for both large and small players. I think
Twisted is
well suited for development of IoT apps:
- it's stable
- it's Python based and portable
- it has good support for UDP and TCP, which makes it ideal for proxying
IoT protocols to HTTP
In my opinion in the next three years, at least 20% of Twisted apps will be
IoT related
(educated guess, no hard data :) )

There are many new protocols out there designed for IoT, in my opinion
CoAP and MQTT have the biggest chance of adoption. CoAP is developed by
IETF,
and backed by companies like ARM.

You can download txThings from Github:

https://github.com/siskin/txThings

Description:

http://sixpinetrees.blogspot.com/2013/09/txthings-good-enough-is-good-enough.html

Few more remarks:
- txThings works on RaspberryPi (tested)
- txThings plays well with Kivy Python GUI Library http://kivy.org
Kivy is new GUI library that supports Twisted, and allows building apps for
Android and iOS - I've ran a few tests, and it's very promising :)

Photo:
http://bit.ly/1aPZ1ag

Best Regards
Maciej Wasilak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130920/2e91b987/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Sep 20 17:21:46 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 20 Sep 2013 16:21:46 -0700
Subject: [Twisted-Python] txThings - simple library for CoAP protocol
In-Reply-To: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
References: <CAFUtXGztnBjfBko_bQgOPxqc8a=ny+Ch9BA-m0=0vuDyQG4B=g@mail.gmail.com>
Message-ID: <A06D291F-785F-48D4-AF9B-7724A9BBB489@twistedmatrix.com>


On Sep 20, 2013, at 1:54 AM, Maciej Wasilak <wasilak at gmail.com> wrote:

> I would like to announce the first release of txThings. It is a simple library
> for Constrained Application Protocol (CoAP). CoAP is a relatively new protocol
> designed for "Internet of Things" and M2M communications.

Thanks for sharing this, Maciej!

Please feel free to keep on sending more announcements as you put Twisted inside of more devices ;-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130920/f3a64045/attachment-0002.html>

From glyph at twistedmatrix.com  Fri Sep 20 17:26:03 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 20 Sep 2013 16:26:03 -0700
Subject: [Twisted-Python] How to disconnect an HTTP connection and
	notify the far end
In-Reply-To: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>
References: <009401ceb4b1$fd4435c0$f7cca140$@shinkuro.com>
Message-ID: <E34EAEBF-D227-4CD9-9F10-C890BD02C6CC@twistedmatrix.com>


On Sep 18, 2013, at 1:59 PM, Bob Novas <bob.novas at shinkuro.com> wrote:

> I’ve got a question on how to explicitly disconnect a connection from the client side so that the server side knows that the connection has been disconnected. I’d be happy if this worked even with no guarantees, i.e., only when the client and server were in fact well-connected. It’s just an optimization to allow the server to cleanup.
>  
> I’ve got an HTTP client that uses HTTPConnectionPool to get an Agent, gets a Request from the Agent, and sends the Request to a WebServer on a linux box. 
>  
> On a Mac client, if I call closeCachedConnections() on the HTTPConnectionPool, the client immediately sends FIN on the port with the Request outstanding, the server delivers a callback registered on the Request via NotifyFinish() and the server knows the client has disconnected.

Sounds right...

>  On a Windows client, if I do the same, same code, the client waits until the outstanding Request finishes and then sends FIN. Nothing happens at the server – there’s no Request outstanding on which to deliver a callback, twisted.internet.tcp.Port.connectionLost() doesn’t get called, nada.

So, tcp.Port.connectionLost is only called when the *listening port* is shut down, i.e. when the server stops listening entirely.  What you should be looking for is connectionLost on your particular Protocol.

>  Am I missing something?  Is there a way to send a FIN on a connection on which there is an outstanding Request on Windows?

Twisted should behave the same way on all platforms, at least, if you're using portable APIs.

Usually, when the TCP stack completely goes out to lunch on Windows, it's due to some bizarre antivirus software that's just buggy.  For a while, possibly still today, Twisted just completely dies with certain versions of AVG installed, because they completely break the expected behavior of certain socket APIs.

Have you tried with multiple Windows clients yet? Different versions of Windows? Different software installed?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130920/ba632204/attachment-0002.html>

From trac at twistedmatrix.com  Sun Sep 22 00:05:20 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 22 Sep 2013 06:05:20 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1379829920.14.2827448715611270063@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130922/10e43694/attachment-0002.html>

From m-lists at the-moon.net  Tue Sep 24 06:07:21 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 24 Sep 2013 13:07:21 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
Message-ID: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>

Twisted Sprint Report (2013-09-23)

* Venue
  PyconUK 2013, Coventry, England


* Attendees
  * Lasse Bromose
  * Stephen Evans
  * Holger Kraus
  * Lukasz Prasol
  * Christophe Reche
  * Richard Wall


* Summary
  Five Twisted enthusiasts were introduced to the Twisted development
  process. We closed 2 tickets, made some progress on 2 others and
  improved some of the development process documentation.


* Details
** http://tm.tl/6406
   Christophe, Lukasz and Holger helped improve the Trial Howto
   Documentation. rwall reviewed and merged.

** http://tm.tl/6486
   Lasse and Stephen helped with the removal of "has_key" from
   twisted.mail and documented various undocumented twisted.mail
   tests. rwall reviewed and merged.

** https://twistedmatrix.com/trac/wiki/ReviewingDocumentation
   Holger reviewed and fixed broken links to Nevow and Pydoctor.

** http://tm.tl/6162
   Lasse and Stephen reviewed the twisted.web Agent Howto and updated
   the examples to use task.react.

** http://tm.tl/3324
   Lukasz and Holger reviewed Shira's new SMTP server tutorial.
   (Lukasz will attach their patch / notes when he gets home.)


Thanks to all of you for your help. I hope you found it interesting
and look forward to more contributions from you in the future.

-RichardW.



From exarkun at twistedmatrix.com  Tue Sep 24 07:07:45 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 24 Sep 2013 13:07:45 -0000
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
Message-ID: <20130924130745.26068.1611267828.divmod.xquotient.2397@top>

On 12:07 pm, m-lists at the-moon.net wrote:
>Twisted Sprint Report (2013-09-23)
>
>* Venue
>  PyconUK 2013, Coventry, England
>
>
>* Attendees
>  * Lasse Bromose
>  * Stephen Evans
>  * Holger Kraus
>  * Lukasz Prasol
>  * Christophe Reche
>  * Richard Wall

Woo.  Hope you guys had fun.  Thanks for the report, Richard.

Jean-Paul



From radix at twistedmatrix.com  Tue Sep 24 09:58:39 2013
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 24 Sep 2013 10:58:39 -0500
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
Message-ID: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>

On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net> wrote:

> Twisted Sprint Report (2013-09-23)
>
> * Venue
>   PyconUK 2013, Coventry, England
>
>
> * Attendees
>   * Lasse Bromose
>   * Stephen Evans
>   * Holger Kraus
>   * Lukasz Prasol
>   * Christophe Reche
>   * Richard Wall
>
>
I am really excited about the fact that I don't know all of the people on
this list -- we need more developers!  :-) Thanks for organizing this
sprint, Richard!


-- 
Christopher Armstrong
http://radix.twistedmatrix.com/
http://planet-if.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130924/36c7fe6e/attachment-0002.html>

From techtonik at gmail.com  Tue Sep 24 10:13:52 2013
From: techtonik at gmail.com (anatoly techtonik)
Date: Tue, 24 Sep 2013 19:13:52 +0300
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
Message-ID: <CAPkN8xLEY-q9+u8xbA1x-=DGjXdBCy9081oMy7j3xSs3pCrmsA@mail.gmail.com>

On Tue, Sep 24, 2013 at 6:58 PM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net>wrote:
>
>> Twisted Sprint Report (2013-09-23)
>>
>> * Venue
>>   PyconUK 2013, Coventry, England
>>
>>
>> * Attendees
>>   * Lasse Bromose
>>   * Stephen Evans
>>   * Holger Kraus
>>   * Lukasz Prasol
>>   * Christophe Reche
>>   * Richard Wall
>>
>>
> I am really excited about the fact that I don't know all of the people on
> this list -- we need more developers!  :-) Thanks for organizing this
> sprint, Richard!
>

Reports are hard to write, but fun to read. Keep it up. Very nice. =)
-- 
anatoly t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130924/3d21ad80/attachment-0002.html>

From glyph at twistedmatrix.com  Tue Sep 24 11:33:18 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 24 Sep 2013 10:33:18 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <CAPkRfUR9m-_ULAeHyOJxaxRDDxW+XkPwU6=bZRMwTxag56MQjw@mail.gmail.com>
Message-ID: <AAF1792B-C794-4412-8F46-C40ACAD184EE@twistedmatrix.com>


On Sep 24, 2013, at 8:58 AM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On Tue, Sep 24, 2013 at 7:07 AM, Richard Wall <m-lists at the-moon.net> wrote:
> Twisted Sprint Report (2013-09-23)
> 
> * Venue
>   PyconUK 2013, Coventry, England
> 
> 
> * Attendees
>   * Lasse Bromose
>   * Stephen Evans
>   * Holger Kraus
>   * Lukasz Prasol
>   * Christophe Reche
>   * Richard Wall
> 
> 
> I am really excited about the fact that I don't know all of the people on this list -- we need more developers!  :-) Thanks for organizing this sprint, Richard!

Me too.  This is great, thanks a ton!

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130924/1ba30501/attachment-0002.html>

From m-lists at the-moon.net  Tue Sep 24 14:39:15 2013
From: m-lists at the-moon.net (Richard Wall)
Date: Tue, 24 Sep 2013 21:39:15 +0100
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
Message-ID: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>

On 24 September 2013 14:07,  <exarkun at twistedmatrix.com> wrote:
<snip>
> Woo.  Hope you guys had fun.  Thanks for the report, Richard.

Yep, it was a good day.

There were a few things that could have gone better. Here are a few thoughts.

* Easy Tickets
In hindsight, I should have prepared a selection of suitable tickets.

The "easy" tickets search is useful, but many of them have been worked
on already and it's difficult to choose which of these are suitable
for sprint contributors without reading through the history.
One of the tickets I chose had already been mostly completed and the
remaining work (filling in missing docstrings for mail avatar tests)
was impossible for me to explain, let alone for the new contributors.

The "documentation" ticket report is also useful, but with our current
version of trac, there's no way of dynamically creating a report which
looks for "easy" AND "documentation" keywords.
New versions of trac allow this I think. Meanwhile we could write a
custom SQL report for this. And again it requires a little preparation
to select tickets which haven't got complications.

* Windows Development
Two of the guys were running windows and I struggled to help them set
up a working development environment. This evening I found this page
by cyli which might have helped, but probably needs updating.
 * https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Win32development

* Working in pairs
Anyway, we soon gave up on Windows and they paired up with the others
who were running Linux, and that worked well.

* Dev Requirements
It would be nice to have a dev-requirements.txt file so that they
could easily install the necessary development tools. pydoctor,
coverage, nevow, zope.interface, twistedchecker, etc
See:
 * https://github.com/hynek/structlog/blob/master/dev-requirements.txt

* Nevow
One of the guys was trying to run the documentation tools and we all
got thoroughly confused by the many broken links to Nevow.

The official link is
https://launchpad.net/divmod.org
...but it doesn't include a link to documentation.

There are these unofficial links and yet these are linked to from the
Twisted docs.
https://launchpad.net/divmod
https://launchpad.net/nevow

The pypi package is well out of date and has a broken project link
https://pypi.python.org/pypi/Nevow/0.10.0

The documentation has a broken download link.
http://divmod.readthedocs.org/en/latest/

It's such a shame that Nevow got into this state and that it isn't
easier to install.
It's fantastic software - especially Athena. And I was always partial
to Formless too.
There was even a lightening talk from a guy touting his *new* pythonic
system for generating HTML ie STAN!

* Combinator (or alternatives)
I've always used combinator to switch between Twisted branches, but it
would nice to have some documentation of non-combinator development
methods...what tools do people use to update their paths when they
switch between branches? I suppose with git you don't have to.
Is it worth considering putting combinator on Pypi?

* Git
Some of them struggled to get a complete subversion checkout (due to
dodgy conference wifi I think)  and tried to use git instead. It would
have been helpful if I'd re-read the latest Twisted git documentation
in preparation. It explains how to create a diff containing just the
local changes to a checked out branch.
 * https://twistedmatrix.com/trac/wiki/GitMirror

* The Django Sprint
By contrast, the neighbouring  Django sprint was much better prepared.
They'd run a series of tutorial sessions earlier in the conference, on
how to contribute to Django. So their sprinters hit the ground
running.
 * https://groups.google.com/forum/#!topic/django-developers/7JFKNoYl2EU
 * http://dont-be-afraid-to-commit.readthedocs.org/en/latest/
It's a good idea but a lot more work I guess.


Anyway, next time I'll know  and maybe it'll be a little easier.

-RichardW.



From rowen at uw.edu  Wed Sep 25 12:15:08 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Wed, 25 Sep 2013 11:15:08 -0700
Subject: [Twisted-Python] Running unit tests without trial?
Message-ID: <rowen-AF280F.11150825092013@news.gmane.org>

Is it possible to run twisted.trial unit tests using python instead of 
trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?

I'm hoping there is some simple magic I can put into the unit test 
itself to make this work. Perhaps something in
if __name__ == "__main__":
   ...?
to make it start up the reactor and run it correctly.

I ask because I'm using a build environment that runs all unit tests 
this way. It does the sniffing out and the saving of logs, but it 
insists on running .py tests using python.

-- Russell

P.S. being *able* to run trial unit tests using python seems like a 
feature to me in any case -- one I'd be willing to add extra code to 
support. Trial has some nice features, but I find it confusing that it 
is *required* to run a single test with a ".py" extension when visually 
it looks like a python file.




From exarkun at twistedmatrix.com  Wed Sep 25 12:45:44 2013
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 25 Sep 2013 18:45:44 -0000
Subject: [Twisted-Python] Running unit tests without trial?
In-Reply-To: <rowen-AF280F.11150825092013@news.gmane.org>
References: <rowen-AF280F.11150825092013@news.gmane.org>
Message-ID: <20130925184544.26068.1404349410.divmod.xquotient.2424@top>

On 06:15 pm, rowen at uw.edu wrote:
>Is it possible to run twisted.trial unit tests using python instead of
>trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?

Sure.  Here's the worst case answer (contents of mytest.py):

    import os
    os.system("trial myrealtests.py")

By the way, it's usually better to use the FQPN to run tests - not the 
filename.  Using the filename exposes you to all kinds of gross edge 
cases that trial doesn't always handle very well (having to do with how 
modules are loaded in Python).  So consider this instead:

    trial mytest

Or better yet, since you should be distributing and installing your test 
suite along with your package:

    trial myproject.test

There *are* better ways than `os.system´ to get a runnable Python source 
file that will run your tests though.

One that shouldn't be much of a surprise is to do exactly what you would 
do for a stdlib unittest-based test module:

    if __name__ == '__main__':
        import unittest
        unittest.main()

Or you can just invoke the same code that the command line trial script 
invokes:

    from twisted.scripts.trial import run
    run()

(That's not exactly the same as /usr/bin/trial, but you can read 
/usr/bin/trial to see the differences if you're interested).

Jean-Paul

>I'm hoping there is some simple magic I can put into the unit test
>itself to make this work. Perhaps something in
>if __name__ == "__main__":
>   ...?
>to make it start up the reactor and run it correctly.
>
>I ask because I'm using a build environment that runs all unit tests
>this way. It does the sniffing out and the saving of logs, but it
>insists on running .py tests using python.
>
>-- Russell
>
>P.S. being *able* to run trial unit tests using python seems like a
>feature to me in any case -- one I'd be willing to add extra code to
>support. Trial has some nice features, but I find it confusing that it
>is *required* to run a single test with a ".py" extension when visually
>it looks like a python file.

For what it's worth, just having a ".py" extension doesn't mean a file 
is intended to be run directly.  In fact, the vast majority of ".py" 
files are not intended to be run directly.  For example, out of the 816 
".py" files that are part of Twisted, probably only a handful are meant 
to be run directly.

What the ".py" extension unquestionably means is "this is a python 
module, it can be imported".  Arguably command line entrypoints should 
not have a ".py" extension - just as command line tools written in C and 
compiled to some version of native don't have a ".a" or ".so" extension 
(let alone a ".c" extension).

Jean-Paul



From glyph at twistedmatrix.com  Wed Sep 25 15:53:14 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 25 Sep 2013 14:53:14 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
Message-ID: <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>


On Sep 24, 2013, at 1:39 PM, Richard Wall <m-lists at the-moon.net> wrote:

> On 24 September 2013 14:07,  <exarkun at twistedmatrix.com> wrote:
> <snip>
>> Woo.  Hope you guys had fun.  Thanks for the report, Richard.
> 
> Yep, it was a good day.
> 
> There were a few things that could have gone better. Here are a few thoughts.

Thanks for writing this up.  It's always good to get better at sprints, and someone taking the time to take note of what went right and what went wrong.

> * Easy Tickets
> In hindsight, I should have prepared a selection of suitable tickets.

It seems like we learn this lesson every time :-).

However, I think that one reason that this always comes up is that preparing that selection of suitable tickets is a challenging task in its own right, that someone (or a group of people) needs to set aside time for.

> The "easy" tickets search is useful, but many of them have been worked
> on already and it's difficult to choose which of these are suitable
> for sprint contributors without reading through the history.

The "easy" ticket search is always like this because every 'easy' ticket needs to have its keyword status re-evaluated after every single bit of work that is done on it; every review, every commit, every patch; maybe even every bug comment.

Does anyone want to start an "easy team" that just keeps tabs on this list and tries to keep it updated? :)

> One of the tickets I chose had already been mostly completed and the
> remaining work (filling in missing docstrings for mail avatar tests)
> was impossible for me to explain, let alone for the new contributors.

This is one reason why we should be encouraging people to write docs first, along with writing tests first :).  Once there's an implementation that needs to be explained, bugs start to bottleneck on the original author.  But if there's just an explanation that needs to be implemented, it's generally easier for more people with different levels of skill to jump in.

> The "documentation" ticket report is also useful, but with our current
> version of trac, there's no way of dynamically creating a report which
> looks for "easy" AND "documentation" keywords. 

You can sort of half-ass it by searching for 'easy documentation' or 'documentation easy' :-).  That'll get you some results, although obviously not every possible combination.

> New versions of trac allow this I think.

I've filed a ticket asking for someone to upgrade Trac, but at this point we have pretty much no concrete reasons to do so.  If you have specific features in new versions that would be helpful, it would be good to collect them here:

<https://github.com/twisted-infra/trac-config/issues/4>

> Meanwhile we could write a custom SQL report for this. And again it requires a little preparation to select tickets which haven't got complications.

Presumably the "tickets which haven't got complications" work is covered by curating the "easy" keyword?

> * Windows Development
> Two of the guys were running windows and I struggled to help them set
> up a working development environment. This evening I found this page
> by cyli which might have helped, but probably needs updating.
> * https://twistedmatrix.com/trac/wiki/TwistedDevelopment#Win32development

This already has been updated; a newer version is here:

http://blog.ying.li/2012/03/twisted-development-on-windows-v2.html

But even that still needs updating :-\.

> * Working in pairs
> Anyway, we soon gave up on Windows and they paired up with the others
> who were running Linux, and that worked well.

Sad that the Windows people didn't get a good environment that they could take home, but hey, if they take the lesson that Windows is a mistake that causes them pain, so much the better ;-).

But, all kidding aside, we could really use more contributors who use Windows and can give a different perspective on it.  If people are going to write Windows software - and it seems like we can't stop them - it would be nice if they used Twisted for it.  (And they are not going to make the decision that Windows causes them pain; they are going to decide that either Twisted or Python does.)

> * Dev Requirements
> It would be nice to have a dev-requirements.txt file so that they
> could easily install the necessary development tools. pydoctor,
> coverage, nevow, zope.interface, twistedchecker, etc
> See:
> * https://github.com/hynek/structlog/blob/master/dev-requirements.txt

What tools actually make use of this file?  Why is it desirable to keep this information there, instead of the 'requirements' key in setup.py?  (Is there a 'develop_requires' key?)

> * Nevow
> One of the guys was trying to run the documentation tools and we all
> got thoroughly confused by the many broken links to Nevow.
> 
> The official link is
> https://launchpad.net/divmod.org
> ...but it doesn't include a link to documentation.
> 
> There are these unofficial links and yet these are linked to from the
> Twisted docs.
> https://launchpad.net/divmod
> https://launchpad.net/nevow
> 
> The pypi package is well out of date and has a broken project link
> https://pypi.python.org/pypi/Nevow/0.10.0
> 
> The documentation has a broken download link.
> http://divmod.readthedocs.org/en/latest/
> 
> It's such a shame that Nevow got into this state and that it isn't
> easier to install.
> It's fantastic software - especially Athena. And I was always partial
> to Formless too.
> There was even a lightening talk from a guy touting his *new* pythonic
> system for generating HTML ie STAN!

I'm happy to give you administrative access to anything you need in order to update Nevow's online presence.  Also, a couple of Divmod projects have been successfully split out of that repository recently.  If you want to increase Nevow's visibility, you might want to follow the same model that PyFlakes and Vertex followed.

> * Combinator (or alternatives)
> I've always used combinator to switch between Twisted branches, but it
> would nice to have some documentation of non-combinator development
> methods...what tools do people use to update their paths when they
> switch between branches? I suppose with git you don't have to.
> Is it worth considering putting combinator on Pypi?

Right now I use a (frankly unholy) combination of Combinator and git :-) but I have it on a to-do list to change my setup to use virtualenv and git, since that is where the bulk of the Python community lives now and there is just no good reason to keep fighting the current.  Combinator's branch-management stuff is made irrelevant if you're using git for development since you can just switch between branches in one working copy, and its merge-management stuff is made irrelevant if you're using even a recent version of Subversion, let alone Git.

I'm currently using squash merges to land stuff on trunk, and I guess I need to write up how to do that.  That's the only real place where we still "need" Combinator, because it's hard to explain and error-prone how to land stuff with Subversion and not Combinator.  However, you can also do this with Git, and it's even explained here: <http://twistedmatrix.com/trac/wiki/GitMirror#gitsvnbranchmerging>.

> * Git
> Some of them struggled to get a complete subversion checkout (due to
> dodgy conference wifi I think)  and tried to use git instead. It would
> have been helpful if I'd re-read the latest Twisted git documentation
> in preparation. It explains how to create a diff containing just the
> local changes to a checked out branch.
> * https://twistedmatrix.com/trac/wiki/GitMirror

This documentation is actually in pretty good shape now.  I've managed to follow the instructions several times without errors.  (The trick is, don't try to use git-svn by yourself without help.)

> * The Django Sprint
> By contrast, the neighbouring  Django sprint was much better prepared.
> They'd run a series of tutorial sessions earlier in the conference, on
> how to contribute to Django. So their sprinters hit the ground
> running.
> * https://groups.google.com/forum/#!topic/django-developers/7JFKNoYl2EU
> * http://dont-be-afraid-to-commit.readthedocs.org/en/latest/
> It's a good idea but a lot more work I guess.

On the one hand, the Django project really does a great job onboarding contributors, and they have an amazing culture as regards things like comprehensible documentation and clear workflow.  So we should pay attention to their (in many cases superior) example.

On the other hand, they have a little less code (~140ksloc for Django, ~170ksloc for Twisted) and a substantially larger community. By Ohloh's measure, <http://www.ohloh.net/p/twisted> vs. <http://www.ohloh.net/p/django> is 148 to 992; roughly 7 times the user-base.  So it's not quite reasonable to judge Twisted by the same standard, or to expect that we can achieve Django's results by copying Django's methods, or even that we could faithfully muster enough effort to copy their methods exactly.

So we should definitely try to learn stuff from their methods, but also keep realistic expectations and not get disappointed when we still don't have a Django-size or Django-energy-level sprint :-).

> Anyway, next time I'll know and maybe it'll be a little easier.

Good luck!  Even though you'll know next time, you will still probably need help.  Feel free to ask for help next time; reminding everyone of these difficulties in advance can often help get people interested in doing stuff like grooming the easy queue :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130925/e4c05829/attachment-0002.html>

From julian at grayvines.com  Wed Sep 25 16:11:35 2013
From: julian at grayvines.com (Julian Berman)
Date: Wed, 25 Sep 2013 18:11:35 -0400
Subject: [Twisted-Python] Running unit tests without trial?
Message-ID: <CABJQSkkzofnz7AGSrP=yNss3gp6unnWMhU-UHFD=cAr+iaBUVw@mail.gmail.com>

On Wed, 25 Sep 2013 18:45:44 -0000 exarkun at twistedmatrix.com wrote:
> On 06:15 pm, rowen at uw.edu wrote:
> >Is it possible to run twisted.trial unit tests using python instead of
> >trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?
>
> Sure.  Here's the worst case answer (contents of mytest.py):
>
>     import os
>     os.system("trial myrealtests.py")

There is also http://twistedmatrix.com/trac/ticket/4797

Cheers,
Julian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130925/febd6175/attachment-0002.html>

From rowen at uw.edu  Wed Sep 25 16:40:16 2013
From: rowen at uw.edu (Russell E. Owen)
Date: Wed, 25 Sep 2013 15:40:16 -0700
Subject: [Twisted-Python] Running unit tests without trial?
References: <rowen-AF280F.11150825092013@news.gmane.org>
 <20130925184544.26068.1404349410.divmod.xquotient.2424@top>
Message-ID: <rowen-B1BB28.15401625092013@news.gmane.org>

In article <20130925184544.26068.1404349410.divmod.xquotient.2424 at top>,
 exarkun at twistedmatrix.com wrote:

> On 06:15 pm, rowen at uw.edu wrote:
> >Is it possible to run twisted.trial unit tests using python instead of
> >trial, i.e.: "python mytest.py" instead of  "trial mytest.py"?
> 
> Sure.  Here's the worst case answer (contents of mytest.py):
> 
>     import os
>     os.system("trial myrealtests.py")
> 
> By the way, it's usually better to use the FQPN to run tests - not the 
> filename.  Using the filename exposes you to all kinds of gross edge 
> cases that trial doesn't always handle very well (having to do with how 
> modules are loaded in Python).  So consider this instead:
> 
>     trial mytest
> 
> Or better yet, since you should be distributing and installing your test 
> suite along with your package:
> 
>     trial myproject.test
> 
> There *are* better ways than `os.system´ to get a runnable Python source 
> file that will run your tests though.
> 
> One that shouldn't be much of a surprise is to do exactly what you would 
> do for a stdlib unittest-based test module:
> 
>     if __name__ == '__main__':
>         import unittest
>         unittest.main()

I am surprised it works because I had already tried:

from twisted.trial import unittest
...
if __name__ == '__main__':
    twisted.trial.unittest.main()

but twisted.trial.unittest has no main function (a rude surprise), so it 
never occurred to me that the built-in unittest library's main would 
work.

It seems to be exactly what I want.

> Or you can just invoke the same code that the command line trial script 
> invokes:
> 
>     from twisted.scripts.trial import run
>     run()

I tried that as well, but as you say, it is acting as if it was started 
by trial, so it prints help and quits. I guess it wants some arguments.  
I'm sure it'd be useful for some use cases, but for mine your first 
suggestion looks perfect.

Many thanks.

-- Russell




From hs at ox.cx  Wed Sep 25 23:20:26 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Thu, 26 Sep 2013 07:20:26 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
Message-ID: <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>

>> * Dev Requirements
>> It would be nice to have a dev-requirements.txt file so that they
>> could easily install the necessary development tools. pydoctor,
>> coverage, nevow, zope.interface, twistedchecker, etc
>> See:
>> * https://github.com/hynek/structlog/blob/master/dev-requirements.txt
> 
> What tools actually make use of this file?  

pip install -r dev-requirements.txt

> Why is it desirable to keep this information there, instead of the 'requirements' key in setup.py?

There is no ‘requirements’ key – and ‘requires’ are runtime dependencies.  You don’t want to put your development tools there.

>   (Is there a 'develop_requires' key?)

No: http://pythonhosted.org/distribute/setuptools.html#new-and-changed-setup-keywords

There is tests_require which is also something different from development tools and get used when you run setup.py test which we AFAIK don’t.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130926/94323862/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130926/94323862/attachment.sig>

From sank.daniel at gmail.com  Thu Sep 26 00:03:17 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 25 Sep 2013 23:03:17 -0700
Subject: [Twisted-Python] (no subject)
Message-ID: <CAKN9TDLyy+4H6ybmGkdoA9Ug+-uBvKKTWZViEDXdXQ45a2M9eQ@mail.gmail.com>

Dear Twisted users,

I recently found myself implementing a design pattern that I think
twisted.pb was specifically designed to address. I think I'm not using pb
correctly so I'd like advice. This is a somewhat longish post because I
need to describe the problem I'm trying to solve.

I have done internet searches on Stack Overflow and this list but have not
found the answer to my question. If I've missed something kindly direct me
to the appropriate reference.

I want to implement something functionally equivalent to a network chess
game. I first consider how I would do this on a single computer with no
network (maybe this is bad thinking). Each piece in the game is represented
by an instance of class Agent. Each agent has a .graphics attribute which
is an instance of a class from a GUI toolkit library or equivalent.
Whenever an agent in the game needs to do something there will be business
logic executed by the game objects proper (ie the agents) which will invoke
methods on the .graphics objects to update the screen. This sort of
structure seems natural as it allows easy integration of drag/drop, mouse
click detection etc. It also nicely separates the real business logic from
the GUI.

Now I want to run over the network. The question is how should I set up
references between the client and server objects?

Surely the server will maintain a set of objects representing the pieces in
the game. It seems reasonable that each user's program will have a
corresponding set of objects (with .graphics attributes). The issue is,
what do we mean by "corresponding" and how do these objects talk to one
another? Following is my idea so far:

Each instance of AgentClient has a .server attribute which is a remote
reference to an instance of AgentServer, and each instance of AgentServer
has a .clients attribute which is a list of remote references to instances
of AgentClient.

class AgentServer(pb.referenceable):

    def remote_move(self, targetSquare):
        """Handle move request from client"""
        if self.thisMoveIsLegal(targetSquare):
            self.position = targetSquare
            for client in self.clients:
                client.callRemote("move", targetSquare)

    def thisMoveIsLegal(self, targetSquare):
        <check that this is a legal move>

class AgentClient(pb.referenceable):

    def requestMove(self, targetSquare):
        """Tell server we'd like to move"""
        self.server.callRemote("move", targetSquare)

    def remote_move(self, targetSquare):
        """Server told us we moved"""
        self.position = targetSquare
        self.graphics.setNewPosition(targetSquare)

This isn't THAT bad. The client's requestMove is thin and unecessary (I put
it there for illustration). Still I need to have two separate classes with
corresponding methods to handle moving the piece. This seems like the kind
of thing I could twisted.pb to solve more cleanly if I only would look in
the right place.

This problem gets even worse when I think about how to birth new in-game
objects. It would have to look like this:

class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
        """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

This just looks wrong. Any advice?

Thank you in advance for your help.

Regards,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130925/4796f6a0/attachment-0002.html>

From sank.daniel at gmail.com  Thu Sep 26 00:05:38 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Wed, 25 Sep 2013 23:05:38 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
Message-ID: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>

(Apologies for double send but I forgot the subject line)

Dear Twisted users,

I recently found myself implementing a design pattern that I think
twisted.pb was specifically designed to address. I think I'm not using pb
correctly so I'd like advice. This is a somewhat longish post because I
need to describe the problem I'm trying to solve.

I have done internet searches on Stack Overflow and this list but have not
found the answer to my question. If I've missed something kindly direct me
to the appropriate reference.

I want to implement something functionally equivalent to a network chess
game. I first consider how I would do this on a single computer with no
network (maybe this is bad thinking). Each piece in the game is represented
by an instance of class Agent. Each agent has a .graphics attribute which
is an instance of a class from a GUI toolkit library or equivalent.
Whenever an agent in the game needs to do something there will be business
logic executed by the game objects proper (ie the agents) which will invoke
methods on the .graphics objects to update the screen. This sort of
structure seems natural as it allows easy integration of drag/drop, mouse
click detection etc. It also nicely separates the real business logic from
the GUI.

Now I want to run over the network. The question is how should I set up
references between the client and server objects?

Surely the server will maintain a set of objects representing the pieces in
the game. It seems reasonable that each user's program will have a
corresponding set of objects (with .graphics attributes). The issue is,
what do we mean by "corresponding" and how do these objects talk to one
another? Following is my idea so far:

Each instance of AgentClient has a .server attribute which is a remote
reference to an instance of AgentServer, and each instance of AgentServer
has a .clients attribute which is a list of remote references to instances
of AgentClient.

class AgentServer(pb.referenceable):

    def remote_move(self, targetSquare):
        """Handle move request from client"""
        if self.thisMoveIsLegal(targetSquare):
            self.position = targetSquare
            for client in self.clients:
                client.callRemote("move", targetSquare)

    def thisMoveIsLegal(self, targetSquare):
        <check that this is a legal move>

class AgentClient(pb.referenceable):

    def requestMove(self, targetSquare):
        """Tell server we'd like to move"""
        self.server.callRemote("move", targetSquare)

    def remote_move(self, targetSquare):
        """Server told us we moved"""
        self.position = targetSquare
        self.graphics.setNewPosition(targetSquare)

This isn't THAT bad. The client's requestMove is thin and unecessary (I put
it there for illustration). Still I need to have two separate classes with
corresponding methods to handle moving the piece. This seems like the kind
of thing I could twisted.pb to solve more cleanly if I only would look in
the right place.

This problem gets even worse when I think about how to birth new in-game
objects. It would have to look like this:

class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
        """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

This just looks wrong. Any advice?

Thank you in advance for your help.

Regards,
Daniel Sank
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130925/5fa99ba8/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Sep 26 13:29:57 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 12:29:57 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <68920926-0762-4262-868A-9967610C3D6D@twistedmatrix.com>
 <41B31292-1C05-4614-A6AD-A3BF1A8700BC@ox.cx>
Message-ID: <A9585DB2-FBA4-4A26-8E44-A877548D12C0@twistedmatrix.com>

On Sep 25, 2013, at 10:20 PM, Hynek Schlawack <hs at ox.cx> wrote:

>> What tools actually make use of this file?  
> 
> pip install -r dev-requirements.txt


OK.  If this is the way that this file is intended to be used, perhaps there should be a comment explaining that at the top :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130926/08428e29/attachment-0002.html>

From twisted-python at 2xlp.com  Thu Sep 26 19:51:54 2013
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Thu, 26 Sep 2013 21:51:54 -0400
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
Message-ID: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>


Quick question about (sub)processes in twisted :

	how bad is it to use the subprocess module  ? ( in general / in this application )

I have the following setup :

	- Twisted Daemon that does 5 things (very well!)
	- A new requirement -- to execute 2 scripts on the commandline , one after the other ( ie, blocking )  

the 2 commandline scripts are just tossing some PostgreSQL commands via `postgresql db < file.txt` 

i was looking at reactor.SpawnProcess -- which I know is more correct.  it just seems to be a bit annoying to use , and I know the subprocess module already.  





From glyph at twistedmatrix.com  Thu Sep 26 19:52:04 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 18:52:04 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
Message-ID: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>

On Sep 25, 2013, at 11:05 PM, Daniel Sank <sank.daniel at gmail.com> wrote:

> This isn't THAT bad. The client's requestMove is thin and unecessary (I put it there for illustration). Still I need to have two separate classes with corresponding methods to handle moving the piece.

That's OK.  Don't try to reduce your number of classes just for the sake of having fewer classes.  Each class should have a clearly defined responsibility.  In this case, your responsibilities correspond directly to the things that have to happen on the server (validating the move) and the things that have to happen on the client (updating the graphical representation to correspond to the new game state).  Having more, smaller classes means that it's easier for you to understand each class on its own, and programming is nothing if not the act of promoting local understanding :).

If anything, you should have an additional class to separate out your remote_* responders and the actual internal state.

> This seems like the kind of thing I could twisted.pb to solve more cleanly if I only would look in the right place.


I don't know if this is going to directly address any of your concerns, but have you considered using twisted.spread.flavors.Cacheable?  That will atomically combine the propagation of initial state with the provision of the back-propagation channel for updates to that state.  It's designed for exactly what you're doing, maintaining parallel simulated states on client and server.

Does that help at all?

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130926/5452ebb0/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Sep 26 20:18:16 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 26 Sep 2013 19:18:16 -0700
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
Message-ID: <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>


On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:

> 
> Quick question about (sub)processes in twisted :
> 
> 	how bad is it to use the subprocess module  ? ( in general / in this application )

It's pretty bad ;-).

> I have the following setup :
> 
> 	- Twisted Daemon that does 5 things (very well!)
> 	- A new requirement -- to execute 2 scripts on the commandline , one after the other ( ie, blocking )  
> 
> the 2 commandline scripts are just tossing some PostgreSQL commands via `postgresql db < file.txt` 
> 
> i was looking at reactor.SpawnProcess -- which I know is more correct.  it just seems to be a bit annoying to use , and I know the subprocess module already.  

The subprocess module does not have any way to spawn a subprocess and get its output and exit status as events in the reactor; its methods all block.  You can sort of re-build spawnProcess yourself from scratch, but ... then you'd just have spawnProcess with a slightly more subprocess-y API, and you'd be better off writing a utility function that wraps spawnProcess for yourself.

Could you write up why you feel it's "annoying"?  Maybe we can improve spawnProcess so it works better for you in the future.

-glyph




From sank.daniel at gmail.com  Thu Sep 26 21:25:31 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 26 Sep 2013 20:25:31 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
Message-ID: <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>

> If anything, you should have an additional class to separate out your
remote_* responders and the actual internal state.

Indeed.

> I don't know if this is going to *directly* address any of your concerns,
but have you considered using twisted.spread.flavors.Cacheable?

This is funny. I read the documentation on Cacheable a few times and
eventually figured the warning about it being "hard to understand" was
there for a reason. I'll check it out in earnest now that I know it's
relevant. Many thanks.

Regards,
Daniel Sank

P.S. Thanks for Twisted. It rocks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130926/952e9969/attachment-0002.html>

From haggardii at gmail.com  Thu Sep 26 22:35:14 2013
From: haggardii at gmail.com (Matt Haggard)
Date: Thu, 26 Sep 2013 22:35:14 -0600
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
 <77CCBFC1-A246-49B2-B293-860CEE13D9D7@twistedmatrix.com>
Message-ID: <CAL+xXwOFeFdOdPSFzWBon6z2-ioZNDoGO0bd0bx5bJDmjuw0tQ@mail.gmail.com>

On Sep 26, 2013 8:18 PM, "Glyph" <glyph at twistedmatrix.com> wrote:
>
>
> On Sep 26, 2013, at 6:51 PM, Jonathan Vanasco <twisted-python at 2xlp.com>
wrote:
>
> Could you write up why you feel it's "annoying"?  Maybe we can improve
spawnProcess so it works better for you in the future.

I'm also interested in what you feel is annoying. Please write this (it
will help improve documentation too).

Also, check out http://twistedftw.org/articles.html#!/processes/getstdout

Matt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130926/b9ad880e/attachment-0002.html>

From sank.daniel at gmail.com  Thu Sep 26 22:48:14 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Thu, 26 Sep 2013 21:48:14 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
Message-ID: <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>

Upon re-reading the Cacheable docs I still don't understand how to use
it. Can we take my previous home-brewed example and use that as a
launch point for illustrating how to use Cacheable? Here's the
example.

We assume the client has a PlayerClient instance with .server pointing
to a PlayerServer instance. The PlayerServer has a .client list of
PlayerClients. The code fragments are the methods needed to spawn a
new Agent and hook up the client and server objects.


class PlayerServer(pb.referenceable):

    def newAgent(self, asker):
       """Client told us it wants a new Agent"""
        if self.thisIsLegal():
            a = AgentServer()
            self.agents.append(a)
            for client in self.clients:
                d = client.callRemote("newAgent", a)
                d.addCallback(lambda obj: a.clients.append(obj))

class PlayerClient(bp.referenceable):

    def requestNewAgent(self):
        """Tell the server we want to spawn a new Agent"""
        self.server.callRemote("newAgent", self)

    def newAgent(self, serverObj):
        a = AgentClient()
        self.agents.append(a)
        a.server = serverObj
        return a

How does Cacheable help do this?



From p.mayers at imperial.ac.uk  Fri Sep 27 01:36:10 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Sep 2013 08:36:10 +0100
Subject: [Twisted-Python] question about subprocess
In-Reply-To: <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
References: <20080328144506.6859.1560292247.divmod.quotient.23915@ohm>
 <D23EB576-C472-4B2D-BF30-AEDAC5E8D6FC@bubblehouse.org>
 <AE649050-56F7-4A2C-ACDB-FD6A9AB3A20E@2xlp.com>
Message-ID: <5245356A.9060002@imperial.ac.uk>

On 09/27/2013 02:51 AM, Jonathan Vanasco wrote:

> i was looking at reactor.SpawnProcess -- which I know is more
> correct.  it just seems to be a bit annoying to use

Are you aware of twisted.internet.utils.getProcessOutputAndValue? For 
simple spawn/check cases, that's pretty much always the best option IMO.

If you have a case where you need to write to a child process - well, I 
don't see how you hope to avoid using spawnProcess and a 
ProcessProtocol; like others I'd be interested to hear what you dislike 
about the API (I have problems with a bunch of Twisted APIs, but that 
one I quite like ;o)



From p.mayers at imperial.ac.uk  Fri Sep 27 01:46:06 2013
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Fri, 27 Sep 2013 08:46:06 +0100
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
Message-ID: <524537BE.20206@imperial.ac.uk>

On 09/27/2013 05:48 AM, Daniel Sank wrote:
> Upon re-reading the Cacheable docs I still don't understand how to use
> it.

Have you seen this:

http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html#auto9

Essentially, you move all attribute access to accessor methods and do 
callRemote to propagate the changes out to observers; new observers are 
passed to you in getStateToCacheAndObserveFor.

Observers respond to observe_xxx methods, and implement a 
setCopyableState method.

Then you map the cacheable and observer with pb.setUnjellyableForClass



From sank.daniel at gmail.com  Fri Sep 27 02:44:34 2013
From: sank.daniel at gmail.com (Daniel Sank)
Date: Fri, 27 Sep 2013 01:44:34 -0700
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <524537BE.20206@imperial.ac.uk>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
 <524537BE.20206@imperial.ac.uk>
Message-ID: <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>

> Have you seen this:
>
> http://twistedmatrix.com/documents/current/core/howto/pb-copyable.html#auto9

No, I hadn't. That example is extremely helpful, thank you.

I just realized that the documentation pages I'd been reading are all
linked from here:

http://twistedmatrix.com/documents/current/core/howto/index.html

but don't link to each other, which is why I didn't find the page you
referenced in your post. I should learn to pay attention to URLs :P

Regards,
Daniel



From _ at lvh.io  Fri Sep 27 03:21:42 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Fri, 27 Sep 2013 11:21:42 +0200
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
 <EB8457F1-9D6C-47F9-8BB8-BE2A3B4FD801@twistedmatrix.com>
 <CAKN9TDKg5T-eiVMggxGBFhMvDxLxGnqBPuS6TiePmG6eV55BkA@mail.gmail.com>
 <CAKN9TDLNjc3swCBiN_B+VkaKE2B30d6oc4fZ2H68q4BMSKp+kQ@mail.gmail.com>
 <524537BE.20206@imperial.ac.uk>
 <CAKN9TDLS1Gy3cjjNABvcB-+uzbg9zPWsgOV01yuvp5iak64sPA@mail.gmail.com>
Message-ID: <CAE_Hg6aKsLzcV698n2+EX9P=38hMZGYojT6LDiiYJt5SiTAuDQ@mail.gmail.com>

Hi Daniel,

If you're interested in PB, you may also be interested in Foolscap, the
object-capability extension to PB.

Foolscap lives at: http://foolscap.lothar.com/trac
Feature overview: http://foolscap.lothar.com/trac/wiki/FoolscapFeatures

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130927/59006688/attachment-0002.html>

From dripton at ripton.net  Fri Sep 27 10:53:34 2013
From: dripton at ripton.net (David Ripton)
Date: Fri, 27 Sep 2013 12:53:34 -0400
Subject: [Twisted-Python] Clean pb solution for two-way object sync?
In-Reply-To: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
References: <CAKN9TDL-Jg8-FUZZzo=Rthsncn3ZzMMCD9xvPirCRCZb8+BaMg@mail.gmail.com>
Message-ID: <5245B80E.8080501@ripton.net>

On 09/26/2013 02:05 AM, Daniel Sank wrote:

> I want to implement something functionally equivalent to a network chess
> game. I first consider how I would do this on a single computer with no
> network (maybe this is bad thinking). Each piece in the game is
> represented by an instance of class Agent. Each agent has a .graphics
> attribute which is an instance of a class from a GUI toolkit library or
> equivalent. Whenever an agent in the game needs to do something there
> will be business logic executed by the game objects proper (ie the
> agents) which will invoke methods on the .graphics objects to update the
> screen. This sort of structure seems natural as it allows easy
> integration of drag/drop, mouse click detection etc. It also nicely
> separates the real business logic from the GUI.

I think you have the right idea but that's still a bit too much coupling 
between the logic and the UI for my taste.  I don't want the game logic 
to have a .graphics attribute; I want the game logic to fling game 
events to one or more consumers, each of which may or may not be a GUI. 
  (Maybe it's a headless AI player.  Maybe it's a logging service.  The 
server shouldn't care.)

> Now I want to run over the network. The question is how should I set up
> references between the client and server objects?

There's more than one way to do it.

Here's my game that uses PB: https://github.com/dripton/Slugathon

I used PB (because AMP and Foolscap didn't exist yet), but I didn't use 
the fancy bits of PB like Cacheable, because I strongly prefer simple 
remote method calls to fancy remote objects.  But if you grep for 
callRemote, remote_, and perspective_, you can see how I did it.

As noted above, my game server flings events (see Action.py for what 
they look like) to both GUI and AI clients.  The actions are just little 
value objects that happen to inherit from pb.Copyable and pb.RemoteCopy 
for convenience, though they just as easily be JSON blobs.

Of course, it's probably much easier to just use Cacheable.  It comes 
down to programmer preference.

One piece of advice: do the network code first and always exercise it, 
even when playing on a single computer.  Every time I've written a 
single-machine game first then tried to add networking later, the 
networking has been a mess to debug.

-- 
David Ripton    dripton at ripton.net



From trac at twistedmatrix.com  Sun Sep 29 00:05:14 2013
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 29 Sep 2013 06:05:14 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1380434714.76.2536777919359202303@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130929/60545205/attachment-0002.html>

From hs at ox.cx  Sun Sep 29 03:49:16 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Sun, 29 Sep 2013 11:49:16 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
Message-ID: <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>

Am 24.09.2013 um 22:39 schrieb Richard Wall <m-lists at the-moon.net>:

> * Dev Requirements
> It would be nice to have a dev-requirements.txt file so that they
> could easily install the necessary development tools. pydoctor,
> coverage, nevow, zope.interface, twistedchecker, etc

JFTR, we need to fix nevow first to be installable w/o Twisted being already present:

***

Downloading/unpacking nevow (from -r dev-requirements.txt (line 4))
  Using download cache from /Users/hynek/.pip/cache/https%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FN%2FNevow%2FNevow-0.10.0.tar.gz
  Running setup.py egg_info for package nevow
    Traceback (most recent call last):
      File "<string>", line 16, in <module>
      File "/Users/hynek/.virtualenvs/tt/build/nevow/setup.py", line 3, in <module>
        from nevow import __version__ as version
      File "nevow/__init__.py", line 5, in <module>
        from nevow._version import version
      File "nevow/_version.py", line 2, in <module>
        from twisted.python import versions
    ImportError: No module named twisted.python
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):

  File "<string>", line 16, in <module>

  File "/Users/hynek/.virtualenvs/tt/build/nevow/setup.py", line 3, in <module>

    from nevow import __version__ as version

  File "nevow/__init__.py", line 5, in <module>

    from nevow._version import version

  File "nevow/_version.py", line 2, in <module>

    from twisted.python import versions

ImportError: No module named twisted.python

***

I have that on my todo-list since the beginning of time but never got around to it.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130929/ef7e063f/attachment.sig>

From _ at lvh.io  Mon Sep 30 03:45:39 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 30 Sep 2013 11:45:39 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a locator,
	not the proto?
Message-ID: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>

Hi everyone,


I think I've hit one of those cases where AMP really seems to want
everything (locator, receiver, sender) to be an instance of t.p.amp.AMP :-(

I've written some code that tries to multiplex stream transports over AMP:

https://github.com/lvh/txampext/blob/multiplexing/txampext/multiplexing.py

The repo contains an example server and client, which demonstrate the issue:

https://github.com/lvh/txampext/blob/multiplexing/docs/examples/multiplexing_client.py
https://github.com/lvh/txampext/blob/multiplexing/docs/examples/multiplexing_server.py

In order to do some of this multiplexing, I need access to the protocol
instance inside the responder on the server side. Fortunately, I already
had some code that exposed box senders (after a lot of advice from Glyph).
I modified it to expose the protocol as well:

https://github.com/lvh/txampext/blob/multiplexing/txampext/exposed.py#L41

However, it turns out fromBox gets called with the *responder locator* as
the "proto" argument, not the actual protocol.

The server has a pudb call that makes it easy (?!) to trace this down. The
CommandLocator class, inside doit (a function defined in
_wrapWithSerialization) passes "self" to command.parseArguments:

https://twistedmatrix.com/trac/browser/trunk/twisted/protocols/amp.py#L1015

This is the part where I think the contract is broken, since parseArguments
claims to want the protocol (well, it says it wants the AMP protocol,
which, subclassing everything, is also all of the things, of course), but
receives the responder locator.

What am I doing wrong? Is this a bug?

confusedly,
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/027bb877/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Sep 30 12:41:52 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 11:41:52 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
Message-ID: <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>


On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> What am I doing wrong? Is this a bug?

I think it's pretty clearly a bug.  Calling the argument "proto" in the first place indicates the nature of the confusion.

There are parts of the flow here from bytes to method execution and back (like _wrapWithSerialization) which are nice for composition, but the fact that they're private sort of ruins their utility for extensibility.

Looking at the code you're trying to write in txampext though, the problem appears to be simply that you're writing functionality close enough to AMP's core that you should be making the changes to AMP directly, and fixing the issue by making changes to AMP itself rather than trying to work around it externally.  The way I was going to recommend fixing it before I clicked on your link was by writing something like ExposingArgument and accessing the locator/receiver/sender via that new API rather than via the 'proto' argument at all :)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/523e2617/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Sep 30 12:42:24 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 11:42:24 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
Message-ID: <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>

On Sep 29, 2013, at 2:49 AM, Hynek Schlawack <hs at ox.cx> wrote:

> I have that on my todo-list since the beginning of time but never got around to it.

Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/36070e2e/attachment-0002.html>

From hs at ox.cx  Mon Sep 30 12:51:37 2013
From: hs at ox.cx (Hynek Schlawack)
Date: Mon, 30 Sep 2013 20:51:37 +0200
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
Message-ID: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>


Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:

>> I have that on my todo-list since the beginning of time but never got around to it.
> 
> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?

Yes, I believe it’s https://bugs.launchpad.net/nevow/+bug/1091055
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/c12043a2/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 235 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20130930/c12043a2/attachment.sig>

From _ at lvh.io  Mon Sep 30 13:09:41 2013
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 30 Sep 2013 21:09:41 +0200
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
 locator, not the proto?
In-Reply-To: <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
Message-ID: <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>

Hi Glyph,

Thanks for your response!

On Mon, Sep 30, 2013 at 8:41 PM, Glyph <glyph at twistedmatrix.com> wrote:

> On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:
>
> What am I doing wrong? Is this a bug?
>
>
> I think it's pretty clearly a bug.  Calling the argument "proto" in the
> first place indicates the nature of the confusion.
>
> There are parts of the flow here from bytes to method execution and back
> (like _wrapWithSerialization) which are nice for composition, but the fact
> that they're private sort of ruins their utility for extensibility.
>
> Looking at the code you're trying to write in txampext though, the problem
> appears to be simply that you're writing functionality close enough to
> AMP's core that you should be making the changes to AMP directly, and
> fixing the issue by making changes to AMP itself rather than trying to work
> around it externally.  The way I was going to recommend fixing it before I
> clicked on your link was by writing something like ExposingArgument and
> accessing the locator/receiver/sender via that new API rather than via the
> 'proto' argument at all :)
>

I'm a little confused why that would help; you're saying there should be a
new API that gives arguments access to the locator, receiver, sender? What
would that look like? Something along the lines of fromBox/toBox, or are
you thinking of a more direct approach where the locator has a reference to
the other components? (Given your suggestion of not going through the proto
argument, I imagine something closer to the latter.)

My contributions to AMP have been more of the defect-findy kind, but I
could certainly turn them more into the code-contributy kind. I imagine I'm
not the first person to want tests for command classes (
https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a
nested AMP box (
https://github.com/lvh/txampext/blob/master/txampext/nested.py).

I look forward to being in the same locality as you, I presume it will make
me more productive ;)

-glyph
>

cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/052cb3c0/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Sep 30 16:12:37 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 15:12:37 -0700
Subject: [Twisted-Python] Twisted Sprint Report (2013-09-23)
In-Reply-To: <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
References: <CABefbUoAG7fgLAe39-GOQT9Jd1+SGDhoM2NEYEWaH25z4VL_UQ@mail.gmail.com>
 <20130924130745.26068.1611267828.divmod.xquotient.2397@top>
 <CABefbUoZYX=FW6d5_Xyn4Wv32K8-40J2SMxj1Yy1vBir_K44gQ@mail.gmail.com>
 <C53BD72E-A1D2-4C87-BA26-101BE4D8C5DF@ox.cx>
 <3B04108B-E1C9-4EE4-B230-0DF9F0E90C44@twistedmatrix.com>
 <1584CF90-318A-4253-A6F8-502B7AEB60F7@ox.cx>
Message-ID: <AC499CA1-50A2-47CC-8671-4C63476ECA6F@twistedmatrix.com>


On Sep 30, 2013, at 11:51 AM, Hynek Schlawack <hs at ox.cx> wrote:

> 
> Am 30.09.2013 um 20:42 schrieb Glyph <glyph at twistedmatrix.com>:
> 
>>> I have that on my todo-list since the beginning of time but never got around to it.
>> 
>> Do you have a link to a Nevow bug in some tracker (launchpad, perhaps?) that is tracking this?
> 
> Yes, I believe it’s https://bugs.launchpad.net/nevow/+bug/1091055

Thanks for the reference.

-glyph


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/6d3faa3c/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Sep 30 16:59:22 2013
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 30 Sep 2013 15:59:22 -0700
Subject: [Twisted-Python] AMP Argument.toBox's proto argument is a
	locator, not the proto?
In-Reply-To: <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
References: <CAE_Hg6a6cPQMF4XXAHwLFSKL-=LEbDgVBM6t4Y93oMcmfuR6Ug@mail.gmail.com>
 <E911B264-65A6-4BBF-8E76-4B88803F5E1B@twistedmatrix.com>
 <CAE_Hg6Z-ocrkb2+hWFDM55Cvt=YVQp3Mb9BFKZ8QO7rB+0Q73Q@mail.gmail.com>
Message-ID: <8E13BB54-88C0-4647-B785-D44323091B88@twistedmatrix.com>


On Sep 30, 2013, at 12:09 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Glyph,
> 
> Thanks for your response!
> 
> On Mon, Sep 30, 2013 at 8:41 PM, Glyph <glyph at twistedmatrix.com> wrote:
> On Sep 30, 2013, at 2:45 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
>> What am I doing wrong? Is this a bug?
> 
> I think it's pretty clearly a bug.  Calling the argument "proto" in the first place indicates the nature of the confusion.
> 
> There are parts of the flow here from bytes to method execution and back (like _wrapWithSerialization) which are nice for composition, but the fact that they're private sort of ruins their utility for extensibility.
> 
> Looking at the code you're trying to write in txampext though, the problem appears to be simply that you're writing functionality close enough to AMP's core that you should be making the changes to AMP directly, and fixing the issue by making changes to AMP itself rather than trying to work around it externally.  The way I was going to recommend fixing it before I clicked on your link was by writing something like ExposingArgument and accessing the locator/receiver/sender via that new API rather than via the 'proto' argument at all :)
> 
> I'm a little confused why that would help; you're saying there should be a new API that gives arguments access to the locator, receiver, sender? What would that look like? Something along the lines of fromBox/toBox, or are you thinking of a more direct approach where the locator has a reference to the other components? (Given your suggestion of not going through the proto argument, I imagine something closer to the latter.)

For someone confused about why it would help, you are pretty close to the mark :).

I am not trying to propose a specific new implementation mechanism, but rather to say that fromBox/toBox are broken, in that the contract of the 'proto' argument is incompletely specified.  Most of the code I can think of that wants to use that really wants the transport rather than the "protocol", but nothing within AMP itself actually uses those arguments; in fact, searching the usual suspects (epsilon, vertex) I can't even find any Arguments that use the 'proto' argument for anything useful.

If I recall, I believe the idea behind it was to allow an AMP responder within Vertex to return the peer's IP address back to the peer, from within an authenticated AMP route that (because it was a route) wasn't necessarily connected directly to the transport (and therefore couldn't just do self.transport.getPeer()).  Ironically I don't think it'll actually work for that now :-).

When we pull the authentication logic in from <http://bazaar.launchpad.net/~divmod-dev/divmod.org/trunk/view/head:/Epsilon/epsilon/ampauth.py>, you might write a responder that's interested in authentication information that lives in some other relation to the protocol.

So in order to fix fromBox/toBox, we need to do a fix that firms up that contract and perhaps exposes more than a Protocol object.  The *recommended* API should be more or less like what ExposingArgument is doing - specify an Argument that asks for a particular attribute of the transport or the protocol or the authentication context or whatever, the implementation details may involve other lower-level public APIs.

> My contributions to AMP have been more of the defect-findy kind, but I could certainly turn them more into the code-contributy kind. I imagine I'm not the first person to want tests for command classes (https://github.com/lvh/txampext/blob/master/txampext/commandtests.py) or a nested AMP box (https://github.com/lvh/txampext/blob/master/txampext/nested.py).

That would be cool.  And, you know, that auth thing I said :-).

> I look forward to being in the same locality as you, I presume it will make me more productive ;)

Living in that particular locale is going to spoil me.  I feel like I may need to move somewhere more remote so that I am forced to have nice transparent discussions on the record like this one, on mailing lists on IRC :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20130930/164dd613/attachment-0002.html>

