From lists at itamarst.org  Mon Oct  1 11:34:50 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 01 Oct 2001 17:34:50 +0200
Subject: [Twisted-Python] New thread-based select replacement
Message-ID: <3BB88D1A.7090405@itamarst.org>

Great to see I can run on Java now - I'll test out the performance 
difference ASAP. Thanks glyph!

I would like to point out that it might be nice to use this on CPython 
as well - both for performance comparision and for other platforms that 
don't support select() (BeOS? PlayStation 2? Amiga?). Haven't looked at 
the code yet so I don't know if that's dealt with.





From jasbahr at onebox.com  Tue Oct  2 17:35:49 2001
From: jasbahr at onebox.com (Jason Asbahr)
Date: Tue, 02 Oct 2001 16:35:49 -0500
Subject: [Twisted-Python] Twisted T-Shirts
Message-ID: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>

http://www.twisted.co.uk/orders/orderuk2_def.htm

Ok, not quite, but after looking at this link, it's OBVIOUS
we need to infiltrate IPC 10 wearing actual Twisted t-shifts.

I favor black cotton.  :-)

Jason

PS -- The Twisted Records designs are not a bad place to start.
      Simple, but interesting.  





From carmstro at twistedmatrix.com  Tue Oct  2 19:20:15 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 2 Oct 2001 19:20:15 -0400
Subject: [Twisted-Python] Twisted T-Shirts
In-Reply-To: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>
References: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>
Message-ID: <20011002192015.A26864@Fookidla.org>

I've been tinkering with some Twisted clothing designs for a while. I'll
put some together and put 'em on my web site soon. I can put them up on
our cafepress store (http://cafepress.com/poundpython, IIRC) so people
can order them without any hassle.

There's also discussion about having numbered pins: "I am (not) PSU agent
#n" or somesuch. Does anyone know what we can do to get these? Who's going
to do it (ie, who am I sending money to ;))?

Oh yes, I just remembered. The last time I was tinkering with a shirt design
I found myself lacking some base twisted logo stuff: glyph, can you send
me the .xcfs of relevant logos?

On Tue, Oct 02, 2001 at 04:35:49PM -0500, Jason Asbahr wrote:
> 
> http://www.twisted.co.uk/orders/orderuk2_def.htm
> 
> Ok, not quite, but after looking at this link, it's OBVIOUS
> we need to infiltrate IPC 10 wearing actual Twisted t-shifts.
> 
> I favor black cotton.  :-)
> 
> Jason
> 
> PS -- The Twisted Records designs are not a bad place to start.
>       Simple, but interesting.  
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Wed Oct  3 06:18:12 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 12:18:12 +0200
Subject: [Twisted-Python] Twisted doesn't work in threaded mode using jython
Message-ID: <3BBAE5E4.4010506@itamarst.org>

One issue is the lack of errno, which StringIO requires (solved by making an 
empty errno.py). So this can be solved trivially.

A more serious issue is the lack of a _JavaWaker...





From lists at itamarst.org  Wed Oct  3 12:57:43 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 18:57:43 +0200
Subject: [Twisted-Python] Interface documentation
Message-ID: <3BBB4387.9010304@itamarst.org>

Right now, too much of the interface documentation is mixed up with the 
class implementation (if there *is* documentation). I propose making 
separate interface classes used only for documentation purposes. For 
example, in twisted.internet we might have interface.py with the following 
code, which would allow us to remove all the docstrings from 
abstract.FileDescriptor (that class is way too huge anyway), and maybe add a 
__implements__ = (interfaces.IProducer,) to the FileDescriptor class:


twisted/internet/interfaces.py:
==============================================================================
class IProducer:
     """A producer produces data for a consumer.

     If this is a streaming producer, it will only be
     asked to resume producing if it has been previously asked to pause.
     Also, if this is a streaming producer, it will ask the producer to
     pause when the buffer has reached a certain size.

     In other words, a streaming producer is expected to produce (write to
     this consumer) data in the main IO thread of some process as the result
     of a read operation, whereas a non-streaming producer is expected to
     produce data each time resumeProducing() is called.

     If this is a non-streaming producer, resumeProducing will be called
     immediately, to start the flow of data.  Otherwise it is assumed that
     the producer starts out life unpaused.
     """

     def resumeProducing(self):
         """Resume producing data.

         This tells a producer to re-add itself to the main loop and produce
         more data for its consumer.
         """
         pass

     def pauseProducing(self):
         """Pause producing data.

         Tells a producer that it has produced too much data to process for
         the time being, and to stop until resumeProducing() is called.
         """
         pass

     def stopProducing(self):
         """Stop producing data.

         This tells a producer that its consumer has died, so it must stop
         producing data for good.
         """
         pass







From lists at itamarst.org  Wed Oct  3 13:01:21 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 19:01:21 +0200
Subject: [Twisted-Python] Interface documentation
References: <3BBB4387.9010304@itamarst.org>
Message-ID: <3BBB4461.9040900@itamarst.org>

Oh yes, next you ask - what is this good for?

Well, you can mark a class as supporting a specific interface, and I have 
some unit testing code that makes sure that the class's methods have the 
same signatures as the interface's methods. And this way the docstrings for 
a specific interface are together in one one place.





From acapnotic at twistedmatrix.com  Fri Oct  5 00:23:46 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 4 Oct 2001 21:23:46 -0700
Subject: [Twisted-Python] Re: pretzel
Message-ID: <20011004212346.A1238@troglodyte.menefee>

What's the "if" clause in the features loop of BreadStick.sendMessage()
supposed to be doing?  

Why is the feature's method named "do" instead of "sendMessage"?  What's
the difference between features and SaltGrains?

What's the difference between a SaltGrain (or feature) and a
pb^H^Hpassport.Service?  May saltGrain.network be the same as
service.serviceName?  May person be a passport.Identity?

Must message be a string?


See...  Pretzel puzzles me.  This project has some ideas with great
potential, and it's precisely the sort of thing Twisted is good at...
so I don't get why you seem to be intent on re-implementing Twisted
inside of Twisted.  I guess that would make Pretzel live up to its name,
but...

This is why I kept asking what features pretzel was going to have,
because that's where I thought the fun was going to be.  If you had an
factoid-service, for example, which could be accessed through both IRC
and the web, that could be cool.  And there are definately some
protocol/interface-specific gaps to fill in before that will work. i.e.
msg'ing "Hi" to a Twisted IRC client doesn't currently set up any
sort of broker/viewpoint for you, so that'd be an excellent area for
?berbot code to cover...

But establishing local services (SaltGrains) and passing messages
between them...  That's what Twisted *does*, no need to create more
infastructure there.

Am I missing something?  I may just be speaking up too soon on a subject
I know nothing about, but hey, that's what you get for checking it in to
CVS.  ;)

"No, you're not going to trick me into writing IRC code *again*"-ly,

 - Kevin (Acapnotic)

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is 16.87 days old, waning gibbous, 95% illuminated.




From carmstro at twistedmatrix.com  Fri Oct  5 08:55:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 5 Oct 2001 08:55:55 -0400
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <20011004212346.A1238@troglodyte.menefee>
References: <20011004212346.A1238@troglodyte.menefee>
Message-ID: <20011005085555.A2974@Fookidla.org>

On Thu, Oct 04, 2001 at 09:23:46PM -0700, Kevin Turner wrote:
> What's the "if" clause in the features loop of BreadStick.sendMessage()
> supposed to be doing?  
> 
> Why is the feature's method named "do" instead of "sendMessage"?  What's
> the difference between features and SaltGrains?

Ok, SaltGrains are things like "IRC Grain", "Words Grain" -- they're 
client interfaces to other services (not services themselves, to answer
your question directly below). "features" (I'd like a better name for
these) are things like "factoid engine", "fortune", etc. the reason for
that 'if' (I guess my comment wasn't clear enough) was so that features
could decide if they want the message to be distributed to the rest
of the networks or not. I'm not so sure this is needed now, as I originally
planned for private message passing to be a feature, but I built that into
the actual BreadStick/SaltGrain protocol (sendPrivMessage). So, who knows
what the future of 'features' holds. I'll have to think a little about it.
:-)

> 
> What's the difference between a SaltGrain (or feature) and a
> pb^H^Hpassport.Service?  May saltGrain.network be the same as
> service.serviceName?  May person be a passport.Identity?
> 
> Must message be a string?

Yeah, although it's not enforced or caught yet.

> See...  Pretzel puzzles me.  This project has some ideas with great
> potential, and it's precisely the sort of thing Twisted is good at...
> so I don't get why you seem to be intent on re-implementing Twisted
> inside of Twisted.  I guess that would make Pretzel live up to its name,
> but...

See my next comment.

> But establishing local services (SaltGrains) and passing messages
> between them...  That's what Twisted *does*, no need to create more
> infastructure there.

You're right. This is just a bit of glue code to hook a bunch of clients
together at once. Twisted doesn't have this yet; a centralized place where a
bunch of objects can send messages to and receive messages from other
objects. We don't need to use PB for this because there's no reason to
network the actual BreadStick/SaltGrains. The SaltGrains will handle their
own communications with other services, be it through a PB interface, an IRC
protocol, etc.

> Am I missing something?  I may just be speaking up too soon on a subject
> I know nothing about, but hey, that's what you get for checking it in to
> CVS.  ;)

I think the main confusion was your misunderstanding that SaltGrains are
similar to services -- remember, they're just *client* interfaces to other
services. A SaltGrain may represent a "ry" on some IRC network somewhere,
or a MUD, or...

Well, I've thought a little harder, and I guess I should clear something
else up. Technically, a SaltGrain could also be a server of some sort,
or a Resource on a web server, too. So, I guess SaltGrain should be
generally defined as "an agent who can transmit and/or receive data to/from
other users". But the general case will probably be some client agent
that connects to a remote server as a regular user to communicate with other
users on that service.

> "No, you're not going to trick me into writing IRC code *again*"-ly,

But-it's-so-much-fun!-ly yours,

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Fri Oct  5 10:51:13 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Oct 2001 16:51:13 +0200
Subject: [Twisted-Python] Re: pretzel
References: <20011004212346.A1238@troglodyte.menefee>
Message-ID: <3BBDC8E1.8070105@itamarst.org>

I find the terms breadstick and saltgrain to be confusing - class names 
should describe what they do! E.g. for all the fun had with names in 
twisted.spread, pb defines classes named Perspective, etc., not Peanut or 
Chunky.





From mattcampbell at pobox.com  Fri Oct  5 15:49:59 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Fri, 5 Oct 2001 14:49:59 -0500
Subject: [Twisted-Python] Can pipes be used in non-blocking mode?
Message-ID: <20011005144959.A16633@mattcamp.dyn.dhs.org>

I noticed that twisted.internet.process currently uses pipes in blocking
mode.  In particular, when ProcessWriter calls os.write(), it blocks.
Can writing be done in non-blocking mode instead?  Thanks.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From glyph at twistedmatrix.com  Fri Oct  5 17:20:30 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 5 Oct 2001 16:20:30 -0500
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <3BBDC8E1.8070105@itamarst.org>
Message-ID: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>

On Friday, October 5, 2001, at 09:51  AM, Itamar Shtull-Trauring wrote:

> I find the terms breadstick and saltgrain to be confusing - class names 
> should describe what they do! E.g. for all the fun had with names in 
> twisted.spread, pb defines classes named Perspective, etc., not Peanut 
> or Chunky.

I agree.  In fact, "pb" really is a "Perspective Broker" and Jelly is an 
alternative mode for "preserving" things to Pickle.  ("nutella" may 
possibly be a peer-to-peer file-sharing network in the same package, but 
I think there's some precedent for that, too.)  A slight tinge of whimsy 
is fun for naming stuff but the names I saw in those other emails were 
just ridiculous.  (Not in the coding standard yet but will be soon -- 
distinctiveness and brevity are preferred at the module level for 
naming, but descriptiveness and clarity are what you need for classes 
and methods)

This thread began for me (and for the list archiver, apparently) with 
"Re: pretzel".  I have no idea what "pretzel" is or where it came from, 
and so far it sounds like a pretty bad idea.  Could someone please 
explain it in depth?  Especially expound upon "Twisted doesn't have this 
yet; a centralized place where a bunch of objects can send messages to 
and receive messages from other objects."  This is at once maddeningly 
vague and precise enough to be completely incorrect.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Fri Oct  5 17:24:40 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 5 Oct 2001 16:24:40 -0500
Subject: [Twisted-Python] Can pipes be used in non-blocking mode?
In-Reply-To: <20011005144959.A16633@mattcamp.dyn.dhs.org>
Message-ID: <E15pcYt-0001y6-00@zaibach.twistedmatrix.com>

On Friday, October 5, 2001, at 02:49  PM, Matt Campbell wrote:

> I noticed that twisted.internet.process currently uses pipes in blocking
> mode.  In particular, when ProcessWriter calls os.write(), it blocks.
> Can writing be done in non-blocking mode instead?  Thanks.
> --
> Matt Campbell <http://www.pobox.com/~mattcampbell/>

Sorry, slight oversight!  I don't think there's a reason that they 
block; if it doesn't break anything I'll fix that in 0.11 (any day 
now...)

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From carmstro at twistedmatrix.com  Fri Oct  5 19:34:48 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 5 Oct 2001 19:34:48 -0400
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
References: <3BBDC8E1.8070105@itamarst.org> <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
Message-ID: <20011005193448.A575@Fookidla.org>

On Fri, Oct 05, 2001 at 04:20:30PM -0500, Glyph Lefkowitz wrote:
[snip]
> just ridiculous.  (Not in the coding standard yet but will be soon -- 
> distinctiveness and brevity are preferred at the module level for 
> naming, but descriptiveness and clarity are what you need for classes 
> and methods)

Alright, I've commited changes. UserAgent and MessageDistributor sound OK?

> This thread began for me (and for the list archiver, apparently) with 
> "Re: pretzel".  I have no idea what "pretzel" is or where it came from, 
> and so far it sounds like a pretty bad idea.  Could someone please 
> explain it in depth?  Especially expound upon "Twisted doesn't have this 
> yet; a centralized place where a bunch of objects can send messages to 
> and receive messages from other objects."  This is at once maddeningly 
> vague and precise enough to be completely incorrect.

Don't get too angry with me =) Really all pretzel is is a bit of glue code.
The idea behind it is basically an "IRC bot on crack" -- only not dependant
on the IRC part. It's a pluggable bot, that can support whatever types of
communication media you want it to, be it Words, IRC, a quake server, a
MUD, etc. Twisted really doesn't have this yet -- even if I used PB or
somesuch I'd have to actually implement the same stuff, basically. And this
definitely doesn't need PB, since none of it would ever need to be
spreadable.

"SaltGrains" (now UserAgents), are, like I said in my last email (i'm not
sure if you got it), basically just clients that know how to talk to some
service and thus talk to the other users on that service. the
MessageDistributor (formerly "BreadStick") takes messages from these agents,
and distributes them to the rest of the agents. It's really very simple,
thus backing up my claim that it's just a bit of glue code. =) The cool
stuff is going to be the different UserAgents and Features we implement.
We'll have Quake servers giving us deathmatch stats, and we'll be talking to
people on MUDs and other IRC networks.

As you may've noticed, yes, this will be a ry-killer. =)

And for a bit of history -- this idea started with skreech and his old
'mudbot' program which he used to connect Quake servers, IRC, and his MUD.
We thought it'd be fun to reimplement it (much better) in Twisted, so I'm
helping him out.


-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From skreech at tranquility.net  Sat Oct  6 12:03:57 2001
From: skreech at tranquility.net (Gavin Cooper)
Date: Sat, 6 Oct 2001 11:03:57 -0500
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
Message-ID: <20011006110357.A4433@europa.tranquility.net>

> And for a bit of history -- this idea started with skreech and
> his old 'mudbot' program which he used to connect Quake servers, 
> IRC, and his MUD. We thought it'd be fun to reimplement it (much 
> better) in Twisted, so I'm helping him out.

pretzel already seems to be gone from CVS for some unexplained reason. 
But maybe since it is I who had the original vision, I could possibly 
explain what pretzel/mudbot is suppose to be.

It started when I hung out on a private mud a lot. A group of friends 
liked to mud and eventually we setup a private mud and all we did on 
it was talk. That is where Mudbot started, all it did was connect to 
the mud and function as any other IRC bot would do. It did some 
uninteresting things like executed certain commands and gave the 
output of them to the mud, such as 'uptime' or the like. The next step 
was to make it connect to more than one mud. That was completed, and 
intermud communication was possible just like the ry bot on #python. 
When the capability for 3 or more muds was hacked in, something 
resembling the pretzel infrastructure began to materialize.

Eventually I wanted to be able to display a file easily to other
people on the mud without copying or pasting. Looking through python
docs I discovered 'fifos' and hacked it into mudbot. All I had to do
was "cat file > mudbot/fifo" and it was chatted onto the mud. At this
point I discovered that it could be possible to direct anything to
this fifo and have it display on the mud. I could "tail -f logfile >
mudbot/fifo" to a logfile, and it'd go to the mud. I liked this. Then
I tried starting a quake server on Linux, the local output of which is
text to the console, and redirecting this to the fifo made it possible
for people to play quake and for there to be something of an
"audience" on the mud. As we all liked to play quake, this was quite
fun.

Sometime around here I hacked in a little IRC support. I made it
possible for IRC <---> Mud communication. Naturally, this also allowed
for IRC <---> Fifo(and thus quake/logfiles)... coding in a real
console interface increased the number of input/output combinations.

Then I had The Idea.

I decided to recode mudbot completely. It was a desperate hack, I
hard-coded nearly everything. So I wrote some base mudbot code and
rewrote mud/irc/console/fifo capability into separately loadable
modules. At this timepoint however, I lost interest in muds because
the people I hung out with decided it was more fun to harass me and
my then-56k connection, so for personal reasons I didn't go back to
the mud, and thus I lost interest in ALL muds, leaving Mudbot as more
or less only an IRC bot on crack. So coding stopped before Mudbot's
second incarnation fully materialized. And so it was left
non-functional stuffed into a far corner in my home directory.

So what was this idea... my idea was that everything connected to the
mudbot had the capability to interact with everything else connected
to the mudbot in some orderly, standard way. Descriptions of Pretzel
have been so vague because we believe there's almost no limit to what
it would be able to accomplish. Naturally, the first module coded for
Pretzel (or UserAgent if you wish to call the module that) would be
IRC input/output support. That would allow Pretzel to talk to IRC.
Perhaps the second module would not be an input/output module, but a
data processing module, one that would simply test the concept. When
given a signal, it would output "Hello, world!". Data that comes
through IRC that says "hi" would signal (perhaps just call a method
of) the hello-world module, and the output of the hello-world module
is returned to the IRC module. The IRC module would be told to print
whatever comes from this hello-world module. The end result:

<skreech> pretzel: hi
<pretzel> Hello, world!


Other modules would be implemented. Data-processing modules that, say, 
run programs and return their output, or perhaps generate a fortune 
using the fortune program and return that. Or, for the ry killer, a 
module that would simply take what is input and output it to another 
input/output plugin. An ry killer could consist of four pieces:

1) IRC connection to efnet
2) IRC connection to ircnet
3) IRC connection to opn
4) Mirroring plugin

Where text coming in from every IRC connection would be directed 
towards the mirroring plugin, and the mirroring plugin would be 
designed to retransmit that message to every other IRC connection.


So what? That could be coded with Twisted within 30 minutes, you say.  
Part of my goal, however, is to be able to program Pretzel's behavior
without touching any code. I should be able to rip out the mirroring
plugin, shove in a logfile plugin, connect the IRC connections to the
logfile plugin (I keep getting the mental image of PVC pipe pluming)  
and make it a log-keeping bot, without seeing any code or even
restarting the bot. Granted, the flexibility of the bot will be
limited if you decide not to touch any code. If you use Pretzel and
decide, "hmm, I want people to know my uptime." then you could code a
module that adhered to the pretzel standard, shove it in to your
pretzel bot, hook it up to your IRC connection, and you'd have it. The
beauty of the system is that you coded it with the intention of using
it on IRC, but because it is a pretzel plugin, others can use the same
code to display the uptime on a Mud connection, or on Twisted.words,
or heck, a Quake server.


So that is my Mudbot/Pretzel theory. Thats the big idea. Any existing
IRC bot ought to be able to be replaced with Pretzel and a combination
of plugins, easily. Love it or hate it, give me your thoughts. But
again, its mysteriously missing from CVS as of about 5am zaibach-time
saturday.


Gavin Cooper
'skreech'




From carmstro at twistedmatrix.com  Sat Oct  6 12:50:53 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sat, 6 Oct 2001 12:50:53 -0400
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006110357.A4433@europa.tranquility.net>
References: <20011006110357.A4433@europa.tranquility.net>
Message-ID: <20011006125053.A2593@Fookidla.org>

On Sat, Oct 06, 2001 at 11:03:57AM -0500, Gavin Cooper wrote:
> > And for a bit of history -- this idea started with skreech and
> > his old 'mudbot' program which he used to connect Quake servers, 
> > IRC, and his MUD. We thought it'd be fun to reimplement it (much 
> > better) in Twisted, so I'm helping him out.
> 
> pretzel already seems to be gone from CVS for some unexplained reason. 
> But maybe since it is I who had the original vision, I could possibly 
> explain what pretzel/mudbot is suppose to be.

I removed it from CVS because glyph is going to be releasing a new version
of Twisted soon and doesn't want non-functional packages in it.

BTW, about your non-code touching idea, for this all that would need to be
done is a simple configuration interface feature-plugin that gave the
ability to add/remove plugins and whatnot..

I just had a thought. :-) Since such a configuration interface would no
doubt need some sort of access control, I'm wondering if we could use the
authentication bits of twisted.pb (or twisted.internet.passport.. I still
don't know how any of that stuff works) without the networking stuff itself
(since communication is done through the "user agents" (glyph has pointed
out that this name doesn't really work either, btw)).

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From tv at twistedmatrix.com  Sat Oct  6 17:41:40 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 07 Oct 2001 00:41:40 +0300
Subject: [Twisted-Python] Netstring unit tests fail with Python 1.x
Message-ID: <87k7y8bg4r.fsf@ki.yok.utu.fi>

	Don't know if this is the right fix, but...

[tv at ki ~/work/twistedmatrix/Twisted]$ DISPLAY= PYTHONPATH=. ./bin/runtests
.....................E.E.................attached [twisted.test.test_pb.DummyPerspective]
.............Rebuilding Delayed Event Queue...
(rebuilding stale twisted.test.crash_test_dummy.X instance (do))
Rebuilt.
........Created New Participant: glyph
Created New Participant: sean
..............................correct
....
Time: 1.545s

!!!FAILURES!!!
Test Results

Run: 94 ; Failures: 0; Errors: 2
There were 2 errors:
1) twisted.test.test_protocols.NetstringReceiverTestCase.testBuffer
Traceback (innermost last):
  File "./twisted/test/test_protocols.py", line 127, in testBuffer
    a.dataReceived(s)
  File "./twisted/protocols/basic.py", line 89, in dataReceived
    self.doData()
  File "./twisted/protocols/basic.py", line 53, in doData
    buffer,self.__data = self.__data[:self.length],self.__data[self.length:]
TypeError: slice index must be int

2) twisted.test.test_protocols.NetstringReceiverTestCase.testSafe
Traceback (innermost last):
  File "./twisted/test/test_protocols.py", line 140, in testSafe
    r.dataReceived(s)
  File "./twisted/protocols/basic.py", line 122, in dataReceived
    NetstringReceiver.dataReceived(self, data)
  File "./twisted/protocols/basic.py", line 89, in dataReceived
    self.doData()
  File "./twisted/protocols/basic.py", line 53, in doData
    buffer,self.__data = self.__data[:self.length],self.__data[self.length:]
TypeError: slice index must be int

[tv at ki ~/work/twistedmatrix/Twisted]$ 




Index: basic.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/basic.py,v
retrieving revision 1.10
diff -u -r1.10 basic.py
--- basic.py	2001/09/30 18:55:43	1.10
+++ basic.py	2001/10/06 21:39:05
@@ -77,7 +77,7 @@
                 raise NetstringParseError
         self.__data = self.__data[m.end():]
         if m.group(1):
-            self.length = self.length * (10**len(m.group(1))) + long(m.group(1))
+            self.length = self.length * (10**len(m.group(1))) + int(m.group(1))
         if m.group(2):
             self.__buffer = ''
             self.mode = DATA 




[tv at ki ~/work/twistedmatrix/Twisted]$ DISPLAY= PYTHONPATH=. ./bin/runtests
.......................................attached [twisted.test.test_pb.DummyPerspective]
.............Rebuilding Delayed Event Queue...
(rebuilding stale twisted.test.crash_test_dummy.X instance (do))
Rebuilt.
........Created New Participant: glyph
Created New Participant: sean
..............................correct
....
Time: 1.550s

OK (94 tests)
[tv at ki ~/work/twistedmatrix/Twisted]$ 

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From lists at itamarst.org  Sat Oct  6 17:46:22 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 06 Oct 2001 23:46:22 +0200
Subject: [Twisted-Python] Netstring unit tests fail with Python 1.x
References: <87k7y8bg4r.fsf@ki.yok.utu.fi>
Message-ID: <3BBF7BAE.8080301@itamarst.org>

This because moshez changed an int() somewhere to long(), something to 
do with 2.2. Dunno exactly why - OverflowErrors are caught anyway in 
SafeNetstringReceiver which is what people should be using anyway.





From acapnotic at twistedmatrix.com  Fri Oct  5 19:58:57 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Fri, 5 Oct 2001 16:58:57 -0700
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
References: <3BBDC8E1.8070105@itamarst.org> <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
Message-ID: <20011005165857.A3019@troglodyte.menefee>

On Fri, Oct 05, 2001 at 04:20:30PM -0500, Glyph Lefkowitz wrote:
> This thread began for me (and for the list archiver, apparently) with 
> "Re: pretzel".  I have no idea what "pretzel" is or where it came from, 

Sorry, that subject line should have read in full:
"In response to the Twisted/twisted/pretzel CVS check-in."

> This is at once maddeningly vague and precise enough to be completely
> incorrect.

QuoteoftheWeek.append(_)




From acapnotic at twistedmatrix.com  Sun Oct  7 01:18:09 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 6 Oct 2001 22:18:09 -0700
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006125053.A2593@Fookidla.org>
References: <20011006110357.A4433@europa.tranquility.net> <20011006125053.A2593@Fookidla.org>
Message-ID: <20011006221809.A2226@troglodyte.menefee>

On Sat, Oct 06, 2001 at 12:50:53PM -0400, Chris Armstrong wrote:
> On Sat, Oct 06, 2001 at 11:03:57AM -0500, Gavin Cooper wrote:
> > pretzel already seems to be gone from CVS for some unexplained reason. 
>
> I removed it from CVS because glyph is going to be releasing a new version
> of Twisted soon and doesn't want non-functional packages in it.

IMHO, it's not a good idea to check in new embrionic modules to the MAIN
trunk in any case...  but starting a branch for it might make sense.
...and one of these days, you may want to decide that you don't want
every Twisted Application in the main Twisted distribution either,
particularly if they don't necessarily run on the same development
cycles.  i.e. you might not want to wait for a new Twisted release to
publish a new pretzel plug-in...

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 82.2% illuminated, 18.9 days old.




From glyph at twistedmatrix.com  Sun Oct  7 01:47:56 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 7 Oct 2001 00:47:56 -0500
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006221809.A2226@troglodyte.menefee>
Message-ID: <E15q6u6-000365-00@zaibach.twistedmatrix.com>

On Sunday, October 7, 2001, at 12:18  AM, Kevin Turner wrote:

> IMHO, it's not a good idea to check in new embrionic modules to the MAIN
> trunk in any case...  but starting a branch for it might make sense.
> ...and one of these days, you may want to decide that you don't want
> every Twisted Application in the main Twisted distribution either,
> particularly if they don't necessarily run on the same development
> cycles.  i.e. you might not want to wait for a new Twisted release to
> publish a new pretzel plug-in...

Well put.  I also feel that this is a problem for Twisted as a whole, 
but haven't thought of a good solution yet.  If you have more thoughts 
on how we can start to split out functionality (at least for release 
development cycles if not for downloads), I'd like to hear them...

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Sun Oct  7 02:51:36 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 6 Oct 2001 23:51:36 -0700
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006110357.A4433@europa.tranquility.net>
References: <20011006110357.A4433@europa.tranquility.net>
Message-ID: <20011006235136.A2321@troglodyte.menefee>

Ok, here's a sketch of what I think of as an appropriately Twisted way
to do this.

An IRC bot of this sort amounts to the same thing as an IRC server.
Each exists in a number of rooms, has people log on and authenticate to
it, send it messages, sends messages back, etc.  The only difference[1]
is that an IRC server talks to its clients directly through a TCP port,
and the bot talks to them through some other IRC server.  Now, because
Twisted knows that services are independant of the transports which
connect to them, it already has a "transport" abstraction.

You should be able to use the IRC UserAgent as a transport in just the
same way as a tcp.Port...  
myTwistedIrcServer.listenOn(
    PretzelUA("ry:irc.openprojects.net::6667:#python"), ...)


Now, for the features... what I would do is let features pass a trigger
regex and a callback function to the IRC server, which it would keep a
list of... and the features can send messages back if and when they see
fit.
(This is probably only speaking to one interface of the feature-service,
which may also have a web.Resource interface and a reality interface and
an enterprise interface and... just because Twisted is cool like that.
And, uh, isn't the phrase "it doesn't need to be distributed" pretty
blasphemous around here?)

As for skreech's bit about reprogramming/reconfiguring-without-editing-
code-or-restarting...  Well, I think that's been one of glyph's big
points about Twisted ever since, well, "as long as I can remember".  I
do remember this because I've disagreed with him about it at times.
=) Don't we still have that introduction/tutorial which demonstrates
telnet-in-to-the-web-server-to-change-its-configuration?  And now with
manhole out there as well...

Skreech, you have the benefit of experience here, as you've already
done at least two incarnations of this bot.  I just wanted to make
sure you're appropriately and sufficiently Twisted before you start
becoming Twisted. ;)

"It's not a cult, I swear"-ingly yours,

 - Kevin (Acap)



[1] "The only difference..."
    Well, ok, so there are a few wrinkles, i.e. certain communications
which may only happen between server and client will have to be
inhibited by the useragent-transport, because it may not be possible or
desirable to proxy them as client-client messages on the other side.

[PS] yeah, there are a whole *lot* of other details left before the
approach I describe can actually happen.  Which is why I introduced it
as a "sketch" instead of code.  =) 

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 81.6% illuminated, 18.9 days old.




From lists at itamarst.org  Sun Oct  7 12:30:00 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Oct 2001 18:30:00 +0200
Subject: [Twisted-Python] f33r the API docs
Message-ID: <3BC08308.8070606@itamarst.org>

Check this out:

<http://itamarst.org/twisted-docs/twisted.html>

The output will be that much more cleaner and informative if you add a 
__all__ list to your package. __all__ is the list of objects you want to be 
exported when somone does "from yourmodule import *" and is used by my 
documentation program to decide what to document. It is a simple list of 
strings. For example:

===========================================
import sys

_list = []

def addToList(object):
     """add an object to the list"""
     _list.append(object)

CONSTANT = 3


__all__ = ["addToList", "CONSTANT"]
===========================================





From carmstro at twistedmatrix.com  Sun Oct  7 14:11:53 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 7 Oct 2001 14:11:53 -0400
Subject: [Twisted-Python] Re: splitting up Twisted [was: pretzel]
In-Reply-To: <E15q6u6-000365-00@zaibach.twistedmatrix.com>
References: <20011006221809.A2226@troglodyte.menefee> <E15q6u6-000365-00@zaibach.twistedmatrix.com>
Message-ID: <20011007141153.A5527@Fookidla.org>

On Sun, Oct 07, 2001 at 12:47:56AM -0500, Glyph Lefkowitz wrote:
> 
> On Sunday, October 7, 2001, at 12:18  AM, Kevin Turner wrote:
> 
> >IMHO, it's not a good idea to check in new embrionic modules to the MAIN
> >trunk in any case...  but starting a branch for it might make sense.
> >...and one of these days, you may want to decide that you don't want
> >every Twisted Application in the main Twisted distribution either,
> >particularly if they don't necessarily run on the same development
> >cycles.  i.e. you might not want to wait for a new Twisted release to
> >publish a new pretzel plug-in...

I'll admit that I did check it in too early -- I have to get used to the
fact that Twisted is Real Software now, not just a repository for our cool
python code. :-) 

> Well put.  I also feel that this is a problem for Twisted as a whole, 
> but haven't thought of a good solution yet.  If you have more thoughts 
> on how we can start to split out functionality (at least for release 
> development cycles if not for downloads), I'd like to hear them...

I've discussed this with Moshe before, and I'm for it, but he's got some
reasons why splitting up Twisted is not such a good thing. I still do
believe that the Application-level stuff ought to be separated from the
library-level stuff.

Twisted:
  internet
  spread
  python
  persisted
  protocols
  tap (new applications will put their tap-generation utilities here)
  test
  enterprise (not sure..)

Then we have separate packages for Twisted Web, Words, Manhole, etc etc etc.

So let's define what the technical problems with splitting up Twisted are.
I, being the naive person that I am, don't know what they are. :-)

Oh, well I remember one issue from the discussion Moshe and I had:
versioning. IMO the application-level packages should actually line up in
version with the main Twisted package. Moshe said that it would be a problem
when people started matching up older versions of applications with newer
versions of Twisted, but I think we should just say "We _only_ support
applications with the same version number as the Twisted install you are
running". And if a package wants to still be on it's own release schedule,
we have TwistedWeb-0.11.0-1,2,3 etc. well, I'm not sure if this will
conflict with Debian versioning. Maybe we need to use some character other
than "-" to separate the version numbers. Maybe TwistedWeb-1.0Twisted0.11.0
or something. whatever. =)

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From acapnotic at twistedmatrix.com  Mon Oct  8 01:25:23 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sun, 7 Oct 2001 22:25:23 -0700
Subject: [Twisted-Python] misc nits on glyph's big commit
In-Reply-To: <E15qDSC-0003Vr-00@zaibach.twistedmatrix.com>
References: <E15qDSC-0003Vr-00@zaibach.twistedmatrix.com>
Message-ID: <20011007222523.A2818@troglodyte.menefee>

twisted.passport.challenge.__doc__ says:
> This is a method rather than a module-level function because it is
> anticipated that we will want to change this to store salted passwords.

but the update moved challenge so it *is* a module-level function.
Should that docstring not have been cutnpasted and still be on
passport.Identity.challenge, or did the reasoning change in which
case the docstring needs updating?

----------

> Update of /cvs/Twisted/doc/examples

Now pbsimple.py has the class named "Echoer" and pbecho.py has the class
named "SimpleService".  Is supposed to be that way?  Seems backwards.

----------

> Update of /cvs/Twisted/twisted/python
>
> Modified Files:
> 	defer.py 

> diff -b -u -d -r1.7 -r1.8
> --- defer.py	2001/10/07 12:25:15	1.7
> +++ defer.py	2001/10/07 12:54:46	1.8
   class Deferred:
       # [...]
       def runCallbacks(self, result, isError):
	   """Run all callbacks and/or errors that have been added to this
           Deferred.

           Each callback will have its result passed as the first
           argument to the next; this way, the callbacks act as a
           'processing chain'.

           If this deferred has not been armed yet, nothing will happen.
           """

           self.called = isError + 1
           if self.armed:
               for item in self.callbacks:
                   callback, args, kw = item[isError]
                   args = args or ()
> @@ -72,12 +73,15 @@
>                  kw = kw or {}
>                  try:
>                      # print callback, result, args, kw
> +                    # print 'defres:',callback,result
>                      result = apply(callback, (result,)+args, kw)
> +                    if type(result) != types.StringType:
> +                        isError = 0
#
# I don't get it -- what's this typecheck for?  Is there documentation
# on the meaning of return values for Deferreds that I'm missing?
#
>                  except:
>                      io = StringIO()
>                      traceback.print_exc(file=io)
>                      gv = io.getvalue()
> -                    print gv
> +                    print 'Deferred Error', gv
>                      result = gv
>                      isError = 1
>          else:
[...]

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 73.4% illuminated, 19.9 days old.




From mattcampbell at pobox.com  Mon Oct  8 11:18:15 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 8 Oct 2001 10:18:15 -0500
Subject: [Twisted-Python] Process.write still blocks
Message-ID: <20011008101814.A21484@mattcamp.dyn.dhs.org>

I just grabbed Twisted 0.11.0 and checked twisted.internet.process
to see if Glyph fixed is so that writing to the process's stdin pipe
doesn't block.  It doesn't look like anything changed here; stdout and
stderr are read in non-blocking mode, but writes to stdin still block.
I've already fixed this in my application with a call to fcntl after the
process starts, and it doesn't break anything.  So it would be helpful
to make this change in the standard Twisted package as well.  Thanks.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From glyph at twistedmatrix.com  Mon Oct  8 17:35:13 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 8 Oct 2001 16:35:13 -0500
Subject: [Twisted-Python] Process.write still blocks
In-Reply-To: <20011008101814.A21484@mattcamp.dyn.dhs.org>
Message-ID: <E15qi9y-0006gd-00@zaibach.twistedmatrix.com>

Please feel free to submit patches!  I'm sorry about missing this bugfix 
in 0.11.0, but there are a few other known problems with it and 0.11.1 
should be out within a day or so.

On Monday, October 8, 2001, at 10:18  AM, Matt Campbell wrote:

> I just grabbed Twisted 0.11.0 and checked twisted.internet.process
> to see if Glyph fixed is so that writing to the process's stdin pipe
> doesn't block.  It doesn't look like anything changed here; stdout and
> stderr are read in non-blocking mode, but writes to stdin still block.
> I've already fixed this in my application with a call to fcntl after the
> process starts, and it doesn't break anything.  So it would be helpful
> to make this change in the standard Twisted package as well.  Thanks.
> --
> Matt Campbell <http://www.pobox.com/~mattcampbell/>

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From jhe at webde-ag.de  Tue Oct  9 06:27:17 2001
From: jhe at webde-ag.de (=?iso-8859-1?Q?J=FCrgen_Hermann?=)
Date: Tue, 9 Oct 2001 12:27:17 +0200 
Subject: [Twisted-Python] Teud
Message-ID: <82C891B6DD60D411A6F200508BC5D60308375036@exchange1.cinetic.de>

Hi!

I'll (ab)use the twisted list for the moment, if someone thinks we should
open a separate list, say so.

Things that I noticed:
	* xmldoc.py should emit a SAX2 stream, not write to a file directly.

xmldoc.dtd (which I wrote and committet):
    * submodule should contain a description, not #PCDATA
    * class/@parents should be @bases (cf. __bases__)
    * <other> should contain <value> (note that variables might get 
      docstrings in the __future__, just like functions), and value
      should have a @type attribute
    * modelling of function attributes?

Ciao, J?rgen

--
J?rgen Hermann, Developer (jhe at webde-ag.de)
WEB.DE AG, http://webde-ag.de/
 




From lists at itamarst.org  Tue Oct  9 06:37:30 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Oct 2001 12:37:30 +0200
Subject: [Twisted-Python] Teud
References: <82C891B6DD60D411A6F200508BC5D60308375036@exchange1.cinetic.de>
Message-ID: <3BC2D36A.9030906@itamarst.org>

J?rgen Hermann wrote:


> Things that I noticed:
> 	* xmldoc.py should emit a SAX2 stream, not write to a file directly.


Makes sense.


> xmldoc.dtd (which I wrote and committet):
>     * submodule should contain a description, not #PCDATA


the #PCDATA is the description in all elements.

>     * class/@parents should be @bases (cf. __bases__)


OK.


>     * <other> should contain <value> (note that variables might get 
>       docstrings in the __future__, just like functions), and value
>       should have a @type attribute


The contents of all elements are their docstring, so it should rather be:
<other value="foo"/>

and if docstrings ever get added (which I doubt) it can be changed to
<other value="foo"></other>


>     * modelling of function attributes?


Mmmm. I wonder if that counts as an external interface.

Once the DTD is settled on, xmldoc.py and the XSL need to be updated...







From jhe at webde-ag.de  Tue Oct  9 10:54:55 2001
From: jhe at webde-ag.de (=?iso-8859-1?Q?J=FCrgen_Hermann?=)
Date: Tue, 9 Oct 2001 16:54:55 +0200 
Subject: [Twisted-Python] Teud
Message-ID: <82C891B6DD60D411A6F200508BC5D60308375039@exchange1.cinetic.de>

> > 	* xmldoc.py should emit a SAX2 stream, not write to a 
> file directly.
> Makes sense.

Unfortunately, on a first look pydoc makes this hard (by returning string
values to build a result). I have to take a deeper look whether it's
possible.

> > xmldoc.dtd (which I wrote and committet):
> >     * submodule should contain a description, not #PCDATA
> the #PCDATA is the description in all elements.

Still, there is sometimes a description element and sometimes not. And it's
not clear why.

> >     * class/@parents should be @bases (cf. __bases__)
> OK.

Changed and committed. Also added optional doctype & encoding.

I also added my own versions of stylesheet & css, the stylesheet takes
parameters and is thus easily adapted to dynamic page generation.

Ciao, J?rgen

--
J?rgen Hermann, Developer (jhe at webde-ag.de)
WEB.DE AG, http://webde-ag.de/




From lists at itamarst.org  Tue Oct  9 11:32:00 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Oct 2001 17:32:00 +0200
Subject: [Twisted-Python] Teud
References: <82C891B6DD60D411A6F200508BC5D60308375039@exchange1.cinetic.de>
Message-ID: <3BC31870.2060804@itamarst.org>

J?rgen Hermann wrote:

 > Unfortunately, on a first look pydoc makes this hard (by returning
 > string values to build a result). I have to take a deeper look
 > whether it's possible.

Well, we don't use pydoc except for infrastructure. The way to do it 
would be to pass a file-like object to the various documentation 
functions, so they write to it instead of returning a string.

 > Still, there is sometimes a description element and sometimes not.
 > And it's not clear why.

Err... good question. Ok, let's use a description element for everything.

 > I also added my own versions of stylesheet & css, the stylesheet
 > takes parameters and is thus easily adapted to dynamic page
 > generation.

Oh, good, I wasn't sure how to do that with XSLT. Can you put up an 
example of the output?








From jepler at inetnebr.com  Tue Oct  9 15:06:37 2001
From: jepler at inetnebr.com (Jeff Epler)
Date: Tue, 9 Oct 2001 14:06:37 -0500
Subject: [Twisted-Python] Problems with bdist_rpm on 0.11.0
Message-ID: <20011009140635.B3547@inetnebr.com>

I had problems building 0.11.0 with "python2 setup.py bdist_rpm" on my
system.  (redhat 6.2, python 2.1 rpm from tummy)

There were two syntax errors in twisted/mail/pb.py, and
twisted/spread/cBanana.c was not being included in the tarball that
bdist_rpm build (I think this is equivalent to 'python2 setup.py sdist',
if non-rpm folks want to see the problem).

This patch fixes the syntax errors (missing close parens), and adds
cBanana.c to MANIFEST.in.  I'm not sure that this is the correct fix
for the extension, but It Works For Me(tm)

Please copy me (jepler at inetnebr.com) on any discussion.

Jeff
-------------- next part --------------
diff -ru Twisted-0.11.0/MANIFEST.in Twisted-0.11.0-local/MANIFEST.in
--- Twisted-0.11.0/MANIFEST.in	Sun Aug 19 00:15:23 2001
+++ Twisted-0.11.0-local/MANIFEST.in	Mon Oct  8 11:22:26 2001
@@ -22,6 +22,7 @@
 
 include CREDITS LICENSE README
 include MANIFEST.in
+include twisted/spread/cBanana.c
 
 recursive-include bin *
 recursive-include doc *.html
diff -ru Twisted-0.11.0/twisted/mail/pb.py Twisted-0.11.0-local/twisted/mail/pb.py
--- Twisted-0.11.0/twisted/mail/pb.py	Wed Sep 26 04:00:25 2001
+++ Twisted-0.11.0-local/twisted/mail/pb.py	Mon Oct  8 11:26:56 2001
@@ -26,7 +26,7 @@
     def getFolderMessage(self, folder, name):
         if '/' in name:
             raise IOError("can only open files in '%s' directory'" % folder)
-        fp = open(os.path.join(self.directory, 'new', name)
+        fp = open(os.path.join(self.directory, 'new', name))
         try:
             return fp.read()
         finally:
@@ -78,7 +78,7 @@
     def _isSubFolder(self, name):
         return (not os.path.isdir(os.path.join(self.rootDirectory, name)) or
                 not os.path.isfile(os.path.join(self.rootDirectory, name, 
-                                                'maildirfolder'))
+                                                'maildirfolder')))
 
 
 class MaildirCollection(pb.Referencable):

From acapnotic at twistedmatrix.com  Tue Oct  9 19:37:24 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Tue, 9 Oct 2001 16:37:24 -0700
Subject: [Twisted-Python] debuggabilly
Message-ID: <20011009163724.A2229@troglodyte.menefee>

Am I supposed to be able to learn anything from this?

Perspective Broker Traceback:
Traceback (innermost last):
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1194, in _recvMessage
    netResult = object.remoteMessageReceived(self, message, netArgs, netKw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 259, in remoteMessageReceived
    return self.object.remoteMessageReceived(broker, message, args, kw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 182, in remoteMessageReceived
    return broker.serialize(state, self, method, args, kw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1096, in serialize
    return self.jellier.jelly(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 159, in jelly
    return typfn(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 258, in _jelly_dictionary
    jval = self.jelly(val)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 159, in jelly
    return typfn(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 794, in _jelly_instance
    tup = instance.remoteSerialize(self.broker)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 311, in remoteSerialize
    return remote_atom, broker.registerReference(self)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1006, in registerReference
    puid = object.processUniqueID()
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 305, in processUniqueID
    return (id(self.perspective), id(self.object))
AttributeError: object




From Chris.Hadgis at mincom.com  Tue Oct  9 20:21:20 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Wed, 10 Oct 2001 10:21:20 +1000
Subject: [Twisted-Python] Hacking Reality
Message-ID: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>

I would be interested in helping to develop reality further.

Where do I sign?

ChrisH, back after two and a half weeks away from computers


-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From carmstro at twistedmatrix.com  Wed Oct 10 00:03:25 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 10 Oct 2001 00:03:25 -0400
Subject: [Twisted-Python] Hacking Reality
In-Reply-To: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>
References: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>
Message-ID: <20011010000325.A1356@Fookidla.org>

On Wed, Oct 10, 2001 at 10:21:20AM +1000, Chris.Hadgis at mincom.com wrote:
> I would be interested in helping to develop reality further.
> 
> Where do I sign?
> 
> ChrisH, back after two and a half weeks away from computers

Well, your timing is interesting. I just got a phone call last night from
Glyph, and we talked a bit about how the new spatial simulation system is
_not_ to be developed inside twisted.reality, but as a separate package.
Twisted.reality still does need a lot of work, and glyph pointed out a few
things to me that need done:

1) Re-do the broadcasting system. It's kind of a mess now. I've taken a
_look_ at this, but I'm not really sure where to take it. IIRC you were the
guy who was interested in this before, so if you could do a little work in
this area it'd be great.

2) Get rid of the 'reality' reference inside things. Glyph says this would
apparently reduce memory footprint by a huge amount. I think I'll analyze
exactly how much work getting rid of this is going to mean. Obviously it's
not just a simple "ok, delete all code using thing.reality" -- it's a big
structural change (Realities should reference things, and not the other way
around)

3) Get rid of the global object dicts. This would probably be a lot of work
as a lot of code would get touched by this. As glyph has preached before,
"Twisted represents a huge directional graph" -- things can get references
to each other any number of ways, without a global thing store.

So, now that Reality and ImaginarySpatialSim are no longer together, I'd
like to know how the heck we're going to do this. Jason, any thoughts?
I still have some doubt that there is no common ground between a textual and
a spatial simulation, and I still dream of a game that both textual and
spatial representation of objects is possible (I suppose this would be
possible even without a tighter "integration" of reality and SpatialSim, ie,
class MyThingy(reality.Thing, spatial.Thing)). The ideas that Jason has told
me about in the past seem to promising for me to give up the idea of an
integrated "simulation" system for Twisted (even though Glyph professes to
me that Twisted _is_ the simulation system, but...). 

Ehh, that last paragraph was pretty much a braindump. But I am kinda tired
of being completely clueless about how all this stuff is gonna fit together.

--
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From abo at minkirri.apana.org.au  Wed Oct 10 01:48:59 2001
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Wed, 10 Oct 2001 15:48:59 +1000 (EST)
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
Message-ID: <1002692939.3bc3e14b67441@minkirri.apana.org.au>

G'day,

I've just been looking at Twisted Python for the past hour or two, read the 
mailing list archives, and have some comments and questions.

I've been working on using Medusa for serving a virtual mirror via http and 
ftp. I'm at the point where I'm close, but I'm starting to re-think some stuff, 
in particular my choice of Medusa.

First my impressions of the three contenders; Twisted, Medusa, ZServer. Please 
correct me if I'm wrong in the following summaries;

Medusa seems to be the daddy of them all. It's the oldest, which has benefits 
and problems. It is a little messy from its evolution, but seems pretty mature. 
It uses an async select loop to drive everything. It uses "asynchat" derived 
class objects to communicate on sockets. Data can be sent by 
pushing "producers" onto asynchat objects. Producers can be complex objects 
that produce data, execute callbacks, whatever. It's ftp and http server 
classes use a primative VFS to serve from. The asyncore and asynchat modules it 
is built on are now part of Python.

Twisted seems to be a from-the-ground up re-invention of Medusa. It's newer, 
but surprisingly it's bigger, dispite it's apparently less mature feature set. 
It is similar in structure to Medusa, but simplifys it by dispensing with 
producers. It can use a variety of event-loops, including Tk and GTK, or it's 
own. It doesen't have a VFS (yet) so its ftp and http servers serve from the 
underlying os filesystem.

ZServer grew out of Medusa. It uses the same basic underlying architecture, but 
throws in threads to get around the problem of delayed producers blocking the 
event loop. I'm not sure how tightly tied to Zope it is, but its http and ftp 
servers generally serve from a ZODB database, presumably wrapped in a Medusa 
VFS, though I have a feeling they might have changed that. ZServer also 
supports webDAV serving. It is possible that some of the enhancements could be 
merged back into Medusa, but probably it has changed so much it would be 
difficult.

My problem with Medusa is its http and ftp servers assume that the VFS can 
deliver files wrapped in producers without blocking. I've fixed this by 
creating a patch for Medusa's asynchat that adds support for a ready() method 
to producers, so they can block without blocking the event loop. I'm currently 
in the process of writing Medusa VFS's for ftp and eventualy http backends. In 
the process I've also found that the Medusa ftp server is not as full featured 
as I want.

In my search for Python VFS's I found PyVFS (http://www.pycage.de/). This is 
modelled on the Gnome/MC VFS, so it 
supports '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
tgz, ftp, whatever. The various different VFS backends are loaded dynamicly as 
pluggins. These pluggins execute as a seperate process that are communicated 
with over a channel. The API is too simplistic for me, with files 
being "projected" out of the VFS to a local file to be manipulated/used. I 
don't like the pluggin-process-channel architecture either.

In the reading of the Twisted mailing list, I saw a comment to the affect that 
the Medusa VFS was an example of how _not_ to do it, which lead to using webDAV 
as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS 
backend, but I dunno about using it as the primary API. Sure, it supports meta-
data etc, but the reality is the API that is most widely used and understood is 
the POSIX filesytem API, as exposed in Python by the os and os.path modules.

My solution for a VFS has been, upto now, based on Medusa's, but extending it 
to be more like os and os.path. So far it's a filesystem class with most of the 
os and os.path methods. One of the derived classes is a mountable_filesystem 
that allows you to mount other VFS filesystems off it. At this point I'm 
tempted to make a vfs module that emulates os and os.path so that you can mount 
whatever vfs's you want first, and then just replace all your os.* calls with 
vfs.* calls. Note that the one catch would be open() would need to be replaced 
with vfs.open().

I'm sort of fishing for general suggestions, comments, and interest. I'm at the 
point where I've just convinced myself my vfs is worth finishing, and my ready
() patch to asynchat is worth updating, but I'm not sure what to use as the 
http and ftp server front-end, though I'm still leaning towards medusa. It 
looks like Twister is not ready, and ZServer would be too hard to seperate from 
Zope.

PS... I'm not on the zope-dev list but I am on the twister and medusa lists. 
The zope-dev list is too much non-ZServer stuff and that's all I'm interested 
in. So zope-dev'ers, please reply to me or one/both of the other lists directly.

--
ABO: finger abo at minkirri.apana.org.au for more information.




From m at moshez.org  Wed Oct 10 03:06:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 10 Oct 2001 09:06:17 +0200 (IST)
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <20011010070617.E0FF5390F@darjeeling>

On Wed, 10 Oct 2001, Donovan Baarda <abo at minkirri.apana.org.au> wrote:

> Medusa seems to be the daddy of them all. 

Calling Medusa Twisted's daddy is rewriting history.

> Twisted seems to be a from-the-ground up re-invention of Medusa. 

Only as much as it is a from-the-ground up re-invention of qmail. Or Apache.
Twisted is a new network framework, which takes good ideas from all around.

> It's newer, 
> but surprisingly it's bigger, dispite it's apparently less mature 
> feature set. 

I think Twisted's feature set is very mature. Particularily, it does
have good integration with threads.

> It is similar in structure to Medusa, but simplifys it by dispensing with 
> producers.

Well, you can still have producers -- they are just tied in to connections
rather then the event loop itself.

> It can use a variety of event-loops, including Tk and GTK, or it's 
> own. It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> underlying os filesystem.

Well, the HTTP server can serve from in-memory resources, or for that matter,
any resource that follows the protocol.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From Chris.Hadgis at mincom.com  Wed Oct 10 03:06:00 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Wed, 10 Oct 2001 17:06:00 +1000
Subject: [Twisted-Python] Hacking Reality
Message-ID: <OF8706AFB9.1D33B863-ON4A256AE1.00268C26@mincom.oz.au>

>>>>>




On Wed, Oct 10, 2001 at 10:21:20AM +1000, Chris.Hadgis at mincom.com wrote:
> I would be interested in helping to develop reality further.
> 
> Where do I sign?
> 
> ChrisH, back after two and a half weeks away from computers

Well, your timing is interesting. I just got a phone call last night from
Glyph, and we talked a bit about how the new spatial simulation system is
_not_ to be developed inside twisted.reality, but as a separate package.
Twisted.reality still does need a lot of work, and glyph pointed out a few
things to me that need done:

1) Re-do the broadcasting system. It's kind of a mess now. I've taken a
_look_ at this, but I'm not really sure where to take it. IIRC you were 
the
guy who was interested in this before, so if you could do a little work in
this area it'd be great.

<<<<<

Yes, that is me. I did have some code ready for 0.10.2 (or whatever was 
current two weeks ago). As soon as I get some time I will see how this 
fits in with 0.11.0. I suspect any changes would be minimal, though I will 
need to change TRDemo and Inheritance.

>>>>>

2) Get rid of the 'reality' reference inside things. Glyph says this would
apparently reduce memory footprint by a huge amount. I think I'll analyze
exactly how much work getting rid of this is going to mean. Obviously it's
not just a simple "ok, delete all code using thing.reality" -- it's a big
structural change (Realities should reference things, and not the other 
way
around)

3) Get rid of the global object dicts. This would probably be a lot of 
work
as a lot of code would get touched by this. As glyph has preached before,
"Twisted represents a huge directional graph" -- things can get references
to each other any number of ways, without a global thing store.

<<<<<

I have not looked into these two points much. I will look at them when I 
get some time, after I have made my changes for the broadcast system.

[snip brain-dump]

>>>>>

Ehh, that last paragraph was pretty much a braindump. But I am kinda tired
of being completely clueless about how all this stuff is gonna fit 
together.

<<<<<

Like I said, whatever time I can get to work on Twisted I will be happy to 
give.

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From kthangavelu at earthlink.net  Tue Oct  9 21:42:32 2001
From: kthangavelu at earthlink.net (kapil thangavelu)
Date: Tue, 9 Oct 2001 18:42:32 -0700
Subject: [Twisted-Python] Re: [medusa] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <200110100832.BAA05589@chamber.cco.caltech.edu>

On Tuesday 09 October 2001 10:48 pm, Donovan Baarda wrote:
> G'day,
>
> First my impressions of the three contenders; Twisted, Medusa, ZServer.
> Please correct me if I'm wrong in the following summaries;
>
> Medusa seems to be the daddy of them all. It's the oldest, which has
> benefits and problems. It is a little messy from its evolution, but seems
> pretty mature. It uses an async select loop to drive everything. It uses
> "asynchat" derived class objects to communicate on sockets. Data can be
> sent by
> pushing "producers" onto asynchat objects. Producers can be complex objects
> that produce data, execute callbacks, whatever. It's ftp and http server
> classes use a primative VFS to serve from. The asyncore and asynchat
> modules it is built on are now part of Python.
>
> Twisted seems to be a from-the-ground up re-invention of Medusa. It's
> newer, but surprisingly it's bigger, dispite it's apparently less mature
> feature set. It is similar in structure to Medusa, but simplifys it by
> dispensing with producers. It can use a variety of event-loops, including
> Tk and GTK, or it's own. It doesen't have a VFS (yet) so its ftp and http
> servers serve from the underlying os filesystem.

twisted has lots of interesting ideas and architecture, but since i haven't 
used it i'll refrain from comment.

> ZServer grew out of Medusa. It uses the same basic underlying architecture,
> but throws in threads to get around the problem of delayed producers
> blocking the event loop. I'm not sure how tightly tied to Zope it is, but
> its http and ftp servers generally serve from a ZODB database, presumably
> wrapped in a Medusa VFS, though I have a feeling they might have changed
> that. ZServer also supports webDAV serving. It is possible that some of the
> enhancements could be merged back into Medusa, but probably it has changed
> so much it would be difficult.

zserver swallows medusa whole, and leaves it pretty much untouched. it builds 
its functionality ontop of medusa. there is no vfs in zope's interaction with 
medusa. requests are handled by an installed handler and are passed off to a 
thread pool which calls zpublisher (zope's orb) that maps requests directly 
onto the zodb. 

zserver's thread architecure is pretty much separate from medusa. a single 
medusa thread handles most of the network i/o. the thread architecture of 
zope (imo) is indeed mainly for avoiding blocking the event loop and  to 
allow zope and separate processing from i/o. 

i never used webdav so i can't comment, but my understanding is that changes 
to medusa made for zserver are basically things specific to zope, using 
zserver is basically using medusa. but using it without zope means you loose 
all the zope based functionality which includes the webdav implementation.

<snip vfs/ftp>

> I'm sort of fishing for general suggestions, comments, and interest. I'm at
> the point where I've just convinced myself my vfs is worth finishing, and
> my ready () patch to asynchat is worth updating, but I'm not sure what to
> use as the http and ftp server front-end, though I'm still leaning towards
> medusa. It looks like Twister is not ready, and ZServer would be too hard
> to seperate from Zope.

my two cents, i'm not sure why you think twister isn't ready but its probably 
worth experimenting with. as for zserver i don't think there is any 
additional standalone functionality that is offered on top of medusa 
distribution that really makes this make sense (with the possible exception 
that you want to use a threaded async i/o architecture like zservers, in 
which case you might also want to take a look at webware's asyncthreaded 
server.)

cheers

kapil thangavelu




From glyph at twistedmatrix.com  Wed Oct 10 04:56:38 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 10 Oct 2001 03:56:38 -0500
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>

I'm only responding to the twisted-python list, since the cross-post 
seemed excessive.  Feel free to rebroadcast this if ensuing discussion 
on other lists is interesting.

On Wednesday, October 10, 2001, at 12:48  AM, Donovan Baarda wrote:

> G'day,
>
> I've just been looking at Twisted Python for the past hour or two, read 
> the
> mailing list archives, and have some comments and questions.

Thank you for your interest.  Here's a twisted way of looking at your 
questions :-)

> First my impressions of the three contenders; Twisted, Medusa, ZServer. 
> Please
> correct me if I'm wrong in the following summaries;
>
> Medusa seems to be the daddy of them all.

I don't see what you mean by that; about the only things that Medusa and 
Twisted share is that they are both asynchronous networking frameworks.  
They seem to have a fairly different approach to how protocols are 
written and integrated, and in what their scope for future development 
is.

> It's the oldest, which has benefits and problems. It is a little messy 
> from its evolution, but seems pretty mature. It uses an async select 
> loop to drive everything. It uses "asynchat" derived class objects to 
> communicate on sockets. Data can be sent by pushing "producers" onto 
> asynchat objects. Producers can be complex objects that produce data, 
> execute callbacks, whatever. It's ftp and http server classes use a 
> primative VFS to serve from. The asyncore and asynchat modules it is 
> built on are now part of Python.

This sounds pretty accurate to me.

> Twisted seems to be a from-the-ground up re-invention of Medusa.

As Moshe said, only insofar as it's a from-the-ground-up re-invention of 
about 6 or 7 other things.

> It's newer, but surprisingly it's bigger, dispite it's apparently less 
> mature feature set.

What do you mean when you say "less mature"?  Twisted's features have 
been around for less time (hence, "newer") but compare, for example, 
twisted.spread.pb with rpc_server.  Or twisted.words with chat_server  
Would you characterize the medusa approach in any of these comparisons 
as "more mature"?

What is the Medusa equivalent of twisted.reality, twisted.mail, 
twisted.web.widgets, or twisted.enterprise?  These services are at 
varying levels of maturity, but surely the fact that they exist at all 
has to count for something :-).

> It is similar in structure to Medusa,

At some extremely superficial level, I guess this is true.  However, 
Twisted does a lot more than just clone medusa.  Even at a basic level, 
you could say that it complicates the medusa structure a great deal with 
a unified notion of authentication, automatic persistence, and 
incidentally, several full-featured applications. :-)

> but simplifys it by dispensing with producers.

Twisted has producers, but only when you need them.

http://twistedmatrix.com/users/glyph/TwistedDocs/Twisted-0.11.0/twisted/internet/
abstract_FileDescriptor.py.html#registerProducer

> It can use a variety of event-loops, including Tk and GTK, or it's own. 
> It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> underlying os filesystem.

Well, it depends what you mean by VFS.  Twisted has a perception of the 
filesystem as more like a special-case of "container" than containers as 
a special-case of the filesystem.  There are containers which can 
respond to specifics of the HTTP protocol that are not derived from 
files; would you call that part of a "VFS"?  The semantics of 
"__builtins__.open" are not sufficiently rich to support that.

> In my search for Python VFS's I found PyVFS (http://www.pycage.de/). 
> This is modelled on the Gnome/MC VFS, so it supports 
> '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
> tgz, ftp, whatever. The various different VFS backends are loaded 
> dynamicly as pluggins. These pluggins execute as a seperate process 
> that are communicated with over a channel. The API is too simplistic 
> for me, with files being "projected" out of the VFS to a local file to 
> be manipulated/used. I don't like the pluggin-process-channel 
> architecture either.

Why not?  It sounds clever to me.  I don't have a good picture of your 
requirements (other than "HTTP and FTP" at this point, so I can't fathom 
why you like or don't like this particular solution.  (Why is it 
relevant?)

> In the reading of the Twisted mailing list, I saw a comment to the 
> affect that
> the Medusa VFS was an example of how _not_ to do it, which lead to 
> using webDAV
> as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS
> backend, but I dunno about using it as the primary API. Sure, it 
> supports meta-
> data etc, but the reality is the API that is most widely used and 
> understood is
> the POSIX filesytem API, as exposed in Python by the os and os.path 
> modules.

Yes, but that's a blocking API; ergo, it does not work in an 
asynchronous framework like Twisted.  Not all "files" are associated 
with a file descriptor, so they may potentially support different 
operations.  Directory listing on FTP, HTTP, and WebDAV sites is not 
necessarily consistent with the files that are actually available.  
There is metadata associated with some requests, and not with others... 
in short, there are lots of subtle issues involved with supporting each 
of these types of hierarchies well, and a blanket virtual "filesystem" 
implementation does not satisfy all (or even a reasonably large subset) 
of them.  For different protocols, there may be API differences, unless 
some of the protocols are stripped to the "lowest common denominator", 
e.g. POSIX.

> My solution for a VFS has been, upto now, based on Medusa's, but 
> extending it
> to be more like os and os.path. So far it's a filesystem class with 
> most of the
> os and os.path methods. One of the derived classes is a 
> mountable_filesystem
> that allows you to mount other VFS filesystems off it. At this point I'm
> tempted to make a vfs module that emulates os and os.path so that you 
> can mount
> whatever vfs's you want first, and then just replace all your os.* 
> calls with
> vfs.* calls. Note that the one catch would be open() would need to be 
> replaced
> with vfs.open().

Not necessarily.  You could always hack up the __builtins__ module at 
runtime to point to your newer, better open().  Either way it seems like 
there are probably issues with security & the presence of *real* file 
descriptors that you have to think about...

> I'm sort of fishing for general suggestions, comments, and interest. 
> I'm at the
> point where I've just convinced myself my vfs is worth finishing, and 
> my ready
> () patch to asynchat is worth updating, but I'm not sure what to use as 
> the
> http and ftp server front-end, though I'm still leaning towards medusa. 
> It
> looks like Twister is not ready, and ZServer would be too hard to 
> seperate from
> Zope.

Ready for what, is the question? :-)

Short form: HTTP yes, FTP no (but it could be with a little work), 
everything else yes.

Long form:

We do not currently have (or have any high-priority plans to produce) a 
"VFS", but I would contend that such a system is not necessary when you 
look at the way that Twisted does web resources.  FTP doesn't currently 
use that model, but I don't think it would be a difficult modification; 
it uses the same Producer model that HTTP does.  I estimate that it 
would be easier to modify Twisted in this way than to undertake a 
project to do your own VFS, but since I'm not exactly sure what's going 
to make you happy, I don't have a high degree of confidence in that 
estimation.

As far as robustness (which is an implied issue with Twisted's 
"maturity"), Twisted is being used to run the main twistedmatrix.com 
site.  We always run the most recent development version.  So far, it's 
only served 17.422 downloads of Twisted itself and approximately three 
quarters of a million hits, and survived five or six freshmeat 
"attacks" :-).  It did crash, once, about 8 months ago after a major 
refactoring (before we had acceptance tests...), but that bug was 
quickly fixed.  We don't run a public FTP server, but the core parts of 
Twisted that enable one to run a website where you can download files 
are very personally important to me, so draw your own conclusions :-).

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Wed Oct 10 06:11:14 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Oct 2001 12:11:14 +0200
Subject: [Twisted-Python] A modest proposal: Replace medusa with Twisted
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au> <200110100832.BAA05589@chamber.cco.caltech.edu>
Message-ID: <3BC41EC2.4070609@itamarst.org>

Actually, this brings up this idea I had - Zope should replace medusa with 
Twisted. Why, you ask?

1) Twisted separates transport from protocols, and the event loop it uses is 
  extendable and generic. That means:

   - It can run on Jython (using threads, someday with java.nio), and it can 
be integrated with the Tk and GTK event loops.

   - Your protocol doesn't have to worry about the transport - Twisted 
supports SSL, TCP and unix domain sockets right now, without having to make 
any change to the protocols.

2) Twisted is designed to run multiple servers and protocols at the same 
time, and these can be changed at runtime. It already includes pure python 
support for HTTP, FTP, LDAP, SMTP, POP3, DNS, telnet, AIM TOC, and IRC, all 
integrated with the main event loop (all have server support except DNS and 
LDAP). Adding new protocols to Zope is not easy, at the moment.

3) Twisted is being actively developed and extended. medusa less so.

4) Good integration with threads - while event based, twisted has a very 
nice model for dealing with threaded apps.

5) Twisted has Perspective Broker, an async.ready remote-object protocol 
that supports caching, object migration, and remote messaging, with 
integrated authentication and authorization. And it ideologically meshes 
with the "object publisher" notion in Zope. No, really :)


Twisted already includes a high-level web framework, but Zope probably would 
not use it, and instead build its own on top of twisted's low-level http 
support.







From abo at minkirri.apana.org.au  Wed Oct 10 09:38:48 2001
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Wed, 10 Oct 2001 23:38:48 +1000
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>; from glyph@twistedmatrix.com on Wed, Oct 10, 2001 at 03:56:38AM -0500
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au> <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>
Message-ID: <20011010233847.A4458@minkirri.apana.org.au>

On Wed, Oct 10, 2001 at 03:56:38AM -0500, Glyph Lefkowitz wrote:
> I'm only responding to the twisted-python list, since the cross-post 
> seemed excessive.  Feel free to rebroadcast this if ensuing discussion 
> on other lists is interesting.

sticking to this convention... :-)

> On Wednesday, October 10, 2001, at 12:48  AM, Donovan Baarda wrote:
[...]
> They seem to have a fairly different approach to how protocols are 
> written and integrated, and in what their scope for future development 
> is.

This I guess is part of what is putting me off Twisted. I'm familiar with
Medusa, and Twisted is just different enough that I've got a learning curve
ahead of me. Unless I get convinced Twisted is worth the extra effort...

> > Twisted seems to be a from-the-ground up re-invention of Medusa.
> 
> As Moshe said, only insofar as it's a from-the-ground-up re-invention of 
> about 6 or 7 other things.

Python async socket framework... it's filling the same void :-)

> > It's newer, but surprisingly it's bigger, dispite it's apparently less 
> > mature feature set.
> 
> What do you mean when you say "less mature"?  Twisted's features have 
> been around for less time (hence, "newer") but compare, for example, 
> twisted.spread.pb with rpc_server.  Or twisted.words with chat_server  
> Would you characterize the medusa approach in any of these comparisons 
> as "more mature"?
> 
> What is the Medusa equivalent of twisted.reality, twisted.mail, 
> twisted.web.widgets, or twisted.enterprise?  These services are at 
> varying levels of maturity, but surely the fact that they exist at all 
> has to count for something :-).

That probably accounts for Twisted having more code. However, in my case I'm
just after http and ftp server capabilities. I have a feeling Medusa's ftp
code at least is more complete.

> > It is similar in structure to Medusa,
> 
> At some extremely superficial level, I guess this is true.  However, 
> Twisted does a lot more than just clone medusa.  Even at a basic level, 
> you could say that it complicates the medusa structure a great deal with 
> a unified notion of authentication, automatic persistence, and 
> incidentally, several full-featured applications. :-)

I'm also a bit of a less-is-more person... I don't really need all of that.
However, if the framework is neat, and I get that without extra hassles and
bloat, I guess I'd use it.

> > but simplifys it by dispensing with producers.
> 
> Twisted has producers, but only when you need them.
> 
> http://twistedmatrix.com/users/glyph/TwistedDocs/Twisted-0.11.0/twisted/internet/
> abstract_FileDescriptor.py.html#registerProducer

Hmmm... looking into this.

> > It can use a variety of event-loops, including Tk and GTK, or it's own. 
> > It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> > underlying os filesystem.
> 
> Well, it depends what you mean by VFS.  Twisted has a perception of the 
> filesystem as more like a special-case of "container" than containers as 
> a special-case of the filesystem.  There are containers which can 
> respond to specifics of the HTTP protocol that are not derived from 
> files; would you call that part of a "VFS"?  The semantics of 
> "__builtins__.open" are not sufficiently rich to support that.

I was just looking at the ftp part, and it seems that it can only serve
files. If it can to more than this, I guess I'm more interested.

> > In my search for Python VFS's I found PyVFS (http://www.pycage.de/). 
> > This is modelled on the Gnome/MC VFS, so it supports 
> > '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
> > tgz, ftp, whatever. The various different VFS backends are loaded 
> > dynamicly as pluggins. These pluggins execute as a seperate process 
> > that are communicated with over a channel. The API is too simplistic 
> > for me, with files being "projected" out of the VFS to a local file to 
> > be manipulated/used. I don't like the pluggin-process-channel 
> > architecture either.
> 
> Why not?  It sounds clever to me.  I don't have a good picture of your 
> requirements (other than "HTTP and FTP" at this point, so I can't fathom 
> why you like or don't like this particular solution.  (Why is it 
> relevant?)

It is overkill for what it is. Spawning whole extra processes and using
inter-process communication over a channel when just classes and/or
threads would do the job.

The biggest limitation was the API... I basicly want to serve up a virtual
mirror, which means I need to be able to identify and mirror things like
symlinks.

However, because it is quite simple, I was thinking of making a VFS backend
for my VFS that talks to PyVFS... more as a proof of concept, but also to
get tar.gz, cpio, mailbox, etc for free.

> > In the reading of the Twisted mailing list, I saw a comment to the 
> > affect that
> > the Medusa VFS was an example of how _not_ to do it, which lead to 
> > using webDAV
> > as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS
> > backend, but I dunno about using it as the primary API. Sure, it 
> > supports meta-
> > data etc, but the reality is the API that is most widely used and 
> > understood is
> > the POSIX filesytem API, as exposed in Python by the os and os.path 
> > modules.
> 
> Yes, but that's a blocking API; ergo, it does not work in an 
> asynchronous framework like Twisted.  Not all "files" are associated 

The Medusa VFS is a stripped down POSIX, and it actualy causes blocking
problems for my application. That's why I added ready() support to asynchat,
so that file producers can tell the select loop they would block and be
excluded from that time round the loop. This is basicly a hack... a probably
neater way is to make the file producers asychat's themselves but that would
require major restructuring of Medusa's ftp and http servers.

> with a file descriptor, so they may potentially support different 
> operations.  Directory listing on FTP, HTTP, and WebDAV sites is not 
> necessarily consistent with the files that are actually available.  
> There is metadata associated with some requests, and not with others... 
> in short, there are lots of subtle issues involved with supporting each 
> of these types of hierarchies well, and a blanket virtual "filesystem" 
> implementation does not satisfy all (or even a reasonably large subset) 
> of them.  For different protocols, there may be API differences, unless 
> some of the protocols are stripped to the "lowest common denominator", 
> e.g. POSIX.

That's why I'm going for POSIX :-)

> > My solution for a VFS has been, upto now, based on Medusa's, but 
> > extending it
> > to be more like os and os.path. So far it's a filesystem class with 
> > most of the
> > os and os.path methods. One of the derived classes is a 
> > mountable_filesystem
> > that allows you to mount other VFS filesystems off it. At this point I'm
> > tempted to make a vfs module that emulates os and os.path so that you 
> > can mount
> > whatever vfs's you want first, and then just replace all your os.* 
> > calls with
> > vfs.* calls. Note that the one catch would be open() would need to be 
> > replaced
> > with vfs.open().
> 
> Not necessarily.  You could always hack up the __builtins__ module at 
> runtime to point to your newer, better open().  Either way it seems like 
> there are probably issues with security & the presence of *real* file 
> descriptors that you have to think about...

Thats why I'd keep it seperate inside a vfs module... remember at least one
vfs backend would be using the builtin open and os modules to access the
real fs. Though now you mention it... it could be away of transperantly
running any application on top of a VFS without changing it at all. Hmmm...
bound to be clashes... I wonder...

> > I'm sort of fishing for general suggestions, comments, and interest. 
> > I'm at the
> > point where I've just convinced myself my vfs is worth finishing, and 
> > my ready
> > () patch to asynchat is worth updating, but I'm not sure what to use as 
> > the
> > http and ftp server front-end, though I'm still leaning towards medusa. 
> > It
> > looks like Twister is not ready, and ZServer would be too hard to 
> > seperate from
> > Zope.
> 
> Ready for what, is the question? :-)
> 
> Short form: HTTP yes, FTP no (but it could be with a little work), 
> everything else yes.

FTP is the main one...though I'd really love rsync... roll on librsync :-)

> Long form:
> 
> We do not currently have (or have any high-priority plans to produce) a 
> "VFS", but I would contend that such a system is not necessary when you 
> look at the way that Twisted does web resources.  FTP doesn't currently 
> use that model, but I don't think it would be a difficult modification; 
> it uses the same Producer model that HTTP does.  I estimate that it 
> would be easier to modify Twisted in this way than to undertake a 
> project to do your own VFS, but since I'm not exactly sure what's going 
> to make you happy, I don't have a high degree of confidence in that 
> estimation.

The application is basicly a mirror daemon that serves up a virtual mirror
of an ftp, rsync or http site. To the ftp and http clients, it appears to be
a full mirror. Files are fetched on demand and stored in a partial mirror on
the server.

My plan was to use a VFS to 'mount' the remote ftp, rsync, or http site. The
partial mirror on the server would also be accessed through the same VFS
interface. Then I was going to overlay a "mirrorfs" VFS over them both, that
would mirror the remote VFS to the local one on demand. The http/ftp server
part would then just serve files from the mirrorfs VFS.

The beauty of this is the different VFS backends would allow you to do wierd
things like on-demand mirror a remote ftp server into a local tar.gz file,
not that you'd want to :-)

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------




From skip at pobox.com  Wed Oct 10 09:48:37 2001
From: skip at pobox.com (Skip Montanaro)
Date: Wed, 10 Oct 2001 08:48:37 -0500
Subject: [Twisted-Python] Re: [medusa] Twisted, medusa, ZServer, and VFS's
Message-ID: <15300.20917.968929.569835@beluga.mojam.com>


    Donovan> ZServer grew out of Medusa.... I'm not sure how tightly tied to
    Donovan> Zope it is....

Not tightly at all.  I use it completely independent of Zope.

    Donovan> My problem with Medusa is its http and ftp servers assume that
    Donovan> the VFS can deliver files wrapped in producers without
    Donovan> blocking.

I believe Sam Rushing has said all along that Medusa is intended for
I/O-bound situations.  If you have producers that are computationally bound
or that do I/O outside of the Medusa framework, you'll suffer.

-- 
Skip Montanaro (skip at pobox.com)
http://www.mojam.com/
http://www.musi-cal.com/




From acapnotic at twistedmatrix.com  Wed Oct 10 15:48:30 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 10 Oct 2001 12:48:30 -0700
Subject: [Twisted-Python] naming conversational methods
Message-ID: <20011010124830.A2869@troglodyte.menefee>

Generally in an object model, if I'm an object, my methods are things I
do.  If someone says kevin.run(), I run.  If they say kevin.jump(height),
I jump, and if they say kevin.watch(), I keep my eyes open.

But if a perspective is addressing me me through a viewpoint, how should
my methods which act upon her be named?  If she says to herself, "Self,
listen to Kevin," that seems natural to write as self.listen(kevin).
Except, in order for her to listen to me, she needs to have me add her
to my list of my audience members.  So how does her listen method
address me?

Not as kevin.listen(), because she's the one listening, not me.
kevin.speak()?  No, she's not commanding me to speak, she just wants to
know in the event that I do.  kevin.speakTo() seems odd without an
object.  Someone else could say kevin.speakTo(her), but what she really
means is kevin.speakToMe().

Does that work?

class Kevin(pb.Viewable):
    def view_speakToMe(self, perspective):
        """I will now speak to she who invoked this method."""

	# Does it make sense that the personal pronoun in "speakToMe"
	# refers not to *me*, but to the perspective's owner?

    # Or does a passive phrasing make more sense?

    def view_beListenedTo(self, perspective):
        """This perspective will be listening to me."""

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 46.0% illuminated, 22.5 days old.




From j.her at t-online.de  Wed Oct 10 16:46:27 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 10 Oct 2001 22:46:27 +0200
Subject: [Twisted-Python] naming conversational methods
In-Reply-To: <20011010124830.A2869@troglodyte.menefee>
Message-ID: <15rQDr-2KrTPcC@fwd06.sul.t-online.com>

On Wed, 10 Oct 2001 12:48:30 -0700, Kevin
wrote:

>But if a perspective is addressing me me through a viewpoint, how should
>my methods which act upon her be named? 

http://www.datec.at/dev__python__design_patterns__observer.html
http://www.users.qwest.net/~hartkopf/notifier/
http://www.togethercommunity.com/coad-letter/strategy_handbook_original/
Strpat00000088.html








From xardox at mindspring.com  Wed Oct 10 16:55:19 2001
From: xardox at mindspring.com (Don Hopkins)
Date: Wed, 10 Oct 2001 13:55:19 -0700
Subject: [Twisted-Python] Re: [Zope-dev] Re: [medusa] Twisted, medusa, ZServer, and VFS's
References: <15300.20917.968929.569835@beluga.mojam.com>
Message-ID: <00d101c151cd$fa1af220$6501a8c0@brickshithouse>

Running Zope on Windows is quite convenient for developing and debugging
portable Python extensions to run on the server.
It's straightforward to run Zope under Visual C++, in order put breakpoints
in Python extensions, single step through the code and catch errors.
Not to start any religious arguments, but for me, the code development tools
on Windows are much faster and easier to use than on Linux: visual symbolic
debugging, precompiled headers, incremental compilation and linking, edit
and continue, etc.
So from that perspective, it's important for Zope and Python extensions to
run identically on Windows and Linux, but not as important for Zope on
Windows be able to stand up under a high load nor run for a long time.

On the other hand, I've had some horrible problems developing Python
extensions that make Windows calls (like showing a window, which triggers
all kinds of windows message callbacks), which regularly crashed Windows so
bad in a way that the debugger couldn't deal with, that I had to cycle the
power each time. But that was caused by not locking and unlocking threads at
the right time, around window related calls.

Skip, I noticed your .sig changed: are you still looking for a flash of
enlightenment after all these years? ;-)
As an old NeWS hacker, Zope looks pretty flashy and enlightening to me!

    -Don



----- Original Message -----
From: "Skip Montanaro" <skip at pobox.com>
To: <medusa at yahoogroups.com>
Cc: <twisted-python at twistedmatrix.com>; <zope-dev at zope.org>;
<martin at pycage.de>; <abo at minkirri.apana.org.au>
Sent: Wednesday, October 10, 2001 6:48 AM
Subject: [Zope-dev] Re: [medusa] Twisted, medusa, ZServer, and VFS's


>
>
>     Donovan> ZServer grew out of Medusa.... I'm not sure how tightly tied
to
>     Donovan> Zope it is....
>
> Not tightly at all.  I use it completely independent of Zope.
>
>     Donovan> My problem with Medusa is its http and ftp servers assume
that
>     Donovan> the VFS can deliver files wrapped in producers without
>     Donovan> blocking.
>
> I believe Sam Rushing has said all along that Medusa is intended for
> I/O-bound situations.  If you have producers that are computationally
bound
> or that do I/O outside of the Medusa framework, you'll suffer.
>
> --
> Skip Montanaro (skip at pobox.com)
> http://www.mojam.com/
> http://www.musi-cal.com/
>
> _______________________________________________
> Zope-Dev maillist  -  Zope-Dev at zope.org
> http://lists.zope.org/mailman/listinfo/zope-dev
> **  No cross posts or HTML encoding!  **
> (Related lists -
>  http://lists.zope.org/mailman/listinfo/zope-announce
>  http://lists.zope.org/mailman/listinfo/zope )







From j.her at t-online.de  Wed Oct 10 20:28:05 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Thu, 11 Oct 2001 02:28:05 +0200
Subject: [Twisted-Python] DUH!
Message-ID: <15rTgE-0ZDuQCC@fwd06.sul.t-online.com>

jh at zaibach:~/public_html/teud$ PYTHONPATH=/twisted/Twisted:$PYTHONPATH
teudxml Twisted twisted

==> http://twistedmatrix.com/users/jh/teud/Twisted/.idx

and then 

jh at zaibach:~/public_html/teud/Twisted$ for i in *.xml; do 4xslt -o
${i/.xml/.html} $i ~/share/teud/samples/default.xsl; done

==> http://twistedmatrix.com/users/jh/teud/Twisted/twisted.html






From moshez at zadka.com  Thu Oct 11 04:27:09 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 11 Oct 2001 08:27:09 -0000
Subject: [Twisted-Python] General Alert: Web Site is Funny
Message-ID: <20011011082709.29965.qmail@green.zadka.com>

What happened to the web site? 





From lists at itamarst.org  Thu Oct 11 06:54:14 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 12:54:14 +0200
Subject: [Twisted-Python] Teud ready for first public release
Message-ID: <3BC57A56.3090700@itamarst.org>

Well, I think teud is ready to go - only remaining issue is that the scripts 
are chmoded to 777 by distutils, and I have no idea why.





From lists at itamarst.org  Thu Oct 11 08:04:25 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 14:04:25 +0200
Subject: [Twisted-Python] A problem with threads
Message-ID: <3BC58AC9.90104@itamarst.org>

Threadpool should have a function that lets you run a function in a thread 
and have the result passed to a Deferred object's callbacks. The callback 
functions in the Deferred should be run in the a thread-safe way.

There two alternatives:

1) Run the callbacks in the main event loop thread, which means using 
twisted.internet.threadtask. This adds a dependency on twisted.internet for 
twisted.python.

2) Have the user implement the thread-safety stuff themselves.


I think (1) is the best way, otherwise you end up having to do a lot of work 
everytime you use callbacks. But then there's the dependancy issue...





From lists at itamarst.org  Thu Oct 11 11:16:21 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 17:16:21 +0200
Subject: [Twisted-Python] A problem with threads
References: <3BC58AC9.90104@itamarst.org>
Message-ID: <3BC5B7C5.5010204@itamarst.org>

Itamar Shtull-Trauring wrote:
> Threadpool should have a function that lets you run a function in a 
> thread and have the result passed to a Deferred object's callbacks. The 
> callback functions in the Deferred should be run in the a thread-safe way.
> 
> There two alternatives:

A third alternative is to make the threadpool a Delayed. If we don't 
introduce a dependency on twisted.internet, then if the main loop is paused 
in a select() the callbacks will not be called until the select() times out...





From xardox at mindspring.com  Thu Oct 11 14:14:30 2001
From: xardox at mindspring.com (Don Hopkins)
Date: Thu, 11 Oct 2001 11:14:30 -0700
Subject: [Twisted-Python] Zope on Apache (Zapache? Zopache?)
References: <15300.20917.968929.569835@beluga.mojam.com> <00d101c151cd$fa1af220$6501a8c0@brickshithouse>
Message-ID: <00ba01c15280$94a94fa0$6501a8c0@brickshithouse>

Michel Pelletier proposes an interesting idea, of integrating Zope with
Apache 2.0.
That sounds like a really great idea with many upsides -- especially because
you could write all kinds of interesting Apache extensions in Python.
Has anyone written that idea up, or discussed it on other mailing lists?
As a first step, how about using SWIG to expose the Apache 2.0 api to
mod_python.

    -Don

From: michel at zope.com (Michel Pelletier)
Date: Wed, 10 Oct 2001 11:09:45 -0400
Subject: [Zope-dev] A modest proposal: Replace medusa with Twisted

Just to throw out another idea, Amos has discussed with me in the past the
idea of replacing medusa with Apache 2.0.  Compelling as many of Twisted's
features may be, Apache 2.0 as far as i can tell supports many of them as
well (except perhaps jython integration, which is a pipe dream anyway for
Zope).  Apache has the upshot in that it is rock solid, tested by millions,
trusted by even more, and no doubt one of the most actively developed peices
of software there is.

For ZC the upshots of 1) not needing to maintain it, and 2) it being a
excellent marketing tool outweight many technical benifits that twisted may
have that Apache doesn't (I'd like to know what the differences are,
however).  For example, does twisted do URL rewriting?  proxy?
process/thread job control?

Twisted does have the advantage of 1, but not 2.  Further, our faith in the
continuing development of Apache is, de facto, more than that of twisted
simply based on the age, number of users, and number of developers of each
project.

I'm not dismissing the idea, I'm just pointing out an alternative to
Itamar's alternative.  ;)

-Michel






From glyph at twistedmatrix.com  Thu Oct 11 16:36:50 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 11 Oct 2001 15:36:50 -0500
Subject: [Twisted-Python] teud and __all__
Message-ID: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>

Could the Teud repository please move to somewhere else on Zaibach?  I 
don't particularly want to get commit messages for it, since it's a 
totally distinct project from Twisted and it's difficult to sort out the 
messages if they're both coming from twisted-commits.  This could also 
be fixed by Kevin if the commit script were slightly different.

Also, about the __all__ attribute... might I suggest that this is a poor 
choice of names, since this already means something to the interpreter?  
__teud__ might be a better way to put it.  Certainly __init__.py's 
shouldn't have an __all__ in them that describes classes (or modules) to 
*document*.

Thanks,

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Thu Oct 11 16:55:11 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 11 Oct 2001 13:55:11 -0700
Subject: [Twisted-Python] teud and __all__
In-Reply-To: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
References: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
Message-ID: <20011011135511.A2167@troglodyte.menefee>

On Thu, Oct 11, 2001 at 03:36:50PM -0500, Glyph Lefkowitz wrote:
> I don't particularly want to get commit messages for [Teud]...
> This could also be fixed by Kevin if the commit script were slightly
> different.

Done.  Teud folks, if you want commit messages for Teud to go somewhere,
you may add a line to CVSROOT/loginfo.

Cheers,
  Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning cresent, 34.4% illuminated, 23.6 days old.




From lists at itamarst.org  Thu Oct 11 19:28:54 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Oct 2001 01:28:54 +0200
Subject: [Twisted-Python] teud and __all__
References: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
Message-ID: <3BC62B36.6090009@itamarst.org>

Glyph Lefkowitz wrote:


> Also, about the __all__ attribute... might I suggest that this is a poor 
> choice of names, since this already means something to the interpreter?  
> __teud__ might be a better way to put it.  Certainly __init__.py's 
> shouldn't have an __all__ in them that describes classes (or modules) to 
> *document*.


That's why I chose it. __all__ means "all stuff to import when you do 
'from module import *'". In other words, the module's public interfaces, 
exactly the one ones you want to document.







From glyph at twistedmatrix.com  Thu Oct 11 19:33:41 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 11 Oct 2001 18:33:41 -0500
Subject: [Twisted-Python] teud and __all__
In-Reply-To: <3BC62B36.6090009@itamarst.org>
Message-ID: <E15rpQx-0000eb-00@zaibach.twistedmatrix.com>

On Thursday, October 11, 2001, at 06:28  PM, Itamar Shtull-Trauring 
wrote:

> Glyph Lefkowitz wrote:
>
>
>> Also, about the __all__ attribute... might I suggest that this is a 
>> poor choice of names, since this already means something to the 
>> interpreter?  __teud__ might be a better way to put it.  Certainly 
>> __init__.py's shouldn't have an __all__ in them that describes classes 
>> (or modules) to *document*.
>
>
> That's why I chose it. __all__ means "all stuff to import when you do 
> 'from module import *'". In other words, the module's public 
> interfaces, exactly the one ones you want to document.

Hmm, I guess I was wrong.  I thought that in a package's __init__.py, 
__all__ defined those modules which were imported automatically when the 
package was imported.  After disproving that theory I realize that 
there's probably no reason not to use __all__. :-)


--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Fri Oct 12 01:52:33 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Oct 2001 07:52:33 +0200
Subject: [Twisted-Python] teud and __all__
References: <E15rpQx-0000eb-00@zaibach.twistedmatrix.com>
Message-ID: <3BC68521.1010205@itamarst.org>

Glyph Lefkowitz wrote:


> Hmm, I guess I was wrong.  I thought that in a package's __init__.py, 
> __all__ defined those modules which were imported automatically when the 
> package was imported.  After disproving that theory I realize that 
> there's probably no reason not to use __all__. :-)

And IIRC the python development team has made some effort to add __all__ 
to every module in the standard library. In certain cases (e.g. the 
threading module) this approach breaks down, of course.





From acapnotic at twistedmatrix.com  Fri Oct 12 14:48:01 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Fri, 12 Oct 2001 11:48:01 -0700
Subject: [Twisted-Python] Help, I've run and I can't fall down!
Message-ID: <20011012114801.A1649@troglodyte.menefee>

Okay.  Someone wanna explain to me why this script prints 
"Duplicate Shutdown Ignored." and sits there instead of exiting?

Ctrl-C does seem to work though:
> Starting Shutdown Sequence.
> Select loop terminated.

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 24.7% illuminated, 24.6 days old.
-------------- next part --------------
#!/usr/bin/env python
#$Id: fresh-loginfo.py,v 1.1 2001/10/12 17:49:04 acapnotic Exp $

import os, string, sys
from os import path

from twisted.spread import pb
from twisted.internet import main

import pidutils

TRUE=(1==1)
FALSE=not TRUE

cvs_pid = pidutils.findParentNamed('cvs')

cvsroot = os.environ['CVSROOT']
file = sys.argv[2]
module = string.split(file,'/')[0]

def connected(object):
    object.trackPid(cvs_pid, cvsroot, file)
    main.shutDown() # sys.exit(0)

def aint(reason):
    sys.stderr.write("fresher didn't connect:\n%s\n" % (reason,))
    main.shutDown() # sys.exit(1)

pb.getObjectAt("unix", path.join(cvsroot, 'CVSROOT',".freshcvs"),
               connected, aint)

main.run()

From acapnotic at twistedmatrix.com  Sat Oct 13 17:37:10 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 13 Oct 2001 14:37:10 -0700
Subject: [Twisted-Python] Help, I've run and I can't fall down!
In-Reply-To: <20011012114801.A1649@troglodyte.menefee>
References: <20011012114801.A1649@troglodyte.menefee>
Message-ID: <20011013143710.A1957@troglodyte.menefee>

On Fri, Oct 12, 2001 at 11:48:01AM -0700, Kevin Turner wrote:
> Okay.  Someone wanna explain to me why this script prints 
> "Duplicate Shutdown Ignored." and sits there instead of exiting?

Content-Description: cvstoys/fresh-loginfo.py
[...]
> def connected(object):
>     object.trackPid(cvs_pid, cvsroot, file)
>     main.shutDown() # sys.exit(0)
> 
[...]
> pb.getObjectAt("unix", path.join(cvsroot, 'CVSROOT',".freshcvs"),
>                connected, aint)
> 
> main.run()

Ok, after a spending a little time in that hideous monstrosity which
Python calls a debugger, I found the answer.
the callback 'connected' is called before main.run() is.

Does this mean I never have to run() at all?

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 14.3% illuminated, 25.9 days old.




From lists at itamarst.org  Sun Oct 14 13:31:30 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 14 Oct 2001 19:31:30 +0200
Subject: [Twisted-Python] Hooking up XML-RPC to twisted...
Message-ID: <3BC9CBF2.1060408@itamarst.org>

...turned out to be trivial. The following is example code (depends on 
latest CVS since twisted used to reject unknown content-types.)


===================================================================

"""Hook up an object to XML-RPC. An example session:

     >>> s= xmlrpclib.Server('http://localhost:7080/')
     >>> s.echo("lala")
     ['lala']
     >>> s.echo("lala", 1)
     ['lala', 1]
     >>> s.echo("lala", 4)
     ['lala', 4]
     >>> s.echo("lala", 4, 3.4)
     ['lala', 4, 3.3999999999999999]
     >>> s.echo("lala", 4, [1, 2])
     ['lala', 4, [1, 2]]
"""

from twisted.web import resource
import xmlrpclib


class XMLRPC(resource.Resource):

     isLeaf = 1

     def __init__(self, perspective):
         resource.Resource.__init__(self)
         self.perspective = perspective

     def render(self, request):
         args, methodName = xmlrpclib.loads(request.content)
         method = getattr(self.perspective, "perspective_%s" % methodName)
         return xmlrpclib.dumps((apply(method, args),))


class test:

     def perspective_echo(self, *args):
         return args


def main():
     from twisted.internet.main import Application
     from twisted.web import server
     app = Application("xmlrpc-test")
     app.listenOn(7080, server.Site(XMLRPC(test())))
     app.run(0)


if __name__ == '__main__':
     main()





From lists at itamarst.org  Tue Oct 16 05:45:34 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 16 Oct 2001 11:45:34 +0200
Subject: [Twisted-Python] Forwarded questions about PB
Message-ID: <3BCC01BE.2070301@itamarst.org>

I've been telling this guy about PB, and he had some questions - please 
answer to the list and I'll respond to him with a summary.


-------- Original Message --------
To: lists at itamarst.org
Subject: Re: hi all, new crypto library

	BTW, I read that you want to use RPC over unix domain sockets
	- the Twisted project has a generic secure remote object
	publishing system called PB. It runs over sockets, SSL, unix
	domain sockets, etc.. The main idea was to help people
	implement programs without having to design a protocol from
	scratch each time. The Twisted framwork is in general a
	wonderful platform for server developement:
	http://www.twistedmatrix.com. And that way maybe someday it
	can work with other stuff as well (e.g. Java).

I'll take a look at it but I don't think it's the right thing for the
crypto library, at least without some kind of user authentication that
I currently haven't implemented.  Even with authentication I'd be
uncomfortable exposing the server directly to an IP network.  My idea
is to connect the server to the application host over a point to point
connection like a serial port.

Does PB have some advantage over running a standard non-encrypted RPC
protocol over SSL?

	And philosophically I think you'd like it. For example, the
	way it implements home directories for users in a web
	server. Each user runs their own webserver, and then the main
	one that listens on port 80 forwards request to ~itamar/ to my
	personal web server (using PB). So each user has their CGIs,
	server scripts and so on, run using their own permissions and
	limits.

Why not just use an apache proxy server on port 80, proxying requests
to user servers?

	And I'm a developer on it (though I wasn't at all involved with these
	parts of the code), so I'm sure my bias shows :)

I did look at twistedmatrix a few days ago and it looked kind of
interesting.  I didn't notice any of the security/crypto stuff at the
time.





From carmstro at twistedmatrix.com  Tue Oct 16 14:03:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 16 Oct 2001 13:03:55 -0500
Subject: [Twisted-Python] Forwarded questions about PB
In-Reply-To: <3BCC01BE.2070301@itamarst.org>; from lists@itamarst.org on Tue, Oct 16, 2001 at 11:45:34AM +0200
References: <3BCC01BE.2070301@itamarst.org>
Message-ID: <20011016130355.A18133@twistedmatrix.com>

On Tue, Oct 16, 2001 at 11:45:34AM +0200, Itamar Shtull-Trauring wrote:
> -------- Original Message --------
> To: lists at itamarst.org
> Subject: Re: hi all, new crypto library
> 
> 	BTW, I read that you want to use RPC over unix domain sockets
> 	- the Twisted project has a generic secure remote object
> 	publishing system called PB. It runs over sockets, SSL, unix
> 	domain sockets, etc.. The main idea was to help people
> 	implement programs without having to design a protocol from
> 	scratch each time. The Twisted framwork is in general a
> 	wonderful platform for server developement:
> 	http://www.twistedmatrix.com. And that way maybe someday it
> 	can work with other stuff as well (e.g. Java).
> 
> I'll take a look at it but I don't think it's the right thing for the
> crypto library, at least without some kind of user authentication that
> I currently haven't implemented.  Even with authentication I'd be
> uncomfortable exposing the server directly to an IP network.  My idea
> is to connect the server to the application host over a point to point
> connection like a serial port.

Why do you have to expose the server to an IP network? like itamar said, you
can use regular sockets, SSL, *or* unix domain sockets. And serial ports can
speak TCP/IP with SLIP. I'm not sure how hard it would be to do a native
serial port interface in twisted..

> Does PB have some advantage over running a standard non-encrypted RPC
> protocol over SSL?

Yes, it's really cool RPC. :-)

> 	And philosophically I think you'd like it. For example, the
> 	way it implements home directories for users in a web
> 	server. Each user runs their own webserver, and then the main
> 	one that listens on port 80 forwards request to ~itamar/ to my
> 	personal web server (using PB). So each user has their CGIs,
> 	server scripts and so on, run using their own permissions and
> 	limits.
> 
> Why not just use an apache proxy server on port 80, proxying requests
> to user servers?

1) We want to use twisted.web
2) we want to use PB
3) python is more secure than C :-)

> 	And I'm a developer on it (though I wasn't at all involved with these
> 	parts of the code), so I'm sure my bias shows :)
> 
> I did look at twistedmatrix a few days ago and it looked kind of
> interesting.  I didn't notice any of the security/crypto stuff at the
> time.

well admittedly all we have for security/crypto is SSL. (right?)

Anyway, I know these answers aren't the best, someone else will give good
ones :)




From acapnotic at twistedmatrix.com  Tue Oct 16 15:20:06 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Tue, 16 Oct 2001 12:20:06 -0700
Subject: [Twisted-Python] [bug] bloody headers
Message-ID: <20011016122006.A1936@troglodyte.menefee>

There's a bug, which I haven't tracked down yet, somewhere in the
interaction between twisted.web, squid, and galeon.  At times, the HTTP
headers are getting confused with the body content.  

[http://twistedmatrix.com/users/acapnotic/headerbug.png screenshot]

when I reload the page, the headers go away, so I'm inclined to think
that squid is serving the cached page properly.  This only happens in
.idx pages, as far as I've seen so far, so I'm inclined to believe it is
indeed a Twisted issue.  However, it doesn't show up in Galeon when I
don't use a proxy, and I haven't got it to show up in l.nks or w3m yet.
So, um, yeah.

It appears that I use HTTP 1.0 when going through the proxy and HTTP 1.1
otherwise, if that's relevant.

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning crescent, 0.1% illuminated, 29.2 days old.
(umm...  I may have to tweak the description factors.  Shouldn't it be
saying "new" by now?)




From carmstro at twistedmatrix.com  Tue Oct 16 16:08:34 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 16 Oct 2001 15:08:34 -0500
Subject: [Twisted-Python] [bug] bloody headers
In-Reply-To: <20011016122006.A1936@troglodyte.menefee>; from acapnotic@twistedmatrix.com on Tue, Oct 16, 2001 at 12:20:06PM -0700
References: <20011016122006.A1936@troglodyte.menefee>
Message-ID: <20011016150833.A9368@twistedmatrix.com>

Speaking of headers, there's also a bug with CGI handling:
http://www.twistedmatrix.com/users/carmstro.twistd/static/viewcvs/cgi/viewcvs.cgi

This is supposed to redirect to the same URL + "/", but twisted.web doesn't 
like that. I may take a look at this later tonight.

On Tue, Oct 16, 2001 at 12:20:06PM -0700, Kevin Turner wrote:
> 
> There's a bug, which I haven't tracked down yet, somewhere in the
> interaction between twisted.web, squid, and galeon.  At times, the HTTP
> headers are getting confused with the body content.  
> 
> [http://twistedmatrix.com/users/acapnotic/headerbug.png screenshot]
> 
> when I reload the page, the headers go away, so I'm inclined to think
> that squid is serving the cached page properly.  This only happens in
> .idx pages, as far as I've seen so far, so I'm inclined to believe it is
> indeed a Twisted issue.  However, it doesn't show up in Galeon when I
> don't use a proxy, and I haven't got it to show up in l.nks or w3m yet.
> So, um, yeah.
> 
> It appears that I use HTTP 1.0 when going through the proxy and HTTP 1.1
> otherwise, if that's relevant.
> 
> -- 
> Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
> The moon is waning crescent, 0.1% illuminated, 29.2 days old.
> (umm...  I may have to tweak the description factors.  Shouldn't it be
> saying "new" by now?)
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Tue Oct 16 17:39:26 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 16 Oct 2001 16:39:26 -0500
Subject: [Twisted-Python] Forwarded questions about PB
In-Reply-To: <3BCC01BE.2070301@itamarst.org>
Message-ID: <E15tc2R-00057I-00@zaibach.twistedmatrix.com>

On Tuesday, October 16, 2001, at 04:45  AM, Itamar Shtull-Trauring wrote:

> 	BTW, I read that you want to use RPC over unix domain sockets
> 	- the Twisted project has a generic secure remote object
> 	publishing system called PB. It runs over sockets, SSL, unix
> 	domain sockets, etc.. The main idea was to help people
> 	implement programs without having to design a protocol from
> 	scratch each time. The Twisted framwork is in general a
> 	wonderful platform for server developement:
> 	http://www.twistedmatrix.com. And that way maybe someday it
> 	can work with other stuff as well (e.g. Java).
>
> I'll take a look at it but I don't think it's the right thing for the
> crypto library, at least without some kind of user authentication that
> I currently haven't implemented.  Even with authentication I'd be
> uncomfortable exposing the server directly to an IP network.  My idea
> is to connect the server to the application host over a point to point
> connection like a serial port.

If the serial port can be represented as a byte stream (even better, as 
a file descriptor), then PB could easily be hooked up to it.

> Does PB have some advantage over running a standard non-encrypted RPC
> protocol over SSL?

Well, depends what you mean by "standard":

  CORBA: You can evolve PB interfaces without rebuilding/restarting both 
sides of the application each time.

  XML-RPC: You have a lot more expressiveness, and it consumes a lot less 
bandwidth.

  SOAP: Not as complex, not as expensive.  Object-to-object communication 
model instead of application-to-application.

  Sun RPC: Um... are you serious?

  RMI: It runs in more languages than just Java.  It's implemented in a 
non-blocking fashion.

If there were a good, standard, multi-language non-encrypted RPC 
protocol that could run over a serial port, then I suppose this question 
would be easier to answer, but I don't know what sort of protocol you're 
talking about.

> 	And philosophically I think you'd like it. For example, the
> 	way it implements home directories for users in a web
> 	server. Each user runs their own webserver, and then the main
> 	one that listens on port 80 forwards request to ~itamar/ to my
> 	personal web server (using PB). So each user has their CGIs,
> 	server scripts and so on, run using their own permissions and
> 	limits.
>
> Why not just use an apache proxy server on port 80, proxying requests
> to user servers?

Some information is lost that way; for example, what host the request 
originated from, and what the original URL was.  Also, apache tends to 
like to run lots of processes, which if every user is running can be 
rather resource-consumptive (not to mention that it likes to run as 
root...)

Also, apache proxying for user servers is hardly the default ;-).  
mod_rewrite would probably be able to handle such a thing in the right 
configuration, but with Twisted it works out-of-the-box.

> 	And I'm a developer on it (though I wasn't at all involved with these
> 	parts of the code), so I'm sure my bias shows :)
>
> I did look at twistedmatrix a few days ago and it looked kind of
> interesting.  I didn't notice any of the security/crypto stuff at the
> time.

We don't have any really radical security ideas -- the hope is that SSL 
will provide "good enough" crypto for any protocol that we design, and 
PB's security model is directly modeled after capability security 
(http://www.erights.org)

There is an integrated authentication and security model in PB and 
internet.passport though.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From carmstro at twistedmatrix.com  Wed Oct 17 01:09:18 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 17 Oct 2001 01:09:18 -0400 (EDT)
Subject: Fw: [Twisted-Python] [bug] bloody headers
Message-ID: <20011017.010918.607972608.carmstro@twistedmatrix.com>


Oops, I meant this to go to twisted-python, not just to blake. I'm learning a
new mailer. =)
-------------- next part --------------
An embedded message was scrubbed...
From: Chris Armstrong <carmstro at twistedmatrix.com>
Subject: Re: [Twisted-Python] [bug] bloody headers
Date: Wed, 17 Oct 2001 01:00:51 -0400 (EDT)
Size: 1807
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20011017/e79d2f20/attachment.eml 

From lists at itamarst.org  Wed Oct 17 07:06:36 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 17 Oct 2001 13:06:36 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
Message-ID: <3BCD663C.7000904@itamarst.org>

Benjamin Bruheim wrote:

> Committing this under doubt: fixes traceback when windows is off-line, 
> and in theory it should get servers behind NAT return the correct hostname.
> Should only affect SERVER_NAME in CGIs.

I have code that checks if you're connected to a network in Windows (depends 
on IE4 being installed for a DLL), if that's of any help.





From coop at coopweb.org  Wed Oct 17 09:25:24 2001
From: coop at coopweb.org (Gavin Cooper)
Date: Wed, 17 Oct 2001 08:25:24 -0500
Subject: [Twisted-Python] Twisted mirror
Message-ID: <20011017082523.A3604@europa.tranquility.net>

I've updated the "Twisted Mirror" with some behind the scenes work to
give it more internet, but more importantly, nightly CVS tarballs are
now automatically generated and available for download from the main
page. Tarballs are generated at 5am every day. Heres a quick list of
Twisted Mirror's features:

* More inte^H^H^H^Hbandwidth than zaibach
* Mirrored official releases
* Nightly CVS Tarballs
* Mirror of www.twistedmatrix.com updated nightly via CVS. Requests to 
  http://twisted.coopweb.org/t.w/ are forwarded to the twisted.web
  server running that mirror.
* Debian apt-get lines for deb packages
* American flag
* Some mirrored documentation. More docs are next on my list.

The mirror is at http://twisted.coopweb.org/

Enjoy

Gavin Cooper
(skreech)




From grolgh at online.no  Wed Oct 17 11:18:31 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Wed, 17 Oct 2001 17:18:31 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com> <3BCD663C.7000904@itamarst.org>
Message-ID: <008501c1571e$fbb89d20$72afd9c1@phed>

> Benjamin Bruheim wrote:
> > Committing this under doubt: fixes traceback when windows is off-line, 
> > and in theory it should get servers behind NAT return the correct hostname.
> > Should only affect SERVER_NAME in CGIs.
> I have code that checks if you're connected to a network in Windows (depends 
> on IE4 being installed for a DLL), if that's of any help.

Its a minor issue. Its really just another sign of how fragile the windows sockets are. But very annoying since developing with a running phonebill sucks :)

// phed






From acapnotic at twistedmatrix.com  Wed Oct 17 13:43:35 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 10:43:35 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
In-Reply-To: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
Message-ID: <20011017104335.A2927@troglodyte.menefee>

On Wed, Oct 17, 2001 at 05:35:59AM -0500, Benjamin Bruheim wrote:
> Committing this under doubt: fixes traceback when windows is off-line, 
> and in theory it should get servers behind NAT return the correct hostname.
> Should only affect SERVER_NAME in CGIs.
> 
> diff -b -u -d -r1.20 -r1.21
> --- server.py	2001/10/16 20:09:10	1.20
> +++ server.py	2001/10/17 10:35:57	1.21
> @@ -174,8 +174,6 @@
>      def __repr__(self):
>          return '<%s %s %s>'% (self.method, self.uri, self.clientproto)
>  
> -    _host = socket.gethostbyaddr(socket.gethostname())[0]
> -
>      def process(self):
>          "Process a request."
> @@ -395,7 +393,7 @@
>      def getHost(self):
> -        return self._host
> +        return socket.gethostbyaddr(self.transport.getHost()[1])

The before-and-after code returns two different types:
before it returned just the 'hostname' element [0] of
the gethostbyaddr tuple, and now it returns the whole
thing.

Also, it's not evident to me from the documentation that
transport.getHost always returns an IP address, which I
think gethostbyaddr needs.

Would it be possible to do something along the lines of::

class Request:
    _host = None

    def getHost(self):
        if not self._host:
            Request._host = getHostSomehowOrOther
        return self._host

as doing gethostbyaddr for every Request instance sounds potentially
problematic to me.  (Especially since that's not using the non-blocking
asynchronous resolver.)

But if you have a dynamic IP and so you suspect your full hostname of
changing on you...  hmm.  Is there a way to be notified when the network
connection comes up (there must be, the silly MSN guys start blinking
right away), and this could trigger some sort of "Reinitialize" call in
the Twisted server?

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 0.6% illuminated, 0.7 days old.




From acapnotic at twistedmatrix.com  Wed Oct 17 14:51:11 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 11:51:11 -0700
Subject: [Twisted-Python] Fresh CVS hooker
Message-ID: <20011017115111.B2927@troglodyte.menefee>

So I was reading the CVS docs where it says 
> Doing so in the naive way will cause a problem with locks,
> so the `cvs update' must be run in the background.  Here is
> an example for unix (this should all be on one line):
> 
> ^cyclic-pages              (date; cat; (sleep 2; cd /u/www/local-docs; cvs -q update -d) &) >> $CVSROOT/CVSROOT/updatelog 2>&1

and the kluge repulsion seized ahold of some delerium and possesed me to
write an, uh, non-naive CVS loginfo thingie.

The result is in 
http://twistedmatrix.com/users/acapnotic/mycvs/cvstoys/ , or
~acapnotic/co-me/cvstoys for those of you on the inside.

the primary advantage of this is that it doesn't anywhere say "sleep 2"
(it hides that behind a Delayed instead =), but whereas CVSROOT/loginfo
will only run the first matching command it finds, my cvs fresher can
unleash an entire horde of actions.  And it can provide a PB service, if
you're into that sort of thing.

It hasn't undergone trial-by-fire yet, but it seems to be working so
far.  There is one bit left undone, though: the commit notification
e-mails don't get sent, and I can't figure why.  (Please cast your
eyeballs upon cvstoys/actions.py:MailCommand and see if you can
strighten me out.)

Potential uses:

*) can keep a checked-out directory up-to-date at all times.  i.e. have a
/twisted/cvsTwisted/ directory that would always contain the
bleeding-edge version.  Or have changes show up in /var/www as soon
as they're checked in.

*) could let a bleeding-edge Twisted server know when the source has
changed, in case it wants to trigger a twisted.python.rebuild.  

*) Could keep a tarball snapshot up to date (although you'd probably
want to be a little cautious about how often you decide to bz2 it, as
that takes some considerable resources).

*) could keep a mirror (i.e. coopweb) or off-site back-up up to date by
pushing over rsync.

*) could do the email-commit-notification thing (if we get that bug
ironed out), although admittedly I don't have any real complaints with
the syncmail script we're using now.

*) could run Teud to keep the docs fresh.

*) could notify perspectives signed into it when a check-in occours.
Using epb.el, one could potentially have your emacs run its
version-control-update thing to update your buffers whenever someone
else checks in a new revisions.  This sounds cracktackulous, but I'm not
sure it's really a good idea.

*) could run unit tests and send mail to you (and/or everyone else) if
you screwed something up.

and, um, stuff.  There you have it.  If you want to play with it, put a
'freshCfg' configuration file (like the one in actions.__doc__) in
CVSROOT, check in the freshCfg file and add it to CVSROOT/checkoutlist,
have CVSROOT/loginfo run loginfo.py %{sSv}, start the server by running
fresher.py, and there you go.  (Hmm.  will have to automate some of
that.)  I'll package it shortly after the mail notification starts
working.  oops, better go add the un-copyright notices now.

"and-that's-how-I-replaced-one-line-of-shell-code-with-a-thousand-in-Python"-ly yours,
  - Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 0.6% illuminated, 0.8 days old.




From acapnotic at twistedmatrix.com  Wed Oct 17 14:59:34 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 11:59:34 -0700
Subject: [Twisted-Python] Fresh CVS hooker
In-Reply-To: <20011017115111.B2927@troglodyte.menefee>
References: <20011017115111.B2927@troglodyte.menefee>
Message-ID: <20011017115934.C2927@troglodyte.menefee>

> *) could run unit tests and send mail to you (and/or everyone else) if
> you screwed something up.

Or even better: it could tell pretzel about it, and pretzel would tell
the whole channel (on however-many networks) that you just screwed
something up!




From bwinton at tor.dhs.org  Wed Oct 17 16:30:18 2001
From: bwinton at tor.dhs.org (Blake Winton)
Date: Wed, 17 Oct 2001 16:30:18 -0400
Subject: [Twisted-Python] (no subject)
Message-ID: <20011017163018.A19949@tor.dhs.org>

Background:
I'm trying to make Twisted-0.11.0 run under Windows 2000.
Call me crazy.  ;)

Problem #1:
Windows really doesn't like files without extensions.
Solution #1:
Rename everything in bin\ to include ".py" at the end.
Does this break anything in particular for the Unix folks?
I realize it does make it a little more annoying, but can
you live with that to get it working under Windows?

Problem #2:
Running runtests(.py) gives the following error:
!!!FAILURES!!!
Test Results
Run: 91 ; Failures: 0; Errors: 1
There was 1 error:
1) twisted.test.test_dirdbm.DirDbmTestCase.testDbm
Traceback (most recent call last):
  File "C:\Twisted-0.11.0\twisted\test\test_dirdbm.py", line 44, in
testDbm
    d[k] = v
  File "C:\Twisted-0.11.0\twisted\persisted\dirdbm.py", line 60, in
__setitem__
    f = _open(os.path.join(self.dname, k),'wb')
IOError: [Errno 22] Invalid argument:
'C:\\DOCUME~1\\blakew\\LOCALS~1\\Temp\\~1796-1\\YWJj\012'

Tracking this down, The problem seems to be in
twisted\persisted\dirdbm.py
line 59.  We encode the filename, which is good, but we use the base64
encoder
which appends a newline to the end, which is bad.
Solution #2:
I've done some testing, and we can strip the newline (with "k =
k[:-1]"),
and it will decode into the correct value.  We should perhaps do this in
the
encoding function at line 52.

That seemed to be the only change to get runtests to work.

Next up: running the webserver...  :)

Later,
Blake.
-- 
  4:29pm  up 53 days, 23:14,  1 user,  load average: 1.00, 1.00, 1.00




From j.her at t-online.de  Wed Oct 17 16:53:14 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 17 Oct 2001 22:53:14 +0200
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20011017163018.A19949@tor.dhs.org>
Message-ID: <15txf5-26REMiC@fwd01.sul.t-online.com>

On Wed, 17 Oct 2001 16:30:18 -0400, Blake Winton wrote:

>Problem #1:
>Windows really doesn't like files without extensions.
>Solution #1:
>Rename everything in bin\ to include ".py" at the end.
>Does this break anything in particular for the Unix folks?
>I realize it does make it a little more annoying, but can
>you live with that to get it working under Windows?

Better solution: using the script-generating scheme I use in MoinMoin
and Teud.

>I've done some testing, and we can strip the newline (with "k =
>k[:-1]"),

Better use rstrip().

>Next up: running the webserver...  :)

When you went through it, I finally might even try it on NT4.

Ciao, J?rgen






From lists at itamarst.org  Wed Oct 17 16:59:38 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 17 Oct 2001 22:59:38 +0200
Subject: [Twisted-Python] (no subject)
References: <20011017163018.A19949@tor.dhs.org>
Message-ID: <3BCDF13A.3070007@itamarst.org>

Blake Winton wrote:


> Rename everything in bin\ to include ".py" at the end.
> Does this break anything in particular for the Unix folks?
> I realize it does make it a little more annoying, but can
> you live with that to get it working under Windows?

Well, see, the twistd binary in there is mainly oriented towards unix 
(it will try to daemonize, unless there's a '-n' option, etc.), and 
really what is needed is decent infrastructure for running under 
Windows. That means a .exe generated from distutils, and an NT service, 
and as Juergen said autogenerated binaries.

Given all that, it does run, last I checked (I did an app.run(0) instead 
of running my daemon with twistd). Except there was that wierd bug where 
telnetting from linux to a windows telnet server crashed twisted (I'm 
not kidding)...





From blakew at sonainnovations.com  Wed Oct 17 17:26:38 2001
From: blakew at sonainnovations.com (Blake Winton)
Date: Wed, 17 Oct 2001 17:26:38 -0400
Subject: [Twisted-Python] (no subject)
References: <20011017163018.A19949@tor.dhs.org> <3BCDF13A.3070007@itamarst.org>
Message-ID: <008a01c15752$67d4f930$d6d35fd8@quintessential>

> > Rename everything in bin\ to include ".py" at the end.
> > Does this break anything in particular for the Unix folks?
> > I realize it does make it a little more annoying, but can
> > you live with that to get it working under Windows?
> Well, see, the twistd binary in there is mainly oriented towards unix
> (it will try to daemonize, unless there's a '-n' option, etc.), and
> really what is needed is decent infrastructure for running under
> Windows. That means a .exe generated from distutils, and an NT service,
> and as Juergen said autogenerated binaries.

That would all be nice.  Is anyone working on it?

> Given all that, it does run, last I checked

I'm still having problems with mktap, but they seem to be more
problems with my Python setup than with mktap itself...
Oh, wait, there it goes...

> (I did an app.run(0) instead of running my daemon with twistd).

I'm going to write up how I got working what I got working, and post it
to the list...  Later, after I've got more than just the web server
running.  Which probably means tomorrow, since now it's Wolfenstein time. ;)

> Except there was that wierd bug where
> telnetting from linux to a windows telnet server crashed twisted (I'm
> not kidding)...


Ugh.  I don't think I could even test for that.

As for the other bug, are you going to check in a fix?  I agree that a
call to rstrip() in the _encode method is the "Right Thing (tm)".

Later,
Blake.







From j.her at t-online.de  Wed Oct 17 18:26:28 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Thu, 18 Oct 2001 00:26:28 +0200
Subject: [Twisted-Python] (no subject)
In-Reply-To: <008401c15752$16223580$d6d35fd8@quintessential>
Message-ID: <15tz7J-0ykQsqC@fwd01.sul.t-online.com>

On Wed, 17 Oct 2001 17:24:21 -0400, Blake Winton wrote:

>> >Problem #1:
>> >Windows really doesn't like files without extensions.
>> Better solution: using the script-generating scheme I use in MoinMoin
>> and Teud.
>
>I like it.  Uh, who's going to work on that.  ;)
>(I'ld be happy to, if I could get a pointer to some documentation.)

I can do it, if we (read: glyph ;) agree on it.

>Let me know if you want the set of steps I used to get it working.

Sure. Best you can do is to write up some docs, or a wiki page
(http://twistedmatrix.com/users/jh.twistd/python/moin.cgi/TwistedOnWindo
ws).

Ciao, J?rgen






From acapnotic at twistedmatrix.com  Thu Oct 18 06:27:20 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 18 Oct 2001 03:27:20 -0700
Subject: [Twisted-Python] pyunit upgrade
Message-ID: <20011018032720.A6105@troglodyte.menefee>

Ok, I upgraded the pyunit in Twisted from the July 2000 version to the
current one (which is also in the standard library these days).  Before
I did so, I checked to see what changes were made from the upstream
source.

Here are the only changes which were not cosmetic.  For your
browsing pleasure, most of this diff doesn't have changes, but it
provides context for people (who need a bit more than 'patch' does).

To further enchance your experience today, we include a special web
bonus.  The upstream source:
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pyunit/pyunit/unittestgui.py

Our source:
http://twistedmatrix.com/users/carmstro.twistd/static/viewcvs/cgi/viewcvs.cgi/pyunit/unittestgui.py

--- pyunit-1.2.0/unittestgui.py	Thu Oct 18 02:36:45 2001
+++ Twisted/unittestgui.py	Thu Oct 18 02:36:48 2001
@@ -44,12 +44,12 @@
 class BaseGUITestRunner:
     """Subclass this class to create a GUI TestRunner that uses a specific
     windowing toolkit. The class takes care of running tests in the correct
     manner, and making callbacks to the derived class to obtain information
     or signal that events have occurred.
     """
     def __init__(self, *args, **kwargs):
         self.currentResult = None
         self.running = 0
         self.__rollbackImporter = None
         apply(self.initGUI, args, kwargs)
 
@@ -64,12 +64,12 @@
     def runClicked(self):
         "To be called in response to user choosing to run a test"
         if self.running: return
         testName = self.getSelectedTestName()
         if not testName:
             self.errorDialog("Test name entry", "You must enter a test name")
             return
         if self.__rollbackImporter:
             self.__rollbackImporter.uninstall()
         self.__rollbackImporter = RollbackImporter()
         try:
             test = unittest.createTestInstance(testName)
@@ -148,28 +149,29 @@
 class RollbackImporter:
     """This tricky little class is used to make sure that modules under test
     will be reloaded the next time they are imported. It provides a temporary
     wrapper around __import__ which notes imported modules and unloads them.
 
     Alternative mechanisms using the 'imp' and 'ihooks' standard modules were
     considered but were found to be unworkable. Additionally, use of those
     modules can disturb PythonWin.
     """
     def __init__(self):
         "Creates an instance and installs as the global importer"
         self.previousModules = sys.modules.copy()
         self.realImport = __builtin__.__import__
-        __builtin__.__import__ = self._import
-        self.newModules = {}
+        # __builtin__.__import__ = self._import
+        # self.newModules = {}
 
     def _import(self, name, globals=None, locals=None, fromlist=[]):
         result = apply(self.realImport, (name, globals, locals, fromlist))
         self.newModules[name] = 1
         return result
 
     def uninstall(self):
-        for modname in self.newModules.keys():
+        currentModules = sys.modules.copy()
+        for modname in currentModules.keys():
             if not self.previousModules.has_key(modname):
                 # Force reload when modname next imported
                 del(sys.modules[modname])
-        __builtin__.__import__ = self.realImport
+        # __builtin__.__import__ = self.realImport
 

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 2.4% illuminated, 1.5 days old.




From lists at itamarst.org  Sat Oct 20 19:30:04 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 21 Oct 2001 01:30:04 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_usage.py,NONE,1.1
References: <E15v5GL-00036F-00@zaibach.twistedmatrix.com>
Message-ID: <3BD208FC.1020601@itamarst.org>

Kevin Turner wrote:


> test_usage: "Sure sub-space ponies, I'm making gravy without the lumps!"


Today's lesson: never buy a Frank Zappa album before hearing it. It 
might be amazing good music (e.g. Apostrophe) or, if you buy Lumpy 
Gravy, you get an album with barely no music but full of dialogues such as:


SPIDER: I think I can explain about . . . about how the pigs' music works
MONICA: Well, this should be interesting
SPIDER: Remember that they make music with a very dense light, and remember about the smoke standing still and how they . . . they really get uptight when you try to move the smoke, right?
MONICA: Right
JOHN: Yeah?
SPIDER: I think the music in that dense light is probably what makes the smoke stand still. Any sort of motion has its effect on . . . on the ponies' manes. You know, the thing on their neck
JOHN: Hmm . . .
SPIDER: As soon as the pony's mane starts to get good in the back any sort of mo . . . motion, especially of smoke or gas, begins to make the end split.
JOHN: That's the basis of all their nationalism. Like if they can't salute the smoke every morning when they get up . . .
SPIDER: Yeah, it's a vicious circle. You got it.







From tv at twistedmatrix.com  Tue Oct 23 12:36:38 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 23 Oct 2001 19:36:38 +0300
Subject: [Twisted-Python] Passport should be more async
Message-ID: <871yjucnzd.fsf@ki.yok.utu.fi>

An embedded and charset-unspecified text was scrubbed...
Name: verifyPlainPassword-async.diff
Url: http://twistedmatrix.com/pipermail/twisted-python/attachments/20011023/c0c22608/attachment.txt 

From acapnotic at twistedmatrix.com  Thu Oct 25 03:48:16 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 25 Oct 2001 00:48:16 -0700
Subject: [Twisted-Python] DCC PERSPECTIVE
Message-ID: <20011025004816.A11370@troglodyte.menefee>

So here's how DCC SEND works in IRC-land:

When I offer a file for DCC, I bind a socket to port 0, and I send you a
CTCP message with my address, the port number, an argument providing the
filename, and if I'm feeling nice, a filesize parameter as well.  I wait
for someone to attach to this port (hopefully it's you), stop listening
for anything else, and start pumping the file through the socket.
DCC CHAT works the same way, except I use the socket for a line-oriented
chat instead of file transport.

So here's me, doin' this thing for the Twisted protocol while glyph is
telling me about distributed hacks involving shotguns with retro-rockets
and superheated rods for inertial dampeners, and it hits me: Another way
to advertise PB services would be with a DCC PERSPECTIVE query.  You
could pass a OTP or something instead of a filename, and then the
PB-enabled IRC client would do getObjectAt...

Now is that useless, or what!

"but-I'm-*not*-coding-IRC"-ly yours,

 - Acap^H^H^H^HKevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here




From lists at itamarst.org  Thu Oct 25 06:27:36 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Oct 2001 12:27:36 +0200
Subject: [Twisted-Python] Check this out
Message-ID: <3BD7E918.4040909@itamarst.org>

http://cvs.zope.org/Packages/Spread/
http://www.spread.org/

 From the overview page:

The problem in building distributed systems comes from the need to 
communicate and synchronize the different components of the system using 
networks that are prone to faults. In every distributed system (e.g. 
replicated databases or application server clusters) there are inherent 
uncertainties about the current state of remote components. Due to the 
complexity of such systems, the construction of a reliable and efficient 
distributed system is very difficult.

Spread is a toolkit that provides a high performance messaging service that 
is resilient to faults across external or internal networks. Spread 
functions as a unified message bus for distributed applications, and 
provides highly tuned application-level multicast and group communication 
support. Spread services range from reliable message passing to fully 
ordered messages with delivery guarantees, even in case of computer failures 
and network partitions.






From jasbahr at crash.org  Thu Oct 25 11:49:48 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Thu, 25 Oct 2001 10:49:48 -0500
Subject: [Twisted-Python] Twisted Enterprise Administrator
In-Reply-To: <3BD7E918.4040909@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>

Anyone know of any web-based database *administration* tools?  

I'm imagining some simple set of forms that lets admins log into 
the system, select a database or data source, create, edit, and 
delete tables in that database, enter records, link tables 
with tables, and so on.  It would be a web-based equivalent to 
SQL Server's front end GUI (minus the cool drag-and-link graphical
frosting).  This seems like it could be built out of a fairly 
simple set of widgets...

Jason






From dave at dcit.com  Thu Oct 25 12:57:58 2001
From: dave at dcit.com (David Sturgis)
Date: Thu, 25 Oct 2001 11:57:58 -0500
Subject: [Twisted-Python] Twisted Enterprise Administrator
In-Reply-To: <EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>
References: <3BD7E918.4040909@itamarst.org>
	<EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>
Message-ID: <20011025115758.30af504a.dave@dcit.com>

On Thu, 25 Oct 2001 10:49:48 -0500
"Jason L. Asbahr" <jasbahr at crash.org> wrote:

> Anyone know of any web-based database *administration* tools?  

     phpMyAdmin is pretty nice, although it's geared specifically towards mySQL. Still, it's been a hell of a lot more useful than the MSSQL graphical admin tool, both in that it works remotely through a web browser and doesn't totally suck. You can do anything you can do from the command line, and it's very simple and clean and easy to use.

     (although I'm sort of biased since I was being forced to use MSSQL 6.7 for reasons I still don't entirely understand beyond "that's what the client wants", and 6.7 was a painful transitional period for Transact-SQL syntax. Which, as it's name suggests, is not actually SQL syntax, but something... else.)

--
David Sturgis
dave at dcit.com
Software Developer
DataConcepts Information Technology Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax




From lists at itamarst.org  Thu Oct 25 13:03:54 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Oct 2001 19:03:54 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/internet task.py,1.10,1.11
References: <E15wnLk-0005Lz-00@zaibach.twistedmatrix.com>
Message-ID: <3BD845FA.8070605@itamarst.org>

Itamar Shtull-Trauring wrote:


 > A task queue per thread was apprently stupid, too much time was spent 
waiting
 >  on locks. The new implementation needs refactoring in a big way
 > (copy/paste coding), but is significantly faster.

Apparently this is inaccurate, since the scheduler now spends too much time 
running tasks. Suffice to say that this needs tuning.





From lists at itamarst.org  Sat Oct 27 13:20:34 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 27 Oct 2001 19:20:34 +0200
Subject: [Twisted-Python] Forensic System Data Logger
Message-ID: <3BDAECE2.9010702@itamarst.org>

YATTSBIT:

<http://www.zope.org/Members/mcdonc/Products/ForensicLogger>





From acapnotic at twistedmatrix.com  Sun Oct 28 23:11:59 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sun, 28 Oct 2001 20:11:59 -0800
Subject: [Twisted-Python] Tendril
Message-ID: <20011028201159.A21498@troglodyte.menefee>

Tendril is a Words client.
Or maybe it's more of a meta-client, since it manages a whole fistful of
Perspectives (aka words Participants) at once.

Or maybe it's words' ircservice turned inside-out,
because yeah, there's some IRC in it.

Instead of providing an IRC server which people log on to with their IRC
clients to talk to the Words service, Tendril is an IRC Client which
lives with a Words service.  Tendril logs on to a remote IRC server, and
once there, creates a words Participant for everyone it sees.

This gives it an advantage over joining Bridgette to the Words irc
service, as there everyone shows up as a single Participant "ry".  Since
Tendril creates a Participant for every IRC user it represents, each one
appears in the words group just as they would if they had all logged
directly into the Words service.

The difference is

<ry> Acapnotic joined on OPN
<ry> <Acapnotic at opn> Hi!

versus:

Acapnotic at opn joined!
<Acapnotic at opn> Hi!

...

And yes, the link goes in the other direction too; the conversation that
goes on in the Words group is reported back to the IRC channel.  But
because I didn't think IRC operators would appreciate having 20 clients
logged in from the same sever to represent 20 words Participants, when
viewed from the IRC side everyone appears to be speaking through one
"bot"; from this end it looks just like Bridgette.


By putting multiple Tendrils connected to different IRC networks in the
same Words group, you can duplicate Bridgette's effect of joining IRC
networks together.  Since tendril operates transparently on the Words
side, you needn't worry about an ugly chained relay effect when you do
this, even though the Tendrils to the different IRC networks are
separate entities.

<ry1> <ry2 at opn> <foo at efnet> Don't worry, Tendril won't look like this.


In addition to linking IRC channels to Words groups, Tendril also
converts between private /msgs and Words directMessages, so can tell
your Words client to "Start conversation with... Acapnotic at opn", and
Acapnotic will receive your messages via msg over the IRC network, and
you will see Acapnotic's replies in your conversation window.

One final bonus for the IRC freaks: Tendril has a kludge (feature!) to 
broker DCC handshakes between IRC networks.  This doesn't mean that
Tendril receives a file over DCC and sends it out again, it only passes
the *handshake*, and because Direct Client Connections operate entirely
outside the IRC network, this actually works.


The big motivation behind Tendril is now if I want to write an IRC bot,
I don't need to write it for IRC.  I write it as a words client and put
it on a words service instead.  If there's already a tendril from that
channel to a Words service, then I can have my words bot sign on to that
service, otherwise I could run a tendril+words service locally with just
my bot signed on, and that'd work too.

(Actually, the aforementioned DCC handshake brokering could probably be
broken out into a separate Words bot, assuming IRC clients have
implemented CTCP correctly.  Having a Words bot for something that's
exclusively an IRC feature is a bit peculiar though.)

"I-think-that's-a-long-enough-introduction"ly yours,

 - Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing gibbous, 89.0% illuminated, 11.6 days old.




From lists at itamarst.org  Mon Oct 29 10:16:19 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Oct 2001 17:16:19 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/protocols basic.py,1.13,1.14
References: <E15yDz4-0001va-00@zaibach.twistedmatrix.com>
Message-ID: <3BDD72C3.70604@itamarst.org>

Itamar Shtull-Trauring wrote:


> Modified Files:
> 	basic.py 
> Log Message:
> I was overwriting self.mode by mistake, so I made it private
> 


May I add something to the coding standard regarding this?



Index: doc/CodingStandard.html
===================================================================
RCS file: /cvs/Twisted/doc/CodingStandard.html,v
retrieving revision 1.5
diff -c -r1.5 CodingStandard.html
*** doc/CodingStandard.html	2001/10/26 16:33:19	1.5
--- doc/CodingStandard.html	2001/10/29 15:13:53
***************
*** 219,224 ****
--- 219,239 ----
           function, class, method, or module, make sure that it won't instantly
           break other code.
         </p>
+       <p>
+         If your class has attributes that are intended to be private and
+         implementation specific (e.g. the current state of a state-machine),
+         prefix your attribute with __. This will make sure that they don't
+         interfere with subclasses' attributes by mistake. For example:
+         <pre>
+ class Foo:
+
+     __state = 1
+
+     def doSomething(self):
+         # ...
+         self.__state = 2
+         </pre>
+       </p>
       <hr>
       <address><a href="mailto:glyph at helix.twistedmatrix.com">Glyph 
Lefkowitz</a></address>
   <!-- Created: Thu Apr 26 07:53:26 CDT 2001 -->






From sopwith at redhat.com  Tue Oct 30 13:12:42 2001
From: sopwith at redhat.com (Elliot Lee)
Date: Tue, 30 Oct 2001 13:12:42 -0500 (EST)
Subject: [Twisted-Python] Sped-up banana
Message-ID: <Pine.LNX.4.33.0110301310490.22821-300000@ostrich-deluxe.labs.redhat.com>

The encoder redone in C, and handles 'long' numbers correctly.

At radix' request,
-- Elliot
-------------- next part --------------
# Generic List ENcoding

global types, copy, cStringIO, math, struct, apiarymisc
import types, copy, cStringIO, math, struct, apiarymisc

def int2b128(integer, stream):
    if integer == 0:
        stream(chr(0))
        return
    assert integer > 0, "can only encode positive integers"
    while integer:
        stream(chr(integer & 0x7f))
        integer = integer >> 7

def b1282int(st):
    i = 0l
    place = 0
    for char in st:
        num = ord(char)
        i = i + (num * (128 ** place))
        place = place + 1
    try:
        return int(i)
    except:
        return i

# delimiter characters.
LIST     = chr(0x80)
INT      = chr(0x81)
STRING   = chr(0x82)
SYMBOL   = chr(0x83)
NEG      = chr(0x84)
VOCAB    = chr(0x85)
FLOAT    = chr(0x86)
LONGINT  = chr(0x87)

HIGH_BIT_SET = chr(0x80)

class Banana:
#(protocol.Protocol, styles.Ephemeral):
    def connectionMade(self):
        self.listStack = []

    def gotItem(self, item):
        l = self.listStack
        if l:
            l[-1][1].append(item)
        else:
            self.expressionReceived(item)

    buffer = ''

    def dataReceived(self, chunk):
        buffer = self.buffer + chunk
        listStack = self.listStack
        gotItem = self.gotItem
        while buffer:
            assert self.buffer != buffer, "This ain't right: %s %s" % (repr(self.buffer), repr(buffer))
            self.buffer = buffer
            pos = 0
            for ch in buffer:
                if ch >= HIGH_BIT_SET:
                    break
                pos = pos + 1
            else:
                if pos > 64:
                    raise Exception("Security precaution: more than 64 bytes of prefix")
                return
            num = buffer[:pos]
            typebyte = buffer[pos]
            rest = buffer[pos+1:]
            if len(num) > 64:
                raise Exception("Security precaution: longer than 64 bytes worth of prefix")
            if typebyte == LIST:
                num = b1282int(num)
                listStack.append((num, []))
                buffer = rest
            elif typebyte == STRING:
                num = b1282int(num)
                if num > 640 * 1024: # 640k is all you'll ever need :-)
                    raise Exception("Security precaution: Length identifier too long.")
                if len(rest) >= num:
                    buffer = rest[num:]
                    gotItem(rest[:num])
                else:
                    return
            elif typebyte == LONGINT:
                assert not "Not implemented"
            elif typebyte == INT:
                buffer = rest
                num = b1282int(num)
                gotItem(num)
            elif typebyte == NEG:
                buffer = rest
                num = -b1282int(num)
                gotItem(num)
            elif typebyte == SYMBOL:
                buffer = rest
                num = b1282int(num)
                gotItem(self.incomingVocabulary[num])
            elif typebyte == VOCAB:
                buffer = rest
                num = b1282int(num)
                gotItem(self.incomingVocabulary[-num])
            elif typebyte == FLOAT:
                buffer = rest
                num = float(num)
                gotItem(num)
            else:
                raise NotImplementedError("Invalid Type Byte")
            while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
                item = listStack.pop()[1]
                gotItem(item)
        self.buffer = ''

    def expressionReceived(self, lst):
        """Called when an expression (list, string, or int) is received.
        """
        raise NotImplementedError()


    outgoingVocabulary = {
        # Jelly Data Types
        'None'           :  -1,
        'class'          :  -2,
        'dereference'    :  -3,
        'reference'      :  -4,
        'dictionary'     :  -5,
        'function'       :  -6,
        'instance'       :  -7,
        'list'           :  -8,
        'module'         :  -9,
        'persistent'     : -10,
        'tuple'          : -11,
        'unpersistable'  : -12,

        # PB Data Types
        'copy'           : -13,
        'cache'          : -14,
        'cached'         : -15,
        'remote'         : -16,
        'local'          : -17,
        'lcache'         : -18,

        # PB Protocol Messages
        'version'        : -19,
        'login'          : -20,
        'password'       : -21,
        'challenge'      : -22,
        'perspective'    : -23,
        'inperspective'  : -24,
        'cachemessage'   : -25,
        'message'        : -26,
        'answer'         : -27,
        'error'          : -28,
        'decref'         : -29,
        'decache'        : -30,
        'uncache'        : -31,
        }

    incomingVocabulary = {}
    for k, v in outgoingVocabulary.items():
        incomingVocabulary[v] = k
        
    def __init__(self):
        self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
        self.outgoingSymbolCount = 0
        
    def intern(self, sym):
        write = self.transport.write
        self.outgoingSymbolCount = self.outgoingSymbolCount + 1
        self.outgoingSymbols[sym] = self.outgoingSymbolCount

    def sendEncoded(self, obj):
        io = cStringIO.StringIO()
        self._encode(obj, io.write)
        value = io.getvalue()
        self.transport.write(value)

    def _encode_longint(self, obj, write):
        assert not "Not implemented"

    def _encode(self, obj, write):
        if isinstance(obj, types.ListType) or isinstance(obj, types.TupleType):
            int2b128(len(obj), write)
            write(LIST)
            for elem in obj:
                self._encode(elem, write)
        elif isinstance(obj, types.LongType):
            self._encode_longint(obj, write)
        elif isinstance(obj, types.IntType):
            if obj >= 0:
                int2b128(obj, write)
                write(INT)
            else:
                int2b128(-obj, write)
                write(NEG)
        elif isinstance(obj, types.FloatType):
            write(str(obj))
            write(FLOAT)
        elif isinstance(obj, types.StringType):
            if self.outgoingSymbols.has_key(obj):
                symbolID = self.outgoingSymbols[obj]
                if symbolID < 0:
                    int2b128(-symbolID, write)
                    write(VOCAB)
                else:
                    int2b128(symbolID, write)
                    write(SYMBOL)
            else:
                int2b128(len(obj), write)
                write(STRING)
                write(obj)
        else:
            assert 0, "could not send object: %s" % repr(obj)

import cBanana

class Canana(Banana):
    def connectionMade(self):
        self.state = cBanana.newState()

    def dataReceived(self, chunk):
        self.buffer += chunk
        processed = cBanana.dataReceived(self.state, buffer, self.expressionReceived)
        self.buffer = self.buffer[processed:]

    _encode = apiarymisc.make_method(Banana, cBanana.encode_stuff)

Pynana = Banana

try:
    import cBanana
except ImportError:
    pass
else:
    Banana = Canana

# For use from the interactive interpreter
_i = Banana()

def encode(lst):
    io = cStringIO.StringIO()
    _i._encode(lst, io.write)
    return io.getvalue()
-------------- next part --------------
/* cBanana.c */

#ifdef WIN32
#include <windows.h>
#define EXTERN_API __declspec(dllexport)
#else
#define EXTERN_API 
#endif

#include <Python.h>
#include <assert.h>

/* Python module initialization */

EXTERN_API void initcBanana(void);

/* Python accessible */
static PyObject *encode_stuff( PyObject *self, PyObject *args );
static PyObject *dataReceived( PyObject *self, PyObject *args );
static PyObject *cBananaState_new( PyObject *self, PyObject *args );
static PyObject *encodeLong( PyObject *self, PyObject *args );

// function table passed into Python by initcBanana()
static PyMethodDef cBanana__methods__[] =
  {
    { "encode_stuff", encode_stuff, METH_VARARGS },
    { "dataReceived", dataReceived, METH_VARARGS },
    { "newState", cBananaState_new, METH_VARARGS },
    { "encodeLong", encodeLong, METH_VARARGS },
    { NULL, NULL }        /* Sentinel */
  };

static PyObject *BananaError;

#define HIGH_BIT_SET 0x80

#define LIST		 0x80
#define INT			 0x81
#define STRING		 0x82
#define SYMBOL		 0x83
#define NEG			 0x84
#define VOCAB		 0x85
#define FLOAT		 0x86
#define LONGINT          0x87

#define NUM_VOCABS   31

struct listItem
{
  struct listItem *lastList;
  PyObject *thisList;
  int size;
};

/*
 * This struct represents state that's carried between calls.
 */

typedef struct {
  PyObject_HEAD
  struct listItem *currentList;
} cBananaState;

staticforward PyTypeObject cBananaStateType;

static PyObject*
cBananaState_new(PyObject *self, PyObject *args) {
  cBananaState* state;
  if (!PyArg_ParseTuple(args, ":newState")){
    return NULL;
  }
  state = PyObject_NEW(cBananaState, &cBananaStateType);
  state->currentList = NULL;
  return (PyObject*) state;
}

static void
cBananaState_dealloc(PyObject* self)
{
  struct listItem* thatList;
  struct listItem* thisList;
  thisList = ((cBananaState*)self) -> currentList;
  while (thisList) {
    thatList = thisList->lastList;
    Py_DECREF(thisList->thisList);
    free(thisList);
    thisList = thatList;
  }
  PyMem_DEL(self);
}

static PyTypeObject cBananaStateType = {
  PyObject_HEAD_INIT(NULL)
  0,
  "cBananaState",
  sizeof(cBananaState),
  0,
  cBananaState_dealloc, /* dealloc */
  0, /* print */
  0, /* getattr */
  0, /* setattr */
  0, /* compare */
  0, /* repr */
  0, /* as_number */
  0, /* as_sequence */
  0, /* as_mapping */
  0, /* hash */
};

const char *vocab[] = {
  // Filler so we start at 1 not 0
  "Dummy",  /* 0 */
  // Jelly Data Types
  "None",   /* 1 */
  "class",  /* 2 */
  "dereference", /* 3 */
  "reference",  /* 4 */
  "dictionary", /* 5 */
  "function",/* 6 */
  "instance",/* 7 */
  "list", /* 8 */
  "module",/* 9 */
  "persistent",/* 10 */
  "tuple",/* 11 */
  "unpersistable",/* 12 */
  // PB Data Types
  "copy",/* 13 */
  "cache",/* 14 */
  "cached",/* 15 */
  "remote",/* 16 */
  "local",/* 17 */
  "lcache",/* 18 */
  // PB Protocol messages
  "version",/* 19 */
  "login",/* 20 */
  "password",/* 21 */
  "challenge",/* 22 */
  "perspective",/* 23 */
  "inperspective",/* 24 */
  "cachemessage",/* 25 */
  "message",/* 26 */
  "answer",/* 27 */
  "error",/* 28 */
  "decref",/* 29 */
  "decache",/* 30 */
  "uncache"/* 31 */
};


const char *findVocab(int key)
{
  int offset = -key;
  if (offset < 0 || offset >= NUM_VOCABS) {
    return NULL;
  }
  return vocab[offset];
}

int b1282int(unsigned char *str, int begin, int end)
{
  int i = 0;
  int place = 0;
  int count;

  for (count=begin; count < end; count++) {
    unsigned char num = str[count];
    /*printf("b1282int: num = %d\n", num);*/
    if (place) {
      i = i +  (num << (7 * place)); // (num * (128 ^ place));
    } else {
      i = i + num;
    }
    place++;
  }
  return i;
}

#include <longintrepr.h>

static PyObject *encodeLong( PyObject *self, PyObject *args )
{
  unsigned char *str;
  int end;
  PyLongObject *longo;
  PyObject *retval;

  if(!PyArg_ParseTuple(args, "O!:encodeLong", &PyLong_Type, &longo))
    return NULL;

  end = abs(longo->ob_size)*2 + 1;
  str = PyMem_MALLOC(end);
  if(_PyLong_AsByteArray(longo, str, end, 1, 1))
    return NULL;

  retval = PyString_FromStringAndSize(str, end);
  PyMem_FREE(str);

  return retval;
}

/**************
** Real gotItem - invokes the python callback if required
**************/
int gotPythonItem(PyObject *object, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *result;
  PyObject *args;
  int ret;

  if (currentList) {
    PyList_Append(currentList->thisList, object);
    return 1;
  }
  else {
    args = PyTuple_New(1);
    ret = PyTuple_SetItem(args, 0, object);
    if (ret != 0) {
      //printf("Couldn't add item to tuple\n");
      return 0;
    }
    
    /*printf("Calling expressionReceived.\n");*/
    result = PyObject_CallObject(expressionReceived, args);
    if (!result) {
      /* printf("Call to expressionReceived failed.\n"); */
      /* printf( "ARGS: < %s >\n",  PyString_AsString( PyObject_Repr(args) ) ); */
      /* PyErr_Print(); */
      return 0;
    }
    return 1;
  }
}

/**************
** Helper function to add a float
**************/
int gotItemFloat(double value, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *object = PyFloat_FromDouble(value);
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add an int
**************/
int gotItemInt(int value, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *object = PyInt_FromLong(value) ;
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add a string
**************/
int gotItemString(const char *value, int len, struct listItem *currentList, PyObject *expressionReceived)
{
  char* myValue;
  PyObject *object;
  myValue = malloc(len);
  memcpy(myValue, value, len);
  object = PyString_FromStringAndSize(myValue, len);
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add a list
**************/
int gotItemList(PyObject *listObject, struct listItem *currentList, PyObject *expressionReceived)
{
  return gotPythonItem(listObject, currentList, expressionReceived);
}

/****************************************
** dataReceived
**
**
** Inputs:
**		newChunk - the new data to decode
**      expressionReceived - the python callable to invoke for each expression
**
** Output:
**  number of bytes processed
*****************************************/
static PyObject *dataReceived( PyObject *self, PyObject *args )
{

  PyObject *newChunk;		  // pointer to new chunk
  PyObject *expressionReceived;   // callback
  PyObject *stateobj;             // state object
  cBananaState *state;            // state
  unsigned char *buffer;          // buffer to work from
  int bufferSize;                 // size of the remaining portion
  int pos;
  int nBeginPos;
  int nEndPos;
  unsigned char typeByte;

  /* printf("Entering dataReceived!\n"); */

  if( !PyArg_ParseTuple( args, "OOO", &stateobj, &newChunk, &expressionReceived) )
    return NULL;

  if (!PyCallable_Check(expressionReceived) ) {
    // ERROR - must be a callback we can use
    //printf("ERROR - must be a callback we can use.\n");
    Py_INCREF(Py_None);
    return Py_None;
  }

  if (!PyString_Check(newChunk)) {
    printf("First arg was not a string\n");
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  if ((stateobj == NULL) || ((stateobj->ob_type) != (&cBananaStateType))) {
    printf("state object wasn't\n");
    Py_INCREF(Py_None);
    return Py_None;
  }
  state = (cBananaState*) stateobj;

  buffer = PyString_AS_STRING(newChunk);
  bufferSize = PyString_GET_SIZE(newChunk);

  pos = 0;
  while (pos < bufferSize) {
    /* printf("beginning at %d\n", pos); */
    nBeginPos = pos; /* beginning of number, also, 'consumed so far' */
    while (buffer[pos] < HIGH_BIT_SET) {
      //printf("Got character %c (%d) at %d\n", current[pos], current[pos], pos );
      pos++;
      if ((pos-nBeginPos) > 64) {
	//ERROR: "Security precaution: more than 64 bytes of prefix"
	printf("Security precaution: more than 64 bytes of prefix (this should raise an exception).\n");
	Py_INCREF(Py_None);
	return Py_None;
      } else if (pos == bufferSize) {
	/* boundary condition -- not enough bytes to finish the number */
	return PyInt_FromLong(nBeginPos);
      }
    }
    // extract the type byte
    nEndPos = pos;
    typeByte = buffer[pos];
    pos++;
    
    switch (typeByte) {
    case LIST: {
      int num = b1282int(buffer, nBeginPos, nEndPos);
      if (!state->currentList)	{
	state->currentList = (struct listItem *)malloc(sizeof(struct listItem)); 
	state->currentList->lastList = NULL;
	state->currentList->size = num;
	state->currentList->thisList = PyList_New(0);
      } else {
	struct listItem *newList = (struct listItem *) malloc(sizeof(struct listItem));
	newList->size = num;
	newList->thisList = PyList_New(0);
	newList->lastList = state->currentList;
	state->currentList = newList;
      }
      break;
    }
    case INT: {
      int num = b1282int(buffer, nBeginPos, nEndPos);
      if (!gotItemInt(num, state->currentList, expressionReceived)){
	return NULL;
      }
      break;
    }
    case NEG: {
      int num = -b1282int(buffer, nBeginPos, nEndPos);
      if (!gotItemInt(num, state->currentList, expressionReceived)){
	return NULL;
      }
      break;
    }
      
    case LONGINT: {
      PyObject *tmpo;
      int len = b1282int(buffer, nBeginPos, nEndPos);

      if (len > 640 * 1024) {
	PyErr_SetString(BananaError, "Security precaution: Length identifier  > 640K.\n");
	return NULL;
      }
      if (len > (bufferSize - pos) ) {
	/* boundary condition; not enough bytes to complete string */
	return PyInt_FromLong(nBeginPos);
      }
      tmpo = _PyLong_FromByteArray(buffer + pos, len, 1, 1);
      if (!gotPythonItem(tmpo, state->currentList, expressionReceived))
	return NULL;
      pos = pos + len;
      break;
    }
      
    case STRING: {
      int len = b1282int(buffer, nBeginPos, nEndPos);
      /* printf("String length: %d\n", len); */
      if (len > 640 * 1024) {
	PyErr_SetString(BananaError, "Security precaution: Length identifier  > 640K.\n");
	return NULL;
      }
      if (len > (bufferSize - pos) ) {
	/* boundary condition; not enough bytes to complete string */
	return PyInt_FromLong(nBeginPos);
      }
      if (!gotItemString(buffer+pos, len, state->currentList, expressionReceived)) {
	return NULL;
      }
      pos = pos + len;
      break;
    }
      
    case SYMBOL:
    case VOCAB: {
      // SYBMOL and VOCAB are the same??
      int num = b1282int(buffer, nBeginPos, nEndPos);
      const char *vocabString = findVocab(-num);
      if (vocabString == NULL) {
	PyErr_SetString(BananaError, "Vocab String not found.");
	return NULL;
      }
      if (!gotItemString(vocabString, strlen(vocabString), state->currentList, expressionReceived)) {
	return NULL;
      }
      break;
    }
      
    case FLOAT: {
      // TODO: optimize floats
      char* numBuffer;
      int numLen;
      double num;

      numLen = (nEndPos - nBeginPos) + 1;
      numBuffer = malloc(numLen);
      memcpy(numBuffer, buffer+nBeginPos, (nEndPos - nBeginPos));
      numBuffer[numLen-1] = 0;
      /* printf("float string: %s %d\n", numBuffer, numLen); */
      num = atof(numBuffer);
      free(numBuffer);
      /* printf("float number: %f\n", num); */
      gotItemFloat(num, state->currentList, expressionReceived);
      break;
    }
      
    default: {
      PyErr_SetString(BananaError, "Invalid Type Byte");
      return NULL;
    }
    }
    // If there is a list, check if it is full
    if (state->currentList) {
      /* printf("bufferSize: %d  listSize: %d\n", PyList_Size(state->currentList->thisList), state->currentList->size); */
      while (state->currentList && PyList_Size(state->currentList->thisList) == state->currentList->size) {
	PyObject *list;
	struct listItem *tmp;
	
	list = state->currentList->thisList;
	tmp = state->currentList->lastList;
	free(state->currentList);
	state->currentList = tmp;
	
	if (!gotItemList(list, state->currentList, expressionReceived)) {
	  return NULL;
	}
      }
    }
  }


  ////printf(full);
  return PyInt_FromLong(pos);

}

static int
int2b128(int val, unsigned char *outbuf)
{
  int len = 0;

  if(val < 0)
    return -1;

  do {
    outbuf[len++] = (val & 0x7F);
    val >>= 7;
  } while(val);

  return len;
}

static int
write_int(int val, PyObject *writeo)
{
  char intbuf[32];
  int itmp;
  PyObject *otmp;

  itmp = int2b128(val, intbuf);
  if(itmp < 0)
    return -1;

  otmp = PyEval_CallFunction(writeo, "(s#)", intbuf, itmp);

  if(!otmp)
    return -1;

  Py_DECREF(otmp);

  return 0;
}

static int
real_encode_stuff(PyObject *self, PyObject *obj, PyObject *writeo)
{
  PyObject *otmp;

  assert(obj);
  if(PyString_Check(obj))
    {
      otmp = PyObject_GetAttrString(self, "outgoingSymbols");
      if(!otmp)
	return -1;
      otmp = PyDict_GetItem(otmp, obj);
      if(otmp)
	{
	  int sid;
	  if(!PyInt_Check(otmp))
	    return -1;
	  sid = PyInt_AsLong(otmp);
	  if(sid < 0)
	    {
	      write_int(-sid, writeo);
	      otmp = PyEval_CallFunction(writeo, "(c)", VOCAB);
	      if(!otmp)
		return -1;
	      Py_DECREF(otmp);
	    }
	  else
	    {
	      write_int(sid, writeo);
	      otmp = PyEval_CallFunction(writeo, "(c)", SYMBOL);
	      if(!otmp)
		return -1;
	      Py_DECREF(otmp);
	    }
	}
      else
	{
	  write_int(PyString_GET_SIZE(obj), writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", STRING);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	  otmp = PyEval_CallFunction(writeo, "(O)", obj);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
    }
  else if(PySequence_Check(obj))
    {
      int psl = PySequence_Length(obj), i;

      write_int(psl, writeo);
      otmp = PyEval_CallFunction(writeo, "(c)", LIST);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
      for(i = 0; i < psl; i++)
	{
	  PyObject *subitem;

	  subitem = PySequence_GetItem(obj, i);

	  if(real_encode_stuff(self, subitem, writeo))
	    return -1;
	}
    }
  else if(PyLong_Check(obj))
    {
      int end;
      unsigned char *str;
      PyLongObject *longo = (PyLongObject *)obj;

      end = abs(longo->ob_size) * 2 + 1;
      write_int(end, writeo);

      str = alloca(end+1);
      if(_PyLong_AsByteArray(longo, str, end-1, 1, 1))
	return -1;
      str[0] = LONGINT;

      otmp = PyEval_CallFunction(writeo, "(s#)", str, end+1);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
    }
  else if(PyInt_Check(obj))
    {
      int val = PyInt_AsLong(obj);

      if(val >= 0)
	{
	  write_int(val, writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", INT);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
      else
	{
	  write_int(-val, writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", NEG);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
    }
  else if(PyFloat_Check(obj))
    {
      char fbuf[150];
      int n;
      PyFloat_AsReprString(fbuf, (PyFloatObject *)obj);
      n = strlen(fbuf);
      fbuf[n-1] = FLOAT;
      fbuf[n] = '\0';
      
      otmp = PyEval_CallFunction(writeo, "(s#)", fbuf, n+1);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
    }
  else
    return -1;

  return 0;
}

static PyObject *
encode_stuff(PyObject *unself, PyObject *args)
{
  PyObject *obj, *writeo, *self;

  if(!PyArg_ParseTuple(args, "OOO:encode_stuff", &self, &obj, &writeo))
    return NULL;

  if(real_encode_stuff(self, obj, writeo))
    return NULL;

  Py_INCREF(Py_None);
  return Py_None;
}

// module's initialization function for Python
EXTERN_API void initcBanana(void)
{
  PyObject *m, *d;
  cBananaStateType.ob_type = &PyType_Type;
  m = Py_InitModule("cBanana", cBanana__methods__);
  d = PyModule_GetDict(m);
  BananaError = PyErr_NewException("cBanana.error", NULL, NULL);
  PyDict_SetItemString(d, "error", BananaError);
}

From lists at itamarst.org  Mon Oct  1 09:34:50 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 01 Oct 2001 17:34:50 +0200
Subject: [Twisted-Python] New thread-based select replacement
Message-ID: <3BB88D1A.7090405@itamarst.org>

Great to see I can run on Java now - I'll test out the performance 
difference ASAP. Thanks glyph!

I would like to point out that it might be nice to use this on CPython 
as well - both for performance comparision and for other platforms that 
don't support select() (BeOS? PlayStation 2? Amiga?). Haven't looked at 
the code yet so I don't know if that's dealt with.





From jasbahr at onebox.com  Tue Oct  2 15:35:49 2001
From: jasbahr at onebox.com (Jason Asbahr)
Date: Tue, 02 Oct 2001 16:35:49 -0500
Subject: [Twisted-Python] Twisted T-Shirts
Message-ID: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>

http://www.twisted.co.uk/orders/orderuk2_def.htm

Ok, not quite, but after looking at this link, it's OBVIOUS
we need to infiltrate IPC 10 wearing actual Twisted t-shifts.

I favor black cotton.  :-)

Jason

PS -- The Twisted Records designs are not a bad place to start.
      Simple, but interesting.  





From carmstro at twistedmatrix.com  Tue Oct  2 17:20:15 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 2 Oct 2001 19:20:15 -0400
Subject: [Twisted-Python] Twisted T-Shirts
In-Reply-To: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>
References: <20011002213549.YYFZ297.mta11.onebox.com@onebox.com>
Message-ID: <20011002192015.A26864@Fookidla.org>

I've been tinkering with some Twisted clothing designs for a while. I'll
put some together and put 'em on my web site soon. I can put them up on
our cafepress store (http://cafepress.com/poundpython, IIRC) so people
can order them without any hassle.

There's also discussion about having numbered pins: "I am (not) PSU agent
#n" or somesuch. Does anyone know what we can do to get these? Who's going
to do it (ie, who am I sending money to ;))?

Oh yes, I just remembered. The last time I was tinkering with a shirt design
I found myself lacking some base twisted logo stuff: glyph, can you send
me the .xcfs of relevant logos?

On Tue, Oct 02, 2001 at 04:35:49PM -0500, Jason Asbahr wrote:
> 
> http://www.twisted.co.uk/orders/orderuk2_def.htm
> 
> Ok, not quite, but after looking at this link, it's OBVIOUS
> we need to infiltrate IPC 10 wearing actual Twisted t-shifts.
> 
> I favor black cotton.  :-)
> 
> Jason
> 
> PS -- The Twisted Records designs are not a bad place to start.
>       Simple, but interesting.  
> 
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Wed Oct  3 04:18:12 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 12:18:12 +0200
Subject: [Twisted-Python] Twisted doesn't work in threaded mode using jython
Message-ID: <3BBAE5E4.4010506@itamarst.org>

One issue is the lack of errno, which StringIO requires (solved by making an 
empty errno.py). So this can be solved trivially.

A more serious issue is the lack of a _JavaWaker...





From lists at itamarst.org  Wed Oct  3 10:57:43 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 18:57:43 +0200
Subject: [Twisted-Python] Interface documentation
Message-ID: <3BBB4387.9010304@itamarst.org>

Right now, too much of the interface documentation is mixed up with the 
class implementation (if there *is* documentation). I propose making 
separate interface classes used only for documentation purposes. For 
example, in twisted.internet we might have interface.py with the following 
code, which would allow us to remove all the docstrings from 
abstract.FileDescriptor (that class is way too huge anyway), and maybe add a 
__implements__ = (interfaces.IProducer,) to the FileDescriptor class:


twisted/internet/interfaces.py:
==============================================================================
class IProducer:
     """A producer produces data for a consumer.

     If this is a streaming producer, it will only be
     asked to resume producing if it has been previously asked to pause.
     Also, if this is a streaming producer, it will ask the producer to
     pause when the buffer has reached a certain size.

     In other words, a streaming producer is expected to produce (write to
     this consumer) data in the main IO thread of some process as the result
     of a read operation, whereas a non-streaming producer is expected to
     produce data each time resumeProducing() is called.

     If this is a non-streaming producer, resumeProducing will be called
     immediately, to start the flow of data.  Otherwise it is assumed that
     the producer starts out life unpaused.
     """

     def resumeProducing(self):
         """Resume producing data.

         This tells a producer to re-add itself to the main loop and produce
         more data for its consumer.
         """
         pass

     def pauseProducing(self):
         """Pause producing data.

         Tells a producer that it has produced too much data to process for
         the time being, and to stop until resumeProducing() is called.
         """
         pass

     def stopProducing(self):
         """Stop producing data.

         This tells a producer that its consumer has died, so it must stop
         producing data for good.
         """
         pass







From lists at itamarst.org  Wed Oct  3 11:01:21 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 03 Oct 2001 19:01:21 +0200
Subject: [Twisted-Python] Interface documentation
References: <3BBB4387.9010304@itamarst.org>
Message-ID: <3BBB4461.9040900@itamarst.org>

Oh yes, next you ask - what is this good for?

Well, you can mark a class as supporting a specific interface, and I have 
some unit testing code that makes sure that the class's methods have the 
same signatures as the interface's methods. And this way the docstrings for 
a specific interface are together in one one place.





From acapnotic at twistedmatrix.com  Thu Oct  4 22:23:46 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 4 Oct 2001 21:23:46 -0700
Subject: [Twisted-Python] Re: pretzel
Message-ID: <20011004212346.A1238@troglodyte.menefee>

What's the "if" clause in the features loop of BreadStick.sendMessage()
supposed to be doing?  

Why is the feature's method named "do" instead of "sendMessage"?  What's
the difference between features and SaltGrains?

What's the difference between a SaltGrain (or feature) and a
pb^H^Hpassport.Service?  May saltGrain.network be the same as
service.serviceName?  May person be a passport.Identity?

Must message be a string?


See...  Pretzel puzzles me.  This project has some ideas with great
potential, and it's precisely the sort of thing Twisted is good at...
so I don't get why you seem to be intent on re-implementing Twisted
inside of Twisted.  I guess that would make Pretzel live up to its name,
but...

This is why I kept asking what features pretzel was going to have,
because that's where I thought the fun was going to be.  If you had an
factoid-service, for example, which could be accessed through both IRC
and the web, that could be cool.  And there are definately some
protocol/interface-specific gaps to fill in before that will work. i.e.
msg'ing "Hi" to a Twisted IRC client doesn't currently set up any
sort of broker/viewpoint for you, so that'd be an excellent area for
�berbot code to cover...

But establishing local services (SaltGrains) and passing messages
between them...  That's what Twisted *does*, no need to create more
infastructure there.

Am I missing something?  I may just be speaking up too soon on a subject
I know nothing about, but hey, that's what you get for checking it in to
CVS.  ;)

"No, you're not going to trick me into writing IRC code *again*"-ly,

 - Kevin (Acapnotic)

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is 16.87 days old, waning gibbous, 95% illuminated.




From carmstro at twistedmatrix.com  Fri Oct  5 06:55:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 5 Oct 2001 08:55:55 -0400
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <20011004212346.A1238@troglodyte.menefee>
References: <20011004212346.A1238@troglodyte.menefee>
Message-ID: <20011005085555.A2974@Fookidla.org>

On Thu, Oct 04, 2001 at 09:23:46PM -0700, Kevin Turner wrote:
> What's the "if" clause in the features loop of BreadStick.sendMessage()
> supposed to be doing?  
> 
> Why is the feature's method named "do" instead of "sendMessage"?  What's
> the difference between features and SaltGrains?

Ok, SaltGrains are things like "IRC Grain", "Words Grain" -- they're 
client interfaces to other services (not services themselves, to answer
your question directly below). "features" (I'd like a better name for
these) are things like "factoid engine", "fortune", etc. the reason for
that 'if' (I guess my comment wasn't clear enough) was so that features
could decide if they want the message to be distributed to the rest
of the networks or not. I'm not so sure this is needed now, as I originally
planned for private message passing to be a feature, but I built that into
the actual BreadStick/SaltGrain protocol (sendPrivMessage). So, who knows
what the future of 'features' holds. I'll have to think a little about it.
:-)

> 
> What's the difference between a SaltGrain (or feature) and a
> pb^H^Hpassport.Service?  May saltGrain.network be the same as
> service.serviceName?  May person be a passport.Identity?
> 
> Must message be a string?

Yeah, although it's not enforced or caught yet.

> See...  Pretzel puzzles me.  This project has some ideas with great
> potential, and it's precisely the sort of thing Twisted is good at...
> so I don't get why you seem to be intent on re-implementing Twisted
> inside of Twisted.  I guess that would make Pretzel live up to its name,
> but...

See my next comment.

> But establishing local services (SaltGrains) and passing messages
> between them...  That's what Twisted *does*, no need to create more
> infastructure there.

You're right. This is just a bit of glue code to hook a bunch of clients
together at once. Twisted doesn't have this yet; a centralized place where a
bunch of objects can send messages to and receive messages from other
objects. We don't need to use PB for this because there's no reason to
network the actual BreadStick/SaltGrains. The SaltGrains will handle their
own communications with other services, be it through a PB interface, an IRC
protocol, etc.

> Am I missing something?  I may just be speaking up too soon on a subject
> I know nothing about, but hey, that's what you get for checking it in to
> CVS.  ;)

I think the main confusion was your misunderstanding that SaltGrains are
similar to services -- remember, they're just *client* interfaces to other
services. A SaltGrain may represent a "ry" on some IRC network somewhere,
or a MUD, or...

Well, I've thought a little harder, and I guess I should clear something
else up. Technically, a SaltGrain could also be a server of some sort,
or a Resource on a web server, too. So, I guess SaltGrain should be
generally defined as "an agent who can transmit and/or receive data to/from
other users". But the general case will probably be some client agent
that connects to a remote server as a regular user to communicate with other
users on that service.

> "No, you're not going to trick me into writing IRC code *again*"-ly,

But-it's-so-much-fun!-ly yours,

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From lists at itamarst.org  Fri Oct  5 08:51:13 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 05 Oct 2001 16:51:13 +0200
Subject: [Twisted-Python] Re: pretzel
References: <20011004212346.A1238@troglodyte.menefee>
Message-ID: <3BBDC8E1.8070105@itamarst.org>

I find the terms breadstick and saltgrain to be confusing - class names 
should describe what they do! E.g. for all the fun had with names in 
twisted.spread, pb defines classes named Perspective, etc., not Peanut or 
Chunky.





From mattcampbell at pobox.com  Fri Oct  5 13:49:59 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Fri, 5 Oct 2001 14:49:59 -0500
Subject: [Twisted-Python] Can pipes be used in non-blocking mode?
Message-ID: <20011005144959.A16633@mattcamp.dyn.dhs.org>

I noticed that twisted.internet.process currently uses pipes in blocking
mode.  In particular, when ProcessWriter calls os.write(), it blocks.
Can writing be done in non-blocking mode instead?  Thanks.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From glyph at twistedmatrix.com  Fri Oct  5 15:20:30 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 5 Oct 2001 16:20:30 -0500
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <3BBDC8E1.8070105@itamarst.org>
Message-ID: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>

On Friday, October 5, 2001, at 09:51  AM, Itamar Shtull-Trauring wrote:

> I find the terms breadstick and saltgrain to be confusing - class names 
> should describe what they do! E.g. for all the fun had with names in 
> twisted.spread, pb defines classes named Perspective, etc., not Peanut 
> or Chunky.

I agree.  In fact, "pb" really is a "Perspective Broker" and Jelly is an 
alternative mode for "preserving" things to Pickle.  ("nutella" may 
possibly be a peer-to-peer file-sharing network in the same package, but 
I think there's some precedent for that, too.)  A slight tinge of whimsy 
is fun for naming stuff but the names I saw in those other emails were 
just ridiculous.  (Not in the coding standard yet but will be soon -- 
distinctiveness and brevity are preferred at the module level for 
naming, but descriptiveness and clarity are what you need for classes 
and methods)

This thread began for me (and for the list archiver, apparently) with 
"Re: pretzel".  I have no idea what "pretzel" is or where it came from, 
and so far it sounds like a pretty bad idea.  Could someone please 
explain it in depth?  Especially expound upon "Twisted doesn't have this 
yet; a centralized place where a bunch of objects can send messages to 
and receive messages from other objects."  This is at once maddeningly 
vague and precise enough to be completely incorrect.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From glyph at twistedmatrix.com  Fri Oct  5 15:24:40 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Fri, 5 Oct 2001 16:24:40 -0500
Subject: [Twisted-Python] Can pipes be used in non-blocking mode?
In-Reply-To: <20011005144959.A16633@mattcamp.dyn.dhs.org>
Message-ID: <E15pcYt-0001y6-00@zaibach.twistedmatrix.com>

On Friday, October 5, 2001, at 02:49  PM, Matt Campbell wrote:

> I noticed that twisted.internet.process currently uses pipes in blocking
> mode.  In particular, when ProcessWriter calls os.write(), it blocks.
> Can writing be done in non-blocking mode instead?  Thanks.
> --
> Matt Campbell <http://www.pobox.com/~mattcampbell/>

Sorry, slight oversight!  I don't think there's a reason that they 
block; if it doesn't break anything I'll fix that in 0.11 (any day 
now...)

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From carmstro at twistedmatrix.com  Fri Oct  5 17:34:48 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Fri, 5 Oct 2001 19:34:48 -0400
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
References: <3BBDC8E1.8070105@itamarst.org> <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
Message-ID: <20011005193448.A575@Fookidla.org>

On Fri, Oct 05, 2001 at 04:20:30PM -0500, Glyph Lefkowitz wrote:
[snip]
> just ridiculous.  (Not in the coding standard yet but will be soon -- 
> distinctiveness and brevity are preferred at the module level for 
> naming, but descriptiveness and clarity are what you need for classes 
> and methods)

Alright, I've commited changes. UserAgent and MessageDistributor sound OK?

> This thread began for me (and for the list archiver, apparently) with 
> "Re: pretzel".  I have no idea what "pretzel" is or where it came from, 
> and so far it sounds like a pretty bad idea.  Could someone please 
> explain it in depth?  Especially expound upon "Twisted doesn't have this 
> yet; a centralized place where a bunch of objects can send messages to 
> and receive messages from other objects."  This is at once maddeningly 
> vague and precise enough to be completely incorrect.

Don't get too angry with me =) Really all pretzel is is a bit of glue code.
The idea behind it is basically an "IRC bot on crack" -- only not dependant
on the IRC part. It's a pluggable bot, that can support whatever types of
communication media you want it to, be it Words, IRC, a quake server, a
MUD, etc. Twisted really doesn't have this yet -- even if I used PB or
somesuch I'd have to actually implement the same stuff, basically. And this
definitely doesn't need PB, since none of it would ever need to be
spreadable.

"SaltGrains" (now UserAgents), are, like I said in my last email (i'm not
sure if you got it), basically just clients that know how to talk to some
service and thus talk to the other users on that service. the
MessageDistributor (formerly "BreadStick") takes messages from these agents,
and distributes them to the rest of the agents. It's really very simple,
thus backing up my claim that it's just a bit of glue code. =) The cool
stuff is going to be the different UserAgents and Features we implement.
We'll have Quake servers giving us deathmatch stats, and we'll be talking to
people on MUDs and other IRC networks.

As you may've noticed, yes, this will be a ry-killer. =)

And for a bit of history -- this idea started with skreech and his old
'mudbot' program which he used to connect Quake servers, IRC, and his MUD.
We thought it'd be fun to reimplement it (much better) in Twisted, so I'm
helping him out.


-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From skreech at tranquility.net  Sat Oct  6 10:03:57 2001
From: skreech at tranquility.net (Gavin Cooper)
Date: Sat, 6 Oct 2001 11:03:57 -0500
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
Message-ID: <20011006110357.A4433@europa.tranquility.net>

> And for a bit of history -- this idea started with skreech and
> his old 'mudbot' program which he used to connect Quake servers, 
> IRC, and his MUD. We thought it'd be fun to reimplement it (much 
> better) in Twisted, so I'm helping him out.

pretzel already seems to be gone from CVS for some unexplained reason. 
But maybe since it is I who had the original vision, I could possibly 
explain what pretzel/mudbot is suppose to be.

It started when I hung out on a private mud a lot. A group of friends 
liked to mud and eventually we setup a private mud and all we did on 
it was talk. That is where Mudbot started, all it did was connect to 
the mud and function as any other IRC bot would do. It did some 
uninteresting things like executed certain commands and gave the 
output of them to the mud, such as 'uptime' or the like. The next step 
was to make it connect to more than one mud. That was completed, and 
intermud communication was possible just like the ry bot on #python. 
When the capability for 3 or more muds was hacked in, something 
resembling the pretzel infrastructure began to materialize.

Eventually I wanted to be able to display a file easily to other
people on the mud without copying or pasting. Looking through python
docs I discovered 'fifos' and hacked it into mudbot. All I had to do
was "cat file > mudbot/fifo" and it was chatted onto the mud. At this
point I discovered that it could be possible to direct anything to
this fifo and have it display on the mud. I could "tail -f logfile >
mudbot/fifo" to a logfile, and it'd go to the mud. I liked this. Then
I tried starting a quake server on Linux, the local output of which is
text to the console, and redirecting this to the fifo made it possible
for people to play quake and for there to be something of an
"audience" on the mud. As we all liked to play quake, this was quite
fun.

Sometime around here I hacked in a little IRC support. I made it
possible for IRC <---> Mud communication. Naturally, this also allowed
for IRC <---> Fifo(and thus quake/logfiles)... coding in a real
console interface increased the number of input/output combinations.

Then I had The Idea.

I decided to recode mudbot completely. It was a desperate hack, I
hard-coded nearly everything. So I wrote some base mudbot code and
rewrote mud/irc/console/fifo capability into separately loadable
modules. At this timepoint however, I lost interest in muds because
the people I hung out with decided it was more fun to harass me and
my then-56k connection, so for personal reasons I didn't go back to
the mud, and thus I lost interest in ALL muds, leaving Mudbot as more
or less only an IRC bot on crack. So coding stopped before Mudbot's
second incarnation fully materialized. And so it was left
non-functional stuffed into a far corner in my home directory.

So what was this idea... my idea was that everything connected to the
mudbot had the capability to interact with everything else connected
to the mudbot in some orderly, standard way. Descriptions of Pretzel
have been so vague because we believe there's almost no limit to what
it would be able to accomplish. Naturally, the first module coded for
Pretzel (or UserAgent if you wish to call the module that) would be
IRC input/output support. That would allow Pretzel to talk to IRC.
Perhaps the second module would not be an input/output module, but a
data processing module, one that would simply test the concept. When
given a signal, it would output "Hello, world!". Data that comes
through IRC that says "hi" would signal (perhaps just call a method
of) the hello-world module, and the output of the hello-world module
is returned to the IRC module. The IRC module would be told to print
whatever comes from this hello-world module. The end result:

<skreech> pretzel: hi
<pretzel> Hello, world!


Other modules would be implemented. Data-processing modules that, say, 
run programs and return their output, or perhaps generate a fortune 
using the fortune program and return that. Or, for the ry killer, a 
module that would simply take what is input and output it to another 
input/output plugin. An ry killer could consist of four pieces:

1) IRC connection to efnet
2) IRC connection to ircnet
3) IRC connection to opn
4) Mirroring plugin

Where text coming in from every IRC connection would be directed 
towards the mirroring plugin, and the mirroring plugin would be 
designed to retransmit that message to every other IRC connection.


So what? That could be coded with Twisted within 30 minutes, you say.  
Part of my goal, however, is to be able to program Pretzel's behavior
without touching any code. I should be able to rip out the mirroring
plugin, shove in a logfile plugin, connect the IRC connections to the
logfile plugin (I keep getting the mental image of PVC pipe pluming)  
and make it a log-keeping bot, without seeing any code or even
restarting the bot. Granted, the flexibility of the bot will be
limited if you decide not to touch any code. If you use Pretzel and
decide, "hmm, I want people to know my uptime." then you could code a
module that adhered to the pretzel standard, shove it in to your
pretzel bot, hook it up to your IRC connection, and you'd have it. The
beauty of the system is that you coded it with the intention of using
it on IRC, but because it is a pretzel plugin, others can use the same
code to display the uptime on a Mud connection, or on Twisted.words,
or heck, a Quake server.


So that is my Mudbot/Pretzel theory. Thats the big idea. Any existing
IRC bot ought to be able to be replaced with Pretzel and a combination
of plugins, easily. Love it or hate it, give me your thoughts. But
again, its mysteriously missing from CVS as of about 5am zaibach-time
saturday.


Gavin Cooper
'skreech'




From carmstro at twistedmatrix.com  Sat Oct  6 10:50:53 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sat, 6 Oct 2001 12:50:53 -0400
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006110357.A4433@europa.tranquility.net>
References: <20011006110357.A4433@europa.tranquility.net>
Message-ID: <20011006125053.A2593@Fookidla.org>

On Sat, Oct 06, 2001 at 11:03:57AM -0500, Gavin Cooper wrote:
> > And for a bit of history -- this idea started with skreech and
> > his old 'mudbot' program which he used to connect Quake servers, 
> > IRC, and his MUD. We thought it'd be fun to reimplement it (much 
> > better) in Twisted, so I'm helping him out.
> 
> pretzel already seems to be gone from CVS for some unexplained reason. 
> But maybe since it is I who had the original vision, I could possibly 
> explain what pretzel/mudbot is suppose to be.

I removed it from CVS because glyph is going to be releasing a new version
of Twisted soon and doesn't want non-functional packages in it.

BTW, about your non-code touching idea, for this all that would need to be
done is a simple configuration interface feature-plugin that gave the
ability to add/remove plugins and whatnot..

I just had a thought. :-) Since such a configuration interface would no
doubt need some sort of access control, I'm wondering if we could use the
authentication bits of twisted.pb (or twisted.internet.passport.. I still
don't know how any of that stuff works) without the networking stuff itself
(since communication is done through the "user agents" (glyph has pointed
out that this name doesn't really work either, btw)).

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From tv at twistedmatrix.com  Sat Oct  6 15:41:40 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 07 Oct 2001 00:41:40 +0300
Subject: [Twisted-Python] Netstring unit tests fail with Python 1.x
Message-ID: <87k7y8bg4r.fsf@ki.yok.utu.fi>

	Don't know if this is the right fix, but...

[tv at ki ~/work/twistedmatrix/Twisted]$ DISPLAY= PYTHONPATH=. ./bin/runtests
.....................E.E.................attached [twisted.test.test_pb.DummyPerspective]
.............Rebuilding Delayed Event Queue...
(rebuilding stale twisted.test.crash_test_dummy.X instance (do))
Rebuilt.
........Created New Participant: glyph
Created New Participant: sean
..............................correct
....
Time: 1.545s

!!!FAILURES!!!
Test Results

Run: 94 ; Failures: 0; Errors: 2
There were 2 errors:
1) twisted.test.test_protocols.NetstringReceiverTestCase.testBuffer
Traceback (innermost last):
  File "./twisted/test/test_protocols.py", line 127, in testBuffer
    a.dataReceived(s)
  File "./twisted/protocols/basic.py", line 89, in dataReceived
    self.doData()
  File "./twisted/protocols/basic.py", line 53, in doData
    buffer,self.__data = self.__data[:self.length],self.__data[self.length:]
TypeError: slice index must be int

2) twisted.test.test_protocols.NetstringReceiverTestCase.testSafe
Traceback (innermost last):
  File "./twisted/test/test_protocols.py", line 140, in testSafe
    r.dataReceived(s)
  File "./twisted/protocols/basic.py", line 122, in dataReceived
    NetstringReceiver.dataReceived(self, data)
  File "./twisted/protocols/basic.py", line 89, in dataReceived
    self.doData()
  File "./twisted/protocols/basic.py", line 53, in doData
    buffer,self.__data = self.__data[:self.length],self.__data[self.length:]
TypeError: slice index must be int

[tv at ki ~/work/twistedmatrix/Twisted]$ 




Index: basic.py
===================================================================
RCS file: /cvs/Twisted/twisted/protocols/basic.py,v
retrieving revision 1.10
diff -u -r1.10 basic.py
--- basic.py	2001/09/30 18:55:43	1.10
+++ basic.py	2001/10/06 21:39:05
@@ -77,7 +77,7 @@
                 raise NetstringParseError
         self.__data = self.__data[m.end():]
         if m.group(1):
-            self.length = self.length * (10**len(m.group(1))) + long(m.group(1))
+            self.length = self.length * (10**len(m.group(1))) + int(m.group(1))
         if m.group(2):
             self.__buffer = ''
             self.mode = DATA 




[tv at ki ~/work/twistedmatrix/Twisted]$ DISPLAY= PYTHONPATH=. ./bin/runtests
.......................................attached [twisted.test.test_pb.DummyPerspective]
.............Rebuilding Delayed Event Queue...
(rebuilding stale twisted.test.crash_test_dummy.X instance (do))
Rebuilt.
........Created New Participant: glyph
Created New Participant: sean
..............................correct
....
Time: 1.550s

OK (94 tests)
[tv at ki ~/work/twistedmatrix/Twisted]$ 

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}




From lists at itamarst.org  Sat Oct  6 15:46:22 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 06 Oct 2001 23:46:22 +0200
Subject: [Twisted-Python] Netstring unit tests fail with Python 1.x
References: <87k7y8bg4r.fsf@ki.yok.utu.fi>
Message-ID: <3BBF7BAE.8080301@itamarst.org>

This because moshez changed an int() somewhere to long(), something to 
do with 2.2. Dunno exactly why - OverflowErrors are caught anyway in 
SafeNetstringReceiver which is what people should be using anyway.





From acapnotic at twistedmatrix.com  Fri Oct  5 17:58:57 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Fri, 5 Oct 2001 16:58:57 -0700
Subject: [Twisted-Python] Re: pretzel
In-Reply-To: <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
References: <3BBDC8E1.8070105@itamarst.org> <E15pcUs-0001wh-00@zaibach.twistedmatrix.com>
Message-ID: <20011005165857.A3019@troglodyte.menefee>

On Fri, Oct 05, 2001 at 04:20:30PM -0500, Glyph Lefkowitz wrote:
> This thread began for me (and for the list archiver, apparently) with 
> "Re: pretzel".  I have no idea what "pretzel" is or where it came from, 

Sorry, that subject line should have read in full:
"In response to the Twisted/twisted/pretzel CVS check-in."

> This is at once maddeningly vague and precise enough to be completely
> incorrect.

QuoteoftheWeek.append(_)




From acapnotic at twistedmatrix.com  Sat Oct  6 23:18:09 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 6 Oct 2001 22:18:09 -0700
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006125053.A2593@Fookidla.org>
References: <20011006110357.A4433@europa.tranquility.net> <20011006125053.A2593@Fookidla.org>
Message-ID: <20011006221809.A2226@troglodyte.menefee>

On Sat, Oct 06, 2001 at 12:50:53PM -0400, Chris Armstrong wrote:
> On Sat, Oct 06, 2001 at 11:03:57AM -0500, Gavin Cooper wrote:
> > pretzel already seems to be gone from CVS for some unexplained reason. 
>
> I removed it from CVS because glyph is going to be releasing a new version
> of Twisted soon and doesn't want non-functional packages in it.

IMHO, it's not a good idea to check in new embrionic modules to the MAIN
trunk in any case...  but starting a branch for it might make sense.
...and one of these days, you may want to decide that you don't want
every Twisted Application in the main Twisted distribution either,
particularly if they don't necessarily run on the same development
cycles.  i.e. you might not want to wait for a new Twisted release to
publish a new pretzel plug-in...

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 82.2% illuminated, 18.9 days old.




From glyph at twistedmatrix.com  Sat Oct  6 23:47:56 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Sun, 7 Oct 2001 00:47:56 -0500
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006221809.A2226@troglodyte.menefee>
Message-ID: <E15q6u6-000365-00@zaibach.twistedmatrix.com>

On Sunday, October 7, 2001, at 12:18  AM, Kevin Turner wrote:

> IMHO, it's not a good idea to check in new embrionic modules to the MAIN
> trunk in any case...  but starting a branch for it might make sense.
> ...and one of these days, you may want to decide that you don't want
> every Twisted Application in the main Twisted distribution either,
> particularly if they don't necessarily run on the same development
> cycles.  i.e. you might not want to wait for a new Twisted release to
> publish a new pretzel plug-in...

Well put.  I also feel that this is a problem for Twisted as a whole, 
but haven't thought of a good solution yet.  If you have more thoughts 
on how we can start to split out functionality (at least for release 
development cycles if not for downloads), I'd like to hear them...

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Sun Oct  7 00:51:36 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 6 Oct 2001 23:51:36 -0700
Subject: [Twisted-Python] Re: pretzel (and mudbot theory)
In-Reply-To: <20011006110357.A4433@europa.tranquility.net>
References: <20011006110357.A4433@europa.tranquility.net>
Message-ID: <20011006235136.A2321@troglodyte.menefee>

Ok, here's a sketch of what I think of as an appropriately Twisted way
to do this.

An IRC bot of this sort amounts to the same thing as an IRC server.
Each exists in a number of rooms, has people log on and authenticate to
it, send it messages, sends messages back, etc.  The only difference[1]
is that an IRC server talks to its clients directly through a TCP port,
and the bot talks to them through some other IRC server.  Now, because
Twisted knows that services are independant of the transports which
connect to them, it already has a "transport" abstraction.

You should be able to use the IRC UserAgent as a transport in just the
same way as a tcp.Port...  
myTwistedIrcServer.listenOn(
    PretzelUA("ry:irc.openprojects.net::6667:#python"), ...)


Now, for the features... what I would do is let features pass a trigger
regex and a callback function to the IRC server, which it would keep a
list of... and the features can send messages back if and when they see
fit.
(This is probably only speaking to one interface of the feature-service,
which may also have a web.Resource interface and a reality interface and
an enterprise interface and... just because Twisted is cool like that.
And, uh, isn't the phrase "it doesn't need to be distributed" pretty
blasphemous around here?)

As for skreech's bit about reprogramming/reconfiguring-without-editing-
code-or-restarting...  Well, I think that's been one of glyph's big
points about Twisted ever since, well, "as long as I can remember".  I
do remember this because I've disagreed with him about it at times.
=) Don't we still have that introduction/tutorial which demonstrates
telnet-in-to-the-web-server-to-change-its-configuration?  And now with
manhole out there as well...

Skreech, you have the benefit of experience here, as you've already
done at least two incarnations of this bot.  I just wanted to make
sure you're appropriately and sufficiently Twisted before you start
becoming Twisted. ;)

"It's not a cult, I swear"-ingly yours,

 - Kevin (Acap)



[1] "The only difference..."
    Well, ok, so there are a few wrinkles, i.e. certain communications
which may only happen between server and client will have to be
inhibited by the useragent-transport, because it may not be possible or
desirable to proxy them as client-client messages on the other side.

[PS] yeah, there are a whole *lot* of other details left before the
approach I describe can actually happen.  Which is why I introduced it
as a "sketch" instead of code.  =) 

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 81.6% illuminated, 18.9 days old.




From lists at itamarst.org  Sun Oct  7 10:30:00 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 07 Oct 2001 18:30:00 +0200
Subject: [Twisted-Python] f33r the API docs
Message-ID: <3BC08308.8070606@itamarst.org>

Check this out:

<http://itamarst.org/twisted-docs/twisted.html>

The output will be that much more cleaner and informative if you add a 
__all__ list to your package. __all__ is the list of objects you want to be 
exported when somone does "from yourmodule import *" and is used by my 
documentation program to decide what to document. It is a simple list of 
strings. For example:

===========================================
import sys

_list = []

def addToList(object):
     """add an object to the list"""
     _list.append(object)

CONSTANT = 3


__all__ = ["addToList", "CONSTANT"]
===========================================





From carmstro at twistedmatrix.com  Sun Oct  7 12:11:53 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Sun, 7 Oct 2001 14:11:53 -0400
Subject: [Twisted-Python] Re: splitting up Twisted [was: pretzel]
In-Reply-To: <E15q6u6-000365-00@zaibach.twistedmatrix.com>
References: <20011006221809.A2226@troglodyte.menefee> <E15q6u6-000365-00@zaibach.twistedmatrix.com>
Message-ID: <20011007141153.A5527@Fookidla.org>

On Sun, Oct 07, 2001 at 12:47:56AM -0500, Glyph Lefkowitz wrote:
> 
> On Sunday, October 7, 2001, at 12:18  AM, Kevin Turner wrote:
> 
> >IMHO, it's not a good idea to check in new embrionic modules to the MAIN
> >trunk in any case...  but starting a branch for it might make sense.
> >...and one of these days, you may want to decide that you don't want
> >every Twisted Application in the main Twisted distribution either,
> >particularly if they don't necessarily run on the same development
> >cycles.  i.e. you might not want to wait for a new Twisted release to
> >publish a new pretzel plug-in...

I'll admit that I did check it in too early -- I have to get used to the
fact that Twisted is Real Software now, not just a repository for our cool
python code. :-) 

> Well put.  I also feel that this is a problem for Twisted as a whole, 
> but haven't thought of a good solution yet.  If you have more thoughts 
> on how we can start to split out functionality (at least for release 
> development cycles if not for downloads), I'd like to hear them...

I've discussed this with Moshe before, and I'm for it, but he's got some
reasons why splitting up Twisted is not such a good thing. I still do
believe that the Application-level stuff ought to be separated from the
library-level stuff.

Twisted:
  internet
  spread
  python
  persisted
  protocols
  tap (new applications will put their tap-generation utilities here)
  test
  enterprise (not sure..)

Then we have separate packages for Twisted Web, Words, Manhole, etc etc etc.

So let's define what the technical problems with splitting up Twisted are.
I, being the naive person that I am, don't know what they are. :-)

Oh, well I remember one issue from the discussion Moshe and I had:
versioning. IMO the application-level packages should actually line up in
version with the main Twisted package. Moshe said that it would be a problem
when people started matching up older versions of applications with newer
versions of Twisted, but I think we should just say "We _only_ support
applications with the same version number as the Twisted install you are
running". And if a package wants to still be on it's own release schedule,
we have TwistedWeb-0.11.0-1,2,3 etc. well, I'm not sure if this will
conflict with Debian versioning. Maybe we need to use some character other
than "-" to separate the version numbers. Maybe TwistedWeb-1.0Twisted0.11.0
or something. whatever. =)

-- 
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From acapnotic at twistedmatrix.com  Sun Oct  7 23:25:23 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sun, 7 Oct 2001 22:25:23 -0700
Subject: [Twisted-Python] misc nits on glyph's big commit
In-Reply-To: <E15qDSC-0003Vr-00@zaibach.twistedmatrix.com>
References: <E15qDSC-0003Vr-00@zaibach.twistedmatrix.com>
Message-ID: <20011007222523.A2818@troglodyte.menefee>

twisted.passport.challenge.__doc__ says:
> This is a method rather than a module-level function because it is
> anticipated that we will want to change this to store salted passwords.

but the update moved challenge so it *is* a module-level function.
Should that docstring not have been cutnpasted and still be on
passport.Identity.challenge, or did the reasoning change in which
case the docstring needs updating?

----------

> Update of /cvs/Twisted/doc/examples

Now pbsimple.py has the class named "Echoer" and pbecho.py has the class
named "SimpleService".  Is supposed to be that way?  Seems backwards.

----------

> Update of /cvs/Twisted/twisted/python
>
> Modified Files:
> 	defer.py 

> diff -b -u -d -r1.7 -r1.8
> --- defer.py	2001/10/07 12:25:15	1.7
> +++ defer.py	2001/10/07 12:54:46	1.8
   class Deferred:
       # [...]
       def runCallbacks(self, result, isError):
	   """Run all callbacks and/or errors that have been added to this
           Deferred.

           Each callback will have its result passed as the first
           argument to the next; this way, the callbacks act as a
           'processing chain'.

           If this deferred has not been armed yet, nothing will happen.
           """

           self.called = isError + 1
           if self.armed:
               for item in self.callbacks:
                   callback, args, kw = item[isError]
                   args = args or ()
> @@ -72,12 +73,15 @@
>                  kw = kw or {}
>                  try:
>                      # print callback, result, args, kw
> +                    # print 'defres:',callback,result
>                      result = apply(callback, (result,)+args, kw)
> +                    if type(result) != types.StringType:
> +                        isError = 0
#
# I don't get it -- what's this typecheck for?  Is there documentation
# on the meaning of return values for Deferreds that I'm missing?
#
>                  except:
>                      io = StringIO()
>                      traceback.print_exc(file=io)
>                      gv = io.getvalue()
> -                    print gv
> +                    print 'Deferred Error', gv
>                      result = gv
>                      isError = 1
>          else:
[...]

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning gibbous, 73.4% illuminated, 19.9 days old.




From mattcampbell at pobox.com  Mon Oct  8 09:18:15 2001
From: mattcampbell at pobox.com (Matt Campbell)
Date: Mon, 8 Oct 2001 10:18:15 -0500
Subject: [Twisted-Python] Process.write still blocks
Message-ID: <20011008101814.A21484@mattcamp.dyn.dhs.org>

I just grabbed Twisted 0.11.0 and checked twisted.internet.process
to see if Glyph fixed is so that writing to the process's stdin pipe
doesn't block.  It doesn't look like anything changed here; stdout and
stderr are read in non-blocking mode, but writes to stdin still block.
I've already fixed this in my application with a call to fcntl after the
process starts, and it doesn't break anything.  So it would be helpful
to make this change in the standard Twisted package as well.  Thanks.
-- 
Matt Campbell <http://www.pobox.com/~mattcampbell/>




From glyph at twistedmatrix.com  Mon Oct  8 15:35:13 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 8 Oct 2001 16:35:13 -0500
Subject: [Twisted-Python] Process.write still blocks
In-Reply-To: <20011008101814.A21484@mattcamp.dyn.dhs.org>
Message-ID: <E15qi9y-0006gd-00@zaibach.twistedmatrix.com>

Please feel free to submit patches!  I'm sorry about missing this bugfix 
in 0.11.0, but there are a few other known problems with it and 0.11.1 
should be out within a day or so.

On Monday, October 8, 2001, at 10:18  AM, Matt Campbell wrote:

> I just grabbed Twisted 0.11.0 and checked twisted.internet.process
> to see if Glyph fixed is so that writing to the process's stdin pipe
> doesn't block.  It doesn't look like anything changed here; stdout and
> stderr are read in non-blocking mode, but writes to stdin still block.
> I've already fixed this in my application with a call to fcntl after the
> process starts, and it doesn't break anything.  So it would be helpful
> to make this change in the standard Twisted package as well.  Thanks.
> --
> Matt Campbell <http://www.pobox.com/~mattcampbell/>

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From jhe at webde-ag.de  Tue Oct  9 04:27:17 2001
From: jhe at webde-ag.de (=?iso-8859-1?Q?J=FCrgen_Hermann?=)
Date: Tue, 9 Oct 2001 12:27:17 +0200 
Subject: [Twisted-Python] Teud
Message-ID: <82C891B6DD60D411A6F200508BC5D60308375036@exchange1.cinetic.de>

Hi!

I'll (ab)use the twisted list for the moment, if someone thinks we should
open a separate list, say so.

Things that I noticed:
	* xmldoc.py should emit a SAX2 stream, not write to a file directly.

xmldoc.dtd (which I wrote and committet):
    * submodule should contain a description, not #PCDATA
    * class/@parents should be @bases (cf. __bases__)
    * <other> should contain <value> (note that variables might get 
      docstrings in the __future__, just like functions), and value
      should have a @type attribute
    * modelling of function attributes?

Ciao, Jürgen

--
Jürgen Hermann, Developer (jhe at webde-ag.de)
WEB.DE AG, http://webde-ag.de/
 




From lists at itamarst.org  Tue Oct  9 04:37:30 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Oct 2001 12:37:30 +0200
Subject: [Twisted-Python] Teud
References: <82C891B6DD60D411A6F200508BC5D60308375036@exchange1.cinetic.de>
Message-ID: <3BC2D36A.9030906@itamarst.org>

Jürgen Hermann wrote:


> Things that I noticed:
> 	* xmldoc.py should emit a SAX2 stream, not write to a file directly.


Makes sense.


> xmldoc.dtd (which I wrote and committet):
>     * submodule should contain a description, not #PCDATA


the #PCDATA is the description in all elements.

>     * class/@parents should be @bases (cf. __bases__)


OK.


>     * <other> should contain <value> (note that variables might get 
>       docstrings in the __future__, just like functions), and value
>       should have a @type attribute


The contents of all elements are their docstring, so it should rather be:
<other value="foo"/>

and if docstrings ever get added (which I doubt) it can be changed to
<other value="foo"></other>


>     * modelling of function attributes?


Mmmm. I wonder if that counts as an external interface.

Once the DTD is settled on, xmldoc.py and the XSL need to be updated...







From jhe at webde-ag.de  Tue Oct  9 08:54:55 2001
From: jhe at webde-ag.de (=?iso-8859-1?Q?J=FCrgen_Hermann?=)
Date: Tue, 9 Oct 2001 16:54:55 +0200 
Subject: [Twisted-Python] Teud
Message-ID: <82C891B6DD60D411A6F200508BC5D60308375039@exchange1.cinetic.de>

> > 	* xmldoc.py should emit a SAX2 stream, not write to a 
> file directly.
> Makes sense.

Unfortunately, on a first look pydoc makes this hard (by returning string
values to build a result). I have to take a deeper look whether it's
possible.

> > xmldoc.dtd (which I wrote and committet):
> >     * submodule should contain a description, not #PCDATA
> the #PCDATA is the description in all elements.

Still, there is sometimes a description element and sometimes not. And it's
not clear why.

> >     * class/@parents should be @bases (cf. __bases__)
> OK.

Changed and committed. Also added optional doctype & encoding.

I also added my own versions of stylesheet & css, the stylesheet takes
parameters and is thus easily adapted to dynamic page generation.

Ciao, Jürgen

--
Jürgen Hermann, Developer (jhe at webde-ag.de)
WEB.DE AG, http://webde-ag.de/




From lists at itamarst.org  Tue Oct  9 09:32:00 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 09 Oct 2001 17:32:00 +0200
Subject: [Twisted-Python] Teud
References: <82C891B6DD60D411A6F200508BC5D60308375039@exchange1.cinetic.de>
Message-ID: <3BC31870.2060804@itamarst.org>

Jürgen Hermann wrote:

 > Unfortunately, on a first look pydoc makes this hard (by returning
 > string values to build a result). I have to take a deeper look
 > whether it's possible.

Well, we don't use pydoc except for infrastructure. The way to do it 
would be to pass a file-like object to the various documentation 
functions, so they write to it instead of returning a string.

 > Still, there is sometimes a description element and sometimes not.
 > And it's not clear why.

Err... good question. Ok, let's use a description element for everything.

 > I also added my own versions of stylesheet & css, the stylesheet
 > takes parameters and is thus easily adapted to dynamic page
 > generation.

Oh, good, I wasn't sure how to do that with XSLT. Can you put up an 
example of the output?








From jepler at inetnebr.com  Tue Oct  9 13:06:37 2001
From: jepler at inetnebr.com (Jeff Epler)
Date: Tue, 9 Oct 2001 14:06:37 -0500
Subject: [Twisted-Python] Problems with bdist_rpm on 0.11.0
Message-ID: <20011009140635.B3547@inetnebr.com>

I had problems building 0.11.0 with "python2 setup.py bdist_rpm" on my
system.  (redhat 6.2, python 2.1 rpm from tummy)

There were two syntax errors in twisted/mail/pb.py, and
twisted/spread/cBanana.c was not being included in the tarball that
bdist_rpm build (I think this is equivalent to 'python2 setup.py sdist',
if non-rpm folks want to see the problem).

This patch fixes the syntax errors (missing close parens), and adds
cBanana.c to MANIFEST.in.  I'm not sure that this is the correct fix
for the extension, but It Works For Me(tm)

Please copy me (jepler at inetnebr.com) on any discussion.

Jeff
-------------- next part --------------
diff -ru Twisted-0.11.0/MANIFEST.in Twisted-0.11.0-local/MANIFEST.in
--- Twisted-0.11.0/MANIFEST.in	Sun Aug 19 00:15:23 2001
+++ Twisted-0.11.0-local/MANIFEST.in	Mon Oct  8 11:22:26 2001
@@ -22,6 +22,7 @@
 
 include CREDITS LICENSE README
 include MANIFEST.in
+include twisted/spread/cBanana.c
 
 recursive-include bin *
 recursive-include doc *.html
diff -ru Twisted-0.11.0/twisted/mail/pb.py Twisted-0.11.0-local/twisted/mail/pb.py
--- Twisted-0.11.0/twisted/mail/pb.py	Wed Sep 26 04:00:25 2001
+++ Twisted-0.11.0-local/twisted/mail/pb.py	Mon Oct  8 11:26:56 2001
@@ -26,7 +26,7 @@
     def getFolderMessage(self, folder, name):
         if '/' in name:
             raise IOError("can only open files in '%s' directory'" % folder)
-        fp = open(os.path.join(self.directory, 'new', name)
+        fp = open(os.path.join(self.directory, 'new', name))
         try:
             return fp.read()
         finally:
@@ -78,7 +78,7 @@
     def _isSubFolder(self, name):
         return (not os.path.isdir(os.path.join(self.rootDirectory, name)) or
                 not os.path.isfile(os.path.join(self.rootDirectory, name, 
-                                                'maildirfolder'))
+                                                'maildirfolder')))
 
 
 class MaildirCollection(pb.Referencable):

From acapnotic at twistedmatrix.com  Tue Oct  9 17:37:24 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Tue, 9 Oct 2001 16:37:24 -0700
Subject: [Twisted-Python] debuggabilly
Message-ID: <20011009163724.A2229@troglodyte.menefee>

Am I supposed to be able to learn anything from this?

Perspective Broker Traceback:
Traceback (innermost last):
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1194, in _recvMessage
    netResult = object.remoteMessageReceived(self, message, netArgs, netKw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 259, in remoteMessageReceived
    return self.object.remoteMessageReceived(broker, message, args, kw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 182, in remoteMessageReceived
    return broker.serialize(state, self, method, args, kw)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1096, in serialize
    return self.jellier.jelly(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 159, in jelly
    return typfn(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 258, in _jelly_dictionary
    jval = self.jelly(val)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/jelly.py", line 159, in jelly
    return typfn(object)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 794, in _jelly_instance
    tup = instance.remoteSerialize(self.broker)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 311, in remoteSerialize
    return remote_atom, broker.registerReference(self)
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 1006, in registerReference
    puid = object.processUniqueID()
  File "/home/kevint/cvs/zaibach/Twisted/twisted/spread/pb.py", line 305, in processUniqueID
    return (id(self.perspective), id(self.object))
AttributeError: object




From Chris.Hadgis at mincom.com  Tue Oct  9 18:21:20 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Wed, 10 Oct 2001 10:21:20 +1000
Subject: [Twisted-Python] Hacking Reality
Message-ID: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>

I would be interested in helping to develop reality further.

Where do I sign?

ChrisH, back after two and a half weeks away from computers


-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From carmstro at twistedmatrix.com  Tue Oct  9 22:03:25 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 10 Oct 2001 00:03:25 -0400
Subject: [Twisted-Python] Hacking Reality
In-Reply-To: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>
References: <OF7DE57411.712372B6-ON4A256AE1.0001C717@mincom.oz.au>
Message-ID: <20011010000325.A1356@Fookidla.org>

On Wed, Oct 10, 2001 at 10:21:20AM +1000, Chris.Hadgis at mincom.com wrote:
> I would be interested in helping to develop reality further.
> 
> Where do I sign?
> 
> ChrisH, back after two and a half weeks away from computers

Well, your timing is interesting. I just got a phone call last night from
Glyph, and we talked a bit about how the new spatial simulation system is
_not_ to be developed inside twisted.reality, but as a separate package.
Twisted.reality still does need a lot of work, and glyph pointed out a few
things to me that need done:

1) Re-do the broadcasting system. It's kind of a mess now. I've taken a
_look_ at this, but I'm not really sure where to take it. IIRC you were the
guy who was interested in this before, so if you could do a little work in
this area it'd be great.

2) Get rid of the 'reality' reference inside things. Glyph says this would
apparently reduce memory footprint by a huge amount. I think I'll analyze
exactly how much work getting rid of this is going to mean. Obviously it's
not just a simple "ok, delete all code using thing.reality" -- it's a big
structural change (Realities should reference things, and not the other way
around)

3) Get rid of the global object dicts. This would probably be a lot of work
as a lot of code would get touched by this. As glyph has preached before,
"Twisted represents a huge directional graph" -- things can get references
to each other any number of ways, without a global thing store.

So, now that Reality and ImaginarySpatialSim are no longer together, I'd
like to know how the heck we're going to do this. Jason, any thoughts?
I still have some doubt that there is no common ground between a textual and
a spatial simulation, and I still dream of a game that both textual and
spatial representation of objects is possible (I suppose this would be
possible even without a tighter "integration" of reality and SpatialSim, ie,
class MyThingy(reality.Thing, spatial.Thing)). The ideas that Jason has told
me about in the past seem to promising for me to give up the idea of an
integrated "simulation" system for Twisted (even though Glyph professes to
me that Twisted _is_ the simulation system, but...). 

Ehh, that last paragraph was pretty much a braindump. But I am kinda tired
of being completely clueless about how all this stuff is gonna fit together.

--
Chris Armstrong  |  carmstro at twistedmatrix.com  |  cjast3 at robert-morris.edu
Web Page: http://purl.org/net/ChrisArmstrong




From abo at minkirri.apana.org.au  Tue Oct  9 23:48:59 2001
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Wed, 10 Oct 2001 15:48:59 +1000 (EST)
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
Message-ID: <1002692939.3bc3e14b67441@minkirri.apana.org.au>

G'day,

I've just been looking at Twisted Python for the past hour or two, read the 
mailing list archives, and have some comments and questions.

I've been working on using Medusa for serving a virtual mirror via http and 
ftp. I'm at the point where I'm close, but I'm starting to re-think some stuff, 
in particular my choice of Medusa.

First my impressions of the three contenders; Twisted, Medusa, ZServer. Please 
correct me if I'm wrong in the following summaries;

Medusa seems to be the daddy of them all. It's the oldest, which has benefits 
and problems. It is a little messy from its evolution, but seems pretty mature. 
It uses an async select loop to drive everything. It uses "asynchat" derived 
class objects to communicate on sockets. Data can be sent by 
pushing "producers" onto asynchat objects. Producers can be complex objects 
that produce data, execute callbacks, whatever. It's ftp and http server 
classes use a primative VFS to serve from. The asyncore and asynchat modules it 
is built on are now part of Python.

Twisted seems to be a from-the-ground up re-invention of Medusa. It's newer, 
but surprisingly it's bigger, dispite it's apparently less mature feature set. 
It is similar in structure to Medusa, but simplifys it by dispensing with 
producers. It can use a variety of event-loops, including Tk and GTK, or it's 
own. It doesen't have a VFS (yet) so its ftp and http servers serve from the 
underlying os filesystem.

ZServer grew out of Medusa. It uses the same basic underlying architecture, but 
throws in threads to get around the problem of delayed producers blocking the 
event loop. I'm not sure how tightly tied to Zope it is, but its http and ftp 
servers generally serve from a ZODB database, presumably wrapped in a Medusa 
VFS, though I have a feeling they might have changed that. ZServer also 
supports webDAV serving. It is possible that some of the enhancements could be 
merged back into Medusa, but probably it has changed so much it would be 
difficult.

My problem with Medusa is its http and ftp servers assume that the VFS can 
deliver files wrapped in producers without blocking. I've fixed this by 
creating a patch for Medusa's asynchat that adds support for a ready() method 
to producers, so they can block without blocking the event loop. I'm currently 
in the process of writing Medusa VFS's for ftp and eventualy http backends. In 
the process I've also found that the Medusa ftp server is not as full featured 
as I want.

In my search for Python VFS's I found PyVFS (http://www.pycage.de/). This is 
modelled on the Gnome/MC VFS, so it 
supports '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
tgz, ftp, whatever. The various different VFS backends are loaded dynamicly as 
pluggins. These pluggins execute as a seperate process that are communicated 
with over a channel. The API is too simplistic for me, with files 
being "projected" out of the VFS to a local file to be manipulated/used. I 
don't like the pluggin-process-channel architecture either.

In the reading of the Twisted mailing list, I saw a comment to the affect that 
the Medusa VFS was an example of how _not_ to do it, which lead to using webDAV 
as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS 
backend, but I dunno about using it as the primary API. Sure, it supports meta-
data etc, but the reality is the API that is most widely used and understood is 
the POSIX filesytem API, as exposed in Python by the os and os.path modules.

My solution for a VFS has been, upto now, based on Medusa's, but extending it 
to be more like os and os.path. So far it's a filesystem class with most of the 
os and os.path methods. One of the derived classes is a mountable_filesystem 
that allows you to mount other VFS filesystems off it. At this point I'm 
tempted to make a vfs module that emulates os and os.path so that you can mount 
whatever vfs's you want first, and then just replace all your os.* calls with 
vfs.* calls. Note that the one catch would be open() would need to be replaced 
with vfs.open().

I'm sort of fishing for general suggestions, comments, and interest. I'm at the 
point where I've just convinced myself my vfs is worth finishing, and my ready
() patch to asynchat is worth updating, but I'm not sure what to use as the 
http and ftp server front-end, though I'm still leaning towards medusa. It 
looks like Twister is not ready, and ZServer would be too hard to seperate from 
Zope.

PS... I'm not on the zope-dev list but I am on the twister and medusa lists. 
The zope-dev list is too much non-ZServer stuff and that's all I'm interested 
in. So zope-dev'ers, please reply to me or one/both of the other lists directly.

--
ABO: finger abo at minkirri.apana.org.au for more information.




From m at moshez.org  Wed Oct 10 01:06:17 2001
From: m at moshez.org (Moshe Zadka)
Date: Wed, 10 Oct 2001 09:06:17 +0200 (IST)
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <20011010070617.E0FF5390F@darjeeling>

On Wed, 10 Oct 2001, Donovan Baarda <abo at minkirri.apana.org.au> wrote:

> Medusa seems to be the daddy of them all. 

Calling Medusa Twisted's daddy is rewriting history.

> Twisted seems to be a from-the-ground up re-invention of Medusa. 

Only as much as it is a from-the-ground up re-invention of qmail. Or Apache.
Twisted is a new network framework, which takes good ideas from all around.

> It's newer, 
> but surprisingly it's bigger, dispite it's apparently less mature 
> feature set. 

I think Twisted's feature set is very mature. Particularily, it does
have good integration with threads.

> It is similar in structure to Medusa, but simplifys it by dispensing with 
> producers.

Well, you can still have producers -- they are just tied in to connections
rather then the event loop itself.

> It can use a variety of event-loops, including Tk and GTK, or it's 
> own. It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> underlying os filesystem.

Well, the HTTP server can serve from in-memory resources, or for that matter,
any resource that follows the protocol.

-- 
The Official Moshe Zadka FAQ: http://moshez.geek
The Official Moshe Zadka FAQ For Dummies: http://moshez.org
Read the FAQ




From Chris.Hadgis at mincom.com  Wed Oct 10 01:06:00 2001
From: Chris.Hadgis at mincom.com (Chris.Hadgis at mincom.com)
Date: Wed, 10 Oct 2001 17:06:00 +1000
Subject: [Twisted-Python] Hacking Reality
Message-ID: <OF8706AFB9.1D33B863-ON4A256AE1.00268C26@mincom.oz.au>

>>>>>




On Wed, Oct 10, 2001 at 10:21:20AM +1000, Chris.Hadgis at mincom.com wrote:
> I would be interested in helping to develop reality further.
> 
> Where do I sign?
> 
> ChrisH, back after two and a half weeks away from computers

Well, your timing is interesting. I just got a phone call last night from
Glyph, and we talked a bit about how the new spatial simulation system is
_not_ to be developed inside twisted.reality, but as a separate package.
Twisted.reality still does need a lot of work, and glyph pointed out a few
things to me that need done:

1) Re-do the broadcasting system. It's kind of a mess now. I've taken a
_look_ at this, but I'm not really sure where to take it. IIRC you were 
the
guy who was interested in this before, so if you could do a little work in
this area it'd be great.

<<<<<

Yes, that is me. I did have some code ready for 0.10.2 (or whatever was 
current two weeks ago). As soon as I get some time I will see how this 
fits in with 0.11.0. I suspect any changes would be minimal, though I will 
need to change TRDemo and Inheritance.

>>>>>

2) Get rid of the 'reality' reference inside things. Glyph says this would
apparently reduce memory footprint by a huge amount. I think I'll analyze
exactly how much work getting rid of this is going to mean. Obviously it's
not just a simple "ok, delete all code using thing.reality" -- it's a big
structural change (Realities should reference things, and not the other 
way
around)

3) Get rid of the global object dicts. This would probably be a lot of 
work
as a lot of code would get touched by this. As glyph has preached before,
"Twisted represents a huge directional graph" -- things can get references
to each other any number of ways, without a global thing store.

<<<<<

I have not looked into these two points much. I will look at them when I 
get some time, after I have made my changes for the broadcast system.

[snip brain-dump]

>>>>>

Ehh, that last paragraph was pretty much a braindump. But I am kinda tired
of being completely clueless about how all this stuff is gonna fit 
together.

<<<<<

Like I said, whatever time I can get to work on Twisted I will be happy to 
give.

Cheers,
ChrisH



-- 
This transmission is for the intended addressee only and is confidential
information.  If you have received this transmission in error, please
delete it and notify the sender.  The contents of this e-mail are the
opinion of the writer only and are not endorsed by the Mincom Group
of companies unless expressly stated otherwise.




From kthangavelu at earthlink.net  Tue Oct  9 19:42:32 2001
From: kthangavelu at earthlink.net (kapil thangavelu)
Date: Tue, 9 Oct 2001 18:42:32 -0700
Subject: [Twisted-Python] Re: [medusa] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <200110100832.BAA05589@chamber.cco.caltech.edu>

On Tuesday 09 October 2001 10:48 pm, Donovan Baarda wrote:
> G'day,
>
> First my impressions of the three contenders; Twisted, Medusa, ZServer.
> Please correct me if I'm wrong in the following summaries;
>
> Medusa seems to be the daddy of them all. It's the oldest, which has
> benefits and problems. It is a little messy from its evolution, but seems
> pretty mature. It uses an async select loop to drive everything. It uses
> "asynchat" derived class objects to communicate on sockets. Data can be
> sent by
> pushing "producers" onto asynchat objects. Producers can be complex objects
> that produce data, execute callbacks, whatever. It's ftp and http server
> classes use a primative VFS to serve from. The asyncore and asynchat
> modules it is built on are now part of Python.
>
> Twisted seems to be a from-the-ground up re-invention of Medusa. It's
> newer, but surprisingly it's bigger, dispite it's apparently less mature
> feature set. It is similar in structure to Medusa, but simplifys it by
> dispensing with producers. It can use a variety of event-loops, including
> Tk and GTK, or it's own. It doesen't have a VFS (yet) so its ftp and http
> servers serve from the underlying os filesystem.

twisted has lots of interesting ideas and architecture, but since i haven't 
used it i'll refrain from comment.

> ZServer grew out of Medusa. It uses the same basic underlying architecture,
> but throws in threads to get around the problem of delayed producers
> blocking the event loop. I'm not sure how tightly tied to Zope it is, but
> its http and ftp servers generally serve from a ZODB database, presumably
> wrapped in a Medusa VFS, though I have a feeling they might have changed
> that. ZServer also supports webDAV serving. It is possible that some of the
> enhancements could be merged back into Medusa, but probably it has changed
> so much it would be difficult.

zserver swallows medusa whole, and leaves it pretty much untouched. it builds 
its functionality ontop of medusa. there is no vfs in zope's interaction with 
medusa. requests are handled by an installed handler and are passed off to a 
thread pool which calls zpublisher (zope's orb) that maps requests directly 
onto the zodb. 

zserver's thread architecure is pretty much separate from medusa. a single 
medusa thread handles most of the network i/o. the thread architecture of 
zope (imo) is indeed mainly for avoiding blocking the event loop and  to 
allow zope and separate processing from i/o. 

i never used webdav so i can't comment, but my understanding is that changes 
to medusa made for zserver are basically things specific to zope, using 
zserver is basically using medusa. but using it without zope means you loose 
all the zope based functionality which includes the webdav implementation.

<snip vfs/ftp>

> I'm sort of fishing for general suggestions, comments, and interest. I'm at
> the point where I've just convinced myself my vfs is worth finishing, and
> my ready () patch to asynchat is worth updating, but I'm not sure what to
> use as the http and ftp server front-end, though I'm still leaning towards
> medusa. It looks like Twister is not ready, and ZServer would be too hard
> to seperate from Zope.

my two cents, i'm not sure why you think twister isn't ready but its probably 
worth experimenting with. as for zserver i don't think there is any 
additional standalone functionality that is offered on top of medusa 
distribution that really makes this make sense (with the possible exception 
that you want to use a threaded async i/o architecture like zservers, in 
which case you might also want to take a look at webware's asyncthreaded 
server.)

cheers

kapil thangavelu




From glyph at twistedmatrix.com  Wed Oct 10 02:56:38 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 10 Oct 2001 03:56:38 -0500
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <1002692939.3bc3e14b67441@minkirri.apana.org.au>
Message-ID: <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>

I'm only responding to the twisted-python list, since the cross-post 
seemed excessive.  Feel free to rebroadcast this if ensuing discussion 
on other lists is interesting.

On Wednesday, October 10, 2001, at 12:48  AM, Donovan Baarda wrote:

> G'day,
>
> I've just been looking at Twisted Python for the past hour or two, read 
> the
> mailing list archives, and have some comments and questions.

Thank you for your interest.  Here's a twisted way of looking at your 
questions :-)

> First my impressions of the three contenders; Twisted, Medusa, ZServer. 
> Please
> correct me if I'm wrong in the following summaries;
>
> Medusa seems to be the daddy of them all.

I don't see what you mean by that; about the only things that Medusa and 
Twisted share is that they are both asynchronous networking frameworks.  
They seem to have a fairly different approach to how protocols are 
written and integrated, and in what their scope for future development 
is.

> It's the oldest, which has benefits and problems. It is a little messy 
> from its evolution, but seems pretty mature. It uses an async select 
> loop to drive everything. It uses "asynchat" derived class objects to 
> communicate on sockets. Data can be sent by pushing "producers" onto 
> asynchat objects. Producers can be complex objects that produce data, 
> execute callbacks, whatever. It's ftp and http server classes use a 
> primative VFS to serve from. The asyncore and asynchat modules it is 
> built on are now part of Python.

This sounds pretty accurate to me.

> Twisted seems to be a from-the-ground up re-invention of Medusa.

As Moshe said, only insofar as it's a from-the-ground-up re-invention of 
about 6 or 7 other things.

> It's newer, but surprisingly it's bigger, dispite it's apparently less 
> mature feature set.

What do you mean when you say "less mature"?  Twisted's features have 
been around for less time (hence, "newer") but compare, for example, 
twisted.spread.pb with rpc_server.  Or twisted.words with chat_server  
Would you characterize the medusa approach in any of these comparisons 
as "more mature"?

What is the Medusa equivalent of twisted.reality, twisted.mail, 
twisted.web.widgets, or twisted.enterprise?  These services are at 
varying levels of maturity, but surely the fact that they exist at all 
has to count for something :-).

> It is similar in structure to Medusa,

At some extremely superficial level, I guess this is true.  However, 
Twisted does a lot more than just clone medusa.  Even at a basic level, 
you could say that it complicates the medusa structure a great deal with 
a unified notion of authentication, automatic persistence, and 
incidentally, several full-featured applications. :-)

> but simplifys it by dispensing with producers.

Twisted has producers, but only when you need them.

http://twistedmatrix.com/users/glyph/TwistedDocs/Twisted-0.11.0/twisted/internet/
abstract_FileDescriptor.py.html#registerProducer

> It can use a variety of event-loops, including Tk and GTK, or it's own. 
> It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> underlying os filesystem.

Well, it depends what you mean by VFS.  Twisted has a perception of the 
filesystem as more like a special-case of "container" than containers as 
a special-case of the filesystem.  There are containers which can 
respond to specifics of the HTTP protocol that are not derived from 
files; would you call that part of a "VFS"?  The semantics of 
"__builtins__.open" are not sufficiently rich to support that.

> In my search for Python VFS's I found PyVFS (http://www.pycage.de/). 
> This is modelled on the Gnome/MC VFS, so it supports 
> '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
> tgz, ftp, whatever. The various different VFS backends are loaded 
> dynamicly as pluggins. These pluggins execute as a seperate process 
> that are communicated with over a channel. The API is too simplistic 
> for me, with files being "projected" out of the VFS to a local file to 
> be manipulated/used. I don't like the pluggin-process-channel 
> architecture either.

Why not?  It sounds clever to me.  I don't have a good picture of your 
requirements (other than "HTTP and FTP" at this point, so I can't fathom 
why you like or don't like this particular solution.  (Why is it 
relevant?)

> In the reading of the Twisted mailing list, I saw a comment to the 
> affect that
> the Medusa VFS was an example of how _not_ to do it, which lead to 
> using webDAV
> as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS
> backend, but I dunno about using it as the primary API. Sure, it 
> supports meta-
> data etc, but the reality is the API that is most widely used and 
> understood is
> the POSIX filesytem API, as exposed in Python by the os and os.path 
> modules.

Yes, but that's a blocking API; ergo, it does not work in an 
asynchronous framework like Twisted.  Not all "files" are associated 
with a file descriptor, so they may potentially support different 
operations.  Directory listing on FTP, HTTP, and WebDAV sites is not 
necessarily consistent with the files that are actually available.  
There is metadata associated with some requests, and not with others... 
in short, there are lots of subtle issues involved with supporting each 
of these types of hierarchies well, and a blanket virtual "filesystem" 
implementation does not satisfy all (or even a reasonably large subset) 
of them.  For different protocols, there may be API differences, unless 
some of the protocols are stripped to the "lowest common denominator", 
e.g. POSIX.

> My solution for a VFS has been, upto now, based on Medusa's, but 
> extending it
> to be more like os and os.path. So far it's a filesystem class with 
> most of the
> os and os.path methods. One of the derived classes is a 
> mountable_filesystem
> that allows you to mount other VFS filesystems off it. At this point I'm
> tempted to make a vfs module that emulates os and os.path so that you 
> can mount
> whatever vfs's you want first, and then just replace all your os.* 
> calls with
> vfs.* calls. Note that the one catch would be open() would need to be 
> replaced
> with vfs.open().

Not necessarily.  You could always hack up the __builtins__ module at 
runtime to point to your newer, better open().  Either way it seems like 
there are probably issues with security & the presence of *real* file 
descriptors that you have to think about...

> I'm sort of fishing for general suggestions, comments, and interest. 
> I'm at the
> point where I've just convinced myself my vfs is worth finishing, and 
> my ready
> () patch to asynchat is worth updating, but I'm not sure what to use as 
> the
> http and ftp server front-end, though I'm still leaning towards medusa. 
> It
> looks like Twister is not ready, and ZServer would be too hard to 
> seperate from
> Zope.

Ready for what, is the question? :-)

Short form: HTTP yes, FTP no (but it could be with a little work), 
everything else yes.

Long form:

We do not currently have (or have any high-priority plans to produce) a 
"VFS", but I would contend that such a system is not necessary when you 
look at the way that Twisted does web resources.  FTP doesn't currently 
use that model, but I don't think it would be a difficult modification; 
it uses the same Producer model that HTTP does.  I estimate that it 
would be easier to modify Twisted in this way than to undertake a 
project to do your own VFS, but since I'm not exactly sure what's going 
to make you happy, I don't have a high degree of confidence in that 
estimation.

As far as robustness (which is an implied issue with Twisted's 
"maturity"), Twisted is being used to run the main twistedmatrix.com 
site.  We always run the most recent development version.  So far, it's 
only served 17.422 downloads of Twisted itself and approximately three 
quarters of a million hits, and survived five or six freshmeat 
"attacks" :-).  It did crash, once, about 8 months ago after a major 
refactoring (before we had acceptance tests...), but that bug was 
quickly fixed.  We don't run a public FTP server, but the core parts of 
Twisted that enable one to run a website where you can download files 
are very personally important to me, so draw your own conclusions :-).

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Wed Oct 10 04:11:14 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 10 Oct 2001 12:11:14 +0200
Subject: [Twisted-Python] A modest proposal: Replace medusa with Twisted
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au> <200110100832.BAA05589@chamber.cco.caltech.edu>
Message-ID: <3BC41EC2.4070609@itamarst.org>

Actually, this brings up this idea I had - Zope should replace medusa with 
Twisted. Why, you ask?

1) Twisted separates transport from protocols, and the event loop it uses is 
  extendable and generic. That means:

   - It can run on Jython (using threads, someday with java.nio), and it can 
be integrated with the Tk and GTK event loops.

   - Your protocol doesn't have to worry about the transport - Twisted 
supports SSL, TCP and unix domain sockets right now, without having to make 
any change to the protocols.

2) Twisted is designed to run multiple servers and protocols at the same 
time, and these can be changed at runtime. It already includes pure python 
support for HTTP, FTP, LDAP, SMTP, POP3, DNS, telnet, AIM TOC, and IRC, all 
integrated with the main event loop (all have server support except DNS and 
LDAP). Adding new protocols to Zope is not easy, at the moment.

3) Twisted is being actively developed and extended. medusa less so.

4) Good integration with threads - while event based, twisted has a very 
nice model for dealing with threaded apps.

5) Twisted has Perspective Broker, an async.ready remote-object protocol 
that supports caching, object migration, and remote messaging, with 
integrated authentication and authorization. And it ideologically meshes 
with the "object publisher" notion in Zope. No, really :)


Twisted already includes a high-level web framework, but Zope probably would 
not use it, and instead build its own on top of twisted's low-level http 
support.







From abo at minkirri.apana.org.au  Wed Oct 10 07:38:48 2001
From: abo at minkirri.apana.org.au (Donovan Baarda)
Date: Wed, 10 Oct 2001 23:38:48 +1000
Subject: [Twisted-Python] Twisted, medusa, ZServer, and VFS's
In-Reply-To: <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>; from glyph@twistedmatrix.com on Wed, Oct 10, 2001 at 03:56:38AM -0500
References: <1002692939.3bc3e14b67441@minkirri.apana.org.au> <E15rFH3-0007mb-00@zaibach.twistedmatrix.com>
Message-ID: <20011010233847.A4458@minkirri.apana.org.au>

On Wed, Oct 10, 2001 at 03:56:38AM -0500, Glyph Lefkowitz wrote:
> I'm only responding to the twisted-python list, since the cross-post 
> seemed excessive.  Feel free to rebroadcast this if ensuing discussion 
> on other lists is interesting.

sticking to this convention... :-)

> On Wednesday, October 10, 2001, at 12:48  AM, Donovan Baarda wrote:
[...]
> They seem to have a fairly different approach to how protocols are 
> written and integrated, and in what their scope for future development 
> is.

This I guess is part of what is putting me off Twisted. I'm familiar with
Medusa, and Twisted is just different enough that I've got a learning curve
ahead of me. Unless I get convinced Twisted is worth the extra effort...

> > Twisted seems to be a from-the-ground up re-invention of Medusa.
> 
> As Moshe said, only insofar as it's a from-the-ground-up re-invention of 
> about 6 or 7 other things.

Python async socket framework... it's filling the same void :-)

> > It's newer, but surprisingly it's bigger, dispite it's apparently less 
> > mature feature set.
> 
> What do you mean when you say "less mature"?  Twisted's features have 
> been around for less time (hence, "newer") but compare, for example, 
> twisted.spread.pb with rpc_server.  Or twisted.words with chat_server  
> Would you characterize the medusa approach in any of these comparisons 
> as "more mature"?
> 
> What is the Medusa equivalent of twisted.reality, twisted.mail, 
> twisted.web.widgets, or twisted.enterprise?  These services are at 
> varying levels of maturity, but surely the fact that they exist at all 
> has to count for something :-).

That probably accounts for Twisted having more code. However, in my case I'm
just after http and ftp server capabilities. I have a feeling Medusa's ftp
code at least is more complete.

> > It is similar in structure to Medusa,
> 
> At some extremely superficial level, I guess this is true.  However, 
> Twisted does a lot more than just clone medusa.  Even at a basic level, 
> you could say that it complicates the medusa structure a great deal with 
> a unified notion of authentication, automatic persistence, and 
> incidentally, several full-featured applications. :-)

I'm also a bit of a less-is-more person... I don't really need all of that.
However, if the framework is neat, and I get that without extra hassles and
bloat, I guess I'd use it.

> > but simplifys it by dispensing with producers.
> 
> Twisted has producers, but only when you need them.
> 
> http://twistedmatrix.com/users/glyph/TwistedDocs/Twisted-0.11.0/twisted/internet/
> abstract_FileDescriptor.py.html#registerProducer

Hmmm... looking into this.

> > It can use a variety of event-loops, including Tk and GTK, or it's own. 
> > It doesen't have a VFS (yet) so its ftp and http servers serve from the 
> > underlying os filesystem.
> 
> Well, it depends what you mean by VFS.  Twisted has a perception of the 
> filesystem as more like a special-case of "container" than containers as 
> a special-case of the filesystem.  There are containers which can 
> respond to specifics of the HTTP protocol that are not derived from 
> files; would you call that part of a "VFS"?  The semantics of 
> "__builtins__.open" are not sufficiently rich to support that.

I was just looking at the ftp part, and it seems that it can only serve
files. If it can to more than this, I guess I'm more interested.

> > In my search for Python VFS's I found PyVFS (http://www.pycage.de/). 
> > This is modelled on the Gnome/MC VFS, so it supports 
> > '/dir/somefile.tar.gz#tgz:/somepath' style paths to look inside tar, 
> > tgz, ftp, whatever. The various different VFS backends are loaded 
> > dynamicly as pluggins. These pluggins execute as a seperate process 
> > that are communicated with over a channel. The API is too simplistic 
> > for me, with files being "projected" out of the VFS to a local file to 
> > be manipulated/used. I don't like the pluggin-process-channel 
> > architecture either.
> 
> Why not?  It sounds clever to me.  I don't have a good picture of your 
> requirements (other than "HTTP and FTP" at this point, so I can't fathom 
> why you like or don't like this particular solution.  (Why is it 
> relevant?)

It is overkill for what it is. Spawning whole extra processes and using
inter-process communication over a channel when just classes and/or
threads would do the job.

The biggest limitation was the API... I basicly want to serve up a virtual
mirror, which means I need to be able to identify and mirror things like
symlinks.

However, because it is quite simple, I was thinking of making a VFS backend
for my VFS that talks to PyVFS... more as a proof of concept, but also to
get tar.gz, cpio, mailbox, etc for free.

> > In the reading of the Twisted mailing list, I saw a comment to the 
> > affect that
> > the Medusa VFS was an example of how _not_ to do it, which lead to 
> > using webDAV
> > as the API for a VFS. My gut feeling is DAV is a cool protocol for a VFS
> > backend, but I dunno about using it as the primary API. Sure, it 
> > supports meta-
> > data etc, but the reality is the API that is most widely used and 
> > understood is
> > the POSIX filesytem API, as exposed in Python by the os and os.path 
> > modules.
> 
> Yes, but that's a blocking API; ergo, it does not work in an 
> asynchronous framework like Twisted.  Not all "files" are associated 

The Medusa VFS is a stripped down POSIX, and it actualy causes blocking
problems for my application. That's why I added ready() support to asynchat,
so that file producers can tell the select loop they would block and be
excluded from that time round the loop. This is basicly a hack... a probably
neater way is to make the file producers asychat's themselves but that would
require major restructuring of Medusa's ftp and http servers.

> with a file descriptor, so they may potentially support different 
> operations.  Directory listing on FTP, HTTP, and WebDAV sites is not 
> necessarily consistent with the files that are actually available.  
> There is metadata associated with some requests, and not with others... 
> in short, there are lots of subtle issues involved with supporting each 
> of these types of hierarchies well, and a blanket virtual "filesystem" 
> implementation does not satisfy all (or even a reasonably large subset) 
> of them.  For different protocols, there may be API differences, unless 
> some of the protocols are stripped to the "lowest common denominator", 
> e.g. POSIX.

That's why I'm going for POSIX :-)

> > My solution for a VFS has been, upto now, based on Medusa's, but 
> > extending it
> > to be more like os and os.path. So far it's a filesystem class with 
> > most of the
> > os and os.path methods. One of the derived classes is a 
> > mountable_filesystem
> > that allows you to mount other VFS filesystems off it. At this point I'm
> > tempted to make a vfs module that emulates os and os.path so that you 
> > can mount
> > whatever vfs's you want first, and then just replace all your os.* 
> > calls with
> > vfs.* calls. Note that the one catch would be open() would need to be 
> > replaced
> > with vfs.open().
> 
> Not necessarily.  You could always hack up the __builtins__ module at 
> runtime to point to your newer, better open().  Either way it seems like 
> there are probably issues with security & the presence of *real* file 
> descriptors that you have to think about...

Thats why I'd keep it seperate inside a vfs module... remember at least one
vfs backend would be using the builtin open and os modules to access the
real fs. Though now you mention it... it could be away of transperantly
running any application on top of a VFS without changing it at all. Hmmm...
bound to be clashes... I wonder...

> > I'm sort of fishing for general suggestions, comments, and interest. 
> > I'm at the
> > point where I've just convinced myself my vfs is worth finishing, and 
> > my ready
> > () patch to asynchat is worth updating, but I'm not sure what to use as 
> > the
> > http and ftp server front-end, though I'm still leaning towards medusa. 
> > It
> > looks like Twister is not ready, and ZServer would be too hard to 
> > seperate from
> > Zope.
> 
> Ready for what, is the question? :-)
> 
> Short form: HTTP yes, FTP no (but it could be with a little work), 
> everything else yes.

FTP is the main one...though I'd really love rsync... roll on librsync :-)

> Long form:
> 
> We do not currently have (or have any high-priority plans to produce) a 
> "VFS", but I would contend that such a system is not necessary when you 
> look at the way that Twisted does web resources.  FTP doesn't currently 
> use that model, but I don't think it would be a difficult modification; 
> it uses the same Producer model that HTTP does.  I estimate that it 
> would be easier to modify Twisted in this way than to undertake a 
> project to do your own VFS, but since I'm not exactly sure what's going 
> to make you happy, I don't have a high degree of confidence in that 
> estimation.

The application is basicly a mirror daemon that serves up a virtual mirror
of an ftp, rsync or http site. To the ftp and http clients, it appears to be
a full mirror. Files are fetched on demand and stored in a partial mirror on
the server.

My plan was to use a VFS to 'mount' the remote ftp, rsync, or http site. The
partial mirror on the server would also be accessed through the same VFS
interface. Then I was going to overlay a "mirrorfs" VFS over them both, that
would mirror the remote VFS to the local one on demand. The http/ftp server
part would then just serve files from the mirrorfs VFS.

The beauty of this is the different VFS backends would allow you to do wierd
things like on-demand mirror a remote ftp server into a local tar.gz file,
not that you'd want to :-)

-- 
----------------------------------------------------------------------
ABO: finger abo at minkirri.apana.org.au for more info, including pgp key
----------------------------------------------------------------------




From skip at pobox.com  Wed Oct 10 07:48:37 2001
From: skip at pobox.com (Skip Montanaro)
Date: Wed, 10 Oct 2001 08:48:37 -0500
Subject: [Twisted-Python] Re: [medusa] Twisted, medusa, ZServer, and VFS's
Message-ID: <15300.20917.968929.569835@beluga.mojam.com>


    Donovan> ZServer grew out of Medusa.... I'm not sure how tightly tied to
    Donovan> Zope it is....

Not tightly at all.  I use it completely independent of Zope.

    Donovan> My problem with Medusa is its http and ftp servers assume that
    Donovan> the VFS can deliver files wrapped in producers without
    Donovan> blocking.

I believe Sam Rushing has said all along that Medusa is intended for
I/O-bound situations.  If you have producers that are computationally bound
or that do I/O outside of the Medusa framework, you'll suffer.

-- 
Skip Montanaro (skip at pobox.com)
http://www.mojam.com/
http://www.musi-cal.com/




From acapnotic at twistedmatrix.com  Wed Oct 10 13:48:30 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 10 Oct 2001 12:48:30 -0700
Subject: [Twisted-Python] naming conversational methods
Message-ID: <20011010124830.A2869@troglodyte.menefee>

Generally in an object model, if I'm an object, my methods are things I
do.  If someone says kevin.run(), I run.  If they say kevin.jump(height),
I jump, and if they say kevin.watch(), I keep my eyes open.

But if a perspective is addressing me me through a viewpoint, how should
my methods which act upon her be named?  If she says to herself, "Self,
listen to Kevin," that seems natural to write as self.listen(kevin).
Except, in order for her to listen to me, she needs to have me add her
to my list of my audience members.  So how does her listen method
address me?

Not as kevin.listen(), because she's the one listening, not me.
kevin.speak()?  No, she's not commanding me to speak, she just wants to
know in the event that I do.  kevin.speakTo() seems odd without an
object.  Someone else could say kevin.speakTo(her), but what she really
means is kevin.speakToMe().

Does that work?

class Kevin(pb.Viewable):
    def view_speakToMe(self, perspective):
        """I will now speak to she who invoked this method."""

	# Does it make sense that the personal pronoun in "speakToMe"
	# refers not to *me*, but to the perspective's owner?

    # Or does a passive phrasing make more sense?

    def view_beListenedTo(self, perspective):
        """This perspective will be listening to me."""

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 46.0% illuminated, 22.5 days old.




From j.her at t-online.de  Wed Oct 10 14:46:27 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 10 Oct 2001 22:46:27 +0200
Subject: [Twisted-Python] naming conversational methods
In-Reply-To: <20011010124830.A2869@troglodyte.menefee>
Message-ID: <15rQDr-2KrTPcC@fwd06.sul.t-online.com>

On Wed, 10 Oct 2001 12:48:30 -0700, Kevin
wrote:

>But if a perspective is addressing me me through a viewpoint, how should
>my methods which act upon her be named? 

http://www.datec.at/dev__python__design_patterns__observer.html
http://www.users.qwest.net/~hartkopf/notifier/
http://www.togethercommunity.com/coad-letter/strategy_handbook_original/
Strpat00000088.html








From xardox at mindspring.com  Wed Oct 10 14:55:19 2001
From: xardox at mindspring.com (Don Hopkins)
Date: Wed, 10 Oct 2001 13:55:19 -0700
Subject: [Twisted-Python] Re: [Zope-dev] Re: [medusa] Twisted, medusa, ZServer, and VFS's
References: <15300.20917.968929.569835@beluga.mojam.com>
Message-ID: <00d101c151cd$fa1af220$6501a8c0@brickshithouse>

Running Zope on Windows is quite convenient for developing and debugging
portable Python extensions to run on the server.
It's straightforward to run Zope under Visual C++, in order put breakpoints
in Python extensions, single step through the code and catch errors.
Not to start any religious arguments, but for me, the code development tools
on Windows are much faster and easier to use than on Linux: visual symbolic
debugging, precompiled headers, incremental compilation and linking, edit
and continue, etc.
So from that perspective, it's important for Zope and Python extensions to
run identically on Windows and Linux, but not as important for Zope on
Windows be able to stand up under a high load nor run for a long time.

On the other hand, I've had some horrible problems developing Python
extensions that make Windows calls (like showing a window, which triggers
all kinds of windows message callbacks), which regularly crashed Windows so
bad in a way that the debugger couldn't deal with, that I had to cycle the
power each time. But that was caused by not locking and unlocking threads at
the right time, around window related calls.

Skip, I noticed your .sig changed: are you still looking for a flash of
enlightenment after all these years? ;-)
As an old NeWS hacker, Zope looks pretty flashy and enlightening to me!

    -Don



----- Original Message -----
From: "Skip Montanaro" <skip at pobox.com>
To: <medusa at yahoogroups.com>
Cc: <twisted-python at twistedmatrix.com>; <zope-dev at zope.org>;
<martin at pycage.de>; <abo at minkirri.apana.org.au>
Sent: Wednesday, October 10, 2001 6:48 AM
Subject: [Zope-dev] Re: [medusa] Twisted, medusa, ZServer, and VFS's


>
>
>     Donovan> ZServer grew out of Medusa.... I'm not sure how tightly tied
to
>     Donovan> Zope it is....
>
> Not tightly at all.  I use it completely independent of Zope.
>
>     Donovan> My problem with Medusa is its http and ftp servers assume
that
>     Donovan> the VFS can deliver files wrapped in producers without
>     Donovan> blocking.
>
> I believe Sam Rushing has said all along that Medusa is intended for
> I/O-bound situations.  If you have producers that are computationally
bound
> or that do I/O outside of the Medusa framework, you'll suffer.
>
> --
> Skip Montanaro (skip at pobox.com)
> http://www.mojam.com/
> http://www.musi-cal.com/
>
> _______________________________________________
> Zope-Dev maillist  -  Zope-Dev at zope.org
> http://lists.zope.org/mailman/listinfo/zope-dev
> **  No cross posts or HTML encoding!  **
> (Related lists -
>  http://lists.zope.org/mailman/listinfo/zope-announce
>  http://lists.zope.org/mailman/listinfo/zope )







From j.her at t-online.de  Wed Oct 10 18:28:05 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Thu, 11 Oct 2001 02:28:05 +0200
Subject: [Twisted-Python] DUH!
Message-ID: <15rTgE-0ZDuQCC@fwd06.sul.t-online.com>

jh at zaibach:~/public_html/teud$ PYTHONPATH=/twisted/Twisted:$PYTHONPATH
teudxml Twisted twisted

==> http://twistedmatrix.com/users/jh/teud/Twisted/.idx

and then 

jh at zaibach:~/public_html/teud/Twisted$ for i in *.xml; do 4xslt -o
${i/.xml/.html} $i ~/share/teud/samples/default.xsl; done

==> http://twistedmatrix.com/users/jh/teud/Twisted/twisted.html






From moshez at zadka.com  Thu Oct 11 02:27:09 2001
From: moshez at zadka.com (Moshe Zadka)
Date: 11 Oct 2001 08:27:09 -0000
Subject: [Twisted-Python] General Alert: Web Site is Funny
Message-ID: <20011011082709.29965.qmail@green.zadka.com>

What happened to the web site? 





From lists at itamarst.org  Thu Oct 11 04:54:14 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 12:54:14 +0200
Subject: [Twisted-Python] Teud ready for first public release
Message-ID: <3BC57A56.3090700@itamarst.org>

Well, I think teud is ready to go - only remaining issue is that the scripts 
are chmoded to 777 by distutils, and I have no idea why.





From lists at itamarst.org  Thu Oct 11 06:04:25 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 14:04:25 +0200
Subject: [Twisted-Python] A problem with threads
Message-ID: <3BC58AC9.90104@itamarst.org>

Threadpool should have a function that lets you run a function in a thread 
and have the result passed to a Deferred object's callbacks. The callback 
functions in the Deferred should be run in the a thread-safe way.

There two alternatives:

1) Run the callbacks in the main event loop thread, which means using 
twisted.internet.threadtask. This adds a dependency on twisted.internet for 
twisted.python.

2) Have the user implement the thread-safety stuff themselves.


I think (1) is the best way, otherwise you end up having to do a lot of work 
everytime you use callbacks. But then there's the dependancy issue...





From lists at itamarst.org  Thu Oct 11 09:16:21 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 11 Oct 2001 17:16:21 +0200
Subject: [Twisted-Python] A problem with threads
References: <3BC58AC9.90104@itamarst.org>
Message-ID: <3BC5B7C5.5010204@itamarst.org>

Itamar Shtull-Trauring wrote:
> Threadpool should have a function that lets you run a function in a 
> thread and have the result passed to a Deferred object's callbacks. The 
> callback functions in the Deferred should be run in the a thread-safe way.
> 
> There two alternatives:

A third alternative is to make the threadpool a Delayed. If we don't 
introduce a dependency on twisted.internet, then if the main loop is paused 
in a select() the callbacks will not be called until the select() times out...





From xardox at mindspring.com  Thu Oct 11 12:14:30 2001
From: xardox at mindspring.com (Don Hopkins)
Date: Thu, 11 Oct 2001 11:14:30 -0700
Subject: [Twisted-Python] Zope on Apache (Zapache? Zopache?)
References: <15300.20917.968929.569835@beluga.mojam.com> <00d101c151cd$fa1af220$6501a8c0@brickshithouse>
Message-ID: <00ba01c15280$94a94fa0$6501a8c0@brickshithouse>

Michel Pelletier proposes an interesting idea, of integrating Zope with
Apache 2.0.
That sounds like a really great idea with many upsides -- especially because
you could write all kinds of interesting Apache extensions in Python.
Has anyone written that idea up, or discussed it on other mailing lists?
As a first step, how about using SWIG to expose the Apache 2.0 api to
mod_python.

    -Don

From: michel at zope.com (Michel Pelletier)
Date: Wed, 10 Oct 2001 11:09:45 -0400
Subject: [Zope-dev] A modest proposal: Replace medusa with Twisted

Just to throw out another idea, Amos has discussed with me in the past the
idea of replacing medusa with Apache 2.0.  Compelling as many of Twisted's
features may be, Apache 2.0 as far as i can tell supports many of them as
well (except perhaps jython integration, which is a pipe dream anyway for
Zope).  Apache has the upshot in that it is rock solid, tested by millions,
trusted by even more, and no doubt one of the most actively developed peices
of software there is.

For ZC the upshots of 1) not needing to maintain it, and 2) it being a
excellent marketing tool outweight many technical benifits that twisted may
have that Apache doesn't (I'd like to know what the differences are,
however).  For example, does twisted do URL rewriting?  proxy?
process/thread job control?

Twisted does have the advantage of 1, but not 2.  Further, our faith in the
continuing development of Apache is, de facto, more than that of twisted
simply based on the age, number of users, and number of developers of each
project.

I'm not dismissing the idea, I'm just pointing out an alternative to
Itamar's alternative.  ;)

-Michel






From glyph at twistedmatrix.com  Thu Oct 11 14:36:50 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 11 Oct 2001 15:36:50 -0500
Subject: [Twisted-Python] teud and __all__
Message-ID: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>

Could the Teud repository please move to somewhere else on Zaibach?  I 
don't particularly want to get commit messages for it, since it's a 
totally distinct project from Twisted and it's difficult to sort out the 
messages if they're both coming from twisted-commits.  This could also 
be fixed by Kevin if the commit script were slightly different.

Also, about the __all__ attribute... might I suggest that this is a poor 
choice of names, since this already means something to the interpreter?  
__teud__ might be a better way to put it.  Certainly __init__.py's 
shouldn't have an __all__ in them that describes classes (or modules) to 
*document*.

Thanks,

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From acapnotic at twistedmatrix.com  Thu Oct 11 14:55:11 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 11 Oct 2001 13:55:11 -0700
Subject: [Twisted-Python] teud and __all__
In-Reply-To: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
References: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
Message-ID: <20011011135511.A2167@troglodyte.menefee>

On Thu, Oct 11, 2001 at 03:36:50PM -0500, Glyph Lefkowitz wrote:
> I don't particularly want to get commit messages for [Teud]...
> This could also be fixed by Kevin if the commit script were slightly
> different.

Done.  Teud folks, if you want commit messages for Teud to go somewhere,
you may add a line to CVSROOT/loginfo.

Cheers,
  Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome
The moon is waning cresent, 34.4% illuminated, 23.6 days old.




From lists at itamarst.org  Thu Oct 11 17:28:54 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Oct 2001 01:28:54 +0200
Subject: [Twisted-Python] teud and __all__
References: <E15rmfn-00081C-00@zaibach.twistedmatrix.com>
Message-ID: <3BC62B36.6090009@itamarst.org>

Glyph Lefkowitz wrote:


> Also, about the __all__ attribute... might I suggest that this is a poor 
> choice of names, since this already means something to the interpreter?  
> __teud__ might be a better way to put it.  Certainly __init__.py's 
> shouldn't have an __all__ in them that describes classes (or modules) to 
> *document*.


That's why I chose it. __all__ means "all stuff to import when you do 
'from module import *'". In other words, the module's public interfaces, 
exactly the one ones you want to document.







From glyph at twistedmatrix.com  Thu Oct 11 17:33:41 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 11 Oct 2001 18:33:41 -0500
Subject: [Twisted-Python] teud and __all__
In-Reply-To: <3BC62B36.6090009@itamarst.org>
Message-ID: <E15rpQx-0000eb-00@zaibach.twistedmatrix.com>

On Thursday, October 11, 2001, at 06:28  PM, Itamar Shtull-Trauring 
wrote:

> Glyph Lefkowitz wrote:
>
>
>> Also, about the __all__ attribute... might I suggest that this is a 
>> poor choice of names, since this already means something to the 
>> interpreter?  __teud__ might be a better way to put it.  Certainly 
>> __init__.py's shouldn't have an __all__ in them that describes classes 
>> (or modules) to *document*.
>
>
> That's why I chose it. __all__ means "all stuff to import when you do 
> 'from module import *'". In other words, the module's public 
> interfaces, exactly the one ones you want to document.

Hmm, I guess I was wrong.  I thought that in a package's __init__.py, 
__all__ defined those modules which were imported automatically when the 
package was imported.  After disproving that theory I realize that 
there's probably no reason not to use __all__. :-)


--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From lists at itamarst.org  Thu Oct 11 23:52:33 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Fri, 12 Oct 2001 07:52:33 +0200
Subject: [Twisted-Python] teud and __all__
References: <E15rpQx-0000eb-00@zaibach.twistedmatrix.com>
Message-ID: <3BC68521.1010205@itamarst.org>

Glyph Lefkowitz wrote:


> Hmm, I guess I was wrong.  I thought that in a package's __init__.py, 
> __all__ defined those modules which were imported automatically when the 
> package was imported.  After disproving that theory I realize that 
> there's probably no reason not to use __all__. :-)

And IIRC the python development team has made some effort to add __all__ 
to every module in the standard library. In certain cases (e.g. the 
threading module) this approach breaks down, of course.





From acapnotic at twistedmatrix.com  Fri Oct 12 12:48:01 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Fri, 12 Oct 2001 11:48:01 -0700
Subject: [Twisted-Python] Help, I've run and I can't fall down!
Message-ID: <20011012114801.A1649@troglodyte.menefee>

Okay.  Someone wanna explain to me why this script prints 
"Duplicate Shutdown Ignored." and sits there instead of exiting?

Ctrl-C does seem to work though:
> Starting Shutdown Sequence.
> Select loop terminated.

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 24.7% illuminated, 24.6 days old.
-------------- next part --------------
#!/usr/bin/env python
#$Id: fresh-loginfo.py,v 1.1 2001/10/12 17:49:04 acapnotic Exp $

import os, string, sys
from os import path

from twisted.spread import pb
from twisted.internet import main

import pidutils

TRUE=(1==1)
FALSE=not TRUE

cvs_pid = pidutils.findParentNamed('cvs')

cvsroot = os.environ['CVSROOT']
file = sys.argv[2]
module = string.split(file,'/')[0]

def connected(object):
    object.trackPid(cvs_pid, cvsroot, file)
    main.shutDown() # sys.exit(0)

def aint(reason):
    sys.stderr.write("fresher didn't connect:\n%s\n" % (reason,))
    main.shutDown() # sys.exit(1)

pb.getObjectAt("unix", path.join(cvsroot, 'CVSROOT',".freshcvs"),
               connected, aint)

main.run()

From acapnotic at twistedmatrix.com  Sat Oct 13 15:37:10 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sat, 13 Oct 2001 14:37:10 -0700
Subject: [Twisted-Python] Help, I've run and I can't fall down!
In-Reply-To: <20011012114801.A1649@troglodyte.menefee>
References: <20011012114801.A1649@troglodyte.menefee>
Message-ID: <20011013143710.A1957@troglodyte.menefee>

On Fri, Oct 12, 2001 at 11:48:01AM -0700, Kevin Turner wrote:
> Okay.  Someone wanna explain to me why this script prints 
> "Duplicate Shutdown Ignored." and sits there instead of exiting?

Content-Description: cvstoys/fresh-loginfo.py
[...]
> def connected(object):
>     object.trackPid(cvs_pid, cvsroot, file)
>     main.shutDown() # sys.exit(0)
> 
[...]
> pb.getObjectAt("unix", path.join(cvsroot, 'CVSROOT',".freshcvs"),
>                connected, aint)
> 
> main.run()

Ok, after a spending a little time in that hideous monstrosity which
Python calls a debugger, I found the answer.
the callback 'connected' is called before main.run() is.

Does this mean I never have to run() at all?

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning cresent, 14.3% illuminated, 25.9 days old.




From lists at itamarst.org  Sun Oct 14 11:31:30 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 14 Oct 2001 19:31:30 +0200
Subject: [Twisted-Python] Hooking up XML-RPC to twisted...
Message-ID: <3BC9CBF2.1060408@itamarst.org>

...turned out to be trivial. The following is example code (depends on 
latest CVS since twisted used to reject unknown content-types.)


===================================================================

"""Hook up an object to XML-RPC. An example session:

     >>> s= xmlrpclib.Server('http://localhost:7080/')
     >>> s.echo("lala")
     ['lala']
     >>> s.echo("lala", 1)
     ['lala', 1]
     >>> s.echo("lala", 4)
     ['lala', 4]
     >>> s.echo("lala", 4, 3.4)
     ['lala', 4, 3.3999999999999999]
     >>> s.echo("lala", 4, [1, 2])
     ['lala', 4, [1, 2]]
"""

from twisted.web import resource
import xmlrpclib


class XMLRPC(resource.Resource):

     isLeaf = 1

     def __init__(self, perspective):
         resource.Resource.__init__(self)
         self.perspective = perspective

     def render(self, request):
         args, methodName = xmlrpclib.loads(request.content)
         method = getattr(self.perspective, "perspective_%s" % methodName)
         return xmlrpclib.dumps((apply(method, args),))


class test:

     def perspective_echo(self, *args):
         return args


def main():
     from twisted.internet.main import Application
     from twisted.web import server
     app = Application("xmlrpc-test")
     app.listenOn(7080, server.Site(XMLRPC(test())))
     app.run(0)


if __name__ == '__main__':
     main()





From lists at itamarst.org  Tue Oct 16 03:45:34 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Tue, 16 Oct 2001 11:45:34 +0200
Subject: [Twisted-Python] Forwarded questions about PB
Message-ID: <3BCC01BE.2070301@itamarst.org>

I've been telling this guy about PB, and he had some questions - please 
answer to the list and I'll respond to him with a summary.


-------- Original Message --------
To: lists at itamarst.org
Subject: Re: hi all, new crypto library

	BTW, I read that you want to use RPC over unix domain sockets
	- the Twisted project has a generic secure remote object
	publishing system called PB. It runs over sockets, SSL, unix
	domain sockets, etc.. The main idea was to help people
	implement programs without having to design a protocol from
	scratch each time. The Twisted framwork is in general a
	wonderful platform for server developement:
	http://www.twistedmatrix.com. And that way maybe someday it
	can work with other stuff as well (e.g. Java).

I'll take a look at it but I don't think it's the right thing for the
crypto library, at least without some kind of user authentication that
I currently haven't implemented.  Even with authentication I'd be
uncomfortable exposing the server directly to an IP network.  My idea
is to connect the server to the application host over a point to point
connection like a serial port.

Does PB have some advantage over running a standard non-encrypted RPC
protocol over SSL?

	And philosophically I think you'd like it. For example, the
	way it implements home directories for users in a web
	server. Each user runs their own webserver, and then the main
	one that listens on port 80 forwards request to ~itamar/ to my
	personal web server (using PB). So each user has their CGIs,
	server scripts and so on, run using their own permissions and
	limits.

Why not just use an apache proxy server on port 80, proxying requests
to user servers?

	And I'm a developer on it (though I wasn't at all involved with these
	parts of the code), so I'm sure my bias shows :)

I did look at twistedmatrix a few days ago and it looked kind of
interesting.  I didn't notice any of the security/crypto stuff at the
time.





From carmstro at twistedmatrix.com  Tue Oct 16 12:03:55 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 16 Oct 2001 13:03:55 -0500
Subject: [Twisted-Python] Forwarded questions about PB
In-Reply-To: <3BCC01BE.2070301@itamarst.org>; from lists@itamarst.org on Tue, Oct 16, 2001 at 11:45:34AM +0200
References: <3BCC01BE.2070301@itamarst.org>
Message-ID: <20011016130355.A18133@twistedmatrix.com>

On Tue, Oct 16, 2001 at 11:45:34AM +0200, Itamar Shtull-Trauring wrote:
> -------- Original Message --------
> To: lists at itamarst.org
> Subject: Re: hi all, new crypto library
> 
> 	BTW, I read that you want to use RPC over unix domain sockets
> 	- the Twisted project has a generic secure remote object
> 	publishing system called PB. It runs over sockets, SSL, unix
> 	domain sockets, etc.. The main idea was to help people
> 	implement programs without having to design a protocol from
> 	scratch each time. The Twisted framwork is in general a
> 	wonderful platform for server developement:
> 	http://www.twistedmatrix.com. And that way maybe someday it
> 	can work with other stuff as well (e.g. Java).
> 
> I'll take a look at it but I don't think it's the right thing for the
> crypto library, at least without some kind of user authentication that
> I currently haven't implemented.  Even with authentication I'd be
> uncomfortable exposing the server directly to an IP network.  My idea
> is to connect the server to the application host over a point to point
> connection like a serial port.

Why do you have to expose the server to an IP network? like itamar said, you
can use regular sockets, SSL, *or* unix domain sockets. And serial ports can
speak TCP/IP with SLIP. I'm not sure how hard it would be to do a native
serial port interface in twisted..

> Does PB have some advantage over running a standard non-encrypted RPC
> protocol over SSL?

Yes, it's really cool RPC. :-)

> 	And philosophically I think you'd like it. For example, the
> 	way it implements home directories for users in a web
> 	server. Each user runs their own webserver, and then the main
> 	one that listens on port 80 forwards request to ~itamar/ to my
> 	personal web server (using PB). So each user has their CGIs,
> 	server scripts and so on, run using their own permissions and
> 	limits.
> 
> Why not just use an apache proxy server on port 80, proxying requests
> to user servers?

1) We want to use twisted.web
2) we want to use PB
3) python is more secure than C :-)

> 	And I'm a developer on it (though I wasn't at all involved with these
> 	parts of the code), so I'm sure my bias shows :)
> 
> I did look at twistedmatrix a few days ago and it looked kind of
> interesting.  I didn't notice any of the security/crypto stuff at the
> time.

well admittedly all we have for security/crypto is SSL. (right?)

Anyway, I know these answers aren't the best, someone else will give good
ones :)




From acapnotic at twistedmatrix.com  Tue Oct 16 13:20:06 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Tue, 16 Oct 2001 12:20:06 -0700
Subject: [Twisted-Python] [bug] bloody headers
Message-ID: <20011016122006.A1936@troglodyte.menefee>

There's a bug, which I haven't tracked down yet, somewhere in the
interaction between twisted.web, squid, and galeon.  At times, the HTTP
headers are getting confused with the body content.  

[http://twistedmatrix.com/users/acapnotic/headerbug.png screenshot]

when I reload the page, the headers go away, so I'm inclined to think
that squid is serving the cached page properly.  This only happens in
.idx pages, as far as I've seen so far, so I'm inclined to believe it is
indeed a Twisted issue.  However, it doesn't show up in Galeon when I
don't use a proxy, and I haven't got it to show up in l.nks or w3m yet.
So, um, yeah.

It appears that I use HTTP 1.0 when going through the proxy and HTTP 1.1
otherwise, if that's relevant.

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waning crescent, 0.1% illuminated, 29.2 days old.
(umm...  I may have to tweak the description factors.  Shouldn't it be
saying "new" by now?)




From carmstro at twistedmatrix.com  Tue Oct 16 14:08:34 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Tue, 16 Oct 2001 15:08:34 -0500
Subject: [Twisted-Python] [bug] bloody headers
In-Reply-To: <20011016122006.A1936@troglodyte.menefee>; from acapnotic@twistedmatrix.com on Tue, Oct 16, 2001 at 12:20:06PM -0700
References: <20011016122006.A1936@troglodyte.menefee>
Message-ID: <20011016150833.A9368@twistedmatrix.com>

Speaking of headers, there's also a bug with CGI handling:
http://www.twistedmatrix.com/users/carmstro.twistd/static/viewcvs/cgi/viewcvs.cgi

This is supposed to redirect to the same URL + "/", but twisted.web doesn't 
like that. I may take a look at this later tonight.

On Tue, Oct 16, 2001 at 12:20:06PM -0700, Kevin Turner wrote:
> 
> There's a bug, which I haven't tracked down yet, somewhere in the
> interaction between twisted.web, squid, and galeon.  At times, the HTTP
> headers are getting confused with the body content.  
> 
> [http://twistedmatrix.com/users/acapnotic/headerbug.png screenshot]
> 
> when I reload the page, the headers go away, so I'm inclined to think
> that squid is serving the cached page properly.  This only happens in
> .idx pages, as far as I've seen so far, so I'm inclined to believe it is
> indeed a Twisted issue.  However, it doesn't show up in Galeon when I
> don't use a proxy, and I haven't got it to show up in l.nks or w3m yet.
> So, um, yeah.
> 
> It appears that I use HTTP 1.0 when going through the proxy and HTTP 1.1
> otherwise, if that's relevant.
> 
> -- 
> Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
> The moon is waning crescent, 0.1% illuminated, 29.2 days old.
> (umm...  I may have to tweak the description factors.  Shouldn't it be
> saying "new" by now?)
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python




From glyph at twistedmatrix.com  Tue Oct 16 15:39:26 2001
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 16 Oct 2001 16:39:26 -0500
Subject: [Twisted-Python] Forwarded questions about PB
In-Reply-To: <3BCC01BE.2070301@itamarst.org>
Message-ID: <E15tc2R-00057I-00@zaibach.twistedmatrix.com>

On Tuesday, October 16, 2001, at 04:45  AM, Itamar Shtull-Trauring wrote:

> 	BTW, I read that you want to use RPC over unix domain sockets
> 	- the Twisted project has a generic secure remote object
> 	publishing system called PB. It runs over sockets, SSL, unix
> 	domain sockets, etc.. The main idea was to help people
> 	implement programs without having to design a protocol from
> 	scratch each time. The Twisted framwork is in general a
> 	wonderful platform for server developement:
> 	http://www.twistedmatrix.com. And that way maybe someday it
> 	can work with other stuff as well (e.g. Java).
>
> I'll take a look at it but I don't think it's the right thing for the
> crypto library, at least without some kind of user authentication that
> I currently haven't implemented.  Even with authentication I'd be
> uncomfortable exposing the server directly to an IP network.  My idea
> is to connect the server to the application host over a point to point
> connection like a serial port.

If the serial port can be represented as a byte stream (even better, as 
a file descriptor), then PB could easily be hooked up to it.

> Does PB have some advantage over running a standard non-encrypted RPC
> protocol over SSL?

Well, depends what you mean by "standard":

  CORBA: You can evolve PB interfaces without rebuilding/restarting both 
sides of the application each time.

  XML-RPC: You have a lot more expressiveness, and it consumes a lot less 
bandwidth.

  SOAP: Not as complex, not as expensive.  Object-to-object communication 
model instead of application-to-application.

  Sun RPC: Um... are you serious?

  RMI: It runs in more languages than just Java.  It's implemented in a 
non-blocking fashion.

If there were a good, standard, multi-language non-encrypted RPC 
protocol that could run over a serial port, then I suppose this question 
would be easier to answer, but I don't know what sort of protocol you're 
talking about.

> 	And philosophically I think you'd like it. For example, the
> 	way it implements home directories for users in a web
> 	server. Each user runs their own webserver, and then the main
> 	one that listens on port 80 forwards request to ~itamar/ to my
> 	personal web server (using PB). So each user has their CGIs,
> 	server scripts and so on, run using their own permissions and
> 	limits.
>
> Why not just use an apache proxy server on port 80, proxying requests
> to user servers?

Some information is lost that way; for example, what host the request 
originated from, and what the original URL was.  Also, apache tends to 
like to run lots of processes, which if every user is running can be 
rather resource-consumptive (not to mention that it likes to run as 
root...)

Also, apache proxying for user servers is hardly the default ;-).  
mod_rewrite would probably be able to handle such a thing in the right 
configuration, but with Twisted it works out-of-the-box.

> 	And I'm a developer on it (though I wasn't at all involved with these
> 	parts of the code), so I'm sure my bias shows :)
>
> I did look at twistedmatrix a few days ago and it looked kind of
> interesting.  I didn't notice any of the security/crypto stuff at the
> time.

We don't have any really radical security ideas -- the hope is that SSL 
will provide "good enough" crypto for any protocol that we design, and 
PB's security model is directly modeled after capability security 
(http://www.erights.org)

There is an integrated authentication and security model in PB and 
internet.passport though.

--
______      you are in a maze of twisted little applications, all
|   |_\     remarkably consistent.
|     |          -- glyph lefkowitz, glyph @ twisted matrix . com
|_____|             http://www.twistedmatrix.com/




From carmstro at twistedmatrix.com  Tue Oct 16 23:09:18 2001
From: carmstro at twistedmatrix.com (Chris Armstrong)
Date: Wed, 17 Oct 2001 01:09:18 -0400 (EDT)
Subject: Fw: [Twisted-Python] [bug] bloody headers
Message-ID: <20011017.010918.607972608.carmstro@twistedmatrix.com>


Oops, I meant this to go to twisted-python, not just to blake. I'm learning a
new mailer. =)
-------------- next part --------------
An embedded message was scrubbed...
From: Chris Armstrong <carmstro at twistedmatrix.com>
Subject: Re: [Twisted-Python] [bug] bloody headers
Date: Wed, 17 Oct 2001 01:00:51 -0400 (EDT)
Size: 1807
URL: </pipermail/twisted-python/attachments/20011017/e79d2f20/attachment.mht>

From lists at itamarst.org  Wed Oct 17 05:06:36 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 17 Oct 2001 13:06:36 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
Message-ID: <3BCD663C.7000904@itamarst.org>

Benjamin Bruheim wrote:

> Committing this under doubt: fixes traceback when windows is off-line, 
> and in theory it should get servers behind NAT return the correct hostname.
> Should only affect SERVER_NAME in CGIs.

I have code that checks if you're connected to a network in Windows (depends 
on IE4 being installed for a DLL), if that's of any help.





From coop at coopweb.org  Wed Oct 17 07:25:24 2001
From: coop at coopweb.org (Gavin Cooper)
Date: Wed, 17 Oct 2001 08:25:24 -0500
Subject: [Twisted-Python] Twisted mirror
Message-ID: <20011017082523.A3604@europa.tranquility.net>

I've updated the "Twisted Mirror" with some behind the scenes work to
give it more internet, but more importantly, nightly CVS tarballs are
now automatically generated and available for download from the main
page. Tarballs are generated at 5am every day. Heres a quick list of
Twisted Mirror's features:

* More inte^H^H^H^Hbandwidth than zaibach
* Mirrored official releases
* Nightly CVS Tarballs
* Mirror of www.twistedmatrix.com updated nightly via CVS. Requests to 
  http://twisted.coopweb.org/t.w/ are forwarded to the twisted.web
  server running that mirror.
* Debian apt-get lines for deb packages
* American flag
* Some mirrored documentation. More docs are next on my list.

The mirror is at http://twisted.coopweb.org/

Enjoy

Gavin Cooper
(skreech)




From grolgh at online.no  Wed Oct 17 09:18:31 2001
From: grolgh at online.no (Benjamin Bruheim)
Date: Wed, 17 Oct 2001 17:18:31 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com> <3BCD663C.7000904@itamarst.org>
Message-ID: <008501c1571e$fbb89d20$72afd9c1@phed>

> Benjamin Bruheim wrote:
> > Committing this under doubt: fixes traceback when windows is off-line, 
> > and in theory it should get servers behind NAT return the correct hostname.
> > Should only affect SERVER_NAME in CGIs.
> I have code that checks if you're connected to a network in Windows (depends 
> on IE4 being installed for a DLL), if that's of any help.

Its a minor issue. Its really just another sign of how fragile the windows sockets are. But very annoying since developing with a running phonebill sucks :)

// phed






From acapnotic at twistedmatrix.com  Wed Oct 17 11:43:35 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 10:43:35 -0700
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/web server.py,1.20,1.21
In-Reply-To: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
References: <E15to3L-0005VN-00@zaibach.twistedmatrix.com>
Message-ID: <20011017104335.A2927@troglodyte.menefee>

On Wed, Oct 17, 2001 at 05:35:59AM -0500, Benjamin Bruheim wrote:
> Committing this under doubt: fixes traceback when windows is off-line, 
> and in theory it should get servers behind NAT return the correct hostname.
> Should only affect SERVER_NAME in CGIs.
> 
> diff -b -u -d -r1.20 -r1.21
> --- server.py	2001/10/16 20:09:10	1.20
> +++ server.py	2001/10/17 10:35:57	1.21
> @@ -174,8 +174,6 @@
>      def __repr__(self):
>          return '<%s %s %s>'% (self.method, self.uri, self.clientproto)
>  
> -    _host = socket.gethostbyaddr(socket.gethostname())[0]
> -
>      def process(self):
>          "Process a request."
> @@ -395,7 +393,7 @@
>      def getHost(self):
> -        return self._host
> +        return socket.gethostbyaddr(self.transport.getHost()[1])

The before-and-after code returns two different types:
before it returned just the 'hostname' element [0] of
the gethostbyaddr tuple, and now it returns the whole
thing.

Also, it's not evident to me from the documentation that
transport.getHost always returns an IP address, which I
think gethostbyaddr needs.

Would it be possible to do something along the lines of::

class Request:
    _host = None

    def getHost(self):
        if not self._host:
            Request._host = getHostSomehowOrOther
        return self._host

as doing gethostbyaddr for every Request instance sounds potentially
problematic to me.  (Especially since that's not using the non-blocking
asynchronous resolver.)

But if you have a dynamic IP and so you suspect your full hostname of
changing on you...  hmm.  Is there a way to be notified when the network
connection comes up (there must be, the silly MSN guys start blinking
right away), and this could trigger some sort of "Reinitialize" call in
the Twisted server?

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 0.6% illuminated, 0.7 days old.




From acapnotic at twistedmatrix.com  Wed Oct 17 12:51:11 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 11:51:11 -0700
Subject: [Twisted-Python] Fresh CVS hooker
Message-ID: <20011017115111.B2927@troglodyte.menefee>

So I was reading the CVS docs where it says 
> Doing so in the naive way will cause a problem with locks,
> so the `cvs update' must be run in the background.  Here is
> an example for unix (this should all be on one line):
> 
> ^cyclic-pages              (date; cat; (sleep 2; cd /u/www/local-docs; cvs -q update -d) &) >> $CVSROOT/CVSROOT/updatelog 2>&1

and the kluge repulsion seized ahold of some delerium and possesed me to
write an, uh, non-naive CVS loginfo thingie.

The result is in 
http://twistedmatrix.com/users/acapnotic/mycvs/cvstoys/ , or
~acapnotic/co-me/cvstoys for those of you on the inside.

the primary advantage of this is that it doesn't anywhere say "sleep 2"
(it hides that behind a Delayed instead =), but whereas CVSROOT/loginfo
will only run the first matching command it finds, my cvs fresher can
unleash an entire horde of actions.  And it can provide a PB service, if
you're into that sort of thing.

It hasn't undergone trial-by-fire yet, but it seems to be working so
far.  There is one bit left undone, though: the commit notification
e-mails don't get sent, and I can't figure why.  (Please cast your
eyeballs upon cvstoys/actions.py:MailCommand and see if you can
strighten me out.)

Potential uses:

*) can keep a checked-out directory up-to-date at all times.  i.e. have a
/twisted/cvsTwisted/ directory that would always contain the
bleeding-edge version.  Or have changes show up in /var/www as soon
as they're checked in.

*) could let a bleeding-edge Twisted server know when the source has
changed, in case it wants to trigger a twisted.python.rebuild.  

*) Could keep a tarball snapshot up to date (although you'd probably
want to be a little cautious about how often you decide to bz2 it, as
that takes some considerable resources).

*) could keep a mirror (i.e. coopweb) or off-site back-up up to date by
pushing over rsync.

*) could do the email-commit-notification thing (if we get that bug
ironed out), although admittedly I don't have any real complaints with
the syncmail script we're using now.

*) could run Teud to keep the docs fresh.

*) could notify perspectives signed into it when a check-in occours.
Using epb.el, one could potentially have your emacs run its
version-control-update thing to update your buffers whenever someone
else checks in a new revisions.  This sounds cracktackulous, but I'm not
sure it's really a good idea.

*) could run unit tests and send mail to you (and/or everyone else) if
you screwed something up.

and, um, stuff.  There you have it.  If you want to play with it, put a
'freshCfg' configuration file (like the one in actions.__doc__) in
CVSROOT, check in the freshCfg file and add it to CVSROOT/checkoutlist,
have CVSROOT/loginfo run loginfo.py %{sSv}, start the server by running
fresher.py, and there you go.  (Hmm.  will have to automate some of
that.)  I'll package it shortly after the mail notification starts
working.  oops, better go add the un-copyright notices now.

"and-that's-how-I-replaced-one-line-of-shell-code-with-a-thousand-in-Python"-ly yours,
  - Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 0.6% illuminated, 0.8 days old.




From acapnotic at twistedmatrix.com  Wed Oct 17 12:59:34 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 17 Oct 2001 11:59:34 -0700
Subject: [Twisted-Python] Fresh CVS hooker
In-Reply-To: <20011017115111.B2927@troglodyte.menefee>
References: <20011017115111.B2927@troglodyte.menefee>
Message-ID: <20011017115934.C2927@troglodyte.menefee>

> *) could run unit tests and send mail to you (and/or everyone else) if
> you screwed something up.

Or even better: it could tell pretzel about it, and pretzel would tell
the whole channel (on however-many networks) that you just screwed
something up!




From bwinton at tor.dhs.org  Wed Oct 17 14:30:18 2001
From: bwinton at tor.dhs.org (Blake Winton)
Date: Wed, 17 Oct 2001 16:30:18 -0400
Subject: [Twisted-Python] (no subject)
Message-ID: <20011017163018.A19949@tor.dhs.org>

Background:
I'm trying to make Twisted-0.11.0 run under Windows 2000.
Call me crazy.  ;)

Problem #1:
Windows really doesn't like files without extensions.
Solution #1:
Rename everything in bin\ to include ".py" at the end.
Does this break anything in particular for the Unix folks?
I realize it does make it a little more annoying, but can
you live with that to get it working under Windows?

Problem #2:
Running runtests(.py) gives the following error:
!!!FAILURES!!!
Test Results
Run: 91 ; Failures: 0; Errors: 1
There was 1 error:
1) twisted.test.test_dirdbm.DirDbmTestCase.testDbm
Traceback (most recent call last):
  File "C:\Twisted-0.11.0\twisted\test\test_dirdbm.py", line 44, in
testDbm
    d[k] = v
  File "C:\Twisted-0.11.0\twisted\persisted\dirdbm.py", line 60, in
__setitem__
    f = _open(os.path.join(self.dname, k),'wb')
IOError: [Errno 22] Invalid argument:
'C:\\DOCUME~1\\blakew\\LOCALS~1\\Temp\\~1796-1\\YWJj\012'

Tracking this down, The problem seems to be in
twisted\persisted\dirdbm.py
line 59.  We encode the filename, which is good, but we use the base64
encoder
which appends a newline to the end, which is bad.
Solution #2:
I've done some testing, and we can strip the newline (with "k =
k[:-1]"),
and it will decode into the correct value.  We should perhaps do this in
the
encoding function at line 52.

That seemed to be the only change to get runtests to work.

Next up: running the webserver...  :)

Later,
Blake.
-- 
  4:29pm  up 53 days, 23:14,  1 user,  load average: 1.00, 1.00, 1.00




From j.her at t-online.de  Wed Oct 17 14:53:14 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Wed, 17 Oct 2001 22:53:14 +0200
Subject: [Twisted-Python] (no subject)
In-Reply-To: <20011017163018.A19949@tor.dhs.org>
Message-ID: <15txf5-26REMiC@fwd01.sul.t-online.com>

On Wed, 17 Oct 2001 16:30:18 -0400, Blake Winton wrote:

>Problem #1:
>Windows really doesn't like files without extensions.
>Solution #1:
>Rename everything in bin\ to include ".py" at the end.
>Does this break anything in particular for the Unix folks?
>I realize it does make it a little more annoying, but can
>you live with that to get it working under Windows?

Better solution: using the script-generating scheme I use in MoinMoin
and Teud.

>I've done some testing, and we can strip the newline (with "k =
>k[:-1]"),

Better use rstrip().

>Next up: running the webserver...  :)

When you went through it, I finally might even try it on NT4.

Ciao, Jürgen






From lists at itamarst.org  Wed Oct 17 14:59:38 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Wed, 17 Oct 2001 22:59:38 +0200
Subject: [Twisted-Python] (no subject)
References: <20011017163018.A19949@tor.dhs.org>
Message-ID: <3BCDF13A.3070007@itamarst.org>

Blake Winton wrote:


> Rename everything in bin\ to include ".py" at the end.
> Does this break anything in particular for the Unix folks?
> I realize it does make it a little more annoying, but can
> you live with that to get it working under Windows?

Well, see, the twistd binary in there is mainly oriented towards unix 
(it will try to daemonize, unless there's a '-n' option, etc.), and 
really what is needed is decent infrastructure for running under 
Windows. That means a .exe generated from distutils, and an NT service, 
and as Juergen said autogenerated binaries.

Given all that, it does run, last I checked (I did an app.run(0) instead 
of running my daemon with twistd). Except there was that wierd bug where 
telnetting from linux to a windows telnet server crashed twisted (I'm 
not kidding)...





From blakew at sonainnovations.com  Wed Oct 17 15:26:38 2001
From: blakew at sonainnovations.com (Blake Winton)
Date: Wed, 17 Oct 2001 17:26:38 -0400
Subject: [Twisted-Python] (no subject)
References: <20011017163018.A19949@tor.dhs.org> <3BCDF13A.3070007@itamarst.org>
Message-ID: <008a01c15752$67d4f930$d6d35fd8@quintessential>

> > Rename everything in bin\ to include ".py" at the end.
> > Does this break anything in particular for the Unix folks?
> > I realize it does make it a little more annoying, but can
> > you live with that to get it working under Windows?
> Well, see, the twistd binary in there is mainly oriented towards unix
> (it will try to daemonize, unless there's a '-n' option, etc.), and
> really what is needed is decent infrastructure for running under
> Windows. That means a .exe generated from distutils, and an NT service,
> and as Juergen said autogenerated binaries.

That would all be nice.  Is anyone working on it?

> Given all that, it does run, last I checked

I'm still having problems with mktap, but they seem to be more
problems with my Python setup than with mktap itself...
Oh, wait, there it goes...

> (I did an app.run(0) instead of running my daemon with twistd).

I'm going to write up how I got working what I got working, and post it
to the list...  Later, after I've got more than just the web server
running.  Which probably means tomorrow, since now it's Wolfenstein time. ;)

> Except there was that wierd bug where
> telnetting from linux to a windows telnet server crashed twisted (I'm
> not kidding)...


Ugh.  I don't think I could even test for that.

As for the other bug, are you going to check in a fix?  I agree that a
call to rstrip() in the _encode method is the "Right Thing (tm)".

Later,
Blake.







From j.her at t-online.de  Wed Oct 17 16:26:28 2001
From: j.her at t-online.de (Juergen Hermann)
Date: Thu, 18 Oct 2001 00:26:28 +0200
Subject: [Twisted-Python] (no subject)
In-Reply-To: <008401c15752$16223580$d6d35fd8@quintessential>
Message-ID: <15tz7J-0ykQsqC@fwd01.sul.t-online.com>

On Wed, 17 Oct 2001 17:24:21 -0400, Blake Winton wrote:

>> >Problem #1:
>> >Windows really doesn't like files without extensions.
>> Better solution: using the script-generating scheme I use in MoinMoin
>> and Teud.
>
>I like it.  Uh, who's going to work on that.  ;)
>(I'ld be happy to, if I could get a pointer to some documentation.)

I can do it, if we (read: glyph ;) agree on it.

>Let me know if you want the set of steps I used to get it working.

Sure. Best you can do is to write up some docs, or a wiki page
(http://twistedmatrix.com/users/jh.twistd/python/moin.cgi/TwistedOnWindo
ws).

Ciao, Jürgen






From acapnotic at twistedmatrix.com  Thu Oct 18 04:27:20 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 18 Oct 2001 03:27:20 -0700
Subject: [Twisted-Python] pyunit upgrade
Message-ID: <20011018032720.A6105@troglodyte.menefee>

Ok, I upgraded the pyunit in Twisted from the July 2000 version to the
current one (which is also in the standard library these days).  Before
I did so, I checked to see what changes were made from the upstream
source.

Here are the only changes which were not cosmetic.  For your
browsing pleasure, most of this diff doesn't have changes, but it
provides context for people (who need a bit more than 'patch' does).

To further enchance your experience today, we include a special web
bonus.  The upstream source:
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pyunit/pyunit/unittestgui.py

Our source:
http://twistedmatrix.com/users/carmstro.twistd/static/viewcvs/cgi/viewcvs.cgi/pyunit/unittestgui.py

--- pyunit-1.2.0/unittestgui.py	Thu Oct 18 02:36:45 2001
+++ Twisted/unittestgui.py	Thu Oct 18 02:36:48 2001
@@ -44,12 +44,12 @@
 class BaseGUITestRunner:
     """Subclass this class to create a GUI TestRunner that uses a specific
     windowing toolkit. The class takes care of running tests in the correct
     manner, and making callbacks to the derived class to obtain information
     or signal that events have occurred.
     """
     def __init__(self, *args, **kwargs):
         self.currentResult = None
         self.running = 0
         self.__rollbackImporter = None
         apply(self.initGUI, args, kwargs)
 
@@ -64,12 +64,12 @@
     def runClicked(self):
         "To be called in response to user choosing to run a test"
         if self.running: return
         testName = self.getSelectedTestName()
         if not testName:
             self.errorDialog("Test name entry", "You must enter a test name")
             return
         if self.__rollbackImporter:
             self.__rollbackImporter.uninstall()
         self.__rollbackImporter = RollbackImporter()
         try:
             test = unittest.createTestInstance(testName)
@@ -148,28 +149,29 @@
 class RollbackImporter:
     """This tricky little class is used to make sure that modules under test
     will be reloaded the next time they are imported. It provides a temporary
     wrapper around __import__ which notes imported modules and unloads them.
 
     Alternative mechanisms using the 'imp' and 'ihooks' standard modules were
     considered but were found to be unworkable. Additionally, use of those
     modules can disturb PythonWin.
     """
     def __init__(self):
         "Creates an instance and installs as the global importer"
         self.previousModules = sys.modules.copy()
         self.realImport = __builtin__.__import__
-        __builtin__.__import__ = self._import
-        self.newModules = {}
+        # __builtin__.__import__ = self._import
+        # self.newModules = {}
 
     def _import(self, name, globals=None, locals=None, fromlist=[]):
         result = apply(self.realImport, (name, globals, locals, fromlist))
         self.newModules[name] = 1
         return result
 
     def uninstall(self):
-        for modname in self.newModules.keys():
+        currentModules = sys.modules.copy()
+        for modname in currentModules.keys():
             if not self.previousModules.has_key(modname):
                 # Force reload when modname next imported
                 del(sys.modules[modname])
-        __builtin__.__import__ = self.realImport
+        # __builtin__.__import__ = self.realImport
 

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing crescent, 2.4% illuminated, 1.5 days old.




From lists at itamarst.org  Sat Oct 20 17:30:04 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 21 Oct 2001 01:30:04 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/test test_usage.py,NONE,1.1
References: <E15v5GL-00036F-00@zaibach.twistedmatrix.com>
Message-ID: <3BD208FC.1020601@itamarst.org>

Kevin Turner wrote:


> test_usage: "Sure sub-space ponies, I'm making gravy without the lumps!"


Today's lesson: never buy a Frank Zappa album before hearing it. It 
might be amazing good music (e.g. Apostrophe) or, if you buy Lumpy 
Gravy, you get an album with barely no music but full of dialogues such as:


SPIDER: I think I can explain about . . . about how the pigs' music works
MONICA: Well, this should be interesting
SPIDER: Remember that they make music with a very dense light, and remember about the smoke standing still and how they . . . they really get uptight when you try to move the smoke, right?
MONICA: Right
JOHN: Yeah?
SPIDER: I think the music in that dense light is probably what makes the smoke stand still. Any sort of motion has its effect on . . . on the ponies' manes. You know, the thing on their neck
JOHN: Hmm . . .
SPIDER: As soon as the pony's mane starts to get good in the back any sort of mo . . . motion, especially of smoke or gas, begins to make the end split.
JOHN: That's the basis of all their nationalism. Like if they can't salute the smoke every morning when they get up . . .
SPIDER: Yeah, it's a vicious circle. You got it.







From tv at twistedmatrix.com  Tue Oct 23 10:36:38 2001
From: tv at twistedmatrix.com (Tommi Virtanen)
Date: 23 Oct 2001 19:36:38 +0300
Subject: [Twisted-Python] Passport should be more async
Message-ID: <871yjucnzd.fsf@ki.yok.utu.fi>


        [Related to twisted.internet.passport,
        twisted.reality.plumbing, twisted.web.guard and
        twisted.words.ircservice]

	Passport, as it is now, cannot be used with real world
	authentication services such as LDAP and Radius. The primary
	reason seems to be that Identity.verifyPlainPassword() is
	assumed to be sync -- the usual LDAP config is such that
	hashed passwords cannot be retrieved from the server, but one
	can attempt to bind to a user entry with such a password. And
	that bind attempt is naturally async.

        The patch here mimics the Deferred usage in
        Authorizer.getIdentityRequest(), implementing a similar system
        with Identity.verifyPlainPassword(). I have also attempted to
        fix all callers, but I *really* need help with twisted.web.guard.

	Please give feedback.

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: verifyPlainPassword-async.diff
URL: </pipermail/twisted-python/attachments/20011023/c0c22608/attachment.ksh>
-------------- next part --------------

-- 
tv@{{hq.yok.utu,havoc,gaeshido}.fi,{debian,wanderer}.org,stonesoft.com}
double a,b=4,c;main(){for(;++a<2e6;c-=(b=-b)/a++);printf("%f\n",c);}

From acapnotic at twistedmatrix.com  Thu Oct 25 01:48:16 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Thu, 25 Oct 2001 00:48:16 -0700
Subject: [Twisted-Python] DCC PERSPECTIVE
Message-ID: <20011025004816.A11370@troglodyte.menefee>

So here's how DCC SEND works in IRC-land:

When I offer a file for DCC, I bind a socket to port 0, and I send you a
CTCP message with my address, the port number, an argument providing the
filename, and if I'm feeling nice, a filesize parameter as well.  I wait
for someone to attach to this port (hopefully it's you), stop listening
for anything else, and start pumping the file through the socket.
DCC CHAT works the same way, except I use the socket for a line-oriented
chat instead of file transport.

So here's me, doin' this thing for the Twisted protocol while glyph is
telling me about distributed hacks involving shotguns with retro-rockets
and superheated rods for inertial dampeners, and it hits me: Another way
to advertise PB services would be with a DCC PERSPECTIVE query.  You
could pass a OTP or something instead of a filename, and then the
PB-enabled IRC client would do getObjectAt...

Now is that useless, or what!

"but-I'm-*not*-coding-IRC"-ly yours,

 - Acap^H^H^H^HKevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here




From lists at itamarst.org  Thu Oct 25 04:27:36 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Oct 2001 12:27:36 +0200
Subject: [Twisted-Python] Check this out
Message-ID: <3BD7E918.4040909@itamarst.org>

http://cvs.zope.org/Packages/Spread/
http://www.spread.org/

 From the overview page:

The problem in building distributed systems comes from the need to 
communicate and synchronize the different components of the system using 
networks that are prone to faults. In every distributed system (e.g. 
replicated databases or application server clusters) there are inherent 
uncertainties about the current state of remote components. Due to the 
complexity of such systems, the construction of a reliable and efficient 
distributed system is very difficult.

Spread is a toolkit that provides a high performance messaging service that 
is resilient to faults across external or internal networks. Spread 
functions as a unified message bus for distributed applications, and 
provides highly tuned application-level multicast and group communication 
support. Spread services range from reliable message passing to fully 
ordered messages with delivery guarantees, even in case of computer failures 
and network partitions.






From jasbahr at crash.org  Thu Oct 25 09:49:48 2001
From: jasbahr at crash.org (Jason L. Asbahr)
Date: Thu, 25 Oct 2001 10:49:48 -0500
Subject: [Twisted-Python] Twisted Enterprise Administrator
In-Reply-To: <3BD7E918.4040909@itamarst.org>
Message-ID: <EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>

Anyone know of any web-based database *administration* tools?  

I'm imagining some simple set of forms that lets admins log into 
the system, select a database or data source, create, edit, and 
delete tables in that database, enter records, link tables 
with tables, and so on.  It would be a web-based equivalent to 
SQL Server's front end GUI (minus the cool drag-and-link graphical
frosting).  This seems like it could be built out of a fairly 
simple set of widgets...

Jason






From dave at dcit.com  Thu Oct 25 10:57:58 2001
From: dave at dcit.com (David Sturgis)
Date: Thu, 25 Oct 2001 11:57:58 -0500
Subject: [Twisted-Python] Twisted Enterprise Administrator
In-Reply-To: <EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>
References: <3BD7E918.4040909@itamarst.org>
	<EIEFLCFECLLBKGPNJJIMCELEHIAA.jasbahr@crash.org>
Message-ID: <20011025115758.30af504a.dave@dcit.com>

On Thu, 25 Oct 2001 10:49:48 -0500
"Jason L. Asbahr" <jasbahr at crash.org> wrote:

> Anyone know of any web-based database *administration* tools?  

     phpMyAdmin is pretty nice, although it's geared specifically towards mySQL. Still, it's been a hell of a lot more useful than the MSSQL graphical admin tool, both in that it works remotely through a web browser and doesn't totally suck. You can do anything you can do from the command line, and it's very simple and clean and easy to use.

     (although I'm sort of biased since I was being forced to use MSSQL 6.7 for reasons I still don't entirely understand beyond "that's what the client wants", and 6.7 was a painful transitional period for Transact-SQL syntax. Which, as it's name suggests, is not actually SQL syntax, but something... else.)

--
David Sturgis
dave at dcit.com
Software Developer
DataConcepts Information Technology Corporation
"The Information Technology Company" (tm)
http://www.dcit.com
724 Bergen Blvd
Ridgefield, NJ 07657
201-313-1845 ext 718
201-941-9699 fax




From lists at itamarst.org  Thu Oct 25 11:03:54 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 25 Oct 2001 19:03:54 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/internet task.py,1.10,1.11
References: <E15wnLk-0005Lz-00@zaibach.twistedmatrix.com>
Message-ID: <3BD845FA.8070605@itamarst.org>

Itamar Shtull-Trauring wrote:


 > A task queue per thread was apprently stupid, too much time was spent 
waiting
 >  on locks. The new implementation needs refactoring in a big way
 > (copy/paste coding), but is significantly faster.

Apparently this is inaccurate, since the scheduler now spends too much time 
running tasks. Suffice to say that this needs tuning.





From lists at itamarst.org  Sat Oct 27 11:20:34 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Sat, 27 Oct 2001 19:20:34 +0200
Subject: [Twisted-Python] Forensic System Data Logger
Message-ID: <3BDAECE2.9010702@itamarst.org>

YATTSBIT:

<http://www.zope.org/Members/mcdonc/Products/ForensicLogger>





From acapnotic at twistedmatrix.com  Sun Oct 28 21:11:59 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Sun, 28 Oct 2001 20:11:59 -0800
Subject: [Twisted-Python] Tendril
Message-ID: <20011028201159.A21498@troglodyte.menefee>

Tendril is a Words client.
Or maybe it's more of a meta-client, since it manages a whole fistful of
Perspectives (aka words Participants) at once.

Or maybe it's words' ircservice turned inside-out,
because yeah, there's some IRC in it.

Instead of providing an IRC server which people log on to with their IRC
clients to talk to the Words service, Tendril is an IRC Client which
lives with a Words service.  Tendril logs on to a remote IRC server, and
once there, creates a words Participant for everyone it sees.

This gives it an advantage over joining Bridgette to the Words irc
service, as there everyone shows up as a single Participant "ry".  Since
Tendril creates a Participant for every IRC user it represents, each one
appears in the words group just as they would if they had all logged
directly into the Words service.

The difference is

<ry> Acapnotic joined on OPN
<ry> <Acapnotic at opn> Hi!

versus:

Acapnotic at opn joined!
<Acapnotic at opn> Hi!

...

And yes, the link goes in the other direction too; the conversation that
goes on in the Words group is reported back to the IRC channel.  But
because I didn't think IRC operators would appreciate having 20 clients
logged in from the same sever to represent 20 words Participants, when
viewed from the IRC side everyone appears to be speaking through one
"bot"; from this end it looks just like Bridgette.


By putting multiple Tendrils connected to different IRC networks in the
same Words group, you can duplicate Bridgette's effect of joining IRC
networks together.  Since tendril operates transparently on the Words
side, you needn't worry about an ugly chained relay effect when you do
this, even though the Tendrils to the different IRC networks are
separate entities.

<ry1> <ry2 at opn> <foo at efnet> Don't worry, Tendril won't look like this.


In addition to linking IRC channels to Words groups, Tendril also
converts between private /msgs and Words directMessages, so can tell
your Words client to "Start conversation with... Acapnotic at opn", and
Acapnotic will receive your messages via msg over the IRC network, and
you will see Acapnotic's replies in your conversation window.

One final bonus for the IRC freaks: Tendril has a kludge (feature!) to 
broker DCC handshakes between IRC networks.  This doesn't mean that
Tendril receives a file over DCC and sends it out again, it only passes
the *handshake*, and because Direct Client Connections operate entirely
outside the IRC network, this actually works.


The big motivation behind Tendril is now if I want to write an IRC bot,
I don't need to write it for IRC.  I write it as a words client and put
it on a words service instead.  If there's already a tendril from that
channel to a Words service, then I can have my words bot sign on to that
service, otherwise I could run a tendril+words service locally with just
my bot signed on, and that'd work too.

(Actually, the aforementioned DCC handshake brokering could probably be
broken out into a separate Words bot, assuming IRC clients have
implemented CTCP correctly.  Having a Words bot for something that's
exclusively an IRC feature is a bit peculiar though.)

"I-think-that's-a-long-enough-introduction"ly yours,

 - Kevin

-- 
Kevin Turner <acapnotic at twistedmatrix.com> | OpenPGP encryption welcome here
The moon is waxing gibbous, 89.0% illuminated, 11.6 days old.




From lists at itamarst.org  Mon Oct 29 08:16:19 2001
From: lists at itamarst.org (Itamar Shtull-Trauring)
Date: Mon, 29 Oct 2001 17:16:19 +0200
Subject: [Twisted-Python] Re: [Twisted-commits] CVS: Twisted/twisted/protocols basic.py,1.13,1.14
References: <E15yDz4-0001va-00@zaibach.twistedmatrix.com>
Message-ID: <3BDD72C3.70604@itamarst.org>

Itamar Shtull-Trauring wrote:


> Modified Files:
> 	basic.py 
> Log Message:
> I was overwriting self.mode by mistake, so I made it private
> 


May I add something to the coding standard regarding this?



Index: doc/CodingStandard.html
===================================================================
RCS file: /cvs/Twisted/doc/CodingStandard.html,v
retrieving revision 1.5
diff -c -r1.5 CodingStandard.html
*** doc/CodingStandard.html	2001/10/26 16:33:19	1.5
--- doc/CodingStandard.html	2001/10/29 15:13:53
***************
*** 219,224 ****
--- 219,239 ----
           function, class, method, or module, make sure that it won't instantly
           break other code.
         </p>
+       <p>
+         If your class has attributes that are intended to be private and
+         implementation specific (e.g. the current state of a state-machine),
+         prefix your attribute with __. This will make sure that they don't
+         interfere with subclasses' attributes by mistake. For example:
+         <pre>
+ class Foo:
+
+     __state = 1
+
+     def doSomething(self):
+         # ...
+         self.__state = 2
+         </pre>
+       </p>
       <hr>
       <address><a href="mailto:glyph at helix.twistedmatrix.com">Glyph 
Lefkowitz</a></address>
   <!-- Created: Thu Apr 26 07:53:26 CDT 2001 -->






From sopwith at redhat.com  Tue Oct 30 11:12:42 2001
From: sopwith at redhat.com (Elliot Lee)
Date: Tue, 30 Oct 2001 13:12:42 -0500 (EST)
Subject: [Twisted-Python] Sped-up banana
Message-ID: <Pine.LNX.4.33.0110301310490.22821-300000@ostrich-deluxe.labs.redhat.com>

The encoder redone in C, and handles 'long' numbers correctly.

At radix' request,
-- Elliot
-------------- next part --------------
# Generic List ENcoding

global types, copy, cStringIO, math, struct, apiarymisc
import types, copy, cStringIO, math, struct, apiarymisc

def int2b128(integer, stream):
    if integer == 0:
        stream(chr(0))
        return
    assert integer > 0, "can only encode positive integers"
    while integer:
        stream(chr(integer & 0x7f))
        integer = integer >> 7

def b1282int(st):
    i = 0l
    place = 0
    for char in st:
        num = ord(char)
        i = i + (num * (128 ** place))
        place = place + 1
    try:
        return int(i)
    except:
        return i

# delimiter characters.
LIST     = chr(0x80)
INT      = chr(0x81)
STRING   = chr(0x82)
SYMBOL   = chr(0x83)
NEG      = chr(0x84)
VOCAB    = chr(0x85)
FLOAT    = chr(0x86)
LONGINT  = chr(0x87)

HIGH_BIT_SET = chr(0x80)

class Banana:
#(protocol.Protocol, styles.Ephemeral):
    def connectionMade(self):
        self.listStack = []

    def gotItem(self, item):
        l = self.listStack
        if l:
            l[-1][1].append(item)
        else:
            self.expressionReceived(item)

    buffer = ''

    def dataReceived(self, chunk):
        buffer = self.buffer + chunk
        listStack = self.listStack
        gotItem = self.gotItem
        while buffer:
            assert self.buffer != buffer, "This ain't right: %s %s" % (repr(self.buffer), repr(buffer))
            self.buffer = buffer
            pos = 0
            for ch in buffer:
                if ch >= HIGH_BIT_SET:
                    break
                pos = pos + 1
            else:
                if pos > 64:
                    raise Exception("Security precaution: more than 64 bytes of prefix")
                return
            num = buffer[:pos]
            typebyte = buffer[pos]
            rest = buffer[pos+1:]
            if len(num) > 64:
                raise Exception("Security precaution: longer than 64 bytes worth of prefix")
            if typebyte == LIST:
                num = b1282int(num)
                listStack.append((num, []))
                buffer = rest
            elif typebyte == STRING:
                num = b1282int(num)
                if num > 640 * 1024: # 640k is all you'll ever need :-)
                    raise Exception("Security precaution: Length identifier too long.")
                if len(rest) >= num:
                    buffer = rest[num:]
                    gotItem(rest[:num])
                else:
                    return
            elif typebyte == LONGINT:
                assert not "Not implemented"
            elif typebyte == INT:
                buffer = rest
                num = b1282int(num)
                gotItem(num)
            elif typebyte == NEG:
                buffer = rest
                num = -b1282int(num)
                gotItem(num)
            elif typebyte == SYMBOL:
                buffer = rest
                num = b1282int(num)
                gotItem(self.incomingVocabulary[num])
            elif typebyte == VOCAB:
                buffer = rest
                num = b1282int(num)
                gotItem(self.incomingVocabulary[-num])
            elif typebyte == FLOAT:
                buffer = rest
                num = float(num)
                gotItem(num)
            else:
                raise NotImplementedError("Invalid Type Byte")
            while listStack and (len(listStack[-1][1]) == listStack[-1][0]):
                item = listStack.pop()[1]
                gotItem(item)
        self.buffer = ''

    def expressionReceived(self, lst):
        """Called when an expression (list, string, or int) is received.
        """
        raise NotImplementedError()


    outgoingVocabulary = {
        # Jelly Data Types
        'None'           :  -1,
        'class'          :  -2,
        'dereference'    :  -3,
        'reference'      :  -4,
        'dictionary'     :  -5,
        'function'       :  -6,
        'instance'       :  -7,
        'list'           :  -8,
        'module'         :  -9,
        'persistent'     : -10,
        'tuple'          : -11,
        'unpersistable'  : -12,

        # PB Data Types
        'copy'           : -13,
        'cache'          : -14,
        'cached'         : -15,
        'remote'         : -16,
        'local'          : -17,
        'lcache'         : -18,

        # PB Protocol Messages
        'version'        : -19,
        'login'          : -20,
        'password'       : -21,
        'challenge'      : -22,
        'perspective'    : -23,
        'inperspective'  : -24,
        'cachemessage'   : -25,
        'message'        : -26,
        'answer'         : -27,
        'error'          : -28,
        'decref'         : -29,
        'decache'        : -30,
        'uncache'        : -31,
        }

    incomingVocabulary = {}
    for k, v in outgoingVocabulary.items():
        incomingVocabulary[v] = k
        
    def __init__(self):
        self.outgoingSymbols = copy.copy(self.outgoingVocabulary)
        self.outgoingSymbolCount = 0
        
    def intern(self, sym):
        write = self.transport.write
        self.outgoingSymbolCount = self.outgoingSymbolCount + 1
        self.outgoingSymbols[sym] = self.outgoingSymbolCount

    def sendEncoded(self, obj):
        io = cStringIO.StringIO()
        self._encode(obj, io.write)
        value = io.getvalue()
        self.transport.write(value)

    def _encode_longint(self, obj, write):
        assert not "Not implemented"

    def _encode(self, obj, write):
        if isinstance(obj, types.ListType) or isinstance(obj, types.TupleType):
            int2b128(len(obj), write)
            write(LIST)
            for elem in obj:
                self._encode(elem, write)
        elif isinstance(obj, types.LongType):
            self._encode_longint(obj, write)
        elif isinstance(obj, types.IntType):
            if obj >= 0:
                int2b128(obj, write)
                write(INT)
            else:
                int2b128(-obj, write)
                write(NEG)
        elif isinstance(obj, types.FloatType):
            write(str(obj))
            write(FLOAT)
        elif isinstance(obj, types.StringType):
            if self.outgoingSymbols.has_key(obj):
                symbolID = self.outgoingSymbols[obj]
                if symbolID < 0:
                    int2b128(-symbolID, write)
                    write(VOCAB)
                else:
                    int2b128(symbolID, write)
                    write(SYMBOL)
            else:
                int2b128(len(obj), write)
                write(STRING)
                write(obj)
        else:
            assert 0, "could not send object: %s" % repr(obj)

import cBanana

class Canana(Banana):
    def connectionMade(self):
        self.state = cBanana.newState()

    def dataReceived(self, chunk):
        self.buffer += chunk
        processed = cBanana.dataReceived(self.state, buffer, self.expressionReceived)
        self.buffer = self.buffer[processed:]

    _encode = apiarymisc.make_method(Banana, cBanana.encode_stuff)

Pynana = Banana

try:
    import cBanana
except ImportError:
    pass
else:
    Banana = Canana

# For use from the interactive interpreter
_i = Banana()

def encode(lst):
    io = cStringIO.StringIO()
    _i._encode(lst, io.write)
    return io.getvalue()
-------------- next part --------------
/* cBanana.c */

#ifdef WIN32
#include <windows.h>
#define EXTERN_API __declspec(dllexport)
#else
#define EXTERN_API 
#endif

#include <Python.h>
#include <assert.h>

/* Python module initialization */

EXTERN_API void initcBanana(void);

/* Python accessible */
static PyObject *encode_stuff( PyObject *self, PyObject *args );
static PyObject *dataReceived( PyObject *self, PyObject *args );
static PyObject *cBananaState_new( PyObject *self, PyObject *args );
static PyObject *encodeLong( PyObject *self, PyObject *args );

// function table passed into Python by initcBanana()
static PyMethodDef cBanana__methods__[] =
  {
    { "encode_stuff", encode_stuff, METH_VARARGS },
    { "dataReceived", dataReceived, METH_VARARGS },
    { "newState", cBananaState_new, METH_VARARGS },
    { "encodeLong", encodeLong, METH_VARARGS },
    { NULL, NULL }        /* Sentinel */
  };

static PyObject *BananaError;

#define HIGH_BIT_SET 0x80

#define LIST		 0x80
#define INT			 0x81
#define STRING		 0x82
#define SYMBOL		 0x83
#define NEG			 0x84
#define VOCAB		 0x85
#define FLOAT		 0x86
#define LONGINT          0x87

#define NUM_VOCABS   31

struct listItem
{
  struct listItem *lastList;
  PyObject *thisList;
  int size;
};

/*
 * This struct represents state that's carried between calls.
 */

typedef struct {
  PyObject_HEAD
  struct listItem *currentList;
} cBananaState;

staticforward PyTypeObject cBananaStateType;

static PyObject*
cBananaState_new(PyObject *self, PyObject *args) {
  cBananaState* state;
  if (!PyArg_ParseTuple(args, ":newState")){
    return NULL;
  }
  state = PyObject_NEW(cBananaState, &cBananaStateType);
  state->currentList = NULL;
  return (PyObject*) state;
}

static void
cBananaState_dealloc(PyObject* self)
{
  struct listItem* thatList;
  struct listItem* thisList;
  thisList = ((cBananaState*)self) -> currentList;
  while (thisList) {
    thatList = thisList->lastList;
    Py_DECREF(thisList->thisList);
    free(thisList);
    thisList = thatList;
  }
  PyMem_DEL(self);
}

static PyTypeObject cBananaStateType = {
  PyObject_HEAD_INIT(NULL)
  0,
  "cBananaState",
  sizeof(cBananaState),
  0,
  cBananaState_dealloc, /* dealloc */
  0, /* print */
  0, /* getattr */
  0, /* setattr */
  0, /* compare */
  0, /* repr */
  0, /* as_number */
  0, /* as_sequence */
  0, /* as_mapping */
  0, /* hash */
};

const char *vocab[] = {
  // Filler so we start at 1 not 0
  "Dummy",  /* 0 */
  // Jelly Data Types
  "None",   /* 1 */
  "class",  /* 2 */
  "dereference", /* 3 */
  "reference",  /* 4 */
  "dictionary", /* 5 */
  "function",/* 6 */
  "instance",/* 7 */
  "list", /* 8 */
  "module",/* 9 */
  "persistent",/* 10 */
  "tuple",/* 11 */
  "unpersistable",/* 12 */
  // PB Data Types
  "copy",/* 13 */
  "cache",/* 14 */
  "cached",/* 15 */
  "remote",/* 16 */
  "local",/* 17 */
  "lcache",/* 18 */
  // PB Protocol messages
  "version",/* 19 */
  "login",/* 20 */
  "password",/* 21 */
  "challenge",/* 22 */
  "perspective",/* 23 */
  "inperspective",/* 24 */
  "cachemessage",/* 25 */
  "message",/* 26 */
  "answer",/* 27 */
  "error",/* 28 */
  "decref",/* 29 */
  "decache",/* 30 */
  "uncache"/* 31 */
};


const char *findVocab(int key)
{
  int offset = -key;
  if (offset < 0 || offset >= NUM_VOCABS) {
    return NULL;
  }
  return vocab[offset];
}

int b1282int(unsigned char *str, int begin, int end)
{
  int i = 0;
  int place = 0;
  int count;

  for (count=begin; count < end; count++) {
    unsigned char num = str[count];
    /*printf("b1282int: num = %d\n", num);*/
    if (place) {
      i = i +  (num << (7 * place)); // (num * (128 ^ place));
    } else {
      i = i + num;
    }
    place++;
  }
  return i;
}

#include <longintrepr.h>

static PyObject *encodeLong( PyObject *self, PyObject *args )
{
  unsigned char *str;
  int end;
  PyLongObject *longo;
  PyObject *retval;

  if(!PyArg_ParseTuple(args, "O!:encodeLong", &PyLong_Type, &longo))
    return NULL;

  end = abs(longo->ob_size)*2 + 1;
  str = PyMem_MALLOC(end);
  if(_PyLong_AsByteArray(longo, str, end, 1, 1))
    return NULL;

  retval = PyString_FromStringAndSize(str, end);
  PyMem_FREE(str);

  return retval;
}

/**************
** Real gotItem - invokes the python callback if required
**************/
int gotPythonItem(PyObject *object, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *result;
  PyObject *args;
  int ret;

  if (currentList) {
    PyList_Append(currentList->thisList, object);
    return 1;
  }
  else {
    args = PyTuple_New(1);
    ret = PyTuple_SetItem(args, 0, object);
    if (ret != 0) {
      //printf("Couldn't add item to tuple\n");
      return 0;
    }
    
    /*printf("Calling expressionReceived.\n");*/
    result = PyObject_CallObject(expressionReceived, args);
    if (!result) {
      /* printf("Call to expressionReceived failed.\n"); */
      /* printf( "ARGS: < %s >\n",  PyString_AsString( PyObject_Repr(args) ) ); */
      /* PyErr_Print(); */
      return 0;
    }
    return 1;
  }
}

/**************
** Helper function to add a float
**************/
int gotItemFloat(double value, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *object = PyFloat_FromDouble(value);
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add an int
**************/
int gotItemInt(int value, struct listItem *currentList, PyObject *expressionReceived)
{
  PyObject *object = PyInt_FromLong(value) ;
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add a string
**************/
int gotItemString(const char *value, int len, struct listItem *currentList, PyObject *expressionReceived)
{
  char* myValue;
  PyObject *object;
  myValue = malloc(len);
  memcpy(myValue, value, len);
  object = PyString_FromStringAndSize(myValue, len);
  return gotPythonItem(object, currentList, expressionReceived);
}

/**************
** Helper function to add a list
**************/
int gotItemList(PyObject *listObject, struct listItem *currentList, PyObject *expressionReceived)
{
  return gotPythonItem(listObject, currentList, expressionReceived);
}

/****************************************
** dataReceived
**
**
** Inputs:
**		newChunk - the new data to decode
**      expressionReceived - the python callable to invoke for each expression
**
** Output:
**  number of bytes processed
*****************************************/
static PyObject *dataReceived( PyObject *self, PyObject *args )
{

  PyObject *newChunk;		  // pointer to new chunk
  PyObject *expressionReceived;   // callback
  PyObject *stateobj;             // state object
  cBananaState *state;            // state
  unsigned char *buffer;          // buffer to work from
  int bufferSize;                 // size of the remaining portion
  int pos;
  int nBeginPos;
  int nEndPos;
  unsigned char typeByte;

  /* printf("Entering dataReceived!\n"); */

  if( !PyArg_ParseTuple( args, "OOO", &stateobj, &newChunk, &expressionReceived) )
    return NULL;

  if (!PyCallable_Check(expressionReceived) ) {
    // ERROR - must be a callback we can use
    //printf("ERROR - must be a callback we can use.\n");
    Py_INCREF(Py_None);
    return Py_None;
  }

  if (!PyString_Check(newChunk)) {
    printf("First arg was not a string\n");
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  if ((stateobj == NULL) || ((stateobj->ob_type) != (&cBananaStateType))) {
    printf("state object wasn't\n");
    Py_INCREF(Py_None);
    return Py_None;
  }
  state = (cBananaState*) stateobj;

  buffer = PyString_AS_STRING(newChunk);
  bufferSize = PyString_GET_SIZE(newChunk);

  pos = 0;
  while (pos < bufferSize) {
    /* printf("beginning at %d\n", pos); */
    nBeginPos = pos; /* beginning of number, also, 'consumed so far' */
    while (buffer[pos] < HIGH_BIT_SET) {
      //printf("Got character %c (%d) at %d\n", current[pos], current[pos], pos );
      pos++;
      if ((pos-nBeginPos) > 64) {
	//ERROR: "Security precaution: more than 64 bytes of prefix"
	printf("Security precaution: more than 64 bytes of prefix (this should raise an exception).\n");
	Py_INCREF(Py_None);
	return Py_None;
      } else if (pos == bufferSize) {
	/* boundary condition -- not enough bytes to finish the number */
	return PyInt_FromLong(nBeginPos);
      }
    }
    // extract the type byte
    nEndPos = pos;
    typeByte = buffer[pos];
    pos++;
    
    switch (typeByte) {
    case LIST: {
      int num = b1282int(buffer, nBeginPos, nEndPos);
      if (!state->currentList)	{
	state->currentList = (struct listItem *)malloc(sizeof(struct listItem)); 
	state->currentList->lastList = NULL;
	state->currentList->size = num;
	state->currentList->thisList = PyList_New(0);
      } else {
	struct listItem *newList = (struct listItem *) malloc(sizeof(struct listItem));
	newList->size = num;
	newList->thisList = PyList_New(0);
	newList->lastList = state->currentList;
	state->currentList = newList;
      }
      break;
    }
    case INT: {
      int num = b1282int(buffer, nBeginPos, nEndPos);
      if (!gotItemInt(num, state->currentList, expressionReceived)){
	return NULL;
      }
      break;
    }
    case NEG: {
      int num = -b1282int(buffer, nBeginPos, nEndPos);
      if (!gotItemInt(num, state->currentList, expressionReceived)){
	return NULL;
      }
      break;
    }
      
    case LONGINT: {
      PyObject *tmpo;
      int len = b1282int(buffer, nBeginPos, nEndPos);

      if (len > 640 * 1024) {
	PyErr_SetString(BananaError, "Security precaution: Length identifier  > 640K.\n");
	return NULL;
      }
      if (len > (bufferSize - pos) ) {
	/* boundary condition; not enough bytes to complete string */
	return PyInt_FromLong(nBeginPos);
      }
      tmpo = _PyLong_FromByteArray(buffer + pos, len, 1, 1);
      if (!gotPythonItem(tmpo, state->currentList, expressionReceived))
	return NULL;
      pos = pos + len;
      break;
    }
      
    case STRING: {
      int len = b1282int(buffer, nBeginPos, nEndPos);
      /* printf("String length: %d\n", len); */
      if (len > 640 * 1024) {
	PyErr_SetString(BananaError, "Security precaution: Length identifier  > 640K.\n");
	return NULL;
      }
      if (len > (bufferSize - pos) ) {
	/* boundary condition; not enough bytes to complete string */
	return PyInt_FromLong(nBeginPos);
      }
      if (!gotItemString(buffer+pos, len, state->currentList, expressionReceived)) {
	return NULL;
      }
      pos = pos + len;
      break;
    }
      
    case SYMBOL:
    case VOCAB: {
      // SYBMOL and VOCAB are the same??
      int num = b1282int(buffer, nBeginPos, nEndPos);
      const char *vocabString = findVocab(-num);
      if (vocabString == NULL) {
	PyErr_SetString(BananaError, "Vocab String not found.");
	return NULL;
      }
      if (!gotItemString(vocabString, strlen(vocabString), state->currentList, expressionReceived)) {
	return NULL;
      }
      break;
    }
      
    case FLOAT: {
      // TODO: optimize floats
      char* numBuffer;
      int numLen;
      double num;

      numLen = (nEndPos - nBeginPos) + 1;
      numBuffer = malloc(numLen);
      memcpy(numBuffer, buffer+nBeginPos, (nEndPos - nBeginPos));
      numBuffer[numLen-1] = 0;
      /* printf("float string: %s %d\n", numBuffer, numLen); */
      num = atof(numBuffer);
      free(numBuffer);
      /* printf("float number: %f\n", num); */
      gotItemFloat(num, state->currentList, expressionReceived);
      break;
    }
      
    default: {
      PyErr_SetString(BananaError, "Invalid Type Byte");
      return NULL;
    }
    }
    // If there is a list, check if it is full
    if (state->currentList) {
      /* printf("bufferSize: %d  listSize: %d\n", PyList_Size(state->currentList->thisList), state->currentList->size); */
      while (state->currentList && PyList_Size(state->currentList->thisList) == state->currentList->size) {
	PyObject *list;
	struct listItem *tmp;
	
	list = state->currentList->thisList;
	tmp = state->currentList->lastList;
	free(state->currentList);
	state->currentList = tmp;
	
	if (!gotItemList(list, state->currentList, expressionReceived)) {
	  return NULL;
	}
      }
    }
  }


  ////printf(full);
  return PyInt_FromLong(pos);

}

static int
int2b128(int val, unsigned char *outbuf)
{
  int len = 0;

  if(val < 0)
    return -1;

  do {
    outbuf[len++] = (val & 0x7F);
    val >>= 7;
  } while(val);

  return len;
}

static int
write_int(int val, PyObject *writeo)
{
  char intbuf[32];
  int itmp;
  PyObject *otmp;

  itmp = int2b128(val, intbuf);
  if(itmp < 0)
    return -1;

  otmp = PyEval_CallFunction(writeo, "(s#)", intbuf, itmp);

  if(!otmp)
    return -1;

  Py_DECREF(otmp);

  return 0;
}

static int
real_encode_stuff(PyObject *self, PyObject *obj, PyObject *writeo)
{
  PyObject *otmp;

  assert(obj);
  if(PyString_Check(obj))
    {
      otmp = PyObject_GetAttrString(self, "outgoingSymbols");
      if(!otmp)
	return -1;
      otmp = PyDict_GetItem(otmp, obj);
      if(otmp)
	{
	  int sid;
	  if(!PyInt_Check(otmp))
	    return -1;
	  sid = PyInt_AsLong(otmp);
	  if(sid < 0)
	    {
	      write_int(-sid, writeo);
	      otmp = PyEval_CallFunction(writeo, "(c)", VOCAB);
	      if(!otmp)
		return -1;
	      Py_DECREF(otmp);
	    }
	  else
	    {
	      write_int(sid, writeo);
	      otmp = PyEval_CallFunction(writeo, "(c)", SYMBOL);
	      if(!otmp)
		return -1;
	      Py_DECREF(otmp);
	    }
	}
      else
	{
	  write_int(PyString_GET_SIZE(obj), writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", STRING);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	  otmp = PyEval_CallFunction(writeo, "(O)", obj);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
    }
  else if(PySequence_Check(obj))
    {
      int psl = PySequence_Length(obj), i;

      write_int(psl, writeo);
      otmp = PyEval_CallFunction(writeo, "(c)", LIST);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
      for(i = 0; i < psl; i++)
	{
	  PyObject *subitem;

	  subitem = PySequence_GetItem(obj, i);

	  if(real_encode_stuff(self, subitem, writeo))
	    return -1;
	}
    }
  else if(PyLong_Check(obj))
    {
      int end;
      unsigned char *str;
      PyLongObject *longo = (PyLongObject *)obj;

      end = abs(longo->ob_size) * 2 + 1;
      write_int(end, writeo);

      str = alloca(end+1);
      if(_PyLong_AsByteArray(longo, str, end-1, 1, 1))
	return -1;
      str[0] = LONGINT;

      otmp = PyEval_CallFunction(writeo, "(s#)", str, end+1);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
    }
  else if(PyInt_Check(obj))
    {
      int val = PyInt_AsLong(obj);

      if(val >= 0)
	{
	  write_int(val, writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", INT);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
      else
	{
	  write_int(-val, writeo);
	  otmp = PyEval_CallFunction(writeo, "(c)", NEG);
	  if(!otmp)
	    return -1;
	  Py_DECREF(otmp);
	}
    }
  else if(PyFloat_Check(obj))
    {
      char fbuf[150];
      int n;
      PyFloat_AsReprString(fbuf, (PyFloatObject *)obj);
      n = strlen(fbuf);
      fbuf[n-1] = FLOAT;
      fbuf[n] = '\0';
      
      otmp = PyEval_CallFunction(writeo, "(s#)", fbuf, n+1);
      if(!otmp)
	return -1;
      Py_DECREF(otmp);
    }
  else
    return -1;

  return 0;
}

static PyObject *
encode_stuff(PyObject *unself, PyObject *args)
{
  PyObject *obj, *writeo, *self;

  if(!PyArg_ParseTuple(args, "OOO:encode_stuff", &self, &obj, &writeo))
    return NULL;

  if(real_encode_stuff(self, obj, writeo))
    return NULL;

  Py_INCREF(Py_None);
  return Py_None;
}

// module's initialization function for Python
EXTERN_API void initcBanana(void)
{
  PyObject *m, *d;
  cBananaStateType.ob_type = &PyType_Type;
  m = Py_InitModule("cBanana", cBanana__methods__);
  d = PyModule_GetDict(m);
  BananaError = PyErr_NewException("cBanana.error", NULL, NULL);
  PyDict_SetItemString(d, "error", BananaError);
}

From acapnotic at twistedmatrix.com  Wed Oct 31 23:15:52 2001
From: acapnotic at twistedmatrix.com (Kevin Turner)
Date: Wed, 31 Oct 2001 22:15:52 -0800
Subject: [Twisted-Python] Enterprise, do you copy?
Message-ID: <20011031221552.A1625@troglodyte.menefee>

...hello?  Hello?  Is anyone receiving this transmission?

I heard from Dad again today, and he was grumbling about developing in
this Oracle JDeveloper environment...  Five different languages to
develop "java server[servlet?] pages", he says.  Java, because that's
where Oracle seems to be building its tools these days; then there's
Oracle's query language; then HTML for the web interfaces; and
JavaScript, because there's something that needs to be done client-side,
and, uh, what was the fifth one again?  Then there's the hundreds of
functions the wizards create for simple tasks, spread across untold
numbers of files...

Ye gods, man.  Can anyone save this tragedy?  I can't give you a
complete list of requirements, but the general gist is this:  The
laboratory has researchers and machines, the researchers do experiments
and the machines spit out data.  Quite a bit of data.  This data comes
out in raw form, needs to be stored, processed, the results stored.
It'd be nice to keep track of which data actually belongs to what run of
whose experiment -- it seems like they lose track of that every now and
then.  Anyway, data (lots, but still in the fractional-terabyte range)
stored in Oracle, and, naturally, cross-referenced with other data, and,
well, there's a lot of that going around.

The researchers, who spend most of their time knocking the brains out of
mice instead of clicking on them, need relatively friendly interfaces to
the data from their experiments, and for shoveling it around between
these various phases of analysis.  They hope to add some internet soon,
so they can pool data from their distributed colleagues.


So, I gotta ask.  What's the status of twisted.enterprise these days?
With Oracle?  Webwidgets would help with the web bit, but they'd still
need to write javascript to keep the forms from being completely dumb?
Or can you convince them that there's another interface that's portable
and *drop-dead-easy* to maintain on the client machines, which he can
use as an alternative to web?  Is there an IDE which can make up for all
the shiny things which the Oracle tools have?

If I didn't make the situation sound scary enough before, here's the
truly horrifying detail: there's another faction among the computer-guys
in the lab which wants to use _exclusively_ Perl.

I don't think it's too late.  They're still making up their minds.  But
if there's another option, they've got to know soon, before they're
wholly consumed by the dark side.  And whatever it is, it's got to do a
damn _impressive_ job of selling itself, to overcome both that warm
fuzzy feeling imparted by the "Larry Ellison" brand, and the deap
zealotry of the Perl encampment.

May peace be with you,

 - Kevin

-- 
The moon is waxing gibbous, 99.9% illuminated, 14.5 days old.




