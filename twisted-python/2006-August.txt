From jamesbunton at fastmail.fm  Tue Aug  1 03:06:49 2006
From: jamesbunton at fastmail.fm (James Bunton)
Date: Tue, 1 Aug 2006 17:06:49 +1000
Subject: [Twisted-Python] How to tell when ReconnectingClientFactory gives up
Message-ID: <B9500AB3-411E-4388-B8BD-CCB917134E3F@fastmail.fm>

Hi,

Is there any way to tell when a ReconnectingClientFactory has stopped  
trying? I'm talking about due to connection failures, etc

As far as I can tell, in ReconnectingClientFactory.retry, if retries  
 > maxRetries, then the function exits with a message to the log.

I can't find a good way to trap this event. The only things I can  
think of are to either hook clientConnectionLost and  
clientConnectionFailed and count when we've hit maxRetries, then  
trigger whatever I want to do, or to patch ReconnectingClientFactory  
to do the same.

Anybody got any ideas?

---

James




From justind2 at ussonet.net  Tue Aug  1 13:09:17 2006
From: justind2 at ussonet.net (justind2 at ussonet.net)
Date: Tue, 01 Aug 2006 12:09:17 -0500
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor is
	already running?
Message-ID: <44CF8ABD.7040404@ussonet.net>

Here is a script I've made and am playing with to try to understand how 
things behave in Twisted. I'm using twistedsnmp but I think my problem 
here is my understanding of how to use the reactor (or lack there of).

I feel like I'm misunderstanding some fundamentals, but I may just be 
hard-headed.

I'm not even sure if this makes sense. I've noticed that unless 
reactor.callWhenRunning(return_def,df) is ran prior to calling 
reactor.run() the return_def will never be ran.

I'm not really sure how to phrase the question, because it may be the 
wrong one.. so here goes...

Is there a way to get the reactor to acknowledge a new "callWhenRunning" 
after the reactor.run()?


I've included my bad code and working code, the difference is in the 
"bad code" I launch a thread that tries every 5 seconds (after 
reactor.run()) to do what the "working code" does only once before.

Any help would be appreciated.


BAD CODE BELOW:

from twisted.internet import reactor
from twisted.internet import task
from twistedsnmp import snmpprotocol, agentproxy
from twisted.internet.defer import TimeoutError
import pprint
import logging
import thread
import time

logging.getLogger().setLevel(logging.INFO)

ips = 
['10.0.16.2','10.0.16.18','10.0.16.34','10.0.16.66','10.0.16.82','10.0.16.98','10.0.16.114','10.0.16.130']

devices = {}

logging.info('Building device dictionary')
for ip in ips:
    devices[ip] = {}
    devices[ip]['oids_to_poll'] = {}
    devices[ip]['oids_to_poll']['sysDescr'] = '.1.3.6.1.2.1.1.0'
    devices[ip]['oids_to_poll']['uptime'] = '.1.3.6.1.2.1.1.3.0'
logging.info('Device dictionary built')

   
def successful_response(result):
    logging.info(str(result))
    return result

def errored_response(err):
    if err.trap(TimeoutError):
        logging.error("timeout error")
        #### dont return the error because it will be handeled if you do
    else:
        logging.error("error" + str(err))
        return err

def return_def(df):
    return df


def process_devices():
    logging.info("proccess_devices thread has been launched")
    while True:
        time.sleep(5)
        for device in devices.keys():
            #### first build the proxy
            try:
                logging.info("building proxy for device:" + str(device))
                port = snmpprotocol.port()
                proxy = agentproxy.AgentProxy(device, 161, 
community='public',snmpVersion='v2',protocol=port.protocol,)
            except:
                logging.exception("exception occured while building proxy")
            else:
                ##### now that the proxy is buil send the request for 
the oids to poll
                if devices.has_key(device):
                    try:
                        oid_descriptions = 
devices[device]['oids_to_poll'].keys()
                    except:
                        pass
                    else:
                        try:
                            oids = []
                            for oid_description in oid_descriptions:
                                
oids.append(devices[device]['oids_to_poll'][oid_description])
                        except:
                            pass
                        else:
                            ##### you have built the list of oids to 
poll now build the deffered and return it
                            logging.info("building defferred for 
device:" + str(device))
                            df = proxy.get(oids, timeout=0.25, retryCount=3)
                            df.addCallback(successful_response)
                            df.addErrback(errored_response)
                            logging.info("launching callWhenRunning for 
device:" + str(device))
                            reactor.callWhenRunning(return_def,df)

thread.start_new(process_devices,())
logging.info("starting reactor")
reactor.run()



WORKING CODE (not necessarily good):

from twisted.internet import reactor
from twisted.internet import task
from twistedsnmp import snmpprotocol, agentproxy
from twisted.internet.defer import TimeoutError
import pprint
import logging
import time

logging.getLogger().setLevel(logging.INFO)

ips = 
['10.0.16.2','10.0.16.18','10.0.16.34','10.0.16.66','10.0.16.82','10.0.16.98','10.0.16.114','10.0.16.130']

devices = {}

logging.info('Building device dictionary')
for ip in ips:
    devices[ip] = {}
    devices[ip]['oids_to_poll'] = {}
    devices[ip]['oids_to_poll']['sysDescr'] = '.1.3.6.1.2.1.1.0'
    devices[ip]['oids_to_poll']['uptime'] = '.1.3.6.1.2.1.1.3.0'
logging.info('Device dictionary built')

   
def successful_response(result):
    logging.info(str(result))
    return result

def errored_response(err):
    if err.trap(TimeoutError):
        logging.error("timeout error")
        #### dont return the error because it will be handeled if you do
    else:
        logging.error("error" + str(err))
        return err

def return_def(df):
    return df


def process_devices():
    logging.info("proccess_devices thread has been launched")
        for device in devices.keys():
            #### first build the proxy
            try:
                logging.info("building proxy for device:" + str(device))
                port = snmpprotocol.port()
                proxy = agentproxy.AgentProxy(device, 161, 
community='public',snmpVersion='v2',protocol=port.protocol,)
            except:
                logging.exception("exception occured while building proxy")
            else:
                ##### now that the proxy is buil send the request for 
the oids to poll
                if devices.has_key(device):
                    try:
                        oid_descriptions = 
devices[device]['oids_to_poll'].keys()
                    except:
                        pass
                    else:
                        try:
                            oids = []
                            for oid_description in oid_descriptions:
                                
oids.append(devices[device]['oids_to_poll'][oid_description])
                        except:
                            pass
                        else:
                            ##### you have built the list of oids to 
poll now build the deffered and return it
                            logging.info("building defferred for 
device:" + str(device))
                            df = proxy.get(oids, timeout=0.25, retryCount=3)
                            df.addCallback(successful_response)
                            df.addErrback(errored_response)
                            logging.info("launching callWhenRunning for 
device:" + str(device))
                            reactor.callWhenRunning(return_def,df)

process_devices()
logging.info("starting reactor")
reactor.run()















From ian.parker at facilita.co.uk  Tue Aug  1 13:27:54 2006
From: ian.parker at facilita.co.uk (ian.parker at facilita.co.uk)
Date: Tue, 01 Aug 2006 19:27:54 +0200
Subject: [Twisted-Python] Restarting a reactor listener
Message-ID: <17510697.243751154453274537.JavaMail.servlet@kundenserver>

I have created an internet server that is started in a thread from a Python QT GUI.

I can call reactor.stop() and sucessfully get notified of shutdown and the run thread terminates, the TCP/IP listen port is closed.

When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0) a second time I find that things don't work correctly. e.g. TCP calls are accepted and my protocol.dataReceived() is called but then calling reactor.callInThread(self.blockingMethod, data) does nothing. Also calling stop() a second time does not stop the  running reactor thread or terminate the TCP listener.

I have tried numerous options, and have been careful to avoid any conflicts with the GUI threads. It appears that the reactor is not being restarted correctly after stop() and a second run().

What I need is to stop and re-start the listenTCP.  Is there a way to do this?

Thanks,
Ian



From exarkun at divmod.com  Tue Aug  1 13:44:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Aug 2006 13:44:23 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
Message-ID: <20060801174423.1717.42158796.divmod.quotient.11192@ohm>

On Tue, 01 Aug 2006 19:27:54 +0200, ian.parker at facilita.co.uk wrote:
>I have created an internet server that is started in a thread from a Python QT GUI.
>
>I can call reactor.stop() and sucessfully get notified of shutdown and the run thread terminates, the TCP/IP listen port is closed.
>
>When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0) a second time I find that things don't work correctly. e.g. TCP calls are accepted and my protocol.dataReceived() is called but then calling reactor.callInThread(self.blockingMethod, data) does nothing. Also calling stop() a second time does not stop the  running reactor thread or terminate the TCP listener.
>
>I have tried numerous options, and have been careful to avoid any conflicts with the GUI threads. It appears that the reactor is not being restarted correctly after stop() and a second run().
>
>What I need is to stop and re-start the listenTCP.  Is there a way to do this?

You need to implement this feature :)  It is not expected to work any
currently provided reactor.

More likely, though, you just shouldn't call reactor.stop() until you're
ready to exit completely.

Jean-Paul



From glyph at divmod.com  Tue Aug  1 14:49:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 14:49:10 -0400
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor
	is already running?
In-Reply-To: <44CF8ABD.7040404@ussonet.net>
Message-ID: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>

On Tue, 01 Aug 2006 12:09:17 -0500, "justind2 at ussonet.net" <justind2 at ussonet.net> wrote:
>Here is a script I've made and am playing with to try to understand how 
>things behave in Twisted. I'm using twistedsnmp but I think my problem here 
>is my understanding of how to use the reactor (or lack there of).

Yeah... I don't know anything about twistedsnmp (it's not actually done by twistedmatrix labs); but I can see a couple of problems.

>I feel like I'm misunderstanding some fundamentals, but I may just be hard- 
>headed.

Here are some fundamentals I think you might be missing:

 - Twisted is not thread safe.  Do not, e.g., call Deferred callbacks or create Deferreds in a thread, call them from methods like dataReceived or connectionLost.  (99% of your problem is here)
 - This goes for pretty much any Twisted-using code as well.  I'm not really sure, not being familiar with twistedsnmp, but I'd bet that AgentProxy is not designed for instantiation or initialization from a thread.
 - It looks like you want callFromThread, not callWhenRunning.
    - callWhenRunning: http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#twisted.internet.interfaces.IReactorCore.callWhenRunning
    - callFromThread: http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html#twisted.internet.interfaces.IReactorThreads.callFromThread
 - err.trap raises exceptions, so checking it in an 'if' is nonsensical.  Maybe you want err.check?
   - trap: http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.trap
   - check: http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.check
 - The return value of callWhenRunning is ignored; there's no sense to having return_def return a value.

Some stylistic stuff, too:

 - When posting examples to this mailing list, please reduce your example to a minimal runnable example
 - Messages posted here should also generally follow Twisted conventions, unless there is a specific need not to.  For example:
   - use twisted.python.log, not python's 'logging' module.
   - use reactor.callInThread and reactor.callFromThread, not Python's 'threading' or 'thread' modules.  These have defined interactions with the reactor, random other threads don't.

In summary: your "working" example works only by accident, and only sometimes.    I'd love to give you a simple answer, but you don't have a specific problem or misunderstanding; I think you've got entirely the wrong idea of how Twisted is running your code.

You probably want to back off from SNMP a little bit and familiarize yourself with more basic applications of the Twisted programming model before trying this again.  This tutorial might be a good place to get started:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html

Of course, the O'Reilly book is a pretty good source of documentation too :).



From glyph at divmod.com  Tue Aug  1 15:03:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 15:03:11 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <20060801174423.1717.42158796.divmod.quotient.11192@ohm>
Message-ID: <20060801190311.1717.683634178.divmod.quotient.11284@ohm>

On Tue, 1 Aug 2006 13:44:23 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Tue, 01 Aug 2006 19:27:54 +0200, ian.parker at facilita.co.uk wrote:
>>I have created an internet server that is started in a thread from a Python 
>>QT GUI.

Although Twisted's QT reactor is not terribly well supported since nobody on the Twisted team likes QT, but starting a reactor in a non-main thread and restarting it is not "not well supported", it is very explicitly broken :).

You should look at using the QT reactor, and run your Twisted code in the same thread as your GUI -- and possibly submitting some patches so we can finally get the last of the tests passing: see http://twistedmatrix.com/buildbot/

If you have the option of using a different UI toolkit, consider using GTK2; GTK seems to behave best out of all the toolkits when dealing with asynchronous I/O, and it is definitely a favorite of a sizeable portion of the Twisted team.

>>When I restart it (...)

As exarkun says, the reactor is not restartable.

There's a reason why nobody's bothered with this yet.  While a truly restartable reactor might be of real use in a few obscure situations (mostly in test code), applications which _appear_ to require it are often just mis-designed and should be fixed to run the reactor in the "normal" way.

For a previous discussion of this issue, see this ticket, which seems to be destined for rejection: http://twistedmatrix.com/trac/ticket/893



From duncan.mcgreggor at gmail.com  Tue Aug  1 15:25:37 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 01 Aug 2006 15:25:37 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
References: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
Message-ID: <44CFAAB1.8070403@gmail.com>

glyph at divmod.com wrote:

> - Messages posted here should also generally follow Twisted conventions, 
> unless there is a specific need not to.  For example:
>   - use twisted.python.log, not python's 'logging' module.

I stopped using t.p.log last year because of a common customer 
requirement for the software to support logging levels. After digging 
through the twisted archives on this topic, it appeared that there was a 
little disagreement on how to use t.p.log, some missing docs, and no way 
to prevent the logging of messages of a certain type.

Was I wrong in this assessment?

If I wasn't, I would actually be interested in fixing this problem with 
both 1) an agreed upon means of supporting log levels and 2) extensive 
documentation.

This might dovetail nicely with JP's comment of 05/31/05 in 
http://twistedmatrix.com/trac/ticket/989. And possibly some of the 
issues raised in http://twistedmatrix.com/trac/ticket/1069 .

Shall I open a ticket?

d



From justind2 at ussonet.net  Tue Aug  1 16:04:25 2006
From: justind2 at ussonet.net (justind2 at ussonet.net)
Date: Tue, 01 Aug 2006 15:04:25 -0500
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor
	is already running?
In-Reply-To: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
References: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
Message-ID: <44CFB3C9.5000206@ussonet.net>

Thank you very much for the response. Hopefully these pointers will help 
me tie the basics down in my mind. The threading seems to be where I'm 
tripping up the most.

glyph at divmod.com wrote:

> On Tue, 01 Aug 2006 12:09:17 -0500, "justind2 at ussonet.net" 
> <justind2 at ussonet.net> wrote:
>
>> Here is a script I've made and am playing with to try to understand 
>> how things behave in Twisted. I'm using twistedsnmp but I think my 
>> problem here is my understanding of how to use the reactor (or lack 
>> there of).
>
>
> Yeah... I don't know anything about twistedsnmp (it's not actually 
> done by twistedmatrix labs); but I can see a couple of problems.
>
>> I feel like I'm misunderstanding some fundamentals, but I may just be 
>> hard- headed.
>
>
> Here are some fundamentals I think you might be missing:
>
> - Twisted is not thread safe.  Do not, e.g., call Deferred callbacks 
> or create Deferreds in a thread, call them from methods like 
> dataReceived or connectionLost.  (99% of your problem is here)
> - This goes for pretty much any Twisted-using code as well.  I'm not 
> really sure, not being familiar with twistedsnmp, but I'd bet that 
> AgentProxy is not designed for instantiation or initialization from a 
> thread.
> - It looks like you want callFromThread, not callWhenRunning.
>    - callWhenRunning: 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#twisted.internet.interfaces.IReactorCore.callWhenRunning 
>
>    - callFromThread: 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html#twisted.internet.interfaces.IReactorThreads.callFromThread 
>
> - err.trap raises exceptions, so checking it in an 'if' is 
> nonsensical.  Maybe you want err.check?
>   - trap: 
> http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.trap 
>
>   - check: 
> http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.check 
>
> - The return value of callWhenRunning is ignored; there's no sense to 
> having return_def return a value.
>
> Some stylistic stuff, too:
>
> - When posting examples to this mailing list, please reduce your 
> example to a minimal runnable example
> - Messages posted here should also generally follow Twisted 
> conventions, unless there is a specific need not to.  For example:
>   - use twisted.python.log, not python's 'logging' module.
>   - use reactor.callInThread and reactor.callFromThread, not Python's 
> 'threading' or 'thread' modules.  These have defined interactions with 
> the reactor, random other threads don't.
>
> In summary: your "working" example works only by accident, and only 
> sometimes.    I'd love to give you a simple answer, but you don't have 
> a specific problem or misunderstanding; I think you've got entirely 
> the wrong idea of how Twisted is running your code.
>
> You probably want to back off from SNMP a little bit and familiarize 
> yourself with more basic applications of the Twisted programming model 
> before trying this again.  This tutorial might be a good place to get 
> started:
>
> http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html 
>
>
> Of course, the O'Reilly book is a pretty good source of documentation 
> too :).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From glyph at divmod.com  Tue Aug  1 17:19:43 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 17:19:43 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <44CFAAB1.8070403@gmail.com>
Message-ID: <20060801211943.1717.1193299259.divmod.quotient.11418@ohm>

On Tue, 01 Aug 2006 15:25:37 -0400, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>glyph at divmod.com wrote:
>>- Messages posted here should also generally follow Twisted conventions, 
>>unless there is a specific need not to.  For example:
>>   - use twisted.python.log, not python's 'logging' module.

My point here is that you should use the 'log' module *for examples sent to this list*, not necessarily in all software -- unless, of course, you're reporting something like a buggy interaction with the 'logging' module :)

>I stopped using t.p.log last year because of a common customer requirement 
>for the software to support logging levels. After digging through the 
>twisted archives on this topic, it appeared that there was a little 
>disagreement on how to use t.p.log, some missing docs, and no way to prevent 
>the logging of messages of a certain type.

>Was I wrong in this assessment?

Not necessarily.  I think that logging levels are a fundamentally wrong way of organizing log information, but I admit that's a personal opinion; I don't have very sophisticated uses for textual log files.  TPL isn't particularly great either, mind you, but it is unlikely that TPL will ever support half of the features that the logging module does.

TPL's documentation is certainly _terrible_, and there are a bunch of outstanding tickets related to it... it's nowhere near as well-maintained as the logging module.

>If I wasn't, I would actually be interested in fixing this problem with both 
>1) an agreed upon means of supporting log levels and 2) extensive 
>documentation.

Logging levels are not among the things that I think should be done to the log module :).  Extensive documentation sure would be nice though.

>This might dovetail nicely with JP's comment of 05/31/05 in 
>http://twistedmatrix.com/trac/ticket/989. And possibly some of the issues 
>raised in http://twistedmatrix.com/trac/ticket/1069 .

As long as we're talking about tickets, you can read more of my ranting about the stdlib logging module on http://twistedmatrix.com/trac/ticket/307

>Shall I open a ticket?

Not for logging levels.  But for any of the other stuff you mentioned, sure.



From glyph at divmod.com  Tue Aug  1 18:36:29 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 18:36:29 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801211943.1717.1193299259.divmod.quotient.11418@ohm>
Message-ID: <20060801223629.1717.1212357632.divmod.quotient.11494@ohm>

On Tue, 1 Aug 2006 17:19:43 -0400, glyph at divmod.com wrote:

>>Was I wrong in this assessment?

>Not necessarily.

Hmm, my reply wasn't terribly clear.  I was really saying a few different things, all jumbled together.  First of all, just regarding your decision to use the logging module:

You made the correct decision.  If you need the features the logging module provides, you are best off using it, rather than modifying Twisted to do what it does.  I think the logging module serves its intended audience well, although I am not in its intended audience.

This is _especially_ true if your clients are requesting advanced features like log levels, verbosity selection, and a console log viewer.

what Twisted's log module can currently do:

You *CAN* include a 'level' and a 'debug flag' in Twisted log messages if you want.  Feel free to pass them along:

  log.msg("hi there", level=7, debug="banana")

but that's only because you can pass any other data you like as well.  This will be silently dropped by the default log observer, but you could write a different log observer (even one that invoked the 'logging' module ^_-) which honored your custom log variables.

Now, a bit more about my personal design choices regarding logging:

Logs are stored mainly to be analyzed: without analysis, log messages are just debug spew.  Sadly, despite the fact that it can handle arbitrary events and NOT just text messages, that's most of what the Twisted log module is currently used for: events which you can grep for in a text file if something goes wrong.  That's not really what I want to use it for though.

My preferred method of implementing log analysis is showcased in Mantissa; Allen Short wrote a pretty nice statistics-gathering system which uses the 'log' module to *collect* the statistics, but then stores them in a database, and then provides a DB-backed API for accessing specific statistics nor , not a generic "log analysis" tool which works on flat text files.

  (You can see that here: http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/stats.py )

Rather than having a restricted set of data like "level" and "debug", "log events" in Twisted are really just arbitrary events which can contain equally arbitrary data.  The "_observeStatEvent" method in that module makes use of this feature.

My long-term vision for log events is for every log message in Twisted to eventually go from looking like this:

  log.msg("did some stuff %s %r" % (a, b))

to looking like this:

  log.msg(interface=IDidSomeStuff,
          format="did some stuff %(stuff)s %(morestuff)r",
          stuff=stuff,
          morestuff=morestuff))

Like this, textual observers have a formatting argument that they can use to log the debug message to a file for debugging, and and structured observers which understand the IDidSomeStuff log interface can capture this message and do something more specific with the 'stuff' and 'morestuff' attributes (which are presumably objects that can be manipulated in some other way than simple stringification).

However, logging is a low-priority area of development for Twisted right now, and while  there seems to be at least _rough_ consensus around the features I'm proposing here, the specifics of implementation have been bogged down in details.

There is a lot of grumbling about the current interface.  In particular various people think that formatting should be specified differently, or that the default logfile format needs to be changed to be structured, or that the **kw-dict-as-log-object API is unnecessary micro-optimization and we should use actual providers of the declared interface, or... well, it should suffice to say there are a lot of disagreements.  Nobody wants to commit extensively to an interface which is going to be changed, and hence, nobody wants to do the work to change the existing log messages -- or, even if someone volunteered to do that, nobody wants to be responsible for the _future_ work to make the existing log messages work some _other_ new way.

Despite the fact that we all know it's sub-optimal, everyone can agree that the current 'log.msg as persistent debug print' usage will continue to be supported into the indefinite future, so that's the one that gets used.



From exarkun at divmod.com  Tue Aug  1 23:36:43 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Aug 2006 23:36:43 -0400
Subject: [Twisted-Python] Twisted website
In-Reply-To: 0
Message-ID: <20060802033643.1717.258362304.divmod.quotient.11761@ohm>

The trac server has been modified to run under a somewhat different
configuration.  Please let me know if you notice any irregularities
on the website.

Jean-Paul



From exarkun at divmod.com  Wed Aug  2 09:52:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Aug 2006 09:52:09 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801223629.1717.1212357632.divmod.quotient.11494@ohm>
Message-ID: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>

On Tue, 1 Aug 2006 18:36:29 -0400, glyph at divmod.com wrote:
>
>My long-term vision for log events is for every log message in Twisted to 
>eventually go from looking like this:
>
>  log.msg("did some stuff %s %r" % (a, b))
>
>to looking like this:
>
>  log.msg(interface=IDidSomeStuff,
>          format="did some stuff %(stuff)s %(morestuff)r",
>          stuff=stuff,
>          morestuff=morestuff))
>

There's nothing preventing anyone from using twisted.python.log like this
right now.  The implementation could be adjusted to provide better
performance for this case but that's hardly a blocking issue preventing
anyone from doing creative things with logging.

As you mentioned, Allen has effectively used it this way.

I think the real reason we don't see this usage more is that it is pretty
advanced and most people *do* just want debug spew.  You have to get quite
a ways into the development of a library or application before you start
worrying about the things this functionality can help you with.

Oh, and I still think the format argument is redundant and stupid :)

Jean-Paul



From eprparadocs at gmail.com  Wed Aug  2 10:16:39 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 02 Aug 2006 10:16:39 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>
References: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>
Message-ID: <44D0B3C7.2080908@gmail.com>

Jean-Paul Calderone wrote:
> On Tue, 1 Aug 2006 18:36:29 -0400, glyph at divmod.com wrote:
>>
>> My long-term vision for log events is for every log message in Twisted 
>> to eventually go from looking like this:
>>
>>  log.msg("did some stuff %s %r" % (a, b))
>>
>> to looking like this:
>>
>>  log.msg(interface=IDidSomeStuff,
>>          format="did some stuff %(stuff)s %(morestuff)r",
>>          stuff=stuff,
>>          morestuff=morestuff))
>>
> 
> There's nothing preventing anyone from using twisted.python.log like this
> right now.  The implementation could be adjusted to provide better
> performance for this case but that's hardly a blocking issue preventing
> anyone from doing creative things with logging.
> 
> As you mentioned, Allen has effectively used it this way.
> 
> I think the real reason we don't see this usage more is that it is pretty
> advanced and most people *do* just want debug spew.  You have to get quite
> a ways into the development of a library or application before you start
> worrying about the things this functionality can help you with.
> 
> Oh, and I still think the format argument is redundant and stupid :)
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I have a few questions about all this particularly since my application 
requires at least two different logs in the normal case and three in the 
debugging case (after all I don't want to mix debugging information with 
all the rest of the logs).

Why is the format "redundant and stupid"? Is it available someplace 
else? If so, I would love to know so that I could remove it from my usage.

In regards to 'interface' above is that how I would switch between 
different loggers?

Finally if I do all this why do I need t.p.l at all? I might as well 
just implement log.msg() myself. I could keep t.p.l for the debugging 
case and use my specialized code for the other two. Am I missing something?


Peace,
Chaz.





From thomas at apestaart.org  Wed Aug  2 16:07:17 2006
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Wed, 02 Aug 2006 22:07:17 +0200
Subject: [Twisted-Python] [OT] Job offer: Flumotion
Message-ID: <1154549237.18970.105.camel@otto.amantes>

Hey everyone,

Fluendo is looking for a developer to join their team of streaming server
developers and expand the video-on-demand functionality of Flumotion.
Tasks include integration of the functionality in the streaming server core,
the cluster platform, and providing a web-based frontend for managing
and transcoding customer's VOD files.

Experience with at least one of multimedia, Linux/UNIX, Python, Twisted,
Web service programming is a definite plus.

Applicants are expected to be willing to relocate to Barcelona, Spain.  Fluendo
offers a competitive salary, private health care, and an attractive bonus
system based on performance of the developed platform.

For more information, see http://www.fluendo.com/
Interested developers can send their application and resum? to me at
thomas <at> fluendo <dot> com

Thanks,
Thomas





From tvachon at gmail.com  Wed Aug  2 19:12:49 2006
From: tvachon at gmail.com (Travis Vachon)
Date: Wed, 2 Aug 2006 16:12:49 -0700
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
References: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
Message-ID: <d9d9edd40608021612k2b1400a2x5054f546c738821f@mail.gmail.com>

Hi Ian

I ran into this just recently, but am not entirely certain I found the best
solution. I needed to be able to switch the port the reactor was listening
on without restarting the reactor. Here's how I did it:

     def startListener(self, port, interface="127.0.0.1"):

        self.iListeningPort = reactor.listenTCP(
            port,
            self.factory,
            interface=interface
            )
    def restartListener(self, port, interface="127.0.0.1"):

        self.iListeningPort.stopListening()
        self.startListener(port, interface)


I'm not sure if doing this will have any unintended side-effects, but so far
it seems to have done the trick. If someone else on the list could confirm
this does what I think it does (and what Ian is looking for) that would be
great.

Best,

Travis

On 8/1/06, ian.parker at facilita.co.uk <ian.parker at facilita.co.uk> wrote:
>
> I have created an internet server that is started in a thread from a
> Python QT GUI.
>
> I can call reactor.stop() and sucessfully get notified of shutdown and the
> run thread terminates, the TCP/IP listen port is closed.
>
> When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0)
> a second time I find that things don't work correctly. e.g. TCP calls are
> accepted and my protocol.dataReceived() is called but then calling
> reactor.callInThread(self.blockingMethod, data) does nothing. Also calling
> stop() a second time does not stop the  running reactor thread or terminate
> the TCP listener.
>
> I have tried numerous options, and have been careful to avoid any
> conflicts with the GUI threads. It appears that the reactor is not being
> restarted correctly after stop() and a second run().
>
> What I need is to stop and re-start the listenTCP.  Is there a way to do
> this?
>
> Thanks,
> Ian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060802/ae92542d/attachment.htm 

From exarkun at divmod.com  Wed Aug  2 20:23:14 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Aug 2006 20:23:14 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <d9d9edd40608021612k2b1400a2x5054f546c738821f@mail.gmail.com>
Message-ID: <20060803002314.1717.1557365364.divmod.quotient.12651@ohm>

On Wed, 2 Aug 2006 16:12:49 -0700, Travis Vachon <tvachon at gmail.com> wrote:
>Hi Ian
>
>I ran into this just recently, but am not entirely certain I found the best
>solution. I needed to be able to switch the port the reactor was listening
>on without restarting the reactor. Here's how I did it:
>
>     def startListener(self, port, interface="127.0.0.1"):
>
>        self.iListeningPort = reactor.listenTCP(
>            port,
>            self.factory,
>            interface=interface
>            )
>    def restartListener(self, port, interface="127.0.0.1"):
>
>        self.iListeningPort.stopListening()
>        self.startListener(port, interface)
>
>
>I'm not sure if doing this will have any unintended side-effects, but so far
>it seems to have done the trick. If someone else on the list could confirm
>this does what I think it does (and what Ian is looking for) that would be
>great.
>
>Best,
>
>Travis
>

This is pretty much exactly correct.  The only thing which *might* be an
issue is that stopListening is not guaranteed to succeed immediately.  *If*
you are relying on the old port number to be available immediately after
restartListener returns, you might be surprised.  You can address this by
returning the Deferred which is returned by stopListening from restartListener
so that the caller will receive notification when the old port number becomes
free.

In practice, and for the typical use cases, this probably won't often be a
problem.

Jean-Paul



From forsberg at cendio.se  Thu Aug  3 05:36:42 2006
From: forsberg at cendio.se (Erik Forsberg)
Date: Thu, 03 Aug 2006 11:36:42 +0200
Subject: [Twisted-Python] Writing benchmark applications with twisted - any
	examples?
Message-ID: <uohd0uyxcl.fsf@impertigo.lkpg.cendio.se>

Hi!

I'm thinking about writing a benchmarking application using
twisted. It needs to connect to a server via xmlrpc, and I'd like to
simulate multiple clients connecting at the same time, so I need some
concurrency. Each request needs to be unique (different usernames). 

Are there any examples of a twisted application that does this kind of
thing? I guess a http benchmark could serve as a good example, if such
a thing exists.

Thanks,
\EF
-- 
Erik Forsberg                OpenSource-based Thin Client Technology
Systems Analyst/Developer    Phone: +46-13-21 46 00    
Cendio AB    	             Web: http://www.cendio.com
		             





From meng.yan at gmail.com  Thu Aug  3 06:03:35 2006
From: meng.yan at gmail.com (Mike Meng)
Date: Thu, 3 Aug 2006 18:03:35 +0800
Subject: [Twisted-Python] Problem in the example code of Twisted Network
	Programming Essentials
Message-ID: <88aa66fa0608030303u413021c4j7bae6f468dfe607e@mail.gmail.com>

Hi all,
     I'm learning Twisted by reading Abe Fettig's "Twisted Networking
Programming Essentials". I tried the example 2-6 (dataforward.py) but the
program hung after printing 'Connected to ...'. I don't know  Twisted enough
to figure out where the problem is. Will anybody tell me why? I paste the
code here:

--------------------------------------------------------------
from twisted.internet import stdio, reactor, protocol
from twisted.protocols import basic
import re

class DataForwardingProtocol(protocol.Protocol):
    def __init__(self):
        self.output = None
        self.normalizeNewlines = False

    def dataReceived(self, data):
        if self.normalizeNewlines:
            data = re.sub(r"(\r\n|\n)", "\r\n", data)
        if self.output:
            self.output.write(data)

class StdioProxyProtocol(DataForwardingProtocol):
    def connectionMade(self):
        inputForwarder = DataForwardingProtocol()
        inputForwarder.output = self.transport
        inputForwarder.normalizeNewlines = True
        stdioWrapper = stdio.StandardIO(inputForwarder)
        self.output = stdioWrapper
        print "Connected to server.  Press ctrl-C to close connection."

class StdioProxyFactory(protocol.ClientFactory):
    protocol = StdioProxyProtocol

    def clientConnectionLost(self, transport, reason):
        reactor.stop()

    def clientConnectionFailed(self, transport, reason):
        print reason.getErrorMessage()
        reactor.stop()

if __name__ == '__main__':
    import sys
    if not len(sys.argv) == 3:
        print "Usage: %s host port" % __file__
        sys.exit(1)

    reactor.connectTCP(sys.argv[1], int(sys.argv[2]), StdioProxyFactory())
    reactor.run()
-----------------------------------------------------------------------

   Thanks in advance.

   Mike
Aug. 3, 2006
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060803/4f94b707/attachment.htm 

From exarkun at divmod.com  Thu Aug  3 22:21:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 3 Aug 2006 22:21:55 -0400
Subject: [Twisted-Python] Twisted website
In-Reply-To: <20060802033643.1717.258362304.divmod.quotient.11761@ohm>
Message-ID: <20060804022155.1717.602250799.divmod.quotient.13750@ohm>

On Tue, 1 Aug 2006 23:36:43 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>The trac server has been modified to run under a somewhat different
>configuration.  Please let me know if you notice any irregularities
>on the website.

The IRC and mailing list notifications for ticket creations and changes
were offline until tonight.  I believe they are working correctly again,
but please let me know if you notice any (new) problems with either.

Jean-Paul



From manlio_perillo at libero.it  Fri Aug  4 16:09:16 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 22:09:16 +0200
Subject: [Twisted-Python] problems with tracebacks
Message-ID: <44D3A96C.1020604@libero.it>

This problem seems to happen from time in time.

Traceback are not printed.

Now I'm running trial on a test case and I got:

[...]
test.test_mail.TestMail.test_email_plain ... [OK]
test.test_mail.TestMail.test_sendmail_html ... [ERROR]
test.test_mail.TestMail.test_sendmail_text ... [ERROR]

===============================================================================
[ERROR]: test.test_mail.TestMail.test_sendmail_html

Failure: exceptions.IndexError: list index out of range
===============================================================================
[ERROR]: test.test_mail.TestMail.test_sendmail_text

Failure: twisted.internet.defer.TimeoutError: <test.test_mail.TestMail
testMetho
d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
-------------------------------------------------------------------------------
Ran 4 tests in 3.078s

FAILED (errors=2, successes=1)


And the log file:
[...]

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_email_plain <--

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_sendmail_html <--

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_sendmail_text <--

2006/08/04 21:59 ora solare Europa occidentale [-] Main loop terminated.
2006/08/04 21:59 ora solare Europa occidentale [-] Main loop terminated.



Unfortunately every time I got this problem I'm unable to write a small
reproducible code.
And every time the problem is caused by a simple bug in the code.

P.S
Why I got the "Main loop terminated" two times?



Thanks and regards  Manlio Perillo



From radix at twistedmatrix.com  Fri Aug  4 16:41:21 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 4 Aug 2006 16:41:21 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3A96C.1020604@libero.it>
References: <44D3A96C.1020604@libero.it>
Message-ID: <60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>

On 8/4/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> This problem seems to happen from time in time.
>
> Traceback are not printed.
>
> Now I'm running trial on a test case and I got:
>
> [...]
> test.test_mail.TestMail.test_email_plain ... [OK]
> test.test_mail.TestMail.test_sendmail_html ... [ERROR]
> test.test_mail.TestMail.test_sendmail_text ... [ERROR]
>
>
> ===============================================================================
> [ERROR]: test.test_mail.TestMail.test_sendmail_html
>
> Failure: exceptions.IndexError: list index out of range
>
> ===============================================================================
> [ERROR]: test.test_mail.TestMail.test_sendmail_text
>
> Failure: twisted.internet.defer.TimeoutError: <test.test_mail.TestMail
> testMetho
> d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
>
> -------------------------------------------------------------------------------
> Ran 4 tests in 3.078s
>
> FAILED (errors=2, successes=1)



Unfortunately every time I got this problem I'm unable to write a small
> reproducible code.
> And every time the problem is caused by a simple bug in the code.



What are your test cases subclassing? What version of Twisted are you using?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060804/010bacae/attachment.htm 

From manlio_perillo at libero.it  Fri Aug  4 17:16:00 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 23:16:00 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
References: <44D3A96C.1020604@libero.it>
	<60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
Message-ID: <44D3B910.9080507@libero.it>

Christopher Armstrong ha scritto:
> On 8/4/06, *Manlio Perillo* <manlio_perillo at libero.it
> <mailto:manlio_perillo at libero.it>> wrote:
> 
>     This problem seems to happen from time in time.
> 
>     Traceback are not printed.
> 
>     Now I'm running trial on a test case and I got:
> 
>     [...]
>     test.test_mail.TestMail.test_email_plain ... [OK]
>     test.test_mail.TestMail.test_sendmail_html ... [ERROR]
>     test.test_mail.TestMail.test_sendmail_text ... [ERROR]
> 
>     ===============================================================================
>     [ERROR]: test.test_mail.TestMail.test_sendmail_html
> 
>     Failure: exceptions.IndexError: list index out of range
>     ===============================================================================
>     [ERROR]: test.test_mail.TestMail.test_sendmail_text
> 
>     Failure: twisted.internet.defer.TimeoutError : <test.test_mail.TestMail
>     testMetho
>     d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
>     -------------------------------------------------------------------------------
>     Ran 4 tests in 3.078s
> 
>     FAILED (errors=2, successes=1)
> 
>  
> 
>     Unfortunately every time I got this problem I'm unable to write a small
>     reproducible code.
>     And every time the problem is caused by a simple bug in the code.
> 
> 
> 
> What are your test cases subclassing? What version of Twisted are you using?
>  



I use this simple test case:

class TestMail(unittest.TestCase):
    """Test sendmail function

    XXX TODO: do not use a real mail server!
              see twisted.mail.test.test_mail
    """

    timeout = 10

    def tearDownClass(self):
        # XXX TODO tearDown the resolver
        pass

    def test_senmail(self):
        text = u"Test"

        msg = mail.MIMEText(text)
        # ...

        mail.sendmail(msg)



The sendmail function is:

def sendmail(email):
    """Send an email message.
    """

    def gotMX(mx):
        return smtp.sendmail(mx, from_, [to], msg)


    try:
        # some things that can fail
        # (and *do* fail: do I just got another email package bug?)
	# ...

        msg = flatten(email)
    except Exception, reason:
        return defer.fail(reason)

    mxc = getMX()
    return mxc.getMX(host).addCallback(lambda mx: gotMX(str(mx.name)))



The problem seems to be with the try statement.
When I try to print or log.err the exception, I don't get the full
traceback.



Thanks and regards  Manlio Perillo



From manlio_perillo at libero.it  Fri Aug  4 17:29:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 23:29:59 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3B910.9080507@libero.it>
References: <44D3A96C.1020604@libero.it>	<60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
	<44D3B910.9080507@libero.it>
Message-ID: <44D3BC57.7090405@libero.it>

Manlio Perillo ha scritto:
> Christopher Armstrong ha scritto:
>> On 8/4/06, *Manlio Perillo* <manlio_perillo at libero.it
>> <mailto:manlio_perillo at libero.it>> wrote:

Sorry, I forgot to say that I'm using Windows XP SP2 and Twisted 2.4.0.


Regards  Manlio Perillo



From exarkun at divmod.com  Fri Aug  4 17:55:33 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 4 Aug 2006 17:55:33 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3B910.9080507@libero.it>
Message-ID: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>

On Fri, 04 Aug 2006 23:16:00 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
>        msg = flatten(email)
>    except Exception, reason:
>        return defer.fail(reason)
>

Here you create a Deferred with a Failure with no traceback associated
with it.  Try returning "defer.fail()" instead.

Jean-Paul



From keith.cheung at lkmachinery.com.hk  Fri Aug  4 23:44:44 2006
From: keith.cheung at lkmachinery.com.hk (=?big5?B?S2VpdGggQ2hldW5nICixabDqqH0p?=)
Date: Sat, 5 Aug 2006 11:44:44 +0800
Subject: [Twisted-Python] Help implement protocol
Message-ID: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>

Hi all,

I want to implement some handshake protocol, say..

1. Client:	WhatDate
2. Server: 	5Aug
3. Client:	WhatYear
4. Server:	2006
5. Client:	WhatTime
6. Server:	1005

So, for the client:-  (pseudo code)
	def connectionMade():
		send "WhatDate"
		state = askingForDate
	def lineReceived(data):
		switch state:
			askingForDate:
				date = data
				send "WhatYear"
				state = askingForYear
				break
			askingForYear:
				year = data
				send = "WhatTime"
				state = askingForTime
				break
			askingForTime:
				time = data
				state = initialState
				disconnect

The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?




From manlio_perillo at libero.it  Sat Aug  5 12:09:54 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 05 Aug 2006 18:09:54 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
References: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
Message-ID: <44D4C2D2.3060603@libero.it>

Jean-Paul Calderone ha scritto:
> On Fri, 04 Aug 2006 23:16:00 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>>
>>        msg = flatten(email)
>>    except Exception, reason:
>>        return defer.fail(reason)
>>
> 
> Here you create a Deferred with a Failure with no traceback associated
> with it.  Try returning "defer.fail()" instead.
> 

Ok, thanks.
But this means that I cannot use defer.fail to report an exception directly.

As an example

if a < 0:
  return defer.fail(RuntimeError("must be non negative"))


does not print a traceback.



Regards  Manlio Perillo



From exarkun at twistedmatrix.com  Sun Aug  6 18:03:37 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Aug 2006 22:03:37 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1154901817.28.847357642@twistedmatrix.com

Bug summary
______________________
Summary for 2006-07-30 through 2006-08-06
Bugs opened: 16    Bugs closed: 8  Total open bugs: 691 (+8)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -4          |Conch:  +1             
|Enhancement:  +0  |High:     +4          |Core:   +4             
|Task:         +3  |Normal:   +8          |Mail:   +2             
                                          |Trial:  -1             
                                          |Web:    -1             
                                          |Web2:   +2             
                                          |Words:  +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1986] new version of trac uses incompatible ticket change notification api (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1986

[#1987] IRC bot not reporting new tickets (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1987

                    ===== High =====
[#1973] No IPathImportMapper adapter for imp.NullImporter (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1973

[#1976] twisted.internet.ssl.Certificate.peerFromTransport can return invalid Certificates (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1976

[#1977] unexpected search command breaks imap search (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1977

[#1978] fetch [message number] body[1] processed incorrectly for non-multipart messages (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1978

[#1979] FileSaver replaces LF with CRLF (opened by agreif)
    defect          web2       http://twistedmatrix.com/trac/ticket/1979

[#1983] Rename 'tlsstarted' to something that isn't a lie, and use more global constants for magic strings (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/1983

                    ===== Normal =====
[#1972] Python 2.5 warnings mangle output from child processes in test (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/1972

[#1974] Make A Persistent Logging Multi-Login Chat Presence Server (opened by exarkun)
    task            words      http://twistedmatrix.com/trac/ticket/1974

[#1975] connectSSH utility method / function for connecting places with conch (opened by glyph)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1975

[#1980] twisted.web2.FileSaver is broken (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1980

[#1981] twisted.python.logfile cowardly, silently and wrongly refuses to rotate logs if it can't write to the directory (opened by jerub)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1981

[#1982] twisted.python.log.DefaultObserver ignores `msg' argument of event dictionary (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1982

[#1984] Microdom drops the first character in an "extremely lenient" document (opened by radix)
    defect          core       http://twistedmatrix.com/trac/ticket/1984

[#1985] AMP command raises BadLocalReturn despite setting requiresAnswer = False (opened by rwall)
    defect          core       http://twistedmatrix.com/trac/ticket/1985



Closed Bugs
______________________
                    ===== Highest =====
[#1963] getPassword unit test incorrectly uses popen3() (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1963

[#469 ] twisted/web/xmlrpc support for <nil/> types. (opened by virus, closed by exarkun, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/469

[#1965] AMP "LiveFire" unit test setup contains race condition (opened by exarkun, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1965

[#1646] trial should support color output on win32 as well (opened by glyph, closed by jml, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1646

[#1987] IRC bot not reporting new tickets (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1987

[#1986] new version of trac uses incompatible ticket change notification api (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1986

                    ===== High =====
[#1969] Give moshez commit privileges (opened by jml, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1969

[#1433] Uninstalling tksupport is not working (opened by toledo, closed by exarkun, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1433





From wgwigw at gmail.com  Mon Aug  7 03:05:51 2006
From: wgwigw at gmail.com (wang wei)
Date: Mon, 7 Aug 2006 15:05:51 +0800
Subject: [Twisted-Python] observer patter in twisted?
Message-ID: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>

hi, I want implement such situation:
a client detected a message change, then it notify all the servers that
registed this message arrived.  Is observer patter already implemented in
Twisted?
BTW, in Twisted, Is a serverFactory instance  one thread? thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060807/7edde97e/attachment.htm 

From jacob at internet24.de  Mon Aug  7 05:16:37 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Mon, 07 Aug 2006 11:16:37 +0200
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <1154942197.9864.9.camel@localhost.localdomain>

Maybe you want to take a look at the FTPClientBasic class
in
http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/ftp.py .

There the author basically uses a queue of actions (=hand shakes) to
be run, associating response lines to commands, and returning
the results via deferreds....

On Sat, 2006-08-05 at 11:44 +0800, Keith Cheung (???) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060807/02235788/attachment.pgp 

From andrew-twisted at puzzling.org  Mon Aug  7 06:28:36 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Aug 2006 20:28:36 +1000
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <20060807102836.GA24537@steerpike.home.puzzling.org>

On Sat, Aug 05, 2006 at 11:44:44AM +0800, Keith Cheung (???) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?

Twisted code often uses dynamic method dispatch to methods with prefixed names
like this:

    def connectionMade(self):
        self.sendLine('WhatDate')
        self.state = 'askingForDate'

    def lineReceived(self, line):
        handler = getattr(self, 'state_' + self.state)
        handler(line)

    def state_askingForDate(self, line):
        self.date = line
        self.sendLine('WhatYear')
        self.state = 'askingForYear'

    ...

-Andrew.




From gah at research.att.com  Tue Aug  8 12:59:00 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Tue, 8 Aug 2006 12:59:00 -0400
Subject: [Twisted-Python] Process completion not detected on HP-UX (#608)
In-Reply-To: <20060731203630.1717.666824456.divmod.quotient.9688@ohm>
References: <20060731203630.1717.666824456.divmod.quotient.9688@ohm>
Message-ID: <010B4AF8-C58E-49F0-94B1-E9DA7874ECAA@research.att.com>

After much staring at the Twisted code and some experimenting, I  
finally discovered the nature of the problem.

The semantics of the select() call on HP-UX with respect to pipes is  
a bit different than the other OS's I have access to (i.e. Linux,  
Solaris, and Mac OS X).
In particular, the "read hack" in process.py does not work, because  
select shows the write-end of a pipe being both readable and writable  
whenever there is data in the pipe and the pipe is not full.  There  
does not appear to be any way to detect when all readers of the pipe  
have closed without actually writing at least one byte to the write- 
end (in which case you get a broken pipe error, as one would expect).

As a temporary workaround, I am doing the following in process.py:

a) detecting hp-ux pipe behavior and setting a global  
brokenHpUxPipeBehavior
b) disabling the read hack if this variable is set
c) in Process.processEnded() I check for the variable and if set,  
send closeConnection to each ProcessWriter in the pipes dict

This seems to do the trick.

I have posted to the comp.unix.hp.hpux newsgroup looking for a way to  
determine if the readers are all gone, but don't know whether one  
will turn up or not.

Anyone have any suggestions on better ways to fix this?

	-Glenn

On Jul 31, 2006, at 4:36 PM, Jean-Paul Calderone wrote:

> On Mon, 31 Jul 2006 15:58:40 -0400, Glenn Hochberg  
> <gah at research.att.com> wrote:
>>
>> What approach would you recommend in troubleshooting the problem-- 
>> is  there built-in debugging that can be turned on that might give  
>> me  some more detailed information, or do I need to start adding  
>> log or  print statements?
>>
>> Again, any help would be appreciated.
>>
>
> Run one of the unit tests which fails in debug mode.  For example,
>
>  trial -b twisted.trial.test.test_process.ProcessTestCase.testProcess
>
> If none of the existing unit tests fail, write a new one :)
>
> Jean-Paul




From wgwigw at gmail.com  Wed Aug  9 04:43:19 2006
From: wgwigw at gmail.com (wang wei)
Date: Wed, 9 Aug 2006 16:43:19 +0800
Subject: [Twisted-Python] anyway to get data from a protocol instance?
Message-ID: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>

please have a look of fellow code.

from twisted.internet import reactor, protocol

class echo(protocol.Protocol):
    def __init__(self):
        from Queue import Queue
        self.q = Queue()

    def lineReceived(self, line):
        self.q.put(line)

class echofactory(protocol.ServerFactory):

    def buildProtocol(self, addr):
        p = echo()
        p.factory = self
        return p

class runEcho:
    def __init__(self):
        a = echofactory()
        reactor.listenTCP(1024, a)
        reactor.run()


My question is how can I get size of Queue q from another class when the
program running.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060809/e6eb92c1/attachment.htm 

From feldmatrix at gmx.de  Wed Aug  9 08:19:09 2006
From: feldmatrix at gmx.de (Torsten =?iso-8859-1?Q?Irl=E4nder?=)
Date: Wed, 9 Aug 2006 14:19:09 +0200
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>
References: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>
Message-ID: <20060809121909.GA7067@lastpferd.irlaender.de>

On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
> please have a look of fellow code.
> 
> from twisted.internet import reactor, protocol
> 
> class echo(protocol.Protocol):
>    def __init__(self):
>        from Queue import Queue
>        self.q = Queue()
> 
>    def lineReceived(self, line):
>        self.q.put(line)
> 
> class echofactory(protocol.ServerFactory):
> 
>    def buildProtocol(self, addr):
>        p = echo()
>        p.factory = self
>        return p
> 
> class runEcho:
>    def __init__(self):
>        a = echofactory()
>        reactor.listenTCP(1024, a)
>        reactor.run()
> 
> 
> My question is how can I get size of Queue q from another class when the
> program running.

That is a question I'm also interested in a good answer. My proposal would be
to return the protocol object as a deferred. For me this works, but I'm not
sure if this is a good approach. I extended wang wei's code so that the
protocol data can be accessed by other classes. 

from twisted.internet import reactor, protocol, defer

class echo(protocol.Protocol):
    def __init__(self):
        from Queue import Queue
        self.q = Queue()

    def connectionMade(self):
        self.factory.deferred.callback(self)
            
    def lineReceived(self, line):
        print line
        self.q.put(line)

class echofactory(protocol.ServerFactory):

    def __init__(self):
        self.deferred = defer.Deferred()
            
    def buildProtocol(self, addr):
        p = echo()
        p.factory = self
        return p 
            
class runEcho:
    def connect(self):
        a = echofactory()
        a.deferred.addCallback(self.set_myprotocol)
        reactor.listenTCP(1024, a)
        reactor.run()

    def set_myprotocol(self,proto):
        print "protocol ready!" 
        self.proto = proto
        print self.proto.q

r = runEcho()
r.connect()


Can anyone give some comments on this? I am at the very beginning
of twisted programming and I'm not sure if this is a good way to
access the protocol class from the outside.

best regards
Torsten



From mona.yazbeck at hec.ca  Wed Aug  9 10:06:35 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Wed, 9 Aug 2006 10:06:35 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
Message-ID: <002301c6bbbd$06040e60$82c2d384@HEC5521>

Hello, 

I am on Windows, and I have Python 2.4

I am starting twisted with twistd.py for my wiki, but it opens a command prompt so as soon as I log off the server it is no longer working and if I restart it is the same thing. How can I run it as a service so it will always be up?

I don't know much about twisted I just installed it with the MSI and follow 2 or 3 instructions from MoinMoin website (the wiki).

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060809/f6c5ff3d/attachment.htm 

From flashbuster at gmail.com  Wed Aug  9 10:20:43 2006
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Wed, 9 Aug 2006 16:20:43 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <002301c6bbbd$06040e60$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
Message-ID: <c2959a420608090720i6890b0b7y2a44205064942117@mail.gmail.com>

Don't know about a twisted way, but that's what firedaemon does:
http://www.firedaemon.com/

Actually you can do this without external software with the "nt resource
kit" and SRVANY.exe

regards, Sebastian

2006/8/9, Mona Yazbeck <mona.yazbeck at hec.ca>:
>
>  Hello,
>
> I am on Windows, and I have Python 2.4
>
> I am starting twisted with twistd.py for my wiki, but it opens a command
> prompt so as soon as I log off the server it is no longer working and if I
> restart it is the same thing. How can I run it as a service so it will
> always be up?
>
> I don't know much about twisted I just installed it with the MSI and
> follow 2 or 3 instructions from MoinMoin website (the wiki).
>
> Thanks
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060809/7e2644f5/attachment.htm 

From y.glodt at sitasoftware.lu  Wed Aug  9 10:24:59 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Wed, 9 Aug 2006 16:24:59 +0200
Subject: [Twisted-Python] Writing a simple nameserver
Message-ID: <200608091625.00872.y.glodt@sitasoftware.lu>

Hello,

I have a database which contains a list of hosts with their IP-addresses, and 
I need to be able to connect to them by their name.

The plan is to write a simple daemon using twisted names which accepts the dns 
query, looks up the requested address in the database, and answers the dns 
query.

How would I do that with twisted names?

p.s.
(I skimmed over the documentation but got blinded by "Undocumented" labels.)


Best regards,
Yves



From exarkun at divmod.com  Wed Aug  9 10:39:43 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 9 Aug 2006 10:39:43 -0400
Subject: [Twisted-Python] Writing a simple nameserver
In-Reply-To: <200608091625.00872.y.glodt@sitasoftware.lu>
Message-ID: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>

On Wed, 9 Aug 2006 16:24:59 +0200, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>Hello,
>
>I have a database which contains a list of hosts with their IP-addresses, and
>I need to be able to connect to them by their name.
>
>The plan is to write a simple daemon using twisted names which accepts the dns
>query, looks up the requested address in the database, and answers the dns
>query.
>
>How would I do that with twisted names?
>
>p.s.
>(I skimmed over the documentation but got blinded by "Undocumented" labels.)
>

You want to implement an authority.  There is basically no documentation
for this, as you discovered.  You can take a look at one of the existing
authority implementations for some hints:

  http://twistedmatrix.com/trac/browser/trunk/twisted/names/authority.py#L61

Once you have an authority, you just need to construct a server based on
it.  You can see an example of this in the tap module:

  http://twistedmatrix.com/trac/browser/trunk/twisted/names/tap.py

This basically amounts to passing a list of authorities to a protocol
instance and then using listenUDP with it.

Twisted Names has never really received any polish.  The API it presents
for doing this is not necessarily well thought out or completely consistent.
If you would like to improve it, please feel free.

Jean-Paul



From exarkun at divmod.com  Wed Aug  9 10:43:33 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 9 Aug 2006 10:43:33 -0400
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <20060809121909.GA7067@lastpferd.irlaender.de>
Message-ID: <20060809144333.1717.61119670.divmod.quotient.18231@ohm>

On Wed, 9 Aug 2006 14:19:09 +0200, Torsten Irl?nder <feldmatrix at gmx.de> wrote:
>On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
>> please have a look of fellow code.
>>
>> from twisted.internet import reactor, protocol
>>
>> class echo(protocol.Protocol):
>>    def __init__(self):
>>        from Queue import Queue
>>        self.q = Queue()
>>
>>    def lineReceived(self, line):
>>        self.q.put(line)
>>
>> class echofactory(protocol.ServerFactory):
>>
>>    def buildProtocol(self, addr):
>>        p = echo()
>>        p.factory = self
>>        return p
>>
>> class runEcho:
>>    def __init__(self):
>>        a = echofactory()
>>        reactor.listenTCP(1024, a)
>>        reactor.run()
>>
>>
>> My question is how can I get size of Queue q from another class when the
>> program running.

I suspect you are perfectly aware of how to get the size of the Queue and
that your actual problem is getting a reference to the protocol instance.

The answer here has little to do with Twisted specifically.  You just need
to organize your code such that the reference is available where it is
needed.

>
>That is a question I'm also interested in a good answer. My proposal would be
>to return the protocol object as a deferred. For me this works, but I'm not
>sure if this is a good approach. I extended wang wei's code so that the
>protocol data can be accessed by other classes.

This is a perfectly serviceable solution, although it may be more complex
than is strictly necessary.

>
>from twisted.internet import reactor, protocol, defer
>
>class echo(protocol.Protocol):
>    def __init__(self):
>        from Queue import Queue
>        self.q = Queue()
>
>    def connectionMade(self):
>        self.factory.deferred.callback(self)
>
>    def lineReceived(self, line):
>        print line
>        self.q.put(line)
>
>class echofactory(protocol.ServerFactory):
>
>    def __init__(self):
>        self.deferred = defer.Deferred()
>
>    def buildProtocol(self, addr):
>        p = echo()
>        p.factory = self
>        return p
>
>class runEcho:
>    def connect(self):
>        a = echofactory()
>        a.deferred.addCallback(self.set_myprotocol)
>        reactor.listenTCP(1024, a)
>        reactor.run()
>
>    def set_myprotocol(self,proto):
>        print "protocol ready!"
>        self.proto = proto
>        print self.proto.q
>
>r = runEcho()
>r.connect()
>
>
>Can anyone give some comments on this? I am at the very beginning
>of twisted programming and I'm not sure if this is a good way to
>access the protocol class from the outside.

For a single connection, twisted.internet.protocols.ClientCreator performs
approximately the same task.  For multiple connections, you may want to
eliminate the Deferred entirely and simply call a method with a well-known
name.  For example:

    def connectionMade(self):
        self.factory.setMyProtocol(self)

Or, to handle multiple simultaneous connections:

    def connectionMade(self):
        self.factory.addProtocol(self)


    def connectionLost(self, reason):
        self.factory.removeProtocol(self)

There is an implementation of this tracking pattern in Twisted already,
in fact.  Take a look at twisted.protocols.policies.WrappingFactory, which
keeps a dictionary of protocol instances, updating it whenever a new
connection is made or an old one lost.

Jean-Paul



From jacob at internet24.de  Wed Aug  9 10:49:30 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 09 Aug 2006 16:49:30 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <002301c6bbbd$06040e60$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
Message-ID: <1155134970.26837.21.camel@localhost.localdomain>

AFAIK, twistd doesn't provide direct support for Windows Services yet
(Is this planned?).

But you can easily wrap a reactor,run() yourself by doing something
like the following using the Win32-Python packages

import win32serviceutil
import win32service
import win32event

from twisted.internet import reactor

import sys


class IMSAgentBase(win32serviceutil.ServiceFramework):
    _svc_name_ = "myService"
    _svc_display_name_ = "My little Service"
    _svc_description_ = "My little Service" # Win2k or later
    _svc_deps_ = ["RpcSs"] # Start after the Network has come up...

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        reactor.callFromThread(reactor.stop)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        
        # initialize your services here
        reactor.run()
        win32event.WaitForSingleObject(self.hWaitStop,
win32event.INFINITE)

def HandleCommandLine(cls):
    win32serviceutil.HandleCommandLine(cls)


Run the above as a script.
Maybe you also want to buy the following book, the docs on Python Win32
are somewhat sparse....

"Python Programming on WIN32 (Paperback)"
http://www.amazon.com/gp/product/1565926218


On Wed, 2006-08-09 at 10:06 -0400, Mona Yazbeck wrote:
> Hello, 
>  
> I am on Windows, and I have Python 2.4
>  
> I am starting twisted with twistd.py for my wiki, but it opens a
> command prompt so as soon as I log off the server it is no longer
> working and if I restart it is the same thing. How can I run it as a
> service so it will always be up?
>  
> I don't know much about twisted I just installed it with the MSI and
> follow 2 or 3 instructions from MoinMoin website (the wiki).
>  
> Thanks
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060809/b72608f7/attachment.pgp 

From y.glodt at sitasoftware.lu  Wed Aug  9 11:16:05 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Wed, 9 Aug 2006 17:16:05 +0200
Subject: [Twisted-Python] Writing a simple nameserver
In-Reply-To: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>
References: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>
Message-ID: <200608091716.05232.y.glodt@sitasoftware.lu>

On Wednesday 09 August 2006 16:39, Jean-Paul Calderone wrote:
> On Wed, 9 Aug 2006 16:24:59 +0200, Yves Glodt <y.glodt at sitasoftware.lu> 
wrote:
> >Hello,
> >
> >I have a database which contains a list of hosts with their IP-addresses,
> > and I need to be able to connect to them by their name.
> >
> >The plan is to write a simple daemon using twisted names which accepts the
> > dns query, looks up the requested address in the database, and answers
> > the dns query.
> >
> >How would I do that with twisted names?
> >
> >p.s.
> >(I skimmed over the documentation but got blinded by "Undocumented"
> > labels.)
>
> You want to implement an authority.  There is basically no documentation
> for this, as you discovered.  You can take a look at one of the existing
> authority implementations for some hints:

Hi Paul,

thanks for your answer, I'll take a look at it, although I'm by far no expert 
in python nor dns I hope I find my way through the provided examples :-)

Best regards,
Yves

> http://twistedmatrix.com/trac/browser/trunk/twisted/names/authority.py#L61
>
> Once you have an authority, you just need to construct a server based on
> it.  You can see an example of this in the tap module:
>
>   http://twistedmatrix.com/trac/browser/trunk/twisted/names/tap.py
>
> This basically amounts to passing a list of authorities to a protocol
> instance and then using listenUDP with it.
>
> Twisted Names has never really received any polish.  The API it presents
> for doing this is not necessarily well thought out or completely
> consistent. If you would like to improve it, please feel free.
>
> Jean-Paul



From feldmatrix at gmx.de  Wed Aug  9 13:20:19 2006
From: feldmatrix at gmx.de (Torsten =?iso-8859-1?Q?Irl=E4nder?=)
Date: Wed, 9 Aug 2006 19:20:19 +0200
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <20060809144333.1717.61119670.divmod.quotient.18231@ohm>
References: <20060809121909.GA7067@lastpferd.irlaender.de>
	<20060809144333.1717.61119670.divmod.quotient.18231@ohm>
Message-ID: <20060809172019.GC7875@lastpferd.irlaender.de>

On Wed, Aug 09, 2006 at 10:43:33AM -0400, Jean-Paul Calderone wrote:
> On Wed, 9 Aug 2006 14:19:09 +0200, Torsten Irl?nder <feldmatrix at gmx.de> wrote:
> >On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
> >>please have a look of fellow code.
> >>
> >> [...deleted code... with Queue q in protocol instance]
> >>
> >>My question is how can I get size of Queue q from another class when the
> >>program running.
> 
> I suspect you are perfectly aware of how to get the size of the Queue and
> that your actual problem is getting a reference to the protocol instance.
> 
> The answer here has little to do with Twisted specifically.  You just need
> to organize your code such that the reference is available where it is
> needed.
> 
> >
> >That is a question I'm also interested in a good answer. My proposal would be
> >to return the protocol object as a deferred. For me this works, but I'm not
> >sure if this is a good approach. I extended wang wei's code so that the
> >protocol data can be accessed by other classes.
> 
> This is a perfectly serviceable solution, although it may be more complex
> than is strictly necessary.

Well, I had supposed that, but I'm happy that my proposal isn't as
bad as I thought ;)

> >from twisted.internet import reactor, protocol, defer
> >
> >class echo(protocol.Protocol):
> >   def __init__(self):
> >       from Queue import Queue
> >       self.q = Queue()
> >
> >   def connectionMade(self):
> >       self.factory.deferred.callback(self)
> >
> >   def lineReceived(self, line):
> >       print line
> >       self.q.put(line)
> >
> >class echofactory(protocol.ServerFactory):
> >
> >   def __init__(self):
> >       self.deferred = defer.Deferred()
> >
> >   def buildProtocol(self, addr):
> >       p = echo()
> >       p.factory = self
> >       return p
> >
> >class runEcho:
> >   def connect(self):
> >       a = echofactory()
> >       a.deferred.addCallback(self.set_myprotocol)
> >       reactor.listenTCP(1024, a)
> >       reactor.run()
> >
> >   def set_myprotocol(self,proto):
> >       print "protocol ready!"
> >       self.proto = proto
> >       print self.proto.q
> >
> >r = runEcho()
> >r.connect()
> >
> >
> >Can anyone give some comments on this? I am at the very beginning
> >of twisted programming and I'm not sure if this is a good way to
> >access the protocol class from the outside.
> 
> For a single connection, twisted.internet.protocols.ClientCreator performs
> approximately the same task.  For multiple connections, you may want to
> eliminate the Deferred entirely and simply call a method with a well-known
> name.  For example:
> 
>    def connectionMade(self):
>        self.factory.setMyProtocol(self)
> 
> Or, to handle multiple simultaneous connections:
> 
>    def connectionMade(self):
>        self.factory.addProtocol(self)
> 
> 
>    def connectionLost(self, reason):
>        self.factory.removeProtocol(self)
> 
> There is an implementation of this tracking pattern in Twisted already,
> in fact.  Take a look at twisted.protocols.policies.WrappingFactory, which
> keeps a dictionary of protocol instances, updating it whenever a new
> connection is made or an old one lost.

Thanks again for your comment :)

best regards 
Torsten



From keith.cheung at lkmachinery.com.hk  Thu Aug 10 03:52:48 2006
From: keith.cheung at lkmachinery.com.hk (=?big5?B?S2VpdGggQ2hldW5nICixabDqqH0p?=)
Date: Thu, 10 Aug 2006 15:52:48 +0800
Subject: [Twisted-Python] Help implement protocol
Message-ID: <828C90E83BA08E4795A2BF3B97AEE55D798B63@hkserver-3.lkmachinery.com.hk>

Thanks Andrew and Thomas.
Both are much better then my previous approach.


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Monday, August 07, 2006 6:29 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Help implement protocol

On Sat, Aug 05, 2006 at 11:44:44AM +0800, Keith Cheung (???) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?

Twisted code often uses dynamic method dispatch to methods with prefixed names
like this:

    def connectionMade(self):
        self.sendLine('WhatDate')
        self.state = 'askingForDate'

    def lineReceived(self, line):
        handler = getattr(self, 'state_' + self.state)
        handler(line)

    def state_askingForDate(self, line):
        self.date = line
        self.sendLine('WhatYear')
        self.state = 'askingForYear'

    ...

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From Sven-Erik.Tiberg at ltu.se  Thu Aug 10 05:42:02 2006
From: Sven-Erik.Tiberg at ltu.se (Sven-Erik Tiberg)
Date: Thu, 10 Aug 2006 11:42:02 +0200
Subject: [Twisted-Python] UDP code samples ( to X3D )
Message-ID: <668D1B8AD729C94DB91D17EC19B8BB910234261C@EMMA.personal.adp.ltu.se>

Hi.
 
I'm Sven Erik Tiberg newbee to this list, and working on a idea that's involves UDP transferes.
 
Basically it contains of human interacting to a 3D world ( X3D ) with a simulink ( matworks ) model runing on a separate server. States will be bidirectionell transfered by UDP diagrams over Internet.
 
I'v created some simulink modules that forces the model to run in pseudo-RT-mode and transfering states by UDP in format ( 10  times %f\t% ).  And some X3D worlds that needs to be route'd to this UDP state tranferes by twisted-python scripts.
 
Any hints and tips? Or as x-mas wish: code snipps.
 
PS: Present reading "The Twisted Documantation" may 25 2006. Like the reactor concept. 
 
Sven-Erik Tiberg 
Dept of IT.
Lulea Univ of Techn. 
Sweden  
 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060810/364fe2d5/attachment.htm 

From jarrod at vertigrated.com  Thu Aug 10 14:13:24 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 10 Aug 2006 14:13:24 -0400
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <Aca4QY4kWHV0xzCgQdGB/ieDJXqvHg==>
	<828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <2389d4730608101113v8ea3656ua6b0ca63350a960d@mail.gmail.com>

On 8/4/06, Keith Cheung (???) <keith.cheung at lkmachinery.com.hk> wrote:
> Hi all,
>
> I want to implement some handshake protocol, say..
>
> 1. Client:      WhatDate
> 2. Server:      5Aug
> 3. Client:      WhatYear
> 4. Server:      2006
> 5. Client:      WhatTime
> 6. Server:      1005
>
> So, for the client:-  (pseudo code)
>         def connectionMade():
>                 send "WhatDate"
>                 state = askingForDate
>         def lineReceived(data):
>                 switch state:
>                         askingForDate:
>                                 date = data
>                                 send "WhatYear"
>                                 state = askingForYear
>                                 break
>                         askingForYear:
>                                 year = data
>                                 send = "WhatTime"
>                                 state = askingForTime
>                                 break
>                         askingForTime:
>                                 time = data
>                                 state = initialState
>                                 disconnect
>
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?
>

I know this expands the scope of what you have to learn, but look at
State Machine Compiler.
You can create a single object, and then generate all the state
management code from SMC.



-- 
If you don't know what you want, you probably need a nap.



From mona.yazbeck at hec.ca  Thu Aug 10 16:30:31 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Thu, 10 Aug 2006 16:30:31 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<c2959a420608090720i6890b0b7y2a44205064942117@mail.gmail.com>
Message-ID: <015a01c6bcbb$d38f54d0$82c2d384@HEC5521>

Thank you very much!

I got it working with srvany.exe.

Mona
  ----- Message d'origine ----- 
  De : Sebastian Schulze 
  ? : Twisted general discussion 
  Envoy? : 9 ao?t 2006 10:20
  Objet : Re: [Twisted-Python] How to run Twisted as a service in Windows?


  Don't know about a twisted way, but that's what firedaemon does:
  http://www.firedaemon.com/

  Actually you can do this without external software with the "nt resource kit" and SRVANY.exe

  regards, Sebastian


  2006/8/9, Mona Yazbeck <mona.yazbeck at hec.ca>:
    Hello, 

    I am on Windows, and I have Python 2.4

    I am starting twisted with twistd.py for my wiki, but it opens a command prompt so as soon as I log off the server it is no longer working and if I restart it is the same thing. How can I run it as a service so it will always be up?

    I don't know much about twisted I just installed it with the MSI and follow 2 or 3 instructions from MoinMoin website (the wiki).

    Thanks


    _______________________________________________
    Twisted-Python mailing list
    Twisted-Python at twistedmatrix.com 
    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 







------------------------------------------------------------------------------


  _______________________________________________
  Twisted-Python mailing list
  Twisted-Python at twistedmatrix.com
  http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060810/97927f66/attachment.htm 

From jarrod at vertigrated.com  Thu Aug 10 19:13:38 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 10 Aug 2006 19:13:38 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples tutorials?
Message-ID: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>

Are there any more concrete examples or tutorials of using Producers
and Consumers?



From grebekel at gmail.com  Fri Aug 11 08:44:21 2006
From: grebekel at gmail.com (Grebekel)
Date: Fri, 11 Aug 2006 08:44:21 -0400
Subject: [Twisted-Python] Multiple client handling...
Message-ID: <c6eea6460608110544h674e1507xa11b84394fdcf1b5@mail.gmail.com>

Greetings fellow writters of Twisted code. I've been looking for some
answers about Twisted but Twisted's docs seem to be of a twisted
nature. Perhaps I've been looking in the wrong places.

I'd like my server to serve multiple clients, and to achieve this I'd
need to know to which client deliver a specific message.
-How does a Twisted server handle multiple client connections?
-How can such a server deliver messages from a client to another (codewise)?
-Any samples or tutorials online?

Any help is much appreciated.
grebekel



From exarkun at divmod.com  Fri Aug 11 08:59:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 11 Aug 2006 08:59:35 -0400
Subject: [Twisted-Python] Multiple client handling...
In-Reply-To: <c6eea6460608110544h674e1507xa11b84394fdcf1b5@mail.gmail.com>
Message-ID: <20060811125935.1717.597932546.divmod.quotient.19660@ohm>

On Fri, 11 Aug 2006 08:44:21 -0400, Grebekel <grebekel at gmail.com> wrote:
>Greetings fellow writters of Twisted code. I've been looking for some
>answers about Twisted but Twisted's docs seem to be of a twisted
>nature. Perhaps I've been looking in the wrong places.
>
>I'd like my server to serve multiple clients, and to achieve this I'd
>need to know to which client deliver a specific message.
>-How does a Twisted server handle multiple client connections?

This question is pretty vague, so I'm not sure which particular answer
you're looking for.

Applications developed with Twisted employ cooperative multitasking by
frequently releasing execution control to an event loop inside Twisted.
Servers handle multiple clients by dispatching events from each client
from this loop to application code.

The simplest Twisted server (for example, <http://twistedmatrix.com/projects/core/documentation/examples/simpleserv.py>) is already capable of handling multiple clients.

>-How can such a server deliver messages from a client to another (codewise)?

However you like.  You may want to subclass ServerFactory and implement
client tracking logic which allows any one of your Protocol instances to
acquire a reference to another client's Protocol instance so that it can
inspect it or invoke methods on it.

>-Any samples or tutorials online?

Examples of passing messages between different clients connect to a single
server?  None really spring to mind, perhaps because such a thing wouldn't
demonstrate any Twisted APIs not demonstratable by a similar example which
only handled a single client.

If you're feeling brave, you might look at twisted.words.service, which is
not intended as an example to teach Twisted, but which passes quite a few
messages between different clients connected to one server.

Jean-Paul



From mona.yazbeck at hec.ca  Fri Aug 11 11:13:32 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Fri, 11 Aug 2006 11:13:32 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<1155134970.26837.21.camel@localhost.localdomain>
Message-ID: <00b301c6bd58$b5a9be90$82c2d384@HEC5521>

Me again...

I read the code but I just don't know what to write in SvcDoRun where it is 
written "initialize your services here"... the service need to be started 
with this line: "twistd.py --python otherfile.py", can I write that directly 
somewhere in there? How?

Many thanks


----- Message d'origine ----- 
De : "Thomas Jacob" <jacob at internet24.de>
? : "Twisted general discussion" <twisted-python at twistedmatrix.com>
Envoy? : 9 ao?t 2006 10:49
Objet : Re: [Twisted-Python] How to run Twisted as a service in Windows?


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From jacob at internet24.de  Fri Aug 11 11:40:33 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Fri, 11 Aug 2006 17:40:33 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <00b301c6bd58$b5a9be90$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<1155134970.26837.21.camel@localhost.localdomain>
	<00b301c6bd58$b5a9be90$82c2d384@HEC5521>
Message-ID: <1155310833.32241.20.camel@localhost.localdomain>

For instance, instead of the following in your .tac-File

class FingerProtocol(protocol.Protocol):
    pass
class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol

internet.TCPServer(1079, FingerFactory())



use this in the "initialize your services here"-Section


class FingerProtocol(protocol.Protocol):
    pass
class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol
reactor.listenTCP(1079, FingerFactory())


see
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/intro.html

On Fri, 2006-08-11 at 11:13 -0400, Mona Yazbeck wrote:
> Me again...
> 
> I read the code but I just don't know what to write in SvcDoRun where it is 
> written "initialize your services here"... the service need to be started 
> with this line: "twistd.py --python otherfile.py", can I write that directly 
> somewhere in there? How?
> 
> Many thanks

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060811/b990195c/attachment.pgp 

From exarkun at divmod.com  Sat Aug 12 20:29:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 12 Aug 2006 20:29:50 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>
Message-ID: <20060813002950.1717.1413317178.divmod.quotient.21147@ohm>

On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
>Are there any more concrete examples or tutorials of using Producers
>and Consumers?
>

What kind of information beyond what is available in the existing producer/consumer documentation are you looking for?

Jean-Paul



From exarkun at twistedmatrix.com  Sun Aug 13 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Aug 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1155445502.03.1703026449@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-06 through 2006-08-13
Bugs opened: 7    Bugs closed: 3  Total open bugs: 695 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +4  |Highest:  -1          |Conch:  -1             
|Enhancement:  +0  |High:     +2          |Core:   +2             
                   |Normal:   +3          |Mail:   +2             
                                          |Trial:  +0             
                                          |Web2:   +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1989] trial issues with Zope Interfaces in Python 2.5 be (opened by scmikes) (CLOSED, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1989

                    ===== High =====
[#1991] amp has problems with mixed case keyword args (opened by scmikes)
    defect          core       http://twistedmatrix.com/trac/ticket/1991

[#1992] IMAPServer.__cbFetch can raise uncaught AttributeError (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1992

                    ===== Normal =====
[#1988] Cannot use a DeferredList to retrieve several POP3 messages (opened by kendrew)
    defect          mail       http://twistedmatrix.com/trac/ticket/1988

[#1990] StdioOnnaStick ignores sys.stdout.encoding, won't print unicode properly (opened by termie)
    defect          core       http://twistedmatrix.com/trac/ticket/1990

[#1993] Unbounded recursion in twisted/web2/stream.py (opened by exarkun)
    defect          web2       http://twistedmatrix.com/trac/ticket/1993

[#1994] ReconnectingClientFactory should wrap the protocol maker with a connectionMade that calls resetDelay for you (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1994



Closed Bugs
______________________
                    ===== Highest =====
[#1989] trial issues with Zope Interfaces in Python 2.5 be (opened by scmikes, closed by spiv, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1989

[#1973] No IPathImportMapper adapter for imp.NullImporter (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1973

                    ===== Normal =====
[#1375] hashed host entries in known_hosts for conch (SSH) (opened by count0, closed by count0, duplicate)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1375





From eprparadocs at gmail.com  Sun Aug 13 07:28:51 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 07:28:51 -0400
Subject: [Twisted-Python] Using FQDN with transport.write calls...
Message-ID: <44DF0CF3.9080705@gmail.com>

My application requires that I use FQDN in place of the normal IP 
addresses in transport.write calls. In looking over I see quite a few 
places called 'resolveAddress', which look like they do exactly what I 
need. I was wondering if anyone has a code snippet that would show me 
exactly what I need to do?

TIA,
Chaz



From exarkun at divmod.com  Sun Aug 13 10:17:31 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 10:17:31 -0400
Subject: [Twisted-Python] Using FQDN with transport.write calls...
In-Reply-To: <44DF0CF3.9080705@gmail.com>
Message-ID: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>

On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>My application requires that I use FQDN in place of the normal IP addresses 
>in transport.write calls.

No it doesn't.  What behavior would you expect this to provide which you
desire in your application?

Jean-Paul



From eprparadocs at gmail.com  Sun Aug 13 13:23:42 2006
From: eprparadocs at gmail.com (Chaz)
Date: Sun, 13 Aug 2006 13:23:42 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
Message-ID: <44DF601E.2000803@gmail.com>

I actually see reactor has a resolve() method that looks like it is 
used. But in looking at the Posix implementation it appears to be 
"blocking" (unless threading is around in which case it uses a thread).

So I am now wondering the following:

1) Is the default resolve() method, blocking?
2) How do I get it to use the thread version?

Chaz

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> My application requires that I use FQDN in place of the normal IP 
>> addresses in transport.write calls.
> 
> No it doesn't.  What behavior would you expect this to provide which you
> desire in your application?
> 
> Jean-Paul




From eprparadocs at gmail.com  Sun Aug 13 13:23:42 2006
From: eprparadocs at gmail.com (Chaz)
Date: Sun, 13 Aug 2006 13:23:42 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
Message-ID: <44DF601E.2000803@gmail.com>

I actually see reactor has a resolve() method that looks like it is 
used. But in looking at the Posix implementation it appears to be 
"blocking" (unless threading is around in which case it uses a thread).

So I am now wondering the following:

1) Is the default resolve() method, blocking?
2) How do I get it to use the thread version?

Chaz

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> My application requires that I use FQDN in place of the normal IP 
>> addresses in transport.write calls.
> 
> No it doesn't.  What behavior would you expect this to provide which you
> desire in your application?
> 
> Jean-Paul




From exarkun at divmod.com  Sun Aug 13 14:44:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 14:44:17 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF601E.2000803@gmail.com>
Message-ID: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>

On Sun, 13 Aug 2006 13:23:42 -0400, Chaz <eprparadocs at gmail.com> wrote:
>Jean-Paul Calderone wrote:
>>On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>>>My application requires that I use FQDN in place of the normal IP 
>>>addresses in transport.write calls.
>>
>>No it doesn't.  What behavior would you expect this to provide which you
>>desire in your application?
>>
>>Jean-Paul
>
>I actually see reactor has a resolve() method that looks like it is used. 
>But in looking at the Posix implementation it appears to be "blocking" 
>(unless threading is around in which case it uses a thread).
>
>So I am now wondering the following:
>
>1) Is the default resolve() method, blocking?
>2) How do I get it to use the thread version?
>
>Chaz
>

You didn't answer my question.  Also, please don't top-post.

Jean-Paul



From itamar at itamarst.org  Sun Aug 13 16:30:53 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Aug 2006 16:30:53 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF601E.2000803@gmail.com>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
	<44DF601E.2000803@gmail.com>
Message-ID: <1155501053.8359.3.camel@localhost.localdomain>

On Sun, 2006-08-13 at 13:23 -0400, Chaz wrote:
> I actually see reactor has a resolve() method that looks like it is 
> used. But in looking at the Posix implementation it appears to be 
> "blocking" (unless threading is around in which case it uses a thread).
> 
> So I am now wondering the following:
> 
> 1) Is the default resolve() method, blocking?
> 2) How do I get it to use the thread version?

It uses the threaded version by default on virtually all platforms.





From eprparadocs at gmail.com  Sun Aug 13 16:38:04 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 16:38:04 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
Message-ID: <44DF8DAC.9010001@gmail.com>

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 13:23:42 -0400, Chaz <eprparadocs at gmail.com> wrote:
>> Jean-Paul Calderone wrote:
>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>> wrote:
>>>> My application requires that I use FQDN in place of the normal IP 
>>>> addresses in transport.write calls.
>>>
>>> No it doesn't.  What behavior would you expect this to provide which you
>>> desire in your application?
>>>
>>> Jean-Paul
>>
>> I actually see reactor has a resolve() method that looks like it is 
>> used. But in looking at the Posix implementation it appears to be 
>> "blocking" (unless threading is around in which case it uses a thread).
>>
>> So I am now wondering the following:
>>
>> 1) Is the default resolve() method, blocking?
>> 2) How do I get it to use the thread version?
>>
>> Chaz
>>
> 
> You didn't answer my question.  Also, please don't top-post.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Sorry for the top-post. What I want to do is the following


	self.transport.write(data,('www.foobar.com',6000))

I think that says it succinctly.

As I see it I need to do some things with defer and reactor.resolve() or 
use socket.getaddrinfo() or socket.gethostbyname() and deal with the 
possible blocking nature of these calls.

As I said in my follow-on post I see the implementation of resolve() in 
the posix reactor support and wonder about the two methods I see there: 
the blocking one and the thread one. How do I get to decide which is used.

Finally is there some, unknown to me, way to already deal with this issue?

Peace,
Chaz.



From screwtape at froup.com  Sun Aug 13 17:23:09 2006
From: screwtape at froup.com (Tim Allen)
Date: Mon, 14 Aug 2006 07:23:09 +1000
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF8DAC.9010001@gmail.com>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
	<44DF8DAC.9010001@gmail.com>
Message-ID: <41D80D84-F475-400E-9125-26081732B093@froup.com>

On 14 Aug 2006, at 06:38, Chaz. wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz."  
>>>> <eprparadocs at gmail.com> wrote:
>>>>> My application requires that I use FQDN in place of the normal  
>>>>> IP addresses in transport.write calls.
>>>>
>>>> No it doesn't.  What behavior would you expect this to provide  
>>>> which you
>>>> desire in your application?
>
> Sorry for the top-post. What I want to do is the following
>
> 	self.transport.write(data,('www.foobar.com',6000))
>
> I think that says it succinctly.

I think that Jean-Paul was trying to say something like this:  
"self.transport is a file-like object, so its write() method takes  
only data. It wouldn't make sense to supply an IP address and port to  
sys.stdout.write(), why do you expect that self.transport.write()  
would accept one?"



From eprparadocs at gmail.com  Sun Aug 13 17:38:17 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 17:38:17 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <41D80D84-F475-400E-9125-26081732B093@froup.com>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
	<44DF8DAC.9010001@gmail.com>
	<41D80D84-F475-400E-9125-26081732B093@froup.com>
Message-ID: <44DF9BC9.7070906@gmail.com>

Tim Allen wrote:
> On 14 Aug 2006, at 06:38, Chaz. wrote:
>>>> Jean-Paul Calderone wrote:
>>>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>>>> wrote:
>>>>>> My application requires that I use FQDN in place of the normal IP 
>>>>>> addresses in transport.write calls.
>>>>>
>>>>> No it doesn't.  What behavior would you expect this to provide 
>>>>> which you
>>>>> desire in your application?
>>
>> Sorry for the top-post. What I want to do is the following
>>
>>     self.transport.write(data,('www.foobar.com',6000))
>>
>> I think that says it succinctly.
> 
> I think that Jean-Paul was trying to say something like this: 
> "self.transport is a file-like object, so its write() method takes only 
> data. It wouldn't make sense to supply an IP address and port to 
> sys.stdout.write(), why do you expect that self.transport.write() would 
> accept one?"
> 

Because it does for datagrams, and that is how I am using it. What I am 
asking, is instead of supplying an (IP address, port) I would like to 
use (fqdn,port). There are sometimes I want to use the DNS system to 
resolve the address.

Chaz



From exarkun at divmod.com  Sun Aug 13 18:22:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 18:22:27 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF9BC9.7070906@gmail.com>
Message-ID: <20060813222227.1717.767224239.divmod.quotient.22048@ohm>

On Sun, 13 Aug 2006 17:38:17 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Tim Allen wrote:
>>On 14 Aug 2006, at 06:38, Chaz. wrote:
>>>>>Jean-Paul Calderone wrote:
>>>>>>On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>>>>>wrote:
>>>>>>>My application requires that I use FQDN in place of the normal IP 
>>>>>>>addresses in transport.write calls.
>>>>>>
>>>>>>No it doesn't.  What behavior would you expect this to provide which 
>>>>>>you
>>>>>>desire in your application?
>>>
>>>Sorry for the top-post. What I want to do is the following
>>>
>>>     self.transport.write(data,('www.foobar.com',6000))
>>>
>>>I think that says it succinctly.
>>
>>I think that Jean-Paul was trying to say something like this: 
>>"self.transport is a file-like object, so its write() method takes only 
>>data. It wouldn't make sense to supply an IP address and port to 
>>sys.stdout.write(), why do you expect that self.transport.write() would 
>>accept one?"
>
>Because it does for datagrams, and that is how I am using it. What I am 
>asking, is instead of supplying an (IP address, port) I would like to use 
>(fqdn,port). There are sometimes I want to use the DNS system to resolve the 
>address.

So, you want to resolve a name to an address?  Sorry, it was very unclear
from your initial question that that was your goal.  This is easily done,
and you have already correctly identifier the API to use, reactor.resolve().

Jean-Paul



From igor at mekensleep.com  Mon Aug 14 09:15:55 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 15:15:55 +0200
Subject: [Twisted-Python] spawnProcess under Win32
Message-ID: <44E0778B.9090403@mekensleep.com>

Hi!

I had recently to use the Process protocol of Twisted (win32eventreactor)
to launch some applications and grab their output.

It works well, the only problem I have is Twisted always opens a DOS 
console.
Since I receive the output and treat them myself, the DOS console stays 
empty.
But in fact, I would never want this console to appear on screen.

I've looked at the way Twisted creates a process under Win32 and I've 
noticed
that it uses the CreateProcess() function.  The problem is it doesn't 
mention any
creation flags (i.e.: it just passes 0) whereas here, we would need to pass
DETACHED_PROCESS to avoid a new console to be created.

What I've done is merely to add an optional win32flags argument to the 
spawnProcess()
method in win32eventreactor.py as follow:

http://cvs.gna.org/cvsweb/envwin32/python/Lib/site-packages/twisted/internet/win32eventreactor.py?rev=1.2;cvsroot=underware

I would be interested to know what do you think about this?
Does it seem to you a good idea?

Sincerely,

Igor.




From glyph at divmod.com  Mon Aug 14 10:14:51 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 14 Aug 2006 10:14:51 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0778B.9090403@mekensleep.com>
Message-ID: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>



On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>Hi!

>I've looked at the way Twisted creates a process under Win32 and I've 
>noticed
>that it uses the CreateProcess() function.  The problem is it doesn't 
>mention any
>creation flags (i.e.: it just passes 0) whereas here, we would need to pass
>DETACHED_PROCESS to avoid a new console to be created.

>I would be interested to know what do you think about this?
>Does it seem to you a good idea?

Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so I don't see why we couldn't have a Win32-specific argument as well.  However, "win32flags" seems like a pretty vague name, especially since it could be CreateProcess's dwCreationFlags argument or STARTUPINFO's dwFlags attribute.

Also, depending on context, you might want CREATE_NO_WINDOW or DETACHED_PROCESS or possibly both.

I believe the right thing to do is to come up with some typical features of the Windows process environment and support them explicitly.  I don't believe all the flags you can pass to CreateProcess are compatible with the way Twisted expects subprocesses to behave, and I am definitely sure that not all the things you can put in STARTUPINFO are.



From igor at mekensleep.com  Mon Aug 14 11:02:07 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 17:02:07 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
References: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
Message-ID: <44E0906F.4050602@mekensleep.com>

Hi,

yes I see your point of view.
I deliberately passed that Win32 flags since I didn't wanted to get in 
details
of what kind of Win32 features we need or not.
It can indeed potentially breaks Twisted behavior if incorrect flags are 
passed.

However it's just easier even if less secure.  Otherwise, you have to 
enumerate
all kind of features users want and implement them explicitly while 
having the
correct code guard to prevent from crash or incorrect behavior.

I don't know about other Win32 developpers.  From my side, I just wanted
a way to prevent a console to be opened, so might be something like an
explicit CREATE_NO_CONSOLE flag or such.

Igor.



glyph at divmod.com wrote:

>
>
> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
> <igor at mekensleep.com> wrote:
>
>> Hi!
>
>
>> I've looked at the way Twisted creates a process under Win32 and I've 
>> noticed
>> that it uses the CreateProcess() function.  The problem is it doesn't 
>> mention any
>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>> to pass
>> DETACHED_PROCESS to avoid a new console to be created.
>
>
>> I would be interested to know what do you think about this?
>> Does it seem to you a good idea?
>
>
> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so 
> I don't see why we couldn't have a Win32-specific argument as well.  
> However, "win32flags" seems like a pretty vague name, especially since 
> it could be CreateProcess's dwCreationFlags argument or STARTUPINFO's 
> dwFlags attribute.
>
> Also, depending on context, you might want CREATE_NO_WINDOW or 
> DETACHED_PROCESS or possibly both.
>
> I believe the right thing to do is to come up with some typical 
> features of the Windows process environment and support them 
> explicitly.  I don't believe all the flags you can pass to 
> CreateProcess are compatible with the way Twisted expects subprocesses 
> to behave, and I am definitely sure that not all the things you can 
> put in STARTUPINFO are.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From exarkun at divmod.com  Mon Aug 14 11:31:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 14 Aug 2006 11:31:49 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0906F.4050602@mekensleep.com>
Message-ID: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>

On Mon, 14 Aug 2006 17:02:07 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>glyph at divmod.com wrote:
>>
>>
>>On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko <igor at mekensleep.com> 
>>wrote:
>>>Hi!
>>
>>>I've looked at the way Twisted creates a process under Win32 and I've 
>>>noticed
>>>that it uses the CreateProcess() function.  The problem is it doesn't 
>>>mention any
>>>creation flags (i.e.: it just passes 0) whereas here, we would need to 
>>>pass
>>>DETACHED_PROCESS to avoid a new console to be created.
>>
>>>I would be interested to know what do you think about this?
>>>Does it seem to you a good idea?
>>
>>
>>Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so I 
>>don't see why we couldn't have a Win32-specific argument as well.  However, 
>>"win32flags" seems like a pretty vague name, especially since it could be 
>>CreateProcess's dwCreationFlags argument or STARTUPINFO's dwFlags 
>>attribute.
>>
>>Also, depending on context, you might want CREATE_NO_WINDOW or 
>>DETACHED_PROCESS or possibly both.
>>
>>I believe the right thing to do is to come up with some typical features of 
>>the Windows process environment and support them explicitly.  I don't 
>>believe all the flags you can pass to CreateProcess are compatible with the 
>>way Twisted expects subprocesses to behave, and I am definitely sure that 
>>not all the things you can put in STARTUPINFO are.
>>
>Hi,
>
>yes I see your point of view.
>I deliberately passed that Win32 flags since I didn't wanted to get in 
>details
>of what kind of Win32 features we need or not.
>It can indeed potentially breaks Twisted behavior if incorrect flags are 
>passed.
>
>However it's just easier even if less secure.  Otherwise, you have to 
>enumerate
>all kind of features users want and implement them explicitly while having 
>the
>correct code guard to prevent from crash or incorrect behavior.
>
>I don't know about other Win32 developpers.  From my side, I just wanted
>a way to prevent a console to be opened, so might be something like an
>explicit CREATE_NO_CONSOLE flag or such.

It's easier on the Twisted side.  It's harder on application developers,
since they have to know if they want to pass CREATE_NO_CONSOLE or
CREATE_NO_WINDOW or DETACHED_PROCESS or some combination or some other flag
entirely.

It also makes it completely non-portable to other platforms.  It's difficult
to do anything with subprocesses cross-platform, but the goal should be to
make it possible and then easy.  Requiring Win32 flags to be passed in is
complete capitulation.

I also wonder why I have never noticed this behavior.  For example, I have
run buildslaves on Win32 and never noticed them popping up console windows.
Does this behavior differ between different version of Windows?

Also, please don't top-post.  

Jean-Paul



From mli at deform.com  Mon Aug 14 11:34:48 2006
From: mli at deform.com (Michael Li)
Date: Mon, 14 Aug 2006 11:34:48 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0906F.4050602@mekensleep.com>
References: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
	<44E0906F.4050602@mekensleep.com>
Message-ID: <44E09818.60407@deform.com>

I've recently fixed a problem in MPI 1.2.1 launching program RemoteShell.
It uses CreateProcessAsUser to spawn a process. The RemoteShell runs
as a service(daemon) and spawn a new process perfectly (without DOS
window). The followings are C-code, it might give you some hint.
 
        if (CreateProcess(
            NULL,
            tCmdLine,
            NULL, NULL, TRUE,
            //DETACHED_PROCESS | IDLE_PRIORITY_CLASS,
            //CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS,
            CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS | 
CREATE_NEW_PROCESS_GROUP,
            //DETACHED_PROCESS | IDLE_PRIORITY_CLASS | 
CREATE_NEW_PROCESS_GROUP,
            //CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS | CREATE_SUSPENDED,
            pEnv,
            NULL,
            &saInfo, &psInfo))

Igor Kravtchenko wrote:
> Hi,
>
> yes I see your point of view.
> I deliberately passed that Win32 flags since I didn't wanted to get in 
> details
> of what kind of Win32 features we need or not.
> It can indeed potentially breaks Twisted behavior if incorrect flags 
> are passed.
>
> However it's just easier even if less secure.  Otherwise, you have to 
> enumerate
> all kind of features users want and implement them explicitly while 
> having the
> correct code guard to prevent from crash or incorrect behavior.
>
> I don't know about other Win32 developpers.  From my side, I just wanted
> a way to prevent a console to be opened, so might be something like an
> explicit CREATE_NO_CONSOLE flag or such.
>
> Igor.
>
>
>
> glyph at divmod.com wrote:
>
>>
>>
>> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
>> <igor at mekensleep.com> wrote:
>>
>>> Hi!
>>
>>
>>> I've looked at the way Twisted creates a process under Win32 and 
>>> I've noticed
>>> that it uses the CreateProcess() function.  The problem is it 
>>> doesn't mention any
>>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>>> to pass
>>> DETACHED_PROCESS to avoid a new console to be created.
>>
>>
>>> I would be interested to know what do you think about this?
>>> Does it seem to you a good idea?
>>
>>
>> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), 
>> so I don't see why we couldn't have a Win32-specific argument as 
>> well.  However, "win32flags" seems like a pretty vague name, 
>> especially since it could be CreateProcess's dwCreationFlags argument 
>> or STARTUPINFO's dwFlags attribute.
>>
>> Also, depending on context, you might want CREATE_NO_WINDOW or 
>> DETACHED_PROCESS or possibly both.
>>
>> I believe the right thing to do is to come up with some typical 
>> features of the Windows process environment and support them 
>> explicitly.  I don't believe all the flags you can pass to 
>> CreateProcess are compatible with the way Twisted expects 
>> subprocesses to behave, and I am definitely sure that not all the 
>> things you can put in STARTUPINFO are.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From igor at mekensleep.com  Mon Aug 14 11:51:42 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 17:51:42 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
References: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
Message-ID: <44E09C0E.5070504@mekensleep.com>

Jean-Paul Calderone wrote:

> On Mon, 14 Aug 2006 17:02:07 +0200, Igor Kravtchenko 
> <igor at mekensleep.com> wrote:
>
>> glyph at divmod.com wrote:
>>
>>>
>>>
>>> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
>>> <igor at mekensleep.com> wrote:
>>>
>>>> Hi!
>>>
>>>
>>>> I've looked at the way Twisted creates a process under Win32 and 
>>>> I've noticed
>>>> that it uses the CreateProcess() function.  The problem is it 
>>>> doesn't mention any
>>>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>>>> to pass
>>>> DETACHED_PROCESS to avoid a new console to be created.
>>>
>>>
>>>> I would be interested to know what do you think about this?
>>>> Does it seem to you a good idea?
>>>
>>>
>>>
>>> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), 
>>> so I don't see why we couldn't have a Win32-specific argument as 
>>> well.  However, "win32flags" seems like a pretty vague name, 
>>> especially since it could be CreateProcess's dwCreationFlags 
>>> argument or STARTUPINFO's dwFlags attribute.
>>>
>>> Also, depending on context, you might want CREATE_NO_WINDOW or 
>>> DETACHED_PROCESS or possibly both.
>>>
>>> I believe the right thing to do is to come up with some typical 
>>> features of the Windows process environment and support them 
>>> explicitly.  I don't believe all the flags you can pass to 
>>> CreateProcess are compatible with the way Twisted expects 
>>> subprocesses to behave, and I am definitely sure that not all the 
>>> things you can put in STARTUPINFO are.
>>>
>> Hi,
>>
>> yes I see your point of view.
>> I deliberately passed that Win32 flags since I didn't wanted to get 
>> in details
>> of what kind of Win32 features we need or not.
>> It can indeed potentially breaks Twisted behavior if incorrect flags 
>> are passed.
>>
>> However it's just easier even if less secure.  Otherwise, you have to 
>> enumerate
>> all kind of features users want and implement them explicitly while 
>> having the
>> correct code guard to prevent from crash or incorrect behavior.
>>
>> I don't know about other Win32 developpers.  From my side, I just wanted
>> a way to prevent a console to be opened, so might be something like an
>> explicit CREATE_NO_CONSOLE flag or such.
>
>
> It's easier on the Twisted side.  It's harder on application developers,
> since they have to know if they want to pass CREATE_NO_CONSOLE or
> CREATE_NO_WINDOW or DETACHED_PROCESS or some combination or some other 
> flag
> entirely.
>
> It also makes it completely non-portable to other platforms.  It's 
> difficult
> to do anything with subprocesses cross-platform, but the goal should 
> be to
> make it possible and then easy.  Requiring Win32 flags to be passed in is
> complete capitulation.
>
> I also wonder why I have never noticed this behavior.  For example, I 
> have
> run buildslaves on Win32 and never noticed them popping up console 
> windows.
> Does this behavior differ between different version of Windows?
>

I don't thing.
What I have is a Windows SubSystem .exe (WinMain() entry point) 
launching a bunch
of Consoles Subsystem .exe (main() entry point).
Since the applications are console based, it's not surprising to see them.

DETACHED_PROCESS does the trick and console applications have to
call AllocConsole() explicitly to open a console.

Igor.




From jacob at internet24.de  Mon Aug 14 11:56:43 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Mon, 14 Aug 2006 17:56:43 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
References: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
Message-ID: <1155571003.6333.41.camel@localhost.localdomain>

> It also makes it completely non-portable to other platforms.  It's difficult
> to do anything with subprocesses cross-platform, but the goal should be to
> make it possible and then easy.  Requiring Win32 flags to be passed in is
> complete capitulation.

Actually it's not that difficult, if you have programs
that simply read stdin and write to stdout.

I'm running a some backup tool (dar) with commands/events and responses
communicated via stdin/stderr both on Unix and Windows with exactly the
same twisted code and its working nicely.

> I also wonder why I have never noticed this behavior.  For example, I
have
> run buildslaves on Win32 and never noticed them popping up console windows.
> Does this behavior differ between different version of Windows?

I also don't seem to have any problems with unwanted console processes
but that maybe because the current spawnProcess implementation
seems to copy the process creation flags from the main process, and
I'm only running that program from the console (where there is
no need to create another one) or as a Windows service
(which doesn't have a console).

Maybe the original poster is running processes that open
a new console themselves explicitly?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20060814/252b71ef/attachment.pgp 

From jarrod at vertigrated.com  Mon Aug 14 13:14:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 14 Aug 2006 13:14:31 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <20060813002950.1717.1413317178.divmod.quotient.21147@ohm>
References: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>
	<20060813002950.1717.1413317178.divmod.quotient.21147@ohm>
Message-ID: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>

On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
> >Are there any more concrete examples or tutorials of using Producers
> >and Consumers?
> >
>
> What kind of information beyond what is available in the existing producer/consumer documentation are you looking for?
>
> Jean-Paul
>

pretty much anything, the only concrete example is the FileSender and
it leaves a lot to "magic" happening, and it is only a producer.

the documentation is sort of written by someone who knows what to do
for someone who knows what to do.

-- 
If you don't know what you want, you probably need a nap.



From exarkun at divmod.com  Mon Aug 14 13:31:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 14 Aug 2006 13:31:20 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>
Message-ID: <20060814173120.1717.315578462.divmod.quotient.22830@ohm>

On Mon, 14 Aug 2006 13:14:31 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
>On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson 
>><jarrod at vertigrated.com> wrote:
>> >Are there any more concrete examples or tutorials of using Producers
>> >and Consumers?
>> >
>>
>>What kind of information beyond what is available in the existing 
>>producer/consumer documentation are you looking for?
>>
>>Jean-Paul
>
>pretty much anything, the only concrete example is the FileSender and
>it leaves a lot to "magic" happening, and it is only a producer.
>
>the documentation is sort of written by someone who knows what to do
>for someone who knows what to do.

Just name a specific example you'd like to see and I'll try to write
something up.  I don't want to pick something, write it up, and then
discover that it doesn't cover what you wanted to learn. :)

Jean-Paul



From jarrod at vertigrated.com  Mon Aug 14 22:10:38 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 14 Aug 2006 22:10:38 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <20060814173120.1717.315578462.divmod.quotient.22830@ohm>
References: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>
	<20060814173120.1717.315578462.divmod.quotient.22830@ohm>
Message-ID: <2389d4730608141910g23c7750eq9c14f34535f3d3b5@mail.gmail.com>

On 8/14/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 14 Aug 2006 13:14:31 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
> >On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson
> >><jarrod at vertigrated.com> wrote:
> >> >Are there any more concrete examples or tutorials of using Producers
> >> >and Consumers?
> >> >
> >>
> >>What kind of information beyond what is available in the existing
> >>producer/consumer documentation are you looking for?
> >>
> >>Jean-Paul
> >
> >pretty much anything, the only concrete example is the FileSender and
> >it leaves a lot to "magic" happening, and it is only a producer.
> >
> >the documentation is sort of written by someone who knows what to do
> >for someone who knows what to do.
>
> Just name a specific example you'd like to see and I'll try to write
> something up.  I don't want to pick something, write it up, and then
> discover that it doesn't cover what you wanted to learn. :)
>
> Jean-Paul
>

Ok, I will write up something and post it back to the list.

-- 
If you don't know what you want, you probably need a nap.



From jon at csh.rit.edu  Mon Aug 14 22:19:27 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:19:27 -0700
Subject: [Twisted-Python] IResource and http.Site()
Message-ID: <44E12F2F.2080108@csh.rit.edu>

I'm relatively new to Twisted, so apologies if I'm missing something
obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web with 
my own resource implementation.

It looks like my options are to either derive from http.Resource or 
implement the http.IResource interface directly.  I've decided to start 
with the latter.

The IResource interface declares three methods:

	getChildWithDefault(self, name, request)
	putChild(self, path, child)
	render(self, request)

However, parts of http.Site() (such as getResourceFor()) expect my 
object to offer additional methods (such as getChildForRequest()) which 
are not part of the interface.

My question is therefore: Is http.Site() only compatible with Resource 
(and not IResource), or should the IResource interface include some 
additional methods, such as getChildForRequest()?

Thanks!

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From jon at csh.rit.edu  Mon Aug 14 22:28:25 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:28:25 -0700
Subject: [Twisted-Python] IResource and http.Site()
In-Reply-To: <44E12F2F.2080108@csh.rit.edu>
References: <44E12F2F.2080108@csh.rit.edu>
Message-ID: <44E13149.1060209@csh.rit.edu>

Jon Parise wrote:
> I'm relatively new to Twisted, so apologies if I'm missing something
> obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web with 
> my own resource implementation.
> 
> It looks like my options are to either derive from http.Resource or 
> implement the http.IResource interface directly.  I've decided to start 
> with the latter.
> 
> The IResource interface declares three methods:
> 
>     getChildWithDefault(self, name, request)
>     putChild(self, path, child)
>     render(self, request)
> 
> However, parts of http.Site() (such as getResourceFor()) expect my 
> object to offer additional methods (such as getChildForRequest()) which 
> are not part of the interface.
> 
> My question is therefore: Is http.Site() only compatible with Resource 
> (and not IResource), or should the IResource interface include some 
> additional methods, such as getChildForRequest()?

Or perhaps Door Number 3:

Should http.Site() be updated to use the module-level 
http.getChildForRequest() instead of Resource.getChildForRequest(), as 
suggested by this code in Resource.getChildForRequest():

      def getChildForRequest(self, request):
          import warnings
          warnings.warn("Please use module level getChildForRequest.", 
DeprecationWarning, 2)
          return getChildForRequest(self, request)

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From jon at csh.rit.edu  Mon Aug 14 22:48:24 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:48:24 -0700
Subject: [Twisted-Python] IResource and http.Site()
In-Reply-To: <44E13149.1060209@csh.rit.edu>
References: <44E12F2F.2080108@csh.rit.edu> <44E13149.1060209@csh.rit.edu>
Message-ID: <44E135F8.2070604@csh.rit.edu>

Jon Parise wrote:
> Jon Parise wrote:
>> I'm relatively new to Twisted, so apologies if I'm missing something
>> obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web 
>> with my own resource implementation.
>>
>> It looks like my options are to either derive from http.Resource or 
>> implement the http.IResource interface directly.  I've decided to 
>> start with the latter.
>>
>> The IResource interface declares three methods:
>>
>>     getChildWithDefault(self, name, request)
>>     putChild(self, path, child)
>>     render(self, request)
>>
>> However, parts of http.Site() (such as getResourceFor()) expect my 
>> object to offer additional methods (such as getChildForRequest()) 
>> which are not part of the interface.
>>
>> My question is therefore: Is http.Site() only compatible with Resource 
>> (and not IResource), or should the IResource interface include some 
>> additional methods, such as getChildForRequest()?
> 
> Or perhaps Door Number 3:
> 
> Should http.Site() be updated to use the module-level 
> http.getChildForRequest() instead of Resource.getChildForRequest(), as 
> suggested by this code in Resource.getChildForRequest():
> 
>      def getChildForRequest(self, request):
>          import warnings
>          warnings.warn("Please use module level getChildForRequest.", 
> DeprecationWarning, 2)
>          return getChildForRequest(self, request)
> 

... which is what it's actually doing.  I'm so sorry - I misread 
resource.getChildForRequest() for Resource.getChildForRequest().  My 
code is causing a different but related error, and I went down the wrong 
path.

Apologies for jumping the gun on this one!  It must be the heat. =)

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From w.richert at gmx.net  Tue Aug 15 04:52:53 2006
From: w.richert at gmx.net (Willi Richert)
Date: Tue, 15 Aug 2006 10:52:53 +0200
Subject: [Twisted-Python] Is Twisted adequate for usage in reactive robots?
Message-ID: <200608151052.53360.w.richert@gmx.net>

Hi Twisted developers,

for our soccer robot we are evaluating moving away from Java for the high 
level behavior code in parts to Python. At the moment we have a bunch of Java 
threads that listen at the various comm. channels for incoming and outgoing 
messages and pass them to the main Java processing thread.

We plan to reimplement all the basic behavior stuff (move to, avoid, ...) that 
returns abstract movement commands in Python. For that the Python process has 
to communicate with a bunch of processes (particle filter, etc.) using our 
own robotics optimized message format (the same format is used to communicate 
using TCP/IP, CAN, serial). After I've read a bunch of success stories I 
thought that maybe Twisted could be used to abstract all the gory low-level 
network details. Would that be advisable for a highly reactive robot? The 
main loop of the Python process would have to run at 50Hz. Longer taking 
calculation process are processed in a separate thread. Is there any 
comparison regarding asynchronous and thread execution/latency/... speeds?

Regards,
wr



From Marcin.Kasperski at softax.com.pl  Tue Aug 15 06:36:16 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 15 Aug 2006 12:36:16 +0200
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
Message-ID: <44E1A3A0.6070205@softax.com.pl>

Not an exact question, but rather 'searching for ideas'.

I have some twisted app, which uses more memory than I would like it to.
I tried analysing it a bit (mainly using gc module object list and 
enumerating
items of different types) and it seem to me that there is something 
'twistedish'
in it. My application uses in a lot of places generator idiom 
(functions/methods
which yield wrapped with defer.deferredGenerator). And, as there seem to be
a lot of anonymous functions and tuples allocated, I suspect that maybe 
those
functions, deferreds and related params and closures live longer then I 
would like
to.

Any ideas of what could I do to track it down? In particular, is it 
possible to somehow
use introspection to find which lambdas and deferreds are allocated 
while the program
is running? Are there any suggestions on how to code deferredGenerators 
to reduce
allocated memory (maybe, for instance, I should try to turn local 
variables into
object attributes, or opposite, or ...)

Also, if anybody could me point to any interesting resources about 
tracking python
momory usage, I would be grateful.

Tried googling for some time, but apart of zope trackRef I did not found 
anything.




From nico at tekNico.net  Tue Aug 15 07:30:55 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 15 Aug 2006 13:30:55 +0200
Subject: [Twisted-Python] Re: Reducing memory footprint of twisted app?
In-Reply-To: <44E1A3A0.6070205@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
Message-ID: <44E1B06F.8060203@tekNico.net>

Marcin Kasperski wrote:
> Not an exact question, but rather 'searching for ideas'.
> 
> I have some twisted app, which uses more memory than I would like it to.
> ...
> Any ideas of what could I do to track it down?
> ...
> Also, if anybody could me point to any interesting resources about
> tracking python momory usage, I would be grateful.

Here are a couple of possibly interesting tools (I don't know whether they
work with Twisted):

PySizer - a memory profiler for Python
http://pysizer.8325.org/

Heapy
http://guppy-pe.sourceforge.net/#Heapy


-- 
Nicola Larosa - http://www.tekNico.net/

In the '70s I was a huge fan of various bands; now I'm a huge fan
of software. I've gone from gazing at record covers to gazing at
online help files, which is a little sick, now that I think about it.
 -- Wayne Lytle, March 2006




From andrew-twisted at puzzling.org  Tue Aug 15 08:54:25 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 15 Aug 2006 22:54:25 +1000
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <44E1A3A0.6070205@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
Message-ID: <20060815125425.GA7487@steerpike.home.puzzling.org>

On Tue, Aug 15, 2006 at 12:36:16PM +0200, Marcin Kasperski wrote:
> Not an exact question, but rather 'searching for ideas'.
> 
> I have some twisted app, which uses more memory than I would like it to.  I
> tried analysing it a bit (mainly using gc module object list and enumerating
> items of different types) and it seem to me that there is something
> 'twistedish' in it. My application uses in a lot of places generator idiom
> (functions/methods which yield wrapped with defer.deferredGenerator). And, as
> there seem to be a lot of anonymous functions and tuples allocated, I suspect
> that maybe those functions, deferreds and related params and closures live
> longer then I would like to.

Well, objects in Python will live as long as they are referenced.  If you have
large objects (or many objects) referenced from a function scope or object
that's still live, then of course the referenced objects will still be live too.

> Any ideas of what could I do to track it down? In particular, is it possible
> to somehow use introspection to find which lambdas and deferreds are allocated
> while the program is running? Are there any suggestions on how to code
> deferredGenerators to reduce allocated memory (maybe, for instance, I should
> try to turn local variables into object attributes, or opposite, or ...)

Object attributes would tend to be worse than locals, because typically objects
(and thus their attributes) outlive a function's scope.

As a thought experiment, if you transform a generator function into a class,
moving the state from locals in the generator to instance variables of the
class, what have you changed about the lifetimes of those objects?  Answer:
nothing.  If some of those generator locals become locals in the __next__ and
other methods of the class, but *not* instance variables, then those lifetimes
will be shorter -- but you can achieve exactly the same effect by adding "del
foo" or "foo = None" statements to the original generator function.

Thinking about the problem as somehow inherent to generator functions (and by
extension, deferredGenerator), is a red herring.

The best idea I can offer you is this: first find out what's taking the memory
before you try to change your code to fix it.  Blindly rewriting some code in a
different style without understanding why (or even if) it's taking up so much
memory will get you nowhere.  Even if you think you have a pretty good guess,
you're probably wrong (at least, I find that's what happens to me when I try to
optimise based only on guesses).

> Also, if anybody could me point to any interesting resources about tracking
> python momory usage, I would be grateful.
> 
> Tried googling for some time, but apart of zope trackRef I did not found 
> anything.

I use http://twistedmatrix.com/users/spiv/countrefs.py occasionally when I'm
trying to figure out what's using memory in a Python program.  It uses the ref
count on class/type objects as an approximation of the number of instances;
which is close enough.  If there are 100000 references to a class, it's almost
certain that at least 999990 of them are instances of that class.

The other thing to do is to reproduce the problem as simply as possible.  Do you
have a test suite?  Does the memory usage get too high during the test run?

Also, can you reproduce it just by starting the web server?  If so, try running
just half the code involved to start it up -- still see it?  And so on.

Or, if it only consumes unacceptably large amounts of memory after serving 10000
requests, write a script to issue 10000 requests, change the server to only do
first half the processing, hit it with 10000 requests, and you'll see if the
problem is in the first half or the second half.

You get the idea.  Reproduce your problem, then simplify things as much as
possible until you can analyse it.

I hope these ideas help you.

-Andrew.




From glyph at divmod.com  Tue Aug 15 08:57:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 15 Aug 2006 08:57:09 -0400
Subject: [Twisted-Python] Is Twisted adequate for usage in reactive robots?
In-Reply-To: <200608151052.53360.w.richert@gmx.net>
Message-ID: <20060815125709.1717.229527819.divmod.quotient.23274@ohm>

On Tue, 15 Aug 2006 10:52:53 +0200, Willi Richert <w.richert at gmx.net> wrote:

>The main loop of the Python process would have to run at 50Hz. Longer taking
>calculation process are processed in a separate thread. Is there any
>comparison regarding asynchronous and thread execution/latency/... speeds?

In a nutshell, "asynchronous is faster", but that's not the whole story.  ;-).

You're not just changing from an asynchronous framework to a threaded one; you're changing all your code (you are considering rewriting a bunch of existing Java code in Python), your language (Python's semantics are less efficiency-oriented than Java), your runtime (the Python VM is slow) and presumably some other things too.  Nothing can substitute for some good old-fashioned benchmarking for your particular application.

However, 50Hz is not very fast.  On "reasonable" hardware and with a "reasonable" application, (where "reasonable" is somewhat circularly defined here), Twisted should be able to do that without a hiccup.



From glyph at divmod.com  Tue Aug 15 22:29:33 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 15 Aug 2006 22:29:33 -0400
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: 0
Message-ID: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>

In an attempt to clean out some old cruft from the tracker, we're starting to play a virtual game of "hot potato", highlighting the least responsive developer in the Twisted dev team, by using this report:

    http://twistedmatrix.com/trac/report/13

It's currently a fixture of the IRC channel topic; maybe we'll make it more interactive in the future.

Currently the winner (or, rather, the loser) is Dave Peticolas, the closest thin to a maintainer that twisted.enterprise has.  We haven't heard from him in quite a while.

If you're still on this list, Mr. Peticolas, would you please do Andrew Bennetts the honor of passing the target of our collective ridicule to him by updating ticket #303? :)

If you're no longer interested in working on Twisted we'll start reassigning those tickets still left in the tracker to others.



From Marcin.Kasperski at softax.com.pl  Wed Aug 16 04:57:04 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Wed, 16 Aug 2006 10:57:04 +0200
Subject: [Twisted-Python] Re: Reducing memory footprint of twisted app?
In-Reply-To: <44E1B06F.8060203@tekNico.net>
References: <44E1A3A0.6070205@softax.com.pl> <44E1B06F.8060203@tekNico.net>
Message-ID: <200608161057.05225.Marcin.Kasperski@softax.com.pl>

> PySizer - a memory profiler for Python
> http://pysizer.8325.org/
> Heapy
> http://guppy-pe.sourceforge.net/#Heapy

Both seem interesting. Thanks.



From Marcin.Kasperski at softax.com.pl  Wed Aug 16 05:00:44 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Wed, 16 Aug 2006 11:00:44 +0200
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <20060815125425.GA7487@steerpike.home.puzzling.org>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
Message-ID: <200608161100.45045.Marcin.Kasperski@softax.com.pl>

Thanks Andrew for valuable remarks.




From dave at krondo.com  Wed Aug 16 22:01:13 2006
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 16 Aug 2006 19:01:13 -0700
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>
References: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>
Message-ID: <44E3CDE9.1060308@krondo.com>

I won! I won! Oh.

Ticket updated, sir.

And while I would love to work more on Twisted, I haven't been able
to find the time. The lame lament you hear over and over, I know.

If anyone is interested in maintaining enterprise, I would be happy to
help as much as I can, or just step quietly aside as you like. I know it
pretty well, we use it all the time where I work.

But I'm happy to wear the hat if nobody else wants it and the next time one
of my tickets bubbles up to the top of the wall of shame, and it isn't a 
'dontfix',
I'll try to carve out some time to actually work on it.

dave


glyph at divmod.com wrote:
> In an attempt to clean out some old cruft from the tracker, we're 
> starting to play a virtual game of "hot potato", highlighting the 
> least responsive developer in the Twisted dev team, by using this report:
>
>    http://twistedmatrix.com/trac/report/13
>
> It's currently a fixture of the IRC channel topic; maybe we'll make it 
> more interactive in the future.
>
> Currently the winner (or, rather, the loser) is Dave Peticolas, the 
> closest thin to a maintainer that twisted.enterprise has.  We haven't 
> heard from him in quite a while.
>
> If you're still on this list, Mr. Peticolas, would you please do 
> Andrew Bennetts the honor of passing the target of our collective 
> ridicule to him by updating ticket #303? :)
>
> If you're no longer interested in working on Twisted we'll start 
> reassigning those tickets still left in the tracker to others.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From lists at knoggin.com  Thu Aug 17 06:47:56 2006
From: lists at knoggin.com (Norman Harman)
Date: Thu, 17 Aug 2006 03:47:56 -0700
Subject: [Twisted-Python] using stdin with twisted
Message-ID: <44E4495C.6020708@knoggin.com>

I have a program that gets apache log on stdin.  I would like to add a 
web interface and some RPC stuff to it.

I imagine something like protocols.basic.LineReceiver is what I want. 
But I can't figure out what ClientFactory to use or ???

I can find very little info on doing this.  The stdio package is 
depreciated and the stdin.py example does not run.

thanks,
norm



From exarkun at divmod.com  Thu Aug 17 09:04:24 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 09:04:24 -0400
Subject: [Twisted-Python] using stdin with twisted
In-Reply-To: <44E4495C.6020708@knoggin.com>
Message-ID: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>

On Thu, 17 Aug 2006 03:47:56 -0700, Norman Harman <lists at knoggin.com> wrote:
>I have a program that gets apache log on stdin.  I would like to add a web 
>interface and some RPC stuff to it.
>
>I imagine something like protocols.basic.LineReceiver is what I want. But I 
>can't figure out what ClientFactory to use or ???
>
>I can find very little info on doing this.  The stdio package is depreciated 
>and the stdin.py example does not run.

The twisted.internet.stdio package isn't deprecated (or depreciated, which
means something else).  You should use it if you want to talk to stdin in
a Twisted program.

The stdin.py example runs fine for me.  In what way is it broken for you?

Jean-Paul



From mike at mkp.ca  Thu Aug 17 08:27:27 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 17 Aug 2006 08:27:27 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D4C2D2.3060603@libero.it>
References: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
	<44D4C2D2.3060603@libero.it>
Message-ID: <200608170827.27545.mike@mkp.ca>

On Saturday 05 August 2006 12:09, Manlio Perillo wrote:
> Ok, thanks.
> But this means that I cannot use defer.fail to report an exception
> directly.
>
> As an example
>
> if a < 0:
>   return defer.fail(RuntimeError("must be non negative"))
>
>
> does not print a traceback.

Exception instances don't contain a traceback unless they have been raised.  
Below are three tests that return deferreds that result in a traceback and 
custom error message being printed.  Seems like there's probably a better 
way, but this has always been clear enough that I haven't looked for it.

Mike.

----
"""The most perverse TestCase I've ever written.  Failure is an error,
an error is success, and success is failure.
"""

from twisted.trial.unittest import TestCase
from twisted.python.failure import Failure
from twisted.internet.defer import Deferred, fail


class FailExample(TestCase):
    def test_implicitTBfromDeferred(self):
        d = Deferred()
        try:
            raise RuntimeError("Fear of success")
        except:
            d.errback()
        return d

    def test_implicitTBfromFail(self):
        try:
            raise RuntimeError("This isn't happening")
        except:
            return fail()

    def test_explicitTBfromFailure(self):
        d = Deferred()
        f = None
        try:
            raise RuntimeError("Hair on fire")
        except:
            f = Failure()
        d.errback(f)
        return d




From igor at mekensleep.com  Thu Aug 17 09:50:22 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Thu, 17 Aug 2006 15:50:22 +0200
Subject: [Twisted-Python] Killing a process
Message-ID: <44E4741E.6050200@mekensleep.com>

Hi,

I wondered last time what is the best way under Win32 to kill a process 
launched with:
reactor.spawnProcess()

os.kill() as documented here:
http://docs.python.org/lib/os-process.html#l2h-1676
only works under Macintosh and Unix.

Furthermore, spawnProcess() doesn't return any handle, process ID or 
anything
to deal with.

Any help or idea would be really appreciated,

Igor.




From exarkun at divmod.com  Thu Aug 17 10:09:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 10:09:17 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <44E4741E.6050200@mekensleep.com>
Message-ID: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>

On Thu, 17 Aug 2006 15:50:22 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>Hi,
>
>I wondered last time what is the best way under Win32 to kill a process 
>launched with:
>reactor.spawnProcess()
>
>os.kill() as documented here:
>http://docs.python.org/lib/os-process.html#l2h-1676
>only works under Macintosh and Unix.
>
>Furthermore, spawnProcess() doesn't return any handle, process ID or 
>anything
>to deal with.
>
>Any help or idea would be really appreciated,
>
>Igor.
>

spawnProcess returns an IProcessTransport, which has a signalProcess
method, which you can pass 'KILL' to end the process.

Process termination with Twisted on Windows is unreliable, though, so
whether or not it will work in your specific case is uncertain.

Jean-Paul



From manlio_perillo at libero.it  Thu Aug 17 11:40:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 17 Aug 2006 17:40:18 +0200
Subject: [Twisted-Python] Killing a process
In-Reply-To: <44E4741E.6050200@mekensleep.com>
References: <44E4741E.6050200@mekensleep.com>
Message-ID: <44E48DE2.2030406@libero.it>

Igor Kravtchenko ha scritto:
> Hi,
> 
> I wondered last time what is the best way under Win32 to kill a process
> launched with:
> reactor.spawnProcess()
> 
> os.kill() as documented here:
> http://docs.python.org/lib/os-process.html#l2h-1676
> only works under Macintosh and Unix.
> 
> Furthermore, spawnProcess() doesn't return any handle, process ID or
> anything
> to deal with.
> 
> Any help or idea would be really appreciated,
> 

Try with http://svn.berlios.de/svnroot/repos/pykill32/trunk/.

It uses an hack (create a thread on the remote process) but it seems to
work fine, at least with Python process and Twisted.


Regards  Manlio Perillo



From foom at fuhm.net  Thu Aug 17 12:02:43 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Aug 2006 12:02:43 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>
References: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>
Message-ID: <F9E08ABE-6A9B-406B-848B-4AA8771832F7@fuhm.net>

On Aug 17, 2006, at 10:09 AM, Jean-Paul Calderone wrote:
> Process termination with Twisted on Windows is unreliable, though, so
> whether or not it will work in your specific case is uncertain.

I don't think that is true. TerminateProcess works fine to kill a  
single process. What isn't supported is killing a processes group, or  
asking a process politely to quit.

On Aug 17, 2006, at 11:40 AM, Manlio Perillo wrote:
> Try with http://svn.berlios.de/svnroot/repos/pykill32/trunk/.
>
> It uses an hack (create a thread on the remote process) but it  
> seems to
> work fine, at least with Python process and Twisted.

That shouldn't be necessary if you just want to kill dead the process.

James



From glyph at divmod.com  Thu Aug 17 13:30:01 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 17 Aug 2006 13:30:01 -0400
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: <44E3CDE9.1060308@krondo.com>
Message-ID: <20060817173001.1717.789039488.divmod.quotient.24065@ohm>

On Wed, 16 Aug 2006 19:01:13 -0700, Dave Peticolas <dave at krondo.com> wrote:
>I won! I won! Oh.
>
>Ticket updated, sir.

Thanks a lot.

>And while I would love to work more on Twisted, I haven't been able
>to find the time. The lame lament you hear over and over, I know.

You mean the lament I _make_ over and over...

>If anyone is interested in maintaining enterprise, I would be happy to
>help as much as I can, or just step quietly aside as you like. I know it
>pretty well, we use it all the time where I work.

This seems pretty unlikely; I've heard no interest in anyone maintaining it or adding any features to it for a while.

On the other hand, it doesn't really *need* any substantial feature development; but an occasional "hey what's up" from a maintainer would be good.  It would also be nice if it had a bit more in the way of docstrings (and I think that ed suimonen will still buy you a hundred-dollar beer if you add a lot of them...)

>But I'm happy to wear the hat if nobody else wants it and the next time one
>of my tickets bubbles up to the top of the wall of shame, and it isn't a 
>'dontfix',
>I'll try to carve out some time to actually work on it.

Thanks again.  It's good to hear you're still around.



From exarkun at divmod.com  Thu Aug 17 13:36:24 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 13:36:24 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <F9E08ABE-6A9B-406B-848B-4AA8771832F7@fuhm.net>
Message-ID: <20060817173624.1717.1951135295.divmod.quotient.24067@ohm>

On Thu, 17 Aug 2006 12:02:43 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Aug 17, 2006, at 10:09 AM, Jean-Paul Calderone wrote:
>>Process termination with Twisted on Windows is unreliable, though, so
>>whether or not it will work in your specific case is uncertain.
>
>I don't think that is true. TerminateProcess works fine to kill a  single 
>process. What isn't supported is killing a processes group, or  asking a 
>process politely to quit.
>

Observations disagree.

Jean-Paul



From agtilden at yahoo.com  Thu Aug 17 16:33:16 2006
From: agtilden at yahoo.com (Andrew Smith)
Date: Thu, 17 Aug 2006 13:33:16 -0700 (PDT)
Subject: [Twisted-Python] Producers / Consumers and more examples tutorials?
	(Example Request)
Message-ID: <20060817203316.58897.qmail@web38803.mail.mud.yahoo.com>

>Just name a specific example you'd like to see and
I'll try to write
>something up.  I don't want to pick something, write
it up, and then
>discover that it doesn't cover what you wanted to
learn. :)
>Jean-Paul

How about this scenario:

I make an HTTP request and expect to receive an XML
document back. The XML document is a container for
discreet items.

It might look something like this: 

<items>
  <item>
    <content>foo</content>
  </item>
  <item>
    <content>bar</content>
  </item>
</items>

I don't know how big this document will be or how long
it will take to retrieve so I would like to present
myself as a producer of individual item elements and
let clients consume them as they become available.
Does this fit the twisted Producer/Consumer paradigm? 

-a.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From lists at knoggin.com  Thu Aug 17 20:24:56 2006
From: lists at knoggin.com (Norman Harman)
Date: Thu, 17 Aug 2006 17:24:56 -0700
Subject: [Twisted-Python] using stdin with twisted
In-Reply-To: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>
References: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>
Message-ID: <44E508D8.4060307@knoggin.com>

Jean-Paul Calderone wrote:
> On Thu, 17 Aug 2006 03:47:56 -0700, Norman Harman <lists at knoggin.com> 
> wrote:
>> I have a program that gets apache log on stdin.  I would like to add a 
>> web interface and some RPC stuff to it.
>>
>> I imagine something like protocols.basic.LineReceiver is what I want. 
>> But I can't figure out what ClientFactory to use or ???
>>
>> I can find very little info on doing this.  The stdio package is 
>> depreciated and the stdin.py example does not run.
> 
> The twisted.internet.stdio package isn't deprecated (or depreciated, which
> means something else).  You should use it if you want to talk to stdin in
> a Twisted program.

http://twistedmatrix.com/documents/current/api/twisted.internet.stdio.html 
API Stability: unstable (pending deprecation in favor of a reactor-based 
API)

I see that I jumped the gun a bit.  It was late and when I saw 
unstable...deprecation I went looking at reactor stuff and got lost in a 
maelstrom of confusion.

> The stdin.py example runs fine for me.  In what way is it broken for you?
I got a traceback (but that must have been my error).  Downloading a 
fresh copy it runs but never echo's instead what I type shows up at 
console prompt after I ctrl-C python.  It's probably win2000 cmd.exe's 
fault.
The production system is Linux so use twisted.stdio on that.

thanks,
norm



From jarrod at vertigrated.com  Thu Aug 17 21:37:39 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 17 Aug 2006 21:37:39 -0400
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <200608161100.45045.Marcin.Kasperski@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
	<200608161100.45045.Marcin.Kasperski@softax.com.pl>
Message-ID: <2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>

one of the things we did, and saw an approximately 30% REDUCTION in
memory foot print was add ing __slots__ definations to all he objects
we were creating in graphs.

This isn't twisted specific, so it should apply to any python application.

Granted we have hundreds of thousands of objects in the graph. But it
did make a noticiable change in the foot print.



From andrew-twisted at puzzling.org  Fri Aug 18 01:03:04 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 18 Aug 2006 15:03:04 +1000
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
	<200608161100.45045.Marcin.Kasperski@softax.com.pl>
	<2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>
Message-ID: <20060818050304.GA23698@steerpike.home.puzzling.org>

On Thu, Aug 17, 2006 at 09:37:39PM -0400, jarrod roberson wrote:
> one of the things we did, and saw an approximately 30% REDUCTION in
> memory foot print was add ing __slots__ definations to all he objects
> we were creating in graphs.
> 
> This isn't twisted specific, so it should apply to any python application.
> 
> Granted we have hundreds of thousands of objects in the graph. But it
> did make a noticiable change in the foot print.

Right, __slots__ can be helpful.

Some more advice that isn't Twisted specific:

It's very helpful to understand which objects are taking up the memory.  If you
know that, not can have a good idea if __slots__  will actually help before you
clutter your code with them, but you can perhaps realise that you shouldn't even
have 100000 simultaneous Request objects when you only have 1000 connections at
the time -- in my experience helping people on IRC, it's quite common that
there's accidentally a reference being kept to every request object (or
similar), thus causing memory leaks despite Python's garbage collection.  Saving
30% of memory on 100000 objects isn't anywhere near as good as saving 99% of
those objects from being needed in the first place!

If you understand what the culprits are, you can also decide that not only are
__slots__ helpful, you can also analyse those objects to figure out if they are
keeping more state than they really need.

And in fact, you can try speculatively adding __slots__ to a type of object as
an indirect way to see if a particular type is a major contributor to your
memory use or not -- if adding __slots__ to Foo doesn't help, there probably
aren't a significant number of instances contributing to the memory use.

Basically, I really strongly think people should *understand* their performance
issues so they can fix them better, rather than just blindly doing the
equivalent of "gcc -O9" and considering it solved.  It depends on the available
time and requirements, of course; if a quick band-aid is all that's needed, then
fair enough.  But I find it usually pays off to throughly understand what you're
fixing.

That said, if you need hundreds of thousands of objects in memory, __slots__ is
one of the simplest ways to improve memory consumption I know of :)

-Andrew.




From manlio_perillo at libero.it  Fri Aug 18 05:02:22 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 18 Aug 2006 11:02:22 +0200
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
Message-ID: <44E5821E.3010805@libero.it>

Hi.

Is it possible (at least in principle) to serialize objects in JSON and
to do requests via HTTP?

That is, to make possible to use Python functions and objects via
JavaScript, using Perspective Broker.


Regards  Manlio Perillo



From radix at twistedmatrix.com  Fri Aug 18 12:41:15 2006
From: radix at twistedmatrix.com (radix at twistedmatrix.com)
Date: Fri, 18 Aug 2006 16:41:15 -0000
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
Message-ID: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>

On 09:02 am, manlio_perillo at libero.it wrote:
>Hi.
>
>Is it possible (at least in principle) to serialize objects in JSON and
>to do requests via HTTP?
>
>That is, to make possible to use Python functions and objects via
>JavaScript, using Perspective Broker.

Please post to twisted-web about web-related questions in the future.

No, PB does not know how to talk HTTP or JSON. You can still use twisted.web to implement a web server that can speak JSON to your Javascript code.  Also take a look at Divmod's Athena, part of Nevow, which implements two-way communication with web pages with an API similar to PB's. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060818/54b407c4/attachment.htm 

From manlio_perillo at libero.it  Fri Aug 18 15:13:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 18 Aug 2006 21:13:15 +0200
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
In-Reply-To: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
References: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
Message-ID: <44E6114B.8050608@libero.it>

radix at twistedmatrix.com ha scritto:
> On 09:02 am, manlio_perillo at libero.it wrote:
>>Hi.
>>
>>Is it possible (at least in principle) to serialize objects in JSON and
>>to do requests via HTTP?
>>
>>That is, to make possible to use Python functions and objects via
>>JavaScript, using Perspective Broker.
> 
> Please post to twisted-web about web-related questions in the future.
> 

Well, this is a specific question about Perspective Broker.

> No, PB does not know how to talk HTTP or JSON. 

Yes, I know.
I was just curious to know if PB is extensible so that I can change the
serializer and the transport layer.


Thanks and regards  Manlio Perillo



From ldanielburr at mac.com  Fri Aug 18 15:44:08 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri, 18 Aug 2006 14:44:08 -0500
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
In-Reply-To: <44E6114B.8050608@libero.it>
References: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
	<44E6114B.8050608@libero.it>
Message-ID: <op.tehvruao3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Fri, 18 Aug 2006 14:13:15 -0500, Manlio Perillo  
<manlio_perillo at libero.it> wrote:

> radix at twistedmatrix.com ha scritto:
>> On 09:02 am, manlio_perillo at libero.it wrote:
>>> Hi.
>>>
>>> Is it possible (at least in principle) to serialize objects in JSON and
>>> to do requests via HTTP?
>>>
>>> That is, to make possible to use Python functions and objects via
>>> JavaScript, using Perspective Broker.
>>
>> Please post to twisted-web about web-related questions in the future.
>>
>
> Well, this is a specific question about Perspective Broker.
>
>> No, PB does not know how to talk HTTP or JSON.
>
> Yes, I know.
> I was just curious to know if PB is extensible so that I can change the
> serializer and the transport layer.
>

Perhaps I am being overly particular, but HTTP isn't a transport layer; it  
is an
application protocol.  PB is also an application protocol, and it is one  
with
very different characteristics than HTTP, so you question doesn't really  
make
sense, as asked.

That said, what you are looking for (callRemote semantics layered over  
HTTP)
does exist: Nevow.Athena gives you exactly what you want.  It uses JSON for
serialization, provides callRemote semantics, and uses HTTP.

It isn't an exact match with PB, of course, but I think it is more than
adequate for the uses to which it is put

Hope this helps,

L. Daniel Burr



From exarkun at twistedmatrix.com  Sun Aug 20 01:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Aug 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1156050302.28.921218600@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-13 through 2006-08-20
Bugs opened: 13    Bugs closed: 15  Total open bugs: 693 (-2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -2  |Highest:  -5          |Conch:     -3          
|Enhancement:  -1  |High:     +0          |Core:      +1          
|Task:         +2  |Normal:   +4          |Mail:      -2          
                                          |Pb:        +1          
                                          |Pydoctor:  +0          
                                          |Trial:     +1          
                                          |Web:       +0          
                                          |Words:     +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2002] t.i.unix.Port fails on bound incoming unix sockets (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/2002

[#2003] pop3 tests don't cover both deprecated and undeprecated IMailbox behavior codepaths (opened by exarkun) (CLOSED, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/2003

                    ===== High =====
[#1999] Move newpb out of trunk into a branch or separate package (opened by exarkun)
    task            pb         http://twistedmatrix.com/trac/ticket/1999

                    ===== Normal =====
[#1995] Rework t.w.p.jabber.component to work with initializers. (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1995

[#1996] Remove repr() and getDelayedCalls() usage from twisted.web.test.test_web.SessionTest.test_delayedCallCleanup (opened by exarkun)
    task            web        http://twistedmatrix.com/trac/ticket/1996

[#1997] signals handled via callFromThread, yet the reactor still drops into select() (opened by wingo)
    defect          core       http://twistedmatrix.com/trac/ticket/1997

[#1998] pydoctor tries to parse a dotfile (opened by dreid) (CLOSED, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/1998

[#2000] twisted.test.test_process.TwoProcessesPosix.tearDown doesn't account for failure to launch processes (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2000

[#2001] Make sure every todo'd test has an open ticket (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2001

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004

[#2005] trial twisted/mail/ traces back, omitting trailing / does not. (opened by jerub)
    defect          trial      http://twistedmatrix.com/trac/ticket/2005

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004



Closed Bugs
______________________
                    ===== Highest =====
[#1984] Microdom drops the first character in an "extremely lenient" document (opened by radix, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1984

[#1988] Cannot use a DeferredList to retrieve several POP3 messages (opened by kendrew, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1988

[#1638] provide a way for test collector to find custom test suites (opened by acapnotic, closed by acapnotic, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1638

[#1967] twisted.conch.telnet dies in conjunction with PuTTY (opened by sam, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1967

[#1976] twisted.internet.ssl.Certificate.peerFromTransport can return invalid Certificates (opened by exarkun, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1976

[#1938] web.Session.checkExpired and web.Site.makeSession do not keep DelayedCall handles (opened by acapnotic, closed by exarkun, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1938

[#2003] pop3 tests don't cover both deprecated and undeprecated IMailbox behavior codepaths (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/2003

                    ===== High =====
[#1991] amp has problems with mixed case keyword args (opened by scmikes, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1991

                    ===== Normal =====
[#1691] POP3Client can't deal with the continued commands request (opened by tomoyuki, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1691

[#1998] pydoctor tries to parse a dotfile (opened by dreid, closed by mwh, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/1998

[#303 ] [patch] Persistent transactions for adbapi (opened by grib, closed by davep, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/303

[#663 ] stop using thread id's as connection id's (opened by davep, closed by davep, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/663

[#74  ] Document new logging infrastructure, formalize standards for keywords and namespaces (opened by itamarst, closed by PenguinOfDoom, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/74

[#1851] Svn  python 2.4  Suse 9, 64 bit (opened by scmikes, closed by scmikes, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1851

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel, closed by exarkun, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004





From stephen at thorne.id.au  Sun Aug 20 19:32:50 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon, 21 Aug 2006 09:32:50 +1000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1156050302.28.921218600@twistedmatrix.com
Message-ID: <20060820233250.1717.1112013798.divmod.quotient.27086@ohm>

On Sun, 20 Aug 2006 05:05:02 -0000, exarkun at twistedmatrix.com wrote:
>Bug summary
>______________________
>Summary for 2006-08-13 through 2006-08-20
>Bugs opened: 13    Bugs closed: 15  Total open bugs: 693 (-2)
>
>|== Type Changes   |== Priority Changes   |== Component Changes
>|Defect:       -2  |Highest:  -5          |Conch:     -3
>|Enhancement:  -1  |High:     +0          |Core:      +1
>|Task:         +2  |Normal:   +4          |Mail:      -2
>                                          |Pb:        +1
>                                          |Pydoctor:  +0
>                                          |Trial:     +1
>                                          |Web:       +0
>                                          |Words:     +1

Yay! Go twisted!

-5 Highest priority bugs. -2 Defects, -2 Total open bugs! Excellent news!

Thanks to everyone who has been squishing bugs. Your attention to the Ultimate Quality is appreciated. :)

Regards, 
Stephen Thorne



From exarkun at divmod.com  Tue Aug 22 10:55:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 22 Aug 2006 10:55:27 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r17913 - Merge forward
In-Reply-To: <E1GFQPO-0004kx-00@wolfwood>
Message-ID: <20060822145527.1717.478337284.divmod.quotient.28704@ohm>

On Tue, 22 Aug 2006 01:10:46 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>
>Modified: branches/cleantests-1883-2/twisted/web/test/test_distrib.py
>==============================================================================
>--- branches/cleantests-1883-2/twisted/web/test/test_distrib.py	(original)
>+++ branches/cleantests-1883-2/twisted/web/test/test_distrib.py	Tue Aug 22 01:10:44 2006
>@@ -15,16 +15,37 @@
>                 self.logFile.close()
>             del self.logFile
>
>+
>+def fireOnClose(protocol):
>+    d = defer.Deferred()
>+    oldConnectionLost = protocol.connectionLost
>+    def connectionLost(*a):
>+        oldConnectionLost(*a)
>+        d.callback(None)
>+    protocol.connectionLost = connectionLost
>+    return d
>+
>+
>+class PBServerFactory(pb.PBServerFactory):
>+    onClose = None
>+
>+    def buildProtocol(self, addr):
>+        proto = pb.PBServerFactory.buildProtocol(self, addr)
>+        self.onClose = fireOnClose(proto)
>+        return proto

Would it make sense to use notifyOnDisconnect here, instead of all this
custom scaffolding?

Jean-Paul



From hsanches at gmail.com  Wed Aug 23 09:32:53 2006
From: hsanches at gmail.com (=?ISO-8859-1?Q?Herm=EDnio_Miguel_Sanches?=)
Date: Wed, 23 Aug 2006 14:32:53 +0100
Subject: [Twisted-Python] Connect to a Twisted Perspective Broker from a VB
	application (using a python com server InProc)
Message-ID: <f28267c0608230632o2f5dec7cu9a7d9d16b0b7fb1d@mail.gmail.com>

Hi,

I need to connect to a PerspectiveBroker from a VB application.
I did it with a com server in python, which works fine when the com client
is also python code.
All the calls must be synchronous to the com server.
When Calling from VB it works fine every time if the function used from the
com server don't use the reactor.

The problem is that when I call (from the VB com client) the functions that
uses the twisted reactor it performs well the first time but for the the
second time it's called, it stalls. I have to kill the vb executable.
The function from the test code is: testBroker()
Please can you help me to sheed some light on this? Should I do it another
way? Bellow is the code that I am using.

Many thanks

Miguel

----------------------------------------------------
The code for the python com client :

import win32com.client
object = win32com.client.Dispatch("Python.TestServer")
print object.Hello("test")
print object.Hello2("test")
print object.testBroker()
print object.gettestresult()

----------------------------------------------------
The code for the VB com client:
Private Sub TestComServer()
 Dim y As Object
 Set y = CreateObject("Python.TestServer")
 MsgBox y.gettestresult
 MsgBox y.testBroker()
 MsgBox y.gettestresult()
 Set y = Nothing
End Sub

----------------------------------------------------
the code for the python comserver:

#testcom.py
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import sys
import time
import socket

class HelloWorld:
    _reg_clsid_ = "{7CC9F362-486D-11D1-BB48-0000E838A65F}"
    _reg_desc_ = "Python Test COM Server"
    _reg_progid_ = "Python.TestServer"
    _public_methods_ = ['testBroker','gettestresult']
    def __init__(self):
        self.sText='sText10'
        self.reactorFinished=False
    def get_ip(self):
        addrs = socket.getaddrinfo(socket.gethostname(), None)
        addr = addrs[0]
        IPaddr = addr[4][0]
        return IPaddr #"localhost"

    def get_ip(self):
        return "localhost"

    def get_port(self):
        return 8786

    def DealWithReactor(self):
        now = time.localtime(time.time())
        factory = pb.PBClientFactory()
        reactor.connectTCP(self.get_ip(), self.get_port(), factory)
        d = factory.getRootObject()
        strt="hello network "  + ' ' + time.asctime(now)
        d.addCallback(lambda object: object.callRemote("echo", strt))
        d.addErrback(lambda reason: 'error: '+str(reason.value))
        d.addCallback(self.StopReactor)
        reactor.run()

    def StopReactor(self,obj):
        reactor.stop()
        self.reactorFinished=True
        self.sText=str(obj)
        return obj

    def testBroker(self):
        self.reactorFinished=False
        self.DealWithReactor()
        while self.reactorFinished==False:
            pass
        return 'OK testBroker22 self.reactorFinished:' + str(
self.reactorFinished)

    def gettestresult(self):
        return "gettestresult:" + str(self.sText)

if __name__=='__main__':
    import win32com.server.register
    win32com.server.register.UseCommandLine(HelloWorld)
    h=HelloWorld()
    print(h.gettestresult())
    print(h.testBroker())
    print(h.gettestresult())
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060823/485bc1ff/attachment.htm 

From hsanches at gmail.com  Wed Aug 23 09:38:11 2006
From: hsanches at gmail.com (=?ISO-8859-1?Q?Herm=EDnio_Miguel_Sanches?=)
Date: Wed, 23 Aug 2006 14:38:11 +0100
Subject: [Twisted-Python] Connect to a Perspective Broker from a VB
	App(using a python com server) (Pls disrigard previous one)
Message-ID: <f28267c0608230638l1c13d79fp5d74277cb5c7e6a7@mail.gmail.com>

Hi,

Apologies, please disregard the previous email - here is the good one.

I need to connect to a PerspectiveBroker from a VB application.
I did it with a com server in python, which works fine when the com client
is also python code.
All the calls must be synchronous to the com server.
When Calling from VB it works fine every time if the function used from the
com server don't use the reactor.

The problem is that when I call (from the VB com client) the functions that
uses the twisted reactor it performs well the first time but for the the
second time it's called, it stalls. I have to kill the vb executable.
The function from the test code is: testBroker()

Please can you help me to shed some light on this? Should I do it another
way? Bellow is the code that I am using.

Many thanks
Miguel

----------------------------------------------------
The code for the python com client :

import win32com.client
object = win32com.client.Dispatch("Python.TestServer")
print object.gettestresult ()
print object.testBroker()
print object.gettestresult ()

----------------------------------------------------
The code for the VB com client:

Private Sub TestComServer()
 Dim y As Object
 Set y = CreateObject("Python.TestServer")
 MsgBox y.gettestresult
 MsgBox y.testBroker()
 MsgBox y.gettestresult()
 Set y = Nothing
End Sub
----------------------------------------------------
the code for the python comserver:

#testcom.py
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import sys
import time
import socket

class HelloWorld:
    _reg_clsid_ = "{7CC9F362-486D-11D1-BB48-0000E838A65F}"
    _reg_desc_ = "Python Test COM Server"
    _reg_progid_ = "Python.TestServer"
    _public_methods_ = ['testBroker','gettestresult']
    def __init__(self):
        self.sText='sText10'
        self.reactorFinished=False
    def get_ip(self):
        addrs = socket.getaddrinfo(socket.gethostname(), None)
        addr = addrs[0]
        IPaddr = addr[4][0]
        return IPaddr #"localhost"

    def get_ip(self):
        return "localhost"

    def get_port(self):
        return 8786

    def DealWithReactor(self):
        now = time.localtime(time.time())
        factory = pb.PBClientFactory()
        reactor.connectTCP(self.get_ip(), self.get_port(), factory)
        d = factory.getRootObject ()
        strt="hello network "  + ' ' + time.asctime(now)
        d.addCallback(lambda object: object.callRemote("echo", strt))
        d.addErrback(lambda reason: 'error: '+str(reason.value ))
        d.addCallback(self.StopReactor)
        reactor.run()

    def StopReactor(self,obj):
        reactor.stop()
        self.reactorFinished=True
        self.sText=str(obj)
        return obj

    def testBroker(self):
        self.reactorFinished=False
        self.DealWithReactor()
        while self.reactorFinished==False:
            pass
        return 'OK testBroker22 self.reactorFinished:' + str(
self.reactorFinished)

    def gettestresult(self):
        return "gettestresult:" + str(self.sText)

if __name__=='__main__':
    import win32com.server.register
    win32com.server.register.UseCommandLine (HelloWorld)
    h=HelloWorld()
    print(h.gettestresult())
    print(h.testBroker())
    print(h.gettestresult())
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060823/a298c271/attachment.htm 

From exarkun at divmod.com  Wed Aug 23 10:00:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 23 Aug 2006 10:00:16 -0400
Subject: [Twisted-Python] Connect to a Perspective Broker from a VB
	App(using a python com server) (Pls disrigard previous one)
In-Reply-To: <f28267c0608230638l1c13d79fp5d74277cb5c7e6a7@mail.gmail.com>
Message-ID: <20060823140016.1717.1045324506.divmod.quotient.29605@ohm>

On Wed, 23 Aug 2006 14:38:11 +0100, Herm?nio Miguel Sanches <hsanches at gmail.com> wrote:
>Hi,
>
>Apologies, please disregard the previous email - here is the good one.
>
>I need to connect to a PerspectiveBroker from a VB application.
>I did it with a com server in python, which works fine when the com client
>is also python code.
>All the calls must be synchronous to the com server.
>When Calling from VB it works fine every time if the function used from the
>com server don't use the reactor.
>
>The problem is that when I call (from the VB com client) the functions that
>uses the twisted reactor it performs well the first time but for the the
>second time it's called, it stalls. I have to kill the vb executable.
>The function from the test code is: testBroker()
>
>Please can you help me to shed some light on this? Should I do it another
>way? Bellow is the code that I am using.

It looks as though you are starting and stopping the reactor for each
call you make.  The reactor can only be started once, so each attempt
you make after the first fails.

I've never written a COM server so I can't suggest a different way to
architect this so as to avoid the problem.

Jean-Paul



From eprparadocs at gmail.com  Thu Aug 24 11:49:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 11:49:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
Message-ID: <44EDCA9D.8030204@gmail.com>

I have a XMLPRC client that works well under TCP and I am now trying to 
get it to work under Multicast conditions.

Here is the "TCP" code I used:

class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.TCPServer.__init__(self,tcpPort,server.Site(r))

I changed the call to TCPServer to:


class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))

I thought this would work since, but it doesn't. What I get returned is 
the following error message:


Failed to load application: unbound method __init__() must be called 
with MulticastServer instance as first argument (got StorageService 
instance instead)


Does anyone know what I am doing wrong?

Thanks,
Chaz.



From exarkun at divmod.com  Thu Aug 24 12:09:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 24 Aug 2006 12:09:27 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDCA9D.8030204@gmail.com>
Message-ID: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>

On Thu, 24 Aug 2006 11:49:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>I have a XMLPRC client that works well under TCP and I am now trying to get 
>it to work under Multicast conditions.
>
>Here is the "TCP" code I used:
>
>class StorageService(internet.TCPServer):
>     def __init__(self,tcpPort,configInfo):
>         r = StoragePeer(configInfo)
>         xmlrpc.addIntrospection(r)
>         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>
>I changed the call to TCPServer to:
>
>
>class StorageService(internet.TCPServer):
>     def __init__(self,tcpPort,configInfo):
>         r = StoragePeer(configInfo)
>         xmlrpc.addIntrospection(r)
>         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>
>I thought this would work since, but it doesn't. What I get returned is the 
>following error message:
>
>
>Failed to load application: unbound method __init__() must be called with 
>MulticastServer instance as first argument (got StorageService instance 
>instead)
>
>
>Does anyone know what I am doing wrong?

The immediate mistake you are making is trying to call an unbound method
from one class with a self argument which is an instance of an unrelated
class.  This is not allowed in Python.

The overall mistake you are making is trying to use XML-RPC over multicast.
This does not work.  Perhaps something like XML-RPC could be made to run
over multicast, but it would be a much larger undertaking than just using
MulticastServer in place of TCPServer.

Jean-Paul



From eprparadocs at gmail.com  Thu Aug 24 12:23:02 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 12:23:02 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>
References: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>
Message-ID: <44EDD266.1050907@gmail.com>

Jean-Paul Calderone wrote:
> On Thu, 24 Aug 2006 11:49:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> I have a XMLPRC client that works well under TCP and I am now trying 
>> to get it to work under Multicast conditions.
>>
>> Here is the "TCP" code I used:
>>
>> class StorageService(internet.TCPServer):
>>     def __init__(self,tcpPort,configInfo):
>>         r = StoragePeer(configInfo)
>>         xmlrpc.addIntrospection(r)
>>         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>>
>> I changed the call to TCPServer to:
>>
>>
>> class StorageService(internet.TCPServer):
>>     def __init__(self,tcpPort,configInfo):
>>         r = StoragePeer(configInfo)
>>         xmlrpc.addIntrospection(r)
>>         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>>
>> I thought this would work since, but it doesn't. What I get returned 
>> is the following error message:
>>
>>
>> Failed to load application: unbound method __init__() must be called 
>> with MulticastServer instance as first argument (got StorageService 
>> instance instead)
>>
>>
>> Does anyone know what I am doing wrong?
> 
> The immediate mistake you are making is trying to call an unbound method
> from one class with a self argument which is an instance of an unrelated
> class.  This is not allowed in Python.
> 
> The overall mistake you are making is trying to use XML-RPC over multicast.
> This does not work.  Perhaps something like XML-RPC could be made to run
> over multicast, but it would be a much larger undertaking than just using
> MulticastServer in place of TCPServer.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
What I found when I did the following call:

internet.TCPServer(tcpport,server.Site(r))

that the call failed. Here is the trace output...perhaps someone can 
tell me what is wrong...

Aug 24 12:22:26 sideshow whirlwind: [-] Traceback (most recent call last):
Aug 24 12:22:26 sideshow whirlwind: [-]   File "TwistedPeer.py", line 
146, in ?
Aug 24 12:22:26 sideshow whirlwind: [-]     td.runApp(tdoptions)
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/scripts/twistd.py", line 
196, in runApp
Aug 24 12:22:26 sideshow whirlwind: [-]     startApplication(config, 
application)
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/scripts/twistd.py", line 
173, in startApplication
Aug 24 12:22:26 sideshow whirlwind: [-] 
service.IService(application).privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/service.py", 
line 191, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     service.privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/service.py", 
line 191, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     service.privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/internet.py", 
line 68, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     self._port = self._getPort()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/internet.py", 
line 86, in _getPort
Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
'listen'+self.method)(*self.args, **self.kwargs)
Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
instance has no attribute 'args'


When I used the code I did, everything worked...

Chaz.





From eprparadocs at gmail.com  Thu Aug 24 12:54:38 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 12:54:38 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD3C5.9070003@gmail.com>
References: <20060824160642.7857.1028714473.divmod.xquotient.17@joule.divmod.com>
	<44EDD3C5.9070003@gmail.com>
Message-ID: <44EDD9CE.4050009@gmail.com>

Chaz. wrote:
> radix at twistedmatrix.com wrote:
>> On 03:49 pm, eprparadocs at gmail.com wrote:
>>  >I have a XMLPRC client that works well under TCP and I am now trying 
>> to get
>>  >it to work under Multicast conditions.
>>
>> It is unlikely that you will be able to get the XMLRPC protocol to 
>> work over multicast, given that multicast is an unreliable transport, 
>> like UDP. HTTP and XMLRPC don't know how to deal with that.
>>
>>  >Here is the "TCP" code I used:
>>  >
>>  >class StorageService(internet.TCPServer):
>>  >     def __init__(self,tcpPort,configInfo):
>>  >         r = StoragePeer(configInfo)
>>  >         xmlrpc.addIntrospection(r)
>>  >         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>>
>>
>> Subclassing the thinks in twisted.application.internet is not really 
>> how those classes are meant to be used. Why did you do this instead of 
>> just instantiating a TCPServer with the appropriate port and factory?
>>
>>  >I changed the call to TCPServer to:
>>  >
>>  >
>>  >class StorageService(internet.TCPServer):
>>  >     def __init__(self,tcpPort,configInfo):
>>  >         r = StoragePeer(configInfo)
>>  >         xmlrpc.addIntrospection(r)
>>  >         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>>  >
>>  >I thought this would work since, but it doesn't. What I get returned 
>> is the
>>  >following error message:
>>  >
>>  >
>>  >Failed to load application: unbound method __init__() must be called 
>> with
>>  >MulticastServer instance as first argument (got StorageService instance
>>  >instead)
>>
>> This is a trivial error in your Python. You can't call methods of 
>> classes directly unless the first argument is an instance of that class.
>>
> 
> I know how much work I will need to do to get any UDP-like protocol to 
> work with EXACTLY-ONCE semantics.
> 

It seems my one problem was that in the definition of my class...

class StorageService(internet.TCPServer)

I should have used

class StorageService(internet.MulticastServer)

That solved my immediate problem, though I did find out that XMLRPC does 
in fact assume that you have a connection oriented protocol underneath 
it. Now I will just have to fix that problem.

Also for those of you that said you can't do:

internet.TCPServer.__init__(self,...)

I would suggest you are wrong. In fact that is exactly how subclassing 
works in Python. But that is for another time.

Once again thanks!

Chaz.




From ldanielburr at mac.com  Thu Aug 24 13:23:12 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 24 Aug 2006 12:23:12 -0500
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD9CE.4050009@gmail.com>
References: <20060824160642.7857.1028714473.divmod.xquotient.17@joule.divmod.com>
	<44EDD3C5.9070003@gmail.com> <44EDD9CE.4050009@gmail.com>
Message-ID: <op.tess8yuk3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Thu, 24 Aug 2006 11:54:38 -0500, Chaz. <eprparadocs at gmail.com> wrote:

> Chaz. wrote:
>
> Also for those of you that said you can't do:
>
> internet.TCPServer.__init__(self,...)
>
> I would suggest you are wrong. In fact that is exactly how subclassing  
> works in Python. But that is for another time.
>

Sorry, but you didn't read JP's response carefully.  What JP said was
that you cannot "call an unbound method from one class with a self
argument which is an instance of an unrelated class".  That's exactly
what you were doing in your first post; you called TCPServer.__init__
with a "self" argument that was actually an instance of a totally
unrelated class, and that is why the call failed.


> Once again thanks!
>

Have a good one,

L. Daniel Burr



From glyph at divmod.com  Thu Aug 24 13:37:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 24 Aug 2006 13:37:47 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD266.1050907@gmail.com>
Message-ID: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>

On Thu, 24 Aug 2006 12:23:02 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>What I found when I did the following call:

>internet.TCPServer(tcpport,server.Site(r))
>
>that the call failed. Here is the trace output...perhaps someone can tell me 
>what is wrong...

You have reversed something.

>Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
>'listen'+self.method)(*self.args, **self.kwargs)
>Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
>instance has no attribute 'args'

The last line of the traceback here refers to 'StorageService', not 'TCPServer'.  StorageService was the name of the TCPServer subclass you were using in your examples.  If you had been calling rather than subclassing TCPServer, presumably there would be no StorageService anywhere, least of all in the 'self' slot of a method on TCPServer in a traceback.



From glyph at divmod.com  Thu Aug 24 13:48:56 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 24 Aug 2006 13:48:56 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD9CE.4050009@gmail.com>
Message-ID: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>

On Thu, 24 Aug 2006 12:54:38 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Chaz. wrote:

>It seems my one problem was that in the definition of my class...

Those classes are not really meant to be used by subclassing.

>That solved my immediate problem, though I did find out that XMLRPC does in 
>fact assume that you have a connection oriented protocol underneath it. Now 
>I will just have to fix that problem.

How do you propose to "fix" that property of XMLRPC?  It's not really a "problem", in that it's *defined* to use not only a connection, but an HTTP connection at that.  From the XML-RPC specification: "An XML-RPC message is an HTTP-POST request."

There is Jabber-RPC, which indicates how you might make an XMLRPC-*like* protocol over some other transport, but in your case that still requires a reliable multicast message delivery layer (a monumental task by itself).

What is the application you are writing this for?

>Also for those of you that said you can't do:
>
>internet.TCPServer.__init__(self,...)
>
>I would suggest you are wrong. In fact that is exactly how subclassing works 
>in Python. But that is for another time.

You misunderstood.  I assure you they were correct, but that isn't what they said.  Simplified, here is what you did:

>>> class A:
...  def __init__(self):
...   print self
...
>>> class B:
...  def __init__(self):
...   A.__init__(self)
...
>>> B()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 3, in __init__
TypeError: unbound method __init__() must be called with A instance as first argument (got B instance instead)

This is, in fact, illegal, and that is why you got the exception that you did.

This is all moot, however, since you shouldn't use TCPServer with subclassing :).



From eprparadocs at gmail.com  Thu Aug 24 13:50:46 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 13:50:46 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>
References: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>
Message-ID: <44EDE6F6.1050008@gmail.com>

glyph at divmod.com wrote:
> On Thu, 24 Aug 2006 12:23:02 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> What I found when I did the following call:
> 
>> internet.TCPServer(tcpport,server.Site(r))
>>
>> that the call failed. Here is the trace output...perhaps someone can 
>> tell me what is wrong...
> 
> You have reversed something.
> 
>> Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
>> 'listen'+self.method)(*self.args, **self.kwargs)
>> Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
>> instance has no attribute 'args'
> 
> The last line of the traceback here refers to 'StorageService', not 
> 'TCPServer'.  StorageService was the name of the TCPServer subclass you 
> were using in your examples.  If you had been calling rather than 
> subclassing TCPServer, presumably there would be no StorageService 
> anywhere, least of all in the 'self' slot of a method on TCPServer in a 
> traceback.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Yes I noticed...and a few people sort of told me that without me 
catching on.

Chaz



From eprparadocs at gmail.com  Thu Aug 24 14:13:09 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 14:13:09 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
Message-ID: <44EDEC35.6060502@gmail.com>

glyph at divmod.com wrote:
> On Thu, 24 Aug 2006 12:54:38 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Chaz. wrote:
> 
>> It seems my one problem was that in the definition of my class...
> 
> Those classes are not really meant to be used by subclassing.
> 
>> That solved my immediate problem, though I did find out that XMLRPC 
>> does in fact assume that you have a connection oriented protocol 
>> underneath it. Now I will just have to fix that problem.
> 
> How do you propose to "fix" that property of XMLRPC?  It's not really a 
> "problem", in that it's *defined* to use not only a connection, but an 
> HTTP connection at that.  From the XML-RPC specification: "An XML-RPC 
> message is an HTTP-POST request."
> 
> There is Jabber-RPC, which indicates how you might make an XMLRPC-*like* 
> protocol over some other transport, but in your case that still requires 
> a reliable multicast message delivery layer (a monumental task by itself).
> 
> What is the application you are writing this for?
> 
>> Also for those of you that said you can't do:
>>
>> internet.TCPServer.__init__(self,...)
>>
>> I would suggest you are wrong. In fact that is exactly how subclassing 
>> works in Python. But that is for another time.
> 
> You misunderstood.  I assure you they were correct, but that isn't what 
> they said.  Simplified, here is what you did:
> 
>>>> class A:
> ...  def __init__(self):
> ...   print self
> ...
>>>> class B:
> ...  def __init__(self):
> ...   A.__init__(self)
> ...
>>>> B()
> Traceback (most recent call last):
>  File "<stdin>", line 1, in ?
>  File "<stdin>", line 3, in __init__
> TypeError: unbound method __init__() must be called with A instance as 
> first argument (got B instance instead)
> 
> This is, in fact, illegal, and that is why you got the exception that 
> you did.
> 
> This is all moot, however, since you shouldn't use TCPServer with 
> subclassing :).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

First, I got the mistake I made. It was the standard "cut-and-paste" 
problem. I cut code from one place, pasted it in another and forgot one 
piece all together.

I have a thousand or more processors running in an application and need 
to send out a request to each and every one of them. Obviously it is 
impossible to send it out sequentially and it doesn't need to.

The model of communication I am working from is that most communications 
are delivered and only once in a while do they fail (this is pretty true 
of an un-congested ethernet-like network).

So my algorithm is as follows (and if someone sees something wrong 
please let me know...a thousand pairs of eyes and brains is better than 
one). Send out the RPC request via Multicast. Set some timeout (based on 
  the request type). Since I know the servers in the collection, when I 
don't hear from one within the time out, resend the RPC request.

There is a problem with this approach - that is the semantics of the 
call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
doesn't. In this there is an uncertainty - it might have worked and I 
don't know about it (the response was lost for instance) or the server 
itself failed and restarted. This means I can't every be guaranteed the 
normal call semantics. It means it switches to AT LEAST ONCE semantics. 
  This means I have to be careful in how I code the server side.

Does anyone see another approach.

Chaz





From eprparadocs at gmail.com  Thu Aug 24 14:30:48 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 14:30:48 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
Message-ID: <44EDF058.9060301@gmail.com>

In my code :

class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.TCPServer.__init__(self,tcpPort,server.Site(r))

I specifically used internet.TCPServer as a parent class so that I could 
do a .setServiceParent() on the object returned.

If I rewrite the code as:

class StorageService:
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         self.r = internet.TCPServer(tcpPort,server.Site(r))

     def setServiceParent(self,arg) :
         self.r.setServiceParent(arg)

I get an equivalent effect.

So my question is why is subclassing internet.TCPServer not a good idea?


Chaz





From itamar at itamarst.org  Thu Aug 24 14:55:28 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Aug 2006 14:55:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDEC35.6060502@gmail.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
	<44EDEC35.6060502@gmail.com>
Message-ID: <1156445728.5653.27.camel@localhost.localdomain>

On Thu, 2006-08-24 at 14:13 -0400, Chaz. wrote:

> There is a problem with this approach - that is the semantics of the 
> call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
> doesn't. In this there is an uncertainty - it might have worked and I 
> don't know about it (the response was lost for instance) or the server 
> itself failed and restarted. This means I can't every be guaranteed the 
> normal call semantics. It means it switches to AT LEAST ONCE semantics. 
>   This means I have to be careful in how I code the server side.
 
If your protocol has a unique message identifier you can make sure
duplicate commands are not rerun.




From eprparadocs at gmail.com  Thu Aug 24 15:13:35 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 15:13:35 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <1156445728.5653.27.camel@localhost.localdomain>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>	
	<44EDEC35.6060502@gmail.com>
	<1156445728.5653.27.camel@localhost.localdomain>
Message-ID: <44EDFA5F.5080007@gmail.com>

Itamar Shtull-Trauring wrote:
> On Thu, 2006-08-24 at 14:13 -0400, Chaz. wrote:
> 
>> There is a problem with this approach - that is the semantics of the 
>> call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
>> doesn't. In this there is an uncertainty - it might have worked and I 
>> don't know about it (the response was lost for instance) or the server 
>> itself failed and restarted. This means I can't every be guaranteed the 
>> normal call semantics. It means it switches to AT LEAST ONCE semantics. 
>>   This means I have to be careful in how I code the server side.
>  
> If your protocol has a unique message identifier you can make sure
> duplicate commands are not rerun.
> 
> 
I thought about doing that but ruled it out. So long as the server runs 
I can count on the UID being stepped correctly. If the server goes down 
and comes back up, it might be reset or set incorrectly.  So I can't 
guarantee it. Can you see another way around the problem?

Chaz




From beau at open-source-staffing.com  Thu Aug 24 19:22:08 2006
From: beau at open-source-staffing.com (Beau Gould)
Date: Thu, 24 Aug 2006 18:22:08 -0500
Subject: [Twisted-Python] [JOB] Python Developer, Palo Alto, CA | 90-115k
Message-ID: <007b01c6c7d4$1eb1a2b0$ecf5b248@BEAU>

Python Developer, Palo Alto, CA | 90-115k

My client is a stealth web 2.0 company with offices in Palo Alto and San
Francisco. They are building an online film community and global media
network that will revolutionize the way we consume and share media
today.
 
My client is rapidly growing its engineering team as this market demands
cutting-edge web-based and software technologies. They are looking for
energetic, self-starters to join their venture. As one of their earlier
members in their R&D team, you will be able to make a huge difference;
from designing and building the product to making sure it is one of the
highest quality web properties on the internet. The product will be
shipped to a potential user community of millions. You will work
alongside some of the brightest people in the industry using some of the
most advanced technologies available today.

In particular, their backend web application is 90% Python. They also
leverage a lot of existing open source Python modules like Pyrex,
Twisted framework, Pylucene, etc. Using Python, you will be building a
production strength web application for millions. 

If you are looking for a technical challenge and want to develop and
contribute to some of the best software around in a web 2.0 environment,
they have a position for you. We offer full-time employment with
benefits and ground floor equity participation. 

We are backed by a veteran management team with successful track record
that is committed to fostering a distinctive culture in a great company.

Server software engineer requirements: 
* BS/MS in Computer Science or related field.  
* Several years of software development experience. 
* Multi-threaded backend server development experience in Python
(preferred), Java, or C++. 
* Internet experience such as web services, LAMP architecture, etc. 
* Database application development knowledge as in SQL, database schema
design, and database optimization. 
* Network programming experience w/ TCP/IP a plus.

If you are local to the Palo Alto area, please submit your resume,
salary requirements, and a paragraph (or two) highlighting your
skills/experience as it pertains to this job to
beau at open-source-staffing.com 

Python/Zope Jobs: http://groups.yahoo.com/group/pythonzopejobs 




From eprparadocs at gmail.com  Fri Aug 25 08:26:23 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 08:26:23 -0400
Subject: [Twisted-Python] Reliable Datagram Protocol?
Message-ID: <44EEEC6F.3050902@gmail.com>

I have need for a reliable datagram protocol running under Twisted. So 
far I have found AirHook (2003) and an RDP implementation that was 
posted on p2p-hackers (2004). I have also found Divmod's Vertex.

I was wondering if anyone has had any experience with any of these 
implementations? Has anyone heard of any other RDP implementation?

Peace,
Chaz



From sam at SpinwardStars.com  Fri Aug 25 09:59:41 2006
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Fri, 25 Aug 2006 07:59:41 -0600
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDEC35.6060502@gmail.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
	<44EDEC35.6060502@gmail.com>
Message-ID: <6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>

At 2006-08-24 02:13 PM -0400, you wrote:
>I have a thousand or more processors running in an application and need to 
>send out a request to each and every one of them.

This is an incomplete statement of the problem.
To get assistance you need to more fully
state the problem you're trying to solve.

What are you trying to accomplish?
1. Are you...
    a. sending data *to* each processor from a central server
       (e.g., configuration data)?
    b. retrieving data *from* each processor for
       display/processing at a central server
       (e.g., status information)?
    c. both?
2. How often do you need to send/receive the data?
3. How much latency is acceptable?
4. How much data loss is acceptable?

Your desire to use multicast suggests that you're doing 1a.
If 1c, you need to specify 2-4 separately for both 1a and 1b.

Without this (and probably other) information,
any solution suggested (or adopted) is, at best,
a hammer looking for a nail.

>Obviously it is impossible to send it out sequentially and it doesn't need to.

Very little is actually impossible.

>The model of communication I am working from is that most communications 
>are delivered and only once in a while do they fail (this is pretty true 
>of an un-congested ethernet-like network).
>
>So my algorithm is as follows (and if someone sees something wrong please 
>let me know...a thousand pairs of eyes and brains is better than one). 
>Send out the RPC request via Multicast. Set some timeout (based on  the 
>request type). Since I know the servers in the collection, when I don't 
>hear from one within the time out, resend the RPC request.

Hammer.
Look at the whole toolbox.
Don't settle too quickly on one tool;
you might need a screwdriver, instead.

For example, each processor might periodically call
the central server to send its status information.
Or it might call the central server only when it
has new data to send, and otherwise make a simpler,
low-overhead "heartbeat" call for monitoring.

HTH.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From glyph at divmod.com  Fri Aug 25 11:18:32 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 11:18:32 -0400
Subject: [Twisted-Python] Reliable Datagram Protocol?
In-Reply-To: <44EEEC6F.3050902@gmail.com>
Message-ID: <20060825151832.1717.1861157954.divmod.quotient.30996@ohm>

On Fri, 25 Aug 2006 08:26:23 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>I have need for a reliable datagram protocol running under Twisted. So far I 
>have found AirHook (2003) and an RDP implementation that was posted on p2p- 
>hackers (2004). I have also found Divmod's Vertex.

Vertex's "reliable datagram protocol" is a rather literal-minded re-implementation of TCP on UDP.  This won't help you with multicast.  Its purpose is to get through NATs.

It's definitely not ready for prime-time, either.  It's suffering from an extreme lack of maintenance as Divmod is trying to ship an unrelated product, and in the meanwhile some rather serious bugs have been discovered.  While it would only take a few weeks of work to fix those issues, it has never been deployed in a realistic way.

However, its "PTCP" implementation may be a valuable learning tool.  I would recommend familiarizing yourself with what TCP does; the first time I wrote Vertex I tried to do some clever things because I thought I didn't need "all of" TCP, but I was dead wrong.  TCP is an extremely sophisticated protocol that gets a lot of the issues completely right.




From jsepulveda at tecnova.cl  Fri Aug 25 11:22:16 2006
From: jsepulveda at tecnova.cl (=?ISO-8859-1?Q?Jorge_Sep=FAlveda_Pereda?=)
Date: Fri, 25 Aug 2006 11:22:16 -0400
Subject: [Twisted-Python] twisted rpm
Message-ID: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>

Hi, i need to know, if there are, a twisted install RPM for Fedora linux ( FC4) . 




Thanks. 
(sorry for my english) 

Jorge. 







From eprparadocs at gmail.com  Fri Aug 25 12:05:50 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 12:05:50 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>	<44EDEC35.6060502@gmail.com>
	<6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>
Message-ID: <44EF1FDE.6000408@gmail.com>

Samuel Reynolds wrote:
> At 2006-08-24 02:13 PM -0400, you wrote:
>> I have a thousand or more processors running in an application and 
>> need to send out a request to each and every one of them.
> 
> This is an incomplete statement of the problem.
> To get assistance you need to more fully
> state the problem you're trying to solve.
> 
> What are you trying to accomplish?
> 1. Are you...
>    a. sending data *to* each processor from a central server
>       (e.g., configuration data)?
>    b. retrieving data *from* each processor for
>       display/processing at a central server
>       (e.g., status information)?
>    c. both?
> 2. How often do you need to send/receive the data?
> 3. How much latency is acceptable?
> 4. How much data loss is acceptable?
> 
> Your desire to use multicast suggests that you're doing 1a.
> If 1c, you need to specify 2-4 separately for both 1a and 1b.
> 
> Without this (and probably other) information,
> any solution suggested (or adopted) is, at best,
> a hammer looking for a nail.
> 
>> Obviously it is impossible to send it out sequentially and it doesn't 
>> need to.
> 
> Very little is actually impossible.
> 
>> The model of communication I am working from is that most 
>> communications are delivered and only once in a while do they fail 
>> (this is pretty true of an un-congested ethernet-like network).
>>
>> So my algorithm is as follows (and if someone sees something wrong 
>> please let me know...a thousand pairs of eyes and brains is better 
>> than one). Send out the RPC request via Multicast. Set some timeout 
>> (based on  the request type). Since I know the servers in the 
>> collection, when I don't hear from one within the time out, resend the 
>> RPC request.
> 
> Hammer.
> Look at the whole toolbox.
> Don't settle too quickly on one tool;
> you might need a screwdriver, instead.
> 
> For example, each processor might periodically call
> the central server to send its status information.
> Or it might call the central server only when it
> has new data to send, and otherwise make a simpler,
> low-overhead "heartbeat" call for monitoring.
> 
> HTH.
> 
> - Sam
> 
> __________________________________________________________
> Spinward Stars, LLC                        Samuel Reynolds
> Software Consulting and Development           303-805-1446
> http://SpinwardStars.com/            sam at SpinwardStars.com
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Since the title of the email is Multicast XML-RPC I would say I was 
pretty specific. I need to send XML-RPC requests to thousands of 
machines, something that can't be done using a connection oriented 
protocol via TCP very efficiently.

Chaz.





From exarkun at divmod.com  Fri Aug 25 12:17:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Aug 2006 12:17:23 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF1FDE.6000408@gmail.com>
Message-ID: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>

On Fri, 25 Aug 2006 12:05:50 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Samuel Reynolds wrote:
>>At 2006-08-24 02:13 PM -0400, you wrote:
>>>I have a thousand or more processors running in an application and need to 
>>>send out a request to each and every one of them.
>>
>>This is an incomplete statement of the problem.
>>To get assistance you need to more fully
>>state the problem you're trying to solve.
>>
>>What are you trying to accomplish?
>>1. Are you...
>>    a. sending data *to* each processor from a central server
>>       (e.g., configuration data)?
>>    b. retrieving data *from* each processor for
>>       display/processing at a central server
>>       (e.g., status information)?
>>    c. both?
>>2. How often do you need to send/receive the data?
>>3. How much latency is acceptable?
>>4. How much data loss is acceptable?
>
>Since the title of the email is Multicast XML-RPC I would say I was pretty 
>specific. I need to send XML-RPC requests to thousands of machines, 
>something that can't be done using a connection oriented protocol via TCP 
>very efficiently.
>
>Chaz.
>

Multicast is a choice for a solution to a problem.  So is "sending XML-RPC
requests to thousands of machines".  Neither are themselves descriptions
of a problem; rather, they are descriptions of a solution.

Sam is asking for more information about the problem you are trying to
solve.

Jean-Paul



From eprparadocs at gmail.com  Fri Aug 25 13:07:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 13:07:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>
References: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>
Message-ID: <44EF2E65.8000101@gmail.com>

Jean-Paul Calderone wrote:
> On Fri, 25 Aug 2006 12:05:50 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Samuel Reynolds wrote:
>>> At 2006-08-24 02:13 PM -0400, you wrote:
>>>> I have a thousand or more processors running in an application and 
>>>> need to send out a request to each and every one of them.
>>>
>>> This is an incomplete statement of the problem.
>>> To get assistance you need to more fully
>>> state the problem you're trying to solve.
>>>
>>> What are you trying to accomplish?
>>> 1. Are you...
>>>    a. sending data *to* each processor from a central server
>>>       (e.g., configuration data)?
>>>    b. retrieving data *from* each processor for
>>>       display/processing at a central server
>>>       (e.g., status information)?
>>>    c. both?
>>> 2. How often do you need to send/receive the data?
>>> 3. How much latency is acceptable?
>>> 4. How much data loss is acceptable?
>>
>> Since the title of the email is Multicast XML-RPC I would say I was 
>> pretty specific. I need to send XML-RPC requests to thousands of 
>> machines, something that can't be done using a connection oriented 
>> protocol via TCP very efficiently.
>>
>> Chaz.
>>
> 
> Multicast is a choice for a solution to a problem.  So is "sending XML-RPC
> requests to thousands of machines".  Neither are themselves descriptions
> of a problem; rather, they are descriptions of a solution.
> 
> Sam is asking for more information about the problem you are trying to
> solve.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I will state what I thought was obvious: I need to make "calls" to 
thousands of machines to do something. I want to minimize the overhead 
both of making the call and the machines sending back the responses.

On the invoking side I believe multicast or broadcast is the way to go 
since I can send out one message and hit them all. On the response side 
I need a low-overhead protocol.

TCP is pretty resource intensive so I need something else. I think a 
reliable datagram service on top of some underlying transport is the way 
to go (on top of multicast/broadcast/IP is what I am thinking about).

I think this describes the problem well.

Chaz







From exarkun at divmod.com  Fri Aug 25 13:28:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Aug 2006 13:28:35 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF2E65.8000101@gmail.com>
Message-ID: <20060825172835.1717.368957612.divmod.quotient.31074@ohm>

On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>
>I will state what I thought was obvious:

Sorry to inconvenience you so.

>
> [snip]
>
>I think this describes the problem well.

I'll leave it to others to decide.  For my part, I don't believe I have any
else productive to contribute.

Jean-Paul



From glyph at divmod.com  Fri Aug 25 13:54:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 13:54:42 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF2E65.8000101@gmail.com>
Message-ID: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>

On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>I will state what I thought was obvious: I need to make "calls" to thousands 
>of machines to do something. I want to minimize the overhead both of making 
>the call and the machines sending back the responses.

Maybe you could start off a little bit further back into the problem today.  Like, "I got up this morning, and I thought, 'I would like some toast.', but I don't know how to make toast, so I wanted to design a 100,000 node parallel neural network to develop a receipie for toast."

Perhaps then someone on this list could relate their toast development experiences, such as "using a TCP-based tree topology similar to IRC servers has been sufficient in my experience for toast-oriented data exchange although I have been using a parallelized coordinated genetic algorithm rather than a neural network to develop an optimal crunch/warmth experience", or possibly "ToastVortex, my Twisted-basted toast application server is available at http://toastvortex.example.com/" or better yet, "buy a toaster and put some bread in it".

>TCP is pretty resource intensive so I need something else. I think a 
>reliable datagram service on top of some underlying transport is the way to 
>go (on top of multicast/broadcast/IP is what I am thinking about).

TCP's "resource" consumption is localized in an a highly optimized environment; in OS kernels, where the TCP stack is tuned constantly by thousands of people, in routing hardware that is specialized to give TCP traffic priority to improve performance, and in the guts of the public internet that runs such hardware and is constantly monitored and tweaked to give TCP even more of a boost.  Any custom multicast protocol you develop, while perhaps theoretically better than TCP, is possibly going to get swamped by the marginalia that TCP has spent decades eradicating.  In Python, you're going to be doing a lot of additional CPU work.  For example, TCP acks often won't even be promoted to userspace, whereas you're going to need to process every unicast acknowledgement to your multicast message separately in userspace.

While my toast network deployments are minimal, I *have* written quite a few multi-unicast servers, some of which processed quite a high volume of traffic acceptably, and in at least one case this work was later optimized by another developer who spent months working on a multicast replacement.  That replacement which was later abandoned because the deployment burden of a large-scale multicast-capable network was huge.  That's to say nothing of the months of additional time required to develop and properly *test* such a beast.

You haven't said what resources TCP is consuming which are unacceptble, however,  Is it taking too much system time?  Too much local bandwidth?  Is your ethernet experiencing too many collisions?  Are you concerned about the cost of public internet bandwidth overages with your service provider?  What's your network topology?  It would be hard to list the answers to all of these questions (or even exhaustively ask all the questions one would need to comment usefully) but one might at least make guesses that did not fall too wide of the mark if one knew what the application in question were actually *doing*.

In any event, XML-RPC is hardly a protocol which is famous for its low resource consumption on any of these axes, so if you're driven by efficiency concerns, it seems an odd choice to layer on top of a hand-tuned multicast-request/unicast-response protocol.



From glyph at divmod.com  Fri Aug 25 14:20:53 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 14:20:53 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <44EDF058.9060301@gmail.com>
Message-ID: <20060825182053.1717.1838518131.divmod.quotient.31108@ohm>

On Thu, 24 Aug 2006 14:30:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>So my question is why is subclassing internet.TCPServer not a good idea?

In the general case, the short version is: "Because we wrote that code, and we say so."

Usually I am not a big fan of the "argument from authority", but in this case, it has a special significance.  When a developer on a library you're using says "this is the correct, supported method to use interface XYZ", that means that is the method they are going to be supporting in the future, and unsupported usages may break.  It is in your best interest to stick to the supported usage if you ever intend to upgrade that library.

In a future version of twisted.internet.application, for example, it may be deemed a good idea to make TCPServer and friends a set of functions rather than classes for some reason.  Since you're supposed to be calling them and not subclassing them, that usage will continue to work, but subclassing won't.

Calling is generally better than subclassing anyway.  When you subclass, a number of undesirable things happen: in any language with multiple inheritance this is a problem, but in Python especially, you inherit all sorts of things from your superclass other than simple functionality.

For one thing, object semantics.  Maybe you used to be a classic class, but subclassing turns you into a new-style class before you're ready to make that switch.  Maybe your superclass has a bizarre metaclass which performs some mutation you didn't expect.  Maybe it has a __new__ which does something weird.

Then you inherit state.  Your 'self.' namespace becomes polluted with additional variable names that may conflict with your own.  These names may change in future releases, so even if they don't conflict now, they may in future releases.

While inheritance can be a useful tool, it is a lot more complex than composition, so you should generally avoid it unless all these ugly side-effects are actually desirable properties in your particular application.  In the case of twisted.application.internet, they are not.  That's not to say they *never* are: default implementation classes paired with interfaces can insulate your applications from certain varieties of change in libraries, and sometimes all those object-model features described as annoyances above are incredibly useful (most usually in persistence libraries like Axiom or ZODB).



From eprparadocs at gmail.com  Fri Aug 25 14:43:43 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 14:43:43 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
Message-ID: <44EF44DF.8030401@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> I will state what I thought was obvious: I need to make "calls" to 
>> thousands of machines to do something. I want to minimize the overhead 
>> both of making the call and the machines sending back the responses.
> 
> Maybe you could start off a little bit further back into the problem 
> today.  Like, "I got up this morning, and I thought, 'I would like some 
> toast.', but I don't know how to make toast, so I wanted to design a 
> 100,000 node parallel neural network to develop a receipie for toast."
> 
> Perhaps then someone on this list could relate their toast development 
> experiences, such as "using a TCP-based tree topology similar to IRC 
> servers has been sufficient in my experience for toast-oriented data 
> exchange although I have been using a parallelized coordinated genetic 
> algorithm rather than a neural network to develop an optimal 
> crunch/warmth experience", or possibly "ToastVortex, my Twisted-basted 
> toast application server is available at 
> http://toastvortex.example.com/" or better yet, "buy a toaster and put 
> some bread in it".
> 
>> TCP is pretty resource intensive so I need something else. I think a 
>> reliable datagram service on top of some underlying transport is the 
>> way to go (on top of multicast/broadcast/IP is what I am thinking about).
> 
> TCP's "resource" consumption is localized in an a highly optimized 
> environment; in OS kernels, where the TCP stack is tuned constantly by 
> thousands of people, in routing hardware that is specialized to give TCP 
> traffic priority to improve performance, and in the guts of the public 
> internet that runs such hardware and is constantly monitored and tweaked 
> to give TCP even more of a boost.  Any custom multicast protocol you 
> develop, while perhaps theoretically better than TCP, is possibly going 
> to get swamped by the marginalia that TCP has spent decades 
> eradicating.  In Python, you're going to be doing a lot of additional 
> CPU work.  For example, TCP acks often won't even be promoted to 
> userspace, whereas you're going to need to process every unicast 
> acknowledgement to your multicast message separately in userspace.
> 
> While my toast network deployments are minimal, I *have* written quite a 
> few multi-unicast servers, some of which processed quite a high volume 
> of traffic acceptably, and in at least one case this work was later 
> optimized by another developer who spent months working on a multicast 
> replacement.  That replacement which was later abandoned because the 
> deployment burden of a large-scale multicast-capable network was huge.  
> That's to say nothing of the months of additional time required to 
> develop and properly *test* such a beast.
> 
> You haven't said what resources TCP is consuming which are unacceptble, 
> however,  Is it taking too much system time?  Too much local bandwidth?  
> Is your ethernet experiencing too many collisions?  Are you concerned 
> about the cost of public internet bandwidth overages with your service 
> provider?  What's your network topology?  It would be hard to list the 
> answers to all of these questions (or even exhaustively ask all the 
> questions one would need to comment usefully) but one might at least 
> make guesses that did not fall too wide of the mark if one knew what the 
> application in question were actually *doing*.
> 
> In any event, XML-RPC is hardly a protocol which is famous for its low 
> resource consumption on any of these axes, so if you're driven by 
> efficiency concerns, it seems an odd choice to layer on top of a 
> hand-tuned multicast-request/unicast-response protocol.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Perhaps the simple way to say this is that I need to do group 
communications that support RPC semantics with minimal overhead.

You ask about the network topology; all I can say is that it supports 
the normal communication means: unicast, broadcast and maybe multicast. 
I am being intentionally vague since I don't want to have any specific 
network architecture.

I don't want to use overlay networks, if at all possible. While they are 
nice, I would prefer something a little more direct (though that might 
not be possible). The reason? Direct operations are faster.

I have a membership list of the state of all the processors in the 
system (and I am talking 1000's of processors) without the use of 
standard heartbeat (in the traditional use of heartbeat I would have N! 
ping messages!). I figured out probabilistic polling with gossip was enough.

I don't particular care if it is PB, XML-RPC or SOAP as the marshalling 
mechanism. I mention them since they allow me to solve one problem at a 
time. I would like to build the solution a piece at a time to do some 
measurements and testing. Today the underlying transport and tomorrow 
the marshallings.

Now let me address the issue of TCP. It is a pretty heavy protocol to 
use. It takes a lot of resources on the sender and target and can take 
some time to establish a connection. Opening a 1000 or more sockets 
consumes a lot of resources in the underlying OS and in the Twisted client!

If I use TCP and stick to the serial, synchronized semantics of RPC, 
doing one call at a time, I have only a few ways to solve the problem. 
Do one call at a time, repeat N times, and that could take quite a 
while. I could do M spawnProcesses and have each do N/M RPC calls. Or I 
could use M threads and do it that way. Granted I have M sockets open at 
a time, it is possible for this to take quite a while to execute. 
Performance would be terrible (and yes I want an approach that has good 
to very good performance. After all who would want poor to terrible 
performance?)

So I divided the problem down to two parts. One, can I reduce the amount 
of traffic on the invoking side of the RPC request? Second, is how to 
deal with the response. Obviously I have to deal with the issue of 
failure, since RPC semantics require EXACTLY-ONCE.

That gets me to the multicast or broadcast scheme. In one call I could 
get the N processors to start working. Now I just have to solve the 
other half of the problem: how to get the answers returned without 
swamping the network or how to detect when I didn't get an answer from a 
processor at all.

That leads me to the observation that on an uncongested ethernet I 
almost always have a successful transmission. This means I have to deal 
with that issue and a few others. Why do I care? Because I believe I can 
accomplish what I need - get great performance most of the time, and 
only in a few instances have to deal with do the operation over again.

This is a tough problem to solve. I am not sure of the outcome but I am 
sure that I need to start somewhere. What I know is that it is partly 
transport and partly marshalling. The semantics of the call have to stay 
fixed: EXACTLY-ONCE.

Hope this helps cast the problem...I didn't mean to sound terse before I 
just figured everyone had already thought about the problem and knew the 
issues.

Chaz




From glyph at divmod.com  Fri Aug 25 15:05:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:05:21 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <44EF4590.3@gmail.com>
Message-ID: <20060825190521.1717.1734156984.divmod.quotient.31135@ohm>

On Fri, 25 Aug 2006 14:46:40 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>Please don't take my questions as a slap. I just like to understand your 
>thinking. I am pretty new to Python (only the last year) and I was hoping to 
>understand your reasoning and get the wisdom of your experience.

No offense taken.  I just sent a longer response because I felt it might be useful to other lurkers on the list, and to refer to for posterity, as this is a question that any newcomer to Twisted's design approach might think to ask.



From eprparadocs at gmail.com  Fri Aug 25 15:36:28 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 15:36:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825190657.7857.1432542063.divmod.xquotient.35@joule.divmod.com>
References: <20060825190657.7857.1432542063.divmod.xquotient.35@joule.divmod.com>
Message-ID: <44EF513C.5000006@gmail.com>

radix at twistedmatrix.com wrote:
> On 06:43 pm, eprparadocs at gmail.com wrote:
>  >If I use TCP and stick to the serial, synchronized semantics of RPC, 
> doing
>  >one call at a time, I have only a few ways to solve the problem. Do 
> one call
>  >at a time, repeat N times, and that could take quite a while. I could 
> do M
>  >spawnProcesses and have each do N/M RPC calls. Or I could use M 
> threads and
>  >do it that way. Granted I have M sockets open at a time, it is 
> possible for
>  >this to take quite a while to execute. Performance would be terrible (and
>  >yes I want an approach that has good to very good performance. After 
> all who
>  >would want poor to terrible performance?)
> 
> Let's just focus on this one thing, ignoring other resource issues for 
> now, because I think it needs to be clarified. Maybe this isn't the 
> case, but it looks like you're totally misunderstanding how asynchronous 
> I/O works.
> 
> Here is an important thing: You can deal with multiple requests at the 
> same time even with TCP. You don't need to wait for one result before 
> you can send the next request. Send a bunch of requests at once, 
> asynchronously, and then deal with each response as it comes in. This 
> Just Works with multiple TCP connections in Twisted. No need for 
> threads, no need for Broadcast or Multicast.
> 

I understand about the state machine of Twisted and how it can do the 
requests. The problem is that I still get down to issuing 1000s of TCP 
requests (and on top of that XML-RPC, SOAP, PB or whatever). It does beg 
the question has anyone really used a twisted server (or client) to 
invoke thousands of simultaneous RPC requests?

Chaz




From glyph at divmod.com  Fri Aug 25 15:48:34 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:48:34 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF44DF.8030401@gmail.com>
Message-ID: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>

On Fri, 25 Aug 2006 14:43:43 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Perhaps the simple way to say this is that I need to do group communications 
>that support RPC semantics with minimal overhead.

I'm still not really clear on what the application is.

>You ask about the network topology; all I can say is that it supports the 
>normal communication means: unicast, broadcast and maybe multicast.

Heh.  "Normal" communication means?  After writing a P2P layer and working on a SIP implementation, I have come to understand that the only "normal" communication available is an *outgoing*, *unencrypted* HTTP request on port 80... ;-)

More seriously, if you're writing an application for distributing compute nodes to home computers, multicast is a non-starter.  If it's an intranet, then maybe it's feasible.  Or, if you're on Internet 2 for some reason.  (Is anybody actually on internet 2 these days?)

At any rate, producing a functioning multiunicast prototype with, e.g. PB, would be the easiest way to get started if you need to fall back to that sort of topology anyway in the case where a multicast solution doesn't work.  Then you can collect data and determine how much bandwidth is going to be saved in a realistic scenario...

>I am being intentionally vague since I don't want to have any specific network 
>architecture.

If you want to support arbitrary network architecture, you _definitely_ can't use multicast, at all.  Even determining if *unicast* datagrams work on an arbitrary network is a hard problem.

>I don't want to use overlay networks, if at all possible. While they are 
>nice, I would prefer something a little more direct (though that might not 
>be possible). The reason? Direct operations are faster.

Sometimes.  If your topology involves an extremely well-connected overlay hub peer and a bunch of intermittently or poorly connected edge peers, direct operations can be significantly slower.  While I'm not a big fan of IRC's network architecture, the math on what happens if every client is responsible for all of their own messages on a channel of 1000 people is really eye-opening.

>I don't particular care if it is PB, XML-RPC or SOAP as the marshalling 
>mechanism. I mention them since they allow me to solve one problem at a 
>time. I would like to build the solution a piece at a time to do some 
>measurements and testing. Today the underlying transport and tomorrow the 
>marshallings.

It still seems to me like this is backwards.

The application can be complete, end-to-end, if you start marshalling data and sending it over a simplistic (but possibly too-expensive) mechanism.  Then, you can replace the transport as necessary later.  Preserving the semantics of the marshalling between things as radically different as XMLRPC and PB would be very hard; but as you've said, the semantics of your transport must remain identical.

>Now let me address the issue of TCP. It is a pretty heavy protocol to use. 
>It takes a lot of resources on the sender and target and can take some time 
>to establish a connection. Opening a 1000 or more sockets consumes a lot of 
>resources in the underlying OS and in the Twisted client!

I still don't know what you mean by "resources", and as compared to what.  In my experience all the alternatives to TCP end up consuming an equivalent amount of RAM and CPU time... although in some cases you might save on bandwidth.

>If I use TCP and stick to the serial, synchronized semantics of RPC, doing 
>one call at a time, I have only a few ways to solve the problem. Do one call 
>at a time, repeat N times, and that could take quite a while.

I'm not sure what you mean by "at a time".  The operations can be quite effectively parallelized, both by TCP and by Twisted talking to the OS: if you keep a list of all your open connections and do the naive thing, i.e., for each heartbeat:

    for connection in connections:
        connection.sendPing(timeout=30).addErrback(connection.uhOh)

the initial loop will not take very long even with a very large number of connections, and Twisted will send out traffic as network conditions permit.

Most importantly, you do not need to wait for any of the calls to complete to issue more calls, regardless of whether they're unicast or multicast.  This same API could be refactored internally to group together peers in the same multicast group and coalesce their pings; but you still need to do the same complexity order of work, because you have to track each peer's response individually.

Finally, if all you're concerned with is clients dying, you can remove Python from the equation entirely and let the TCP stack do its thing: set SO_KEEPALIVE on all your sockets [in Twisted-ese: self.transport.setTcpKeepAlive(True)] and just wait for connectionLost to be called when a ping fails.  No user-space work _at all_, and probably pretty minimal bandwidth usage.

>I could do M spawnProcesses and have each do N/M RPC calls.

Yow.  That definitely doesn't make sense unless you have a massively SMP box.

>Or I could use M threads and do it that way.

... and that would basically _never_ make sense, under any conditions.  Python's GIL negates any SMP benefits, Twisted won't send network messages from threads anyway, and it would be substantially more complex.

>Granted I have M sockets open at a time, it is possible for 
>this to take quite a while to execute. Performance would be terrible (and 
>yes I want an approach that has good to very good performance. After all who 
>would want poor to terrible performance?)

"performance 'would be' terrible" sounds like premature optimization to me.  At least, I have lots of experience with systems where this performance was more than good enough.  Huge massively multiplayer games use such systems and manage to deal with tens of thousands of concurrent clients per game node with (relative) ease, over the public internet, with good performance, and without breaking the bank on bandwidth.

>So I divided the problem down to two parts. One, can I reduce the amount of 
>traffic on the invoking side of the RPC request? Second, is how to deal with 
>the response. Obviously I have to deal with the issue of failure, since RPC 
>semantics require EXACTLY-ONCE.

If you're concerned about bandwidth *as a resource of its own* then this is perhaps a legitimate concern.  But if you're concerned about reducing bandwidth as a means to increase the real-time performance of the system I don't think that it's actually going to save you a lot.  You save some bandwidth, but then you move a bunch of request/response tracking out of hardware and into Python.  Unless your new algorithm is more efficient by a large margin, and N is very big indeed (100,000 is not "big", especially when you can partition it using techniques like overlay networks).

>That leads me to the observation that on an uncongested ethernet (...)

"uncongested ethernet" implies something very concrete about your network topology.  Certainly it implies that you have enough spare bandwith that you don't need to be compressing every byte.  Want to expound? :)

>Hope this helps cast the problem...I didn't mean to sound terse before I 
>just figured everyone had already thought about the problem and knew the 
>issues.

I still really don't know what the problem at hand is.  I gather it has something to do with sending a lot of traffic to a lot of peers but that is still a description of an implementation technique, not a problem.  Are you making toast?  Doing distributed testing?  Sequencing genomes?  Cracking encryption?  Writing some kind of monster distributed enterprise calendar server?  (I'm still not sure what you meant by "communicating groups", above.)  Is the "problem" in this case to develop a generic infrastructure for some wider set of problems, like an open-source implementation of a MapReduce daemon?  If so, what are the initial problems it's expected to be applied to?  What does all this data, other than hearbteats, that you're slinging around *represent*?



From glyph at divmod.com  Fri Aug 25 15:59:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:59:37 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF513C.5000006@gmail.com>
Message-ID: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>

On Fri, 25 Aug 2006 15:36:28 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>I understand about the state machine of Twisted and how it can do the 
>requests. The problem is that I still get down to issuing 1000s of TCP 
>requests (and on top of that XML-RPC, SOAP, PB or whatever). It does beg the 
>question has anyone really used a twisted server (or client) to invoke 
>thousands of simultaneous RPC requests?

Yes.  I have done exactly that, while load-testing PB.  Currently the only restriction I'm aware of that causes a real problem is python bug #1494314 (you can't use more than 1024 sockets at all in Python right now) but that will be fixed again in 2.4.4 and 2.5.0.

My results are meaningless in your context though; you should take some sample of your application and that load and measure it.  Maybe you'll find something entirely surprising is the bottleneck.



From eprparadocs at gmail.com  Fri Aug 25 16:33:52 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 16:33:52 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>
References: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>
Message-ID: <44EF5EB0.2080309@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 14:43:43 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Perhaps the simple way to say this is that I need to do group 
>> communications that support RPC semantics with minimal overhead.
> 
> I'm still not really clear on what the application is.
> 

The application is a massively scalable data storage system. I plan on 
releasing it into the open source community within the next month or so. 
I've been working on it for almost two years now. Twisted and Python 
have made easier work of it from my first implementation (C/C++).

>> You ask about the network topology; all I can say is that it supports 
>> the normal communication means: unicast, broadcast and maybe multicast.
> 
> Heh.  "Normal" communication means?  After writing a P2P layer and 
> working on a SIP implementation, I have come to understand that the only 
> "normal" communication available is an *outgoing*, *unencrypted* HTTP 
> request on port 80... ;-)
> 
> More seriously, if you're writing an application for distributing 
> compute nodes to home computers, multicast is a non-starter.  If it's an 
> intranet, then maybe it's feasible.  Or, if you're on Internet 2 for 
> some reason.  (Is anybody actually on internet 2 these days?)
> 
This is not a "home application" but an enterprise and/or SSP 
application. Most likely it sits behind a firewall and if remote offices 
need to access it, they will get access via VPN portals.

I guess this is sort of a topology! Doh. All I know is that I have 
multicast and with some effort broadcast support.

> At any rate, producing a functioning multiunicast prototype with, e.g. 
> PB, would be the easiest way to get started if you need to fall back to 
> that sort of topology anyway in the case where a multicast solution 
> doesn't work.  Then you can collect data and determine how much 
> bandwidth is going to be saved in a realistic scenario...
>

So I can use PB with multicast support? How would I deal with all the 
target machines getting responses back>

>> I am being intentionally vague since I don't want to have any specific 
>> network architecture.
> 
> If you want to support arbitrary network architecture, you _definitely_ 
> can't use multicast, at all.  Even determining if *unicast* datagrams 
> work on an arbitrary network is a hard problem.

As I said the entire system sits behind a firewall and remote sites will 
use VPN to get to the system. This gives me multicast and broadcast (so 
long as everything is on the same subnet, even remote sites).
> 
>> I don't want to use overlay networks, if at all possible. While they 
>> are nice, I would prefer something a little more direct (though that 
>> might not be possible). The reason? Direct operations are faster.
> 
> Sometimes.  If your topology involves an extremely well-connected 
> overlay hub peer and a bunch of intermittently or poorly connected edge 
> peers, direct operations can be significantly slower.  While I'm not a 
> big fan of IRC's network architecture, the math on what happens if every 
> client is responsible for all of their own messages on a channel of 1000 
> people is really eye-opening.
> 

I had thought of the hub-and-spoke model and I designed the system that 
way, originally. But I have to respond to instantaneous demands which 
caused me to change the design of the system. Each of the servers can 
run as both servers (providing a service to a client app) and an end 
point (providing storage features). So a hub-and-spoke architecture are 
really out of the picture for me (at least I can't see an easy way).

I could probably do a self-organizing overlay network on top of the 
machines taking advantage of how they are connected together (the real 
physical topology) but even that presents me with an issue: I want the 
system to sort of be self-configuring. As such I don't have a way to 
auto-detect connection speeds.

I had thought of using a clock-synchronization algorithm to figure out 
bandwidth throttling but I thought it better to leave that to another 
day (or days). I also don't want the user (or owner of this beast) to 
have to manually configure that stuff.


>> I don't particular care if it is PB, XML-RPC or SOAP as the 
>> marshalling mechanism. I mention them since they allow me to solve one 
>> problem at a time. I would like to build the solution a piece at a 
>> time to do some measurements and testing. Today the underlying 
>> transport and tomorrow the marshallings.
> 
> It still seems to me like this is backwards.
> 
> The application can be complete, end-to-end, if you start marshalling 
> data and sending it over a simplistic (but possibly too-expensive) 
> mechanism.  Then, you can replace the transport as necessary later.  
> Preserving the semantics of the marshalling between things as radically 
> different as XMLRPC and PB would be very hard; but as you've said, the 
> semantics of your transport must remain identical.

That is certainly one way. I tend to think all my hard problems are 
going to be transport issues and work up the stack. I have had a share 
of algorithm issues too; nothing is quite obvious when you have a 1000 
or 10,000 machines to deal with!

> 
>> Now let me address the issue of TCP. It is a pretty heavy protocol to 
>> use. It takes a lot of resources on the sender and target and can take 
>> some time to establish a connection. Opening a 1000 or more sockets 
>> consumes a lot of resources in the underlying OS and in the Twisted 
>> client!
> 
> I still don't know what you mean by "resources", and as compared to 
> what.  In my experience all the alternatives to TCP end up consuming an 
> equivalent amount of RAM and CPU time... although in some cases you 
> might save on bandwidth.
> 

By resources I mean memory and time. Granted on a 1GB system with 3 GB 
of virtual, memory isn't a big deal, most of the times. But I have seen 
memory leaks kill this sucker more times than I care to recall. Once I 
ran the application for a few days and saw all my swap being used! It 
was very subtle memory leak in one of the libraries (in fact one library 
leak consumed 584M in less than one hour!).

>> If I use TCP and stick to the serial, synchronized semantics of RPC, 
>> doing one call at a time, I have only a few ways to solve the problem. 
>> Do one call at a time, repeat N times, and that could take quite a while.
> 
> I'm not sure what you mean by "at a time".  The operations can be quite 
> effectively parallelized, both by TCP and by Twisted talking to the OS: 
> if you keep a list of all your open connections and do the naive thing, 
> i.e., for each heartbeat:
> 
>    for connection in connections:
>        connection.sendPing(timeout=30).addErrback(connection.uhOh)
> 
> the initial loop will not take very long even with a very large number 
> of connections, and Twisted will send out traffic as network conditions 
> permit.
> 
> Most importantly, you do not need to wait for any of the calls to 
> complete to issue more calls, regardless of whether they're unicast or 
> multicast.  This same API could be refactored internally to group 
> together peers in the same multicast group and coalesce their pings; but 
> you still need to do the same complexity order of work, because you have 
> to track each peer's response individually.

Yes, I completely forgot that I would see them all in parallel. I tend 
to overlook Twisted's state machine architecture when I think of 
solutions. I am getting better but not quite there yet...

> 
> Finally, if all you're concerned with is clients dying, you can remove 
> Python from the equation entirely and let the TCP stack do its thing: 
> set SO_KEEPALIVE on all your sockets [in Twisted-ese: 
> self.transport.setTcpKeepAlive(True)] and just wait for connectionLost 
> to be called when a ping fails.  No user-space work _at all_, and 
> probably pretty minimal bandwidth usage.
> 
>> I could do M spawnProcesses and have each do N/M RPC calls.
> 
> Yow.  That definitely doesn't make sense unless you have a massively SMP 
> box.
> 
>> Or I could use M threads and do it that way.
> 
> ... and that would basically _never_ make sense, under any conditions.  
> Python's GIL negates any SMP benefits, Twisted won't send network 
> messages from threads anyway, and it would be substantially more complex.

Yes...see my mea culpa above....it is hard to stop thinking in terms of 
threads and processes!

> 
>> Granted I have M sockets open at a time, it is possible for this to 
>> take quite a while to execute. Performance would be terrible (and yes 
>> I want an approach that has good to very good performance. After all 
>> who would want poor to terrible performance?)
> 
> "performance 'would be' terrible" sounds like premature optimization to 
> me.  At least, I have lots of experience with systems where this 
> performance was more than good enough.  Huge massively multiplayer games 
> use such systems and manage to deal with tens of thousands of concurrent 
> clients per game node with (relative) ease, over the public internet, 
> with good performance, and without breaking the bank on bandwidth.
> 

Do the games use TCP or UDP? I would have thought they save state about 
each of the players in the server and use UDP for message passing. I 
thought that was part of the reason most game developers where 
interested in STUN?


>> So I divided the problem down to two parts. One, can I reduce the 
>> amount of traffic on the invoking side of the RPC request? Second, is 
>> how to deal with the response. Obviously I have to deal with the issue 
>> of failure, since RPC semantics require EXACTLY-ONCE.
> 
> If you're concerned about bandwidth *as a resource of its own* then this 
> is perhaps a legitimate concern.  But if you're concerned about reducing 
> bandwidth as a means to increase the real-time performance of the system 
> I don't think that it's actually going to save you a lot.  You save some 
> bandwidth, but then you move a bunch of request/response tracking out of 
> hardware and into Python.  Unless your new algorithm is more efficient 
> by a large margin, and N is very big indeed (100,000 is not "big", 
> especially when you can partition it using techniques like overlay 
> networks).

Bandwidth is a very important issue in this system. No one would run 
this on their network if it could bring down their network (or congest 
it so badly ...the old packet-storm issue).

Minimizing bandwidth usage is only one way to deal with performance. A 
congested network will drop packets (requiring retransmission, etc), so 
I try to minimize the impact on the network.

> 
>> That leads me to the observation that on an uncongested ethernet (...)
> 
> "uncongested ethernet" implies something very concrete about your 
> network topology.  Certainly it implies that you have enough spare 
> bandwith that you don't need to be compressing every byte.  Want to 
> expound? :)
> 
Well a congested network is about 1/2 the bandwidth; so I can expect 
about 5Mb/sec on a 10M ethernet, etc. So the idea would be keep traffic 
to a minimum.

As I mentioned earlier, if I was to do normal heartbeat messages with N 
machines, I have N! messages moving around. So long as N is small - a 
few hundred machines (and I have built machines in the telecom world 
that have had 100 machines), the load on the network is reasonable. But 
once you have 1000 machines, you have a 1,000,000 messages flying 
around. Through the work I did I got the number down to 2,000! And over 
15 seconds, that isn't too bad.

>> Hope this helps cast the problem...I didn't mean to sound terse before 
>> I just figured everyone had already thought about the problem and knew 
>> the issues.
> 
> I still really don't know what the problem at hand is.  I gather it has 
> something to do with sending a lot of traffic to a lot of peers but that 
> is still a description of an implementation technique, not a problem.  
> Are you making toast?  Doing distributed testing?  Sequencing genomes?  
> Cracking encryption?  Writing some kind of monster distributed 
> enterprise calendar server?  (I'm still not sure what you meant by 
> "communicating groups", above.)  Is the "problem" in this case to 
> develop a generic infrastructure for some wider set of problems, like an 
> open-source implementation of a MapReduce daemon?  If so, what are the 
> initial problems it's expected to be applied to?  What does all this 
> data, other than hearbteats, that you're slinging around *represent*?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From eprparadocs at gmail.com  Fri Aug 25 16:37:30 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 16:37:30 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>
References: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>
Message-ID: <44EF5F8A.9070101@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 15:36:28 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> I understand about the state machine of Twisted and how it can do the 
>> requests. The problem is that I still get down to issuing 1000s of TCP 
>> requests (and on top of that XML-RPC, SOAP, PB or whatever). It does 
>> beg the question has anyone really used a twisted server (or client) 
>> to invoke thousands of simultaneous RPC requests?
> 
> Yes.  I have done exactly that, while load-testing PB.  Currently the 
> only restriction I'm aware of that causes a real problem is python bug 
> #1494314 (you can't use more than 1024 sockets at all in Python right 
> now) but that will be fixed again in 2.4.4 and 2.5.0.
> 
> My results are meaningless in your context though; you should take some 
> sample of your application and that load and measure it.  Maybe you'll 
> find something entirely surprising is the bottleneck.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I guess I will have to switch to PB from XML-RPC. XML-RPC was convenient 
since I could write client apps in just about any language and access 
the system.

I know it is difficult in passing things between Python and anything 
else. Do you have any words of wisdom on how to limit the problems so 
that non-Python apps could talk to a PB enabled server?





From glyph at divmod.com  Fri Aug 25 17:18:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 17:18:09 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF5F8A.9070101@gmail.com>
Message-ID: <20060825211809.1717.677487305.divmod.quotient.31217@ohm>



On Fri, 25 Aug 2006 16:37:30 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>glyph at divmod.com wrote:

>I guess I will have to switch to PB from XML-RPC.

Not necessarily.  PB is more bandwidth-efficient but there are fewer tools to work with it, so marshalling complex data structures can be quite slow.  If you have small messages and a non-HTTP transport the differences may be negligible.

I was mainly using it as an example of a different possible vector of optimization.

>XML-RPC was convenient 
>since I could write client apps in just about any language and access the 
>system.

This convenience may well outweigh any real performance gain from using PB.

>I know it is difficult in passing things between Python and anything else. 
>Do you have any words of wisdom on how to limit the problems so that non- 
>Python apps could talk to a PB enabled server?

Nope.  You'd have to re-implement it.  If multilanguage access is a significant concern than PB is unlikely to be a good choice.



From glyph at divmod.com  Fri Aug 25 18:13:40 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 18:13:40 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF5EB0.2080309@gmail.com>
Message-ID: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>

On Fri, 25 Aug 2006 16:33:52 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>glyph at divmod.com wrote:

>>I'm still not really clear on what the application is.
>
>The application is a massively scalable data storage system.

Okay!  Now I know what you're getting at :).

>This is not a "home application" but an enterprise and/or SSP application. 
>Most likely it sits behind a firewall and if remote offices need to access 
>it, they will get access via VPN portals.
>
>I guess this is sort of a topology! Doh. All I know is that I have multicast 
>and with some effort broadcast support.

OK, that makes more sense.

>>At any rate, producing a functioning multiunicast prototype with, e.g. PB, 
>>would be the easiest way to get started if you need to fall back to that 
>>sort of topology anyway in the case where a multicast solution doesn't 
>>work.  Then you can collect data and determine how much bandwidth is going 
>>to be saved in a realistic scenario...
>
>So I can use PB with multicast support? How would I deal with all the target 
>machines getting responses back>

My point here was really not anything about PB specifically.  Using PB with multicast would require some tricks; you'd have to have a different Broker implementation, probably, and a datagram-based API.  You could still use the underlying message serialization format though.

>I had thought of the hub-and-spoke model and I designed the system that way, 
>originally. But I have to respond to instantaneous demands which caused me 
>to change the design of the system. Each of the servers can run as both 
>servers (providing a service to a client app) and an end point (providing 
>storage features). So a hub-and-spoke architecture are really out of the 
>picture for me (at least I can't see an easy way).

I don't see that it's out of the picture - your network topology allows you to fairly effortlessly connect between machines (no need for NAT traversal or "home servers" or any of that garbage: just give an IP on the intranet) - just include the "hub" and "spoke" code in the same process, and then any process can act as a hub... dynamic load-balancing is never easy, but it is certainly a possibility.

>I could probably do a self-organizing overlay network on top of the machines 
>taking advantage of how they are connected together (the real physical 
>topology) but even that presents me with an issue: I want the system to sort 
>of be self-configuring. As such I don't have a way to auto-detect connection 
>speeds.

You can detect connection speeds on the fly; just start doing some work, gather statistics on each connection, and reconfigure if it's not going fast enough.  No need for clock synchronization.

>>>Today the underlying transport and tomorrow the marshallings.
>>
>>It still seems to me like this is backwards.
>>
>>The application can be complete, end-to-end, if you start marshalling data 
>>and sending it over a simplistic (but possibly too-expensive) mechanism. 
>>(...)
>That is certainly one way. I tend to think all my hard problems are going to 
>be transport issues and work up the stack. I have had a share of algorithm 
>issues too; nothing is quite obvious when you have a 1000 or 10,000 machines 
>to deal with!

Working up the stack is difficult because you can't measure the working system at any point to decide what you need to optimize.  I prefer to work downwards.  If your highest level of code can remain unchanged while you refactor the underlying layers, then you can run the same tests for the same high-level code with different underlying layers to get an idea of their relative performance.  If you start optimizing at the bottom of the stack before the top is done, then you can easily end up with something which is optimized in the wrong direction, and which requires rewriting when the top layer is done anyway.

I guess this doesn't really have much bearing on your other questions though.

>>>Now let me address the issue of TCP. It is a pretty heavy protocol to use. 

>>I still don't know what you mean by "resources", and as compared to what. 

>By resources I mean memory and time. Granted on a 1GB system with 3 GB of 
>virtual, memory isn't a big deal, most of the times. But I have seen memory 
>leaks kill this sucker more times than I care to recall. Once I ran the 
>application for a few days and saw all my swap being used! It was very 
>subtle memory leak in one of the libraries (in fact one library leak 
>consumed 584M in less than one hour!).

I notice you don't specifically refer to features of TCP here, but instead of the perils of writing any software at all in C/C++ :).  Of course, Python can have memory leaks, but I wouldn't base your architecture around bugs in libraries which will hopefully be unnecessary in the future :).

>Yes, I completely forgot that I would see them all in parallel. I tend to 
>overlook Twisted's state machine architecture when I think of solutions. I 
>am getting better but not quite there yet...

It might not solve your problem.  But Twisted may be doing quite a lot more work in "parallel" than you're used to.  I can't really say, but I'd be curious to hear about it if you measure it.

>> (Threads are bad)
>Yes...see my mea culpa above....it is hard to stop thinking in terms of 
>threads and processes!

Yeah, it took me a while to get out of that habit when I started writing Twisted in the first place :).  (The thing that preceded it was a blocking, multithreaded abomination.)

>Do the games use TCP or UDP? I would have thought they save state about each 
>of the players in the server and use UDP for message passing. I thought that 
>was part of the reason most game developers where interested in STUN?

They ... vary.  A general rule of thumb is that they use TCP (or something like it) for control messages and data transfer, and then an *unreliable* most-recent-first UDP protocol for transmitting information about physical position, orientation and movement.  Game protocols are incredibly involved because they're typically communicating information about a dozen systems at once.  Game performance is different than typical application performance because quite often you only care about the most recent state of something, and you can happily throw away any old messages.

The games that are interested in STUN are not MMPs; the reason they are using it is to establish P2P connections so that players don't have to receive their updates from a central server, and you don't need to configure your firewall to play.

>Bandwidth is a very important issue in this system. No one would run this on 
>their network if it could bring down their network (or congest it so badly 
>...the old packet-storm issue).

This is another good reason to use TCP.  There are congestion control mechanisms for TCP; you would have to implement something yourself for UDP.

>As I mentioned earlier, if I was to do normal heartbeat messages with N 
>machines, I have N! messages moving around. So long as N is small - a few 
>hundred machines (and I have built machines in the telecom world that have 
>had 100 machines), the load on the network is reasonable. But once you have 
>1000 machines, you have a 1,000,000 messages flying around. Through the work 
>I did I got the number down to 2,000! And over 15 seconds, that isn't too 
>bad.

Why N! messages?  Using a naive hub-and-spoke model it seems like it would just be 2N.  It's only if every node needs to know about every other node that you get up to N!... why would you need that?



From eprparadocs at gmail.com  Fri Aug 25 18:59:23 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 18:59:23 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>
References: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>
Message-ID: <44EF80CB.3080601@gmail.com>

Please forgive the top post...I just felt it better this time since the 
discussion has become one of heartbeat.

Well if you look at things like the linux clustering software the 
approach they take is brain dead - each machine pings all the others. If 
you had 2 machines, you would have 2 pings per cycle. With 3 machines, 
you would have 6 and so on.

If you do put an overlay network on top of the physical topology you 
would definitely have something different. And a hub-and-spoke layout 
would give you much more than 2N.

What I did was combine two approaches into a single mechanism. I use 
"gossip" to pass around the state of system as I know it (actually the 
changes in state). I use a probabilistic approach to find the machine to 
poll - I pick one randomly. If that machine doesn't answer I pick P 
other machines asking them to poll the original machine and tell me what 
  they found (with the idea it might be congestion between me and the 
original machine). I find this approach converges to the true state of 
the system within a few polling cycles.

Why do I need to know the state of all the machines? Actually the system 
does "self-repair" and "self-healing". When a node goes down and comes 
back up each node will check the information it knows about the node. 
Some nodes will recognize that the machine that just came back has to 
hold certain data, and tell it. That's the 5 cent answer.

Chaz.


glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 16:33:52 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> glyph at divmod.com wrote:
> 
>>> I'm still not really clear on what the application is.
>>
>> The application is a massively scalable data storage system.
> 
> Okay!  Now I know what you're getting at :).
> 
>> This is not a "home application" but an enterprise and/or SSP 
>> application. Most likely it sits behind a firewall and if remote 
>> offices need to access it, they will get access via VPN portals.
>>
>> I guess this is sort of a topology! Doh. All I know is that I have 
>> multicast and with some effort broadcast support.
> 
> OK, that makes more sense.
> 
>>> At any rate, producing a functioning multiunicast prototype with, 
>>> e.g. PB, would be the easiest way to get started if you need to fall 
>>> back to that sort of topology anyway in the case where a multicast 
>>> solution doesn't work.  Then you can collect data and determine how 
>>> much bandwidth is going to be saved in a realistic scenario...
>>
>> So I can use PB with multicast support? How would I deal with all the 
>> target machines getting responses back>
> 
> My point here was really not anything about PB specifically.  Using PB 
> with multicast would require some tricks; you'd have to have a different 
> Broker implementation, probably, and a datagram-based API.  You could 
> still use the underlying message serialization format though.
> 
>> I had thought of the hub-and-spoke model and I designed the system 
>> that way, originally. But I have to respond to instantaneous demands 
>> which caused me to change the design of the system. Each of the 
>> servers can run as both servers (providing a service to a client app) 
>> and an end point (providing storage features). So a hub-and-spoke 
>> architecture are really out of the picture for me (at least I can't 
>> see an easy way).
> 
> I don't see that it's out of the picture - your network topology allows 
> you to fairly effortlessly connect between machines (no need for NAT 
> traversal or "home servers" or any of that garbage: just give an IP on 
> the intranet) - just include the "hub" and "spoke" code in the same 
> process, and then any process can act as a hub... dynamic load-balancing 
> is never easy, but it is certainly a possibility.
> 
>> I could probably do a self-organizing overlay network on top of the 
>> machines taking advantage of how they are connected together (the real 
>> physical topology) but even that presents me with an issue: I want the 
>> system to sort of be self-configuring. As such I don't have a way to 
>> auto-detect connection speeds.
> 
> You can detect connection speeds on the fly; just start doing some work, 
> gather statistics on each connection, and reconfigure if it's not going 
> fast enough.  No need for clock synchronization.
> 
>>>> Today the underlying transport and tomorrow the marshallings.
>>>
>>> It still seems to me like this is backwards.
>>>
>>> The application can be complete, end-to-end, if you start marshalling 
>>> data and sending it over a simplistic (but possibly too-expensive) 
>>> mechanism. (...)
>> That is certainly one way. I tend to think all my hard problems are 
>> going to be transport issues and work up the stack. I have had a share 
>> of algorithm issues too; nothing is quite obvious when you have a 1000 
>> or 10,000 machines to deal with!
> 
> Working up the stack is difficult because you can't measure the working 
> system at any point to decide what you need to optimize.  I prefer to 
> work downwards.  If your highest level of code can remain unchanged 
> while you refactor the underlying layers, then you can run the same 
> tests for the same high-level code with different underlying layers to 
> get an idea of their relative performance.  If you start optimizing at 
> the bottom of the stack before the top is done, then you can easily end 
> up with something which is optimized in the wrong direction, and which 
> requires rewriting when the top layer is done anyway.
> 
> I guess this doesn't really have much bearing on your other questions 
> though.
> 
>>>> Now let me address the issue of TCP. It is a pretty heavy protocol 
>>>> to use. 
> 
>>> I still don't know what you mean by "resources", and as compared to 
>>> what. 
> 
>> By resources I mean memory and time. Granted on a 1GB system with 3 GB 
>> of virtual, memory isn't a big deal, most of the times. But I have 
>> seen memory leaks kill this sucker more times than I care to recall. 
>> Once I ran the application for a few days and saw all my swap being 
>> used! It was very subtle memory leak in one of the libraries (in fact 
>> one library leak consumed 584M in less than one hour!).
> 
> I notice you don't specifically refer to features of TCP here, but 
> instead of the perils of writing any software at all in C/C++ :).  Of 
> course, Python can have memory leaks, but I wouldn't base your 
> architecture around bugs in libraries which will hopefully be 
> unnecessary in the future :).
> 
>> Yes, I completely forgot that I would see them all in parallel. I tend 
>> to overlook Twisted's state machine architecture when I think of 
>> solutions. I am getting better but not quite there yet...
> 
> It might not solve your problem.  But Twisted may be doing quite a lot 
> more work in "parallel" than you're used to.  I can't really say, but 
> I'd be curious to hear about it if you measure it.
> 
>>> (Threads are bad)
>> Yes...see my mea culpa above....it is hard to stop thinking in terms 
>> of threads and processes!
> 
> Yeah, it took me a while to get out of that habit when I started writing 
> Twisted in the first place :).  (The thing that preceded it was a 
> blocking, multithreaded abomination.)
> 
>> Do the games use TCP or UDP? I would have thought they save state 
>> about each of the players in the server and use UDP for message 
>> passing. I thought that was part of the reason most game developers 
>> where interested in STUN?
> 
> They ... vary.  A general rule of thumb is that they use TCP (or 
> something like it) for control messages and data transfer, and then an 
> *unreliable* most-recent-first UDP protocol for transmitting information 
> about physical position, orientation and movement.  Game protocols are 
> incredibly involved because they're typically communicating information 
> about a dozen systems at once.  Game performance is different than 
> typical application performance because quite often you only care about 
> the most recent state of something, and you can happily throw away any 
> old messages.
> 
> The games that are interested in STUN are not MMPs; the reason they are 
> using it is to establish P2P connections so that players don't have to 
> receive their updates from a central server, and you don't need to 
> configure your firewall to play.
> 
>> Bandwidth is a very important issue in this system. No one would run 
>> this on their network if it could bring down their network (or congest 
>> it so badly ...the old packet-storm issue).
> 
> This is another good reason to use TCP.  There are congestion control 
> mechanisms for TCP; you would have to implement something yourself for UDP.
> 
>> As I mentioned earlier, if I was to do normal heartbeat messages with 
>> N machines, I have N! messages moving around. So long as N is small - 
>> a few hundred machines (and I have built machines in the telecom world 
>> that have had 100 machines), the load on the network is reasonable. 
>> But once you have 1000 machines, you have a 1,000,000 messages flying 
>> around. Through the work I did I got the number down to 2,000! And 
>> over 15 seconds, that isn't too bad.
> 
> Why N! messages?  Using a naive hub-and-spoke model it seems like it 
> would just be 2N.  It's only if every node needs to know about every 
> other node that you get up to N!... why would you need that?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From p.mayers at imperial.ac.uk  Sat Aug 26 07:39:20 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 26 Aug 2006 12:39:20 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF44DF.8030401@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com>
Message-ID: <44F032E8.6070103@imperial.ac.uk>

Chaz. wrote:
> 
> Now let me address the issue of TCP. It is a pretty heavy protocol to 
> use. It takes a lot of resources on the sender and target and can take 
> some time to establish a connection. Opening a 1000 or more sockets 
> consumes a lot of resources in the underlying OS and in the Twisted client!

People keep trying to help you, and you keep repeating yourself. From 
what I can gather:

You *need* a relatively lightweight group communication method. My 
advice would be to investigate a message bus - see recent posts on this 
mailing list. "Spread" at www.spread.org and ActiveMQ (via the simple 
text-over-tcp-based STOMP protocol). Reports are that both can (under 
the right conditions) execute many thousands of group messages per second.

Failing that, Glyph has hinted at another approach. You could elect a 
small number (~1%) of your nodes as "proxies" so that as well as being 
clients, they act as intermediaries for messages. This is a simple form 
of overlay network, which you also stated you didn't want to use - lord 
knows why. People use these techniques for a reason - they work.

You *want* (have decided you want) a reliable multicast protocol over 
which you'll layer a simple RPC protocol. RMT (reliable multicast 
transport) is as yet an unsolved problem. It is VERY VERY hard. None 
exist for Twisted, to the best of my knowledge. I would be willing to 
bet money that, for "thousands" of nodes, the overhead of implementing 
such a protocol (in Python, one presumes) would exceed the overhead of 
just using TCP. If you had said "hundreds of thousands" of nodes, well, 
that would be different.

If you want to knock an RMT up based on the assumption you won't drop 
packets, then be my guest, but I would suggest that if you *really* 
believe multicast is that reliable, then your experience of IP multicast 
networks has been a lot more rosy than mine, and I run a very large one.

"reliable multicast" into google would be a good start - there are some 
good RFCs produced the the rmt IETF working group.

> 
> If I use TCP and stick to the serial, synchronized semantics of RPC, 
> doing one call at a time, I have only a few ways to solve the problem. 
> Do one call at a time, repeat N times, and that could take quite a 
> while. I could do M spawnProcesses and have each do N/M RPC calls. Or I 
> could use M threads and do it that way. Granted I have M sockets open at 
> a time, it is possible for this to take quite a while to execute. 
> Performance would be terrible (and yes I want an approach that has good 
> to very good performance. After all who would want poor to terrible 
> performance?)

Knuth and his comments on early optimisation apply here. Have you tried 
it? You might be surprised.

I have some Twisted code that does SNMP to over a thousand devices. This 
is, obviously, unicast UDP. The throughput is very high. A simple 
ACK-based sequence-numbered UDP unicast will very likely scale to 
thousands of nodes.

> 
> So I divided the problem down to two parts. One, can I reduce the amount 
> of traffic on the invoking side of the RPC request? Second, is how to 
> deal with the response. Obviously I have to deal with the issue of 
> failure, since RPC semantics require EXACTLY-ONCE.

How many calls per second are you doing, and approximately what volume 
of data will each call exchange?

You seem inflexible about aspects of the design. If if were me, I'd 
abandon RPC semantics. Smarter people than anyone here have argued 
convincingly against making a remote procedure call look anything like a 
local one, and once you abandon *that*, RPCs look like message exchanges.

> 
> That gets me to the multicast or broadcast scheme. In one call I could 
> get the N processors to start working. Now I just have to solve the 
> other half of the problem: how to get the answers returned without 
> swamping the network or how to detect when I didn't get an answer from a 
> processor at all.
> 
> That leads me to the observation that on an uncongested ethernet I 
> almost always have a successful transmission. This means I have to deal 

Successful transmission is really the easy bit for multicast. There is 
IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
upstream IGP flap, flooding issues due to global MSDP issues, and so forth.

> with that issue and a few others. Why do I care? Because I believe I can 
> accomplish what I need - get great performance most of the time, and 
> only in a few instances have to deal with do the operation over again.
> 
> This is a tough problem to solve. I am not sure of the outcome but I am 
> sure that I need to start somewhere. What I know is that it is partly 
> transport and partly marshalling. The semantics of the call have to stay 
> fixed: EXACTLY-ONCE.

If you MUST have EXACTLY-ONCE group communication semantics, you should 
use a message bus.



From eprparadocs at gmail.com  Sat Aug 26 09:08:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 09:08:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F032E8.6070103@imperial.ac.uk>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
Message-ID: <44F047E1.4010809@gmail.com>

Phil Mayers wrote:
> Chaz. wrote:
>>
>> Now let me address the issue of TCP. It is a pretty heavy protocol to 
>> use. It takes a lot of resources on the sender and target and can take 
>> some time to establish a connection. Opening a 1000 or more sockets 
>> consumes a lot of resources in the underlying OS and in the Twisted 
>> client!
> 
> People keep trying to help you, and you keep repeating yourself. From 
> what I can gather:
> 
> You *need* a relatively lightweight group communication method. My 
> advice would be to investigate a message bus - see recent posts on this 
> mailing list. "Spread" at www.spread.org and ActiveMQ (via the simple 
> text-over-tcp-based STOMP protocol). Reports are that both can (under 
> the right conditions) execute many thousands of group messages per second.
> 

I started out using Spread some time ago (more than 2 years ago). The 
implementation was limited to a hundred or so nodes (that is in the 
notes on the spread implementation). Secondly it isn't quite so 
lightweight as you think (I've measured the performance).

It is a very nice system but when it gets to 1000s of machines very 
little work has been done on solving many of the problems. My research 
on it goes back almost a decade starting out with Horus.

> Failing that, Glyph has hinted at another approach. You could elect a 
> small number (~1%) of your nodes as "proxies" so that as well as being 
> clients, they act as intermediaries for messages. This is a simple form 
> of overlay network, which you also stated you didn't want to use - lord 
> knows why. People use these techniques for a reason - they work.
> 

I know about overlay networks, gossip networks, etc. I have used both 
and would prefer something simpler. That is the reason for my pushing on 
this group - to see what ideas people might have. I appreciate Glyph's 
comments and perspectives - very refreshing - in contrast to the many I 
have gotten.

> You *want* (have decided you want) a reliable multicast protocol over 
> which you'll layer a simple RPC protocol. RMT (reliable multicast 
> transport) is as yet an unsolved problem. It is VERY VERY hard. None 
> exist for Twisted, to the best of my knowledge. I would be willing to 
> bet money that, for "thousands" of nodes, the overhead of implementing 
> such a protocol (in Python, one presumes) would exceed the overhead of 
> just using TCP. If you had said "hundreds of thousands" of nodes, well, 
> that would be different.
> 
> If you want to knock an RMT up based on the assumption you won't drop 
> packets, then be my guest, but I would suggest that if you *really* 
> believe multicast is that reliable, then your experience of IP multicast 
> networks has been a lot more rosy than mine, and I run a very large one.
> 
> "reliable multicast" into google would be a good start - there are some 
> good RFCs produced the the rmt IETF working group.
> 

Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
approaches they are being tossed about. I have tried to implement some 
of them. I just am not of the opinion that smart people can't find 
solutions to tough problems.

Is multicast or broadcast the right way? I don't know, but I do know 
that without trying we will never know. Having been part of the IETF 
community for a lot of years (I was part of the group that worked on 
SNMP v1 and the WinSock standard), I know that when the "pedal meets the 
metal" sometimes you discover interesting things.

>>
>> If I use TCP and stick to the serial, synchronized semantics of RPC, 
>> doing one call at a time, I have only a few ways to solve the problem. 
>> Do one call at a time, repeat N times, and that could take quite a 
>> while. I could do M spawnProcesses and have each do N/M RPC calls. Or 
>> I could use M threads and do it that way. Granted I have M sockets 
>> open at a time, it is possible for this to take quite a while to 
>> execute. Performance would be terrible (and yes I want an approach 
>> that has good to very good performance. After all who would want poor 
>> to terrible performance?)
> 
> Knuth and his comments on early optimisation apply here. Have you tried 
> it? You might be surprised.
>

I am sorry to say I don't know the paper or research you are referring 
to. Can you point me to some references?


> I have some Twisted code that does SNMP to over a thousand devices. This 
> is, obviously, unicast UDP. The throughput is very high. A simple 
> ACK-based sequence-numbered UDP unicast will very likely scale to 
> thousands of nodes.
>

Thanks for the information. This is what makes me think that I want 
something based on UDP and not TCP! And if I can do RMT (or some variant 
of it) I might be able to get better performance. But, as I said it is 
the nice thing about not having someone telling me I need to get a 
product out the door tomorrow! I have time to experiment and learn.


>>
>> So I divided the problem down to two parts. One, can I reduce the 
>> amount of traffic on the invoking side of the RPC request? Second, is 
>> how to deal with the response. Obviously I have to deal with the issue 
>> of failure, since RPC semantics require EXACTLY-ONCE.
> 
> How many calls per second are you doing, and approximately what volume 
> of data will each call exchange?
> 
This is information I can't provide since the system I have designing 
has no equivalent in the marketplace today (either commercial or open 
source). All I know is that the first version of the system I built - 
using C/C++ and a traditional architecture (a few dozens of machines) 
was able to handle 200 transactions/minute (using SOAP). While there 
were some "short messages" (less than an normal MTU), I had quite a few 
that topped out 50K bytes and some up to 100Mbytes.

Doing some research I have been told to expect a great many short ones 
and many very long ones; sort of an inverted bell curve. But there are 
very few real statistics. As I said I have to put a stake in the ground 
and build something so I am guessing where the problems might rest and 
trying to find some solutions for them. Hence my query.

> You seem inflexible about aspects of the design. If if were me, I'd 
> abandon RPC semantics. Smarter people than anyone here have argued 
> convincingly against making a remote procedure call look anything like a 
> local one, and once you abandon *that*, RPCs look like message exchanges.
>

I agree. I am not sure where the answer lies. I like Twisted because it 
affords a nice way to experiment with different mechanisms both at the 
transport and the semantic layer. I am looking for ideas! As I said I 
have the time and inclination to experiment. What I need are things that 
aren't obvious (because I haven't heard of them or thought of them).

>>
>> That gets me to the multicast or broadcast scheme. In one call I could 
>> get the N processors to start working. Now I just have to solve the 
>> other half of the problem: how to get the answers returned without 
>> swamping the network or how to detect when I didn't get an answer from 
>> a processor at all.
>>
>> That leads me to the observation that on an uncongested ethernet I 
>> almost always have a successful transmission. This means I have to deal 
> 
> Successful transmission is really the easy bit for multicast. There is 
> IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
> upstream IGP flap, flooding issues due to global MSDP issues, and so forth.
> 

I agree about the successful transmission. You've lost me on the IGMP 
part. Can you elaborate as to your thoughts?

>> with that issue and a few others. Why do I care? Because I believe I 
>> can accomplish what I need - get great performance most of the time, 
>> and only in a few instances have to deal with do the operation over 
>> again.
>>
>> This is a tough problem to solve. I am not sure of the outcome but I 
>> am sure that I need to start somewhere. What I know is that it is 
>> partly transport and partly marshalling. The semantics of the call 
>> have to stay fixed: EXACTLY-ONCE.
> 
> If you MUST have EXACTLY-ONCE group communication semantics, you should 
> use a message bus.
> 

I do know I need EXACTLY-ONCE semantics but how and where I implement 
them is the unknown. When you use TCP you assume the network provides 
the bulk of the solution. I have been thinking that if I use a less 
reliable network - one with low overhead - that I can provide the server 
part to do the EXACTLY-ONCE piece.

As to why I need EXACTLY-ONCE, well if I have to store something I know 
I absolutely need to store it. I can't be in the position that I don't 
know it has been stored - it must be there.

Thanks for the great remarks....I look forward to reading more.

Chaz



From pablo at minimoesfuerzo.org  Sat Aug 26 09:27:23 2006
From: pablo at minimoesfuerzo.org (Pablo Marti)
Date: Sat, 26 Aug 2006 14:27:23 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F047E1.4010809@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com>
Message-ID: <1156598844.7241.4.camel@localhost>

On Sat, 2006-08-26 at 09:08 -0400, Chaz. wrote:
> Phil Mayers wrote:
> > Chaz. wrote:
> >>
> >> Now let me address the issue of TCP. It is a pretty heavy protocol to 
> >> use. It takes a lot of resources on the sender and target and can take 
> >> some time to establish a connection. Opening a 1000 or more sockets 
> >> consumes a lot of resources in the underlying OS and in the Twisted 
> >> client!
> > 
> > Knuth and his comments on early optimisation apply here. Have you tried 
> > it? You might be surprised.
> >
> 
> I am sorry to say I don't know the paper or research you are referring 
> to. Can you point me to some references?

The full version of the quote is "We should forget about small
efficiencies, say about 97% of the time: premature optimization is the
root of all
evil." (http://www.cookcomputing.com/blog/archives/000084.html)

http://en.wikipedia.org/wiki/Optimization_(computer_science)

Very interesting thread.

Regards,
Pablo






From p.mayers at imperial.ac.uk  Sat Aug 26 09:53:13 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 26 Aug 2006 14:53:13 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F047E1.4010809@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com>
Message-ID: <44F05249.2060803@imperial.ac.uk>

Chaz. wrote:

> 
> I started out using Spread some time ago (more than 2 years ago). The 
> implementation was limited to a hundred or so nodes (that is in the 
> notes on the spread implementation). Secondly it isn't quite so 
> lightweight as you think (I've measured the performance).
> 
> It is a very nice system but when it gets to 1000s of machines very 
> little work has been done on solving many of the problems. My research 
> on it goes back almost a decade starting out with Horus.

I must admit to not having attempted to scale it that far, but I was 
under the impression that only the more expensive delivery modes were 
that costly. But by the sounds of it, you don't need me to tell you that.

> 
> Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
> approaches they are being tossed about. I have tried to implement some 
> of them. I just am not of the opinion that smart people can't find 
> solutions to tough problems.


Ok, in which case my apologies. My reading of your posts had lead me to 
believe, incorrectly, you may not be familiar with the various issues. 
In that case, you can (should) disregard most of it.

> 
> Is multicast or broadcast the right way? I don't know, but I do know 
> that without trying we will never know. Having been part of the IETF 

It's clearly right for some things - I'm just not sure how much 
bi-directional distribution would be helped by it, since you've got at 
some point to get the replies back.

> community for a lot of years (I was part of the group that worked on 
> SNMP v1 and the WinSock standard), I know that when the "pedal meets the 
> metal" sometimes you discover interesting things.

I didn't realise winsock went near the IETF. You learn something new 
every day.

>>
>> Knuth and his comments on early optimisation apply here. Have you 
>> tried it? You might be surprised.
>>
> 
> I am sorry to say I don't know the paper or research you are referring 
> to. Can you point me to some references?

Sorry, it's a phrase from Donald Knuth's (excellent) three-volume 
programming book, "The Art of Computer Programming". Highly recommended.

> 
> Thanks for the information. This is what makes me think that I want 
> something based on UDP and not TCP! And if I can do RMT (or some variant 
> of it) I might be able to get better performance. But, as I said it is 
> the nice thing about not having someone telling me I need to get a 
> product out the door tomorrow! I have time to experiment and learn.

When I wrote my reply I hadn't seen your comment on the app being 
distributed storage.

>> How many calls per second are you doing, and approximately what volume 
>> of data will each call exchange?
>>
> This is information I can't provide since the system I have designing 
> has no equivalent in the marketplace today (either commercial or open 
> source). All I know is that the first version of the system I built - 
> using C/C++ and a traditional architecture (a few dozens of machines) 
> was able to handle 200 transactions/minute (using SOAP). While there 
> were some "short messages" (less than an normal MTU), I had quite a few 
> that topped out 50K bytes and some up to 100Mbytes.

Oh. In which case more or less everything I wrote is useless!

>>
>> Successful transmission is really the easy bit for multicast. There is 
>> IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
>> upstream IGP flap, flooding issues due to global MSDP issues, and so 
>> forth.
>>
> 
> I agree about the successful transmission. You've lost me on the IGMP 
> part. Can you elaborate as to your thoughts?

Well, my experience of large multicast IPv4 networks is that short 
interruptions in multicast connectivity are not uncommon. There are a 
number of reasons for this, which can be broadly broken down into 1st 
hop and subsequent hop issues.

Basically, in a routed-multicast environment, I've seen the subnet IGMP 
querier (normally the gateway) get pre-empted by badly configured or 
plain broken OS stacks (e.g. someone running Linux with the IGMPv3 early 
patches). I've also seen confusion for highly-available subnets (e.g. 
VRRPed networks) where the IGMP querier and the multicast designated 
forwarder are different. This can cause issues with the IGMP snooping on 
the downstream layer2 switches when the DF is no longer on the path 
which the layer2 snooping builds.

You also get issues with upstream changes in the unicast routing 
topology affecting PIM.

Most of these are only issues with routed multicast. Subnet-local is a 
lot simpler, though you do still need an IGMP querier and switches with 
IGMP snooping.

> 
> I do know I need EXACTLY-ONCE semantics but how and where I implement 
> them is the unknown. When you use TCP you assume the network provides 
> the bulk of the solution. I have been thinking that if I use a less 
> reliable network - one with low overhead - that I can provide the server 
> part to do the EXACTLY-ONCE piece.
> 
> As to why I need EXACTLY-ONCE, well if I have to store something I know 
> I absolutely need to store it. I can't be in the position that I don't 
> know it has been stored - it must be there.
> 
> Thanks for the great remarks....I look forward to reading more.

This makes a lot more sense now I know it's storage related.

You're right, this is a tricky and uncommon problem.

Let me see if I've got this right:

You're building some kind of distributed storage service. Clients will 
access the storage by a "normal" protocol to one of the nodes. Reads 
from the store are relatively easy, but writes to the store will need to 
be distributed to all or a subset of the nodes. Obviously you'll have a 
mix of lots of small writes and some very large writes.

Hmm.

Are you envisioning that you might have >1 storage set on the nodes, and 
using a different multicast group per storage set to build optimal 
distribution?

You might be able to perform some tricks depending on whether this 
service provides block- or filesystem-level semantics. If it's the 
latter, you could import some techniques from the distributed version 
control arena - broadly speaking, node+version number each file and 
"broadcast" (in the application sense) just the file + 
newnode+newversion to the other store nodes, and have them lock the 
local copy and initiate a pull from the updated node.

For block-level storage, that's going to be a lot harder.

For the multicast, something like NORM, which as you probably know is 
basically forward-error-corrected transmit channel with 
receiver-triggered re-transmits, would probably work. An implementation 
would likely be non-trivial, but a fascinating project.



From eprparadocs at gmail.com  Sat Aug 26 10:14:48 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 10:14:48 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F05249.2060803@imperial.ac.uk>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com> <44F05249.2060803@imperial.ac.uk>
Message-ID: <44F05758.2020208@gmail.com>

Phil Mayers wrote:
> Chaz. wrote:
> 
>>
>> I started out using Spread some time ago (more than 2 years ago). The 
>> implementation was limited to a hundred or so nodes (that is in the 
>> notes on the spread implementation). Secondly it isn't quite so 
>> lightweight as you think (I've measured the performance).
>>
>> It is a very nice system but when it gets to 1000s of machines very 
>> little work has been done on solving many of the problems. My research 
>> on it goes back almost a decade starting out with Horus.
> 
> I must admit to not having attempted to scale it that far, but I was 
> under the impression that only the more expensive delivery modes were 
> that costly. But by the sounds of it, you don't need me to tell you that.
> 

Originally I had started out thinking about work surrounding Horus and 
researched a lot of the group communication stuff. When I got to Spread 
I tried it thinking it would solve all my problems. I actually built a 
system using it only to be sadly disappointed.

First I hit the 100+ node limit. Then I got to the static configuration, 
which I spent time trying to overcome. Finally when I did some 
measurements I decided that 1000s of machines would require a 
"hub-and-spoke" like architecture that Glyph suggested. I decided it was 
much too complicated and backed away.

Since that time I let the pendulum swing to the other extreme - no 
predefined architecture (or aggregation of machines). I want to examine 
what happens when I have 1000s of machines without a topology; can I 
solve the problems. As I said I solved the decentralized membership list 
issue. Now I am on to the harder problem: can I get RPC-like semantics 
with reasonable performance over the 1000s of machines? I don't know.

>>
>> Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
>> approaches they are being tossed about. I have tried to implement some 
>> of them. I just am not of the opinion that smart people can't find 
>> solutions to tough problems.
> 
> 
> Ok, in which case my apologies. My reading of your posts had lead me to 
> believe, incorrectly, you may not be familiar with the various issues. 
> In that case, you can (should) disregard most of it.
> 

I think the problem is on my part. I asked what I thought was an obvious 
question without laying the groundwork as to what I knew or how.

>>
>> Is multicast or broadcast the right way? I don't know, but I do know 
>> that without trying we will never know. Having been part of the IETF 
> 
> It's clearly right for some things - I'm just not sure how much 
> bi-directional distribution would be helped by it, since you've got at 
> some point to get the replies back.
>

I think I feel comfortable with using multicast (or broadcast) for the 
invoking RPC call. What I don't have a clear feeling for is how to 
correctly handle the response - I know I can't send them all within some 
small delta without congesting the network. So I am looking at all sorts 
of techniques (like holding off the responses, randomly...but I don't 
know how that will impact retries, etc).

>> community for a lot of years (I was part of the group that worked on 
>> SNMP v1 and the WinSock standard), I know that when the "pedal meets 
>> the metal" sometimes you discover interesting things.
> 
> I didn't realise winsock went near the IETF. You learn something new 
> every day.
> 

Me too!

>>>
>>> Knuth and his comments on early optimisation apply here. Have you 
>>> tried it? You might be surprised.
>>>
>>
>> I am sorry to say I don't know the paper or research you are referring 
>> to. Can you point me to some references?
> 
> Sorry, it's a phrase from Donald Knuth's (excellent) three-volume 
> programming book, "The Art of Computer Programming". Highly recommended.
>

Ah, ok. Having read them so many years ago I forgot most of it. lol..


>>
>> Thanks for the information. This is what makes me think that I want 
>> something based on UDP and not TCP! And if I can do RMT (or some 
>> variant of it) I might be able to get better performance. But, as I 
>> said it is the nice thing about not having someone telling me I need 
>> to get a product out the door tomorrow! I have time to experiment and 
>> learn.
> 
> When I wrote my reply I hadn't seen your comment on the app being 
> distributed storage.
> 
>>> How many calls per second are you doing, and approximately what 
>>> volume of data will each call exchange?
>>>
>> This is information I can't provide since the system I have designing 
>> has no equivalent in the marketplace today (either commercial or open 
>> source). All I know is that the first version of the system I built - 
>> using C/C++ and a traditional architecture (a few dozens of machines) 
>> was able to handle 200 transactions/minute (using SOAP). While there 
>> were some "short messages" (less than an normal MTU), I had quite a 
>> few that topped out 50K bytes and some up to 100Mbytes.
> 
> Oh. In which case more or less everything I wrote is useless!
> 

Well I don't think so. Based on your multicast comment I wonder about 
broadcast...have you ever seen the same thing happen? When you say 
"short interruptions" are we talking more than seconds? Can you 
elaborate a bit?

>>>
>>> Successful transmission is really the easy bit for multicast. There 
>>> is IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
>>> upstream IGP flap, flooding issues due to global MSDP issues, and so 
>>> forth.
>>>
>>
>> I agree about the successful transmission. You've lost me on the IGMP 
>> part. Can you elaborate as to your thoughts?
> 
> Well, my experience of large multicast IPv4 networks is that short 
> interruptions in multicast connectivity are not uncommon. There are a 
> number of reasons for this, which can be broadly broken down into 1st 
> hop and subsequent hop issues.
> 
> Basically, in a routed-multicast environment, I've seen the subnet IGMP 
> querier (normally the gateway) get pre-empted by badly configured or 
> plain broken OS stacks (e.g. someone running Linux with the IGMPv3 early 
> patches). I've also seen confusion for highly-available subnets (e.g. 
> VRRPed networks) where the IGMP querier and the multicast designated 
> forwarder are different. This can cause issues with the IGMP snooping on 
> the downstream layer2 switches when the DF is no longer on the path 
> which the layer2 snooping builds.
> 
> You also get issues with upstream changes in the unicast routing 
> topology affecting PIM.
> 
> Most of these are only issues with routed multicast. Subnet-local is a 
> lot simpler, though you do still need an IGMP querier and switches with 
> IGMP snooping.
> 
>>
>> I do know I need EXACTLY-ONCE semantics but how and where I implement 
>> them is the unknown. When you use TCP you assume the network provides 
>> the bulk of the solution. I have been thinking that if I use a less 
>> reliable network - one with low overhead - that I can provide the 
>> server part to do the EXACTLY-ONCE piece.
>>
>> As to why I need EXACTLY-ONCE, well if I have to store something I 
>> know I absolutely need to store it. I can't be in the position that I 
>> don't know it has been stored - it must be there.
>>
>> Thanks for the great remarks....I look forward to reading more.
> 
> This makes a lot more sense now I know it's storage related.
> 
> You're right, this is a tricky and uncommon problem.
> 
> Let me see if I've got this right:
> 
> You're building some kind of distributed storage service. Clients will 
> access the storage by a "normal" protocol to one of the nodes. Reads 
> from the store are relatively easy, but writes to the store will need to 
> be distributed to all or a subset of the nodes. Obviously you'll have a 
> mix of lots of small writes and some very large writes.
> 
> Hmm.
> 
> Are you envisioning that you might have >1 storage set on the nodes, and 
> using a different multicast group per storage set to build optimal 
> distribution?
> 
> You might be able to perform some tricks depending on whether this 
> service provides block- or filesystem-level semantics. If it's the 
> latter, you could import some techniques from the distributed version 
> control arena - broadly speaking, node+version number each file and 
> "broadcast" (in the application sense) just the file + 
> newnode+newversion to the other store nodes, and have them lock the 
> local copy and initiate a pull from the updated node.
> 
> For block-level storage, that's going to be a lot harder.
> 
Definitely! Right now I dealing on the filesystem level. Doing block 
level would be incredibly difficult. I am trying to solve the simpler 
problem first! lol.

> For the multicast, something like NORM, which as you probably know is 
> basically forward-error-corrected transmit channel with 
> receiver-triggered re-transmits, would probably work. An implementation 
> would likely be non-trivial, but a fascinating project.
> 


Right now I am trying to find a solution to an interesting problem: how 
to find a file without knowing exactly where it exists in the network. 
You have to do this to make the system scale nicely.

Basically each node holds information about the files (aka objects) it 
stores. I do this so that I don't have a central database any where 
(this allows the system to scale differently. With a central database I 
would have that set of servers scale differently than the storage nodes).

Now I can build a set of machines that are the distributed database 
machines - each storing something - and querying them for where the file 
lives; this would narrow the machines I have to directly talk to, but it 
feels wrong. This is sort of a variation of the hub-and-spoke that Glyph 
talked about. But having said that I am trying to determine if I can get 
away from that and just go to a very unstructured environment (without 
intermediate database nodes).

As I said I have time to experiment before I put the code in the open 
source community ...

Peace,
Chaz



From glyph at divmod.com  Sat Aug 26 17:43:28 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 26 Aug 2006 17:43:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F05758.2020208@gmail.com>
Message-ID: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>

On Sat, 26 Aug 2006 10:14:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>Right now I am trying to find a solution to an interesting problem: how to 
>find a file without knowing exactly where it exists in the network. You have 
>to do this to make the system scale nicely.

>Basically each node holds information about the files (aka objects) it 
>stores. I do this so that I don't have a central database any where (this 
>allows the system to scale differently. With a central database I would have 
>that set of servers scale differently than the storage nodes).

>Now I can build a set of machines that are the distributed database machines 
>- each storing something - and querying them for where the file lives; this 
>would narrow the machines I have to directly talk to, but it feels wrong. 
>This is sort of a variation of the hub-and-spoke that Glyph talked about. 
>But having said that I am trying to determine if I can get away from that 
>and just go to a very unstructured environment (without intermediate 
>database nodes).

This sounds an awful lot like a distributed hashtable.  It does implicitly use an overlay network, but not a hub-and-spoke overlay network.

I'm not intimately familiar with the algorithms involved, so rather than try to describe them, I'll just refer you to the relatively nice wikipedia page on the topic:

    http://en.wikipedia.org/wiki/Distributed_hash_table

There is also a project in Python (not Twisted though) which may serve as an example:

    http://thecircle.org.au/

Are these ideas useful?  Have you looked at them before?



From eprparadocs at gmail.com  Sat Aug 26 19:25:40 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 19:25:40 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>
References: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>
Message-ID: <44F0D874.50206@gmail.com>

glyph at divmod.com wrote:
> On Sat, 26 Aug 2006 10:14:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> Right now I am trying to find a solution to an interesting problem: 
>> how to find a file without knowing exactly where it exists in the 
>> network. You have to do this to make the system scale nicely.
> 
>> Basically each node holds information about the files (aka objects) it 
>> stores. I do this so that I don't have a central database any where 
>> (this allows the system to scale differently. With a central database 
>> I would have that set of servers scale differently than the storage 
>> nodes).
> 
>> Now I can build a set of machines that are the distributed database 
>> machines - each storing something - and querying them for where the 
>> file lives; this would narrow the machines I have to directly talk to, 
>> but it feels wrong. This is sort of a variation of the hub-and-spoke 
>> that Glyph talked about. But having said that I am trying to determine 
>> if I can get away from that and just go to a very unstructured 
>> environment (without intermediate database nodes).
> 
> This sounds an awful lot like a distributed hashtable.  It does 
> implicitly use an overlay network, but not a hub-and-spoke overlay network.
> 
> I'm not intimately familiar with the algorithms involved, so rather than 
> try to describe them, I'll just refer you to the relatively nice 
> wikipedia page on the topic:
> 
>    http://en.wikipedia.org/wiki/Distributed_hash_table
> 
> There is also a project in Python (not Twisted though) which may serve 
> as an example:
> 
>    http://thecircle.org.au/
> 
> Are these ideas useful?  Have you looked at them before?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

As I understand DHT the concept is to create a hash identifier, 
partition it into "chunks", and use the chunks to locate the file. It is 
an interesting idea and certainly one approach. I am keeping it in my 
back pocket.  There are many reasons I don't like this approach.

First, with a poorly segmented hash, you can have a few levels of 
indirection before reaching the file. You can see this in a lot of p2p 
file sharing system. I would like to see if I can overcome this 
performance penalty (another problem is DHT works well in a very sparse 
environment, so the hash keys have to be pretty big. That means more 
intermediate nodes).

The second issue is one unique to data storage systems: I need to have 
multiple copies of the file around. So I had thought if I do a DHT I 
will just keep copies all along the path. That should solve the problem 
of access quickly and copies.

The third issue - and this one I had more difficulty grasping - is that 
once an intermediate node disappears, its contents have to be passed on 
to someone else. Also the link from the prior node to this one (the one 
going away) has to be adjusted. What is the problem? It is quite 
possible that the node would have millions of files on it, hence copying 
it is impossible. That means I have to keep exact copies at multiple 
sites, at the same time (definitely smaller than the entire space of all 
the peers).

But the real problem is that in a network of 1000s of machines it is 
quite possible the the two I am using to store indices on can disappear 
at the same time (granted small, but still a problem). So I opted to 
look at another approach, the one that I started talking about - using 
broadcast or multicast with some sort of RPC-like mechanism and light 
weight protocol applied over a lot of machines.

This approach hasn't been well researched, almost being excluded out of 
hand. I decided it was at least worth investigating. It solves some 
problems like scalability and easy management. The downside is that I 
have to worry about building a lightweight protocol and handle RPC like 
AT LEAST ONCE semantics instead of EXACTLY ONCE.

Glyph, thanks for the references. I will definitely look up 'thecircle' 
stuff. That one I didn't know about!

Peace,
Chaz




From exarkun at twistedmatrix.com  Sun Aug 27 01:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Aug 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1156655101.58.1436937330@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-20 through 2006-08-27
Bugs opened: 16    Bugs closed: 19  Total open bugs: 690 (-3)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -2  |Highest:  -2          |Conch:    -1           
|Enhancement:  +0  |High:     -2          |Core:     +1           
|Task:         +2  |Normal:   +3          |Mail:     -3           
                   |Low:      +1          |Trial:    +1           
                                          |Vfs:      -1           
                                          |Web:      +2           
                                          |Web2:     +1           
                                          |Website:  -1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2009] iq response tracker doesn't clean up (opened by ralphm) (CLOSED, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2009

[#2019] t.w.p.msn does not properly execute errbacks when an error packet is received (opened by habnabit)
    defect          words      http://twistedmatrix.com/trac/ticket/2019

[#1922] make twistd pluggable, nerf mktap (opened by tjs)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

                    ===== High =====
[#2014] twisted.internet.ssl.CertificateOptions docstring suggests server-only usage; CO is agnostic (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2014

                    ===== Normal =====
[#2007] test ticket announcer bot changes (opened by exarkun) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2007

[#2010] zipstream.py (unzipIter) cannot unzip directory correctly on Windows (opened by jacobg23)
    defect          core       http://twistedmatrix.com/trac/ticket/2010

[#2011] xmlrpc should return failures for any exception in method (opened by ghazel) (CLOSED, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2011

[#2012] HTTP HEAD Request fails if Content-length given (opened by garrison)
    defect          web        http://twistedmatrix.com/trac/ticket/2012

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2013

[#2015] Generic SASL library (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2015

[#2016] twisted.web2.dav.test.util.TestCase.setUp is slow and can create inconsistent directory structures (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/2016

[#2017] t.w.client.getPage returning ConnectionDone: Connection was closed cleanly error (opened by dimator)
    defect          web        http://twistedmatrix.com/trac/ticket/2017

[#2018] document installation of third-party plugins with distutils (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2018

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2013

                    ===== Low =====
[#2008] selectreactor masks the 'dict' builtin, and commits various other offences. (opened by jerub)
    task            core       http://twistedmatrix.com/trac/ticket/2008



Closed Bugs
______________________
                    ===== Highest =====
[#1936] loopback.loopback blocks, should return Deferred (opened by jml, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1936

[#630 ] t.p.log.FileLogObserver has problems with timezone names (mostly on windows). (opened by jknight, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/630

[#1761] give wiki edit permissions to everyone who should have them (opened by glyph, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1761

[#2009] iq response tracker doesn't clean up (opened by ralphm, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2009

[#1992] IMAPServer.__cbFetch can raise uncaught AttributeError (opened by tvachon, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1992

[#1922] make twistd pluggable, nerf mktap (opened by tjs, closed by radix, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

                    ===== High =====
[#1978] fetch [message number] body[1] processed incorrectly for non-multipart messages (opened by tvachon, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1978

[#1183] test_conch calls reactor.iterate() in two places (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1183

[#1139] [NEEP HELP] Update mktap.xhtml to reflect current best practices (opened by hypatia, closed by radix, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/1139

                    ===== Normal =====
[#2007] test ticket announcer bot changes (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2007

[#1846] Test run python2.4  Twisted 2.4 tarball, Suse 9,  64 bit (opened by scmikes, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1846

[#1845] twisted 2.4 test run on Suse 9, 64 bit, python 2.5b1 (opened by scmikes, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1845

[#1202] twisted.mail.test.test_mail calls reactor.iterate() (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1202

[#1113] intermittent test failure in testCallLater (opened by warner, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1113

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun, closed by ralphm, )
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#1805] SFTP adapter doesn't translate deferred errors (opened by spiv, closed by spiv, fixed)
    defect          vfs        http://twistedmatrix.com/trac/ticket/1805

[#2011] xmlrpc should return failures for any exception in method (opened by ghazel, closed by ghazel, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2011

[#261 ] Document multicast (opened by Jerub, closed by jerub, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/261

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix, closed by radix, )
    task            core       http://twistedmatrix.com/trac/ticket/2013





From terry at jon.es  Mon Aug 28 10:05:23 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 28 Aug 2006 16:05:23 +0200
Subject: [Twisted-Python] Direct access to main server class
Message-ID: <17650.63523.224952.251277@terry.jones.tc>

Here's a hopefully not-too-dumb question...

I have a class that provides a service that I plan to make accessible via
Twisted. I wrote the class and various unit tests. So I could formerly do
simple things like:

    import unittest

    class myTest:
	def setUp():
	    self.c = MyClass()

	def tearDown():
	    self.c.close()

	def testX():
	    self.assert_(self.c.X() == 4)


I recently added users, passwords, and permissions to the system. So now
many method calls need a requesting user object passed to them, and check
that the user has permission to carry out the action. I added simple
twisted.cred class to provide realms, avatars, portal with checkers, etc.

In the myApp.tac file, I create an instance of my top-level class (MyClass
above). In the case of providing access to my service via Nevow, I
instantiate a NevowSite and pass it the portal. That is all, I think, as it
should be.

But now I'm left wondering what happens to the old unit testing code. It
obviously cannot just create a MyClass instance. The unit testing code
should be using the service by authenticating itself just like any other
client. But I'm not sure how best to do that. The unit test code wants to
perform all manner of tests, and preferably this would be done by just
making available the instance of MyClass created in my app's .tac file,
allowing the test code to call its methods. But somehow that no longer
feels quite right - the connection is in fact local, but it's coming in
somehow through twisted.cred.

I hope I'm being more or less clear about my dilemma, and I suppose this
must be a situation people have to deal with all the time.

Two solutions come to mind:

  1) Fake it. Call directly into my code to make myself an authenticated
     user object, and then start passing it in to methods on my own
     class. This is ugly though, plus if the service is already running
     it's a bad solution because it goes behind the back of twisted and
     asks for trouble.

  2) Make all the methods of my class available via RPC and have all the
     unit test code use them. This seems like a major pain, though I
     suppose it would work.

I'd much rather just have the unit test code connect as a special local
user and get back the instance of MyClass created by my .tac file and call
its methods. Is that easy to do?

OK, sorry for another typically long posting....

Thanks for any help. Regards,
Terry



From exarkun at divmod.com  Mon Aug 28 11:01:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 28 Aug 2006 11:01:55 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17650.63523.224952.251277@terry.jones.tc>
Message-ID: <20060828150155.1717.795199343.divmod.quotient.33132@ohm>

On Mon, 28 Aug 2006 16:05:23 +0200, Terry Jones <terry at jon.es> wrote:
>Here's a hopefully not-too-dumb question...
>
>I have a class that provides a service that I plan to make accessible via
>Twisted. I wrote the class and various unit tests. So I could formerly do
>simple things like:
>
>    import unittest
>
>    class myTest:
>       def setUp():
>           self.c = MyClass()
>
>       def tearDown():
>           self.c.close()
>
>       def testX():
>           self.assert_(self.c.X() == 4)
>
>
>I recently added users, passwords, and permissions to the system. So now
>many method calls need a requesting user object passed to them, and check
>that the user has permission to carry out the action. I added simple
>twisted.cred class to provide realms, avatars, portal with checkers, etc.

Aside from the rest of your question and my response, this sounds inside
out.  The general idea is that the user object itself has methods which
implement the actions which the protocol allows to be taken.  If a user
lacks permission to perform a particular action, or has restrictions on
the particulars with which they may invoke that action, or whatever other
logic may be necessary on a per-user basis, that is represented by a
different implementation of the login interface.

It may not necessarily be the case that factoring your code as I've just
described would be better than what you are doing now, but if you haven't
considered it before, it may be worth doing so now.

>
>In the myApp.tac file, I create an instance of my top-level class (MyClass
>above). In the case of providing access to my service via Nevow, I
>instantiate a NevowSite and pass it the portal. That is all, I think, as it
>should be.
>
>But now I'm left wondering what happens to the old unit testing code. It
>obviously cannot just create a MyClass instance. The unit testing code
>should be using the service by authenticating itself just like any other
>client. But I'm not sure how best to do that. The unit test code wants to
>perform all manner of tests, and preferably this would be done by just
>making available the instance of MyClass created in my app's .tac file,
>allowing the test code to call its methods. But somehow that no longer
>feels quite right - the connection is in fact local, but it's coming in
>somehow through twisted.cred.
>
>I hope I'm being more or less clear about my dilemma, and I suppose this
>must be a situation people have to deal with all the time.

It's a little fuzzy.  Let me see if I can accurately summarize.

   Your server is started up from a .tac file.

   The .tac file creates some objects and gives them particular
   relationships.

   The relationships created in the .tac file are necessary for correct
   operation of the server.

   The unit tests have no way to run the code in the .tac file in order
   to duplicate these relationships.

If these statements are accurate, I would suggest moving some code out of
the .tac file into a real module, from whence your unit tests can import
and use it.

>
>Two solutions come to mind:
>
>  1) Fake it. Call directly into my code to make myself an authenticated
>     user object, and then start passing it in to methods on my own
>     class. This is ugly though, plus if the service is already running
>     it's a bad solution because it goes behind the back of twisted and
>     asks for trouble.

This actually sounds a little like what I described above.  What makes you
say it is ugly?  To me, it sounds like organizing your code so that you
can test it a unit at a time.  The tests which do this are testing the
behavior of your code when authentication has already succeeded.  You should
also have tests for your authentication code, of course - but that's a
separate unit.

>
>  2) Make all the methods of my class available via RPC and have all the
>     unit test code use them. This seems like a major pain, though I
>     suppose it would work.

In the past I have done this, and I have regretted it.  This kind of test
is unnecessarily expensive to run and unnecessarily difficult to debug.

>
>I'd much rather just have the unit test code connect as a special local
>user and get back the instance of MyClass created by my .tac file and call
>its methods. Is that easy to do?

If you move the code responsible for instantiating MyClass out of the .tac
file into a real module, then it is easy :)  Otherwise it may as well be
impossible.

>
>OK, sorry for another typically long posting....

No problem.  I hope this was of some help.

Jean-Paul



From terry at jon.es  Mon Aug 28 16:31:37 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 28 Aug 2006 22:31:37 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 11:01:55 on Monday, 28 August 2006
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
Message-ID: <17651.21161.513427.346881@terry.jones.tc>

>>>>> "JP" == Jean-Paul Calderone <exarkun at divmod.com> writes:

JP> Aside from the rest of your question and my response, this sounds
JP> inside out.  The general idea is that the user object itself has
JP> methods which implement the actions which the protocol allows to be
JP> taken.  If a user lacks permission to perform a particular action, or
JP> has restrictions on the particulars with which they may invoke that
JP> action, or whatever other logic may be necessary on a per-user basis,
JP> that is represented by a different implementation of the login
JP> interface.

OK, thanks for this explanation. As for the inside-out part, I do want
things to be that way. E.g., there are methods that anyone can call and
what you get back depends on the set of permissions on the things you
request and also on your own preferences. So it's not known a priori what
the user can and can't do - at least not at that fine grained level. At
higher levels, sure, I do understand about returning user objects that
simply do not have access to prohibited methods.

After sending my mail I realized I should have gone to look through the
top-level docs before mailing. There I found mention of Trial. I was going
to follow up, but decided to see what people would suggest. You don't
mention Trial however, and nor has anyone else yet. (Go on, tell me it's
deprecated :-))

JP> It may not necessarily be the case that factoring your code as I've
JP> just described would be better than what you are doing now, but if you
JP> haven't considered it before, it may be worth doing so now.

I will certainly do it to some extent.

JP> Your server is started up from a .tac file.

Yes.

JP> The .tac file creates some objects and gives them particular
JP> relationships.

Just one instance of my top-level class. That class knows how to provide
password checkers.

JP> The relationships created in the .tac file are necessary for correct
JP> operation of the server.

No. The main thing that's needed after my last round of changes is that API
methods are called in the context of an authenticated user.

JP> The unit tests have no way to run the code in the .tac file in order to
JP> duplicate these relationships.

Right, except if I hack an end run around twisted.cred. But I don't really
_want_ to do that. And if I've started a server via myApp.tac, then it
feels (though it may not be the case) like I'm asking for trouble by simply
instantiating and using another instance of my top-level class. Although
the point is to allow highly parallel access, I was intending to do that
through (e.g., a thread pool) created by a single twistd application.  I'm
not sure I want to have possibly many of them running at once (though
perhaps I should, since this is part of the point). Does that make sense?

I could configure the unit tests to just use a different setup (different
DB etc) so it has nothing to do with the server version. That's in fact
what I used to do. I was mainly asking: now that I've built a nice new
front door using twisted.cred, how do I convert my existing unit tests to
all go through the door, changing as little as possible.

>> 1) Fake it. Call directly into my code to make myself an authenticated
>> user object, and then start passing it in to methods on my own
>> class. This is ugly though, plus if the service is already running it's
>> a bad solution because it goes behind the back of twisted and asks for
>> trouble.

JP> This actually sounds a little like what I described above.  What makes
JP> you say it is ugly?  To me, it sounds like organizing your code so that
JP> you can test it a unit at a time.  The tests which do this are testing
JP> the behavior of your code when authentication has already succeeded.
JP> You should also have tests for your authentication code, of course -
JP> but that's a separate unit.

It feels ugly in the way that Trial (if I understand it) feels right.
There's an approved way to access the service, and robust tests should go
through it. I don't fully believe this - I guess some combination, as you
suggest, is probably going to be best. It feels ugly because, as I said,
having built a new front door, I immediately hack my way around it.

>> 2) Make all the methods of my class available via RPC and have all the
>> unit test code use them. This seems like a major pain, though I suppose
>> it would work.

JP> In the past I have done this, and I have regretted it.  This kind of
JP> test is unnecessarily expensive to run and unnecessarily difficult to
JP> debug.

Thanks.

>> I'd much rather just have the unit test code connect as a special local
>> user and get back the instance of MyClass created by my .tac file and
>> call its methods. Is that easy to do?

JP> If you move the code responsible for instantiating MyClass out of the
JP> .tac file into a real module, then it is easy :)

Yes, modulo having multiple instances. I can deal with that though.

>> OK, sorry for another typically long posting....

JP> No problem.  I hope this was of some help.

Yes, it's great, thanks for answering. I feel like such a babe in the woods
with Twisted! Part of it, I guess, is only really getting to work on this
stuff when I'm not doing what I'm actually supposed to be doing.

Here's one more question, about cred. Given your initial comment and my
emerging understanding of what goes on, what you call a user object
(perhaps only because I called it that) is what's elsewhere called an
avatar. If so, it seems an avatar can be anything at all and that generally
an avatar is an instance of some class, and that that class has methods
which the connecting user is allowed to call. I almost want to say "don't
bother answering, I know I must be right", but I won't delete this
paragraph just in case there are any other fundamental comments anyone
might make.

Regards,
Terry



From bhenry at pacecocorp.com  Mon Aug 28 17:52:59 2006
From: bhenry at pacecocorp.com (Benjamin Henry)
Date: Mon, 28 Aug 2006 14:52:59 -0700
Subject: [Twisted-Python] Newb question?
Message-ID: <E1GHp2W-0006wI-00@pyramid.twistedmatrix.com>

My question(s): 
I'm working on a custom network protocol (application layer in TCP/IP 
model) for a custom network.  Please don't try to talk me out of this. 
I'm limiting many of the other protocols, because this is in a highly 
secure network, and latency/bandwidth is key.  The packet sizes are 
minimized by the protocol design, which is ideal.  Anyway.  I'm having 
some problems with figuring out what to include in the Protocol class, 
and what to handle in the server class.  Basically, I'm using Telnet, 
SMTP, and FTP protocol python files as a reference, and each have 
different strutures and methods of doing similar things.  Basically, 
the protocol I'm developing is very similar to Telnet, so I used this 
code as a base.  It is necessary to have a state machine, but there is 
dynamic information to send as a response to some received messages. 
For example, the server may need to get information from a DB, and send 
it in a packet as a reponse to a request.  I'll give you a sample 
implementation, and the remainder of the specific questions below: 

server = a 
client = b 

1a = NEED, 1   - NEED is a request to send data from client to server, 
1 is the option, or type of data 
2b = HAVE, 1   - HAVE is a positive response 
3a = NEED, 1   - re-iterated for the purpose of being a server.  The 
line "1a" is initiated only by a UI command.  The line "3a" is 
initiated by as a response to the request "2b". 
4b = PASV, 1  - same as FTP.  It's basically, "Well, I have data...what 
port can I send it on?" 
4a = PORT, 1, 51000 - not the same as FTP.  It's the command, option, 
and port number 
5b = ACK       - acknowledge 
ok...now they both disconnect, or stop communication on this port, and 
server dynamically opens port 51000 
on port 51000: 
6b - <<data stream>> 
7a - <<md5 or something other to verify correct and complete>> 

Questions I have: 
This is a state machine.  The server has a class derived from the 
Protocol class whose methods are called prior to the Protocol's.  For 
example, since the Server is using the derived Protocol class (let's 
say it's PProto), whenever a "dataReceived" is fired, PProto picks it 
up, and has to call Protocol's dataReceived handler explicitly.  Where 
should all of this message handling take place?  Should I split up the 
duties, like anything that's a singular response to one line should be 
in the Protocol class, and anything dynamic can be in the PProto class? 

What about dynamic ports?  Where should this be implemented?  The 
alternative is to have many connections on the one server port.  Would 
this cause any issues, so that I could eliminate the PASV command 
altogether? 

I need to read the data being sent by the client.  How can I correctly 
intercept this data without effecting the operation of the Protocol, 
and also so I can port the Protocol class to other applications without 
rewriting the server? 

I'm a newbie :). 

Thanks for your help. 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060828/ab70fd5c/attachment.htm 

From jml at mumak.net  Mon Aug 28 18:44:40 2006
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 29 Aug 2006 08:44:40 +1000
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.21161.513427.346881@terry.jones.tc>
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
Message-ID: <d06a5cd30608281544n2838e6acj67e628e71fe00b6b@mail.gmail.com>

On 8/29/06, Terry Jones <terry at jon.es> wrote:
> After sending my mail I realized I should have gone to look through the
> top-level docs before mailing. There I found mention of Trial. I was going
> to follow up, but decided to see what people would suggest. You don't
> mention Trial however, and nor has anyone else yet. (Go on, tell me it's
> deprecated :-))
>

It's actively maintained.

The only thing that Trial gets you is the ability to meaningfully
return Deferreds from your unit tests.

cheers,
jml



From andrew-twisted at puzzling.org  Mon Aug 28 20:29:22 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 29 Aug 2006 10:29:22 +1000
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.21161.513427.346881@terry.jones.tc>
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
Message-ID: <20060829002922.GA31669@steerpike.home.puzzling.org>

On Mon, Aug 28, 2006 at 10:31:37PM +0200, Terry Jones wrote:
[...]
> I could configure the unit tests to just use a different setup (different
> DB etc) so it has nothing to do with the server version. That's in fact
> what I used to do. I was mainly asking: now that I've built a nice new
> front door using twisted.cred, how do I convert my existing unit tests to
> all go through the door, changing as little as possible.

If you do that, they won't be *unit* tests any more, if I'm understanding your
structure correctly.

I'm guessing a significant proportion of your code you want to test, probably
the majority of it, has nothing directly to do with authentication or
permissions.  Also, *unit* tests (as opposed to functional tests or integration
tests or end-to-end tests or whatever other terms you prefer to use) test one
thing at a time, so tests for this code shouldn't also be testing
authentication.  If *every* test has to authenticate, then you're just wasting
effort: the tests run slower, there's more junk to step over in a debugger, and
you gain no extra testing value by testing the exact same thing in 50 (or
500...) different tests.

> >> 1) Fake it. Call directly into my code to make myself an authenticated
> >> user object, and then start passing it in to methods on my own
> >> class. This is ugly though, plus if the service is already running it's
> >> a bad solution because it goes behind the back of twisted and asks for
> >> trouble.
> 
> JP> This actually sounds a little like what I described above.  What makes
> JP> you say it is ugly?  To me, it sounds like organizing your code so that
> JP> you can test it a unit at a time.  The tests which do this are testing
> JP> the behavior of your code when authentication has already succeeded.
> JP> You should also have tests for your authentication code, of course -
> JP> but that's a separate unit.
> 
> It feels ugly in the way that Trial (if I understand it) feels right.
> There's an approved way to access the service, and robust tests should go
> through it. I don't fully believe this - I guess some combination, as you
> suggest, is probably going to be best. It feels ugly because, as I said,
> having built a new front door, I immediately hack my way around it.

No, it's quite common, and sensible, for tests to go directly to the units (i.e.
objects and methods) they want to test, so that they test precisely what they
should test.

> >> OK, sorry for another typically long posting....
> 
> JP> No problem.  I hope this was of some help.
> 
> Yes, it's great, thanks for answering. I feel like such a babe in the woods
> with Twisted! Part of it, I guess, is only really getting to work on this
> stuff when I'm not doing what I'm actually supposed to be doing.
> 
> Here's one more question, about cred. Given your initial comment and my
> emerging understanding of what goes on, what you call a user object
> (perhaps only because I called it that) is what's elsewhere called an
> avatar. If so, it seems an avatar can be anything at all and that generally
> an avatar is an instance of some class, and that that class has methods
> which the connecting user is allowed to call. I almost want to say "don't
> bother answering, I know I must be right", but I won't delete this
> paragraph just in case there are any other fundamental comments anyone
> might make.

"An avatar is a business logic object for a specific user. For POP3, it's a
mailbox, for a first-person-shooter it's the object that interacts with the
game, the actor as it were. Avatars are specific to an application, and each
avatar represents a single user."
    -- http://twistedmatrix.com/projects/core/documentation/howto/cred.html#auto6

(and also
http://twistedmatrix.com/projects/core/documentation/howto/glossary.html#Avatar,
which says basically the same thing).

So yes, your understanding is correct.

-Andrew.




From terry at jon.es  Mon Aug 28 20:55:03 2006
From: terry at jon.es (Terry Jones)
Date: Tue, 29 Aug 2006 02:55:03 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 10:29:22 on Tuesday, 29 August 2006
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
	<20060829002922.GA31669@steerpike.home.puzzling.org>
Message-ID: <17651.36967.975011.190920@terry.jones.tc>

Hi Andrew

>>>>> "Andrew" == Andrew Bennetts <andrew-twisted at puzzling.org> writes:
Andrew> I'm guessing a significant proportion of your code you want to
Andrew> test, probably the majority of it, has nothing directly to do with
Andrew> authentication or permissions.  Also, *unit* tests (as opposed to
Andrew> functional tests or integration tests or end-to-end tests or
Andrew> whatever other terms you prefer to use) test one thing at a time,
Andrew> so tests for this code shouldn't also be testing authentication.
Andrew> If *every* test has to authenticate, then you're just wasting
Andrew> effort: the tests run slower, there's more junk to step over in a
Andrew> debugger, and you gain no extra testing value by testing the exact
Andrew> same thing in 50 (or 500...) different tests.

That's why I'd use a setUp method: to log in to the server and store the
result for use in the unit tests.

Andrew> No, it's quite common, and sensible, for tests to go directly to
Andrew> the units (i.e.  objects and methods) they want to test, so that
Andrew> they test precisely what they should test.

Right, I can do that (and do do that in the to-be-converted code). I
suppose I'll just make myself an authenticated user object and then call
into internal methods.

It does make me wonder though, still. What if you're writing a Twisted app
that you intend to license for commercial companies to run on their
intranets: You install the Python source and presumably the unit test code
gets run at some point, and maybe remains on the server. Then you're
showing the world how to access the innards of your service without going
through the approved authentication. Same comments apply to simply putting
the code online and letting people see how to get in to any instance they
can get local (user) access to. What can be done to prevent this? The most
obvious thing seems to be to verify the uid of the process trying to create
an authenticated user, and have both your unit tests and twistd run under
this uid.  If you don't do something about this, a normal user on the
system can simply import your module, create an instance, and start making
method calls (possibly unsuccessfully, due to file system permissions on
databases, etc). Maybe they wont get far, but it's an issue: especially if
the system has been built to allow this, and the unit tests show precisely
how to pull it off.

Thanks again,
Terry



From glyph at divmod.com  Mon Aug 28 23:08:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 28 Aug 2006 23:08:21 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.36967.975011.190920@terry.jones.tc>
Message-ID: <20060829030821.1717.849369791.divmod.quotient.33499@ohm>


On Tue, 29 Aug 2006 02:55:03 +0200, Terry Jones <terry at jon.es> wrote:

>It does make me wonder though, still. What if you're writing a Twisted app
>that you intend to license for commercial companies to run on their
>intranets: You install the Python source and presumably the unit test code
>gets run at some point, and maybe remains on the server. Then you're
>showing the world how to access the innards of your service without going
>through the approved authentication. Same comments apply to simply putting
>the code online and letting people see how to get in to any instance they
>can get local (user) access to. What can be done to prevent this? The most
>obvious thing seems to be to verify the uid of the process trying to create
>an authenticated user, and have both your unit tests and twistd run under
>this uid.  If you don't do something about this, a normal user on the
>system can simply import your module, create an instance, and start making
>method calls (possibly unsuccessfully, due to file system permissions on
>databases, etc). Maybe they wont get far, but it's an issue: especially if
>the system has been built to allow this, and the unit tests show precisely
>how to pull it off.

If your system is so insecure that anyone with some know-how can run arbitrary Python code in it, it is a pretty straightforward step to extract all the source code from the server directly.  Consider this simple Python quine:

    # quine.py
    print file(__file__).read()

If you think you can hide Python code by compiling it to bytecodes, have a look at http://www.crazy-compilers.com/decompyle/ -- that should quickly disabuse you of that notion.

Moreover, any security scheme that relies, in any way, upon the fact that your code is hidden is broken by design.  From wikipedia: "computer science professors consider security through obscurity so obviously wrong that the matter doesn't need proof or study".

However, even disregarding that, _some_ code in your system is instantiating authenticated users and calling methods on them.  Assuming that your code is packaged and distributed (tests included, so as to make testing of deployments easier), anyone who can read the tests can read the rest of the code, and discover the same entrypoints.

So, I disagree in the strongest possible terms: it *isn't* an issue, and nobody should ever consider it as such when writing tests.  The correct way to write unit tests is one unit at a time, and it should not be polluted by misguided security concerns.

Apologies if this sounds too harsh.  I'm not just trolling, I promise :).  We have a lot of tests in the Twisted suite which bend over backwards to instantiate things through obtuse higher-than-unit-level interfaces (which often aren't really themselves public), rather than testing functionality directly.  These tests are all overcomplex, error prone, and generally contain race conditions and fail intermittently for unrelated reasons.

It is a systematic problem which we have spent literally years fixing, and we're not done.  JP Calderone, Chris Armstrong and I have almost daily conversations now about how to reduce this coupling and "heal" the Twisted suite so that tests will fail only when they're failing.  In other words, make the tests more "unit-y" and less like integration tests.  The idea you're proposing here seems to be enthusiastically attempting to doom a future project to a worse version of this syndrome :).  Programs like Twisted which interface heavily with the OS are hard enough to write good test for when you're only worrying about legitimate difficulties with the tests... if you start introducing concerns like "maybe we're revealing too much in our test suite" it becomes impossible.



From terry at jon.es  Tue Aug 29 03:57:36 2006
From: terry at jon.es (Terry Jones)
Date: Tue, 29 Aug 2006 09:57:36 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 23:08:21 on Monday, 28 August 2006
References: <17651.36967.975011.190920@terry.jones.tc>
	<20060829030821.1717.849369791.divmod.quotient.33499@ohm>
Message-ID: <17651.62320.581129.640872@terry.jones.tc>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> If you think you can hide Python code by compiling it to bytecodes,
glyph> have a look at http://www.crazy-compilers.com/decompyle/ -- that
glyph> should quickly disabuse you of that notion.

No, I have no intention of doing that - rather I assume the opposite (that
code and tests will all be available), that's what I thought I was saying.

glyph> Moreover, any security scheme that relies, in any way, upon the fact
glyph> that your code is hidden is broken by design.  From wikipedia:
glyph> "computer science professors consider security through obscurity so
glyph> obviously wrong that the matter doesn't need proof or study".

Yes, I agree that's it's almost always an error (and those that choose it
reflexively are also particularly prone to the attendant false sense of
security. One would hope that some form of Darwinian selection might kick
in, but it never does).

glyph> However, even disregarding that, _some_ code in your system is
glyph> instantiating authenticated users and calling methods on them.
glyph> Assuming that your code is packaged and distributed (tests included,
glyph> so as to make testing of deployments easier), anyone who can read
glyph> the tests can read the rest of the code, and discover the same
glyph> entrypoints.

Right, that's what I was saying.

glyph> So, I disagree in the strongest possible terms: it *isn't* an issue,

I don't understand how the above sentence follows from the one before (and
no, I'm not trolling either!).

glyph> and nobody should ever consider it as such when writing tests.  The
glyph> correct way to write unit tests is one unit at a time, and it should
glyph> not be polluted by misguided security concerns.

glyph> Apologies if this sounds too harsh.  I'm not just trolling, I
glyph> promise :).  We have a lot of tests in the Twisted suite which bend
glyph> over backwards to instantiate things through obtuse
glyph> higher-than-unit-level interfaces (which often aren't really
glyph> themselves public), rather than testing functionality directly.
glyph> These tests are all overcomplex, error prone, and generally contain
glyph> race conditions and fail intermittently for unrelated reasons.

OK, I think we have the same aim: I'm trying to NOT write obtuse and
complex tests. That's why I was originally asking if there's an easy way to
make tests go through the front door (via twisted.cred) to get something
they can start making calls on. I wanted to do that precisely to _avoid_
bending over backwards etc. I have a couple of hundred unit tests (a very
small number, I know), of which only a few are more than about 4 lines. I'm
trying to keep it that way.

I have the feeling that my original mail should probably have been written
more clearly.  And it's time for a coffee...

Regards,
Terry



From glyph at divmod.com  Tue Aug 29 08:35:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 29 Aug 2006 08:35:10 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.62320.581129.640872@terry.jones.tc>
Message-ID: <20060829123510.1717.1201781420.divmod.quotient.33734@ohm>

On Tue, 29 Aug 2006 09:57:36 +0200, Terry Jones <terry at jon.es> wrote:
>>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

>glyph> However, even disregarding that, _some_ code in your system is
>glyph> instantiating authenticated users

>Right, that's what I was saying.

Whew.  Okay, great.

>I agree [security through obscurity is] almost always an error (and those that choose it
>reflexively are also particularly prone to the attendant false sense of
>security. One would hope that some form of Darwinian selection might kick
>in, but it never does).

Oh... sometimes it does.  I know a story about a sysadmin who seriously thought that SSH was "secure" enough that his root password could be "root" because it was "easier to remember", as long as he changed the port number... (Hint: at the end of the story, he is not happy.  Also he doesn't have a job.)

>glyph> So, I disagree in the strongest possible terms: it *isn't* an issue,

>I don't understand how the above sentence follows from the one before (and
>no, I'm not trolling either!).

I was responding to this in the original email (emphasis mine):

>>>Maybe they wont get far, but *it's an issue*: especially if
the system has been built to allow this, and the unit tests show precisely
how to pull it off.

I suppose I misunderstood what you meant by that.  Thank goodness :).

>OK, I think we have the same aim: I'm trying to NOT write obtuse and
>complex tests. That's why I was originally asking if there's an easy way to
>make tests go through the front door (via twisted.cred) to get something
>they can start making calls on.

If you want to do white-box testing via cred, it's not very hard; you can just construct a Portal in setUp and call "login" on it.  *Some* tests should be written that way, to test the code that builds the "front door", so to speak, but I think that JP's advice is still generally correct here.  You really only want to do that in tests for cred itself, tests for deployment code that creates a Portal, or perhaps for an implementation of a cred interface such as a checker or realm.  Most of your tests for user objects should be instantiating the user objects directly; this should also promote less coupling, so that you will avoid the temptation to do something required to the avatar object during the login process, reducing the need for set-up boilerplate in non-test situations as well.

This is actually part of the design of cred, too; it's the reason it doesn't specify any requirements in particular about the avatar interface.  Once you're through the login process, cred objects are supposed to be plain old python objects that don't do anything but respond to method calls made by your protocol.  The login / setup procedure shouldn't be a required part of their operation.

For example, your avatar object might require a reference to a database.  One way to acquire that would be to have some code in your IRealm implementation set a required attribute on the avatar object.  Another way would be to simply pass it to the avatar object's constructor.  I think the benefits of the latter approach are clear when you consider it, even though it may sometimes seem reasonable as you're writing the code to put more logic in requestAvatar since that is the "right" way to "get" an avatar object.

If it's simply a constructor argument, then you can provide a mock implementation for tests to avoid expensive database setup/teardown operations, making your tests faster.  Even if the DB object is too complex to bother mocking for tests, you can simulate error conditions that you want to write tests for by wrapping it up.  This is all _possible_ by going through some other object, of course (set it as an attribute on the Realm, or something like that) but it is more complex.  It's not clear where to modify your tests.  Presumably you'd have to subclass and override setUp or something like that.  In the constructor case, however, you just change the object that you pass in in the test body itself.

I could keep writing about my opinions on good test practice for an even longer essay... actually, I probably will, in a blog post.  For now, though, I think I've belabored the point enough :).  Hope this helps!



From rspringob at vmware.com  Tue Aug 29 15:12:48 2006
From: rspringob at vmware.com (Richard Springob)
Date: Tue, 29 Aug 2006 12:12:48 -0700
Subject: [Twisted-Python] newbie question: is twisted right for my app?
Message-ID: <4012E97255307449A93055E1E0AF61416E529A@PA-EXCH04.vmware.com>

I am designing a scheduling system and am wondering if twister is the right
tool for the job. The typical model is to have a server answering many
clients. I am looking at the inverse of having a solitary dispatcher (client)
contact many different hosts (servers) in order to pass them a job.   Looking
at the examples in the documentation, it looks like the normal procedure is
to have one persistent connection per reactor. Am I trying to do a bad thing
with twister?

I didn't want to ramble, so let me know if you need more info in order to
understand what I am trying to do here.
 
Thanks,
Rick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060829/74513a0f/attachment.htm 

From exarkun at divmod.com  Tue Aug 29 15:34:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 29 Aug 2006 15:34:49 -0400
Subject: [Twisted-Python] newbie question: is twisted right for my app?
In-Reply-To: <4012E97255307449A93055E1E0AF61416E529A@PA-EXCH04.vmware.com>
Message-ID: <20060829193449.1717.1361407864.divmod.quotient.33962@ohm>

On Tue, 29 Aug 2006 12:12:48 -0700, Richard Springob <rspringob at vmware.com> wrote:
>I am designing a scheduling system and am wondering if twister is the right
>tool for the job. The typical model is to have a server answering many
>clients. I am looking at the inverse of having a solitary dispatcher (client)
>contact many different hosts (servers) in order to pass them a job.   Looking
>at the examples in the documentation, it looks like the normal procedure is
>to have one persistent connection per reactor. Am I trying to do a bad thing
>with twister?

It is completely normal to have multiple connections per reactor.  In fact, there can be only one reactor in a Twisted process.

Jean-Paul



From radix at twistedmatrix.com  Tue Aug 29 15:37:47 2006
From: radix at twistedmatrix.com (radix at twistedmatrix.com)
Date: Tue, 29 Aug 2006 19:37:47 -0000
Subject: [Twisted-Python] newbie question: is twisted right for my app?
Message-ID: <20060829193747.7857.1238870754.divmod.xquotient.2332@joule.divmod.com>

On 07:12 pm, rspringob at vmware.com wrote:
>I am designing a scheduling system and am wondering if twister is the right
>tool for the job. The typical model is to have a server answering many
>clients. I am looking at the inverse of having a solitary dispatcher (client)
>contact many different hosts (servers) in order to pass them a job.   Looking
>at the examples in the documentation, it looks like the normal procedure is
>to have one persistent connection per reactor. Am I trying to do a bad thing
>with twister?

No, Twiste*d* lets you use multiple connections with the same reactor; in fact, you can only have one reactor instance in your program. The reactor is an event loop; it handles many event sources at once.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20060829/075ae721/attachment.htm 

From p.mayers at imperial.ac.uk  Wed Aug 30 12:12:02 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 30 Aug 2006 17:12:02 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
Message-ID: <44F5B8D2.7040500@imperial.ac.uk>

I want a line-oriented protocol to listen on an SSL port, and I want 
client certificate authentication for this.

How do I specify this:

strports.service('ssl:4443:privateKey=key.pem:certKey=cert.pem:clientCert=must')

...or similar?



From exarkun at divmod.com  Wed Aug 30 12:30:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2006 12:30:35 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F5B8D2.7040500@imperial.ac.uk>
Message-ID: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>

On Wed, 30 Aug 2006 17:12:02 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>I want a line-oriented protocol to listen on an SSL port, and I want client 
>certificate authentication for this.
>
>How do I specify this:
>
>strports.service('ssl:4443:privateKey=key.pem:certKey=cert.pem:clientCert=must')
>
>...or similar?
>

No: use strports when you want to present strings of this form as a
user-interface element, not otherwise.

To programatically configure an SSL server which requires a client certificate
use something like this:

    from twisted.internet import ssl, reactor
    reactor.listenSSL(4443, f, ssl.CertificateOptions())

Unlike the older ContextFactory classes, CertificateOptions has somewhat
more modern requirements not dictated by HTTP.  Specifically, the method
is TLSv1 and certificates are required.

Jean-Paul



From general at eepatents.com  Wed Aug 30 15:55:40 2006
From: general at eepatents.com (Ed Suominen)
Date: Wed, 30 Aug 2006 12:55:40 -0700
Subject: [Twisted-Python] sAsync 0.2
In-Reply-To: <1151531286.4932.5.camel@wkv1.zmaxsolutions.com>
References: <e7ugki$pup$1@sea.gmane.org> <e7uieq$10e$1@sea.gmane.org>
	<1151531286.4932.5.camel@wkv1.zmaxsolutions.com>
Message-ID: <44F5ED3C.8000104@eepatents.com>

Version 0.2 of sAsync, "SQLAlchemy Done Asynchronously" has been
released at http://foss.eepatents.com/sAsync. It provides a
Twisted-compatible way to use SQLAlchemy.

There is a fair amount of documentation on the Trac site now, thanks in
large part to users of the package.

sAsync offers asynchronous access to the outstanding SQLAlchemy package
by Michael Bayer. It is built around an 'access broker' object that
provides a priority-queued asynchronous interface to database accesses.
This underlying transaction-queuing structure is much improved in
version 0.2.

By wrapping your database-access methods in a @transact decorator, you
can put the underlying method call in a queue with whatever scheduling
priority you designate and immediately obtain a Deferred object that
references the eventual result of the database transaction. The access
broker also includes structure for convenient and integrated table
setup, startup, and shutdown.

The package also provides higher-level SQLAlchemy enhancements
including persistent item storage with deferred read and write results,
and persistent dictionary, array, and graph objects using that storage.
Text indexing and searching, again with deferred 'behind the scenes'
processing, will be included at some point.

Best regards,
Ed Suominen



From p.mayers at imperial.ac.uk  Thu Aug 31 04:32:03 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 31 Aug 2006 09:32:03 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
Message-ID: <44F69E83.3000303@imperial.ac.uk>

Jean-Paul Calderone wrote:
> No: use strports when you want to present strings of this form as a
> user-interface element, not otherwise.

Ok, but interesting. Why not otherwise? Do they have something bad about 
them?

> 
> To programatically configure an SSL server which requires a client 
> certificate
> use something like this:
> 
>    from twisted.internet import ssl, reactor
>    reactor.listenSSL(4443, f, ssl.CertificateOptions())

This is in a .tac file but I get the idea.

> Unlike the older ContextFactory classes, CertificateOptions has somewhat
> more modern requirements not dictated by HTTP.  Specifically, the method
> is TLSv1 and certificates are required.

 >>> import twisted
 >>> import twisted.internet.ssl
 >>> ssl.CertificateOptions()
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
NameError: name 'ssl' is not defined
 >>> twisted.__version__
'2.4.0'

When was that added?

The only reason I was using strports was that the ContextFactory thing 
was a royal pain to do even the most basic SSL setup (like e.g. a server 
cert and key...). I'd be glad to ditch it.



From etaoinbe at yahoo.com  Thu Aug 31 11:51:46 2006
From: etaoinbe at yahoo.com (f rom)
Date: Thu, 31 Aug 2006 08:51:46 -0700 (PDT)
Subject: [Twisted-Python] echoclient_ssl.py traceback
Message-ID: <20060831155147.56431.qmail@web50907.mail.yahoo.com>

Am new to twisted and considering to use it instead of
handcoding ssl (have a working example coded in
pyopenssl).

the demo from
http://twistedmatrix.com/projects/core/documentation/examples/
has issues on windows with python 2.4


q:\socketcomm>echoclient_ssl.py
receive: Hello, world!
receive: What a fine day it is.
receive: Bye-bye!
connection lost (protocol)
connection lost: Connection to the other side was lost
in a non-clean fashion.
Traceback (most recent call last):
  File "q:\socketcomm\echoclient_ssl.py", line 47, in
?
    main()
  File "q:\socketcomm\echoclient_ssl.py", line 44, in
main
    reactor.run()
  File
"C:\python24\lib\site-packages\twisted\internet\posixbase.py",
line 218, in run
    self.mainLoop()
  File
"C:\python24\lib\site-packages\twisted\internet\posixbase.py",
line 226, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File
"C:\python24\lib\site-packages\twisted\internet\base.py",
line 555, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File
"C:\python24\lib\site-packages\twisted\internet\base.py",
line 411, in _continueSystemEvent
    for callList in sysEvtTriggers[1],
sysEvtTriggers[2]:
exceptions.TypeError: unsubscriptable object


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Thu Aug 31 12:17:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 31 Aug 2006 12:17:00 -0400
Subject: [Twisted-Python] echoclient_ssl.py traceback
In-Reply-To: <20060831155147.56431.qmail@web50907.mail.yahoo.com>
Message-ID: <20060831161700.1717.742928390.divmod.quotient.35325@ohm>

On Thu, 31 Aug 2006 08:51:46 -0700 (PDT), f rom <etaoinbe at yahoo.com> wrote:
>Am new to twisted and considering to use it instead of
>handcoding ssl (have a working example coded in
>pyopenssl).
>
>the demo from
>http://twistedmatrix.com/projects/core/documentation/examples/
>has issues on windows with python 2.4
>

This is a trivial bug unrelated to SSL.  Thanks for pointing it out.
There is a patch which fixes the issue in the tracker:

  http://twistedmatrix.com/trac/ticket/2040

Jean-Paul



From jamesbunton at fastmail.fm  Tue Aug  1 01:06:49 2006
From: jamesbunton at fastmail.fm (James Bunton)
Date: Tue, 1 Aug 2006 17:06:49 +1000
Subject: [Twisted-Python] How to tell when ReconnectingClientFactory gives up
Message-ID: <B9500AB3-411E-4388-B8BD-CCB917134E3F@fastmail.fm>

Hi,

Is there any way to tell when a ReconnectingClientFactory has stopped  
trying? I'm talking about due to connection failures, etc

As far as I can tell, in ReconnectingClientFactory.retry, if retries  
 > maxRetries, then the function exits with a message to the log.

I can't find a good way to trap this event. The only things I can  
think of are to either hook clientConnectionLost and  
clientConnectionFailed and count when we've hit maxRetries, then  
trigger whatever I want to do, or to patch ReconnectingClientFactory  
to do the same.

Anybody got any ideas?

---

James




From justind2 at ussonet.net  Tue Aug  1 11:09:17 2006
From: justind2 at ussonet.net (justind2 at ussonet.net)
Date: Tue, 01 Aug 2006 12:09:17 -0500
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor is
	already running?
Message-ID: <44CF8ABD.7040404@ussonet.net>

Here is a script I've made and am playing with to try to understand how 
things behave in Twisted. I'm using twistedsnmp but I think my problem 
here is my understanding of how to use the reactor (or lack there of).

I feel like I'm misunderstanding some fundamentals, but I may just be 
hard-headed.

I'm not even sure if this makes sense. I've noticed that unless 
reactor.callWhenRunning(return_def,df) is ran prior to calling 
reactor.run() the return_def will never be ran.

I'm not really sure how to phrase the question, because it may be the 
wrong one.. so here goes...

Is there a way to get the reactor to acknowledge a new "callWhenRunning" 
after the reactor.run()?


I've included my bad code and working code, the difference is in the 
"bad code" I launch a thread that tries every 5 seconds (after 
reactor.run()) to do what the "working code" does only once before.

Any help would be appreciated.


BAD CODE BELOW:

from twisted.internet import reactor
from twisted.internet import task
from twistedsnmp import snmpprotocol, agentproxy
from twisted.internet.defer import TimeoutError
import pprint
import logging
import thread
import time

logging.getLogger().setLevel(logging.INFO)

ips = 
['10.0.16.2','10.0.16.18','10.0.16.34','10.0.16.66','10.0.16.82','10.0.16.98','10.0.16.114','10.0.16.130']

devices = {}

logging.info('Building device dictionary')
for ip in ips:
    devices[ip] = {}
    devices[ip]['oids_to_poll'] = {}
    devices[ip]['oids_to_poll']['sysDescr'] = '.1.3.6.1.2.1.1.0'
    devices[ip]['oids_to_poll']['uptime'] = '.1.3.6.1.2.1.1.3.0'
logging.info('Device dictionary built')

   
def successful_response(result):
    logging.info(str(result))
    return result

def errored_response(err):
    if err.trap(TimeoutError):
        logging.error("timeout error")
        #### dont return the error because it will be handeled if you do
    else:
        logging.error("error" + str(err))
        return err

def return_def(df):
    return df


def process_devices():
    logging.info("proccess_devices thread has been launched")
    while True:
        time.sleep(5)
        for device in devices.keys():
            #### first build the proxy
            try:
                logging.info("building proxy for device:" + str(device))
                port = snmpprotocol.port()
                proxy = agentproxy.AgentProxy(device, 161, 
community='public',snmpVersion='v2',protocol=port.protocol,)
            except:
                logging.exception("exception occured while building proxy")
            else:
                ##### now that the proxy is buil send the request for 
the oids to poll
                if devices.has_key(device):
                    try:
                        oid_descriptions = 
devices[device]['oids_to_poll'].keys()
                    except:
                        pass
                    else:
                        try:
                            oids = []
                            for oid_description in oid_descriptions:
                                
oids.append(devices[device]['oids_to_poll'][oid_description])
                        except:
                            pass
                        else:
                            ##### you have built the list of oids to 
poll now build the deffered and return it
                            logging.info("building defferred for 
device:" + str(device))
                            df = proxy.get(oids, timeout=0.25, retryCount=3)
                            df.addCallback(successful_response)
                            df.addErrback(errored_response)
                            logging.info("launching callWhenRunning for 
device:" + str(device))
                            reactor.callWhenRunning(return_def,df)

thread.start_new(process_devices,())
logging.info("starting reactor")
reactor.run()



WORKING CODE (not necessarily good):

from twisted.internet import reactor
from twisted.internet import task
from twistedsnmp import snmpprotocol, agentproxy
from twisted.internet.defer import TimeoutError
import pprint
import logging
import time

logging.getLogger().setLevel(logging.INFO)

ips = 
['10.0.16.2','10.0.16.18','10.0.16.34','10.0.16.66','10.0.16.82','10.0.16.98','10.0.16.114','10.0.16.130']

devices = {}

logging.info('Building device dictionary')
for ip in ips:
    devices[ip] = {}
    devices[ip]['oids_to_poll'] = {}
    devices[ip]['oids_to_poll']['sysDescr'] = '.1.3.6.1.2.1.1.0'
    devices[ip]['oids_to_poll']['uptime'] = '.1.3.6.1.2.1.1.3.0'
logging.info('Device dictionary built')

   
def successful_response(result):
    logging.info(str(result))
    return result

def errored_response(err):
    if err.trap(TimeoutError):
        logging.error("timeout error")
        #### dont return the error because it will be handeled if you do
    else:
        logging.error("error" + str(err))
        return err

def return_def(df):
    return df


def process_devices():
    logging.info("proccess_devices thread has been launched")
        for device in devices.keys():
            #### first build the proxy
            try:
                logging.info("building proxy for device:" + str(device))
                port = snmpprotocol.port()
                proxy = agentproxy.AgentProxy(device, 161, 
community='public',snmpVersion='v2',protocol=port.protocol,)
            except:
                logging.exception("exception occured while building proxy")
            else:
                ##### now that the proxy is buil send the request for 
the oids to poll
                if devices.has_key(device):
                    try:
                        oid_descriptions = 
devices[device]['oids_to_poll'].keys()
                    except:
                        pass
                    else:
                        try:
                            oids = []
                            for oid_description in oid_descriptions:
                                
oids.append(devices[device]['oids_to_poll'][oid_description])
                        except:
                            pass
                        else:
                            ##### you have built the list of oids to 
poll now build the deffered and return it
                            logging.info("building defferred for 
device:" + str(device))
                            df = proxy.get(oids, timeout=0.25, retryCount=3)
                            df.addCallback(successful_response)
                            df.addErrback(errored_response)
                            logging.info("launching callWhenRunning for 
device:" + str(device))
                            reactor.callWhenRunning(return_def,df)

process_devices()
logging.info("starting reactor")
reactor.run()















From ian.parker at facilita.co.uk  Tue Aug  1 11:27:54 2006
From: ian.parker at facilita.co.uk (ian.parker at facilita.co.uk)
Date: Tue, 01 Aug 2006 19:27:54 +0200
Subject: [Twisted-Python] Restarting a reactor listener
Message-ID: <17510697.243751154453274537.JavaMail.servlet@kundenserver>

I have created an internet server that is started in a thread from a Python QT GUI.

I can call reactor.stop() and sucessfully get notified of shutdown and the run thread terminates, the TCP/IP listen port is closed.

When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0) a second time I find that things don't work correctly. e.g. TCP calls are accepted and my protocol.dataReceived() is called but then calling reactor.callInThread(self.blockingMethod, data) does nothing. Also calling stop() a second time does not stop the  running reactor thread or terminate the TCP listener.

I have tried numerous options, and have been careful to avoid any conflicts with the GUI threads. It appears that the reactor is not being restarted correctly after stop() and a second run().

What I need is to stop and re-start the listenTCP.  Is there a way to do this?

Thanks,
Ian



From exarkun at divmod.com  Tue Aug  1 11:44:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Aug 2006 13:44:23 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
Message-ID: <20060801174423.1717.42158796.divmod.quotient.11192@ohm>

On Tue, 01 Aug 2006 19:27:54 +0200, ian.parker at facilita.co.uk wrote:
>I have created an internet server that is started in a thread from a Python QT GUI.
>
>I can call reactor.stop() and sucessfully get notified of shutdown and the run thread terminates, the TCP/IP listen port is closed.
>
>When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0) a second time I find that things don't work correctly. e.g. TCP calls are accepted and my protocol.dataReceived() is called but then calling reactor.callInThread(self.blockingMethod, data) does nothing. Also calling stop() a second time does not stop the  running reactor thread or terminate the TCP listener.
>
>I have tried numerous options, and have been careful to avoid any conflicts with the GUI threads. It appears that the reactor is not being restarted correctly after stop() and a second run().
>
>What I need is to stop and re-start the listenTCP.  Is there a way to do this?

You need to implement this feature :)  It is not expected to work any
currently provided reactor.

More likely, though, you just shouldn't call reactor.stop() until you're
ready to exit completely.

Jean-Paul



From glyph at divmod.com  Tue Aug  1 12:49:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 14:49:10 -0400
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor
	is already running?
In-Reply-To: <44CF8ABD.7040404@ussonet.net>
Message-ID: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>

On Tue, 01 Aug 2006 12:09:17 -0500, "justind2 at ussonet.net" <justind2 at ussonet.net> wrote:
>Here is a script I've made and am playing with to try to understand how 
>things behave in Twisted. I'm using twistedsnmp but I think my problem here 
>is my understanding of how to use the reactor (or lack there of).

Yeah... I don't know anything about twistedsnmp (it's not actually done by twistedmatrix labs); but I can see a couple of problems.

>I feel like I'm misunderstanding some fundamentals, but I may just be hard- 
>headed.

Here are some fundamentals I think you might be missing:

 - Twisted is not thread safe.  Do not, e.g., call Deferred callbacks or create Deferreds in a thread, call them from methods like dataReceived or connectionLost.  (99% of your problem is here)
 - This goes for pretty much any Twisted-using code as well.  I'm not really sure, not being familiar with twistedsnmp, but I'd bet that AgentProxy is not designed for instantiation or initialization from a thread.
 - It looks like you want callFromThread, not callWhenRunning.
    - callWhenRunning: http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#twisted.internet.interfaces.IReactorCore.callWhenRunning
    - callFromThread: http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html#twisted.internet.interfaces.IReactorThreads.callFromThread
 - err.trap raises exceptions, so checking it in an 'if' is nonsensical.  Maybe you want err.check?
   - trap: http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.trap
   - check: http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.check
 - The return value of callWhenRunning is ignored; there's no sense to having return_def return a value.

Some stylistic stuff, too:

 - When posting examples to this mailing list, please reduce your example to a minimal runnable example
 - Messages posted here should also generally follow Twisted conventions, unless there is a specific need not to.  For example:
   - use twisted.python.log, not python's 'logging' module.
   - use reactor.callInThread and reactor.callFromThread, not Python's 'threading' or 'thread' modules.  These have defined interactions with the reactor, random other threads don't.

In summary: your "working" example works only by accident, and only sometimes.    I'd love to give you a simple answer, but you don't have a specific problem or misunderstanding; I think you've got entirely the wrong idea of how Twisted is running your code.

You probably want to back off from SNMP a little bit and familiarize yourself with more basic applications of the Twisted programming model before trying this again.  This tutorial might be a good place to get started:

http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html

Of course, the O'Reilly book is a pretty good source of documentation too :).



From glyph at divmod.com  Tue Aug  1 13:03:11 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 15:03:11 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <20060801174423.1717.42158796.divmod.quotient.11192@ohm>
Message-ID: <20060801190311.1717.683634178.divmod.quotient.11284@ohm>

On Tue, 1 Aug 2006 13:44:23 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>On Tue, 01 Aug 2006 19:27:54 +0200, ian.parker at facilita.co.uk wrote:
>>I have created an internet server that is started in a thread from a Python 
>>QT GUI.

Although Twisted's QT reactor is not terribly well supported since nobody on the Twisted team likes QT, but starting a reactor in a non-main thread and restarting it is not "not well supported", it is very explicitly broken :).

You should look at using the QT reactor, and run your Twisted code in the same thread as your GUI -- and possibly submitting some patches so we can finally get the last of the tests passing: see http://twistedmatrix.com/buildbot/

If you have the option of using a different UI toolkit, consider using GTK2; GTK seems to behave best out of all the toolkits when dealing with asynchronous I/O, and it is definitely a favorite of a sizeable portion of the Twisted team.

>>When I restart it (...)

As exarkun says, the reactor is not restartable.

There's a reason why nobody's bothered with this yet.  While a truly restartable reactor might be of real use in a few obscure situations (mostly in test code), applications which _appear_ to require it are often just mis-designed and should be fixed to run the reactor in the "normal" way.

For a previous discussion of this issue, see this ticket, which seems to be destined for rejection: http://twistedmatrix.com/trac/ticket/893



From duncan.mcgreggor at gmail.com  Tue Aug  1 13:25:37 2006
From: duncan.mcgreggor at gmail.com (Duncan McGreggor)
Date: Tue, 01 Aug 2006 15:25:37 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
References: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
Message-ID: <44CFAAB1.8070403@gmail.com>

glyph at divmod.com wrote:

> - Messages posted here should also generally follow Twisted conventions, 
> unless there is a specific need not to.  For example:
>   - use twisted.python.log, not python's 'logging' module.

I stopped using t.p.log last year because of a common customer 
requirement for the software to support logging levels. After digging 
through the twisted archives on this topic, it appeared that there was a 
little disagreement on how to use t.p.log, some missing docs, and no way 
to prevent the logging of messages of a certain type.

Was I wrong in this assessment?

If I wasn't, I would actually be interested in fixing this problem with 
both 1) an agreed upon means of supporting log levels and 2) extensive 
documentation.

This might dovetail nicely with JP's comment of 05/31/05 in 
http://twistedmatrix.com/trac/ticket/989. And possibly some of the 
issues raised in http://twistedmatrix.com/trac/ticket/1069 .

Shall I open a ticket?

d



From justind2 at ussonet.net  Tue Aug  1 14:04:25 2006
From: justind2 at ussonet.net (justind2 at ussonet.net)
Date: Tue, 01 Aug 2006 15:04:25 -0500
Subject: [Twisted-Python] "Injecting" a callWhenRunning when the reactor
	is already running?
In-Reply-To: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
References: <20060801184910.1717.452047573.divmod.quotient.11268@ohm>
Message-ID: <44CFB3C9.5000206@ussonet.net>

Thank you very much for the response. Hopefully these pointers will help 
me tie the basics down in my mind. The threading seems to be where I'm 
tripping up the most.

glyph at divmod.com wrote:

> On Tue, 01 Aug 2006 12:09:17 -0500, "justind2 at ussonet.net" 
> <justind2 at ussonet.net> wrote:
>
>> Here is a script I've made and am playing with to try to understand 
>> how things behave in Twisted. I'm using twistedsnmp but I think my 
>> problem here is my understanding of how to use the reactor (or lack 
>> there of).
>
>
> Yeah... I don't know anything about twistedsnmp (it's not actually 
> done by twistedmatrix labs); but I can see a couple of problems.
>
>> I feel like I'm misunderstanding some fundamentals, but I may just be 
>> hard- headed.
>
>
> Here are some fundamentals I think you might be missing:
>
> - Twisted is not thread safe.  Do not, e.g., call Deferred callbacks 
> or create Deferreds in a thread, call them from methods like 
> dataReceived or connectionLost.  (99% of your problem is here)
> - This goes for pretty much any Twisted-using code as well.  I'm not 
> really sure, not being familiar with twistedsnmp, but I'd bet that 
> AgentProxy is not designed for instantiation or initialization from a 
> thread.
> - It looks like you want callFromThread, not callWhenRunning.
>    - callWhenRunning: 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorCore.html#twisted.internet.interfaces.IReactorCore.callWhenRunning 
>
>    - callFromThread: 
> http://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html#twisted.internet.interfaces.IReactorThreads.callFromThread 
>
> - err.trap raises exceptions, so checking it in an 'if' is 
> nonsensical.  Maybe you want err.check?
>   - trap: 
> http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.trap 
>
>   - check: 
> http://twistedmatrix.com/documents/current/api/twisted.python.failure.Failure.html#twisted.python.failure.Failure.check 
>
> - The return value of callWhenRunning is ignored; there's no sense to 
> having return_def return a value.
>
> Some stylistic stuff, too:
>
> - When posting examples to this mailing list, please reduce your 
> example to a minimal runnable example
> - Messages posted here should also generally follow Twisted 
> conventions, unless there is a specific need not to.  For example:
>   - use twisted.python.log, not python's 'logging' module.
>   - use reactor.callInThread and reactor.callFromThread, not Python's 
> 'threading' or 'thread' modules.  These have defined interactions with 
> the reactor, random other threads don't.
>
> In summary: your "working" example works only by accident, and only 
> sometimes.    I'd love to give you a simple answer, but you don't have 
> a specific problem or misunderstanding; I think you've got entirely 
> the wrong idea of how Twisted is running your code.
>
> You probably want to back off from SNMP a little bit and familiarize 
> yourself with more basic applications of the Twisted programming model 
> before trying this again.  This tutorial might be a good place to get 
> started:
>
> http://twistedmatrix.com/projects/core/documentation/howto/tutorial/index.html 
>
>
> Of course, the O'Reilly book is a pretty good source of documentation 
> too :).
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From glyph at divmod.com  Tue Aug  1 15:19:43 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 17:19:43 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <44CFAAB1.8070403@gmail.com>
Message-ID: <20060801211943.1717.1193299259.divmod.quotient.11418@ohm>

On Tue, 01 Aug 2006 15:25:37 -0400, Duncan McGreggor <duncan.mcgreggor at gmail.com> wrote:
>glyph at divmod.com wrote:
>>- Messages posted here should also generally follow Twisted conventions, 
>>unless there is a specific need not to.  For example:
>>   - use twisted.python.log, not python's 'logging' module.

My point here is that you should use the 'log' module *for examples sent to this list*, not necessarily in all software -- unless, of course, you're reporting something like a buggy interaction with the 'logging' module :)

>I stopped using t.p.log last year because of a common customer requirement 
>for the software to support logging levels. After digging through the 
>twisted archives on this topic, it appeared that there was a little 
>disagreement on how to use t.p.log, some missing docs, and no way to prevent 
>the logging of messages of a certain type.

>Was I wrong in this assessment?

Not necessarily.  I think that logging levels are a fundamentally wrong way of organizing log information, but I admit that's a personal opinion; I don't have very sophisticated uses for textual log files.  TPL isn't particularly great either, mind you, but it is unlikely that TPL will ever support half of the features that the logging module does.

TPL's documentation is certainly _terrible_, and there are a bunch of outstanding tickets related to it... it's nowhere near as well-maintained as the logging module.

>If I wasn't, I would actually be interested in fixing this problem with both 
>1) an agreed upon means of supporting log levels and 2) extensive 
>documentation.

Logging levels are not among the things that I think should be done to the log module :).  Extensive documentation sure would be nice though.

>This might dovetail nicely with JP's comment of 05/31/05 in 
>http://twistedmatrix.com/trac/ticket/989. And possibly some of the issues 
>raised in http://twistedmatrix.com/trac/ticket/1069 .

As long as we're talking about tickets, you can read more of my ranting about the stdlib logging module on http://twistedmatrix.com/trac/ticket/307

>Shall I open a ticket?

Not for logging levels.  But for any of the other stuff you mentioned, sure.



From glyph at divmod.com  Tue Aug  1 16:36:29 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 1 Aug 2006 18:36:29 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801211943.1717.1193299259.divmod.quotient.11418@ohm>
Message-ID: <20060801223629.1717.1212357632.divmod.quotient.11494@ohm>

On Tue, 1 Aug 2006 17:19:43 -0400, glyph at divmod.com wrote:

>>Was I wrong in this assessment?

>Not necessarily.

Hmm, my reply wasn't terribly clear.  I was really saying a few different things, all jumbled together.  First of all, just regarding your decision to use the logging module:

You made the correct decision.  If you need the features the logging module provides, you are best off using it, rather than modifying Twisted to do what it does.  I think the logging module serves its intended audience well, although I am not in its intended audience.

This is _especially_ true if your clients are requesting advanced features like log levels, verbosity selection, and a console log viewer.

what Twisted's log module can currently do:

You *CAN* include a 'level' and a 'debug flag' in Twisted log messages if you want.  Feel free to pass them along:

  log.msg("hi there", level=7, debug="banana")

but that's only because you can pass any other data you like as well.  This will be silently dropped by the default log observer, but you could write a different log observer (even one that invoked the 'logging' module ^_-) which honored your custom log variables.

Now, a bit more about my personal design choices regarding logging:

Logs are stored mainly to be analyzed: without analysis, log messages are just debug spew.  Sadly, despite the fact that it can handle arbitrary events and NOT just text messages, that's most of what the Twisted log module is currently used for: events which you can grep for in a text file if something goes wrong.  That's not really what I want to use it for though.

My preferred method of implementing log analysis is showcased in Mantissa; Allen Short wrote a pretty nice statistics-gathering system which uses the 'log' module to *collect* the statistics, but then stores them in a database, and then provides a DB-backed API for accessing specific statistics nor , not a generic "log analysis" tool which works on flat text files.

  (You can see that here: http://divmod.org/trac/browser/trunk/Mantissa/xmantissa/stats.py )

Rather than having a restricted set of data like "level" and "debug", "log events" in Twisted are really just arbitrary events which can contain equally arbitrary data.  The "_observeStatEvent" method in that module makes use of this feature.

My long-term vision for log events is for every log message in Twisted to eventually go from looking like this:

  log.msg("did some stuff %s %r" % (a, b))

to looking like this:

  log.msg(interface=IDidSomeStuff,
          format="did some stuff %(stuff)s %(morestuff)r",
          stuff=stuff,
          morestuff=morestuff))

Like this, textual observers have a formatting argument that they can use to log the debug message to a file for debugging, and and structured observers which understand the IDidSomeStuff log interface can capture this message and do something more specific with the 'stuff' and 'morestuff' attributes (which are presumably objects that can be manipulated in some other way than simple stringification).

However, logging is a low-priority area of development for Twisted right now, and while  there seems to be at least _rough_ consensus around the features I'm proposing here, the specifics of implementation have been bogged down in details.

There is a lot of grumbling about the current interface.  In particular various people think that formatting should be specified differently, or that the default logfile format needs to be changed to be structured, or that the **kw-dict-as-log-object API is unnecessary micro-optimization and we should use actual providers of the declared interface, or... well, it should suffice to say there are a lot of disagreements.  Nobody wants to commit extensively to an interface which is going to be changed, and hence, nobody wants to do the work to change the existing log messages -- or, even if someone volunteered to do that, nobody wants to be responsible for the _future_ work to make the existing log messages work some _other_ new way.

Despite the fact that we all know it's sub-optimal, everyone can agree that the current 'log.msg as persistent debug print' usage will continue to be supported into the indefinite future, so that's the one that gets used.



From exarkun at divmod.com  Tue Aug  1 21:36:43 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 1 Aug 2006 23:36:43 -0400
Subject: [Twisted-Python] Twisted website
In-Reply-To: 0
Message-ID: <20060802033643.1717.258362304.divmod.quotient.11761@ohm>

The trac server has been modified to run under a somewhat different
configuration.  Please let me know if you notice any irregularities
on the website.

Jean-Paul



From exarkun at divmod.com  Wed Aug  2 07:52:09 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Aug 2006 09:52:09 -0400
Subject: [Twisted-Python] logging (was: "Injecting" ...)
In-Reply-To: <20060801223629.1717.1212357632.divmod.quotient.11494@ohm>
Message-ID: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>

On Tue, 1 Aug 2006 18:36:29 -0400, glyph at divmod.com wrote:
>
>My long-term vision for log events is for every log message in Twisted to 
>eventually go from looking like this:
>
>  log.msg("did some stuff %s %r" % (a, b))
>
>to looking like this:
>
>  log.msg(interface=IDidSomeStuff,
>          format="did some stuff %(stuff)s %(morestuff)r",
>          stuff=stuff,
>          morestuff=morestuff))
>

There's nothing preventing anyone from using twisted.python.log like this
right now.  The implementation could be adjusted to provide better
performance for this case but that's hardly a blocking issue preventing
anyone from doing creative things with logging.

As you mentioned, Allen has effectively used it this way.

I think the real reason we don't see this usage more is that it is pretty
advanced and most people *do* just want debug spew.  You have to get quite
a ways into the development of a library or application before you start
worrying about the things this functionality can help you with.

Oh, and I still think the format argument is redundant and stupid :)

Jean-Paul



From eprparadocs at gmail.com  Wed Aug  2 08:16:39 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Wed, 02 Aug 2006 10:16:39 -0400
Subject: [Twisted-Python] logging
In-Reply-To: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>
References: <20060802135209.1717.1811963474.divmod.quotient.12214@ohm>
Message-ID: <44D0B3C7.2080908@gmail.com>

Jean-Paul Calderone wrote:
> On Tue, 1 Aug 2006 18:36:29 -0400, glyph at divmod.com wrote:
>>
>> My long-term vision for log events is for every log message in Twisted 
>> to eventually go from looking like this:
>>
>>  log.msg("did some stuff %s %r" % (a, b))
>>
>> to looking like this:
>>
>>  log.msg(interface=IDidSomeStuff,
>>          format="did some stuff %(stuff)s %(morestuff)r",
>>          stuff=stuff,
>>          morestuff=morestuff))
>>
> 
> There's nothing preventing anyone from using twisted.python.log like this
> right now.  The implementation could be adjusted to provide better
> performance for this case but that's hardly a blocking issue preventing
> anyone from doing creative things with logging.
> 
> As you mentioned, Allen has effectively used it this way.
> 
> I think the real reason we don't see this usage more is that it is pretty
> advanced and most people *do* just want debug spew.  You have to get quite
> a ways into the development of a library or application before you start
> worrying about the things this functionality can help you with.
> 
> Oh, and I still think the format argument is redundant and stupid :)
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I have a few questions about all this particularly since my application 
requires at least two different logs in the normal case and three in the 
debugging case (after all I don't want to mix debugging information with 
all the rest of the logs).

Why is the format "redundant and stupid"? Is it available someplace 
else? If so, I would love to know so that I could remove it from my usage.

In regards to 'interface' above is that how I would switch between 
different loggers?

Finally if I do all this why do I need t.p.l at all? I might as well 
just implement log.msg() myself. I could keep t.p.l for the debugging 
case and use my specialized code for the other two. Am I missing something?


Peace,
Chaz.





From thomas at apestaart.org  Wed Aug  2 14:07:17 2006
From: thomas at apestaart.org (Thomas Vander Stichele)
Date: Wed, 02 Aug 2006 22:07:17 +0200
Subject: [Twisted-Python] [OT] Job offer: Flumotion
Message-ID: <1154549237.18970.105.camel@otto.amantes>

Hey everyone,

Fluendo is looking for a developer to join their team of streaming server
developers and expand the video-on-demand functionality of Flumotion.
Tasks include integration of the functionality in the streaming server core,
the cluster platform, and providing a web-based frontend for managing
and transcoding customer's VOD files.

Experience with at least one of multimedia, Linux/UNIX, Python, Twisted,
Web service programming is a definite plus.

Applicants are expected to be willing to relocate to Barcelona, Spain.  Fluendo
offers a competitive salary, private health care, and an attractive bonus
system based on performance of the developed platform.

For more information, see http://www.fluendo.com/
Interested developers can send their application and resumé to me at
thomas <at> fluendo <dot> com

Thanks,
Thomas





From tvachon at gmail.com  Wed Aug  2 17:12:49 2006
From: tvachon at gmail.com (Travis Vachon)
Date: Wed, 2 Aug 2006 16:12:49 -0700
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
References: <17510697.243751154453274537.JavaMail.servlet@kundenserver>
Message-ID: <d9d9edd40608021612k2b1400a2x5054f546c738821f@mail.gmail.com>

Hi Ian

I ran into this just recently, but am not entirely certain I found the best
solution. I needed to be able to switch the port the reactor was listening
on without restarting the reactor. Here's how I did it:

     def startListener(self, port, interface="127.0.0.1"):

        self.iListeningPort = reactor.listenTCP(
            port,
            self.factory,
            interface=interface
            )
    def restartListener(self, port, interface="127.0.0.1"):

        self.iListeningPort.stopListening()
        self.startListener(port, interface)


I'm not sure if doing this will have any unintended side-effects, but so far
it seems to have done the trick. If someone else on the list could confirm
this does what I think it does (and what Ian is looking for) that would be
great.

Best,

Travis

On 8/1/06, ian.parker at facilita.co.uk <ian.parker at facilita.co.uk> wrote:
>
> I have created an internet server that is started in a thread from a
> Python QT GUI.
>
> I can call reactor.stop() and sucessfully get notified of shutdown and the
> run thread terminates, the TCP/IP listen port is closed.
>
> When I restart it by calling reactor.listenTCP() and  reactor.run(installSignalHandlers=0)
> a second time I find that things don't work correctly. e.g. TCP calls are
> accepted and my protocol.dataReceived() is called but then calling
> reactor.callInThread(self.blockingMethod, data) does nothing. Also calling
> stop() a second time does not stop the  running reactor thread or terminate
> the TCP listener.
>
> I have tried numerous options, and have been careful to avoid any
> conflicts with the GUI threads. It appears that the reactor is not being
> restarted correctly after stop() and a second run().
>
> What I need is to stop and re-start the listenTCP.  Is there a way to do
> this?
>
> Thanks,
> Ian
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060802/ae92542d/attachment.html>

From exarkun at divmod.com  Wed Aug  2 18:23:14 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 2 Aug 2006 20:23:14 -0400
Subject: [Twisted-Python] Restarting a reactor listener
In-Reply-To: <d9d9edd40608021612k2b1400a2x5054f546c738821f@mail.gmail.com>
Message-ID: <20060803002314.1717.1557365364.divmod.quotient.12651@ohm>

On Wed, 2 Aug 2006 16:12:49 -0700, Travis Vachon <tvachon at gmail.com> wrote:
>Hi Ian
>
>I ran into this just recently, but am not entirely certain I found the best
>solution. I needed to be able to switch the port the reactor was listening
>on without restarting the reactor. Here's how I did it:
>
>     def startListener(self, port, interface="127.0.0.1"):
>
>        self.iListeningPort = reactor.listenTCP(
>            port,
>            self.factory,
>            interface=interface
>            )
>    def restartListener(self, port, interface="127.0.0.1"):
>
>        self.iListeningPort.stopListening()
>        self.startListener(port, interface)
>
>
>I'm not sure if doing this will have any unintended side-effects, but so far
>it seems to have done the trick. If someone else on the list could confirm
>this does what I think it does (and what Ian is looking for) that would be
>great.
>
>Best,
>
>Travis
>

This is pretty much exactly correct.  The only thing which *might* be an
issue is that stopListening is not guaranteed to succeed immediately.  *If*
you are relying on the old port number to be available immediately after
restartListener returns, you might be surprised.  You can address this by
returning the Deferred which is returned by stopListening from restartListener
so that the caller will receive notification when the old port number becomes
free.

In practice, and for the typical use cases, this probably won't often be a
problem.

Jean-Paul



From forsberg at cendio.se  Thu Aug  3 03:36:42 2006
From: forsberg at cendio.se (Erik Forsberg)
Date: Thu, 03 Aug 2006 11:36:42 +0200
Subject: [Twisted-Python] Writing benchmark applications with twisted - any
	examples?
Message-ID: <uohd0uyxcl.fsf@impertigo.lkpg.cendio.se>

Hi!

I'm thinking about writing a benchmarking application using
twisted. It needs to connect to a server via xmlrpc, and I'd like to
simulate multiple clients connecting at the same time, so I need some
concurrency. Each request needs to be unique (different usernames). 

Are there any examples of a twisted application that does this kind of
thing? I guess a http benchmark could serve as a good example, if such
a thing exists.

Thanks,
\EF
-- 
Erik Forsberg                OpenSource-based Thin Client Technology
Systems Analyst/Developer    Phone: +46-13-21 46 00    
Cendio AB    	             Web: http://www.cendio.com
		             





From meng.yan at gmail.com  Thu Aug  3 04:03:35 2006
From: meng.yan at gmail.com (Mike Meng)
Date: Thu, 3 Aug 2006 18:03:35 +0800
Subject: [Twisted-Python] Problem in the example code of Twisted Network
	Programming Essentials
Message-ID: <88aa66fa0608030303u413021c4j7bae6f468dfe607e@mail.gmail.com>

Hi all,
     I'm learning Twisted by reading Abe Fettig's "Twisted Networking
Programming Essentials". I tried the example 2-6 (dataforward.py) but the
program hung after printing 'Connected to ...'. I don't know  Twisted enough
to figure out where the problem is. Will anybody tell me why? I paste the
code here:

--------------------------------------------------------------
from twisted.internet import stdio, reactor, protocol
from twisted.protocols import basic
import re

class DataForwardingProtocol(protocol.Protocol):
    def __init__(self):
        self.output = None
        self.normalizeNewlines = False

    def dataReceived(self, data):
        if self.normalizeNewlines:
            data = re.sub(r"(\r\n|\n)", "\r\n", data)
        if self.output:
            self.output.write(data)

class StdioProxyProtocol(DataForwardingProtocol):
    def connectionMade(self):
        inputForwarder = DataForwardingProtocol()
        inputForwarder.output = self.transport
        inputForwarder.normalizeNewlines = True
        stdioWrapper = stdio.StandardIO(inputForwarder)
        self.output = stdioWrapper
        print "Connected to server.  Press ctrl-C to close connection."

class StdioProxyFactory(protocol.ClientFactory):
    protocol = StdioProxyProtocol

    def clientConnectionLost(self, transport, reason):
        reactor.stop()

    def clientConnectionFailed(self, transport, reason):
        print reason.getErrorMessage()
        reactor.stop()

if __name__ == '__main__':
    import sys
    if not len(sys.argv) == 3:
        print "Usage: %s host port" % __file__
        sys.exit(1)

    reactor.connectTCP(sys.argv[1], int(sys.argv[2]), StdioProxyFactory())
    reactor.run()
-----------------------------------------------------------------------

   Thanks in advance.

   Mike
Aug. 3, 2006
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060803/4f94b707/attachment.html>

From exarkun at divmod.com  Thu Aug  3 20:21:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 3 Aug 2006 22:21:55 -0400
Subject: [Twisted-Python] Twisted website
In-Reply-To: <20060802033643.1717.258362304.divmod.quotient.11761@ohm>
Message-ID: <20060804022155.1717.602250799.divmod.quotient.13750@ohm>

On Tue, 1 Aug 2006 23:36:43 -0400, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>The trac server has been modified to run under a somewhat different
>configuration.  Please let me know if you notice any irregularities
>on the website.

The IRC and mailing list notifications for ticket creations and changes
were offline until tonight.  I believe they are working correctly again,
but please let me know if you notice any (new) problems with either.

Jean-Paul



From manlio_perillo at libero.it  Fri Aug  4 14:09:16 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 22:09:16 +0200
Subject: [Twisted-Python] problems with tracebacks
Message-ID: <44D3A96C.1020604@libero.it>

This problem seems to happen from time in time.

Traceback are not printed.

Now I'm running trial on a test case and I got:

[...]
test.test_mail.TestMail.test_email_plain ... [OK]
test.test_mail.TestMail.test_sendmail_html ... [ERROR]
test.test_mail.TestMail.test_sendmail_text ... [ERROR]

===============================================================================
[ERROR]: test.test_mail.TestMail.test_sendmail_html

Failure: exceptions.IndexError: list index out of range
===============================================================================
[ERROR]: test.test_mail.TestMail.test_sendmail_text

Failure: twisted.internet.defer.TimeoutError: <test.test_mail.TestMail
testMetho
d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
-------------------------------------------------------------------------------
Ran 4 tests in 3.078s

FAILED (errors=2, successes=1)


And the log file:
[...]

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_email_plain <--

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_sendmail_html <--

2006/08/04 21:59 ora solare Europa occidentale [-] -->
test.test_mail.TestMail.test_sendmail_text <--

2006/08/04 21:59 ora solare Europa occidentale [-] Main loop terminated.
2006/08/04 21:59 ora solare Europa occidentale [-] Main loop terminated.



Unfortunately every time I got this problem I'm unable to write a small
reproducible code.
And every time the problem is caused by a simple bug in the code.

P.S
Why I got the "Main loop terminated" two times?



Thanks and regards  Manlio Perillo



From radix at twistedmatrix.com  Fri Aug  4 14:41:21 2006
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Fri, 4 Aug 2006 16:41:21 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3A96C.1020604@libero.it>
References: <44D3A96C.1020604@libero.it>
Message-ID: <60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>

On 8/4/06, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
> This problem seems to happen from time in time.
>
> Traceback are not printed.
>
> Now I'm running trial on a test case and I got:
>
> [...]
> test.test_mail.TestMail.test_email_plain ... [OK]
> test.test_mail.TestMail.test_sendmail_html ... [ERROR]
> test.test_mail.TestMail.test_sendmail_text ... [ERROR]
>
>
> ===============================================================================
> [ERROR]: test.test_mail.TestMail.test_sendmail_html
>
> Failure: exceptions.IndexError: list index out of range
>
> ===============================================================================
> [ERROR]: test.test_mail.TestMail.test_sendmail_text
>
> Failure: twisted.internet.defer.TimeoutError: <test.test_mail.TestMail
> testMetho
> d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
>
> -------------------------------------------------------------------------------
> Ran 4 tests in 3.078s
>
> FAILED (errors=2, successes=1)



Unfortunately every time I got this problem I'm unable to write a small
> reproducible code.
> And every time the problem is caused by a simple bug in the code.



What are your test cases subclassing? What version of Twisted are you using?


-- 
Christopher Armstrong
International Man of Twistery
http://radix.twistedmatrix.com/
http://twistedmatrix.com/
http://canonical.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060804/010bacae/attachment.html>

From manlio_perillo at libero.it  Fri Aug  4 15:16:00 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 23:16:00 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
References: <44D3A96C.1020604@libero.it>
	<60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
Message-ID: <44D3B910.9080507@libero.it>

Christopher Armstrong ha scritto:
> On 8/4/06, *Manlio Perillo* <manlio_perillo at libero.it
> <mailto:manlio_perillo at libero.it>> wrote:
> 
>     This problem seems to happen from time in time.
> 
>     Traceback are not printed.
> 
>     Now I'm running trial on a test case and I got:
> 
>     [...]
>     test.test_mail.TestMail.test_email_plain ... [OK]
>     test.test_mail.TestMail.test_sendmail_html ... [ERROR]
>     test.test_mail.TestMail.test_sendmail_text ... [ERROR]
> 
>     ===============================================================================
>     [ERROR]: test.test_mail.TestMail.test_sendmail_html
> 
>     Failure: exceptions.IndexError: list index out of range
>     ===============================================================================
>     [ERROR]: test.test_mail.TestMail.test_sendmail_text
> 
>     Failure: twisted.internet.defer.TimeoutError : <test.test_mail.TestMail
>     testMetho
>     d=test_sendmail_text> (test_sendmail_text) still running at 3.0 secs
>     -------------------------------------------------------------------------------
>     Ran 4 tests in 3.078s
> 
>     FAILED (errors=2, successes=1)
> 
>  
> 
>     Unfortunately every time I got this problem I'm unable to write a small
>     reproducible code.
>     And every time the problem is caused by a simple bug in the code.
> 
> 
> 
> What are your test cases subclassing? What version of Twisted are you using?
>  



I use this simple test case:

class TestMail(unittest.TestCase):
    """Test sendmail function

    XXX TODO: do not use a real mail server!
              see twisted.mail.test.test_mail
    """

    timeout = 10

    def tearDownClass(self):
        # XXX TODO tearDown the resolver
        pass

    def test_senmail(self):
        text = u"Test"

        msg = mail.MIMEText(text)
        # ...

        mail.sendmail(msg)



The sendmail function is:

def sendmail(email):
    """Send an email message.
    """

    def gotMX(mx):
        return smtp.sendmail(mx, from_, [to], msg)


    try:
        # some things that can fail
        # (and *do* fail: do I just got another email package bug?)
	# ...

        msg = flatten(email)
    except Exception, reason:
        return defer.fail(reason)

    mxc = getMX()
    return mxc.getMX(host).addCallback(lambda mx: gotMX(str(mx.name)))



The problem seems to be with the try statement.
When I try to print or log.err the exception, I don't get the full
traceback.



Thanks and regards  Manlio Perillo



From manlio_perillo at libero.it  Fri Aug  4 15:29:59 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 04 Aug 2006 23:29:59 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3B910.9080507@libero.it>
References: <44D3A96C.1020604@libero.it>	<60ed19d40608041341y4f7452ev69147f248c4de0f4@mail.gmail.com>
	<44D3B910.9080507@libero.it>
Message-ID: <44D3BC57.7090405@libero.it>

Manlio Perillo ha scritto:
> Christopher Armstrong ha scritto:
>> On 8/4/06, *Manlio Perillo* <manlio_perillo at libero.it
>> <mailto:manlio_perillo at libero.it>> wrote:

Sorry, I forgot to say that I'm using Windows XP SP2 and Twisted 2.4.0.


Regards  Manlio Perillo



From exarkun at divmod.com  Fri Aug  4 15:55:33 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 4 Aug 2006 17:55:33 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D3B910.9080507@libero.it>
Message-ID: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>

On Fri, 04 Aug 2006 23:16:00 +0200, Manlio Perillo <manlio_perillo at libero.it> wrote:
>
>        msg = flatten(email)
>    except Exception, reason:
>        return defer.fail(reason)
>

Here you create a Deferred with a Failure with no traceback associated
with it.  Try returning "defer.fail()" instead.

Jean-Paul



From keith.cheung at lkmachinery.com.hk  Fri Aug  4 21:44:44 2006
From: keith.cheung at lkmachinery.com.hk (=?big5?B?S2VpdGggQ2hldW5nICixabDqqH0p?=)
Date: Sat, 5 Aug 2006 11:44:44 +0800
Subject: [Twisted-Python] Help implement protocol
Message-ID: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>

Hi all,

I want to implement some handshake protocol, say..

1. Client:	WhatDate
2. Server: 	5Aug
3. Client:	WhatYear
4. Server:	2006
5. Client:	WhatTime
6. Server:	1005

So, for the client:-  (pseudo code)
	def connectionMade():
		send "WhatDate"
		state = askingForDate
	def lineReceived(data):
		switch state:
			askingForDate:
				date = data
				send "WhatYear"
				state = askingForYear
				break
			askingForYear:
				year = data
				send = "WhatTime"
				state = askingForTime
				break
			askingForTime:
				time = data
				state = initialState
				disconnect

The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?




From manlio_perillo at libero.it  Sat Aug  5 10:09:54 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Sat, 05 Aug 2006 18:09:54 +0200
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
References: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
Message-ID: <44D4C2D2.3060603@libero.it>

Jean-Paul Calderone ha scritto:
> On Fri, 04 Aug 2006 23:16:00 +0200, Manlio Perillo
> <manlio_perillo at libero.it> wrote:
>>
>>        msg = flatten(email)
>>    except Exception, reason:
>>        return defer.fail(reason)
>>
> 
> Here you create a Deferred with a Failure with no traceback associated
> with it.  Try returning "defer.fail()" instead.
> 

Ok, thanks.
But this means that I cannot use defer.fail to report an exception directly.

As an example

if a < 0:
  return defer.fail(RuntimeError("must be non negative"))


does not print a traceback.



Regards  Manlio Perillo



From exarkun at twistedmatrix.com  Sun Aug  6 16:03:37 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 06 Aug 2006 22:03:37 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1154901817.28.847357642@twistedmatrix.com

Bug summary
______________________
Summary for 2006-07-30 through 2006-08-06
Bugs opened: 16    Bugs closed: 8  Total open bugs: 691 (+8)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +5  |Highest:  -4          |Conch:  +1             
|Enhancement:  +0  |High:     +4          |Core:   +4             
|Task:         +3  |Normal:   +8          |Mail:   +2             
                                          |Trial:  -1             
                                          |Web:    -1             
                                          |Web2:   +2             
                                          |Words:  +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1986] new version of trac uses incompatible ticket change notification api (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1986

[#1987] IRC bot not reporting new tickets (opened by exarkun) (CLOSED, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1987

                    ===== High =====
[#1973] No IPathImportMapper adapter for imp.NullImporter (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1973

[#1976] twisted.internet.ssl.Certificate.peerFromTransport can return invalid Certificates (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1976

[#1977] unexpected search command breaks imap search (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1977

[#1978] fetch [message number] body[1] processed incorrectly for non-multipart messages (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1978

[#1979] FileSaver replaces LF with CRLF (opened by agreif)
    defect          web2       http://twistedmatrix.com/trac/ticket/1979

[#1983] Rename 'tlsstarted' to something that isn't a lie, and use more global constants for magic strings (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/1983

                    ===== Normal =====
[#1972] Python 2.5 warnings mangle output from child processes in test (opened by exarkun)
    task            core       http://twistedmatrix.com/trac/ticket/1972

[#1974] Make A Persistent Logging Multi-Login Chat Presence Server (opened by exarkun)
    task            words      http://twistedmatrix.com/trac/ticket/1974

[#1975] connectSSH utility method / function for connecting places with conch (opened by glyph)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1975

[#1980] twisted.web2.FileSaver is broken (opened by dreid)
    enhancement     web2       http://twistedmatrix.com/trac/ticket/1980

[#1981] twisted.python.logfile cowardly, silently and wrongly refuses to rotate logs if it can't write to the directory (opened by jerub)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1981

[#1982] twisted.python.log.DefaultObserver ignores `msg' argument of event dictionary (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/1982

[#1984] Microdom drops the first character in an "extremely lenient" document (opened by radix)
    defect          core       http://twistedmatrix.com/trac/ticket/1984

[#1985] AMP command raises BadLocalReturn despite setting requiresAnswer = False (opened by rwall)
    defect          core       http://twistedmatrix.com/trac/ticket/1985



Closed Bugs
______________________
                    ===== Highest =====
[#1963] getPassword unit test incorrectly uses popen3() (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1963

[#469 ] twisted/web/xmlrpc support for <nil/> types. (opened by virus, closed by exarkun, fixed)
    enhancement     web        http://twistedmatrix.com/trac/ticket/469

[#1965] AMP "LiveFire" unit test setup contains race condition (opened by exarkun, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1965

[#1646] trial should support color output on win32 as well (opened by glyph, closed by jml, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1646

[#1987] IRC bot not reporting new tickets (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1987

[#1986] new version of trac uses incompatible ticket change notification api (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1986

                    ===== High =====
[#1969] Give moshez commit privileges (opened by jml, closed by exarkun, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1969

[#1433] Uninstalling tksupport is not working (opened by toledo, closed by exarkun, invalid)
    defect          core       http://twistedmatrix.com/trac/ticket/1433





From wgwigw at gmail.com  Mon Aug  7 01:05:51 2006
From: wgwigw at gmail.com (wang wei)
Date: Mon, 7 Aug 2006 15:05:51 +0800
Subject: [Twisted-Python] observer patter in twisted?
Message-ID: <dbeb95830608070005m23437041h9c9d880139d54aec@mail.gmail.com>

hi, I want implement such situation:
a client detected a message change, then it notify all the servers that
registed this message arrived.  Is observer patter already implemented in
Twisted?
BTW, in Twisted, Is a serverFactory instance  one thread? thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060807/7edde97e/attachment.html>

From jacob at internet24.de  Mon Aug  7 03:16:37 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Mon, 07 Aug 2006 11:16:37 +0200
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <1154942197.9864.9.camel@localhost.localdomain>

Maybe you want to take a look at the FTPClientBasic class
in
http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/ftp.py .

There the author basically uses a queue of actions (=hand shakes) to
be run, associating response lines to commands, and returning
the results via deferreds....

On Sat, 2006-08-05 at 11:44 +0800, Keith Cheung (張國良) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060807/02235788/attachment.sig>

From andrew-twisted at puzzling.org  Mon Aug  7 04:28:36 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Mon, 7 Aug 2006 20:28:36 +1000
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <20060807102836.GA24537@steerpike.home.puzzling.org>

On Sat, Aug 05, 2006 at 11:44:44AM +0800, Keith Cheung (張國良) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?

Twisted code often uses dynamic method dispatch to methods with prefixed names
like this:

    def connectionMade(self):
        self.sendLine('WhatDate')
        self.state = 'askingForDate'

    def lineReceived(self, line):
        handler = getattr(self, 'state_' + self.state)
        handler(line)

    def state_askingForDate(self, line):
        self.date = line
        self.sendLine('WhatYear')
        self.state = 'askingForYear'

    ...

-Andrew.




From gah at research.att.com  Tue Aug  8 10:59:00 2006
From: gah at research.att.com (Glenn Hochberg)
Date: Tue, 8 Aug 2006 12:59:00 -0400
Subject: [Twisted-Python] Process completion not detected on HP-UX (#608)
In-Reply-To: <20060731203630.1717.666824456.divmod.quotient.9688@ohm>
References: <20060731203630.1717.666824456.divmod.quotient.9688@ohm>
Message-ID: <010B4AF8-C58E-49F0-94B1-E9DA7874ECAA@research.att.com>

After much staring at the Twisted code and some experimenting, I  
finally discovered the nature of the problem.

The semantics of the select() call on HP-UX with respect to pipes is  
a bit different than the other OS's I have access to (i.e. Linux,  
Solaris, and Mac OS X).
In particular, the "read hack" in process.py does not work, because  
select shows the write-end of a pipe being both readable and writable  
whenever there is data in the pipe and the pipe is not full.  There  
does not appear to be any way to detect when all readers of the pipe  
have closed without actually writing at least one byte to the write- 
end (in which case you get a broken pipe error, as one would expect).

As a temporary workaround, I am doing the following in process.py:

a) detecting hp-ux pipe behavior and setting a global  
brokenHpUxPipeBehavior
b) disabling the read hack if this variable is set
c) in Process.processEnded() I check for the variable and if set,  
send closeConnection to each ProcessWriter in the pipes dict

This seems to do the trick.

I have posted to the comp.unix.hp.hpux newsgroup looking for a way to  
determine if the readers are all gone, but don't know whether one  
will turn up or not.

Anyone have any suggestions on better ways to fix this?

	-Glenn

On Jul 31, 2006, at 4:36 PM, Jean-Paul Calderone wrote:

> On Mon, 31 Jul 2006 15:58:40 -0400, Glenn Hochberg  
> <gah at research.att.com> wrote:
>>
>> What approach would you recommend in troubleshooting the problem-- 
>> is  there built-in debugging that can be turned on that might give  
>> me  some more detailed information, or do I need to start adding  
>> log or  print statements?
>>
>> Again, any help would be appreciated.
>>
>
> Run one of the unit tests which fails in debug mode.  For example,
>
>  trial -b twisted.trial.test.test_process.ProcessTestCase.testProcess
>
> If none of the existing unit tests fail, write a new one :)
>
> Jean-Paul




From wgwigw at gmail.com  Wed Aug  9 02:43:19 2006
From: wgwigw at gmail.com (wang wei)
Date: Wed, 9 Aug 2006 16:43:19 +0800
Subject: [Twisted-Python] anyway to get data from a protocol instance?
Message-ID: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>

please have a look of fellow code.

from twisted.internet import reactor, protocol

class echo(protocol.Protocol):
    def __init__(self):
        from Queue import Queue
        self.q = Queue()

    def lineReceived(self, line):
        self.q.put(line)

class echofactory(protocol.ServerFactory):

    def buildProtocol(self, addr):
        p = echo()
        p.factory = self
        return p

class runEcho:
    def __init__(self):
        a = echofactory()
        reactor.listenTCP(1024, a)
        reactor.run()


My question is how can I get size of Queue q from another class when the
program running.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060809/e6eb92c1/attachment.html>

From feldmatrix at gmx.de  Wed Aug  9 06:19:09 2006
From: feldmatrix at gmx.de (Torsten =?iso-8859-1?Q?Irl=E4nder?=)
Date: Wed, 9 Aug 2006 14:19:09 +0200
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>
References: <dbeb95830608090143o33f08d5l2b118661be98507f@mail.gmail.com>
Message-ID: <20060809121909.GA7067@lastpferd.irlaender.de>

On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
> please have a look of fellow code.
> 
> from twisted.internet import reactor, protocol
> 
> class echo(protocol.Protocol):
>    def __init__(self):
>        from Queue import Queue
>        self.q = Queue()
> 
>    def lineReceived(self, line):
>        self.q.put(line)
> 
> class echofactory(protocol.ServerFactory):
> 
>    def buildProtocol(self, addr):
>        p = echo()
>        p.factory = self
>        return p
> 
> class runEcho:
>    def __init__(self):
>        a = echofactory()
>        reactor.listenTCP(1024, a)
>        reactor.run()
> 
> 
> My question is how can I get size of Queue q from another class when the
> program running.

That is a question I'm also interested in a good answer. My proposal would be
to return the protocol object as a deferred. For me this works, but I'm not
sure if this is a good approach. I extended wang wei's code so that the
protocol data can be accessed by other classes. 

from twisted.internet import reactor, protocol, defer

class echo(protocol.Protocol):
    def __init__(self):
        from Queue import Queue
        self.q = Queue()

    def connectionMade(self):
        self.factory.deferred.callback(self)
            
    def lineReceived(self, line):
        print line
        self.q.put(line)

class echofactory(protocol.ServerFactory):

    def __init__(self):
        self.deferred = defer.Deferred()
            
    def buildProtocol(self, addr):
        p = echo()
        p.factory = self
        return p 
            
class runEcho:
    def connect(self):
        a = echofactory()
        a.deferred.addCallback(self.set_myprotocol)
        reactor.listenTCP(1024, a)
        reactor.run()

    def set_myprotocol(self,proto):
        print "protocol ready!" 
        self.proto = proto
        print self.proto.q

r = runEcho()
r.connect()


Can anyone give some comments on this? I am at the very beginning
of twisted programming and I'm not sure if this is a good way to
access the protocol class from the outside.

best regards
Torsten



From mona.yazbeck at hec.ca  Wed Aug  9 08:06:35 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Wed, 9 Aug 2006 10:06:35 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
Message-ID: <002301c6bbbd$06040e60$82c2d384@HEC5521>

Hello, 

I am on Windows, and I have Python 2.4

I am starting twisted with twistd.py for my wiki, but it opens a command prompt so as soon as I log off the server it is no longer working and if I restart it is the same thing. How can I run it as a service so it will always be up?

I don't know much about twisted I just installed it with the MSI and follow 2 or 3 instructions from MoinMoin website (the wiki).

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060809/f6c5ff3d/attachment.html>

From flashbuster at gmail.com  Wed Aug  9 08:20:43 2006
From: flashbuster at gmail.com (Sebastian Schulze)
Date: Wed, 9 Aug 2006 16:20:43 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <002301c6bbbd$06040e60$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
Message-ID: <c2959a420608090720i6890b0b7y2a44205064942117@mail.gmail.com>

Don't know about a twisted way, but that's what firedaemon does:
http://www.firedaemon.com/

Actually you can do this without external software with the "nt resource
kit" and SRVANY.exe

regards, Sebastian

2006/8/9, Mona Yazbeck <mona.yazbeck at hec.ca>:
>
>  Hello,
>
> I am on Windows, and I have Python 2.4
>
> I am starting twisted with twistd.py for my wiki, but it opens a command
> prompt so as soon as I log off the server it is no longer working and if I
> restart it is the same thing. How can I run it as a service so it will
> always be up?
>
> I don't know much about twisted I just installed it with the MSI and
> follow 2 or 3 instructions from MoinMoin website (the wiki).
>
> Thanks
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060809/7e2644f5/attachment.html>

From y.glodt at sitasoftware.lu  Wed Aug  9 08:24:59 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Wed, 9 Aug 2006 16:24:59 +0200
Subject: [Twisted-Python] Writing a simple nameserver
Message-ID: <200608091625.00872.y.glodt@sitasoftware.lu>

Hello,

I have a database which contains a list of hosts with their IP-addresses, and 
I need to be able to connect to them by their name.

The plan is to write a simple daemon using twisted names which accepts the dns 
query, looks up the requested address in the database, and answers the dns 
query.

How would I do that with twisted names?

p.s.
(I skimmed over the documentation but got blinded by "Undocumented" labels.)


Best regards,
Yves



From exarkun at divmod.com  Wed Aug  9 08:39:43 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 9 Aug 2006 10:39:43 -0400
Subject: [Twisted-Python] Writing a simple nameserver
In-Reply-To: <200608091625.00872.y.glodt@sitasoftware.lu>
Message-ID: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>

On Wed, 9 Aug 2006 16:24:59 +0200, Yves Glodt <y.glodt at sitasoftware.lu> wrote:
>Hello,
>
>I have a database which contains a list of hosts with their IP-addresses, and
>I need to be able to connect to them by their name.
>
>The plan is to write a simple daemon using twisted names which accepts the dns
>query, looks up the requested address in the database, and answers the dns
>query.
>
>How would I do that with twisted names?
>
>p.s.
>(I skimmed over the documentation but got blinded by "Undocumented" labels.)
>

You want to implement an authority.  There is basically no documentation
for this, as you discovered.  You can take a look at one of the existing
authority implementations for some hints:

  http://twistedmatrix.com/trac/browser/trunk/twisted/names/authority.py#L61

Once you have an authority, you just need to construct a server based on
it.  You can see an example of this in the tap module:

  http://twistedmatrix.com/trac/browser/trunk/twisted/names/tap.py

This basically amounts to passing a list of authorities to a protocol
instance and then using listenUDP with it.

Twisted Names has never really received any polish.  The API it presents
for doing this is not necessarily well thought out or completely consistent.
If you would like to improve it, please feel free.

Jean-Paul



From exarkun at divmod.com  Wed Aug  9 08:43:33 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 9 Aug 2006 10:43:33 -0400
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <20060809121909.GA7067@lastpferd.irlaender.de>
Message-ID: <20060809144333.1717.61119670.divmod.quotient.18231@ohm>

On Wed, 9 Aug 2006 14:19:09 +0200, Torsten Irländer <feldmatrix at gmx.de> wrote:
>On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
>> please have a look of fellow code.
>>
>> from twisted.internet import reactor, protocol
>>
>> class echo(protocol.Protocol):
>>    def __init__(self):
>>        from Queue import Queue
>>        self.q = Queue()
>>
>>    def lineReceived(self, line):
>>        self.q.put(line)
>>
>> class echofactory(protocol.ServerFactory):
>>
>>    def buildProtocol(self, addr):
>>        p = echo()
>>        p.factory = self
>>        return p
>>
>> class runEcho:
>>    def __init__(self):
>>        a = echofactory()
>>        reactor.listenTCP(1024, a)
>>        reactor.run()
>>
>>
>> My question is how can I get size of Queue q from another class when the
>> program running.

I suspect you are perfectly aware of how to get the size of the Queue and
that your actual problem is getting a reference to the protocol instance.

The answer here has little to do with Twisted specifically.  You just need
to organize your code such that the reference is available where it is
needed.

>
>That is a question I'm also interested in a good answer. My proposal would be
>to return the protocol object as a deferred. For me this works, but I'm not
>sure if this is a good approach. I extended wang wei's code so that the
>protocol data can be accessed by other classes.

This is a perfectly serviceable solution, although it may be more complex
than is strictly necessary.

>
>from twisted.internet import reactor, protocol, defer
>
>class echo(protocol.Protocol):
>    def __init__(self):
>        from Queue import Queue
>        self.q = Queue()
>
>    def connectionMade(self):
>        self.factory.deferred.callback(self)
>
>    def lineReceived(self, line):
>        print line
>        self.q.put(line)
>
>class echofactory(protocol.ServerFactory):
>
>    def __init__(self):
>        self.deferred = defer.Deferred()
>
>    def buildProtocol(self, addr):
>        p = echo()
>        p.factory = self
>        return p
>
>class runEcho:
>    def connect(self):
>        a = echofactory()
>        a.deferred.addCallback(self.set_myprotocol)
>        reactor.listenTCP(1024, a)
>        reactor.run()
>
>    def set_myprotocol(self,proto):
>        print "protocol ready!"
>        self.proto = proto
>        print self.proto.q
>
>r = runEcho()
>r.connect()
>
>
>Can anyone give some comments on this? I am at the very beginning
>of twisted programming and I'm not sure if this is a good way to
>access the protocol class from the outside.

For a single connection, twisted.internet.protocols.ClientCreator performs
approximately the same task.  For multiple connections, you may want to
eliminate the Deferred entirely and simply call a method with a well-known
name.  For example:

    def connectionMade(self):
        self.factory.setMyProtocol(self)

Or, to handle multiple simultaneous connections:

    def connectionMade(self):
        self.factory.addProtocol(self)


    def connectionLost(self, reason):
        self.factory.removeProtocol(self)

There is an implementation of this tracking pattern in Twisted already,
in fact.  Take a look at twisted.protocols.policies.WrappingFactory, which
keeps a dictionary of protocol instances, updating it whenever a new
connection is made or an old one lost.

Jean-Paul



From jacob at internet24.de  Wed Aug  9 08:49:30 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Wed, 09 Aug 2006 16:49:30 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <002301c6bbbd$06040e60$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
Message-ID: <1155134970.26837.21.camel@localhost.localdomain>

AFAIK, twistd doesn't provide direct support for Windows Services yet
(Is this planned?).

But you can easily wrap a reactor,run() yourself by doing something
like the following using the Win32-Python packages

import win32serviceutil
import win32service
import win32event

from twisted.internet import reactor

import sys


class IMSAgentBase(win32serviceutil.ServiceFramework):
    _svc_name_ = "myService"
    _svc_display_name_ = "My little Service"
    _svc_description_ = "My little Service" # Win2k or later
    _svc_deps_ = ["RpcSs"] # Start after the Network has come up...

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        reactor.callFromThread(reactor.stop)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        
        # initialize your services here
        reactor.run()
        win32event.WaitForSingleObject(self.hWaitStop,
win32event.INFINITE)

def HandleCommandLine(cls):
    win32serviceutil.HandleCommandLine(cls)


Run the above as a script.
Maybe you also want to buy the following book, the docs on Python Win32
are somewhat sparse....

"Python Programming on WIN32 (Paperback)"
http://www.amazon.com/gp/product/1565926218


On Wed, 2006-08-09 at 10:06 -0400, Mona Yazbeck wrote:
> Hello, 
>  
> I am on Windows, and I have Python 2.4
>  
> I am starting twisted with twistd.py for my wiki, but it opens a
> command prompt so as soon as I log off the server it is no longer
> working and if I restart it is the same thing. How can I run it as a
> service so it will always be up?
>  
> I don't know much about twisted I just installed it with the MSI and
> follow 2 or 3 instructions from MoinMoin website (the wiki).
>  
> Thanks
>  
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060809/b72608f7/attachment.sig>

From y.glodt at sitasoftware.lu  Wed Aug  9 09:16:05 2006
From: y.glodt at sitasoftware.lu (Yves Glodt)
Date: Wed, 9 Aug 2006 17:16:05 +0200
Subject: [Twisted-Python] Writing a simple nameserver
In-Reply-To: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>
References: <20060809143943.1717.2008153380.divmod.quotient.18228@ohm>
Message-ID: <200608091716.05232.y.glodt@sitasoftware.lu>

On Wednesday 09 August 2006 16:39, Jean-Paul Calderone wrote:
> On Wed, 9 Aug 2006 16:24:59 +0200, Yves Glodt <y.glodt at sitasoftware.lu> 
wrote:
> >Hello,
> >
> >I have a database which contains a list of hosts with their IP-addresses,
> > and I need to be able to connect to them by their name.
> >
> >The plan is to write a simple daemon using twisted names which accepts the
> > dns query, looks up the requested address in the database, and answers
> > the dns query.
> >
> >How would I do that with twisted names?
> >
> >p.s.
> >(I skimmed over the documentation but got blinded by "Undocumented"
> > labels.)
>
> You want to implement an authority.  There is basically no documentation
> for this, as you discovered.  You can take a look at one of the existing
> authority implementations for some hints:

Hi Paul,

thanks for your answer, I'll take a look at it, although I'm by far no expert 
in python nor dns I hope I find my way through the provided examples :-)

Best regards,
Yves

> http://twistedmatrix.com/trac/browser/trunk/twisted/names/authority.py#L61
>
> Once you have an authority, you just need to construct a server based on
> it.  You can see an example of this in the tap module:
>
>   http://twistedmatrix.com/trac/browser/trunk/twisted/names/tap.py
>
> This basically amounts to passing a list of authorities to a protocol
> instance and then using listenUDP with it.
>
> Twisted Names has never really received any polish.  The API it presents
> for doing this is not necessarily well thought out or completely
> consistent. If you would like to improve it, please feel free.
>
> Jean-Paul



From feldmatrix at gmx.de  Wed Aug  9 11:20:19 2006
From: feldmatrix at gmx.de (Torsten =?iso-8859-1?Q?Irl=E4nder?=)
Date: Wed, 9 Aug 2006 19:20:19 +0200
Subject: [Twisted-Python] anyway to get data from a protocol instance?
In-Reply-To: <20060809144333.1717.61119670.divmod.quotient.18231@ohm>
References: <20060809121909.GA7067@lastpferd.irlaender.de>
	<20060809144333.1717.61119670.divmod.quotient.18231@ohm>
Message-ID: <20060809172019.GC7875@lastpferd.irlaender.de>

On Wed, Aug 09, 2006 at 10:43:33AM -0400, Jean-Paul Calderone wrote:
> On Wed, 9 Aug 2006 14:19:09 +0200, Torsten Irländer <feldmatrix at gmx.de> wrote:
> >On Wed, Aug 09, 2006 at 04:43:19PM +0800, wang wei wrote:
> >>please have a look of fellow code.
> >>
> >> [...deleted code... with Queue q in protocol instance]
> >>
> >>My question is how can I get size of Queue q from another class when the
> >>program running.
> 
> I suspect you are perfectly aware of how to get the size of the Queue and
> that your actual problem is getting a reference to the protocol instance.
> 
> The answer here has little to do with Twisted specifically.  You just need
> to organize your code such that the reference is available where it is
> needed.
> 
> >
> >That is a question I'm also interested in a good answer. My proposal would be
> >to return the protocol object as a deferred. For me this works, but I'm not
> >sure if this is a good approach. I extended wang wei's code so that the
> >protocol data can be accessed by other classes.
> 
> This is a perfectly serviceable solution, although it may be more complex
> than is strictly necessary.

Well, I had supposed that, but I'm happy that my proposal isn't as
bad as I thought ;)

> >from twisted.internet import reactor, protocol, defer
> >
> >class echo(protocol.Protocol):
> >   def __init__(self):
> >       from Queue import Queue
> >       self.q = Queue()
> >
> >   def connectionMade(self):
> >       self.factory.deferred.callback(self)
> >
> >   def lineReceived(self, line):
> >       print line
> >       self.q.put(line)
> >
> >class echofactory(protocol.ServerFactory):
> >
> >   def __init__(self):
> >       self.deferred = defer.Deferred()
> >
> >   def buildProtocol(self, addr):
> >       p = echo()
> >       p.factory = self
> >       return p
> >
> >class runEcho:
> >   def connect(self):
> >       a = echofactory()
> >       a.deferred.addCallback(self.set_myprotocol)
> >       reactor.listenTCP(1024, a)
> >       reactor.run()
> >
> >   def set_myprotocol(self,proto):
> >       print "protocol ready!"
> >       self.proto = proto
> >       print self.proto.q
> >
> >r = runEcho()
> >r.connect()
> >
> >
> >Can anyone give some comments on this? I am at the very beginning
> >of twisted programming and I'm not sure if this is a good way to
> >access the protocol class from the outside.
> 
> For a single connection, twisted.internet.protocols.ClientCreator performs
> approximately the same task.  For multiple connections, you may want to
> eliminate the Deferred entirely and simply call a method with a well-known
> name.  For example:
> 
>    def connectionMade(self):
>        self.factory.setMyProtocol(self)
> 
> Or, to handle multiple simultaneous connections:
> 
>    def connectionMade(self):
>        self.factory.addProtocol(self)
> 
> 
>    def connectionLost(self, reason):
>        self.factory.removeProtocol(self)
> 
> There is an implementation of this tracking pattern in Twisted already,
> in fact.  Take a look at twisted.protocols.policies.WrappingFactory, which
> keeps a dictionary of protocol instances, updating it whenever a new
> connection is made or an old one lost.

Thanks again for your comment :)

best regards 
Torsten



From keith.cheung at lkmachinery.com.hk  Thu Aug 10 01:52:48 2006
From: keith.cheung at lkmachinery.com.hk (=?big5?B?S2VpdGggQ2hldW5nICixabDqqH0p?=)
Date: Thu, 10 Aug 2006 15:52:48 +0800
Subject: [Twisted-Python] Help implement protocol
Message-ID: <828C90E83BA08E4795A2BF3B97AEE55D798B63@hkserver-3.lkmachinery.com.hk>

Thanks Andrew and Thomas.
Both are much better then my previous approach.


-----Original Message-----
From: twisted-python-bounces at twistedmatrix.com [mailto:twisted-python-bounces at twistedmatrix.com] On Behalf Of Andrew Bennetts
Sent: Monday, August 07, 2006 6:29 PM
To: Twisted general discussion
Subject: Re: [Twisted-Python] Help implement protocol

On Sat, Aug 05, 2006 at 11:44:44AM +0800, Keith Cheung (張國良) wrote:
> Hi all,
> 
> I want to implement some handshake protocol, say..
> 
> 1. Client:	WhatDate
> 2. Server: 	5Aug
> 3. Client:	WhatYear
> 4. Server:	2006
> 5. Client:	WhatTime
> 6. Server:	1005
> 
> So, for the client:-  (pseudo code)
> 	def connectionMade():
> 		send "WhatDate"
> 		state = askingForDate
> 	def lineReceived(data):
> 		switch state:
> 			askingForDate:
> 				date = data
> 				send "WhatYear"
> 				state = askingForYear
> 				break
> 			askingForYear:
> 				year = data
> 				send = "WhatTime"
> 				state = askingForTime
> 				break
> 			askingForTime:
> 				time = data
> 				state = initialState
> 				disconnect
> 
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?

Twisted code often uses dynamic method dispatch to methods with prefixed names
like this:

    def connectionMade(self):
        self.sendLine('WhatDate')
        self.state = 'askingForDate'

    def lineReceived(self, line):
        handler = getattr(self, 'state_' + self.state)
        handler(line)

    def state_askingForDate(self, line):
        self.date = line
        self.sendLine('WhatYear')
        self.state = 'askingForYear'

    ...

-Andrew.


_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python





From Sven-Erik.Tiberg at ltu.se  Thu Aug 10 03:42:02 2006
From: Sven-Erik.Tiberg at ltu.se (Sven-Erik Tiberg)
Date: Thu, 10 Aug 2006 11:42:02 +0200
Subject: [Twisted-Python] UDP code samples ( to X3D )
Message-ID: <668D1B8AD729C94DB91D17EC19B8BB910234261C@EMMA.personal.adp.ltu.se>

Hi.
 
I'm Sven Erik Tiberg newbee to this list, and working on a idea that's involves UDP transferes.
 
Basically it contains of human interacting to a 3D world ( X3D ) with a simulink ( matworks ) model runing on a separate server. States will be bidirectionell transfered by UDP diagrams over Internet.
 
I'v created some simulink modules that forces the model to run in pseudo-RT-mode and transfering states by UDP in format ( 10  times %f\t% ).  And some X3D worlds that needs to be route'd to this UDP state tranferes by twisted-python scripts.
 
Any hints and tips? Or as x-mas wish: code snipps.
 
PS: Present reading "The Twisted Documantation" may 25 2006. Like the reactor concept. 
 
Sven-Erik Tiberg 
Dept of IT.
Lulea Univ of Techn. 
Sweden  
 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060810/364fe2d5/attachment.html>

From jarrod at vertigrated.com  Thu Aug 10 12:13:24 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 10 Aug 2006 14:13:24 -0400
Subject: [Twisted-Python] Help implement protocol
In-Reply-To: <828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
References: <Aca4QY4kWHV0xzCgQdGB/ieDJXqvHg==>
	<828C90E83BA08E4795A2BF3B97AEE55D764700@hkserver-3.lkmachinery.com.hk>
Message-ID: <2389d4730608101113v8ea3656ua6b0ca63350a960d@mail.gmail.com>

On 8/4/06, Keith Cheung (張國良) <keith.cheung at lkmachinery.com.hk> wrote:
> Hi all,
>
> I want to implement some handshake protocol, say..
>
> 1. Client:      WhatDate
> 2. Server:      5Aug
> 3. Client:      WhatYear
> 4. Server:      2006
> 5. Client:      WhatTime
> 6. Server:      1005
>
> So, for the client:-  (pseudo code)
>         def connectionMade():
>                 send "WhatDate"
>                 state = askingForDate
>         def lineReceived(data):
>                 switch state:
>                         askingForDate:
>                                 date = data
>                                 send "WhatYear"
>                                 state = askingForYear
>                                 break
>                         askingForYear:
>                                 year = data
>                                 send = "WhatTime"
>                                 state = askingForTime
>                                 break
>                         askingForTime:
>                                 time = data
>                                 state = initialState
>                                 disconnect
>
> The switch case becomes gigantic as the protocol grow.  Instead of keeping states, are there better ways to implement?
>

I know this expands the scope of what you have to learn, but look at
State Machine Compiler.
You can create a single object, and then generate all the state
management code from SMC.



-- 
If you don't know what you want, you probably need a nap.



From mona.yazbeck at hec.ca  Thu Aug 10 14:30:31 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Thu, 10 Aug 2006 16:30:31 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<c2959a420608090720i6890b0b7y2a44205064942117@mail.gmail.com>
Message-ID: <015a01c6bcbb$d38f54d0$82c2d384@HEC5521>

Thank you very much!

I got it working with srvany.exe.

Mona
  ----- Message d'origine ----- 
  De : Sebastian Schulze 
  À : Twisted general discussion 
  Envoyé : 9 août 2006 10:20
  Objet : Re: [Twisted-Python] How to run Twisted as a service in Windows?


  Don't know about a twisted way, but that's what firedaemon does:
  http://www.firedaemon.com/

  Actually you can do this without external software with the "nt resource kit" and SRVANY.exe

  regards, Sebastian


  2006/8/9, Mona Yazbeck <mona.yazbeck at hec.ca>:
    Hello, 

    I am on Windows, and I have Python 2.4

    I am starting twisted with twistd.py for my wiki, but it opens a command prompt so as soon as I log off the server it is no longer working and if I restart it is the same thing. How can I run it as a service so it will always be up?

    I don't know much about twisted I just installed it with the MSI and follow 2 or 3 instructions from MoinMoin website (the wiki).

    Thanks


    _______________________________________________
    Twisted-Python mailing list
    Twisted-Python at twistedmatrix.com 
    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python 







------------------------------------------------------------------------------


  _______________________________________________
  Twisted-Python mailing list
  Twisted-Python at twistedmatrix.com
  http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060810/97927f66/attachment.html>

From jarrod at vertigrated.com  Thu Aug 10 17:13:38 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 10 Aug 2006 19:13:38 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples tutorials?
Message-ID: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>

Are there any more concrete examples or tutorials of using Producers
and Consumers?



From grebekel at gmail.com  Fri Aug 11 06:44:21 2006
From: grebekel at gmail.com (Grebekel)
Date: Fri, 11 Aug 2006 08:44:21 -0400
Subject: [Twisted-Python] Multiple client handling...
Message-ID: <c6eea6460608110544h674e1507xa11b84394fdcf1b5@mail.gmail.com>

Greetings fellow writters of Twisted code. I've been looking for some
answers about Twisted but Twisted's docs seem to be of a twisted
nature. Perhaps I've been looking in the wrong places.

I'd like my server to serve multiple clients, and to achieve this I'd
need to know to which client deliver a specific message.
-How does a Twisted server handle multiple client connections?
-How can such a server deliver messages from a client to another (codewise)?
-Any samples or tutorials online?

Any help is much appreciated.
grebekel



From exarkun at divmod.com  Fri Aug 11 06:59:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 11 Aug 2006 08:59:35 -0400
Subject: [Twisted-Python] Multiple client handling...
In-Reply-To: <c6eea6460608110544h674e1507xa11b84394fdcf1b5@mail.gmail.com>
Message-ID: <20060811125935.1717.597932546.divmod.quotient.19660@ohm>

On Fri, 11 Aug 2006 08:44:21 -0400, Grebekel <grebekel at gmail.com> wrote:
>Greetings fellow writters of Twisted code. I've been looking for some
>answers about Twisted but Twisted's docs seem to be of a twisted
>nature. Perhaps I've been looking in the wrong places.
>
>I'd like my server to serve multiple clients, and to achieve this I'd
>need to know to which client deliver a specific message.
>-How does a Twisted server handle multiple client connections?

This question is pretty vague, so I'm not sure which particular answer
you're looking for.

Applications developed with Twisted employ cooperative multitasking by
frequently releasing execution control to an event loop inside Twisted.
Servers handle multiple clients by dispatching events from each client
from this loop to application code.

The simplest Twisted server (for example, <http://twistedmatrix.com/projects/core/documentation/examples/simpleserv.py>) is already capable of handling multiple clients.

>-How can such a server deliver messages from a client to another (codewise)?

However you like.  You may want to subclass ServerFactory and implement
client tracking logic which allows any one of your Protocol instances to
acquire a reference to another client's Protocol instance so that it can
inspect it or invoke methods on it.

>-Any samples or tutorials online?

Examples of passing messages between different clients connect to a single
server?  None really spring to mind, perhaps because such a thing wouldn't
demonstrate any Twisted APIs not demonstratable by a similar example which
only handled a single client.

If you're feeling brave, you might look at twisted.words.service, which is
not intended as an example to teach Twisted, but which passes quite a few
messages between different clients connected to one server.

Jean-Paul



From mona.yazbeck at hec.ca  Fri Aug 11 09:13:32 2006
From: mona.yazbeck at hec.ca (Mona Yazbeck)
Date: Fri, 11 Aug 2006 11:13:32 -0400
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<1155134970.26837.21.camel@localhost.localdomain>
Message-ID: <00b301c6bd58$b5a9be90$82c2d384@HEC5521>

Me again...

I read the code but I just don't know what to write in SvcDoRun where it is 
written "initialize your services here"... the service need to be started 
with this line: "twistd.py --python otherfile.py", can I write that directly 
somewhere in there? How?

Many thanks


----- Message d'origine ----- 
De : "Thomas Jacob" <jacob at internet24.de>
À : "Twisted general discussion" <twisted-python at twistedmatrix.com>
Envoyé : 9 août 2006 10:49
Objet : Re: [Twisted-Python] How to run Twisted as a service in Windows?


> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From jacob at internet24.de  Fri Aug 11 09:40:33 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Fri, 11 Aug 2006 17:40:33 +0200
Subject: [Twisted-Python] How to run Twisted as a service in Windows?
In-Reply-To: <00b301c6bd58$b5a9be90$82c2d384@HEC5521>
References: <002301c6bbbd$06040e60$82c2d384@HEC5521>
	<1155134970.26837.21.camel@localhost.localdomain>
	<00b301c6bd58$b5a9be90$82c2d384@HEC5521>
Message-ID: <1155310833.32241.20.camel@localhost.localdomain>

For instance, instead of the following in your .tac-File

class FingerProtocol(protocol.Protocol):
    pass
class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol

internet.TCPServer(1079, FingerFactory())



use this in the "initialize your services here"-Section


class FingerProtocol(protocol.Protocol):
    pass
class FingerFactory(protocol.ServerFactory):
    protocol = FingerProtocol
reactor.listenTCP(1079, FingerFactory())


see
http://twistedmatrix.com/projects/core/documentation/howto/tutorial/intro.html

On Fri, 2006-08-11 at 11:13 -0400, Mona Yazbeck wrote:
> Me again...
> 
> I read the code but I just don't know what to write in SvcDoRun where it is 
> written "initialize your services here"... the service need to be started 
> with this line: "twistd.py --python otherfile.py", can I write that directly 
> somewhere in there? How?
> 
> Many thanks

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060811/b990195c/attachment.sig>

From exarkun at divmod.com  Sat Aug 12 18:29:50 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sat, 12 Aug 2006 20:29:50 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>
Message-ID: <20060813002950.1717.1413317178.divmod.quotient.21147@ohm>

On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
>Are there any more concrete examples or tutorials of using Producers
>and Consumers?
>

What kind of information beyond what is available in the existing producer/consumer documentation are you looking for?

Jean-Paul



From exarkun at twistedmatrix.com  Sat Aug 12 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 13 Aug 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1155445502.03.1703026449@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-06 through 2006-08-13
Bugs opened: 7    Bugs closed: 3  Total open bugs: 695 (+4)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       +4  |Highest:  -1          |Conch:  -1             
|Enhancement:  +0  |High:     +2          |Core:   +2             
                   |Normal:   +3          |Mail:   +2             
                                          |Trial:  +0             
                                          |Web2:   +1             


New / Reopened Bugs
______________________
                    ===== Highest =====
[#1989] trial issues with Zope Interfaces in Python 2.5 be (opened by scmikes) (CLOSED, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1989

                    ===== High =====
[#1991] amp has problems with mixed case keyword args (opened by scmikes)
    defect          core       http://twistedmatrix.com/trac/ticket/1991

[#1992] IMAPServer.__cbFetch can raise uncaught AttributeError (opened by tvachon)
    defect          mail       http://twistedmatrix.com/trac/ticket/1992

                    ===== Normal =====
[#1988] Cannot use a DeferredList to retrieve several POP3 messages (opened by kendrew)
    defect          mail       http://twistedmatrix.com/trac/ticket/1988

[#1990] StdioOnnaStick ignores sys.stdout.encoding, won't print unicode properly (opened by termie)
    defect          core       http://twistedmatrix.com/trac/ticket/1990

[#1993] Unbounded recursion in twisted/web2/stream.py (opened by exarkun)
    defect          web2       http://twistedmatrix.com/trac/ticket/1993

[#1994] ReconnectingClientFactory should wrap the protocol maker with a connectionMade that calls resetDelay for you (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1994



Closed Bugs
______________________
                    ===== Highest =====
[#1989] trial issues with Zope Interfaces in Python 2.5 be (opened by scmikes, closed by spiv, duplicate)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1989

[#1973] No IPathImportMapper adapter for imp.NullImporter (opened by exarkun, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1973

                    ===== Normal =====
[#1375] hashed host entries in known_hosts for conch (SSH) (opened by count0, closed by count0, duplicate)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/1375





From eprparadocs at gmail.com  Sun Aug 13 05:28:51 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 07:28:51 -0400
Subject: [Twisted-Python] Using FQDN with transport.write calls...
Message-ID: <44DF0CF3.9080705@gmail.com>

My application requires that I use FQDN in place of the normal IP 
addresses in transport.write calls. In looking over I see quite a few 
places called 'resolveAddress', which look like they do exactly what I 
need. I was wondering if anyone has a code snippet that would show me 
exactly what I need to do?

TIA,
Chaz



From exarkun at divmod.com  Sun Aug 13 08:17:31 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 10:17:31 -0400
Subject: [Twisted-Python] Using FQDN with transport.write calls...
In-Reply-To: <44DF0CF3.9080705@gmail.com>
Message-ID: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>

On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>My application requires that I use FQDN in place of the normal IP addresses 
>in transport.write calls.

No it doesn't.  What behavior would you expect this to provide which you
desire in your application?

Jean-Paul



From eprparadocs at gmail.com  Sun Aug 13 11:23:42 2006
From: eprparadocs at gmail.com (Chaz)
Date: Sun, 13 Aug 2006 13:23:42 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
Message-ID: <44DF601E.2000803@gmail.com>

I actually see reactor has a resolve() method that looks like it is 
used. But in looking at the Posix implementation it appears to be 
"blocking" (unless threading is around in which case it uses a thread).

So I am now wondering the following:

1) Is the default resolve() method, blocking?
2) How do I get it to use the thread version?

Chaz

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> My application requires that I use FQDN in place of the normal IP 
>> addresses in transport.write calls.
> 
> No it doesn't.  What behavior would you expect this to provide which you
> desire in your application?
> 
> Jean-Paul




From eprparadocs at gmail.com  Sun Aug 13 11:23:42 2006
From: eprparadocs at gmail.com (Chaz)
Date: Sun, 13 Aug 2006 13:23:42 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813141731.1717.23538505.divmod.quotient.21684@ohm>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
Message-ID: <44DF601E.2000803@gmail.com>

I actually see reactor has a resolve() method that looks like it is 
used. But in looking at the Posix implementation it appears to be 
"blocking" (unless threading is around in which case it uses a thread).

So I am now wondering the following:

1) Is the default resolve() method, blocking?
2) How do I get it to use the thread version?

Chaz

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> My application requires that I use FQDN in place of the normal IP 
>> addresses in transport.write calls.
> 
> No it doesn't.  What behavior would you expect this to provide which you
> desire in your application?
> 
> Jean-Paul




From exarkun at divmod.com  Sun Aug 13 12:44:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 14:44:17 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF601E.2000803@gmail.com>
Message-ID: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>

On Sun, 13 Aug 2006 13:23:42 -0400, Chaz <eprparadocs at gmail.com> wrote:
>Jean-Paul Calderone wrote:
>>On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>>>My application requires that I use FQDN in place of the normal IP 
>>>addresses in transport.write calls.
>>
>>No it doesn't.  What behavior would you expect this to provide which you
>>desire in your application?
>>
>>Jean-Paul
>
>I actually see reactor has a resolve() method that looks like it is used. 
>But in looking at the Posix implementation it appears to be "blocking" 
>(unless threading is around in which case it uses a thread).
>
>So I am now wondering the following:
>
>1) Is the default resolve() method, blocking?
>2) How do I get it to use the thread version?
>
>Chaz
>

You didn't answer my question.  Also, please don't top-post.

Jean-Paul



From itamar at itamarst.org  Sun Aug 13 14:30:53 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Sun, 13 Aug 2006 16:30:53 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF601E.2000803@gmail.com>
References: <44DF0CF3.9080705@gmail.com>
	<20060813141731.1717.23538505.divmod.quotient.21684@ohm>
	<44DF601E.2000803@gmail.com>
Message-ID: <1155501053.8359.3.camel@localhost.localdomain>

On Sun, 2006-08-13 at 13:23 -0400, Chaz wrote:
> I actually see reactor has a resolve() method that looks like it is 
> used. But in looking at the Posix implementation it appears to be 
> "blocking" (unless threading is around in which case it uses a thread).
> 
> So I am now wondering the following:
> 
> 1) Is the default resolve() method, blocking?
> 2) How do I get it to use the thread version?

It uses the threaded version by default on virtually all platforms.





From eprparadocs at gmail.com  Sun Aug 13 14:38:04 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 16:38:04 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
Message-ID: <44DF8DAC.9010001@gmail.com>

Jean-Paul Calderone wrote:
> On Sun, 13 Aug 2006 13:23:42 -0400, Chaz <eprparadocs at gmail.com> wrote:
>> Jean-Paul Calderone wrote:
>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>> wrote:
>>>> My application requires that I use FQDN in place of the normal IP 
>>>> addresses in transport.write calls.
>>>
>>> No it doesn't.  What behavior would you expect this to provide which you
>>> desire in your application?
>>>
>>> Jean-Paul
>>
>> I actually see reactor has a resolve() method that looks like it is 
>> used. But in looking at the Posix implementation it appears to be 
>> "blocking" (unless threading is around in which case it uses a thread).
>>
>> So I am now wondering the following:
>>
>> 1) Is the default resolve() method, blocking?
>> 2) How do I get it to use the thread version?
>>
>> Chaz
>>
> 
> You didn't answer my question.  Also, please don't top-post.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Sorry for the top-post. What I want to do is the following


	self.transport.write(data,('www.foobar.com',6000))

I think that says it succinctly.

As I see it I need to do some things with defer and reactor.resolve() or 
use socket.getaddrinfo() or socket.gethostbyname() and deal with the 
possible blocking nature of these calls.

As I said in my follow-on post I see the implementation of resolve() in 
the posix reactor support and wonder about the two methods I see there: 
the blocking one and the thread one. How do I get to decide which is used.

Finally is there some, unknown to me, way to already deal with this issue?

Peace,
Chaz.



From screwtape at froup.com  Sun Aug 13 15:23:09 2006
From: screwtape at froup.com (Tim Allen)
Date: Mon, 14 Aug 2006 07:23:09 +1000
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF8DAC.9010001@gmail.com>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
	<44DF8DAC.9010001@gmail.com>
Message-ID: <41D80D84-F475-400E-9125-26081732B093@froup.com>

On 14 Aug 2006, at 06:38, Chaz. wrote:
>>> Jean-Paul Calderone wrote:
>>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz."  
>>>> <eprparadocs at gmail.com> wrote:
>>>>> My application requires that I use FQDN in place of the normal  
>>>>> IP addresses in transport.write calls.
>>>>
>>>> No it doesn't.  What behavior would you expect this to provide  
>>>> which you
>>>> desire in your application?
>
> Sorry for the top-post. What I want to do is the following
>
> 	self.transport.write(data,('www.foobar.com',6000))
>
> I think that says it succinctly.

I think that Jean-Paul was trying to say something like this:  
"self.transport is a file-like object, so its write() method takes  
only data. It wouldn't make sense to supply an IP address and port to  
sys.stdout.write(), why do you expect that self.transport.write()  
would accept one?"



From eprparadocs at gmail.com  Sun Aug 13 15:38:17 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sun, 13 Aug 2006 17:38:17 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <41D80D84-F475-400E-9125-26081732B093@froup.com>
References: <20060813184417.1717.1917026912.divmod.quotient.21885@ohm>
	<44DF8DAC.9010001@gmail.com>
	<41D80D84-F475-400E-9125-26081732B093@froup.com>
Message-ID: <44DF9BC9.7070906@gmail.com>

Tim Allen wrote:
> On 14 Aug 2006, at 06:38, Chaz. wrote:
>>>> Jean-Paul Calderone wrote:
>>>>> On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>>>> wrote:
>>>>>> My application requires that I use FQDN in place of the normal IP 
>>>>>> addresses in transport.write calls.
>>>>>
>>>>> No it doesn't.  What behavior would you expect this to provide 
>>>>> which you
>>>>> desire in your application?
>>
>> Sorry for the top-post. What I want to do is the following
>>
>>     self.transport.write(data,('www.foobar.com',6000))
>>
>> I think that says it succinctly.
> 
> I think that Jean-Paul was trying to say something like this: 
> "self.transport is a file-like object, so its write() method takes only 
> data. It wouldn't make sense to supply an IP address and port to 
> sys.stdout.write(), why do you expect that self.transport.write() would 
> accept one?"
> 

Because it does for datagrams, and that is how I am using it. What I am 
asking, is instead of supplying an (IP address, port) I would like to 
use (fqdn,port). There are sometimes I want to use the DNS system to 
resolve the address.

Chaz



From exarkun at divmod.com  Sun Aug 13 16:22:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Sun, 13 Aug 2006 18:22:27 -0400
Subject: [Twisted-Python] Re: Using FQDN with transport.write calls...
In-Reply-To: <44DF9BC9.7070906@gmail.com>
Message-ID: <20060813222227.1717.767224239.divmod.quotient.22048@ohm>

On Sun, 13 Aug 2006 17:38:17 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Tim Allen wrote:
>>On 14 Aug 2006, at 06:38, Chaz. wrote:
>>>>>Jean-Paul Calderone wrote:
>>>>>>On Sun, 13 Aug 2006 07:28:51 -0400, "Chaz." <eprparadocs at gmail.com> 
>>>>>>wrote:
>>>>>>>My application requires that I use FQDN in place of the normal IP 
>>>>>>>addresses in transport.write calls.
>>>>>>
>>>>>>No it doesn't.  What behavior would you expect this to provide which 
>>>>>>you
>>>>>>desire in your application?
>>>
>>>Sorry for the top-post. What I want to do is the following
>>>
>>>     self.transport.write(data,('www.foobar.com',6000))
>>>
>>>I think that says it succinctly.
>>
>>I think that Jean-Paul was trying to say something like this: 
>>"self.transport is a file-like object, so its write() method takes only 
>>data. It wouldn't make sense to supply an IP address and port to 
>>sys.stdout.write(), why do you expect that self.transport.write() would 
>>accept one?"
>
>Because it does for datagrams, and that is how I am using it. What I am 
>asking, is instead of supplying an (IP address, port) I would like to use 
>(fqdn,port). There are sometimes I want to use the DNS system to resolve the 
>address.

So, you want to resolve a name to an address?  Sorry, it was very unclear
from your initial question that that was your goal.  This is easily done,
and you have already correctly identifier the API to use, reactor.resolve().

Jean-Paul



From igor at mekensleep.com  Mon Aug 14 07:15:55 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 15:15:55 +0200
Subject: [Twisted-Python] spawnProcess under Win32
Message-ID: <44E0778B.9090403@mekensleep.com>

Hi!

I had recently to use the Process protocol of Twisted (win32eventreactor)
to launch some applications and grab their output.

It works well, the only problem I have is Twisted always opens a DOS 
console.
Since I receive the output and treat them myself, the DOS console stays 
empty.
But in fact, I would never want this console to appear on screen.

I've looked at the way Twisted creates a process under Win32 and I've 
noticed
that it uses the CreateProcess() function.  The problem is it doesn't 
mention any
creation flags (i.e.: it just passes 0) whereas here, we would need to pass
DETACHED_PROCESS to avoid a new console to be created.

What I've done is merely to add an optional win32flags argument to the 
spawnProcess()
method in win32eventreactor.py as follow:

http://cvs.gna.org/cvsweb/envwin32/python/Lib/site-packages/twisted/internet/win32eventreactor.py?rev=1.2;cvsroot=underware

I would be interested to know what do you think about this?
Does it seem to you a good idea?

Sincerely,

Igor.




From glyph at divmod.com  Mon Aug 14 08:14:51 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 14 Aug 2006 10:14:51 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0778B.9090403@mekensleep.com>
Message-ID: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>



On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>Hi!

>I've looked at the way Twisted creates a process under Win32 and I've 
>noticed
>that it uses the CreateProcess() function.  The problem is it doesn't 
>mention any
>creation flags (i.e.: it just passes 0) whereas here, we would need to pass
>DETACHED_PROCESS to avoid a new console to be created.

>I would be interested to know what do you think about this?
>Does it seem to you a good idea?

Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so I don't see why we couldn't have a Win32-specific argument as well.  However, "win32flags" seems like a pretty vague name, especially since it could be CreateProcess's dwCreationFlags argument or STARTUPINFO's dwFlags attribute.

Also, depending on context, you might want CREATE_NO_WINDOW or DETACHED_PROCESS or possibly both.

I believe the right thing to do is to come up with some typical features of the Windows process environment and support them explicitly.  I don't believe all the flags you can pass to CreateProcess are compatible with the way Twisted expects subprocesses to behave, and I am definitely sure that not all the things you can put in STARTUPINFO are.



From igor at mekensleep.com  Mon Aug 14 09:02:07 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 17:02:07 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
References: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
Message-ID: <44E0906F.4050602@mekensleep.com>

Hi,

yes I see your point of view.
I deliberately passed that Win32 flags since I didn't wanted to get in 
details
of what kind of Win32 features we need or not.
It can indeed potentially breaks Twisted behavior if incorrect flags are 
passed.

However it's just easier even if less secure.  Otherwise, you have to 
enumerate
all kind of features users want and implement them explicitly while 
having the
correct code guard to prevent from crash or incorrect behavior.

I don't know about other Win32 developpers.  From my side, I just wanted
a way to prevent a console to be opened, so might be something like an
explicit CREATE_NO_CONSOLE flag or such.

Igor.



glyph at divmod.com wrote:

>
>
> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
> <igor at mekensleep.com> wrote:
>
>> Hi!
>
>
>> I've looked at the way Twisted creates a process under Win32 and I've 
>> noticed
>> that it uses the CreateProcess() function.  The problem is it doesn't 
>> mention any
>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>> to pass
>> DETACHED_PROCESS to avoid a new console to be created.
>
>
>> I would be interested to know what do you think about this?
>> Does it seem to you a good idea?
>
>
> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so 
> I don't see why we couldn't have a Win32-specific argument as well.  
> However, "win32flags" seems like a pretty vague name, especially since 
> it could be CreateProcess's dwCreationFlags argument or STARTUPINFO's 
> dwFlags attribute.
>
> Also, depending on context, you might want CREATE_NO_WINDOW or 
> DETACHED_PROCESS or possibly both.
>
> I believe the right thing to do is to come up with some typical 
> features of the Windows process environment and support them 
> explicitly.  I don't believe all the flags you can pass to 
> CreateProcess are compatible with the way Twisted expects subprocesses 
> to behave, and I am definitely sure that not all the things you can 
> put in STARTUPINFO are.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>




From exarkun at divmod.com  Mon Aug 14 09:31:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 14 Aug 2006 11:31:49 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0906F.4050602@mekensleep.com>
Message-ID: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>

On Mon, 14 Aug 2006 17:02:07 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>glyph at divmod.com wrote:
>>
>>
>>On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko <igor at mekensleep.com> 
>>wrote:
>>>Hi!
>>
>>>I've looked at the way Twisted creates a process under Win32 and I've 
>>>noticed
>>>that it uses the CreateProcess() function.  The problem is it doesn't 
>>>mention any
>>>creation flags (i.e.: it just passes 0) whereas here, we would need to 
>>>pass
>>>DETACHED_PROCESS to avoid a new console to be created.
>>
>>>I would be interested to know what do you think about this?
>>>Does it seem to you a good idea?
>>
>>
>>Well, we do have a UNIX-specific argument to spawnProcess (usePTY), so I 
>>don't see why we couldn't have a Win32-specific argument as well.  However, 
>>"win32flags" seems like a pretty vague name, especially since it could be 
>>CreateProcess's dwCreationFlags argument or STARTUPINFO's dwFlags 
>>attribute.
>>
>>Also, depending on context, you might want CREATE_NO_WINDOW or 
>>DETACHED_PROCESS or possibly both.
>>
>>I believe the right thing to do is to come up with some typical features of 
>>the Windows process environment and support them explicitly.  I don't 
>>believe all the flags you can pass to CreateProcess are compatible with the 
>>way Twisted expects subprocesses to behave, and I am definitely sure that 
>>not all the things you can put in STARTUPINFO are.
>>
>Hi,
>
>yes I see your point of view.
>I deliberately passed that Win32 flags since I didn't wanted to get in 
>details
>of what kind of Win32 features we need or not.
>It can indeed potentially breaks Twisted behavior if incorrect flags are 
>passed.
>
>However it's just easier even if less secure.  Otherwise, you have to 
>enumerate
>all kind of features users want and implement them explicitly while having 
>the
>correct code guard to prevent from crash or incorrect behavior.
>
>I don't know about other Win32 developpers.  From my side, I just wanted
>a way to prevent a console to be opened, so might be something like an
>explicit CREATE_NO_CONSOLE flag or such.

It's easier on the Twisted side.  It's harder on application developers,
since they have to know if they want to pass CREATE_NO_CONSOLE or
CREATE_NO_WINDOW or DETACHED_PROCESS or some combination or some other flag
entirely.

It also makes it completely non-portable to other platforms.  It's difficult
to do anything with subprocesses cross-platform, but the goal should be to
make it possible and then easy.  Requiring Win32 flags to be passed in is
complete capitulation.

I also wonder why I have never noticed this behavior.  For example, I have
run buildslaves on Win32 and never noticed them popping up console windows.
Does this behavior differ between different version of Windows?

Also, please don't top-post.  

Jean-Paul



From mli at deform.com  Mon Aug 14 09:34:48 2006
From: mli at deform.com (Michael Li)
Date: Mon, 14 Aug 2006 11:34:48 -0400
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <44E0906F.4050602@mekensleep.com>
References: <20060814141451.1717.1181676589.divmod.quotient.22674@ohm>
	<44E0906F.4050602@mekensleep.com>
Message-ID: <44E09818.60407@deform.com>

I've recently fixed a problem in MPI 1.2.1 launching program RemoteShell.
It uses CreateProcessAsUser to spawn a process. The RemoteShell runs
as a service(daemon) and spawn a new process perfectly (without DOS
window). The followings are C-code, it might give you some hint.
 
        if (CreateProcess(
            NULL,
            tCmdLine,
            NULL, NULL, TRUE,
            //DETACHED_PROCESS | IDLE_PRIORITY_CLASS,
            //CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS,
            CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS | 
CREATE_NEW_PROCESS_GROUP,
            //DETACHED_PROCESS | IDLE_PRIORITY_CLASS | 
CREATE_NEW_PROCESS_GROUP,
            //CREATE_NO_WINDOW | IDLE_PRIORITY_CLASS | CREATE_SUSPENDED,
            pEnv,
            NULL,
            &saInfo, &psInfo))

Igor Kravtchenko wrote:
> Hi,
>
> yes I see your point of view.
> I deliberately passed that Win32 flags since I didn't wanted to get in 
> details
> of what kind of Win32 features we need or not.
> It can indeed potentially breaks Twisted behavior if incorrect flags 
> are passed.
>
> However it's just easier even if less secure.  Otherwise, you have to 
> enumerate
> all kind of features users want and implement them explicitly while 
> having the
> correct code guard to prevent from crash or incorrect behavior.
>
> I don't know about other Win32 developpers.  From my side, I just wanted
> a way to prevent a console to be opened, so might be something like an
> explicit CREATE_NO_CONSOLE flag or such.
>
> Igor.
>
>
>
> glyph at divmod.com wrote:
>
>>
>>
>> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
>> <igor at mekensleep.com> wrote:
>>
>>> Hi!
>>
>>
>>> I've looked at the way Twisted creates a process under Win32 and 
>>> I've noticed
>>> that it uses the CreateProcess() function.  The problem is it 
>>> doesn't mention any
>>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>>> to pass
>>> DETACHED_PROCESS to avoid a new console to be created.
>>
>>
>>> I would be interested to know what do you think about this?
>>> Does it seem to you a good idea?
>>
>>
>> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), 
>> so I don't see why we couldn't have a Win32-specific argument as 
>> well.  However, "win32flags" seems like a pretty vague name, 
>> especially since it could be CreateProcess's dwCreationFlags argument 
>> or STARTUPINFO's dwFlags attribute.
>>
>> Also, depending on context, you might want CREATE_NO_WINDOW or 
>> DETACHED_PROCESS or possibly both.
>>
>> I believe the right thing to do is to come up with some typical 
>> features of the Windows process environment and support them 
>> explicitly.  I don't believe all the flags you can pass to 
>> CreateProcess are compatible with the way Twisted expects 
>> subprocesses to behave, and I am definitely sure that not all the 
>> things you can put in STARTUPINFO are.
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

==========
This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipients, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.




From igor at mekensleep.com  Mon Aug 14 09:51:42 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Mon, 14 Aug 2006 17:51:42 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
References: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
Message-ID: <44E09C0E.5070504@mekensleep.com>

Jean-Paul Calderone wrote:

> On Mon, 14 Aug 2006 17:02:07 +0200, Igor Kravtchenko 
> <igor at mekensleep.com> wrote:
>
>> glyph at divmod.com wrote:
>>
>>>
>>>
>>> On Mon, 14 Aug 2006 15:15:55 +0200, Igor Kravtchenko 
>>> <igor at mekensleep.com> wrote:
>>>
>>>> Hi!
>>>
>>>
>>>> I've looked at the way Twisted creates a process under Win32 and 
>>>> I've noticed
>>>> that it uses the CreateProcess() function.  The problem is it 
>>>> doesn't mention any
>>>> creation flags (i.e.: it just passes 0) whereas here, we would need 
>>>> to pass
>>>> DETACHED_PROCESS to avoid a new console to be created.
>>>
>>>
>>>> I would be interested to know what do you think about this?
>>>> Does it seem to you a good idea?
>>>
>>>
>>>
>>> Well, we do have a UNIX-specific argument to spawnProcess (usePTY), 
>>> so I don't see why we couldn't have a Win32-specific argument as 
>>> well.  However, "win32flags" seems like a pretty vague name, 
>>> especially since it could be CreateProcess's dwCreationFlags 
>>> argument or STARTUPINFO's dwFlags attribute.
>>>
>>> Also, depending on context, you might want CREATE_NO_WINDOW or 
>>> DETACHED_PROCESS or possibly both.
>>>
>>> I believe the right thing to do is to come up with some typical 
>>> features of the Windows process environment and support them 
>>> explicitly.  I don't believe all the flags you can pass to 
>>> CreateProcess are compatible with the way Twisted expects 
>>> subprocesses to behave, and I am definitely sure that not all the 
>>> things you can put in STARTUPINFO are.
>>>
>> Hi,
>>
>> yes I see your point of view.
>> I deliberately passed that Win32 flags since I didn't wanted to get 
>> in details
>> of what kind of Win32 features we need or not.
>> It can indeed potentially breaks Twisted behavior if incorrect flags 
>> are passed.
>>
>> However it's just easier even if less secure.  Otherwise, you have to 
>> enumerate
>> all kind of features users want and implement them explicitly while 
>> having the
>> correct code guard to prevent from crash or incorrect behavior.
>>
>> I don't know about other Win32 developpers.  From my side, I just wanted
>> a way to prevent a console to be opened, so might be something like an
>> explicit CREATE_NO_CONSOLE flag or such.
>
>
> It's easier on the Twisted side.  It's harder on application developers,
> since they have to know if they want to pass CREATE_NO_CONSOLE or
> CREATE_NO_WINDOW or DETACHED_PROCESS or some combination or some other 
> flag
> entirely.
>
> It also makes it completely non-portable to other platforms.  It's 
> difficult
> to do anything with subprocesses cross-platform, but the goal should 
> be to
> make it possible and then easy.  Requiring Win32 flags to be passed in is
> complete capitulation.
>
> I also wonder why I have never noticed this behavior.  For example, I 
> have
> run buildslaves on Win32 and never noticed them popping up console 
> windows.
> Does this behavior differ between different version of Windows?
>

I don't thing.
What I have is a Windows SubSystem .exe (WinMain() entry point) 
launching a bunch
of Consoles Subsystem .exe (main() entry point).
Since the applications are console based, it's not surprising to see them.

DETACHED_PROCESS does the trick and console applications have to
call AllocConsole() explicitly to open a console.

Igor.




From jacob at internet24.de  Mon Aug 14 09:56:43 2006
From: jacob at internet24.de (Thomas Jacob)
Date: Mon, 14 Aug 2006 17:56:43 +0200
Subject: [Twisted-Python] spawnProcess under Win32
In-Reply-To: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
References: <20060814153149.1717.700339522.divmod.quotient.22733@ohm>
Message-ID: <1155571003.6333.41.camel@localhost.localdomain>

> It also makes it completely non-portable to other platforms.  It's difficult
> to do anything with subprocesses cross-platform, but the goal should be to
> make it possible and then easy.  Requiring Win32 flags to be passed in is
> complete capitulation.

Actually it's not that difficult, if you have programs
that simply read stdin and write to stdout.

I'm running a some backup tool (dar) with commands/events and responses
communicated via stdin/stderr both on Unix and Windows with exactly the
same twisted code and its working nicely.

> I also wonder why I have never noticed this behavior.  For example, I
have
> run buildslaves on Win32 and never noticed them popping up console windows.
> Does this behavior differ between different version of Windows?

I also don't seem to have any problems with unwanted console processes
but that maybe because the current spawnProcess implementation
seems to copy the process creation flags from the main process, and
I'm only running that program from the console (where there is
no need to create another one) or as a Windows service
(which doesn't have a console).

Maybe the original poster is running processes that open
a new console themselves explicitly?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 191 bytes
Desc: This is a digitally signed message part
URL: </pipermail/twisted-python/attachments/20060814/252b71ef/attachment.sig>

From jarrod at vertigrated.com  Mon Aug 14 11:14:31 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 14 Aug 2006 13:14:31 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <20060813002950.1717.1413317178.divmod.quotient.21147@ohm>
References: <2389d4730608101613y3d56e679xaefd1c919d55b75e@mail.gmail.com>
	<20060813002950.1717.1413317178.divmod.quotient.21147@ohm>
Message-ID: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>

On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
> >Are there any more concrete examples or tutorials of using Producers
> >and Consumers?
> >
>
> What kind of information beyond what is available in the existing producer/consumer documentation are you looking for?
>
> Jean-Paul
>

pretty much anything, the only concrete example is the FileSender and
it leaves a lot to "magic" happening, and it is only a producer.

the documentation is sort of written by someone who knows what to do
for someone who knows what to do.

-- 
If you don't know what you want, you probably need a nap.



From exarkun at divmod.com  Mon Aug 14 11:31:20 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 14 Aug 2006 13:31:20 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>
Message-ID: <20060814173120.1717.315578462.divmod.quotient.22830@ohm>

On Mon, 14 Aug 2006 13:14:31 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
>On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
>>On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson 
>><jarrod at vertigrated.com> wrote:
>> >Are there any more concrete examples or tutorials of using Producers
>> >and Consumers?
>> >
>>
>>What kind of information beyond what is available in the existing 
>>producer/consumer documentation are you looking for?
>>
>>Jean-Paul
>
>pretty much anything, the only concrete example is the FileSender and
>it leaves a lot to "magic" happening, and it is only a producer.
>
>the documentation is sort of written by someone who knows what to do
>for someone who knows what to do.

Just name a specific example you'd like to see and I'll try to write
something up.  I don't want to pick something, write it up, and then
discover that it doesn't cover what you wanted to learn. :)

Jean-Paul



From jarrod at vertigrated.com  Mon Aug 14 20:10:38 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Mon, 14 Aug 2006 22:10:38 -0400
Subject: [Twisted-Python] Producers / Consumers and more examples
	tutorials?
In-Reply-To: <20060814173120.1717.315578462.divmod.quotient.22830@ohm>
References: <2389d4730608141014pcea8797v60d4044217d9db11@mail.gmail.com>
	<20060814173120.1717.315578462.divmod.quotient.22830@ohm>
Message-ID: <2389d4730608141910g23c7750eq9c14f34535f3d3b5@mail.gmail.com>

On 8/14/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> On Mon, 14 Aug 2006 13:14:31 -0400, jarrod roberson <jarrod at vertigrated.com> wrote:
> >On 8/12/06, Jean-Paul Calderone <exarkun at divmod.com> wrote:
> >>On Thu, 10 Aug 2006 19:13:38 -0400, jarrod roberson
> >><jarrod at vertigrated.com> wrote:
> >> >Are there any more concrete examples or tutorials of using Producers
> >> >and Consumers?
> >> >
> >>
> >>What kind of information beyond what is available in the existing
> >>producer/consumer documentation are you looking for?
> >>
> >>Jean-Paul
> >
> >pretty much anything, the only concrete example is the FileSender and
> >it leaves a lot to "magic" happening, and it is only a producer.
> >
> >the documentation is sort of written by someone who knows what to do
> >for someone who knows what to do.
>
> Just name a specific example you'd like to see and I'll try to write
> something up.  I don't want to pick something, write it up, and then
> discover that it doesn't cover what you wanted to learn. :)
>
> Jean-Paul
>

Ok, I will write up something and post it back to the list.

-- 
If you don't know what you want, you probably need a nap.



From jon at csh.rit.edu  Mon Aug 14 20:19:27 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:19:27 -0700
Subject: [Twisted-Python] IResource and http.Site()
Message-ID: <44E12F2F.2080108@csh.rit.edu>

I'm relatively new to Twisted, so apologies if I'm missing something
obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web with 
my own resource implementation.

It looks like my options are to either derive from http.Resource or 
implement the http.IResource interface directly.  I've decided to start 
with the latter.

The IResource interface declares three methods:

	getChildWithDefault(self, name, request)
	putChild(self, path, child)
	render(self, request)

However, parts of http.Site() (such as getResourceFor()) expect my 
object to offer additional methods (such as getChildForRequest()) which 
are not part of the interface.

My question is therefore: Is http.Site() only compatible with Resource 
(and not IResource), or should the IResource interface include some 
additional methods, such as getChildForRequest()?

Thanks!

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From jon at csh.rit.edu  Mon Aug 14 20:28:25 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:28:25 -0700
Subject: [Twisted-Python] IResource and http.Site()
In-Reply-To: <44E12F2F.2080108@csh.rit.edu>
References: <44E12F2F.2080108@csh.rit.edu>
Message-ID: <44E13149.1060209@csh.rit.edu>

Jon Parise wrote:
> I'm relatively new to Twisted, so apologies if I'm missing something
> obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web with 
> my own resource implementation.
> 
> It looks like my options are to either derive from http.Resource or 
> implement the http.IResource interface directly.  I've decided to start 
> with the latter.
> 
> The IResource interface declares three methods:
> 
>     getChildWithDefault(self, name, request)
>     putChild(self, path, child)
>     render(self, request)
> 
> However, parts of http.Site() (such as getResourceFor()) expect my 
> object to offer additional methods (such as getChildForRequest()) which 
> are not part of the interface.
> 
> My question is therefore: Is http.Site() only compatible with Resource 
> (and not IResource), or should the IResource interface include some 
> additional methods, such as getChildForRequest()?

Or perhaps Door Number 3:

Should http.Site() be updated to use the module-level 
http.getChildForRequest() instead of Resource.getChildForRequest(), as 
suggested by this code in Resource.getChildForRequest():

      def getChildForRequest(self, request):
          import warnings
          warnings.warn("Please use module level getChildForRequest.", 
DeprecationWarning, 2)
          return getChildForRequest(self, request)

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From jon at csh.rit.edu  Mon Aug 14 20:48:24 2006
From: jon at csh.rit.edu (Jon Parise)
Date: Mon, 14 Aug 2006 19:48:24 -0700
Subject: [Twisted-Python] IResource and http.Site()
In-Reply-To: <44E13149.1060209@csh.rit.edu>
References: <44E12F2F.2080108@csh.rit.edu> <44E13149.1060209@csh.rit.edu>
Message-ID: <44E135F8.2070604@csh.rit.edu>

Jon Parise wrote:
> Jon Parise wrote:
>> I'm relatively new to Twisted, so apologies if I'm missing something
>> obvious.  I'm using Twisted 2.4, and I'm trying to use twisted.web 
>> with my own resource implementation.
>>
>> It looks like my options are to either derive from http.Resource or 
>> implement the http.IResource interface directly.  I've decided to 
>> start with the latter.
>>
>> The IResource interface declares three methods:
>>
>>     getChildWithDefault(self, name, request)
>>     putChild(self, path, child)
>>     render(self, request)
>>
>> However, parts of http.Site() (such as getResourceFor()) expect my 
>> object to offer additional methods (such as getChildForRequest()) 
>> which are not part of the interface.
>>
>> My question is therefore: Is http.Site() only compatible with Resource 
>> (and not IResource), or should the IResource interface include some 
>> additional methods, such as getChildForRequest()?
> 
> Or perhaps Door Number 3:
> 
> Should http.Site() be updated to use the module-level 
> http.getChildForRequest() instead of Resource.getChildForRequest(), as 
> suggested by this code in Resource.getChildForRequest():
> 
>      def getChildForRequest(self, request):
>          import warnings
>          warnings.warn("Please use module level getChildForRequest.", 
> DeprecationWarning, 2)
>          return getChildForRequest(self, request)
> 

... which is what it's actually doing.  I'm so sorry - I misread 
resource.getChildForRequest() for Resource.getChildForRequest().  My 
code is causing a different but related error, and I went down the wrong 
path.

Apologies for jumping the gun on this one!  It must be the heat. =)

-- 
Jon Parise (jon of csh.rit.edu)  ::  http://www.csh.rit.edu/~jon/



From w.richert at gmx.net  Tue Aug 15 02:52:53 2006
From: w.richert at gmx.net (Willi Richert)
Date: Tue, 15 Aug 2006 10:52:53 +0200
Subject: [Twisted-Python] Is Twisted adequate for usage in reactive robots?
Message-ID: <200608151052.53360.w.richert@gmx.net>

Hi Twisted developers,

for our soccer robot we are evaluating moving away from Java for the high 
level behavior code in parts to Python. At the moment we have a bunch of Java 
threads that listen at the various comm. channels for incoming and outgoing 
messages and pass them to the main Java processing thread.

We plan to reimplement all the basic behavior stuff (move to, avoid, ...) that 
returns abstract movement commands in Python. For that the Python process has 
to communicate with a bunch of processes (particle filter, etc.) using our 
own robotics optimized message format (the same format is used to communicate 
using TCP/IP, CAN, serial). After I've read a bunch of success stories I 
thought that maybe Twisted could be used to abstract all the gory low-level 
network details. Would that be advisable for a highly reactive robot? The 
main loop of the Python process would have to run at 50Hz. Longer taking 
calculation process are processed in a separate thread. Is there any 
comparison regarding asynchronous and thread execution/latency/... speeds?

Regards,
wr



From Marcin.Kasperski at softax.com.pl  Tue Aug 15 04:36:16 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Tue, 15 Aug 2006 12:36:16 +0200
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
Message-ID: <44E1A3A0.6070205@softax.com.pl>

Not an exact question, but rather 'searching for ideas'.

I have some twisted app, which uses more memory than I would like it to.
I tried analysing it a bit (mainly using gc module object list and 
enumerating
items of different types) and it seem to me that there is something 
'twistedish'
in it. My application uses in a lot of places generator idiom 
(functions/methods
which yield wrapped with defer.deferredGenerator). And, as there seem to be
a lot of anonymous functions and tuples allocated, I suspect that maybe 
those
functions, deferreds and related params and closures live longer then I 
would like
to.

Any ideas of what could I do to track it down? In particular, is it 
possible to somehow
use introspection to find which lambdas and deferreds are allocated 
while the program
is running? Are there any suggestions on how to code deferredGenerators 
to reduce
allocated memory (maybe, for instance, I should try to turn local 
variables into
object attributes, or opposite, or ...)

Also, if anybody could me point to any interesting resources about 
tracking python
momory usage, I would be grateful.

Tried googling for some time, but apart of zope trackRef I did not found 
anything.




From nico at tekNico.net  Tue Aug 15 05:30:55 2006
From: nico at tekNico.net (Nicola Larosa)
Date: Tue, 15 Aug 2006 13:30:55 +0200
Subject: [Twisted-Python] Re: Reducing memory footprint of twisted app?
In-Reply-To: <44E1A3A0.6070205@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
Message-ID: <44E1B06F.8060203@tekNico.net>

Marcin Kasperski wrote:
> Not an exact question, but rather 'searching for ideas'.
> 
> I have some twisted app, which uses more memory than I would like it to.
> ...
> Any ideas of what could I do to track it down?
> ...
> Also, if anybody could me point to any interesting resources about
> tracking python momory usage, I would be grateful.

Here are a couple of possibly interesting tools (I don't know whether they
work with Twisted):

PySizer - a memory profiler for Python
http://pysizer.8325.org/

Heapy
http://guppy-pe.sourceforge.net/#Heapy


-- 
Nicola Larosa - http://www.tekNico.net/

In the '70s I was a huge fan of various bands; now I'm a huge fan
of software. I've gone from gazing at record covers to gazing at
online help files, which is a little sick, now that I think about it.
 -- Wayne Lytle, March 2006




From andrew-twisted at puzzling.org  Tue Aug 15 06:54:25 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 15 Aug 2006 22:54:25 +1000
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <44E1A3A0.6070205@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
Message-ID: <20060815125425.GA7487@steerpike.home.puzzling.org>

On Tue, Aug 15, 2006 at 12:36:16PM +0200, Marcin Kasperski wrote:
> Not an exact question, but rather 'searching for ideas'.
> 
> I have some twisted app, which uses more memory than I would like it to.  I
> tried analysing it a bit (mainly using gc module object list and enumerating
> items of different types) and it seem to me that there is something
> 'twistedish' in it. My application uses in a lot of places generator idiom
> (functions/methods which yield wrapped with defer.deferredGenerator). And, as
> there seem to be a lot of anonymous functions and tuples allocated, I suspect
> that maybe those functions, deferreds and related params and closures live
> longer then I would like to.

Well, objects in Python will live as long as they are referenced.  If you have
large objects (or many objects) referenced from a function scope or object
that's still live, then of course the referenced objects will still be live too.

> Any ideas of what could I do to track it down? In particular, is it possible
> to somehow use introspection to find which lambdas and deferreds are allocated
> while the program is running? Are there any suggestions on how to code
> deferredGenerators to reduce allocated memory (maybe, for instance, I should
> try to turn local variables into object attributes, or opposite, or ...)

Object attributes would tend to be worse than locals, because typically objects
(and thus their attributes) outlive a function's scope.

As a thought experiment, if you transform a generator function into a class,
moving the state from locals in the generator to instance variables of the
class, what have you changed about the lifetimes of those objects?  Answer:
nothing.  If some of those generator locals become locals in the __next__ and
other methods of the class, but *not* instance variables, then those lifetimes
will be shorter -- but you can achieve exactly the same effect by adding "del
foo" or "foo = None" statements to the original generator function.

Thinking about the problem as somehow inherent to generator functions (and by
extension, deferredGenerator), is a red herring.

The best idea I can offer you is this: first find out what's taking the memory
before you try to change your code to fix it.  Blindly rewriting some code in a
different style without understanding why (or even if) it's taking up so much
memory will get you nowhere.  Even if you think you have a pretty good guess,
you're probably wrong (at least, I find that's what happens to me when I try to
optimise based only on guesses).

> Also, if anybody could me point to any interesting resources about tracking
> python momory usage, I would be grateful.
> 
> Tried googling for some time, but apart of zope trackRef I did not found 
> anything.

I use http://twistedmatrix.com/users/spiv/countrefs.py occasionally when I'm
trying to figure out what's using memory in a Python program.  It uses the ref
count on class/type objects as an approximation of the number of instances;
which is close enough.  If there are 100000 references to a class, it's almost
certain that at least 999990 of them are instances of that class.

The other thing to do is to reproduce the problem as simply as possible.  Do you
have a test suite?  Does the memory usage get too high during the test run?

Also, can you reproduce it just by starting the web server?  If so, try running
just half the code involved to start it up -- still see it?  And so on.

Or, if it only consumes unacceptably large amounts of memory after serving 10000
requests, write a script to issue 10000 requests, change the server to only do
first half the processing, hit it with 10000 requests, and you'll see if the
problem is in the first half or the second half.

You get the idea.  Reproduce your problem, then simplify things as much as
possible until you can analyse it.

I hope these ideas help you.

-Andrew.




From glyph at divmod.com  Tue Aug 15 06:57:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 15 Aug 2006 08:57:09 -0400
Subject: [Twisted-Python] Is Twisted adequate for usage in reactive robots?
In-Reply-To: <200608151052.53360.w.richert@gmx.net>
Message-ID: <20060815125709.1717.229527819.divmod.quotient.23274@ohm>

On Tue, 15 Aug 2006 10:52:53 +0200, Willi Richert <w.richert at gmx.net> wrote:

>The main loop of the Python process would have to run at 50Hz. Longer taking
>calculation process are processed in a separate thread. Is there any
>comparison regarding asynchronous and thread execution/latency/... speeds?

In a nutshell, "asynchronous is faster", but that's not the whole story.  ;-).

You're not just changing from an asynchronous framework to a threaded one; you're changing all your code (you are considering rewriting a bunch of existing Java code in Python), your language (Python's semantics are less efficiency-oriented than Java), your runtime (the Python VM is slow) and presumably some other things too.  Nothing can substitute for some good old-fashioned benchmarking for your particular application.

However, 50Hz is not very fast.  On "reasonable" hardware and with a "reasonable" application, (where "reasonable" is somewhat circularly defined here), Twisted should be able to do that without a hiccup.



From glyph at divmod.com  Tue Aug 15 20:29:33 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 15 Aug 2006 22:29:33 -0400
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: 0
Message-ID: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>

In an attempt to clean out some old cruft from the tracker, we're starting to play a virtual game of "hot potato", highlighting the least responsive developer in the Twisted dev team, by using this report:

    http://twistedmatrix.com/trac/report/13

It's currently a fixture of the IRC channel topic; maybe we'll make it more interactive in the future.

Currently the winner (or, rather, the loser) is Dave Peticolas, the closest thin to a maintainer that twisted.enterprise has.  We haven't heard from him in quite a while.

If you're still on this list, Mr. Peticolas, would you please do Andrew Bennetts the honor of passing the target of our collective ridicule to him by updating ticket #303? :)

If you're no longer interested in working on Twisted we'll start reassigning those tickets still left in the tracker to others.



From Marcin.Kasperski at softax.com.pl  Wed Aug 16 02:57:04 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Wed, 16 Aug 2006 10:57:04 +0200
Subject: [Twisted-Python] Re: Reducing memory footprint of twisted app?
In-Reply-To: <44E1B06F.8060203@tekNico.net>
References: <44E1A3A0.6070205@softax.com.pl> <44E1B06F.8060203@tekNico.net>
Message-ID: <200608161057.05225.Marcin.Kasperski@softax.com.pl>

> PySizer - a memory profiler for Python
> http://pysizer.8325.org/
> Heapy
> http://guppy-pe.sourceforge.net/#Heapy

Both seem interesting. Thanks.



From Marcin.Kasperski at softax.com.pl  Wed Aug 16 03:00:44 2006
From: Marcin.Kasperski at softax.com.pl (Marcin Kasperski)
Date: Wed, 16 Aug 2006 11:00:44 +0200
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <20060815125425.GA7487@steerpike.home.puzzling.org>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
Message-ID: <200608161100.45045.Marcin.Kasperski@softax.com.pl>

Thanks Andrew for valuable remarks.




From dave at krondo.com  Wed Aug 16 20:01:13 2006
From: dave at krondo.com (Dave Peticolas)
Date: Wed, 16 Aug 2006 19:01:13 -0700
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>
References: <20060816022933.1717.2111192083.divmod.quotient.23563@ohm>
Message-ID: <44E3CDE9.1060308@krondo.com>

I won! I won! Oh.

Ticket updated, sir.

And while I would love to work more on Twisted, I haven't been able
to find the time. The lame lament you hear over and over, I know.

If anyone is interested in maintaining enterprise, I would be happy to
help as much as I can, or just step quietly aside as you like. I know it
pretty well, we use it all the time where I work.

But I'm happy to wear the hat if nobody else wants it and the next time one
of my tickets bubbles up to the top of the wall of shame, and it isn't a 
'dontfix',
I'll try to carve out some time to actually work on it.

dave


glyph at divmod.com wrote:
> In an attempt to clean out some old cruft from the tracker, we're 
> starting to play a virtual game of "hot potato", highlighting the 
> least responsive developer in the Twisted dev team, by using this report:
>
>    http://twistedmatrix.com/trac/report/13
>
> It's currently a fixture of the IRC channel topic; maybe we'll make it 
> more interactive in the future.
>
> Currently the winner (or, rather, the loser) is Dave Peticolas, the 
> closest thin to a maintainer that twisted.enterprise has.  We haven't 
> heard from him in quite a while.
>
> If you're still on this list, Mr. Peticolas, would you please do 
> Andrew Bennetts the honor of passing the target of our collective 
> ridicule to him by updating ticket #303? :)
>
> If you're no longer interested in working on Twisted we'll start 
> reassigning those tickets still left in the tracker to others.
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>




From lists at knoggin.com  Thu Aug 17 04:47:56 2006
From: lists at knoggin.com (Norman Harman)
Date: Thu, 17 Aug 2006 03:47:56 -0700
Subject: [Twisted-Python] using stdin with twisted
Message-ID: <44E4495C.6020708@knoggin.com>

I have a program that gets apache log on stdin.  I would like to add a 
web interface and some RPC stuff to it.

I imagine something like protocols.basic.LineReceiver is what I want. 
But I can't figure out what ClientFactory to use or ???

I can find very little info on doing this.  The stdio package is 
depreciated and the stdin.py example does not run.

thanks,
norm



From exarkun at divmod.com  Thu Aug 17 07:04:24 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 09:04:24 -0400
Subject: [Twisted-Python] using stdin with twisted
In-Reply-To: <44E4495C.6020708@knoggin.com>
Message-ID: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>

On Thu, 17 Aug 2006 03:47:56 -0700, Norman Harman <lists at knoggin.com> wrote:
>I have a program that gets apache log on stdin.  I would like to add a web 
>interface and some RPC stuff to it.
>
>I imagine something like protocols.basic.LineReceiver is what I want. But I 
>can't figure out what ClientFactory to use or ???
>
>I can find very little info on doing this.  The stdio package is depreciated 
>and the stdin.py example does not run.

The twisted.internet.stdio package isn't deprecated (or depreciated, which
means something else).  You should use it if you want to talk to stdin in
a Twisted program.

The stdin.py example runs fine for me.  In what way is it broken for you?

Jean-Paul



From mike at mkp.ca  Thu Aug 17 06:27:27 2006
From: mike at mkp.ca (Mike Pelletier)
Date: Thu, 17 Aug 2006 08:27:27 -0400
Subject: [Twisted-Python] problems with tracebacks
In-Reply-To: <44D4C2D2.3060603@libero.it>
References: <20060804215533.1717.463641866.divmod.quotient.14509@ohm>
	<44D4C2D2.3060603@libero.it>
Message-ID: <200608170827.27545.mike@mkp.ca>

On Saturday 05 August 2006 12:09, Manlio Perillo wrote:
> Ok, thanks.
> But this means that I cannot use defer.fail to report an exception
> directly.
>
> As an example
>
> if a < 0:
>   return defer.fail(RuntimeError("must be non negative"))
>
>
> does not print a traceback.

Exception instances don't contain a traceback unless they have been raised.  
Below are three tests that return deferreds that result in a traceback and 
custom error message being printed.  Seems like there's probably a better 
way, but this has always been clear enough that I haven't looked for it.

Mike.

----
"""The most perverse TestCase I've ever written.  Failure is an error,
an error is success, and success is failure.
"""

from twisted.trial.unittest import TestCase
from twisted.python.failure import Failure
from twisted.internet.defer import Deferred, fail


class FailExample(TestCase):
    def test_implicitTBfromDeferred(self):
        d = Deferred()
        try:
            raise RuntimeError("Fear of success")
        except:
            d.errback()
        return d

    def test_implicitTBfromFail(self):
        try:
            raise RuntimeError("This isn't happening")
        except:
            return fail()

    def test_explicitTBfromFailure(self):
        d = Deferred()
        f = None
        try:
            raise RuntimeError("Hair on fire")
        except:
            f = Failure()
        d.errback(f)
        return d




From igor at mekensleep.com  Thu Aug 17 07:50:22 2006
From: igor at mekensleep.com (Igor Kravtchenko)
Date: Thu, 17 Aug 2006 15:50:22 +0200
Subject: [Twisted-Python] Killing a process
Message-ID: <44E4741E.6050200@mekensleep.com>

Hi,

I wondered last time what is the best way under Win32 to kill a process 
launched with:
reactor.spawnProcess()

os.kill() as documented here:
http://docs.python.org/lib/os-process.html#l2h-1676
only works under Macintosh and Unix.

Furthermore, spawnProcess() doesn't return any handle, process ID or 
anything
to deal with.

Any help or idea would be really appreciated,

Igor.




From exarkun at divmod.com  Thu Aug 17 08:09:17 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 10:09:17 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <44E4741E.6050200@mekensleep.com>
Message-ID: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>

On Thu, 17 Aug 2006 15:50:22 +0200, Igor Kravtchenko <igor at mekensleep.com> wrote:
>Hi,
>
>I wondered last time what is the best way under Win32 to kill a process 
>launched with:
>reactor.spawnProcess()
>
>os.kill() as documented here:
>http://docs.python.org/lib/os-process.html#l2h-1676
>only works under Macintosh and Unix.
>
>Furthermore, spawnProcess() doesn't return any handle, process ID or 
>anything
>to deal with.
>
>Any help or idea would be really appreciated,
>
>Igor.
>

spawnProcess returns an IProcessTransport, which has a signalProcess
method, which you can pass 'KILL' to end the process.

Process termination with Twisted on Windows is unreliable, though, so
whether or not it will work in your specific case is uncertain.

Jean-Paul



From manlio_perillo at libero.it  Thu Aug 17 09:40:18 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Thu, 17 Aug 2006 17:40:18 +0200
Subject: [Twisted-Python] Killing a process
In-Reply-To: <44E4741E.6050200@mekensleep.com>
References: <44E4741E.6050200@mekensleep.com>
Message-ID: <44E48DE2.2030406@libero.it>

Igor Kravtchenko ha scritto:
> Hi,
> 
> I wondered last time what is the best way under Win32 to kill a process
> launched with:
> reactor.spawnProcess()
> 
> os.kill() as documented here:
> http://docs.python.org/lib/os-process.html#l2h-1676
> only works under Macintosh and Unix.
> 
> Furthermore, spawnProcess() doesn't return any handle, process ID or
> anything
> to deal with.
> 
> Any help or idea would be really appreciated,
> 

Try with http://svn.berlios.de/svnroot/repos/pykill32/trunk/.

It uses an hack (create a thread on the remote process) but it seems to
work fine, at least with Python process and Twisted.


Regards  Manlio Perillo



From foom at fuhm.net  Thu Aug 17 10:02:43 2006
From: foom at fuhm.net (James Y Knight)
Date: Thu, 17 Aug 2006 12:02:43 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>
References: <20060817140917.1717.1380332124.divmod.quotient.23994@ohm>
Message-ID: <F9E08ABE-6A9B-406B-848B-4AA8771832F7@fuhm.net>

On Aug 17, 2006, at 10:09 AM, Jean-Paul Calderone wrote:
> Process termination with Twisted on Windows is unreliable, though, so
> whether or not it will work in your specific case is uncertain.

I don't think that is true. TerminateProcess works fine to kill a  
single process. What isn't supported is killing a processes group, or  
asking a process politely to quit.

On Aug 17, 2006, at 11:40 AM, Manlio Perillo wrote:
> Try with http://svn.berlios.de/svnroot/repos/pykill32/trunk/.
>
> It uses an hack (create a thread on the remote process) but it  
> seems to
> work fine, at least with Python process and Twisted.

That shouldn't be necessary if you just want to kill dead the process.

James



From glyph at divmod.com  Thu Aug 17 11:30:01 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 17 Aug 2006 13:30:01 -0400
Subject: [Twisted-Python] will the real dave peticolas please stand up
In-Reply-To: <44E3CDE9.1060308@krondo.com>
Message-ID: <20060817173001.1717.789039488.divmod.quotient.24065@ohm>

On Wed, 16 Aug 2006 19:01:13 -0700, Dave Peticolas <dave at krondo.com> wrote:
>I won! I won! Oh.
>
>Ticket updated, sir.

Thanks a lot.

>And while I would love to work more on Twisted, I haven't been able
>to find the time. The lame lament you hear over and over, I know.

You mean the lament I _make_ over and over...

>If anyone is interested in maintaining enterprise, I would be happy to
>help as much as I can, or just step quietly aside as you like. I know it
>pretty well, we use it all the time where I work.

This seems pretty unlikely; I've heard no interest in anyone maintaining it or adding any features to it for a while.

On the other hand, it doesn't really *need* any substantial feature development; but an occasional "hey what's up" from a maintainer would be good.  It would also be nice if it had a bit more in the way of docstrings (and I think that ed suimonen will still buy you a hundred-dollar beer if you add a lot of them...)

>But I'm happy to wear the hat if nobody else wants it and the next time one
>of my tickets bubbles up to the top of the wall of shame, and it isn't a 
>'dontfix',
>I'll try to carve out some time to actually work on it.

Thanks again.  It's good to hear you're still around.



From exarkun at divmod.com  Thu Aug 17 11:36:24 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 17 Aug 2006 13:36:24 -0400
Subject: [Twisted-Python] Killing a process
In-Reply-To: <F9E08ABE-6A9B-406B-848B-4AA8771832F7@fuhm.net>
Message-ID: <20060817173624.1717.1951135295.divmod.quotient.24067@ohm>

On Thu, 17 Aug 2006 12:02:43 -0400, James Y Knight <foom at fuhm.net> wrote:
>On Aug 17, 2006, at 10:09 AM, Jean-Paul Calderone wrote:
>>Process termination with Twisted on Windows is unreliable, though, so
>>whether or not it will work in your specific case is uncertain.
>
>I don't think that is true. TerminateProcess works fine to kill a  single 
>process. What isn't supported is killing a processes group, or  asking a 
>process politely to quit.
>

Observations disagree.

Jean-Paul



From agtilden at yahoo.com  Thu Aug 17 14:33:16 2006
From: agtilden at yahoo.com (Andrew Smith)
Date: Thu, 17 Aug 2006 13:33:16 -0700 (PDT)
Subject: [Twisted-Python] Producers / Consumers and more examples tutorials?
	(Example Request)
Message-ID: <20060817203316.58897.qmail@web38803.mail.mud.yahoo.com>

>Just name a specific example you'd like to see and
I'll try to write
>something up.  I don't want to pick something, write
it up, and then
>discover that it doesn't cover what you wanted to
learn. :)
>Jean-Paul

How about this scenario:

I make an HTTP request and expect to receive an XML
document back. The XML document is a container for
discreet items.

It might look something like this: 

<items>
  <item>
    <content>foo</content>
  </item>
  <item>
    <content>bar</content>
  </item>
</items>

I don't know how big this document will be or how long
it will take to retrieve so I would like to present
myself as a producer of individual item elements and
let clients consume them as they become available.
Does this fit the twisted Producer/Consumer paradigm? 

-a.

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From lists at knoggin.com  Thu Aug 17 18:24:56 2006
From: lists at knoggin.com (Norman Harman)
Date: Thu, 17 Aug 2006 17:24:56 -0700
Subject: [Twisted-Python] using stdin with twisted
In-Reply-To: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>
References: <20060817130424.1717.1755355016.divmod.quotient.23978@ohm>
Message-ID: <44E508D8.4060307@knoggin.com>

Jean-Paul Calderone wrote:
> On Thu, 17 Aug 2006 03:47:56 -0700, Norman Harman <lists at knoggin.com> 
> wrote:
>> I have a program that gets apache log on stdin.  I would like to add a 
>> web interface and some RPC stuff to it.
>>
>> I imagine something like protocols.basic.LineReceiver is what I want. 
>> But I can't figure out what ClientFactory to use or ???
>>
>> I can find very little info on doing this.  The stdio package is 
>> depreciated and the stdin.py example does not run.
> 
> The twisted.internet.stdio package isn't deprecated (or depreciated, which
> means something else).  You should use it if you want to talk to stdin in
> a Twisted program.

http://twistedmatrix.com/documents/current/api/twisted.internet.stdio.html 
API Stability: unstable (pending deprecation in favor of a reactor-based 
API)

I see that I jumped the gun a bit.  It was late and when I saw 
unstable...deprecation I went looking at reactor stuff and got lost in a 
maelstrom of confusion.

> The stdin.py example runs fine for me.  In what way is it broken for you?
I got a traceback (but that must have been my error).  Downloading a 
fresh copy it runs but never echo's instead what I type shows up at 
console prompt after I ctrl-C python.  It's probably win2000 cmd.exe's 
fault.
The production system is Linux so use twisted.stdio on that.

thanks,
norm



From jarrod at vertigrated.com  Thu Aug 17 19:37:39 2006
From: jarrod at vertigrated.com (jarrod roberson)
Date: Thu, 17 Aug 2006 21:37:39 -0400
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <200608161100.45045.Marcin.Kasperski@softax.com.pl>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
	<200608161100.45045.Marcin.Kasperski@softax.com.pl>
Message-ID: <2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>

one of the things we did, and saw an approximately 30% REDUCTION in
memory foot print was add ing __slots__ definations to all he objects
we were creating in graphs.

This isn't twisted specific, so it should apply to any python application.

Granted we have hundreds of thousands of objects in the graph. But it
did make a noticiable change in the foot print.



From andrew-twisted at puzzling.org  Thu Aug 17 23:03:04 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Fri, 18 Aug 2006 15:03:04 +1000
Subject: [Twisted-Python] Reducing memory footprint of twisted app?
In-Reply-To: <2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>
References: <44E1A3A0.6070205@softax.com.pl>
	<20060815125425.GA7487@steerpike.home.puzzling.org>
	<200608161100.45045.Marcin.Kasperski@softax.com.pl>
	<2389d4730608171837m32f32403k42903b9db400f144@mail.gmail.com>
Message-ID: <20060818050304.GA23698@steerpike.home.puzzling.org>

On Thu, Aug 17, 2006 at 09:37:39PM -0400, jarrod roberson wrote:
> one of the things we did, and saw an approximately 30% REDUCTION in
> memory foot print was add ing __slots__ definations to all he objects
> we were creating in graphs.
> 
> This isn't twisted specific, so it should apply to any python application.
> 
> Granted we have hundreds of thousands of objects in the graph. But it
> did make a noticiable change in the foot print.

Right, __slots__ can be helpful.

Some more advice that isn't Twisted specific:

It's very helpful to understand which objects are taking up the memory.  If you
know that, not can have a good idea if __slots__  will actually help before you
clutter your code with them, but you can perhaps realise that you shouldn't even
have 100000 simultaneous Request objects when you only have 1000 connections at
the time -- in my experience helping people on IRC, it's quite common that
there's accidentally a reference being kept to every request object (or
similar), thus causing memory leaks despite Python's garbage collection.  Saving
30% of memory on 100000 objects isn't anywhere near as good as saving 99% of
those objects from being needed in the first place!

If you understand what the culprits are, you can also decide that not only are
__slots__ helpful, you can also analyse those objects to figure out if they are
keeping more state than they really need.

And in fact, you can try speculatively adding __slots__ to a type of object as
an indirect way to see if a particular type is a major contributor to your
memory use or not -- if adding __slots__ to Foo doesn't help, there probably
aren't a significant number of instances contributing to the memory use.

Basically, I really strongly think people should *understand* their performance
issues so they can fix them better, rather than just blindly doing the
equivalent of "gcc -O9" and considering it solved.  It depends on the available
time and requirements, of course; if a quick band-aid is all that's needed, then
fair enough.  But I find it usually pays off to throughly understand what you're
fixing.

That said, if you need hundreds of thousands of objects in memory, __slots__ is
one of the simplest ways to improve memory consumption I know of :)

-Andrew.




From manlio_perillo at libero.it  Fri Aug 18 03:02:22 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 18 Aug 2006 11:02:22 +0200
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
Message-ID: <44E5821E.3010805@libero.it>

Hi.

Is it possible (at least in principle) to serialize objects in JSON and
to do requests via HTTP?

That is, to make possible to use Python functions and objects via
JavaScript, using Perspective Broker.


Regards  Manlio Perillo



From radix at twistedmatrix.com  Fri Aug 18 10:41:15 2006
From: radix at twistedmatrix.com (radix at twistedmatrix.com)
Date: Fri, 18 Aug 2006 16:41:15 -0000
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
Message-ID: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>

On 09:02 am, manlio_perillo at libero.it wrote:
>Hi.
>
>Is it possible (at least in principle) to serialize objects in JSON and
>to do requests via HTTP?
>
>That is, to make possible to use Python functions and objects via
>JavaScript, using Perspective Broker.

Please post to twisted-web about web-related questions in the future.

No, PB does not know how to talk HTTP or JSON. You can still use twisted.web to implement a web server that can speak JSON to your Javascript code.  Also take a look at Divmod's Athena, part of Nevow, which implements two-way communication with web pages with an API similar to PB's. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060818/54b407c4/attachment.html>

From manlio_perillo at libero.it  Fri Aug 18 13:13:15 2006
From: manlio_perillo at libero.it (Manlio Perillo)
Date: Fri, 18 Aug 2006 21:13:15 +0200
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
In-Reply-To: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
References: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
Message-ID: <44E6114B.8050608@libero.it>

radix at twistedmatrix.com ha scritto:
> On 09:02 am, manlio_perillo at libero.it wrote:
>>Hi.
>>
>>Is it possible (at least in principle) to serialize objects in JSON and
>>to do requests via HTTP?
>>
>>That is, to make possible to use Python functions and objects via
>>JavaScript, using Perspective Broker.
> 
> Please post to twisted-web about web-related questions in the future.
> 

Well, this is a specific question about Perspective Broker.

> No, PB does not know how to talk HTTP or JSON. 

Yes, I know.
I was just curious to know if PB is extensible so that I can change the
serializer and the transport layer.


Thanks and regards  Manlio Perillo



From ldanielburr at mac.com  Fri Aug 18 13:44:08 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Fri, 18 Aug 2006 14:44:08 -0500
Subject: [Twisted-Python] Perspective Broker, XMLHttpRequest and JSON
In-Reply-To: <44E6114B.8050608@libero.it>
References: <20060818164115.27947.204965782.divmod.xquotient.5@joule.divmod.com>
	<44E6114B.8050608@libero.it>
Message-ID: <op.tehvruao3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Fri, 18 Aug 2006 14:13:15 -0500, Manlio Perillo  
<manlio_perillo at libero.it> wrote:

> radix at twistedmatrix.com ha scritto:
>> On 09:02 am, manlio_perillo at libero.it wrote:
>>> Hi.
>>>
>>> Is it possible (at least in principle) to serialize objects in JSON and
>>> to do requests via HTTP?
>>>
>>> That is, to make possible to use Python functions and objects via
>>> JavaScript, using Perspective Broker.
>>
>> Please post to twisted-web about web-related questions in the future.
>>
>
> Well, this is a specific question about Perspective Broker.
>
>> No, PB does not know how to talk HTTP or JSON.
>
> Yes, I know.
> I was just curious to know if PB is extensible so that I can change the
> serializer and the transport layer.
>

Perhaps I am being overly particular, but HTTP isn't a transport layer; it  
is an
application protocol.  PB is also an application protocol, and it is one  
with
very different characteristics than HTTP, so you question doesn't really  
make
sense, as asked.

That said, what you are looking for (callRemote semantics layered over  
HTTP)
does exist: Nevow.Athena gives you exactly what you want.  It uses JSON for
serialization, provides callRemote semantics, and uses HTTP.

It isn't an exact match with PB, of course, but I think it is more than
adequate for the uses to which it is put

Hope this helps,

L. Daniel Burr



From exarkun at twistedmatrix.com  Sat Aug 19 23:05:02 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 20 Aug 2006 05:05:02 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1156050302.28.921218600@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-13 through 2006-08-20
Bugs opened: 13    Bugs closed: 15  Total open bugs: 693 (-2)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -2  |Highest:  -5          |Conch:     -3          
|Enhancement:  -1  |High:     +0          |Core:      +1          
|Task:         +2  |Normal:   +4          |Mail:      -2          
                                          |Pb:        +1          
                                          |Pydoctor:  +0          
                                          |Trial:     +1          
                                          |Web:       +0          
                                          |Words:     +1          


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2002] t.i.unix.Port fails on bound incoming unix sockets (opened by ghazel)
    defect          core       http://twistedmatrix.com/trac/ticket/2002

[#2003] pop3 tests don't cover both deprecated and undeprecated IMailbox behavior codepaths (opened by exarkun) (CLOSED, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/2003

                    ===== High =====
[#1999] Move newpb out of trunk into a branch or separate package (opened by exarkun)
    task            pb         http://twistedmatrix.com/trac/ticket/1999

                    ===== Normal =====
[#1995] Rework t.w.p.jabber.component to work with initializers. (opened by ralphm)
    enhancement     words      http://twistedmatrix.com/trac/ticket/1995

[#1996] Remove repr() and getDelayedCalls() usage from twisted.web.test.test_web.SessionTest.test_delayedCallCleanup (opened by exarkun)
    task            web        http://twistedmatrix.com/trac/ticket/1996

[#1997] signals handled via callFromThread, yet the reactor still drops into select() (opened by wingo)
    defect          core       http://twistedmatrix.com/trac/ticket/1997

[#1998] pydoctor tries to parse a dotfile (opened by dreid) (CLOSED, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/1998

[#2000] twisted.test.test_process.TwoProcessesPosix.tearDown doesn't account for failure to launch processes (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2000

[#2001] Make sure every todo'd test has an open ticket (opened by jml)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2001

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004

[#2005] trial twisted/mail/ traces back, omitting trailing / does not. (opened by jerub)
    defect          trial      http://twistedmatrix.com/trac/ticket/2005

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004



Closed Bugs
______________________
                    ===== Highest =====
[#1984] Microdom drops the first character in an "extremely lenient" document (opened by radix, closed by radix, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1984

[#1988] Cannot use a DeferredList to retrieve several POP3 messages (opened by kendrew, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1988

[#1638] provide a way for test collector to find custom test suites (opened by acapnotic, closed by acapnotic, fixed)
    enhancement     trial      http://twistedmatrix.com/trac/ticket/1638

[#1967] twisted.conch.telnet dies in conjunction with PuTTY (opened by sam, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1967

[#1976] twisted.internet.ssl.Certificate.peerFromTransport can return invalid Certificates (opened by exarkun, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1976

[#1938] web.Session.checkExpired and web.Site.makeSession do not keep DelayedCall handles (opened by acapnotic, closed by exarkun, fixed)
    defect          web        http://twistedmatrix.com/trac/ticket/1938

[#2003] pop3 tests don't cover both deprecated and undeprecated IMailbox behavior codepaths (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/2003

                    ===== High =====
[#1991] amp has problems with mixed case keyword args (opened by scmikes, closed by glyph, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1991

                    ===== Normal =====
[#1691] POP3Client can't deal with the continued commands request (opened by tomoyuki, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1691

[#1998] pydoctor tries to parse a dotfile (opened by dreid, closed by mwh, fixed)
    enhancement     pydoctor   http://twistedmatrix.com/trac/ticket/1998

[#303 ] [patch] Persistent transactions for adbapi (opened by grib, closed by davep, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/303

[#663 ] stop using thread id's as connection id's (opened by davep, closed by davep, wontfix)
    enhancement     conch      http://twistedmatrix.com/trac/ticket/663

[#74  ] Document new logging infrastructure, formalize standards for keywords and namespaces (opened by itamarst, closed by PenguinOfDoom, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/74

[#1851] Svn  python 2.4  Suse 9, 64 bit (opened by scmikes, closed by scmikes, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1851

[#2004] t.i.tcp._SocketCloser should not do the shutdown trick (opened by ghazel, closed by exarkun, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/2004





From stephen at thorne.id.au  Sun Aug 20 17:32:50 2006
From: stephen at thorne.id.au (Stephen Thorne)
Date: Mon, 21 Aug 2006 09:32:50 +1000
Subject: [Twisted-Python] Weekly Bug Summary
In-Reply-To: 1156050302.28.921218600@twistedmatrix.com
Message-ID: <20060820233250.1717.1112013798.divmod.quotient.27086@ohm>

On Sun, 20 Aug 2006 05:05:02 -0000, exarkun at twistedmatrix.com wrote:
>Bug summary
>______________________
>Summary for 2006-08-13 through 2006-08-20
>Bugs opened: 13    Bugs closed: 15  Total open bugs: 693 (-2)
>
>|== Type Changes   |== Priority Changes   |== Component Changes
>|Defect:       -2  |Highest:  -5          |Conch:     -3
>|Enhancement:  -1  |High:     +0          |Core:      +1
>|Task:         +2  |Normal:   +4          |Mail:      -2
>                                          |Pb:        +1
>                                          |Pydoctor:  +0
>                                          |Trial:     +1
>                                          |Web:       +0
>                                          |Words:     +1

Yay! Go twisted!

-5 Highest priority bugs. -2 Defects, -2 Total open bugs! Excellent news!

Thanks to everyone who has been squishing bugs. Your attention to the Ultimate Quality is appreciated. :)

Regards, 
Stephen Thorne



From exarkun at divmod.com  Tue Aug 22 08:55:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 22 Aug 2006 10:55:27 -0400
Subject: [Twisted-Python] Re: [Twisted-commits] r17913 - Merge forward
In-Reply-To: <E1GFQPO-0004kx-00@wolfwood>
Message-ID: <20060822145527.1717.478337284.divmod.quotient.28704@ohm>

On Tue, 22 Aug 2006 01:10:46 -0600, Jonathan Lange <jml at wolfwood.twistedmatrix.com> wrote:
>
>Modified: branches/cleantests-1883-2/twisted/web/test/test_distrib.py
>==============================================================================
>--- branches/cleantests-1883-2/twisted/web/test/test_distrib.py	(original)
>+++ branches/cleantests-1883-2/twisted/web/test/test_distrib.py	Tue Aug 22 01:10:44 2006
>@@ -15,16 +15,37 @@
>                 self.logFile.close()
>             del self.logFile
>
>+
>+def fireOnClose(protocol):
>+    d = defer.Deferred()
>+    oldConnectionLost = protocol.connectionLost
>+    def connectionLost(*a):
>+        oldConnectionLost(*a)
>+        d.callback(None)
>+    protocol.connectionLost = connectionLost
>+    return d
>+
>+
>+class PBServerFactory(pb.PBServerFactory):
>+    onClose = None
>+
>+    def buildProtocol(self, addr):
>+        proto = pb.PBServerFactory.buildProtocol(self, addr)
>+        self.onClose = fireOnClose(proto)
>+        return proto

Would it make sense to use notifyOnDisconnect here, instead of all this
custom scaffolding?

Jean-Paul



From hsanches at gmail.com  Wed Aug 23 07:32:53 2006
From: hsanches at gmail.com (=?ISO-8859-1?Q?Herm=EDnio_Miguel_Sanches?=)
Date: Wed, 23 Aug 2006 14:32:53 +0100
Subject: [Twisted-Python] Connect to a Twisted Perspective Broker from a VB
	application (using a python com server InProc)
Message-ID: <f28267c0608230632o2f5dec7cu9a7d9d16b0b7fb1d@mail.gmail.com>

Hi,

I need to connect to a PerspectiveBroker from a VB application.
I did it with a com server in python, which works fine when the com client
is also python code.
All the calls must be synchronous to the com server.
When Calling from VB it works fine every time if the function used from the
com server don't use the reactor.

The problem is that when I call (from the VB com client) the functions that
uses the twisted reactor it performs well the first time but for the the
second time it's called, it stalls. I have to kill the vb executable.
The function from the test code is: testBroker()
Please can you help me to sheed some light on this? Should I do it another
way? Bellow is the code that I am using.

Many thanks

Miguel

----------------------------------------------------
The code for the python com client :

import win32com.client
object = win32com.client.Dispatch("Python.TestServer")
print object.Hello("test")
print object.Hello2("test")
print object.testBroker()
print object.gettestresult()

----------------------------------------------------
The code for the VB com client:
Private Sub TestComServer()
 Dim y As Object
 Set y = CreateObject("Python.TestServer")
 MsgBox y.gettestresult
 MsgBox y.testBroker()
 MsgBox y.gettestresult()
 Set y = Nothing
End Sub

----------------------------------------------------
the code for the python comserver:

#testcom.py
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import sys
import time
import socket

class HelloWorld:
    _reg_clsid_ = "{7CC9F362-486D-11D1-BB48-0000E838A65F}"
    _reg_desc_ = "Python Test COM Server"
    _reg_progid_ = "Python.TestServer"
    _public_methods_ = ['testBroker','gettestresult']
    def __init__(self):
        self.sText='sText10'
        self.reactorFinished=False
    def get_ip(self):
        addrs = socket.getaddrinfo(socket.gethostname(), None)
        addr = addrs[0]
        IPaddr = addr[4][0]
        return IPaddr #"localhost"

    def get_ip(self):
        return "localhost"

    def get_port(self):
        return 8786

    def DealWithReactor(self):
        now = time.localtime(time.time())
        factory = pb.PBClientFactory()
        reactor.connectTCP(self.get_ip(), self.get_port(), factory)
        d = factory.getRootObject()
        strt="hello network "  + ' ' + time.asctime(now)
        d.addCallback(lambda object: object.callRemote("echo", strt))
        d.addErrback(lambda reason: 'error: '+str(reason.value))
        d.addCallback(self.StopReactor)
        reactor.run()

    def StopReactor(self,obj):
        reactor.stop()
        self.reactorFinished=True
        self.sText=str(obj)
        return obj

    def testBroker(self):
        self.reactorFinished=False
        self.DealWithReactor()
        while self.reactorFinished==False:
            pass
        return 'OK testBroker22 self.reactorFinished:' + str(
self.reactorFinished)

    def gettestresult(self):
        return "gettestresult:" + str(self.sText)

if __name__=='__main__':
    import win32com.server.register
    win32com.server.register.UseCommandLine(HelloWorld)
    h=HelloWorld()
    print(h.gettestresult())
    print(h.testBroker())
    print(h.gettestresult())
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060823/485bc1ff/attachment.html>

From hsanches at gmail.com  Wed Aug 23 07:38:11 2006
From: hsanches at gmail.com (=?ISO-8859-1?Q?Herm=EDnio_Miguel_Sanches?=)
Date: Wed, 23 Aug 2006 14:38:11 +0100
Subject: [Twisted-Python] Connect to a Perspective Broker from a VB
	App(using a python com server) (Pls disrigard previous one)
Message-ID: <f28267c0608230638l1c13d79fp5d74277cb5c7e6a7@mail.gmail.com>

Hi,

Apologies, please disregard the previous email - here is the good one.

I need to connect to a PerspectiveBroker from a VB application.
I did it with a com server in python, which works fine when the com client
is also python code.
All the calls must be synchronous to the com server.
When Calling from VB it works fine every time if the function used from the
com server don't use the reactor.

The problem is that when I call (from the VB com client) the functions that
uses the twisted reactor it performs well the first time but for the the
second time it's called, it stalls. I have to kill the vb executable.
The function from the test code is: testBroker()

Please can you help me to shed some light on this? Should I do it another
way? Bellow is the code that I am using.

Many thanks
Miguel

----------------------------------------------------
The code for the python com client :

import win32com.client
object = win32com.client.Dispatch("Python.TestServer")
print object.gettestresult ()
print object.testBroker()
print object.gettestresult ()

----------------------------------------------------
The code for the VB com client:

Private Sub TestComServer()
 Dim y As Object
 Set y = CreateObject("Python.TestServer")
 MsgBox y.gettestresult
 MsgBox y.testBroker()
 MsgBox y.gettestresult()
 Set y = Nothing
End Sub
----------------------------------------------------
the code for the python comserver:

#testcom.py
from twisted.spread import pb
from twisted.internet import reactor, defer
from twisted.python import util
import sys
import time
import socket

class HelloWorld:
    _reg_clsid_ = "{7CC9F362-486D-11D1-BB48-0000E838A65F}"
    _reg_desc_ = "Python Test COM Server"
    _reg_progid_ = "Python.TestServer"
    _public_methods_ = ['testBroker','gettestresult']
    def __init__(self):
        self.sText='sText10'
        self.reactorFinished=False
    def get_ip(self):
        addrs = socket.getaddrinfo(socket.gethostname(), None)
        addr = addrs[0]
        IPaddr = addr[4][0]
        return IPaddr #"localhost"

    def get_ip(self):
        return "localhost"

    def get_port(self):
        return 8786

    def DealWithReactor(self):
        now = time.localtime(time.time())
        factory = pb.PBClientFactory()
        reactor.connectTCP(self.get_ip(), self.get_port(), factory)
        d = factory.getRootObject ()
        strt="hello network "  + ' ' + time.asctime(now)
        d.addCallback(lambda object: object.callRemote("echo", strt))
        d.addErrback(lambda reason: 'error: '+str(reason.value ))
        d.addCallback(self.StopReactor)
        reactor.run()

    def StopReactor(self,obj):
        reactor.stop()
        self.reactorFinished=True
        self.sText=str(obj)
        return obj

    def testBroker(self):
        self.reactorFinished=False
        self.DealWithReactor()
        while self.reactorFinished==False:
            pass
        return 'OK testBroker22 self.reactorFinished:' + str(
self.reactorFinished)

    def gettestresult(self):
        return "gettestresult:" + str(self.sText)

if __name__=='__main__':
    import win32com.server.register
    win32com.server.register.UseCommandLine (HelloWorld)
    h=HelloWorld()
    print(h.gettestresult())
    print(h.testBroker())
    print(h.gettestresult())
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060823/a298c271/attachment.html>

From exarkun at divmod.com  Wed Aug 23 08:00:16 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 23 Aug 2006 10:00:16 -0400
Subject: [Twisted-Python] Connect to a Perspective Broker from a VB
	App(using a python com server) (Pls disrigard previous one)
In-Reply-To: <f28267c0608230638l1c13d79fp5d74277cb5c7e6a7@mail.gmail.com>
Message-ID: <20060823140016.1717.1045324506.divmod.quotient.29605@ohm>

On Wed, 23 Aug 2006 14:38:11 +0100, Hermínio Miguel Sanches <hsanches at gmail.com> wrote:
>Hi,
>
>Apologies, please disregard the previous email - here is the good one.
>
>I need to connect to a PerspectiveBroker from a VB application.
>I did it with a com server in python, which works fine when the com client
>is also python code.
>All the calls must be synchronous to the com server.
>When Calling from VB it works fine every time if the function used from the
>com server don't use the reactor.
>
>The problem is that when I call (from the VB com client) the functions that
>uses the twisted reactor it performs well the first time but for the the
>second time it's called, it stalls. I have to kill the vb executable.
>The function from the test code is: testBroker()
>
>Please can you help me to shed some light on this? Should I do it another
>way? Bellow is the code that I am using.

It looks as though you are starting and stopping the reactor for each
call you make.  The reactor can only be started once, so each attempt
you make after the first fails.

I've never written a COM server so I can't suggest a different way to
architect this so as to avoid the problem.

Jean-Paul



From eprparadocs at gmail.com  Thu Aug 24 09:49:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 11:49:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
Message-ID: <44EDCA9D.8030204@gmail.com>

I have a XMLPRC client that works well under TCP and I am now trying to 
get it to work under Multicast conditions.

Here is the "TCP" code I used:

class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.TCPServer.__init__(self,tcpPort,server.Site(r))

I changed the call to TCPServer to:


class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))

I thought this would work since, but it doesn't. What I get returned is 
the following error message:


Failed to load application: unbound method __init__() must be called 
with MulticastServer instance as first argument (got StorageService 
instance instead)


Does anyone know what I am doing wrong?

Thanks,
Chaz.



From exarkun at divmod.com  Thu Aug 24 10:09:27 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 24 Aug 2006 12:09:27 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDCA9D.8030204@gmail.com>
Message-ID: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>

On Thu, 24 Aug 2006 11:49:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>I have a XMLPRC client that works well under TCP and I am now trying to get 
>it to work under Multicast conditions.
>
>Here is the "TCP" code I used:
>
>class StorageService(internet.TCPServer):
>     def __init__(self,tcpPort,configInfo):
>         r = StoragePeer(configInfo)
>         xmlrpc.addIntrospection(r)
>         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>
>I changed the call to TCPServer to:
>
>
>class StorageService(internet.TCPServer):
>     def __init__(self,tcpPort,configInfo):
>         r = StoragePeer(configInfo)
>         xmlrpc.addIntrospection(r)
>         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>
>I thought this would work since, but it doesn't. What I get returned is the 
>following error message:
>
>
>Failed to load application: unbound method __init__() must be called with 
>MulticastServer instance as first argument (got StorageService instance 
>instead)
>
>
>Does anyone know what I am doing wrong?

The immediate mistake you are making is trying to call an unbound method
from one class with a self argument which is an instance of an unrelated
class.  This is not allowed in Python.

The overall mistake you are making is trying to use XML-RPC over multicast.
This does not work.  Perhaps something like XML-RPC could be made to run
over multicast, but it would be a much larger undertaking than just using
MulticastServer in place of TCPServer.

Jean-Paul



From eprparadocs at gmail.com  Thu Aug 24 10:23:02 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 12:23:02 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>
References: <20060824160927.1717.1703150512.divmod.quotient.30322@ohm>
Message-ID: <44EDD266.1050907@gmail.com>

Jean-Paul Calderone wrote:
> On Thu, 24 Aug 2006 11:49:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> I have a XMLPRC client that works well under TCP and I am now trying 
>> to get it to work under Multicast conditions.
>>
>> Here is the "TCP" code I used:
>>
>> class StorageService(internet.TCPServer):
>>     def __init__(self,tcpPort,configInfo):
>>         r = StoragePeer(configInfo)
>>         xmlrpc.addIntrospection(r)
>>         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>>
>> I changed the call to TCPServer to:
>>
>>
>> class StorageService(internet.TCPServer):
>>     def __init__(self,tcpPort,configInfo):
>>         r = StoragePeer(configInfo)
>>         xmlrpc.addIntrospection(r)
>>         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>>
>> I thought this would work since, but it doesn't. What I get returned 
>> is the following error message:
>>
>>
>> Failed to load application: unbound method __init__() must be called 
>> with MulticastServer instance as first argument (got StorageService 
>> instance instead)
>>
>>
>> Does anyone know what I am doing wrong?
> 
> The immediate mistake you are making is trying to call an unbound method
> from one class with a self argument which is an instance of an unrelated
> class.  This is not allowed in Python.
> 
> The overall mistake you are making is trying to use XML-RPC over multicast.
> This does not work.  Perhaps something like XML-RPC could be made to run
> over multicast, but it would be a much larger undertaking than just using
> MulticastServer in place of TCPServer.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
What I found when I did the following call:

internet.TCPServer(tcpport,server.Site(r))

that the call failed. Here is the trace output...perhaps someone can 
tell me what is wrong...

Aug 24 12:22:26 sideshow whirlwind: [-] Traceback (most recent call last):
Aug 24 12:22:26 sideshow whirlwind: [-]   File "TwistedPeer.py", line 
146, in ?
Aug 24 12:22:26 sideshow whirlwind: [-]     td.runApp(tdoptions)
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/scripts/twistd.py", line 
196, in runApp
Aug 24 12:22:26 sideshow whirlwind: [-]     startApplication(config, 
application)
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/scripts/twistd.py", line 
173, in startApplication
Aug 24 12:22:26 sideshow whirlwind: [-] 
service.IService(application).privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/service.py", 
line 191, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     service.privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/service.py", 
line 191, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     service.privilegedStartService()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/internet.py", 
line 68, in privilegedStartService
Aug 24 12:22:26 sideshow whirlwind: [-]     self._port = self._getPort()
Aug 24 12:22:26 sideshow whirlwind: [-]   File 
"/usr/lib64/python2.4/site-packages/twisted/application/internet.py", 
line 86, in _getPort
Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
'listen'+self.method)(*self.args, **self.kwargs)
Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
instance has no attribute 'args'


When I used the code I did, everything worked...

Chaz.





From eprparadocs at gmail.com  Thu Aug 24 10:54:38 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 12:54:38 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD3C5.9070003@gmail.com>
References: <20060824160642.7857.1028714473.divmod.xquotient.17@joule.divmod.com>
	<44EDD3C5.9070003@gmail.com>
Message-ID: <44EDD9CE.4050009@gmail.com>

Chaz. wrote:
> radix at twistedmatrix.com wrote:
>> On 03:49 pm, eprparadocs at gmail.com wrote:
>>  >I have a XMLPRC client that works well under TCP and I am now trying 
>> to get
>>  >it to work under Multicast conditions.
>>
>> It is unlikely that you will be able to get the XMLRPC protocol to 
>> work over multicast, given that multicast is an unreliable transport, 
>> like UDP. HTTP and XMLRPC don't know how to deal with that.
>>
>>  >Here is the "TCP" code I used:
>>  >
>>  >class StorageService(internet.TCPServer):
>>  >     def __init__(self,tcpPort,configInfo):
>>  >         r = StoragePeer(configInfo)
>>  >         xmlrpc.addIntrospection(r)
>>  >         internet.TCPServer.__init__(self,tcpPort,server.Site(r))
>>
>>
>> Subclassing the thinks in twisted.application.internet is not really 
>> how those classes are meant to be used. Why did you do this instead of 
>> just instantiating a TCPServer with the appropriate port and factory?
>>
>>  >I changed the call to TCPServer to:
>>  >
>>  >
>>  >class StorageService(internet.TCPServer):
>>  >     def __init__(self,tcpPort,configInfo):
>>  >         r = StoragePeer(configInfo)
>>  >         xmlrpc.addIntrospection(r)
>>  >         internet.MulticastServer.__init__(self,tcpPort,server.Site(r))
>>  >
>>  >I thought this would work since, but it doesn't. What I get returned 
>> is the
>>  >following error message:
>>  >
>>  >
>>  >Failed to load application: unbound method __init__() must be called 
>> with
>>  >MulticastServer instance as first argument (got StorageService instance
>>  >instead)
>>
>> This is a trivial error in your Python. You can't call methods of 
>> classes directly unless the first argument is an instance of that class.
>>
> 
> I know how much work I will need to do to get any UDP-like protocol to 
> work with EXACTLY-ONCE semantics.
> 

It seems my one problem was that in the definition of my class...

class StorageService(internet.TCPServer)

I should have used

class StorageService(internet.MulticastServer)

That solved my immediate problem, though I did find out that XMLRPC does 
in fact assume that you have a connection oriented protocol underneath 
it. Now I will just have to fix that problem.

Also for those of you that said you can't do:

internet.TCPServer.__init__(self,...)

I would suggest you are wrong. In fact that is exactly how subclassing 
works in Python. But that is for another time.

Once again thanks!

Chaz.




From ldanielburr at mac.com  Thu Aug 24 11:23:12 2006
From: ldanielburr at mac.com (L. Daniel Burr)
Date: Thu, 24 Aug 2006 12:23:12 -0500
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD9CE.4050009@gmail.com>
References: <20060824160642.7857.1028714473.divmod.xquotient.17@joule.divmod.com>
	<44EDD3C5.9070003@gmail.com> <44EDD9CE.4050009@gmail.com>
Message-ID: <op.tess8yuk3oj628@l-daniel-burrs-powerbook-g4-17.local>

On Thu, 24 Aug 2006 11:54:38 -0500, Chaz. <eprparadocs at gmail.com> wrote:

> Chaz. wrote:
>
> Also for those of you that said you can't do:
>
> internet.TCPServer.__init__(self,...)
>
> I would suggest you are wrong. In fact that is exactly how subclassing  
> works in Python. But that is for another time.
>

Sorry, but you didn't read JP's response carefully.  What JP said was
that you cannot "call an unbound method from one class with a self
argument which is an instance of an unrelated class".  That's exactly
what you were doing in your first post; you called TCPServer.__init__
with a "self" argument that was actually an instance of a totally
unrelated class, and that is why the call failed.


> Once again thanks!
>

Have a good one,

L. Daniel Burr



From glyph at divmod.com  Thu Aug 24 11:37:47 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 24 Aug 2006 13:37:47 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD266.1050907@gmail.com>
Message-ID: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>

On Thu, 24 Aug 2006 12:23:02 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>What I found when I did the following call:

>internet.TCPServer(tcpport,server.Site(r))
>
>that the call failed. Here is the trace output...perhaps someone can tell me 
>what is wrong...

You have reversed something.

>Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
>'listen'+self.method)(*self.args, **self.kwargs)
>Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
>instance has no attribute 'args'

The last line of the traceback here refers to 'StorageService', not 'TCPServer'.  StorageService was the name of the TCPServer subclass you were using in your examples.  If you had been calling rather than subclassing TCPServer, presumably there would be no StorageService anywhere, least of all in the 'self' slot of a method on TCPServer in a traceback.



From glyph at divmod.com  Thu Aug 24 11:48:56 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Thu, 24 Aug 2006 13:48:56 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDD9CE.4050009@gmail.com>
Message-ID: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>

On Thu, 24 Aug 2006 12:54:38 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Chaz. wrote:

>It seems my one problem was that in the definition of my class...

Those classes are not really meant to be used by subclassing.

>That solved my immediate problem, though I did find out that XMLRPC does in 
>fact assume that you have a connection oriented protocol underneath it. Now 
>I will just have to fix that problem.

How do you propose to "fix" that property of XMLRPC?  It's not really a "problem", in that it's *defined* to use not only a connection, but an HTTP connection at that.  From the XML-RPC specification: "An XML-RPC message is an HTTP-POST request."

There is Jabber-RPC, which indicates how you might make an XMLRPC-*like* protocol over some other transport, but in your case that still requires a reliable multicast message delivery layer (a monumental task by itself).

What is the application you are writing this for?

>Also for those of you that said you can't do:
>
>internet.TCPServer.__init__(self,...)
>
>I would suggest you are wrong. In fact that is exactly how subclassing works 
>in Python. But that is for another time.

You misunderstood.  I assure you they were correct, but that isn't what they said.  Simplified, here is what you did:

>>> class A:
...  def __init__(self):
...   print self
...
>>> class B:
...  def __init__(self):
...   A.__init__(self)
...
>>> B()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 3, in __init__
TypeError: unbound method __init__() must be called with A instance as first argument (got B instance instead)

This is, in fact, illegal, and that is why you got the exception that you did.

This is all moot, however, since you shouldn't use TCPServer with subclassing :).



From eprparadocs at gmail.com  Thu Aug 24 11:50:46 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 13:50:46 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>
References: <20060824173747.1717.985871661.divmod.quotient.30371@ohm>
Message-ID: <44EDE6F6.1050008@gmail.com>

glyph at divmod.com wrote:
> On Thu, 24 Aug 2006 12:23:02 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> What I found when I did the following call:
> 
>> internet.TCPServer(tcpport,server.Site(r))
>>
>> that the call failed. Here is the trace output...perhaps someone can 
>> tell me what is wrong...
> 
> You have reversed something.
> 
>> Aug 24 12:22:26 sideshow whirlwind: [-]     return getattr(reactor, 
>> 'listen'+self.method)(*self.args, **self.kwargs)
>> Aug 24 12:22:26 sideshow whirlwind: [-] AttributeError: StorageService 
>> instance has no attribute 'args'
> 
> The last line of the traceback here refers to 'StorageService', not 
> 'TCPServer'.  StorageService was the name of the TCPServer subclass you 
> were using in your examples.  If you had been calling rather than 
> subclassing TCPServer, presumably there would be no StorageService 
> anywhere, least of all in the 'self' slot of a method on TCPServer in a 
> traceback.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Yes I noticed...and a few people sort of told me that without me 
catching on.

Chaz



From eprparadocs at gmail.com  Thu Aug 24 12:13:09 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 14:13:09 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
Message-ID: <44EDEC35.6060502@gmail.com>

glyph at divmod.com wrote:
> On Thu, 24 Aug 2006 12:54:38 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Chaz. wrote:
> 
>> It seems my one problem was that in the definition of my class...
> 
> Those classes are not really meant to be used by subclassing.
> 
>> That solved my immediate problem, though I did find out that XMLRPC 
>> does in fact assume that you have a connection oriented protocol 
>> underneath it. Now I will just have to fix that problem.
> 
> How do you propose to "fix" that property of XMLRPC?  It's not really a 
> "problem", in that it's *defined* to use not only a connection, but an 
> HTTP connection at that.  From the XML-RPC specification: "An XML-RPC 
> message is an HTTP-POST request."
> 
> There is Jabber-RPC, which indicates how you might make an XMLRPC-*like* 
> protocol over some other transport, but in your case that still requires 
> a reliable multicast message delivery layer (a monumental task by itself).
> 
> What is the application you are writing this for?
> 
>> Also for those of you that said you can't do:
>>
>> internet.TCPServer.__init__(self,...)
>>
>> I would suggest you are wrong. In fact that is exactly how subclassing 
>> works in Python. But that is for another time.
> 
> You misunderstood.  I assure you they were correct, but that isn't what 
> they said.  Simplified, here is what you did:
> 
>>>> class A:
> ...  def __init__(self):
> ...   print self
> ...
>>>> class B:
> ...  def __init__(self):
> ...   A.__init__(self)
> ...
>>>> B()
> Traceback (most recent call last):
>  File "<stdin>", line 1, in ?
>  File "<stdin>", line 3, in __init__
> TypeError: unbound method __init__() must be called with A instance as 
> first argument (got B instance instead)
> 
> This is, in fact, illegal, and that is why you got the exception that 
> you did.
> 
> This is all moot, however, since you shouldn't use TCPServer with 
> subclassing :).
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

First, I got the mistake I made. It was the standard "cut-and-paste" 
problem. I cut code from one place, pasted it in another and forgot one 
piece all together.

I have a thousand or more processors running in an application and need 
to send out a request to each and every one of them. Obviously it is 
impossible to send it out sequentially and it doesn't need to.

The model of communication I am working from is that most communications 
are delivered and only once in a while do they fail (this is pretty true 
of an un-congested ethernet-like network).

So my algorithm is as follows (and if someone sees something wrong 
please let me know...a thousand pairs of eyes and brains is better than 
one). Send out the RPC request via Multicast. Set some timeout (based on 
  the request type). Since I know the servers in the collection, when I 
don't hear from one within the time out, resend the RPC request.

There is a problem with this approach - that is the semantics of the 
call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
doesn't. In this there is an uncertainty - it might have worked and I 
don't know about it (the response was lost for instance) or the server 
itself failed and restarted. This means I can't every be guaranteed the 
normal call semantics. It means it switches to AT LEAST ONCE semantics. 
  This means I have to be careful in how I code the server side.

Does anyone see another approach.

Chaz





From eprparadocs at gmail.com  Thu Aug 24 12:30:48 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 14:30:48 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
Message-ID: <44EDF058.9060301@gmail.com>

In my code :

class StorageService(internet.TCPServer):
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         internet.TCPServer.__init__(self,tcpPort,server.Site(r))

I specifically used internet.TCPServer as a parent class so that I could 
do a .setServiceParent() on the object returned.

If I rewrite the code as:

class StorageService:
     def __init__(self,tcpPort,configInfo):
         r = StoragePeer(configInfo)
         xmlrpc.addIntrospection(r)
         self.r = internet.TCPServer(tcpPort,server.Site(r))

     def setServiceParent(self,arg) :
         self.r.setServiceParent(arg)

I get an equivalent effect.

So my question is why is subclassing internet.TCPServer not a good idea?


Chaz





From itamar at itamarst.org  Thu Aug 24 12:55:28 2006
From: itamar at itamarst.org (Itamar Shtull-Trauring)
Date: Thu, 24 Aug 2006 14:55:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDEC35.6060502@gmail.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
	<44EDEC35.6060502@gmail.com>
Message-ID: <1156445728.5653.27.camel@localhost.localdomain>

On Thu, 2006-08-24 at 14:13 -0400, Chaz. wrote:

> There is a problem with this approach - that is the semantics of the 
> call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
> doesn't. In this there is an uncertainty - it might have worked and I 
> don't know about it (the response was lost for instance) or the server 
> itself failed and restarted. This means I can't every be guaranteed the 
> normal call semantics. It means it switches to AT LEAST ONCE semantics. 
>   This means I have to be careful in how I code the server side.
 
If your protocol has a unique message identifier you can make sure
duplicate commands are not rerun.




From eprparadocs at gmail.com  Thu Aug 24 13:13:35 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Thu, 24 Aug 2006 15:13:35 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <1156445728.5653.27.camel@localhost.localdomain>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>	
	<44EDEC35.6060502@gmail.com>
	<1156445728.5653.27.camel@localhost.localdomain>
Message-ID: <44EDFA5F.5080007@gmail.com>

Itamar Shtull-Trauring wrote:
> On Thu, 2006-08-24 at 14:13 -0400, Chaz. wrote:
> 
>> There is a problem with this approach - that is the semantics of the 
>> call. Current RPC calls are EXACTLY ONCE semantics - it either works or 
>> doesn't. In this there is an uncertainty - it might have worked and I 
>> don't know about it (the response was lost for instance) or the server 
>> itself failed and restarted. This means I can't every be guaranteed the 
>> normal call semantics. It means it switches to AT LEAST ONCE semantics. 
>>   This means I have to be careful in how I code the server side.
>  
> If your protocol has a unique message identifier you can make sure
> duplicate commands are not rerun.
> 
> 
I thought about doing that but ruled it out. So long as the server runs 
I can count on the UID being stepped correctly. If the server goes down 
and comes back up, it might be reset or set incorrectly.  So I can't 
guarantee it. Can you see another way around the problem?

Chaz




From beau at open-source-staffing.com  Thu Aug 24 17:22:08 2006
From: beau at open-source-staffing.com (Beau Gould)
Date: Thu, 24 Aug 2006 18:22:08 -0500
Subject: [Twisted-Python] [JOB] Python Developer, Palo Alto, CA | 90-115k
Message-ID: <007b01c6c7d4$1eb1a2b0$ecf5b248@BEAU>

Python Developer, Palo Alto, CA | 90-115k

My client is a stealth web 2.0 company with offices in Palo Alto and San
Francisco. They are building an online film community and global media
network that will revolutionize the way we consume and share media
today.
 
My client is rapidly growing its engineering team as this market demands
cutting-edge web-based and software technologies. They are looking for
energetic, self-starters to join their venture. As one of their earlier
members in their R&D team, you will be able to make a huge difference;
from designing and building the product to making sure it is one of the
highest quality web properties on the internet. The product will be
shipped to a potential user community of millions. You will work
alongside some of the brightest people in the industry using some of the
most advanced technologies available today.

In particular, their backend web application is 90% Python. They also
leverage a lot of existing open source Python modules like Pyrex,
Twisted framework, Pylucene, etc. Using Python, you will be building a
production strength web application for millions. 

If you are looking for a technical challenge and want to develop and
contribute to some of the best software around in a web 2.0 environment,
they have a position for you. We offer full-time employment with
benefits and ground floor equity participation. 

We are backed by a veteran management team with successful track record
that is committed to fostering a distinctive culture in a great company.

Server software engineer requirements: 
* BS/MS in Computer Science or related field.  
* Several years of software development experience. 
* Multi-threaded backend server development experience in Python
(preferred), Java, or C++. 
* Internet experience such as web services, LAMP architecture, etc. 
* Database application development knowledge as in SQL, database schema
design, and database optimization. 
* Network programming experience w/ TCP/IP a plus.

If you are local to the Palo Alto area, please submit your resume,
salary requirements, and a paragraph (or two) highlighting your
skills/experience as it pertains to this job to
beau at open-source-staffing.com 

Python/Zope Jobs: http://groups.yahoo.com/group/pythonzopejobs 




From eprparadocs at gmail.com  Fri Aug 25 06:26:23 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 08:26:23 -0400
Subject: [Twisted-Python] Reliable Datagram Protocol?
Message-ID: <44EEEC6F.3050902@gmail.com>

I have need for a reliable datagram protocol running under Twisted. So 
far I have found AirHook (2003) and an RDP implementation that was 
posted on p2p-hackers (2004). I have also found Divmod's Vertex.

I was wondering if anyone has had any experience with any of these 
implementations? Has anyone heard of any other RDP implementation?

Peace,
Chaz



From sam at SpinwardStars.com  Fri Aug 25 07:59:41 2006
From: sam at SpinwardStars.com (Samuel Reynolds)
Date: Fri, 25 Aug 2006 07:59:41 -0600
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EDEC35.6060502@gmail.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>
	<44EDEC35.6060502@gmail.com>
Message-ID: <6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>

At 2006-08-24 02:13 PM -0400, you wrote:
>I have a thousand or more processors running in an application and need to 
>send out a request to each and every one of them.

This is an incomplete statement of the problem.
To get assistance you need to more fully
state the problem you're trying to solve.

What are you trying to accomplish?
1. Are you...
    a. sending data *to* each processor from a central server
       (e.g., configuration data)?
    b. retrieving data *from* each processor for
       display/processing at a central server
       (e.g., status information)?
    c. both?
2. How often do you need to send/receive the data?
3. How much latency is acceptable?
4. How much data loss is acceptable?

Your desire to use multicast suggests that you're doing 1a.
If 1c, you need to specify 2-4 separately for both 1a and 1b.

Without this (and probably other) information,
any solution suggested (or adopted) is, at best,
a hammer looking for a nail.

>Obviously it is impossible to send it out sequentially and it doesn't need to.

Very little is actually impossible.

>The model of communication I am working from is that most communications 
>are delivered and only once in a while do they fail (this is pretty true 
>of an un-congested ethernet-like network).
>
>So my algorithm is as follows (and if someone sees something wrong please 
>let me know...a thousand pairs of eyes and brains is better than one). 
>Send out the RPC request via Multicast. Set some timeout (based on  the 
>request type). Since I know the servers in the collection, when I don't 
>hear from one within the time out, resend the RPC request.

Hammer.
Look at the whole toolbox.
Don't settle too quickly on one tool;
you might need a screwdriver, instead.

For example, each processor might periodically call
the central server to send its status information.
Or it might call the central server only when it
has new data to send, and otherwise make a simpler,
low-overhead "heartbeat" call for monitoring.

HTH.

- Sam

__________________________________________________________
Spinward Stars, LLC                        Samuel Reynolds
Software Consulting and Development           303-805-1446
http://SpinwardStars.com/            sam at SpinwardStars.com 





From glyph at divmod.com  Fri Aug 25 09:18:32 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 11:18:32 -0400
Subject: [Twisted-Python] Reliable Datagram Protocol?
In-Reply-To: <44EEEC6F.3050902@gmail.com>
Message-ID: <20060825151832.1717.1861157954.divmod.quotient.30996@ohm>

On Fri, 25 Aug 2006 08:26:23 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>I have need for a reliable datagram protocol running under Twisted. So far I 
>have found AirHook (2003) and an RDP implementation that was posted on p2p- 
>hackers (2004). I have also found Divmod's Vertex.

Vertex's "reliable datagram protocol" is a rather literal-minded re-implementation of TCP on UDP.  This won't help you with multicast.  Its purpose is to get through NATs.

It's definitely not ready for prime-time, either.  It's suffering from an extreme lack of maintenance as Divmod is trying to ship an unrelated product, and in the meanwhile some rather serious bugs have been discovered.  While it would only take a few weeks of work to fix those issues, it has never been deployed in a realistic way.

However, its "PTCP" implementation may be a valuable learning tool.  I would recommend familiarizing yourself with what TCP does; the first time I wrote Vertex I tried to do some clever things because I thought I didn't need "all of" TCP, but I was dead wrong.  TCP is an extremely sophisticated protocol that gets a lot of the issues completely right.




From jsepulveda at tecnova.cl  Fri Aug 25 09:22:16 2006
From: jsepulveda at tecnova.cl (=?ISO-8859-1?Q?Jorge_Sep=FAlveda_Pereda?=)
Date: Fri, 25 Aug 2006 11:22:16 -0400
Subject: [Twisted-Python] twisted rpm
Message-ID: <1798295731.4581156519336620.JavaMail.tomcat@dell.tecnova.cl>

Hi, i need to know, if there are, a twisted install RPM for Fedora linux ( FC4) . 




Thanks. 
(sorry for my english) 

Jorge. 







From eprparadocs at gmail.com  Fri Aug 25 10:05:50 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 12:05:50 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>
References: <20060824174856.1717.70300038.divmod.quotient.30377@ohm>	<44EDEC35.6060502@gmail.com>
	<6.1.2.0.0.20060825074217.05c96060@mail.myedl.com>
Message-ID: <44EF1FDE.6000408@gmail.com>

Samuel Reynolds wrote:
> At 2006-08-24 02:13 PM -0400, you wrote:
>> I have a thousand or more processors running in an application and 
>> need to send out a request to each and every one of them.
> 
> This is an incomplete statement of the problem.
> To get assistance you need to more fully
> state the problem you're trying to solve.
> 
> What are you trying to accomplish?
> 1. Are you...
>    a. sending data *to* each processor from a central server
>       (e.g., configuration data)?
>    b. retrieving data *from* each processor for
>       display/processing at a central server
>       (e.g., status information)?
>    c. both?
> 2. How often do you need to send/receive the data?
> 3. How much latency is acceptable?
> 4. How much data loss is acceptable?
> 
> Your desire to use multicast suggests that you're doing 1a.
> If 1c, you need to specify 2-4 separately for both 1a and 1b.
> 
> Without this (and probably other) information,
> any solution suggested (or adopted) is, at best,
> a hammer looking for a nail.
> 
>> Obviously it is impossible to send it out sequentially and it doesn't 
>> need to.
> 
> Very little is actually impossible.
> 
>> The model of communication I am working from is that most 
>> communications are delivered and only once in a while do they fail 
>> (this is pretty true of an un-congested ethernet-like network).
>>
>> So my algorithm is as follows (and if someone sees something wrong 
>> please let me know...a thousand pairs of eyes and brains is better 
>> than one). Send out the RPC request via Multicast. Set some timeout 
>> (based on  the request type). Since I know the servers in the 
>> collection, when I don't hear from one within the time out, resend the 
>> RPC request.
> 
> Hammer.
> Look at the whole toolbox.
> Don't settle too quickly on one tool;
> you might need a screwdriver, instead.
> 
> For example, each processor might periodically call
> the central server to send its status information.
> Or it might call the central server only when it
> has new data to send, and otherwise make a simpler,
> low-overhead "heartbeat" call for monitoring.
> 
> HTH.
> 
> - Sam
> 
> __________________________________________________________
> Spinward Stars, LLC                        Samuel Reynolds
> Software Consulting and Development           303-805-1446
> http://SpinwardStars.com/            sam at SpinwardStars.com
> 
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Since the title of the email is Multicast XML-RPC I would say I was 
pretty specific. I need to send XML-RPC requests to thousands of 
machines, something that can't be done using a connection oriented 
protocol via TCP very efficiently.

Chaz.





From exarkun at divmod.com  Fri Aug 25 10:17:23 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Aug 2006 12:17:23 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF1FDE.6000408@gmail.com>
Message-ID: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>

On Fri, 25 Aug 2006 12:05:50 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Samuel Reynolds wrote:
>>At 2006-08-24 02:13 PM -0400, you wrote:
>>>I have a thousand or more processors running in an application and need to 
>>>send out a request to each and every one of them.
>>
>>This is an incomplete statement of the problem.
>>To get assistance you need to more fully
>>state the problem you're trying to solve.
>>
>>What are you trying to accomplish?
>>1. Are you...
>>    a. sending data *to* each processor from a central server
>>       (e.g., configuration data)?
>>    b. retrieving data *from* each processor for
>>       display/processing at a central server
>>       (e.g., status information)?
>>    c. both?
>>2. How often do you need to send/receive the data?
>>3. How much latency is acceptable?
>>4. How much data loss is acceptable?
>
>Since the title of the email is Multicast XML-RPC I would say I was pretty 
>specific. I need to send XML-RPC requests to thousands of machines, 
>something that can't be done using a connection oriented protocol via TCP 
>very efficiently.
>
>Chaz.
>

Multicast is a choice for a solution to a problem.  So is "sending XML-RPC
requests to thousands of machines".  Neither are themselves descriptions
of a problem; rather, they are descriptions of a solution.

Sam is asking for more information about the problem you are trying to
solve.

Jean-Paul



From eprparadocs at gmail.com  Fri Aug 25 11:07:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 13:07:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>
References: <20060825161723.1717.1869142984.divmod.quotient.31035@ohm>
Message-ID: <44EF2E65.8000101@gmail.com>

Jean-Paul Calderone wrote:
> On Fri, 25 Aug 2006 12:05:50 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Samuel Reynolds wrote:
>>> At 2006-08-24 02:13 PM -0400, you wrote:
>>>> I have a thousand or more processors running in an application and 
>>>> need to send out a request to each and every one of them.
>>>
>>> This is an incomplete statement of the problem.
>>> To get assistance you need to more fully
>>> state the problem you're trying to solve.
>>>
>>> What are you trying to accomplish?
>>> 1. Are you...
>>>    a. sending data *to* each processor from a central server
>>>       (e.g., configuration data)?
>>>    b. retrieving data *from* each processor for
>>>       display/processing at a central server
>>>       (e.g., status information)?
>>>    c. both?
>>> 2. How often do you need to send/receive the data?
>>> 3. How much latency is acceptable?
>>> 4. How much data loss is acceptable?
>>
>> Since the title of the email is Multicast XML-RPC I would say I was 
>> pretty specific. I need to send XML-RPC requests to thousands of 
>> machines, something that can't be done using a connection oriented 
>> protocol via TCP very efficiently.
>>
>> Chaz.
>>
> 
> Multicast is a choice for a solution to a problem.  So is "sending XML-RPC
> requests to thousands of machines".  Neither are themselves descriptions
> of a problem; rather, they are descriptions of a solution.
> 
> Sam is asking for more information about the problem you are trying to
> solve.
> 
> Jean-Paul
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I will state what I thought was obvious: I need to make "calls" to 
thousands of machines to do something. I want to minimize the overhead 
both of making the call and the machines sending back the responses.

On the invoking side I believe multicast or broadcast is the way to go 
since I can send out one message and hit them all. On the response side 
I need a low-overhead protocol.

TCP is pretty resource intensive so I need something else. I think a 
reliable datagram service on top of some underlying transport is the way 
to go (on top of multicast/broadcast/IP is what I am thinking about).

I think this describes the problem well.

Chaz







From exarkun at divmod.com  Fri Aug 25 11:28:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Fri, 25 Aug 2006 13:28:35 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF2E65.8000101@gmail.com>
Message-ID: <20060825172835.1717.368957612.divmod.quotient.31074@ohm>

On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>
>I will state what I thought was obvious:

Sorry to inconvenience you so.

>
> [snip]
>
>I think this describes the problem well.

I'll leave it to others to decide.  For my part, I don't believe I have any
else productive to contribute.

Jean-Paul



From glyph at divmod.com  Fri Aug 25 11:54:42 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 13:54:42 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF2E65.8000101@gmail.com>
Message-ID: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>

On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>I will state what I thought was obvious: I need to make "calls" to thousands 
>of machines to do something. I want to minimize the overhead both of making 
>the call and the machines sending back the responses.

Maybe you could start off a little bit further back into the problem today.  Like, "I got up this morning, and I thought, 'I would like some toast.', but I don't know how to make toast, so I wanted to design a 100,000 node parallel neural network to develop a receipie for toast."

Perhaps then someone on this list could relate their toast development experiences, such as "using a TCP-based tree topology similar to IRC servers has been sufficient in my experience for toast-oriented data exchange although I have been using a parallelized coordinated genetic algorithm rather than a neural network to develop an optimal crunch/warmth experience", or possibly "ToastVortex, my Twisted-basted toast application server is available at http://toastvortex.example.com/" or better yet, "buy a toaster and put some bread in it".

>TCP is pretty resource intensive so I need something else. I think a 
>reliable datagram service on top of some underlying transport is the way to 
>go (on top of multicast/broadcast/IP is what I am thinking about).

TCP's "resource" consumption is localized in an a highly optimized environment; in OS kernels, where the TCP stack is tuned constantly by thousands of people, in routing hardware that is specialized to give TCP traffic priority to improve performance, and in the guts of the public internet that runs such hardware and is constantly monitored and tweaked to give TCP even more of a boost.  Any custom multicast protocol you develop, while perhaps theoretically better than TCP, is possibly going to get swamped by the marginalia that TCP has spent decades eradicating.  In Python, you're going to be doing a lot of additional CPU work.  For example, TCP acks often won't even be promoted to userspace, whereas you're going to need to process every unicast acknowledgement to your multicast message separately in userspace.

While my toast network deployments are minimal, I *have* written quite a few multi-unicast servers, some of which processed quite a high volume of traffic acceptably, and in at least one case this work was later optimized by another developer who spent months working on a multicast replacement.  That replacement which was later abandoned because the deployment burden of a large-scale multicast-capable network was huge.  That's to say nothing of the months of additional time required to develop and properly *test* such a beast.

You haven't said what resources TCP is consuming which are unacceptble, however,  Is it taking too much system time?  Too much local bandwidth?  Is your ethernet experiencing too many collisions?  Are you concerned about the cost of public internet bandwidth overages with your service provider?  What's your network topology?  It would be hard to list the answers to all of these questions (or even exhaustively ask all the questions one would need to comment usefully) but one might at least make guesses that did not fall too wide of the mark if one knew what the application in question were actually *doing*.

In any event, XML-RPC is hardly a protocol which is famous for its low resource consumption on any of these axes, so if you're driven by efficiency concerns, it seems an odd choice to layer on top of a hand-tuned multicast-request/unicast-response protocol.



From glyph at divmod.com  Fri Aug 25 12:20:53 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 14:20:53 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <44EDF058.9060301@gmail.com>
Message-ID: <20060825182053.1717.1838518131.divmod.quotient.31108@ohm>

On Thu, 24 Aug 2006 14:30:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>So my question is why is subclassing internet.TCPServer not a good idea?

In the general case, the short version is: "Because we wrote that code, and we say so."

Usually I am not a big fan of the "argument from authority", but in this case, it has a special significance.  When a developer on a library you're using says "this is the correct, supported method to use interface XYZ", that means that is the method they are going to be supporting in the future, and unsupported usages may break.  It is in your best interest to stick to the supported usage if you ever intend to upgrade that library.

In a future version of twisted.internet.application, for example, it may be deemed a good idea to make TCPServer and friends a set of functions rather than classes for some reason.  Since you're supposed to be calling them and not subclassing them, that usage will continue to work, but subclassing won't.

Calling is generally better than subclassing anyway.  When you subclass, a number of undesirable things happen: in any language with multiple inheritance this is a problem, but in Python especially, you inherit all sorts of things from your superclass other than simple functionality.

For one thing, object semantics.  Maybe you used to be a classic class, but subclassing turns you into a new-style class before you're ready to make that switch.  Maybe your superclass has a bizarre metaclass which performs some mutation you didn't expect.  Maybe it has a __new__ which does something weird.

Then you inherit state.  Your 'self.' namespace becomes polluted with additional variable names that may conflict with your own.  These names may change in future releases, so even if they don't conflict now, they may in future releases.

While inheritance can be a useful tool, it is a lot more complex than composition, so you should generally avoid it unless all these ugly side-effects are actually desirable properties in your particular application.  In the case of twisted.application.internet, they are not.  That's not to say they *never* are: default implementation classes paired with interfaces can insulate your applications from certain varieties of change in libraries, and sometimes all those object-model features described as annoyances above are incredibly useful (most usually in persistence libraries like Axiom or ZODB).



From eprparadocs at gmail.com  Fri Aug 25 12:43:43 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 14:43:43 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
Message-ID: <44EF44DF.8030401@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 13:07:49 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> I will state what I thought was obvious: I need to make "calls" to 
>> thousands of machines to do something. I want to minimize the overhead 
>> both of making the call and the machines sending back the responses.
> 
> Maybe you could start off a little bit further back into the problem 
> today.  Like, "I got up this morning, and I thought, 'I would like some 
> toast.', but I don't know how to make toast, so I wanted to design a 
> 100,000 node parallel neural network to develop a receipie for toast."
> 
> Perhaps then someone on this list could relate their toast development 
> experiences, such as "using a TCP-based tree topology similar to IRC 
> servers has been sufficient in my experience for toast-oriented data 
> exchange although I have been using a parallelized coordinated genetic 
> algorithm rather than a neural network to develop an optimal 
> crunch/warmth experience", or possibly "ToastVortex, my Twisted-basted 
> toast application server is available at 
> http://toastvortex.example.com/" or better yet, "buy a toaster and put 
> some bread in it".
> 
>> TCP is pretty resource intensive so I need something else. I think a 
>> reliable datagram service on top of some underlying transport is the 
>> way to go (on top of multicast/broadcast/IP is what I am thinking about).
> 
> TCP's "resource" consumption is localized in an a highly optimized 
> environment; in OS kernels, where the TCP stack is tuned constantly by 
> thousands of people, in routing hardware that is specialized to give TCP 
> traffic priority to improve performance, and in the guts of the public 
> internet that runs such hardware and is constantly monitored and tweaked 
> to give TCP even more of a boost.  Any custom multicast protocol you 
> develop, while perhaps theoretically better than TCP, is possibly going 
> to get swamped by the marginalia that TCP has spent decades 
> eradicating.  In Python, you're going to be doing a lot of additional 
> CPU work.  For example, TCP acks often won't even be promoted to 
> userspace, whereas you're going to need to process every unicast 
> acknowledgement to your multicast message separately in userspace.
> 
> While my toast network deployments are minimal, I *have* written quite a 
> few multi-unicast servers, some of which processed quite a high volume 
> of traffic acceptably, and in at least one case this work was later 
> optimized by another developer who spent months working on a multicast 
> replacement.  That replacement which was later abandoned because the 
> deployment burden of a large-scale multicast-capable network was huge.  
> That's to say nothing of the months of additional time required to 
> develop and properly *test* such a beast.
> 
> You haven't said what resources TCP is consuming which are unacceptble, 
> however,  Is it taking too much system time?  Too much local bandwidth?  
> Is your ethernet experiencing too many collisions?  Are you concerned 
> about the cost of public internet bandwidth overages with your service 
> provider?  What's your network topology?  It would be hard to list the 
> answers to all of these questions (or even exhaustively ask all the 
> questions one would need to comment usefully) but one might at least 
> make guesses that did not fall too wide of the mark if one knew what the 
> application in question were actually *doing*.
> 
> In any event, XML-RPC is hardly a protocol which is famous for its low 
> resource consumption on any of these axes, so if you're driven by 
> efficiency concerns, it seems an odd choice to layer on top of a 
> hand-tuned multicast-request/unicast-response protocol.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

Perhaps the simple way to say this is that I need to do group 
communications that support RPC semantics with minimal overhead.

You ask about the network topology; all I can say is that it supports 
the normal communication means: unicast, broadcast and maybe multicast. 
I am being intentionally vague since I don't want to have any specific 
network architecture.

I don't want to use overlay networks, if at all possible. While they are 
nice, I would prefer something a little more direct (though that might 
not be possible). The reason? Direct operations are faster.

I have a membership list of the state of all the processors in the 
system (and I am talking 1000's of processors) without the use of 
standard heartbeat (in the traditional use of heartbeat I would have N! 
ping messages!). I figured out probabilistic polling with gossip was enough.

I don't particular care if it is PB, XML-RPC or SOAP as the marshalling 
mechanism. I mention them since they allow me to solve one problem at a 
time. I would like to build the solution a piece at a time to do some 
measurements and testing. Today the underlying transport and tomorrow 
the marshallings.

Now let me address the issue of TCP. It is a pretty heavy protocol to 
use. It takes a lot of resources on the sender and target and can take 
some time to establish a connection. Opening a 1000 or more sockets 
consumes a lot of resources in the underlying OS and in the Twisted client!

If I use TCP and stick to the serial, synchronized semantics of RPC, 
doing one call at a time, I have only a few ways to solve the problem. 
Do one call at a time, repeat N times, and that could take quite a 
while. I could do M spawnProcesses and have each do N/M RPC calls. Or I 
could use M threads and do it that way. Granted I have M sockets open at 
a time, it is possible for this to take quite a while to execute. 
Performance would be terrible (and yes I want an approach that has good 
to very good performance. After all who would want poor to terrible 
performance?)

So I divided the problem down to two parts. One, can I reduce the amount 
of traffic on the invoking side of the RPC request? Second, is how to 
deal with the response. Obviously I have to deal with the issue of 
failure, since RPC semantics require EXACTLY-ONCE.

That gets me to the multicast or broadcast scheme. In one call I could 
get the N processors to start working. Now I just have to solve the 
other half of the problem: how to get the answers returned without 
swamping the network or how to detect when I didn't get an answer from a 
processor at all.

That leads me to the observation that on an uncongested ethernet I 
almost always have a successful transmission. This means I have to deal 
with that issue and a few others. Why do I care? Because I believe I can 
accomplish what I need - get great performance most of the time, and 
only in a few instances have to deal with do the operation over again.

This is a tough problem to solve. I am not sure of the outcome but I am 
sure that I need to start somewhere. What I know is that it is partly 
transport and partly marshalling. The semantics of the call have to stay 
fixed: EXACTLY-ONCE.

Hope this helps cast the problem...I didn't mean to sound terse before I 
just figured everyone had already thought about the problem and knew the 
issues.

Chaz




From glyph at divmod.com  Fri Aug 25 13:05:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:05:21 -0400
Subject: [Twisted-Python] Not subclassing internet.TCPServer
In-Reply-To: <44EF4590.3@gmail.com>
Message-ID: <20060825190521.1717.1734156984.divmod.quotient.31135@ohm>

On Fri, 25 Aug 2006 14:46:40 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>Please don't take my questions as a slap. I just like to understand your 
>thinking. I am pretty new to Python (only the last year) and I was hoping to 
>understand your reasoning and get the wisdom of your experience.

No offense taken.  I just sent a longer response because I felt it might be useful to other lurkers on the list, and to refer to for posterity, as this is a question that any newcomer to Twisted's design approach might think to ask.



From eprparadocs at gmail.com  Fri Aug 25 13:36:28 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 15:36:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825190657.7857.1432542063.divmod.xquotient.35@joule.divmod.com>
References: <20060825190657.7857.1432542063.divmod.xquotient.35@joule.divmod.com>
Message-ID: <44EF513C.5000006@gmail.com>

radix at twistedmatrix.com wrote:
> On 06:43 pm, eprparadocs at gmail.com wrote:
>  >If I use TCP and stick to the serial, synchronized semantics of RPC, 
> doing
>  >one call at a time, I have only a few ways to solve the problem. Do 
> one call
>  >at a time, repeat N times, and that could take quite a while. I could 
> do M
>  >spawnProcesses and have each do N/M RPC calls. Or I could use M 
> threads and
>  >do it that way. Granted I have M sockets open at a time, it is 
> possible for
>  >this to take quite a while to execute. Performance would be terrible (and
>  >yes I want an approach that has good to very good performance. After 
> all who
>  >would want poor to terrible performance?)
> 
> Let's just focus on this one thing, ignoring other resource issues for 
> now, because I think it needs to be clarified. Maybe this isn't the 
> case, but it looks like you're totally misunderstanding how asynchronous 
> I/O works.
> 
> Here is an important thing: You can deal with multiple requests at the 
> same time even with TCP. You don't need to wait for one result before 
> you can send the next request. Send a bunch of requests at once, 
> asynchronously, and then deal with each response as it comes in. This 
> Just Works with multiple TCP connections in Twisted. No need for 
> threads, no need for Broadcast or Multicast.
> 

I understand about the state machine of Twisted and how it can do the 
requests. The problem is that I still get down to issuing 1000s of TCP 
requests (and on top of that XML-RPC, SOAP, PB or whatever). It does beg 
the question has anyone really used a twisted server (or client) to 
invoke thousands of simultaneous RPC requests?

Chaz




From glyph at divmod.com  Fri Aug 25 13:48:34 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:48:34 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF44DF.8030401@gmail.com>
Message-ID: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>

On Fri, 25 Aug 2006 14:43:43 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>Perhaps the simple way to say this is that I need to do group communications 
>that support RPC semantics with minimal overhead.

I'm still not really clear on what the application is.

>You ask about the network topology; all I can say is that it supports the 
>normal communication means: unicast, broadcast and maybe multicast.

Heh.  "Normal" communication means?  After writing a P2P layer and working on a SIP implementation, I have come to understand that the only "normal" communication available is an *outgoing*, *unencrypted* HTTP request on port 80... ;-)

More seriously, if you're writing an application for distributing compute nodes to home computers, multicast is a non-starter.  If it's an intranet, then maybe it's feasible.  Or, if you're on Internet 2 for some reason.  (Is anybody actually on internet 2 these days?)

At any rate, producing a functioning multiunicast prototype with, e.g. PB, would be the easiest way to get started if you need to fall back to that sort of topology anyway in the case where a multicast solution doesn't work.  Then you can collect data and determine how much bandwidth is going to be saved in a realistic scenario...

>I am being intentionally vague since I don't want to have any specific network 
>architecture.

If you want to support arbitrary network architecture, you _definitely_ can't use multicast, at all.  Even determining if *unicast* datagrams work on an arbitrary network is a hard problem.

>I don't want to use overlay networks, if at all possible. While they are 
>nice, I would prefer something a little more direct (though that might not 
>be possible). The reason? Direct operations are faster.

Sometimes.  If your topology involves an extremely well-connected overlay hub peer and a bunch of intermittently or poorly connected edge peers, direct operations can be significantly slower.  While I'm not a big fan of IRC's network architecture, the math on what happens if every client is responsible for all of their own messages on a channel of 1000 people is really eye-opening.

>I don't particular care if it is PB, XML-RPC or SOAP as the marshalling 
>mechanism. I mention them since they allow me to solve one problem at a 
>time. I would like to build the solution a piece at a time to do some 
>measurements and testing. Today the underlying transport and tomorrow the 
>marshallings.

It still seems to me like this is backwards.

The application can be complete, end-to-end, if you start marshalling data and sending it over a simplistic (but possibly too-expensive) mechanism.  Then, you can replace the transport as necessary later.  Preserving the semantics of the marshalling between things as radically different as XMLRPC and PB would be very hard; but as you've said, the semantics of your transport must remain identical.

>Now let me address the issue of TCP. It is a pretty heavy protocol to use. 
>It takes a lot of resources on the sender and target and can take some time 
>to establish a connection. Opening a 1000 or more sockets consumes a lot of 
>resources in the underlying OS and in the Twisted client!

I still don't know what you mean by "resources", and as compared to what.  In my experience all the alternatives to TCP end up consuming an equivalent amount of RAM and CPU time... although in some cases you might save on bandwidth.

>If I use TCP and stick to the serial, synchronized semantics of RPC, doing 
>one call at a time, I have only a few ways to solve the problem. Do one call 
>at a time, repeat N times, and that could take quite a while.

I'm not sure what you mean by "at a time".  The operations can be quite effectively parallelized, both by TCP and by Twisted talking to the OS: if you keep a list of all your open connections and do the naive thing, i.e., for each heartbeat:

    for connection in connections:
        connection.sendPing(timeout=30).addErrback(connection.uhOh)

the initial loop will not take very long even with a very large number of connections, and Twisted will send out traffic as network conditions permit.

Most importantly, you do not need to wait for any of the calls to complete to issue more calls, regardless of whether they're unicast or multicast.  This same API could be refactored internally to group together peers in the same multicast group and coalesce their pings; but you still need to do the same complexity order of work, because you have to track each peer's response individually.

Finally, if all you're concerned with is clients dying, you can remove Python from the equation entirely and let the TCP stack do its thing: set SO_KEEPALIVE on all your sockets [in Twisted-ese: self.transport.setTcpKeepAlive(True)] and just wait for connectionLost to be called when a ping fails.  No user-space work _at all_, and probably pretty minimal bandwidth usage.

>I could do M spawnProcesses and have each do N/M RPC calls.

Yow.  That definitely doesn't make sense unless you have a massively SMP box.

>Or I could use M threads and do it that way.

... and that would basically _never_ make sense, under any conditions.  Python's GIL negates any SMP benefits, Twisted won't send network messages from threads anyway, and it would be substantially more complex.

>Granted I have M sockets open at a time, it is possible for 
>this to take quite a while to execute. Performance would be terrible (and 
>yes I want an approach that has good to very good performance. After all who 
>would want poor to terrible performance?)

"performance 'would be' terrible" sounds like premature optimization to me.  At least, I have lots of experience with systems where this performance was more than good enough.  Huge massively multiplayer games use such systems and manage to deal with tens of thousands of concurrent clients per game node with (relative) ease, over the public internet, with good performance, and without breaking the bank on bandwidth.

>So I divided the problem down to two parts. One, can I reduce the amount of 
>traffic on the invoking side of the RPC request? Second, is how to deal with 
>the response. Obviously I have to deal with the issue of failure, since RPC 
>semantics require EXACTLY-ONCE.

If you're concerned about bandwidth *as a resource of its own* then this is perhaps a legitimate concern.  But if you're concerned about reducing bandwidth as a means to increase the real-time performance of the system I don't think that it's actually going to save you a lot.  You save some bandwidth, but then you move a bunch of request/response tracking out of hardware and into Python.  Unless your new algorithm is more efficient by a large margin, and N is very big indeed (100,000 is not "big", especially when you can partition it using techniques like overlay networks).

>That leads me to the observation that on an uncongested ethernet (...)

"uncongested ethernet" implies something very concrete about your network topology.  Certainly it implies that you have enough spare bandwith that you don't need to be compressing every byte.  Want to expound? :)

>Hope this helps cast the problem...I didn't mean to sound terse before I 
>just figured everyone had already thought about the problem and knew the 
>issues.

I still really don't know what the problem at hand is.  I gather it has something to do with sending a lot of traffic to a lot of peers but that is still a description of an implementation technique, not a problem.  Are you making toast?  Doing distributed testing?  Sequencing genomes?  Cracking encryption?  Writing some kind of monster distributed enterprise calendar server?  (I'm still not sure what you meant by "communicating groups", above.)  Is the "problem" in this case to develop a generic infrastructure for some wider set of problems, like an open-source implementation of a MapReduce daemon?  If so, what are the initial problems it's expected to be applied to?  What does all this data, other than hearbteats, that you're slinging around *represent*?



From glyph at divmod.com  Fri Aug 25 13:59:37 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 15:59:37 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF513C.5000006@gmail.com>
Message-ID: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>

On Fri, 25 Aug 2006 15:36:28 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>I understand about the state machine of Twisted and how it can do the 
>requests. The problem is that I still get down to issuing 1000s of TCP 
>requests (and on top of that XML-RPC, SOAP, PB or whatever). It does beg the 
>question has anyone really used a twisted server (or client) to invoke 
>thousands of simultaneous RPC requests?

Yes.  I have done exactly that, while load-testing PB.  Currently the only restriction I'm aware of that causes a real problem is python bug #1494314 (you can't use more than 1024 sockets at all in Python right now) but that will be fixed again in 2.4.4 and 2.5.0.

My results are meaningless in your context though; you should take some sample of your application and that load and measure it.  Maybe you'll find something entirely surprising is the bottleneck.



From eprparadocs at gmail.com  Fri Aug 25 14:33:52 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 16:33:52 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>
References: <20060825194834.1717.187287057.divmod.quotient.31160@ohm>
Message-ID: <44EF5EB0.2080309@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 14:43:43 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> Perhaps the simple way to say this is that I need to do group 
>> communications that support RPC semantics with minimal overhead.
> 
> I'm still not really clear on what the application is.
> 

The application is a massively scalable data storage system. I plan on 
releasing it into the open source community within the next month or so. 
I've been working on it for almost two years now. Twisted and Python 
have made easier work of it from my first implementation (C/C++).

>> You ask about the network topology; all I can say is that it supports 
>> the normal communication means: unicast, broadcast and maybe multicast.
> 
> Heh.  "Normal" communication means?  After writing a P2P layer and 
> working on a SIP implementation, I have come to understand that the only 
> "normal" communication available is an *outgoing*, *unencrypted* HTTP 
> request on port 80... ;-)
> 
> More seriously, if you're writing an application for distributing 
> compute nodes to home computers, multicast is a non-starter.  If it's an 
> intranet, then maybe it's feasible.  Or, if you're on Internet 2 for 
> some reason.  (Is anybody actually on internet 2 these days?)
> 
This is not a "home application" but an enterprise and/or SSP 
application. Most likely it sits behind a firewall and if remote offices 
need to access it, they will get access via VPN portals.

I guess this is sort of a topology! Doh. All I know is that I have 
multicast and with some effort broadcast support.

> At any rate, producing a functioning multiunicast prototype with, e.g. 
> PB, would be the easiest way to get started if you need to fall back to 
> that sort of topology anyway in the case where a multicast solution 
> doesn't work.  Then you can collect data and determine how much 
> bandwidth is going to be saved in a realistic scenario...
>

So I can use PB with multicast support? How would I deal with all the 
target machines getting responses back>

>> I am being intentionally vague since I don't want to have any specific 
>> network architecture.
> 
> If you want to support arbitrary network architecture, you _definitely_ 
> can't use multicast, at all.  Even determining if *unicast* datagrams 
> work on an arbitrary network is a hard problem.

As I said the entire system sits behind a firewall and remote sites will 
use VPN to get to the system. This gives me multicast and broadcast (so 
long as everything is on the same subnet, even remote sites).
> 
>> I don't want to use overlay networks, if at all possible. While they 
>> are nice, I would prefer something a little more direct (though that 
>> might not be possible). The reason? Direct operations are faster.
> 
> Sometimes.  If your topology involves an extremely well-connected 
> overlay hub peer and a bunch of intermittently or poorly connected edge 
> peers, direct operations can be significantly slower.  While I'm not a 
> big fan of IRC's network architecture, the math on what happens if every 
> client is responsible for all of their own messages on a channel of 1000 
> people is really eye-opening.
> 

I had thought of the hub-and-spoke model and I designed the system that 
way, originally. But I have to respond to instantaneous demands which 
caused me to change the design of the system. Each of the servers can 
run as both servers (providing a service to a client app) and an end 
point (providing storage features). So a hub-and-spoke architecture are 
really out of the picture for me (at least I can't see an easy way).

I could probably do a self-organizing overlay network on top of the 
machines taking advantage of how they are connected together (the real 
physical topology) but even that presents me with an issue: I want the 
system to sort of be self-configuring. As such I don't have a way to 
auto-detect connection speeds.

I had thought of using a clock-synchronization algorithm to figure out 
bandwidth throttling but I thought it better to leave that to another 
day (or days). I also don't want the user (or owner of this beast) to 
have to manually configure that stuff.


>> I don't particular care if it is PB, XML-RPC or SOAP as the 
>> marshalling mechanism. I mention them since they allow me to solve one 
>> problem at a time. I would like to build the solution a piece at a 
>> time to do some measurements and testing. Today the underlying 
>> transport and tomorrow the marshallings.
> 
> It still seems to me like this is backwards.
> 
> The application can be complete, end-to-end, if you start marshalling 
> data and sending it over a simplistic (but possibly too-expensive) 
> mechanism.  Then, you can replace the transport as necessary later.  
> Preserving the semantics of the marshalling between things as radically 
> different as XMLRPC and PB would be very hard; but as you've said, the 
> semantics of your transport must remain identical.

That is certainly one way. I tend to think all my hard problems are 
going to be transport issues and work up the stack. I have had a share 
of algorithm issues too; nothing is quite obvious when you have a 1000 
or 10,000 machines to deal with!

> 
>> Now let me address the issue of TCP. It is a pretty heavy protocol to 
>> use. It takes a lot of resources on the sender and target and can take 
>> some time to establish a connection. Opening a 1000 or more sockets 
>> consumes a lot of resources in the underlying OS and in the Twisted 
>> client!
> 
> I still don't know what you mean by "resources", and as compared to 
> what.  In my experience all the alternatives to TCP end up consuming an 
> equivalent amount of RAM and CPU time... although in some cases you 
> might save on bandwidth.
> 

By resources I mean memory and time. Granted on a 1GB system with 3 GB 
of virtual, memory isn't a big deal, most of the times. But I have seen 
memory leaks kill this sucker more times than I care to recall. Once I 
ran the application for a few days and saw all my swap being used! It 
was very subtle memory leak in one of the libraries (in fact one library 
leak consumed 584M in less than one hour!).

>> If I use TCP and stick to the serial, synchronized semantics of RPC, 
>> doing one call at a time, I have only a few ways to solve the problem. 
>> Do one call at a time, repeat N times, and that could take quite a while.
> 
> I'm not sure what you mean by "at a time".  The operations can be quite 
> effectively parallelized, both by TCP and by Twisted talking to the OS: 
> if you keep a list of all your open connections and do the naive thing, 
> i.e., for each heartbeat:
> 
>    for connection in connections:
>        connection.sendPing(timeout=30).addErrback(connection.uhOh)
> 
> the initial loop will not take very long even with a very large number 
> of connections, and Twisted will send out traffic as network conditions 
> permit.
> 
> Most importantly, you do not need to wait for any of the calls to 
> complete to issue more calls, regardless of whether they're unicast or 
> multicast.  This same API could be refactored internally to group 
> together peers in the same multicast group and coalesce their pings; but 
> you still need to do the same complexity order of work, because you have 
> to track each peer's response individually.

Yes, I completely forgot that I would see them all in parallel. I tend 
to overlook Twisted's state machine architecture when I think of 
solutions. I am getting better but not quite there yet...

> 
> Finally, if all you're concerned with is clients dying, you can remove 
> Python from the equation entirely and let the TCP stack do its thing: 
> set SO_KEEPALIVE on all your sockets [in Twisted-ese: 
> self.transport.setTcpKeepAlive(True)] and just wait for connectionLost 
> to be called when a ping fails.  No user-space work _at all_, and 
> probably pretty minimal bandwidth usage.
> 
>> I could do M spawnProcesses and have each do N/M RPC calls.
> 
> Yow.  That definitely doesn't make sense unless you have a massively SMP 
> box.
> 
>> Or I could use M threads and do it that way.
> 
> ... and that would basically _never_ make sense, under any conditions.  
> Python's GIL negates any SMP benefits, Twisted won't send network 
> messages from threads anyway, and it would be substantially more complex.

Yes...see my mea culpa above....it is hard to stop thinking in terms of 
threads and processes!

> 
>> Granted I have M sockets open at a time, it is possible for this to 
>> take quite a while to execute. Performance would be terrible (and yes 
>> I want an approach that has good to very good performance. After all 
>> who would want poor to terrible performance?)
> 
> "performance 'would be' terrible" sounds like premature optimization to 
> me.  At least, I have lots of experience with systems where this 
> performance was more than good enough.  Huge massively multiplayer games 
> use such systems and manage to deal with tens of thousands of concurrent 
> clients per game node with (relative) ease, over the public internet, 
> with good performance, and without breaking the bank on bandwidth.
> 

Do the games use TCP or UDP? I would have thought they save state about 
each of the players in the server and use UDP for message passing. I 
thought that was part of the reason most game developers where 
interested in STUN?


>> So I divided the problem down to two parts. One, can I reduce the 
>> amount of traffic on the invoking side of the RPC request? Second, is 
>> how to deal with the response. Obviously I have to deal with the issue 
>> of failure, since RPC semantics require EXACTLY-ONCE.
> 
> If you're concerned about bandwidth *as a resource of its own* then this 
> is perhaps a legitimate concern.  But if you're concerned about reducing 
> bandwidth as a means to increase the real-time performance of the system 
> I don't think that it's actually going to save you a lot.  You save some 
> bandwidth, but then you move a bunch of request/response tracking out of 
> hardware and into Python.  Unless your new algorithm is more efficient 
> by a large margin, and N is very big indeed (100,000 is not "big", 
> especially when you can partition it using techniques like overlay 
> networks).

Bandwidth is a very important issue in this system. No one would run 
this on their network if it could bring down their network (or congest 
it so badly ...the old packet-storm issue).

Minimizing bandwidth usage is only one way to deal with performance. A 
congested network will drop packets (requiring retransmission, etc), so 
I try to minimize the impact on the network.

> 
>> That leads me to the observation that on an uncongested ethernet (...)
> 
> "uncongested ethernet" implies something very concrete about your 
> network topology.  Certainly it implies that you have enough spare 
> bandwith that you don't need to be compressing every byte.  Want to 
> expound? :)
> 
Well a congested network is about 1/2 the bandwidth; so I can expect 
about 5Mb/sec on a 10M ethernet, etc. So the idea would be keep traffic 
to a minimum.

As I mentioned earlier, if I was to do normal heartbeat messages with N 
machines, I have N! messages moving around. So long as N is small - a 
few hundred machines (and I have built machines in the telecom world 
that have had 100 machines), the load on the network is reasonable. But 
once you have 1000 machines, you have a 1,000,000 messages flying 
around. Through the work I did I got the number down to 2,000! And over 
15 seconds, that isn't too bad.

>> Hope this helps cast the problem...I didn't mean to sound terse before 
>> I just figured everyone had already thought about the problem and knew 
>> the issues.
> 
> I still really don't know what the problem at hand is.  I gather it has 
> something to do with sending a lot of traffic to a lot of peers but that 
> is still a description of an implementation technique, not a problem.  
> Are you making toast?  Doing distributed testing?  Sequencing genomes?  
> Cracking encryption?  Writing some kind of monster distributed 
> enterprise calendar server?  (I'm still not sure what you meant by 
> "communicating groups", above.)  Is the "problem" in this case to 
> develop a generic infrastructure for some wider set of problems, like an 
> open-source implementation of a MapReduce daemon?  If so, what are the 
> initial problems it's expected to be applied to?  What does all this 
> data, other than hearbteats, that you're slinging around *represent*?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From eprparadocs at gmail.com  Fri Aug 25 14:37:30 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 16:37:30 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>
References: <20060825195937.1717.1220602026.divmod.quotient.31167@ohm>
Message-ID: <44EF5F8A.9070101@gmail.com>

glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 15:36:28 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> I understand about the state machine of Twisted and how it can do the 
>> requests. The problem is that I still get down to issuing 1000s of TCP 
>> requests (and on top of that XML-RPC, SOAP, PB or whatever). It does 
>> beg the question has anyone really used a twisted server (or client) 
>> to invoke thousands of simultaneous RPC requests?
> 
> Yes.  I have done exactly that, while load-testing PB.  Currently the 
> only restriction I'm aware of that causes a real problem is python bug 
> #1494314 (you can't use more than 1024 sockets at all in Python right 
> now) but that will be fixed again in 2.4.4 and 2.5.0.
> 
> My results are meaningless in your context though; you should take some 
> sample of your application and that load and measure it.  Maybe you'll 
> find something entirely surprising is the bottleneck.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

I guess I will have to switch to PB from XML-RPC. XML-RPC was convenient 
since I could write client apps in just about any language and access 
the system.

I know it is difficult in passing things between Python and anything 
else. Do you have any words of wisdom on how to limit the problems so 
that non-Python apps could talk to a PB enabled server?





From glyph at divmod.com  Fri Aug 25 15:18:09 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 17:18:09 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF5F8A.9070101@gmail.com>
Message-ID: <20060825211809.1717.677487305.divmod.quotient.31217@ohm>



On Fri, 25 Aug 2006 16:37:30 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>glyph at divmod.com wrote:

>I guess I will have to switch to PB from XML-RPC.

Not necessarily.  PB is more bandwidth-efficient but there are fewer tools to work with it, so marshalling complex data structures can be quite slow.  If you have small messages and a non-HTTP transport the differences may be negligible.

I was mainly using it as an example of a different possible vector of optimization.

>XML-RPC was convenient 
>since I could write client apps in just about any language and access the 
>system.

This convenience may well outweigh any real performance gain from using PB.

>I know it is difficult in passing things between Python and anything else. 
>Do you have any words of wisdom on how to limit the problems so that non- 
>Python apps could talk to a PB enabled server?

Nope.  You'd have to re-implement it.  If multilanguage access is a significant concern than PB is unlikely to be a good choice.



From glyph at divmod.com  Fri Aug 25 16:13:40 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Fri, 25 Aug 2006 18:13:40 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF5EB0.2080309@gmail.com>
Message-ID: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>

On Fri, 25 Aug 2006 16:33:52 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>glyph at divmod.com wrote:

>>I'm still not really clear on what the application is.
>
>The application is a massively scalable data storage system.

Okay!  Now I know what you're getting at :).

>This is not a "home application" but an enterprise and/or SSP application. 
>Most likely it sits behind a firewall and if remote offices need to access 
>it, they will get access via VPN portals.
>
>I guess this is sort of a topology! Doh. All I know is that I have multicast 
>and with some effort broadcast support.

OK, that makes more sense.

>>At any rate, producing a functioning multiunicast prototype with, e.g. PB, 
>>would be the easiest way to get started if you need to fall back to that 
>>sort of topology anyway in the case where a multicast solution doesn't 
>>work.  Then you can collect data and determine how much bandwidth is going 
>>to be saved in a realistic scenario...
>
>So I can use PB with multicast support? How would I deal with all the target 
>machines getting responses back>

My point here was really not anything about PB specifically.  Using PB with multicast would require some tricks; you'd have to have a different Broker implementation, probably, and a datagram-based API.  You could still use the underlying message serialization format though.

>I had thought of the hub-and-spoke model and I designed the system that way, 
>originally. But I have to respond to instantaneous demands which caused me 
>to change the design of the system. Each of the servers can run as both 
>servers (providing a service to a client app) and an end point (providing 
>storage features). So a hub-and-spoke architecture are really out of the 
>picture for me (at least I can't see an easy way).

I don't see that it's out of the picture - your network topology allows you to fairly effortlessly connect between machines (no need for NAT traversal or "home servers" or any of that garbage: just give an IP on the intranet) - just include the "hub" and "spoke" code in the same process, and then any process can act as a hub... dynamic load-balancing is never easy, but it is certainly a possibility.

>I could probably do a self-organizing overlay network on top of the machines 
>taking advantage of how they are connected together (the real physical 
>topology) but even that presents me with an issue: I want the system to sort 
>of be self-configuring. As such I don't have a way to auto-detect connection 
>speeds.

You can detect connection speeds on the fly; just start doing some work, gather statistics on each connection, and reconfigure if it's not going fast enough.  No need for clock synchronization.

>>>Today the underlying transport and tomorrow the marshallings.
>>
>>It still seems to me like this is backwards.
>>
>>The application can be complete, end-to-end, if you start marshalling data 
>>and sending it over a simplistic (but possibly too-expensive) mechanism. 
>>(...)
>That is certainly one way. I tend to think all my hard problems are going to 
>be transport issues and work up the stack. I have had a share of algorithm 
>issues too; nothing is quite obvious when you have a 1000 or 10,000 machines 
>to deal with!

Working up the stack is difficult because you can't measure the working system at any point to decide what you need to optimize.  I prefer to work downwards.  If your highest level of code can remain unchanged while you refactor the underlying layers, then you can run the same tests for the same high-level code with different underlying layers to get an idea of their relative performance.  If you start optimizing at the bottom of the stack before the top is done, then you can easily end up with something which is optimized in the wrong direction, and which requires rewriting when the top layer is done anyway.

I guess this doesn't really have much bearing on your other questions though.

>>>Now let me address the issue of TCP. It is a pretty heavy protocol to use. 

>>I still don't know what you mean by "resources", and as compared to what. 

>By resources I mean memory and time. Granted on a 1GB system with 3 GB of 
>virtual, memory isn't a big deal, most of the times. But I have seen memory 
>leaks kill this sucker more times than I care to recall. Once I ran the 
>application for a few days and saw all my swap being used! It was very 
>subtle memory leak in one of the libraries (in fact one library leak 
>consumed 584M in less than one hour!).

I notice you don't specifically refer to features of TCP here, but instead of the perils of writing any software at all in C/C++ :).  Of course, Python can have memory leaks, but I wouldn't base your architecture around bugs in libraries which will hopefully be unnecessary in the future :).

>Yes, I completely forgot that I would see them all in parallel. I tend to 
>overlook Twisted's state machine architecture when I think of solutions. I 
>am getting better but not quite there yet...

It might not solve your problem.  But Twisted may be doing quite a lot more work in "parallel" than you're used to.  I can't really say, but I'd be curious to hear about it if you measure it.

>> (Threads are bad)
>Yes...see my mea culpa above....it is hard to stop thinking in terms of 
>threads and processes!

Yeah, it took me a while to get out of that habit when I started writing Twisted in the first place :).  (The thing that preceded it was a blocking, multithreaded abomination.)

>Do the games use TCP or UDP? I would have thought they save state about each 
>of the players in the server and use UDP for message passing. I thought that 
>was part of the reason most game developers where interested in STUN?

They ... vary.  A general rule of thumb is that they use TCP (or something like it) for control messages and data transfer, and then an *unreliable* most-recent-first UDP protocol for transmitting information about physical position, orientation and movement.  Game protocols are incredibly involved because they're typically communicating information about a dozen systems at once.  Game performance is different than typical application performance because quite often you only care about the most recent state of something, and you can happily throw away any old messages.

The games that are interested in STUN are not MMPs; the reason they are using it is to establish P2P connections so that players don't have to receive their updates from a central server, and you don't need to configure your firewall to play.

>Bandwidth is a very important issue in this system. No one would run this on 
>their network if it could bring down their network (or congest it so badly 
>...the old packet-storm issue).

This is another good reason to use TCP.  There are congestion control mechanisms for TCP; you would have to implement something yourself for UDP.

>As I mentioned earlier, if I was to do normal heartbeat messages with N 
>machines, I have N! messages moving around. So long as N is small - a few 
>hundred machines (and I have built machines in the telecom world that have 
>had 100 machines), the load on the network is reasonable. But once you have 
>1000 machines, you have a 1,000,000 messages flying around. Through the work 
>I did I got the number down to 2,000! And over 15 seconds, that isn't too 
>bad.

Why N! messages?  Using a naive hub-and-spoke model it seems like it would just be 2N.  It's only if every node needs to know about every other node that you get up to N!... why would you need that?



From eprparadocs at gmail.com  Fri Aug 25 16:59:23 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Fri, 25 Aug 2006 18:59:23 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>
References: <20060825221340.1717.332837840.divmod.quotient.31247@ohm>
Message-ID: <44EF80CB.3080601@gmail.com>

Please forgive the top post...I just felt it better this time since the 
discussion has become one of heartbeat.

Well if you look at things like the linux clustering software the 
approach they take is brain dead - each machine pings all the others. If 
you had 2 machines, you would have 2 pings per cycle. With 3 machines, 
you would have 6 and so on.

If you do put an overlay network on top of the physical topology you 
would definitely have something different. And a hub-and-spoke layout 
would give you much more than 2N.

What I did was combine two approaches into a single mechanism. I use 
"gossip" to pass around the state of system as I know it (actually the 
changes in state). I use a probabilistic approach to find the machine to 
poll - I pick one randomly. If that machine doesn't answer I pick P 
other machines asking them to poll the original machine and tell me what 
  they found (with the idea it might be congestion between me and the 
original machine). I find this approach converges to the true state of 
the system within a few polling cycles.

Why do I need to know the state of all the machines? Actually the system 
does "self-repair" and "self-healing". When a node goes down and comes 
back up each node will check the information it knows about the node. 
Some nodes will recognize that the machine that just came back has to 
hold certain data, and tell it. That's the 5 cent answer.

Chaz.


glyph at divmod.com wrote:
> On Fri, 25 Aug 2006 16:33:52 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
>> glyph at divmod.com wrote:
> 
>>> I'm still not really clear on what the application is.
>>
>> The application is a massively scalable data storage system.
> 
> Okay!  Now I know what you're getting at :).
> 
>> This is not a "home application" but an enterprise and/or SSP 
>> application. Most likely it sits behind a firewall and if remote 
>> offices need to access it, they will get access via VPN portals.
>>
>> I guess this is sort of a topology! Doh. All I know is that I have 
>> multicast and with some effort broadcast support.
> 
> OK, that makes more sense.
> 
>>> At any rate, producing a functioning multiunicast prototype with, 
>>> e.g. PB, would be the easiest way to get started if you need to fall 
>>> back to that sort of topology anyway in the case where a multicast 
>>> solution doesn't work.  Then you can collect data and determine how 
>>> much bandwidth is going to be saved in a realistic scenario...
>>
>> So I can use PB with multicast support? How would I deal with all the 
>> target machines getting responses back>
> 
> My point here was really not anything about PB specifically.  Using PB 
> with multicast would require some tricks; you'd have to have a different 
> Broker implementation, probably, and a datagram-based API.  You could 
> still use the underlying message serialization format though.
> 
>> I had thought of the hub-and-spoke model and I designed the system 
>> that way, originally. But I have to respond to instantaneous demands 
>> which caused me to change the design of the system. Each of the 
>> servers can run as both servers (providing a service to a client app) 
>> and an end point (providing storage features). So a hub-and-spoke 
>> architecture are really out of the picture for me (at least I can't 
>> see an easy way).
> 
> I don't see that it's out of the picture - your network topology allows 
> you to fairly effortlessly connect between machines (no need for NAT 
> traversal or "home servers" or any of that garbage: just give an IP on 
> the intranet) - just include the "hub" and "spoke" code in the same 
> process, and then any process can act as a hub... dynamic load-balancing 
> is never easy, but it is certainly a possibility.
> 
>> I could probably do a self-organizing overlay network on top of the 
>> machines taking advantage of how they are connected together (the real 
>> physical topology) but even that presents me with an issue: I want the 
>> system to sort of be self-configuring. As such I don't have a way to 
>> auto-detect connection speeds.
> 
> You can detect connection speeds on the fly; just start doing some work, 
> gather statistics on each connection, and reconfigure if it's not going 
> fast enough.  No need for clock synchronization.
> 
>>>> Today the underlying transport and tomorrow the marshallings.
>>>
>>> It still seems to me like this is backwards.
>>>
>>> The application can be complete, end-to-end, if you start marshalling 
>>> data and sending it over a simplistic (but possibly too-expensive) 
>>> mechanism. (...)
>> That is certainly one way. I tend to think all my hard problems are 
>> going to be transport issues and work up the stack. I have had a share 
>> of algorithm issues too; nothing is quite obvious when you have a 1000 
>> or 10,000 machines to deal with!
> 
> Working up the stack is difficult because you can't measure the working 
> system at any point to decide what you need to optimize.  I prefer to 
> work downwards.  If your highest level of code can remain unchanged 
> while you refactor the underlying layers, then you can run the same 
> tests for the same high-level code with different underlying layers to 
> get an idea of their relative performance.  If you start optimizing at 
> the bottom of the stack before the top is done, then you can easily end 
> up with something which is optimized in the wrong direction, and which 
> requires rewriting when the top layer is done anyway.
> 
> I guess this doesn't really have much bearing on your other questions 
> though.
> 
>>>> Now let me address the issue of TCP. It is a pretty heavy protocol 
>>>> to use. 
> 
>>> I still don't know what you mean by "resources", and as compared to 
>>> what. 
> 
>> By resources I mean memory and time. Granted on a 1GB system with 3 GB 
>> of virtual, memory isn't a big deal, most of the times. But I have 
>> seen memory leaks kill this sucker more times than I care to recall. 
>> Once I ran the application for a few days and saw all my swap being 
>> used! It was very subtle memory leak in one of the libraries (in fact 
>> one library leak consumed 584M in less than one hour!).
> 
> I notice you don't specifically refer to features of TCP here, but 
> instead of the perils of writing any software at all in C/C++ :).  Of 
> course, Python can have memory leaks, but I wouldn't base your 
> architecture around bugs in libraries which will hopefully be 
> unnecessary in the future :).
> 
>> Yes, I completely forgot that I would see them all in parallel. I tend 
>> to overlook Twisted's state machine architecture when I think of 
>> solutions. I am getting better but not quite there yet...
> 
> It might not solve your problem.  But Twisted may be doing quite a lot 
> more work in "parallel" than you're used to.  I can't really say, but 
> I'd be curious to hear about it if you measure it.
> 
>>> (Threads are bad)
>> Yes...see my mea culpa above....it is hard to stop thinking in terms 
>> of threads and processes!
> 
> Yeah, it took me a while to get out of that habit when I started writing 
> Twisted in the first place :).  (The thing that preceded it was a 
> blocking, multithreaded abomination.)
> 
>> Do the games use TCP or UDP? I would have thought they save state 
>> about each of the players in the server and use UDP for message 
>> passing. I thought that was part of the reason most game developers 
>> where interested in STUN?
> 
> They ... vary.  A general rule of thumb is that they use TCP (or 
> something like it) for control messages and data transfer, and then an 
> *unreliable* most-recent-first UDP protocol for transmitting information 
> about physical position, orientation and movement.  Game protocols are 
> incredibly involved because they're typically communicating information 
> about a dozen systems at once.  Game performance is different than 
> typical application performance because quite often you only care about 
> the most recent state of something, and you can happily throw away any 
> old messages.
> 
> The games that are interested in STUN are not MMPs; the reason they are 
> using it is to establish P2P connections so that players don't have to 
> receive their updates from a central server, and you don't need to 
> configure your firewall to play.
> 
>> Bandwidth is a very important issue in this system. No one would run 
>> this on their network if it could bring down their network (or congest 
>> it so badly ...the old packet-storm issue).
> 
> This is another good reason to use TCP.  There are congestion control 
> mechanisms for TCP; you would have to implement something yourself for UDP.
> 
>> As I mentioned earlier, if I was to do normal heartbeat messages with 
>> N machines, I have N! messages moving around. So long as N is small - 
>> a few hundred machines (and I have built machines in the telecom world 
>> that have had 100 machines), the load on the network is reasonable. 
>> But once you have 1000 machines, you have a 1,000,000 messages flying 
>> around. Through the work I did I got the number down to 2,000! And 
>> over 15 seconds, that isn't too bad.
> 
> Why N! messages?  Using a naive hub-and-spoke model it seems like it 
> would just be 2N.  It's only if every node needs to know about every 
> other node that you get up to N!... why would you need that?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 




From p.mayers at imperial.ac.uk  Sat Aug 26 05:39:20 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 26 Aug 2006 12:39:20 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44EF44DF.8030401@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com>
Message-ID: <44F032E8.6070103@imperial.ac.uk>

Chaz. wrote:
> 
> Now let me address the issue of TCP. It is a pretty heavy protocol to 
> use. It takes a lot of resources on the sender and target and can take 
> some time to establish a connection. Opening a 1000 or more sockets 
> consumes a lot of resources in the underlying OS and in the Twisted client!

People keep trying to help you, and you keep repeating yourself. From 
what I can gather:

You *need* a relatively lightweight group communication method. My 
advice would be to investigate a message bus - see recent posts on this 
mailing list. "Spread" at www.spread.org and ActiveMQ (via the simple 
text-over-tcp-based STOMP protocol). Reports are that both can (under 
the right conditions) execute many thousands of group messages per second.

Failing that, Glyph has hinted at another approach. You could elect a 
small number (~1%) of your nodes as "proxies" so that as well as being 
clients, they act as intermediaries for messages. This is a simple form 
of overlay network, which you also stated you didn't want to use - lord 
knows why. People use these techniques for a reason - they work.

You *want* (have decided you want) a reliable multicast protocol over 
which you'll layer a simple RPC protocol. RMT (reliable multicast 
transport) is as yet an unsolved problem. It is VERY VERY hard. None 
exist for Twisted, to the best of my knowledge. I would be willing to 
bet money that, for "thousands" of nodes, the overhead of implementing 
such a protocol (in Python, one presumes) would exceed the overhead of 
just using TCP. If you had said "hundreds of thousands" of nodes, well, 
that would be different.

If you want to knock an RMT up based on the assumption you won't drop 
packets, then be my guest, but I would suggest that if you *really* 
believe multicast is that reliable, then your experience of IP multicast 
networks has been a lot more rosy than mine, and I run a very large one.

"reliable multicast" into google would be a good start - there are some 
good RFCs produced the the rmt IETF working group.

> 
> If I use TCP and stick to the serial, synchronized semantics of RPC, 
> doing one call at a time, I have only a few ways to solve the problem. 
> Do one call at a time, repeat N times, and that could take quite a 
> while. I could do M spawnProcesses and have each do N/M RPC calls. Or I 
> could use M threads and do it that way. Granted I have M sockets open at 
> a time, it is possible for this to take quite a while to execute. 
> Performance would be terrible (and yes I want an approach that has good 
> to very good performance. After all who would want poor to terrible 
> performance?)

Knuth and his comments on early optimisation apply here. Have you tried 
it? You might be surprised.

I have some Twisted code that does SNMP to over a thousand devices. This 
is, obviously, unicast UDP. The throughput is very high. A simple 
ACK-based sequence-numbered UDP unicast will very likely scale to 
thousands of nodes.

> 
> So I divided the problem down to two parts. One, can I reduce the amount 
> of traffic on the invoking side of the RPC request? Second, is how to 
> deal with the response. Obviously I have to deal with the issue of 
> failure, since RPC semantics require EXACTLY-ONCE.

How many calls per second are you doing, and approximately what volume 
of data will each call exchange?

You seem inflexible about aspects of the design. If if were me, I'd 
abandon RPC semantics. Smarter people than anyone here have argued 
convincingly against making a remote procedure call look anything like a 
local one, and once you abandon *that*, RPCs look like message exchanges.

> 
> That gets me to the multicast or broadcast scheme. In one call I could 
> get the N processors to start working. Now I just have to solve the 
> other half of the problem: how to get the answers returned without 
> swamping the network or how to detect when I didn't get an answer from a 
> processor at all.
> 
> That leads me to the observation that on an uncongested ethernet I 
> almost always have a successful transmission. This means I have to deal 

Successful transmission is really the easy bit for multicast. There is 
IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
upstream IGP flap, flooding issues due to global MSDP issues, and so forth.

> with that issue and a few others. Why do I care? Because I believe I can 
> accomplish what I need - get great performance most of the time, and 
> only in a few instances have to deal with do the operation over again.
> 
> This is a tough problem to solve. I am not sure of the outcome but I am 
> sure that I need to start somewhere. What I know is that it is partly 
> transport and partly marshalling. The semantics of the call have to stay 
> fixed: EXACTLY-ONCE.

If you MUST have EXACTLY-ONCE group communication semantics, you should 
use a message bus.



From eprparadocs at gmail.com  Sat Aug 26 07:08:49 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 09:08:49 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F032E8.6070103@imperial.ac.uk>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
Message-ID: <44F047E1.4010809@gmail.com>

Phil Mayers wrote:
> Chaz. wrote:
>>
>> Now let me address the issue of TCP. It is a pretty heavy protocol to 
>> use. It takes a lot of resources on the sender and target and can take 
>> some time to establish a connection. Opening a 1000 or more sockets 
>> consumes a lot of resources in the underlying OS and in the Twisted 
>> client!
> 
> People keep trying to help you, and you keep repeating yourself. From 
> what I can gather:
> 
> You *need* a relatively lightweight group communication method. My 
> advice would be to investigate a message bus - see recent posts on this 
> mailing list. "Spread" at www.spread.org and ActiveMQ (via the simple 
> text-over-tcp-based STOMP protocol). Reports are that both can (under 
> the right conditions) execute many thousands of group messages per second.
> 

I started out using Spread some time ago (more than 2 years ago). The 
implementation was limited to a hundred or so nodes (that is in the 
notes on the spread implementation). Secondly it isn't quite so 
lightweight as you think (I've measured the performance).

It is a very nice system but when it gets to 1000s of machines very 
little work has been done on solving many of the problems. My research 
on it goes back almost a decade starting out with Horus.

> Failing that, Glyph has hinted at another approach. You could elect a 
> small number (~1%) of your nodes as "proxies" so that as well as being 
> clients, they act as intermediaries for messages. This is a simple form 
> of overlay network, which you also stated you didn't want to use - lord 
> knows why. People use these techniques for a reason - they work.
> 

I know about overlay networks, gossip networks, etc. I have used both 
and would prefer something simpler. That is the reason for my pushing on 
this group - to see what ideas people might have. I appreciate Glyph's 
comments and perspectives - very refreshing - in contrast to the many I 
have gotten.

> You *want* (have decided you want) a reliable multicast protocol over 
> which you'll layer a simple RPC protocol. RMT (reliable multicast 
> transport) is as yet an unsolved problem. It is VERY VERY hard. None 
> exist for Twisted, to the best of my knowledge. I would be willing to 
> bet money that, for "thousands" of nodes, the overhead of implementing 
> such a protocol (in Python, one presumes) would exceed the overhead of 
> just using TCP. If you had said "hundreds of thousands" of nodes, well, 
> that would be different.
> 
> If you want to knock an RMT up based on the assumption you won't drop 
> packets, then be my guest, but I would suggest that if you *really* 
> believe multicast is that reliable, then your experience of IP multicast 
> networks has been a lot more rosy than mine, and I run a very large one.
> 
> "reliable multicast" into google would be a good start - there are some 
> good RFCs produced the the rmt IETF working group.
> 

Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
approaches they are being tossed about. I have tried to implement some 
of them. I just am not of the opinion that smart people can't find 
solutions to tough problems.

Is multicast or broadcast the right way? I don't know, but I do know 
that without trying we will never know. Having been part of the IETF 
community for a lot of years (I was part of the group that worked on 
SNMP v1 and the WinSock standard), I know that when the "pedal meets the 
metal" sometimes you discover interesting things.

>>
>> If I use TCP and stick to the serial, synchronized semantics of RPC, 
>> doing one call at a time, I have only a few ways to solve the problem. 
>> Do one call at a time, repeat N times, and that could take quite a 
>> while. I could do M spawnProcesses and have each do N/M RPC calls. Or 
>> I could use M threads and do it that way. Granted I have M sockets 
>> open at a time, it is possible for this to take quite a while to 
>> execute. Performance would be terrible (and yes I want an approach 
>> that has good to very good performance. After all who would want poor 
>> to terrible performance?)
> 
> Knuth and his comments on early optimisation apply here. Have you tried 
> it? You might be surprised.
>

I am sorry to say I don't know the paper or research you are referring 
to. Can you point me to some references?


> I have some Twisted code that does SNMP to over a thousand devices. This 
> is, obviously, unicast UDP. The throughput is very high. A simple 
> ACK-based sequence-numbered UDP unicast will very likely scale to 
> thousands of nodes.
>

Thanks for the information. This is what makes me think that I want 
something based on UDP and not TCP! And if I can do RMT (or some variant 
of it) I might be able to get better performance. But, as I said it is 
the nice thing about not having someone telling me I need to get a 
product out the door tomorrow! I have time to experiment and learn.


>>
>> So I divided the problem down to two parts. One, can I reduce the 
>> amount of traffic on the invoking side of the RPC request? Second, is 
>> how to deal with the response. Obviously I have to deal with the issue 
>> of failure, since RPC semantics require EXACTLY-ONCE.
> 
> How many calls per second are you doing, and approximately what volume 
> of data will each call exchange?
> 
This is information I can't provide since the system I have designing 
has no equivalent in the marketplace today (either commercial or open 
source). All I know is that the first version of the system I built - 
using C/C++ and a traditional architecture (a few dozens of machines) 
was able to handle 200 transactions/minute (using SOAP). While there 
were some "short messages" (less than an normal MTU), I had quite a few 
that topped out 50K bytes and some up to 100Mbytes.

Doing some research I have been told to expect a great many short ones 
and many very long ones; sort of an inverted bell curve. But there are 
very few real statistics. As I said I have to put a stake in the ground 
and build something so I am guessing where the problems might rest and 
trying to find some solutions for them. Hence my query.

> You seem inflexible about aspects of the design. If if were me, I'd 
> abandon RPC semantics. Smarter people than anyone here have argued 
> convincingly against making a remote procedure call look anything like a 
> local one, and once you abandon *that*, RPCs look like message exchanges.
>

I agree. I am not sure where the answer lies. I like Twisted because it 
affords a nice way to experiment with different mechanisms both at the 
transport and the semantic layer. I am looking for ideas! As I said I 
have the time and inclination to experiment. What I need are things that 
aren't obvious (because I haven't heard of them or thought of them).

>>
>> That gets me to the multicast or broadcast scheme. In one call I could 
>> get the N processors to start working. Now I just have to solve the 
>> other half of the problem: how to get the answers returned without 
>> swamping the network or how to detect when I didn't get an answer from 
>> a processor at all.
>>
>> That leads me to the observation that on an uncongested ethernet I 
>> almost always have a successful transmission. This means I have to deal 
> 
> Successful transmission is really the easy bit for multicast. There is 
> IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
> upstream IGP flap, flooding issues due to global MSDP issues, and so forth.
> 

I agree about the successful transmission. You've lost me on the IGMP 
part. Can you elaborate as to your thoughts?

>> with that issue and a few others. Why do I care? Because I believe I 
>> can accomplish what I need - get great performance most of the time, 
>> and only in a few instances have to deal with do the operation over 
>> again.
>>
>> This is a tough problem to solve. I am not sure of the outcome but I 
>> am sure that I need to start somewhere. What I know is that it is 
>> partly transport and partly marshalling. The semantics of the call 
>> have to stay fixed: EXACTLY-ONCE.
> 
> If you MUST have EXACTLY-ONCE group communication semantics, you should 
> use a message bus.
> 

I do know I need EXACTLY-ONCE semantics but how and where I implement 
them is the unknown. When you use TCP you assume the network provides 
the bulk of the solution. I have been thinking that if I use a less 
reliable network - one with low overhead - that I can provide the server 
part to do the EXACTLY-ONCE piece.

As to why I need EXACTLY-ONCE, well if I have to store something I know 
I absolutely need to store it. I can't be in the position that I don't 
know it has been stored - it must be there.

Thanks for the great remarks....I look forward to reading more.

Chaz



From pablo at minimoesfuerzo.org  Sat Aug 26 07:27:23 2006
From: pablo at minimoesfuerzo.org (Pablo Marti)
Date: Sat, 26 Aug 2006 14:27:23 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F047E1.4010809@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com>
Message-ID: <1156598844.7241.4.camel@localhost>

On Sat, 2006-08-26 at 09:08 -0400, Chaz. wrote:
> Phil Mayers wrote:
> > Chaz. wrote:
> >>
> >> Now let me address the issue of TCP. It is a pretty heavy protocol to 
> >> use. It takes a lot of resources on the sender and target and can take 
> >> some time to establish a connection. Opening a 1000 or more sockets 
> >> consumes a lot of resources in the underlying OS and in the Twisted 
> >> client!
> > 
> > Knuth and his comments on early optimisation apply here. Have you tried 
> > it? You might be surprised.
> >
> 
> I am sorry to say I don't know the paper or research you are referring 
> to. Can you point me to some references?

The full version of the quote is "We should forget about small
efficiencies, say about 97% of the time: premature optimization is the
root of all
evil." (http://www.cookcomputing.com/blog/archives/000084.html)

http://en.wikipedia.org/wiki/Optimization_(computer_science)

Very interesting thread.

Regards,
Pablo






From p.mayers at imperial.ac.uk  Sat Aug 26 07:53:13 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Sat, 26 Aug 2006 14:53:13 +0100
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F047E1.4010809@gmail.com>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com>
Message-ID: <44F05249.2060803@imperial.ac.uk>

Chaz. wrote:

> 
> I started out using Spread some time ago (more than 2 years ago). The 
> implementation was limited to a hundred or so nodes (that is in the 
> notes on the spread implementation). Secondly it isn't quite so 
> lightweight as you think (I've measured the performance).
> 
> It is a very nice system but when it gets to 1000s of machines very 
> little work has been done on solving many of the problems. My research 
> on it goes back almost a decade starting out with Horus.

I must admit to not having attempted to scale it that far, but I was 
under the impression that only the more expensive delivery modes were 
that costly. But by the sounds of it, you don't need me to tell you that.

> 
> Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
> approaches they are being tossed about. I have tried to implement some 
> of them. I just am not of the opinion that smart people can't find 
> solutions to tough problems.


Ok, in which case my apologies. My reading of your posts had lead me to 
believe, incorrectly, you may not be familiar with the various issues. 
In that case, you can (should) disregard most of it.

> 
> Is multicast or broadcast the right way? I don't know, but I do know 
> that without trying we will never know. Having been part of the IETF 

It's clearly right for some things - I'm just not sure how much 
bi-directional distribution would be helped by it, since you've got at 
some point to get the replies back.

> community for a lot of years (I was part of the group that worked on 
> SNMP v1 and the WinSock standard), I know that when the "pedal meets the 
> metal" sometimes you discover interesting things.

I didn't realise winsock went near the IETF. You learn something new 
every day.

>>
>> Knuth and his comments on early optimisation apply here. Have you 
>> tried it? You might be surprised.
>>
> 
> I am sorry to say I don't know the paper or research you are referring 
> to. Can you point me to some references?

Sorry, it's a phrase from Donald Knuth's (excellent) three-volume 
programming book, "The Art of Computer Programming". Highly recommended.

> 
> Thanks for the information. This is what makes me think that I want 
> something based on UDP and not TCP! And if I can do RMT (or some variant 
> of it) I might be able to get better performance. But, as I said it is 
> the nice thing about not having someone telling me I need to get a 
> product out the door tomorrow! I have time to experiment and learn.

When I wrote my reply I hadn't seen your comment on the app being 
distributed storage.

>> How many calls per second are you doing, and approximately what volume 
>> of data will each call exchange?
>>
> This is information I can't provide since the system I have designing 
> has no equivalent in the marketplace today (either commercial or open 
> source). All I know is that the first version of the system I built - 
> using C/C++ and a traditional architecture (a few dozens of machines) 
> was able to handle 200 transactions/minute (using SOAP). While there 
> were some "short messages" (less than an normal MTU), I had quite a few 
> that topped out 50K bytes and some up to 100Mbytes.

Oh. In which case more or less everything I wrote is useless!

>>
>> Successful transmission is really the easy bit for multicast. There is 
>> IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
>> upstream IGP flap, flooding issues due to global MSDP issues, and so 
>> forth.
>>
> 
> I agree about the successful transmission. You've lost me on the IGMP 
> part. Can you elaborate as to your thoughts?

Well, my experience of large multicast IPv4 networks is that short 
interruptions in multicast connectivity are not uncommon. There are a 
number of reasons for this, which can be broadly broken down into 1st 
hop and subsequent hop issues.

Basically, in a routed-multicast environment, I've seen the subnet IGMP 
querier (normally the gateway) get pre-empted by badly configured or 
plain broken OS stacks (e.g. someone running Linux with the IGMPv3 early 
patches). I've also seen confusion for highly-available subnets (e.g. 
VRRPed networks) where the IGMP querier and the multicast designated 
forwarder are different. This can cause issues with the IGMP snooping on 
the downstream layer2 switches when the DF is no longer on the path 
which the layer2 snooping builds.

You also get issues with upstream changes in the unicast routing 
topology affecting PIM.

Most of these are only issues with routed multicast. Subnet-local is a 
lot simpler, though you do still need an IGMP querier and switches with 
IGMP snooping.

> 
> I do know I need EXACTLY-ONCE semantics but how and where I implement 
> them is the unknown. When you use TCP you assume the network provides 
> the bulk of the solution. I have been thinking that if I use a less 
> reliable network - one with low overhead - that I can provide the server 
> part to do the EXACTLY-ONCE piece.
> 
> As to why I need EXACTLY-ONCE, well if I have to store something I know 
> I absolutely need to store it. I can't be in the position that I don't 
> know it has been stored - it must be there.
> 
> Thanks for the great remarks....I look forward to reading more.

This makes a lot more sense now I know it's storage related.

You're right, this is a tricky and uncommon problem.

Let me see if I've got this right:

You're building some kind of distributed storage service. Clients will 
access the storage by a "normal" protocol to one of the nodes. Reads 
from the store are relatively easy, but writes to the store will need to 
be distributed to all or a subset of the nodes. Obviously you'll have a 
mix of lots of small writes and some very large writes.

Hmm.

Are you envisioning that you might have >1 storage set on the nodes, and 
using a different multicast group per storage set to build optimal 
distribution?

You might be able to perform some tricks depending on whether this 
service provides block- or filesystem-level semantics. If it's the 
latter, you could import some techniques from the distributed version 
control arena - broadly speaking, node+version number each file and 
"broadcast" (in the application sense) just the file + 
newnode+newversion to the other store nodes, and have them lock the 
local copy and initiate a pull from the updated node.

For block-level storage, that's going to be a lot harder.

For the multicast, something like NORM, which as you probably know is 
basically forward-error-corrected transmit channel with 
receiver-triggered re-transmits, would probably work. An implementation 
would likely be non-trivial, but a fascinating project.



From eprparadocs at gmail.com  Sat Aug 26 08:14:48 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 10:14:48 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F05249.2060803@imperial.ac.uk>
References: <20060825175442.1717.404403970.divmod.quotient.31091@ohm>
	<44EF44DF.8030401@gmail.com> <44F032E8.6070103@imperial.ac.uk>
	<44F047E1.4010809@gmail.com> <44F05249.2060803@imperial.ac.uk>
Message-ID: <44F05758.2020208@gmail.com>

Phil Mayers wrote:
> Chaz. wrote:
> 
>>
>> I started out using Spread some time ago (more than 2 years ago). The 
>> implementation was limited to a hundred or so nodes (that is in the 
>> notes on the spread implementation). Secondly it isn't quite so 
>> lightweight as you think (I've measured the performance).
>>
>> It is a very nice system but when it gets to 1000s of machines very 
>> little work has been done on solving many of the problems. My research 
>> on it goes back almost a decade starting out with Horus.
> 
> I must admit to not having attempted to scale it that far, but I was 
> under the impression that only the more expensive delivery modes were 
> that costly. But by the sounds of it, you don't need me to tell you that.
> 

Originally I had started out thinking about work surrounding Horus and 
researched a lot of the group communication stuff. When I got to Spread 
I tried it thinking it would solve all my problems. I actually built a 
system using it only to be sadly disappointed.

First I hit the 100+ node limit. Then I got to the static configuration, 
which I spent time trying to overcome. Finally when I did some 
measurements I decided that 1000s of machines would require a 
"hub-and-spoke" like architecture that Glyph suggested. I decided it was 
much too complicated and backed away.

Since that time I let the pendulum swing to the other extreme - no 
predefined architecture (or aggregation of machines). I want to examine 
what happens when I have 1000s of machines without a topology; can I 
solve the problems. As I said I solved the decentralized membership list 
issue. Now I am on to the harder problem: can I get RPC-like semantics 
with reasonable performance over the 1000s of machines? I don't know.

>>
>> Actually I am part of the IRTF group on P2P, E2E and SAM. I know the 
>> approaches they are being tossed about. I have tried to implement some 
>> of them. I just am not of the opinion that smart people can't find 
>> solutions to tough problems.
> 
> 
> Ok, in which case my apologies. My reading of your posts had lead me to 
> believe, incorrectly, you may not be familiar with the various issues. 
> In that case, you can (should) disregard most of it.
> 

I think the problem is on my part. I asked what I thought was an obvious 
question without laying the groundwork as to what I knew or how.

>>
>> Is multicast or broadcast the right way? I don't know, but I do know 
>> that without trying we will never know. Having been part of the IETF 
> 
> It's clearly right for some things - I'm just not sure how much 
> bi-directional distribution would be helped by it, since you've got at 
> some point to get the replies back.
>

I think I feel comfortable with using multicast (or broadcast) for the 
invoking RPC call. What I don't have a clear feeling for is how to 
correctly handle the response - I know I can't send them all within some 
small delta without congesting the network. So I am looking at all sorts 
of techniques (like holding off the responses, randomly...but I don't 
know how that will impact retries, etc).

>> community for a lot of years (I was part of the group that worked on 
>> SNMP v1 and the WinSock standard), I know that when the "pedal meets 
>> the metal" sometimes you discover interesting things.
> 
> I didn't realise winsock went near the IETF. You learn something new 
> every day.
> 

Me too!

>>>
>>> Knuth and his comments on early optimisation apply here. Have you 
>>> tried it? You might be surprised.
>>>
>>
>> I am sorry to say I don't know the paper or research you are referring 
>> to. Can you point me to some references?
> 
> Sorry, it's a phrase from Donald Knuth's (excellent) three-volume 
> programming book, "The Art of Computer Programming". Highly recommended.
>

Ah, ok. Having read them so many years ago I forgot most of it. lol..


>>
>> Thanks for the information. This is what makes me think that I want 
>> something based on UDP and not TCP! And if I can do RMT (or some 
>> variant of it) I might be able to get better performance. But, as I 
>> said it is the nice thing about not having someone telling me I need 
>> to get a product out the door tomorrow! I have time to experiment and 
>> learn.
> 
> When I wrote my reply I hadn't seen your comment on the app being 
> distributed storage.
> 
>>> How many calls per second are you doing, and approximately what 
>>> volume of data will each call exchange?
>>>
>> This is information I can't provide since the system I have designing 
>> has no equivalent in the marketplace today (either commercial or open 
>> source). All I know is that the first version of the system I built - 
>> using C/C++ and a traditional architecture (a few dozens of machines) 
>> was able to handle 200 transactions/minute (using SOAP). While there 
>> were some "short messages" (less than an normal MTU), I had quite a 
>> few that topped out 50K bytes and some up to 100Mbytes.
> 
> Oh. In which case more or less everything I wrote is useless!
> 

Well I don't think so. Based on your multicast comment I wonder about 
broadcast...have you ever seen the same thing happen? When you say 
"short interruptions" are we talking more than seconds? Can you 
elaborate a bit?

>>>
>>> Successful transmission is really the easy bit for multicast. There 
>>> is IGMP snooping, IGMP querier misbehaviour, loss of forwarding on an 
>>> upstream IGP flap, flooding issues due to global MSDP issues, and so 
>>> forth.
>>>
>>
>> I agree about the successful transmission. You've lost me on the IGMP 
>> part. Can you elaborate as to your thoughts?
> 
> Well, my experience of large multicast IPv4 networks is that short 
> interruptions in multicast connectivity are not uncommon. There are a 
> number of reasons for this, which can be broadly broken down into 1st 
> hop and subsequent hop issues.
> 
> Basically, in a routed-multicast environment, I've seen the subnet IGMP 
> querier (normally the gateway) get pre-empted by badly configured or 
> plain broken OS stacks (e.g. someone running Linux with the IGMPv3 early 
> patches). I've also seen confusion for highly-available subnets (e.g. 
> VRRPed networks) where the IGMP querier and the multicast designated 
> forwarder are different. This can cause issues with the IGMP snooping on 
> the downstream layer2 switches when the DF is no longer on the path 
> which the layer2 snooping builds.
> 
> You also get issues with upstream changes in the unicast routing 
> topology affecting PIM.
> 
> Most of these are only issues with routed multicast. Subnet-local is a 
> lot simpler, though you do still need an IGMP querier and switches with 
> IGMP snooping.
> 
>>
>> I do know I need EXACTLY-ONCE semantics but how and where I implement 
>> them is the unknown. When you use TCP you assume the network provides 
>> the bulk of the solution. I have been thinking that if I use a less 
>> reliable network - one with low overhead - that I can provide the 
>> server part to do the EXACTLY-ONCE piece.
>>
>> As to why I need EXACTLY-ONCE, well if I have to store something I 
>> know I absolutely need to store it. I can't be in the position that I 
>> don't know it has been stored - it must be there.
>>
>> Thanks for the great remarks....I look forward to reading more.
> 
> This makes a lot more sense now I know it's storage related.
> 
> You're right, this is a tricky and uncommon problem.
> 
> Let me see if I've got this right:
> 
> You're building some kind of distributed storage service. Clients will 
> access the storage by a "normal" protocol to one of the nodes. Reads 
> from the store are relatively easy, but writes to the store will need to 
> be distributed to all or a subset of the nodes. Obviously you'll have a 
> mix of lots of small writes and some very large writes.
> 
> Hmm.
> 
> Are you envisioning that you might have >1 storage set on the nodes, and 
> using a different multicast group per storage set to build optimal 
> distribution?
> 
> You might be able to perform some tricks depending on whether this 
> service provides block- or filesystem-level semantics. If it's the 
> latter, you could import some techniques from the distributed version 
> control arena - broadly speaking, node+version number each file and 
> "broadcast" (in the application sense) just the file + 
> newnode+newversion to the other store nodes, and have them lock the 
> local copy and initiate a pull from the updated node.
> 
> For block-level storage, that's going to be a lot harder.
> 
Definitely! Right now I dealing on the filesystem level. Doing block 
level would be incredibly difficult. I am trying to solve the simpler 
problem first! lol.

> For the multicast, something like NORM, which as you probably know is 
> basically forward-error-corrected transmit channel with 
> receiver-triggered re-transmits, would probably work. An implementation 
> would likely be non-trivial, but a fascinating project.
> 


Right now I am trying to find a solution to an interesting problem: how 
to find a file without knowing exactly where it exists in the network. 
You have to do this to make the system scale nicely.

Basically each node holds information about the files (aka objects) it 
stores. I do this so that I don't have a central database any where 
(this allows the system to scale differently. With a central database I 
would have that set of servers scale differently than the storage nodes).

Now I can build a set of machines that are the distributed database 
machines - each storing something - and querying them for where the file 
lives; this would narrow the machines I have to directly talk to, but it 
feels wrong. This is sort of a variation of the hub-and-spoke that Glyph 
talked about. But having said that I am trying to determine if I can get 
away from that and just go to a very unstructured environment (without 
intermediate database nodes).

As I said I have time to experiment before I put the code in the open 
source community ...

Peace,
Chaz



From glyph at divmod.com  Sat Aug 26 15:43:28 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Sat, 26 Aug 2006 17:43:28 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <44F05758.2020208@gmail.com>
Message-ID: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>

On Sat, 26 Aug 2006 10:14:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:

>Right now I am trying to find a solution to an interesting problem: how to 
>find a file without knowing exactly where it exists in the network. You have 
>to do this to make the system scale nicely.

>Basically each node holds information about the files (aka objects) it 
>stores. I do this so that I don't have a central database any where (this 
>allows the system to scale differently. With a central database I would have 
>that set of servers scale differently than the storage nodes).

>Now I can build a set of machines that are the distributed database machines 
>- each storing something - and querying them for where the file lives; this 
>would narrow the machines I have to directly talk to, but it feels wrong. 
>This is sort of a variation of the hub-and-spoke that Glyph talked about. 
>But having said that I am trying to determine if I can get away from that 
>and just go to a very unstructured environment (without intermediate 
>database nodes).

This sounds an awful lot like a distributed hashtable.  It does implicitly use an overlay network, but not a hub-and-spoke overlay network.

I'm not intimately familiar with the algorithms involved, so rather than try to describe them, I'll just refer you to the relatively nice wikipedia page on the topic:

    http://en.wikipedia.org/wiki/Distributed_hash_table

There is also a project in Python (not Twisted though) which may serve as an example:

    http://thecircle.org.au/

Are these ideas useful?  Have you looked at them before?



From eprparadocs at gmail.com  Sat Aug 26 17:25:40 2006
From: eprparadocs at gmail.com (Chaz.)
Date: Sat, 26 Aug 2006 19:25:40 -0400
Subject: [Twisted-Python] Multicast XMLRPC
In-Reply-To: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>
References: <20060826214328.1717.1085775059.divmod.quotient.31946@ohm>
Message-ID: <44F0D874.50206@gmail.com>

glyph at divmod.com wrote:
> On Sat, 26 Aug 2006 10:14:48 -0400, "Chaz." <eprparadocs at gmail.com> wrote:
> 
>> Right now I am trying to find a solution to an interesting problem: 
>> how to find a file without knowing exactly where it exists in the 
>> network. You have to do this to make the system scale nicely.
> 
>> Basically each node holds information about the files (aka objects) it 
>> stores. I do this so that I don't have a central database any where 
>> (this allows the system to scale differently. With a central database 
>> I would have that set of servers scale differently than the storage 
>> nodes).
> 
>> Now I can build a set of machines that are the distributed database 
>> machines - each storing something - and querying them for where the 
>> file lives; this would narrow the machines I have to directly talk to, 
>> but it feels wrong. This is sort of a variation of the hub-and-spoke 
>> that Glyph talked about. But having said that I am trying to determine 
>> if I can get away from that and just go to a very unstructured 
>> environment (without intermediate database nodes).
> 
> This sounds an awful lot like a distributed hashtable.  It does 
> implicitly use an overlay network, but not a hub-and-spoke overlay network.
> 
> I'm not intimately familiar with the algorithms involved, so rather than 
> try to describe them, I'll just refer you to the relatively nice 
> wikipedia page on the topic:
> 
>    http://en.wikipedia.org/wiki/Distributed_hash_table
> 
> There is also a project in Python (not Twisted though) which may serve 
> as an example:
> 
>    http://thecircle.org.au/
> 
> Are these ideas useful?  Have you looked at them before?
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

As I understand DHT the concept is to create a hash identifier, 
partition it into "chunks", and use the chunks to locate the file. It is 
an interesting idea and certainly one approach. I am keeping it in my 
back pocket.  There are many reasons I don't like this approach.

First, with a poorly segmented hash, you can have a few levels of 
indirection before reaching the file. You can see this in a lot of p2p 
file sharing system. I would like to see if I can overcome this 
performance penalty (another problem is DHT works well in a very sparse 
environment, so the hash keys have to be pretty big. That means more 
intermediate nodes).

The second issue is one unique to data storage systems: I need to have 
multiple copies of the file around. So I had thought if I do a DHT I 
will just keep copies all along the path. That should solve the problem 
of access quickly and copies.

The third issue - and this one I had more difficulty grasping - is that 
once an intermediate node disappears, its contents have to be passed on 
to someone else. Also the link from the prior node to this one (the one 
going away) has to be adjusted. What is the problem? It is quite 
possible that the node would have millions of files on it, hence copying 
it is impossible. That means I have to keep exact copies at multiple 
sites, at the same time (definitely smaller than the entire space of all 
the peers).

But the real problem is that in a network of 1000s of machines it is 
quite possible the the two I am using to store indices on can disappear 
at the same time (granted small, but still a problem). So I opted to 
look at another approach, the one that I started talking about - using 
broadcast or multicast with some sort of RPC-like mechanism and light 
weight protocol applied over a lot of machines.

This approach hasn't been well researched, almost being excluded out of 
hand. I decided it was at least worth investigating. It solves some 
problems like scalability and easy management. The downside is that I 
have to worry about building a lightweight protocol and handle RPC like 
AT LEAST ONCE semantics instead of EXACTLY ONCE.

Glyph, thanks for the references. I will definitely look up 'thecircle' 
stuff. That one I didn't know about!

Peace,
Chaz




From exarkun at twistedmatrix.com  Sat Aug 26 23:05:01 2006
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 27 Aug 2006 05:05:01 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1156655101.58.1436937330@twistedmatrix.com

Bug summary
______________________
Summary for 2006-08-20 through 2006-08-27
Bugs opened: 16    Bugs closed: 19  Total open bugs: 690 (-3)

|== Type Changes   |== Priority Changes   |== Component Changes   
|Defect:       -2  |Highest:  -2          |Conch:    -1           
|Enhancement:  +0  |High:     -2          |Core:     +1           
|Task:         +2  |Normal:   +3          |Mail:     -3           
                   |Low:      +1          |Trial:    +1           
                                          |Vfs:      -1           
                                          |Web:      +2           
                                          |Web2:     +1           
                                          |Website:  -1           
                                          |Words:    +1           


New / Reopened Bugs
______________________
                    ===== Highest =====
[#2009] iq response tracker doesn't clean up (opened by ralphm) (CLOSED, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2009

[#2019] t.w.p.msn does not properly execute errbacks when an error packet is received (opened by habnabit)
    defect          words      http://twistedmatrix.com/trac/ticket/2019

[#1922] make twistd pluggable, nerf mktap (opened by tjs)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

                    ===== High =====
[#2014] twisted.internet.ssl.CertificateOptions docstring suggests server-only usage; CO is agnostic (opened by exarkun)
    defect          core       http://twistedmatrix.com/trac/ticket/2014

                    ===== Normal =====
[#2007] test ticket announcer bot changes (opened by exarkun) (CLOSED, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2007

[#2010] zipstream.py (unzipIter) cannot unzip directory correctly on Windows (opened by jacobg23)
    defect          core       http://twistedmatrix.com/trac/ticket/2010

[#2011] xmlrpc should return failures for any exception in method (opened by ghazel) (CLOSED, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2011

[#2012] HTTP HEAD Request fails if Content-length given (opened by garrison)
    defect          web        http://twistedmatrix.com/trac/ticket/2012

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2013

[#2015] Generic SASL library (opened by exarkun)
    enhancement     core       http://twistedmatrix.com/trac/ticket/2015

[#2016] twisted.web2.dav.test.util.TestCase.setUp is slow and can create inconsistent directory structures (opened by dreid)
    defect          web2       http://twistedmatrix.com/trac/ticket/2016

[#2017] t.w.client.getPage returning ConnectionDone: Connection was closed cleanly error (opened by dimator)
    defect          web        http://twistedmatrix.com/trac/ticket/2017

[#2018] document installation of third-party plugins with distutils (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2018

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun)
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix)
    task            core       http://twistedmatrix.com/trac/ticket/2013

                    ===== Low =====
[#2008] selectreactor masks the 'dict' builtin, and commits various other offences. (opened by jerub)
    task            core       http://twistedmatrix.com/trac/ticket/2008



Closed Bugs
______________________
                    ===== Highest =====
[#1936] loopback.loopback blocks, should return Deferred (opened by jml, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1936

[#630 ] t.p.log.FileLogObserver has problems with timezone names (mostly on windows). (opened by jknight, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/630

[#1761] give wiki edit permissions to everyone who should have them (opened by glyph, closed by radix, invalid)
    enhancement     core       http://twistedmatrix.com/trac/ticket/1761

[#2009] iq response tracker doesn't clean up (opened by ralphm, closed by ralphm, fixed)
    defect          words      http://twistedmatrix.com/trac/ticket/2009

[#1992] IMAPServer.__cbFetch can raise uncaught AttributeError (opened by tvachon, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1992

[#1922] make twistd pluggable, nerf mktap (opened by tjs, closed by radix, )
    enhancement     core       http://twistedmatrix.com/trac/ticket/1922

                    ===== High =====
[#1978] fetch [message number] body[1] processed incorrectly for non-multipart messages (opened by tvachon, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1978

[#1183] test_conch calls reactor.iterate() in two places (opened by exarkun, closed by exarkun, fixed)
    defect          conch      http://twistedmatrix.com/trac/ticket/1183

[#1139] [NEEP HELP] Update mktap.xhtml to reflect current best practices (opened by hypatia, closed by radix, duplicate)
    defect          website    http://twistedmatrix.com/trac/ticket/1139

                    ===== Normal =====
[#2007] test ticket announcer bot changes (opened by exarkun, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/2007

[#1846] Test run python2.4  Twisted 2.4 tarball, Suse 9,  64 bit (opened by scmikes, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1846

[#1845] twisted 2.4 test run on Suse 9, 64 bit, python 2.5b1 (opened by scmikes, closed by exarkun, fixed)
    task            core       http://twistedmatrix.com/trac/ticket/1845

[#1202] twisted.mail.test.test_mail calls reactor.iterate() (opened by exarkun, closed by exarkun, fixed)
    defect          mail       http://twistedmatrix.com/trac/ticket/1202

[#1113] intermittent test failure in testCallLater (opened by warner, closed by exarkun, fixed)
    defect          core       http://twistedmatrix.com/trac/ticket/1113

[#2006] trial can misreport leftover DelayedCalls (opened by exarkun, closed by ralphm, )
    defect          trial      http://twistedmatrix.com/trac/ticket/2006

[#1805] SFTP adapter doesn't translate deferred errors (opened by spiv, closed by spiv, fixed)
    defect          vfs        http://twistedmatrix.com/trac/ticket/1805

[#2011] xmlrpc should return failures for any exception in method (opened by ghazel, closed by ghazel, invalid)
    enhancement     web        http://twistedmatrix.com/trac/ticket/2011

[#261 ] Document multicast (opened by Jerub, closed by jerub, fixed)
    enhancement     core       http://twistedmatrix.com/trac/ticket/261

[#2013] Deprecate mktap and document usage of Twisted Application Plugins with twistd (opened by radix, closed by radix, )
    task            core       http://twistedmatrix.com/trac/ticket/2013





From terry at jon.es  Mon Aug 28 08:05:23 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 28 Aug 2006 16:05:23 +0200
Subject: [Twisted-Python] Direct access to main server class
Message-ID: <17650.63523.224952.251277@terry.jones.tc>

Here's a hopefully not-too-dumb question...

I have a class that provides a service that I plan to make accessible via
Twisted. I wrote the class and various unit tests. So I could formerly do
simple things like:

    import unittest

    class myTest:
	def setUp():
	    self.c = MyClass()

	def tearDown():
	    self.c.close()

	def testX():
	    self.assert_(self.c.X() == 4)


I recently added users, passwords, and permissions to the system. So now
many method calls need a requesting user object passed to them, and check
that the user has permission to carry out the action. I added simple
twisted.cred class to provide realms, avatars, portal with checkers, etc.

In the myApp.tac file, I create an instance of my top-level class (MyClass
above). In the case of providing access to my service via Nevow, I
instantiate a NevowSite and pass it the portal. That is all, I think, as it
should be.

But now I'm left wondering what happens to the old unit testing code. It
obviously cannot just create a MyClass instance. The unit testing code
should be using the service by authenticating itself just like any other
client. But I'm not sure how best to do that. The unit test code wants to
perform all manner of tests, and preferably this would be done by just
making available the instance of MyClass created in my app's .tac file,
allowing the test code to call its methods. But somehow that no longer
feels quite right - the connection is in fact local, but it's coming in
somehow through twisted.cred.

I hope I'm being more or less clear about my dilemma, and I suppose this
must be a situation people have to deal with all the time.

Two solutions come to mind:

  1) Fake it. Call directly into my code to make myself an authenticated
     user object, and then start passing it in to methods on my own
     class. This is ugly though, plus if the service is already running
     it's a bad solution because it goes behind the back of twisted and
     asks for trouble.

  2) Make all the methods of my class available via RPC and have all the
     unit test code use them. This seems like a major pain, though I
     suppose it would work.

I'd much rather just have the unit test code connect as a special local
user and get back the instance of MyClass created by my .tac file and call
its methods. Is that easy to do?

OK, sorry for another typically long posting....

Thanks for any help. Regards,
Terry



From exarkun at divmod.com  Mon Aug 28 09:01:55 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Mon, 28 Aug 2006 11:01:55 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17650.63523.224952.251277@terry.jones.tc>
Message-ID: <20060828150155.1717.795199343.divmod.quotient.33132@ohm>

On Mon, 28 Aug 2006 16:05:23 +0200, Terry Jones <terry at jon.es> wrote:
>Here's a hopefully not-too-dumb question...
>
>I have a class that provides a service that I plan to make accessible via
>Twisted. I wrote the class and various unit tests. So I could formerly do
>simple things like:
>
>    import unittest
>
>    class myTest:
>       def setUp():
>           self.c = MyClass()
>
>       def tearDown():
>           self.c.close()
>
>       def testX():
>           self.assert_(self.c.X() == 4)
>
>
>I recently added users, passwords, and permissions to the system. So now
>many method calls need a requesting user object passed to them, and check
>that the user has permission to carry out the action. I added simple
>twisted.cred class to provide realms, avatars, portal with checkers, etc.

Aside from the rest of your question and my response, this sounds inside
out.  The general idea is that the user object itself has methods which
implement the actions which the protocol allows to be taken.  If a user
lacks permission to perform a particular action, or has restrictions on
the particulars with which they may invoke that action, or whatever other
logic may be necessary on a per-user basis, that is represented by a
different implementation of the login interface.

It may not necessarily be the case that factoring your code as I've just
described would be better than what you are doing now, but if you haven't
considered it before, it may be worth doing so now.

>
>In the myApp.tac file, I create an instance of my top-level class (MyClass
>above). In the case of providing access to my service via Nevow, I
>instantiate a NevowSite and pass it the portal. That is all, I think, as it
>should be.
>
>But now I'm left wondering what happens to the old unit testing code. It
>obviously cannot just create a MyClass instance. The unit testing code
>should be using the service by authenticating itself just like any other
>client. But I'm not sure how best to do that. The unit test code wants to
>perform all manner of tests, and preferably this would be done by just
>making available the instance of MyClass created in my app's .tac file,
>allowing the test code to call its methods. But somehow that no longer
>feels quite right - the connection is in fact local, but it's coming in
>somehow through twisted.cred.
>
>I hope I'm being more or less clear about my dilemma, and I suppose this
>must be a situation people have to deal with all the time.

It's a little fuzzy.  Let me see if I can accurately summarize.

   Your server is started up from a .tac file.

   The .tac file creates some objects and gives them particular
   relationships.

   The relationships created in the .tac file are necessary for correct
   operation of the server.

   The unit tests have no way to run the code in the .tac file in order
   to duplicate these relationships.

If these statements are accurate, I would suggest moving some code out of
the .tac file into a real module, from whence your unit tests can import
and use it.

>
>Two solutions come to mind:
>
>  1) Fake it. Call directly into my code to make myself an authenticated
>     user object, and then start passing it in to methods on my own
>     class. This is ugly though, plus if the service is already running
>     it's a bad solution because it goes behind the back of twisted and
>     asks for trouble.

This actually sounds a little like what I described above.  What makes you
say it is ugly?  To me, it sounds like organizing your code so that you
can test it a unit at a time.  The tests which do this are testing the
behavior of your code when authentication has already succeeded.  You should
also have tests for your authentication code, of course - but that's a
separate unit.

>
>  2) Make all the methods of my class available via RPC and have all the
>     unit test code use them. This seems like a major pain, though I
>     suppose it would work.

In the past I have done this, and I have regretted it.  This kind of test
is unnecessarily expensive to run and unnecessarily difficult to debug.

>
>I'd much rather just have the unit test code connect as a special local
>user and get back the instance of MyClass created by my .tac file and call
>its methods. Is that easy to do?

If you move the code responsible for instantiating MyClass out of the .tac
file into a real module, then it is easy :)  Otherwise it may as well be
impossible.

>
>OK, sorry for another typically long posting....

No problem.  I hope this was of some help.

Jean-Paul



From terry at jon.es  Mon Aug 28 14:31:37 2006
From: terry at jon.es (Terry Jones)
Date: Mon, 28 Aug 2006 22:31:37 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 11:01:55 on Monday, 28 August 2006
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
Message-ID: <17651.21161.513427.346881@terry.jones.tc>

>>>>> "JP" == Jean-Paul Calderone <exarkun at divmod.com> writes:

JP> Aside from the rest of your question and my response, this sounds
JP> inside out.  The general idea is that the user object itself has
JP> methods which implement the actions which the protocol allows to be
JP> taken.  If a user lacks permission to perform a particular action, or
JP> has restrictions on the particulars with which they may invoke that
JP> action, or whatever other logic may be necessary on a per-user basis,
JP> that is represented by a different implementation of the login
JP> interface.

OK, thanks for this explanation. As for the inside-out part, I do want
things to be that way. E.g., there are methods that anyone can call and
what you get back depends on the set of permissions on the things you
request and also on your own preferences. So it's not known a priori what
the user can and can't do - at least not at that fine grained level. At
higher levels, sure, I do understand about returning user objects that
simply do not have access to prohibited methods.

After sending my mail I realized I should have gone to look through the
top-level docs before mailing. There I found mention of Trial. I was going
to follow up, but decided to see what people would suggest. You don't
mention Trial however, and nor has anyone else yet. (Go on, tell me it's
deprecated :-))

JP> It may not necessarily be the case that factoring your code as I've
JP> just described would be better than what you are doing now, but if you
JP> haven't considered it before, it may be worth doing so now.

I will certainly do it to some extent.

JP> Your server is started up from a .tac file.

Yes.

JP> The .tac file creates some objects and gives them particular
JP> relationships.

Just one instance of my top-level class. That class knows how to provide
password checkers.

JP> The relationships created in the .tac file are necessary for correct
JP> operation of the server.

No. The main thing that's needed after my last round of changes is that API
methods are called in the context of an authenticated user.

JP> The unit tests have no way to run the code in the .tac file in order to
JP> duplicate these relationships.

Right, except if I hack an end run around twisted.cred. But I don't really
_want_ to do that. And if I've started a server via myApp.tac, then it
feels (though it may not be the case) like I'm asking for trouble by simply
instantiating and using another instance of my top-level class. Although
the point is to allow highly parallel access, I was intending to do that
through (e.g., a thread pool) created by a single twistd application.  I'm
not sure I want to have possibly many of them running at once (though
perhaps I should, since this is part of the point). Does that make sense?

I could configure the unit tests to just use a different setup (different
DB etc) so it has nothing to do with the server version. That's in fact
what I used to do. I was mainly asking: now that I've built a nice new
front door using twisted.cred, how do I convert my existing unit tests to
all go through the door, changing as little as possible.

>> 1) Fake it. Call directly into my code to make myself an authenticated
>> user object, and then start passing it in to methods on my own
>> class. This is ugly though, plus if the service is already running it's
>> a bad solution because it goes behind the back of twisted and asks for
>> trouble.

JP> This actually sounds a little like what I described above.  What makes
JP> you say it is ugly?  To me, it sounds like organizing your code so that
JP> you can test it a unit at a time.  The tests which do this are testing
JP> the behavior of your code when authentication has already succeeded.
JP> You should also have tests for your authentication code, of course -
JP> but that's a separate unit.

It feels ugly in the way that Trial (if I understand it) feels right.
There's an approved way to access the service, and robust tests should go
through it. I don't fully believe this - I guess some combination, as you
suggest, is probably going to be best. It feels ugly because, as I said,
having built a new front door, I immediately hack my way around it.

>> 2) Make all the methods of my class available via RPC and have all the
>> unit test code use them. This seems like a major pain, though I suppose
>> it would work.

JP> In the past I have done this, and I have regretted it.  This kind of
JP> test is unnecessarily expensive to run and unnecessarily difficult to
JP> debug.

Thanks.

>> I'd much rather just have the unit test code connect as a special local
>> user and get back the instance of MyClass created by my .tac file and
>> call its methods. Is that easy to do?

JP> If you move the code responsible for instantiating MyClass out of the
JP> .tac file into a real module, then it is easy :)

Yes, modulo having multiple instances. I can deal with that though.

>> OK, sorry for another typically long posting....

JP> No problem.  I hope this was of some help.

Yes, it's great, thanks for answering. I feel like such a babe in the woods
with Twisted! Part of it, I guess, is only really getting to work on this
stuff when I'm not doing what I'm actually supposed to be doing.

Here's one more question, about cred. Given your initial comment and my
emerging understanding of what goes on, what you call a user object
(perhaps only because I called it that) is what's elsewhere called an
avatar. If so, it seems an avatar can be anything at all and that generally
an avatar is an instance of some class, and that that class has methods
which the connecting user is allowed to call. I almost want to say "don't
bother answering, I know I must be right", but I won't delete this
paragraph just in case there are any other fundamental comments anyone
might make.

Regards,
Terry



From bhenry at pacecocorp.com  Mon Aug 28 15:52:59 2006
From: bhenry at pacecocorp.com (Benjamin Henry)
Date: Mon, 28 Aug 2006 14:52:59 -0700
Subject: [Twisted-Python] Newb question?
Message-ID: <E1GHp2W-0006wI-00@pyramid.twistedmatrix.com>

My question(s): 
I'm working on a custom network protocol (application layer in TCP/IP 
model) for a custom network.  Please don't try to talk me out of this. 
I'm limiting many of the other protocols, because this is in a highly 
secure network, and latency/bandwidth is key.  The packet sizes are 
minimized by the protocol design, which is ideal.  Anyway.  I'm having 
some problems with figuring out what to include in the Protocol class, 
and what to handle in the server class.  Basically, I'm using Telnet, 
SMTP, and FTP protocol python files as a reference, and each have 
different strutures and methods of doing similar things.  Basically, 
the protocol I'm developing is very similar to Telnet, so I used this 
code as a base.  It is necessary to have a state machine, but there is 
dynamic information to send as a response to some received messages. 
For example, the server may need to get information from a DB, and send 
it in a packet as a reponse to a request.  I'll give you a sample 
implementation, and the remainder of the specific questions below: 

server = a 
client = b 

1a = NEED, 1   - NEED is a request to send data from client to server, 
1 is the option, or type of data 
2b = HAVE, 1   - HAVE is a positive response 
3a = NEED, 1   - re-iterated for the purpose of being a server.  The 
line "1a" is initiated only by a UI command.  The line "3a" is 
initiated by as a response to the request "2b". 
4b = PASV, 1  - same as FTP.  It's basically, "Well, I have data...what 
port can I send it on?" 
4a = PORT, 1, 51000 - not the same as FTP.  It's the command, option, 
and port number 
5b = ACK       - acknowledge 
ok...now they both disconnect, or stop communication on this port, and 
server dynamically opens port 51000 
on port 51000: 
6b - <<data stream>> 
7a - <<md5 or something other to verify correct and complete>> 

Questions I have: 
This is a state machine.  The server has a class derived from the 
Protocol class whose methods are called prior to the Protocol's.  For 
example, since the Server is using the derived Protocol class (let's 
say it's PProto), whenever a "dataReceived" is fired, PProto picks it 
up, and has to call Protocol's dataReceived handler explicitly.  Where 
should all of this message handling take place?  Should I split up the 
duties, like anything that's a singular response to one line should be 
in the Protocol class, and anything dynamic can be in the PProto class? 

What about dynamic ports?  Where should this be implemented?  The 
alternative is to have many connections on the one server port.  Would 
this cause any issues, so that I could eliminate the PASV command 
altogether? 

I need to read the data being sent by the client.  How can I correctly 
intercept this data without effecting the operation of the Protocol, 
and also so I can port the Protocol class to other applications without 
rewriting the server? 

I'm a newbie :). 

Thanks for your help. 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060828/ab70fd5c/attachment.html>

From jml at mumak.net  Mon Aug 28 16:44:40 2006
From: jml at mumak.net (Jonathan Lange)
Date: Tue, 29 Aug 2006 08:44:40 +1000
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.21161.513427.346881@terry.jones.tc>
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
Message-ID: <d06a5cd30608281544n2838e6acj67e628e71fe00b6b@mail.gmail.com>

On 8/29/06, Terry Jones <terry at jon.es> wrote:
> After sending my mail I realized I should have gone to look through the
> top-level docs before mailing. There I found mention of Trial. I was going
> to follow up, but decided to see what people would suggest. You don't
> mention Trial however, and nor has anyone else yet. (Go on, tell me it's
> deprecated :-))
>

It's actively maintained.

The only thing that Trial gets you is the ability to meaningfully
return Deferreds from your unit tests.

cheers,
jml



From andrew-twisted at puzzling.org  Mon Aug 28 18:29:22 2006
From: andrew-twisted at puzzling.org (Andrew Bennetts)
Date: Tue, 29 Aug 2006 10:29:22 +1000
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.21161.513427.346881@terry.jones.tc>
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
Message-ID: <20060829002922.GA31669@steerpike.home.puzzling.org>

On Mon, Aug 28, 2006 at 10:31:37PM +0200, Terry Jones wrote:
[...]
> I could configure the unit tests to just use a different setup (different
> DB etc) so it has nothing to do with the server version. That's in fact
> what I used to do. I was mainly asking: now that I've built a nice new
> front door using twisted.cred, how do I convert my existing unit tests to
> all go through the door, changing as little as possible.

If you do that, they won't be *unit* tests any more, if I'm understanding your
structure correctly.

I'm guessing a significant proportion of your code you want to test, probably
the majority of it, has nothing directly to do with authentication or
permissions.  Also, *unit* tests (as opposed to functional tests or integration
tests or end-to-end tests or whatever other terms you prefer to use) test one
thing at a time, so tests for this code shouldn't also be testing
authentication.  If *every* test has to authenticate, then you're just wasting
effort: the tests run slower, there's more junk to step over in a debugger, and
you gain no extra testing value by testing the exact same thing in 50 (or
500...) different tests.

> >> 1) Fake it. Call directly into my code to make myself an authenticated
> >> user object, and then start passing it in to methods on my own
> >> class. This is ugly though, plus if the service is already running it's
> >> a bad solution because it goes behind the back of twisted and asks for
> >> trouble.
> 
> JP> This actually sounds a little like what I described above.  What makes
> JP> you say it is ugly?  To me, it sounds like organizing your code so that
> JP> you can test it a unit at a time.  The tests which do this are testing
> JP> the behavior of your code when authentication has already succeeded.
> JP> You should also have tests for your authentication code, of course -
> JP> but that's a separate unit.
> 
> It feels ugly in the way that Trial (if I understand it) feels right.
> There's an approved way to access the service, and robust tests should go
> through it. I don't fully believe this - I guess some combination, as you
> suggest, is probably going to be best. It feels ugly because, as I said,
> having built a new front door, I immediately hack my way around it.

No, it's quite common, and sensible, for tests to go directly to the units (i.e.
objects and methods) they want to test, so that they test precisely what they
should test.

> >> OK, sorry for another typically long posting....
> 
> JP> No problem.  I hope this was of some help.
> 
> Yes, it's great, thanks for answering. I feel like such a babe in the woods
> with Twisted! Part of it, I guess, is only really getting to work on this
> stuff when I'm not doing what I'm actually supposed to be doing.
> 
> Here's one more question, about cred. Given your initial comment and my
> emerging understanding of what goes on, what you call a user object
> (perhaps only because I called it that) is what's elsewhere called an
> avatar. If so, it seems an avatar can be anything at all and that generally
> an avatar is an instance of some class, and that that class has methods
> which the connecting user is allowed to call. I almost want to say "don't
> bother answering, I know I must be right", but I won't delete this
> paragraph just in case there are any other fundamental comments anyone
> might make.

"An avatar is a business logic object for a specific user. For POP3, it's a
mailbox, for a first-person-shooter it's the object that interacts with the
game, the actor as it were. Avatars are specific to an application, and each
avatar represents a single user."
    -- http://twistedmatrix.com/projects/core/documentation/howto/cred.html#auto6

(and also
http://twistedmatrix.com/projects/core/documentation/howto/glossary.html#Avatar,
which says basically the same thing).

So yes, your understanding is correct.

-Andrew.




From terry at jon.es  Mon Aug 28 18:55:03 2006
From: terry at jon.es (Terry Jones)
Date: Tue, 29 Aug 2006 02:55:03 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 10:29:22 on Tuesday, 29 August 2006
References: <17650.63523.224952.251277@terry.jones.tc>
	<20060828150155.1717.795199343.divmod.quotient.33132@ohm>
	<17651.21161.513427.346881@terry.jones.tc>
	<20060829002922.GA31669@steerpike.home.puzzling.org>
Message-ID: <17651.36967.975011.190920@terry.jones.tc>

Hi Andrew

>>>>> "Andrew" == Andrew Bennetts <andrew-twisted at puzzling.org> writes:
Andrew> I'm guessing a significant proportion of your code you want to
Andrew> test, probably the majority of it, has nothing directly to do with
Andrew> authentication or permissions.  Also, *unit* tests (as opposed to
Andrew> functional tests or integration tests or end-to-end tests or
Andrew> whatever other terms you prefer to use) test one thing at a time,
Andrew> so tests for this code shouldn't also be testing authentication.
Andrew> If *every* test has to authenticate, then you're just wasting
Andrew> effort: the tests run slower, there's more junk to step over in a
Andrew> debugger, and you gain no extra testing value by testing the exact
Andrew> same thing in 50 (or 500...) different tests.

That's why I'd use a setUp method: to log in to the server and store the
result for use in the unit tests.

Andrew> No, it's quite common, and sensible, for tests to go directly to
Andrew> the units (i.e.  objects and methods) they want to test, so that
Andrew> they test precisely what they should test.

Right, I can do that (and do do that in the to-be-converted code). I
suppose I'll just make myself an authenticated user object and then call
into internal methods.

It does make me wonder though, still. What if you're writing a Twisted app
that you intend to license for commercial companies to run on their
intranets: You install the Python source and presumably the unit test code
gets run at some point, and maybe remains on the server. Then you're
showing the world how to access the innards of your service without going
through the approved authentication. Same comments apply to simply putting
the code online and letting people see how to get in to any instance they
can get local (user) access to. What can be done to prevent this? The most
obvious thing seems to be to verify the uid of the process trying to create
an authenticated user, and have both your unit tests and twistd run under
this uid.  If you don't do something about this, a normal user on the
system can simply import your module, create an instance, and start making
method calls (possibly unsuccessfully, due to file system permissions on
databases, etc). Maybe they wont get far, but it's an issue: especially if
the system has been built to allow this, and the unit tests show precisely
how to pull it off.

Thanks again,
Terry



From glyph at divmod.com  Mon Aug 28 21:08:21 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Mon, 28 Aug 2006 23:08:21 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.36967.975011.190920@terry.jones.tc>
Message-ID: <20060829030821.1717.849369791.divmod.quotient.33499@ohm>


On Tue, 29 Aug 2006 02:55:03 +0200, Terry Jones <terry at jon.es> wrote:

>It does make me wonder though, still. What if you're writing a Twisted app
>that you intend to license for commercial companies to run on their
>intranets: You install the Python source and presumably the unit test code
>gets run at some point, and maybe remains on the server. Then you're
>showing the world how to access the innards of your service without going
>through the approved authentication. Same comments apply to simply putting
>the code online and letting people see how to get in to any instance they
>can get local (user) access to. What can be done to prevent this? The most
>obvious thing seems to be to verify the uid of the process trying to create
>an authenticated user, and have both your unit tests and twistd run under
>this uid.  If you don't do something about this, a normal user on the
>system can simply import your module, create an instance, and start making
>method calls (possibly unsuccessfully, due to file system permissions on
>databases, etc). Maybe they wont get far, but it's an issue: especially if
>the system has been built to allow this, and the unit tests show precisely
>how to pull it off.

If your system is so insecure that anyone with some know-how can run arbitrary Python code in it, it is a pretty straightforward step to extract all the source code from the server directly.  Consider this simple Python quine:

    # quine.py
    print file(__file__).read()

If you think you can hide Python code by compiling it to bytecodes, have a look at http://www.crazy-compilers.com/decompyle/ -- that should quickly disabuse you of that notion.

Moreover, any security scheme that relies, in any way, upon the fact that your code is hidden is broken by design.  From wikipedia: "computer science professors consider security through obscurity so obviously wrong that the matter doesn't need proof or study".

However, even disregarding that, _some_ code in your system is instantiating authenticated users and calling methods on them.  Assuming that your code is packaged and distributed (tests included, so as to make testing of deployments easier), anyone who can read the tests can read the rest of the code, and discover the same entrypoints.

So, I disagree in the strongest possible terms: it *isn't* an issue, and nobody should ever consider it as such when writing tests.  The correct way to write unit tests is one unit at a time, and it should not be polluted by misguided security concerns.

Apologies if this sounds too harsh.  I'm not just trolling, I promise :).  We have a lot of tests in the Twisted suite which bend over backwards to instantiate things through obtuse higher-than-unit-level interfaces (which often aren't really themselves public), rather than testing functionality directly.  These tests are all overcomplex, error prone, and generally contain race conditions and fail intermittently for unrelated reasons.

It is a systematic problem which we have spent literally years fixing, and we're not done.  JP Calderone, Chris Armstrong and I have almost daily conversations now about how to reduce this coupling and "heal" the Twisted suite so that tests will fail only when they're failing.  In other words, make the tests more "unit-y" and less like integration tests.  The idea you're proposing here seems to be enthusiastically attempting to doom a future project to a worse version of this syndrome :).  Programs like Twisted which interface heavily with the OS are hard enough to write good test for when you're only worrying about legitimate difficulties with the tests... if you start introducing concerns like "maybe we're revealing too much in our test suite" it becomes impossible.



From terry at jon.es  Tue Aug 29 01:57:36 2006
From: terry at jon.es (Terry Jones)
Date: Tue, 29 Aug 2006 09:57:36 +0200
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: Your message at 23:08:21 on Monday, 28 August 2006
References: <17651.36967.975011.190920@terry.jones.tc>
	<20060829030821.1717.849369791.divmod.quotient.33499@ohm>
Message-ID: <17651.62320.581129.640872@terry.jones.tc>

>>>>> "glyph" == glyph  <glyph at divmod.com> writes:
glyph> If you think you can hide Python code by compiling it to bytecodes,
glyph> have a look at http://www.crazy-compilers.com/decompyle/ -- that
glyph> should quickly disabuse you of that notion.

No, I have no intention of doing that - rather I assume the opposite (that
code and tests will all be available), that's what I thought I was saying.

glyph> Moreover, any security scheme that relies, in any way, upon the fact
glyph> that your code is hidden is broken by design.  From wikipedia:
glyph> "computer science professors consider security through obscurity so
glyph> obviously wrong that the matter doesn't need proof or study".

Yes, I agree that's it's almost always an error (and those that choose it
reflexively are also particularly prone to the attendant false sense of
security. One would hope that some form of Darwinian selection might kick
in, but it never does).

glyph> However, even disregarding that, _some_ code in your system is
glyph> instantiating authenticated users and calling methods on them.
glyph> Assuming that your code is packaged and distributed (tests included,
glyph> so as to make testing of deployments easier), anyone who can read
glyph> the tests can read the rest of the code, and discover the same
glyph> entrypoints.

Right, that's what I was saying.

glyph> So, I disagree in the strongest possible terms: it *isn't* an issue,

I don't understand how the above sentence follows from the one before (and
no, I'm not trolling either!).

glyph> and nobody should ever consider it as such when writing tests.  The
glyph> correct way to write unit tests is one unit at a time, and it should
glyph> not be polluted by misguided security concerns.

glyph> Apologies if this sounds too harsh.  I'm not just trolling, I
glyph> promise :).  We have a lot of tests in the Twisted suite which bend
glyph> over backwards to instantiate things through obtuse
glyph> higher-than-unit-level interfaces (which often aren't really
glyph> themselves public), rather than testing functionality directly.
glyph> These tests are all overcomplex, error prone, and generally contain
glyph> race conditions and fail intermittently for unrelated reasons.

OK, I think we have the same aim: I'm trying to NOT write obtuse and
complex tests. That's why I was originally asking if there's an easy way to
make tests go through the front door (via twisted.cred) to get something
they can start making calls on. I wanted to do that precisely to _avoid_
bending over backwards etc. I have a couple of hundred unit tests (a very
small number, I know), of which only a few are more than about 4 lines. I'm
trying to keep it that way.

I have the feeling that my original mail should probably have been written
more clearly.  And it's time for a coffee...

Regards,
Terry



From glyph at divmod.com  Tue Aug 29 06:35:10 2006
From: glyph at divmod.com (glyph at divmod.com)
Date: Tue, 29 Aug 2006 08:35:10 -0400
Subject: [Twisted-Python] Direct access to main server class
In-Reply-To: <17651.62320.581129.640872@terry.jones.tc>
Message-ID: <20060829123510.1717.1201781420.divmod.quotient.33734@ohm>

On Tue, 29 Aug 2006 09:57:36 +0200, Terry Jones <terry at jon.es> wrote:
>>>>>> "glyph" == glyph  <glyph at divmod.com> writes:

>glyph> However, even disregarding that, _some_ code in your system is
>glyph> instantiating authenticated users

>Right, that's what I was saying.

Whew.  Okay, great.

>I agree [security through obscurity is] almost always an error (and those that choose it
>reflexively are also particularly prone to the attendant false sense of
>security. One would hope that some form of Darwinian selection might kick
>in, but it never does).

Oh... sometimes it does.  I know a story about a sysadmin who seriously thought that SSH was "secure" enough that his root password could be "root" because it was "easier to remember", as long as he changed the port number... (Hint: at the end of the story, he is not happy.  Also he doesn't have a job.)

>glyph> So, I disagree in the strongest possible terms: it *isn't* an issue,

>I don't understand how the above sentence follows from the one before (and
>no, I'm not trolling either!).

I was responding to this in the original email (emphasis mine):

>>>Maybe they wont get far, but *it's an issue*: especially if
the system has been built to allow this, and the unit tests show precisely
how to pull it off.

I suppose I misunderstood what you meant by that.  Thank goodness :).

>OK, I think we have the same aim: I'm trying to NOT write obtuse and
>complex tests. That's why I was originally asking if there's an easy way to
>make tests go through the front door (via twisted.cred) to get something
>they can start making calls on.

If you want to do white-box testing via cred, it's not very hard; you can just construct a Portal in setUp and call "login" on it.  *Some* tests should be written that way, to test the code that builds the "front door", so to speak, but I think that JP's advice is still generally correct here.  You really only want to do that in tests for cred itself, tests for deployment code that creates a Portal, or perhaps for an implementation of a cred interface such as a checker or realm.  Most of your tests for user objects should be instantiating the user objects directly; this should also promote less coupling, so that you will avoid the temptation to do something required to the avatar object during the login process, reducing the need for set-up boilerplate in non-test situations as well.

This is actually part of the design of cred, too; it's the reason it doesn't specify any requirements in particular about the avatar interface.  Once you're through the login process, cred objects are supposed to be plain old python objects that don't do anything but respond to method calls made by your protocol.  The login / setup procedure shouldn't be a required part of their operation.

For example, your avatar object might require a reference to a database.  One way to acquire that would be to have some code in your IRealm implementation set a required attribute on the avatar object.  Another way would be to simply pass it to the avatar object's constructor.  I think the benefits of the latter approach are clear when you consider it, even though it may sometimes seem reasonable as you're writing the code to put more logic in requestAvatar since that is the "right" way to "get" an avatar object.

If it's simply a constructor argument, then you can provide a mock implementation for tests to avoid expensive database setup/teardown operations, making your tests faster.  Even if the DB object is too complex to bother mocking for tests, you can simulate error conditions that you want to write tests for by wrapping it up.  This is all _possible_ by going through some other object, of course (set it as an attribute on the Realm, or something like that) but it is more complex.  It's not clear where to modify your tests.  Presumably you'd have to subclass and override setUp or something like that.  In the constructor case, however, you just change the object that you pass in in the test body itself.

I could keep writing about my opinions on good test practice for an even longer essay... actually, I probably will, in a blog post.  For now, though, I think I've belabored the point enough :).  Hope this helps!



From rspringob at vmware.com  Tue Aug 29 13:12:48 2006
From: rspringob at vmware.com (Richard Springob)
Date: Tue, 29 Aug 2006 12:12:48 -0700
Subject: [Twisted-Python] newbie question: is twisted right for my app?
Message-ID: <4012E97255307449A93055E1E0AF61416E529A@PA-EXCH04.vmware.com>

I am designing a scheduling system and am wondering if twister is the right
tool for the job. The typical model is to have a server answering many
clients. I am looking at the inverse of having a solitary dispatcher (client)
contact many different hosts (servers) in order to pass them a job.   Looking
at the examples in the documentation, it looks like the normal procedure is
to have one persistent connection per reactor. Am I trying to do a bad thing
with twister?

I didn't want to ramble, so let me know if you need more info in order to
understand what I am trying to do here.
 
Thanks,
Rick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060829/74513a0f/attachment.html>

From exarkun at divmod.com  Tue Aug 29 13:34:49 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Tue, 29 Aug 2006 15:34:49 -0400
Subject: [Twisted-Python] newbie question: is twisted right for my app?
In-Reply-To: <4012E97255307449A93055E1E0AF61416E529A@PA-EXCH04.vmware.com>
Message-ID: <20060829193449.1717.1361407864.divmod.quotient.33962@ohm>

On Tue, 29 Aug 2006 12:12:48 -0700, Richard Springob <rspringob at vmware.com> wrote:
>I am designing a scheduling system and am wondering if twister is the right
>tool for the job. The typical model is to have a server answering many
>clients. I am looking at the inverse of having a solitary dispatcher (client)
>contact many different hosts (servers) in order to pass them a job.   Looking
>at the examples in the documentation, it looks like the normal procedure is
>to have one persistent connection per reactor. Am I trying to do a bad thing
>with twister?

It is completely normal to have multiple connections per reactor.  In fact, there can be only one reactor in a Twisted process.

Jean-Paul



From radix at twistedmatrix.com  Tue Aug 29 13:37:47 2006
From: radix at twistedmatrix.com (radix at twistedmatrix.com)
Date: Tue, 29 Aug 2006 19:37:47 -0000
Subject: [Twisted-Python] newbie question: is twisted right for my app?
Message-ID: <20060829193747.7857.1238870754.divmod.xquotient.2332@joule.divmod.com>

On 07:12 pm, rspringob at vmware.com wrote:
>I am designing a scheduling system and am wondering if twister is the right
>tool for the job. The typical model is to have a server answering many
>clients. I am looking at the inverse of having a solitary dispatcher (client)
>contact many different hosts (servers) in order to pass them a job.   Looking
>at the examples in the documentation, it looks like the normal procedure is
>to have one persistent connection per reactor. Am I trying to do a bad thing
>with twister?

No, Twiste*d* lets you use multiple connections with the same reactor; in fact, you can only have one reactor instance in your program. The reactor is an event loop; it handles many event sources at once.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20060829/075ae721/attachment.html>

From p.mayers at imperial.ac.uk  Wed Aug 30 10:12:02 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 30 Aug 2006 17:12:02 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
Message-ID: <44F5B8D2.7040500@imperial.ac.uk>

I want a line-oriented protocol to listen on an SSL port, and I want 
client certificate authentication for this.

How do I specify this:

strports.service('ssl:4443:privateKey=key.pem:certKey=cert.pem:clientCert=must')

...or similar?



From exarkun at divmod.com  Wed Aug 30 10:30:35 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Wed, 30 Aug 2006 12:30:35 -0400
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <44F5B8D2.7040500@imperial.ac.uk>
Message-ID: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>

On Wed, 30 Aug 2006 17:12:02 +0100, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>I want a line-oriented protocol to listen on an SSL port, and I want client 
>certificate authentication for this.
>
>How do I specify this:
>
>strports.service('ssl:4443:privateKey=key.pem:certKey=cert.pem:clientCert=must')
>
>...or similar?
>

No: use strports when you want to present strings of this form as a
user-interface element, not otherwise.

To programatically configure an SSL server which requires a client certificate
use something like this:

    from twisted.internet import ssl, reactor
    reactor.listenSSL(4443, f, ssl.CertificateOptions())

Unlike the older ContextFactory classes, CertificateOptions has somewhat
more modern requirements not dictated by HTTP.  Specifically, the method
is TLSv1 and certificates are required.

Jean-Paul



From general at eepatents.com  Wed Aug 30 13:55:40 2006
From: general at eepatents.com (Ed Suominen)
Date: Wed, 30 Aug 2006 12:55:40 -0700
Subject: [Twisted-Python] sAsync 0.2
In-Reply-To: <1151531286.4932.5.camel@wkv1.zmaxsolutions.com>
References: <e7ugki$pup$1@sea.gmane.org> <e7uieq$10e$1@sea.gmane.org>
	<1151531286.4932.5.camel@wkv1.zmaxsolutions.com>
Message-ID: <44F5ED3C.8000104@eepatents.com>

Version 0.2 of sAsync, "SQLAlchemy Done Asynchronously" has been
released at http://foss.eepatents.com/sAsync. It provides a
Twisted-compatible way to use SQLAlchemy.

There is a fair amount of documentation on the Trac site now, thanks in
large part to users of the package.

sAsync offers asynchronous access to the outstanding SQLAlchemy package
by Michael Bayer. It is built around an 'access broker' object that
provides a priority-queued asynchronous interface to database accesses.
This underlying transaction-queuing structure is much improved in
version 0.2.

By wrapping your database-access methods in a @transact decorator, you
can put the underlying method call in a queue with whatever scheduling
priority you designate and immediately obtain a Deferred object that
references the eventual result of the database transaction. The access
broker also includes structure for convenient and integrated table
setup, startup, and shutdown.

The package also provides higher-level SQLAlchemy enhancements
including persistent item storage with deferred read and write results,
and persistent dictionary, array, and graph objects using that storage.
Text indexing and searching, again with deferred 'behind the scenes'
processing, will be included at some point.

Best regards,
Ed Suominen



From p.mayers at imperial.ac.uk  Thu Aug 31 02:32:03 2006
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 31 Aug 2006 09:32:03 +0100
Subject: [Twisted-Python] strports.service, ssl and forcing client certs
In-Reply-To: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
References: <20060830163035.1717.806136533.divmod.quotient.34631@ohm>
Message-ID: <44F69E83.3000303@imperial.ac.uk>

Jean-Paul Calderone wrote:
> No: use strports when you want to present strings of this form as a
> user-interface element, not otherwise.

Ok, but interesting. Why not otherwise? Do they have something bad about 
them?

> 
> To programatically configure an SSL server which requires a client 
> certificate
> use something like this:
> 
>    from twisted.internet import ssl, reactor
>    reactor.listenSSL(4443, f, ssl.CertificateOptions())

This is in a .tac file but I get the idea.

> Unlike the older ContextFactory classes, CertificateOptions has somewhat
> more modern requirements not dictated by HTTP.  Specifically, the method
> is TLSv1 and certificates are required.

 >>> import twisted
 >>> import twisted.internet.ssl
 >>> ssl.CertificateOptions()
Traceback (most recent call last):
   File "<stdin>", line 1, in ?
NameError: name 'ssl' is not defined
 >>> twisted.__version__
'2.4.0'

When was that added?

The only reason I was using strports was that the ContextFactory thing 
was a royal pain to do even the most basic SSL setup (like e.g. a server 
cert and key...). I'd be glad to ditch it.



From etaoinbe at yahoo.com  Thu Aug 31 09:51:46 2006
From: etaoinbe at yahoo.com (f rom)
Date: Thu, 31 Aug 2006 08:51:46 -0700 (PDT)
Subject: [Twisted-Python] echoclient_ssl.py traceback
Message-ID: <20060831155147.56431.qmail@web50907.mail.yahoo.com>

Am new to twisted and considering to use it instead of
handcoding ssl (have a working example coded in
pyopenssl).

the demo from
http://twistedmatrix.com/projects/core/documentation/examples/
has issues on windows with python 2.4


q:\socketcomm>echoclient_ssl.py
receive: Hello, world!
receive: What a fine day it is.
receive: Bye-bye!
connection lost (protocol)
connection lost: Connection to the other side was lost
in a non-clean fashion.
Traceback (most recent call last):
  File "q:\socketcomm\echoclient_ssl.py", line 47, in
?
    main()
  File "q:\socketcomm\echoclient_ssl.py", line 44, in
main
    reactor.run()
  File
"C:\python24\lib\site-packages\twisted\internet\posixbase.py",
line 218, in run
    self.mainLoop()
  File
"C:\python24\lib\site-packages\twisted\internet\posixbase.py",
line 226, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File
"C:\python24\lib\site-packages\twisted\internet\base.py",
line 555, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File
"C:\python24\lib\site-packages\twisted\internet\base.py",
line 411, in _continueSystemEvent
    for callList in sysEvtTriggers[1],
sysEvtTriggers[2]:
exceptions.TypeError: unsubscriptable object


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 



From exarkun at divmod.com  Thu Aug 31 10:17:00 2006
From: exarkun at divmod.com (Jean-Paul Calderone)
Date: Thu, 31 Aug 2006 12:17:00 -0400
Subject: [Twisted-Python] echoclient_ssl.py traceback
In-Reply-To: <20060831155147.56431.qmail@web50907.mail.yahoo.com>
Message-ID: <20060831161700.1717.742928390.divmod.quotient.35325@ohm>

On Thu, 31 Aug 2006 08:51:46 -0700 (PDT), f rom <etaoinbe at yahoo.com> wrote:
>Am new to twisted and considering to use it instead of
>handcoding ssl (have a working example coded in
>pyopenssl).
>
>the demo from
>http://twistedmatrix.com/projects/core/documentation/examples/
>has issues on windows with python 2.4
>

This is a trivial bug unrelated to SSL.  Thanks for pointing it out.
There is a patch which fixes the issue in the tracker:

  http://twistedmatrix.com/trac/ticket/2040

Jean-Paul



