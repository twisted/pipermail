From adi at roiban.ro  Sat Mar  1 03:03:46 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 1 Mar 2014 12:03:46 +0200
Subject: [Twisted-Python] Help non-commiter to fully test their changes
 locally or remote
In-Reply-To: <5310AC8F.6090603@atleastfornow.net>
References: <CAFycZ9c9K37vHGJd=a2dFyi_8Z=D0omSEuQ6XO5zWQE+U2Cc0w@mail.gmail.com>
 <5310AC8F.6090603@atleastfornow.net>
Message-ID: <CAFycZ9cGTYk2W4OnRdutQuazBEW=bveysj=f=YW9YbsrhgVsQQ@mail.gmail.com>

On 28 February 2014 17:34, HawkOwl <hawkowl at atleastfornow.net> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi,
>
> TwistedChecker is kind of maintained by me - I've just not had the
> drive to work on it as much as other things :)
>

Right now I want to fix all errors produced during apidocs generation and
next in list is twistedchecker.
I like pedantic linters so maybe I can help with making twistedcheker
easier to use.


> Some of the invalid TwistedChecker errors are hard to solve - some are
> because they're hard to detect statically (for example, `some_var %
> 20` - is this string formatting, or modulo? Who knows, without runtime
> inspection).
>

Maybe those kind of errors could be documented in a list so that a
developer could run twistedcheker in a mode
where any reported error is a real error and should be fixed.

We can also have a 'crazy' run for twistedcheker where ambiguous errors are
reported and that require
a human to review them.

TwistedChecker has some form of diff functionality. When I get the
> time I might have to think of how to do it locally, rather than
> relying on the buildbots.
>

I will look at how --diff works and will try to document how devs can run
in locally.

Regards,
> HawkOwl
>
>
Thanks for the feedback!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140301/deea7e99/attachment.html>

From trac at twistedmatrix.com  Sun Mar  2 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Mar 2014 07:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1393743915.1.7937064185276959179@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140302/1bd11408/attachment.html>

From erdamn at gmail.com  Sun Mar  2 17:05:30 2014
From: erdamn at gmail.com (Jay Kay)
Date: Sun, 2 Mar 2014 16:05:30 -0800
Subject: [Twisted-Python] Stream an mp3 file + IP Multicasting
Message-ID: <CAPEQvg03ZHhxN15g_OrX2n60AOmcQD5_MnsL_R3MgbugsEGCxA@mail.gmail.com>

Hi everybody, I am trying to stream an mp3 file via ip multicasting and
have found the following script:

https://sites.google.com/site/ka010notes/python/twisted#TOC-Multicast-ENCODEDAudioStream

When I run this script on the server I am able to open the stream on VLC
player from another device on the subnet but it is laggy/missing/choppy.

When I try streaming this mp3 file using VLC player on the server, I am
able to successfully open the stream with good quality, without any lags.

I have tried playing around with the parameters in this script such as
changeing the interval in l.start(0.2) but nothing has worked =/. It would
be great if somebody can help me out here.

Thanks in advance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140302/e1f40d42/attachment.html>

From burak at nehbit.net  Sun Mar  2 23:34:03 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 2 Mar 2014 22:34:03 -0800
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
Message-ID: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>

Hi everyone,?

It seems that I ran into a rather inextricable problem, would love to see what you think.

As you might remember, I have been working on a distributed, anonymous community platform(s) called Aether ( www.getaether.net ) which is largely a Twisted codebase in its networking system. After releasing the app, I ended up with performance problems, in some part due to my programming incompetence, and some part because I was also using it to drive a GUI with qtreactor, which ran its own Javascript interpreter.

The codebase is largely cleaned up now and the current architecture of the program involves two processes that talk to each other via Ampoule: a default reactor core, which handles network events, and a qtreactor which is solely concerned with the user interface. It works very well. Stress induced by networking does not slow down the UI and vice versa.?

The problem here is that I can?t freeze and package the app via PyInstaller to release it. What happens is that when I run the packaged application, the application starts to spawn an infinite amount of copies of itself. This seems to be the default behaviour of Ampoule, in when a worker process (my GUI) fails, it spawns a new one.?

1) How can I disable this feature? I want ampoule to not?restart a failed worker process.?

2) How can I get information about what?s going wrong in the worker process? I am using a custom bootstrap code, and it seems that even if I deliver an empty bootstrap code to make it a noop, the process still fails and a new one is spawned. Or to be more accurate, just a new process is spawned, I don?t know whether if it is failing, but nothing happens on spawned processes, none of them start to show GUI or any other signs of life.?

If I don?t force quit my frozen app, it will create an increasing number of zombie processes.?

I have Twisted logging set up in the GUI process, but it doesn?t even hit that line, so I get no exceptions or any message of any kind. It fails even with empty bootstrap code.?

Any idea on how to approach this problem? I have nothing to start with , so anything would be appreciated. I?m reading the source code of Ampoule but found nothing useful so far.?

The non-frozen version of the app works fine. I also have a prior version of the app that can be packaged, so there?s nothing wrong with my Twisted code that can?t be packaged. It?s Ampoule that is newly added, and so far resisting the refrigerator.

Best regards,
Burak






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140302/921bdc99/attachment.html>

From exarkun at twistedmatrix.com  Mon Mar  3 05:17:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Mar 2014 12:17:57 -0000
Subject: [Twisted-Python] [twisted-web] I/O error with twisted.web.wsgi
 and Django
In-Reply-To: <3227632E-B3C6-44B3-9909-96DCEBCCC137@orestis.gr>
References: <3227632E-B3C6-44B3-9909-96DCEBCCC137@orestis.gr>
Message-ID: <20140303121757.6218.1474587763.divmod.xquotient.170@top>

On 27 Feb, 11:21 am, orestis at orestis.gr wrote:
>Hi all,
>
>I am using Twisted Web WSGIResource to host a Django site. Here's the 
>code I use to setup the WSGI resource (other boilerplate skipped)
>
>def wsgi_resource():
>     from django.core.handlers.wsgi import WSGIHandler
>     pool = threadpool.ThreadPool()
>     pool.start()
>     # Allow Ctrl-C to get you out cleanly:
>     reactor.addSystemEventTrigger('after', 'shutdown', pool.stop)
>     wsgi_resource = wsgi.WSGIResource(reactor, pool, WSGIHandler())
>     return wsgi_resource
>
>This generally worked quite well. However I have an API endpoint that 
>gets hit with multiple POST requests per second (not very much - I'd 
>say 10-20 req/sec at most). Sometimes I see this in the logs:

If you can put together an http://sscce.org/ it would be easier to 
investigate this problem. :)

Jean-Paul


From exarkun at twistedmatrix.com  Mon Mar  3 05:19:26 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Mar 2014 12:19:26 -0000
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
Message-ID: <20140303121926.6218.526328592.divmod.xquotient.173@top>

On 06:34 am, burak at nehbit.net wrote:
>Hi everyone,
>
>It seems that I ran into a rather inextricable problem, would love to 
>see what you think.
>
>As you might remember, I have been working on a distributed, anonymous 
>community platform(s) called Aether ( www.getaether.net ) which is 
>largely a Twisted codebase in its networking system. After releasing 
>the app, I ended up with performance problems, in some part due to my 
>programming incompetence, and some part because I was also using it to 
>drive a GUI with qtreactor, which ran its own Javascript interpreter.
>
>The codebase is largely cleaned up now and the current architecture of 
>the program involves two processes that talk to each other via Ampoule: 
>a default reactor core, which handles network events, and a qtreactor 
>which is solely concerned with the user interface. It works very well. 
>Stress induced by networking does not slow down the UI and vice versa.

I wonder why you decided to use Ampoule to manage a single child process 
(that apparently shouldn't be restarted when it exits)?

I think Ampoule's purpose is to make it easy to run many processes and 
automatically restart them from time to time.

It sounds like the basic process support included in Twisted, 
reactor.spawnProcess, could address your requirements.

Jean-Paul


From adi at roiban.ro  Mon Mar  3 09:59:01 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 18:59:01 +0200
Subject: [Twisted-Python] Work around pyflakes errors
Message-ID: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>

I would like to see twisted code base free of pyflakes errors.

In this way, when someone sees pyflakes errors in his/her branch will know
for sure that those errors are generated by changes in that branch. Also
developers could run pyflakes on local computers, before sending a patch
and have instance feedback for pyflakes errors.

One problem is that pyflakes will complain about unused imports.

JP suggested a fix for that and I have created a ticket:
https://twistedmatrix.com/trac/ticket/7014

I am not sure how the suggested requireModule("OpenSSL") style API should
work, but in the same comment, JP suggested to use 'namedAny' to get the
same effect as the unused import.

My problem with namedAny is that it does not raise ImportError ... but
rather ModuleNotFound or ObjectNotFound.

But I found 'namedModule' which raise ImportError

Here is an example of namedModule usage which should work around pyflakes
errors.

Old code:

try:
    import threading
    threading  # Silence the linter.
except ImportError:
    self.assertFalse(Platform().supportsThreads())

New code

try:
    namedModule('threading')
except ImportError:
    self.assertFalse(Platform().supportsThreads())

What do you think, is namedModule usage acceptable or we should work at
implementing the requireModule("OpenSSL") API?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140303/a87a1bed/attachment.html>

From adi at roiban.ro  Mon Mar  3 10:11:12 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 19:11:12 +0200
Subject: [Twisted-Python] Fixing pydoctor / epydocs errors
Message-ID: <CAFycZ9eACkPqTQYXGH_-f5Ai3XZ4Cw7M_EedVPUXZ96yYMOVog@mail.gmail.com>

Hi,

I would like to fix pydoctor / epydocs errors generated while building
twisted api reference documentation.

The goal is to have a clean build so that when a developer sees an error in
his/her branch, the errors is for sure produced by his/her changes.

My current problem is that I can not reproduce the results generated by
Twisted buildbot.

For example for pair, Twisted buildbot gives [1]:

twisted.pair.tuntap._IInputOutputSystem.ioctl:143 invalid ref to fcntl.ioctl
twisted.pair.tuntap._IInputOutputSystem.ioctl:143 invalid ref to fcntl.ioctl
twisted.pair.testing.MemoryIOSystem.ioctl:442 invalid ref to fcntl.ioctl
twisted.pair.testing.MemoryIOSystem.ioctl:442 invalid ref to fcntl.ioctl

While on Travis-CI builder, and my local system I get [2]:

twisted.pair.testing.MemoryIOSystem.receiveUDP:494 invalid ref to
socket.socket
twisted.pair.testing.MemoryIOSystem.receiveUDP:494 invalid ref to
socket.socket
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.tuntap._IInputOutputSystem.receiveUDP:182 invalid ref to
socket.socket
twisted.pair.tuntap._IInputOutputSystem.receiveUDP:182 invalid ref to
socket.socket

-----

The command used is

python bin/admin/build-apidocs . apidocs

Does anyone has any clue what can go wrong and why I get this differences ?

Thanks!

[1] https://travis-ci.org/chevah/twisted/jobs/19809459
[2]
http://buildbot.twistedmatrix.com/builders/documentation/builds/4469/steps/api-documentation/logs/stdio

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140303/9ca6aa89/attachment-0001.html>

From adi at roiban.ro  Mon Mar  3 11:09:11 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 20:09:11 +0200
Subject: [Twisted-Python] Configuration options for twisted code
Message-ID: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>

While using twisted.web (but not only) I had to sub-class twisted code to
implement the following:

HTTPChannel
* reduce limit of HTTP headers length
* reduce number of HTTP headers
* connection timeout

HTTPRequest
* change HTTP server signature
* change HTTP cookie name and secure/HTTPOnly flag

Static.File
* resource for child not found
* resource for forbidden
* template for directory listing.

During review process, one feedback was to add these options as part of
__init__ method for the required classes and another one was to design some
configuration system, which allows changing these options without
sub-classing.

What do you think? Should I go ahead and add options as __init__ arguments
or think of a configuration system?

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140303/4e37be9c/attachment.html>

From donald at stufft.io  Mon Mar  3 17:44:06 2014
From: donald at stufft.io (Donald Stufft)
Date: Mon, 3 Mar 2014 19:44:06 -0500
Subject: [Twisted-Python] treq // Agent and Content-Length
Message-ID: <7A4131AD-1698-4494-9730-0AE9A06CE2B1@stufft.io>

I?m making a small proxy server in Twisted which is supposed to essentially
"mask" the original destination of an URL. Specifically it does the following:

1. Receives an HTTP request on /<hmac>/<url encoded url>
2. Verifies that the hmac in the URL matches the url decoded url
3. Makes an HTTP request to the url decoded url
4. Verify the response
   4a. Verify that the *on the wire* size is not greater than a set number of
       bytes, prior to downloading the body.
   4b. Verify that the content-type is acceptable prior to downloading the
       body.
5. Download the body of the response without modifying it (No Gzip decode)
6. Return the unmodified downloaded response as the resposne to the HTTP
   request in 1, as well as copying over several Response Headers.

This should be able to pass through ``Accept-Encoding`` from the request in
#1 to the request made in #3.

I've had a problem getting 4a to happen, no matter what I've tried if the
Content-Encoding is set to gzip it appears that the length of the response
is unknown. Additionally the "connection headers" are split out from the normal
headers, so I cannot seem to locate the original ``Content-Length`` header to
simply check that.

I got frustrated and implemented it using requests and that has worked OK. It
however uses deferToThread and I would like to get back to using the built
in tooling.

So my question is, how can I make Agent/treq do this?

The requests version of the code is here: https://gist.github.com/dstufft/7c8aac898de0ad359675
The treq versions of the code is here: https://gist.github.com/dstufft/0dffb12201d235f35bc7

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140303/ec6a2893/attachment.pgp>

From itamar at itamarst.org  Mon Mar  3 17:52:01 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 03 Mar 2014 19:52:01 -0500
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
Message-ID: <531523B1.3090001@itamarst.org>

On 03/03/2014 01:09 PM, Adi Roiban wrote:
>
> What do you think? Should I go ahead and add options as __init__ 
> arguments or think of a configuration system?
>

A configuration system would take a while to design and meanwhile these 
unrelated features would languish, so I'd suggest you start with options 
to __init__.


From p.mayers at imperial.ac.uk  Tue Mar  4 00:41:10 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 04 Mar 2014 07:41:10 +0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <531523B1.3090001@itamarst.org>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org>
Message-ID: <53158396.1010401@imperial.ac.uk>

On 04/03/2014 00:52, Itamar Turner-Trauring wrote:
> On 03/03/2014 01:09 PM, Adi Roiban wrote:
>>
>> What do you think? Should I go ahead and add options as __init__
>> arguments or think of a configuration system?
>>
>
> A configuration system would take a while to design and meanwhile these
> unrelated features would languish, so I'd suggest you start with options
> to __init__.

-1

I hate __init__ methods with a hojillion parameters, and that's where 
this leads.

+1 instead for class variables which can be overridden in sub-classes to 
achieve DRY and/or set after instantiation if necessary e.g.

class Foo:
   maxThingLen = 10000

class MyFoo(Foo):
   maxThingLen = 100

This is also somewhat consistent with what things like t.w.s.Site 
already do.


From exarkun at twistedmatrix.com  Tue Mar  4 05:17:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 Mar 2014 12:17:49 -0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <53158396.1010401@imperial.ac.uk>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
Message-ID: <20140304121749.6218.2038060974.divmod.xquotient.179@top>

On 07:41 am, p.mayers at imperial.ac.uk wrote:
>On 04/03/2014 00:52, Itamar Turner-Trauring wrote:
>>On 03/03/2014 01:09 PM, Adi Roiban wrote:
>>>
>>>What do you think? Should I go ahead and add options as __init__
>>>arguments or think of a configuration system?
>>
>>A configuration system would take a while to design and meanwhile 
>>these
>>unrelated features would languish, so I'd suggest you start with 
>>options
>>to __init__.
>
>-1
>
>I hate __init__ methods with a hojillion parameters, and that's where 
>this leads.

Functions that take arguments are great.  If your function takes *too 
many* arguments then maybe the function does too many things or maybe 
there is some structure spread across those arguments that should be 
explicitly reflected in their type (iow maybe those last five arguments 
are all actually part of the same thing and should be represented by a 
single argument instead).
>+1 instead for class variables which can be overridden in sub-classes 
>to achieve DRY and/or set after instantiation if necessary e.g.
>
>class Foo:
>   maxThingLen = 10000
>
>class MyFoo(Foo):
>   maxThingLen = 100
>
>This is also somewhat consistent with what things like t.w.s.Site 
>already do.

This is compatible with accepting these values as arguments.  Defaults 
that provide good behavior by default for the common case are great.

Jean-Paul


From adi at roiban.ro  Tue Mar  4 05:41:35 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Mar 2014 14:41:35 +0200
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <53158396.1010401@imperial.ac.uk>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
Message-ID: <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>

> A configuration system would take a while to design

This reads like: A configuration system will never be implemented.

I agree that for the time being we can implement current tickets using
__init__ arguments,
but why not try to implement something simple?

Example:

TWISTED_WEB_DEFAULT_CONFIGURATIO = {
  'request.headers.count': 500,
  'request.headers.size': 16384,
  'request.session.name' :  'TWISTED_SESSION',
  }

# We can have a helper method to get default configuration
configInstance = TWISTED_WEB_DEFAULT_CONFIGURATION.copy()
configInstance[''request.headers.count'] = 100
t.w.s.Site(configuration=configInstance)

Or a bit more structured:

class RequestConfiguration(object):
   def __init__(self):
     self.max_headers_count = 500
     self.request_max_header_size = 16384
     self.session_cookie_name = 'TWISTED_SESSION'
     self.session_cookie_secure = True
     self.session_cookie_http_only = True

class TwistedWebConfiguration(object):
  def __init__(self):
       self.request = RequestConfiguration()

configInstance = TwistedWebConfiguration()
configInstance.request.max_headers_count = 100

t.w.s.Site(configuration=configInstance)

Or a mix:

configInstance = TwistedWebConfiguration()
configInstance.set('request.headers.count', 100)
t.w.s.Site(configuration=configInstance)

and support some sort of inheritance.

configInstance.set('timeout', 100)
assert configInstance.get('request.timeout') == 100
configInstance.set('request.timeout', 200)
assert configInstance.get('request.timeout') == 200

Or some design used in other project... or some other crazy idea.

-----

In Twisted web I found both configuration overridden in sub-classes
(t.w.s.Site) and defined via __init__ (t.w.s.File)

twisted.web.static.File has 5 arguments, but the following
configuration are missing : indexNames, childNotFoundResource,
forbiddenResource, directoryListing resource

As Jean-Paul commented, when there are too many arguments and they are
all related, they could be represented by a single argument.
For me, this single argument could be a configuration object.

Too many arguments are a code smell, but when you can say that a
method has too many arguments?

Thanks!
-- 
Adi Roiban


From exarkun at twistedmatrix.com  Tue Mar  4 06:22:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 Mar 2014 13:22:57 -0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
 <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
Message-ID: <20140304132257.6218.1352865863.divmod.xquotient.221@top>

On 12:41 pm, adi at roiban.ro wrote:
>>A configuration system would take a while to design
>
>This reads like: A configuration system will never be implemented.
>
>I agree that for the time being we can implement current tickets using
>__init__ arguments,
>but why not try to implement something simple?
>
>Example:
>
>TWISTED_WEB_DEFAULT_CONFIGURATIO = {
>  'request.headers.count': 500,
>  'request.headers.size': 16384,
>  'request.session.name' :  'TWISTED_SESSION',
>  }
>
># We can have a helper method to get default configuration
>configInstance = TWISTED_WEB_DEFAULT_CONFIGURATION.copy()
>configInstance[''request.headers.count'] = 100
>t.w.s.Site(configuration=configInstance)
>
>Or a bit more structured:
>
>class RequestConfiguration(object):
>   def __init__(self):
>     self.max_headers_count = 500
>     self.request_max_header_size = 16384
>     self.session_cookie_name = 'TWISTED_SESSION'
>     self.session_cookie_secure = True
>     self.session_cookie_http_only = True
>
>class TwistedWebConfiguration(object):
>  def __init__(self):
>       self.request = RequestConfiguration()
>
>configInstance = TwistedWebConfiguration()
>configInstance.request.max_headers_count = 100
>
>t.w.s.Site(configuration=configInstance)
>
>Or a mix:
>
>configInstance = TwistedWebConfiguration()
>configInstance.set('request.headers.count', 100)
>t.w.s.Site(configuration=configInstance)
>
>and support some sort of inheritance.
>
>configInstance.set('timeout', 100)
>assert configInstance.get('request.timeout') == 100
>configInstance.set('request.timeout', 200)
>assert configInstance.get('request.timeout') == 200
>
>Or some design used in other project... or some other crazy idea.
>
>-----
>
>In Twisted web I found both configuration overridden in sub-classes
>(t.w.s.Site) and defined via __init__ (t.w.s.File)
>
>twisted.web.static.File has 5 arguments, but the following
>configuration are missing : indexNames, childNotFoundResource,
>forbiddenResource, directoryListing resource
>
>As Jean-Paul commented, when there are too many arguments and they are
>all related, they could be represented by a single argument.
>For me, this single argument could be a configuration object.

The big downside of a "configuration object" is that "configuration" 
isn't any kind of abstraction.  "Configuration" approximately means 
"stuff".  Where does your "configuration" end?  By just saying this is 
where "configuration" goes you've defined its scope as infinite.  Before 
you know it, there's 80,000 items in your "configuration" object and 
you're really much worse off than if you'd just added a couple more 
arguments to `__init__`.

I'd like to see this discussion going in the other direction so to give 
it a little push that way, here's a specific suggestion. :)  Most or all 
of this may be recycled from discussion that's already taken place - I'm 
not taking credit, just repeating it. :)

Give `Request.__init__` some new optional arguments to control the size 
of the header.  This could be several arguments like `maxHeaderLines` 
and `maxHeaderValueLength` and so on... Or perhaps it should just be one 
argument that can completely describe the header size limitation 
(stretching this idea further, perhaps the one argument is a callable 
that takes a `Headers` instance and determines if it has gotten to big).

Then, perhaps, also give `HTTPFactory.__init__` (and therefore 
`Site.__init__` a `requestFactory` argument so that the request class 
can be replaced more easily (although setting the `requestFactory` 
attribute after creating an instance isn't *too* bad).

These two things combined make the usage pretty flexible while still 
being pretty simple and without involving any more complicated 
"configuration" system:

    def requestFactory(*args, **kwargs):
        kwargs["headerSizeLimit"] = HeaderSizeLimit(
            maxLines=23, maxTotalBytes=57, ...)
        return Site.requestFactory(*args, **kwargs)

    site = Site(..., requestFactory=requestFactory)

If anyone is really interested in building (or adopting) a more general 
"configuration" system for Twisted then I suggest you start by looking 
up some of Twisted's past attempts including the the "Coil" library 
Itamar started (he'll have to provide a link, I've lost track of where 
it lives now).

Jean-Paul


From adi at roiban.ro  Tue Mar  4 09:46:48 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Mar 2014 18:46:48 +0200
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <20140304132257.6218.1352865863.divmod.xquotient.221@top>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
 <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
 <20140304132257.6218.1352865863.divmod.xquotient.221@top>
Message-ID: <CAFycZ9dAupsOetQ1Eqsh=vnuXyCgec7jD1=w69ZCD2iu7svppA@mail.gmail.com>

On 4 March 2014 15:22,  <exarkun at twistedmatrix.com> wrote:
> The big downside of a "configuration object" is that "configuration" isn't
> any kind of abstraction.  "Configuration" approximately means "stuff".
> Where does your "configuration" end?  By just saying this is where
> "configuration" goes you've defined its scope as infinite.  Before you know
> it, there's 80,000 items in your "configuration" object and you're really
> much worse off than if you'd just added a couple more arguments to
> `__init__`.

Agree.

> I'd like to see this discussion going in the other direction so to give it a
> little push that way, here's a specific suggestion. :)  Most or all of this
> may be recycled from discussion that's already taken place - I'm not taking
> credit, just repeating it. :)
>
> Give `Request.__init__` some new optional arguments to control the size of
> the header.  This could be several arguments like `maxHeaderLines` and
> `maxHeaderValueLength` and so on... Or perhaps it should just be one
> argument that can completely describe the header size limitation (stretching
> this idea further, perhaps the one argument is a callable that takes a
> `Headers` instance and determines if it has gotten to big).
>
> Then, perhaps, also give `HTTPFactory.__init__` (and therefore
> `Site.__init__` a `requestFactory` argument so that the request class can be
> replaced more easily (although setting the `requestFactory` attribute after
> creating an instance isn't *too* bad).

Why setting `requestFactory` attribute after instanciation isn't too bad?

Why not apply the same rule for setting attributes like maxHeaders and
maxHeader size
in Request itself?

> These two things combined make the usage pretty flexible while still being
> pretty simple and without involving any more complicated "configuration"
> system:
>
>    def requestFactory(*args, **kwargs):
>        kwargs["headerSizeLimit"] = HeaderSizeLimit(
>            maxLines=23, maxTotalBytes=57, ...)
>        return Site.requestFactory(*args, **kwargs)
>
>    site = Site(..., requestFactory=requestFactory)

The HeaderSizeLimit class looks like a Configuration class and I am
happy with it.

I will go and update the branches to include suggested changes.
Thank you all for the feedback!

> If anyone is really interested in building (or adopting) a more general
> "configuration" system for Twisted then I suggest you start by looking up
> some of Twisted's past attempts including the the "Coil" library Itamar
> started (he'll have to provide a link, I've lost track of where it lives
> now).

I am not really interested in building a big "configuration" system
for Twisted so don't worry
for the link.

Thanks!

-- 
Adi Roiban


From glyph at twistedmatrix.com  Tue Mar  4 15:50:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Mar 2014 14:50:29 -0800
Subject: [Twisted-Python] Where are the documentation files?
In-Reply-To: <CAKN9TDJ4K8GQQiW=Hb43RTk=xxFmPt8BWRO-7KVj3Oqknu5J+w@mail.gmail.com>
References: <CAKN9TD+u-Wd8xC6yMtKqhFmJPe4NveGfzSUwWFSu36rbWfQLWA@mail.gmail.com>
 <CAFycZ9dNBc1P9J9CUfyk_ey0t0K4OssM75OVzs0zsLsDVqkXTg@mail.gmail.com>
 <CAKN9TDLqASUK6S2Jh7qydF9+hG0in7kzT8bo8v4wL2OJv-aF1A@mail.gmail.com>
 <CAFycZ9eVnC91OmxJfbwPJmMBSb2obTAtbK=DVb6oJ_haHSYs2Q@mail.gmail.com>
 <CAKN9TD+f0x1E8hRaVVULmiNFbw0n=1Xs2+P55msUJOj2iD7XEQ@mail.gmail.com>
 <0AD9476A-2353-428F-8334-FD3470289CF2@twistedmatrix.com>
 <CAKN9TDJ4K8GQQiW=Hb43RTk=xxFmPt8BWRO-7KVj3Oqknu5J+w@mail.gmail.com>
Message-ID: <C78446EF-5B77-437F-BB24-834B0B0DB921@twistedmatrix.com>


On Feb 27, 2014, at 10:39 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

>>> Also, do you have any idea when the new documentation system will up and
>>> ready for contributions?
>>> 
>> It's up and running; there should be a lot less need for documentation (although
>> as you pointed out the current docs are wrong) because sphinx is better
>> understood generally in the wider Python community.
> 
> Cool. I'm enough of a n00b that sphinx versus whatever else is all Greek for me.
> 
>> If you'd like to write some ReST docs right now and submit a patch, please go ahead!
> 
> Working on it.

Let me just stress that you should work on getting the english part of the documentation right, and someone else will happily help you with the formatting.  If you just can't figure out the documentation toolchain, write it in plain text.  Don't get stuck on ReST or Sphinx nonsense :-).

-glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140304/85998dae/attachment.bin>

From yangyouxiu at gmail.com  Wed Mar  5 07:35:18 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 5 Mar 2014 22:35:18 +0800
Subject: [Twisted-Python] Using DeferredList,
	on the remote method get parameter of None type?
Message-ID: <2014030522351363970510@gmail.com>


When developing server-client software, on the client i call the method getTrafficDate, but on the server end, i got nio is None(d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio)))
,so, what's the key point?

Thanks all!
-------------------------------------------------------------------------------------------------------------
client end
def getTrafficDate(self):
       if self.interfacenio_dict is not None and self.k:
            nodelist = self.interfacenio_dict.keys()
            trafficDataList=[]#DeferredList
            for node in nodelist:
                interfaces=self.interfacenio_dict[node]['interfaceinfo'].keys()
                if len(interfaces):
                    for interface in interfaces:
                        nio= self.interfacenio_dict[node]['interfaceinfo'][interface]
                        if nio is not None:
                            if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
                                d= globals.perspective.callRemote('getServerRoot')
                                d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio))
                                d2.addCallback(self.setTrafficSpeed_Tap, node, interface)
                                trafficDataList.append(d2)
                            else:
                                d= globals.perspective.callRemote('getServerRoot')
                                d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio))
                                d2.addCallback(self.setTrafficSpeed_NotTap, node, interface)
                                trafficDataList.append(d2)
            
            trafficDataDeferredList=defer.DeferredList(trafficDataList, consumeErrors=True)
            trafficDataDeferredList.addCallback(self.getTrafficDataHandle)


server end
def remote_getNIOTrafficInfo(self,node,nio):
print nio
 if nio.name==nioName:
    pass

Bug info is:
File "/home/gddw/Documents/gddw-server-branche/src/Server.py", line 154, in remote_getNIOTrafficInfo
    if nio.name==nioName:
exceptions.AttributeError: 'NoneType' object has no attribute 'name'
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140305/4a117f91/attachment.html>

From exarkun at twistedmatrix.com  Wed Mar  5 08:00:47 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Mar 2014 15:00:47 -0000
Subject: [Twisted-Python] Using DeferredList,
 on the remote method get parameter of None type?
In-Reply-To: <2014030522351363970510@gmail.com>
References: <2014030522351363970510@gmail.com>
Message-ID: <20140305150047.6218.1060392688.divmod.xquotient.232@top>

On 02:35 pm, yangyouxiu at gmail.com wrote:
>
>When developing server-client software, on the client i call the method 
>getTrafficDate, but on the server end, i got nio is 
>None(d2=d.addCallback(lambda object: 
>object.callRemote("getNIOTrafficInfo", node, nio)))
>,so, what's the key point?
>
>[snip]
>        for interface in interfaces:
>            nio= 
>self.interfacenio_dict[node]['interfaceinfo'][interface]
>            if nio is not None:
>                if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
>                    d= globals.perspective.callRemote('getServerRoot')
>                    d2=d.addCallback(
>                        lambda object:
>                            object.callRemote("getNIOTrafficInfo", node, 
>nio))
>[snip]

The value of `nio` varies for each iteration of the loop.  The value of 
`nio` isn't passed to the getNIOTrafficInfo remote method until the `d` 
Deferred fires - this will almost certainly be only after the loop 
finishes (since it depends on network traffic which will only happen 
after this method returns).

So all of the remote calls will be made with whatever value `nio` has on 
the last iteration of the loop.  This is just how scopes work in Python. 
Consider this simplified example:
>>>def foo():
...     functions = []
...     for i in range(3):
...         functions.append(lambda: i)
...     for f in functions:
...         print f()
...
>>>foo()
2
2
2
>>>

Jean-Paul


From p.mayers at imperial.ac.uk  Wed Mar  5 10:23:49 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 Mar 2014 17:23:49 +0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
Message-ID: <53175DA5.7090107@imperial.ac.uk>

All,

I'm having a head-poundingly annoying time getting detailed exception 
info out of the new Agent stuff.

Specifically, I have some bug inside my code somewhere, but I can't get 
decent tracebacks out because _WrapperException is the base class for 
RequestGenerationFailed, but there's no public (non-underscore-prefixed) 
way to get that.

It seems like an API error; how is one supposed to err.track/check other 
than importing a non-public API?


From glyph at twistedmatrix.com  Wed Mar  5 15:08:31 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2014 14:08:31 -0800
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <53175DA5.7090107@imperial.ac.uk>
References: <53175DA5.7090107@imperial.ac.uk>
Message-ID: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>

On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> All,
> 
> I'm having a head-poundingly annoying time getting detailed exception info out of the new Agent stuff.
> 
> Specifically, I have some bug inside my code somewhere, but I can't get decent tracebacks out because _WrapperException is the base class for RequestGenerationFailed, but there's no public (non-underscore-prefixed) way to get that.
> 
> It seems like an API error; how is one supposed to err.track/check other than importing a non-public API?

You're right; this is a bug in Agent.

<http://twistedmatrix.com/trac/ticket/5310>

For right now, yes, you're going to have to import some crappy private APIs.  Any chance I could convince you to submit some fixes to that ticket so we won't have to do that in the future? :-)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140305/628bdf00/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140305/628bdf00/attachment.bin>

From p.mayers at imperial.ac.uk  Wed Mar  5 15:49:37 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 Mar 2014 22:49:37 +0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
Message-ID: <5317AA01.60407@imperial.ac.uk>

On 05/03/2014 22:08, Glyph Lefkowitz wrote:

> You're right; this is a bug in Agent.
>
> <http://twistedmatrix.com/trac/ticket/5310>

And it must be said, really quite an infuriating one ;o)

>
> For right now, yes, you're going to have to import some crappy private
> APIs.  Any chance I could convince you to submit some fixes to that
> ticket so we won't have to do that in the future? :-)

I'll have a look tomorrow; though it seems like testing that would be 
tricky, and pointers to existing examples of how to test that 
Failure-with-traceback is being raised?

Do we know what the rationale for _WrapperException was? The only place 
it's used, it wraps a single exception, which is "singularly" pointless 
(ha ha marvel at my comedy).


From exarkun at twistedmatrix.com  Wed Mar  5 16:01:53 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Mar 2014 23:01:53 -0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
Message-ID: <20140305230153.6218.1125880239.divmod.xquotient.236@top>

On 10:08 pm, glyph at twistedmatrix.com wrote:
>On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> 
>wrote:
>>All,
>>
>>I'm having a head-poundingly annoying time getting detailed exception 
>>info out of the new Agent stuff.
>>
>>Specifically, I have some bug inside my code somewhere, but I can't 
>>get decent tracebacks out because _WrapperException is the base class 
>>for RequestGenerationFailed, but there's no public (non-underscore- 
>>prefixed) way to get that.
>>
>>It seems like an API error; how is one supposed to err.track/check 
>>other than importing a non-public API?
>
>You're right; this is a bug in Agent.
>
><http://twistedmatrix.com/trac/ticket/5310>

Happy Ash Wednesday - 
https://twistedmatrix.com/trac/ticket/5310#comment:5

Jean-Paul


From glyph at twistedmatrix.com  Wed Mar  5 18:19:12 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2014 17:19:12 -0800
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <20140305230153.6218.1125880239.divmod.xquotient.236@top>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
 <20140305230153.6218.1125880239.divmod.xquotient.236@top>
Message-ID: <85377069-DD81-40A3-B2A0-CA5A8B0D515E@twistedmatrix.com>


On Mar 5, 2014, at 3:01 PM, exarkun at twistedmatrix.com wrote:

> On 10:08 pm, glyph at twistedmatrix.com wrote:
>> On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>> All,
>>> 
>>> I'm having a head-poundingly annoying time getting detailed exception info out of the new Agent stuff.
>>> 
>>> Specifically, I have some bug inside my code somewhere, but I can't get decent tracebacks out because _WrapperException is the base class for RequestGenerationFailed, but there's no public (non-underscore- prefixed) way to get that.
>>> 
>>> It seems like an API error; how is one supposed to err.track/check other than importing a non-public API?
>> 
>> You're right; this is a bug in Agent.
>> 
>> <http://twistedmatrix.com/trac/ticket/5310>
> 
> Happy Ash Wednesday - https://twistedmatrix.com/trac/ticket/5310#comment:5

I've reviewed it, so, at least the public alias part should be fixed soon :).

-glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140305/8811a1be/attachment.bin>

From exarkun at twistedmatrix.com  Thu Mar  6 04:52:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Mar 2014 11:52:28 -0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <5317AA01.60407@imperial.ac.uk>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
 <5317AA01.60407@imperial.ac.uk>
Message-ID: <20140306115228.6218.1771387721.divmod.xquotient.240@top>

On 5 Mar, 10:49 pm, p.mayers at imperial.ac.uk wrote:
>On 05/03/2014 22:08, Glyph Lefkowitz wrote:
>>You're right; this is a bug in Agent.
>>
>><http://twistedmatrix.com/trac/ticket/5310>
>
>And it must be said, really quite an infuriating one ;o)
>>
>>For right now, yes, you're going to have to import some crappy private
>>APIs.  Any chance I could convince you to submit some fixes to that
>>ticket so we won't have to do that in the future? :-)
>
>I'll have a look tomorrow; though it seems like testing that would be 
>tricky, and pointers to existing examples of how to test that Failure- 
>with- traceback is being raised?
>
>Do we know what the rationale for _WrapperException was? The only place 
>it's used, it wraps a single exception, which is "singularly" pointless 
>(ha ha marvel at my comedy).

I think you overlooked some of its uses.  For example, ResponseFailed is 
a _WrapperException subclass and it is constructed with two failures in 
HTTP11ClientProtocol.connectionLost.

Jean-Paul


From yangyouxiu at gmail.com  Fri Mar  7 00:42:38 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Fri, 7 Mar 2014 15:42:38 +0800
Subject: [Twisted-Python] Using DeferredList,
	on the remote method get parameter of None type?
References: <2014030522351363970510@gmail.com>, 
 <20140305150047.6218.1060392688.divmod.xquotient.232@top>
Message-ID: <2014030715423486591612@gmail.com>


Thank you very much.
I got it, I changed it to use  a defer object, not deferredlist

From: exarkun
Date: 2014-03-05 23:00
To: Twisted general discussion
Subject: Re: [Twisted-Python] Using DeferredList, on the remote method get parameter of None type?
On 02:35 pm, yangyouxiu at gmail.com wrote:
>
>When developing server-client software, on the client i call the method 
>getTrafficDate, but on the server end, i got nio is 
>None(d2=d.addCallback(lambda object: 
>object.callRemote("getNIOTrafficInfo", node, nio)))
>,so, what's the key point?
>
>[snip]
>        for interface in interfaces:
>            nio= 
>self.interfacenio_dict[node]['interfaceinfo'][interface]
>            if nio is not None:
>                if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
>                    d= globals.perspective.callRemote('getServerRoot')
>                    d2=d.addCallback(
>                        lambda object:
>                            object.callRemote("getNIOTrafficInfo", node, 
>nio))
>[snip]

The value of `nio` varies for each iteration of the loop.  The value of 
`nio` isn't passed to the getNIOTrafficInfo remote method until the `d` 
Deferred fires - this will almost certainly be only after the loop 
finishes (since it depends on network traffic which will only happen 
after this method returns).

So all of the remote calls will be made with whatever value `nio` has on 
the last iteration of the loop.  This is just how scopes work in Python. 
Consider this simplified example:
>>>def foo():
...     functions = []
...     for i in range(3):
...         functions.append(lambda: i)
...     for f in functions:
...         print f()
...
>>>foo()
2
2
2
>>>

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140307/99e1ac35/attachment.html>

From dstainton415 at gmail.com  Sat Mar  8 03:02:31 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 8 Mar 2014 10:02:31 +0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
Message-ID: <20140308100231.GA4266@googlemail.com>



Greetings,

My goal is to get Brian Warner's foolscap library ported to Twisted
endpoints instead of the older Twisted api interfaces it currently
uses (ClientFactory and IConnector).

This effort has been documented in foolscap trac ticket #203:
http://foolscap.lothar.com/trac/ticket/203

and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P-friendly:
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517

My question is this:

Since Foolscap's TubConnectorClientFactory does rely
on clientConnectionFailed... What is the equivalent to this for the new
interfaces?

I have tried to braindump all my foolscap twisted endpoint thoughts to
foolscap trac ticket #203 :
http://foolscap.lothar.com/trac/ticket/203#comment:30
http://foolscap.lothar.com/trac/ticket/203#comment:31

If we look at line 1223 of
https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
(at 0395476c7cb154f925d67abf6858a8200126352b)

we see that there's this TubConnectorClientFactory:
class TubConnectorClientFactory(protocol.ClientFactory, object):

and later at line 1384 it is used with connectTCP like this:
            f = TubConnectorClientFactory(self, host, lp)
            c = reactor.connectTCP(host, port, f)

In my endpoints2 branch
(https://github.com/david415/foolscap/tree/endpoints2)
I changed it to:
class TubConnectorFactory(protocol.Factory, object):

I suspected that TubConnector?'s clientConnectionFailed doesn't get
called and then I found a relevent quaote this twisted doc:
https://twistedmatrix.com/documents/current/core/howto/endpoints.html

here's the quote:
"""Note: If you've used ClientFactory before, keep in mind that the
connect method takes a Factory, not a ClientFactory. Even if you pass a ClientFactory to
endpoint.connect, its clientConnectionFailed and clientConnectionLost
methods will not be called."""

Currently foolscap's extensive collection of unittests are exercising
bugs in my code when I try to port foolscap to twisted
endpoints.

foolscap$ trial foolscap.test.test_appserver.RunCommand.test_run
foolscap.test.test_appserver
  RunCommand
    test_run ...                                                        [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: foolscap.tokens.NegotiationError: no connection established within client timeout

foolscap.test.test_appserver.RunCommand.test_run
-------------------------------------------------------------------------------
Ran 1 tests in 60.576s

FAILED (errors=1)
foolscap$ 



Cheers!

David Stainton


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Digital signature
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140308/55d9921f/attachment.pgp>

From exarkun at twistedmatrix.com  Sat Mar  8 05:52:58 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 08 Mar 2014 12:52:58 -0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
In-Reply-To: <20140308100231.GA4266@googlemail.com>
References: <20140308100231.GA4266@googlemail.com>
Message-ID: <20140308125258.6218.939246145.divmod.xquotient.266@top>

On 10:02 am, dstainton415 at gmail.com wrote:
>
>
>Greetings,
>
>My goal is to get Brian Warner's foolscap library ported to Twisted
>endpoints instead of the older Twisted api interfaces it currently
>uses (ClientFactory and IConnector).
>
>This effort has been documented in foolscap trac ticket #203:
>http://foolscap.lothar.com/trac/ticket/203
>
>and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P- 
>friendly:
>https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
>
>My question is this:
>
>Since Foolscap's TubConnectorClientFactory does rely
>on clientConnectionFailed... What is the equivalent to this for the new
>interfaces?
>
>I have tried to braindump all my foolscap twisted endpoint thoughts to
>foolscap trac ticket #203 :
>http://foolscap.lothar.com/trac/ticket/203#comment:30
>http://foolscap.lothar.com/trac/ticket/203#comment:31
>
>If we look at line 1223 of
>https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
>(at 0395476c7cb154f925d67abf6858a8200126352b)
>
>we see that there's this TubConnectorClientFactory:
>class TubConnectorClientFactory(protocol.ClientFactory, object):
>
>and later at line 1384 it is used with connectTCP like this:
>            f = TubConnectorClientFactory(self, host, lp)
>            c = reactor.connectTCP(host, port, f)

It looks like TubConnector is the primary intended user of 
TubConnectorClientFactory.  In this case, you can simply move the logic 
from TubConnector.clientConnectionFailed to an errback on the Deferred 
returned by IStreamClientEndpoint.connect.  Or you can leave it where it 
is an just make clientConnectionFailed be that errback.

For example:

    f = TubConnectorClientFactory(self, host, lp)
    d = endpoint.connect(f)
    d.addErrback(self.clientConnectionFailed)

(removing the connector argument from clientConnectionFailed, of 
course).

You may want to apply a similar transformation to the *success* case 
here as well.  That is, move the code that initiates protocol actions on 
the connection to a callback on this Deferred instead of automatically 
starting those actions in buildProtocol (this gives greater flexibility 
in how the protocol is used - if you want to change the details of 
initialization you can do so by using a different callback on the 
endpoint's Deferred instead of having to mess around with the factory or 
the protocol to disable this stuff).

Jean-Paul


From dstainton415 at gmail.com  Sat Mar  8 06:29:32 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 8 Mar 2014 13:29:32 +0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
In-Reply-To: <20140308125258.6218.939246145.divmod.xquotient.266@top>
References: <20140308100231.GA4266@googlemail.com>
 <20140308125258.6218.939246145.divmod.xquotient.266@top>
Message-ID: <CAFN1edq5o=q+OxEUgQAzg_tL_yhsgwctou-cZvuKAyvyJmHuLQ@mail.gmail.com>

Thanks! That's just what I needed.

On Sat, Mar 8, 2014 at 12:52 PM,  <exarkun at twistedmatrix.com> wrote:
> On 10:02 am, dstainton415 at gmail.com wrote:
>>
>>
>>
>> Greetings,
>>
>> My goal is to get Brian Warner's foolscap library ported to Twisted
>> endpoints instead of the older Twisted api interfaces it currently
>> uses (ClientFactory and IConnector).
>>
>> This effort has been documented in foolscap trac ticket #203:
>> http://foolscap.lothar.com/trac/ticket/203
>>
>> and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P-
>> friendly:
>> https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
>>
>> My question is this:
>>
>> Since Foolscap's TubConnectorClientFactory does rely
>> on clientConnectionFailed... What is the equivalent to this for the new
>> interfaces?
>>
>> I have tried to braindump all my foolscap twisted endpoint thoughts to
>> foolscap trac ticket #203 :
>> http://foolscap.lothar.com/trac/ticket/203#comment:30
>> http://foolscap.lothar.com/trac/ticket/203#comment:31
>>
>> If we look at line 1223 of
>> https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
>> (at 0395476c7cb154f925d67abf6858a8200126352b)
>>
>> we see that there's this TubConnectorClientFactory:
>> class TubConnectorClientFactory(protocol.ClientFactory, object):
>>
>> and later at line 1384 it is used with connectTCP like this:
>>            f = TubConnectorClientFactory(self, host, lp)
>>            c = reactor.connectTCP(host, port, f)
>
>
> It looks like TubConnector is the primary intended user of
> TubConnectorClientFactory.  In this case, you can simply move the logic from
> TubConnector.clientConnectionFailed to an errback on the Deferred returned
> by IStreamClientEndpoint.connect.  Or you can leave it where it is an just
> make clientConnectionFailed be that errback.
>
> For example:
>
>
>    f = TubConnectorClientFactory(self, host, lp)
>    d = endpoint.connect(f)
>    d.addErrback(self.clientConnectionFailed)
>
> (removing the connector argument from clientConnectionFailed, of course).
>
> You may want to apply a similar transformation to the *success* case here as
> well.  That is, move the code that initiates protocol actions on the
> connection to a callback on this Deferred instead of automatically starting
> those actions in buildProtocol (this gives greater flexibility in how the
> protocol is used - if you want to change the details of initialization you
> can do so by using a different callback on the endpoint's Deferred instead
> of having to mess around with the factory or the protocol to disable this
> stuff).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From trac at twistedmatrix.com  Sun Mar  9 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Mar 2014 07:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1394348715.59.518640304335938331@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140309/de1afb6d/attachment.html>

From burak at nehbit.net  Sun Mar  9 01:31:33 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 9 Mar 2014 00:31:33 -0800
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <20140303121926.6218.526328592.divmod.xquotient.173@top>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
Message-ID: <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>

I wonder why you decided to use Ampoule to manage a single child process?
(that apparently shouldn't be restarted when it exits)??
Mostly because Ampoule handles quite a bit of stuff behind the scenes. I didn?t want to use it per se?to not add extra complexity to the stack, chiefly?but it was the only way I could get it to work. It also gives me a very nice AMP interface which I am already familiar with, and that allows me to communicate with my frontend very liberally.

I think Ampoule's purpose is to make it easy to run many processes and?
automatically restart them from time to time.?
I agree. Though it?s also very useful as an drop?in implementation of a Twisted spawnProcess for one single other process.

It sounds like the basic process support included in Twisted,?
reactor.spawnProcess, could address your requirements.?
I have just found your answer here:?

https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess

which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess.?

Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted?s logging module seem to kick in too late.?

Best,

Burak


From:?exarkun at twistedmatrix.com exarkun at twistedmatrix.com
Reply:?Twisted general discussion twisted-python at twistedmatrix.com
Date:?March 3, 2014 at 4:21:42 AM
To:?Twisted general discussion twisted-python at twistedmatrix.com
Subject:? Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite Zombie Processes  
On 06:34 am, burak at nehbit.net wrote:  
>Hi everyone,  
>  
>It seems that I ran into a rather inextricable problem, would love to  
>see what you think.  
>  
>As you might remember, I have been working on a distributed, anonymous  
>community platform(s) called Aether ( www.getaether.net ) which is  
>largely a Twisted codebase in its networking system. After releasing  
>the app, I ended up with performance problems, in some part due to my  
>programming incompetence, and some part because I was also using it to  
>drive a GUI with qtreactor, which ran its own Javascript interpreter.  
>  
>The codebase is largely cleaned up now and the current architecture of  
>the program involves two processes that talk to each other via Ampoule:  
>a default reactor core, which handles network events, and a qtreactor  
>which is solely concerned with the user interface. It works very well.  
>Stress induced by networking does not slow down the UI and vice versa.  

I wonder why you decided to use Ampoule to manage a single child process  
(that apparently shouldn't be restarted when it exits)?  

I think Ampoule's purpose is to make it easy to run many processes and  
automatically restart them from time to time.  

It sounds like the basic process support included in Twisted,  
reactor.spawnProcess, could address your requirements.  

Jean-Paul  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140309/19d923e2/attachment.html>

From exarkun at twistedmatrix.com  Sun Mar  9 16:04:44 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Mar 2014 22:04:44 -0000
Subject: [Twisted-Python] Work around pyflakes errors
In-Reply-To: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
References: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
Message-ID: <20140309220444.6218.2137738512.divmod.xquotient.268@top>

On 3 Mar, 04:59 pm, adi at roiban.ro wrote:
>I would like to see twisted code base free of pyflakes errors.
>
>In this way, when someone sees pyflakes errors in his/her branch will 
>know
>for sure that those errors are generated by changes in that branch. 
>Also
>developers could run pyflakes on local computers, before sending a 
>patch
>and have instance feedback for pyflakes errors.
>
>One problem is that pyflakes will complain about unused imports.
>
>JP suggested a fix for that and I have created a ticket:
>https://twistedmatrix.com/trac/ticket/7014
>
>I am not sure how the suggested requireModule("OpenSSL") style API 
>should
>work, but in the same comment, JP suggested to use 'namedAny' to get 
>the
>same effect as the unused import.
>
>My problem with namedAny is that it does not raise ImportError ... but
>rather ModuleNotFound or ObjectNotFound.
>
>But I found 'namedModule' which raise ImportError
>
>Here is an example of namedModule usage which should work around 
>pyflakes
>errors.
>
>Old code:
>
>try:
>    import threading
>    threading  # Silence the linter.
>except ImportError:
>    self.assertFalse(Platform().supportsThreads())
>
>New code
>
>try:
>    namedModule('threading')
>except ImportError:
>    self.assertFalse(Platform().supportsThreads())
>
>What do you think, is namedModule usage acceptable or we should work at
>implementing the requireModule("OpenSSL") API?

Cool.  I always forget about the other APIs since `namedAny` works for 
anything. :)  `namedModule` seems like a great fit here.

Jean-Paul


From adi at roiban.ro  Mon Mar 10 03:42:03 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 10 Mar 2014 11:42:03 +0200
Subject: [Twisted-Python] Work around pyflakes errors
In-Reply-To: <20140309220444.6218.2137738512.divmod.xquotient.268@top>
References: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
 <20140309220444.6218.2137738512.divmod.xquotient.268@top>
Message-ID: <CAFycZ9fdhXdfTHFRy9YCcOOb=wmxfEbi=gQM7ke72DEtvx3SXA@mail.gmail.com>

On 10 March 2014 00:04,  <exarkun at twistedmatrix.com> wrote:
> Cool.  I always forget about the other APIs since `namedAny` works for
> anything. :)  `namedModule` seems like a great fit here.
>
> Jean-Paul

I have implemented a requireModule helper to handle the try/except
ImporError code which would create a lot of code duplication when used
with `namedAny`

https://twistedmatrix.com/trac/ticket/7014

If 7014 is accepted I could go and update existing pyflakes reviews to
use the new code.

-- 
Adi Roiban


From glyph at twistedmatrix.com  Mon Mar 10 12:36:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Mar 2014 11:36:02 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
In-Reply-To: <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
Message-ID: <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>


On Mar 9, 2014, at 12:31 AM, Burak Nehbit <burak at nehbit.net> wrote:
> I agree. Though it?s also very useful as an drop?in implementation of a Twisted spawnProcess for one single other process.
> 
spawnProcess is somewhat low-level.  It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...

>> It sounds like the basic process support included in Twisted, 
>> reactor.spawnProcess, could address your requirements. 
> 
> I have just found your answer here: 
> 
> https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess
> 
> which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess. 
> 
> Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted?s logging module seem to kick in too late. 
> 
Twisted's logging typically gets initialized after all modules are imported.  A tool like Ampoule really ought to set up logging as early as possible in its child, and handle the case where it's not getting set up on the parent side.

The important thing to do is to make sure you have an errReceived callback that actually prints or logs the stderr it receives; there's likely a traceback in there which you may have missed if the process is just crashing.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140310/43c33bb3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140310/43c33bb3/attachment.bin>

From chris at simplistix.co.uk  Tue Mar 11 17:04:44 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Tue, 11 Mar 2014 23:04:44 +0000
Subject: [Twisted-Python] ping?
Message-ID: <531F968C.1000201@simplistix.co.uk>

Sorry, not sure mail is getting through from the list...

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From glyph at twistedmatrix.com  Tue Mar 11 18:23:24 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 11 Mar 2014 17:23:24 -0700
Subject: [Twisted-Python] ping?
In-Reply-To: <531F968C.1000201@simplistix.co.uk>
References: <531F968C.1000201@simplistix.co.uk>
Message-ID: <59AE262C-6643-4D32-921E-95E15AE6AF6E@twistedmatrix.com>

On Mar 11, 2014, at 4:04 PM, Chris Withers <chris at simplistix.co.uk> wrote:

> Sorry, not sure mail is getting through from the list...
I got this one.  Should we be looking for something in the moderation queue?

-g

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140311/3356467b/attachment.bin>

From burak at nehbit.net  Tue Mar 11 22:04:22 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Tue, 11 Mar 2014 21:04:22 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
Message-ID: <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>

spawnProcess is somewhat low-level. ?It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...


Ampoule is very close. Any chance of polishing and absorbing it into Twisted? Parallel computing is the weakest point of entire Python ecosystem, and Ampoule is so very close to the perfection, unless, like me, you end up getting stuck on a corner case.?



For this, I am almost entirely sure that the imports are failing, most probably because it?s trying to import the system python, not the one PyInstaller packages up. I have no idea how to fix it though. I?m feeling rather guilty about it, Aether v1.1 is a vastly improved version, but ?I can?t package it, so the release is off for a while. For personal reasons (Moved to SF, started a new full?time job) I am unlikely to find enough time to debug such a complex issue in the near future, while the code is fading from my memory and rotting in drive. Such a shame.

?

Best,

Burak






From:?Glyph Lefkowitz glyph at twistedmatrix.com
Reply:?Twisted general discussion twisted-python at twistedmatrix.com
Date:?March 10, 2014 at 11:39:36 AM
To:?Twisted general discussion twisted-python at twistedmatrix.com
Subject:? Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite	Zombie Processes  


On Mar 9, 2014, at 12:31 AM, Burak Nehbit <burak at nehbit.net> wrote:
I agree. Though it?s also very useful as an drop?in implementation of a Twisted spawnProcess for one single other process.

spawnProcess is somewhat low-level. ?It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...

It sounds like the basic process support included in Twisted,?
reactor.spawnProcess, could address your requirements.?
I have just found your answer here:?

https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess

which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess.?

Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted?s logging module seem to kick in too late.?

Twisted's logging typically gets initialized after all modules are imported. ?A tool like Ampoule really ought to set up logging as early as possible in its child, and handle the case where it's not getting set up on the parent side.

The important thing to do is to make sure you have an errReceived callback that actually prints or logs the stderr it receives; there's likely a traceback in there which you may have missed if the process is just crashing.

-glyph
- smime.p7s, 6 KB
_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140311/10955440/attachment.html>

From chris at simplistix.co.uk  Wed Mar 12 01:28:23 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 07:28:23 +0000
Subject: [Twisted-Python] which async framework?
Message-ID: <53200C97.40908@simplistix.co.uk>

Hi All,

Apologies for the cross-post, but this is a "which framework" question 
so seemed the most constructive way. Not interested in religious 
debates, just trying to pick the best tool for the job and didn't get 
much of a useful response from python-list...

So, I see python now has a plethora of async frameworks and I need to 
try and pick one to use from:

- asyncio/tulip
- tornado
- twisted

 From my side, I'm looking to experimentally build a network testing 
tool that will need to speak a fair few protocols, both classic tcp and 
multicast-based, and have a web api living on top of it that most likely 
will have a websocket for pumping data to the browser. It'll also need 
to write out JUnit-compatible xml results, but that's like the easiest 
bit ;-)

I'd like to be able to serve the rest of the web api using a pyramid 
wsgi app if possible, and I'd like to be able to write the things that 
process requests in and validation out in a synchronous fashion, most 
likely spinning off a thread for each one.

The protocols are all financial (do we really not have a pure-python FIX 
library?!) but none are likely to have existing python implementations.

How should I pick between the options? What would people recommend and why?

cheers,

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
            - http://www.simplistix.co.uk


From _ at lvh.io  Wed Mar 12 02:53:07 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 12 Mar 2014 09:53:07 +0100
Subject: [Twisted-Python] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>

Hi Chris,


It will probably not surprise you that I like Twisted :-)

On Wed, Mar 12, 2014 at 8:28 AM, Chris Withers <chris at simplistix.co.uk>wrote:

> So, I see python now has a plethora of async frameworks and I need to try
> and pick one to use from:
>
> - asyncio/tulip
> - tornado
> - twisted
>

Twisted has a thing called Cyclone, which I hear (but that's only hearsay)
gives you Tornado's API on top of twisted, so you get all of the stuff
below for free.


> From my side, I'm looking to experimentally build a network testing tool
> that will need to speak a fair few protocols, both classic tcp and
> multicast-based, and have a web api living on top of it that most likely
> will have a websocket for pumping data to the browser. It'll also need to
> write out JUnit-compatible xml results, but that's like the easiest bit ;-)
>

I don't know which protocols you are interested in specifically; later on
in the e-mail you mention that it's *probably* not already extant. Twisted
comes with a huge number of protocols already implemented. It has TCP
support (duh) as well as an interface for UDP multicast.

Twisted has a third party project called txsockjs which works excellently,
both by itself and in the context of other (HTTP) resources. sockjs is a
protocol which is basically "websockets, damnit", even when the consumer is
a bad browser like IE6.


> I'd like to be able to serve the rest of the web api using a pyramid wsgi
> app if possible, and I'd like to be able to write the things that process
> requests in and validation out in a synchronous fashion, most likely
> spinning off a thread for each one.
>

Twisted comes with a threadpool-backed WSGI server. (When I say
threadpool-backed I mean that the WSGI requests are handled in threads; the
IO itself of course comes from the Twisted reactor).


> The protocols are all financial (do we really not have a pure-python FIX
> library?!) but none are likely to have existing python implementations.
>

I find twisted to be a great tool for writing protocol implementations. I
have written tools for querying all sorts of gnarly proprietary protocols
over all sorts of gnarly transports (packet radio; it's totally a thing),
and more recently for doing crazy things like multiplexing stream
transports over existing RPC protocols. (Like, you see a local port come
up, and that actually creates a virtual stream connection over an existing
RPC thing to some virtual server on the other end of the wire:
https://www.youtube.com/watch?v=W_jEIvugwes).

Twisted has had so many people write so many protocols in it that also the
testing tools (MemoryReactor, StringTransport) are great. Especially if you
are writing something very close to a wire protocol you will undoubtedly
enjoy those amenities. There's also tons of composable things for receiving
delimited lines, nestrings, etc. It's hard to tell what you will be looking
for since I don't know details about your protocol, but having written more
than a few protocol implementations I'm going to wager a guess and say
Twisted has it or a third party thing for twisted has it.

Even though I mostly write Clojure now, I still write my networking stuff
in Twisted. Macros are cool. Eleven years worth of battle-tested code is
better.

That said, tulip is nice in that you can also write protocol
implementations that will look similar :-)


> How should I pick between the options? What would people recommend and why?
>

Twisted, emphatically and without reservation, for all the above reasons.
It's stable. All the stuff you need has been tried and tested extensively
in production. It runs on PyPy, and usually a damn sight faster than on
CPython, too.

A common criticism of Twisted is that it "takes over" your codebase. I am
speaking at PyCon in about a month to demonstrate that that isn't true. (It
just looks that way, because once people use it, they don't want to go
back... ;-))

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/309d5ae9/attachment-0001.html>

From luca.sbardella at gmail.com  Wed Mar 12 03:41:57 2014
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Wed, 12 Mar 2014 09:41:57 +0000
Subject: [Twisted-Python] [python-tulip] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <CAF94-jZao5uc51CdYO0EQx7DMR=cYk8+VMrC_r6psMHNrdY4mQ@mail.gmail.com>

On 12 March 2014 07:28, Chris Withers <chris at simplistix.co.uk> wrote:
>
>
> So, I see python now has a plethora of async frameworks and I need to try
> and pick one to use from:
>
> - asyncio/tulip
> - tornado
> - twisted
>
> From my side, I'm looking to experimentally build a network testing tool
> that will need to speak a fair few protocols, both classic tcp and
> multicast-based, and have a web api living on top of it that most likely
> will have a websocket for pumping data to the browser. It'll also need to
> write out JUnit-compatible xml results, but that's like the easiest bit ;-)
>
> I'd like to be able to serve the rest of the web api using a pyramid wsgi
> app if possible, and I'd like to be able to write the things that process
> requests in and validation out in a synchronous fashion, most likely
> spinning off a thread for each one.
>

Tornado is a web-framework, if you are going to use pyramid for handling
wsgi requests asyncio or twisted are probably a better solution. They can
handle your synchronous wsgi responses via the event loop executor (a
thread pool).


>
> The protocols are all financial (do we really not have a pure-python FIX
> library?!) but none are likely to have existing python implementations.
>

Both asyncio and twisted offer an extensive, somehow similar, API for
writing protocols, TCP and UDP.


> How should I pick between the options? What would people recommend and why?
>
>
If you are using python 3.3 I would strongly recommend asyncio, it has a
clean and unintrusive API and, importantly, it is part of the standard
library (in python 3.4).
If you are using python 2 I would still recommend it, the trollius project
has backported the library (although there are some important differences).
Pulsar, is a server side library I maintain which is now fully based on
asyncio, works on python 3 & 2, and does more or less what you are looking
for.
Of course, twisted is more tested and has a longer history, but if you are
forward looking asyncio might be a better bet.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/861bc31a/attachment.html>

From exarkun at twistedmatrix.com  Wed Mar 12 05:32:05 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Mar 2014 11:32:05 -0000
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
Message-ID: <20140312113205.6218.824356880.divmod.xquotient.288@top>

On 04:04 am, burak at nehbit.net wrote:
>spawnProcess is somewhat low-level. ?It would be very nice indeed if 
>Twisted had some sort of Service object you could easily use for 
>spawning worker processes, along the lines of Ampoule, that would take 
>care of all the platform-specific nonsense of setting up communication 
>with subprocesses, spawning them, monitoring them, figuring out the 
>right Python to spawn, the right environment variables to get sys.path 
>correct, and other things, such as...
>
>Ampoule is very close. Any chance of polishing and absorbing it into 
>Twisted? Parallel computing is the weakest point of entire Python 
>ecosystem, and Ampoule is so very close to the perfection, unless, like 
>me, you end up getting stuck on a corner case.

It sure would be great if someone took this on.  Twisted would welcome 
better high-level tools that build on spawnProcess (apropos, Twisted 
would also welcome a better low-level tool to replace spawnProcess).

Considering the amount of maintenance Ampoule seems to have gotten over 
the last four years (~1 commit) I doubt you can count on someone else 
picking this up just because it would be great, though.

Jean-Paul
>
>For this, I am almost entirely sure that the imports are failing, most 
>probably because it?s trying to import the system python, not the one 
>PyInstaller packages up. I have no idea how to fix it though. I?m 
>feeling rather guilty about it, Aether v1.1 is a vastly improved 
>version, but ?I can?t package it, so the release is off for a while. 
>For personal reasons (Moved to SF, started a new full?time job) I am 
>unlikely to find enough time to debug such a complex issue in the near 
>future, while the code is fading from my memory and rotting in drive. 
>Such a shame.
>
>Best,
>
>Burak


From tobias.oberstein at tavendo.de  Wed Mar 12 06:59:42 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 12 Mar 2014 05:59:42 -0700
Subject: [Twisted-Python] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <634914A010D0B943A035D226786325D44473A2BC0F@EXVMBX020-12.exch020.serverdata.net>

>  From my side, I'm looking to experimentally build a network testing tool that
> will need to speak a fair few protocols, both classic tcp and multicast-based,

Tornado is a _Web_ framework. A requirement for UDP, and multicast UDP, narrows
suitable choices to Twisted and asyncio.

Twisted is around much longer, and also has a broader focus .. lots of protocols implemented
on top of TCP/IP.

Asyncio is opiniated towards a co-routine based style. Twisted probably more towards
"classical" Deferred based style, though you can go co-routine style as well.

> and have a web api living on top of it that most likely will have a websocket
> for pumping data to the browser. It'll also need to write out JUnit-compatible

If you need WebSocket anyway, you can directly compare Twisted and asyncio programming
with these examples:

https://github.com/tavendo/AutobahnPython/tree/master/examples/twisted/websocket/echo
https://github.com/tavendo/AutobahnPython/tree/master/examples/asyncio/websocket/echo

Disclaimer: I am affiliated with that stuff.

> I'd like to be able to serve the rest of the web api using a pyramid wsgi app if

Twisted can act as a WSGI host, and that can be combined with WebSocket also (in one server,
and both services running on one port).

/Tobias


From chris at simplistix.co.uk  Wed Mar 12 16:12:33 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:12:33 +0000
Subject: [Twisted-Python] which async framework?
In-Reply-To: <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
References: <53200C97.40908@simplistix.co.uk>
 <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
Message-ID: <5320DBD1.5030600@simplistix.co.uk>

On 12/03/2014 08:53, Laurens Van Houtven wrote:
> Twisted has a thing called Cyclone, which I hear (but that's only
> hearsay) gives you Tornado's API on top of twisted, so you get all of
> the stuff below for free.
>
>      From my side, I'm looking to experimentally build a network testing
>     tool that will need to speak a fair few protocols, both classic tcp
>     and multicast-based, and have a web api living on top of it that
>     most likely will have a websocket for pumping data to the browser.
>     It'll also need to write out JUnit-compatible xml results, but
>     that's like the easiest bit ;-)
>
> I don't know which protocols you are interested in specifically;

Aiming low (insert sarcastic look here), here's the first few:

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_FIX_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_Binary_Order_Entry_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_PITCH_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_MC_PITCH_Specification.pdf

> Twisted has a third party project called txsockjs which works
> excellently, both by itself and in the context of other (HTTP)
> resources. sockjs is a protocol which is basically "websockets, damnit",
> even when the consumer is a bad browser like IE6.

Thankfully, I only have to support sane browsers...

> Twisted comes with a threadpool-backed WSGI server. (When I say
> threadpool-backed I mean that the WSGI requests are handled in threads;
> the IO itself of course comes from the Twisted reactor).

Yeah, I remember that, and I remember liking it :-)

> I find twisted to be a great tool for writing protocol implementations.
> I have written tools for querying all sorts of gnarly proprietary
> protocols over all sorts of gnarly transports (packet radio; it's
> totally a thing), and more recently for doing crazy things like
> multiplexing stream transports over existing RPC protocols. (Like, you
> see a local port come up, and that actually creates a virtual stream
> connection over an existing RPC thing to some virtual server on the
> other end of the wire: https://www.youtube.com/watch?v=W_jEIvugwes).

Cool!

> Twisted has had so many people write so many protocols in it that also
> the testing tools (MemoryReactor, StringTransport) are great. Especially
> if you are writing something very close to a wire protocol you will
> undoubtedly enjoy those amenities. There's also tons of composable
> things for receiving delimited lines, nestrings, etc. It's hard to tell
> what you will be looking for since I don't know details about your
> protocol, but having written more than a few protocol implementations
> I'm going to wager a guess and say Twisted has it or a third party thing
> for twisted has it.

Yep, certainly sounds good. I guess I have concerns about 
discoverability and making sure I'm picking the right things to use 
rather than re-implementing things when I don't need to.

What's the best way for me to find things I should be using? I guess my 
fallback position is to ask lots of clueless questions on this list and 
hope I don't annoy to many people, is that viable?

> Twisted, emphatically and without reservation, for all the above
> reasons. It's stable. All the stuff you need has been tried and tested
> extensively in production. It runs on PyPy, and usually a damn sight
> faster than on CPython, too.

Didn't know about the PyPy thing, that will be interesting if I ever hit 
performance problems...

> A common criticism of Twisted is that it "takes over" your codebase. I
> am speaking at PyCon in about a month to demonstrate that that isn't
> true. (It just looks that way, because once people use it, they don't
> want to go back... ;-))

Gutted I can't make it to PyCon this year, look forward to watching the 
video!

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From chris at simplistix.co.uk  Wed Mar 12 16:35:15 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:35:15 +0000
Subject: [Twisted-Python] git?
Message-ID: <5320E123.70003@simplistix.co.uk>

Hi All,

Is there a git mirror of the twisted repo anywhere?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From chris at simplistix.co.uk  Wed Mar 12 16:43:10 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:43:10 +0000
Subject: [Twisted-Python] building offline docs
Message-ID: <5320E2FE.1020705@simplistix.co.uk>

Sorry, more questions...

Unfortunately, most of the time I have for learning and research is offline.

How can I build the docs for browsing (html) from a subversion checkout?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From radix at twistedmatrix.com  Wed Mar 12 16:43:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2014 17:43:33 -0500
Subject: [Twisted-Python] git?
In-Reply-To: <5320E123.70003@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
Message-ID: <etPan.5320e315.625558ec.b2b@densetsu>

Yes, it?s at

http://github.com/twisted/twisted

--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk) wrote:

Hi All,  

Is there a git mirror of the twisted repo anywhere?  

Chris  

--  
Simplistix - Content Management, Batch Processing & Python Consulting  
- http://www.simplistix.co.uk  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/ed886f83/attachment.html>

From radix at twistedmatrix.com  Wed Mar 12 16:47:16 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2014 17:47:16 -0500
Subject: [Twisted-Python] building offline docs
In-Reply-To: <5320E2FE.1020705@simplistix.co.uk>
References: <5320E2FE.1020705@simplistix.co.uk>
Message-ID: <etPan.5320e3f4.46e87ccd.b2b@densetsu>

On March 12, 2014 at 5:45:09 PM, Chris Withers (chris at simplistix.co.uk) wrote:
Sorry, more questions...?

Unfortunately, most of the time I have for learning and research is offline.?

How can I build the docs for browsing (html) from a subversion checkout??


Twisted trunk is now a fairly standard sphinx-based project. ?cd docs; make html? (assuming all the usual sphinx/twisted dependencies are available).

--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/848b5126/attachment.html>

From hawkowl at atleastfornow.net  Wed Mar 12 17:36:14 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 07:36:14 +0800
Subject: [Twisted-Python] building offline docs
In-Reply-To: <etPan.5320e3f4.46e87ccd.b2b@densetsu>
References: <5320E2FE.1020705@simplistix.co.uk>
 <etPan.5320e3f4.46e87ccd.b2b@densetsu>
Message-ID: <5320EF6E.2080805@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi,

There's two kinds of docs, both of which can be built with premade
scripts.

The api docs require pydoctor, the prose requires Sphinx (1.2 or later).

Build the api docs with `./bin/admin/build-apidocs . apidocs/` and the
sphinx docs with `./bin/admin/build-docs .` - this will put them both
in the Twisted checkout, under apidocs/ and doc/ folders respectively.

- -hawkowl

On 13/03/14 06:47, Christopher Armstrong wrote:
> On March 12, 2014 at 5:45:09 PM, Chris Withers
> (chris at simplistix.co.uk) wrote: Sorry, more questions...
> 
> Unfortunately, most of the time I have for learning and research is
> offline.
> 
> How can I build the docs for browsing (html) from a subversion
> checkout?
> 
> 
> Twisted trunk is now a fairly standard sphinx-based project. ?cd
> docs; make html? (assuming all the usual sphinx/twisted
> dependencies are available).
> 
> -- Christopher Armstrong http://twitter.com/radix 
> http://wordeology.com/
> 
> 
> 
> 
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIO9uAAoJECMItHnTkkoReq0H/3r0AeEHT4pvsrXZ2jzVsE3U
eeKjsjpcu2JTQzyHrEeFpS/zjr0FzKzoVgt7FUZTp30YwgGA3+7VDiLCYs/zOneA
TPq/ySFpqmu/5J6EQqiq90fRhF30dMNN+bWLKAysPOqHrNiVmyy9uc2IsdVNnr68
/vNV96XMfxan3TJMEIX38v8VTTc56fcWHFPCighuplXhTaqcyShvLWbgWwVemAS+
VTRrTAAbCiEz9TvNnNsKl+9ryjwe+G6mRSibcE1Haez8PK+Ar48hfEjPia+7soHm
rPUjk5N2MSgFAn9oczp8wyI2pKX61oHxZfJPkF9UNnzsn3eTpHI1A2GH+uzxVTc=
=G9ar
-----END PGP SIGNATURE-----


From glyph at twistedmatrix.com  Wed Mar 12 17:45:15 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2014 16:45:15 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
In-Reply-To: <20140312113205.6218.824356880.divmod.xquotient.288@top>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
 <20140312113205.6218.824356880.divmod.xquotient.288@top>
Message-ID: <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>


On Mar 12, 2014, at 4:32 AM, exarkun at twistedmatrix.com wrote:

> Considering the amount of maintenance Ampoule seems to have gotten over the last four years (~1 commit) I doubt you can count on someone else picking this up just because it would be great, though.

The licenses are compatible and the maintainer is amenable to the idea though, so if you (and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

The one caveat I will give you is that Ampoule is probably not quite good enough as-is.  It's been a while, but I definitely remember discussing some of its deficiencies with people who had used it; you will probably get requests to change stuff in code review.  That's OK though, that's the whole point of code review.  This actually means that the fact that it's unmaintained is a good thing - not a lot of duplication of effort to improve it :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/98d55703/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/98d55703/attachment-0001.bin>

From glyph at twistedmatrix.com  Wed Mar 12 17:52:22 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2014 16:52:22 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5320e315.625558ec.b2b@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
Message-ID: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>

On Mar 12, 2014, at 3:43 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk) wrote:
>> Hi All, 
>> 
>> Is there a git mirror of the twisted repo anywhere? 
>> 
> Yes, it?s at
> 
> http://github.com/twisted/twisted

Also at https://code.twistedmatrix.com/git/Twisted.

However, if you actually want to use this mirror to work on Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some useful information.

Hope that helps!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/12fd78f8/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140312/12fd78f8/attachment.bin>

From chris at simplistix.co.uk  Thu Mar 13 00:53:45 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 13 Mar 2014 06:53:45 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
Message-ID: <532155F9.5000301@simplistix.co.uk>

On 12/03/2014 23:52, Glyph Lefkowitz wrote:
> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong
> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
>
>> On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk
>> <mailto:chris at simplistix.co.uk>) wrote:
>>> Hi All,
>>>
>>> Is there a git mirror of the twisted repo anywhere?
>>>
>> Yes, it?s at
>>
>> http://github.com/twisted/twisted
>
> Also at https://code.twistedmatrix.com/git/Twisted.
>
> However, if you actually want to /use/ this mirror to work on Twisted,
> <https://twistedmatrix.com/trac/wiki/GitMirror> has some useful information.

Not to be too contentious, but when do you reckon you guys will switch 
the main repo to git?

The difficulty of using svn for the main repo is that it only has a 
subset of the features of a dvcs such as git.

The difficulty of using git for the main repo is if you have people who 
still want to interact via svn. Well, it would be if you didn't use github:

https://help.github.com/articles/support-for-subversion-clients

I do wonder how many people know about the above feature, it blows my 
mind a bit that it's actually there in the first place...

Anyway, just a thought :-)

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
            - http://www.simplistix.co.uk


From solipsis at pitrou.net  Thu Mar 13 01:11:28 2014
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 13 Mar 2014 08:11:28 +0100
Subject: [Twisted-Python] which async framework?
References: <53200C97.40908@simplistix.co.uk>
 <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
Message-ID: <20140313081128.7f3b7e5c@fsol>

On Wed, 12 Mar 2014 09:53:07 +0100
Laurens Van Houtven <_ at lvh.io> wrote:
> 
> A common criticism of Twisted is that it "takes over" your codebase. I am
> speaking at PyCon in about a month to demonstrate that that isn't true. (It
> just looks that way, because once people use it, they don't want to go
> back... ;-))

Or sometimes they do.

Regards

Antoine.




From hawkowl at atleastfornow.net  Thu Mar 13 01:14:53 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 15:14:53 +0800
Subject: [Twisted-Python] git?
In-Reply-To: <532155F9.5000301@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
Message-ID: <53215AED.2070800@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Chris,

I can assure you this topic has come up many times - and unless we
have volunteers that can manage to get the several thousand tickets
with comment history into GitHub (which I'm sure that nobody wants to
get tied to when you have a workflow already), without losing
anything, then it's most likely Twisted is sticking with svn and trac.

Git has svn support - see `git svn`. I have merged several branches
with it, and it works great. Use that instead, if you get commit access :)

- -hawkowl

On 13/03/14 14:53, Chris Withers wrote:
> On 12/03/2014 23:52, Glyph Lefkowitz wrote:
>> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>>
>> wrote:
>> 
>>> On March 12, 2014 at 5:39:36 PM, Chris Withers
>>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>)
>>> wrote:
>>>> Hi All,
>>>> 
>>>> Is there a git mirror of the twisted repo anywhere?
>>>> 
>>> Yes, it?s at
>>> 
>>> http://github.com/twisted/twisted
>> 
>> Also at https://code.twistedmatrix.com/git/Twisted.
>> 
>> However, if you actually want to /use/ this mirror to work on
>> Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some
>> useful information.
> 
> Not to be too contentious, but when do you reckon you guys will
> switch the main repo to git?
> 
> The difficulty of using svn for the main repo is that it only has
> a subset of the features of a dvcs such as git.
> 
> The difficulty of using git for the main repo is if you have people
> who still want to interact via svn. Well, it would be if you didn't
> use github:
> 
> https://help.github.com/articles/support-for-subversion-clients
> 
> I do wonder how many people know about the above feature, it blows
> my mind a bit that it's actually there in the first place...
> 
> Anyway, just a thought :-)
> 
> Chris
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIVrtAAoJECMItHnTkkoRUa0H/3+mcWQLWhWLuGlo9pfNLTwb
WWX7F/P2sVVfKc0r5o07/7rOpuPYrKMsnjzxU6O8qf4/aKQOeD4LdVrOUww56v4e
ybgnoa+InXIYDMJJ5jm6X0VX5Upw1GhSaaJCbv8mjIs66mE70/Xu9pYlVcxw6lJP
OIK4nQmYMXwXq6yjSiSZO+qnPl+M79/BCI3kutC2N+L9rxCJQR8D7Zy6OFwdnlLA
XSZx3JcAvgROQs6q+1m2HqJS+uhq4MPKoj/BgSUYkxAIk/MVKvvXiCk/OYk1GaBX
iuFLH3DU5LLBf89518WW2xvWzMUIVpRiIRzei0U4POOOobgO7n6kiZESsmstZs4=
=3lxd
-----END PGP SIGNATURE-----


From itamar at itamarst.org  Thu Mar 13 04:54:44 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 13 Mar 2014 06:54:44 -0400
Subject: [Twisted-Python] git?
In-Reply-To: <53215AED.2070800@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
Message-ID: <53218E74.9010601@itamarst.org>

On 03/13/2014 03:14 AM, HawkOwl wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi Chris,
>
> I can assure you this topic has come up many times - and unless we
> have volunteers that can manage to get the several thousand tickets
> with comment history into GitHub (which I'm sure that nobody wants to
> get tied to when you have a workflow already), without losing
> anything, then it's most likely Twisted is sticking with svn and trac.
>
> Git has svn support - see `git svn`. I have merged several branches
> with it, and it works great. Use that instead, if you get commit access :)
>
Personally I feel like these are two separate things - we could switch 
to Git while worrying about tickets later. Still would take some 
infrastructure work, but a lot less.

-Itamar


From jon at multani.info  Thu Mar 13 05:04:22 2014
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 13 Mar 2014 20:04:22 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <53215AED.2070800@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
Message-ID: <20140313110416.GA21387@danio.home>

Hi,

On Thu, Mar 13, 2014 at 03:14:53PM +0800, HawkOwl wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi Chris,
> 
> I can assure you this topic has come up many times - and unless we
> have volunteers that can manage to get the several thousand tickets
> with comment history into GitHub (which I'm sure that nobody wants to
> get tied to when you have a workflow already), without losing
> anything, then it's most likely Twisted is sticking with svn and trac.

Why does using Git involve moving tickets over to Github?
Why does using Git even involve Github at all, in the first place?

 Jonathan



> Git has svn support - see `git svn`. I have merged several branches
> with it, and it works great. Use that instead, if you get commit access :)
> 
> - -hawkowl
> 
> On 13/03/14 14:53, Chris Withers wrote:
> > On 12/03/2014 23:52, Glyph Lefkowitz wrote:
> >> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
> >> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>>
> >> wrote:
> >> 
> >>> On March 12, 2014 at 5:39:36 PM, Chris Withers
> >>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>)
> >>> wrote:
> >>>> Hi All,
> >>>> 
> >>>> Is there a git mirror of the twisted repo anywhere?
> >>>> 
> >>> Yes, it?s at
> >>> 
> >>> http://github.com/twisted/twisted
> >> 
> >> Also at https://code.twistedmatrix.com/git/Twisted.
> >> 
> >> However, if you actually want to /use/ this mirror to work on
> >> Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some
> >> useful information.
> > 
> > Not to be too contentious, but when do you reckon you guys will
> > switch the main repo to git?
> > 
> > The difficulty of using svn for the main repo is that it only has
> > a subset of the features of a dvcs such as git.
> > 
> > The difficulty of using git for the main repo is if you have people
> > who still want to interact via svn. Well, it would be if you didn't
> > use github:
> > 
> > https://help.github.com/articles/support-for-subversion-clients
> > 
> > I do wonder how many people know about the above feature, it blows
> > my mind a bit that it's actually there in the first place...
> > 
> > Anyway, just a thought :-)
> > 
> > Chris
> > 
> 
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1
> 
> iQEcBAEBAgAGBQJTIVrtAAoJECMItHnTkkoRUa0H/3+mcWQLWhWLuGlo9pfNLTwb
> WWX7F/P2sVVfKc0r5o07/7rOpuPYrKMsnjzxU6O8qf4/aKQOeD4LdVrOUww56v4e
> ybgnoa+InXIYDMJJ5jm6X0VX5Upw1GhSaaJCbv8mjIs66mE70/Xu9pYlVcxw6lJP
> OIK4nQmYMXwXq6yjSiSZO+qnPl+M79/BCI3kutC2N+L9rxCJQR8D7Zy6OFwdnlLA
> XSZx3JcAvgROQs6q+1m2HqJS+uhq4MPKoj/BgSUYkxAIk/MVKvvXiCk/OYk1GaBX
> iuFLH3DU5LLBf89518WW2xvWzMUIVpRiIRzei0U4POOOobgO7n6kiZESsmstZs4=
> =3lxd
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From _ at lvh.io  Thu Mar 13 05:14:48 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 13 Mar 2014 12:14:48 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <20140313110416.GA21387@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net> <20140313110416.GA21387@danio.home>
Message-ID: <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>

Hi,

On Thu, Mar 13, 2014 at 12:04 PM, Jonathan Ballet <jon at multani.info> wrote:

> Why does using Git involve moving tickets over to Github?
> Why does using Git even involve Github at all, in the first place?
>

HawkOwl probably meant that it would be hard to get all the tooling (trac,
ci...) working while switching up the VCS out from under it. There's a
*lot* of stuff that relies on SVN details.

Plus, with the git mirrors, we don't have to do that work, and anyone who
only wants to work in git all day, can.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/4304d3e7/attachment.html>

From hawkowl at atleastfornow.net  Thu Mar 13 05:17:13 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 19:17:13 +0800
Subject: [Twisted-Python] git?
In-Reply-To: <20140313110416.GA21387@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
Message-ID: <532193B9.1060700@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 13/03/14 19:04, Jonathan Ballet wrote:
> Hi,
> 
> On Thu, Mar 13, 2014 at 03:14:53PM +0800, HawkOwl wrote: Hi Chris,
> 
> I can assure you this topic has come up many times - and unless we 
> have volunteers that can manage to get the several thousand
> tickets with comment history into GitHub (which I'm sure that
> nobody wants to get tied to when you have a workflow already),
> without losing anything, then it's most likely Twisted is sticking
> with svn and trac.
> 
>> Why does using Git involve moving tickets over to Github? Why
>> does using Git even involve Github at all, in the first place?
> 
>> Jonathan

If you want git access, we have that already (both read and write!),
so the only reason for moving the base repo to git would be to use a
bug tracker that interfaces with git, or to use github.

The *only* thing git can't be used for when contributing with Twisted
is releases, due to Twisted's non-standard release branch structure.
Everything else is using `git svn dcommit` instead of `git push`.

There is no other reason to do a base repo switch other than "svn is
scary" or "I don't like svn".

- -hawkowl

> 
> Git has svn support - see `git svn`. I have merged several
> branches with it, and it works great. Use that instead, if you get
> commit access :)
> 
> -hawkowl
> 
> On 13/03/14 14:53, Chris Withers wrote:
>>>> On 12/03/2014 23:52, Glyph Lefkowitz wrote:
>>>>> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
>>>>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> 
>>>>> wrote:
>>>>> 
>>>>>> On March 12, 2014 at 5:39:36 PM, Chris Withers 
>>>>>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>) 
>>>>>> wrote:
>>>>>>> Hi All,
>>>>>>> 
>>>>>>> Is there a git mirror of the twisted repo anywhere?
>>>>>>> 
>>>>>> Yes, it?s at
>>>>>> 
>>>>>> http://github.com/twisted/twisted
>>>>> 
>>>>> Also at https://code.twistedmatrix.com/git/Twisted.
>>>>> 
>>>>> However, if you actually want to /use/ this mirror to work
>>>>> on Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror>
>>>>> has some useful information.
>>>> 
>>>> Not to be too contentious, but when do you reckon you guys
>>>> will switch the main repo to git?
>>>> 
>>>> The difficulty of using svn for the main repo is that it only
>>>> has a subset of the features of a dvcs such as git.
>>>> 
>>>> The difficulty of using git for the main repo is if you have
>>>> people who still want to interact via svn. Well, it would be
>>>> if you didn't use github:
>>>> 
>>>> https://help.github.com/articles/support-for-subversion-clients
>>>>
>>>>
>>>> 
I do wonder how many people know about the above feature, it blows
>>>> my mind a bit that it's actually there in the first place...
>>>> 
>>>> Anyway, just a thought :-)
>>>> 
>>>> Chris
>>>> 
> 
>> 
>> _______________________________________________ Twisted-Python
>> mailing list Twisted-Python at twistedmatrix.com 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIZO5AAoJECMItHnTkkoR9ZIH/0OPffVuzNWwfcUnBJhH4GOe
5VVSBWZCYFN2PPPrLNrHZxcSxqwEmGf4F0hbX81PSeGhyWYc3on+8+BNX21kJHya
fcSamX/mCzBvfsyUdq2cQYGwZP+m3UMGign3OrxSB4A1RpsHsp5NciwZsgpb5Ouq
Jjc1DW6gFrk3x6OxvAgT2HuibbLlReXvRtiCQQa2XTP5yGiloMFODUzq4dCUXcFm
aP/s/tW2w2IWaF+sxzu0RESgJRF7q44GcZ0WuFNWRH0VJWCk0wzUnN6SblwZ9M7y
vEDp5OyOhP1s+QKJF1vSpSIVZlg2PhtuM4Cll8dOl5wvYgmOHmvcXniKFGiGbb4=
=G9WU
-----END PGP SIGNATURE-----


From chris at simplistix.co.uk  Thu Mar 13 06:01:33 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 13 Mar 2014 12:01:33 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <532193B9.1060700@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
Message-ID: <53219E1D.4060004@simplistix.co.uk>

On 13/03/2014 11:17, HawkOwl wrote:
> If you want git access, we have that already (both read and write!),\

So, if I hypothetically put in a pull request via GitHub, that would 
"just work"?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk


From isis at torproject.org  Thu Mar 13 12:36:36 2014
From: isis at torproject.org (isis)
Date: Thu, 13 Mar 2014 18:36:36 +0000
Subject: [Twisted-Python] Tor Project has GSoC projects which need Twisted
	developers!
Message-ID: <20140313183636.GE19718@patternsinthevoid.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Heyo Twisted Python peoples!

Google recently accepted The Tor Project into their 2014 Google Summer of Code
program. [0][1] We have several GSoC project ideas which include development
tasks using Twisted, for example:

  * Design and develop better Pluggable Transports [2]
  * Contribute to better parsing integration between Stem and Txtorcon [3]
  * Design and develop a new Tor bridge distributor for BridgeDB [4]
  * Develop a censorship analyzer [5]

Or feel free to submit a GSoC application for another idea, and we'll try to
find a mentor for you. GSoC is a great way to not only get paid for
contributing to FLOSS projects, but also to get involved and familiar with the
Tor Project. Several current Tor developers were once-upon-a-time GSoC
students.

Hope to see your applications soon! :)

[0]: https://blog.torproject.org/blog/tor-google-summer-code-2014
[1]: https://www.google-melange.com/gsoc/homepage/google/gsoc2014?ModPagespeed=noscript
[2]: https://www.torproject.org/getinvolved/volunteer.html.en#betterPluggableTransports
[3]: https://www.torproject.org/getinvolved/volunteer.html.en#txtorcon-stemIntegration
[4]: https://www.torproject.org/getinvolved/volunteer.html.en#newBridgeDBDistributor
[5]: https://www.torproject.org/getinvolved/volunteer.html.en#censorshipAnalyzer

- -- 
 ?? isis agora lovecruft
_________________________________________________________
GPG: 4096R/A3ADB67A2CDB8B35
Current Keys: https://blog.patternsinthevoid.net/isis.txt
-----BEGIN PGP SIGNATURE-----

iQMhBAEBCgELBQJTIfqxBYMB4TOAVhSAAAAAACUAKGlzaXMrc2lnbnN1YmtleUBw
YXR0ZXJuc2ludGhldm9pZC5uZXRGQzYzQUE1Q0QxOTM4NjlDMzIzNzE0NUE1QzE3
Nzc2RTI3RjdFODRESxSAAAAAABoAKGlzaXNAcGF0dGVybnNpbnRoZXZvaWQubmV0
MEE2QTU4QTE0QjU5NDZBQkRFMThFMjA3QTNBREI2N0EyQ0RCOEIzNS4aaHR0cHM6
Ly9ibG9nLnBhdHRlcm5zaW50aGV2b2lkLm5ldC9wb2xpY3kudHh0LJhodHRwczov
L2Jsb2cucGF0dGVybnNpbnRoZXZvaWQubmV0L2lzaXMudHh0AAoJEFwXd24n9+hN
028P/0TNIvBVus2nI+KBTUh5JLyDrG3+C3Unf+MS4N6IkJmL0x1+oGw0R4WgqhCv
lJPYvkdr06qcCAsDaOsv/n5v6yyvSxFbVVGftPffqmhe6u952mvDSaYHx05v5f4M
pc8+Wss4gyA5KtVuttWqr2QfdNEpoUXtGUHJCREQHU/PiuUEn6sNPx88by3WBKjB
jqhX7oEMBrB3cakYXYnZZO0VjoqRHf0PafJrpLaBdkOSezbPqKm40dIZ8v8axXzi
/e2d6FLT0D3wDzj1c/4kfRDZIogL83Q4VaIZvT+YpADeEGonzB2uQGqB75OWWkVk
+lwJW2saKzQEc0E+iBa2fLDiYLHiauVN1epRrj9EPuXfbte4fn2ntQf6Cr+dVuAM
RKfN6HquKCDaW2mY50xOEzawYfPYWJJxDnjG5i2+Wy4N479b9DxmqxpsIBmlElpa
9qPnY9M33doAARx1FDJn39OyynHMMvoD65hBa4ZMzSFTyu8xEhTO9s/NXiRKr8K2
SqZjh9xywNeOiFrPaFB3G+/T8JZGyjsURPIWs9WuGFtOI5SLob7B6K7IpVJG2XGB
eeJCrk2KtvpwhPdw561cZHT8V8tHlcBzhV/hsbfbtXlFFFlfkWsdf/BI76AIEKXc
4yjlmAPg9Tlul+AYle3byBTDYDwjN+vgIpn9vKbvGvNnMCtY
=S2Nq
-----END PGP SIGNATURE-----


From glyph at twistedmatrix.com  Thu Mar 13 13:19:41 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:19:41 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <53219E1D.4060004@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
 <53219E1D.4060004@simplistix.co.uk>
Message-ID: <6DFD0BF0-891A-41B9-BAA6-2917C06F1AF7@twistedmatrix.com>


On Mar 13, 2014, at 5:01 AM, Chris Withers <chris at simplistix.co.uk> wrote:

> On 13/03/2014 11:17, HawkOwl wrote:
>> If you want git access, we have that already (both read and write!),\
> 
> So, if I hypothetically put in a pull request via GitHub, that would "just work"?

No.  There's a required round-trip through SVN which doesn't work with pull requests.

See <https://twistedmatrix.com/trac/wiki/GitMirror> for an explanation of the current workflow for committers to use git.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/36f2eaab/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/36f2eaab/attachment.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:21:23 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:21:23 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <532193B9.1060700@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
Message-ID: <775173DB-01BA-4100-B93B-DCEA90AACAFD@twistedmatrix.com>


On Mar 13, 2014, at 4:17 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> There is no other reason to do a base repo switch other than "svn is
> scary" or "I don't like svn".

There's a very good reason to do a base repo switch.

Right now, every time we do a merge to trunk, we're losing all the metadata about version history; the individual commits within the branch don't show up in 'svn blame' so it's hard to determine how an individual line got to be the way it is.

I'd very much like us to switch to git entirely so we can start preserving all of this information.  I don't know if we'll use git forever, but the sooner we switch, the more history will be preserved for future version control systems (whatever we migrate to once the git fad has run its course ;-)).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/a1636d46/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/a1636d46/attachment.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:35:17 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:35:17 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
Message-ID: <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>


On Mar 13, 2014, at 4:14 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> HawkOwl probably meant that it would be hard to get all the tooling (trac, ci...) working while switching up the VCS out from under it. There's a *lot* of stuff that relies on SVN details.

I think handwaving over the list of things that need to be done might make people unnecessarily afraid to work on this.  The list is finite :-).

All of our infrastructure is (or at least, should be) available here <https://github.com/twisted-infra/braid>.  It should be possible to submit a PR against that repository (and the relevant submodules) which makes the update and then just deploy it with 'fab config.production'.

The major blocker is that we need to upgrade Trac to get a version of Trac that supports a Git source browser reasonably, and can detect ticket references and ticket closures from Git commit messages.  This is currently stuck: <https://twistedmatrix.com/trac/wiki/Infrastructure/UpgradingTrac>.  This would be good for lots of other reasons, but upgrading trac has proven very difficult in the past.

We might also need to install a trac plugin of some kind for the git stuff, I'm not sure about that.

We would also need to port the post-commit hooks in SVN which tell Kenaan to announce commits on IRC, enforce repository structure (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change), and kick off buildbot.

Right now there's some SVN mirroring stuff to keep SVN updated on Trac, since we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface).

The CI system actually already uses git, in preparation for this merge, so I don't think there's a whole lot of work there.  We might not even need to set a different upstream URL.

If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/daa9ceb3/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/daa9ceb3/attachment-0001.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:38:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:38:42 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <532155F9.5000301@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
Message-ID: <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>

On Mar 12, 2014, at 11:53 PM, Chris Withers <chris at simplistix.co.uk> wrote:

> Not to be too contentious, but when do you reckon you guys will switch the main repo to git?

Just to be clear about the nature of my other answers: we do not "reckon" such a thing will happen; we have no estimates.  Things get done because volunteers do them.  You could be just such a volunteer :).

We do have some rules about how volunteers can do such things - for example, we are not going to take down the project's infrastructure "for a little while" because someone claims they're going to do this work.  In the past we've been burned by people showing up, breaking stuff, and then wandering off forever, so we will only deploy stuff once we have some reasonable expectation that the work is already done and tested in some way.

But within those constraints, it's totally up to you now :-).  (Inasmuch as it's up to all of us.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/e02112cc/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/e02112cc/attachment.bin>

From rowen at uw.edu  Thu Mar 13 15:09:01 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Thu, 13 Mar 2014 14:09:01 -0700
Subject: [Twisted-Python] Simple way to halt all timers?
Message-ID: <rowen-FD109E.14090113032014@news.gmane.org>

Is there a simple way to cancel all Twisted timers (pending 
reactor.callLater calls)?

The reason I want to do this is to clean up a unit test without getting 
"dirty reactor" complaints. 

The system is a server that will rarely be shut down and does not have 
to shut down gracefully (i.e. I don't care if the reactor is dirty). But 
I want the unit tests to run cleanly, so for now I've been keeping a 
reference to each timer that I start, so my test cleanup code can 
manually cancel it. It's a lot of fuss, and makes timers harder to use 
than they should be. I admit that in many cases I need a reference to 
the timer anyway, since I may have to cancel it for reasons that matter 
to the server. But I hate having to do it for *every* timer. If there 
was a simple way to tell the reactor to cancel any outstanding 
"callLater" calls, the code would be much cleaner.


-- Russell



From _ at lvh.io  Thu Mar 13 15:16:29 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 13 Mar 2014 22:16:29 +0100
Subject: [Twisted-Python] Simple way to halt all timers?
In-Reply-To: <rowen-FD109E.14090113032014@news.gmane.org>
References: <rowen-FD109E.14090113032014@news.gmane.org>
Message-ID: <CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ@mail.gmail.com>

Hi Russell,


The way to do this is to pass the reactor as a parameter, and use a Clock
instead of the regular parameter for unit testing purposes. See also:
https://twistedmatrix.com/documents/current/core/howto/trial.html ; that
has a complete example of how to write unit tests that use Clock.

That way your unit tests will be fast, deterministic, and also very clean
:-)


hth
lvh


On Thu, Mar 13, 2014 at 10:09 PM, Russell E. Owen <rowen at uw.edu> wrote:

> Is there a simple way to cancel all Twisted timers (pending
> reactor.callLater calls)?
>
> The reason I want to do this is to clean up a unit test without getting
> "dirty reactor" complaints.
>
> The system is a server that will rarely be shut down and does not have
> to shut down gracefully (i.e. I don't care if the reactor is dirty). But
> I want the unit tests to run cleanly, so for now I've been keeping a
> reference to each timer that I start, so my test cleanup code can
> manually cancel it. It's a lot of fuss, and makes timers harder to use
> than they should be. I admit that in many cases I need a reference to
> the timer anyway, since I may have to cancel it for reasons that matter
> to the server. But I hate having to do it for *every* timer. If there
> was a simple way to tell the reactor to cancel any outstanding
> "callLater" calls, the code would be much cleaner.
>
>
> -- Russell
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/3abaf7db/attachment.html>

From rowen at uw.edu  Thu Mar 13 16:51:41 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Thu, 13 Mar 2014 15:51:41 -0700
Subject: [Twisted-Python] Simple way to halt all timers?
References: <rowen-FD109E.14090113032014@news.gmane.org>
 <CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ@mail.gmail.com>
Message-ID: <rowen-4AAD8E.15514113032014@news.gmane.org>

In article 
<CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ at mail.gmail.com>,
 Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Russell,
> 
> 
> The way to do this is to pass the reactor as a parameter, and use a Clock
> instead of the regular parameter for unit testing purposes. See also:
> https://twistedmatrix.com/documents/current/core/howto/trial.html ; that
> has a complete example of how to write unit tests that use Clock.
> 
> That way your unit tests will be fast, deterministic, and also very clean
> :-)

Thank you. That looks very promising!

-- Russell



From burak at nehbit.net  Thu Mar 13 23:09:05 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Thu, 13 Mar 2014 22:09:05 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
 <20140312113205.6218.824356880.divmod.xquotient.288@top>
 <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>
Message-ID: <etPan.53228ef2.46e87ccd.3669@Buraks-MacBook-Pro.local>

The licenses are compatible and the maintainer is amenable to the idea though, so if?you?(and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

I wish. I can?t even get Ampoule to work for myself.?

Besides, I?m probably lightyears away from enough skill to pass your code reviews, even if I understood exactly what Ampoule was doing. I did read the source code, but there is some really delicate meta?programming happening in that to allow bootstrapping an AMP connection over file descriptors. I do not understand operating systems and / or the Python interpreter enough to understand, much less program in such an environment.?

I do rely quite heavily on Ampoule, which is the reason I am deadlocked so hard at this point. I simply cannot allow GUI to slow down while the Twisted reactor is doing something else, because that GUI is also responsible for drawing 60fps CSS animations. My dependency is only going to get deeper as it seems. If I can fix and improve Ampoule as I go along, I might take up maintaining it, and then I would look into possibly getting it into Twisted. Meanwhile, if you have any insight as to why it fails so hard, please let me know.?

Best,
Burak


From:?Glyph Lefkowitz glyph at twistedmatrix.com
Reply:?Twisted general discussion twisted-python at twistedmatrix.com
Date:?March 12, 2014 at 4:47:27 PM
To:?Twisted general discussion twisted-python at twistedmatrix.com
Subject:? Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite	Zombie Processes  


On Mar 12, 2014, at 4:32 AM, exarkun at twistedmatrix.com wrote:

Considering the amount of maintenance Ampoule seems to have gotten over the last four years (~1 commit) I doubt you can count on someone else picking this up just because it would be great, though.

The licenses are compatible and the maintainer is amenable to the idea though, so if you?(and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

The one caveat I will give you is that Ampoule is probably not quite good enough as-is. ?It's been a while, but I definitely remember discussing some of its deficiencies with people who had used it; you will probably get requests to change stuff in code review. ?That's OK though, that's the whole point of code review. ?This actually means that the fact that it's unmaintained is a good thing - not a lot of duplication of effort to improve it :).

-glyph
_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140313/07ae3a5a/attachment-0001.html>

From itamar at itamarst.org  Fri Mar 14 17:56:29 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 14 Mar 2014 19:56:29 -0400
Subject: [Twisted-Python] ANN: Crochet 1.1.0
Message-ID: <5323972D.4010503@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.


Downloads: https://pypi.python.org/pypi/crochet
Documentation: https://crochet.readthedocs.org/en/latest/

*
What's New in 1.1.0*

Bug fixes:

  * EventualResult.wait() can now be used safely from multiple threads,
    thanks to Gavin Panella for reporting the bug.
  * Fixed reentrancy deadlock in the logging code caused by
    http://bugs.python.org/issue14976, thanks to Rod Morehead for
    reporting the bug.
  * Crochet now installs on Python 3.3 again, thanks to Ben Cordero.
  * Crochet should now work on Windows, thanks to Konstantinos Koukopoulos.
  * Crochet tests can now run without adding its absolute path to
    PYTHONPATH or installing it first.

Documentation:

  * EventualResult.original_failure is now documented.

**
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140314/f374995c/attachment.html>

From trac at twistedmatrix.com  Sun Mar 16 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1394949915.42.8634321699635530126@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140316/f6cc06ad/attachment.html>

From jon at multani.info  Sun Mar 16 01:31:33 2014
From: jon at multani.info (Jonathan Ballet)
Date: Sun, 16 Mar 2014 16:31:33 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
Message-ID: <20140316073131.GB16759@danio.home>

Hi Glyph,

On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:
> 
> On Mar 13, 2014, at 4:14 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
> > HawkOwl probably meant that it would be hard to get all the tooling (trac, ci...) working while switching up the VCS out from under it. There's a *lot* of stuff that relies on SVN details.
> 
> I think handwaving over the list of things that need to be done might make people unnecessarily afraid to work on this.  The list is finite :-).
> 
> All of our infrastructure is (or at least, should be) available here <https://github.com/twisted-infra/braid>.  It should be possible to submit a PR against that repository (and the relevant submodules) which makes the update and then just deploy it with 'fab config.production'.
> 
> The major blocker is that we need to upgrade Trac to get a version of Trac that supports a Git source browser reasonably, and can detect ticket references and ticket closures from Git commit messages.  This is currently stuck: <https://twistedmatrix.com/trac/wiki/Infrastructure/UpgradingTrac>.  This would be good for lots of other reasons, but upgrading trac has proven very difficult in the past.
> 
> We might also need to install a trac plugin of some kind for the git stuff, I'm not sure about that.
> 
> We would also need to port the post-commit hooks in SVN which tell Kenaan to announce commits on IRC, enforce repository structure (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change), and kick off buildbot.
> 
> Right now there's some SVN mirroring stuff to keep SVN updated on Trac, since we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface).
> 
> The CI system actually already uses git, in preparation for this merge, so I don't think there's a whole lot of work there.  We might not even need to set a different upstream URL.
> 
> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.

I don't have edit permissions on the wiki, so I took the list of stuff
you mentionned here and made a wiki page joined to this email.

Compared to the SwitchToBazar page, here are the things which are
missing from your email - I don't know how relevant they are though:

 * mailer post-commit hook
 * the release scripts
 * the developer documentation (I guess that should be done)
 * figure the version number from Git instead of Subversion
 * decide what to do with Combinator

There might be still some editing to do but that could be a start.

 Jonathan
-------------- next part --------------
= To do list for switching the code repository from Subversion to Git =

//This acts more as a reminder of things to do than the actual definitive list. Feel free to update it if things are missing.//

Changing the repository must still meet the [wiki:WorkflowRequirements workflow requirements].

 * Changes to the infrastructure should be made against the [https://github.com/twisted-infra/braid braid repository] (or its sub-modules) so that it can be deployed with `fab`
 * Upgrade Trac:
   * It's old and needs Git support for:
     * be able to browse the repository
     * detect ticket references and ticket closures from Git commits messages

     Starting from Trac 1.0, Git is supported out of the box, see http://trac.edgewall.org/wiki/TracGit
   * See current works on [wiki:Infrastructure/UpgradingTrac upgrading Trac].
 * The CI system already uses Git. Is there any changes to make here?
 * Port the post-commit hooks from Subversion to Git:
   * IRC announcements from Kenaan
   * repository structure enforcement (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change)
   * Buildbot kick off

     Is it already done?
 * Is there any need to have a Git mirror on the same machine as Trac?
   * we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface)

From adi at roiban.ro  Sun Mar 16 11:25:46 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 16 Mar 2014 19:25:46 +0200
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
Message-ID: <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>

On 24 February 2014 21:53, Richard Wall <m-lists at the-moon.net> wrote:
> On 22 February 2014 02:49, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
<snip>
> The current new contributors guide is here:
> https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>
> The draft new contributors guide is here:
> https://twistedmatrix.com/trac/wiki/Contribute (That's the doc which
> ashfall_ and I were working on)
>

<snip>

Both version are rather verbose for my taste... I was looking for a
quick checklists for contributing with code, which could be included
in main CONTRIBUTING file.
It should assume that dev already got the code and has a common sense
for contributing to open source projects: create branch, create patch,
use tickets, use IRC. read code, write tests etc

* Make sure your work has an associated ticket
* Hack on code, test your code, write tests first :)
* Once you think you are done, run all tests (maybe have a command to
run them all):
  * Check that dev dependencies are install: pip install
twisted-dev-tools jinja2>=1.0.0 pyflakes>=0.7.3
  * Check that Python 2.7 tests pass: ./bin/trial twisted
  * Check that Python 3.3 tests pass: ./admin/run-python3-tests
  * If you made changes to api reference check that no errors are
produces and that HTML result looks right: ./bin/admin/build-apidocs
  * If you made changes to narative documentation check that no errors
are produced and that HTML result looks good: ./bin/admin/build-docs
  * Check that no pyflakes errors are generated by your code: pyflakes
  * Check that twistedchecker did not complain about your code: twistedchecker
* As for review. Attach diff file to git ticket, set owner to None and
set 'review' keyword
* For more details see : WIKI_PAGE

During review process my patches were rejected since either Pyhon 3.3
teste were failing, or apidocs was not passing or twistedchecker was
not passing, but it was not obvious how to do those tests on my
computer and searching wiki pages did not help... same with pyflakes
which was only mentioned in ReviewProcess

I think that current wiki pages are very useful, but since they are
mixed with both policy, best practices and tool usage, it easy for
them to get out of sync with latest tools using in the development
process.

There are a lot of steps and tools used for validating a patch and
sadly some checks only work on buildbot.
I am dedicating my time to improve local testing experience ... and
maybe also create a help tool to run all tests from a single command.

Once I got more info about contributing to Twisted I will try to
submit a patch for the main CONTRIBUTING file... but maybe there is a
better way to help new contributors.

-- 
Adi Roiban


From glyph at twistedmatrix.com  Sun Mar 16 14:12:42 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 16 Mar 2014 13:12:42 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <20140316073131.GB16759@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
Message-ID: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>


On Mar 16, 2014, at 12:31 AM, Jonathan Ballet <jon at multani.info> wrote:

> Hi Glyph,
> 
> On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:

>> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.
> 
> I don't have edit permissions on the wiki, so I took the list of stuff
> you mentionned here and made a wiki page joined to this email.

What's your username?  The only reason we even have edit permissions is to prevent spamming, anyone may ask for edit permission at any time :-).

> Compared to the SwitchToBazar page, here are the things which are
> missing from your email - I don't know how relevant they are though:
> 
> * mailer post-commit hook

Yeah, we probably need this.  It seems like this ought to be pretty trivial to set up in git though :-).

> * the release scripts

Oh, good point.  These rely fairly lightly on svn, but the dependency is there.

This would be a good place to start.  Unfortunately, since tagging works differently in svn and git, I don't think we can simply start doing the release out of git without a repository to push to.  If I'm wrong about this, so much the better, and we could actually start having release managers use git if they like :).  Regardless, all the code to do so could be tested and landed as a normal development task with no administrative blockers, so this might be a good place for someone interested in moving the process along to start.

> * the developer documentation (I guess that should be done)

The developer documentation is already so bad (as Adi Roiban has pointed out) that it wouldn't make sense to block migrating to git on a comprehensive upgrade.

> * figure the version number from Git instead of Subversion

This would be an even more straightforward patch to Twisted, in twisted.python.versions.

> * decide what to do with Combinator

I think Combinator is an evolutionary dead end at this point.  Tools like virtualenv, virtualenvwrapper, pyenv, 

> There might be still some editing to do but that could be a start.

I've deleted the SwitchToBazaar page and, for now, uploaded your proposal at <https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit>.  Hopefully someone (maybe me) can give you edit permission as soon as you announce your username :).

Thanks for your contribution,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140316/9c7215da/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140316/9c7215da/attachment.bin>

From exarkun at twistedmatrix.com  Sun Mar 16 14:48:56 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Mar 2014 20:48:56 -0000
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
Message-ID: <20140316204856.6218.196190797.divmod.xquotient.307@top>

On 05:25 pm, adi at roiban.ro wrote:
>On 24 February 2014 21:53, Richard Wall <m-lists at the-moon.net> wrote:
>>On 22 February 2014 02:49, Glyph Lefkowitz <glyph at twistedmatrix.com> 
>>wrote:
><snip>
>>The current new contributors guide is here:
>>https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>>
>>The draft new contributors guide is here:
>>https://twistedmatrix.com/trac/wiki/Contribute (That's the doc which
>>ashfall_ and I were working on)
>
><snip>
>
>Both version are rather verbose for my taste...

The solution to the problem of "There are too many words to read" is not 
to start a new file and start typing new words into it.

The massive sprawl that is our contributor documentation definitely 
needs to be fixed.  I know it's easier to start a fresh document (this 
time it'll work for sure!) but please consider that this strategy may 
actually not produce the best results (it may in fact be the strategy 
that produced the current state of affairs).
>I was looking for a
>quick checklists for contributing with code, which could be included
>in main CONTRIBUTING file.
>It should assume that dev already got the code and has a common sense

"common sense"?  There is no such thing, sorry.  This is sort of an 
irrelevant tangent but I couldn't help commenting on it.
>for contributing to open source projects: create branch, create patch,
>use tickets, use IRC. read code, write tests etc
>
>* Make sure your work has an associated ticket
>* Hack on code, test your code, write tests first :)
>* Once you think you are done, run all tests (maybe have a command to
>run them all):
>  * Check that dev dependencies are install: pip install
>twisted-dev-tools jinja2>=1.0.0 pyflakes>=0.7.3
>  * Check that Python 2.7 tests pass: ./bin/trial twisted
>  * Check that Python 3.3 tests pass: ./admin/run-python3-tests
>  * If you made changes to api reference check that no errors are
>produces and that HTML result looks right: ./bin/admin/build-apidocs
>  * If you made changes to narative documentation check that no errors
>are produced and that HTML result looks good: ./bin/admin/build-docs
>  * Check that no pyflakes errors are generated by your code: pyflakes
>  * Check that twistedchecker did not complain about your code: 
>twistedchecker
>* As for review. Attach diff file to git ticket, set owner to None and
>set 'review' keyword
>* For more details see : WIKI_PAGE

Many of these points are redundant with documentation on one or more 
wiki pages that already exists.  And there are many important things 
that a contributor must know that aren't mentioned here - for example, 
incompatible changes aren't acceptable, all APIs must be documented, 
etc.

It would be excellent to have a comprehensive list of requirements.  I 
strongly suspect that the best way to arrive at this list is to look at 
the existing documentation and remove the redundancies and fix the 
organization.

There may be gaps that need to be filled in.  If so, please fill them 
in.  Creating a new document with a new set of gaps really isn't making 
the situation better.
>
>During review process my patches were rejected since either Pyhon 3.3
>teste were failing, or apidocs was not passing or twistedchecker was
>not passing, but it was not obvious how to do those tests on my
>computer and searching wiki pages did not help... same with pyflakes
>which was only mentioned in ReviewProcess

I know that you've already done a lot of work towards making it easier 
to run these extra build steps locally.  Thank you very much for that!
>
>I think that current wiki pages are very useful, but since they are
>mixed with both policy, best practices and tool usage, it easy for
>them to get out of sync with latest tools using in the development
>process.

Can you give an example of this?  And how will a new document avoid 
exactly the same problem?  Perhaps we *shouldn't* try documenting tool 
usage at all - but instead we should refer to the documentation for 
those tools (which presumably will be kept up to date)?
>
>There are a lot of steps and tools used for validating a patch and
>sadly some checks only work on buildbot.
>I am dedicating my time to improve local testing experience ... and
>maybe also create a help tool to run all tests from a single command.
>
>Once I got more info about contributing to Twisted I will try to
>submit a patch for the main CONTRIBUTING file... but maybe there is a
>better way to help new contributors.

Perhaps this would eventually make a good addition but (to repeat 
myself, sorry) this doesn't seem like a good idea right now.  Until we 
actually have a coherent message to present I don't see the benefit of 
creating yet a new source of slightly conflicting, somewhat incomplete 
information (and one that's harder to edit than a wiki page as a bonus).

Jean-Paul


From glyph at twistedmatrix.com  Sun Mar 16 18:08:57 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 16 Mar 2014 17:08:57 -0700
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
	repo file
In-Reply-To: <20140316204856.6218.196190797.divmod.xquotient.307@top>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
 <20140316204856.6218.196190797.divmod.xquotient.307@top>
Message-ID: <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>

On Mar 16, 2014, at 1:48 PM, exarkun at twistedmatrix.com wrote:

> I know it's easier to start a fresh document (this time it'll work for sure!) but please consider that this strategy may actually not produce the best results (it may in fact be the strategy that produced the current state of affairs).

I don't have a lot to comment on this but it really bears repeating.

This problem is also not unique to Twisted; see also <https://xkcd.com/927/>.

>> It should assume that dev already got the code and has a common sense
> 
> "common sense"?  There is no such thing, sorry.  This is sort of an irrelevant tangent but I couldn't help commenting on it.
>> for contributing to open source projects: create branch, create patch,
>> use tickets, use IRC. read code, write tests etc


I think this tangent is actually totally relevant.  Potential contributors to open source overall are a very diverse audience with a widely divergent backgrounds.  Twisted, in particular, attracts an especially idiosyncratic group, because Twisted runs in a really wide array of environments and supports a really wide array of protocols.  If you wanted to do the "normal thing" you'd be contributing to Django, not Twisted.

Also, keep in mind that for many developers, even today, Twisted is their first open source contribution experience.  Therefore there's no particular reason to believe that they would have any idea how to submit patches, or write tests, or that those things are needed.  It may make sense to make there be an easy way to skip over these basics, but they definitely need to be present.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140316/f383621c/attachment-0001.html>

From jon at multani.info  Sun Mar 16 20:47:21 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 11:47:21 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
Message-ID: <20140317024719.GA28733@danio.home>

On Sun, Mar 16, 2014 at 01:12:42PM -0700, Glyph wrote:
> >> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.
> >
> > I don't have edit permissions on the wiki, so I took the list of stuff
> > you mentionned here and made a wiki page joined to this email.
>
> What's your username?  The only reason we even have edit permissions is to prevent spamming, anyone may ask for edit permission at any time :-).

Oh yeah, maybe that's needed... My username is 'multani', thanks for
editing me!

> > Compared to the SwitchToBazar page, here are the things which are
> > missing from your email - I don't know how relevant they are though:
> >
> > * mailer post-commit hook
>
> Yeah, we probably need this.  It seems like this ought to be pretty trivial to set up in git though :-).
>
> > * the release scripts
>
> Oh, good point.  These rely fairly lightly on svn, but the dependency is there.
>
> This would be a good place to start.  Unfortunately, since tagging works differently in svn and git, I don't think we can simply start doing the release out of git without a repository to push to.  If I'm wrong about this, so much the better, and we could actually start having release managers use git if they like :).  Regardless, all the code to do so could be tested and landed as a normal development task with no administrative blockers, so this might be a good place for someone interested in moving the process along to start.

That's twisted.python._release right?
greping for 'svn' in this module shows only 4 lines which are running
the 'svn' command, for which only the 'rm' will actually change the
repository (used to remove the NEWS fragments).

I've created #7035 for this, I'll try to have a look today. When I'll
have the edit permissions on the wiki, I'll update the SwitchToGit page
to reference to this ticket.

> > * figure the version number from Git instead of Subversion
>
> This would be an even more straightforward patch to Twisted, in twisted.python.versions.

I've created #7036 for this task.

>
> > * decide what to do with Combinator
>
> I think Combinator is an evolutionary dead end at this point.  Tools like virtualenv, virtualenvwrapper, pyenv,

It seems a part is missing here :)

 Jonathan


From jon at multani.info  Sun Mar 16 22:34:30 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 13:34:30 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <20140317024719.GA28733@danio.home>
References: <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home>
Message-ID: <20140317043428.GB28733@danio.home>

On Mon, Mar 17, 2014 at 11:47:21AM +0900, Jonathan Ballet wrote:

> > This would be an even more straightforward patch to Twisted, in twisted.python.versions.
>
> I've created #7036 for this task.

So, I was looking at twisted.python.versions and I'm wondering how is it
supposed to work with recent versions of Subversion (the ones which
removed all the ".svn" in all the sub-directories, I don't know which
one started this.)

Say that I'm checkout-ing trunk into "trunk/", set up the Python's path
and everything and now, I would like to use the Version class from this
module.

I'm using something like this:

  >>> from twisted.python.versions import Version
  >>> v = Version('twisted', 1, 2, 3)
  >>> print v._getSVNVersion()
  None

Looking at
https://twistedmatrix.com/trac/browser/trunk/twisted/python/versions.py#L210
(line 210 to 215), I don't know how it supposed to work with recent
version of Subversion:

 * the "twisted" module in this case would refer to the file
   "trunk/twisted/__init__.py"
 * but the ".svn" directory is going to be in "trunk/.svn" so the
   function always returns None

Additionally, it doesn't seem there's any parser for recent Subversion's
database?
So, how useful is that module at that moment?

 Jonathan


From jon at multani.info  Mon Mar 17 02:25:09 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 17:25:09 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <20140317043428.GB28733@danio.home>
References: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home>
 <20140317043428.GB28733@danio.home>
Message-ID: <20140317082508.GA8405@danio.home>

On Mon, Mar 17, 2014 at 01:34:28PM +0900, Jonathan Ballet wrote:
> > > This would be an even more straightforward patch to Twisted, in twisted.python.versions.
> >
> > I've created #7036 for this task.
> 
> So, I was looking at twisted.python.versions and I'm wondering how is it
> supposed to work with recent versions of Subversion (the ones which
> removed all the ".svn" in all the sub-directories, I don't know which
> one started this.)
> 
> Looking at
> https://twistedmatrix.com/trac/browser/trunk/twisted/python/versions.py#L210
> (line 210 to 215), I don't know how it supposed to work with recent
> version of Subversion:
> 
>  * the "twisted" module in this case would refer to the file
>    "trunk/twisted/__init__.py"
>  * but the ".svn" directory is going to be in "trunk/.svn" so the
>    function always returns None

Actually, it's going to be the same thing with Git, the ".git" is one
level higher than the package which is passed to Version() in this case.
Version() can still run "git describe" or the like to get the latest
changeset number but:

* it's probably going to launch the "git" command which might be costly
* if for some reason the package is not from a Git repository, but
  there's one (potentially completely different) in a parent directory,
  "git describe" will happily return the changeset number from this
  upper directory and it's going to give some funky revision number.

> Additionally, it doesn't seem there's any parser for recent Subversion's
> database?
> So, how useful is that module at that moment?
> 
>  Jonathan


From adi at roiban.ro  Mon Mar 17 02:28:54 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 17 Mar 2014 10:28:54 +0200
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
 <20140316204856.6218.196190797.divmod.xquotient.307@top>
 <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>
Message-ID: <CAFycZ9evkOT+_SYCX7WGezsRJSCrGxOzVunS2uOgt0=OAfS1Kw@mail.gmail.com>

On 17 March 2014 02:08, Glyph <glyph at twistedmatrix.com> wrote:
> On Mar 16, 2014, at 1:48 PM, exarkun at twistedmatrix.com wrote:
>
> I know it's easier to start a fresh document (this time it'll work for
> sure!) but please consider that this strategy may actually not produce the
> best results (it may in fact be the strategy that produced the current state
> of affairs).
>
>
> I don't have a lot to comment on this but it really bears repeating.
>
> This problem is also not unique to Twisted; see also
> <https://xkcd.com/927/>.

Agreed and understood. I will try to work on updating the current wiki pages.

Thanks!

-- 
Adi Roiban


From jonas.brunsgaard at gmail.com  Mon Mar 17 07:02:52 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 17 Mar 2014 14:02:52 +0100
Subject: [Twisted-Python] Getting the options object from the service
Message-ID: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>

Hello Everybody

What is the prefered way to get the options object from the servicemaker
when using twistd plugins.

I guess i could access the object via

from twisted.plugins.my_plugin import myServiceMaker
options = myServicemMaker.options

But is there a better way to do it? Somthing like

from somwhere import get_service_config()
options =  get_service_config()

All the best

--
Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140317/5eda2d2e/attachment.html>

From _ at lvh.io  Mon Mar 17 07:20:31 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 17 Mar 2014 14:20:31 +0100
Subject: [Twisted-Python] Getting the options object from the service
In-Reply-To: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
References: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
Message-ID: <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>

Hi Jonas,


I strongly prefer to pass the options around (through the Service objects
you're making) rather than relying on the global state of the plugin
instance.


hth
lvh



On Mon, Mar 17, 2014 at 2:02 PM, Jonas Brunsgaard <
jonas.brunsgaard at gmail.com> wrote:

> Hello Everybody
>
> What is the prefered way to get the options object from the servicemaker
> when using twistd plugins.
>
> I guess i could access the object via
>
> from twisted.plugins.my_plugin import myServiceMaker
> options = myServicemMaker.options
>
> But is there a better way to do it? Somthing like
>
> from somwhere import get_service_config()
> options =  get_service_config()
>
> All the best
>
> --
> Brunsgaard
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140317/54dccdce/attachment.html>

From glyph at twistedmatrix.com  Mon Mar 17 21:29:55 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Mar 2014 20:29:55 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <20140317043428.GB28733@danio.home>
References: <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home> <20140317043428.GB28733@danio.home>
Message-ID: <1844282F-6988-46FB-B757-194368C3E668@twistedmatrix.com>


On Mar 16, 2014, at 9:34 PM, Jonathan Ballet <jon at multani.info> wrote:

> So, how useful is that module at that moment?

I guess we can declare this functionality not a blocker, then.

As a low priority thing it would be nice to get it back and to get the git equivalent somehow later.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140317/c1f03f50/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140317/c1f03f50/attachment.bin>

From sank.daniel at gmail.com  Mon Mar 17 22:10:58 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 17 Mar 2014 21:10:58 -0700
Subject: [Twisted-Python] object identify and lifecycle in pb
Message-ID: <CAKN9TD+ZTQo2xNpekWu9b6wS10dUat4=UMwOZozoFtHS5JtYyQ@mail.gmail.com>

Dear Twisted users,

I have been writing a developer library under pb and I've come to a
problem that I don't know how to solve. I suspect folks here will have
dealt with similar problems so I want to get your advice. This is a
long post so I've put specific questions on their own lines.

Suppose we're part of a society of spies. We desire to possess top
secret Widgets. Widgets can be purchased from a black market, or
obtained from other spies. Suppose we implement this by having Widget
inheret from pb.Cacheable. When I buy a Widget from the black market I
am passed a pb.RemoteCache of that Widget. We use Cacheable so that
when the Widget receives a top secret message, my RemoteCache is
notified of the message. Now suppose I give my Widget to my trusted
co-spy Glyph. On the network this is implemented by passing Glyph a
RemoteCache of that Widget and by remembering to stop updating my
RemoteCache, since I'm no longer in posession of the Widget. This
could be done simply by keeping a .owner attribute on the Widget so
that it knows whos RemoteCache to update when secret messages come in.

Now suppose it turns out Glyph is a traitor and secretly gives the
Widget to Mr. Evil. Again, the Widget's .owner attribute changes and
everything seems hunky dory. The problem comes in when I infiltrate
Mr. Evil's castle and steal the Widget. The server passes me a
reference to the Widget which, because of the way pb works, I can
immediately identify as the same widget I originally gave Glyph,
allowing me to identify him as a traitor. This is bad because my
ability to trace the Widget comes from pb, not from my own decision to
give (or not give) the Widgets distinguishing characteristics.

Q1: Is there a simple solution to this problem?

My idea is to have each Widget implemented as a vanilla object that
knows nothing about pb or the network, but which can (through
extension in a subclass) create pb objects as users need them. The
problem I'm having with that idea is that I haven't figured out a
reasonable to distribute the network layer objects, particularly in
cases in which objects "contain" one another. Let's try an example.
First we have a vanilla Widget

class Widget(object):
    def __init__(self):
        owner = None

    def receiveMessage(self, msg):
        print("Widget received message: %s"%(msg,))


Next we need to extend this object so that it can spawn and interact
with network-layer objects. To do this we add two features

1) We use a decorator that allows methods to notify other observing
methods when they are run. For a possible implementation see the
"obsub" module on PyPI. I have my own implementation for reasons.

2) We add a method that spawns network layer objects.

class FeaturefulWidget(Widget):

    networkClass = WidgetNetwork

    @event #Allows other bound methods to observe this method
    def receiveMessage(self, msg):
        return Widget.receiveMessage(self, msg)

    def makeNetworkModel(self):
        return self.networkClass(self)

    def addCallback(self, methodName, callback):
        """
        Sign up a callback to be invoked when a method decorated by @event
        is called

        methodName: the name of the method to be observed on the present object.
        callback: The thing to call when methodName is invoked.
        """
        <just trust me that this works>


Now we can make the actual cacheable object,

class WidgetNetworkModel(pb.Cacheable):
    def __init__(self, obj):
        self.obj = weakref.proxy(obj)
        # Sign up our receiveMessage method to be called whenever
        # obj.receiveMessage is called.
        obj.addCallback("receiveMessage", self.receiveMessage)
        # The usual set of observers needed by a pb.Cacheable
        self.observers = weakref.WeakKeyDictionary{} #perspective -> observer

    def getStateToCacheAndObserveFor(self, perspective, observer):
        self.observers[p] = observer
        # Get state data from the actual object
        return {'some key': self.obj.someData, etc.}

    def receiveMessage(self, msg):
        for p in self.observers:
            <possibly decide whether p should know about this message>
            self.observers[p].callRemote("receiveMessage", msg)


and its remote cache,

class WidgetRemoteCache(pb.RemoteCache):
    def setCopyableState(self, state):
        for k, v in state.items():
            setattr(self, k, v)

    def observe_receiveMessage(self, msg):
        print("Top secret message received: %s"%(msg,))


In an application we would work most directly with FeaturefulWidget.
When a user gets its hands on a particular instance of
FeaturefulWidget called myWidget, we would either pass or return
myWidget.makeNetworkModel().

Q2: Is there a good mental framework we can use to decide when to make
new network models and when to pass multiple remote references to the
same one?

Q3: We had a line in getStateToCacheAndObserveFor where we put
self.obj.someData in a dict to pass over the wire. In many cases
objects will contain other objects that should be networkified before
they can be passed over the wire. Certainly we can manually put
self.obj.someData.makeNetworkModel() into the dict as necessary, but I
wonder if there's a nice way to handle this sort of thing.

Thanks!

Daniel


From jonas.brunsgaard at gmail.com  Tue Mar 18 17:35:13 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 00:35:13 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <5320E123.70003@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
Message-ID: <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>

I think that it is a shame that Twisted is not on Github(Yep Github, not
just git)

If we make a comparison between SVN and Git, I think it is obvious that Git
is the superior VCS.

That said, I think Github  - as a platform - creates a certain "feeling" of
openness, transparency, accessibility and recognisability.

All things, that make new users of twisted feel better about the project.

As an example I think that most developers know how to submit PR's via
Github, where I (as an example) don`t know how to submit a patch to Twisted
today(of cause I could read up on it, but i already know the other flow).
And that could hold back some people from submitting bugfixes etc.

I feel many developers see Twisted as good and stable, but also a little
'dusty' and old, and I think that a move to Github would bring more code
submitters, more discussions, more accessibility and more '
genereldevelopment' in the project.

For that reasons I feels like it may be a good idea to move twisted to
Github.

If at some point the core dev team decides that such a move should happen,
I would love to help with the movement of issues etc.(all the slave work
:)) (and I think others outside the core team would be willing to help out
too)

That is my view on the case, how does your guys feel about my view on this
matter?

All the best

--
brunsgaard



On Wed, Mar 12, 2014 at 11:35 PM, Chris Withers <chris at simplistix.co.uk>
 wrote:

> Hi All,
>
> Is there a git mirror of the twisted repo anywhere?
>
> Chris
>
> --
> Simplistix - Content Management, Batch Processing & Python Consulting
>             - http://www.simplistix.co.uk
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140319/54781326/attachment.html>

From jonas.brunsgaard at gmail.com  Tue Mar 18 17:39:54 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 00:39:54 +0100
Subject: [Twisted-Python] Getting the options object from the service
In-Reply-To: <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>
References: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
 <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>
Message-ID: <CACVXvXrXZ_GR+zPc+C33okL4dzrDFYzpjvb-=LRiM4GpPTWD7A@mail.gmail.com>

lvh, thanks for your answer.

I will keep parsing the options object around.


On Mon, Mar 17, 2014 at 2:20 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Jonas,
>
>
> I strongly prefer to pass the options around (through the Service objects
> you're making) rather than relying on the global state of the plugin
> instance.
>
>
> hth
> lvh
>
>
>
> On Mon, Mar 17, 2014 at 2:02 PM, Jonas Brunsgaard <
> jonas.brunsgaard at gmail.com> wrote:
>
>> Hello Everybody
>>
>> What is the prefered way to get the options object from the servicemaker
>> when using twistd plugins.
>>
>> I guess i could access the object via
>>
>> from twisted.plugins.my_plugin import myServiceMaker
>> options = myServicemMaker.options
>>
>> But is there a better way to do it? Somthing like
>>
>> from somwhere import get_service_config()
>> options =  get_service_config()
>>
>> All the best
>>
>> --
>> Brunsgaard
>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140319/c087848c/attachment.html>

From radix at twistedmatrix.com  Tue Mar 18 17:51:22 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2014 18:51:22 -0500
Subject: [Twisted-Python] git?
In-Reply-To: <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
Message-ID: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>

On March 18, 2014 at 6:38:42 PM, Jonas Brunsgaard (jonas.brunsgaard at gmail.com) wrote:
I think that it is a shame that Twisted is not on?Github(Yep?Github, not just git)

If we make a comparison between?SVN?and Git, I think it is obvious that Git is the superior?VCS.

That said, I think?Github??- as a platform - creates a?certain?"feeling" of openness, transparency, accessibility and?recognisability.

All things, that make new users of twisted feel better about the project.

As an example I think that most developers know how to submit?PR's?via?Github, where I (as an example) don`t know how to submit a patch to Twisted today(of cause I could read up on it, but i already know the other flow). And that could hold back some people from submitting?bugfixes?etc.


I think accepting PRs via Github would be a huge benefit to Twisted.





I feel many?developers?see Twisted as good and stable, but also a little 'dusty' and old, and I think that a move to?Github?would bring more code?submitters, more discussions, more accessibility and more '?generel?development' in the project.

For that reasons I feels like it may be a good idea to move twisted to?Github.

If at some point the core?dev?team decides that such a move should happen, I would love to help with the movement of?issues?etc.(all the slave work :)) (and I think others outside the core team would be willing to help out too)?
While I doubt Twisted would move to Github?s pretty poor issue tracker, there is already some agreement that Twisted should be moved to github inasmuch that PRs should reasonably be integrated into the workflow.

There are already some tickets on the Twisted tracker about a move to Git. I?m sure your help would be greatly appreciated :-)

Here?s a wiki page where some of the tickets are linked:?https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit


--?
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140318/0a38b100/attachment.html>

From jonas.brunsgaard at gmail.com  Tue Mar 18 18:11:00 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 01:11:00 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
 <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
Message-ID: <CACVXvXrbbw6pch2BEhfituzCqBJh6fsY8VQh_tCTKysT9t_OzA@mail.gmail.com>

On Wed, Mar 19, 2014 at 12:51 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On March 18, 2014 at 6:38:42 PM, Jonas Brunsgaard (
> jonas.brunsgaard at gmail.com) wrote:
>
> I think that it is a shame that Twisted is not on Github(Yep Github, not
> just git)
>
> If we make a comparison between SVN and Git, I think it is obvious that
> Git is the superior VCS.
>
> That said, I think Github  - as a platform - creates a certain "feeling"
> of openness, transparency, accessibility and recognisability.
>
> All things, that make new users of twisted feel better about the project.
>
> As an example I think that most developers know how to submit PR's via
> Github, where I (as an example) don`t know how to submit a patch to
> Twisted today(of cause I could read up on it, but i already know the other
> flow). And that could hold back some people from submitting bugfixes etc.
>
>
> I think accepting PRs via Github would be a huge benefit to Twisted.
>
>
> I feel many developers see Twisted as good and stable, but also a little
> 'dusty' and old, and I think that a move to Github would bring more code
> submitters, more discussions, more accessibility and more ' generel development'
> in the project.
>
> For that reasons I feels like it may be a good idea to move twisted to
> Github.
>
> If at some point the core dev team decides that such a move should
> happen, I would love to help with the movement of issues etc.(all the
> slave work :)) (and I think others outside the core team would be willing
> to help out too)
>
> While I doubt Twisted would move to Github?s pretty poor issue tracker,
> there is already some agreement that Twisted should be moved to github
> inasmuch that PRs should reasonably be integrated into the workflow.
>
> There are already some tickets on the Twisted tracker about a move to Git.
> I?m sure your help would be greatly appreciated :-)
>
> Here?s a wiki page where some of the tickets are linked:
> https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit
>
Thank you for the link.

I just realised that Gmail - for some strange reason - did not remove the
coloring after my spellcheck. I am sorry for the inconvenience (I feel
dumb!)



>
> --
> Christopher Armstrong
> http://twitter.com/radix
> http://wordeology.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140319/dd0fce19/attachment-0001.html>

From adi at roiban.ro  Wed Mar 19 02:46:21 2014
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 19 Mar 2014 10:46:21 +0200
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
 <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
Message-ID: <CAFycZ9dKy6Sh+GVnqrAt3RFix4fE2Wn6=dPCasHsObNNdFyQpA@mail.gmail.com>

On 19 March 2014 01:51, Christopher Armstrong <radix at twistedmatrix.com> wrote:
[snip]
> That said, I think Github  - as a platform - creates a certain "feeling" of
> openness, transparency, accessibility and recognisability.

Well.. it depends! GitHub is closed source and for any change you are
at the mercy of GitHub developers or rely on GitHub API + external
hacks to do what you want.

This does not mean that Twisted can not be moved to GitHub... but I am
not sure about the open part.
GitHub ticket management is mediocre but I don't see any advanced
ticket handling in Twisted's Trac either.

<snip>
> I think accepting PRs via Github would be a huge benefit to Twisted.
>
> I feel many developers see Twisted as good and stable, but also a little
> 'dusty' and old, and I think that a move to Github would bring more code
> submitters, more discussions, more accessibility and more ' generel
> development' in the project.
>
> For that reasons I feels like it may be a good idea to move twisted to
> Github.
>
> If at some point the core dev team decides that such a move should happen, I
> would love to help with the movement of issues etc.(all the slave work :))
> (and I think others outside the core team would be willing to help out too)

Me too. Happy to do the slave work!

For my project, I already do something similar.
I have a git *mirror* on GitHub, tickets in Trac and reviews over GitHub.
Using Trac-API and GitHub-API I keep trac ticket in sync with GitHub
pull request activity.

As a non comitter sending patches and now reviewing patches is not fun...
and I think that contributing to open source project should be fun.

> While I doubt Twisted would move to Github?s pretty poor issue tracker,
> there is already some agreement that Twisted should be moved to github
> inasmuch that PRs should reasonably be integrated into the workflow.

Even if Twisted would completely move to GitHub, I think is very hard
to do this move all at once.
This is why, for me, it makes much sense to migrate review process,
tickets, wiki (if required), website as independent steps.
GitHub API and hooks are great and can help keep things in sync while
the transition is done.

I have not done any work in helping move reviews to GitHub since the
CONTRIBUTING file contains a bold warning

**Warning: pull requests are ignored!**

This read to me like : Hey you fad driven developer! Stop using this
fancy new, git,  GitHub and PR things and go user our old good Trac
and SVN tools.

This is not a complain, just well intention feedback!

Looking forward for working with Pull Requests in Twisted :)


-- 
Adi Roiban


From hawkowl at atleastfornow.net  Wed Mar 19 08:35:32 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 19 Mar 2014 22:35:32 +0800
Subject: [Twisted-Python] Twisted 14.0.0-pre1 Announcement
Message-ID: <FB78F694-DD64-4A6F-A308-A325D6EFBBF4@atleastfornow.net>

I am pleased to announce that the first prerelease of Twisted 14.0 is hot off the code presses for testing!

Tarballs for this prerelease can be found at <http://twistedmatrix.com/Releases/pre/14.0.0pre1>, with the changelog at <http://twistedmatrix.com/Releases/pre/14.0.0pre1/NEWS.txt>.

Highlights include:

-Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair?s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

For more information and a full list of changes, check the NEWS.txt file.

Please download the tarballs and test them with your applications, so we can make sure we?re all ready for release!

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140319/dc31c1e2/attachment.pgp>

From hawkowl at atleastfornow.net  Wed Mar 19 08:43:29 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 19 Mar 2014 22:43:29 +0800
Subject: [Twisted-Python] Twisted 14.0.0-pre1 Announcement
Message-ID: <D82627C2-116D-408E-B1C7-1BC68D4AE37D@atleastfornow.net>

I am pleased to announce that the first prerelease of Twisted 14.0 is hot off the code presses for testing!

Tarballs for this prerelease can be found at <http://twistedmatrix.com/Releases/pre/14.0.0pre1>, with the changelog at <http://twistedmatrix.com/Releases/pre/14.0.0pre1/NEWS.txt>.

Highlights include:

-Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair?s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

For more information and a full list of changes, check the NEWS.txt file.

Please download the tarballs and test them with your applications, so we can make sure we?re all ready for release!

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140319/8765081f/attachment.pgp>

From chris at simplistix.co.uk  Thu Mar 20 01:57:51 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 20 Mar 2014 07:57:51 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>
Message-ID: <532A9F7F.5030305@simplistix.co.uk>

On 13/03/2014 19:38, Glyph Lefkowitz wrote:
> On Mar 12, 2014, at 11:53 PM, Chris Withers <chris at simplistix.co.uk
> <mailto:chris at simplistix.co.uk>> wrote:
>
>> Not to be too contentious, but when do you reckon you guys will switch
>> the main repo to git?
>
> Just to be clear about the nature of my other answers: we do not
> "reckon" such a thing will happen; we have no estimates.  Things get
> done because volunteers do them.  You could be just such a volunteer :).

I've read up on the thread and it's interesting to note that Mike Bayer 
has poured a huge amount of effort into doing the move for SQLAlchemy, 
producing some great tools in the process. I believe he now has 3 git 
repos that keep each other in sync, as well as accepting pull requests 
via both bitbucket and github.

I asked him about it and checked that it was okay to forward on his 
reply, please find it attached.

Hope this helps,

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk
-------------- next part --------------
An embedded message was scrubbed...
From: Michael Bayer <mike_mp at zzzcomputing.com>
Subject: Re: [Twisted-Python] git?
Date: Thu, 13 Mar 2014 11:43:22 -0400
Size: 10015
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140320/5860ae6f/attachment.mht>

From jonas.brunsgaard at gmail.com  Thu Mar 20 04:09:57 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Thu, 20 Mar 2014 11:09:57 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net> <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
Message-ID: <CACVXvXoO3-ZNW4EGN_QJzsN-1m4NcfYFwL8j2ab9dRwPQYLfqQ@mail.gmail.com>

On Sun, Mar 16, 2014 at 9:12 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 16, 2014, at 12:31 AM, Jonathan Ballet <jon at multani.info> wrote:
>
> Hi Glyph,
>
> On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:
>
>
> If someone would like to turn this list into a wiki page under <
> https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great,
> so it could be updated with anything I've forgotten. Right now there's the
> beginnings of a SwitchToBazaar which should probably be deleted, since
> we're not going to do that.
>
>
> I don't have edit permissions on the wiki, so I took the list of stuff
> you mentionned here and made a wiki page joined to this email.
>
>
> What's your username?  The only reason we even have edit permissions is to
> prevent spamming, anyone may ask for edit permission at any time :-).
>

I would like edit permissions too, my username is brunsgaard.


> Compared to the SwitchToBazar page, here are the things which are
> missing from your email - I don't know how relevant they are though:
>
> * mailer post-commit hook
>
>
> Yeah, we probably need this.  It seems like this ought to be pretty
> trivial to set up in git though :-).
>
> * the release scripts
>
>
> Oh, good point.  These rely fairly lightly on svn, but the dependency is
> there.
>
> This would be a good place to start.  Unfortunately, since tagging works
> differently in svn and git, I don't think we can simply start doing the
> release out of git without a repository to push to.  If I'm wrong about
> this, so much the better, and we could actually start having release
> managers use git if they like :).  Regardless, all the code to do so could
> be tested and landed as a normal development task with no administrative
> blockers, so this might be a good place for someone interested in moving
> the process along to start.
>
> * the developer documentation (I guess that should be done)
>
>
> The developer documentation is already so bad (as Adi Roiban has pointed
> out) that it wouldn't make sense to block migrating to git on a
> comprehensive upgrade.
>
> * figure the version number from Git instead of Subversion
>
>
> This would be an even more straightforward patch to Twisted, in
> twisted.python.versions.
>
> * decide what to do with Combinator
>
>
> I think Combinator is an evolutionary dead end at this point.  Tools like
> virtualenv, virtualenvwrapper, pyenv,
>
> There might be still some editing to do but that could be a start.
>
>
> I've deleted the SwitchToBazaar page and, for now, uploaded your proposal
> at <https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit>.
>  Hopefully someone (maybe me) can give you edit permission as soon as you
> announce your username :).
>
> Thanks for your contribution,
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140320/b9b8002c/attachment.html>

From trac at twistedmatrix.com  Sun Mar 23 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1395554715.86.7646671211504762427@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140323/c220d2de/attachment.html>

From glyph at twistedmatrix.com  Thu Mar 27 15:21:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 Mar 2014 14:21:30 -0700
Subject: [Twisted-Python] a reminder about Deferreds in tests
Message-ID: <FDC4D775-0910-4ABA-831C-EAF9FD55B800@twistedmatrix.com>

I'm not sure if we've written this down anywhere official-looking, but if you're writing new tests in Twisted today, there is no reason that they should ever return a Deferred.

Returning Deferreds from tests in Trial is useful _only_ for writing integration tests that rely on external services which cannot be reasonably implemented or faked within Twisted itself.  In some applications, this is an unfortunate fact of life, which is why Trial provides the feature and will continue to provide it.  For example, writing unit tests for a database-backed application which depends intimately upon stored procedures would require altogether too much mocking and it's useful to be able to simply call out to the real database within tests.  However, this is assuming that you can run your database locally in isolation as part of your test suite, and there is absolutely no non-determinism present in the application's communications with its database.

However, there is nothing like this within Twisted itself.  In extreme cases where you actually need to test real platform interactions, you can instantiate a reactor for your test and iterate it as the ReactorBuilder tests do, but in any case where you're testing a client/server interaction, parsing bytes, etc, you can use twisted.test.proto_helpers or twisted.test.iosim.  In the branch I'm working on right now I'm moving some more general testing utilities from individual tests over to twisted.test.ssl_helpers as well, so it should be easy to test any TLS interactions you might have as well.  (Note, these are for testing within Twisted only right now, at some point we need to clean up all the generally-useful things in twisted.test, including proto_helpers, put them in a module outside of *.test...)

To sum up: there is absolutely no reason whatsoever to ever use loopbackAsync, please don't ever use it in a new test.

Thanks,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140327/928fb165/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140327/928fb165/attachment.bin>

From kebin70 at gmail.com  Fri Mar 28 14:36:11 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 28 Mar 2014 13:36:11 -0700
Subject: [Twisted-Python] stmp client with multipart
Message-ID: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>

How can I get something similar into a smtp client 12? multipart message

    fn = "example.mp3"
    multipart = MIMEMultipart('alternative')
    multipart['Subject'] = 'Tutorate!'
    multipart['To'] = 'Selfie'
    multipart['From'] = 'Selfie'

    text = "Hello, how are you, goodbye."
    textpart = MIMEText(text)
    multipart.attach(textpart)
    htmlpart = MIMEText("<html>" + text + "</html>", 'html')
    multipart.attach(htmlpart)

    part = MIMEBase('audio', "mp3")
    part.set_payload( open(fn,"rb").read() )
    Encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="%s"' %
os.path.basename(fn))
    multipart.attach(part)

    io = StringIO.StringIO()
    g = Generator(io, False)
    g.flatten(multipart)
    v = io.getvalue()

    class SMTPTutorialClient(smtp.ESMTPClient):
        mailFrom = "mg_selfie@ <mg_selfie at scewpt.com>"
        mailTo = "mg@ <mg at scewpt.com>"
        def getMailFrom(self):
            result = self.mailFrom
            self.mailFrom = None
            return result

        def getMailTo(self):
            return [self.mailTo]

        def getMailData(self):
            print v
            return StringIO.StringIO(v)

        def sentMail(self, code, resp, numOk, addresses, log):
            print 'Sent', numOk, 'messages'

            from twisted.internet import reactor
            reactor.stop()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140328/e1bcedee/attachment.html>

From exarkun at twistedmatrix.com  Fri Mar 28 16:12:10 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Mar 2014 22:12:10 -0000
Subject: [Twisted-Python] stmp client with multipart
In-Reply-To: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
References: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
Message-ID: <20140328221210.6123.983812610.divmod.xquotient.12@top>

On 08:36 pm, kebin70 at gmail.com wrote:
>How can I get something similar into a smtp client 12? multipart 
>message

Hi Kevin,

MIME and SMTP are at different layers.

Twisted's SMTP client doesn't care what bytes you shove through it. 
They're just bytes.  They can be MIME or not.  Construct the bytes using 
the stdlib's MIME functionality if you want - once you have the bytes, 
the way you use them with Twisted's SMTP client is the same no matter 
what they are.

Jean-Paul


From kebin70 at gmail.com  Fri Mar 28 18:22:37 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 28 Mar 2014 17:22:37 -0700
Subject: [Twisted-Python] stmp client with multipart
In-Reply-To: <20140328221210.6123.983812610.divmod.xquotient.12@top>
References: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
 <20140328221210.6123.983812610.divmod.xquotient.12@top>
Message-ID: <CAA-sNEZFPf9Ok4NOvipS0Sgfm3JtNLxa9Qfw3ZN0ot7NPGmCqg@mail.gmail.com>

ah, it just seems like the next smtp client (potentially 12) from the
samples could be multipart mime.


On Fri, Mar 28, 2014 at 3:12 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:36 pm, kebin70 at gmail.com wrote:
>
>> How can I get something similar into a smtp client 12? multipart message
>>
>
> Hi Kevin,
>
> MIME and SMTP are at different layers.
>
> Twisted's SMTP client doesn't care what bytes you shove through it.
> They're just bytes.  They can be MIME or not.  Construct the bytes using
> the stdlib's MIME functionality if you want - once you have the bytes, the
> way you use them with Twisted's SMTP client is the same no matter what they
> are.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140328/61688b40/attachment.html>

From trac at twistedmatrix.com  Sun Mar 30 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1396159515.02.8213655968496825133@twistedmatrix.com

An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140330/d355ce6a/attachment.html>

From yangyouxiu at gmail.com  Mon Mar 31 19:45:23 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Tue, 1 Apr 2014 09:45:23 +0800
Subject: [Twisted-Python] Using  cred, how to prevent the user repeat-login?
Message-ID: <2014040109441449639711@gmail.com>

In my Client-Server Application,I do not want two user login with the same login name.

For example, user1 logined with name "test1",then user2 try to login with "test1" too, the login of user2 should be denied. At now, my code could not achieve this goal,so what's the method.
Thanks all!

The following is server code:
-----------------------------------------------------------------------------
class simulationServer:
    def __init__(self):
        self.groups = {} # indexed by name
        self.groups['#admin']= Group('#admin')
        self.groups['#general']=Group('#general')
    def joinGroup(self, groupname, user):
        if groupname not in self.groups:
            self.groups[groupname] = Group(groupname)
        self.groups[groupname].addUser(user)
        return self.groups[groupname]
    def leaveGroup(self, groupname, user):
        self.groups[groupname].delUser(user)
        return self.groups[groupname]
    def getGroup(self, admin=False):
        if admin==True:
            return self.groups['#admin']
        return self.groups['#general']

class simulRealm:
    implements(portal.IRealm)
    def requestAvatar(self, avatarID, mind, *interfaces):
        assert pb.IPerspective in interfaces
        avatar = User(avatarID)
        avatar.server = self.server
        avatar.attached(mind)
        return pb.IPerspective, avatar, lambda a=avatar:a.detached(mind)
        
class User(pb.Avatar):
    def __init__(self, name):
        self.name = name
        self.group=None
        self.status=False  #False: general client user not sync yet 
        self.serverRoot=ServerRoot()
    def attached(self, mind):
        self.remote = mind
    def detached(self, mind):
        print '%s detached...'%self.name
        self.server.leaveGroup(self.group, self)
        self.server.messageClientUserupdated()
        self.remote = None
    def perspective_joinGroup(self, groupname):
        print 'joined Group on Server Machine '
        print groupname
        self.group=groupname
        self.server.joinGroup(groupname, self)
        self.server.messageClientUserupdated()
        return groupname
    def perspective_getServerRoot(self):
        return self.serverRoot
    def getClientRoot(self):
        return self.remote
    def perspective_updateStatus(self):
        self.status=True  # user sync

class Group(pb.Viewable):
    def __init__(self, groupname):
        self.name = groupname
        self.users = []
    def addUser(self, user):
        self.users.append(user)
    def delUser(self, user):
        self.users.remove(user)
    def getallUsers(self):
        return self.users
    def getnotSyncUsers(self):
        nosyncusers=[]
        if self.users:
            for user in self.users:
                if not user.status:
                    nosyncusers.append(user)
        return nosyncusers
    def getUsers(self):
            syncusers=[]
            if self.users:
                for user in self.users:
                    if user.status:
                        syncusers.append(user)
            return syncusers
-----------------------------------------------------------------------------
Client code:
def1 = factory.login(credentials.UsernamePassword(self.group+'_'+self.UserNameandPwd[0], self.UserNameandPwd[1]), client=self)
def1.addCallback(self.connected)
def1.addErrback(self.connectFailure)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://twistedmatrix.com/pipermail/twisted-python/attachments/20140401/a50566ac/attachment.html>

From adi at roiban.ro  Sat Mar  1 03:03:46 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sat, 1 Mar 2014 12:03:46 +0200
Subject: [Twisted-Python] Help non-commiter to fully test their changes
 locally or remote
In-Reply-To: <5310AC8F.6090603@atleastfornow.net>
References: <CAFycZ9c9K37vHGJd=a2dFyi_8Z=D0omSEuQ6XO5zWQE+U2Cc0w@mail.gmail.com>
 <5310AC8F.6090603@atleastfornow.net>
Message-ID: <CAFycZ9cGTYk2W4OnRdutQuazBEW=bveysj=f=YW9YbsrhgVsQQ@mail.gmail.com>

On 28 February 2014 17:34, HawkOwl <hawkowl at atleastfornow.net> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi,
>
> TwistedChecker is kind of maintained by me - I've just not had the
> drive to work on it as much as other things :)
>

Right now I want to fix all errors produced during apidocs generation and
next in list is twistedchecker.
I like pedantic linters so maybe I can help with making twistedcheker
easier to use.


> Some of the invalid TwistedChecker errors are hard to solve - some are
> because they're hard to detect statically (for example, `some_var %
> 20` - is this string formatting, or modulo? Who knows, without runtime
> inspection).
>

Maybe those kind of errors could be documented in a list so that a
developer could run twistedcheker in a mode
where any reported error is a real error and should be fixed.

We can also have a 'crazy' run for twistedcheker where ambiguous errors are
reported and that require
a human to review them.

TwistedChecker has some form of diff functionality. When I get the
> time I might have to think of how to do it locally, rather than
> relying on the buildbots.
>

I will look at how --diff works and will try to document how devs can run
in locally.

Regards,
> HawkOwl
>
>
Thanks for the feedback!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140301/deea7e99/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar  2 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 02 Mar 2014 07:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1393743915.1.7937064185276959179@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140302/1bd11408/attachment-0002.html>

From erdamn at gmail.com  Sun Mar  2 17:05:30 2014
From: erdamn at gmail.com (Jay Kay)
Date: Sun, 2 Mar 2014 16:05:30 -0800
Subject: [Twisted-Python] Stream an mp3 file + IP Multicasting
Message-ID: <CAPEQvg03ZHhxN15g_OrX2n60AOmcQD5_MnsL_R3MgbugsEGCxA@mail.gmail.com>

Hi everybody, I am trying to stream an mp3 file via ip multicasting and
have found the following script:

https://sites.google.com/site/ka010notes/python/twisted#TOC-Multicast-ENCODEDAudioStream

When I run this script on the server I am able to open the stream on VLC
player from another device on the subnet but it is laggy/missing/choppy.

When I try streaming this mp3 file using VLC player on the server, I am
able to successfully open the stream with good quality, without any lags.

I have tried playing around with the parameters in this script such as
changeing the interval in l.start(0.2) but nothing has worked =/. It would
be great if somebody can help me out here.

Thanks in advance!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140302/e1f40d42/attachment-0002.html>

From burak at nehbit.net  Sun Mar  2 23:34:03 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 2 Mar 2014 22:34:03 -0800
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
Message-ID: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>

Hi everyone, 

It seems that I ran into a rather inextricable problem, would love to see what you think.

As you might remember, I have been working on a distributed, anonymous community platform(s) called Aether ( www.getaether.net ) which is largely a Twisted codebase in its networking system. After releasing the app, I ended up with performance problems, in some part due to my programming incompetence, and some part because I was also using it to drive a GUI with qtreactor, which ran its own Javascript interpreter.

The codebase is largely cleaned up now and the current architecture of the program involves two processes that talk to each other via Ampoule: a default reactor core, which handles network events, and a qtreactor which is solely concerned with the user interface. It works very well. Stress induced by networking does not slow down the UI and vice versa. 

The problem here is that I can’t freeze and package the app via PyInstaller to release it. What happens is that when I run the packaged application, the application starts to spawn an infinite amount of copies of itself. This seems to be the default behaviour of Ampoule, in when a worker process (my GUI) fails, it spawns a new one. 

1) How can I disable this feature? I want ampoule to not restart a failed worker process. 

2) How can I get information about what’s going wrong in the worker process? I am using a custom bootstrap code, and it seems that even if I deliver an empty bootstrap code to make it a noop, the process still fails and a new one is spawned. Or to be more accurate, just a new process is spawned, I don’t know whether if it is failing, but nothing happens on spawned processes, none of them start to show GUI or any other signs of life. 

If I don’t force quit my frozen app, it will create an increasing number of zombie processes. 

I have Twisted logging set up in the GUI process, but it doesn’t even hit that line, so I get no exceptions or any message of any kind. It fails even with empty bootstrap code. 

Any idea on how to approach this problem? I have nothing to start with , so anything would be appreciated. I’m reading the source code of Ampoule but found nothing useful so far. 

The non-frozen version of the app works fine. I also have a prior version of the app that can be packaged, so there’s nothing wrong with my Twisted code that can’t be packaged. It’s Ampoule that is newly added, and so far resisting the refrigerator.

Best regards,
Burak






-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140302/921bdc99/attachment-0002.html>

From exarkun at twistedmatrix.com  Mon Mar  3 05:17:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Mar 2014 12:17:57 -0000
Subject: [Twisted-Python] [twisted-web] I/O error with twisted.web.wsgi
 and Django
In-Reply-To: <3227632E-B3C6-44B3-9909-96DCEBCCC137@orestis.gr>
References: <3227632E-B3C6-44B3-9909-96DCEBCCC137@orestis.gr>
Message-ID: <20140303121757.6218.1474587763.divmod.xquotient.170@top>

On 27 Feb, 11:21 am, orestis at orestis.gr wrote:
>Hi all,
>
>I am using Twisted Web WSGIResource to host a Django site. Here's the 
>code I use to setup the WSGI resource (other boilerplate skipped)
>
>def wsgi_resource():
>     from django.core.handlers.wsgi import WSGIHandler
>     pool = threadpool.ThreadPool()
>     pool.start()
>     # Allow Ctrl-C to get you out cleanly:
>     reactor.addSystemEventTrigger('after', 'shutdown', pool.stop)
>     wsgi_resource = wsgi.WSGIResource(reactor, pool, WSGIHandler())
>     return wsgi_resource
>
>This generally worked quite well. However I have an API endpoint that 
>gets hit with multiple POST requests per second (not very much - I'd 
>say 10-20 req/sec at most). Sometimes I see this in the logs:

If you can put together an http://sscce.org/ it would be easier to 
investigate this problem. :)

Jean-Paul



From exarkun at twistedmatrix.com  Mon Mar  3 05:19:26 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 03 Mar 2014 12:19:26 -0000
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
Message-ID: <20140303121926.6218.526328592.divmod.xquotient.173@top>

On 06:34 am, burak at nehbit.net wrote:
>Hi everyone,
>
>It seems that I ran into a rather inextricable problem, would love to 
>see what you think.
>
>As you might remember, I have been working on a distributed, anonymous 
>community platform(s) called Aether ( www.getaether.net ) which is 
>largely a Twisted codebase in its networking system. After releasing 
>the app, I ended up with performance problems, in some part due to my 
>programming incompetence, and some part because I was also using it to 
>drive a GUI with qtreactor, which ran its own Javascript interpreter.
>
>The codebase is largely cleaned up now and the current architecture of 
>the program involves two processes that talk to each other via Ampoule: 
>a default reactor core, which handles network events, and a qtreactor 
>which is solely concerned with the user interface. It works very well. 
>Stress induced by networking does not slow down the UI and vice versa.

I wonder why you decided to use Ampoule to manage a single child process 
(that apparently shouldn't be restarted when it exits)?

I think Ampoule's purpose is to make it easy to run many processes and 
automatically restart them from time to time.

It sounds like the basic process support included in Twisted, 
reactor.spawnProcess, could address your requirements.

Jean-Paul



From adi at roiban.ro  Mon Mar  3 09:59:01 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 18:59:01 +0200
Subject: [Twisted-Python] Work around pyflakes errors
Message-ID: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>

I would like to see twisted code base free of pyflakes errors.

In this way, when someone sees pyflakes errors in his/her branch will know
for sure that those errors are generated by changes in that branch. Also
developers could run pyflakes on local computers, before sending a patch
and have instance feedback for pyflakes errors.

One problem is that pyflakes will complain about unused imports.

JP suggested a fix for that and I have created a ticket:
https://twistedmatrix.com/trac/ticket/7014

I am not sure how the suggested requireModule("OpenSSL") style API should
work, but in the same comment, JP suggested to use 'namedAny' to get the
same effect as the unused import.

My problem with namedAny is that it does not raise ImportError ... but
rather ModuleNotFound or ObjectNotFound.

But I found 'namedModule' which raise ImportError

Here is an example of namedModule usage which should work around pyflakes
errors.

Old code:

try:
    import threading
    threading  # Silence the linter.
except ImportError:
    self.assertFalse(Platform().supportsThreads())

New code

try:
    namedModule('threading')
except ImportError:
    self.assertFalse(Platform().supportsThreads())

What do you think, is namedModule usage acceptable or we should work at
implementing the requireModule("OpenSSL") API?

Thanks!
-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140303/a87a1bed/attachment-0002.html>

From adi at roiban.ro  Mon Mar  3 10:11:12 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 19:11:12 +0200
Subject: [Twisted-Python] Fixing pydoctor / epydocs errors
Message-ID: <CAFycZ9eACkPqTQYXGH_-f5Ai3XZ4Cw7M_EedVPUXZ96yYMOVog@mail.gmail.com>

Hi,

I would like to fix pydoctor / epydocs errors generated while building
twisted api reference documentation.

The goal is to have a clean build so that when a developer sees an error in
his/her branch, the errors is for sure produced by his/her changes.

My current problem is that I can not reproduce the results generated by
Twisted buildbot.

For example for pair, Twisted buildbot gives [1]:

twisted.pair.tuntap._IInputOutputSystem.ioctl:143 invalid ref to fcntl.ioctl
twisted.pair.tuntap._IInputOutputSystem.ioctl:143 invalid ref to fcntl.ioctl
twisted.pair.testing.MemoryIOSystem.ioctl:442 invalid ref to fcntl.ioctl
twisted.pair.testing.MemoryIOSystem.ioctl:442 invalid ref to fcntl.ioctl

While on Travis-CI builder, and my local system I get [2]:

twisted.pair.testing.MemoryIOSystem.receiveUDP:494 invalid ref to
socket.socket
twisted.pair.testing.MemoryIOSystem.receiveUDP:494 invalid ref to
socket.socket
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.testing._FakePort.recv:527 invalid ref to socket.socket.recv
twisted.pair.tuntap._IInputOutputSystem.receiveUDP:182 invalid ref to
socket.socket
twisted.pair.tuntap._IInputOutputSystem.receiveUDP:182 invalid ref to
socket.socket

-----

The command used is

python bin/admin/build-apidocs . apidocs

Does anyone has any clue what can go wrong and why I get this differences ?

Thanks!

[1] https://travis-ci.org/chevah/twisted/jobs/19809459
[2]
http://buildbot.twistedmatrix.com/builders/documentation/builds/4469/steps/api-documentation/logs/stdio

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140303/9ca6aa89/attachment-0002.html>

From adi at roiban.ro  Mon Mar  3 11:09:11 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 3 Mar 2014 20:09:11 +0200
Subject: [Twisted-Python] Configuration options for twisted code
Message-ID: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>

While using twisted.web (but not only) I had to sub-class twisted code to
implement the following:

HTTPChannel
* reduce limit of HTTP headers length
* reduce number of HTTP headers
* connection timeout

HTTPRequest
* change HTTP server signature
* change HTTP cookie name and secure/HTTPOnly flag

Static.File
* resource for child not found
* resource for forbidden
* template for directory listing.

During review process, one feedback was to add these options as part of
__init__ method for the required classes and another one was to design some
configuration system, which allows changing these options without
sub-classing.

What do you think? Should I go ahead and add options as __init__ arguments
or think of a configuration system?

Thanks!

-- 
Adi Roiban
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140303/4e37be9c/attachment-0002.html>

From donald at stufft.io  Mon Mar  3 17:44:06 2014
From: donald at stufft.io (Donald Stufft)
Date: Mon, 3 Mar 2014 19:44:06 -0500
Subject: [Twisted-Python] treq // Agent and Content-Length
Message-ID: <7A4131AD-1698-4494-9730-0AE9A06CE2B1@stufft.io>

I’m making a small proxy server in Twisted which is supposed to essentially
"mask" the original destination of an URL. Specifically it does the following:

1. Receives an HTTP request on /<hmac>/<url encoded url>
2. Verifies that the hmac in the URL matches the url decoded url
3. Makes an HTTP request to the url decoded url
4. Verify the response
   4a. Verify that the *on the wire* size is not greater than a set number of
       bytes, prior to downloading the body.
   4b. Verify that the content-type is acceptable prior to downloading the
       body.
5. Download the body of the response without modifying it (No Gzip decode)
6. Return the unmodified downloaded response as the resposne to the HTTP
   request in 1, as well as copying over several Response Headers.

This should be able to pass through ``Accept-Encoding`` from the request in
#1 to the request made in #3.

I've had a problem getting 4a to happen, no matter what I've tried if the
Content-Encoding is set to gzip it appears that the length of the response
is unknown. Additionally the "connection headers" are split out from the normal
headers, so I cannot seem to locate the original ``Content-Length`` header to
simply check that.

I got frustrated and implemented it using requests and that has worked OK. It
however uses deferToThread and I would like to get back to using the built
in tooling.

So my question is, how can I make Agent/treq do this?

The requests version of the code is here: https://gist.github.com/dstufft/7c8aac898de0ad359675
The treq versions of the code is here: https://gist.github.com/dstufft/0dffb12201d235f35bc7

-----------------
Donald Stufft
PGP: 0x6E3CBCE93372DCFA // 7C6B 7C5D 5E2B 6356 A926 F04F 6E3C BCE9 3372 DCFA

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140303/ec6a2893/attachment.sig>

From itamar at itamarst.org  Mon Mar  3 17:52:01 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Mon, 03 Mar 2014 19:52:01 -0500
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
Message-ID: <531523B1.3090001@itamarst.org>

On 03/03/2014 01:09 PM, Adi Roiban wrote:
>
> What do you think? Should I go ahead and add options as __init__ 
> arguments or think of a configuration system?
>

A configuration system would take a while to design and meanwhile these 
unrelated features would languish, so I'd suggest you start with options 
to __init__.



From p.mayers at imperial.ac.uk  Tue Mar  4 00:41:10 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Tue, 04 Mar 2014 07:41:10 +0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <531523B1.3090001@itamarst.org>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org>
Message-ID: <53158396.1010401@imperial.ac.uk>

On 04/03/2014 00:52, Itamar Turner-Trauring wrote:
> On 03/03/2014 01:09 PM, Adi Roiban wrote:
>>
>> What do you think? Should I go ahead and add options as __init__
>> arguments or think of a configuration system?
>>
>
> A configuration system would take a while to design and meanwhile these
> unrelated features would languish, so I'd suggest you start with options
> to __init__.

-1

I hate __init__ methods with a hojillion parameters, and that's where 
this leads.

+1 instead for class variables which can be overridden in sub-classes to 
achieve DRY and/or set after instantiation if necessary e.g.

class Foo:
   maxThingLen = 10000

class MyFoo(Foo):
   maxThingLen = 100

This is also somewhat consistent with what things like t.w.s.Site 
already do.



From exarkun at twistedmatrix.com  Tue Mar  4 05:17:49 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 Mar 2014 12:17:49 -0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <53158396.1010401@imperial.ac.uk>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
Message-ID: <20140304121749.6218.2038060974.divmod.xquotient.179@top>

On 07:41 am, p.mayers at imperial.ac.uk wrote:
>On 04/03/2014 00:52, Itamar Turner-Trauring wrote:
>>On 03/03/2014 01:09 PM, Adi Roiban wrote:
>>>
>>>What do you think? Should I go ahead and add options as __init__
>>>arguments or think of a configuration system?
>>
>>A configuration system would take a while to design and meanwhile 
>>these
>>unrelated features would languish, so I'd suggest you start with 
>>options
>>to __init__.
>
>-1
>
>I hate __init__ methods with a hojillion parameters, and that's where 
>this leads.

Functions that take arguments are great.  If your function takes *too 
many* arguments then maybe the function does too many things or maybe 
there is some structure spread across those arguments that should be 
explicitly reflected in their type (iow maybe those last five arguments 
are all actually part of the same thing and should be represented by a 
single argument instead).
>+1 instead for class variables which can be overridden in sub-classes 
>to achieve DRY and/or set after instantiation if necessary e.g.
>
>class Foo:
>   maxThingLen = 10000
>
>class MyFoo(Foo):
>   maxThingLen = 100
>
>This is also somewhat consistent with what things like t.w.s.Site 
>already do.

This is compatible with accepting these values as arguments.  Defaults 
that provide good behavior by default for the common case are great.

Jean-Paul



From adi at roiban.ro  Tue Mar  4 05:41:35 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Mar 2014 14:41:35 +0200
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <53158396.1010401@imperial.ac.uk>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
Message-ID: <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>

> A configuration system would take a while to design

This reads like: A configuration system will never be implemented.

I agree that for the time being we can implement current tickets using
__init__ arguments,
but why not try to implement something simple?

Example:

TWISTED_WEB_DEFAULT_CONFIGURATIO = {
  'request.headers.count': 500,
  'request.headers.size': 16384,
  'request.session.name' :  'TWISTED_SESSION',
  }

# We can have a helper method to get default configuration
configInstance = TWISTED_WEB_DEFAULT_CONFIGURATION.copy()
configInstance[''request.headers.count'] = 100
t.w.s.Site(configuration=configInstance)

Or a bit more structured:

class RequestConfiguration(object):
   def __init__(self):
     self.max_headers_count = 500
     self.request_max_header_size = 16384
     self.session_cookie_name = 'TWISTED_SESSION'
     self.session_cookie_secure = True
     self.session_cookie_http_only = True

class TwistedWebConfiguration(object):
  def __init__(self):
       self.request = RequestConfiguration()

configInstance = TwistedWebConfiguration()
configInstance.request.max_headers_count = 100

t.w.s.Site(configuration=configInstance)

Or a mix:

configInstance = TwistedWebConfiguration()
configInstance.set('request.headers.count', 100)
t.w.s.Site(configuration=configInstance)

and support some sort of inheritance.

configInstance.set('timeout', 100)
assert configInstance.get('request.timeout') == 100
configInstance.set('request.timeout', 200)
assert configInstance.get('request.timeout') == 200

Or some design used in other project... or some other crazy idea.

-----

In Twisted web I found both configuration overridden in sub-classes
(t.w.s.Site) and defined via __init__ (t.w.s.File)

twisted.web.static.File has 5 arguments, but the following
configuration are missing : indexNames, childNotFoundResource,
forbiddenResource, directoryListing resource

As Jean-Paul commented, when there are too many arguments and they are
all related, they could be represented by a single argument.
For me, this single argument could be a configuration object.

Too many arguments are a code smell, but when you can say that a
method has too many arguments?

Thanks!
-- 
Adi Roiban



From exarkun at twistedmatrix.com  Tue Mar  4 06:22:57 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 04 Mar 2014 13:22:57 -0000
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
 <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
Message-ID: <20140304132257.6218.1352865863.divmod.xquotient.221@top>

On 12:41 pm, adi at roiban.ro wrote:
>>A configuration system would take a while to design
>
>This reads like: A configuration system will never be implemented.
>
>I agree that for the time being we can implement current tickets using
>__init__ arguments,
>but why not try to implement something simple?
>
>Example:
>
>TWISTED_WEB_DEFAULT_CONFIGURATIO = {
>  'request.headers.count': 500,
>  'request.headers.size': 16384,
>  'request.session.name' :  'TWISTED_SESSION',
>  }
>
># We can have a helper method to get default configuration
>configInstance = TWISTED_WEB_DEFAULT_CONFIGURATION.copy()
>configInstance[''request.headers.count'] = 100
>t.w.s.Site(configuration=configInstance)
>
>Or a bit more structured:
>
>class RequestConfiguration(object):
>   def __init__(self):
>     self.max_headers_count = 500
>     self.request_max_header_size = 16384
>     self.session_cookie_name = 'TWISTED_SESSION'
>     self.session_cookie_secure = True
>     self.session_cookie_http_only = True
>
>class TwistedWebConfiguration(object):
>  def __init__(self):
>       self.request = RequestConfiguration()
>
>configInstance = TwistedWebConfiguration()
>configInstance.request.max_headers_count = 100
>
>t.w.s.Site(configuration=configInstance)
>
>Or a mix:
>
>configInstance = TwistedWebConfiguration()
>configInstance.set('request.headers.count', 100)
>t.w.s.Site(configuration=configInstance)
>
>and support some sort of inheritance.
>
>configInstance.set('timeout', 100)
>assert configInstance.get('request.timeout') == 100
>configInstance.set('request.timeout', 200)
>assert configInstance.get('request.timeout') == 200
>
>Or some design used in other project... or some other crazy idea.
>
>-----
>
>In Twisted web I found both configuration overridden in sub-classes
>(t.w.s.Site) and defined via __init__ (t.w.s.File)
>
>twisted.web.static.File has 5 arguments, but the following
>configuration are missing : indexNames, childNotFoundResource,
>forbiddenResource, directoryListing resource
>
>As Jean-Paul commented, when there are too many arguments and they are
>all related, they could be represented by a single argument.
>For me, this single argument could be a configuration object.

The big downside of a "configuration object" is that "configuration" 
isn't any kind of abstraction.  "Configuration" approximately means 
"stuff".  Where does your "configuration" end?  By just saying this is 
where "configuration" goes you've defined its scope as infinite.  Before 
you know it, there's 80,000 items in your "configuration" object and 
you're really much worse off than if you'd just added a couple more 
arguments to `__init__`.

I'd like to see this discussion going in the other direction so to give 
it a little push that way, here's a specific suggestion. :)  Most or all 
of this may be recycled from discussion that's already taken place - I'm 
not taking credit, just repeating it. :)

Give `Request.__init__` some new optional arguments to control the size 
of the header.  This could be several arguments like `maxHeaderLines` 
and `maxHeaderValueLength` and so on... Or perhaps it should just be one 
argument that can completely describe the header size limitation 
(stretching this idea further, perhaps the one argument is a callable 
that takes a `Headers` instance and determines if it has gotten to big).

Then, perhaps, also give `HTTPFactory.__init__` (and therefore 
`Site.__init__` a `requestFactory` argument so that the request class 
can be replaced more easily (although setting the `requestFactory` 
attribute after creating an instance isn't *too* bad).

These two things combined make the usage pretty flexible while still 
being pretty simple and without involving any more complicated 
"configuration" system:

    def requestFactory(*args, **kwargs):
        kwargs["headerSizeLimit"] = HeaderSizeLimit(
            maxLines=23, maxTotalBytes=57, ...)
        return Site.requestFactory(*args, **kwargs)

    site = Site(..., requestFactory=requestFactory)

If anyone is really interested in building (or adopting) a more general 
"configuration" system for Twisted then I suggest you start by looking 
up some of Twisted's past attempts including the the "Coil" library 
Itamar started (he'll have to provide a link, I've lost track of where 
it lives now).

Jean-Paul



From adi at roiban.ro  Tue Mar  4 09:46:48 2014
From: adi at roiban.ro (Adi Roiban)
Date: Tue, 4 Mar 2014 18:46:48 +0200
Subject: [Twisted-Python] Configuration options for twisted code
In-Reply-To: <20140304132257.6218.1352865863.divmod.xquotient.221@top>
References: <CAFycZ9eVqeUoksSmw+t6YTe5DTO7CsT453FMgMiwd4obrsnzMQ@mail.gmail.com>
 <531523B1.3090001@itamarst.org> <53158396.1010401@imperial.ac.uk>
 <CAFycZ9eJbcMLNcVMKARJE_=0BU82qd4oFDGQMa-a2LTcHEeyfA@mail.gmail.com>
 <20140304132257.6218.1352865863.divmod.xquotient.221@top>
Message-ID: <CAFycZ9dAupsOetQ1Eqsh=vnuXyCgec7jD1=w69ZCD2iu7svppA@mail.gmail.com>

On 4 March 2014 15:22,  <exarkun at twistedmatrix.com> wrote:
> The big downside of a "configuration object" is that "configuration" isn't
> any kind of abstraction.  "Configuration" approximately means "stuff".
> Where does your "configuration" end?  By just saying this is where
> "configuration" goes you've defined its scope as infinite.  Before you know
> it, there's 80,000 items in your "configuration" object and you're really
> much worse off than if you'd just added a couple more arguments to
> `__init__`.

Agree.

> I'd like to see this discussion going in the other direction so to give it a
> little push that way, here's a specific suggestion. :)  Most or all of this
> may be recycled from discussion that's already taken place - I'm not taking
> credit, just repeating it. :)
>
> Give `Request.__init__` some new optional arguments to control the size of
> the header.  This could be several arguments like `maxHeaderLines` and
> `maxHeaderValueLength` and so on... Or perhaps it should just be one
> argument that can completely describe the header size limitation (stretching
> this idea further, perhaps the one argument is a callable that takes a
> `Headers` instance and determines if it has gotten to big).
>
> Then, perhaps, also give `HTTPFactory.__init__` (and therefore
> `Site.__init__` a `requestFactory` argument so that the request class can be
> replaced more easily (although setting the `requestFactory` attribute after
> creating an instance isn't *too* bad).

Why setting `requestFactory` attribute after instanciation isn't too bad?

Why not apply the same rule for setting attributes like maxHeaders and
maxHeader size
in Request itself?

> These two things combined make the usage pretty flexible while still being
> pretty simple and without involving any more complicated "configuration"
> system:
>
>    def requestFactory(*args, **kwargs):
>        kwargs["headerSizeLimit"] = HeaderSizeLimit(
>            maxLines=23, maxTotalBytes=57, ...)
>        return Site.requestFactory(*args, **kwargs)
>
>    site = Site(..., requestFactory=requestFactory)

The HeaderSizeLimit class looks like a Configuration class and I am
happy with it.

I will go and update the branches to include suggested changes.
Thank you all for the feedback!

> If anyone is really interested in building (or adopting) a more general
> "configuration" system for Twisted then I suggest you start by looking up
> some of Twisted's past attempts including the the "Coil" library Itamar
> started (he'll have to provide a link, I've lost track of where it lives
> now).

I am not really interested in building a big "configuration" system
for Twisted so don't worry
for the link.

Thanks!

-- 
Adi Roiban



From glyph at twistedmatrix.com  Tue Mar  4 15:50:29 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 4 Mar 2014 14:50:29 -0800
Subject: [Twisted-Python] Where are the documentation files?
In-Reply-To: <CAKN9TDJ4K8GQQiW=Hb43RTk=xxFmPt8BWRO-7KVj3Oqknu5J+w@mail.gmail.com>
References: <CAKN9TD+u-Wd8xC6yMtKqhFmJPe4NveGfzSUwWFSu36rbWfQLWA@mail.gmail.com>
 <CAFycZ9dNBc1P9J9CUfyk_ey0t0K4OssM75OVzs0zsLsDVqkXTg@mail.gmail.com>
 <CAKN9TDLqASUK6S2Jh7qydF9+hG0in7kzT8bo8v4wL2OJv-aF1A@mail.gmail.com>
 <CAFycZ9eVnC91OmxJfbwPJmMBSb2obTAtbK=DVb6oJ_haHSYs2Q@mail.gmail.com>
 <CAKN9TD+f0x1E8hRaVVULmiNFbw0n=1Xs2+P55msUJOj2iD7XEQ@mail.gmail.com>
 <0AD9476A-2353-428F-8334-FD3470289CF2@twistedmatrix.com>
 <CAKN9TDJ4K8GQQiW=Hb43RTk=xxFmPt8BWRO-7KVj3Oqknu5J+w@mail.gmail.com>
Message-ID: <C78446EF-5B77-437F-BB24-834B0B0DB921@twistedmatrix.com>


On Feb 27, 2014, at 10:39 AM, Daniel Sank <sank.daniel at gmail.com> wrote:

>>> Also, do you have any idea when the new documentation system will up and
>>> ready for contributions?
>>> 
>> It's up and running; there should be a lot less need for documentation (although
>> as you pointed out the current docs are wrong) because sphinx is better
>> understood generally in the wider Python community.
> 
> Cool. I'm enough of a n00b that sphinx versus whatever else is all Greek for me.
> 
>> If you'd like to write some ReST docs right now and submit a patch, please go ahead!
> 
> Working on it.

Let me just stress that you should work on getting the english part of the documentation right, and someone else will happily help you with the formatting.  If you just can't figure out the documentation toolchain, write it in plain text.  Don't get stuck on ReST or Sphinx nonsense :-).

-glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140304/85998dae/attachment-0002.bin>

From yangyouxiu at gmail.com  Wed Mar  5 07:35:18 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Wed, 5 Mar 2014 22:35:18 +0800
Subject: [Twisted-Python] Using DeferredList,
	on the remote method get parameter of None type?
Message-ID: <2014030522351363970510@gmail.com>


When developing server-client software, on the client i call the method getTrafficDate, but on the server end, i got nio is None(d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio)))
,so, what's the key point?

Thanks all!
-------------------------------------------------------------------------------------------------------------
client end
def getTrafficDate(self):
       if self.interfacenio_dict is not None and self.k:
            nodelist = self.interfacenio_dict.keys()
            trafficDataList=[]#DeferredList
            for node in nodelist:
                interfaces=self.interfacenio_dict[node]['interfaceinfo'].keys()
                if len(interfaces):
                    for interface in interfaces:
                        nio= self.interfacenio_dict[node]['interfaceinfo'][interface]
                        if nio is not None:
                            if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
                                d= globals.perspective.callRemote('getServerRoot')
                                d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio))
                                d2.addCallback(self.setTrafficSpeed_Tap, node, interface)
                                trafficDataList.append(d2)
                            else:
                                d= globals.perspective.callRemote('getServerRoot')
                                d2=d.addCallback(lambda object: object.callRemote("getNIOTrafficInfo", node, nio))
                                d2.addCallback(self.setTrafficSpeed_NotTap, node, interface)
                                trafficDataList.append(d2)
            
            trafficDataDeferredList=defer.DeferredList(trafficDataList, consumeErrors=True)
            trafficDataDeferredList.addCallback(self.getTrafficDataHandle)


server end
def remote_getNIOTrafficInfo(self,node,nio):
print nio
 if nio.name==nioName:
    pass

Bug info is:
File "/home/gddw/Documents/gddw-server-branche/src/Server.py", line 154, in remote_getNIOTrafficInfo
    if nio.name==nioName:
exceptions.AttributeError: 'NoneType' object has no attribute 'name'
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140305/4a117f91/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Mar  5 08:00:47 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Mar 2014 15:00:47 -0000
Subject: [Twisted-Python] Using DeferredList,
 on the remote method get parameter of None type?
In-Reply-To: <2014030522351363970510@gmail.com>
References: <2014030522351363970510@gmail.com>
Message-ID: <20140305150047.6218.1060392688.divmod.xquotient.232@top>

On 02:35 pm, yangyouxiu at gmail.com wrote:
>
>When developing server-client software, on the client i call the method 
>getTrafficDate, but on the server end, i got nio is 
>None(d2=d.addCallback(lambda object: 
>object.callRemote("getNIOTrafficInfo", node, nio)))
>,so, what's the key point?
>
>[snip]
>        for interface in interfaces:
>            nio= 
>self.interfacenio_dict[node]['interfaceinfo'][interface]
>            if nio is not None:
>                if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
>                    d= globals.perspective.callRemote('getServerRoot')
>                    d2=d.addCallback(
>                        lambda object:
>                            object.callRemote("getNIOTrafficInfo", node, 
>nio))
>[snip]

The value of `nio` varies for each iteration of the loop.  The value of 
`nio` isn't passed to the getNIOTrafficInfo remote method until the `d` 
Deferred fires - this will almost certainly be only after the loop 
finishes (since it depends on network traffic which will only happen 
after this method returns).

So all of the remote calls will be made with whatever value `nio` has on 
the last iteration of the loop.  This is just how scopes work in Python. 
Consider this simplified example:
>>>def foo():
...     functions = []
...     for i in range(3):
...         functions.append(lambda: i)
...     for f in functions:
...         print f()
...
>>>foo()
2
2
2
>>>

Jean-Paul



From p.mayers at imperial.ac.uk  Wed Mar  5 10:23:49 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 Mar 2014 17:23:49 +0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
Message-ID: <53175DA5.7090107@imperial.ac.uk>

All,

I'm having a head-poundingly annoying time getting detailed exception 
info out of the new Agent stuff.

Specifically, I have some bug inside my code somewhere, but I can't get 
decent tracebacks out because _WrapperException is the base class for 
RequestGenerationFailed, but there's no public (non-underscore-prefixed) 
way to get that.

It seems like an API error; how is one supposed to err.track/check other 
than importing a non-public API?



From glyph at twistedmatrix.com  Wed Mar  5 15:08:31 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2014 14:08:31 -0800
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <53175DA5.7090107@imperial.ac.uk>
References: <53175DA5.7090107@imperial.ac.uk>
Message-ID: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>

On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:

> All,
> 
> I'm having a head-poundingly annoying time getting detailed exception info out of the new Agent stuff.
> 
> Specifically, I have some bug inside my code somewhere, but I can't get decent tracebacks out because _WrapperException is the base class for RequestGenerationFailed, but there's no public (non-underscore-prefixed) way to get that.
> 
> It seems like an API error; how is one supposed to err.track/check other than importing a non-public API?

You're right; this is a bug in Agent.

<http://twistedmatrix.com/trac/ticket/5310>

For right now, yes, you're going to have to import some crappy private APIs.  Any chance I could convince you to submit some fixes to that ticket so we won't have to do that in the future? :-)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140305/628bdf00/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140305/628bdf00/attachment-0002.bin>

From p.mayers at imperial.ac.uk  Wed Mar  5 15:49:37 2014
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Wed, 05 Mar 2014 22:49:37 +0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
Message-ID: <5317AA01.60407@imperial.ac.uk>

On 05/03/2014 22:08, Glyph Lefkowitz wrote:

> You're right; this is a bug in Agent.
>
> <http://twistedmatrix.com/trac/ticket/5310>

And it must be said, really quite an infuriating one ;o)

>
> For right now, yes, you're going to have to import some crappy private
> APIs.  Any chance I could convince you to submit some fixes to that
> ticket so we won't have to do that in the future? :-)

I'll have a look tomorrow; though it seems like testing that would be 
tricky, and pointers to existing examples of how to test that 
Failure-with-traceback is being raised?

Do we know what the rationale for _WrapperException was? The only place 
it's used, it wraps a single exception, which is "singularly" pointless 
(ha ha marvel at my comedy).



From exarkun at twistedmatrix.com  Wed Mar  5 16:01:53 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Mar 2014 23:01:53 -0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
Message-ID: <20140305230153.6218.1125880239.divmod.xquotient.236@top>

On 10:08 pm, glyph at twistedmatrix.com wrote:
>On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> 
>wrote:
>>All,
>>
>>I'm having a head-poundingly annoying time getting detailed exception 
>>info out of the new Agent stuff.
>>
>>Specifically, I have some bug inside my code somewhere, but I can't 
>>get decent tracebacks out because _WrapperException is the base class 
>>for RequestGenerationFailed, but there's no public (non-underscore- 
>>prefixed) way to get that.
>>
>>It seems like an API error; how is one supposed to err.track/check 
>>other than importing a non-public API?
>
>You're right; this is a bug in Agent.
>
><http://twistedmatrix.com/trac/ticket/5310>

Happy Ash Wednesday - 
https://twistedmatrix.com/trac/ticket/5310#comment:5

Jean-Paul



From glyph at twistedmatrix.com  Wed Mar  5 18:19:12 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 5 Mar 2014 17:19:12 -0800
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <20140305230153.6218.1125880239.divmod.xquotient.236@top>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
 <20140305230153.6218.1125880239.divmod.xquotient.236@top>
Message-ID: <85377069-DD81-40A3-B2A0-CA5A8B0D515E@twistedmatrix.com>


On Mar 5, 2014, at 3:01 PM, exarkun at twistedmatrix.com wrote:

> On 10:08 pm, glyph at twistedmatrix.com wrote:
>> On Mar 5, 2014, at 9:23 AM, Phil Mayers <p.mayers at imperial.ac.uk> wrote:
>>> All,
>>> 
>>> I'm having a head-poundingly annoying time getting detailed exception info out of the new Agent stuff.
>>> 
>>> Specifically, I have some bug inside my code somewhere, but I can't get decent tracebacks out because _WrapperException is the base class for RequestGenerationFailed, but there's no public (non-underscore- prefixed) way to get that.
>>> 
>>> It seems like an API error; how is one supposed to err.track/check other than importing a non-public API?
>> 
>> You're right; this is a bug in Agent.
>> 
>> <http://twistedmatrix.com/trac/ticket/5310>
> 
> Happy Ash Wednesday - https://twistedmatrix.com/trac/ticket/5310#comment:5

I've reviewed it, so, at least the public alias part should be fixed soon :).

-glyph

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140305/8811a1be/attachment-0002.bin>

From exarkun at twistedmatrix.com  Thu Mar  6 04:52:28 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 06 Mar 2014 11:52:28 -0000
Subject: [Twisted-Python] t.w.client.Agent exceptions
In-Reply-To: <5317AA01.60407@imperial.ac.uk>
References: <53175DA5.7090107@imperial.ac.uk>
 <92050163-3888-4C57-955F-9A361D14E3E2@twistedmatrix.com>
 <5317AA01.60407@imperial.ac.uk>
Message-ID: <20140306115228.6218.1771387721.divmod.xquotient.240@top>

On 5 Mar, 10:49 pm, p.mayers at imperial.ac.uk wrote:
>On 05/03/2014 22:08, Glyph Lefkowitz wrote:
>>You're right; this is a bug in Agent.
>>
>><http://twistedmatrix.com/trac/ticket/5310>
>
>And it must be said, really quite an infuriating one ;o)
>>
>>For right now, yes, you're going to have to import some crappy private
>>APIs.  Any chance I could convince you to submit some fixes to that
>>ticket so we won't have to do that in the future? :-)
>
>I'll have a look tomorrow; though it seems like testing that would be 
>tricky, and pointers to existing examples of how to test that Failure- 
>with- traceback is being raised?
>
>Do we know what the rationale for _WrapperException was? The only place 
>it's used, it wraps a single exception, which is "singularly" pointless 
>(ha ha marvel at my comedy).

I think you overlooked some of its uses.  For example, ResponseFailed is 
a _WrapperException subclass and it is constructed with two failures in 
HTTP11ClientProtocol.connectionLost.

Jean-Paul



From yangyouxiu at gmail.com  Fri Mar  7 00:42:38 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Fri, 7 Mar 2014 15:42:38 +0800
Subject: [Twisted-Python] Using DeferredList,
	on the remote method get parameter of None type?
References: <2014030522351363970510@gmail.com>, 
 <20140305150047.6218.1060392688.divmod.xquotient.232@top>
Message-ID: <2014030715423486591612@gmail.com>


Thank you very much.
I got it, I changed it to use  a defer object, not deferredlist

From: exarkun
Date: 2014-03-05 23:00
To: Twisted general discussion
Subject: Re: [Twisted-Python] Using DeferredList, on the remote method get parameter of None type?
On 02:35 pm, yangyouxiu at gmail.com wrote:
>
>When developing server-client software, on the client i call the method 
>getTrafficDate, but on the server end, i got nio is 
>None(d2=d.addCallback(lambda object: 
>object.callRemote("getNIOTrafficInfo", node, nio)))
>,so, what's the key point?
>
>[snip]
>        for interface in interfaces:
>            nio= 
>self.interfacenio_dict[node]['interfaceinfo'][interface]
>            if nio is not None:
>                if 'nio_tap' in nio or 'NIO_NF_tap' in nio:
>                    d= globals.perspective.callRemote('getServerRoot')
>                    d2=d.addCallback(
>                        lambda object:
>                            object.callRemote("getNIOTrafficInfo", node, 
>nio))
>[snip]

The value of `nio` varies for each iteration of the loop.  The value of 
`nio` isn't passed to the getNIOTrafficInfo remote method until the `d` 
Deferred fires - this will almost certainly be only after the loop 
finishes (since it depends on network traffic which will only happen 
after this method returns).

So all of the remote calls will be made with whatever value `nio` has on 
the last iteration of the loop.  This is just how scopes work in Python. 
Consider this simplified example:
>>>def foo():
...     functions = []
...     for i in range(3):
...         functions.append(lambda: i)
...     for f in functions:
...         print f()
...
>>>foo()
2
2
2
>>>

Jean-Paul

_______________________________________________
Twisted-Python mailing list
Twisted-Python at twistedmatrix.com
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140307/99e1ac35/attachment-0002.html>

From dstainton415 at gmail.com  Sat Mar  8 03:02:31 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 8 Mar 2014 10:02:31 +0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
Message-ID: <20140308100231.GA4266@googlemail.com>



Greetings,

My goal is to get Brian Warner's foolscap library ported to Twisted
endpoints instead of the older Twisted api interfaces it currently
uses (ClientFactory and IConnector).

This effort has been documented in foolscap trac ticket #203:
http://foolscap.lothar.com/trac/ticket/203

and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P-friendly:
https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517

My question is this:

Since Foolscap's TubConnectorClientFactory does rely
on clientConnectionFailed... What is the equivalent to this for the new
interfaces?

I have tried to braindump all my foolscap twisted endpoint thoughts to
foolscap trac ticket #203 :
http://foolscap.lothar.com/trac/ticket/203#comment:30
http://foolscap.lothar.com/trac/ticket/203#comment:31

If we look at line 1223 of
https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
(at 0395476c7cb154f925d67abf6858a8200126352b)

we see that there's this TubConnectorClientFactory:
class TubConnectorClientFactory(protocol.ClientFactory, object):

and later at line 1384 it is used with connectTCP like this:
            f = TubConnectorClientFactory(self, host, lp)
            c = reactor.connectTCP(host, port, f)

In my endpoints2 branch
(https://github.com/david415/foolscap/tree/endpoints2)
I changed it to:
class TubConnectorFactory(protocol.Factory, object):

I suspected that TubConnector?'s clientConnectionFailed doesn't get
called and then I found a relevent quaote this twisted doc:
https://twistedmatrix.com/documents/current/core/howto/endpoints.html

here's the quote:
"""Note: If you've used ClientFactory before, keep in mind that the
connect method takes a Factory, not a ClientFactory. Even if you pass a ClientFactory to
endpoint.connect, its clientConnectionFailed and clientConnectionLost
methods will not be called."""

Currently foolscap's extensive collection of unittests are exercising
bugs in my code when I try to port foolscap to twisted
endpoints.

foolscap$ trial foolscap.test.test_appserver.RunCommand.test_run
foolscap.test.test_appserver
  RunCommand
    test_run ...                                                        [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
Failure: foolscap.tokens.NegotiationError: no connection established within client timeout

foolscap.test.test_appserver.RunCommand.test_run
-------------------------------------------------------------------------------
Ran 1 tests in 60.576s

FAILED (errors=1)
foolscap$ 



Cheers!

David Stainton


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Digital signature
URL: </pipermail/twisted-python/attachments/20140308/55d9921f/attachment.sig>

From exarkun at twistedmatrix.com  Sat Mar  8 05:52:58 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 08 Mar 2014 12:52:58 -0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
In-Reply-To: <20140308100231.GA4266@googlemail.com>
References: <20140308100231.GA4266@googlemail.com>
Message-ID: <20140308125258.6218.939246145.divmod.xquotient.266@top>

On 10:02 am, dstainton415 at gmail.com wrote:
>
>
>Greetings,
>
>My goal is to get Brian Warner's foolscap library ported to Twisted
>endpoints instead of the older Twisted api interfaces it currently
>uses (ClientFactory and IConnector).
>
>This effort has been documented in foolscap trac ticket #203:
>http://foolscap.lothar.com/trac/ticket/203
>
>and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P- 
>friendly:
>https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
>
>My question is this:
>
>Since Foolscap's TubConnectorClientFactory does rely
>on clientConnectionFailed... What is the equivalent to this for the new
>interfaces?
>
>I have tried to braindump all my foolscap twisted endpoint thoughts to
>foolscap trac ticket #203 :
>http://foolscap.lothar.com/trac/ticket/203#comment:30
>http://foolscap.lothar.com/trac/ticket/203#comment:31
>
>If we look at line 1223 of
>https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
>(at 0395476c7cb154f925d67abf6858a8200126352b)
>
>we see that there's this TubConnectorClientFactory:
>class TubConnectorClientFactory(protocol.ClientFactory, object):
>
>and later at line 1384 it is used with connectTCP like this:
>            f = TubConnectorClientFactory(self, host, lp)
>            c = reactor.connectTCP(host, port, f)

It looks like TubConnector is the primary intended user of 
TubConnectorClientFactory.  In this case, you can simply move the logic 
from TubConnector.clientConnectionFailed to an errback on the Deferred 
returned by IStreamClientEndpoint.connect.  Or you can leave it where it 
is an just make clientConnectionFailed be that errback.

For example:

    f = TubConnectorClientFactory(self, host, lp)
    d = endpoint.connect(f)
    d.addErrback(self.clientConnectionFailed)

(removing the connector argument from clientConnectionFailed, of 
course).

You may want to apply a similar transformation to the *success* case 
here as well.  That is, move the code that initiates protocol actions on 
the connection to a callback on this Deferred instead of automatically 
starting those actions in buildProtocol (this gives greater flexibility 
in how the protocol is used - if you want to change the details of 
initialization you can do so by using a different callback on the 
endpoint's Deferred instead of having to mess around with the factory or 
the protocol to disable this stuff).

Jean-Paul



From dstainton415 at gmail.com  Sat Mar  8 06:29:32 2014
From: dstainton415 at gmail.com (David Stainton)
Date: Sat, 8 Mar 2014 13:29:32 +0000
Subject: [Twisted-Python] improving foolscap's use of Twisted
In-Reply-To: <20140308125258.6218.939246145.divmod.xquotient.266@top>
References: <20140308100231.GA4266@googlemail.com>
 <20140308125258.6218.939246145.divmod.xquotient.266@top>
Message-ID: <CAFN1edq5o=q+OxEUgQAzg_tL_yhsgwctou-cZvuKAyvyJmHuLQ@mail.gmail.com>

Thanks! That's just what I needed.

On Sat, Mar 8, 2014 at 12:52 PM,  <exarkun at twistedmatrix.com> wrote:
> On 10:02 am, dstainton415 at gmail.com wrote:
>>
>>
>>
>> Greetings,
>>
>> My goal is to get Brian Warner's foolscap library ported to Twisted
>> endpoints instead of the older Twisted api interfaces it currently
>> uses (ClientFactory and IConnector).
>>
>> This effort has been documented in foolscap trac ticket #203:
>> http://foolscap.lothar.com/trac/ticket/203
>>
>> and also part of Tahoe-LAFS trac ticket #517 - make tahoe Tor- and I2P-
>> friendly:
>> https://tahoe-lafs.org/trac/tahoe-lafs/ticket/517
>>
>> My question is this:
>>
>> Since Foolscap's TubConnectorClientFactory does rely
>> on clientConnectionFailed... What is the equivalent to this for the new
>> interfaces?
>>
>> I have tried to braindump all my foolscap twisted endpoint thoughts to
>> foolscap trac ticket #203 :
>> http://foolscap.lothar.com/trac/ticket/203#comment:30
>> http://foolscap.lothar.com/trac/ticket/203#comment:31
>>
>> If we look at line 1223 of
>> https://github.com/warner/foolscap/blob/master/foolscap/negotiate.py
>> (at 0395476c7cb154f925d67abf6858a8200126352b)
>>
>> we see that there's this TubConnectorClientFactory:
>> class TubConnectorClientFactory(protocol.ClientFactory, object):
>>
>> and later at line 1384 it is used with connectTCP like this:
>>            f = TubConnectorClientFactory(self, host, lp)
>>            c = reactor.connectTCP(host, port, f)
>
>
> It looks like TubConnector is the primary intended user of
> TubConnectorClientFactory.  In this case, you can simply move the logic from
> TubConnector.clientConnectionFailed to an errback on the Deferred returned
> by IStreamClientEndpoint.connect.  Or you can leave it where it is an just
> make clientConnectionFailed be that errback.
>
> For example:
>
>
>    f = TubConnectorClientFactory(self, host, lp)
>    d = endpoint.connect(f)
>    d.addErrback(self.clientConnectionFailed)
>
> (removing the connector argument from clientConnectionFailed, of course).
>
> You may want to apply a similar transformation to the *success* case here as
> well.  That is, move the code that initiates protocol actions on the
> connection to a callback on this Deferred instead of automatically starting
> those actions in buildProtocol (this gives greater flexibility in how the
> protocol is used - if you want to change the details of initialization you
> can do so by using a different callback on the endpoint's Deferred instead
> of having to mess around with the factory or the protocol to disable this
> stuff).
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From trac at twistedmatrix.com  Sun Mar  9 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 09 Mar 2014 07:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1394348715.59.518640304335938331@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140309/de1afb6d/attachment-0002.html>

From burak at nehbit.net  Sun Mar  9 01:31:33 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Sun, 9 Mar 2014 00:31:33 -0800
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <20140303121926.6218.526328592.divmod.xquotient.173@top>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
Message-ID: <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>

I wonder why you decided to use Ampoule to manage a single child process 
(that apparently shouldn't be restarted when it exits)? 
Mostly because Ampoule handles quite a bit of stuff behind the scenes. I didn’t want to use it per se—to not add extra complexity to the stack, chiefly—but it was the only way I could get it to work. It also gives me a very nice AMP interface which I am already familiar with, and that allows me to communicate with my frontend very liberally.

I think Ampoule's purpose is to make it easy to run many processes and 
automatically restart them from time to time. 
I agree. Though it’s also very useful as an drop–in implementation of a Twisted spawnProcess for one single other process.

It sounds like the basic process support included in Twisted, 
reactor.spawnProcess, could address your requirements. 
I have just found your answer here: 

https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess

which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess. 

Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted’s logging module seem to kick in too late. 

Best,

Burak


From: exarkun at twistedmatrix.com exarkun at twistedmatrix.com
Reply: Twisted general discussion twisted-python at twistedmatrix.com
Date: March 3, 2014 at 4:21:42 AM
To: Twisted general discussion twisted-python at twistedmatrix.com
Subject:  Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite Zombie Processes  
On 06:34 am, burak at nehbit.net wrote:  
>Hi everyone,  
>  
>It seems that I ran into a rather inextricable problem, would love to  
>see what you think.  
>  
>As you might remember, I have been working on a distributed, anonymous  
>community platform(s) called Aether ( www.getaether.net ) which is  
>largely a Twisted codebase in its networking system. After releasing  
>the app, I ended up with performance problems, in some part due to my  
>programming incompetence, and some part because I was also using it to  
>drive a GUI with qtreactor, which ran its own Javascript interpreter.  
>  
>The codebase is largely cleaned up now and the current architecture of  
>the program involves two processes that talk to each other via Ampoule:  
>a default reactor core, which handles network events, and a qtreactor  
>which is solely concerned with the user interface. It works very well.  
>Stress induced by networking does not slow down the UI and vice versa.  

I wonder why you decided to use Ampoule to manage a single child process  
(that apparently shouldn't be restarted when it exits)?  

I think Ampoule's purpose is to make it easy to run many processes and  
automatically restart them from time to time.  

It sounds like the basic process support included in Twisted,  
reactor.spawnProcess, could address your requirements.  

Jean-Paul  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140309/19d923e2/attachment-0002.html>

From exarkun at twistedmatrix.com  Sun Mar  9 16:04:44 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Mar 2014 22:04:44 -0000
Subject: [Twisted-Python] Work around pyflakes errors
In-Reply-To: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
References: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
Message-ID: <20140309220444.6218.2137738512.divmod.xquotient.268@top>

On 3 Mar, 04:59 pm, adi at roiban.ro wrote:
>I would like to see twisted code base free of pyflakes errors.
>
>In this way, when someone sees pyflakes errors in his/her branch will 
>know
>for sure that those errors are generated by changes in that branch. 
>Also
>developers could run pyflakes on local computers, before sending a 
>patch
>and have instance feedback for pyflakes errors.
>
>One problem is that pyflakes will complain about unused imports.
>
>JP suggested a fix for that and I have created a ticket:
>https://twistedmatrix.com/trac/ticket/7014
>
>I am not sure how the suggested requireModule("OpenSSL") style API 
>should
>work, but in the same comment, JP suggested to use 'namedAny' to get 
>the
>same effect as the unused import.
>
>My problem with namedAny is that it does not raise ImportError ... but
>rather ModuleNotFound or ObjectNotFound.
>
>But I found 'namedModule' which raise ImportError
>
>Here is an example of namedModule usage which should work around 
>pyflakes
>errors.
>
>Old code:
>
>try:
>    import threading
>    threading  # Silence the linter.
>except ImportError:
>    self.assertFalse(Platform().supportsThreads())
>
>New code
>
>try:
>    namedModule('threading')
>except ImportError:
>    self.assertFalse(Platform().supportsThreads())
>
>What do you think, is namedModule usage acceptable or we should work at
>implementing the requireModule("OpenSSL") API?

Cool.  I always forget about the other APIs since `namedAny` works for 
anything. :)  `namedModule` seems like a great fit here.

Jean-Paul



From adi at roiban.ro  Mon Mar 10 03:42:03 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 10 Mar 2014 11:42:03 +0200
Subject: [Twisted-Python] Work around pyflakes errors
In-Reply-To: <20140309220444.6218.2137738512.divmod.xquotient.268@top>
References: <CAFycZ9cs53_Ndv385+Px6ejS5OqmnMKwX=BFr=DSaHfg2Degtw@mail.gmail.com>
 <20140309220444.6218.2137738512.divmod.xquotient.268@top>
Message-ID: <CAFycZ9fdhXdfTHFRy9YCcOOb=wmxfEbi=gQM7ke72DEtvx3SXA@mail.gmail.com>

On 10 March 2014 00:04,  <exarkun at twistedmatrix.com> wrote:
> Cool.  I always forget about the other APIs since `namedAny` works for
> anything. :)  `namedModule` seems like a great fit here.
>
> Jean-Paul

I have implemented a requireModule helper to handle the try/except
ImporError code which would create a lot of code duplication when used
with `namedAny`

https://twistedmatrix.com/trac/ticket/7014

If 7014 is accepted I could go and update existing pyflakes reviews to
use the new code.

-- 
Adi Roiban



From glyph at twistedmatrix.com  Mon Mar 10 12:36:02 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Mon, 10 Mar 2014 11:36:02 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
In-Reply-To: <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
Message-ID: <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>


On Mar 9, 2014, at 12:31 AM, Burak Nehbit <burak at nehbit.net> wrote:
> I agree. Though it’s also very useful as an drop–in implementation of a Twisted spawnProcess for one single other process.
> 
spawnProcess is somewhat low-level.  It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...

>> It sounds like the basic process support included in Twisted, 
>> reactor.spawnProcess, could address your requirements. 
> 
> I have just found your answer here: 
> 
> https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess
> 
> which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess. 
> 
> Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted’s logging module seem to kick in too late. 
> 
Twisted's logging typically gets initialized after all modules are imported.  A tool like Ampoule really ought to set up logging as early as possible in its child, and handle the case where it's not getting set up on the parent side.

The important thing to do is to make sure you have an errReceived callback that actually prints or logs the stderr it receives; there's likely a traceback in there which you may have missed if the process is just crashing.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140310/43c33bb3/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140310/43c33bb3/attachment-0002.bin>

From chris at simplistix.co.uk  Tue Mar 11 17:04:44 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Tue, 11 Mar 2014 23:04:44 +0000
Subject: [Twisted-Python] ping?
Message-ID: <531F968C.1000201@simplistix.co.uk>

Sorry, not sure mail is getting through from the list...

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From glyph at twistedmatrix.com  Tue Mar 11 18:23:24 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Tue, 11 Mar 2014 17:23:24 -0700
Subject: [Twisted-Python] ping?
In-Reply-To: <531F968C.1000201@simplistix.co.uk>
References: <531F968C.1000201@simplistix.co.uk>
Message-ID: <59AE262C-6643-4D32-921E-95E15AE6AF6E@twistedmatrix.com>

On Mar 11, 2014, at 4:04 PM, Chris Withers <chris at simplistix.co.uk> wrote:

> Sorry, not sure mail is getting through from the list...
I got this one.  Should we be looking for something in the moderation queue?

-g

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140311/3356467b/attachment-0002.bin>

From burak at nehbit.net  Tue Mar 11 22:04:22 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Tue, 11 Mar 2014 21:04:22 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
Message-ID: <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>

spawnProcess is somewhat low-level.  It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...


Ampoule is very close. Any chance of polishing and absorbing it into Twisted? Parallel computing is the weakest point of entire Python ecosystem, and Ampoule is so very close to the perfection, unless, like me, you end up getting stuck on a corner case. 



For this, I am almost entirely sure that the imports are failing, most probably because it’s trying to import the system python, not the one PyInstaller packages up. I have no idea how to fix it though. I’m feeling rather guilty about it, Aether v1.1 is a vastly improved version, but  I can’t package it, so the release is off for a while. For personal reasons (Moved to SF, started a new full–time job) I am unlikely to find enough time to debug such a complex issue in the near future, while the code is fading from my memory and rotting in drive. Such a shame.

 

Best,

Burak






From: Glyph Lefkowitz glyph at twistedmatrix.com
Reply: Twisted general discussion twisted-python at twistedmatrix.com
Date: March 10, 2014 at 11:39:36 AM
To: Twisted general discussion twisted-python at twistedmatrix.com
Subject:  Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite	Zombie Processes  


On Mar 9, 2014, at 12:31 AM, Burak Nehbit <burak at nehbit.net> wrote:
I agree. Though it’s also very useful as an drop–in implementation of a Twisted spawnProcess for one single other process.

spawnProcess is somewhat low-level.  It would be very nice indeed if Twisted had some sort of Service object you could easily use for spawning worker processes, along the lines of Ampoule, that would take care of all the platform-specific nonsense of setting up communication with subprocesses, spawning them, monitoring them, figuring out the right Python to spawn, the right environment variables to get sys.path correct, and other things, such as...

It sounds like the basic process support included in Twisted, 
reactor.spawnProcess, could address your requirements. 
I have just found your answer here: 

https://stackoverflow.com/questions/6678763/simple-example-with-spawnprocess

which seems useful. If nothing else works, I will try to reduce complexity by converting this to bare spawnProcess. 

Any ideas on what might be going wrong in my current stack? After all, processes being repeatedly created is just a symptom of something going wrong in the process very early, so ampoule tries to spawn another one. I am mainly looking to find a way to see the exception and where it happens. Twisted’s logging module seem to kick in too late. 

Twisted's logging typically gets initialized after all modules are imported.  A tool like Ampoule really ought to set up logging as early as possible in its child, and handle the case where it's not getting set up on the parent side.

The important thing to do is to make sure you have an errReceived callback that actually prints or logs the stderr it receives; there's likely a traceback in there which you may have missed if the process is just crashing.

-glyph
- smime.p7s, 6 KB
_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140311/10955440/attachment-0002.html>

From chris at simplistix.co.uk  Wed Mar 12 01:28:23 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 07:28:23 +0000
Subject: [Twisted-Python] which async framework?
Message-ID: <53200C97.40908@simplistix.co.uk>

Hi All,

Apologies for the cross-post, but this is a "which framework" question 
so seemed the most constructive way. Not interested in religious 
debates, just trying to pick the best tool for the job and didn't get 
much of a useful response from python-list...

So, I see python now has a plethora of async frameworks and I need to 
try and pick one to use from:

- asyncio/tulip
- tornado
- twisted

 From my side, I'm looking to experimentally build a network testing 
tool that will need to speak a fair few protocols, both classic tcp and 
multicast-based, and have a web api living on top of it that most likely 
will have a websocket for pumping data to the browser. It'll also need 
to write out JUnit-compatible xml results, but that's like the easiest 
bit ;-)

I'd like to be able to serve the rest of the web api using a pyramid 
wsgi app if possible, and I'd like to be able to write the things that 
process requests in and validation out in a synchronous fashion, most 
likely spinning off a thread for each one.

The protocols are all financial (do we really not have a pure-python FIX 
library?!) but none are likely to have existing python implementations.

How should I pick between the options? What would people recommend and why?

cheers,

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
            - http://www.simplistix.co.uk



From _ at lvh.io  Wed Mar 12 02:53:07 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Wed, 12 Mar 2014 09:53:07 +0100
Subject: [Twisted-Python] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>

Hi Chris,


It will probably not surprise you that I like Twisted :-)

On Wed, Mar 12, 2014 at 8:28 AM, Chris Withers <chris at simplistix.co.uk>wrote:

> So, I see python now has a plethora of async frameworks and I need to try
> and pick one to use from:
>
> - asyncio/tulip
> - tornado
> - twisted
>

Twisted has a thing called Cyclone, which I hear (but that's only hearsay)
gives you Tornado's API on top of twisted, so you get all of the stuff
below for free.


> From my side, I'm looking to experimentally build a network testing tool
> that will need to speak a fair few protocols, both classic tcp and
> multicast-based, and have a web api living on top of it that most likely
> will have a websocket for pumping data to the browser. It'll also need to
> write out JUnit-compatible xml results, but that's like the easiest bit ;-)
>

I don't know which protocols you are interested in specifically; later on
in the e-mail you mention that it's *probably* not already extant. Twisted
comes with a huge number of protocols already implemented. It has TCP
support (duh) as well as an interface for UDP multicast.

Twisted has a third party project called txsockjs which works excellently,
both by itself and in the context of other (HTTP) resources. sockjs is a
protocol which is basically "websockets, damnit", even when the consumer is
a bad browser like IE6.


> I'd like to be able to serve the rest of the web api using a pyramid wsgi
> app if possible, and I'd like to be able to write the things that process
> requests in and validation out in a synchronous fashion, most likely
> spinning off a thread for each one.
>

Twisted comes with a threadpool-backed WSGI server. (When I say
threadpool-backed I mean that the WSGI requests are handled in threads; the
IO itself of course comes from the Twisted reactor).


> The protocols are all financial (do we really not have a pure-python FIX
> library?!) but none are likely to have existing python implementations.
>

I find twisted to be a great tool for writing protocol implementations. I
have written tools for querying all sorts of gnarly proprietary protocols
over all sorts of gnarly transports (packet radio; it's totally a thing),
and more recently for doing crazy things like multiplexing stream
transports over existing RPC protocols. (Like, you see a local port come
up, and that actually creates a virtual stream connection over an existing
RPC thing to some virtual server on the other end of the wire:
https://www.youtube.com/watch?v=W_jEIvugwes).

Twisted has had so many people write so many protocols in it that also the
testing tools (MemoryReactor, StringTransport) are great. Especially if you
are writing something very close to a wire protocol you will undoubtedly
enjoy those amenities. There's also tons of composable things for receiving
delimited lines, nestrings, etc. It's hard to tell what you will be looking
for since I don't know details about your protocol, but having written more
than a few protocol implementations I'm going to wager a guess and say
Twisted has it or a third party thing for twisted has it.

Even though I mostly write Clojure now, I still write my networking stuff
in Twisted. Macros are cool. Eleven years worth of battle-tested code is
better.

That said, tulip is nice in that you can also write protocol
implementations that will look similar :-)


> How should I pick between the options? What would people recommend and why?
>

Twisted, emphatically and without reservation, for all the above reasons.
It's stable. All the stuff you need has been tried and tested extensively
in production. It runs on PyPy, and usually a damn sight faster than on
CPython, too.

A common criticism of Twisted is that it "takes over" your codebase. I am
speaking at PyCon in about a month to demonstrate that that isn't true. (It
just looks that way, because once people use it, they don't want to go
back... ;-))

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/309d5ae9/attachment-0002.html>

From luca.sbardella at gmail.com  Wed Mar 12 03:41:57 2014
From: luca.sbardella at gmail.com (Luca Sbardella)
Date: Wed, 12 Mar 2014 09:41:57 +0000
Subject: [Twisted-Python] [python-tulip] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <CAF94-jZao5uc51CdYO0EQx7DMR=cYk8+VMrC_r6psMHNrdY4mQ@mail.gmail.com>

On 12 March 2014 07:28, Chris Withers <chris at simplistix.co.uk> wrote:
>
>
> So, I see python now has a plethora of async frameworks and I need to try
> and pick one to use from:
>
> - asyncio/tulip
> - tornado
> - twisted
>
> From my side, I'm looking to experimentally build a network testing tool
> that will need to speak a fair few protocols, both classic tcp and
> multicast-based, and have a web api living on top of it that most likely
> will have a websocket for pumping data to the browser. It'll also need to
> write out JUnit-compatible xml results, but that's like the easiest bit ;-)
>
> I'd like to be able to serve the rest of the web api using a pyramid wsgi
> app if possible, and I'd like to be able to write the things that process
> requests in and validation out in a synchronous fashion, most likely
> spinning off a thread for each one.
>

Tornado is a web-framework, if you are going to use pyramid for handling
wsgi requests asyncio or twisted are probably a better solution. They can
handle your synchronous wsgi responses via the event loop executor (a
thread pool).


>
> The protocols are all financial (do we really not have a pure-python FIX
> library?!) but none are likely to have existing python implementations.
>

Both asyncio and twisted offer an extensive, somehow similar, API for
writing protocols, TCP and UDP.


> How should I pick between the options? What would people recommend and why?
>
>
If you are using python 3.3 I would strongly recommend asyncio, it has a
clean and unintrusive API and, importantly, it is part of the standard
library (in python 3.4).
If you are using python 2 I would still recommend it, the trollius project
has backported the library (although there are some important differences).
Pulsar, is a server side library I maintain which is now fully based on
asyncio, works on python 3 & 2, and does more or less what you are looking
for.
Of course, twisted is more tested and has a longer history, but if you are
forward looking asyncio might be a better bet.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/861bc31a/attachment-0002.html>

From exarkun at twistedmatrix.com  Wed Mar 12 05:32:05 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 12 Mar 2014 11:32:05 -0000
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
Message-ID: <20140312113205.6218.824356880.divmod.xquotient.288@top>

On 04:04 am, burak at nehbit.net wrote:
>spawnProcess is somewhat low-level.  It would be very nice indeed if 
>Twisted had some sort of Service object you could easily use for 
>spawning worker processes, along the lines of Ampoule, that would take 
>care of all the platform-specific nonsense of setting up communication 
>with subprocesses, spawning them, monitoring them, figuring out the 
>right Python to spawn, the right environment variables to get sys.path 
>correct, and other things, such as...
>
>Ampoule is very close. Any chance of polishing and absorbing it into 
>Twisted? Parallel computing is the weakest point of entire Python 
>ecosystem, and Ampoule is so very close to the perfection, unless, like 
>me, you end up getting stuck on a corner case.

It sure would be great if someone took this on.  Twisted would welcome 
better high-level tools that build on spawnProcess (apropos, Twisted 
would also welcome a better low-level tool to replace spawnProcess).

Considering the amount of maintenance Ampoule seems to have gotten over 
the last four years (~1 commit) I doubt you can count on someone else 
picking this up just because it would be great, though.

Jean-Paul
>
>For this, I am almost entirely sure that the imports are failing, most 
>probably because it’s trying to import the system python, not the one 
>PyInstaller packages up. I have no idea how to fix it though. I’m 
>feeling rather guilty about it, Aether v1.1 is a vastly improved 
>version, but  I can’t package it, so the release is off for a while. 
>For personal reasons (Moved to SF, started a new full–time job) I am 
>unlikely to find enough time to debug such a complex issue in the near 
>future, while the code is fading from my memory and rotting in drive. 
>Such a shame.
>
>Best,
>
>Burak



From tobias.oberstein at tavendo.de  Wed Mar 12 06:59:42 2014
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Wed, 12 Mar 2014 05:59:42 -0700
Subject: [Twisted-Python] which async framework?
In-Reply-To: <53200C97.40908@simplistix.co.uk>
References: <53200C97.40908@simplistix.co.uk>
Message-ID: <634914A010D0B943A035D226786325D44473A2BC0F@EXVMBX020-12.exch020.serverdata.net>

>  From my side, I'm looking to experimentally build a network testing tool that
> will need to speak a fair few protocols, both classic tcp and multicast-based,

Tornado is a _Web_ framework. A requirement for UDP, and multicast UDP, narrows
suitable choices to Twisted and asyncio.

Twisted is around much longer, and also has a broader focus .. lots of protocols implemented
on top of TCP/IP.

Asyncio is opiniated towards a co-routine based style. Twisted probably more towards
"classical" Deferred based style, though you can go co-routine style as well.

> and have a web api living on top of it that most likely will have a websocket
> for pumping data to the browser. It'll also need to write out JUnit-compatible

If you need WebSocket anyway, you can directly compare Twisted and asyncio programming
with these examples:

https://github.com/tavendo/AutobahnPython/tree/master/examples/twisted/websocket/echo
https://github.com/tavendo/AutobahnPython/tree/master/examples/asyncio/websocket/echo

Disclaimer: I am affiliated with that stuff.

> I'd like to be able to serve the rest of the web api using a pyramid wsgi app if

Twisted can act as a WSGI host, and that can be combined with WebSocket also (in one server,
and both services running on one port).

/Tobias



From chris at simplistix.co.uk  Wed Mar 12 16:12:33 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:12:33 +0000
Subject: [Twisted-Python] which async framework?
In-Reply-To: <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
References: <53200C97.40908@simplistix.co.uk>
 <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
Message-ID: <5320DBD1.5030600@simplistix.co.uk>

On 12/03/2014 08:53, Laurens Van Houtven wrote:
> Twisted has a thing called Cyclone, which I hear (but that's only
> hearsay) gives you Tornado's API on top of twisted, so you get all of
> the stuff below for free.
>
>      From my side, I'm looking to experimentally build a network testing
>     tool that will need to speak a fair few protocols, both classic tcp
>     and multicast-based, and have a web api living on top of it that
>     most likely will have a websocket for pumping data to the browser.
>     It'll also need to write out JUnit-compatible xml results, but
>     that's like the easiest bit ;-)
>
> I don't know which protocols you are interested in specifically;

Aiming low (insert sarcastic look here), here's the first few:

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_FIX_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_Binary_Order_Entry_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_PITCH_Specification.pdf

http://cdn.batstrading.com/resources/participant_resources/BATS_Europe_MC_PITCH_Specification.pdf

> Twisted has a third party project called txsockjs which works
> excellently, both by itself and in the context of other (HTTP)
> resources. sockjs is a protocol which is basically "websockets, damnit",
> even when the consumer is a bad browser like IE6.

Thankfully, I only have to support sane browsers...

> Twisted comes with a threadpool-backed WSGI server. (When I say
> threadpool-backed I mean that the WSGI requests are handled in threads;
> the IO itself of course comes from the Twisted reactor).

Yeah, I remember that, and I remember liking it :-)

> I find twisted to be a great tool for writing protocol implementations.
> I have written tools for querying all sorts of gnarly proprietary
> protocols over all sorts of gnarly transports (packet radio; it's
> totally a thing), and more recently for doing crazy things like
> multiplexing stream transports over existing RPC protocols. (Like, you
> see a local port come up, and that actually creates a virtual stream
> connection over an existing RPC thing to some virtual server on the
> other end of the wire: https://www.youtube.com/watch?v=W_jEIvugwes).

Cool!

> Twisted has had so many people write so many protocols in it that also
> the testing tools (MemoryReactor, StringTransport) are great. Especially
> if you are writing something very close to a wire protocol you will
> undoubtedly enjoy those amenities. There's also tons of composable
> things for receiving delimited lines, nestrings, etc. It's hard to tell
> what you will be looking for since I don't know details about your
> protocol, but having written more than a few protocol implementations
> I'm going to wager a guess and say Twisted has it or a third party thing
> for twisted has it.

Yep, certainly sounds good. I guess I have concerns about 
discoverability and making sure I'm picking the right things to use 
rather than re-implementing things when I don't need to.

What's the best way for me to find things I should be using? I guess my 
fallback position is to ask lots of clueless questions on this list and 
hope I don't annoy to many people, is that viable?

> Twisted, emphatically and without reservation, for all the above
> reasons. It's stable. All the stuff you need has been tried and tested
> extensively in production. It runs on PyPy, and usually a damn sight
> faster than on CPython, too.

Didn't know about the PyPy thing, that will be interesting if I ever hit 
performance problems...

> A common criticism of Twisted is that it "takes over" your codebase. I
> am speaking at PyCon in about a month to demonstrate that that isn't
> true. (It just looks that way, because once people use it, they don't
> want to go back... ;-))

Gutted I can't make it to PyCon this year, look forward to watching the 
video!

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From chris at simplistix.co.uk  Wed Mar 12 16:35:15 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:35:15 +0000
Subject: [Twisted-Python] git?
Message-ID: <5320E123.70003@simplistix.co.uk>

Hi All,

Is there a git mirror of the twisted repo anywhere?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From chris at simplistix.co.uk  Wed Mar 12 16:43:10 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Wed, 12 Mar 2014 22:43:10 +0000
Subject: [Twisted-Python] building offline docs
Message-ID: <5320E2FE.1020705@simplistix.co.uk>

Sorry, more questions...

Unfortunately, most of the time I have for learning and research is offline.

How can I build the docs for browsing (html) from a subversion checkout?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From radix at twistedmatrix.com  Wed Mar 12 16:43:33 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2014 17:43:33 -0500
Subject: [Twisted-Python] git?
In-Reply-To: <5320E123.70003@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
Message-ID: <etPan.5320e315.625558ec.b2b@densetsu>

Yes, it’s at

http://github.com/twisted/twisted

-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk) wrote:

Hi All,  

Is there a git mirror of the twisted repo anywhere?  

Chris  

--  
Simplistix - Content Management, Batch Processing & Python Consulting  
- http://www.simplistix.co.uk  

_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/ed886f83/attachment-0002.html>

From radix at twistedmatrix.com  Wed Mar 12 16:47:16 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Wed, 12 Mar 2014 17:47:16 -0500
Subject: [Twisted-Python] building offline docs
In-Reply-To: <5320E2FE.1020705@simplistix.co.uk>
References: <5320E2FE.1020705@simplistix.co.uk>
Message-ID: <etPan.5320e3f4.46e87ccd.b2b@densetsu>

On March 12, 2014 at 5:45:09 PM, Chris Withers (chris at simplistix.co.uk) wrote:
Sorry, more questions... 

Unfortunately, most of the time I have for learning and research is offline. 

How can I build the docs for browsing (html) from a subversion checkout? 


Twisted trunk is now a fairly standard sphinx-based project. “cd docs; make html” (assuming all the usual sphinx/twisted dependencies are available).

-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/


-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/848b5126/attachment-0002.html>

From hawkowl at atleastfornow.net  Wed Mar 12 17:36:14 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 07:36:14 +0800
Subject: [Twisted-Python] building offline docs
In-Reply-To: <etPan.5320e3f4.46e87ccd.b2b@densetsu>
References: <5320E2FE.1020705@simplistix.co.uk>
 <etPan.5320e3f4.46e87ccd.b2b@densetsu>
Message-ID: <5320EF6E.2080805@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi,

There's two kinds of docs, both of which can be built with premade
scripts.

The api docs require pydoctor, the prose requires Sphinx (1.2 or later).

Build the api docs with `./bin/admin/build-apidocs . apidocs/` and the
sphinx docs with `./bin/admin/build-docs .` - this will put them both
in the Twisted checkout, under apidocs/ and doc/ folders respectively.

- -hawkowl

On 13/03/14 06:47, Christopher Armstrong wrote:
> On March 12, 2014 at 5:45:09 PM, Chris Withers
> (chris at simplistix.co.uk) wrote: Sorry, more questions...
> 
> Unfortunately, most of the time I have for learning and research is
> offline.
> 
> How can I build the docs for browsing (html) from a subversion
> checkout?
> 
> 
> Twisted trunk is now a fairly standard sphinx-based project. “cd
> docs; make html” (assuming all the usual sphinx/twisted
> dependencies are available).
> 
> -- Christopher Armstrong http://twitter.com/radix 
> http://wordeology.com/
> 
> 
> 
> 
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIO9uAAoJECMItHnTkkoReq0H/3r0AeEHT4pvsrXZ2jzVsE3U
eeKjsjpcu2JTQzyHrEeFpS/zjr0FzKzoVgt7FUZTp30YwgGA3+7VDiLCYs/zOneA
TPq/ySFpqmu/5J6EQqiq90fRhF30dMNN+bWLKAysPOqHrNiVmyy9uc2IsdVNnr68
/vNV96XMfxan3TJMEIX38v8VTTc56fcWHFPCighuplXhTaqcyShvLWbgWwVemAS+
VTRrTAAbCiEz9TvNnNsKl+9ryjwe+G6mRSibcE1Haez8PK+Ar48hfEjPia+7soHm
rPUjk5N2MSgFAn9oczp8wyI2pKX61oHxZfJPkF9UNnzsn3eTpHI1A2GH+uzxVTc=
=G9ar
-----END PGP SIGNATURE-----



From glyph at twistedmatrix.com  Wed Mar 12 17:45:15 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2014 16:45:15 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
	Zombie Processes
In-Reply-To: <20140312113205.6218.824356880.divmod.xquotient.288@top>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
 <20140312113205.6218.824356880.divmod.xquotient.288@top>
Message-ID: <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>


On Mar 12, 2014, at 4:32 AM, exarkun at twistedmatrix.com wrote:

> Considering the amount of maintenance Ampoule seems to have gotten over the last four years (~1 commit) I doubt you can count on someone else picking this up just because it would be great, though.

The licenses are compatible and the maintainer is amenable to the idea though, so if you (and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

The one caveat I will give you is that Ampoule is probably not quite good enough as-is.  It's been a while, but I definitely remember discussing some of its deficiencies with people who had used it; you will probably get requests to change stuff in code review.  That's OK though, that's the whole point of code review.  This actually means that the fact that it's unmaintained is a good thing - not a lot of duplication of effort to improve it :).

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/98d55703/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140312/98d55703/attachment-0002.bin>

From glyph at twistedmatrix.com  Wed Mar 12 17:52:22 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Wed, 12 Mar 2014 16:52:22 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5320e315.625558ec.b2b@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
Message-ID: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>

On Mar 12, 2014, at 3:43 PM, Christopher Armstrong <radix at twistedmatrix.com> wrote:

> On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk) wrote:
>> Hi All, 
>> 
>> Is there a git mirror of the twisted repo anywhere? 
>> 
> Yes, it’s at
> 
> http://github.com/twisted/twisted

Also at https://code.twistedmatrix.com/git/Twisted.

However, if you actually want to use this mirror to work on Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some useful information.

Hope that helps!

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140312/12fd78f8/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140312/12fd78f8/attachment-0002.bin>

From chris at simplistix.co.uk  Thu Mar 13 00:53:45 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 13 Mar 2014 06:53:45 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
Message-ID: <532155F9.5000301@simplistix.co.uk>

On 12/03/2014 23:52, Glyph Lefkowitz wrote:
> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong
> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> wrote:
>
>> On March 12, 2014 at 5:39:36 PM, Chris Withers (chris at simplistix.co.uk
>> <mailto:chris at simplistix.co.uk>) wrote:
>>> Hi All,
>>>
>>> Is there a git mirror of the twisted repo anywhere?
>>>
>> Yes, it’s at
>>
>> http://github.com/twisted/twisted
>
> Also at https://code.twistedmatrix.com/git/Twisted.
>
> However, if you actually want to /use/ this mirror to work on Twisted,
> <https://twistedmatrix.com/trac/wiki/GitMirror> has some useful information.

Not to be too contentious, but when do you reckon you guys will switch 
the main repo to git?

The difficulty of using svn for the main repo is that it only has a 
subset of the features of a dvcs such as git.

The difficulty of using git for the main repo is if you have people who 
still want to interact via svn. Well, it would be if you didn't use github:

https://help.github.com/articles/support-for-subversion-clients

I do wonder how many people know about the above feature, it blows my 
mind a bit that it's actually there in the first place...

Anyway, just a thought :-)

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
            - http://www.simplistix.co.uk



From solipsis at pitrou.net  Thu Mar 13 01:11:28 2014
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 13 Mar 2014 08:11:28 +0100
Subject: [Twisted-Python] which async framework?
References: <53200C97.40908@simplistix.co.uk>
 <CAE_Hg6bpVc47Dqrs7cit4ZrVmBGJX9NUs=CGY9U9Ev_iEN5_uQ@mail.gmail.com>
Message-ID: <20140313081128.7f3b7e5c@fsol>

On Wed, 12 Mar 2014 09:53:07 +0100
Laurens Van Houtven <_ at lvh.io> wrote:
> 
> A common criticism of Twisted is that it "takes over" your codebase. I am
> speaking at PyCon in about a month to demonstrate that that isn't true. (It
> just looks that way, because once people use it, they don't want to go
> back... ;-))

Or sometimes they do.

Regards

Antoine.





From hawkowl at atleastfornow.net  Thu Mar 13 01:14:53 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 15:14:53 +0800
Subject: [Twisted-Python] git?
In-Reply-To: <532155F9.5000301@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
Message-ID: <53215AED.2070800@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Chris,

I can assure you this topic has come up many times - and unless we
have volunteers that can manage to get the several thousand tickets
with comment history into GitHub (which I'm sure that nobody wants to
get tied to when you have a workflow already), without losing
anything, then it's most likely Twisted is sticking with svn and trac.

Git has svn support - see `git svn`. I have merged several branches
with it, and it works great. Use that instead, if you get commit access :)

- -hawkowl

On 13/03/14 14:53, Chris Withers wrote:
> On 12/03/2014 23:52, Glyph Lefkowitz wrote:
>> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>>
>> wrote:
>> 
>>> On March 12, 2014 at 5:39:36 PM, Chris Withers
>>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>)
>>> wrote:
>>>> Hi All,
>>>> 
>>>> Is there a git mirror of the twisted repo anywhere?
>>>> 
>>> Yes, it’s at
>>> 
>>> http://github.com/twisted/twisted
>> 
>> Also at https://code.twistedmatrix.com/git/Twisted.
>> 
>> However, if you actually want to /use/ this mirror to work on
>> Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some
>> useful information.
> 
> Not to be too contentious, but when do you reckon you guys will
> switch the main repo to git?
> 
> The difficulty of using svn for the main repo is that it only has
> a subset of the features of a dvcs such as git.
> 
> The difficulty of using git for the main repo is if you have people
> who still want to interact via svn. Well, it would be if you didn't
> use github:
> 
> https://help.github.com/articles/support-for-subversion-clients
> 
> I do wonder how many people know about the above feature, it blows
> my mind a bit that it's actually there in the first place...
> 
> Anyway, just a thought :-)
> 
> Chris
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIVrtAAoJECMItHnTkkoRUa0H/3+mcWQLWhWLuGlo9pfNLTwb
WWX7F/P2sVVfKc0r5o07/7rOpuPYrKMsnjzxU6O8qf4/aKQOeD4LdVrOUww56v4e
ybgnoa+InXIYDMJJ5jm6X0VX5Upw1GhSaaJCbv8mjIs66mE70/Xu9pYlVcxw6lJP
OIK4nQmYMXwXq6yjSiSZO+qnPl+M79/BCI3kutC2N+L9rxCJQR8D7Zy6OFwdnlLA
XSZx3JcAvgROQs6q+1m2HqJS+uhq4MPKoj/BgSUYkxAIk/MVKvvXiCk/OYk1GaBX
iuFLH3DU5LLBf89518WW2xvWzMUIVpRiIRzei0U4POOOobgO7n6kiZESsmstZs4=
=3lxd
-----END PGP SIGNATURE-----



From itamar at itamarst.org  Thu Mar 13 04:54:44 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Thu, 13 Mar 2014 06:54:44 -0400
Subject: [Twisted-Python] git?
In-Reply-To: <53215AED.2070800@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
Message-ID: <53218E74.9010601@itamarst.org>

On 03/13/2014 03:14 AM, HawkOwl wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi Chris,
>
> I can assure you this topic has come up many times - and unless we
> have volunteers that can manage to get the several thousand tickets
> with comment history into GitHub (which I'm sure that nobody wants to
> get tied to when you have a workflow already), without losing
> anything, then it's most likely Twisted is sticking with svn and trac.
>
> Git has svn support - see `git svn`. I have merged several branches
> with it, and it works great. Use that instead, if you get commit access :)
>
Personally I feel like these are two separate things - we could switch 
to Git while worrying about tickets later. Still would take some 
infrastructure work, but a lot less.

-Itamar



From jon at multani.info  Thu Mar 13 05:04:22 2014
From: jon at multani.info (Jonathan Ballet)
Date: Thu, 13 Mar 2014 20:04:22 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <53215AED.2070800@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
Message-ID: <20140313110416.GA21387@danio.home>

Hi,

On Thu, Mar 13, 2014 at 03:14:53PM +0800, HawkOwl wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi Chris,
> 
> I can assure you this topic has come up many times - and unless we
> have volunteers that can manage to get the several thousand tickets
> with comment history into GitHub (which I'm sure that nobody wants to
> get tied to when you have a workflow already), without losing
> anything, then it's most likely Twisted is sticking with svn and trac.

Why does using Git involve moving tickets over to Github?
Why does using Git even involve Github at all, in the first place?

 Jonathan



> Git has svn support - see `git svn`. I have merged several branches
> with it, and it works great. Use that instead, if you get commit access :)
> 
> - -hawkowl
> 
> On 13/03/14 14:53, Chris Withers wrote:
> > On 12/03/2014 23:52, Glyph Lefkowitz wrote:
> >> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
> >> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>>
> >> wrote:
> >> 
> >>> On March 12, 2014 at 5:39:36 PM, Chris Withers
> >>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>)
> >>> wrote:
> >>>> Hi All,
> >>>> 
> >>>> Is there a git mirror of the twisted repo anywhere?
> >>>> 
> >>> Yes, it’s at
> >>> 
> >>> http://github.com/twisted/twisted
> >> 
> >> Also at https://code.twistedmatrix.com/git/Twisted.
> >> 
> >> However, if you actually want to /use/ this mirror to work on
> >> Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror> has some
> >> useful information.
> > 
> > Not to be too contentious, but when do you reckon you guys will
> > switch the main repo to git?
> > 
> > The difficulty of using svn for the main repo is that it only has
> > a subset of the features of a dvcs such as git.
> > 
> > The difficulty of using git for the main repo is if you have people
> > who still want to interact via svn. Well, it would be if you didn't
> > use github:
> > 
> > https://help.github.com/articles/support-for-subversion-clients
> > 
> > I do wonder how many people know about the above feature, it blows
> > my mind a bit that it's actually there in the first place...
> > 
> > Anyway, just a thought :-)
> > 
> > Chris
> > 
> 
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1
> 
> iQEcBAEBAgAGBQJTIVrtAAoJECMItHnTkkoRUa0H/3+mcWQLWhWLuGlo9pfNLTwb
> WWX7F/P2sVVfKc0r5o07/7rOpuPYrKMsnjzxU6O8qf4/aKQOeD4LdVrOUww56v4e
> ybgnoa+InXIYDMJJ5jm6X0VX5Upw1GhSaaJCbv8mjIs66mE70/Xu9pYlVcxw6lJP
> OIK4nQmYMXwXq6yjSiSZO+qnPl+M79/BCI3kutC2N+L9rxCJQR8D7Zy6OFwdnlLA
> XSZx3JcAvgROQs6q+1m2HqJS+uhq4MPKoj/BgSUYkxAIk/MVKvvXiCk/OYk1GaBX
> iuFLH3DU5LLBf89518WW2xvWzMUIVpRiIRzei0U4POOOobgO7n6kiZESsmstZs4=
> =3lxd
> -----END PGP SIGNATURE-----
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From _ at lvh.io  Thu Mar 13 05:14:48 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 13 Mar 2014 12:14:48 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <20140313110416.GA21387@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net> <20140313110416.GA21387@danio.home>
Message-ID: <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>

Hi,

On Thu, Mar 13, 2014 at 12:04 PM, Jonathan Ballet <jon at multani.info> wrote:

> Why does using Git involve moving tickets over to Github?
> Why does using Git even involve Github at all, in the first place?
>

HawkOwl probably meant that it would be hard to get all the tooling (trac,
ci...) working while switching up the VCS out from under it. There's a
*lot* of stuff that relies on SVN details.

Plus, with the git mirrors, we don't have to do that work, and anyone who
only wants to work in git all day, can.

hth
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/4304d3e7/attachment-0002.html>

From hawkowl at atleastfornow.net  Thu Mar 13 05:17:13 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Thu, 13 Mar 2014 19:17:13 +0800
Subject: [Twisted-Python] git?
In-Reply-To: <20140313110416.GA21387@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
Message-ID: <532193B9.1060700@atleastfornow.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 13/03/14 19:04, Jonathan Ballet wrote:
> Hi,
> 
> On Thu, Mar 13, 2014 at 03:14:53PM +0800, HawkOwl wrote: Hi Chris,
> 
> I can assure you this topic has come up many times - and unless we 
> have volunteers that can manage to get the several thousand
> tickets with comment history into GitHub (which I'm sure that
> nobody wants to get tied to when you have a workflow already),
> without losing anything, then it's most likely Twisted is sticking
> with svn and trac.
> 
>> Why does using Git involve moving tickets over to Github? Why
>> does using Git even involve Github at all, in the first place?
> 
>> Jonathan

If you want git access, we have that already (both read and write!),
so the only reason for moving the base repo to git would be to use a
bug tracker that interfaces with git, or to use github.

The *only* thing git can't be used for when contributing with Twisted
is releases, due to Twisted's non-standard release branch structure.
Everything else is using `git svn dcommit` instead of `git push`.

There is no other reason to do a base repo switch other than "svn is
scary" or "I don't like svn".

- -hawkowl

> 
> Git has svn support - see `git svn`. I have merged several
> branches with it, and it works great. Use that instead, if you get
> commit access :)
> 
> -hawkowl
> 
> On 13/03/14 14:53, Chris Withers wrote:
>>>> On 12/03/2014 23:52, Glyph Lefkowitz wrote:
>>>>> On Mar 12, 2014, at 3:43 PM, Christopher Armstrong 
>>>>> <radix at twistedmatrix.com <mailto:radix at twistedmatrix.com>> 
>>>>> wrote:
>>>>> 
>>>>>> On March 12, 2014 at 5:39:36 PM, Chris Withers 
>>>>>> (chris at simplistix.co.uk <mailto:chris at simplistix.co.uk>) 
>>>>>> wrote:
>>>>>>> Hi All,
>>>>>>> 
>>>>>>> Is there a git mirror of the twisted repo anywhere?
>>>>>>> 
>>>>>> Yes, it’s at
>>>>>> 
>>>>>> http://github.com/twisted/twisted
>>>>> 
>>>>> Also at https://code.twistedmatrix.com/git/Twisted.
>>>>> 
>>>>> However, if you actually want to /use/ this mirror to work
>>>>> on Twisted, <https://twistedmatrix.com/trac/wiki/GitMirror>
>>>>> has some useful information.
>>>> 
>>>> Not to be too contentious, but when do you reckon you guys
>>>> will switch the main repo to git?
>>>> 
>>>> The difficulty of using svn for the main repo is that it only
>>>> has a subset of the features of a dvcs such as git.
>>>> 
>>>> The difficulty of using git for the main repo is if you have
>>>> people who still want to interact via svn. Well, it would be
>>>> if you didn't use github:
>>>> 
>>>> https://help.github.com/articles/support-for-subversion-clients
>>>>
>>>>
>>>> 
I do wonder how many people know about the above feature, it blows
>>>> my mind a bit that it's actually there in the first place...
>>>> 
>>>> Anyway, just a thought :-)
>>>> 
>>>> Chris
>>>> 
> 
>> 
>> _______________________________________________ Twisted-Python
>> mailing list Twisted-Python at twistedmatrix.com 
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> _______________________________________________ Twisted-Python
> mailing list Twisted-Python at twistedmatrix.com 
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJTIZO5AAoJECMItHnTkkoR9ZIH/0OPffVuzNWwfcUnBJhH4GOe
5VVSBWZCYFN2PPPrLNrHZxcSxqwEmGf4F0hbX81PSeGhyWYc3on+8+BNX21kJHya
fcSamX/mCzBvfsyUdq2cQYGwZP+m3UMGign3OrxSB4A1RpsHsp5NciwZsgpb5Ouq
Jjc1DW6gFrk3x6OxvAgT2HuibbLlReXvRtiCQQa2XTP5yGiloMFODUzq4dCUXcFm
aP/s/tW2w2IWaF+sxzu0RESgJRF7q44GcZ0WuFNWRH0VJWCk0wzUnN6SblwZ9M7y
vEDp5OyOhP1s+QKJF1vSpSIVZlg2PhtuM4Cll8dOl5wvYgmOHmvcXniKFGiGbb4=
=G9WU
-----END PGP SIGNATURE-----



From chris at simplistix.co.uk  Thu Mar 13 06:01:33 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 13 Mar 2014 12:01:33 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <532193B9.1060700@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
Message-ID: <53219E1D.4060004@simplistix.co.uk>

On 13/03/2014 11:17, HawkOwl wrote:
> If you want git access, we have that already (both read and write!),\

So, if I hypothetically put in a pull request via GitHub, that would 
"just work"?

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk



From isis at torproject.org  Thu Mar 13 12:36:36 2014
From: isis at torproject.org (isis)
Date: Thu, 13 Mar 2014 18:36:36 +0000
Subject: [Twisted-Python] Tor Project has GSoC projects which need Twisted
	developers!
Message-ID: <20140313183636.GE19718@patternsinthevoid.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Heyo Twisted Python peoples!

Google recently accepted The Tor Project into their 2014 Google Summer of Code
program. [0][1] We have several GSoC project ideas which include development
tasks using Twisted, for example:

  * Design and develop better Pluggable Transports [2]
  * Contribute to better parsing integration between Stem and Txtorcon [3]
  * Design and develop a new Tor bridge distributor for BridgeDB [4]
  * Develop a censorship analyzer [5]

Or feel free to submit a GSoC application for another idea, and we'll try to
find a mentor for you. GSoC is a great way to not only get paid for
contributing to FLOSS projects, but also to get involved and familiar with the
Tor Project. Several current Tor developers were once-upon-a-time GSoC
students.

Hope to see your applications soon! :)

[0]: https://blog.torproject.org/blog/tor-google-summer-code-2014
[1]: https://www.google-melange.com/gsoc/homepage/google/gsoc2014?ModPagespeed=noscript
[2]: https://www.torproject.org/getinvolved/volunteer.html.en#betterPluggableTransports
[3]: https://www.torproject.org/getinvolved/volunteer.html.en#txtorcon-stemIntegration
[4]: https://www.torproject.org/getinvolved/volunteer.html.en#newBridgeDBDistributor
[5]: https://www.torproject.org/getinvolved/volunteer.html.en#censorshipAnalyzer

- -- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
GPG: 4096R/A3ADB67A2CDB8B35
Current Keys: https://blog.patternsinthevoid.net/isis.txt
-----BEGIN PGP SIGNATURE-----

iQMhBAEBCgELBQJTIfqxBYMB4TOAVhSAAAAAACUAKGlzaXMrc2lnbnN1YmtleUBw
YXR0ZXJuc2ludGhldm9pZC5uZXRGQzYzQUE1Q0QxOTM4NjlDMzIzNzE0NUE1QzE3
Nzc2RTI3RjdFODRESxSAAAAAABoAKGlzaXNAcGF0dGVybnNpbnRoZXZvaWQubmV0
MEE2QTU4QTE0QjU5NDZBQkRFMThFMjA3QTNBREI2N0EyQ0RCOEIzNS4aaHR0cHM6
Ly9ibG9nLnBhdHRlcm5zaW50aGV2b2lkLm5ldC9wb2xpY3kudHh0LJhodHRwczov
L2Jsb2cucGF0dGVybnNpbnRoZXZvaWQubmV0L2lzaXMudHh0AAoJEFwXd24n9+hN
028P/0TNIvBVus2nI+KBTUh5JLyDrG3+C3Unf+MS4N6IkJmL0x1+oGw0R4WgqhCv
lJPYvkdr06qcCAsDaOsv/n5v6yyvSxFbVVGftPffqmhe6u952mvDSaYHx05v5f4M
pc8+Wss4gyA5KtVuttWqr2QfdNEpoUXtGUHJCREQHU/PiuUEn6sNPx88by3WBKjB
jqhX7oEMBrB3cakYXYnZZO0VjoqRHf0PafJrpLaBdkOSezbPqKm40dIZ8v8axXzi
/e2d6FLT0D3wDzj1c/4kfRDZIogL83Q4VaIZvT+YpADeEGonzB2uQGqB75OWWkVk
+lwJW2saKzQEc0E+iBa2fLDiYLHiauVN1epRrj9EPuXfbte4fn2ntQf6Cr+dVuAM
RKfN6HquKCDaW2mY50xOEzawYfPYWJJxDnjG5i2+Wy4N479b9DxmqxpsIBmlElpa
9qPnY9M33doAARx1FDJn39OyynHMMvoD65hBa4ZMzSFTyu8xEhTO9s/NXiRKr8K2
SqZjh9xywNeOiFrPaFB3G+/T8JZGyjsURPIWs9WuGFtOI5SLob7B6K7IpVJG2XGB
eeJCrk2KtvpwhPdw561cZHT8V8tHlcBzhV/hsbfbtXlFFFlfkWsdf/BI76AIEKXc
4yjlmAPg9Tlul+AYle3byBTDYDwjN+vgIpn9vKbvGvNnMCtY
=S2Nq
-----END PGP SIGNATURE-----



From glyph at twistedmatrix.com  Thu Mar 13 13:19:41 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:19:41 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <53219E1D.4060004@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
 <53219E1D.4060004@simplistix.co.uk>
Message-ID: <6DFD0BF0-891A-41B9-BAA6-2917C06F1AF7@twistedmatrix.com>


On Mar 13, 2014, at 5:01 AM, Chris Withers <chris at simplistix.co.uk> wrote:

> On 13/03/2014 11:17, HawkOwl wrote:
>> If you want git access, we have that already (both read and write!),\
> 
> So, if I hypothetically put in a pull request via GitHub, that would "just work"?

No.  There's a required round-trip through SVN which doesn't work with pull requests.

See <https://twistedmatrix.com/trac/wiki/GitMirror> for an explanation of the current workflow for committers to use git.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/36f2eaab/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140313/36f2eaab/attachment-0002.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:21:23 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:21:23 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <532193B9.1060700@atleastfornow.net>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home> <532193B9.1060700@atleastfornow.net>
Message-ID: <775173DB-01BA-4100-B93B-DCEA90AACAFD@twistedmatrix.com>


On Mar 13, 2014, at 4:17 AM, HawkOwl <hawkowl at atleastfornow.net> wrote:

> There is no other reason to do a base repo switch other than "svn is
> scary" or "I don't like svn".

There's a very good reason to do a base repo switch.

Right now, every time we do a merge to trunk, we're losing all the metadata about version history; the individual commits within the branch don't show up in 'svn blame' so it's hard to determine how an individual line got to be the way it is.

I'd very much like us to switch to git entirely so we can start preserving all of this information.  I don't know if we'll use git forever, but the sooner we switch, the more history will be preserved for future version control systems (whatever we migrate to once the git fad has run its course ;-)).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/a1636d46/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140313/a1636d46/attachment-0002.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:35:17 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:35:17 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
Message-ID: <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>


On Mar 13, 2014, at 4:14 AM, Laurens Van Houtven <_ at lvh.io> wrote:

> HawkOwl probably meant that it would be hard to get all the tooling (trac, ci...) working while switching up the VCS out from under it. There's a *lot* of stuff that relies on SVN details.

I think handwaving over the list of things that need to be done might make people unnecessarily afraid to work on this.  The list is finite :-).

All of our infrastructure is (or at least, should be) available here <https://github.com/twisted-infra/braid>.  It should be possible to submit a PR against that repository (and the relevant submodules) which makes the update and then just deploy it with 'fab config.production'.

The major blocker is that we need to upgrade Trac to get a version of Trac that supports a Git source browser reasonably, and can detect ticket references and ticket closures from Git commit messages.  This is currently stuck: <https://twistedmatrix.com/trac/wiki/Infrastructure/UpgradingTrac>.  This would be good for lots of other reasons, but upgrading trac has proven very difficult in the past.

We might also need to install a trac plugin of some kind for the git stuff, I'm not sure about that.

We would also need to port the post-commit hooks in SVN which tell Kenaan to announce commits on IRC, enforce repository structure (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change), and kick off buildbot.

Right now there's some SVN mirroring stuff to keep SVN updated on Trac, since we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface).

The CI system actually already uses git, in preparation for this merge, so I don't think there's a whole lot of work there.  We might not even need to set a different upstream URL.

If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/daa9ceb3/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140313/daa9ceb3/attachment-0002.bin>

From glyph at twistedmatrix.com  Thu Mar 13 13:38:42 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 13 Mar 2014 12:38:42 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <532155F9.5000301@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
Message-ID: <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>

On Mar 12, 2014, at 11:53 PM, Chris Withers <chris at simplistix.co.uk> wrote:

> Not to be too contentious, but when do you reckon you guys will switch the main repo to git?

Just to be clear about the nature of my other answers: we do not "reckon" such a thing will happen; we have no estimates.  Things get done because volunteers do them.  You could be just such a volunteer :).

We do have some rules about how volunteers can do such things - for example, we are not going to take down the project's infrastructure "for a little while" because someone claims they're going to do this work.  In the past we've been burned by people showing up, breaking stuff, and then wandering off forever, so we will only deploy stuff once we have some reasonable expectation that the work is already done and tested in some way.

But within those constraints, it's totally up to you now :-).  (Inasmuch as it's up to all of us.)

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/e02112cc/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140313/e02112cc/attachment-0002.bin>

From rowen at uw.edu  Thu Mar 13 15:09:01 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Thu, 13 Mar 2014 14:09:01 -0700
Subject: [Twisted-Python] Simple way to halt all timers?
Message-ID: <rowen-FD109E.14090113032014@news.gmane.org>

Is there a simple way to cancel all Twisted timers (pending 
reactor.callLater calls)?

The reason I want to do this is to clean up a unit test without getting 
"dirty reactor" complaints. 

The system is a server that will rarely be shut down and does not have 
to shut down gracefully (i.e. I don't care if the reactor is dirty). But 
I want the unit tests to run cleanly, so for now I've been keeping a 
reference to each timer that I start, so my test cleanup code can 
manually cancel it. It's a lot of fuss, and makes timers harder to use 
than they should be. I admit that in many cases I need a reference to 
the timer anyway, since I may have to cancel it for reasons that matter 
to the server. But I hate having to do it for *every* timer. If there 
was a simple way to tell the reactor to cancel any outstanding 
"callLater" calls, the code would be much cleaner.


-- Russell




From _ at lvh.io  Thu Mar 13 15:16:29 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Thu, 13 Mar 2014 22:16:29 +0100
Subject: [Twisted-Python] Simple way to halt all timers?
In-Reply-To: <rowen-FD109E.14090113032014@news.gmane.org>
References: <rowen-FD109E.14090113032014@news.gmane.org>
Message-ID: <CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ@mail.gmail.com>

Hi Russell,


The way to do this is to pass the reactor as a parameter, and use a Clock
instead of the regular parameter for unit testing purposes. See also:
https://twistedmatrix.com/documents/current/core/howto/trial.html ; that
has a complete example of how to write unit tests that use Clock.

That way your unit tests will be fast, deterministic, and also very clean
:-)


hth
lvh


On Thu, Mar 13, 2014 at 10:09 PM, Russell E. Owen <rowen at uw.edu> wrote:

> Is there a simple way to cancel all Twisted timers (pending
> reactor.callLater calls)?
>
> The reason I want to do this is to clean up a unit test without getting
> "dirty reactor" complaints.
>
> The system is a server that will rarely be shut down and does not have
> to shut down gracefully (i.e. I don't care if the reactor is dirty). But
> I want the unit tests to run cleanly, so for now I've been keeping a
> reference to each timer that I start, so my test cleanup code can
> manually cancel it. It's a lot of fuss, and makes timers harder to use
> than they should be. I admit that in many cases I need a reference to
> the timer anyway, since I may have to cancel it for reasons that matter
> to the server. But I hate having to do it for *every* timer. If there
> was a simple way to tell the reactor to cancel any outstanding
> "callLater" calls, the code would be much cleaner.
>
>
> -- Russell
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/3abaf7db/attachment-0002.html>

From rowen at uw.edu  Thu Mar 13 16:51:41 2014
From: rowen at uw.edu (Russell E. Owen)
Date: Thu, 13 Mar 2014 15:51:41 -0700
Subject: [Twisted-Python] Simple way to halt all timers?
References: <rowen-FD109E.14090113032014@news.gmane.org>
 <CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ@mail.gmail.com>
Message-ID: <rowen-4AAD8E.15514113032014@news.gmane.org>

In article 
<CAE_Hg6YBk6nBrXnMaE0nXyaC4u2WS6RKNVATbcEGDiQGhFJKjQ at mail.gmail.com>,
 Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Russell,
> 
> 
> The way to do this is to pass the reactor as a parameter, and use a Clock
> instead of the regular parameter for unit testing purposes. See also:
> https://twistedmatrix.com/documents/current/core/howto/trial.html ; that
> has a complete example of how to write unit tests that use Clock.
> 
> That way your unit tests will be fast, deterministic, and also very clean
> :-)

Thank you. That looks very promising!

-- Russell




From burak at nehbit.net  Thu Mar 13 23:09:05 2014
From: burak at nehbit.net (Burak Nehbit)
Date: Thu, 13 Mar 2014 22:09:05 -0700
Subject: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite
 Zombie Processes
In-Reply-To: <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>
References: <etPan.5314225b.507ed7ab.195@Buraks-MacBook-Pro.local>
 <20140303121926.6218.526328592.divmod.xquotient.173@top>
 <etPan.531c26e5.6b8b4567.176@Buraks-MacBook-Pro.local>
 <210D1F26-F49E-4EF9-AD48-E4BFBD9274B6@twistedmatrix.com>
 <etPan.531fdcc6.6b8b4567.3669@Buraks-MacBook-Pro.local>
 <20140312113205.6218.824356880.divmod.xquotient.288@top>
 <2D5F2D61-9733-486B-B3F3-A9EE150A1EB7@twistedmatrix.com>
Message-ID: <etPan.53228ef2.46e87ccd.3669@Buraks-MacBook-Pro.local>

The licenses are compatible and the maintainer is amenable to the idea though, so if you (and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

I wish. I can’t even get Ampoule to work for myself. 

Besides, I’m probably lightyears away from enough skill to pass your code reviews, even if I understood exactly what Ampoule was doing. I did read the source code, but there is some really delicate meta–programming happening in that to allow bootstrapping an AMP connection over file descriptors. I do not understand operating systems and / or the Python interpreter enough to understand, much less program in such an environment. 

I do rely quite heavily on Ampoule, which is the reason I am deadlocked so hard at this point. I simply cannot allow GUI to slow down while the Twisted reactor is doing something else, because that GUI is also responsible for drawing 60fps CSS animations. My dependency is only going to get deeper as it seems. If I can fix and improve Ampoule as I go along, I might take up maintaining it, and then I would look into possibly getting it into Twisted. Meanwhile, if you have any insight as to why it fails so hard, please let me know. 

Best,
Burak


From: Glyph Lefkowitz glyph at twistedmatrix.com
Reply: Twisted general discussion twisted-python at twistedmatrix.com
Date: March 12, 2014 at 4:47:27 PM
To: Twisted general discussion twisted-python at twistedmatrix.com
Subject:  Re: [Twisted-Python] Freezing Ampoule or the Invasion of Infinite	Zombie Processes  


On Mar 12, 2014, at 4:32 AM, exarkun at twistedmatrix.com wrote:

Considering the amount of maintenance Ampoule seems to have gotten over the last four years (~1 commit) I doubt you can count on someone else picking this up just because it would be great, though.

The licenses are compatible and the maintainer is amenable to the idea though, so if you (and by "you" I mean Burak, not exarkun) wanted to start the work of merging in Ampoule, you could go right ahead.

The one caveat I will give you is that Ampoule is probably not quite good enough as-is.  It's been a while, but I definitely remember discussing some of its deficiencies with people who had used it; you will probably get requests to change stuff in code review.  That's OK though, that's the whole point of code review.  This actually means that the fact that it's unmaintained is a good thing - not a lot of duplication of effort to improve it :).

-glyph
_______________________________________________  
Twisted-Python mailing list  
Twisted-Python at twistedmatrix.com  
http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140313/07ae3a5a/attachment-0002.html>

From itamar at itamarst.org  Fri Mar 14 17:56:29 2014
From: itamar at itamarst.org (Itamar Turner-Trauring)
Date: Fri, 14 Mar 2014 19:56:29 -0400
Subject: [Twisted-Python] ANN: Crochet 1.1.0
Message-ID: <5323972D.4010503@itamarst.org>

Crochet is an MIT-licensed library that makes it easier for blocking or 
threaded applications like Flask or Django to use the Twisted networking 
framework. Crochet provides the following features:

  * Runs Twisted's reactor in a thread it manages.
  * The reactor shuts down automatically when the process' main thread
    finishes.
  * Hooks up Twisted's log system to the Python standard library logging
    framework. Unlike Twisted's built-in logging bridge, this includes
    support for blocking Handler instances.
  * A blocking API to eventual results (i.e. Deferred instances). This
    last feature can be used separately, so Crochet is also useful for
    normal Twisted applications that use threads.


Downloads: https://pypi.python.org/pypi/crochet
Documentation: https://crochet.readthedocs.org/en/latest/

*
What's New in 1.1.0*

Bug fixes:

  * EventualResult.wait() can now be used safely from multiple threads,
    thanks to Gavin Panella for reporting the bug.
  * Fixed reentrancy deadlock in the logging code caused by
    http://bugs.python.org/issue14976, thanks to Rod Morehead for
    reporting the bug.
  * Crochet now installs on Python 3.3 again, thanks to Ben Cordero.
  * Crochet should now work on Windows, thanks to Konstantinos Koukopoulos.
  * Crochet tests can now run without adding its absolute path to
    PYTHONPATH or installing it first.

Documentation:

  * EventualResult.original_failure is now documented.

**
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140314/f374995c/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 16 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 16 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1394949915.42.8634321699635530126@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140316/f6cc06ad/attachment-0002.html>

From jon at multani.info  Sun Mar 16 01:31:33 2014
From: jon at multani.info (Jonathan Ballet)
Date: Sun, 16 Mar 2014 16:31:33 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
Message-ID: <20140316073131.GB16759@danio.home>

Hi Glyph,

On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:
> 
> On Mar 13, 2014, at 4:14 AM, Laurens Van Houtven <_ at lvh.io> wrote:
> 
> > HawkOwl probably meant that it would be hard to get all the tooling (trac, ci...) working while switching up the VCS out from under it. There's a *lot* of stuff that relies on SVN details.
> 
> I think handwaving over the list of things that need to be done might make people unnecessarily afraid to work on this.  The list is finite :-).
> 
> All of our infrastructure is (or at least, should be) available here <https://github.com/twisted-infra/braid>.  It should be possible to submit a PR against that repository (and the relevant submodules) which makes the update and then just deploy it with 'fab config.production'.
> 
> The major blocker is that we need to upgrade Trac to get a version of Trac that supports a Git source browser reasonably, and can detect ticket references and ticket closures from Git commit messages.  This is currently stuck: <https://twistedmatrix.com/trac/wiki/Infrastructure/UpgradingTrac>.  This would be good for lots of other reasons, but upgrading trac has proven very difficult in the past.
> 
> We might also need to install a trac plugin of some kind for the git stuff, I'm not sure about that.
> 
> We would also need to port the post-commit hooks in SVN which tell Kenaan to announce commits on IRC, enforce repository structure (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change), and kick off buildbot.
> 
> Right now there's some SVN mirroring stuff to keep SVN updated on Trac, since we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface).
> 
> The CI system actually already uses git, in preparation for this merge, so I don't think there's a whole lot of work there.  We might not even need to set a different upstream URL.
> 
> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.

I don't have edit permissions on the wiki, so I took the list of stuff
you mentionned here and made a wiki page joined to this email.

Compared to the SwitchToBazar page, here are the things which are
missing from your email - I don't know how relevant they are though:

 * mailer post-commit hook
 * the release scripts
 * the developer documentation (I guess that should be done)
 * figure the version number from Git instead of Subversion
 * decide what to do with Combinator

There might be still some editing to do but that could be a start.

 Jonathan
-------------- next part --------------
= To do list for switching the code repository from Subversion to Git =

//This acts more as a reminder of things to do than the actual definitive list. Feel free to update it if things are missing.//

Changing the repository must still meet the [wiki:WorkflowRequirements workflow requirements].

 * Changes to the infrastructure should be made against the [https://github.com/twisted-infra/braid braid repository] (or its sub-modules) so that it can be deployed with `fab`
 * Upgrade Trac:
   * It's old and needs Git support for:
     * be able to browse the repository
     * detect ticket references and ticket closures from Git commits messages

     Starting from Trac 1.0, Git is supported out of the box, see http://trac.edgewall.org/wiki/TracGit
   * See current works on [wiki:Infrastructure/UpgradingTrac upgrading Trac].
 * The CI system already uses Git. Is there any changes to make here?
 * Port the post-commit hooks from Subversion to Git:
   * IRC announcements from Kenaan
   * repository structure enforcement (i.e. no merges to trunk, or, presumably, "master", without a fixed bug and a NEWS file, unless it's a quote file change)
   * Buildbot kick off

     Is it already done?
 * Is there any need to have a Git mirror on the same machine as Trac?
   * we don't want our release repository on the same machine running the website.  (code.twistedmatrix.com has a much smaller attack surface)

From adi at roiban.ro  Sun Mar 16 11:25:46 2014
From: adi at roiban.ro (Adi Roiban)
Date: Sun, 16 Mar 2014 19:25:46 +0200
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
Message-ID: <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>

On 24 February 2014 21:53, Richard Wall <m-lists at the-moon.net> wrote:
> On 22 February 2014 02:49, Glyph Lefkowitz <glyph at twistedmatrix.com> wrote:
<snip>
> The current new contributors guide is here:
> https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>
> The draft new contributors guide is here:
> https://twistedmatrix.com/trac/wiki/Contribute (That's the doc which
> ashfall_ and I were working on)
>

<snip>

Both version are rather verbose for my taste... I was looking for a
quick checklists for contributing with code, which could be included
in main CONTRIBUTING file.
It should assume that dev already got the code and has a common sense
for contributing to open source projects: create branch, create patch,
use tickets, use IRC. read code, write tests etc

* Make sure your work has an associated ticket
* Hack on code, test your code, write tests first :)
* Once you think you are done, run all tests (maybe have a command to
run them all):
  * Check that dev dependencies are install: pip install
twisted-dev-tools jinja2>=1.0.0 pyflakes>=0.7.3
  * Check that Python 2.7 tests pass: ./bin/trial twisted
  * Check that Python 3.3 tests pass: ./admin/run-python3-tests
  * If you made changes to api reference check that no errors are
produces and that HTML result looks right: ./bin/admin/build-apidocs
  * If you made changes to narative documentation check that no errors
are produced and that HTML result looks good: ./bin/admin/build-docs
  * Check that no pyflakes errors are generated by your code: pyflakes
  * Check that twistedchecker did not complain about your code: twistedchecker
* As for review. Attach diff file to git ticket, set owner to None and
set 'review' keyword
* For more details see : WIKI_PAGE

During review process my patches were rejected since either Pyhon 3.3
teste were failing, or apidocs was not passing or twistedchecker was
not passing, but it was not obvious how to do those tests on my
computer and searching wiki pages did not help... same with pyflakes
which was only mentioned in ReviewProcess

I think that current wiki pages are very useful, but since they are
mixed with both policy, best practices and tool usage, it easy for
them to get out of sync with latest tools using in the development
process.

There are a lot of steps and tools used for validating a patch and
sadly some checks only work on buildbot.
I am dedicating my time to improve local testing experience ... and
maybe also create a help tool to run all tests from a single command.

Once I got more info about contributing to Twisted I will try to
submit a patch for the main CONTRIBUTING file... but maybe there is a
better way to help new contributors.

-- 
Adi Roiban



From glyph at twistedmatrix.com  Sun Mar 16 14:12:42 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 16 Mar 2014 13:12:42 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <20140316073131.GB16759@danio.home>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
Message-ID: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>


On Mar 16, 2014, at 12:31 AM, Jonathan Ballet <jon at multani.info> wrote:

> Hi Glyph,
> 
> On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:

>> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.
> 
> I don't have edit permissions on the wiki, so I took the list of stuff
> you mentionned here and made a wiki page joined to this email.

What's your username?  The only reason we even have edit permissions is to prevent spamming, anyone may ask for edit permission at any time :-).

> Compared to the SwitchToBazar page, here are the things which are
> missing from your email - I don't know how relevant they are though:
> 
> * mailer post-commit hook

Yeah, we probably need this.  It seems like this ought to be pretty trivial to set up in git though :-).

> * the release scripts

Oh, good point.  These rely fairly lightly on svn, but the dependency is there.

This would be a good place to start.  Unfortunately, since tagging works differently in svn and git, I don't think we can simply start doing the release out of git without a repository to push to.  If I'm wrong about this, so much the better, and we could actually start having release managers use git if they like :).  Regardless, all the code to do so could be tested and landed as a normal development task with no administrative blockers, so this might be a good place for someone interested in moving the process along to start.

> * the developer documentation (I guess that should be done)

The developer documentation is already so bad (as Adi Roiban has pointed out) that it wouldn't make sense to block migrating to git on a comprehensive upgrade.

> * figure the version number from Git instead of Subversion

This would be an even more straightforward patch to Twisted, in twisted.python.versions.

> * decide what to do with Combinator

I think Combinator is an evolutionary dead end at this point.  Tools like virtualenv, virtualenvwrapper, pyenv, 

> There might be still some editing to do but that could be a start.

I've deleted the SwitchToBazaar page and, for now, uploaded your proposal at <https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit>.  Hopefully someone (maybe me) can give you edit permission as soon as you announce your username :).

Thanks for your contribution,

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140316/9c7215da/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140316/9c7215da/attachment-0002.bin>

From exarkun at twistedmatrix.com  Sun Mar 16 14:48:56 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Mar 2014 20:48:56 -0000
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
Message-ID: <20140316204856.6218.196190797.divmod.xquotient.307@top>

On 05:25 pm, adi at roiban.ro wrote:
>On 24 February 2014 21:53, Richard Wall <m-lists at the-moon.net> wrote:
>>On 22 February 2014 02:49, Glyph Lefkowitz <glyph at twistedmatrix.com> 
>>wrote:
><snip>
>>The current new contributors guide is here:
>>https://twistedmatrix.com/trac/wiki/ContributingToTwistedLabs
>>
>>The draft new contributors guide is here:
>>https://twistedmatrix.com/trac/wiki/Contribute (That's the doc which
>>ashfall_ and I were working on)
>
><snip>
>
>Both version are rather verbose for my taste...

The solution to the problem of "There are too many words to read" is not 
to start a new file and start typing new words into it.

The massive sprawl that is our contributor documentation definitely 
needs to be fixed.  I know it's easier to start a fresh document (this 
time it'll work for sure!) but please consider that this strategy may 
actually not produce the best results (it may in fact be the strategy 
that produced the current state of affairs).
>I was looking for a
>quick checklists for contributing with code, which could be included
>in main CONTRIBUTING file.
>It should assume that dev already got the code and has a common sense

"common sense"?  There is no such thing, sorry.  This is sort of an 
irrelevant tangent but I couldn't help commenting on it.
>for contributing to open source projects: create branch, create patch,
>use tickets, use IRC. read code, write tests etc
>
>* Make sure your work has an associated ticket
>* Hack on code, test your code, write tests first :)
>* Once you think you are done, run all tests (maybe have a command to
>run them all):
>  * Check that dev dependencies are install: pip install
>twisted-dev-tools jinja2>=1.0.0 pyflakes>=0.7.3
>  * Check that Python 2.7 tests pass: ./bin/trial twisted
>  * Check that Python 3.3 tests pass: ./admin/run-python3-tests
>  * If you made changes to api reference check that no errors are
>produces and that HTML result looks right: ./bin/admin/build-apidocs
>  * If you made changes to narative documentation check that no errors
>are produced and that HTML result looks good: ./bin/admin/build-docs
>  * Check that no pyflakes errors are generated by your code: pyflakes
>  * Check that twistedchecker did not complain about your code: 
>twistedchecker
>* As for review. Attach diff file to git ticket, set owner to None and
>set 'review' keyword
>* For more details see : WIKI_PAGE

Many of these points are redundant with documentation on one or more 
wiki pages that already exists.  And there are many important things 
that a contributor must know that aren't mentioned here - for example, 
incompatible changes aren't acceptable, all APIs must be documented, 
etc.

It would be excellent to have a comprehensive list of requirements.  I 
strongly suspect that the best way to arrive at this list is to look at 
the existing documentation and remove the redundancies and fix the 
organization.

There may be gaps that need to be filled in.  If so, please fill them 
in.  Creating a new document with a new set of gaps really isn't making 
the situation better.
>
>During review process my patches were rejected since either Pyhon 3.3
>teste were failing, or apidocs was not passing or twistedchecker was
>not passing, but it was not obvious how to do those tests on my
>computer and searching wiki pages did not help... same with pyflakes
>which was only mentioned in ReviewProcess

I know that you've already done a lot of work towards making it easier 
to run these extra build steps locally.  Thank you very much for that!
>
>I think that current wiki pages are very useful, but since they are
>mixed with both policy, best practices and tool usage, it easy for
>them to get out of sync with latest tools using in the development
>process.

Can you give an example of this?  And how will a new document avoid 
exactly the same problem?  Perhaps we *shouldn't* try documenting tool 
usage at all - but instead we should refer to the documentation for 
those tools (which presumably will be kept up to date)?
>
>There are a lot of steps and tools used for validating a patch and
>sadly some checks only work on buildbot.
>I am dedicating my time to improve local testing experience ... and
>maybe also create a help tool to run all tests from a single command.
>
>Once I got more info about contributing to Twisted I will try to
>submit a patch for the main CONTRIBUTING file... but maybe there is a
>better way to help new contributors.

Perhaps this would eventually make a good addition but (to repeat 
myself, sorry) this doesn't seem like a good idea right now.  Until we 
actually have a coherent message to present I don't see the benefit of 
creating yet a new source of slightly conflicting, somewhat incomplete 
information (and one that's harder to edit than a wiki page as a bonus).

Jean-Paul



From glyph at twistedmatrix.com  Sun Mar 16 18:08:57 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Sun, 16 Mar 2014 17:08:57 -0700
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
	repo file
In-Reply-To: <20140316204856.6218.196190797.divmod.xquotient.307@top>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
 <20140316204856.6218.196190797.divmod.xquotient.307@top>
Message-ID: <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>

On Mar 16, 2014, at 1:48 PM, exarkun at twistedmatrix.com wrote:

> I know it's easier to start a fresh document (this time it'll work for sure!) but please consider that this strategy may actually not produce the best results (it may in fact be the strategy that produced the current state of affairs).

I don't have a lot to comment on this but it really bears repeating.

This problem is also not unique to Twisted; see also <https://xkcd.com/927/>.

>> It should assume that dev already got the code and has a common sense
> 
> "common sense"?  There is no such thing, sorry.  This is sort of an irrelevant tangent but I couldn't help commenting on it.
>> for contributing to open source projects: create branch, create patch,
>> use tickets, use IRC. read code, write tests etc


I think this tangent is actually totally relevant.  Potential contributors to open source overall are a very diverse audience with a widely divergent backgrounds.  Twisted, in particular, attracts an especially idiosyncratic group, because Twisted runs in a really wide array of environments and supports a really wide array of protocols.  If you wanted to do the "normal thing" you'd be contributing to Django, not Twisted.

Also, keep in mind that for many developers, even today, Twisted is their first open source contribution experience.  Therefore there's no particular reason to believe that they would have any idea how to submit patches, or write tests, or that those things are needed.  It may make sense to make there be an easy way to skip over these basics, but they definitely need to be present.

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140316/f383621c/attachment-0002.html>

From jon at multani.info  Sun Mar 16 20:47:21 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 11:47:21 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
Message-ID: <20140317024719.GA28733@danio.home>

On Sun, Mar 16, 2014 at 01:12:42PM -0700, Glyph wrote:
> >> If someone would like to turn this list into a wiki page under <https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great, so it could be updated with anything I've forgotten. Right now there's the beginnings of a SwitchToBazaar which should probably be deleted, since we're not going to do that.
> >
> > I don't have edit permissions on the wiki, so I took the list of stuff
> > you mentionned here and made a wiki page joined to this email.
>
> What's your username?  The only reason we even have edit permissions is to prevent spamming, anyone may ask for edit permission at any time :-).

Oh yeah, maybe that's needed... My username is 'multani', thanks for
editing me!

> > Compared to the SwitchToBazar page, here are the things which are
> > missing from your email - I don't know how relevant they are though:
> >
> > * mailer post-commit hook
>
> Yeah, we probably need this.  It seems like this ought to be pretty trivial to set up in git though :-).
>
> > * the release scripts
>
> Oh, good point.  These rely fairly lightly on svn, but the dependency is there.
>
> This would be a good place to start.  Unfortunately, since tagging works differently in svn and git, I don't think we can simply start doing the release out of git without a repository to push to.  If I'm wrong about this, so much the better, and we could actually start having release managers use git if they like :).  Regardless, all the code to do so could be tested and landed as a normal development task with no administrative blockers, so this might be a good place for someone interested in moving the process along to start.

That's twisted.python._release right?
greping for 'svn' in this module shows only 4 lines which are running
the 'svn' command, for which only the 'rm' will actually change the
repository (used to remove the NEWS fragments).

I've created #7035 for this, I'll try to have a look today. When I'll
have the edit permissions on the wiki, I'll update the SwitchToGit page
to reference to this ticket.

> > * figure the version number from Git instead of Subversion
>
> This would be an even more straightforward patch to Twisted, in twisted.python.versions.

I've created #7036 for this task.

>
> > * decide what to do with Combinator
>
> I think Combinator is an evolutionary dead end at this point.  Tools like virtualenv, virtualenvwrapper, pyenv,

It seems a part is missing here :)

 Jonathan



From jon at multani.info  Sun Mar 16 22:34:30 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 13:34:30 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <20140317024719.GA28733@danio.home>
References: <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home>
Message-ID: <20140317043428.GB28733@danio.home>

On Mon, Mar 17, 2014 at 11:47:21AM +0900, Jonathan Ballet wrote:

> > This would be an even more straightforward patch to Twisted, in twisted.python.versions.
>
> I've created #7036 for this task.

So, I was looking at twisted.python.versions and I'm wondering how is it
supposed to work with recent versions of Subversion (the ones which
removed all the ".svn" in all the sub-directories, I don't know which
one started this.)

Say that I'm checkout-ing trunk into "trunk/", set up the Python's path
and everything and now, I would like to use the Version class from this
module.

I'm using something like this:

  >>> from twisted.python.versions import Version
  >>> v = Version('twisted', 1, 2, 3)
  >>> print v._getSVNVersion()
  None

Looking at
https://twistedmatrix.com/trac/browser/trunk/twisted/python/versions.py#L210
(line 210 to 215), I don't know how it supposed to work with recent
version of Subversion:

 * the "twisted" module in this case would refer to the file
   "trunk/twisted/__init__.py"
 * but the ".svn" directory is going to be in "trunk/.svn" so the
   function always returns None

Additionally, it doesn't seem there's any parser for recent Subversion's
database?
So, how useful is that module at that moment?

 Jonathan



From jon at multani.info  Mon Mar 17 02:25:09 2014
From: jon at multani.info (Jonathan Ballet)
Date: Mon, 17 Mar 2014 17:25:09 +0900
Subject: [Twisted-Python] git?
In-Reply-To: <20140317043428.GB28733@danio.home>
References: <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home>
 <20140317043428.GB28733@danio.home>
Message-ID: <20140317082508.GA8405@danio.home>

On Mon, Mar 17, 2014 at 01:34:28PM +0900, Jonathan Ballet wrote:
> > > This would be an even more straightforward patch to Twisted, in twisted.python.versions.
> >
> > I've created #7036 for this task.
> 
> So, I was looking at twisted.python.versions and I'm wondering how is it
> supposed to work with recent versions of Subversion (the ones which
> removed all the ".svn" in all the sub-directories, I don't know which
> one started this.)
> 
> Looking at
> https://twistedmatrix.com/trac/browser/trunk/twisted/python/versions.py#L210
> (line 210 to 215), I don't know how it supposed to work with recent
> version of Subversion:
> 
>  * the "twisted" module in this case would refer to the file
>    "trunk/twisted/__init__.py"
>  * but the ".svn" directory is going to be in "trunk/.svn" so the
>    function always returns None

Actually, it's going to be the same thing with Git, the ".git" is one
level higher than the package which is passed to Version() in this case.
Version() can still run "git describe" or the like to get the latest
changeset number but:

* it's probably going to launch the "git" command which might be costly
* if for some reason the package is not from a Git repository, but
  there's one (potentially completely different) in a parent directory,
  "git describe" will happily return the changeset number from this
  upper directory and it's going to give some funky revision number.

> Additionally, it doesn't seem there's any parser for recent Subversion's
> database?
> So, how useful is that module at that moment?
> 
>  Jonathan



From adi at roiban.ro  Mon Mar 17 02:28:54 2014
From: adi at roiban.ro (Adi Roiban)
Date: Mon, 17 Mar 2014 10:28:54 +0200
Subject: [Twisted-Python] Contributing documentation inside CONTRIBUTING
 repo file
In-Reply-To: <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>
References: <CAFycZ9cPr_gyHKE9BT+FQpF4N-JGHZbCDsrSz4sBVgb0csrDaw@mail.gmail.com>
 <20140220151322.6511.612960390.divmod.xquotient.11@top>
 <CAFycZ9dnYMLr3GVOd5jUKygHf+qaBB3kyPZPrZ9w46KZr2nX_A@mail.gmail.com>
 <DFABB938-2062-406E-BB5E-51A56FAA026C@twistedmatrix.com>
 <CABefbUq3-43_eExG8tGVDczB89xjUpyFBp6AXDwgQPFd-3g_AA@mail.gmail.com>
 <CAFycZ9fUkPEtXQ9UZjr7jqE3fvkp3zistZHGBPynsOKtefmwsw@mail.gmail.com>
 <20140316204856.6218.196190797.divmod.xquotient.307@top>
 <743FE977-A2BD-4118-8E2D-E0CCD7180DE7@twistedmatrix.com>
Message-ID: <CAFycZ9evkOT+_SYCX7WGezsRJSCrGxOzVunS2uOgt0=OAfS1Kw@mail.gmail.com>

On 17 March 2014 02:08, Glyph <glyph at twistedmatrix.com> wrote:
> On Mar 16, 2014, at 1:48 PM, exarkun at twistedmatrix.com wrote:
>
> I know it's easier to start a fresh document (this time it'll work for
> sure!) but please consider that this strategy may actually not produce the
> best results (it may in fact be the strategy that produced the current state
> of affairs).
>
>
> I don't have a lot to comment on this but it really bears repeating.
>
> This problem is also not unique to Twisted; see also
> <https://xkcd.com/927/>.

Agreed and understood. I will try to work on updating the current wiki pages.

Thanks!

-- 
Adi Roiban



From jonas.brunsgaard at gmail.com  Mon Mar 17 07:02:52 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Mon, 17 Mar 2014 14:02:52 +0100
Subject: [Twisted-Python] Getting the options object from the service
Message-ID: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>

Hello Everybody

What is the prefered way to get the options object from the servicemaker
when using twistd plugins.

I guess i could access the object via

from twisted.plugins.my_plugin import myServiceMaker
options = myServicemMaker.options

But is there a better way to do it? Somthing like

from somwhere import get_service_config()
options =  get_service_config()

All the best

--
Brunsgaard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140317/5eda2d2e/attachment-0002.html>

From _ at lvh.io  Mon Mar 17 07:20:31 2014
From: _ at lvh.io (Laurens Van Houtven)
Date: Mon, 17 Mar 2014 14:20:31 +0100
Subject: [Twisted-Python] Getting the options object from the service
In-Reply-To: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
References: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
Message-ID: <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>

Hi Jonas,


I strongly prefer to pass the options around (through the Service objects
you're making) rather than relying on the global state of the plugin
instance.


hth
lvh



On Mon, Mar 17, 2014 at 2:02 PM, Jonas Brunsgaard <
jonas.brunsgaard at gmail.com> wrote:

> Hello Everybody
>
> What is the prefered way to get the options object from the servicemaker
> when using twistd plugins.
>
> I guess i could access the object via
>
> from twisted.plugins.my_plugin import myServiceMaker
> options = myServicemMaker.options
>
> But is there a better way to do it? Somthing like
>
> from somwhere import get_service_config()
> options =  get_service_config()
>
> All the best
>
> --
> Brunsgaard
>
>
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140317/54dccdce/attachment-0002.html>

From glyph at twistedmatrix.com  Mon Mar 17 21:29:55 2014
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 17 Mar 2014 20:29:55 -0700
Subject: [Twisted-Python] git?
In-Reply-To: <20140317043428.GB28733@danio.home>
References: <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk> <53215AED.2070800@atleastfornow.net>
 <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
 <20140317024719.GA28733@danio.home> <20140317043428.GB28733@danio.home>
Message-ID: <1844282F-6988-46FB-B757-194368C3E668@twistedmatrix.com>


On Mar 16, 2014, at 9:34 PM, Jonathan Ballet <jon at multani.info> wrote:

> So, how useful is that module at that moment?

I guess we can declare this functionality not a blocker, then.

As a low priority thing it would be nice to get it back and to get the git equivalent somehow later.

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140317/c1f03f50/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140317/c1f03f50/attachment-0002.bin>

From sank.daniel at gmail.com  Mon Mar 17 22:10:58 2014
From: sank.daniel at gmail.com (Daniel Sank)
Date: Mon, 17 Mar 2014 21:10:58 -0700
Subject: [Twisted-Python] object identify and lifecycle in pb
Message-ID: <CAKN9TD+ZTQo2xNpekWu9b6wS10dUat4=UMwOZozoFtHS5JtYyQ@mail.gmail.com>

Dear Twisted users,

I have been writing a developer library under pb and I've come to a
problem that I don't know how to solve. I suspect folks here will have
dealt with similar problems so I want to get your advice. This is a
long post so I've put specific questions on their own lines.

Suppose we're part of a society of spies. We desire to possess top
secret Widgets. Widgets can be purchased from a black market, or
obtained from other spies. Suppose we implement this by having Widget
inheret from pb.Cacheable. When I buy a Widget from the black market I
am passed a pb.RemoteCache of that Widget. We use Cacheable so that
when the Widget receives a top secret message, my RemoteCache is
notified of the message. Now suppose I give my Widget to my trusted
co-spy Glyph. On the network this is implemented by passing Glyph a
RemoteCache of that Widget and by remembering to stop updating my
RemoteCache, since I'm no longer in posession of the Widget. This
could be done simply by keeping a .owner attribute on the Widget so
that it knows whos RemoteCache to update when secret messages come in.

Now suppose it turns out Glyph is a traitor and secretly gives the
Widget to Mr. Evil. Again, the Widget's .owner attribute changes and
everything seems hunky dory. The problem comes in when I infiltrate
Mr. Evil's castle and steal the Widget. The server passes me a
reference to the Widget which, because of the way pb works, I can
immediately identify as the same widget I originally gave Glyph,
allowing me to identify him as a traitor. This is bad because my
ability to trace the Widget comes from pb, not from my own decision to
give (or not give) the Widgets distinguishing characteristics.

Q1: Is there a simple solution to this problem?

My idea is to have each Widget implemented as a vanilla object that
knows nothing about pb or the network, but which can (through
extension in a subclass) create pb objects as users need them. The
problem I'm having with that idea is that I haven't figured out a
reasonable to distribute the network layer objects, particularly in
cases in which objects "contain" one another. Let's try an example.
First we have a vanilla Widget

class Widget(object):
    def __init__(self):
        owner = None

    def receiveMessage(self, msg):
        print("Widget received message: %s"%(msg,))


Next we need to extend this object so that it can spawn and interact
with network-layer objects. To do this we add two features

1) We use a decorator that allows methods to notify other observing
methods when they are run. For a possible implementation see the
"obsub" module on PyPI. I have my own implementation for reasons.

2) We add a method that spawns network layer objects.

class FeaturefulWidget(Widget):

    networkClass = WidgetNetwork

    @event #Allows other bound methods to observe this method
    def receiveMessage(self, msg):
        return Widget.receiveMessage(self, msg)

    def makeNetworkModel(self):
        return self.networkClass(self)

    def addCallback(self, methodName, callback):
        """
        Sign up a callback to be invoked when a method decorated by @event
        is called

        methodName: the name of the method to be observed on the present object.
        callback: The thing to call when methodName is invoked.
        """
        <just trust me that this works>


Now we can make the actual cacheable object,

class WidgetNetworkModel(pb.Cacheable):
    def __init__(self, obj):
        self.obj = weakref.proxy(obj)
        # Sign up our receiveMessage method to be called whenever
        # obj.receiveMessage is called.
        obj.addCallback("receiveMessage", self.receiveMessage)
        # The usual set of observers needed by a pb.Cacheable
        self.observers = weakref.WeakKeyDictionary{} #perspective -> observer

    def getStateToCacheAndObserveFor(self, perspective, observer):
        self.observers[p] = observer
        # Get state data from the actual object
        return {'some key': self.obj.someData, etc.}

    def receiveMessage(self, msg):
        for p in self.observers:
            <possibly decide whether p should know about this message>
            self.observers[p].callRemote("receiveMessage", msg)


and its remote cache,

class WidgetRemoteCache(pb.RemoteCache):
    def setCopyableState(self, state):
        for k, v in state.items():
            setattr(self, k, v)

    def observe_receiveMessage(self, msg):
        print("Top secret message received: %s"%(msg,))


In an application we would work most directly with FeaturefulWidget.
When a user gets its hands on a particular instance of
FeaturefulWidget called myWidget, we would either pass or return
myWidget.makeNetworkModel().

Q2: Is there a good mental framework we can use to decide when to make
new network models and when to pass multiple remote references to the
same one?

Q3: We had a line in getStateToCacheAndObserveFor where we put
self.obj.someData in a dict to pass over the wire. In many cases
objects will contain other objects that should be networkified before
they can be passed over the wire. Certainly we can manually put
self.obj.someData.makeNetworkModel() into the dict as necessary, but I
wonder if there's a nice way to handle this sort of thing.

Thanks!

Daniel



From jonas.brunsgaard at gmail.com  Tue Mar 18 17:35:13 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 00:35:13 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <5320E123.70003@simplistix.co.uk>
References: <5320E123.70003@simplistix.co.uk>
Message-ID: <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>

I think that it is a shame that Twisted is not on Github(Yep Github, not
just git)

If we make a comparison between SVN and Git, I think it is obvious that Git
is the superior VCS.

That said, I think Github  - as a platform - creates a certain "feeling" of
openness, transparency, accessibility and recognisability.

All things, that make new users of twisted feel better about the project.

As an example I think that most developers know how to submit PR's via
Github, where I (as an example) don`t know how to submit a patch to Twisted
today(of cause I could read up on it, but i already know the other flow).
And that could hold back some people from submitting bugfixes etc.

I feel many developers see Twisted as good and stable, but also a little
'dusty' and old, and I think that a move to Github would bring more code
submitters, more discussions, more accessibility and more '
genereldevelopment' in the project.

For that reasons I feels like it may be a good idea to move twisted to
Github.

If at some point the core dev team decides that such a move should happen,
I would love to help with the movement of issues etc.(all the slave work
:)) (and I think others outside the core team would be willing to help out
too)

That is my view on the case, how does your guys feel about my view on this
matter?

All the best

--
brunsgaard



On Wed, Mar 12, 2014 at 11:35 PM, Chris Withers <chris at simplistix.co.uk>
 wrote:

> Hi All,
>
> Is there a git mirror of the twisted repo anywhere?
>
> Chris
>
> --
> Simplistix - Content Management, Batch Processing & Python Consulting
>             - http://www.simplistix.co.uk
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140319/54781326/attachment-0002.html>

From jonas.brunsgaard at gmail.com  Tue Mar 18 17:39:54 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 00:39:54 +0100
Subject: [Twisted-Python] Getting the options object from the service
In-Reply-To: <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>
References: <CACVXvXra5RKdOXbrHaEZydvPZechEDsU_p1eTYM7BSCiXSHY7A@mail.gmail.com>
 <CAE_Hg6ZoF_1bfnxwaKn7D8VwyU4AQ4B8g09u9dsiu0otnTN-FA@mail.gmail.com>
Message-ID: <CACVXvXrXZ_GR+zPc+C33okL4dzrDFYzpjvb-=LRiM4GpPTWD7A@mail.gmail.com>

lvh, thanks for your answer.

I will keep parsing the options object around.


On Mon, Mar 17, 2014 at 2:20 PM, Laurens Van Houtven <_ at lvh.io> wrote:

> Hi Jonas,
>
>
> I strongly prefer to pass the options around (through the Service objects
> you're making) rather than relying on the global state of the plugin
> instance.
>
>
> hth
> lvh
>
>
>
> On Mon, Mar 17, 2014 at 2:02 PM, Jonas Brunsgaard <
> jonas.brunsgaard at gmail.com> wrote:
>
>> Hello Everybody
>>
>> What is the prefered way to get the options object from the servicemaker
>> when using twistd plugins.
>>
>> I guess i could access the object via
>>
>> from twisted.plugins.my_plugin import myServiceMaker
>> options = myServicemMaker.options
>>
>> But is there a better way to do it? Somthing like
>>
>> from somwhere import get_service_config()
>> options =  get_service_config()
>>
>> All the best
>>
>> --
>> Brunsgaard
>>
>>
>>
>>
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>>
>>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140319/c087848c/attachment-0002.html>

From radix at twistedmatrix.com  Tue Mar 18 17:51:22 2014
From: radix at twistedmatrix.com (Christopher Armstrong)
Date: Tue, 18 Mar 2014 18:51:22 -0500
Subject: [Twisted-Python] git?
In-Reply-To: <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
Message-ID: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>

On March 18, 2014 at 6:38:42 PM, Jonas Brunsgaard (jonas.brunsgaard at gmail.com) wrote:
I think that it is a shame that Twisted is not on Github(Yep Github, not just git)

If we make a comparison between SVN and Git, I think it is obvious that Git is the superior VCS.

That said, I think Github  - as a platform - creates a certain "feeling" of openness, transparency, accessibility and recognisability.

All things, that make new users of twisted feel better about the project.

As an example I think that most developers know how to submit PR's via Github, where I (as an example) don`t know how to submit a patch to Twisted today(of cause I could read up on it, but i already know the other flow). And that could hold back some people from submitting bugfixes etc.


I think accepting PRs via Github would be a huge benefit to Twisted.





I feel many developers see Twisted as good and stable, but also a little 'dusty' and old, and I think that a move to Github would bring more code submitters, more discussions, more accessibility and more ' generel development' in the project.

For that reasons I feels like it may be a good idea to move twisted to Github.

If at some point the core dev team decides that such a move should happen, I would love to help with the movement of issues etc.(all the slave work :)) (and I think others outside the core team would be willing to help out too) 
While I doubt Twisted would move to Github’s pretty poor issue tracker, there is already some agreement that Twisted should be moved to github inasmuch that PRs should reasonably be integrated into the workflow.

There are already some tickets on the Twisted tracker about a move to Git. I’m sure your help would be greatly appreciated :-)

Here’s a wiki page where some of the tickets are linked: https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit


-- 
Christopher Armstrong
http://twitter.com/radix
http://wordeology.com/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140318/0a38b100/attachment-0002.html>

From jonas.brunsgaard at gmail.com  Tue Mar 18 18:11:00 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Wed, 19 Mar 2014 01:11:00 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
 <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
Message-ID: <CACVXvXrbbw6pch2BEhfituzCqBJh6fsY8VQh_tCTKysT9t_OzA@mail.gmail.com>

On Wed, Mar 19, 2014 at 12:51 AM, Christopher Armstrong <
radix at twistedmatrix.com> wrote:

> On March 18, 2014 at 6:38:42 PM, Jonas Brunsgaard (
> jonas.brunsgaard at gmail.com) wrote:
>
> I think that it is a shame that Twisted is not on Github(Yep Github, not
> just git)
>
> If we make a comparison between SVN and Git, I think it is obvious that
> Git is the superior VCS.
>
> That said, I think Github  - as a platform - creates a certain "feeling"
> of openness, transparency, accessibility and recognisability.
>
> All things, that make new users of twisted feel better about the project.
>
> As an example I think that most developers know how to submit PR's via
> Github, where I (as an example) don`t know how to submit a patch to
> Twisted today(of cause I could read up on it, but i already know the other
> flow). And that could hold back some people from submitting bugfixes etc.
>
>
> I think accepting PRs via Github would be a huge benefit to Twisted.
>
>
> I feel many developers see Twisted as good and stable, but also a little
> 'dusty' and old, and I think that a move to Github would bring more code
> submitters, more discussions, more accessibility and more ' generel development'
> in the project.
>
> For that reasons I feels like it may be a good idea to move twisted to
> Github.
>
> If at some point the core dev team decides that such a move should
> happen, I would love to help with the movement of issues etc.(all the
> slave work :)) (and I think others outside the core team would be willing
> to help out too)
>
> While I doubt Twisted would move to Github’s pretty poor issue tracker,
> there is already some agreement that Twisted should be moved to github
> inasmuch that PRs should reasonably be integrated into the workflow.
>
> There are already some tickets on the Twisted tracker about a move to Git.
> I’m sure your help would be greatly appreciated :-)
>
> Here’s a wiki page where some of the tickets are linked:
> https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit
>
Thank you for the link.

I just realised that Gmail - for some strange reason - did not remove the
coloring after my spellcheck. I am sorry for the inconvenience (I feel
dumb!)



>
> --
> Christopher Armstrong
> http://twitter.com/radix
> http://wordeology.com/
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140319/dd0fce19/attachment-0002.html>

From adi at roiban.ro  Wed Mar 19 02:46:21 2014
From: adi at roiban.ro (Adi Roiban)
Date: Wed, 19 Mar 2014 10:46:21 +0200
Subject: [Twisted-Python] git?
In-Reply-To: <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
References: <5320E123.70003@simplistix.co.uk>
 <CACVXvXqSwvdVtFk=L-a+wHOF_Mn+y2aKcSsF1MK3zAkvgQsfNQ@mail.gmail.com>
 <etPan.5328dbfa.6b8b4567.6bfd@densetsu>
Message-ID: <CAFycZ9dKy6Sh+GVnqrAt3RFix4fE2Wn6=dPCasHsObNNdFyQpA@mail.gmail.com>

On 19 March 2014 01:51, Christopher Armstrong <radix at twistedmatrix.com> wrote:
[snip]
> That said, I think Github  - as a platform - creates a certain "feeling" of
> openness, transparency, accessibility and recognisability.

Well.. it depends! GitHub is closed source and for any change you are
at the mercy of GitHub developers or rely on GitHub API + external
hacks to do what you want.

This does not mean that Twisted can not be moved to GitHub... but I am
not sure about the open part.
GitHub ticket management is mediocre but I don't see any advanced
ticket handling in Twisted's Trac either.

<snip>
> I think accepting PRs via Github would be a huge benefit to Twisted.
>
> I feel many developers see Twisted as good and stable, but also a little
> 'dusty' and old, and I think that a move to Github would bring more code
> submitters, more discussions, more accessibility and more ' generel
> development' in the project.
>
> For that reasons I feels like it may be a good idea to move twisted to
> Github.
>
> If at some point the core dev team decides that such a move should happen, I
> would love to help with the movement of issues etc.(all the slave work :))
> (and I think others outside the core team would be willing to help out too)

Me too. Happy to do the slave work!

For my project, I already do something similar.
I have a git *mirror* on GitHub, tickets in Trac and reviews over GitHub.
Using Trac-API and GitHub-API I keep trac ticket in sync with GitHub
pull request activity.

As a non comitter sending patches and now reviewing patches is not fun...
and I think that contributing to open source project should be fun.

> While I doubt Twisted would move to Github’s pretty poor issue tracker,
> there is already some agreement that Twisted should be moved to github
> inasmuch that PRs should reasonably be integrated into the workflow.

Even if Twisted would completely move to GitHub, I think is very hard
to do this move all at once.
This is why, for me, it makes much sense to migrate review process,
tickets, wiki (if required), website as independent steps.
GitHub API and hooks are great and can help keep things in sync while
the transition is done.

I have not done any work in helping move reviews to GitHub since the
CONTRIBUTING file contains a bold warning

**Warning: pull requests are ignored!**

This read to me like : Hey you fad driven developer! Stop using this
fancy new, git,  GitHub and PR things and go user our old good Trac
and SVN tools.

This is not a complain, just well intention feedback!

Looking forward for working with Pull Requests in Twisted :)


-- 
Adi Roiban



From hawkowl at atleastfornow.net  Wed Mar 19 08:35:32 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 19 Mar 2014 22:35:32 +0800
Subject: [Twisted-Python] Twisted 14.0.0-pre1 Announcement
Message-ID: <FB78F694-DD64-4A6F-A308-A325D6EFBBF4@atleastfornow.net>

I am pleased to announce that the first prerelease of Twisted 14.0 is hot off the code presses for testing!

Tarballs for this prerelease can be found at <http://twistedmatrix.com/Releases/pre/14.0.0pre1>, with the changelog at <http://twistedmatrix.com/Releases/pre/14.0.0pre1/NEWS.txt>.

Highlights include:

-Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair’s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

For more information and a full list of changes, check the NEWS.txt file.

Please download the tarballs and test them with your applications, so we can make sure we’re all ready for release!

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140319/dc31c1e2/attachment.sig>

From hawkowl at atleastfornow.net  Wed Mar 19 08:43:29 2014
From: hawkowl at atleastfornow.net (HawkOwl)
Date: Wed, 19 Mar 2014 22:43:29 +0800
Subject: [Twisted-Python] Twisted 14.0.0-pre1 Announcement
Message-ID: <D82627C2-116D-408E-B1C7-1BC68D4AE37D@atleastfornow.net>

I am pleased to announce that the first prerelease of Twisted 14.0 is hot off the code presses for testing!

Tarballs for this prerelease can be found at <http://twistedmatrix.com/Releases/pre/14.0.0pre1>, with the changelog at <http://twistedmatrix.com/Releases/pre/14.0.0pre1/NEWS.txt>.

Highlights include:

-Twisted Positioning (`twisted.positioning`) makes its entry into Twisted! It comes ready to talk with common GPS devices, and will supersede `twisted.protocols.gps`.

- A wealth of SSL/TLS improvements, including ECDHE support, a stronger default set of ciphers, and strengthening against attacks such as CRIME. A Twisted Web server with pyOpenSSL 0.14 is capable of getting an A in Qualys SSL Labs tests.

- Python 3 improvements, including the ability for `pip install` to install all ported modules.

- Twisted Pair’s TUN/TAP support has been overhauled, with documentation and full test coverage.

- Significant documentation improvements, including more API documentation for Twisted Mail & Twisted Names, narrative documentation for Twisted Names, and a migration to Sphinx for building Twisted narrative docs.

For more information and a full list of changes, check the NEWS.txt file.

Please download the tarballs and test them with your applications, so we can make sure we’re all ready for release!

-hawkowl
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: </pipermail/twisted-python/attachments/20140319/8765081f/attachment.sig>

From chris at simplistix.co.uk  Thu Mar 20 01:57:51 2014
From: chris at simplistix.co.uk (Chris Withers)
Date: Thu, 20 Mar 2014 07:57:51 +0000
Subject: [Twisted-Python] git?
In-Reply-To: <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <77489872-8006-4B91-9FD3-3324BD865FF1@twistedmatrix.com>
Message-ID: <532A9F7F.5030305@simplistix.co.uk>

On 13/03/2014 19:38, Glyph Lefkowitz wrote:
> On Mar 12, 2014, at 11:53 PM, Chris Withers <chris at simplistix.co.uk
> <mailto:chris at simplistix.co.uk>> wrote:
>
>> Not to be too contentious, but when do you reckon you guys will switch
>> the main repo to git?
>
> Just to be clear about the nature of my other answers: we do not
> "reckon" such a thing will happen; we have no estimates.  Things get
> done because volunteers do them.  You could be just such a volunteer :).

I've read up on the thread and it's interesting to note that Mike Bayer 
has poured a huge amount of effort into doing the move for SQLAlchemy, 
producing some great tools in the process. I believe he now has 3 git 
repos that keep each other in sync, as well as accepting pull requests 
via both bitbucket and github.

I asked him about it and checked that it was okay to forward on his 
reply, please find it attached.

Hope this helps,

Chris

-- 
Simplistix - Content Management, Batch Processing & Python Consulting
             - http://www.simplistix.co.uk
-------------- next part --------------
An embedded message was scrubbed...
From: Michael Bayer <mike_mp at zzzcomputing.com>
Subject: Re: [Twisted-Python] git?
Date: Thu, 13 Mar 2014 11:43:22 -0400
Size: 10015
URL: </pipermail/twisted-python/attachments/20140320/5860ae6f/attachment-0002.mht>

From jonas.brunsgaard at gmail.com  Thu Mar 20 04:09:57 2014
From: jonas.brunsgaard at gmail.com (Jonas Brunsgaard)
Date: Thu, 20 Mar 2014 11:09:57 +0100
Subject: [Twisted-Python] git?
In-Reply-To: <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
References: <5320E123.70003@simplistix.co.uk>
 <etPan.5320e315.625558ec.b2b@densetsu>
 <71210003-11F6-4C74-A764-75D573F77954@twistedmatrix.com>
 <532155F9.5000301@simplistix.co.uk>
 <53215AED.2070800@atleastfornow.net> <20140313110416.GA21387@danio.home>
 <CAE_Hg6ai=EFhcAOoJHc6WcY-mjU5dpHBN+FVmGOGPjzpRTNPwg@mail.gmail.com>
 <E861D27F-F64F-4EFD-84C8-74B5BD89BBD4@twistedmatrix.com>
 <20140316073131.GB16759@danio.home>
 <927A452C-12CB-4E8A-91A0-D1DC5AF28BBC@twistedmatrix.com>
Message-ID: <CACVXvXoO3-ZNW4EGN_QJzsN-1m4NcfYFwL8j2ab9dRwPQYLfqQ@mail.gmail.com>

On Sun, Mar 16, 2014 at 9:12 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Mar 16, 2014, at 12:31 AM, Jonathan Ballet <jon at multani.info> wrote:
>
> Hi Glyph,
>
> On Thu, Mar 13, 2014 at 12:35:17PM -0700, Glyph Lefkowitz wrote:
>
>
> If someone would like to turn this list into a wiki page under <
> https://twistedmatrix.com/trac/wiki/Infrastructure> that would be great,
> so it could be updated with anything I've forgotten. Right now there's the
> beginnings of a SwitchToBazaar which should probably be deleted, since
> we're not going to do that.
>
>
> I don't have edit permissions on the wiki, so I took the list of stuff
> you mentionned here and made a wiki page joined to this email.
>
>
> What's your username?  The only reason we even have edit permissions is to
> prevent spamming, anyone may ask for edit permission at any time :-).
>

I would like edit permissions too, my username is brunsgaard.


> Compared to the SwitchToBazar page, here are the things which are
> missing from your email - I don't know how relevant they are though:
>
> * mailer post-commit hook
>
>
> Yeah, we probably need this.  It seems like this ought to be pretty
> trivial to set up in git though :-).
>
> * the release scripts
>
>
> Oh, good point.  These rely fairly lightly on svn, but the dependency is
> there.
>
> This would be a good place to start.  Unfortunately, since tagging works
> differently in svn and git, I don't think we can simply start doing the
> release out of git without a repository to push to.  If I'm wrong about
> this, so much the better, and we could actually start having release
> managers use git if they like :).  Regardless, all the code to do so could
> be tested and landed as a normal development task with no administrative
> blockers, so this might be a good place for someone interested in moving
> the process along to start.
>
> * the developer documentation (I guess that should be done)
>
>
> The developer documentation is already so bad (as Adi Roiban has pointed
> out) that it wouldn't make sense to block migrating to git on a
> comprehensive upgrade.
>
> * figure the version number from Git instead of Subversion
>
>
> This would be an even more straightforward patch to Twisted, in
> twisted.python.versions.
>
> * decide what to do with Combinator
>
>
> I think Combinator is an evolutionary dead end at this point.  Tools like
> virtualenv, virtualenvwrapper, pyenv,
>
> There might be still some editing to do but that could be a start.
>
>
> I've deleted the SwitchToBazaar page and, for now, uploaded your proposal
> at <https://twistedmatrix.com/trac/wiki/Infrastructure/SwitchToGit>.
>  Hopefully someone (maybe me) can give you edit permission as soon as you
> announce your username :).
>
> Thanks for your contribution,
>
> -glyph
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140320/b9b8002c/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 23 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 23 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1395554715.86.7646671211504762427@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140323/c220d2de/attachment-0002.html>

From glyph at twistedmatrix.com  Thu Mar 27 15:21:30 2014
From: glyph at twistedmatrix.com (Glyph Lefkowitz)
Date: Thu, 27 Mar 2014 14:21:30 -0700
Subject: [Twisted-Python] a reminder about Deferreds in tests
Message-ID: <FDC4D775-0910-4ABA-831C-EAF9FD55B800@twistedmatrix.com>

I'm not sure if we've written this down anywhere official-looking, but if you're writing new tests in Twisted today, there is no reason that they should ever return a Deferred.

Returning Deferreds from tests in Trial is useful _only_ for writing integration tests that rely on external services which cannot be reasonably implemented or faked within Twisted itself.  In some applications, this is an unfortunate fact of life, which is why Trial provides the feature and will continue to provide it.  For example, writing unit tests for a database-backed application which depends intimately upon stored procedures would require altogether too much mocking and it's useful to be able to simply call out to the real database within tests.  However, this is assuming that you can run your database locally in isolation as part of your test suite, and there is absolutely no non-determinism present in the application's communications with its database.

However, there is nothing like this within Twisted itself.  In extreme cases where you actually need to test real platform interactions, you can instantiate a reactor for your test and iterate it as the ReactorBuilder tests do, but in any case where you're testing a client/server interaction, parsing bytes, etc, you can use twisted.test.proto_helpers or twisted.test.iosim.  In the branch I'm working on right now I'm moving some more general testing utilities from individual tests over to twisted.test.ssl_helpers as well, so it should be easy to test any TLS interactions you might have as well.  (Note, these are for testing within Twisted only right now, at some point we need to clean up all the generally-useful things in twisted.test, including proto_helpers, put them in a module outside of *.test...)

To sum up: there is absolutely no reason whatsoever to ever use loopbackAsync, please don't ever use it in a new test.

Thanks,

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140327/928fb165/attachment-0002.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4124 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20140327/928fb165/attachment-0002.bin>

From kebin70 at gmail.com  Fri Mar 28 14:36:11 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 28 Mar 2014 13:36:11 -0700
Subject: [Twisted-Python] stmp client with multipart
Message-ID: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>

How can I get something similar into a smtp client 12? multipart message

    fn = "example.mp3"
    multipart = MIMEMultipart('alternative')
    multipart['Subject'] = 'Tutorate!'
    multipart['To'] = 'Selfie'
    multipart['From'] = 'Selfie'

    text = "Hello, how are you, goodbye."
    textpart = MIMEText(text)
    multipart.attach(textpart)
    htmlpart = MIMEText("<html>" + text + "</html>", 'html')
    multipart.attach(htmlpart)

    part = MIMEBase('audio', "mp3")
    part.set_payload( open(fn,"rb").read() )
    Encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="%s"' %
os.path.basename(fn))
    multipart.attach(part)

    io = StringIO.StringIO()
    g = Generator(io, False)
    g.flatten(multipart)
    v = io.getvalue()

    class SMTPTutorialClient(smtp.ESMTPClient):
        mailFrom = "mg_selfie@ <mg_selfie at scewpt.com>"
        mailTo = "mg@ <mg at scewpt.com>"
        def getMailFrom(self):
            result = self.mailFrom
            self.mailFrom = None
            return result

        def getMailTo(self):
            return [self.mailTo]

        def getMailData(self):
            print v
            return StringIO.StringIO(v)

        def sentMail(self, code, resp, numOk, addresses, log):
            print 'Sent', numOk, 'messages'

            from twisted.internet import reactor
            reactor.stop()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140328/e1bcedee/attachment-0002.html>

From exarkun at twistedmatrix.com  Fri Mar 28 16:12:10 2014
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Mar 2014 22:12:10 -0000
Subject: [Twisted-Python] stmp client with multipart
In-Reply-To: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
References: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
Message-ID: <20140328221210.6123.983812610.divmod.xquotient.12@top>

On 08:36 pm, kebin70 at gmail.com wrote:
>How can I get something similar into a smtp client 12? multipart 
>message

Hi Kevin,

MIME and SMTP are at different layers.

Twisted's SMTP client doesn't care what bytes you shove through it. 
They're just bytes.  They can be MIME or not.  Construct the bytes using 
the stdlib's MIME functionality if you want - once you have the bytes, 
the way you use them with Twisted's SMTP client is the same no matter 
what they are.

Jean-Paul



From kebin70 at gmail.com  Fri Mar 28 18:22:37 2014
From: kebin70 at gmail.com (Kevin Mcintyre)
Date: Fri, 28 Mar 2014 17:22:37 -0700
Subject: [Twisted-Python] stmp client with multipart
In-Reply-To: <20140328221210.6123.983812610.divmod.xquotient.12@top>
References: <CAA-sNEZ6fFt5oxv7vVCk4Xw5Qkf0=ZYacUY_or57riVs4yD2uw@mail.gmail.com>
 <20140328221210.6123.983812610.divmod.xquotient.12@top>
Message-ID: <CAA-sNEZFPf9Ok4NOvipS0Sgfm3JtNLxa9Qfw3ZN0ot7NPGmCqg@mail.gmail.com>

ah, it just seems like the next smtp client (potentially 12) from the
samples could be multipart mime.


On Fri, Mar 28, 2014 at 3:12 PM, <exarkun at twistedmatrix.com> wrote:

> On 08:36 pm, kebin70 at gmail.com wrote:
>
>> How can I get something similar into a smtp client 12? multipart message
>>
>
> Hi Kevin,
>
> MIME and SMTP are at different layers.
>
> Twisted's SMTP client doesn't care what bytes you shove through it.
> They're just bytes.  They can be MIME or not.  Construct the bytes using
> the stdlib's MIME functionality if you want - once you have the bytes, the
> way you use them with Twisted's SMTP client is the same no matter what they
> are.
>
> Jean-Paul
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140328/61688b40/attachment-0002.html>

From trac at twistedmatrix.com  Sun Mar 30 00:05:15 2014
From: trac at twistedmatrix.com (trac at twistedmatrix.com)
Date: Sun, 30 Mar 2014 06:05:15 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1396159515.02.8213655968496825133@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140330/d355ce6a/attachment-0002.html>

From yangyouxiu at gmail.com  Mon Mar 31 19:45:23 2014
From: yangyouxiu at gmail.com (yangyouxiu)
Date: Tue, 1 Apr 2014 09:45:23 +0800
Subject: [Twisted-Python] Using  cred, how to prevent the user repeat-login?
Message-ID: <2014040109441449639711@gmail.com>

In my Client-Server Application,I do not want two user login with the same login name.

For example, user1 logined with name "test1",then user2 try to login with "test1" too, the login of user2 should be denied. At now, my code could not achieve this goal,so what's the method.
Thanks all!

The following is server code:
-----------------------------------------------------------------------------
class simulationServer:
    def __init__(self):
        self.groups = {} # indexed by name
        self.groups['#admin']= Group('#admin')
        self.groups['#general']=Group('#general')
    def joinGroup(self, groupname, user):
        if groupname not in self.groups:
            self.groups[groupname] = Group(groupname)
        self.groups[groupname].addUser(user)
        return self.groups[groupname]
    def leaveGroup(self, groupname, user):
        self.groups[groupname].delUser(user)
        return self.groups[groupname]
    def getGroup(self, admin=False):
        if admin==True:
            return self.groups['#admin']
        return self.groups['#general']

class simulRealm:
    implements(portal.IRealm)
    def requestAvatar(self, avatarID, mind, *interfaces):
        assert pb.IPerspective in interfaces
        avatar = User(avatarID)
        avatar.server = self.server
        avatar.attached(mind)
        return pb.IPerspective, avatar, lambda a=avatar:a.detached(mind)
        
class User(pb.Avatar):
    def __init__(self, name):
        self.name = name
        self.group=None
        self.status=False  #False: general client user not sync yet 
        self.serverRoot=ServerRoot()
    def attached(self, mind):
        self.remote = mind
    def detached(self, mind):
        print '%s detached...'%self.name
        self.server.leaveGroup(self.group, self)
        self.server.messageClientUserupdated()
        self.remote = None
    def perspective_joinGroup(self, groupname):
        print 'joined Group on Server Machine '
        print groupname
        self.group=groupname
        self.server.joinGroup(groupname, self)
        self.server.messageClientUserupdated()
        return groupname
    def perspective_getServerRoot(self):
        return self.serverRoot
    def getClientRoot(self):
        return self.remote
    def perspective_updateStatus(self):
        self.status=True  # user sync

class Group(pb.Viewable):
    def __init__(self, groupname):
        self.name = groupname
        self.users = []
    def addUser(self, user):
        self.users.append(user)
    def delUser(self, user):
        self.users.remove(user)
    def getallUsers(self):
        return self.users
    def getnotSyncUsers(self):
        nosyncusers=[]
        if self.users:
            for user in self.users:
                if not user.status:
                    nosyncusers.append(user)
        return nosyncusers
    def getUsers(self):
            syncusers=[]
            if self.users:
                for user in self.users:
                    if user.status:
                        syncusers.append(user)
            return syncusers
-----------------------------------------------------------------------------
Client code:
def1 = factory.login(credentials.UsernamePassword(self.group+'_'+self.UserNameandPwd[0], self.UserNameandPwd[1]), client=self)
def1.addCallback(self.connected)
def1.addErrback(self.connectFailure)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20140401/a50566ac/attachment-0002.html>

