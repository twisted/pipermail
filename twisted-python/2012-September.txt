From linshuai2012 at gmail.com  Sat Sep  1 01:30:35 2012
From: linshuai2012 at gmail.com (Shuai Lin)
Date: Sat, 1 Sep 2012 13:30:35 +0800
Subject: [Twisted-Python] blocking code alongside with Twisted
Message-ID: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>

Hi all,

    My server mainly consists of two modules:
    -- http api handling (using twisted)
    -- backend blocking tasks

    The backend tasks have to block, because I have to call some
third-party API, which is always blocking. What's more, since the
third-party api call is blocking, I plan to use a thread pool to implement
a connection pool.

    My question is: Is it ok to use twisted in this manner?  i.e. I just
run `reactor.run()' in the main thread (to handle the http api request),
and the rest of the program is  blocking -- and intrinsically not related
to twisted.

    Any suggestion is appreciated. Thanks!

Lin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120901/7603d29a/attachment.htm 

From glyph at twistedmatrix.com  Sat Sep  1 01:53:11 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 31 Aug 2012 22:53:11 -0700
Subject: [Twisted-Python] blocking code alongside with Twisted
In-Reply-To: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
References: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
Message-ID: <6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>


On Aug 31, 2012, at 10:30 PM, Shuai Lin <linshuai2012 at gmail.com> wrote:

> Hi all,
> 
>     My server mainly consists of two modules: 
>     -- http api handling (using twisted)
>     -- backend blocking tasks
> 
>     The backend tasks have to block, because I have to call some third-party API, which is always blocking. What's more, since the third-party api call is blocking, I plan to use a thread pool to implement a connection pool.
> 
>     My question is: Is it ok to use twisted in this manner?  i.e. I just run `reactor.run()' in the main thread (to handle the http api request), and the rest of the program is  blocking -- and intrinsically not related to twisted.
> 
>     Any suggestion is appreciated. Thanks!

Sure, this is fine.  This is why the reactor has callInThread() after all :).  It may also make sense to use something like Ampoule <https://launchpad.net/ampoule> if the backend tasks are CPU intensive as well, and you want multi-core parallelism.

-glyph

From linshuai2012 at gmail.com  Sat Sep  1 02:04:22 2012
From: linshuai2012 at gmail.com (Shuai Lin)
Date: Sat, 1 Sep 2012 14:04:22 +0800
Subject: [Twisted-Python] blocking code alongside with Twisted
In-Reply-To: <6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>
References: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
	<6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>
Message-ID: <CA+VO6isKkLf+1NezNyTvdz9Kcoc7Pzm3hwpVtR6NHC92XsvXNQ@mail.gmail.com>

Thanks for the quick reply. I don't need Ampoule, since the tasks are
simply calling some libreoffice api to convert documents to pdf format, but
thank you all the same!

On Sat, Sep 1, 2012 at 1:53 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Aug 31, 2012, at 10:30 PM, Shuai Lin <linshuai2012 at gmail.com> wrote:
>
> > Hi all,
> >
> >     My server mainly consists of two modules:
> >     -- http api handling (using twisted)
> >     -- backend blocking tasks
> >
> >     The backend tasks have to block, because I have to call some
> third-party API, which is always blocking. What's more, since the
> third-party api call is blocking, I plan to use a thread pool to implement
> a connection pool.
> >
> >     My question is: Is it ok to use twisted in this manner?  i.e. I just
> run `reactor.run()' in the main thread (to handle the http api request),
> and the rest of the program is  blocking -- and intrinsically not related
> to twisted.
> >
> >     Any suggestion is appreciated. Thanks!
>
> Sure, this is fine.  This is why the reactor has callInThread() after all
> :).  It may also make sense to use something like Ampoule <
> https://launchpad.net/ampoule> if the backend tasks are CPU intensive as
> well, and you want multi-core parallelism.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120901/594374b2/attachment.htm 

From ashwini.oruganti at gmail.com  Sat Sep  1 09:47:05 2012
From: ashwini.oruganti at gmail.com (Ashwini Oruganti)
Date: Sat, 1 Sep 2012 19:17:05 +0530
Subject: [Twisted-Python] Twisted 12.2.0 released
Message-ID: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>

On behalf of Twisted Matrix Laboratories, I am honored to announce the
release of Twisted 12.2.

Highlights for this release include:

  * To be able to work on Python3 support, Python 2.5 is no longer
supported.

  * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
more information and conform to the IMAP4 RFC more closely.

  * twisted.conch now supports commercial SSH implementations which don't
comply with the IETF standard.

  * twisted.internet.endpoints now provides several new endpoints,
including a
TCP client endpoint that resolves hostnames to IPv6 host addresses.

  * IReactorSocket.adoptStreamConnection, implemented by some reactors,
allows adding an existing established connection to the reactor.

Starting with the release after 12.2, Twisted will begin requiring
zope.interface 3.6 (as part of Python 3 support).

This is the last Twisted release supporting Python 2.6 on Windows.

For more information, see the NEWS file here:

 http://twistedmatrix.com/Releases/Twisted/12.2/NEWS.txt


Download it now from:

 http://pypi.python.org/packages/source/T/Twisted/Twisted-12.2.0.tar.bz2 or


http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.exe
 or


http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.msi
 or


http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.exe
 or


http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.msi


Thanks to the supporters of Twisted and to the many contributors for this
release.


--
Ashwini Oruganti
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120901/41708cb5/attachment.htm 

From glyph at twistedmatrix.com  Sat Sep  1 19:54:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 1 Sep 2012 16:54:54 -0700
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <7B6EFE67-8A40-4B1A-B822-87285E68C4FD@twistedmatrix.com>


On Sep 1, 2012, at 6:47 AM, Ashwini Oruganti <ashwini.oruganti at gmail.com> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.

Thanks to everyone who worked on it, and congratulations Ashwini on managing your first release!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120901/6cf8c90f/attachment.htm 

From exarkun at twistedmatrix.com  Sun Sep  2 00:05:29 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Sep 2012 04:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1346558729.85.688322026@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120902/e5ded492/attachment.htm 

From _ at lvh.cc  Sun Sep  2 12:36:27 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 2 Sep 2012 18:36:27 +0200
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <CAE_Hg6ZZxATZL5Trs0Lutk8vQj_BnVh9_ir11+j5Nx40Np_H2A@mail.gmail.com>

Congratulations to the entire team, particularly Ashwini, and thank you for
an awesome release manager job well done, Ashwini :)


On Sat, Sep 1, 2012 at 3:47 PM, Ashwini Oruganti <ashwini.oruganti at gmail.com
> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.
>
> Highlights for this release include:
>
>   * To be able to work on Python3 support, Python 2.5 is no longer
> supported.
>
>   * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
> more information and conform to the IMAP4 RFC more closely.
>
>   * twisted.conch now supports commercial SSH implementations which don't
> comply with the IETF standard.
>
>   * twisted.internet.endpoints now provides several new endpoints,
> including a
> TCP client endpoint that resolves hostnames to IPv6 host addresses.
>
>   * IReactorSocket.adoptStreamConnection, implemented by some reactors,
> allows adding an existing established connection to the reactor.
>
> Starting with the release after 12.2, Twisted will begin requiring
> zope.interface 3.6 (as part of Python 3 support).
>
> This is the last Twisted release supporting Python 2.6 on Windows.
>
> For more information, see the NEWS file here:
>
>  http://twistedmatrix.com/Releases/Twisted/12.2/NEWS.txt
>
>
> Download it now from:
>
>  http://pypi.python.org/packages/source/T/Twisted/Twisted-12.2.0.tar.bz2
>  or
>
>
> http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.exe
>  or
>
>
> http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.msi
>  or
>
>
> http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.exe
>  or
>
>
> http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.msi
>
>
> Thanks to the supporters of Twisted and to the many contributors for this
> release.
>
>
> --
> Ashwini Oruganti
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120902/fb745366/attachment.htm 

From godson.g at gmail.com  Mon Sep  3 03:08:16 2012
From: godson.g at gmail.com (Godson Gera)
Date: Mon, 3 Sep 2012 12:38:16 +0530
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <CAPTXd0rNMbQrk7RmvnO+DVyPQ99WP9Wg-Wr0iUXhNAmN8ieusw@mail.gmail.com>

On Sat, Sep 1, 2012 at 7:17 PM, Ashwini Oruganti <ashwini.oruganti at gmail.com
> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.
>
>
Congrats, Ashwini. adoptStreamConnection is much needed feature, happy to
see that added to this release.

-- 
Thanks & Regards,
Godson Gera
http://godson.in
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120903/bb781fc1/attachment.htm 

From tom.prince at ualberta.net  Sun Sep  2 22:01:35 2012
From: tom.prince at ualberta.net (Tom Prince)
Date: Sun, 02 Sep 2012 20:01:35 -0600
Subject: [Twisted-Python] Buildbot downtime
In-Reply-To: <87d34rt0oj.fsf@hermes.hocat.ca>
References: <87d34rt0oj.fsf@hermes.hocat.ca>
Message-ID: <87r4qjzwxs.fsf@hermes.hocat.ca>

I plan to upgrade twisted's buildbot tomorrow around
Monday, September 3, 16h00 UTC[1].

During that time, the result of any builds done may be lost. Thus, I'd
ask that people avoid committing to trunk during that time.

I will send a reminder before I take down the buildbot both here, and on
#twisted and #twisted-dev.

  Tom

[1] http://timeanddate.com/worldclock/meetingdetails.html?year=2012&month=9&day=3&hour=16&min=0&sec=0&p1=80&p2=224&p3=43


From peter.westlake at pobox.com  Mon Sep  3 12:10:32 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 03 Sep 2012 17:10:32 +0100
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
Message-ID: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>

When I pass twistd the --savestats option to save profile information
as a pstats.Stats object instead of a textual report, the output file
cannot be read:

   import pstats
   p = pstats.Stats(filename)

gives:

   ValueError: bad marshal data (unknown type code)

An output file generated with cProfile.run() can be read.
Running twistd without --savestats generates a valid-looking
textual report.

This is Python 2.7.3, Twisted 12.0.0, on Debian.

Peter.


From tom.prince at ualberta.net  Mon Sep  3 13:25:21 2012
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 03 Sep 2012 11:25:21 -0600
Subject: [Twisted-Python] Buildbot downtime
In-Reply-To: <87r4qjzwxs.fsf@hermes.hocat.ca>
References: <87d34rt0oj.fsf@hermes.hocat.ca> <87r4qjzwxs.fsf@hermes.hocat.ca>
Message-ID: <87ligryq66.fsf@hermes.hocat.ca>

Tom Prince <tom.prince at ualberta.net> writes:
> I will send a reminder before I take down the buildbot both here, and on
> #twisted and #twisted-dev.

Well, so it turns out that the upgrade hapenned before my email got
through. But the upgrade appears to have gone through without issue.

The builbot now requires authentication (u/p: twisted/matrix). The force
build script has been updated:
https://bazaar.launchpad.net/~tom.prince/twisted-trac-integration/updated-force-builds.py/view/head:/tools/force-builds.py

If there are any issue contanct my on #twisted or #twisted-dev (nick: tomprince)

  Tom



From itamar at futurefoundries.com  Tue Sep  4 21:26:13 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 4 Sep 2012 21:26:13 -0400
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
In-Reply-To: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
References: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
Message-ID: <CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>

On Mon, Sep 3, 2012 at 12:10 PM, Peter Westlake <peter.westlake at pobox.com>wrote:

> An output file generated with cProfile.run() can be read.
> Running twistd without --savestats generates a valid-looking
> textual report.
>

This may be because the default profiler twistd uses is hotshot; try
--profiler=cprofile or --profiler=profile.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120904/80bee7df/attachment.htm 

From peter.westlake at pobox.com  Wed Sep  5 06:01:38 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 05 Sep 2012 11:01:38 +0100
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
In-Reply-To: <CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>
References: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
	<CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>
Message-ID: <1346839298.27176.140661123857537.22D220B1@webmail.messagingengine.com>



On Wed, Sep 5, 2012, at 02:26, Itamar Turner-Trauring wrote:
> On Mon, Sep 3, 2012 at 12:10 PM, Peter Westlake
> <peter.westlake at pobox.com>wrote:
> 
> > An output file generated with cProfile.run() can be read.
> > Running twistd without --savestats generates a valid-looking
> > textual report.
> >
> 
> This may be because the default profiler twistd uses is hotshot; try
> --profiler=cprofile or --profiler=profile.

That was it, thanks! I used cprofile, and it works.

Peter.


From _ at lvh.cc  Wed Sep  5 14:41:00 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Sep 2012 20:41:00 +0200
Subject: [Twisted-Python] Getting deprecation warnings?
Message-ID: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>

Hey,


What is the appropriate way to run twistd apps in such a way that I get
nice and loud deprecation warnings?

I ran into an issue with one of my apps with the new release because
t.w.error.NoResource is now t.w.resource.NoResource, I would like to make
my code as forward compatible as possible as we go along, of course :)

(Actually this issue was because I stole some non-released code from #4173,
which wasn't being tested, but the not being tested part is now fixed.)

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120905/b14b8d79/attachment.htm 

From exarkun at twistedmatrix.com  Wed Sep  5 15:11:19 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Sep 2012 19:11:19 -0000
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
Message-ID: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>

On 06:41 pm, _ at lvh.cc wrote:
>Hey,
>
>What is the appropriate way to run twistd apps in such a way that I get
>nice and loud deprecation warnings?

1) Have complete unit test coverage and run your tests with trial.  All 
deprecation warnings will be written out as part of the test suite run.

2) Run twistd with Python 2.6

3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"

Jean-Paul
>I ran into an issue with one of my apps with the new release because
>t.w.error.NoResource is now t.w.resource.NoResource, I would like to 
>make
>my code as forward compatible as possible as we go along, of course :)
>
>(Actually this issue was because I stole some non-released code from 
>#4173,
>which wasn't being tested, but the not being tested part is now fixed.)
>
>--
>cheers
>lvh


From eric at teratorn.org  Tue Sep  4 15:59:14 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Tue, 4 Sep 2012 15:59:14 -0400
Subject: [Twisted-Python] tap2deb problem with building package
In-Reply-To: <CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>
References: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
	<CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>
Message-ID: <20120904195914.GG2116@ragnarok.teratorn.org>

Hi,

On Fri, Aug 31, 2012 at 08:28:41PM +0200, Klaudiusz Staniek wrote:
> Hi
> when I try to build the deb package I'm getting the error message: cp:
> cannot create regular file `debian/tmp/etc/': No such file or
> directory
> 
> What is wrong? See below output:
> Cheers,
> Klaudiusz
> 
> 
> tap2deb --unsigned -m "Klaudiusz Staniek <kstaniek at gmail.com>"
> --type=python -t xplhub.tac
> dpkg-buildpackage: set CFLAGS to default value: -g -O2
> dpkg-buildpackage: set CPPFLAGS to default value:
> dpkg-buildpackage: set LDFLAGS to default value: -Wl,-Bsymbolic-functions
> dpkg-buildpackage: set FFLAGS to default value: -g -O2
> dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
> dpkg-buildpackage: source package twisted-xplhub
> dpkg-buildpackage: source version 1.0
> dpkg-buildpackage: source changed by Klaudiusz Staniek <kstaniek at gmail.com>
> dpkg-buildpackage: host architecture armel
>  fakeroot debian/rules clean
> dh_testdir
> dh_testroot
> rm -f build-stamp install-stamp
> dh_clean
>  dpkg-source -b twisted-xplhub-1.0
> dpkg-source: info: using source format `1.0'
> dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.tar.gz
> dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.dsc
>  debian/rules build
> dh_testdir
> touch build-stamp
>  fakeroot debian/rules binary
> dh_testdir
> dh_testroot
> dh_clean -k
> dh_installdirs
> # Add here commands to install the package into debian/tmp.
> cp xplhub.tac debian/tmp/etc/

In a `rules` file it is usually just as simple as:

mkdir -p debian/tmp/etc

OTOH, there is the debian/<package>.dirs file. Which I believe is preferred in newer versions of debhelper (?)

Oh, and this sounds like a bug - could you file an issue at http://twistedmatrix.com ?

Thanks,
-E


From glyph at twistedmatrix.com  Wed Sep  5 15:55:29 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 12:55:29 -0700
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>


On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:

> On 06:41 pm, _ at lvh.cc wrote:
>> Hey,
>> 
>> What is the appropriate way to run twistd apps in such a way that I get
>> nice and loud deprecation warnings?
> 
> 1) Have complete unit test coverage and run your tests with trial.  All 
> deprecation warnings will be written out as part of the test suite run.
> 
> 2) Run twistd with Python 2.6
> 
> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"

A note for posterity - if we are ever to implement a generalized 'run an inferior twistd process', or even 'run an inferior python interpreter' mechanism, warning information like this is one of the bits of runtime state that ought to be communicated.

-glyph

From exarkun at twistedmatrix.com  Wed Sep  5 16:08:35 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Sep 2012 20:08:35 -0000
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
	<89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
Message-ID: <20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>

On 07:55 pm, glyph at twistedmatrix.com wrote:
>
>On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:
>>On 06:41 pm, _ at lvh.cc wrote:
>>>Hey,
>>>
>>>What is the appropriate way to run twistd apps in such a way that I 
>>>get
>>>nice and loud deprecation warnings?
>>
>>1) Have complete unit test coverage and run your tests with trial. 
>>All
>>deprecation warnings will be written out as part of the test suite 
>>run.
>>
>>2) Run twistd with Python 2.6
>>
>>3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>
>A note for posterity - if we are ever to implement a generalized 'run 
>an inferior twistd process', or even 'run an inferior python 
>interpreter' mechanism, warning information like this is one of the 
>bits of runtime state that ought to be communicated.

It would be nice if Python preserved its own command-line arguments 
somewhere, but it doesn't seem to. :/  So figuring out what the runtime 
state is is somewhat non-trivial in this case.  Otherwise, I completely 
agree.

Jean-Paul
>-glyph
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From glyph at twistedmatrix.com  Wed Sep  5 17:10:29 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 14:10:29 -0700
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
	<89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
	<20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <6C6F0F56-02A6-4227-B3D4-5A7735D113C5@twistedmatrix.com>


On Sep 5, 2012, at 1:08 PM, exarkun at twistedmatrix.com wrote:

> On 07:55 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:
>>> On 06:41 pm, _ at lvh.cc wrote:
>>>> Hey,
>>>> 
>>>> What is the appropriate way to run twistd apps in such a way that I 
>>>> get
>>>> nice and loud deprecation warnings?
>>> 
>>> 1) Have complete unit test coverage and run your tests with trial. 
>>> All
>>> deprecation warnings will be written out as part of the test suite 
>>> run.
>>> 
>>> 2) Run twistd with Python 2.6
>>> 
>>> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>> 
>> A note for posterity - if we are ever to implement a generalized 'run 
>> an inferior twistd process', or even 'run an inferior python 
>> interpreter' mechanism, warning information like this is one of the 
>> bits of runtime state that ought to be communicated.
> 
> It would be nice if Python preserved its own command-line arguments 
> somewhere, but it doesn't seem to. :/  So figuring out what the runtime 
> state is is somewhat non-trivial in this case.  Otherwise, I completely 
> agree.

Yeah, that's kinda why I specifically pointed it out.  There are a number of command-line arguments which we should preserve if we can, but some (python -u, I think?) are lost to us entirely.  Warning disposition though, is especially important, given that users might be running subprocesses and we should report warnings in code that is covered that way too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120905/7eb9d488/attachment.htm 

From _ at lvh.cc  Wed Sep  5 17:50:41 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Sep 2012 23:50:41 +0200
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <CAE_Hg6YSWUgq8s0vMzNGxCfNvPw0RxGx3zay9HEhN-pvV8fROA@mail.gmail.com>

Huh. I have complete unit test coverage and was using trial, but somehow I
managed to miss that... I guess I will have to pay more attention or
something?! I will try to recreate a situation where the warnings should
pop up.

Thanks!



On Wed, Sep 5, 2012 at 9:11 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:41 pm, _ at lvh.cc wrote:
> >Hey,
> >
> >What is the appropriate way to run twistd apps in such a way that I get
> >nice and loud deprecation warnings?
>
> 1) Have complete unit test coverage and run your tests with trial.  All
> deprecation warnings will be written out as part of the test suite run.
>
> 2) Run twistd with Python 2.6
>
> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>
> Jean-Paul
> >I ran into an issue with one of my apps with the new release because
> >t.w.error.NoResource is now t.w.resource.NoResource, I would like to
> >make
> >my code as forward compatible as possible as we go along, of course :)
> >
> >(Actually this issue was because I stole some non-released code from
> >#4173,
> >which wasn't being tested, but the not being tested part is now fixed.)
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120905/95f2d9a0/attachment-0001.htm 

From benoit.fleury at gmail.com  Wed Sep  5 20:32:36 2012
From: benoit.fleury at gmail.com (=?UTF-8?Q?Beno=C3=AEt_Fleury?=)
Date: Wed, 5 Sep 2012 20:32:36 -0400
Subject: [Twisted-Python] Store simple value in web session
Message-ID: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>

Hi,

I would like to store a simple (immutable) value in a web session.

Here are the options I see so far:
 - use the component architecture (seems a bit overkill...)
 - subclass Session to hold the value I want to store
 - patch Session to behave like a dictionary (didn't look at the code,
not sure if it makes sense...)

I'm also curious about the advantages of this component architecture
for the session object instead of a simple dictionary?

Thanks,
Benoit.


From glyph at twistedmatrix.com  Wed Sep  5 20:58:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 17:58:05 -0700
Subject: [Twisted-Python] Store simple value in web session
In-Reply-To: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
References: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
Message-ID: <2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>


On Sep 5, 2012, at 5:32 PM, Beno?t Fleury <benoit.fleury at gmail.com> wrote:

> Hi,
> 
> I would like to store a simple (immutable) value in a web session.
> 
> Here are the options I see so far:
> - use the component architecture (seems a bit overkill...)
> - subclass Session to hold the value I want to store
> - patch Session to behave like a dictionary (didn't look at the code,
> not sure if it makes sense...)
> 
> I'm also curious about the advantages of this component architecture
> for the session object instead of a simple dictionary?

The component architecture just uses interfaces as keys so that it is unambiguous which piece of code owns them, and what properties they are supposed to provide.  This is so that multiple bits of twisted.web infrastructure can cooperatively populate the request with state without interfering with each other.

I would suggest that it's not "overkill" - it sounds like exactly what you want.  (I suspect that you feel it's overkill because you have bad experiences with some other hideously bloated thing that was also called "component architecture", but I assure you, it's really just a dictionary.)

-glyph

From benoit.fleury at gmail.com  Wed Sep  5 21:32:29 2012
From: benoit.fleury at gmail.com (=?UTF-8?Q?Beno=C3=AEt_Fleury?=)
Date: Wed, 5 Sep 2012 21:32:29 -0400
Subject: [Twisted-Python] Store simple value in web session
In-Reply-To: <2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>
References: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
	<2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>
Message-ID: <CAMqhTFiETbUsTyB+cw2nVtKxbVgEXtutp0a825JgyxxTWmW5Rw@mail.gmail.com>

Thank you for the explanation.

On Wed, Sep 5, 2012 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Sep 5, 2012, at 5:32 PM, Beno?t Fleury <benoit.fleury at gmail.com> wrote:
>
>> Hi,
>>
>> I would like to store a simple (immutable) value in a web session.
>>
>> Here are the options I see so far:
>> - use the component architecture (seems a bit overkill...)
>> - subclass Session to hold the value I want to store
>> - patch Session to behave like a dictionary (didn't look at the code,
>> not sure if it makes sense...)
>>
>> I'm also curious about the advantages of this component architecture
>> for the session object instead of a simple dictionary?
>
> The component architecture just uses interfaces as keys so that it is unambiguous which piece of code owns them, and what properties they are supposed to provide.  This is so that multiple bits of twisted.web infrastructure can cooperatively populate the request with state without interfering with each other.
>
> I would suggest that it's not "overkill" - it sounds like exactly what you want.  (I suspect that you feel it's overkill because you have bad experiences with some other hideously bloated thing that was also called "component architecture", but I assure you, it's really just a dictionary.)
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From no-reply at dropboxmail.com  Fri Sep  7 06:54:06 2012
From: no-reply at dropboxmail.com (Dropbox)
Date: Fri, 07 Sep 2012 10:54:06 +0000
Subject: [Twisted-Python] Fourat ZOUARI invited you to check out Dropbox
Message-ID: <20120907105406.1E39BB409F1@sjc-batch3.sjc.dropbox.com>

Fourat ZOUARI wants you to try Dropbox! Dropbox lets you bring all your photos, docs and videos with you anywhere and share them easily.

Accept invitation here: http://www.dropbox.com/el/?r=/referrals/NjI1NjUxOTkwMDc%3Fsrc%3Dreferrals_bulk9%26eh%3D5334c37&b=clk:None:16395769313093170089:789:462&z=AACVX00a87qiiHJdb3Fi3ZjnqUuO3EUZ-oKNHC5yxRtO0Q

- The Dropbox Team

____________________________________________________ 
To stop receiving invites from Dropbox, please go to http://www.dropbox.com/bl/676b00e8cad3/twisted-python%40twistedmatrix.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120907/3f8673be/attachment.htm 

From tobias.oberstein at tavendo.de  Fri Sep  7 13:51:26 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 7 Sep 2012 10:51:26 -0700
Subject: [Twisted-Python] AutobahnPython 0.5.8 released
Message-ID: <634914A010D0B943A035D226786325D43390CACFDC@EXVMBX020-12.exch020.serverdata.net>

This is a maintenance release.

Fixes:

  - Twisted 12.2 compat.
  - WebSocket Twisted Web resource with TLS
  - processing WS close with Hixie-76
  - some code+doc cleanups

Cheers,
Tobias



From exarkun at twistedmatrix.com  Sun Sep  9 00:05:30 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Sep 2012 04:05:30 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1347163530.41.1915729324@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120909/e6966590/attachment.htm 

From ascheel at gmail.com  Mon Sep 10 21:24:53 2012
From: ascheel at gmail.com (Art Scheel)
Date: Mon, 10 Sep 2012 19:24:53 -0600
Subject: [Twisted-Python] implementing NAMES in IRC
Message-ID: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>

First, I apologize if this is not the appropriate place for this.

I have a basic bot written as a mechanism for learning classes and
methods.  I think I've got methods down, but classes are kicking my butt.

As a personal exercise, I'm trying to implement a check in an IRC bot to
see if the person issuing a command has oper (@) status.  in IRC this is
done with the 'NAMES <#channel>' command.

Google gives me this:
http://stackoverflow.com/questions/6671620/list-users-in-irc-channel-using-twisted-python-irc-framework

My own research points me to this:
http://twistedmatrix.com/trac/browser/trunk/twisted/words/protocols/irc.py#L448

Now, is stackoverflow overriding that method or was it perhaps written
prior to the implementation of the irc.py portion I linked to?

My code is here.  I am attempting to parse the names list at line 110
http://bpaste.net/show/Fll7at9Z3b8nD6GDNN14/

I don't know if I should be using twisted/words/protocols/irc.py or
twisted/words/im/ircsupport.py.

Can someone point me in the right direction as to what I need to do to grab
the list of names at that particular spot using Twisted's in methods?  If
it cannot be done with the Twisted's methods, am I to understand that's
what the StackOverflow post was doing?

Yes, I know the code is ugly.  I can clean it up after I understand what
I'm doing more fully.



-- 
Molon Labe
"Come and take them"

"The Marines I have seen around the world have the cleanest bodies, the
filthiest minds, the highest morale, and the lowest morals of any group of
animals I have ever seen. Thank God for the United States Marine Corps!"
-Eleanor Roosevelt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120910/ccf320a2/attachment.htm 

From glyph at twistedmatrix.com  Tue Sep 11 00:05:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Sep 2012 21:05:05 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
Message-ID: <58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>


On Sep 10, 2012, at 6:24 PM, Art Scheel <ascheel at gmail.com> wrote:

> Now, is stackoverflow overriding that method or was it perhaps written prior to the implementation of the irc.py portion I linked to?

The StackOverflow answer is implementing a new method, on IRCClient.  The implementation in irc.py that you're linking to is from the IRC server protocol implementation.  They're not really related, except insofar as they are talking about the same protocol command - but they are opposite sides of the connection for that command.

For what it's worth, the StackOverflow answer really ought to be linking to a Twisted ticket for a method like .names() on IRCClient within Twisted itself.  This is important functionality, and we're missing it; the right thing to do is always to file a bug, not to implement it without tests in a forum post.

Such a bug may already exist - if you wouldn't mind, would you search for it, and if you can't find it, file a new one?

> My code is here.  I am attempting to parse the names list at line 110
> http://bpaste.net/show/Fll7at9Z3b8nD6GDNN14/
> 
> I don't know if I should be using twisted/words/protocols/irc.py or twisted/words/im/ircsupport.py.

twisted.words.im.* implements a multi-protocol chat abstraction.  I don't think that your bot necessarily needs to be IRC specific, I think it would be a good idea for you to try to use twisted.words.im; you will probably discover a sad lack of documentation, but you can feel free to ask questions and file doc bugs.  Or perhaps even contribute doc patches, once you've figured out what's going on!

At the very least, twisted.words.im.ircsupport already implements irc_RPL_NAMREPLY to convert this message into a series of memberJoined/memberLeft API calls, so you don't have to do something like that yourself.  See here: <http://twistedmatrix.com/trac/browser/trunk/twisted/words/im/ircsupport.py#L160>.

> Can someone point me in the right direction as to what I need to do to grab the list of names at that particular spot using Twisted's in methods?  If it cannot be done with the Twisted's methods, am I to understand that's what the StackOverflow post was doing?

Yes, that's exactly what the SO post was doing.  It is using Twisted's methods though, so clearly it can be done with them, it's just a small matter of work :).

> Yes, I know the code is ugly.  I can clean it up after I understand what I'm doing more fully.

Ugliness is forgivable, but in the future, you should try to post much more minimal programs.  It's a lot easier to help if one can read the whole thing.  See <http://sscce.org> for details.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120910/2e4badda/attachment.htm 

From mithrandi at mithrandi.net  Tue Sep 11 06:49:55 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 12:49:55 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
Message-ID: <CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>

On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
> Such a bug may already exist - if you wouldn't mind, would you search for
> it, and if you can't find it, file a new one?

I don't know if there's an existing bug or not, but implementing a
names() method is problematic. The natural API would be something like
names('#foo') -> Deferred firing with a list of names in the channel.
The difficulty in implementing this comes from the fact that there are
two possible results from issuing a NAMES command on IRC: a serious of
zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
message, *or* any error message the IRC server feels like. There are a
number of partial workarounds for this, involving various combinations
of queues, timeouts, and unreliable detection of responses, but none
of them seem particularly satisfactory to me.

(On the other hand, a method that just sends NAMES #foo without any
response handling would be pretty straightforward to implement, maybe
that's what you meant?)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From exarkun at twistedmatrix.com  Tue Sep 11 09:43:17 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Sep 2012 13:43:17 -0000
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
Message-ID: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>

On 10:49 am, mithrandi at mithrandi.net wrote:
>On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>Such a bug may already exist - if you wouldn't mind, would you search 
>>for
>>it, and if you can't find it, file a new one?
>
>I don't know if there's an existing bug or not, but implementing a
>names() method is problematic. The natural API would be something like
>names('#foo') -> Deferred firing with a list of names in the channel.
>The difficulty in implementing this comes from the fact that there are
>two possible results from issuing a NAMES command on IRC: a serious of
>zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>message, *or* any error message the IRC server feels like. There are a
>number of partial workarounds for this, involving various combinations
>of queues, timeouts, and unreliable detection of responses, but none
>of them seem particularly satisfactory to me.

This is the excuse that is always given for not implementing a new 
feature on `IRCClient`.  However, here's another equivalent way of 
stating the objection:

  IRC is a terrible protocol and it is very difficult to implement a
  method like `names` reliably, due to the various vague and obscure
  corner cases presented.  Therefore, instead of Twisted tackling this
  problem and providing a single (perhaps imperfect) implementation,
  every single IRC application developer should instead rediscover this
  sad reality for themselves and then implement their own uniquely buggy
  version of this functionality.

Hopefully, cast in that light, it's a bit more clear why this might not 
be a reasonable argument.

I can think of other arguments against adding a `names` (or similar) 
method to `IRCClient`, but since it's not likely anyone is actually 
going to step up and do any work on `irc.py` anyway, I don't feel the 
need to make them (and I'd much rather someone actually maintain 
`irc.py`).

Jean-Paul
>(On the other hand, a method that just sends NAMES #foo without any
>response handling would be pretty straightforward to implement, maybe
>that's what you meant?)
>--
>mithrandi, i Ainil en-Balandor, a faer Ambar
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From mithrandi at mithrandi.net  Tue Sep 11 12:12:22 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 18:12:22 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
Message-ID: <CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>

On Tue, Sep 11, 2012 at 3:43 PM,  <exarkun at twistedmatrix.com> wrote:
> This is the excuse that is always given for not implementing a new
> feature on `IRCClient`.  However, here's another equivalent way of
> stating the objection:
>
>   IRC is a terrible protocol and it is very difficult to implement a
>   method like `names` reliably, due to the various vague and obscure
>   corner cases presented.  Therefore, instead of Twisted tackling this
>   problem and providing a single (perhaps imperfect) implementation,
>   every single IRC application developer should instead rediscover this
>   sad reality for themselves and then implement their own uniquely buggy
>   version of this functionality.

Actually, my recommendation would be to avoid trying to implement
functionality of this nature in any application at all. The only way
to reliably use the NAMES command is the way
twisted.words.im.ircsupport and real IRC clients do: handle
RPL_NAMREPLY / RPL_ENDOFNAMES without regard to any NAMES command you
may or may not have issued, and then issue a NAMES command at certain
points without any regard for a response that may or may not be sent
to you by the IRC server. Having said that, I guess IRCClient could
handle the parsing of RPL_NAMREPLY / RPL_ENDOFNAMES messages into a
single list of names, which could then be delivered as a single event.

My main concern with most of the more complex implementation
strategies is that they impose a non-zero cost on users of IRCClient,
as well as encouraging the implementation of unreliable features; at
the very least, I think "anti-IRC" code like this should be an extra
layer on top of the basic IRC protocol implementation.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From glyph at twistedmatrix.com  Tue Sep 11 12:46:47 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 11 Sep 2012 09:46:47 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
Message-ID: <F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>


On Sep 11, 2012, at 9:12 AM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:

> On Tue, Sep 11, 2012 at 3:43 PM,  <exarkun at twistedmatrix.com> wrote:
>> This is the excuse that is always given for not implementing a new
>> feature on `IRCClient`.  However, here's another equivalent way of
>> stating the objection:
>> 
>>  IRC is a terrible protocol and it is very difficult to implement a
>>  method like `names` reliably, due to the various vague and obscure
>>  corner cases presented.  Therefore, instead of Twisted tackling this
>>  problem and providing a single (perhaps imperfect) implementation,
>>  every single IRC application developer should instead rediscover this
>>  sad reality for themselves and then implement their own uniquely buggy
>>  version of this functionality.
> 
> Actually, my recommendation would be to avoid trying to implement
> functionality of this nature in any application at all. The only way
> to reliably use the NAMES command is the way
> twisted.words.im.ircsupport and real IRC clients do: handle
> RPL_NAMREPLY / RPL_ENDOFNAMES without regard to any NAMES command you
> may or may not have issued, and then issue a NAMES command at certain
> points without any regard for a response that may or may not be sent
> to you by the IRC server. Having said that, I guess IRCClient could
> handle the parsing of RPL_NAMREPLY / RPL_ENDOFNAMES messages into a
> single list of names, which could then be delivered as a single event.

So... you're recommending exactly what twisted.words.im already does? :)  (This is another area of the code that could use a maintainer, but its design is less horrible than its lack of testing and lack of coding standard compliance might imply.)

Keep in mind that we can assume to have control over outgoing traffic on our own IRC connection.  If you've already issued one .names(), then another outgoing one doesn't have to send an additional command and try to do weird Deferred-stacking stuff.  It just has to delay sending the actual NAMES request until the previous one has come back, or perhaps just fire both Deferreds with a single response.

-glyph

From mithrandi at mithrandi.net  Tue Sep 11 14:00:02 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 20:00:02 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
	<F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>
Message-ID: <CAMcKhMTHs8MDTGR19BX0pq-Cyc1pbxu9=9QivaC35hiV4SVvTA@mail.gmail.com>

On Tue, Sep 11, 2012 at 6:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
> So... you're recommending exactly what twisted.words.im already does? :)

Well, yeah: "The only way to reliably use the NAMES command is the way
twisted.words.im.ircsupport [already does]" :)

> Keep in mind that we can assume to have control over outgoing traffic on our own IRC connection.  If you've already issued one .names(), then another outgoing one doesn't have to send an additional command and try to do weird Deferred-stacking stuff.  It just has to delay sending the actual NAMES request until the previous one has come back, or perhaps just fire both Deferreds with a single response.

On the other hand, if you're writing code that doesn't need to match
requests and responses, you should be able to issue another NAMES
command before the previous one has completed (and bear in mind, if
you want to queue NAMES requests independently of other requests, the
only ways for it to complete will be 1. RPL_ENDOFNAMES and 2.
timeout). That's why I would prefer this not to be baked into the
lowest level of the IRC client API. My earlier responses were probably
worded too harshly; people *are* going to attempt to implement things
like this, no matter how much of a bad idea it might be, so going
LALALALA WE WON'T LET YOU won't improve things. On the other hand, the
compromises needed to do things this way probably shouldn't penalize
people who are doing it the "right" way (insofar as anything about IRC
can be said to be "right").
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From dbs at nimbula.com  Tue Sep 11 16:42:03 2012
From: dbs at nimbula.com (David Serafini)
Date: Tue, 11 Sep 2012 13:42:03 -0700
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
Message-ID: <CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>

I know about txAMQP.  Has anyone done any work interfacing the
kombu API with twisted?

thanks in advance,
<dbs>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120911/ee2b88b5/attachment.htm 

From jstpierre at mecheye.net  Tue Sep 11 18:01:31 2012
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 11 Sep 2012 18:01:31 -0400
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
Message-ID: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>

On Tue, Sep 11, 2012 at 9:43 AM,  <exarkun at twistedmatrix.com> wrote:
> On 10:49 am, mithrandi at mithrandi.net wrote:
>>On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>>Such a bug may already exist - if you wouldn't mind, would you search
>>>for
>>>it, and if you can't find it, file a new one?
>>
>>I don't know if there's an existing bug or not, but implementing a
>>names() method is problematic. The natural API would be something like
>>names('#foo') -> Deferred firing with a list of names in the channel.
>>The difficulty in implementing this comes from the fact that there are
>>two possible results from issuing a NAMES command on IRC: a serious of
>>zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>>message, *or* any error message the IRC server feels like. There are a
>>number of partial workarounds for this, involving various combinations
>>of queues, timeouts, and unreliable detection of responses, but none
>>of them seem particularly satisfactory to me.
>
> This is the excuse that is always given for not implementing a new
> feature on `IRCClient`.  However, here's another equivalent way of
> stating the objection:
>
>   IRC is a terrible protocol and it is very difficult to implement a
>   method like `names` reliably, due to the various vague and obscure
>   corner cases presented.  Therefore, instead of Twisted tackling this
>   problem and providing a single (perhaps imperfect) implementation,
>   every single IRC application developer should instead rediscover this
>   sad reality for themselves and then implement their own uniquely buggy
>   version of this functionality.

I know you know what this means, exarkun, but for those who don't know
exactly what this means, it means that you can send two requests out,
and not be guaranteed to get replies in any particular order (or at
all), and that means that you can get ambiguous replies to requests.

Additionally, IRC daemons may play tricks and send out "replies" that
doesn't associate with any request you've sent, as a means to have a
client perform a specific action; for instance, bouncers usually send
join replies without any associated requests method of forcing a
client to open a buffer for a particular channel, and certain networks
also use this same technique to force users on specific channels all
the time (and they will also make a PART request on this particular
channel fail).

These two things mean that you cannot have a Deferred-based API for
IRC, where each request correlates to one response, and instead need
to have a reactionary system where you cast a NAMES out to the wind,
and just implement some sane behavior on every RPL_NAMREPLY you get,
independent of what triggered it.

> Hopefully, cast in that light, it's a bit more clear why this might not
> be a reasonable argument.
>
> I can think of other arguments against adding a `names` (or similar)
> method to `IRCClient`, but since it's not likely anyone is actually
> going to step up and do any work on `irc.py` anyway, I don't feel the
> need to make them (and I'd much rather someone actually maintain
> `irc.py`).
>
> Jean-Paul
>>(On the other hand, a method that just sends NAMES #foo without any
>>response handling would be pretty straightforward to implement, maybe
>>that's what you meant?)
>>--
>>mithrandi, i Ainil en-Balandor, a faer Ambar
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
  Jasper


From glyph at twistedmatrix.com  Tue Sep 11 19:58:25 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 11 Sep 2012 16:58:25 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
Message-ID: <36902905-3CB4-4EC4-BDE5-94787B45BE3F@twistedmatrix.com>


On Sep 11, 2012, at 3:01 PM, Jasper St. Pierre <jstpierre at mecheye.net> wrote:

> Additionally, IRC daemons may play tricks and send out "replies" that
> doesn't associate with any request you've sent, as a means to have a
> client perform a specific action; for instance, bouncers usually send
> join replies without any associated requests method of forcing a
> client to open a buffer for a particular channel, and certain networks
> also use this same technique to force users on specific channels all
> the time (and they will also make a PART request on this particular
> channel fail).

It's not exactly that they're "forcing" users (or clients) to do anything. They're just notifying the user that they're in a particular channel.  In other words, the "forcing" is all done server-side, not in the protocol itself.

> These two things mean that you cannot have a Deferred-based API for
> IRC, where each request correlates to one response, and instead need
> to have a reactionary system where you cast a NAMES out to the wind,
> and just implement some sane behavior on every RPL_NAMREPLY you get,
> independent of what triggered it.

This is actually a better way to structure applications in general, even for much more sanely structured protocols than IRC.

One subtle point about Twisted is that while Deferreds make it a lot easier to manage sequential work-flow in an event driven system, it is sequential work-flow itself that is the problem in many cases.  You should always try to write your protocols so they can react to any valid input at any time, not rigidly structure everything so that your state is always shoehorned into a request/response structure so all your state is encapsulated in stack frames in closures that are added as callbacks on Deferreds.

If I were designing a new chat protocol today, I'd definitely make sure it had a "you joined a conversation" message that did not have to be a response to any particular "I'd like to join a conversation" message :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120911/1ab4156b/attachment-0001.htm 

From skaarjj at gmail.com  Tue Sep 11 20:12:13 2012
From: skaarjj at gmail.com (Adrian Overbury)
Date: Wed, 12 Sep 2012 10:12:13 +1000
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
Message-ID: <4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>

On 12/09/2012, at 8:01 AM, "Jasper St. Pierre" <jstpierre at mecheye.net> wrote:

> On Tue, Sep 11, 2012 at 9:43 AM,  <exarkun at twistedmatrix.com> wrote:
>> On 10:49 am, mithrandi at mithrandi.net wrote:
>>> On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>>> Such a bug may already exist - if you wouldn't mind, would you search
>>>> for
>>>> it, and if you can't find it, file a new one?
>>> 
>>> I don't know if there's an existing bug or not, but implementing a
>>> names() method is problematic. The natural API would be something like
>>> names('#foo') -> Deferred firing with a list of names in the channel.
>>> The difficulty in implementing this comes from the fact that there are
>>> two possible results from issuing a NAMES command on IRC: a serious of
>>> zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>>> message, *or* any error message the IRC server feels like. There are a
>>> number of partial workarounds for this, involving various combinations
>>> of queues, timeouts, and unreliable detection of responses, but none
>>> of them seem particularly satisfactory to me.
>> 
>> This is the excuse that is always given for not implementing a new
>> feature on `IRCClient`.  However, here's another equivalent way of
>> stating the objection:
>> 
>>  IRC is a terrible protocol and it is very difficult to implement a
>>  method like `names` reliably, due to the various vague and obscure
>>  corner cases presented.  Therefore, instead of Twisted tackling this
>>  problem and providing a single (perhaps imperfect) implementation,
>>  every single IRC application developer should instead rediscover this
>>  sad reality for themselves and then implement their own uniquely buggy
>>  version of this functionality.
> 
> I know you know what this means, exarkun, but for those who don't know
> exactly what this means, it means that you can send two requests out,
> and not be guaranteed to get replies in any particular order (or at
> all), and that means that you can get ambiguous replies to requests.
> 
> Additionally, IRC daemons may play tricks and send out "replies" that
> doesn't associate with any request you've sent, as a means to have a
> client perform a specific action; for instance, bouncers usually send
> join replies without any associated requests method of forcing a
> client to open a buffer for a particular channel, and certain networks
> also use this same technique to force users on specific channels all
> the time (and they will also make a PART request on this particular
> channel fail).
> 
> These two things mean that you cannot have a Deferred-based API for
> IRC, where each request correlates to one response, and instead need
> to have a reactionary system where you cast a NAMES out to the wind,
> and just implement some sane behavior on every RPL_NAMREPLY you get,
> independent of what triggered it.
> 

However it is entirely possible to sanely parse and store replies in a reactionary system because the first component of an RPL_NAMREPLY message is the name of the channel it applies to.  

You can log or quietly drop replies that aren't for channels you're currently following, and use the others to build out some kind of structure that maintains an active list of users in that channel and their status (maintained through subsequent joins and parts).  Is this not so?  It doesn't sound that complicated to me.

>> Hopefully, cast in that light, it's a bit more clear why this might not
>> be a reasonable argument.
>> 
>> I can think of other arguments against adding a `names` (or similar)
>> method to `IRCClient`, but since it's not likely anyone is actually
>> going to step up and do any work on `irc.py` anyway, I don't feel the
>> need to make them (and I'd much rather someone actually maintain
>> `irc.py`).
>> 
>> Jean-Paul
>>> (On the other hand, a method that just sends NAMES #foo without any
>>> response handling would be pretty straightforward to implement, maybe
>>> that's what you meant?)
>>> --
>>> mithrandi, i Ainil en-Balandor, a faer Ambar
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
>  Jasper
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From mithrandi at mithrandi.net  Tue Sep 11 20:29:47 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 12 Sep 2012 02:29:47 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
	<4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>
Message-ID: <CAMcKhMSJvV92RzgoRvG2maRwDHirr4bfgz9gOKyUd77qTYVNSg@mail.gmail.com>

On Wed, Sep 12, 2012 at 2:12 AM, Adrian Overbury <skaarjj at gmail.com> wrote:
> However it is entirely possible to sanely parse and store replies in a reactionary system because the first component of an RPL_NAMREPLY message is the name of the channel it applies to.
>
> You can log or quietly drop replies that aren't for channels you're currently following, and use the others to build out some kind of structure that maintains an active list of users in that channel and their status (maintained through subsequent joins and parts).  Is this not so?  It doesn't sound that complicated to me.

Handling RPL_NAMREPLY/RPL_ENDOFNAMES responses in order to update a
list of users is perfectly feasible (most user-interactive IRC clients
do something of this nature); the problem is directly associating a
response with a request. If you send NAMES #code, there are three
possibilities: 1) the ircd sends you a sequence of
RPL_NAMREPLY/RPL_ENDOFNAMES with the list of users, 2) you get an
error response, 3) nothing happens. While 3) is unlikely, there's no
particular reason an ircd couldn't behave that way (I don't
specifically know of one, but in general, the IRC protocol and ircds
are written and designed with primarily the interactive use case in
mind, not automated agents). However, the real fly in the ointment is
2); there is no way to know what errors might be returned in response
to a NAMES message, and many of those responses will not even mention
the channel name, thus giving you no way to recognize that the request
will never "complete". If you're keeping a deferred around to fire
with the response, then unless something else intervenes (a
cancellation timer?), the deferred will just hang around, which also
means keeping its callbacks and the objects they reference alive.

Thus, the problem is not with tracking the users in a channel in
general (although there are issues with tracking the channel modes of
those users...), but rather with specifically implementing an API like
names(channel) -> Deferred firing with a list of names. If you're
willing to accept an arbitrary timeout and use that as the only (or at
least the primary) mechanism of failure detection, as well as a few
other compromises (in the area of "overlapping" requests for the same
channel), it would be possible, I just don't feel that the base
IRCClient class is the right place to implement things like this, and
I'd also discourage designing IRC clients (whether they are bots or
user-interactive clients) in a way that requires such an API.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar


From penxiao at cisco.com  Wed Sep 12 21:40:29 2012
From: penxiao at cisco.com (Peng Xiao -X (penxiao - DLSP at Cisco))
Date: Thu, 13 Sep 2012 01:40:29 +0000
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
Message-ID: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>

Hi experts

Does Twisted support TCP MD5 Signature Option?
If does, how to use this?
Very thanks.

Best
Regards,

Xiao Peng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120913/64c176ed/attachment.htm 

From wulczer at wulczer.org  Thu Sep 13 06:12:44 2012
From: wulczer at wulczer.org (=?UTF-8?B?SmFuIFVyYmHFhHNraQ==?=)
Date: Thu, 13 Sep 2012 12:12:44 +0200
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
	<CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
Message-ID: <5051B19C.2090500@wulczer.org>

On 11/09/12 22:42, David Serafini wrote:
> I know about txAMQP.  Has anyone done any work interfacing the
> kombu API with twisted?

Not kombu, but you can use pika with Twisted (I'm doing that in 
production and it works well enough).

Cheers,
Jan


From exarkun at twistedmatrix.com  Thu Sep 13 07:59:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 Sep 2012 11:59:23 -0000
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
In-Reply-To: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
References: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
Message-ID: <20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>

On 01:40 am, penxiao at cisco.com wrote:
>Hi experts
>
>Does Twisted support TCP MD5 Signature Option?
>If does, how to use this?
>Very thanks.

Not specifically.  You can get the underlying socket and call 
`setsockopt? on it, though.  I've never used TCP MD5 signatures (it's a 
pretty obscure feature that is not widely used), is being able to set 
the socket option sufficient to "use" the feature?

Jean-Paul
>Best
>Regards,
>
>Xiao Peng


From p.mayers at imperial.ac.uk  Thu Sep 13 08:14:24 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 13 Sep 2012 13:14:24 +0100
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
In-Reply-To: <20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>
References: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
	<20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>
Message-ID: <5051CE20.70802@imperial.ac.uk>

On 13/09/12 12:59, exarkun at twistedmatrix.com wrote:
> On 01:40 am, penxiao at cisco.com wrote:
>> Hi experts
>>
>> Does Twisted support TCP MD5 Signature Option?
>> If does, how to use this?
>> Very thanks.
>
> Not specifically.  You can get the underlying socket and call
> `setsockopt? on it, though.  I've never used TCP MD5 signatures (it's a
> pretty obscure feature that is not widely used), is being able to set
> the socket option sufficient to "use" the feature?

It's worth noting it has to be compiled into your kernel.

I'm somewhat curious what the OPs use-case is; the original use was for 
protecting BGP sessions, but I understand it's specified in some 
versions of the PCI standards (the credit card stuff, not the peripheral 
slot) now?

For what it's worth, I think it's the wrong solution to almost all 
problems. TLS is far, far superior, as is IPSec/AH if you need the 
traffic to be protected but in cleartext.


From dbs at nimbula.com  Thu Sep 13 15:25:31 2012
From: dbs at nimbula.com (David Serafini)
Date: Thu, 13 Sep 2012 12:25:31 -0700
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <50522FA7.3070608@wulczer.org>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
	<CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
	<5051B19C.2090500@wulczer.org>
	<CAJy_jQRmFV0wigDb7R5RDYr5riL4BY=m7r2b3QHATbiZtxOYPA@mail.gmail.com>
	<50522FA7.3070608@wulczer.org>
Message-ID: <CAJy_jQSK2qjO1ERuAJCJ0FzQKhgynX6hOqYS9kfD8_S-B74HNQ@mail.gmail.com>

 Thanks, Jan.

On Thu, Sep 13, 2012 at 12:10 PM, Jan Urba?ski <wulczer at wulczer.org> wrote:

> On 13/09/12 21:04, David Serafini wrote:
>
>> How did you implement this?  Did you use txamqp as a model or develop your
>> own approach?
>>
>
> No, I took pika (that already implements AMQP), wrote code to make it
> usable from a Twisted reactor and then added a Deferred layer on top of
> that.
>
> Pika already works with Tornado, so it was more or less prepared for being
> integrated in an event loop, such as the Twisted reactor.
>
> Here's an example of how to use it:
>
> https://github.com/pika/pika/**blob/master/examples/demo_**twisted.py<https://github.com/pika/pika/blob/master/examples/demo_twisted.py>
>
> Best,
> Jan
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120913/c17bf70d/attachment.htm 

From exarkun at twistedmatrix.com  Sun Sep 16 00:05:55 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Sep 2012 04:05:55 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1347768355.7.1696774915@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120916/00323f13/attachment.htm 

From cyli at twistedmatrix.com  Thu Sep 20 12:43:10 2012
From: cyli at twistedmatrix.com (Ying Li)
Date: Thu, 20 Sep 2012 09:43:10 -0700
Subject: [Twisted-Python] Twisted Sprint in SF, 9/22 (this saturday)
Message-ID: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>

Hi all!

For those of you in the Bay Area, there will be a Twisted sprint this
Saturday at Rackspace (620 Folsom St., between 2nd and Hawthorne) in
San Francisco.  Food and drink will be provided.

Thanks!
-Ying


From glyph at twistedmatrix.com  Thu Sep 20 19:27:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Sep 2012 16:27:05 -0700
Subject: [Twisted-Python] Twisted Sprint in SF, 9/22 (this saturday)
In-Reply-To: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>
References: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>
Message-ID: <84983503-4C8F-4A4E-B5BB-F88A9D8888E6@twistedmatrix.com>


Le Sep 20, 2012 ? 9:43 AM, Ying Li <cyli at twistedmatrix.com> a ?crit :

> For those of you in the Bay Area, there will be a Twisted sprint this
> Saturday at Rackspace (620 Folsom St., between 2nd and Hawthorne) in
> San Francisco.  Food and drink will be provided.


More information is available here:

<http://www.meetup.com/San-Francisco-Twisted-Python-Meetup/events/82122312/>

For those of you who aren't in the bay area, feel free to follow along at home on #twisted-dev on freenode.net.  If you are, but you haven't been to one of the sprints before, you should give it a try!  Come learn about how to work on Twisted, or get your favorite bugs fixed.  The last couple of these events have been a lot of fun.  I hope to see many of you there!

-glyph





From matt at conundrum.com  Sat Sep 22 16:37:54 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sat, 22 Sep 2012 16:37:54 -0400
Subject: [Twisted-Python] Fitting cred into my application
Message-ID: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>

Hi.  I've been trying to wrap my head around the cred implementation for a while now, but either I'm missing something, or there's some piece of documentation that could be better.  Probably at least a bit of both.

My application is an XMLRPC server, and an authenticated client should have rights to run some RPC methods, but not others.  Some methods will give access to limited data based on authentication.

The documentation for cred is clear in the case where the server has its own protocol implementation, but in the case of XMLRPC, where the protocol isn't subclassed, how to link it in is far less clear.  Also, since the design suggests that it's the RPC methods that need to talk to the avatar, not the protocol, how to implement cred seems even less obvious.

Are there some other examples of cred implementations floating around that I can look at, where lack of authentication does not block all access to the protocol?  In particular an example combining XMLRPC and cred would make my day.  Does any documentation or example code along those lines exist that I just haven't found yet?

Thanks in advance for any pointers!
   Matt




From itamar at futurefoundries.com  Sat Sep 22 21:36:22 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 22 Sep 2012 21:36:22 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
Message-ID: <CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>

On Sat, Sep 22, 2012 at 4:37 PM, Matthew Pounsett <matt at conundrum.com>wrote:

> Hi.  I've been trying to wrap my head around the cred implementation for a
> while now, but either I'm missing something, or there's some piece of
> documentation that could be better.  Probably at least a bit of both.
>
> My application is an XMLRPC server, and an authenticated client should
> have rights to run some RPC methods, but not others.  Some methods will
> give access to limited data based on authentication.
>
> The documentation for cred is clear in the case where the server has its
> own protocol implementation, but in the case of XMLRPC, where the protocol
> isn't subclassed, how to link it in is far less clear.  Also, since the
> design suggests that it's the RPC methods that need to talk to the avatar,
> not the protocol, how to implement cred seems even less obvious.
>
> Are there some other examples of cred implementations floating around that
> I can look at, where lack of authentication does not block all access to
> the protocol?  In particular an example combining XMLRPC and cred would
> make my day.  Does any documentation or example code along those lines
> exist that I just haven't found yet?
>

There's three parts to doing this:

   1. When setting up the portal, in addition to the credential checker
   that knows about regular users, also register a
   twisted.cred.checkers.AllowAnonymousAccess.
   2. When you have no credentials, the xml-rpc layer should login to the
   portal using a twisted.cred.credentials.Anonymous credential. When you do
   have credentials, pass them in as you normally.
   3. Now as part of a login your realm gets either a username, or a
   twisted.cred.checkers.ANONYMOUS as the avatar id that is being requested.
   Based on what it gets your realm should return a different business logic
   implementation (aka "avatar"); the anonymous one can do less, say.

twisted.web.guard does #2; the way it is implemented, the business logic
object (avatar) that is returned is a web Resource, so the realm can return
a different Resource depending on whether there's HTTP credentials or not
(the latter case being avatar id of ANONYMOUS). It's possible you just want
to use guard, if you're relying on HTTP authentication - just return
different XMLRPC objects. Alternatively, the XMLRPC layer could log-in to
the portal, in which case it would get back different business logic
objects with different capabilities.

An example of a full setup is twisted.protocols.ftp combined with
twisted.tap.ftp, the ftp plugin for twistd, but the details are a bit
spread out. You should be able to find all three of those parts though.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120922/9914f811/attachment.htm 

From matt at conundrum.com  Sat Sep 22 23:41:39 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sat, 22 Sep 2012 23:41:39 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
Message-ID: <365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>


On 2012/09/22, at 21:36, Itamar Turner-Trauring wrote:

> There's three parts to doing this:
> 
>   1. When setting up the portal, in addition to the credential checker
>   that knows about regular users, also register a
>   twisted.cred.checkers.AllowAnonymousAccess.
>   2. When you have no credentials, the xml-rpc layer should login to the
>   portal using a twisted.cred.credentials.Anonymous credential. When you do
>   have credentials, pass them in as you normally.
>   3. Now as part of a login your realm gets either a username, or a
>   twisted.cred.checkers.ANONYMOUS as the avatar id that is being requested.
>   Based on what it gets your realm should return a different business logic
>   implementation (aka "avatar"); the anonymous one can do less, say.

I'm not following why I would want to do #1, probably because I can't find a sufficient explanation of exactly what an "avatar" is supposed to do.  In some places it seems to just be treated as a user ID, and in other places documentation makes reference to "business logic" as you do, but nowhere do I see any examples of what exactly that means. 

It seems to me #1 is overkill; if I want to have methods that don't require authentication (e.g. methods for registering a user in the first place), why would I require all clients to authenticate as anonymous before using them?  It would be a lot simpler to just have my xmlrpc methods check against the attributes of the current user object when called, and then return appropriately: return failures when there is no user, or when the user's attributes don't match those required by the method, and return data that a user's attributes give him/her access to when there is a user.  

But again, I think I'm missing some key details that just aren't in the documentation I've been able to find.

> twisted.web.guard does #2; the way it is implemented, the business logic
> object (avatar) that is returned is a web Resource, so the realm can return
> a different Resource depending on whether there's HTTP credentials or not
> (the latter case being avatar id of ANONYMOUS). It's possible you just want
> to use guard, if you're relying on HTTP authentication - just return
> different XMLRPC objects.

I'm not using HTTP authentication because it requires passing authentication info with each request.  In my design a client can authenticate at any point in the connection to gain access to methods or data that require it.

From your description of Guard it sounds like I would bind a different resource to the factory for each set of permissions a user might have, which means there would be a different Resource defined (and by extension different xmlrpc methods defined) for every possible combination of attributes a user might have.   A user may have a dozen different attributes that go into defining what methods that user can call, or what data will be returned by a method; the combinatorics there could result in thousands of slightly-different Resources and methods I'd need to maintain.

It seems more reasonable to have each xmlrpc method check the current user's attributes and make its own decisions about what data (if any) to return.

> Alternatively, the XMLRPC layer could log-in to
> the portal, in which case it would get back different business logic
> objects with different capabilities.

This sounds like it could be what I'm looking for, but again I can't find anything that discusses in any detail what "business logic" means in this context, or how to implement those different capabilities.

> An example of a full setup is twisted.protocols.ftp combined with
> twisted.tap.ftp, the ftp plugin for twistd, but the details are a bit
> spread out. You should be able to find all three of those parts though.

The FTP protocol doesn't implement any non-authenticated commands.  Authentication is always done at the beginning of a session, even if that is to authenticate as the user 'anonymous', and there's no provision for changing credentials in mid-connection.

I'll have a look anyway though.. perhaps I can piece together a few more things that I haven't been able to find in the API documentation, the twisted.cred how-to, or the cred.py and dbcred.py examples.

I've got a bit further since my initial email, and my current approach is to extend t.w.server.Site to accept a portal.  I'm currently trying to separate the useful bits from the flash in the requestAvatarID and _??Authenticate methods in dbcred.py.  It would be nice to have something as straight-forward as cred.py that also implemented a realm and a credentials checker so that I could see how all those pieces fit together.

Thanks for the info.. hopefully it leads me to piece this stuff together.
  Matt

From exarkun at twistedmatrix.com  Sun Sep 23 00:05:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Sep 2012 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1348373123.51.233952086@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120923/ddae2991/attachment-0001.htm 

From itamar at futurefoundries.com  Sun Sep 23 10:30:35 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 23 Sep 2012 10:30:35 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
Message-ID: <CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>

On Sat, Sep 22, 2012 at 11:41 PM, Matthew Pounsett <matt at conundrum.com>wrote:


> It seems to me #1 is overkill; if I want to have methods that don't
> require authentication (e.g. methods for registering a user in the first
> place), why would I require all clients to authenticate as anonymous before
> using them?  It would be a lot simpler to just have my xmlrpc methods check
> against the attributes of the current user object when called, and then
> return appropriately: return failures when there is no user, or when the
> user's attributes don't match those required by the method, and return data
> that a user's attributes give him/her access to when there is a user.
>
> But again, I think I'm missing some key details that just aren't in the
> documentation I've been able to find.
>

You don't need the clients to authenticate as anonymous; the XML RPC code
can say "if there's no credentials from client, login as anonymous."



> I've got a bit further since my initial email, and my current approach is
> to extend t.w.server.Site to accept a portal.  I'm currently trying to
> separate the useful bits from the flash in the requestAvatarID and
> _??Authenticate methods in dbcred.py.  It would be nice to have something
> as straight-forward as cred.py that also implemented a realm and a
> credentials checker so that I could see how all those pieces fit together.
>

I would just add a Portal to the XML-RPC object, rather than the Site.

I'll try to write some example code later today, if I have time.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120923/63d91db8/attachment.htm 

From itamar at futurefoundries.com  Sun Sep 23 18:55:58 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 23 Sep 2012 18:55:58 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
Message-ID: <CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>

Attached find an example server, and a client demonstration - it's only
very lightly tested, so likely wrong or buggy somewhere. I didn't bother to
implement sessions, so you need to login with every command if you want
extended access.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120923/981e5db1/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: credexample.py
Type: application/octet-stream
Size: 2637 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20120923/981e5db1/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 359 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20120923/981e5db1/attachment-0001.obj 

From matt at conundrum.com  Mon Sep 24 16:17:00 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 24 Sep 2012 16:17:00 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
Message-ID: <FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>


On 2012/09/23, at 18:55, Itamar Turner-Trauring wrote:

> Attached find an example server, and a client demonstration - it's only very lightly tested, so likely wrong or buggy somewhere. I didn't bother to implement sessions, so you need to login with every command if you want extended access.

Thanks for the examples, I'll have a look tonight.

I was going to avoid the issue of session handling by putting the portal on the protocol.  That way authentication, once done, can be persistent for the length of the connection without having to do any special session handling.




From exarkun at twistedmatrix.com  Mon Sep 24 16:36:21 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Sep 2012 20:36:21 -0000
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
Message-ID: <20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>

On 08:17 pm, matt at conundrum.com wrote:
>
>On 2012/09/23, at 18:55, Itamar Turner-Trauring wrote:
>>Attached find an example server, and a client demonstration - it's 
>>only very lightly tested, so likely wrong or buggy somewhere. I didn't 
>>bother to implement sessions, so you need to login with every command 
>>if you want extended access.
>
>Thanks for the examples, I'll have a look tonight.
>
>I was going to avoid the issue of session handling by putting the 
>portal on the protocol.  That way authentication, once done, can be 
>persistent for the length of the connection without having to do any 
>special session handling.

As soon as you have a proxy between your client and server, you'll 
regret this.  The HTTP authentication standards specifically forbid this 
style of authentication, and the proxy standards explicitly allow the 
lifetime of connections between a client and the proxy to be different 
from the lifetime of connections between the proxy and the server.

In other words, there are reasons HTTP auth works the way it does.

Also, there is a list dedicated to web topics:

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Jean-Paul


From matt at conundrum.com  Mon Sep 24 16:42:00 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 24 Sep 2012 16:42:00 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
Message-ID: <9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>


On 2012/09/24, at 16:36, exarkun at twistedmatrix.com wrote:

> As soon as you have a proxy between your client and server, you'll 
> regret this.  The HTTP authentication standards specifically forbid this 
> style of authentication, and the proxy standards explicitly allow the 
> lifetime of connections between a client and the proxy to be different 
> from the lifetime of connections between the proxy and the server.

That's fine.  This is not a web server, it's an application that happens to use HTTP as transport.  I don't need to support the presence of proxies.




From twisted-python at 2xlp.com  Wed Sep 26 16:07:15 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 16:07:15 -0400
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
Message-ID: <7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>

I'm in the process of rewriting a web spider (originally in twisted circa 2005) , and keep running into an issue with deferreds releasing too many tokens.

i've been playing around with this all day, and can't seem to shake this problem.  

i'm guessing that i designed the application logic wrong.

Does the following code raise any warning signs for people ?

The general setup is this:

	AnalyzeLink -
		- run-of-the-mill class that performs actual db operations and link fetching
		- doesn't really rely on twisted, aside from being coded to the specs of runInteraction ( accepts an adbapi txn, raises for a rollback, is generally happy for a commit )

	AnalyzeLinksService- 
		- relies on twisted
		- queries the database for a batch of items to update
		- each actionable item is wrapped into an '_AnalyzeLinksRequestWrapper' instance, all of which are tossed into a defer.DeferredList()

	AnalyzeLinksRequestWrapper-
		- relies on twisted
		- pushes actual work into callbacks via threads.deferToThread 
		- uses a defer.DeferredSemaphore provided by AnalyzeLinksService to acquire locks


some cleaned-up code is below :

------------------

class AnalyzeLink(object):
    def get_update_batch(self,txn):
    	# returns list of ids/data/etc to process

    def action_for_data(self,txn,data):
    	# processes an entry


class _AnalyzeLinksRequestWrapper(RequestWrapper):
	dbConnectionPool = None
    semaphoreService = None
    semaphoreLock = None

    def __init__( self , semaphoreService = None , dbConnectionPool = None ):
        self.dbConnectionPool= dbConnectionPool
        self.semaphoreService= semaphoreService

    def queue_thread( self , data=None ):
        self.queued_data= data
        d = self.semaphoreService.acquire()\
            .addCallback( self._T_to_thread )
        return d

    def _T_to_thread( self , deferredSemaphore ):
        self.semaphoreLock= deferredSemaphore
        t = threads.deferToThread( self._T_thread_begin )\
            .addErrback( self._T_errors )\
            .addCallback( self._T_thread_end )

    def _T_thread_begin( self ):
        log.debug("_AnalyzeLinksRequestWrapper._T_thread_begin" )
        updater = AnalyzeLink()
        self.dbConnectionPool.runInteraction( updater.action_for_data , self.queued_data )\
            .addCallback( self._T_thread_end )\
            .addErrback( self._T_errors )

    def _T_thread_end( self , rval=None ):
        self.semaphoreLock.release()

    def _T_errors( self , x ):
        self._T_thread_end()
        raise x


class _AnalyzeLinksService(ServiceScaffold):
    SEMAPHORE_TOKENS = 25
    
    def __init__( self ):
        self.semaphoreService= defer.DeferredSemaphore( tokens=self.SEMAPHORE_TOKENS )

    def action( self ):
        updater= AnalyzeLink()
        database.get_dbPool().runInteraction( updater.get_update_batch , queued_updates )\
            .addCallback( self._action_2 )\
            .addErrback( self._action_error )

    def _action_2( self , queued_updates ):
        if len( queued_updates ):
            updates= []
            for item in queued_updates:
                requestWrapper= _AnalyzeLinksRequestWrapper(\
                    semaphoreService = self.semaphoreService ,
                    dbConnectionPool = database.get_dbPool()
                )
                result= requestWrapper.queue_thread( data=item )
                updates.append(result)
            finished= defer.DeferredList( updates )\
                .addCallback( self.deferred_list_finish )
        else:
            d= defer.Deferred()
            self.deferred_list_finish( d )

    def _action_error( self , raised ):
        log.debug("%s._action_error" % self.__class__.__name__ )
        self.set_processing_status( False )
        if isinstance( raised.value , database.DbRollback ):
            print "DB Rollback"
            raise raised
        elif isinstance( raised.value , database.DbRollbackOk ):
            print "DB Rollback ok"
        else:
            raise raised
            
            
AnalyzeLinksService= _AnalyzeLinksService()


class AnalyzeLinksService_Service(internet.TimerService):
    def __init__( self , dbConfigHash=None ):
        internet.TimerService.__init__( self,
            CHECK_PERIOD__IMPORT ,
            AnalyzeLinksService.action
        )
            

From stephen at thorne.id.au  Wed Sep 26 17:09:22 2012
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 26 Sep 2012 14:09:22 -0700
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
	<7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
Message-ID: <CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>

This is a better way of using DeferredSemaphore:

    def queue_thread( self , data=None ):
        self.queued_data= data
        return self.semaphoreService.run( self._T_to_thread )

It handles acquisition and release for you. This will avoid any code
path that might result in a double-release.


On Wed, Sep 26, 2012 at 1:07 PM, Jonathan Vanasco
<twisted-python at 2xlp.com> wrote:
> I'm in the process of rewriting a web spider (originally in twisted circa 2005) , and keep running into an issue with deferreds releasing too many tokens.
>
> i've been playing around with this all day, and can't seem to shake this problem.
>
> i'm guessing that i designed the application logic wrong.
>
> Does the following code raise any warning signs for people ?
>
> The general setup is this:
>
>         AnalyzeLink -
>                 - run-of-the-mill class that performs actual db operations and link fetching
>                 - doesn't really rely on twisted, aside from being coded to the specs of runInteraction ( accepts an adbapi txn, raises for a rollback, is generally happy for a commit )
>
>         AnalyzeLinksService-
>                 - relies on twisted
>                 - queries the database for a batch of items to update
>                 - each actionable item is wrapped into an '_AnalyzeLinksRequestWrapper' instance, all of which are tossed into a defer.DeferredList()
>
>         AnalyzeLinksRequestWrapper-
>                 - relies on twisted
>                 - pushes actual work into callbacks via threads.deferToThread
>                 - uses a defer.DeferredSemaphore provided by AnalyzeLinksService to acquire locks
>
>
> some cleaned-up code is below :
>
> ------------------
>
> class AnalyzeLink(object):
>     def get_update_batch(self,txn):
>         # returns list of ids/data/etc to process
>
>     def action_for_data(self,txn,data):
>         # processes an entry
>
>
> class _AnalyzeLinksRequestWrapper(RequestWrapper):
>         dbConnectionPool = None
>     semaphoreService = None
>     semaphoreLock = None
>
>     def __init__( self , semaphoreService = None , dbConnectionPool = None ):
>         self.dbConnectionPool= dbConnectionPool
>         self.semaphoreService= semaphoreService
>
>     def queue_thread( self , data=None ):
>         self.queued_data= data
>         d = self.semaphoreService.acquire()\
>             .addCallback( self._T_to_thread )
>         return d
>
>     def _T_to_thread( self , deferredSemaphore ):
>         self.semaphoreLock= deferredSemaphore
>         t = threads.deferToThread( self._T_thread_begin )\
>             .addErrback( self._T_errors )\
>             .addCallback( self._T_thread_end )
>
>     def _T_thread_begin( self ):
>         log.debug("_AnalyzeLinksRequestWrapper._T_thread_begin" )
>         updater = AnalyzeLink()
>         self.dbConnectionPool.runInteraction( updater.action_for_data , self.queued_data )\
>             .addCallback( self._T_thread_end )\
>             .addErrback( self._T_errors )
>
>     def _T_thread_end( self , rval=None ):
>         self.semaphoreLock.release()
>
>     def _T_errors( self , x ):
>         self._T_thread_end()
>         raise x
>
>
> class _AnalyzeLinksService(ServiceScaffold):
>     SEMAPHORE_TOKENS = 25
>
>     def __init__( self ):
>         self.semaphoreService= defer.DeferredSemaphore( tokens=self.SEMAPHORE_TOKENS )
>
>     def action( self ):
>         updater= AnalyzeLink()
>         database.get_dbPool().runInteraction( updater.get_update_batch , queued_updates )\
>             .addCallback( self._action_2 )\
>             .addErrback( self._action_error )
>
>     def _action_2( self , queued_updates ):
>         if len( queued_updates ):
>             updates= []
>             for item in queued_updates:
>                 requestWrapper= _AnalyzeLinksRequestWrapper(\
>                     semaphoreService = self.semaphoreService ,
>                     dbConnectionPool = database.get_dbPool()
>                 )
>                 result= requestWrapper.queue_thread( data=item )
>                 updates.append(result)
>             finished= defer.DeferredList( updates )\
>                 .addCallback( self.deferred_list_finish )
>         else:
>             d= defer.Deferred()
>             self.deferred_list_finish( d )
>
>     def _action_error( self , raised ):
>         log.debug("%s._action_error" % self.__class__.__name__ )
>         self.set_processing_status( False )
>         if isinstance( raised.value , database.DbRollback ):
>             print "DB Rollback"
>             raise raised
>         elif isinstance( raised.value , database.DbRollbackOk ):
>             print "DB Rollback ok"
>         else:
>             raise raised
>
>
> AnalyzeLinksService= _AnalyzeLinksService()
>
>
> class AnalyzeLinksService_Service(internet.TimerService):
>     def __init__( self , dbConfigHash=None ):
>         internet.TimerService.__init__( self,
>             CHECK_PERIOD__IMPORT ,
>             AnalyzeLinksService.action
>         )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python


From twisted-python at 2xlp.com  Wed Sep 26 17:21:26 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 17:21:26 -0400
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
	<7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
	<CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>
Message-ID: <61F933A3-274E-4DDD-8FA5-550D4A16BBF9@2xlp.com>

oooh!

thanks.  I'm going to try and reimplement with that right now!

On Sep 26, 2012, at 5:09 PM, Stephen Thorne wrote:

> This is a better way of using DeferredSemaphore:
> 
>    def queue_thread( self , data=None ):
>        self.queued_data= data
>        return self.semaphoreService.run( self._T_to_thread )
> 
> It handles acquisition and release for you. This will avoid any code
> path that might result in a double-release.



From twisted-python at 2xlp.com  Wed Sep 26 19:46:32 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 19:46:32 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
Message-ID: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>

while migrating some functionality to a deferred callback chain and debugging my app, i noticed this oddity...

if a function doesn't have the proper args/kwargs definition, no error is raised and everything just hangs

for example, if i have these 2 class functions in an internet.TimerService managed class ...

     def start_chain( self ):
        database.get_dbPool().runInteraction( self.get_update_batch )\
            .addCallback( self.process_batch )

   def get_update_batch(self):
        return True

and then improperly don't have an arg to capture the return value in the callback...

     def process_batch( self ):
         pass

then the reactor just seems to hang.

if i kill the process, then the Unhandled Error and Traceback message prints.
If i wait until the next interval that the timerservice runs, then the Unhandled Error and Traceback message will print then ( but that could be minutes/hours later ).  

has anyone else noticed this before ? 

are there any good ways around this , other than setting the timer service to be within seconds during bugtesting ?

From itamar at futurefoundries.com  Wed Sep 26 20:20:46 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 26 Sep 2012 20:20:46 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
Message-ID: <CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>

On Wed, Sep 26, 2012 at 7:46 PM, Jonathan Vanasco
<twisted-python at 2xlp.com>wrote:

> while migrating some functionality to a deferred callback chain and
> debugging my app, i noticed this oddity...
>
> if a function doesn't have the proper args/kwargs definition, no error is
> raised and everything just hangs
>
> ...


> then the reactor just seems to hang.
>
> if i kill the process, then the Unhandled Error and Traceback message
> prints.
> If i wait until the next interval that the timerservice runs, then the
> Unhandled Error and Traceback message will print then ( but that could be
> minutes/hours later ).
>
> has anyone else noticed this before ?
>

The reactor isn't hanging, it's running just fine. The problem is you
expect the Deferred's error to be logged immediately, which is not
guaranteed; the error is only logged if the object is garbage collected,
which may take a while, or never happen if you've kept extra references
around. The latter can happen by accident.


> are there any good ways around this , other than setting the timer service
> to be within seconds during bugtesting ?
>

   1. Add a logging errback to all Deferreds at the end of the callback
   chain: d.addErrback(log.err).
   2. Less effective, but also helpful, is making sure you delete all
   unnecessary references to a Deferred once you've fired it, to make sure it
   gets garbage collected:

   self.d.callback(None)
   del self.d # remove extra reference that prevents garbage collection

http://bit.ly/NS6ptj explains the issue.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120926/93b3a54b/attachment.htm 

From twisted-python at 2xlp.com  Wed Sep 26 22:47:06 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 22:47:06 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
In-Reply-To: <CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
Message-ID: <79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>

thanks so much for the quick response, and i wish i thought of looking in the FAQ ( just searched online, and nothing relevant came up )

Will defer.setDebugging(True) make these errors print/log sooner ?   i'm in the process of getting all the addErrback() commands and making this app "proper", which is how i found this out in the first place.  


On Sep 26, 2012, at 8:20 PM, Itamar Turner-Trauring wrote:

> On Wed, Sep 26, 2012 at 7:46 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> while migrating some functionality to a deferred callback chain and debugging my app, i noticed this oddity...
> 
> if a function doesn't have the proper args/kwargs definition, no error is raised and everything just hangs
> 
> ...
>  
> then the reactor just seems to hang.
> 
> if i kill the process, then the Unhandled Error and Traceback message prints.
> If i wait until the next interval that the timerservice runs, then the Unhandled Error and Traceback message will print then ( but that could be minutes/hours later ).
> 
> has anyone else noticed this before ?
> 
> The reactor isn't hanging, it's running just fine. The problem is you expect the Deferred's error to be logged immediately, which is not guaranteed; the error is only logged if the object is garbage collected, which may take a while, or never happen if you've kept extra references around. The latter can happen by accident.
>  
> are there any good ways around this , other than setting the timer service to be within seconds during bugtesting ?
> 	? Add a logging errback to all Deferreds at the end of the callback chain: d.addErrback(log.err).
> 	? Less effective, but also helpful, is making sure you delete all unnecessary references to a Deferred once you've fired it, to make sure it gets garbage collected:
>    self.d.callback(None)
>    del self.d # remove extra reference that prevents garbage collection
> 
> http://bit.ly/NS6ptj explains the issue.
> 
> -- 
> Itamar Turner-Trauring, Future Foundries LLC
> http://futurefoundries.com/ ? Twisted consulting, training and support.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net



From p.mayers at imperial.ac.uk  Thu Sep 27 07:15:55 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 27 Sep 2012 12:15:55 +0100
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
Message-ID: <5064356B.3060903@imperial.ac.uk>

On 27/09/12 03:47, Jonathan Vanasco wrote:
> thanks so much for the quick response, and i wish i thought of
> looking in the FAQ ( just searched online, and nothing relevant came
> up )
>
> Will defer.setDebugging(True) make these errors print/log sooner ?

I don't think so. I think you'll just get more info in the error.

You could using a "loopingcall" to call gc.collect() periodically but 
it's hacky, and only helps with things you've cleared all refs to. If 
you've got a dangling ref, it'll just never get gc'ed.

> i'm in the process of getting all the addErrback() commands and

That's your better option.


From poalman at gmail.com  Thu Sep 27 08:08:18 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 27 Sep 2012 13:08:18 +0100
Subject: [Twisted-Python] dynamic FTP realm
Message-ID: <CACgdh2i0iqcWXAUPsypaONnk1M800d1HTiXYWpB-dLXXjetYFw@mail.gmail.com>

I'm very new to twisted (I've only just started using it, so I apologise if
anything I ask is seemingly obvious!).

I'm looking to try and set up a FTP server which will serve a file
structure and files which don't exists on the server (the file structure
information is stored on cassandra, and the files are on s3). The file
structure and files will also be unique to the user, so different logins
will generate the file structure for that particular user, but I guess I
can adress that later.

firstly is this possible?

I imagine there will be some methods for listing folders, and listing files
that I can override and in there I can make a request to get the list and
return it.

I found this<http://twistedmatrix.com/documents/current/core/examples/ftpserver.py>
example
of a ftp server but I can't seem to find out how I can override or change
FTPRealm to alter how it lists files/folders.

Any advice or pointers to some ftp tutorials would be hugely appreciated,

Many thanks!

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120927/4db1ce85/attachment.htm 

From rutt.4 at osu.edu  Thu Sep 27 22:41:36 2012
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Thu, 27 Sep 2012 22:41:36 -0400
Subject: [Twisted-Python] MemoryError in twisted causes the program to exit,
	or not
Message-ID: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>

Hi, I am trying to understand what will happen in my long-running twisted
server program when the available memory is low.

If I run the following program with increasing numeric seeds as arguments,
0, 1, 2, 3, 4, ? , some of the time the out of memory condition will crash
and exit the program right away (when the MemoryError is raised inside
twisted core code), and other times it will just carry on with an
UnhandledError (if the MemoryError is raised inside my hi() function below).

Sample code:

---
#!/usr/bin/env python

import sys, resource, random, traceback

from twisted.internet         import reactor

resource.setrlimit(resource.RLIMIT_AS, (180 * 1024 * 1024,
resource.RLIM_INFINITY))

data = []
random.seed(int(sys.argv[1]))

def hi():
    data.append('x' * random.randint(1, 10000))
    reactor.callLater(0, hi)

def main():
    reactor.callLater(0, hi)

reactor.callWhenRunning(main)
reactor.run()
 ---

I am using python 2.7.1, twisted 11.0.0.

Sample runs follow:

bash$ n=0; while true; do echo "starting rep $n"; ./twisted-oom.py $n;
n=$(($n+1)); echo; done
starting rep 0
Traceback (most recent call last):
  File ?./twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1177, in mainLoop
    log.err()
  File "/sw/external/twisted-py27-11.0.0/lib/python/twisted/python/log.py",
line 197, in err
    _stuff = failure.Failure()
MemoryError

starting rep 1
Traceback (most recent call last):
  File ". /twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1177, in mainLoop
    log.err()
MemoryError

starting rep 2
Unhandled Error
Traceback (most recent call last):
  File "./twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1171, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 793, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/home/ruttbe/dev/oneoff/twisted-oom.py", line 14, in hi
    data.append('x' * random.randint(1, 10000))
exceptions.MemoryError:

On the first two runs, the program exited quickly, but on the last rep
("starting rep 2"), it just carried on running with the reactor still
running.  It would be nice if there was a way to make the out of memory
behavior consistent, so I would know that it would either always carry on
running with a MemoryError stack trace, or always crash out and end the
program.  Maybe runUntilCurrent should not catch MemoryError from user code
and should let it propagate out?  Also wondering if there are other
different behaviors in other areas of the code (such as callbacks into user
code such as dataReceived, outReceived, lineReceived, etc.).  i.e. is the
observed behavior (that MemoryError in user code is caught and MemoryError
in twisted core is not) intentional, or an accident?

Thanks,
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120927/d6b78e3d/attachment.htm 

From glyph at twistedmatrix.com  Fri Sep 28 03:09:23 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 00:09:23 -0700
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
In-Reply-To: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
Message-ID: <30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>


Le Sep 27, 2012 ? 7:41 PM, Benjamin Rutt <rutt.4 at osu.edu> a ?crit :

> Hi, I am trying to understand what will happen in my long-running twisted server program when the available memory is low. 

Probably nothing good.

> If I run the following program with increasing numeric seeds as arguments, 0, 1, 2, 3, 4, ? , some of the time the out of memory condition will crash and exit the program right away (when the MemoryError is raised inside twisted core code), and other times it will just carry on with an UnhandledError (if the MemoryError is raised inside my hi() function below).

Yes.

Resource exhaustion testing is tough, especially in Python, where literally every function call may (non-deterministically) allocate memory.  MemoryError is an exception that you may see at any time, in any context, without warning.  Most notably you may encounter a MemoryError when attempting to handle a MemoryError and there's not much you can do about it at that point.

Ostensibly, Twisted could deal with this "better" by special-casing MemoryError in top-level error handlers and falling through to exit, rather than attempting to log; but, in cases where only a localized area is experiencing memory pressure and the exception causes cleanup to happen correctly, this would overzealously exit your service even in cases where it could recover.

So: don't exhaust your available memory.  It will cause a lot of unpredictable problems.

If you have a better idea for how Twisted might handle this generally though, I'm happy to hear it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120928/2155abce/attachment.htm 

From solipsis at pitrou.net  Fri Sep 28 04:10:23 2012
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 28 Sep 2012 10:10:23 +0200
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
Message-ID: <20120928101023.431999a7@pitrou.net>

On Fri, 28 Sep 2012 00:09:23 -0700
Glyph <glyph at twistedmatrix.com> wrote:
> 
> Le Sep 27, 2012 ? 7:41 PM, Benjamin Rutt <rutt.4 at osu.edu> a ?crit :
> 
> > Hi, I am trying to understand what will happen in my long-running twisted server program when the available memory is low. 
> 
> Probably nothing good.
> 
> > If I run the following program with increasing numeric seeds as arguments, 0, 1, 2, 3, 4, ? , some of the time the out of memory condition will crash and exit the program right away (when the MemoryError is raised inside twisted core code), and other times it will just carry on with an UnhandledError (if the MemoryError is raised inside my hi() function below).
> 
> Yes.
> 
> Ostensibly, Twisted could deal with this "better" by special-casing MemoryError in top-level error handlers and falling through to exit, rather than attempting to log; but, in cases where only a localized area is experiencing memory pressure and the exception causes cleanup to happen correctly, this would overzealously exit your service even in cases where it could recover.

I agree this would be unwelcome behaviour.

> If you have a better idea for how Twisted might handle this generally though, I'm happy to hear it :).

Calling gc.collect() might improve things, temporarily or not, in some
contexts. Perhaps enough to be able to log the error, so that the
developer isn't left without a clue.

(whether Python itself should try to GC-collect when MemoryError is
raised is an open question)

Regards

Antoine.


-- 
Software development and contracting: http://pro.pitrou.net




From tom.sheffler at gmail.com  Fri Sep 28 10:32:43 2012
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Fri, 28 Sep 2012 07:32:43 -0700
Subject: [Twisted-Python] dynamic FTP realm
Message-ID: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>

Hi Paul -

I'm very new to twisted (I've only just started using it, so I apologise if
> anything I ask is seemingly obvious!).
> I'm looking to try and set up a FTP server which will serve a file
> structure and files which don't exists on the server (the file structure
> information is stored on cassandra, and the files are on s3). The file
> structure and files will also be unique to the user, so different logins
> will generate the file structure for that particular user, but I guess I
> can adress that later.



Here is a quick sketch of some of the steps ... but beware, I haven't
debugged this.  You'll want to subclass twisted.protocols.ftp.FTPShell with
a new command interpreter

    class PaulsFTPShell(FTPShell):
        ....

The you'll need to write a Realm that returns an instance of your FTP Shell:

class PaulsFTPRealm(FTPRealm):
    """
    @type anonymousRoot: L{twisted.python.filepath.FilePath}
    @ivar anonymousRoot: Root of the filesystem to which anonymous
    users will be granted access.
    """
    implements(portal.IRealm)

    def __init__(self, ....)
        ....

    def requestAvatar(self, avatarId, mind, *interfaces):
        for iface in interfaces:
            if iface is IFTPShell:
                if avatarId is checkers.ANONYMOUS:
                    avatar = None
                else:
                    avatar = PaulsFTPShell( ...)

                return IFTPShell, avatar, getattr(avatar, 'logout', lambda:
None)
        raise NotImplementedError("Only IFTPShell interface is supported by
this realm")


Then you'll stich it all together like this:


    f = FTPFactory()
    r = PaulsFTPRealm()
    p = Portal.Portal(r)
    p.registerChecker(...)

    f.portal = p

Hope this helps get you started.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120928/99670c1b/attachment.htm 

From exarkun at twistedmatrix.com  Fri Sep 28 13:16:14 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Sep 2012 17:16:14 -0000
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <5064356B.3060903@imperial.ac.uk>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
	<5064356B.3060903@imperial.ac.uk>
Message-ID: <20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>

On 27 Sep, 11:15 am, p.mayers at imperial.ac.uk wrote:
>On 27/09/12 03:47, Jonathan Vanasco wrote:
>>thanks so much for the quick response, and i wish i thought of
>>looking in the FAQ ( just searched online, and nothing relevant came
>>up )
>>
>>Will defer.setDebugging(True) make these errors print/log sooner ?
>
>I don't think so. I think you'll just get more info in the error.
>
>You could using a "loopingcall" to call gc.collect() periodically but

Please, no one ever do this.

Jean-Paul


From glyph at twistedmatrix.com  Fri Sep 28 13:29:47 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 10:29:47 -0700
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
In-Reply-To: <20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
	<5064356B.3060903@imperial.ac.uk>
	<20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <D5481DE3-BDA0-4BCF-A56C-7CCA25545980@twistedmatrix.com>


Le Sep 28, 2012 ? 10:16 AM, exarkun at twistedmatrix.com a ?crit :

> On 27 Sep, 11:15 am, p.mayers at imperial.ac.uk wrote:
>> On 27/09/12 03:47, Jonathan Vanasco wrote:
>>> thanks so much for the quick response, and i wish i thought of
>>> looking in the FAQ ( just searched online, and nothing relevant came
>>> up )
>>> 
>>> Will defer.setDebugging(True) make these errors print/log sooner ?
>> 
>> I don't think so. I think you'll just get more info in the error.
>> 
>> You could using a "loopingcall" to call gc.collect() periodically but
> 
> Please, no one ever do this.

In the spirit of socratic inquiry, why not?

-glyph

From glyph at twistedmatrix.com  Fri Sep 28 14:40:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 11:40:54 -0700
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
In-Reply-To: <20120928101023.431999a7@pitrou.net>
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
	<20120928101023.431999a7@pitrou.net>
Message-ID: <8CD9D1A3-4A05-4D52-AFCF-EED796999138@twistedmatrix.com>


Le Sep 28, 2012 ? 1:10 AM, Antoine Pitrou <solipsis at pitrou.net> a ?crit :

> (whether Python itself should try to GC-collect when MemoryError is
> raised is an open question)

Shouldn't it be doing a GC collect _before_ MemoryError is raised? (Isn't this rather the whole point of having a garbage collector?)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120928/ecdad52d/attachment.htm 

From solipsis at pitrou.net  Fri Sep 28 14:44:17 2012
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 28 Sep 2012 20:44:17 +0200
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
	<20120928101023.431999a7@pitrou.net>
	<8CD9D1A3-4A05-4D52-AFCF-EED796999138@twistedmatrix.com>
Message-ID: <20120928204417.30501919@pitrou.net>

On Fri, 28 Sep 2012 11:40:54 -0700
Glyph <glyph at twistedmatrix.com> wrote:
> 
> Le Sep 28, 2012 ? 1:10 AM, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
> 
> > (whether Python itself should try to GC-collect when MemoryError is
> > raised is an open question)
> 
> Shouldn't it be doing a GC collect _before_ MemoryError is raised? (Isn't this rather the whole point of having a garbage collector?)

Indeed, it also could.

Regards

Antoine.

-- 
Software development and contracting: http://pro.pitrou.net




From a.rzadkowolski at gmail.com  Fri Sep 28 18:00:06 2012
From: a.rzadkowolski at gmail.com (Arkadiusz Rzadkowolski)
Date: Sat, 29 Sep 2012 00:00:06 +0200
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
Message-ID: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>

Hello everyone
I am currently working on creating a complex python script which will be
using connection pooling from redis-py library (it will be working as a
backport Unix Domain Socket for redis 1.4, which doesn't support unix
sockets)

The simplest version of my code was included in the attachment.

I have a problem thought. Even if traffic is high (500+ requests per
second) there are no new connections started to redis (added print to
connection.py to trace it).

Here's my output:
2012-09-28 23:00:31+0200 [-] Log opened.
2012-09-28 23:00:31+0200 [-] Factory starting on '/tmp/redis_test.sock'
2012-09-28 23:00:31+0200 [-] Starting factory
<twisted.internet.protocol.Factory instance at 0x1fc77a0>
2012-09-28 23:00:31+0200 [RedisWorkerProtocol,0,] New connection

After waiting 15 minutes, nothing more has been shown.

Requests work just fine and always get a reply. I am curious though, why my
code doesn't initiate more connections to redis? Could you please shed a
light on this issue? Is it my code, redis-py simply doesn't need more
connections, or twisted works in my code as "one connection at a
time"? Really appreciate your reply.

Thank you in advance and have a great weekend!

--
Best regards,
Arkadiusz Rz.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120929/a89cd224/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sock_test.py
Type: application/octet-stream
Size: 1462 bytes
Desc: not available
Url : http://twistedmatrix.com/pipermail/twisted-python/attachments/20120929/a89cd224/attachment.obj 

From itamar at futurefoundries.com  Fri Sep 28 21:28:09 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 28 Sep 2012 21:28:09 -0400
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
In-Reply-To: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
References: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
Message-ID: <CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>

One problem in the code: it kinda seems you want to receive lines, but
you're overriding dataReceived instead of lineReceived in
RedisWorkProtocol. At the very minimum you shouldn't assume dataReceived is
called with the exact bytes that were written on the other side.

More importantly, I assume redis-py is blocking. Calling a blocking API
from Twisted will block the reactor, preventing any other code from running
until it the API call returns. As such it means you can't have two queries
to redis running at the same time, unless you use something like
deferToThread, or a redis client that supports Twisted directly.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120928/01fe17bb/attachment.htm 

From poalman at gmail.com  Sat Sep 29 15:44:51 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Sat, 29 Sep 2012 20:44:51 +0100
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
Message-ID: <CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>

On 28 September 2012 15:32, Tom Sheffler <tom.sheffler at gmail.com> wrote:

> Hi Paul -
>
> I'm very new to twisted (I've only just started using it, so I apologise if
>> anything I ask is seemingly obvious!).
>> I'm looking to try and set up a FTP server which will serve a file
>> structure and files which don't exists on the server (the file structure
>> information is stored on cassandra, and the files are on s3). The file
>> structure and files will also be unique to the user, so different logins
>> will generate the file structure for that particular user, but I guess I
>> can adress that later.
>
>
>
> Here is a quick sketch of some of the steps ... but beware, I haven't
> debugged this.  You'll want to subclass twisted.protocols.ftp.FTPShell with
> a new command interpreter
>
>     class PaulsFTPShell(FTPShell):
>         ....
>
> The you'll need to write a Realm that returns an instance of your FTP
> Shell:
>
> class PaulsFTPRealm(FTPRealm):
>     """
>     @type anonymousRoot: L{twisted.python.filepath.FilePath}
>     @ivar anonymousRoot: Root of the filesystem to which anonymous
>     users will be granted access.
>     """
>     implements(portal.IRealm)
>
>     def __init__(self, ....)
>         ....
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         for iface in interfaces:
>             if iface is IFTPShell:
>                 if avatarId is checkers.ANONYMOUS:
>                     avatar = None
>                 else:
>                     avatar = PaulsFTPShell( ...)
>
>                 return IFTPShell, avatar, getattr(avatar, 'logout',
> lambda: None)
>         raise NotImplementedError("Only IFTPShell interface is supported
> by this realm")
>
>
> Then you'll stich it all together like this:
>
>
>     f = FTPFactory()
>     r = PaulsFTPRealm()
>     p = Portal.Portal(r)
>     p.registerChecker(...)
>
>     f.portal = p
>
> Hope this helps get you started.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

Thank you. I've made quite a bit of progress and now have my own Portal,
CredentialsChecker, Realm, Shell, and FilePath object.

One thing I haven't been able to work out is, when I override, lets say
listdir for example in FilePath, I need to make a webcall to find out the
folder contents, how can I make this call asynchronously?

I'm guessing I need to used deferred in someway, but seeing as listdir
doesn't return deferred objects I'm not sure how to make it work.

As listdir gets called from the Shell I guess I could change how blocking
calls in my FilePath object get called?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120929/85b0bdeb/attachment.htm 

From exarkun at twistedmatrix.com  Sat Sep 29 16:21:49 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 29 Sep 2012 20:21:49 -0000
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
Message-ID: <20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>

On 07:44 pm, poalman at gmail.com wrote:
>
>Thank you. I've made quite a bit of progress and now have my own 
>Portal,
>CredentialsChecker, Realm, Shell, and FilePath object.
>
>One thing I haven't been able to work out is, when I override, lets say
>listdir for example in FilePath, I need to make a webcall to find out 
>the
>folder contents, how can I make this call asynchronously?
>
>I'm guessing I need to used deferred in someway, but seeing as listdir
>doesn't return deferred objects I'm not sure how to make it work.
>
>As listdir gets called from the Shell I guess I could change how 
>blocking
>calls in my FilePath object get called?

The place to customize listing the contents of a directory is in the 
shell.  More specifically, in an implementation of IFTPShell.list.  It's 
almost certainly the case that you should *not* have a FilePath subclass 
with overridden methods.  Instead, you should have a `list` 
implementation on your shell that returns the desired results.  And 
since `IFTPShell.list` is allowed to return a Deferred, you no longer 
have a problem performing asynchronous operations.

Jean-Paul


From exarkun at twistedmatrix.com  Sun Sep 30 00:05:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Sep 2012 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1348977923.82.1372464629@twistedmatrix.com

An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120930/7ecdab0c/attachment.htm 

From a.rzadkowolski at gmail.com  Sun Sep 30 06:24:24 2012
From: a.rzadkowolski at gmail.com (Arkadiusz Rzadkowolski)
Date: Sun, 30 Sep 2012 12:24:24 +0200
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
In-Reply-To: <CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>
References: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
	<CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>
Message-ID: <CALK05+X0UJLn1WmaVf7ogF+BODG0s_F8_VqKQTWACrfFusmAPQ@mail.gmail.com>

Thank you very much for your reply Itamar. I have switched to txredisapi
which is non-blocking library and my problem was solved.

2012/9/29 Itamar Turner-Trauring <itamar at futurefoundries.com>

> One problem in the code: it kinda seems you want to receive lines, but
> you're overriding dataReceived instead of lineReceived in
> RedisWorkProtocol. At the very minimum you shouldn't assume dataReceived is
> called with the exact bytes that were written on the other side.
>
> More importantly, I assume redis-py is blocking. Calling a blocking API
> from Twisted will block the reactor, preventing any other code from running
> until it the API call returns. As such it means you can't have two queries
> to redis running at the same time, unless you use something like
> deferToThread, or a redis client that supports Twisted directly.
>
> --
> Itamar Turner-Trauring, Future Foundries LLC
> http://futurefoundries.com/ ? Twisted consulting, training and support.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120930/937feb81/attachment-0001.htm 

From poalman at gmail.com  Sun Sep 30 08:38:57 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Sun, 30 Sep 2012 13:38:57 +0100
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
	<20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
Message-ID: <CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>

On 29 September 2012 21:21, <exarkun at twistedmatrix.com> wrote:

> On 07:44 pm, poalman at gmail.com wrote:
> >
> >Thank you. I've made quite a bit of progress and now have my own
> >Portal,
> >CredentialsChecker, Realm, Shell, and FilePath object.
> >
> >One thing I haven't been able to work out is, when I override, lets say
> >listdir for example in FilePath, I need to make a webcall to find out
> >the
> >folder contents, how can I make this call asynchronously?
> >
> >I'm guessing I need to used deferred in someway, but seeing as listdir
> >doesn't return deferred objects I'm not sure how to make it work.
> >
> >As listdir gets called from the Shell I guess I could change how
> >blocking
> >calls in my FilePath object get called?
>
> The place to customize listing the contents of a directory is in the
> shell.  More specifically, in an implementation of IFTPShell.list.  It's
> almost certainly the case that you should *not* have a FilePath subclass
> with overridden methods.  Instead, you should have a `list`
> implementation on your shell that returns the desired results.  And
> since `IFTPShell.list` is allowed to return a Deferred, you no longer
> have a problem performing asynchronous operations.
>
> Jean-Paul
>
>
 That is likely a much better idea! Will I need to use some threading if
I'm making web calls then from list? Presumably if I don't the whole
process will block while it's waiting for web responses?

I've seen there is a deferToThread but I'm not too sure how to use it, do I
just need to return it?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120930/5f69d5e3/attachment.htm 

From itamar at futurefoundries.com  Sun Sep 30 08:59:30 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 30 Sep 2012 08:59:30 -0400
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
	<20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
	<CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>
Message-ID: <CAOp9P3qQeou_vGz07k-750YeLdPaT8d3QwRsLLuuzmtV_oTLRw@mail.gmail.com>

On Sun, Sep 30, 2012 at 8:38 AM, Paul Wiseman <poalman at gmail.com> wrote:

>
>  That is likely a much better idea! Will I need to use some threading if
> I'm making web calls then from list? Presumably if I don't the whole
> process will block while it's waiting for web responses?
>

If you're using Twisted's web clients (getPage or the more complex but
superior Agent) you do not need threads, Twisted will do the networking in
a non-blocking manner. E.g.

def list(self, path):
    return
twisted.web.client.getPage(...).addCallback(convertHTTPResponseToFTPListing)

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ ? Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://twistedmatrix.com/pipermail/twisted-python/attachments/20120930/57f448f9/attachment.htm 

From linshuai2012 at gmail.com  Sat Sep  1 00:04:22 2012
From: linshuai2012 at gmail.com (Shuai Lin)
Date: Sat, 1 Sep 2012 14:04:22 +0800
Subject: [Twisted-Python] blocking code alongside with Twisted
In-Reply-To: <6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>
References: <CA+VO6itgv5DW5oQNjG77ajs=vzJ1-u=RCB_9X1c4z9JYbnR+Dg@mail.gmail.com>
	<6A55D674-13F6-4FFF-BA1A-BD819097189D@twistedmatrix.com>
Message-ID: <CA+VO6isKkLf+1NezNyTvdz9Kcoc7Pzm3hwpVtR6NHC92XsvXNQ@mail.gmail.com>

Thanks for the quick reply. I don't need Ampoule, since the tasks are
simply calling some libreoffice api to convert documents to pdf format, but
thank you all the same!

On Sat, Sep 1, 2012 at 1:53 PM, Glyph <glyph at twistedmatrix.com> wrote:

>
> On Aug 31, 2012, at 10:30 PM, Shuai Lin <linshuai2012 at gmail.com> wrote:
>
> > Hi all,
> >
> >     My server mainly consists of two modules:
> >     -- http api handling (using twisted)
> >     -- backend blocking tasks
> >
> >     The backend tasks have to block, because I have to call some
> third-party API, which is always blocking. What's more, since the
> third-party api call is blocking, I plan to use a thread pool to implement
> a connection pool.
> >
> >     My question is: Is it ok to use twisted in this manner?  i.e. I just
> run `reactor.run()' in the main thread (to handle the http api request),
> and the rest of the program is  blocking -- and intrinsically not related
> to twisted.
> >
> >     Any suggestion is appreciated. Thanks!
>
> Sure, this is fine.  This is why the reactor has callInThread() after all
> :).  It may also make sense to use something like Ampoule <
> https://launchpad.net/ampoule> if the backend tasks are CPU intensive as
> well, and you want multi-core parallelism.
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120901/594374b2/attachment.html>

From ashwini.oruganti at gmail.com  Sat Sep  1 07:47:05 2012
From: ashwini.oruganti at gmail.com (Ashwini Oruganti)
Date: Sat, 1 Sep 2012 19:17:05 +0530
Subject: [Twisted-Python] Twisted 12.2.0 released
Message-ID: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>

On behalf of Twisted Matrix Laboratories, I am honored to announce the
release of Twisted 12.2.

Highlights for this release include:

  * To be able to work on Python3 support, Python 2.5 is no longer
supported.

  * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
more information and conform to the IMAP4 RFC more closely.

  * twisted.conch now supports commercial SSH implementations which don't
comply with the IETF standard.

  * twisted.internet.endpoints now provides several new endpoints,
including a
TCP client endpoint that resolves hostnames to IPv6 host addresses.

  * IReactorSocket.adoptStreamConnection, implemented by some reactors,
allows adding an existing established connection to the reactor.

Starting with the release after 12.2, Twisted will begin requiring
zope.interface 3.6 (as part of Python 3 support).

This is the last Twisted release supporting Python 2.6 on Windows.

For more information, see the NEWS file here:

 http://twistedmatrix.com/Releases/Twisted/12.2/NEWS.txt


Download it now from:

 http://pypi.python.org/packages/source/T/Twisted/Twisted-12.2.0.tar.bz2 or


http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.exe
 or


http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.msi
 or


http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.exe
 or


http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.msi


Thanks to the supporters of Twisted and to the many contributors for this
release.


--
Ashwini Oruganti
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120901/41708cb5/attachment.html>

From glyph at twistedmatrix.com  Sat Sep  1 17:54:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Sat, 1 Sep 2012 16:54:54 -0700
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <7B6EFE67-8A40-4B1A-B822-87285E68C4FD@twistedmatrix.com>


On Sep 1, 2012, at 6:47 AM, Ashwini Oruganti <ashwini.oruganti at gmail.com> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.

Thanks to everyone who worked on it, and congratulations Ashwini on managing your first release!

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120901/6cf8c90f/attachment.html>

From exarkun at twistedmatrix.com  Sat Sep  1 22:05:29 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 02 Sep 2012 04:05:29 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1346558729.85.688322026@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120902/e5ded492/attachment.html>

From _ at lvh.cc  Sun Sep  2 10:36:27 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Sun, 2 Sep 2012 18:36:27 +0200
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <CAE_Hg6ZZxATZL5Trs0Lutk8vQj_BnVh9_ir11+j5Nx40Np_H2A@mail.gmail.com>

Congratulations to the entire team, particularly Ashwini, and thank you for
an awesome release manager job well done, Ashwini :)


On Sat, Sep 1, 2012 at 3:47 PM, Ashwini Oruganti <ashwini.oruganti at gmail.com
> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.
>
> Highlights for this release include:
>
>   * To be able to work on Python3 support, Python 2.5 is no longer
> supported.
>
>   * twisted.mail.imap4 now serves BODYSTRUCTURE responses which provide
> more information and conform to the IMAP4 RFC more closely.
>
>   * twisted.conch now supports commercial SSH implementations which don't
> comply with the IETF standard.
>
>   * twisted.internet.endpoints now provides several new endpoints,
> including a
> TCP client endpoint that resolves hostnames to IPv6 host addresses.
>
>   * IReactorSocket.adoptStreamConnection, implemented by some reactors,
> allows adding an existing established connection to the reactor.
>
> Starting with the release after 12.2, Twisted will begin requiring
> zope.interface 3.6 (as part of Python 3 support).
>
> This is the last Twisted release supporting Python 2.6 on Windows.
>
> For more information, see the NEWS file here:
>
>  http://twistedmatrix.com/Releases/Twisted/12.2/NEWS.txt
>
>
> Download it now from:
>
>  http://pypi.python.org/packages/source/T/Twisted/Twisted-12.2.0.tar.bz2
>  or
>
>
> http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.exe
>  or
>
>
> http://pypi.python.org/packages/2.6/T/Twisted/Twisted-12.2.0.win32-py2.6.msi
>  or
>
>
> http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.exe
>  or
>
>
> http://pypi.python.org/packages/2.7/T/Twisted/Twisted-12.2.0.win32-py2.7.msi
>
>
> Thanks to the supporters of Twisted and to the many contributors for this
> release.
>
>
> --
> Ashwini Oruganti
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>


-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120902/fb745366/attachment-0001.html>

From godson.g at gmail.com  Mon Sep  3 01:08:16 2012
From: godson.g at gmail.com (Godson Gera)
Date: Mon, 3 Sep 2012 12:38:16 +0530
Subject: [Twisted-Python] Twisted 12.2.0 released
In-Reply-To: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
References: <CAMFCZ-24z+gtPkWJBhLUsRAK=7POrVZsTc1btG-1kSQtrOnXbA@mail.gmail.com>
Message-ID: <CAPTXd0rNMbQrk7RmvnO+DVyPQ99WP9Wg-Wr0iUXhNAmN8ieusw@mail.gmail.com>

On Sat, Sep 1, 2012 at 7:17 PM, Ashwini Oruganti <ashwini.oruganti at gmail.com
> wrote:

> On behalf of Twisted Matrix Laboratories, I am honored to announce the
> release of Twisted 12.2.
>
>
Congrats, Ashwini. adoptStreamConnection is much needed feature, happy to
see that added to this release.

-- 
Thanks & Regards,
Godson Gera
http://godson.in
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120903/bb781fc1/attachment.html>

From tom.prince at ualberta.net  Sun Sep  2 20:01:35 2012
From: tom.prince at ualberta.net (Tom Prince)
Date: Sun, 02 Sep 2012 20:01:35 -0600
Subject: [Twisted-Python] Buildbot downtime
In-Reply-To: <87d34rt0oj.fsf@hermes.hocat.ca>
References: <87d34rt0oj.fsf@hermes.hocat.ca>
Message-ID: <87r4qjzwxs.fsf@hermes.hocat.ca>

I plan to upgrade twisted's buildbot tomorrow around
Monday, September 3, 16h00 UTC[1].

During that time, the result of any builds done may be lost. Thus, I'd
ask that people avoid committing to trunk during that time.

I will send a reminder before I take down the buildbot both here, and on
#twisted and #twisted-dev.

  Tom

[1] http://timeanddate.com/worldclock/meetingdetails.html?year=2012&month=9&day=3&hour=16&min=0&sec=0&p1=80&p2=224&p3=43



From peter.westlake at pobox.com  Mon Sep  3 10:10:32 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Mon, 03 Sep 2012 17:10:32 +0100
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
Message-ID: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>

When I pass twistd the --savestats option to save profile information
as a pstats.Stats object instead of a textual report, the output file
cannot be read:

   import pstats
   p = pstats.Stats(filename)

gives:

   ValueError: bad marshal data (unknown type code)

An output file generated with cProfile.run() can be read.
Running twistd without --savestats generates a valid-looking
textual report.

This is Python 2.7.3, Twisted 12.0.0, on Debian.

Peter.



From tom.prince at ualberta.net  Mon Sep  3 11:25:21 2012
From: tom.prince at ualberta.net (Tom Prince)
Date: Mon, 03 Sep 2012 11:25:21 -0600
Subject: [Twisted-Python] Buildbot downtime
In-Reply-To: <87r4qjzwxs.fsf@hermes.hocat.ca>
References: <87d34rt0oj.fsf@hermes.hocat.ca> <87r4qjzwxs.fsf@hermes.hocat.ca>
Message-ID: <87ligryq66.fsf@hermes.hocat.ca>

Tom Prince <tom.prince at ualberta.net> writes:
> I will send a reminder before I take down the buildbot both here, and on
> #twisted and #twisted-dev.

Well, so it turns out that the upgrade hapenned before my email got
through. But the upgrade appears to have gone through without issue.

The builbot now requires authentication (u/p: twisted/matrix). The force
build script has been updated:
https://bazaar.launchpad.net/~tom.prince/twisted-trac-integration/updated-force-builds.py/view/head:/tools/force-builds.py

If there are any issue contanct my on #twisted or #twisted-dev (nick: tomprince)

  Tom




From itamar at futurefoundries.com  Tue Sep  4 19:26:13 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Tue, 4 Sep 2012 21:26:13 -0400
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
In-Reply-To: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
References: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
Message-ID: <CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>

On Mon, Sep 3, 2012 at 12:10 PM, Peter Westlake <peter.westlake at pobox.com>wrote:

> An output file generated with cProfile.run() can be read.
> Running twistd without --savestats generates a valid-looking
> textual report.
>

This may be because the default profiler twistd uses is hotshot; try
--profiler=cprofile or --profiler=profile.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120904/80bee7df/attachment-0001.html>

From peter.westlake at pobox.com  Wed Sep  5 04:01:38 2012
From: peter.westlake at pobox.com (Peter Westlake)
Date: Wed, 05 Sep 2012 11:01:38 +0100
Subject: [Twisted-Python] Profiling problem: "bad marshal data"
In-Reply-To: <CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>
References: <1346688632.14417.140661123071793.011C0C06@webmail.messagingengine.com>
	<CAOp9P3pxKH-KMX88bxghM0zKm5j=RomJFcWsRAFPi=2CsSZDYQ@mail.gmail.com>
Message-ID: <1346839298.27176.140661123857537.22D220B1@webmail.messagingengine.com>



On Wed, Sep 5, 2012, at 02:26, Itamar Turner-Trauring wrote:
> On Mon, Sep 3, 2012 at 12:10 PM, Peter Westlake
> <peter.westlake at pobox.com>wrote:
> 
> > An output file generated with cProfile.run() can be read.
> > Running twistd without --savestats generates a valid-looking
> > textual report.
> >
> 
> This may be because the default profiler twistd uses is hotshot; try
> --profiler=cprofile or --profiler=profile.

That was it, thanks! I used cprofile, and it works.

Peter.



From _ at lvh.cc  Wed Sep  5 12:41:00 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Sep 2012 20:41:00 +0200
Subject: [Twisted-Python] Getting deprecation warnings?
Message-ID: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>

Hey,


What is the appropriate way to run twistd apps in such a way that I get
nice and loud deprecation warnings?

I ran into an issue with one of my apps with the new release because
t.w.error.NoResource is now t.w.resource.NoResource, I would like to make
my code as forward compatible as possible as we go along, of course :)

(Actually this issue was because I stole some non-released code from #4173,
which wasn't being tested, but the not being tested part is now fixed.)

-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120905/b14b8d79/attachment.html>

From exarkun at twistedmatrix.com  Wed Sep  5 13:11:19 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Sep 2012 19:11:19 -0000
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
Message-ID: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>

On 06:41 pm, _ at lvh.cc wrote:
>Hey,
>
>What is the appropriate way to run twistd apps in such a way that I get
>nice and loud deprecation warnings?

1) Have complete unit test coverage and run your tests with trial.  All 
deprecation warnings will be written out as part of the test suite run.

2) Run twistd with Python 2.6

3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"

Jean-Paul
>I ran into an issue with one of my apps with the new release because
>t.w.error.NoResource is now t.w.resource.NoResource, I would like to 
>make
>my code as forward compatible as possible as we go along, of course :)
>
>(Actually this issue was because I stole some non-released code from 
>#4173,
>which wasn't being tested, but the not being tested part is now fixed.)
>
>--
>cheers
>lvh



From eric at teratorn.org  Tue Sep  4 13:59:14 2012
From: eric at teratorn.org (Eric P. Mangold)
Date: Tue, 4 Sep 2012 15:59:14 -0400
Subject: [Twisted-Python] tap2deb problem with building package
In-Reply-To: <CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>
References: <CAJ96fJ3VYTuMHGua2P1=o_1Xs5N38chSAXsQFe41jJMY22i1dw@mail.gmail.com>
	<CAJ96fJ3RbCuhdkcdi7de5K+vLyQK8mng21srORwVwPvJdzhWqQ@mail.gmail.com>
Message-ID: <20120904195914.GG2116@ragnarok.teratorn.org>

Hi,

On Fri, Aug 31, 2012 at 08:28:41PM +0200, Klaudiusz Staniek wrote:
> Hi
> when I try to build the deb package I'm getting the error message: cp:
> cannot create regular file `debian/tmp/etc/': No such file or
> directory
> 
> What is wrong? See below output:
> Cheers,
> Klaudiusz
> 
> 
> tap2deb --unsigned -m "Klaudiusz Staniek <kstaniek at gmail.com>"
> --type=python -t xplhub.tac
> dpkg-buildpackage: set CFLAGS to default value: -g -O2
> dpkg-buildpackage: set CPPFLAGS to default value:
> dpkg-buildpackage: set LDFLAGS to default value: -Wl,-Bsymbolic-functions
> dpkg-buildpackage: set FFLAGS to default value: -g -O2
> dpkg-buildpackage: set CXXFLAGS to default value: -g -O2
> dpkg-buildpackage: source package twisted-xplhub
> dpkg-buildpackage: source version 1.0
> dpkg-buildpackage: source changed by Klaudiusz Staniek <kstaniek at gmail.com>
> dpkg-buildpackage: host architecture armel
>  fakeroot debian/rules clean
> dh_testdir
> dh_testroot
> rm -f build-stamp install-stamp
> dh_clean
>  dpkg-source -b twisted-xplhub-1.0
> dpkg-source: info: using source format `1.0'
> dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.tar.gz
> dpkg-source: info: building twisted-xplhub in twisted-xplhub_1.0.dsc
>  debian/rules build
> dh_testdir
> touch build-stamp
>  fakeroot debian/rules binary
> dh_testdir
> dh_testroot
> dh_clean -k
> dh_installdirs
> # Add here commands to install the package into debian/tmp.
> cp xplhub.tac debian/tmp/etc/

In a `rules` file it is usually just as simple as:

mkdir -p debian/tmp/etc

OTOH, there is the debian/<package>.dirs file. Which I believe is preferred in newer versions of debhelper (?)

Oh, and this sounds like a bug - could you file an issue at http://twistedmatrix.com ?

Thanks,
-E



From glyph at twistedmatrix.com  Wed Sep  5 13:55:29 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 12:55:29 -0700
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>


On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:

> On 06:41 pm, _ at lvh.cc wrote:
>> Hey,
>> 
>> What is the appropriate way to run twistd apps in such a way that I get
>> nice and loud deprecation warnings?
> 
> 1) Have complete unit test coverage and run your tests with trial.  All 
> deprecation warnings will be written out as part of the test suite run.
> 
> 2) Run twistd with Python 2.6
> 
> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"

A note for posterity - if we are ever to implement a generalized 'run an inferior twistd process', or even 'run an inferior python interpreter' mechanism, warning information like this is one of the bits of runtime state that ought to be communicated.

-glyph


From exarkun at twistedmatrix.com  Wed Sep  5 14:08:35 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Wed, 05 Sep 2012 20:08:35 -0000
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
	<89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
Message-ID: <20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>

On 07:55 pm, glyph at twistedmatrix.com wrote:
>
>On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:
>>On 06:41 pm, _ at lvh.cc wrote:
>>>Hey,
>>>
>>>What is the appropriate way to run twistd apps in such a way that I 
>>>get
>>>nice and loud deprecation warnings?
>>
>>1) Have complete unit test coverage and run your tests with trial. 
>>All
>>deprecation warnings will be written out as part of the test suite 
>>run.
>>
>>2) Run twistd with Python 2.6
>>
>>3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>
>A note for posterity - if we are ever to implement a generalized 'run 
>an inferior twistd process', or even 'run an inferior python 
>interpreter' mechanism, warning information like this is one of the 
>bits of runtime state that ought to be communicated.

It would be nice if Python preserved its own command-line arguments 
somewhere, but it doesn't seem to. :/  So figuring out what the runtime 
state is is somewhat non-trivial in this case.  Otherwise, I completely 
agree.

Jean-Paul
>-glyph
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From glyph at twistedmatrix.com  Wed Sep  5 15:10:29 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 14:10:29 -0700
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
	<89786E1E-2AB2-4221-A948-28A3377BF175@twistedmatrix.com>
	<20120905200835.26322.1200074177.divmod.xquotient.6@localhost6.localdomain6>
Message-ID: <6C6F0F56-02A6-4227-B3D4-5A7735D113C5@twistedmatrix.com>


On Sep 5, 2012, at 1:08 PM, exarkun at twistedmatrix.com wrote:

> On 07:55 pm, glyph at twistedmatrix.com wrote:
>> 
>> On Sep 5, 2012, at 12:11 PM, exarkun at twistedmatrix.com wrote:
>>> On 06:41 pm, _ at lvh.cc wrote:
>>>> Hey,
>>>> 
>>>> What is the appropriate way to run twistd apps in such a way that I 
>>>> get
>>>> nice and loud deprecation warnings?
>>> 
>>> 1) Have complete unit test coverage and run your tests with trial. 
>>> All
>>> deprecation warnings will be written out as part of the test suite 
>>> run.
>>> 
>>> 2) Run twistd with Python 2.6
>>> 
>>> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>> 
>> A note for posterity - if we are ever to implement a generalized 'run 
>> an inferior twistd process', or even 'run an inferior python 
>> interpreter' mechanism, warning information like this is one of the 
>> bits of runtime state that ought to be communicated.
> 
> It would be nice if Python preserved its own command-line arguments 
> somewhere, but it doesn't seem to. :/  So figuring out what the runtime 
> state is is somewhat non-trivial in this case.  Otherwise, I completely 
> agree.

Yeah, that's kinda why I specifically pointed it out.  There are a number of command-line arguments which we should preserve if we can, but some (python -u, I think?) are lost to us entirely.  Warning disposition though, is especially important, given that users might be running subprocesses and we should report warnings in code that is covered that way too.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120905/7eb9d488/attachment.html>

From _ at lvh.cc  Wed Sep  5 15:50:41 2012
From: _ at lvh.cc (Laurens Van Houtven)
Date: Wed, 5 Sep 2012 23:50:41 +0200
Subject: [Twisted-Python] Getting deprecation warnings?
In-Reply-To: <20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
References: <CAE_Hg6bWqY4ZjL4AwFWNue62Zs==i6GXmoGd98SQVtpYonXGVg@mail.gmail.com>
	<20120905191119.26322.897460596.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <CAE_Hg6YSWUgq8s0vMzNGxCfNvPw0RxGx3zay9HEhN-pvV8fROA@mail.gmail.com>

Huh. I have complete unit test coverage and was using trial, but somehow I
managed to miss that... I guess I will have to pay more attention or
something?! I will try to recreate a situation where the warnings should
pop up.

Thanks!



On Wed, Sep 5, 2012 at 9:11 PM, <exarkun at twistedmatrix.com> wrote:

> On 06:41 pm, _ at lvh.cc wrote:
> >Hey,
> >
> >What is the appropriate way to run twistd apps in such a way that I get
> >nice and loud deprecation warnings?
>
> 1) Have complete unit test coverage and run your tests with trial.  All
> deprecation warnings will be written out as part of the test suite run.
>
> 2) Run twistd with Python 2.6
>
> 3) Run twistd with Python 2.7 and pass "-W::DeprecationWarning:"
>
> Jean-Paul
> >I ran into an issue with one of my apps with the new release because
> >t.w.error.NoResource is now t.w.resource.NoResource, I would like to
> >make
> >my code as forward compatible as possible as we go along, of course :)
> >
> >(Actually this issue was because I stole some non-released code from
> >#4173,
> >which wasn't being tested, but the not being tested part is now fixed.)
> >
> >--
> >cheers
> >lvh
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>



-- 
cheers
lvh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120905/95f2d9a0/attachment.html>

From benoit.fleury at gmail.com  Wed Sep  5 18:32:36 2012
From: benoit.fleury at gmail.com (=?UTF-8?Q?Beno=C3=AEt_Fleury?=)
Date: Wed, 5 Sep 2012 20:32:36 -0400
Subject: [Twisted-Python] Store simple value in web session
Message-ID: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>

Hi,

I would like to store a simple (immutable) value in a web session.

Here are the options I see so far:
 - use the component architecture (seems a bit overkill...)
 - subclass Session to hold the value I want to store
 - patch Session to behave like a dictionary (didn't look at the code,
not sure if it makes sense...)

I'm also curious about the advantages of this component architecture
for the session object instead of a simple dictionary?

Thanks,
Benoit.



From glyph at twistedmatrix.com  Wed Sep  5 18:58:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Wed, 5 Sep 2012 17:58:05 -0700
Subject: [Twisted-Python] Store simple value in web session
In-Reply-To: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
References: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
Message-ID: <2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>


On Sep 5, 2012, at 5:32 PM, Benoît Fleury <benoit.fleury at gmail.com> wrote:

> Hi,
> 
> I would like to store a simple (immutable) value in a web session.
> 
> Here are the options I see so far:
> - use the component architecture (seems a bit overkill...)
> - subclass Session to hold the value I want to store
> - patch Session to behave like a dictionary (didn't look at the code,
> not sure if it makes sense...)
> 
> I'm also curious about the advantages of this component architecture
> for the session object instead of a simple dictionary?

The component architecture just uses interfaces as keys so that it is unambiguous which piece of code owns them, and what properties they are supposed to provide.  This is so that multiple bits of twisted.web infrastructure can cooperatively populate the request with state without interfering with each other.

I would suggest that it's not "overkill" - it sounds like exactly what you want.  (I suspect that you feel it's overkill because you have bad experiences with some other hideously bloated thing that was also called "component architecture", but I assure you, it's really just a dictionary.)

-glyph


From benoit.fleury at gmail.com  Wed Sep  5 19:32:29 2012
From: benoit.fleury at gmail.com (=?UTF-8?Q?Beno=C3=AEt_Fleury?=)
Date: Wed, 5 Sep 2012 21:32:29 -0400
Subject: [Twisted-Python] Store simple value in web session
In-Reply-To: <2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>
References: <CAMqhTFgZzguHvSObrAKZ-5pXTXaHUyE-KP01Wj+pBaLk3w6prA@mail.gmail.com>
	<2979B0B9-A4A2-442E-9A2C-089A9F558B1D@twistedmatrix.com>
Message-ID: <CAMqhTFiETbUsTyB+cw2nVtKxbVgEXtutp0a825JgyxxTWmW5Rw@mail.gmail.com>

Thank you for the explanation.

On Wed, Sep 5, 2012 at 8:58 PM, Glyph <glyph at twistedmatrix.com> wrote:
>
> On Sep 5, 2012, at 5:32 PM, Benoît Fleury <benoit.fleury at gmail.com> wrote:
>
>> Hi,
>>
>> I would like to store a simple (immutable) value in a web session.
>>
>> Here are the options I see so far:
>> - use the component architecture (seems a bit overkill...)
>> - subclass Session to hold the value I want to store
>> - patch Session to behave like a dictionary (didn't look at the code,
>> not sure if it makes sense...)
>>
>> I'm also curious about the advantages of this component architecture
>> for the session object instead of a simple dictionary?
>
> The component architecture just uses interfaces as keys so that it is unambiguous which piece of code owns them, and what properties they are supposed to provide.  This is so that multiple bits of twisted.web infrastructure can cooperatively populate the request with state without interfering with each other.
>
> I would suggest that it's not "overkill" - it sounds like exactly what you want.  (I suspect that you feel it's overkill because you have bad experiences with some other hideously bloated thing that was also called "component architecture", but I assure you, it's really just a dictionary.)
>
> -glyph
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From no-reply at dropboxmail.com  Fri Sep  7 04:54:06 2012
From: no-reply at dropboxmail.com (Dropbox)
Date: Fri, 07 Sep 2012 10:54:06 +0000
Subject: [Twisted-Python] Fourat ZOUARI invited you to check out Dropbox
Message-ID: <20120907105406.1E39BB409F1@sjc-batch3.sjc.dropbox.com>

Fourat ZOUARI wants you to try Dropbox! Dropbox lets you bring all your photos, docs and videos with you anywhere and share them easily.

Accept invitation here: http://www.dropbox.com/el/?r=/referrals/NjI1NjUxOTkwMDc%3Fsrc%3Dreferrals_bulk9%26eh%3D5334c37&b=clk:None:16395769313093170089:789:462&z=AACVX00a87qiiHJdb3Fi3ZjnqUuO3EUZ-oKNHC5yxRtO0Q

- The Dropbox Team

____________________________________________________ 
To stop receiving invites from Dropbox, please go to http://www.dropbox.com/bl/676b00e8cad3/twisted-python%40twistedmatrix.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120907/3f8673be/attachment-0001.html>

From tobias.oberstein at tavendo.de  Fri Sep  7 11:51:26 2012
From: tobias.oberstein at tavendo.de (Tobias Oberstein)
Date: Fri, 7 Sep 2012 10:51:26 -0700
Subject: [Twisted-Python] AutobahnPython 0.5.8 released
Message-ID: <634914A010D0B943A035D226786325D43390CACFDC@EXVMBX020-12.exch020.serverdata.net>

This is a maintenance release.

Fixes:

  - Twisted 12.2 compat.
  - WebSocket Twisted Web resource with TLS
  - processing WS close with Hixie-76
  - some code+doc cleanups

Cheers,
Tobias




From exarkun at twistedmatrix.com  Sat Sep  8 22:05:30 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 09 Sep 2012 04:05:30 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1347163530.41.1915729324@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120909/e6966590/attachment-0001.html>

From ascheel at gmail.com  Mon Sep 10 19:24:53 2012
From: ascheel at gmail.com (Art Scheel)
Date: Mon, 10 Sep 2012 19:24:53 -0600
Subject: [Twisted-Python] implementing NAMES in IRC
Message-ID: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>

First, I apologize if this is not the appropriate place for this.

I have a basic bot written as a mechanism for learning classes and
methods.  I think I've got methods down, but classes are kicking my butt.

As a personal exercise, I'm trying to implement a check in an IRC bot to
see if the person issuing a command has oper (@) status.  in IRC this is
done with the 'NAMES <#channel>' command.

Google gives me this:
http://stackoverflow.com/questions/6671620/list-users-in-irc-channel-using-twisted-python-irc-framework

My own research points me to this:
http://twistedmatrix.com/trac/browser/trunk/twisted/words/protocols/irc.py#L448

Now, is stackoverflow overriding that method or was it perhaps written
prior to the implementation of the irc.py portion I linked to?

My code is here.  I am attempting to parse the names list at line 110
http://bpaste.net/show/Fll7at9Z3b8nD6GDNN14/

I don't know if I should be using twisted/words/protocols/irc.py or
twisted/words/im/ircsupport.py.

Can someone point me in the right direction as to what I need to do to grab
the list of names at that particular spot using Twisted's in methods?  If
it cannot be done with the Twisted's methods, am I to understand that's
what the StackOverflow post was doing?

Yes, I know the code is ugly.  I can clean it up after I understand what
I'm doing more fully.



-- 
Molon Labe
"Come and take them"

"The Marines I have seen around the world have the cleanest bodies, the
filthiest minds, the highest morale, and the lowest morals of any group of
animals I have ever seen. Thank God for the United States Marine Corps!"
-Eleanor Roosevelt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120910/ccf320a2/attachment-0001.html>

From glyph at twistedmatrix.com  Mon Sep 10 22:05:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Mon, 10 Sep 2012 21:05:05 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
Message-ID: <58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>


On Sep 10, 2012, at 6:24 PM, Art Scheel <ascheel at gmail.com> wrote:

> Now, is stackoverflow overriding that method or was it perhaps written prior to the implementation of the irc.py portion I linked to?

The StackOverflow answer is implementing a new method, on IRCClient.  The implementation in irc.py that you're linking to is from the IRC server protocol implementation.  They're not really related, except insofar as they are talking about the same protocol command - but they are opposite sides of the connection for that command.

For what it's worth, the StackOverflow answer really ought to be linking to a Twisted ticket for a method like .names() on IRCClient within Twisted itself.  This is important functionality, and we're missing it; the right thing to do is always to file a bug, not to implement it without tests in a forum post.

Such a bug may already exist - if you wouldn't mind, would you search for it, and if you can't find it, file a new one?

> My code is here.  I am attempting to parse the names list at line 110
> http://bpaste.net/show/Fll7at9Z3b8nD6GDNN14/
> 
> I don't know if I should be using twisted/words/protocols/irc.py or twisted/words/im/ircsupport.py.

twisted.words.im.* implements a multi-protocol chat abstraction.  I don't think that your bot necessarily needs to be IRC specific, I think it would be a good idea for you to try to use twisted.words.im; you will probably discover a sad lack of documentation, but you can feel free to ask questions and file doc bugs.  Or perhaps even contribute doc patches, once you've figured out what's going on!

At the very least, twisted.words.im.ircsupport already implements irc_RPL_NAMREPLY to convert this message into a series of memberJoined/memberLeft API calls, so you don't have to do something like that yourself.  See here: <http://twistedmatrix.com/trac/browser/trunk/twisted/words/im/ircsupport.py#L160>.

> Can someone point me in the right direction as to what I need to do to grab the list of names at that particular spot using Twisted's in methods?  If it cannot be done with the Twisted's methods, am I to understand that's what the StackOverflow post was doing?

Yes, that's exactly what the SO post was doing.  It is using Twisted's methods though, so clearly it can be done with them, it's just a small matter of work :).

> Yes, I know the code is ugly.  I can clean it up after I understand what I'm doing more fully.

Ugliness is forgivable, but in the future, you should try to post much more minimal programs.  It's a lot easier to help if one can read the whole thing.  See <http://sscce.org> for details.

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120910/2e4badda/attachment.html>

From mithrandi at mithrandi.net  Tue Sep 11 04:49:55 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 12:49:55 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
Message-ID: <CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>

On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
> Such a bug may already exist - if you wouldn't mind, would you search for
> it, and if you can't find it, file a new one?

I don't know if there's an existing bug or not, but implementing a
names() method is problematic. The natural API would be something like
names('#foo') -> Deferred firing with a list of names in the channel.
The difficulty in implementing this comes from the fact that there are
two possible results from issuing a NAMES command on IRC: a serious of
zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
message, *or* any error message the IRC server feels like. There are a
number of partial workarounds for this, involving various combinations
of queues, timeouts, and unreliable detection of responses, but none
of them seem particularly satisfactory to me.

(On the other hand, a method that just sends NAMES #foo without any
response handling would be pretty straightforward to implement, maybe
that's what you meant?)
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From exarkun at twistedmatrix.com  Tue Sep 11 07:43:17 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Tue, 11 Sep 2012 13:43:17 -0000
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
Message-ID: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>

On 10:49 am, mithrandi at mithrandi.net wrote:
>On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>Such a bug may already exist - if you wouldn't mind, would you search 
>>for
>>it, and if you can't find it, file a new one?
>
>I don't know if there's an existing bug or not, but implementing a
>names() method is problematic. The natural API would be something like
>names('#foo') -> Deferred firing with a list of names in the channel.
>The difficulty in implementing this comes from the fact that there are
>two possible results from issuing a NAMES command on IRC: a serious of
>zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>message, *or* any error message the IRC server feels like. There are a
>number of partial workarounds for this, involving various combinations
>of queues, timeouts, and unreliable detection of responses, but none
>of them seem particularly satisfactory to me.

This is the excuse that is always given for not implementing a new 
feature on `IRCClient`.  However, here's another equivalent way of 
stating the objection:

  IRC is a terrible protocol and it is very difficult to implement a
  method like `names` reliably, due to the various vague and obscure
  corner cases presented.  Therefore, instead of Twisted tackling this
  problem and providing a single (perhaps imperfect) implementation,
  every single IRC application developer should instead rediscover this
  sad reality for themselves and then implement their own uniquely buggy
  version of this functionality.

Hopefully, cast in that light, it's a bit more clear why this might not 
be a reasonable argument.

I can think of other arguments against adding a `names` (or similar) 
method to `IRCClient`, but since it's not likely anyone is actually 
going to step up and do any work on `irc.py` anyway, I don't feel the 
need to make them (and I'd much rather someone actually maintain 
`irc.py`).

Jean-Paul
>(On the other hand, a method that just sends NAMES #foo without any
>response handling would be pretty straightforward to implement, maybe
>that's what you meant?)
>--
>mithrandi, i Ainil en-Balandor, a faer Ambar
>
>_______________________________________________
>Twisted-Python mailing list
>Twisted-Python at twistedmatrix.com
>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mithrandi at mithrandi.net  Tue Sep 11 10:12:22 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 18:12:22 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
Message-ID: <CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>

On Tue, Sep 11, 2012 at 3:43 PM,  <exarkun at twistedmatrix.com> wrote:
> This is the excuse that is always given for not implementing a new
> feature on `IRCClient`.  However, here's another equivalent way of
> stating the objection:
>
>   IRC is a terrible protocol and it is very difficult to implement a
>   method like `names` reliably, due to the various vague and obscure
>   corner cases presented.  Therefore, instead of Twisted tackling this
>   problem and providing a single (perhaps imperfect) implementation,
>   every single IRC application developer should instead rediscover this
>   sad reality for themselves and then implement their own uniquely buggy
>   version of this functionality.

Actually, my recommendation would be to avoid trying to implement
functionality of this nature in any application at all. The only way
to reliably use the NAMES command is the way
twisted.words.im.ircsupport and real IRC clients do: handle
RPL_NAMREPLY / RPL_ENDOFNAMES without regard to any NAMES command you
may or may not have issued, and then issue a NAMES command at certain
points without any regard for a response that may or may not be sent
to you by the IRC server. Having said that, I guess IRCClient could
handle the parsing of RPL_NAMREPLY / RPL_ENDOFNAMES messages into a
single list of names, which could then be delivered as a single event.

My main concern with most of the more complex implementation
strategies is that they impose a non-zero cost on users of IRCClient,
as well as encouraging the implementation of unreliable features; at
the very least, I think "anti-IRC" code like this should be an extra
layer on top of the basic IRC protocol implementation.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From glyph at twistedmatrix.com  Tue Sep 11 10:46:47 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 11 Sep 2012 09:46:47 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
Message-ID: <F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>


On Sep 11, 2012, at 9:12 AM, Tristan Seligmann <mithrandi at mithrandi.net> wrote:

> On Tue, Sep 11, 2012 at 3:43 PM,  <exarkun at twistedmatrix.com> wrote:
>> This is the excuse that is always given for not implementing a new
>> feature on `IRCClient`.  However, here's another equivalent way of
>> stating the objection:
>> 
>>  IRC is a terrible protocol and it is very difficult to implement a
>>  method like `names` reliably, due to the various vague and obscure
>>  corner cases presented.  Therefore, instead of Twisted tackling this
>>  problem and providing a single (perhaps imperfect) implementation,
>>  every single IRC application developer should instead rediscover this
>>  sad reality for themselves and then implement their own uniquely buggy
>>  version of this functionality.
> 
> Actually, my recommendation would be to avoid trying to implement
> functionality of this nature in any application at all. The only way
> to reliably use the NAMES command is the way
> twisted.words.im.ircsupport and real IRC clients do: handle
> RPL_NAMREPLY / RPL_ENDOFNAMES without regard to any NAMES command you
> may or may not have issued, and then issue a NAMES command at certain
> points without any regard for a response that may or may not be sent
> to you by the IRC server. Having said that, I guess IRCClient could
> handle the parsing of RPL_NAMREPLY / RPL_ENDOFNAMES messages into a
> single list of names, which could then be delivered as a single event.

So... you're recommending exactly what twisted.words.im already does? :)  (This is another area of the code that could use a maintainer, but its design is less horrible than its lack of testing and lack of coding standard compliance might imply.)

Keep in mind that we can assume to have control over outgoing traffic on our own IRC connection.  If you've already issued one .names(), then another outgoing one doesn't have to send an additional command and try to do weird Deferred-stacking stuff.  It just has to delay sending the actual NAMES request until the previous one has come back, or perhaps just fire both Deferreds with a single response.

-glyph


From mithrandi at mithrandi.net  Tue Sep 11 12:00:02 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Tue, 11 Sep 2012 20:00:02 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAMcKhMRkpfXHW1rs54PkkuCrxmQR1T5GXD+j4pSvUFyNPuQQYg@mail.gmail.com>
	<F253BC8D-628C-4BFD-9FF1-EB6CA2568BD5@twistedmatrix.com>
Message-ID: <CAMcKhMTHs8MDTGR19BX0pq-Cyc1pbxu9=9QivaC35hiV4SVvTA@mail.gmail.com>

On Tue, Sep 11, 2012 at 6:46 PM, Glyph <glyph at twistedmatrix.com> wrote:
> So... you're recommending exactly what twisted.words.im already does? :)

Well, yeah: "The only way to reliably use the NAMES command is the way
twisted.words.im.ircsupport [already does]" :)

> Keep in mind that we can assume to have control over outgoing traffic on our own IRC connection.  If you've already issued one .names(), then another outgoing one doesn't have to send an additional command and try to do weird Deferred-stacking stuff.  It just has to delay sending the actual NAMES request until the previous one has come back, or perhaps just fire both Deferreds with a single response.

On the other hand, if you're writing code that doesn't need to match
requests and responses, you should be able to issue another NAMES
command before the previous one has completed (and bear in mind, if
you want to queue NAMES requests independently of other requests, the
only ways for it to complete will be 1. RPL_ENDOFNAMES and 2.
timeout). That's why I would prefer this not to be baked into the
lowest level of the IRC client API. My earlier responses were probably
worded too harshly; people *are* going to attempt to implement things
like this, no matter how much of a bad idea it might be, so going
LALALALA WE WON'T LET YOU won't improve things. On the other hand, the
compromises needed to do things this way probably shouldn't penalize
people who are doing it the "right" way (insofar as anything about IRC
can be said to be "right").
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From dbs at nimbula.com  Tue Sep 11 14:42:03 2012
From: dbs at nimbula.com (David Serafini)
Date: Tue, 11 Sep 2012 13:42:03 -0700
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
Message-ID: <CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>

I know about txAMQP.  Has anyone done any work interfacing the
kombu API with twisted?

thanks in advance,
<dbs>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120911/ee2b88b5/attachment.html>

From jstpierre at mecheye.net  Tue Sep 11 16:01:31 2012
From: jstpierre at mecheye.net (Jasper St. Pierre)
Date: Tue, 11 Sep 2012 18:01:31 -0400
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
Message-ID: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>

On Tue, Sep 11, 2012 at 9:43 AM,  <exarkun at twistedmatrix.com> wrote:
> On 10:49 am, mithrandi at mithrandi.net wrote:
>>On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>>Such a bug may already exist - if you wouldn't mind, would you search
>>>for
>>>it, and if you can't find it, file a new one?
>>
>>I don't know if there's an existing bug or not, but implementing a
>>names() method is problematic. The natural API would be something like
>>names('#foo') -> Deferred firing with a list of names in the channel.
>>The difficulty in implementing this comes from the fact that there are
>>two possible results from issuing a NAMES command on IRC: a serious of
>>zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>>message, *or* any error message the IRC server feels like. There are a
>>number of partial workarounds for this, involving various combinations
>>of queues, timeouts, and unreliable detection of responses, but none
>>of them seem particularly satisfactory to me.
>
> This is the excuse that is always given for not implementing a new
> feature on `IRCClient`.  However, here's another equivalent way of
> stating the objection:
>
>   IRC is a terrible protocol and it is very difficult to implement a
>   method like `names` reliably, due to the various vague and obscure
>   corner cases presented.  Therefore, instead of Twisted tackling this
>   problem and providing a single (perhaps imperfect) implementation,
>   every single IRC application developer should instead rediscover this
>   sad reality for themselves and then implement their own uniquely buggy
>   version of this functionality.

I know you know what this means, exarkun, but for those who don't know
exactly what this means, it means that you can send two requests out,
and not be guaranteed to get replies in any particular order (or at
all), and that means that you can get ambiguous replies to requests.

Additionally, IRC daemons may play tricks and send out "replies" that
doesn't associate with any request you've sent, as a means to have a
client perform a specific action; for instance, bouncers usually send
join replies without any associated requests method of forcing a
client to open a buffer for a particular channel, and certain networks
also use this same technique to force users on specific channels all
the time (and they will also make a PART request on this particular
channel fail).

These two things mean that you cannot have a Deferred-based API for
IRC, where each request correlates to one response, and instead need
to have a reactionary system where you cast a NAMES out to the wind,
and just implement some sane behavior on every RPL_NAMREPLY you get,
independent of what triggered it.

> Hopefully, cast in that light, it's a bit more clear why this might not
> be a reasonable argument.
>
> I can think of other arguments against adding a `names` (or similar)
> method to `IRCClient`, but since it's not likely anyone is actually
> going to step up and do any work on `irc.py` anyway, I don't feel the
> need to make them (and I'd much rather someone actually maintain
> `irc.py`).
>
> Jean-Paul
>>(On the other hand, a method that just sends NAMES #foo without any
>>response handling would be pretty straightforward to implement, maybe
>>that's what you meant?)
>>--
>>mithrandi, i Ainil en-Balandor, a faer Ambar
>>
>>_______________________________________________
>>Twisted-Python mailing list
>>Twisted-Python at twistedmatrix.com
>>http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



-- 
  Jasper



From glyph at twistedmatrix.com  Tue Sep 11 17:58:25 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Tue, 11 Sep 2012 16:58:25 -0700
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
Message-ID: <36902905-3CB4-4EC4-BDE5-94787B45BE3F@twistedmatrix.com>


On Sep 11, 2012, at 3:01 PM, Jasper St. Pierre <jstpierre at mecheye.net> wrote:

> Additionally, IRC daemons may play tricks and send out "replies" that
> doesn't associate with any request you've sent, as a means to have a
> client perform a specific action; for instance, bouncers usually send
> join replies without any associated requests method of forcing a
> client to open a buffer for a particular channel, and certain networks
> also use this same technique to force users on specific channels all
> the time (and they will also make a PART request on this particular
> channel fail).

It's not exactly that they're "forcing" users (or clients) to do anything. They're just notifying the user that they're in a particular channel.  In other words, the "forcing" is all done server-side, not in the protocol itself.

> These two things mean that you cannot have a Deferred-based API for
> IRC, where each request correlates to one response, and instead need
> to have a reactionary system where you cast a NAMES out to the wind,
> and just implement some sane behavior on every RPL_NAMREPLY you get,
> independent of what triggered it.

This is actually a better way to structure applications in general, even for much more sanely structured protocols than IRC.

One subtle point about Twisted is that while Deferreds make it a lot easier to manage sequential work-flow in an event driven system, it is sequential work-flow itself that is the problem in many cases.  You should always try to write your protocols so they can react to any valid input at any time, not rigidly structure everything so that your state is always shoehorned into a request/response structure so all your state is encapsulated in stack frames in closures that are added as callbacks on Deferreds.

If I were designing a new chat protocol today, I'd definitely make sure it had a "you joined a conversation" message that did not have to be a response to any particular "I'd like to join a conversation" message :-).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120911/1ab4156b/attachment.html>

From skaarjj at gmail.com  Tue Sep 11 18:12:13 2012
From: skaarjj at gmail.com (Adrian Overbury)
Date: Wed, 12 Sep 2012 10:12:13 +1000
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
Message-ID: <4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>

On 12/09/2012, at 8:01 AM, "Jasper St. Pierre" <jstpierre at mecheye.net> wrote:

> On Tue, Sep 11, 2012 at 9:43 AM,  <exarkun at twistedmatrix.com> wrote:
>> On 10:49 am, mithrandi at mithrandi.net wrote:
>>> On Tue, Sep 11, 2012 at 6:05 AM, Glyph <glyph at twistedmatrix.com> wrote:
>>>> Such a bug may already exist - if you wouldn't mind, would you search
>>>> for
>>>> it, and if you can't find it, file a new one?
>>> 
>>> I don't know if there's an existing bug or not, but implementing a
>>> names() method is problematic. The natural API would be something like
>>> names('#foo') -> Deferred firing with a list of names in the channel.
>>> The difficulty in implementing this comes from the fact that there are
>>> two possible results from issuing a NAMES command on IRC: a serious of
>>> zero or more RPL_NAMREPLY messages followed by an RPL_ENDOFNAMES
>>> message, *or* any error message the IRC server feels like. There are a
>>> number of partial workarounds for this, involving various combinations
>>> of queues, timeouts, and unreliable detection of responses, but none
>>> of them seem particularly satisfactory to me.
>> 
>> This is the excuse that is always given for not implementing a new
>> feature on `IRCClient`.  However, here's another equivalent way of
>> stating the objection:
>> 
>>  IRC is a terrible protocol and it is very difficult to implement a
>>  method like `names` reliably, due to the various vague and obscure
>>  corner cases presented.  Therefore, instead of Twisted tackling this
>>  problem and providing a single (perhaps imperfect) implementation,
>>  every single IRC application developer should instead rediscover this
>>  sad reality for themselves and then implement their own uniquely buggy
>>  version of this functionality.
> 
> I know you know what this means, exarkun, but for those who don't know
> exactly what this means, it means that you can send two requests out,
> and not be guaranteed to get replies in any particular order (or at
> all), and that means that you can get ambiguous replies to requests.
> 
> Additionally, IRC daemons may play tricks and send out "replies" that
> doesn't associate with any request you've sent, as a means to have a
> client perform a specific action; for instance, bouncers usually send
> join replies without any associated requests method of forcing a
> client to open a buffer for a particular channel, and certain networks
> also use this same technique to force users on specific channels all
> the time (and they will also make a PART request on this particular
> channel fail).
> 
> These two things mean that you cannot have a Deferred-based API for
> IRC, where each request correlates to one response, and instead need
> to have a reactionary system where you cast a NAMES out to the wind,
> and just implement some sane behavior on every RPL_NAMREPLY you get,
> independent of what triggered it.
> 

However it is entirely possible to sanely parse and store replies in a reactionary system because the first component of an RPL_NAMREPLY message is the name of the channel it applies to.  

You can log or quietly drop replies that aren't for channels you're currently following, and use the others to build out some kind of structure that maintains an active list of users in that channel and their status (maintained through subsequent joins and parts).  Is this not so?  It doesn't sound that complicated to me.

>> Hopefully, cast in that light, it's a bit more clear why this might not
>> be a reasonable argument.
>> 
>> I can think of other arguments against adding a `names` (or similar)
>> method to `IRCClient`, but since it's not likely anyone is actually
>> going to step up and do any work on `irc.py` anyway, I don't feel the
>> need to make them (and I'd much rather someone actually maintain
>> `irc.py`).
>> 
>> Jean-Paul
>>> (On the other hand, a method that just sends NAMES #foo without any
>>> response handling would be pretty straightforward to implement, maybe
>>> that's what you meant?)
>>> --
>>> mithrandi, i Ainil en-Balandor, a faer Ambar
>>> 
>>> _______________________________________________
>>> Twisted-Python mailing list
>>> Twisted-Python at twistedmatrix.com
>>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>> 
>> _______________________________________________
>> Twisted-Python mailing list
>> Twisted-Python at twistedmatrix.com
>> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
> 
> 
> 
> -- 
>  Jasper
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From mithrandi at mithrandi.net  Tue Sep 11 18:29:47 2012
From: mithrandi at mithrandi.net (Tristan Seligmann)
Date: Wed, 12 Sep 2012 02:29:47 +0200
Subject: [Twisted-Python] implementing NAMES in IRC
In-Reply-To: <4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>
References: <CAAy2ZMZfHkcrqLuopmNSyQs_pY1oUV_EOm4dMNvuACWw3Q+qpA@mail.gmail.com>
	<58C6B2BC-0F70-4A0C-8A39-880EC7922E41@twistedmatrix.com>
	<CAMcKhMTN1_c2tmAyxgEeeXGkjw_GRK+_7Hsi6uhUKpyQkd-f0w@mail.gmail.com>
	<20120911134317.27659.2034342639.divmod.xquotient.7@localhost6.localdomain6>
	<CAA0H+QQm0UXQoZAXuZ3ihdo-xvvO=Oz5fe_rfKF+73j-QWi_EQ@mail.gmail.com>
	<4D95F75B-C038-410E-A839-77B8372B21A9@gmail.com>
Message-ID: <CAMcKhMSJvV92RzgoRvG2maRwDHirr4bfgz9gOKyUd77qTYVNSg@mail.gmail.com>

On Wed, Sep 12, 2012 at 2:12 AM, Adrian Overbury <skaarjj at gmail.com> wrote:
> However it is entirely possible to sanely parse and store replies in a reactionary system because the first component of an RPL_NAMREPLY message is the name of the channel it applies to.
>
> You can log or quietly drop replies that aren't for channels you're currently following, and use the others to build out some kind of structure that maintains an active list of users in that channel and their status (maintained through subsequent joins and parts).  Is this not so?  It doesn't sound that complicated to me.

Handling RPL_NAMREPLY/RPL_ENDOFNAMES responses in order to update a
list of users is perfectly feasible (most user-interactive IRC clients
do something of this nature); the problem is directly associating a
response with a request. If you send NAMES #code, there are three
possibilities: 1) the ircd sends you a sequence of
RPL_NAMREPLY/RPL_ENDOFNAMES with the list of users, 2) you get an
error response, 3) nothing happens. While 3) is unlikely, there's no
particular reason an ircd couldn't behave that way (I don't
specifically know of one, but in general, the IRC protocol and ircds
are written and designed with primarily the interactive use case in
mind, not automated agents). However, the real fly in the ointment is
2); there is no way to know what errors might be returned in response
to a NAMES message, and many of those responses will not even mention
the channel name, thus giving you no way to recognize that the request
will never "complete". If you're keeping a deferred around to fire
with the response, then unless something else intervenes (a
cancellation timer?), the deferred will just hang around, which also
means keeping its callbacks and the objects they reference alive.

Thus, the problem is not with tracking the users in a channel in
general (although there are issues with tracking the channel modes of
those users...), but rather with specifically implementing an API like
names(channel) -> Deferred firing with a list of names. If you're
willing to accept an arbitrary timeout and use that as the only (or at
least the primary) mechanism of failure detection, as well as a few
other compromises (in the area of "overlapping" requests for the same
channel), it would be possible, I just don't feel that the base
IRCClient class is the right place to implement things like this, and
I'd also discourage designing IRC clients (whether they are bots or
user-interactive clients) in a way that requires such an API.
-- 
mithrandi, i Ainil en-Balandor, a faer Ambar



From penxiao at cisco.com  Wed Sep 12 19:40:29 2012
From: penxiao at cisco.com (Peng Xiao -X (penxiao - DLSP at Cisco))
Date: Thu, 13 Sep 2012 01:40:29 +0000
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
Message-ID: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>

Hi experts

Does Twisted support TCP MD5 Signature Option?
If does, how to use this?
Very thanks.

Best
Regards,

Xiao Peng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120913/64c176ed/attachment-0001.html>

From wulczer at wulczer.org  Thu Sep 13 04:12:44 2012
From: wulczer at wulczer.org (=?UTF-8?B?SmFuIFVyYmHFhHNraQ==?=)
Date: Thu, 13 Sep 2012 12:12:44 +0200
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
	<CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
Message-ID: <5051B19C.2090500@wulczer.org>

On 11/09/12 22:42, David Serafini wrote:
> I know about txAMQP.  Has anyone done any work interfacing the
> kombu API with twisted?

Not kombu, but you can use pika with Twisted (I'm doing that in 
production and it works well enough).

Cheers,
Jan



From exarkun at twistedmatrix.com  Thu Sep 13 05:59:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Thu, 13 Sep 2012 11:59:23 -0000
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
In-Reply-To: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
References: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
Message-ID: <20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>

On 01:40 am, penxiao at cisco.com wrote:
>Hi experts
>
>Does Twisted support TCP MD5 Signature Option?
>If does, how to use this?
>Very thanks.

Not specifically.  You can get the underlying socket and call 
`setsockopt´ on it, though.  I've never used TCP MD5 signatures (it's a 
pretty obscure feature that is not widely used), is being able to set 
the socket option sufficient to "use" the feature?

Jean-Paul
>Best
>Regards,
>
>Xiao Peng



From p.mayers at imperial.ac.uk  Thu Sep 13 06:14:24 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 13 Sep 2012 13:14:24 +0100
Subject: [Twisted-Python] Does Twisted support TCP MD5 Signature Option?
In-Reply-To: <20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>
References: <5A34F4AC18539E47A797E3916C0E55B10F4AAC5A@xmb-rcd-x10.cisco.com>
	<20120913115923.27659.1375053262.divmod.xquotient.53@localhost6.localdomain6>
Message-ID: <5051CE20.70802@imperial.ac.uk>

On 13/09/12 12:59, exarkun at twistedmatrix.com wrote:
> On 01:40 am, penxiao at cisco.com wrote:
>> Hi experts
>>
>> Does Twisted support TCP MD5 Signature Option?
>> If does, how to use this?
>> Very thanks.
>
> Not specifically.  You can get the underlying socket and call
> `setsockopt´ on it, though.  I've never used TCP MD5 signatures (it's a
> pretty obscure feature that is not widely used), is being able to set
> the socket option sufficient to "use" the feature?

It's worth noting it has to be compiled into your kernel.

I'm somewhat curious what the OPs use-case is; the original use was for 
protecting BGP sessions, but I understand it's specified in some 
versions of the PCI standards (the credit card stuff, not the peripheral 
slot) now?

For what it's worth, I think it's the wrong solution to almost all 
problems. TLS is far, far superior, as is IPSec/AH if you need the 
traffic to be protected but in cleartext.



From dbs at nimbula.com  Thu Sep 13 13:25:31 2012
From: dbs at nimbula.com (David Serafini)
Date: Thu, 13 Sep 2012 12:25:31 -0700
Subject: [Twisted-Python] interface kombu with twisted
In-Reply-To: <50522FA7.3070608@wulczer.org>
References: <CAJy_jQSkXNW7cj0CAMPhVrNpcvUWUXTGyFBjbxOvEwVLYYO-0A@mail.gmail.com>
	<CAJy_jQQfVNBOn6Xpy4_xxjv3y_1R9kvhv=wf5R+CkpK=W7hWDA@mail.gmail.com>
	<5051B19C.2090500@wulczer.org>
	<CAJy_jQRmFV0wigDb7R5RDYr5riL4BY=m7r2b3QHATbiZtxOYPA@mail.gmail.com>
	<50522FA7.3070608@wulczer.org>
Message-ID: <CAJy_jQSK2qjO1ERuAJCJ0FzQKhgynX6hOqYS9kfD8_S-B74HNQ@mail.gmail.com>

 Thanks, Jan.

On Thu, Sep 13, 2012 at 12:10 PM, Jan Urbański <wulczer at wulczer.org> wrote:

> On 13/09/12 21:04, David Serafini wrote:
>
>> How did you implement this?  Did you use txamqp as a model or develop your
>> own approach?
>>
>
> No, I took pika (that already implements AMQP), wrote code to make it
> usable from a Twisted reactor and then added a Deferred layer on top of
> that.
>
> Pika already works with Tornado, so it was more or less prepared for being
> integrated in an event loop, such as the Twisted reactor.
>
> Here's an example of how to use it:
>
> https://github.com/pika/pika/**blob/master/examples/demo_**twisted.py<https://github.com/pika/pika/blob/master/examples/demo_twisted.py>
>
> Best,
> Jan
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120913/c17bf70d/attachment.html>

From exarkun at twistedmatrix.com  Sat Sep 15 22:05:55 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 16 Sep 2012 04:05:55 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1347768355.7.1696774915@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120916/00323f13/attachment-0001.html>

From cyli at twistedmatrix.com  Thu Sep 20 10:43:10 2012
From: cyli at twistedmatrix.com (Ying Li)
Date: Thu, 20 Sep 2012 09:43:10 -0700
Subject: [Twisted-Python] Twisted Sprint in SF, 9/22 (this saturday)
Message-ID: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>

Hi all!

For those of you in the Bay Area, there will be a Twisted sprint this
Saturday at Rackspace (620 Folsom St., between 2nd and Hawthorne) in
San Francisco.  Food and drink will be provided.

Thanks!
-Ying



From glyph at twistedmatrix.com  Thu Sep 20 17:27:05 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Thu, 20 Sep 2012 16:27:05 -0700
Subject: [Twisted-Python] Twisted Sprint in SF, 9/22 (this saturday)
In-Reply-To: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>
References: <CA+Q0aKETG6GPHtLJmL_NQSLjRa4PJiXiOvMG2LjU_viynGShZg@mail.gmail.com>
Message-ID: <84983503-4C8F-4A4E-B5BB-F88A9D8888E6@twistedmatrix.com>


Le Sep 20, 2012 à 9:43 AM, Ying Li <cyli at twistedmatrix.com> a écrit :

> For those of you in the Bay Area, there will be a Twisted sprint this
> Saturday at Rackspace (620 Folsom St., between 2nd and Hawthorne) in
> San Francisco.  Food and drink will be provided.


More information is available here:

<http://www.meetup.com/San-Francisco-Twisted-Python-Meetup/events/82122312/>

For those of you who aren't in the bay area, feel free to follow along at home on #twisted-dev on freenode.net.  If you are, but you haven't been to one of the sprints before, you should give it a try!  Come learn about how to work on Twisted, or get your favorite bugs fixed.  The last couple of these events have been a lot of fun.  I hope to see many of you there!

-glyph






From matt at conundrum.com  Sat Sep 22 14:37:54 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sat, 22 Sep 2012 16:37:54 -0400
Subject: [Twisted-Python] Fitting cred into my application
Message-ID: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>

Hi.  I've been trying to wrap my head around the cred implementation for a while now, but either I'm missing something, or there's some piece of documentation that could be better.  Probably at least a bit of both.

My application is an XMLRPC server, and an authenticated client should have rights to run some RPC methods, but not others.  Some methods will give access to limited data based on authentication.

The documentation for cred is clear in the case where the server has its own protocol implementation, but in the case of XMLRPC, where the protocol isn't subclassed, how to link it in is far less clear.  Also, since the design suggests that it's the RPC methods that need to talk to the avatar, not the protocol, how to implement cred seems even less obvious.

Are there some other examples of cred implementations floating around that I can look at, where lack of authentication does not block all access to the protocol?  In particular an example combining XMLRPC and cred would make my day.  Does any documentation or example code along those lines exist that I just haven't found yet?

Thanks in advance for any pointers!
   Matt





From itamar at futurefoundries.com  Sat Sep 22 19:36:22 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sat, 22 Sep 2012 21:36:22 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
Message-ID: <CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>

On Sat, Sep 22, 2012 at 4:37 PM, Matthew Pounsett <matt at conundrum.com>wrote:

> Hi.  I've been trying to wrap my head around the cred implementation for a
> while now, but either I'm missing something, or there's some piece of
> documentation that could be better.  Probably at least a bit of both.
>
> My application is an XMLRPC server, and an authenticated client should
> have rights to run some RPC methods, but not others.  Some methods will
> give access to limited data based on authentication.
>
> The documentation for cred is clear in the case where the server has its
> own protocol implementation, but in the case of XMLRPC, where the protocol
> isn't subclassed, how to link it in is far less clear.  Also, since the
> design suggests that it's the RPC methods that need to talk to the avatar,
> not the protocol, how to implement cred seems even less obvious.
>
> Are there some other examples of cred implementations floating around that
> I can look at, where lack of authentication does not block all access to
> the protocol?  In particular an example combining XMLRPC and cred would
> make my day.  Does any documentation or example code along those lines
> exist that I just haven't found yet?
>

There's three parts to doing this:

   1. When setting up the portal, in addition to the credential checker
   that knows about regular users, also register a
   twisted.cred.checkers.AllowAnonymousAccess.
   2. When you have no credentials, the xml-rpc layer should login to the
   portal using a twisted.cred.credentials.Anonymous credential. When you do
   have credentials, pass them in as you normally.
   3. Now as part of a login your realm gets either a username, or a
   twisted.cred.checkers.ANONYMOUS as the avatar id that is being requested.
   Based on what it gets your realm should return a different business logic
   implementation (aka "avatar"); the anonymous one can do less, say.

twisted.web.guard does #2; the way it is implemented, the business logic
object (avatar) that is returned is a web Resource, so the realm can return
a different Resource depending on whether there's HTTP credentials or not
(the latter case being avatar id of ANONYMOUS). It's possible you just want
to use guard, if you're relying on HTTP authentication - just return
different XMLRPC objects. Alternatively, the XMLRPC layer could log-in to
the portal, in which case it would get back different business logic
objects with different capabilities.

An example of a full setup is twisted.protocols.ftp combined with
twisted.tap.ftp, the ftp plugin for twistd, but the details are a bit
spread out. You should be able to find all three of those parts though.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120922/9914f811/attachment.html>

From matt at conundrum.com  Sat Sep 22 21:41:39 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Sat, 22 Sep 2012 23:41:39 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
Message-ID: <365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>


On 2012/09/22, at 21:36, Itamar Turner-Trauring wrote:

> There's three parts to doing this:
> 
>   1. When setting up the portal, in addition to the credential checker
>   that knows about regular users, also register a
>   twisted.cred.checkers.AllowAnonymousAccess.
>   2. When you have no credentials, the xml-rpc layer should login to the
>   portal using a twisted.cred.credentials.Anonymous credential. When you do
>   have credentials, pass them in as you normally.
>   3. Now as part of a login your realm gets either a username, or a
>   twisted.cred.checkers.ANONYMOUS as the avatar id that is being requested.
>   Based on what it gets your realm should return a different business logic
>   implementation (aka "avatar"); the anonymous one can do less, say.

I'm not following why I would want to do #1, probably because I can't find a sufficient explanation of exactly what an "avatar" is supposed to do.  In some places it seems to just be treated as a user ID, and in other places documentation makes reference to "business logic" as you do, but nowhere do I see any examples of what exactly that means. 

It seems to me #1 is overkill; if I want to have methods that don't require authentication (e.g. methods for registering a user in the first place), why would I require all clients to authenticate as anonymous before using them?  It would be a lot simpler to just have my xmlrpc methods check against the attributes of the current user object when called, and then return appropriately: return failures when there is no user, or when the user's attributes don't match those required by the method, and return data that a user's attributes give him/her access to when there is a user.  

But again, I think I'm missing some key details that just aren't in the documentation I've been able to find.

> twisted.web.guard does #2; the way it is implemented, the business logic
> object (avatar) that is returned is a web Resource, so the realm can return
> a different Resource depending on whether there's HTTP credentials or not
> (the latter case being avatar id of ANONYMOUS). It's possible you just want
> to use guard, if you're relying on HTTP authentication - just return
> different XMLRPC objects.

I'm not using HTTP authentication because it requires passing authentication info with each request.  In my design a client can authenticate at any point in the connection to gain access to methods or data that require it.

From your description of Guard it sounds like I would bind a different resource to the factory for each set of permissions a user might have, which means there would be a different Resource defined (and by extension different xmlrpc methods defined) for every possible combination of attributes a user might have.   A user may have a dozen different attributes that go into defining what methods that user can call, or what data will be returned by a method; the combinatorics there could result in thousands of slightly-different Resources and methods I'd need to maintain.

It seems more reasonable to have each xmlrpc method check the current user's attributes and make its own decisions about what data (if any) to return.

> Alternatively, the XMLRPC layer could log-in to
> the portal, in which case it would get back different business logic
> objects with different capabilities.

This sounds like it could be what I'm looking for, but again I can't find anything that discusses in any detail what "business logic" means in this context, or how to implement those different capabilities.

> An example of a full setup is twisted.protocols.ftp combined with
> twisted.tap.ftp, the ftp plugin for twistd, but the details are a bit
> spread out. You should be able to find all three of those parts though.

The FTP protocol doesn't implement any non-authenticated commands.  Authentication is always done at the beginning of a session, even if that is to authenticate as the user 'anonymous', and there's no provision for changing credentials in mid-connection.

I'll have a look anyway though.. perhaps I can piece together a few more things that I haven't been able to find in the API documentation, the twisted.cred how-to, or the cred.py and dbcred.py examples.

I've got a bit further since my initial email, and my current approach is to extend t.w.server.Site to accept a portal.  I'm currently trying to separate the useful bits from the flash in the requestAvatarID and _??Authenticate methods in dbcred.py.  It would be nice to have something as straight-forward as cred.py that also implemented a realm and a credentials checker so that I could see how all those pieces fit together.

Thanks for the info.. hopefully it leads me to piece this stuff together.
  Matt


From exarkun at twistedmatrix.com  Sat Sep 22 22:05:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 23 Sep 2012 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1348373123.51.233952086@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120923/ddae2991/attachment.html>

From itamar at futurefoundries.com  Sun Sep 23 08:30:35 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 23 Sep 2012 10:30:35 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
Message-ID: <CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>

On Sat, Sep 22, 2012 at 11:41 PM, Matthew Pounsett <matt at conundrum.com>wrote:


> It seems to me #1 is overkill; if I want to have methods that don't
> require authentication (e.g. methods for registering a user in the first
> place), why would I require all clients to authenticate as anonymous before
> using them?  It would be a lot simpler to just have my xmlrpc methods check
> against the attributes of the current user object when called, and then
> return appropriately: return failures when there is no user, or when the
> user's attributes don't match those required by the method, and return data
> that a user's attributes give him/her access to when there is a user.
>
> But again, I think I'm missing some key details that just aren't in the
> documentation I've been able to find.
>

You don't need the clients to authenticate as anonymous; the XML RPC code
can say "if there's no credentials from client, login as anonymous."



> I've got a bit further since my initial email, and my current approach is
> to extend t.w.server.Site to accept a portal.  I'm currently trying to
> separate the useful bits from the flash in the requestAvatarID and
> _??Authenticate methods in dbcred.py.  It would be nice to have something
> as straight-forward as cred.py that also implemented a realm and a
> credentials checker so that I could see how all those pieces fit together.
>

I would just add a Portal to the XML-RPC object, rather than the Site.

I'll try to write some example code later today, if I have time.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120923/63d91db8/attachment-0001.html>

From itamar at futurefoundries.com  Sun Sep 23 16:55:58 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 23 Sep 2012 18:55:58 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
Message-ID: <CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>

Attached find an example server, and a client demonstration - it's only
very lightly tested, so likely wrong or buggy somewhere. I didn't bother to
implement sessions, so you need to login with every command if you want
extended access.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120923/981e5db1/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: credexample.py
Type: application/octet-stream
Size: 2638 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20120923/981e5db1/attachment-0004.obj>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: client.py
Type: application/octet-stream
Size: 360 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20120923/981e5db1/attachment-0005.obj>

From matt at conundrum.com  Mon Sep 24 14:17:00 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 24 Sep 2012 16:17:00 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
Message-ID: <FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>


On 2012/09/23, at 18:55, Itamar Turner-Trauring wrote:

> Attached find an example server, and a client demonstration - it's only very lightly tested, so likely wrong or buggy somewhere. I didn't bother to implement sessions, so you need to login with every command if you want extended access.

Thanks for the examples, I'll have a look tonight.

I was going to avoid the issue of session handling by putting the portal on the protocol.  That way authentication, once done, can be persistent for the length of the connection without having to do any special session handling.





From exarkun at twistedmatrix.com  Mon Sep 24 14:36:21 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Mon, 24 Sep 2012 20:36:21 -0000
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
Message-ID: <20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>

On 08:17 pm, matt at conundrum.com wrote:
>
>On 2012/09/23, at 18:55, Itamar Turner-Trauring wrote:
>>Attached find an example server, and a client demonstration - it's 
>>only very lightly tested, so likely wrong or buggy somewhere. I didn't 
>>bother to implement sessions, so you need to login with every command 
>>if you want extended access.
>
>Thanks for the examples, I'll have a look tonight.
>
>I was going to avoid the issue of session handling by putting the 
>portal on the protocol.  That way authentication, once done, can be 
>persistent for the length of the connection without having to do any 
>special session handling.

As soon as you have a proxy between your client and server, you'll 
regret this.  The HTTP authentication standards specifically forbid this 
style of authentication, and the proxy standards explicitly allow the 
lifetime of connections between a client and the proxy to be different 
from the lifetime of connections between the proxy and the server.

In other words, there are reasons HTTP auth works the way it does.

Also, there is a list dedicated to web topics:

    http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-web

Jean-Paul



From matt at conundrum.com  Mon Sep 24 14:42:00 2012
From: matt at conundrum.com (Matthew Pounsett)
Date: Mon, 24 Sep 2012 16:42:00 -0400
Subject: [Twisted-Python] Fitting cred into my application
In-Reply-To: <20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
Message-ID: <9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>


On 2012/09/24, at 16:36, exarkun at twistedmatrix.com wrote:

> As soon as you have a proxy between your client and server, you'll 
> regret this.  The HTTP authentication standards specifically forbid this 
> style of authentication, and the proxy standards explicitly allow the 
> lifetime of connections between a client and the proxy to be different 
> from the lifetime of connections between the proxy and the server.

That's fine.  This is not a web server, it's an application that happens to use HTTP as transport.  I don't need to support the presence of proxies.





From twisted-python at 2xlp.com  Wed Sep 26 14:07:15 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 16:07:15 -0400
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
Message-ID: <7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>

I'm in the process of rewriting a web spider (originally in twisted circa 2005) , and keep running into an issue with deferreds releasing too many tokens.

i've been playing around with this all day, and can't seem to shake this problem.  

i'm guessing that i designed the application logic wrong.

Does the following code raise any warning signs for people ?

The general setup is this:

	AnalyzeLink -
		- run-of-the-mill class that performs actual db operations and link fetching
		- doesn't really rely on twisted, aside from being coded to the specs of runInteraction ( accepts an adbapi txn, raises for a rollback, is generally happy for a commit )

	AnalyzeLinksService- 
		- relies on twisted
		- queries the database for a batch of items to update
		- each actionable item is wrapped into an '_AnalyzeLinksRequestWrapper' instance, all of which are tossed into a defer.DeferredList()

	AnalyzeLinksRequestWrapper-
		- relies on twisted
		- pushes actual work into callbacks via threads.deferToThread 
		- uses a defer.DeferredSemaphore provided by AnalyzeLinksService to acquire locks


some cleaned-up code is below :

------------------

class AnalyzeLink(object):
    def get_update_batch(self,txn):
    	# returns list of ids/data/etc to process

    def action_for_data(self,txn,data):
    	# processes an entry


class _AnalyzeLinksRequestWrapper(RequestWrapper):
	dbConnectionPool = None
    semaphoreService = None
    semaphoreLock = None

    def __init__( self , semaphoreService = None , dbConnectionPool = None ):
        self.dbConnectionPool= dbConnectionPool
        self.semaphoreService= semaphoreService

    def queue_thread( self , data=None ):
        self.queued_data= data
        d = self.semaphoreService.acquire()\
            .addCallback( self._T_to_thread )
        return d

    def _T_to_thread( self , deferredSemaphore ):
        self.semaphoreLock= deferredSemaphore
        t = threads.deferToThread( self._T_thread_begin )\
            .addErrback( self._T_errors )\
            .addCallback( self._T_thread_end )

    def _T_thread_begin( self ):
        log.debug("_AnalyzeLinksRequestWrapper._T_thread_begin" )
        updater = AnalyzeLink()
        self.dbConnectionPool.runInteraction( updater.action_for_data , self.queued_data )\
            .addCallback( self._T_thread_end )\
            .addErrback( self._T_errors )

    def _T_thread_end( self , rval=None ):
        self.semaphoreLock.release()

    def _T_errors( self , x ):
        self._T_thread_end()
        raise x


class _AnalyzeLinksService(ServiceScaffold):
    SEMAPHORE_TOKENS = 25
    
    def __init__( self ):
        self.semaphoreService= defer.DeferredSemaphore( tokens=self.SEMAPHORE_TOKENS )

    def action( self ):
        updater= AnalyzeLink()
        database.get_dbPool().runInteraction( updater.get_update_batch , queued_updates )\
            .addCallback( self._action_2 )\
            .addErrback( self._action_error )

    def _action_2( self , queued_updates ):
        if len( queued_updates ):
            updates= []
            for item in queued_updates:
                requestWrapper= _AnalyzeLinksRequestWrapper(\
                    semaphoreService = self.semaphoreService ,
                    dbConnectionPool = database.get_dbPool()
                )
                result= requestWrapper.queue_thread( data=item )
                updates.append(result)
            finished= defer.DeferredList( updates )\
                .addCallback( self.deferred_list_finish )
        else:
            d= defer.Deferred()
            self.deferred_list_finish( d )

    def _action_error( self , raised ):
        log.debug("%s._action_error" % self.__class__.__name__ )
        self.set_processing_status( False )
        if isinstance( raised.value , database.DbRollback ):
            print "DB Rollback"
            raise raised
        elif isinstance( raised.value , database.DbRollbackOk ):
            print "DB Rollback ok"
        else:
            raise raised
            
            
AnalyzeLinksService= _AnalyzeLinksService()


class AnalyzeLinksService_Service(internet.TimerService):
    def __init__( self , dbConfigHash=None ):
        internet.TimerService.__init__( self,
            CHECK_PERIOD__IMPORT ,
            AnalyzeLinksService.action
        )
            


From stephen at thorne.id.au  Wed Sep 26 15:09:22 2012
From: stephen at thorne.id.au (Stephen Thorne)
Date: Wed, 26 Sep 2012 14:09:22 -0700
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
	<7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
Message-ID: <CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>

This is a better way of using DeferredSemaphore:

    def queue_thread( self , data=None ):
        self.queued_data= data
        return self.semaphoreService.run( self._T_to_thread )

It handles acquisition and release for you. This will avoid any code
path that might result in a double-release.


On Wed, Sep 26, 2012 at 1:07 PM, Jonathan Vanasco
<twisted-python at 2xlp.com> wrote:
> I'm in the process of rewriting a web spider (originally in twisted circa 2005) , and keep running into an issue with deferreds releasing too many tokens.
>
> i've been playing around with this all day, and can't seem to shake this problem.
>
> i'm guessing that i designed the application logic wrong.
>
> Does the following code raise any warning signs for people ?
>
> The general setup is this:
>
>         AnalyzeLink -
>                 - run-of-the-mill class that performs actual db operations and link fetching
>                 - doesn't really rely on twisted, aside from being coded to the specs of runInteraction ( accepts an adbapi txn, raises for a rollback, is generally happy for a commit )
>
>         AnalyzeLinksService-
>                 - relies on twisted
>                 - queries the database for a batch of items to update
>                 - each actionable item is wrapped into an '_AnalyzeLinksRequestWrapper' instance, all of which are tossed into a defer.DeferredList()
>
>         AnalyzeLinksRequestWrapper-
>                 - relies on twisted
>                 - pushes actual work into callbacks via threads.deferToThread
>                 - uses a defer.DeferredSemaphore provided by AnalyzeLinksService to acquire locks
>
>
> some cleaned-up code is below :
>
> ------------------
>
> class AnalyzeLink(object):
>     def get_update_batch(self,txn):
>         # returns list of ids/data/etc to process
>
>     def action_for_data(self,txn,data):
>         # processes an entry
>
>
> class _AnalyzeLinksRequestWrapper(RequestWrapper):
>         dbConnectionPool = None
>     semaphoreService = None
>     semaphoreLock = None
>
>     def __init__( self , semaphoreService = None , dbConnectionPool = None ):
>         self.dbConnectionPool= dbConnectionPool
>         self.semaphoreService= semaphoreService
>
>     def queue_thread( self , data=None ):
>         self.queued_data= data
>         d = self.semaphoreService.acquire()\
>             .addCallback( self._T_to_thread )
>         return d
>
>     def _T_to_thread( self , deferredSemaphore ):
>         self.semaphoreLock= deferredSemaphore
>         t = threads.deferToThread( self._T_thread_begin )\
>             .addErrback( self._T_errors )\
>             .addCallback( self._T_thread_end )
>
>     def _T_thread_begin( self ):
>         log.debug("_AnalyzeLinksRequestWrapper._T_thread_begin" )
>         updater = AnalyzeLink()
>         self.dbConnectionPool.runInteraction( updater.action_for_data , self.queued_data )\
>             .addCallback( self._T_thread_end )\
>             .addErrback( self._T_errors )
>
>     def _T_thread_end( self , rval=None ):
>         self.semaphoreLock.release()
>
>     def _T_errors( self , x ):
>         self._T_thread_end()
>         raise x
>
>
> class _AnalyzeLinksService(ServiceScaffold):
>     SEMAPHORE_TOKENS = 25
>
>     def __init__( self ):
>         self.semaphoreService= defer.DeferredSemaphore( tokens=self.SEMAPHORE_TOKENS )
>
>     def action( self ):
>         updater= AnalyzeLink()
>         database.get_dbPool().runInteraction( updater.get_update_batch , queued_updates )\
>             .addCallback( self._action_2 )\
>             .addErrback( self._action_error )
>
>     def _action_2( self , queued_updates ):
>         if len( queued_updates ):
>             updates= []
>             for item in queued_updates:
>                 requestWrapper= _AnalyzeLinksRequestWrapper(\
>                     semaphoreService = self.semaphoreService ,
>                     dbConnectionPool = database.get_dbPool()
>                 )
>                 result= requestWrapper.queue_thread( data=item )
>                 updates.append(result)
>             finished= defer.DeferredList( updates )\
>                 .addCallback( self.deferred_list_finish )
>         else:
>             d= defer.Deferred()
>             self.deferred_list_finish( d )
>
>     def _action_error( self , raised ):
>         log.debug("%s._action_error" % self.__class__.__name__ )
>         self.set_processing_status( False )
>         if isinstance( raised.value , database.DbRollback ):
>             print "DB Rollback"
>             raise raised
>         elif isinstance( raised.value , database.DbRollbackOk ):
>             print "DB Rollback ok"
>         else:
>             raise raised
>
>
> AnalyzeLinksService= _AnalyzeLinksService()
>
>
> class AnalyzeLinksService_Service(internet.TimerService):
>     def __init__( self , dbConfigHash=None ):
>         internet.TimerService.__init__( self,
>             CHECK_PERIOD__IMPORT ,
>             AnalyzeLinksService.action
>         )
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python



From twisted-python at 2xlp.com  Wed Sep 26 15:21:26 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 17:21:26 -0400
Subject: [Twisted-Python] deferred releasing too many tokens
In-Reply-To: <CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>
References: <2F3BD27C-59DC-41DE-B506-797E96E7F5A0@conundrum.com>
	<CAOp9P3pxPypiBr-DbfC13pF+BwOAptCiu-Nc1=ApC=LNMKevTA@mail.gmail.com>
	<365B9533-5081-47C8-BE0E-310C0D429BE3@conundrum.com>
	<CAOp9P3pbrsaAtDkUFF1GycGL6pPPijj4fW9tjeNnv-0YCtNL8w@mail.gmail.com>
	<CAOp9P3qy3d2Z_BzV8Agq5O_vNouKubNVH1utEgtNYSSjEh_hdw@mail.gmail.com>
	<FB8822F3-9935-48BB-8FF7-5B895D014CE9@conundrum.com>
	<20120924203621.6670.1037580164.divmod.xquotient.40@localhost6.localdomain6>
	<9C3AD5FD-86DD-40E2-8408-35748DC42017@conundrum.com>
	<7C63B99B-FC67-43BD-941E-FCED68FAADC5@2xlp.com>
	<CAFPU7=v3fPb+oEP3AvnsXVaAP1QvxNR1pFN-5NySK-EPcgMQiw@mail.gmail.com>
Message-ID: <61F933A3-274E-4DDD-8FA5-550D4A16BBF9@2xlp.com>

oooh!

thanks.  I'm going to try and reimplement with that right now!

On Sep 26, 2012, at 5:09 PM, Stephen Thorne wrote:

> This is a better way of using DeferredSemaphore:
> 
>    def queue_thread( self , data=None ):
>        self.queued_data= data
>        return self.semaphoreService.run( self._T_to_thread )
> 
> It handles acquisition and release for you. This will avoid any code
> path that might result in a double-release.




From twisted-python at 2xlp.com  Wed Sep 26 17:46:32 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 19:46:32 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
Message-ID: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>

while migrating some functionality to a deferred callback chain and debugging my app, i noticed this oddity...

if a function doesn't have the proper args/kwargs definition, no error is raised and everything just hangs

for example, if i have these 2 class functions in an internet.TimerService managed class ...

     def start_chain( self ):
        database.get_dbPool().runInteraction( self.get_update_batch )\
            .addCallback( self.process_batch )

   def get_update_batch(self):
        return True

and then improperly don't have an arg to capture the return value in the callback...

     def process_batch( self ):
         pass

then the reactor just seems to hang.

if i kill the process, then the Unhandled Error and Traceback message prints.
If i wait until the next interval that the timerservice runs, then the Unhandled Error and Traceback message will print then ( but that could be minutes/hours later ).  

has anyone else noticed this before ? 

are there any good ways around this , other than setting the timer service to be within seconds during bugtesting ?


From itamar at futurefoundries.com  Wed Sep 26 18:20:46 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Wed, 26 Sep 2012 20:20:46 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
Message-ID: <CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>

On Wed, Sep 26, 2012 at 7:46 PM, Jonathan Vanasco
<twisted-python at 2xlp.com>wrote:

> while migrating some functionality to a deferred callback chain and
> debugging my app, i noticed this oddity...
>
> if a function doesn't have the proper args/kwargs definition, no error is
> raised and everything just hangs
>
> ...


> then the reactor just seems to hang.
>
> if i kill the process, then the Unhandled Error and Traceback message
> prints.
> If i wait until the next interval that the timerservice runs, then the
> Unhandled Error and Traceback message will print then ( but that could be
> minutes/hours later ).
>
> has anyone else noticed this before ?
>

The reactor isn't hanging, it's running just fine. The problem is you
expect the Deferred's error to be logged immediately, which is not
guaranteed; the error is only logged if the object is garbage collected,
which may take a while, or never happen if you've kept extra references
around. The latter can happen by accident.


> are there any good ways around this , other than setting the timer service
> to be within seconds during bugtesting ?
>

   1. Add a logging errback to all Deferreds at the end of the callback
   chain: d.addErrback(log.err).
   2. Less effective, but also helpful, is making sure you delete all
   unnecessary references to a Deferred once you've fired it, to make sure it
   gets garbage collected:

   self.d.callback(None)
   del self.d # remove extra reference that prevents garbage collection

http://bit.ly/NS6ptj explains the issue.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120926/93b3a54b/attachment.html>

From twisted-python at 2xlp.com  Wed Sep 26 20:47:06 2012
From: twisted-python at 2xlp.com (Jonathan Vanasco)
Date: Wed, 26 Sep 2012 22:47:06 -0400
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
In-Reply-To: <CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
Message-ID: <79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>

thanks so much for the quick response, and i wish i thought of looking in the FAQ ( just searched online, and nothing relevant came up )

Will defer.setDebugging(True) make these errors print/log sooner ?   i'm in the process of getting all the addErrback() commands and making this app "proper", which is how i found this out in the first place.  


On Sep 26, 2012, at 8:20 PM, Itamar Turner-Trauring wrote:

> On Wed, Sep 26, 2012 at 7:46 PM, Jonathan Vanasco <twisted-python at 2xlp.com> wrote:
> while migrating some functionality to a deferred callback chain and debugging my app, i noticed this oddity...
> 
> if a function doesn't have the proper args/kwargs definition, no error is raised and everything just hangs
> 
> ...
>  
> then the reactor just seems to hang.
> 
> if i kill the process, then the Unhandled Error and Traceback message prints.
> If i wait until the next interval that the timerservice runs, then the Unhandled Error and Traceback message will print then ( but that could be minutes/hours later ).
> 
> has anyone else noticed this before ?
> 
> The reactor isn't hanging, it's running just fine. The problem is you expect the Deferred's error to be logged immediately, which is not guaranteed; the error is only logged if the object is garbage collected, which may take a while, or never happen if you've kept extra references around. The latter can happen by accident.
>  
> are there any good ways around this , other than setting the timer service to be within seconds during bugtesting ?
> 	• Add a logging errback to all Deferreds at the end of the callback chain: d.addErrback(log.err).
> 	• Less effective, but also helpful, is making sure you delete all unnecessary references to a Deferred once you've fired it, to make sure it gets garbage collected:
>    self.d.callback(None)
>    del self.d # remove extra reference that prevents garbage collection
> 
> http://bit.ly/NS6ptj explains the issue.
> 
> -- 
> Itamar Turner-Trauring, Future Foundries LLC
> http://futurefoundries.com/ — Twisted consulting, training and support.
> 
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python

// Jonathan Vanasco

c. 646.729.6436  |  415.501.9815
e. jonathan at 2xlp.com
w. http://findmeon.com/user/jvanasco 
linkedin. http://linkedin.com/in/jonathanvanasco
blog. http://destructuring.net




From p.mayers at imperial.ac.uk  Thu Sep 27 05:15:55 2012
From: p.mayers at imperial.ac.uk (Phil Mayers)
Date: Thu, 27 Sep 2012 12:15:55 +0100
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
Message-ID: <5064356B.3060903@imperial.ac.uk>

On 27/09/12 03:47, Jonathan Vanasco wrote:
> thanks so much for the quick response, and i wish i thought of
> looking in the FAQ ( just searched online, and nothing relevant came
> up )
>
> Will defer.setDebugging(True) make these errors print/log sooner ?

I don't think so. I think you'll just get more info in the error.

You could using a "loopingcall" to call gc.collect() periodically but 
it's hacky, and only helps with things you've cleared all refs to. If 
you've got a dangling ref, it'll just never get gc'ed.

> i'm in the process of getting all the addErrback() commands and

That's your better option.



From poalman at gmail.com  Thu Sep 27 06:08:18 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Thu, 27 Sep 2012 13:08:18 +0100
Subject: [Twisted-Python] dynamic FTP realm
Message-ID: <CACgdh2i0iqcWXAUPsypaONnk1M800d1HTiXYWpB-dLXXjetYFw@mail.gmail.com>

I'm very new to twisted (I've only just started using it, so I apologise if
anything I ask is seemingly obvious!).

I'm looking to try and set up a FTP server which will serve a file
structure and files which don't exists on the server (the file structure
information is stored on cassandra, and the files are on s3). The file
structure and files will also be unique to the user, so different logins
will generate the file structure for that particular user, but I guess I
can adress that later.

firstly is this possible?

I imagine there will be some methods for listing folders, and listing files
that I can override and in there I can make a request to get the list and
return it.

I found this<http://twistedmatrix.com/documents/current/core/examples/ftpserver.py>
example
of a ftp server but I can't seem to find out how I can override or change
FTPRealm to alter how it lists files/folders.

Any advice or pointers to some ftp tutorials would be hugely appreciated,

Many thanks!

Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120927/4db1ce85/attachment-0001.html>

From rutt.4 at osu.edu  Thu Sep 27 20:41:36 2012
From: rutt.4 at osu.edu (Benjamin Rutt)
Date: Thu, 27 Sep 2012 22:41:36 -0400
Subject: [Twisted-Python] MemoryError in twisted causes the program to exit,
	or not
Message-ID: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>

Hi, I am trying to understand what will happen in my long-running twisted
server program when the available memory is low.

If I run the following program with increasing numeric seeds as arguments,
0, 1, 2, 3, 4, … , some of the time the out of memory condition will crash
and exit the program right away (when the MemoryError is raised inside
twisted core code), and other times it will just carry on with an
UnhandledError (if the MemoryError is raised inside my hi() function below).

Sample code:

---
#!/usr/bin/env python

import sys, resource, random, traceback

from twisted.internet         import reactor

resource.setrlimit(resource.RLIMIT_AS, (180 * 1024 * 1024,
resource.RLIM_INFINITY))

data = []
random.seed(int(sys.argv[1]))

def hi():
    data.append('x' * random.randint(1, 10000))
    reactor.callLater(0, hi)

def main():
    reactor.callLater(0, hi)

reactor.callWhenRunning(main)
reactor.run()
 ---

I am using python 2.7.1, twisted 11.0.0.

Sample runs follow:

bash$ n=0; while true; do echo "starting rep $n"; ./twisted-oom.py $n;
n=$(($n+1)); echo; done
starting rep 0
Traceback (most recent call last):
  File “./twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1177, in mainLoop
    log.err()
  File "/sw/external/twisted-py27-11.0.0/lib/python/twisted/python/log.py",
line 197, in err
    _stuff = failure.Failure()
MemoryError

starting rep 1
Traceback (most recent call last):
  File ". /twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1177, in mainLoop
    log.err()
MemoryError

starting rep 2
Unhandled Error
Traceback (most recent call last):
  File "./twisted-oom.py", line 21, in <module>
    reactor.run()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1162, in run
    self.mainLoop()
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 1171, in mainLoop
    self.runUntilCurrent()
--- <exception caught here> ---
  File
"/sw/external/twisted-py27-11.0.0/lib/python/twisted/internet/base.py",
line 793, in runUntilCurrent
    call.func(*call.args, **call.kw)
  File "/home/ruttbe/dev/oneoff/twisted-oom.py", line 14, in hi
    data.append('x' * random.randint(1, 10000))
exceptions.MemoryError:

On the first two runs, the program exited quickly, but on the last rep
("starting rep 2"), it just carried on running with the reactor still
running.  It would be nice if there was a way to make the out of memory
behavior consistent, so I would know that it would either always carry on
running with a MemoryError stack trace, or always crash out and end the
program.  Maybe runUntilCurrent should not catch MemoryError from user code
and should let it propagate out?  Also wondering if there are other
different behaviors in other areas of the code (such as callbacks into user
code such as dataReceived, outReceived, lineReceived, etc.).  i.e. is the
observed behavior (that MemoryError in user code is caught and MemoryError
in twisted core is not) intentional, or an accident?

Thanks,
-- 
Benjamin Rutt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120927/d6b78e3d/attachment-0001.html>

From glyph at twistedmatrix.com  Fri Sep 28 01:09:23 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 00:09:23 -0700
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
In-Reply-To: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
Message-ID: <30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>


Le Sep 27, 2012 à 7:41 PM, Benjamin Rutt <rutt.4 at osu.edu> a écrit :

> Hi, I am trying to understand what will happen in my long-running twisted server program when the available memory is low. 

Probably nothing good.

> If I run the following program with increasing numeric seeds as arguments, 0, 1, 2, 3, 4, … , some of the time the out of memory condition will crash and exit the program right away (when the MemoryError is raised inside twisted core code), and other times it will just carry on with an UnhandledError (if the MemoryError is raised inside my hi() function below).

Yes.

Resource exhaustion testing is tough, especially in Python, where literally every function call may (non-deterministically) allocate memory.  MemoryError is an exception that you may see at any time, in any context, without warning.  Most notably you may encounter a MemoryError when attempting to handle a MemoryError and there's not much you can do about it at that point.

Ostensibly, Twisted could deal with this "better" by special-casing MemoryError in top-level error handlers and falling through to exit, rather than attempting to log; but, in cases where only a localized area is experiencing memory pressure and the exception causes cleanup to happen correctly, this would overzealously exit your service even in cases where it could recover.

So: don't exhaust your available memory.  It will cause a lot of unpredictable problems.

If you have a better idea for how Twisted might handle this generally though, I'm happy to hear it :).

-glyph

-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120928/2155abce/attachment.html>

From solipsis at pitrou.net  Fri Sep 28 02:10:23 2012
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 28 Sep 2012 10:10:23 +0200
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
Message-ID: <20120928101023.431999a7@pitrou.net>

On Fri, 28 Sep 2012 00:09:23 -0700
Glyph <glyph at twistedmatrix.com> wrote:
> 
> Le Sep 27, 2012 à 7:41 PM, Benjamin Rutt <rutt.4 at osu.edu> a écrit :
> 
> > Hi, I am trying to understand what will happen in my long-running twisted server program when the available memory is low. 
> 
> Probably nothing good.
> 
> > If I run the following program with increasing numeric seeds as arguments, 0, 1, 2, 3, 4, … , some of the time the out of memory condition will crash and exit the program right away (when the MemoryError is raised inside twisted core code), and other times it will just carry on with an UnhandledError (if the MemoryError is raised inside my hi() function below).
> 
> Yes.
> 
> Ostensibly, Twisted could deal with this "better" by special-casing MemoryError in top-level error handlers and falling through to exit, rather than attempting to log; but, in cases where only a localized area is experiencing memory pressure and the exception causes cleanup to happen correctly, this would overzealously exit your service even in cases where it could recover.

I agree this would be unwelcome behaviour.

> If you have a better idea for how Twisted might handle this generally though, I'm happy to hear it :).

Calling gc.collect() might improve things, temporarily or not, in some
contexts. Perhaps enough to be able to log the error, so that the
developer isn't left without a clue.

(whether Python itself should try to GC-collect when MemoryError is
raised is an open question)

Regards

Antoine.


-- 
Software development and contracting: http://pro.pitrou.net





From tom.sheffler at gmail.com  Fri Sep 28 08:32:43 2012
From: tom.sheffler at gmail.com (Tom Sheffler)
Date: Fri, 28 Sep 2012 07:32:43 -0700
Subject: [Twisted-Python] dynamic FTP realm
Message-ID: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>

Hi Paul -

I'm very new to twisted (I've only just started using it, so I apologise if
> anything I ask is seemingly obvious!).
> I'm looking to try and set up a FTP server which will serve a file
> structure and files which don't exists on the server (the file structure
> information is stored on cassandra, and the files are on s3). The file
> structure and files will also be unique to the user, so different logins
> will generate the file structure for that particular user, but I guess I
> can adress that later.



Here is a quick sketch of some of the steps ... but beware, I haven't
debugged this.  You'll want to subclass twisted.protocols.ftp.FTPShell with
a new command interpreter

    class PaulsFTPShell(FTPShell):
        ....

The you'll need to write a Realm that returns an instance of your FTP Shell:

class PaulsFTPRealm(FTPRealm):
    """
    @type anonymousRoot: L{twisted.python.filepath.FilePath}
    @ivar anonymousRoot: Root of the filesystem to which anonymous
    users will be granted access.
    """
    implements(portal.IRealm)

    def __init__(self, ....)
        ....

    def requestAvatar(self, avatarId, mind, *interfaces):
        for iface in interfaces:
            if iface is IFTPShell:
                if avatarId is checkers.ANONYMOUS:
                    avatar = None
                else:
                    avatar = PaulsFTPShell( ...)

                return IFTPShell, avatar, getattr(avatar, 'logout', lambda:
None)
        raise NotImplementedError("Only IFTPShell interface is supported by
this realm")


Then you'll stich it all together like this:


    f = FTPFactory()
    r = PaulsFTPRealm()
    p = Portal.Portal(r)
    p.registerChecker(...)

    f.portal = p

Hope this helps get you started.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120928/99670c1b/attachment.html>

From exarkun at twistedmatrix.com  Fri Sep 28 11:16:14 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Fri, 28 Sep 2012 17:16:14 -0000
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
 logging ?
In-Reply-To: <5064356B.3060903@imperial.ac.uk>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
	<5064356B.3060903@imperial.ac.uk>
Message-ID: <20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>

On 27 Sep, 11:15 am, p.mayers at imperial.ac.uk wrote:
>On 27/09/12 03:47, Jonathan Vanasco wrote:
>>thanks so much for the quick response, and i wish i thought of
>>looking in the FAQ ( just searched online, and nothing relevant came
>>up )
>>
>>Will defer.setDebugging(True) make these errors print/log sooner ?
>
>I don't think so. I think you'll just get more info in the error.
>
>You could using a "loopingcall" to call gc.collect() periodically but

Please, no one ever do this.

Jean-Paul



From glyph at twistedmatrix.com  Fri Sep 28 11:29:47 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 10:29:47 -0700
Subject: [Twisted-Python] unhandled exception in deferred has a delayed
	logging ?
In-Reply-To: <20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>
References: <FC8FA2DC-1D0A-436E-8AFA-431F94A500FC@2xlp.com>
	<CAOp9P3qeZd45ckvkKCWDDS8GXeToZo4T+FKmNtS83mLHov_rbg@mail.gmail.com>
	<79DEDF8C-7918-4209-8849-CC04F5DFE6BE@2xlp.com>
	<5064356B.3060903@imperial.ac.uk>
	<20120928171614.5616.1855369404.divmod.xquotient.4@localhost6.localdomain6>
Message-ID: <D5481DE3-BDA0-4BCF-A56C-7CCA25545980@twistedmatrix.com>


Le Sep 28, 2012 à 10:16 AM, exarkun at twistedmatrix.com a écrit :

> On 27 Sep, 11:15 am, p.mayers at imperial.ac.uk wrote:
>> On 27/09/12 03:47, Jonathan Vanasco wrote:
>>> thanks so much for the quick response, and i wish i thought of
>>> looking in the FAQ ( just searched online, and nothing relevant came
>>> up )
>>> 
>>> Will defer.setDebugging(True) make these errors print/log sooner ?
>> 
>> I don't think so. I think you'll just get more info in the error.
>> 
>> You could using a "loopingcall" to call gc.collect() periodically but
> 
> Please, no one ever do this.

In the spirit of socratic inquiry, why not?

-glyph


From glyph at twistedmatrix.com  Fri Sep 28 12:40:54 2012
From: glyph at twistedmatrix.com (Glyph)
Date: Fri, 28 Sep 2012 11:40:54 -0700
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
In-Reply-To: <20120928101023.431999a7@pitrou.net>
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
	<20120928101023.431999a7@pitrou.net>
Message-ID: <8CD9D1A3-4A05-4D52-AFCF-EED796999138@twistedmatrix.com>


Le Sep 28, 2012 à 1:10 AM, Antoine Pitrou <solipsis at pitrou.net> a écrit :

> (whether Python itself should try to GC-collect when MemoryError is
> raised is an open question)

Shouldn't it be doing a GC collect _before_ MemoryError is raised? (Isn't this rather the whole point of having a garbage collector?)

-glyph
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120928/ecdad52d/attachment-0001.html>

From solipsis at pitrou.net  Fri Sep 28 12:44:17 2012
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 28 Sep 2012 20:44:17 +0200
Subject: [Twisted-Python] MemoryError in twisted causes the program to
	exit, or not
References: <CAMWA1_oDnNCpWA-NuATdKQPREr1nALwBZrbTJ1-TCo18SkVPQw@mail.gmail.com>
	<30CAF791-9DAA-4D7A-8A62-8E32CA8711EF@twistedmatrix.com>
	<20120928101023.431999a7@pitrou.net>
	<8CD9D1A3-4A05-4D52-AFCF-EED796999138@twistedmatrix.com>
Message-ID: <20120928204417.30501919@pitrou.net>

On Fri, 28 Sep 2012 11:40:54 -0700
Glyph <glyph at twistedmatrix.com> wrote:
> 
> Le Sep 28, 2012 à 1:10 AM, Antoine Pitrou <solipsis at pitrou.net> a écrit :
> 
> > (whether Python itself should try to GC-collect when MemoryError is
> > raised is an open question)
> 
> Shouldn't it be doing a GC collect _before_ MemoryError is raised? (Isn't this rather the whole point of having a garbage collector?)

Indeed, it also could.

Regards

Antoine.

-- 
Software development and contracting: http://pro.pitrou.net





From a.rzadkowolski at gmail.com  Fri Sep 28 16:00:06 2012
From: a.rzadkowolski at gmail.com (Arkadiusz Rzadkowolski)
Date: Sat, 29 Sep 2012 00:00:06 +0200
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
Message-ID: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>

Hello everyone
I am currently working on creating a complex python script which will be
using connection pooling from redis-py library (it will be working as a
backport Unix Domain Socket for redis 1.4, which doesn't support unix
sockets)

The simplest version of my code was included in the attachment.

I have a problem thought. Even if traffic is high (500+ requests per
second) there are no new connections started to redis (added print to
connection.py to trace it).

Here's my output:
2012-09-28 23:00:31+0200 [-] Log opened.
2012-09-28 23:00:31+0200 [-] Factory starting on '/tmp/redis_test.sock'
2012-09-28 23:00:31+0200 [-] Starting factory
<twisted.internet.protocol.Factory instance at 0x1fc77a0>
2012-09-28 23:00:31+0200 [RedisWorkerProtocol,0,] New connection

After waiting 15 minutes, nothing more has been shown.

Requests work just fine and always get a reply. I am curious though, why my
code doesn't initiate more connections to redis? Could you please shed a
light on this issue? Is it my code, redis-py simply doesn't need more
connections, or twisted works in my code as "one connection at a
time"? Really appreciate your reply.

Thank you in advance and have a great weekend!

--
Best regards,
Arkadiusz Rz.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120929/a89cd224/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sock_test.py
Type: application/octet-stream
Size: 1462 bytes
Desc: not available
URL: </pipermail/twisted-python/attachments/20120929/a89cd224/attachment-0002.obj>

From itamar at futurefoundries.com  Fri Sep 28 19:28:09 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Fri, 28 Sep 2012 21:28:09 -0400
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
In-Reply-To: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
References: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
Message-ID: <CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>

One problem in the code: it kinda seems you want to receive lines, but
you're overriding dataReceived instead of lineReceived in
RedisWorkProtocol. At the very minimum you shouldn't assume dataReceived is
called with the exact bytes that were written on the other side.

More importantly, I assume redis-py is blocking. Calling a blocking API
from Twisted will block the reactor, preventing any other code from running
until it the API call returns. As such it means you can't have two queries
to redis running at the same time, unless you use something like
deferToThread, or a redis client that supports Twisted directly.

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120928/01fe17bb/attachment.html>

From poalman at gmail.com  Sat Sep 29 13:44:51 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Sat, 29 Sep 2012 20:44:51 +0100
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
Message-ID: <CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>

On 28 September 2012 15:32, Tom Sheffler <tom.sheffler at gmail.com> wrote:

> Hi Paul -
>
> I'm very new to twisted (I've only just started using it, so I apologise if
>> anything I ask is seemingly obvious!).
>> I'm looking to try and set up a FTP server which will serve a file
>> structure and files which don't exists on the server (the file structure
>> information is stored on cassandra, and the files are on s3). The file
>> structure and files will also be unique to the user, so different logins
>> will generate the file structure for that particular user, but I guess I
>> can adress that later.
>
>
>
> Here is a quick sketch of some of the steps ... but beware, I haven't
> debugged this.  You'll want to subclass twisted.protocols.ftp.FTPShell with
> a new command interpreter
>
>     class PaulsFTPShell(FTPShell):
>         ....
>
> The you'll need to write a Realm that returns an instance of your FTP
> Shell:
>
> class PaulsFTPRealm(FTPRealm):
>     """
>     @type anonymousRoot: L{twisted.python.filepath.FilePath}
>     @ivar anonymousRoot: Root of the filesystem to which anonymous
>     users will be granted access.
>     """
>     implements(portal.IRealm)
>
>     def __init__(self, ....)
>         ....
>
>     def requestAvatar(self, avatarId, mind, *interfaces):
>         for iface in interfaces:
>             if iface is IFTPShell:
>                 if avatarId is checkers.ANONYMOUS:
>                     avatar = None
>                 else:
>                     avatar = PaulsFTPShell( ...)
>
>                 return IFTPShell, avatar, getattr(avatar, 'logout',
> lambda: None)
>         raise NotImplementedError("Only IFTPShell interface is supported
> by this realm")
>
>
> Then you'll stich it all together like this:
>
>
>     f = FTPFactory()
>     r = PaulsFTPRealm()
>     p = Portal.Portal(r)
>     p.registerChecker(...)
>
>     f.portal = p
>
> Hope this helps get you started.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>

Thank you. I've made quite a bit of progress and now have my own Portal,
CredentialsChecker, Realm, Shell, and FilePath object.

One thing I haven't been able to work out is, when I override, lets say
listdir for example in FilePath, I need to make a webcall to find out the
folder contents, how can I make this call asynchronously?

I'm guessing I need to used deferred in someway, but seeing as listdir
doesn't return deferred objects I'm not sure how to make it work.

As listdir gets called from the Shell I guess I could change how blocking
calls in my FilePath object get called?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120929/85b0bdeb/attachment.html>

From exarkun at twistedmatrix.com  Sat Sep 29 14:21:49 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sat, 29 Sep 2012 20:21:49 -0000
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
Message-ID: <20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>

On 07:44 pm, poalman at gmail.com wrote:
>
>Thank you. I've made quite a bit of progress and now have my own 
>Portal,
>CredentialsChecker, Realm, Shell, and FilePath object.
>
>One thing I haven't been able to work out is, when I override, lets say
>listdir for example in FilePath, I need to make a webcall to find out 
>the
>folder contents, how can I make this call asynchronously?
>
>I'm guessing I need to used deferred in someway, but seeing as listdir
>doesn't return deferred objects I'm not sure how to make it work.
>
>As listdir gets called from the Shell I guess I could change how 
>blocking
>calls in my FilePath object get called?

The place to customize listing the contents of a directory is in the 
shell.  More specifically, in an implementation of IFTPShell.list.  It's 
almost certainly the case that you should *not* have a FilePath subclass 
with overridden methods.  Instead, you should have a `list` 
implementation on your shell that returns the desired results.  And 
since `IFTPShell.list` is allowed to return a Deferred, you no longer 
have a problem performing asynchronous operations.

Jean-Paul



From exarkun at twistedmatrix.com  Sat Sep 29 22:05:23 2012
From: exarkun at twistedmatrix.com (exarkun at twistedmatrix.com)
Date: Sun, 30 Sep 2012 04:05:23 -0000
Subject: [Twisted-Python] Weekly Bug Summary
Message-ID: 1348977923.82.1372464629@twistedmatrix.com

An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120930/7ecdab0c/attachment.html>

From a.rzadkowolski at gmail.com  Sun Sep 30 04:24:24 2012
From: a.rzadkowolski at gmail.com (Arkadiusz Rzadkowolski)
Date: Sun, 30 Sep 2012 12:24:24 +0200
Subject: [Twisted-Python] Twisted + Redis-py + Connection Pooling
In-Reply-To: <CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>
References: <CALK05+UwEuawTuDKtR5AdP=hgC_i_t3-MUWA7d2nZS_i=3rM3A@mail.gmail.com>
	<CAOp9P3qHHZ65-KM-DuMoZRwhtY_5wva_rgBcC=s0=cCqEj99Zg@mail.gmail.com>
Message-ID: <CALK05+X0UJLn1WmaVf7ogF+BODG0s_F8_VqKQTWACrfFusmAPQ@mail.gmail.com>

Thank you very much for your reply Itamar. I have switched to txredisapi
which is non-blocking library and my problem was solved.

2012/9/29 Itamar Turner-Trauring <itamar at futurefoundries.com>

> One problem in the code: it kinda seems you want to receive lines, but
> you're overriding dataReceived instead of lineReceived in
> RedisWorkProtocol. At the very minimum you shouldn't assume dataReceived is
> called with the exact bytes that were written on the other side.
>
> More importantly, I assume redis-py is blocking. Calling a blocking API
> from Twisted will block the reactor, preventing any other code from running
> until it the API call returns. As such it means you can't have two queries
> to redis running at the same time, unless you use something like
> deferToThread, or a redis client that supports Twisted directly.
>
> --
> Itamar Turner-Trauring, Future Foundries LLC
> http://futurefoundries.com/ — Twisted consulting, training and support.
>
>
> _______________________________________________
> Twisted-Python mailing list
> Twisted-Python at twistedmatrix.com
> http://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120930/937feb81/attachment.html>

From poalman at gmail.com  Sun Sep 30 06:38:57 2012
From: poalman at gmail.com (Paul Wiseman)
Date: Sun, 30 Sep 2012 13:38:57 +0100
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
	<20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
Message-ID: <CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>

On 29 September 2012 21:21, <exarkun at twistedmatrix.com> wrote:

> On 07:44 pm, poalman at gmail.com wrote:
> >
> >Thank you. I've made quite a bit of progress and now have my own
> >Portal,
> >CredentialsChecker, Realm, Shell, and FilePath object.
> >
> >One thing I haven't been able to work out is, when I override, lets say
> >listdir for example in FilePath, I need to make a webcall to find out
> >the
> >folder contents, how can I make this call asynchronously?
> >
> >I'm guessing I need to used deferred in someway, but seeing as listdir
> >doesn't return deferred objects I'm not sure how to make it work.
> >
> >As listdir gets called from the Shell I guess I could change how
> >blocking
> >calls in my FilePath object get called?
>
> The place to customize listing the contents of a directory is in the
> shell.  More specifically, in an implementation of IFTPShell.list.  It's
> almost certainly the case that you should *not* have a FilePath subclass
> with overridden methods.  Instead, you should have a `list`
> implementation on your shell that returns the desired results.  And
> since `IFTPShell.list` is allowed to return a Deferred, you no longer
> have a problem performing asynchronous operations.
>
> Jean-Paul
>
>
 That is likely a much better idea! Will I need to use some threading if
I'm making web calls then from list? Presumably if I don't the whole
process will block while it's waiting for web responses?

I've seen there is a deferToThread but I'm not too sure how to use it, do I
just need to return it?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120930/5f69d5e3/attachment-0001.html>

From itamar at futurefoundries.com  Sun Sep 30 06:59:30 2012
From: itamar at futurefoundries.com (Itamar Turner-Trauring)
Date: Sun, 30 Sep 2012 08:59:30 -0400
Subject: [Twisted-Python] dynamic FTP realm
In-Reply-To: <CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>
References: <CAMBtMcudNicacdOA4rPiU9rq4iXtiDoZMwOmBziEfs4R5yr52g@mail.gmail.com>
	<CACgdh2iK5BAF3NYJVtFRvx33CuAFYkAd2Br0AdpcNuFsxiF3jQ@mail.gmail.com>
	<20120929202149.5616.2099791274.divmod.xquotient.9@localhost6.localdomain6>
	<CACgdh2igOHs3HrELQfLRuoRAfQLr_VOdL+Tbq6j5O7FHHwG=TQ@mail.gmail.com>
Message-ID: <CAOp9P3qQeou_vGz07k-750YeLdPaT8d3QwRsLLuuzmtV_oTLRw@mail.gmail.com>

On Sun, Sep 30, 2012 at 8:38 AM, Paul Wiseman <poalman at gmail.com> wrote:

>
>  That is likely a much better idea! Will I need to use some threading if
> I'm making web calls then from list? Presumably if I don't the whole
> process will block while it's waiting for web responses?
>

If you're using Twisted's web clients (getPage or the more complex but
superior Agent) you do not need threads, Twisted will do the networking in
a non-blocking manner. E.g.

def list(self, path):
    return
twisted.web.client.getPage(...).addCallback(convertHTTPResponseToFTPListing)

-- 
Itamar Turner-Trauring, Future Foundries LLC
http://futurefoundries.com/ — Twisted consulting, training and support.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: </pipermail/twisted-python/attachments/20120930/57f448f9/attachment.html>

